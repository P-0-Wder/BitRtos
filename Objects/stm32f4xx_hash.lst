ARM GAS  /tmp/ccipRlnd.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_hash.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HASH_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	HASH_DeInit
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	HASH_DeInit:
  27              	.LFB123:
  28              		.file 1 "FWLIB/src/stm32f4xx_hash.c"
   1:FWLIB/src/stm32f4xx_hash.c **** /**
   2:FWLIB/src/stm32f4xx_hash.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_hash.c ****   * @file    stm32f4xx_hash.c
   4:FWLIB/src/stm32f4xx_hash.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_hash.c ****   * @version V1.8.0
   6:FWLIB/src/stm32f4xx_hash.c ****   * @date    04-November-2016
   7:FWLIB/src/stm32f4xx_hash.c ****   * @brief   This file provides firmware functions to manage the following 
   8:FWLIB/src/stm32f4xx_hash.c ****   *          functionalities of the HASH / HMAC Processor (HASH) peripheral:           
   9:FWLIB/src/stm32f4xx_hash.c ****   *           - Initialization and Configuration functions
  10:FWLIB/src/stm32f4xx_hash.c ****   *           - Message Digest generation functions
  11:FWLIB/src/stm32f4xx_hash.c ****   *           - context swapping functions   
  12:FWLIB/src/stm32f4xx_hash.c ****   *           - DMA interface function       
  13:FWLIB/src/stm32f4xx_hash.c ****   *           - Interrupts and flags management       
  14:FWLIB/src/stm32f4xx_hash.c ****   *         
  15:FWLIB/src/stm32f4xx_hash.c **** @verbatim
  16:FWLIB/src/stm32f4xx_hash.c ****  ===================================================================      
  17:FWLIB/src/stm32f4xx_hash.c ****                  ##### How to use this driver #####
  18:FWLIB/src/stm32f4xx_hash.c ****  ===================================================================
  19:FWLIB/src/stm32f4xx_hash.c ****             
  20:FWLIB/src/stm32f4xx_hash.c ****  *** HASH operation : *** 
  21:FWLIB/src/stm32f4xx_hash.c ****  ========================                 
  22:FWLIB/src/stm32f4xx_hash.c ****  [..]
  23:FWLIB/src/stm32f4xx_hash.c ****    (#) Enable the HASH controller clock using 
  24:FWLIB/src/stm32f4xx_hash.c ****        RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_HASH, ENABLE) function.
  25:FWLIB/src/stm32f4xx_hash.c ****              
  26:FWLIB/src/stm32f4xx_hash.c ****    (#) Initialize the HASH using HASH_Init() function. 
  27:FWLIB/src/stm32f4xx_hash.c ****                  
  28:FWLIB/src/stm32f4xx_hash.c ****    (#) Reset the HASH processor core, so that the HASH will be ready 
  29:FWLIB/src/stm32f4xx_hash.c ****        to compute he message digest of a new message by using HASH_Reset() function.
  30:FWLIB/src/stm32f4xx_hash.c ****   
ARM GAS  /tmp/ccipRlnd.s 			page 2


  31:FWLIB/src/stm32f4xx_hash.c ****    (#) Enable the HASH controller using the HASH_Cmd() function. 
  32:FWLIB/src/stm32f4xx_hash.c ****                   
  33:FWLIB/src/stm32f4xx_hash.c ****    (#) if using DMA for Data input transfer, Activate the DMA Request 
  34:FWLIB/src/stm32f4xx_hash.c ****        using HASH_DMACmd() function 
  35:FWLIB/src/stm32f4xx_hash.c ****                       
  36:FWLIB/src/stm32f4xx_hash.c ****    (#) if DMA is not used for data transfer, use HASH_DataIn() function 
  37:FWLIB/src/stm32f4xx_hash.c ****        to enter data to IN FIFO.
  38:FWLIB/src/stm32f4xx_hash.c ****                
  39:FWLIB/src/stm32f4xx_hash.c ****             
  40:FWLIB/src/stm32f4xx_hash.c ****    (#) Configure the Number of valid bits in last word of the message 
  41:FWLIB/src/stm32f4xx_hash.c ****        using HASH_SetLastWordValidBitsNbr() function.
  42:FWLIB/src/stm32f4xx_hash.c ****                
  43:FWLIB/src/stm32f4xx_hash.c ****    (#) if the message length is not an exact multiple of 512 bits, 
  44:FWLIB/src/stm32f4xx_hash.c ****        then the function HASH_StartDigest() must be called to launch the computation
  45:FWLIB/src/stm32f4xx_hash.c ****        of the final digest.     
  46:FWLIB/src/stm32f4xx_hash.c ****                
  47:FWLIB/src/stm32f4xx_hash.c ****    (#) Once computed, the digest can be read using HASH_GetDigest() function.         
  48:FWLIB/src/stm32f4xx_hash.c ****                      
  49:FWLIB/src/stm32f4xx_hash.c ****    (#) To control HASH events you can use one of the following wo methods:
  50:FWLIB/src/stm32f4xx_hash.c ****        (++) Check on HASH flags using the HASH_GetFlagStatus() function.  
  51:FWLIB/src/stm32f4xx_hash.c ****        (++) Use HASH interrupts through the function HASH_ITConfig() at 
  52:FWLIB/src/stm32f4xx_hash.c ****             initialization phase and HASH_GetITStatus() function into 
  53:FWLIB/src/stm32f4xx_hash.c ****             interrupt routines in hashing phase.
  54:FWLIB/src/stm32f4xx_hash.c ****             After checking on a flag you should clear it using HASH_ClearFlag()
  55:FWLIB/src/stm32f4xx_hash.c ****             function. And after checking on an interrupt event you should 
  56:FWLIB/src/stm32f4xx_hash.c ****             clear it using HASH_ClearITPendingBit() function.     
  57:FWLIB/src/stm32f4xx_hash.c ****                        
  58:FWLIB/src/stm32f4xx_hash.c ****    (#) Save and restore hash processor context using 
  59:FWLIB/src/stm32f4xx_hash.c ****        HASH_SaveContext() and HASH_RestoreContext() functions.     
  60:FWLIB/src/stm32f4xx_hash.c ****                 
  61:FWLIB/src/stm32f4xx_hash.c ****   
  62:FWLIB/src/stm32f4xx_hash.c ****               
  63:FWLIB/src/stm32f4xx_hash.c ****  *** HMAC operation : *** 
  64:FWLIB/src/stm32f4xx_hash.c ****  ========================
  65:FWLIB/src/stm32f4xx_hash.c ****  [..] The HMAC algorithm is used for message authentication, by 
  66:FWLIB/src/stm32f4xx_hash.c ****       irreversibly binding the message being processed to a key chosen 
  67:FWLIB/src/stm32f4xx_hash.c ****       by the user. 
  68:FWLIB/src/stm32f4xx_hash.c ****       For HMAC specifications, refer to "HMAC: keyed-hashing for message 
  69:FWLIB/src/stm32f4xx_hash.c ****       authentication, H. Krawczyk, M. Bellare, R. Canetti, February 1997"
  70:FWLIB/src/stm32f4xx_hash.c ****             
  71:FWLIB/src/stm32f4xx_hash.c ****  [..] Basically, the HMAC algorithm consists of two nested hash operations:
  72:FWLIB/src/stm32f4xx_hash.c ****       HMAC(message) = Hash[((key | pad) XOR 0x5C) | Hash(((key | pad) XOR 0x36) | message)]
  73:FWLIB/src/stm32f4xx_hash.c ****       where:
  74:FWLIB/src/stm32f4xx_hash.c ****       (+) "pad" is a sequence of zeroes needed to extend the key to the 
  75:FWLIB/src/stm32f4xx_hash.c ****           length of the underlying hash function data block (that is 
  76:FWLIB/src/stm32f4xx_hash.c ****           512 bits for both the SHA-1 and MD5 hash algorithms)
  77:FWLIB/src/stm32f4xx_hash.c ****       (+) "|"   represents the concatenation operator 
  78:FWLIB/src/stm32f4xx_hash.c ****             
  79:FWLIB/src/stm32f4xx_hash.c ****            
  80:FWLIB/src/stm32f4xx_hash.c ****  [..]To compute the HMAC, four different phases are required:                  
  81:FWLIB/src/stm32f4xx_hash.c ****    (#) Initialize the HASH using HASH_Init() function to do HMAC 
  82:FWLIB/src/stm32f4xx_hash.c ****        operation. 
  83:FWLIB/src/stm32f4xx_hash.c ****                   
  84:FWLIB/src/stm32f4xx_hash.c ****    (#) The key (to be used for the inner hash function) is then given to the core. 
  85:FWLIB/src/stm32f4xx_hash.c ****        This operation follows the same mechanism as the one used to send the 
  86:FWLIB/src/stm32f4xx_hash.c ****        message in the hash operation (that is, by HASH_DataIn() function and, 
  87:FWLIB/src/stm32f4xx_hash.c ****        finally, HASH_StartDigest() function.
ARM GAS  /tmp/ccipRlnd.s 			page 3


  88:FWLIB/src/stm32f4xx_hash.c ****             
  89:FWLIB/src/stm32f4xx_hash.c ****    (#) Once the last word has been entered and computation has started, 
  90:FWLIB/src/stm32f4xx_hash.c ****        the hash processor elaborates the key. It is then ready to accept the message
  91:FWLIB/src/stm32f4xx_hash.c ****        text using the same mechanism as the one used to send the message in the
  92:FWLIB/src/stm32f4xx_hash.c ****        hash operation.
  93:FWLIB/src/stm32f4xx_hash.c ****          
  94:FWLIB/src/stm32f4xx_hash.c ****    (#) After the first hash round, the hash processor returns "ready" to indicate 
  95:FWLIB/src/stm32f4xx_hash.c ****        that it is ready to receive the key to be used for the outer hash function 
  96:FWLIB/src/stm32f4xx_hash.c ****        (normally, this key is the same as the one used for the inner hash function). 
  97:FWLIB/src/stm32f4xx_hash.c ****        When the last word of the key is entered and computation starts, the HMAC 
  98:FWLIB/src/stm32f4xx_hash.c ****        result is made available using HASH_GetDigest() function.
  99:FWLIB/src/stm32f4xx_hash.c **** 
 100:FWLIB/src/stm32f4xx_hash.c **** @endverbatim
 101:FWLIB/src/stm32f4xx_hash.c ****   *         
 102:FWLIB/src/stm32f4xx_hash.c ****   ******************************************************************************
 103:FWLIB/src/stm32f4xx_hash.c ****   * @attention
 104:FWLIB/src/stm32f4xx_hash.c ****   *
 105:FWLIB/src/stm32f4xx_hash.c ****   * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
 106:FWLIB/src/stm32f4xx_hash.c ****   *
 107:FWLIB/src/stm32f4xx_hash.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
 108:FWLIB/src/stm32f4xx_hash.c ****   * You may not use this file except in compliance with the License.
 109:FWLIB/src/stm32f4xx_hash.c ****   * You may obtain a copy of the License at:
 110:FWLIB/src/stm32f4xx_hash.c ****   *
 111:FWLIB/src/stm32f4xx_hash.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
 112:FWLIB/src/stm32f4xx_hash.c ****   *
 113:FWLIB/src/stm32f4xx_hash.c ****   * Unless required by applicable law or agreed to in writing, software 
 114:FWLIB/src/stm32f4xx_hash.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
 115:FWLIB/src/stm32f4xx_hash.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 116:FWLIB/src/stm32f4xx_hash.c ****   * See the License for the specific language governing permissions and
 117:FWLIB/src/stm32f4xx_hash.c ****   * limitations under the License.
 118:FWLIB/src/stm32f4xx_hash.c ****   *
 119:FWLIB/src/stm32f4xx_hash.c ****   ******************************************************************************  
 120:FWLIB/src/stm32f4xx_hash.c ****   */
 121:FWLIB/src/stm32f4xx_hash.c **** 
 122:FWLIB/src/stm32f4xx_hash.c **** /* Includes ------------------------------------------------------------------*/
 123:FWLIB/src/stm32f4xx_hash.c **** #include "stm32f4xx_hash.h"
 124:FWLIB/src/stm32f4xx_hash.c **** #include "stm32f4xx_rcc.h"
 125:FWLIB/src/stm32f4xx_hash.c **** 
 126:FWLIB/src/stm32f4xx_hash.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 127:FWLIB/src/stm32f4xx_hash.c ****   * @{
 128:FWLIB/src/stm32f4xx_hash.c ****   */
 129:FWLIB/src/stm32f4xx_hash.c **** 
 130:FWLIB/src/stm32f4xx_hash.c **** /** @defgroup HASH 
 131:FWLIB/src/stm32f4xx_hash.c ****   * @brief HASH driver modules
 132:FWLIB/src/stm32f4xx_hash.c ****   * @{
 133:FWLIB/src/stm32f4xx_hash.c ****   */ 
 134:FWLIB/src/stm32f4xx_hash.c **** 
 135:FWLIB/src/stm32f4xx_hash.c **** /* Private typedef -----------------------------------------------------------*/
 136:FWLIB/src/stm32f4xx_hash.c **** /* Private define ------------------------------------------------------------*/
 137:FWLIB/src/stm32f4xx_hash.c **** /* Private macro -------------------------------------------------------------*/
 138:FWLIB/src/stm32f4xx_hash.c **** /* Private variables ---------------------------------------------------------*/
 139:FWLIB/src/stm32f4xx_hash.c **** /* Private function prototypes -----------------------------------------------*/
 140:FWLIB/src/stm32f4xx_hash.c **** /* Private functions ---------------------------------------------------------*/ 
 141:FWLIB/src/stm32f4xx_hash.c **** 
 142:FWLIB/src/stm32f4xx_hash.c **** /** @defgroup HASH_Private_Functions
 143:FWLIB/src/stm32f4xx_hash.c ****   * @{
 144:FWLIB/src/stm32f4xx_hash.c ****   */ 
ARM GAS  /tmp/ccipRlnd.s 			page 4


 145:FWLIB/src/stm32f4xx_hash.c **** 
 146:FWLIB/src/stm32f4xx_hash.c **** /** @defgroup HASH_Group1 Initialization and Configuration functions
 147:FWLIB/src/stm32f4xx_hash.c ****  *  @brief    Initialization and Configuration functions 
 148:FWLIB/src/stm32f4xx_hash.c ****  *
 149:FWLIB/src/stm32f4xx_hash.c **** @verbatim    
 150:FWLIB/src/stm32f4xx_hash.c ****  ===============================================================================
 151:FWLIB/src/stm32f4xx_hash.c ****               ##### Initialization and Configuration functions #####
 152:FWLIB/src/stm32f4xx_hash.c ****  ===============================================================================  
 153:FWLIB/src/stm32f4xx_hash.c ****  [..] This section provides functions allowing to 
 154:FWLIB/src/stm32f4xx_hash.c ****    (+) Initialize the HASH peripheral
 155:FWLIB/src/stm32f4xx_hash.c ****    (+) Configure the HASH Processor 
 156:FWLIB/src/stm32f4xx_hash.c ****    (+) MD5/SHA1, 
 157:FWLIB/src/stm32f4xx_hash.c ****    (+) HASH/HMAC, 
 158:FWLIB/src/stm32f4xx_hash.c ****    (+) datatype 
 159:FWLIB/src/stm32f4xx_hash.c ****    (+) HMAC Key (if mode = HMAC)
 160:FWLIB/src/stm32f4xx_hash.c ****    (+) Reset the HASH Processor 
 161:FWLIB/src/stm32f4xx_hash.c ****    
 162:FWLIB/src/stm32f4xx_hash.c **** @endverbatim
 163:FWLIB/src/stm32f4xx_hash.c ****   * @{
 164:FWLIB/src/stm32f4xx_hash.c ****   */
 165:FWLIB/src/stm32f4xx_hash.c ****   
 166:FWLIB/src/stm32f4xx_hash.c **** /**
 167:FWLIB/src/stm32f4xx_hash.c ****   * @brief  De-initializes the HASH peripheral registers to their default reset values
 168:FWLIB/src/stm32f4xx_hash.c ****   * @param  None
 169:FWLIB/src/stm32f4xx_hash.c ****   * @retval None
 170:FWLIB/src/stm32f4xx_hash.c ****   */
 171:FWLIB/src/stm32f4xx_hash.c **** void HASH_DeInit(void)
 172:FWLIB/src/stm32f4xx_hash.c **** {
  29              		.loc 1 172 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 08B5     		push	{r3, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 3, -8
  37              		.cfi_offset 14, -4
 173:FWLIB/src/stm32f4xx_hash.c ****   /* Enable HASH reset state */
 174:FWLIB/src/stm32f4xx_hash.c ****   RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, ENABLE);
  38              		.loc 1 174 3 view .LVU1
  39 0002 0121     		movs	r1, #1
  40 0004 2020     		movs	r0, #32
  41 0006 FFF7FEFF 		bl	RCC_AHB2PeriphResetCmd
  42              	.LVL0:
 175:FWLIB/src/stm32f4xx_hash.c ****   /* Release HASH from reset state */
 176:FWLIB/src/stm32f4xx_hash.c ****   RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, DISABLE);
  43              		.loc 1 176 3 view .LVU2
  44 000a 0021     		movs	r1, #0
  45 000c 2020     		movs	r0, #32
  46 000e FFF7FEFF 		bl	RCC_AHB2PeriphResetCmd
  47              	.LVL1:
 177:FWLIB/src/stm32f4xx_hash.c **** }
  48              		.loc 1 177 1 is_stmt 0 view .LVU3
  49 0012 08BD     		pop	{r3, pc}
  50              		.cfi_endproc
  51              	.LFE123:
  53              		.section	.text.HASH_Init,"ax",%progbits
ARM GAS  /tmp/ccipRlnd.s 			page 5


  54              		.align	1
  55              		.global	HASH_Init
  56              		.syntax unified
  57              		.thumb
  58              		.thumb_func
  59              		.fpu fpv4-sp-d16
  61              	HASH_Init:
  62              	.LVL2:
  63              	.LFB124:
 178:FWLIB/src/stm32f4xx_hash.c **** 
 179:FWLIB/src/stm32f4xx_hash.c **** /**
 180:FWLIB/src/stm32f4xx_hash.c ****   * @brief  Initializes the HASH peripheral according to the specified parameters
 181:FWLIB/src/stm32f4xx_hash.c ****   *         in the HASH_InitStruct structure.
 182:FWLIB/src/stm32f4xx_hash.c ****   * @note   the hash processor is reset when calling this function so that the
 183:FWLIB/src/stm32f4xx_hash.c ****   *         HASH will be ready to compute the message digest of a new message.
 184:FWLIB/src/stm32f4xx_hash.c ****   *         There is no need to call HASH_Reset() function.           
 185:FWLIB/src/stm32f4xx_hash.c ****   * @param  HASH_InitStruct: pointer to a HASH_InitTypeDef structure that contains
 186:FWLIB/src/stm32f4xx_hash.c ****   *         the configuration information for the HASH peripheral.
 187:FWLIB/src/stm32f4xx_hash.c ****   * @note   The field HASH_HMACKeyType in HASH_InitTypeDef must be filled only 
 188:FWLIB/src/stm32f4xx_hash.c ****   *          if the algorithm mode is HMAC.       
 189:FWLIB/src/stm32f4xx_hash.c ****   * @retval None
 190:FWLIB/src/stm32f4xx_hash.c ****   */
 191:FWLIB/src/stm32f4xx_hash.c **** void HASH_Init(HASH_InitTypeDef* HASH_InitStruct)
 192:FWLIB/src/stm32f4xx_hash.c **** {
  64              		.loc 1 192 1 is_stmt 1 view -0
  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 0
  67              		@ frame_needed = 0, uses_anonymous_args = 0
  68              		@ link register save eliminated.
  69              		.loc 1 192 1 is_stmt 0 view .LVU5
  70 0000 10B4     		push	{r4}
  71              	.LCFI1:
  72              		.cfi_def_cfa_offset 4
  73              		.cfi_offset 4, -4
 193:FWLIB/src/stm32f4xx_hash.c ****   /* Check the parameters */
 194:FWLIB/src/stm32f4xx_hash.c ****   assert_param(IS_HASH_ALGOSELECTION(HASH_InitStruct->HASH_AlgoSelection));
  74              		.loc 1 194 3 is_stmt 1 view .LVU6
 195:FWLIB/src/stm32f4xx_hash.c ****   assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  75              		.loc 1 195 3 view .LVU7
 196:FWLIB/src/stm32f4xx_hash.c ****   assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  76              		.loc 1 196 3 view .LVU8
 197:FWLIB/src/stm32f4xx_hash.c ****   
 198:FWLIB/src/stm32f4xx_hash.c ****   /* Configure the Algorithm used, algorithm mode and the datatype */
 199:FWLIB/src/stm32f4xx_hash.c ****   HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  77              		.loc 1 199 3 view .LVU9
  78              		.loc 1 199 12 is_stmt 0 view .LVU10
  79 0002 124A     		ldr	r2, .L7
  80 0004 1368     		ldr	r3, [r2]
  81 0006 23F48023 		bic	r3, r3, #262144
  82 000a 23F0F003 		bic	r3, r3, #240
  83 000e 1360     		str	r3, [r2]
 200:FWLIB/src/stm32f4xx_hash.c ****   HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
  84              		.loc 1 200 3 is_stmt 1 view .LVU11
  85              		.loc 1 200 12 is_stmt 0 view .LVU12
  86 0010 1168     		ldr	r1, [r2]
  87              		.loc 1 200 31 view .LVU13
  88 0012 0368     		ldr	r3, [r0]
ARM GAS  /tmp/ccipRlnd.s 			page 6


 201:FWLIB/src/stm32f4xx_hash.c ****                HASH_InitStruct->HASH_DataType | \
  89              		.loc 1 201 31 view .LVU14
  90 0014 8468     		ldr	r4, [r0, #8]
 200:FWLIB/src/stm32f4xx_hash.c ****   HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
  91              		.loc 1 200 52 view .LVU15
  92 0016 2343     		orrs	r3, r3, r4
 202:FWLIB/src/stm32f4xx_hash.c ****                HASH_InitStruct->HASH_AlgoMode);
  93              		.loc 1 202 31 view .LVU16
  94 0018 4468     		ldr	r4, [r0, #4]
 201:FWLIB/src/stm32f4xx_hash.c ****                HASH_InitStruct->HASH_DataType | \
  95              		.loc 1 201 47 view .LVU17
  96 001a 2343     		orrs	r3, r3, r4
 200:FWLIB/src/stm32f4xx_hash.c ****   HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
  97              		.loc 1 200 12 view .LVU18
  98 001c 0B43     		orrs	r3, r3, r1
  99 001e 1360     		str	r3, [r2]
 203:FWLIB/src/stm32f4xx_hash.c ****   
 204:FWLIB/src/stm32f4xx_hash.c ****   /* if algorithm mode is HMAC, set the Key */  
 205:FWLIB/src/stm32f4xx_hash.c ****   if(HASH_InitStruct->HASH_AlgoMode == HASH_AlgoMode_HMAC) 
 100              		.loc 1 205 3 is_stmt 1 view .LVU19
 101              		.loc 1 205 21 is_stmt 0 view .LVU20
 102 0020 4368     		ldr	r3, [r0, #4]
 103              		.loc 1 205 5 view .LVU21
 104 0022 402B     		cmp	r3, #64
 105 0024 07D0     		beq	.L6
 106              	.L4:
 206:FWLIB/src/stm32f4xx_hash.c ****   {
 207:FWLIB/src/stm32f4xx_hash.c ****     assert_param(IS_HASH_HMAC_KEYTYPE(HASH_InitStruct->HASH_HMACKeyType));
 208:FWLIB/src/stm32f4xx_hash.c ****     HASH->CR &= ~HASH_CR_LKEY;
 209:FWLIB/src/stm32f4xx_hash.c ****     HASH->CR |= HASH_InitStruct->HASH_HMACKeyType;
 210:FWLIB/src/stm32f4xx_hash.c ****   }
 211:FWLIB/src/stm32f4xx_hash.c **** 
 212:FWLIB/src/stm32f4xx_hash.c ****   /* Reset the HASH processor core, so that the HASH will be ready to compute 
 213:FWLIB/src/stm32f4xx_hash.c ****      the message digest of a new message */
 214:FWLIB/src/stm32f4xx_hash.c ****   HASH->CR |= HASH_CR_INIT;  
 107              		.loc 1 214 3 is_stmt 1 view .LVU22
 108              		.loc 1 214 12 is_stmt 0 view .LVU23
 109 0026 094A     		ldr	r2, .L7
 110 0028 1368     		ldr	r3, [r2]
 111 002a 43F00403 		orr	r3, r3, #4
 112 002e 1360     		str	r3, [r2]
 215:FWLIB/src/stm32f4xx_hash.c **** }
 113              		.loc 1 215 1 view .LVU24
 114 0030 5DF8044B 		ldr	r4, [sp], #4
 115              	.LCFI2:
 116              		.cfi_remember_state
 117              		.cfi_restore 4
 118              		.cfi_def_cfa_offset 0
 119 0034 7047     		bx	lr
 120              	.L6:
 121              	.LCFI3:
 122              		.cfi_restore_state
 207:FWLIB/src/stm32f4xx_hash.c ****     HASH->CR &= ~HASH_CR_LKEY;
 123              		.loc 1 207 5 is_stmt 1 view .LVU25
 208:FWLIB/src/stm32f4xx_hash.c ****     HASH->CR |= HASH_InitStruct->HASH_HMACKeyType;
 124              		.loc 1 208 5 view .LVU26
 208:FWLIB/src/stm32f4xx_hash.c ****     HASH->CR |= HASH_InitStruct->HASH_HMACKeyType;
ARM GAS  /tmp/ccipRlnd.s 			page 7


 125              		.loc 1 208 14 is_stmt 0 view .LVU27
 126 0036 1346     		mov	r3, r2
 127 0038 1268     		ldr	r2, [r2]
 128 003a 22F48032 		bic	r2, r2, #65536
 129 003e 1A60     		str	r2, [r3]
 209:FWLIB/src/stm32f4xx_hash.c ****   }
 130              		.loc 1 209 5 is_stmt 1 view .LVU28
 209:FWLIB/src/stm32f4xx_hash.c ****   }
 131              		.loc 1 209 14 is_stmt 0 view .LVU29
 132 0040 1A68     		ldr	r2, [r3]
 209:FWLIB/src/stm32f4xx_hash.c ****   }
 133              		.loc 1 209 32 view .LVU30
 134 0042 C168     		ldr	r1, [r0, #12]
 209:FWLIB/src/stm32f4xx_hash.c ****   }
 135              		.loc 1 209 14 view .LVU31
 136 0044 0A43     		orrs	r2, r2, r1
 137 0046 1A60     		str	r2, [r3]
 138 0048 EDE7     		b	.L4
 139              	.L8:
 140 004a 00BF     		.align	2
 141              	.L7:
 142 004c 00040650 		.word	1342571520
 143              		.cfi_endproc
 144              	.LFE124:
 146              		.section	.text.HASH_StructInit,"ax",%progbits
 147              		.align	1
 148              		.global	HASH_StructInit
 149              		.syntax unified
 150              		.thumb
 151              		.thumb_func
 152              		.fpu fpv4-sp-d16
 154              	HASH_StructInit:
 155              	.LVL3:
 156              	.LFB125:
 216:FWLIB/src/stm32f4xx_hash.c **** 
 217:FWLIB/src/stm32f4xx_hash.c **** /**
 218:FWLIB/src/stm32f4xx_hash.c ****   * @brief  Fills each HASH_InitStruct member with its default value.
 219:FWLIB/src/stm32f4xx_hash.c ****   * @param  HASH_InitStruct : pointer to a HASH_InitTypeDef structure which will
 220:FWLIB/src/stm32f4xx_hash.c ****   *          be initialized.  
 221:FWLIB/src/stm32f4xx_hash.c ****   *  @note  The default values set are : Processor mode is HASH, Algorithm selected is SHA1,
 222:FWLIB/src/stm32f4xx_hash.c ****   *          Data type selected is 32b and HMAC Key Type is short key.  
 223:FWLIB/src/stm32f4xx_hash.c ****   * @retval None
 224:FWLIB/src/stm32f4xx_hash.c ****   */
 225:FWLIB/src/stm32f4xx_hash.c **** void HASH_StructInit(HASH_InitTypeDef* HASH_InitStruct)
 226:FWLIB/src/stm32f4xx_hash.c **** {
 157              		.loc 1 226 1 is_stmt 1 view -0
 158              		.cfi_startproc
 159              		@ args = 0, pretend = 0, frame = 0
 160              		@ frame_needed = 0, uses_anonymous_args = 0
 161              		@ link register save eliminated.
 227:FWLIB/src/stm32f4xx_hash.c ****   /* Initialize the HASH_AlgoSelection member */
 228:FWLIB/src/stm32f4xx_hash.c ****   HASH_InitStruct->HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 162              		.loc 1 228 3 view .LVU33
 163              		.loc 1 228 39 is_stmt 0 view .LVU34
 164 0000 0023     		movs	r3, #0
 165 0002 0360     		str	r3, [r0]
 229:FWLIB/src/stm32f4xx_hash.c **** 
ARM GAS  /tmp/ccipRlnd.s 			page 8


 230:FWLIB/src/stm32f4xx_hash.c ****   /* Initialize the HASH_AlgoMode member */
 231:FWLIB/src/stm32f4xx_hash.c ****   HASH_InitStruct->HASH_AlgoMode = HASH_AlgoMode_HASH;
 166              		.loc 1 231 3 is_stmt 1 view .LVU35
 167              		.loc 1 231 34 is_stmt 0 view .LVU36
 168 0004 4360     		str	r3, [r0, #4]
 232:FWLIB/src/stm32f4xx_hash.c **** 
 233:FWLIB/src/stm32f4xx_hash.c ****   /* Initialize the HASH_DataType member */
 234:FWLIB/src/stm32f4xx_hash.c ****   HASH_InitStruct->HASH_DataType = HASH_DataType_32b;
 169              		.loc 1 234 3 is_stmt 1 view .LVU37
 170              		.loc 1 234 34 is_stmt 0 view .LVU38
 171 0006 8360     		str	r3, [r0, #8]
 235:FWLIB/src/stm32f4xx_hash.c **** 
 236:FWLIB/src/stm32f4xx_hash.c ****   /* Initialize the HASH_HMACKeyType member */
 237:FWLIB/src/stm32f4xx_hash.c ****   HASH_InitStruct->HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 172              		.loc 1 237 3 is_stmt 1 view .LVU39
 173              		.loc 1 237 37 is_stmt 0 view .LVU40
 174 0008 C360     		str	r3, [r0, #12]
 238:FWLIB/src/stm32f4xx_hash.c **** }
 175              		.loc 1 238 1 view .LVU41
 176 000a 7047     		bx	lr
 177              		.cfi_endproc
 178              	.LFE125:
 180              		.section	.text.HASH_Reset,"ax",%progbits
 181              		.align	1
 182              		.global	HASH_Reset
 183              		.syntax unified
 184              		.thumb
 185              		.thumb_func
 186              		.fpu fpv4-sp-d16
 188              	HASH_Reset:
 189              	.LFB126:
 239:FWLIB/src/stm32f4xx_hash.c **** 
 240:FWLIB/src/stm32f4xx_hash.c **** /**
 241:FWLIB/src/stm32f4xx_hash.c ****   * @brief  Resets the HASH processor core, so that the HASH will be ready
 242:FWLIB/src/stm32f4xx_hash.c ****   *         to compute the message digest of a new message.
 243:FWLIB/src/stm32f4xx_hash.c ****   * @note   Calling this function will clear the HASH_SR_DCIS (Digest calculation 
 244:FWLIB/src/stm32f4xx_hash.c ****   *         completion interrupt status) bit corresponding to HASH_IT_DCI 
 245:FWLIB/src/stm32f4xx_hash.c ****   *         interrupt and HASH_FLAG_DCIS flag. 
 246:FWLIB/src/stm32f4xx_hash.c ****   * @param  None
 247:FWLIB/src/stm32f4xx_hash.c ****   * @retval None
 248:FWLIB/src/stm32f4xx_hash.c ****   */
 249:FWLIB/src/stm32f4xx_hash.c **** void HASH_Reset(void)
 250:FWLIB/src/stm32f4xx_hash.c **** {
 190              		.loc 1 250 1 is_stmt 1 view -0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 0
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194              		@ link register save eliminated.
 251:FWLIB/src/stm32f4xx_hash.c ****   /* Reset the HASH processor core */
 252:FWLIB/src/stm32f4xx_hash.c ****   HASH->CR |= HASH_CR_INIT;
 195              		.loc 1 252 3 view .LVU43
 196              		.loc 1 252 12 is_stmt 0 view .LVU44
 197 0000 024A     		ldr	r2, .L11
 198 0002 1368     		ldr	r3, [r2]
 199 0004 43F00403 		orr	r3, r3, #4
 200 0008 1360     		str	r3, [r2]
 253:FWLIB/src/stm32f4xx_hash.c **** }
ARM GAS  /tmp/ccipRlnd.s 			page 9


 201              		.loc 1 253 1 view .LVU45
 202 000a 7047     		bx	lr
 203              	.L12:
 204              		.align	2
 205              	.L11:
 206 000c 00040650 		.word	1342571520
 207              		.cfi_endproc
 208              	.LFE126:
 210              		.section	.text.HASH_SetLastWordValidBitsNbr,"ax",%progbits
 211              		.align	1
 212              		.global	HASH_SetLastWordValidBitsNbr
 213              		.syntax unified
 214              		.thumb
 215              		.thumb_func
 216              		.fpu fpv4-sp-d16
 218              	HASH_SetLastWordValidBitsNbr:
 219              	.LVL4:
 220              	.LFB127:
 254:FWLIB/src/stm32f4xx_hash.c **** /**
 255:FWLIB/src/stm32f4xx_hash.c ****   * @}
 256:FWLIB/src/stm32f4xx_hash.c ****   */
 257:FWLIB/src/stm32f4xx_hash.c ****  
 258:FWLIB/src/stm32f4xx_hash.c **** /** @defgroup HASH_Group2 Message Digest generation functions
 259:FWLIB/src/stm32f4xx_hash.c ****  *  @brief    Message Digest generation functions
 260:FWLIB/src/stm32f4xx_hash.c ****  *
 261:FWLIB/src/stm32f4xx_hash.c **** @verbatim    
 262:FWLIB/src/stm32f4xx_hash.c ****  ===============================================================================
 263:FWLIB/src/stm32f4xx_hash.c ****                   ##### Message Digest generation functions #####
 264:FWLIB/src/stm32f4xx_hash.c ****  ===============================================================================  
 265:FWLIB/src/stm32f4xx_hash.c ****  [..] This section provides functions allowing the generation of message digest: 
 266:FWLIB/src/stm32f4xx_hash.c ****    (+) Push data in the IN FIFO : using HASH_DataIn()
 267:FWLIB/src/stm32f4xx_hash.c ****    (+) Get the number of words set in IN FIFO, use HASH_GetInFIFOWordsNbr()  
 268:FWLIB/src/stm32f4xx_hash.c ****    (+) set the last word valid bits number using HASH_SetLastWordValidBitsNbr() 
 269:FWLIB/src/stm32f4xx_hash.c ****    (+) start digest calculation : using HASH_StartDigest()
 270:FWLIB/src/stm32f4xx_hash.c ****    (+) Get the Digest message : using HASH_GetDigest()
 271:FWLIB/src/stm32f4xx_hash.c ****  
 272:FWLIB/src/stm32f4xx_hash.c **** @endverbatim
 273:FWLIB/src/stm32f4xx_hash.c ****   * @{
 274:FWLIB/src/stm32f4xx_hash.c ****   */
 275:FWLIB/src/stm32f4xx_hash.c **** 
 276:FWLIB/src/stm32f4xx_hash.c **** 
 277:FWLIB/src/stm32f4xx_hash.c **** /**
 278:FWLIB/src/stm32f4xx_hash.c ****   * @brief  Configure the Number of valid bits in last word of the message
 279:FWLIB/src/stm32f4xx_hash.c ****   * @param  ValidNumber: Number of valid bits in last word of the message.
 280:FWLIB/src/stm32f4xx_hash.c ****   *           This parameter must be a number between 0 and 0x1F.
 281:FWLIB/src/stm32f4xx_hash.c ****   *             - 0x00: All 32 bits of the last data written are valid
 282:FWLIB/src/stm32f4xx_hash.c ****   *             - 0x01: Only bit [0] of the last data written is valid
 283:FWLIB/src/stm32f4xx_hash.c ****   *             - 0x02: Only bits[1:0] of the last data written are valid
 284:FWLIB/src/stm32f4xx_hash.c ****   *             - 0x03: Only bits[2:0] of the last data written are valid
 285:FWLIB/src/stm32f4xx_hash.c ****   *             - ...
 286:FWLIB/src/stm32f4xx_hash.c ****   *             - 0x1F: Only bits[30:0] of the last data written are valid    
 287:FWLIB/src/stm32f4xx_hash.c ****   * @note   The Number of valid bits must be set before to start the message 
 288:FWLIB/src/stm32f4xx_hash.c ****   *         digest competition (in Hash and HMAC) and key treatment(in HMAC).    
 289:FWLIB/src/stm32f4xx_hash.c ****   * @retval None
 290:FWLIB/src/stm32f4xx_hash.c ****   */
 291:FWLIB/src/stm32f4xx_hash.c **** void HASH_SetLastWordValidBitsNbr(uint16_t ValidNumber)
 292:FWLIB/src/stm32f4xx_hash.c **** {
ARM GAS  /tmp/ccipRlnd.s 			page 10


 221              		.loc 1 292 1 is_stmt 1 view -0
 222              		.cfi_startproc
 223              		@ args = 0, pretend = 0, frame = 0
 224              		@ frame_needed = 0, uses_anonymous_args = 0
 225              		@ link register save eliminated.
 293:FWLIB/src/stm32f4xx_hash.c ****   /* Check the parameters */
 294:FWLIB/src/stm32f4xx_hash.c ****   assert_param(IS_HASH_VALIDBITSNUMBER(ValidNumber));
 226              		.loc 1 294 3 view .LVU47
 295:FWLIB/src/stm32f4xx_hash.c ****   
 296:FWLIB/src/stm32f4xx_hash.c ****   /* Configure the Number of valid bits in last word of the message */
 297:FWLIB/src/stm32f4xx_hash.c ****   HASH->STR &= ~(HASH_STR_NBW);
 227              		.loc 1 297 3 view .LVU48
 228              		.loc 1 297 13 is_stmt 0 view .LVU49
 229 0000 044B     		ldr	r3, .L14
 230 0002 9A68     		ldr	r2, [r3, #8]
 231 0004 22F01F02 		bic	r2, r2, #31
 232 0008 9A60     		str	r2, [r3, #8]
 298:FWLIB/src/stm32f4xx_hash.c ****   HASH->STR |= ValidNumber;
 233              		.loc 1 298 3 is_stmt 1 view .LVU50
 234              		.loc 1 298 13 is_stmt 0 view .LVU51
 235 000a 9A68     		ldr	r2, [r3, #8]
 236 000c 1043     		orrs	r0, r0, r2
 237              	.LVL5:
 238              		.loc 1 298 13 view .LVU52
 239 000e 9860     		str	r0, [r3, #8]
 299:FWLIB/src/stm32f4xx_hash.c **** }
 240              		.loc 1 299 1 view .LVU53
 241 0010 7047     		bx	lr
 242              	.L15:
 243 0012 00BF     		.align	2
 244              	.L14:
 245 0014 00040650 		.word	1342571520
 246              		.cfi_endproc
 247              	.LFE127:
 249              		.section	.text.HASH_DataIn,"ax",%progbits
 250              		.align	1
 251              		.global	HASH_DataIn
 252              		.syntax unified
 253              		.thumb
 254              		.thumb_func
 255              		.fpu fpv4-sp-d16
 257              	HASH_DataIn:
 258              	.LVL6:
 259              	.LFB128:
 300:FWLIB/src/stm32f4xx_hash.c **** 
 301:FWLIB/src/stm32f4xx_hash.c **** /**
 302:FWLIB/src/stm32f4xx_hash.c ****   * @brief  Writes data in the Data Input FIFO
 303:FWLIB/src/stm32f4xx_hash.c ****   * @param  Data: new data of the message to be processed.
 304:FWLIB/src/stm32f4xx_hash.c ****   * @retval None
 305:FWLIB/src/stm32f4xx_hash.c ****   */
 306:FWLIB/src/stm32f4xx_hash.c **** void HASH_DataIn(uint32_t Data)
 307:FWLIB/src/stm32f4xx_hash.c **** {
 260              		.loc 1 307 1 is_stmt 1 view -0
 261              		.cfi_startproc
 262              		@ args = 0, pretend = 0, frame = 0
 263              		@ frame_needed = 0, uses_anonymous_args = 0
 264              		@ link register save eliminated.
ARM GAS  /tmp/ccipRlnd.s 			page 11


 308:FWLIB/src/stm32f4xx_hash.c ****   /* Write in the DIN register a new data */
 309:FWLIB/src/stm32f4xx_hash.c ****   HASH->DIN = Data;
 265              		.loc 1 309 3 view .LVU55
 266              		.loc 1 309 13 is_stmt 0 view .LVU56
 267 0000 014B     		ldr	r3, .L17
 268 0002 5860     		str	r0, [r3, #4]
 310:FWLIB/src/stm32f4xx_hash.c **** }
 269              		.loc 1 310 1 view .LVU57
 270 0004 7047     		bx	lr
 271              	.L18:
 272 0006 00BF     		.align	2
 273              	.L17:
 274 0008 00040650 		.word	1342571520
 275              		.cfi_endproc
 276              	.LFE128:
 278              		.section	.text.HASH_GetInFIFOWordsNbr,"ax",%progbits
 279              		.align	1
 280              		.global	HASH_GetInFIFOWordsNbr
 281              		.syntax unified
 282              		.thumb
 283              		.thumb_func
 284              		.fpu fpv4-sp-d16
 286              	HASH_GetInFIFOWordsNbr:
 287              	.LFB129:
 311:FWLIB/src/stm32f4xx_hash.c **** 
 312:FWLIB/src/stm32f4xx_hash.c **** /**
 313:FWLIB/src/stm32f4xx_hash.c ****   * @brief  Returns the number of words already pushed into the IN FIFO.
 314:FWLIB/src/stm32f4xx_hash.c ****   * @param  None
 315:FWLIB/src/stm32f4xx_hash.c ****   * @retval The value of words already pushed into the IN FIFO.
 316:FWLIB/src/stm32f4xx_hash.c ****   */
 317:FWLIB/src/stm32f4xx_hash.c **** uint8_t HASH_GetInFIFOWordsNbr(void)
 318:FWLIB/src/stm32f4xx_hash.c **** {
 288              		.loc 1 318 1 is_stmt 1 view -0
 289              		.cfi_startproc
 290              		@ args = 0, pretend = 0, frame = 0
 291              		@ frame_needed = 0, uses_anonymous_args = 0
 292              		@ link register save eliminated.
 319:FWLIB/src/stm32f4xx_hash.c ****   /* Return the value of NBW bits */
 320:FWLIB/src/stm32f4xx_hash.c ****   return ((HASH->CR & HASH_CR_NBW) >> 8);
 293              		.loc 1 320 3 view .LVU59
 294              		.loc 1 320 16 is_stmt 0 view .LVU60
 295 0000 024B     		ldr	r3, .L20
 296 0002 1868     		ldr	r0, [r3]
 321:FWLIB/src/stm32f4xx_hash.c **** }
 297              		.loc 1 321 1 view .LVU61
 298 0004 C0F30320 		ubfx	r0, r0, #8, #4
 299 0008 7047     		bx	lr
 300              	.L21:
 301 000a 00BF     		.align	2
 302              	.L20:
 303 000c 00040650 		.word	1342571520
 304              		.cfi_endproc
 305              	.LFE129:
 307              		.section	.text.HASH_GetDigest,"ax",%progbits
 308              		.align	1
 309              		.global	HASH_GetDigest
 310              		.syntax unified
ARM GAS  /tmp/ccipRlnd.s 			page 12


 311              		.thumb
 312              		.thumb_func
 313              		.fpu fpv4-sp-d16
 315              	HASH_GetDigest:
 316              	.LVL7:
 317              	.LFB130:
 322:FWLIB/src/stm32f4xx_hash.c **** 
 323:FWLIB/src/stm32f4xx_hash.c **** /**
 324:FWLIB/src/stm32f4xx_hash.c ****   * @brief  Provides the message digest result.
 325:FWLIB/src/stm32f4xx_hash.c ****   * @note   In MD5 mode, Data[7] to Data[4] filed of HASH_MsgDigest structure is not used
 326:FWLIB/src/stm32f4xx_hash.c ****   *         and is read as zero.
 327:FWLIB/src/stm32f4xx_hash.c ****   *         In SHA-1 mode, Data[7] to Data[5] filed of HASH_MsgDigest structure is not used
 328:FWLIB/src/stm32f4xx_hash.c ****   *         and is read as zero.    
 329:FWLIB/src/stm32f4xx_hash.c ****   *         In SHA-224 mode, Data[7] filed of HASH_MsgDigest structure is not used
 330:FWLIB/src/stm32f4xx_hash.c ****   *         and is read as zero.  
 331:FWLIB/src/stm32f4xx_hash.c ****   * @param  HASH_MessageDigest: pointer to a HASH_MsgDigest structure which will 
 332:FWLIB/src/stm32f4xx_hash.c ****   *         hold the message digest result 
 333:FWLIB/src/stm32f4xx_hash.c ****   * @retval None
 334:FWLIB/src/stm32f4xx_hash.c ****   */
 335:FWLIB/src/stm32f4xx_hash.c **** void HASH_GetDigest(HASH_MsgDigest* HASH_MessageDigest)
 336:FWLIB/src/stm32f4xx_hash.c **** {
 318              		.loc 1 336 1 is_stmt 1 view -0
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 0
 321              		@ frame_needed = 0, uses_anonymous_args = 0
 322              		@ link register save eliminated.
 337:FWLIB/src/stm32f4xx_hash.c ****   /* Get the data field */
 338:FWLIB/src/stm32f4xx_hash.c ****   HASH_MessageDigest->Data[0] = HASH->HR[0];
 323              		.loc 1 338 3 view .LVU63
 324              		.loc 1 338 41 is_stmt 0 view .LVU64
 325 0000 094B     		ldr	r3, .L23
 326 0002 DA68     		ldr	r2, [r3, #12]
 327              		.loc 1 338 31 view .LVU65
 328 0004 0260     		str	r2, [r0]
 339:FWLIB/src/stm32f4xx_hash.c ****   HASH_MessageDigest->Data[1] = HASH->HR[1];
 329              		.loc 1 339 3 is_stmt 1 view .LVU66
 330              		.loc 1 339 41 is_stmt 0 view .LVU67
 331 0006 1A69     		ldr	r2, [r3, #16]
 332              		.loc 1 339 31 view .LVU68
 333 0008 4260     		str	r2, [r0, #4]
 340:FWLIB/src/stm32f4xx_hash.c ****   HASH_MessageDigest->Data[2] = HASH->HR[2];
 334              		.loc 1 340 3 is_stmt 1 view .LVU69
 335              		.loc 1 340 41 is_stmt 0 view .LVU70
 336 000a 5A69     		ldr	r2, [r3, #20]
 337              		.loc 1 340 31 view .LVU71
 338 000c 8260     		str	r2, [r0, #8]
 341:FWLIB/src/stm32f4xx_hash.c ****   HASH_MessageDigest->Data[3] = HASH->HR[3];
 339              		.loc 1 341 3 is_stmt 1 view .LVU72
 340              		.loc 1 341 41 is_stmt 0 view .LVU73
 341 000e 9A69     		ldr	r2, [r3, #24]
 342              		.loc 1 341 31 view .LVU74
 343 0010 C260     		str	r2, [r0, #12]
 342:FWLIB/src/stm32f4xx_hash.c ****   HASH_MessageDigest->Data[4] = HASH->HR[4];
 344              		.loc 1 342 3 is_stmt 1 view .LVU75
 345              		.loc 1 342 41 is_stmt 0 view .LVU76
 346 0012 DB69     		ldr	r3, [r3, #28]
 347              		.loc 1 342 31 view .LVU77
ARM GAS  /tmp/ccipRlnd.s 			page 13


 348 0014 0361     		str	r3, [r0, #16]
 343:FWLIB/src/stm32f4xx_hash.c ****   HASH_MessageDigest->Data[5] = HASH_DIGEST->HR[5];
 349              		.loc 1 343 3 is_stmt 1 view .LVU78
 350              		.loc 1 343 48 is_stmt 0 view .LVU79
 351 0016 054B     		ldr	r3, .L23+4
 352 0018 5A69     		ldr	r2, [r3, #20]
 353              		.loc 1 343 31 view .LVU80
 354 001a 4261     		str	r2, [r0, #20]
 344:FWLIB/src/stm32f4xx_hash.c ****   HASH_MessageDigest->Data[6] = HASH_DIGEST->HR[6];
 355              		.loc 1 344 3 is_stmt 1 view .LVU81
 356              		.loc 1 344 48 is_stmt 0 view .LVU82
 357 001c 9A69     		ldr	r2, [r3, #24]
 358              		.loc 1 344 31 view .LVU83
 359 001e 8261     		str	r2, [r0, #24]
 345:FWLIB/src/stm32f4xx_hash.c ****   HASH_MessageDigest->Data[7] = HASH_DIGEST->HR[7];
 360              		.loc 1 345 3 is_stmt 1 view .LVU84
 361              		.loc 1 345 48 is_stmt 0 view .LVU85
 362 0020 DB69     		ldr	r3, [r3, #28]
 363              		.loc 1 345 31 view .LVU86
 364 0022 C361     		str	r3, [r0, #28]
 346:FWLIB/src/stm32f4xx_hash.c **** }
 365              		.loc 1 346 1 view .LVU87
 366 0024 7047     		bx	lr
 367              	.L24:
 368 0026 00BF     		.align	2
 369              	.L23:
 370 0028 00040650 		.word	1342571520
 371 002c 10070650 		.word	1342572304
 372              		.cfi_endproc
 373              	.LFE130:
 375              		.section	.text.HASH_StartDigest,"ax",%progbits
 376              		.align	1
 377              		.global	HASH_StartDigest
 378              		.syntax unified
 379              		.thumb
 380              		.thumb_func
 381              		.fpu fpv4-sp-d16
 383              	HASH_StartDigest:
 384              	.LFB131:
 347:FWLIB/src/stm32f4xx_hash.c **** 
 348:FWLIB/src/stm32f4xx_hash.c **** /**
 349:FWLIB/src/stm32f4xx_hash.c ****   * @brief  Starts the message padding and calculation of the final message     
 350:FWLIB/src/stm32f4xx_hash.c ****   * @param  None
 351:FWLIB/src/stm32f4xx_hash.c ****   * @retval None
 352:FWLIB/src/stm32f4xx_hash.c ****   */
 353:FWLIB/src/stm32f4xx_hash.c **** void HASH_StartDigest(void)
 354:FWLIB/src/stm32f4xx_hash.c **** {
 385              		.loc 1 354 1 is_stmt 1 view -0
 386              		.cfi_startproc
 387              		@ args = 0, pretend = 0, frame = 0
 388              		@ frame_needed = 0, uses_anonymous_args = 0
 389              		@ link register save eliminated.
 355:FWLIB/src/stm32f4xx_hash.c ****   /* Start the Digest calculation */
 356:FWLIB/src/stm32f4xx_hash.c ****   HASH->STR |= HASH_STR_DCAL;
 390              		.loc 1 356 3 view .LVU89
 391              		.loc 1 356 13 is_stmt 0 view .LVU90
 392 0000 024A     		ldr	r2, .L26
ARM GAS  /tmp/ccipRlnd.s 			page 14


 393 0002 9368     		ldr	r3, [r2, #8]
 394 0004 43F48073 		orr	r3, r3, #256
 395 0008 9360     		str	r3, [r2, #8]
 357:FWLIB/src/stm32f4xx_hash.c **** }
 396              		.loc 1 357 1 view .LVU91
 397 000a 7047     		bx	lr
 398              	.L27:
 399              		.align	2
 400              	.L26:
 401 000c 00040650 		.word	1342571520
 402              		.cfi_endproc
 403              	.LFE131:
 405              		.section	.text.HASH_SaveContext,"ax",%progbits
 406              		.align	1
 407              		.global	HASH_SaveContext
 408              		.syntax unified
 409              		.thumb
 410              		.thumb_func
 411              		.fpu fpv4-sp-d16
 413              	HASH_SaveContext:
 414              	.LVL8:
 415              	.LFB132:
 358:FWLIB/src/stm32f4xx_hash.c **** /**
 359:FWLIB/src/stm32f4xx_hash.c ****   * @}
 360:FWLIB/src/stm32f4xx_hash.c ****   */
 361:FWLIB/src/stm32f4xx_hash.c **** 
 362:FWLIB/src/stm32f4xx_hash.c **** /** @defgroup HASH_Group3 Context swapping functions
 363:FWLIB/src/stm32f4xx_hash.c ****  *  @brief   Context swapping functions
 364:FWLIB/src/stm32f4xx_hash.c ****  *
 365:FWLIB/src/stm32f4xx_hash.c **** @verbatim   
 366:FWLIB/src/stm32f4xx_hash.c ****  ===============================================================================
 367:FWLIB/src/stm32f4xx_hash.c ****                       ##### Context swapping functions #####
 368:FWLIB/src/stm32f4xx_hash.c ****  ===============================================================================  
 369:FWLIB/src/stm32f4xx_hash.c ****  
 370:FWLIB/src/stm32f4xx_hash.c ****  [..] This section provides functions allowing to save and store HASH Context
 371:FWLIB/src/stm32f4xx_hash.c ****   
 372:FWLIB/src/stm32f4xx_hash.c ****  [..] It is possible to interrupt a HASH/HMAC process to perform another processing 
 373:FWLIB/src/stm32f4xx_hash.c ****       with a higher priority, and to complete the interrupted process later on, when 
 374:FWLIB/src/stm32f4xx_hash.c ****       the higher priority task is complete. To do so, the context of the interrupted 
 375:FWLIB/src/stm32f4xx_hash.c ****       task must be saved from the HASH registers to memory, and then be restored 
 376:FWLIB/src/stm32f4xx_hash.c ****       from memory to the HASH registers.
 377:FWLIB/src/stm32f4xx_hash.c ****   
 378:FWLIB/src/stm32f4xx_hash.c ****    (#) To save the current context, use HASH_SaveContext() function
 379:FWLIB/src/stm32f4xx_hash.c ****    (#) To restore the saved context, use HASH_RestoreContext() function 
 380:FWLIB/src/stm32f4xx_hash.c ****   
 381:FWLIB/src/stm32f4xx_hash.c **** 
 382:FWLIB/src/stm32f4xx_hash.c **** @endverbatim
 383:FWLIB/src/stm32f4xx_hash.c ****   * @{
 384:FWLIB/src/stm32f4xx_hash.c ****   */
 385:FWLIB/src/stm32f4xx_hash.c ****   
 386:FWLIB/src/stm32f4xx_hash.c **** /**
 387:FWLIB/src/stm32f4xx_hash.c ****   * @brief  Save the Hash peripheral Context. 
 388:FWLIB/src/stm32f4xx_hash.c ****   * @note   The context can be saved only when no block is currently being 
 389:FWLIB/src/stm32f4xx_hash.c ****   *         processed. So user must wait for DINIS = 1 (the last block has been 
 390:FWLIB/src/stm32f4xx_hash.c ****   *         processed and the input FIFO is empty) or NBW != 0 (the FIFO is not 
 391:FWLIB/src/stm32f4xx_hash.c ****   *         full and no processing is ongoing).   
 392:FWLIB/src/stm32f4xx_hash.c ****   * @param  HASH_ContextSave: pointer to a HASH_Context structure that contains
ARM GAS  /tmp/ccipRlnd.s 			page 15


 393:FWLIB/src/stm32f4xx_hash.c ****   *         the repository for current context.
 394:FWLIB/src/stm32f4xx_hash.c ****   * @retval None
 395:FWLIB/src/stm32f4xx_hash.c ****   */
 396:FWLIB/src/stm32f4xx_hash.c **** void HASH_SaveContext(HASH_Context* HASH_ContextSave)
 397:FWLIB/src/stm32f4xx_hash.c **** {
 416              		.loc 1 397 1 is_stmt 1 view -0
 417              		.cfi_startproc
 418              		@ args = 0, pretend = 0, frame = 0
 419              		@ frame_needed = 0, uses_anonymous_args = 0
 420              		@ link register save eliminated.
 398:FWLIB/src/stm32f4xx_hash.c ****   uint8_t i = 0;
 421              		.loc 1 398 3 view .LVU93
 399:FWLIB/src/stm32f4xx_hash.c ****   
 400:FWLIB/src/stm32f4xx_hash.c ****   /* save context registers */
 401:FWLIB/src/stm32f4xx_hash.c ****   HASH_ContextSave->HASH_IMR = HASH->IMR;  
 422              		.loc 1 401 3 view .LVU94
 423              		.loc 1 401 36 is_stmt 0 view .LVU95
 424 0000 0B4B     		ldr	r3, .L31
 425 0002 1A6A     		ldr	r2, [r3, #32]
 426              		.loc 1 401 30 view .LVU96
 427 0004 0260     		str	r2, [r0]
 402:FWLIB/src/stm32f4xx_hash.c ****   HASH_ContextSave->HASH_STR = HASH->STR;      
 428              		.loc 1 402 3 is_stmt 1 view .LVU97
 429              		.loc 1 402 36 is_stmt 0 view .LVU98
 430 0006 9A68     		ldr	r2, [r3, #8]
 431              		.loc 1 402 30 view .LVU99
 432 0008 4260     		str	r2, [r0, #4]
 403:FWLIB/src/stm32f4xx_hash.c ****   HASH_ContextSave->HASH_CR  = HASH->CR;     
 433              		.loc 1 403 3 is_stmt 1 view .LVU100
 434              		.loc 1 403 36 is_stmt 0 view .LVU101
 435 000a 1B68     		ldr	r3, [r3]
 436              		.loc 1 403 30 view .LVU102
 437 000c 8360     		str	r3, [r0, #8]
 404:FWLIB/src/stm32f4xx_hash.c ****   for(i=0; i<=53;i++)
 438              		.loc 1 404 3 is_stmt 1 view .LVU103
 439              		.loc 1 404 8 is_stmt 0 view .LVU104
 440 000e 0023     		movs	r3, #0
 441              		.loc 1 404 3 view .LVU105
 442 0010 0AE0     		b	.L29
 443              	.LVL9:
 444              	.L30:
 405:FWLIB/src/stm32f4xx_hash.c ****   {
 406:FWLIB/src/stm32f4xx_hash.c ****      HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
 445              		.loc 1 406 6 is_stmt 1 discriminator 3 view .LVU106
 446              		.loc 1 406 47 is_stmt 0 discriminator 3 view .LVU107
 447 0012 03F13E01 		add	r1, r3, #62
 448 0016 064A     		ldr	r2, .L31
 449 0018 52F82110 		ldr	r1, [r2, r1, lsl #2]
 450              		.loc 1 406 36 discriminator 3 view .LVU108
 451 001c 9A1C     		adds	r2, r3, #2
 452 001e 00EB8202 		add	r2, r0, r2, lsl #2
 453 0022 5160     		str	r1, [r2, #4]
 404:FWLIB/src/stm32f4xx_hash.c ****   for(i=0; i<=53;i++)
 454              		.loc 1 404 19 discriminator 3 view .LVU109
 455 0024 0133     		adds	r3, r3, #1
 456              	.LVL10:
 404:FWLIB/src/stm32f4xx_hash.c ****   for(i=0; i<=53;i++)
ARM GAS  /tmp/ccipRlnd.s 			page 16


 457              		.loc 1 404 19 discriminator 3 view .LVU110
 458 0026 DBB2     		uxtb	r3, r3
 459              	.LVL11:
 460              	.L29:
 404:FWLIB/src/stm32f4xx_hash.c ****   for(i=0; i<=53;i++)
 461              		.loc 1 404 3 discriminator 1 view .LVU111
 462 0028 352B     		cmp	r3, #53
 463 002a F2D9     		bls	.L30
 407:FWLIB/src/stm32f4xx_hash.c ****   }   
 408:FWLIB/src/stm32f4xx_hash.c **** }
 464              		.loc 1 408 1 view .LVU112
 465 002c 7047     		bx	lr
 466              	.L32:
 467 002e 00BF     		.align	2
 468              	.L31:
 469 0030 00040650 		.word	1342571520
 470              		.cfi_endproc
 471              	.LFE132:
 473              		.section	.text.HASH_RestoreContext,"ax",%progbits
 474              		.align	1
 475              		.global	HASH_RestoreContext
 476              		.syntax unified
 477              		.thumb
 478              		.thumb_func
 479              		.fpu fpv4-sp-d16
 481              	HASH_RestoreContext:
 482              	.LVL12:
 483              	.LFB133:
 409:FWLIB/src/stm32f4xx_hash.c **** 
 410:FWLIB/src/stm32f4xx_hash.c **** /**
 411:FWLIB/src/stm32f4xx_hash.c ****   * @brief  Restore the Hash peripheral Context.  
 412:FWLIB/src/stm32f4xx_hash.c ****   * @note   After calling this function, user can restart the processing from the
 413:FWLIB/src/stm32f4xx_hash.c ****   *         point where it has been interrupted.  
 414:FWLIB/src/stm32f4xx_hash.c ****   * @param  HASH_ContextRestore: pointer to a HASH_Context structure that contains
 415:FWLIB/src/stm32f4xx_hash.c ****   *         the repository for saved context.
 416:FWLIB/src/stm32f4xx_hash.c ****   * @retval None
 417:FWLIB/src/stm32f4xx_hash.c ****   */
 418:FWLIB/src/stm32f4xx_hash.c **** void HASH_RestoreContext(HASH_Context* HASH_ContextRestore)  
 419:FWLIB/src/stm32f4xx_hash.c **** {
 484              		.loc 1 419 1 is_stmt 1 view -0
 485              		.cfi_startproc
 486              		@ args = 0, pretend = 0, frame = 0
 487              		@ frame_needed = 0, uses_anonymous_args = 0
 488              		@ link register save eliminated.
 420:FWLIB/src/stm32f4xx_hash.c ****   uint8_t i = 0;
 489              		.loc 1 420 3 view .LVU114
 421:FWLIB/src/stm32f4xx_hash.c ****   
 422:FWLIB/src/stm32f4xx_hash.c ****   /* restore context registers */
 423:FWLIB/src/stm32f4xx_hash.c ****   HASH->IMR = HASH_ContextRestore->HASH_IMR;   
 490              		.loc 1 423 3 view .LVU115
 491              		.loc 1 423 34 is_stmt 0 view .LVU116
 492 0000 0268     		ldr	r2, [r0]
 493              		.loc 1 423 13 view .LVU117
 494 0002 0F4B     		ldr	r3, .L40
 495 0004 1A62     		str	r2, [r3, #32]
 424:FWLIB/src/stm32f4xx_hash.c ****   HASH->STR = HASH_ContextRestore->HASH_STR;     
 496              		.loc 1 424 3 is_stmt 1 view .LVU118
ARM GAS  /tmp/ccipRlnd.s 			page 17


 497              		.loc 1 424 34 is_stmt 0 view .LVU119
 498 0006 4268     		ldr	r2, [r0, #4]
 499              		.loc 1 424 13 view .LVU120
 500 0008 9A60     		str	r2, [r3, #8]
 425:FWLIB/src/stm32f4xx_hash.c ****   HASH->CR = HASH_ContextRestore->HASH_CR;
 501              		.loc 1 425 3 is_stmt 1 view .LVU121
 502              		.loc 1 425 33 is_stmt 0 view .LVU122
 503 000a 8268     		ldr	r2, [r0, #8]
 504              		.loc 1 425 12 view .LVU123
 505 000c 1A60     		str	r2, [r3]
 426:FWLIB/src/stm32f4xx_hash.c ****   
 427:FWLIB/src/stm32f4xx_hash.c ****   /* Initialize the hash processor */
 428:FWLIB/src/stm32f4xx_hash.c ****   HASH->CR |= HASH_CR_INIT; 
 506              		.loc 1 428 3 is_stmt 1 view .LVU124
 507              		.loc 1 428 12 is_stmt 0 view .LVU125
 508 000e 1A68     		ldr	r2, [r3]
 509 0010 42F00402 		orr	r2, r2, #4
 510 0014 1A60     		str	r2, [r3]
 429:FWLIB/src/stm32f4xx_hash.c ****   
 430:FWLIB/src/stm32f4xx_hash.c ****    /* continue restoring context registers */     
 431:FWLIB/src/stm32f4xx_hash.c ****   for(i=0; i<=53;i++)
 511              		.loc 1 431 3 is_stmt 1 view .LVU126
 512              		.loc 1 431 8 is_stmt 0 view .LVU127
 513 0016 0023     		movs	r3, #0
 514              	.LVL13:
 515              		.loc 1 431 3 view .LVU128
 516 0018 352B     		cmp	r3, #53
 517 001a 10D8     		bhi	.L39
 419:FWLIB/src/stm32f4xx_hash.c ****   uint8_t i = 0;
 518              		.loc 1 419 1 view .LVU129
 519 001c 10B4     		push	{r4}
 520              	.LCFI4:
 521              		.cfi_def_cfa_offset 4
 522              		.cfi_offset 4, -4
 523              	.L35:
 432:FWLIB/src/stm32f4xx_hash.c ****   {
 433:FWLIB/src/stm32f4xx_hash.c ****      HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
 524              		.loc 1 433 6 is_stmt 1 discriminator 3 view .LVU130
 525              		.loc 1 433 50 is_stmt 0 discriminator 3 view .LVU131
 526 001e 9A1C     		adds	r2, r3, #2
 527 0020 00EB8202 		add	r2, r0, r2, lsl #2
 528 0024 5468     		ldr	r4, [r2, #4]
 529              		.loc 1 433 19 discriminator 3 view .LVU132
 530 0026 03F13E01 		add	r1, r3, #62
 531 002a 054A     		ldr	r2, .L40
 532 002c 42F82140 		str	r4, [r2, r1, lsl #2]
 431:FWLIB/src/stm32f4xx_hash.c ****   {
 533              		.loc 1 431 19 discriminator 3 view .LVU133
 534 0030 0133     		adds	r3, r3, #1
 535              	.LVL14:
 431:FWLIB/src/stm32f4xx_hash.c ****   {
 536              		.loc 1 431 19 discriminator 3 view .LVU134
 537 0032 DBB2     		uxtb	r3, r3
 538              	.LVL15:
 431:FWLIB/src/stm32f4xx_hash.c ****   {
 539              		.loc 1 431 3 discriminator 3 view .LVU135
 540 0034 352B     		cmp	r3, #53
ARM GAS  /tmp/ccipRlnd.s 			page 18


 541 0036 F2D9     		bls	.L35
 434:FWLIB/src/stm32f4xx_hash.c ****   }   
 435:FWLIB/src/stm32f4xx_hash.c **** }
 542              		.loc 1 435 1 view .LVU136
 543 0038 5DF8044B 		ldr	r4, [sp], #4
 544              	.LCFI5:
 545              		.cfi_restore 4
 546              		.cfi_def_cfa_offset 0
 547 003c 7047     		bx	lr
 548              	.L39:
 549              		.loc 1 435 1 view .LVU137
 550 003e 7047     		bx	lr
 551              	.L41:
 552              		.align	2
 553              	.L40:
 554 0040 00040650 		.word	1342571520
 555              		.cfi_endproc
 556              	.LFE133:
 558              		.section	.text.HASH_AutoStartDigest,"ax",%progbits
 559              		.align	1
 560              		.global	HASH_AutoStartDigest
 561              		.syntax unified
 562              		.thumb
 563              		.thumb_func
 564              		.fpu fpv4-sp-d16
 566              	HASH_AutoStartDigest:
 567              	.LVL16:
 568              	.LFB134:
 436:FWLIB/src/stm32f4xx_hash.c **** /**
 437:FWLIB/src/stm32f4xx_hash.c ****   * @}
 438:FWLIB/src/stm32f4xx_hash.c ****   */
 439:FWLIB/src/stm32f4xx_hash.c **** 
 440:FWLIB/src/stm32f4xx_hash.c **** /** @defgroup HASH_Group4 HASH's DMA interface Configuration function
 441:FWLIB/src/stm32f4xx_hash.c ****  *  @brief   HASH's DMA interface Configuration function 
 442:FWLIB/src/stm32f4xx_hash.c ****  *
 443:FWLIB/src/stm32f4xx_hash.c **** @verbatim   
 444:FWLIB/src/stm32f4xx_hash.c ****  ===============================================================================
 445:FWLIB/src/stm32f4xx_hash.c ****                ##### HASH's DMA interface Configuration function #####
 446:FWLIB/src/stm32f4xx_hash.c ****  ===============================================================================  
 447:FWLIB/src/stm32f4xx_hash.c **** 
 448:FWLIB/src/stm32f4xx_hash.c ****  [..] This section provides functions allowing to configure the DMA interface for 
 449:FWLIB/src/stm32f4xx_hash.c ****       HASH/ HMAC data input transfer.
 450:FWLIB/src/stm32f4xx_hash.c ****    
 451:FWLIB/src/stm32f4xx_hash.c ****  [..] When the DMA mode is enabled (using the HASH_DMACmd() function), data can be 
 452:FWLIB/src/stm32f4xx_hash.c ****       sent to the IN FIFO using the DMA peripheral.
 453:FWLIB/src/stm32f4xx_hash.c **** 
 454:FWLIB/src/stm32f4xx_hash.c **** @endverbatim
 455:FWLIB/src/stm32f4xx_hash.c ****   * @{
 456:FWLIB/src/stm32f4xx_hash.c ****   */
 457:FWLIB/src/stm32f4xx_hash.c **** 
 458:FWLIB/src/stm32f4xx_hash.c **** /**
 459:FWLIB/src/stm32f4xx_hash.c ****   * @brief  Enables or disables auto-start message padding and
 460:FWLIB/src/stm32f4xx_hash.c ****   *         calculation of the final message digest at the end of DMA transfer.
 461:FWLIB/src/stm32f4xx_hash.c ****   * @param  NewState: new state of the selected HASH DMA transfer request.
 462:FWLIB/src/stm32f4xx_hash.c ****   *          This parameter can be: ENABLE or DISABLE.
 463:FWLIB/src/stm32f4xx_hash.c ****   * @retval None
 464:FWLIB/src/stm32f4xx_hash.c ****   */
ARM GAS  /tmp/ccipRlnd.s 			page 19


 465:FWLIB/src/stm32f4xx_hash.c **** void HASH_AutoStartDigest(FunctionalState NewState)
 466:FWLIB/src/stm32f4xx_hash.c **** {
 569              		.loc 1 466 1 is_stmt 1 view -0
 570              		.cfi_startproc
 571              		@ args = 0, pretend = 0, frame = 0
 572              		@ frame_needed = 0, uses_anonymous_args = 0
 573              		@ link register save eliminated.
 467:FWLIB/src/stm32f4xx_hash.c ****   /* Check the parameters */
 468:FWLIB/src/stm32f4xx_hash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 574              		.loc 1 468 3 view .LVU139
 469:FWLIB/src/stm32f4xx_hash.c **** 
 470:FWLIB/src/stm32f4xx_hash.c ****   if (NewState != DISABLE)
 575              		.loc 1 470 3 view .LVU140
 576              		.loc 1 470 6 is_stmt 0 view .LVU141
 577 0000 28B1     		cbz	r0, .L43
 471:FWLIB/src/stm32f4xx_hash.c ****   {
 472:FWLIB/src/stm32f4xx_hash.c ****     /* Enable the auto start of the final message digest at the end of DMA transfer */
 473:FWLIB/src/stm32f4xx_hash.c ****     HASH->CR &= ~HASH_CR_MDMAT;
 578              		.loc 1 473 5 is_stmt 1 view .LVU142
 579              		.loc 1 473 14 is_stmt 0 view .LVU143
 580 0002 064A     		ldr	r2, .L45
 581 0004 1368     		ldr	r3, [r2]
 582 0006 23F40053 		bic	r3, r3, #8192
 583 000a 1360     		str	r3, [r2]
 584 000c 7047     		bx	lr
 585              	.L43:
 474:FWLIB/src/stm32f4xx_hash.c ****   }
 475:FWLIB/src/stm32f4xx_hash.c ****   else
 476:FWLIB/src/stm32f4xx_hash.c ****   {
 477:FWLIB/src/stm32f4xx_hash.c ****     /* Disable the auto start of the final message digest at the end of DMA transfer */
 478:FWLIB/src/stm32f4xx_hash.c ****     HASH->CR |= HASH_CR_MDMAT;
 586              		.loc 1 478 5 is_stmt 1 view .LVU144
 587              		.loc 1 478 14 is_stmt 0 view .LVU145
 588 000e 034A     		ldr	r2, .L45
 589 0010 1368     		ldr	r3, [r2]
 590 0012 43F40053 		orr	r3, r3, #8192
 591 0016 1360     		str	r3, [r2]
 479:FWLIB/src/stm32f4xx_hash.c ****   }
 480:FWLIB/src/stm32f4xx_hash.c **** }
 592              		.loc 1 480 1 view .LVU146
 593 0018 7047     		bx	lr
 594              	.L46:
 595 001a 00BF     		.align	2
 596              	.L45:
 597 001c 00040650 		.word	1342571520
 598              		.cfi_endproc
 599              	.LFE134:
 601              		.section	.text.HASH_DMACmd,"ax",%progbits
 602              		.align	1
 603              		.global	HASH_DMACmd
 604              		.syntax unified
 605              		.thumb
 606              		.thumb_func
 607              		.fpu fpv4-sp-d16
 609              	HASH_DMACmd:
 610              	.LVL17:
 611              	.LFB135:
ARM GAS  /tmp/ccipRlnd.s 			page 20


 481:FWLIB/src/stm32f4xx_hash.c ****   
 482:FWLIB/src/stm32f4xx_hash.c **** /**
 483:FWLIB/src/stm32f4xx_hash.c ****   * @brief  Enables or disables the HASH DMA interface.
 484:FWLIB/src/stm32f4xx_hash.c ****   * @note   The DMA is disabled by hardware after the end of transfer.
 485:FWLIB/src/stm32f4xx_hash.c ****   * @param  NewState: new state of the selected HASH DMA transfer request.
 486:FWLIB/src/stm32f4xx_hash.c ****   *          This parameter can be: ENABLE or DISABLE.
 487:FWLIB/src/stm32f4xx_hash.c ****   * @retval None
 488:FWLIB/src/stm32f4xx_hash.c ****   */
 489:FWLIB/src/stm32f4xx_hash.c **** void HASH_DMACmd(FunctionalState NewState)
 490:FWLIB/src/stm32f4xx_hash.c **** {
 612              		.loc 1 490 1 is_stmt 1 view -0
 613              		.cfi_startproc
 614              		@ args = 0, pretend = 0, frame = 0
 615              		@ frame_needed = 0, uses_anonymous_args = 0
 616              		@ link register save eliminated.
 491:FWLIB/src/stm32f4xx_hash.c ****   /* Check the parameters */
 492:FWLIB/src/stm32f4xx_hash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 617              		.loc 1 492 3 view .LVU148
 493:FWLIB/src/stm32f4xx_hash.c **** 
 494:FWLIB/src/stm32f4xx_hash.c ****   if (NewState != DISABLE)
 618              		.loc 1 494 3 view .LVU149
 619              		.loc 1 494 6 is_stmt 0 view .LVU150
 620 0000 28B1     		cbz	r0, .L48
 495:FWLIB/src/stm32f4xx_hash.c ****   {
 496:FWLIB/src/stm32f4xx_hash.c ****     /* Enable the HASH DMA request */
 497:FWLIB/src/stm32f4xx_hash.c ****     HASH->CR |= HASH_CR_DMAE;
 621              		.loc 1 497 5 is_stmt 1 view .LVU151
 622              		.loc 1 497 14 is_stmt 0 view .LVU152
 623 0002 064A     		ldr	r2, .L50
 624 0004 1368     		ldr	r3, [r2]
 625 0006 43F00803 		orr	r3, r3, #8
 626 000a 1360     		str	r3, [r2]
 627 000c 7047     		bx	lr
 628              	.L48:
 498:FWLIB/src/stm32f4xx_hash.c ****   }
 499:FWLIB/src/stm32f4xx_hash.c ****   else
 500:FWLIB/src/stm32f4xx_hash.c ****   {
 501:FWLIB/src/stm32f4xx_hash.c ****     /* Disable the HASH DMA request */
 502:FWLIB/src/stm32f4xx_hash.c ****     HASH->CR &= ~HASH_CR_DMAE;
 629              		.loc 1 502 5 is_stmt 1 view .LVU153
 630              		.loc 1 502 14 is_stmt 0 view .LVU154
 631 000e 034A     		ldr	r2, .L50
 632 0010 1368     		ldr	r3, [r2]
 633 0012 23F00803 		bic	r3, r3, #8
 634 0016 1360     		str	r3, [r2]
 503:FWLIB/src/stm32f4xx_hash.c ****   }
 504:FWLIB/src/stm32f4xx_hash.c **** }
 635              		.loc 1 504 1 view .LVU155
 636 0018 7047     		bx	lr
 637              	.L51:
 638 001a 00BF     		.align	2
 639              	.L50:
 640 001c 00040650 		.word	1342571520
 641              		.cfi_endproc
 642              	.LFE135:
 644              		.section	.text.HASH_ITConfig,"ax",%progbits
 645              		.align	1
ARM GAS  /tmp/ccipRlnd.s 			page 21


 646              		.global	HASH_ITConfig
 647              		.syntax unified
 648              		.thumb
 649              		.thumb_func
 650              		.fpu fpv4-sp-d16
 652              	HASH_ITConfig:
 653              	.LVL18:
 654              	.LFB136:
 505:FWLIB/src/stm32f4xx_hash.c **** /**
 506:FWLIB/src/stm32f4xx_hash.c ****   * @}
 507:FWLIB/src/stm32f4xx_hash.c ****   */
 508:FWLIB/src/stm32f4xx_hash.c **** 
 509:FWLIB/src/stm32f4xx_hash.c **** /** @defgroup HASH_Group5 Interrupts and flags management functions
 510:FWLIB/src/stm32f4xx_hash.c ****  *  @brief   Interrupts and flags management functions
 511:FWLIB/src/stm32f4xx_hash.c ****  *
 512:FWLIB/src/stm32f4xx_hash.c **** @verbatim   
 513:FWLIB/src/stm32f4xx_hash.c ****  ===============================================================================
 514:FWLIB/src/stm32f4xx_hash.c ****                ##### Interrupts and flags management functions #####
 515:FWLIB/src/stm32f4xx_hash.c ****  ===============================================================================  
 516:FWLIB/src/stm32f4xx_hash.c **** 
 517:FWLIB/src/stm32f4xx_hash.c ****  [..] This section provides functions allowing to configure the HASH Interrupts and 
 518:FWLIB/src/stm32f4xx_hash.c ****       to get the status and clear flags and Interrupts pending bits.
 519:FWLIB/src/stm32f4xx_hash.c ****   
 520:FWLIB/src/stm32f4xx_hash.c ****  [..] The HASH provides 2 Interrupts sources and 5 Flags:
 521:FWLIB/src/stm32f4xx_hash.c ****   
 522:FWLIB/src/stm32f4xx_hash.c ****  *** Flags : ***
 523:FWLIB/src/stm32f4xx_hash.c ****  =============== 
 524:FWLIB/src/stm32f4xx_hash.c ****  [..]
 525:FWLIB/src/stm32f4xx_hash.c ****    (#) HASH_FLAG_DINIS : set when 16 locations are free in the Data IN FIFO 
 526:FWLIB/src/stm32f4xx_hash.c ****       which means that a  new block (512 bit) can be entered into the input buffer.
 527:FWLIB/src/stm32f4xx_hash.c ****                           
 528:FWLIB/src/stm32f4xx_hash.c ****    (#) HASH_FLAG_DCIS :  set when Digest calculation is complete
 529:FWLIB/src/stm32f4xx_hash.c ****       
 530:FWLIB/src/stm32f4xx_hash.c ****    (#) HASH_FLAG_DMAS :  set when HASH's DMA interface is enabled (DMAE=1) or 
 531:FWLIB/src/stm32f4xx_hash.c ****        a transfer is ongoing. This Flag is cleared only by hardware.
 532:FWLIB/src/stm32f4xx_hash.c ****                            
 533:FWLIB/src/stm32f4xx_hash.c ****    (#) HASH_FLAG_BUSY :  set when The hash core is processing a block of data
 534:FWLIB/src/stm32f4xx_hash.c ****        This Flag is cleared only by hardware. 
 535:FWLIB/src/stm32f4xx_hash.c ****                            
 536:FWLIB/src/stm32f4xx_hash.c ****    (#) HASH_FLAG_DINNE : set when Data IN FIFO is not empty which means that 
 537:FWLIB/src/stm32f4xx_hash.c ****        the Data IN FIFO contains at least one word of data. This Flag is cleared 
 538:FWLIB/src/stm32f4xx_hash.c ****        only by hardware.
 539:FWLIB/src/stm32f4xx_hash.c ****      
 540:FWLIB/src/stm32f4xx_hash.c ****  *** Interrupts : ***
 541:FWLIB/src/stm32f4xx_hash.c ****  ====================
 542:FWLIB/src/stm32f4xx_hash.c ****  [..]   
 543:FWLIB/src/stm32f4xx_hash.c ****    (#) HASH_IT_DINI  : if enabled, this interrupt source is pending when 16 
 544:FWLIB/src/stm32f4xx_hash.c ****        locations are free in the Data IN FIFO  which means that a new block (512 bit)
 545:FWLIB/src/stm32f4xx_hash.c ****        can be entered into the input buffer. This interrupt source is cleared using 
 546:FWLIB/src/stm32f4xx_hash.c ****        HASH_ClearITPendingBit(HASH_IT_DINI) function.
 547:FWLIB/src/stm32f4xx_hash.c ****    
 548:FWLIB/src/stm32f4xx_hash.c ****    (#) HASH_IT_DCI   : if enabled, this interrupt source is pending when Digest 
 549:FWLIB/src/stm32f4xx_hash.c ****        calculation is complete. This interrupt source is cleared using 
 550:FWLIB/src/stm32f4xx_hash.c ****        HASH_ClearITPendingBit(HASH_IT_DCI) function.
 551:FWLIB/src/stm32f4xx_hash.c **** 
 552:FWLIB/src/stm32f4xx_hash.c ****  *** Managing the HASH controller events : ***
 553:FWLIB/src/stm32f4xx_hash.c ****  =============================================
ARM GAS  /tmp/ccipRlnd.s 			page 22


 554:FWLIB/src/stm32f4xx_hash.c ****  [..] The user should identify which mode will be used in his application to manage 
 555:FWLIB/src/stm32f4xx_hash.c ****       the HASH controller events: Polling mode or Interrupt mode.
 556:FWLIB/src/stm32f4xx_hash.c ****   
 557:FWLIB/src/stm32f4xx_hash.c ****    (#) In the Polling Mode it is advised to use the following functions:
 558:FWLIB/src/stm32f4xx_hash.c ****        (++) HASH_GetFlagStatus() : to check if flags events occur. 
 559:FWLIB/src/stm32f4xx_hash.c ****        (++) HASH_ClearFlag()     : to clear the flags events.
 560:FWLIB/src/stm32f4xx_hash.c ****     
 561:FWLIB/src/stm32f4xx_hash.c ****    (#)  In the Interrupt Mode it is advised to use the following functions:
 562:FWLIB/src/stm32f4xx_hash.c ****        (++) HASH_ITConfig()       : to enable or disable the interrupt source.
 563:FWLIB/src/stm32f4xx_hash.c ****        (++) HASH_GetITStatus()    : to check if Interrupt occurs.
 564:FWLIB/src/stm32f4xx_hash.c ****        (++) HASH_ClearITPendingBit() : to clear the Interrupt pending Bit 
 565:FWLIB/src/stm32f4xx_hash.c ****             (corresponding Flag). 
 566:FWLIB/src/stm32f4xx_hash.c **** 
 567:FWLIB/src/stm32f4xx_hash.c **** @endverbatim
 568:FWLIB/src/stm32f4xx_hash.c ****   * @{
 569:FWLIB/src/stm32f4xx_hash.c ****   */ 
 570:FWLIB/src/stm32f4xx_hash.c ****   
 571:FWLIB/src/stm32f4xx_hash.c **** /**
 572:FWLIB/src/stm32f4xx_hash.c ****   * @brief  Enables or disables the specified HASH interrupts.
 573:FWLIB/src/stm32f4xx_hash.c ****   * @param  HASH_IT: specifies the HASH interrupt source to be enabled or disabled.
 574:FWLIB/src/stm32f4xx_hash.c ****   *          This parameter can be any combination of the following values:
 575:FWLIB/src/stm32f4xx_hash.c ****   *            @arg HASH_IT_DINI: Data Input interrupt
 576:FWLIB/src/stm32f4xx_hash.c ****   *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
 577:FWLIB/src/stm32f4xx_hash.c ****   * @param  NewState: new state of the specified HASH interrupt.
 578:FWLIB/src/stm32f4xx_hash.c ****   *           This parameter can be: ENABLE or DISABLE.
 579:FWLIB/src/stm32f4xx_hash.c ****   * @retval None
 580:FWLIB/src/stm32f4xx_hash.c ****   */
 581:FWLIB/src/stm32f4xx_hash.c **** void HASH_ITConfig(uint32_t HASH_IT, FunctionalState NewState)
 582:FWLIB/src/stm32f4xx_hash.c **** {
 655              		.loc 1 582 1 is_stmt 1 view -0
 656              		.cfi_startproc
 657              		@ args = 0, pretend = 0, frame = 0
 658              		@ frame_needed = 0, uses_anonymous_args = 0
 659              		@ link register save eliminated.
 583:FWLIB/src/stm32f4xx_hash.c ****   /* Check the parameters */
 584:FWLIB/src/stm32f4xx_hash.c ****   assert_param(IS_HASH_IT(HASH_IT));
 660              		.loc 1 584 3 view .LVU157
 585:FWLIB/src/stm32f4xx_hash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 661              		.loc 1 585 3 view .LVU158
 586:FWLIB/src/stm32f4xx_hash.c **** 
 587:FWLIB/src/stm32f4xx_hash.c ****   if (NewState != DISABLE)
 662              		.loc 1 587 3 view .LVU159
 663              		.loc 1 587 6 is_stmt 0 view .LVU160
 664 0000 21B1     		cbz	r1, .L53
 588:FWLIB/src/stm32f4xx_hash.c ****   {
 589:FWLIB/src/stm32f4xx_hash.c ****     /* Enable the selected HASH interrupt */
 590:FWLIB/src/stm32f4xx_hash.c ****     HASH->IMR |= HASH_IT;
 665              		.loc 1 590 5 is_stmt 1 view .LVU161
 666              		.loc 1 590 15 is_stmt 0 view .LVU162
 667 0002 054A     		ldr	r2, .L55
 668 0004 136A     		ldr	r3, [r2, #32]
 669 0006 0343     		orrs	r3, r3, r0
 670 0008 1362     		str	r3, [r2, #32]
 671 000a 7047     		bx	lr
 672              	.L53:
 591:FWLIB/src/stm32f4xx_hash.c ****   }
 592:FWLIB/src/stm32f4xx_hash.c ****   else
ARM GAS  /tmp/ccipRlnd.s 			page 23


 593:FWLIB/src/stm32f4xx_hash.c ****   {
 594:FWLIB/src/stm32f4xx_hash.c ****     /* Disable the selected HASH interrupt */
 595:FWLIB/src/stm32f4xx_hash.c ****     HASH->IMR &= (uint32_t)(~HASH_IT);
 673              		.loc 1 595 5 is_stmt 1 view .LVU163
 674              		.loc 1 595 15 is_stmt 0 view .LVU164
 675 000c 024A     		ldr	r2, .L55
 676 000e 136A     		ldr	r3, [r2, #32]
 677 0010 23EA0003 		bic	r3, r3, r0
 678 0014 1362     		str	r3, [r2, #32]
 596:FWLIB/src/stm32f4xx_hash.c ****   }
 597:FWLIB/src/stm32f4xx_hash.c **** }
 679              		.loc 1 597 1 view .LVU165
 680 0016 7047     		bx	lr
 681              	.L56:
 682              		.align	2
 683              	.L55:
 684 0018 00040650 		.word	1342571520
 685              		.cfi_endproc
 686              	.LFE136:
 688              		.section	.text.HASH_GetFlagStatus,"ax",%progbits
 689              		.align	1
 690              		.global	HASH_GetFlagStatus
 691              		.syntax unified
 692              		.thumb
 693              		.thumb_func
 694              		.fpu fpv4-sp-d16
 696              	HASH_GetFlagStatus:
 697              	.LVL19:
 698              	.LFB137:
 598:FWLIB/src/stm32f4xx_hash.c **** 
 599:FWLIB/src/stm32f4xx_hash.c **** /**
 600:FWLIB/src/stm32f4xx_hash.c ****   * @brief  Checks whether the specified HASH flag is set or not.
 601:FWLIB/src/stm32f4xx_hash.c ****   * @param  HASH_FLAG: specifies the HASH flag to check.
 602:FWLIB/src/stm32f4xx_hash.c ****   *          This parameter can be one of the following values:
 603:FWLIB/src/stm32f4xx_hash.c ****   *            @arg HASH_FLAG_DINIS: Data input interrupt status flag
 604:FWLIB/src/stm32f4xx_hash.c ****   *            @arg HASH_FLAG_DCIS: Digest calculation completion interrupt status flag
 605:FWLIB/src/stm32f4xx_hash.c ****   *            @arg HASH_FLAG_BUSY: Busy flag
 606:FWLIB/src/stm32f4xx_hash.c ****   *            @arg HASH_FLAG_DMAS: DMAS Status flag
 607:FWLIB/src/stm32f4xx_hash.c ****   *            @arg HASH_FLAG_DINNE: Data Input register (DIN) not empty status flag
 608:FWLIB/src/stm32f4xx_hash.c ****   * @retval The new state of HASH_FLAG (SET or RESET)
 609:FWLIB/src/stm32f4xx_hash.c ****   */
 610:FWLIB/src/stm32f4xx_hash.c **** FlagStatus HASH_GetFlagStatus(uint32_t HASH_FLAG)
 611:FWLIB/src/stm32f4xx_hash.c **** {
 699              		.loc 1 611 1 is_stmt 1 view -0
 700              		.cfi_startproc
 701              		@ args = 0, pretend = 0, frame = 0
 702              		@ frame_needed = 0, uses_anonymous_args = 0
 703              		@ link register save eliminated.
 612:FWLIB/src/stm32f4xx_hash.c ****   FlagStatus bitstatus = RESET;
 704              		.loc 1 612 3 view .LVU167
 613:FWLIB/src/stm32f4xx_hash.c ****   uint32_t tempreg = 0;
 705              		.loc 1 613 3 view .LVU168
 614:FWLIB/src/stm32f4xx_hash.c **** 
 615:FWLIB/src/stm32f4xx_hash.c ****   /* Check the parameters */
 616:FWLIB/src/stm32f4xx_hash.c ****   assert_param(IS_HASH_GET_FLAG(HASH_FLAG));
 706              		.loc 1 616 3 view .LVU169
 617:FWLIB/src/stm32f4xx_hash.c **** 
ARM GAS  /tmp/ccipRlnd.s 			page 24


 618:FWLIB/src/stm32f4xx_hash.c ****   /* check if the FLAG is in CR register */
 619:FWLIB/src/stm32f4xx_hash.c ****   if ((HASH_FLAG & HASH_FLAG_DINNE) != (uint32_t)RESET ) 
 707              		.loc 1 619 3 view .LVU170
 708              		.loc 1 619 6 is_stmt 0 view .LVU171
 709 0000 10F4805F 		tst	r0, #4096
 710 0004 05D0     		beq	.L58
 620:FWLIB/src/stm32f4xx_hash.c ****   {
 621:FWLIB/src/stm32f4xx_hash.c ****     tempreg = HASH->CR;
 711              		.loc 1 621 5 is_stmt 1 view .LVU172
 712              		.loc 1 621 13 is_stmt 0 view .LVU173
 713 0006 054B     		ldr	r3, .L62
 714 0008 1B68     		ldr	r3, [r3]
 715              	.LVL20:
 716              	.L59:
 622:FWLIB/src/stm32f4xx_hash.c ****   }
 623:FWLIB/src/stm32f4xx_hash.c ****   else /* The FLAG is in SR register */
 624:FWLIB/src/stm32f4xx_hash.c ****   {
 625:FWLIB/src/stm32f4xx_hash.c ****     tempreg = HASH->SR;
 626:FWLIB/src/stm32f4xx_hash.c ****   }
 627:FWLIB/src/stm32f4xx_hash.c **** 
 628:FWLIB/src/stm32f4xx_hash.c ****   /* Check the status of the specified HASH flag */
 629:FWLIB/src/stm32f4xx_hash.c ****   if ((tempreg & HASH_FLAG) != (uint32_t)RESET)
 717              		.loc 1 629 3 is_stmt 1 view .LVU174
 718              		.loc 1 629 6 is_stmt 0 view .LVU175
 719 000a 0342     		tst	r3, r0
 720 000c 04D0     		beq	.L61
 630:FWLIB/src/stm32f4xx_hash.c ****   {
 631:FWLIB/src/stm32f4xx_hash.c ****     /* HASH is set */
 632:FWLIB/src/stm32f4xx_hash.c ****     bitstatus = SET;
 721              		.loc 1 632 15 view .LVU176
 722 000e 0120     		movs	r0, #1
 723              	.LVL21:
 724              		.loc 1 632 15 view .LVU177
 725 0010 7047     		bx	lr
 726              	.LVL22:
 727              	.L58:
 625:FWLIB/src/stm32f4xx_hash.c ****   }
 728              		.loc 1 625 5 is_stmt 1 view .LVU178
 625:FWLIB/src/stm32f4xx_hash.c ****   }
 729              		.loc 1 625 13 is_stmt 0 view .LVU179
 730 0012 024B     		ldr	r3, .L62
 731 0014 5B6A     		ldr	r3, [r3, #36]
 732              	.LVL23:
 625:FWLIB/src/stm32f4xx_hash.c ****   }
 733              		.loc 1 625 13 view .LVU180
 734 0016 F8E7     		b	.L59
 735              	.L61:
 633:FWLIB/src/stm32f4xx_hash.c ****   }
 634:FWLIB/src/stm32f4xx_hash.c ****   else
 635:FWLIB/src/stm32f4xx_hash.c ****   {
 636:FWLIB/src/stm32f4xx_hash.c ****     /* HASH_FLAG is reset */
 637:FWLIB/src/stm32f4xx_hash.c ****     bitstatus = RESET;
 736              		.loc 1 637 15 view .LVU181
 737 0018 0020     		movs	r0, #0
 738              	.LVL24:
 638:FWLIB/src/stm32f4xx_hash.c ****   }
 639:FWLIB/src/stm32f4xx_hash.c **** 
ARM GAS  /tmp/ccipRlnd.s 			page 25


 640:FWLIB/src/stm32f4xx_hash.c ****   /* Return the HASH_FLAG status */
 641:FWLIB/src/stm32f4xx_hash.c ****   return  bitstatus;
 739              		.loc 1 641 3 is_stmt 1 view .LVU182
 642:FWLIB/src/stm32f4xx_hash.c **** }
 740              		.loc 1 642 1 is_stmt 0 view .LVU183
 741 001a 7047     		bx	lr
 742              	.L63:
 743              		.align	2
 744              	.L62:
 745 001c 00040650 		.word	1342571520
 746              		.cfi_endproc
 747              	.LFE137:
 749              		.section	.text.HASH_ClearFlag,"ax",%progbits
 750              		.align	1
 751              		.global	HASH_ClearFlag
 752              		.syntax unified
 753              		.thumb
 754              		.thumb_func
 755              		.fpu fpv4-sp-d16
 757              	HASH_ClearFlag:
 758              	.LVL25:
 759              	.LFB138:
 643:FWLIB/src/stm32f4xx_hash.c **** /**
 644:FWLIB/src/stm32f4xx_hash.c ****   * @brief  Clears the HASH flags.
 645:FWLIB/src/stm32f4xx_hash.c ****   * @param  HASH_FLAG: specifies the flag to clear. 
 646:FWLIB/src/stm32f4xx_hash.c ****   *          This parameter can be any combination of the following values:
 647:FWLIB/src/stm32f4xx_hash.c ****   *            @arg HASH_FLAG_DINIS: Data Input Flag
 648:FWLIB/src/stm32f4xx_hash.c ****   *            @arg HASH_FLAG_DCIS: Digest Calculation Completion Flag                       
 649:FWLIB/src/stm32f4xx_hash.c ****   * @retval None
 650:FWLIB/src/stm32f4xx_hash.c ****   */
 651:FWLIB/src/stm32f4xx_hash.c **** void HASH_ClearFlag(uint32_t HASH_FLAG)
 652:FWLIB/src/stm32f4xx_hash.c **** {
 760              		.loc 1 652 1 is_stmt 1 view -0
 761              		.cfi_startproc
 762              		@ args = 0, pretend = 0, frame = 0
 763              		@ frame_needed = 0, uses_anonymous_args = 0
 764              		@ link register save eliminated.
 653:FWLIB/src/stm32f4xx_hash.c ****   /* Check the parameters */
 654:FWLIB/src/stm32f4xx_hash.c ****   assert_param(IS_HASH_CLEAR_FLAG(HASH_FLAG));
 765              		.loc 1 654 3 view .LVU185
 655:FWLIB/src/stm32f4xx_hash.c ****   
 656:FWLIB/src/stm32f4xx_hash.c ****   /* Clear the selected HASH flags */
 657:FWLIB/src/stm32f4xx_hash.c ****   HASH->SR = ~(uint32_t)HASH_FLAG;
 766              		.loc 1 657 3 view .LVU186
 767              		.loc 1 657 14 is_stmt 0 view .LVU187
 768 0000 C043     		mvns	r0, r0
 769              	.LVL26:
 770              		.loc 1 657 12 view .LVU188
 771 0002 014B     		ldr	r3, .L65
 772 0004 5862     		str	r0, [r3, #36]
 658:FWLIB/src/stm32f4xx_hash.c **** }
 773              		.loc 1 658 1 view .LVU189
 774 0006 7047     		bx	lr
 775              	.L66:
 776              		.align	2
 777              	.L65:
 778 0008 00040650 		.word	1342571520
ARM GAS  /tmp/ccipRlnd.s 			page 26


 779              		.cfi_endproc
 780              	.LFE138:
 782              		.section	.text.HASH_GetITStatus,"ax",%progbits
 783              		.align	1
 784              		.global	HASH_GetITStatus
 785              		.syntax unified
 786              		.thumb
 787              		.thumb_func
 788              		.fpu fpv4-sp-d16
 790              	HASH_GetITStatus:
 791              	.LVL27:
 792              	.LFB139:
 659:FWLIB/src/stm32f4xx_hash.c **** /**
 660:FWLIB/src/stm32f4xx_hash.c ****   * @brief  Checks whether the specified HASH interrupt has occurred or not.
 661:FWLIB/src/stm32f4xx_hash.c ****   * @param  HASH_IT: specifies the HASH interrupt source to check.
 662:FWLIB/src/stm32f4xx_hash.c ****   *          This parameter can be one of the following values:
 663:FWLIB/src/stm32f4xx_hash.c ****   *            @arg HASH_IT_DINI: Data Input interrupt
 664:FWLIB/src/stm32f4xx_hash.c ****   *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
 665:FWLIB/src/stm32f4xx_hash.c ****   * @retval The new state of HASH_IT (SET or RESET).
 666:FWLIB/src/stm32f4xx_hash.c ****   */
 667:FWLIB/src/stm32f4xx_hash.c **** ITStatus HASH_GetITStatus(uint32_t HASH_IT)
 668:FWLIB/src/stm32f4xx_hash.c **** {
 793              		.loc 1 668 1 is_stmt 1 view -0
 794              		.cfi_startproc
 795              		@ args = 0, pretend = 0, frame = 0
 796              		@ frame_needed = 0, uses_anonymous_args = 0
 797              		@ link register save eliminated.
 669:FWLIB/src/stm32f4xx_hash.c ****   ITStatus bitstatus = RESET;
 798              		.loc 1 669 3 view .LVU191
 670:FWLIB/src/stm32f4xx_hash.c ****   uint32_t tmpreg = 0;
 799              		.loc 1 670 3 view .LVU192
 671:FWLIB/src/stm32f4xx_hash.c **** 
 672:FWLIB/src/stm32f4xx_hash.c ****   /* Check the parameters */
 673:FWLIB/src/stm32f4xx_hash.c ****   assert_param(IS_HASH_GET_IT(HASH_IT));  
 800              		.loc 1 673 3 view .LVU193
 674:FWLIB/src/stm32f4xx_hash.c **** 
 675:FWLIB/src/stm32f4xx_hash.c **** 
 676:FWLIB/src/stm32f4xx_hash.c ****   /* Check the status of the specified HASH interrupt */
 677:FWLIB/src/stm32f4xx_hash.c ****   tmpreg =  HASH->SR;
 801              		.loc 1 677 3 view .LVU194
 802              		.loc 1 677 10 is_stmt 0 view .LVU195
 803 0000 044A     		ldr	r2, .L70
 804 0002 516A     		ldr	r1, [r2, #36]
 805              	.LVL28:
 678:FWLIB/src/stm32f4xx_hash.c **** 
 679:FWLIB/src/stm32f4xx_hash.c ****   if (((HASH->IMR & tmpreg) & HASH_IT) != RESET)
 806              		.loc 1 679 3 is_stmt 1 view .LVU196
 807              		.loc 1 679 13 is_stmt 0 view .LVU197
 808 0004 136A     		ldr	r3, [r2, #32]
 809              		.loc 1 679 19 view .LVU198
 810 0006 0B40     		ands	r3, r3, r1
 811              		.loc 1 679 6 view .LVU199
 812 0008 0342     		tst	r3, r0
 813 000a 01D0     		beq	.L69
 680:FWLIB/src/stm32f4xx_hash.c ****   {
 681:FWLIB/src/stm32f4xx_hash.c ****     /* HASH_IT is set */
 682:FWLIB/src/stm32f4xx_hash.c ****     bitstatus = SET;
ARM GAS  /tmp/ccipRlnd.s 			page 27


 814              		.loc 1 682 15 view .LVU200
 815 000c 0120     		movs	r0, #1
 816              	.LVL29:
 817              		.loc 1 682 15 view .LVU201
 818 000e 7047     		bx	lr
 819              	.LVL30:
 820              	.L69:
 683:FWLIB/src/stm32f4xx_hash.c ****   }
 684:FWLIB/src/stm32f4xx_hash.c ****   else
 685:FWLIB/src/stm32f4xx_hash.c ****   {
 686:FWLIB/src/stm32f4xx_hash.c ****     /* HASH_IT is reset */
 687:FWLIB/src/stm32f4xx_hash.c ****     bitstatus = RESET;
 821              		.loc 1 687 15 view .LVU202
 822 0010 0020     		movs	r0, #0
 823              	.LVL31:
 688:FWLIB/src/stm32f4xx_hash.c ****   }
 689:FWLIB/src/stm32f4xx_hash.c ****   /* Return the HASH_IT status */
 690:FWLIB/src/stm32f4xx_hash.c ****   return bitstatus;
 824              		.loc 1 690 3 is_stmt 1 view .LVU203
 691:FWLIB/src/stm32f4xx_hash.c **** }
 825              		.loc 1 691 1 is_stmt 0 view .LVU204
 826 0012 7047     		bx	lr
 827              	.L71:
 828              		.align	2
 829              	.L70:
 830 0014 00040650 		.word	1342571520
 831              		.cfi_endproc
 832              	.LFE139:
 834              		.section	.text.HASH_ClearITPendingBit,"ax",%progbits
 835              		.align	1
 836              		.global	HASH_ClearITPendingBit
 837              		.syntax unified
 838              		.thumb
 839              		.thumb_func
 840              		.fpu fpv4-sp-d16
 842              	HASH_ClearITPendingBit:
 843              	.LVL32:
 844              	.LFB140:
 692:FWLIB/src/stm32f4xx_hash.c **** 
 693:FWLIB/src/stm32f4xx_hash.c **** /**
 694:FWLIB/src/stm32f4xx_hash.c ****   * @brief  Clears the HASH interrupt pending bit(s).
 695:FWLIB/src/stm32f4xx_hash.c ****   * @param  HASH_IT: specifies the HASH interrupt pending bit(s) to clear.
 696:FWLIB/src/stm32f4xx_hash.c ****   *          This parameter can be any combination of the following values:
 697:FWLIB/src/stm32f4xx_hash.c ****   *            @arg HASH_IT_DINI: Data Input interrupt
 698:FWLIB/src/stm32f4xx_hash.c ****   *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
 699:FWLIB/src/stm32f4xx_hash.c ****   * @retval None
 700:FWLIB/src/stm32f4xx_hash.c ****   */
 701:FWLIB/src/stm32f4xx_hash.c **** void HASH_ClearITPendingBit(uint32_t HASH_IT)
 702:FWLIB/src/stm32f4xx_hash.c **** {
 845              		.loc 1 702 1 is_stmt 1 view -0
 846              		.cfi_startproc
 847              		@ args = 0, pretend = 0, frame = 0
 848              		@ frame_needed = 0, uses_anonymous_args = 0
 849              		@ link register save eliminated.
 703:FWLIB/src/stm32f4xx_hash.c ****   /* Check the parameters */
 704:FWLIB/src/stm32f4xx_hash.c ****   assert_param(IS_HASH_IT(HASH_IT));
 850              		.loc 1 704 3 view .LVU206
ARM GAS  /tmp/ccipRlnd.s 			page 28


 705:FWLIB/src/stm32f4xx_hash.c **** 
 706:FWLIB/src/stm32f4xx_hash.c ****   /* Clear the selected HASH interrupt pending bit */
 707:FWLIB/src/stm32f4xx_hash.c ****   HASH->SR = (uint32_t)(~HASH_IT);
 851              		.loc 1 707 3 view .LVU207
 852              		.loc 1 707 25 is_stmt 0 view .LVU208
 853 0000 C043     		mvns	r0, r0
 854              	.LVL33:
 855              		.loc 1 707 12 view .LVU209
 856 0002 014B     		ldr	r3, .L73
 857 0004 5862     		str	r0, [r3, #36]
 708:FWLIB/src/stm32f4xx_hash.c **** }
 858              		.loc 1 708 1 view .LVU210
 859 0006 7047     		bx	lr
 860              	.L74:
 861              		.align	2
 862              	.L73:
 863 0008 00040650 		.word	1342571520
 864              		.cfi_endproc
 865              	.LFE140:
 867              		.text
 868              	.Letext0:
 869              		.file 2 "/home/bt0/stm32/compile-tool/gcc-arm-none-eabi-8-2018-q4-major-linux/gcc-arm-none-eabi-8-
 870              		.file 3 "/home/bt0/stm32/compile-tool/gcc-arm-none-eabi-8-2018-q4-major-linux/gcc-arm-none-eabi-8-
 871              		.file 4 "F4_CORE/core_cm4.h"
 872              		.file 5 "USER/system_stm32f4xx.h"
 873              		.file 6 "USER/stm32f4xx.h"
 874              		.file 7 "FWLIB/inc/stm32f4xx_hash.h"
 875              		.file 8 "FWLIB/inc/stm32f4xx_rcc.h"
ARM GAS  /tmp/ccipRlnd.s 			page 29


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_hash.c
     /tmp/ccipRlnd.s:18     .text.HASH_DeInit:0000000000000000 $t
     /tmp/ccipRlnd.s:26     .text.HASH_DeInit:0000000000000000 HASH_DeInit
     /tmp/ccipRlnd.s:54     .text.HASH_Init:0000000000000000 $t
     /tmp/ccipRlnd.s:61     .text.HASH_Init:0000000000000000 HASH_Init
     /tmp/ccipRlnd.s:142    .text.HASH_Init:000000000000004c $d
     /tmp/ccipRlnd.s:147    .text.HASH_StructInit:0000000000000000 $t
     /tmp/ccipRlnd.s:154    .text.HASH_StructInit:0000000000000000 HASH_StructInit
     /tmp/ccipRlnd.s:181    .text.HASH_Reset:0000000000000000 $t
     /tmp/ccipRlnd.s:188    .text.HASH_Reset:0000000000000000 HASH_Reset
     /tmp/ccipRlnd.s:206    .text.HASH_Reset:000000000000000c $d
     /tmp/ccipRlnd.s:211    .text.HASH_SetLastWordValidBitsNbr:0000000000000000 $t
     /tmp/ccipRlnd.s:218    .text.HASH_SetLastWordValidBitsNbr:0000000000000000 HASH_SetLastWordValidBitsNbr
     /tmp/ccipRlnd.s:245    .text.HASH_SetLastWordValidBitsNbr:0000000000000014 $d
     /tmp/ccipRlnd.s:250    .text.HASH_DataIn:0000000000000000 $t
     /tmp/ccipRlnd.s:257    .text.HASH_DataIn:0000000000000000 HASH_DataIn
     /tmp/ccipRlnd.s:274    .text.HASH_DataIn:0000000000000008 $d
     /tmp/ccipRlnd.s:279    .text.HASH_GetInFIFOWordsNbr:0000000000000000 $t
     /tmp/ccipRlnd.s:286    .text.HASH_GetInFIFOWordsNbr:0000000000000000 HASH_GetInFIFOWordsNbr
     /tmp/ccipRlnd.s:303    .text.HASH_GetInFIFOWordsNbr:000000000000000c $d
     /tmp/ccipRlnd.s:308    .text.HASH_GetDigest:0000000000000000 $t
     /tmp/ccipRlnd.s:315    .text.HASH_GetDigest:0000000000000000 HASH_GetDigest
     /tmp/ccipRlnd.s:370    .text.HASH_GetDigest:0000000000000028 $d
     /tmp/ccipRlnd.s:376    .text.HASH_StartDigest:0000000000000000 $t
     /tmp/ccipRlnd.s:383    .text.HASH_StartDigest:0000000000000000 HASH_StartDigest
     /tmp/ccipRlnd.s:401    .text.HASH_StartDigest:000000000000000c $d
     /tmp/ccipRlnd.s:406    .text.HASH_SaveContext:0000000000000000 $t
     /tmp/ccipRlnd.s:413    .text.HASH_SaveContext:0000000000000000 HASH_SaveContext
     /tmp/ccipRlnd.s:469    .text.HASH_SaveContext:0000000000000030 $d
     /tmp/ccipRlnd.s:474    .text.HASH_RestoreContext:0000000000000000 $t
     /tmp/ccipRlnd.s:481    .text.HASH_RestoreContext:0000000000000000 HASH_RestoreContext
     /tmp/ccipRlnd.s:554    .text.HASH_RestoreContext:0000000000000040 $d
     /tmp/ccipRlnd.s:559    .text.HASH_AutoStartDigest:0000000000000000 $t
     /tmp/ccipRlnd.s:566    .text.HASH_AutoStartDigest:0000000000000000 HASH_AutoStartDigest
     /tmp/ccipRlnd.s:597    .text.HASH_AutoStartDigest:000000000000001c $d
     /tmp/ccipRlnd.s:602    .text.HASH_DMACmd:0000000000000000 $t
     /tmp/ccipRlnd.s:609    .text.HASH_DMACmd:0000000000000000 HASH_DMACmd
     /tmp/ccipRlnd.s:640    .text.HASH_DMACmd:000000000000001c $d
     /tmp/ccipRlnd.s:645    .text.HASH_ITConfig:0000000000000000 $t
     /tmp/ccipRlnd.s:652    .text.HASH_ITConfig:0000000000000000 HASH_ITConfig
     /tmp/ccipRlnd.s:684    .text.HASH_ITConfig:0000000000000018 $d
     /tmp/ccipRlnd.s:689    .text.HASH_GetFlagStatus:0000000000000000 $t
     /tmp/ccipRlnd.s:696    .text.HASH_GetFlagStatus:0000000000000000 HASH_GetFlagStatus
     /tmp/ccipRlnd.s:745    .text.HASH_GetFlagStatus:000000000000001c $d
     /tmp/ccipRlnd.s:750    .text.HASH_ClearFlag:0000000000000000 $t
     /tmp/ccipRlnd.s:757    .text.HASH_ClearFlag:0000000000000000 HASH_ClearFlag
     /tmp/ccipRlnd.s:778    .text.HASH_ClearFlag:0000000000000008 $d
     /tmp/ccipRlnd.s:783    .text.HASH_GetITStatus:0000000000000000 $t
     /tmp/ccipRlnd.s:790    .text.HASH_GetITStatus:0000000000000000 HASH_GetITStatus
     /tmp/ccipRlnd.s:830    .text.HASH_GetITStatus:0000000000000014 $d
     /tmp/ccipRlnd.s:835    .text.HASH_ClearITPendingBit:0000000000000000 $t
     /tmp/ccipRlnd.s:842    .text.HASH_ClearITPendingBit:0000000000000000 HASH_ClearITPendingBit
     /tmp/ccipRlnd.s:863    .text.HASH_ClearITPendingBit:0000000000000008 $d

UNDEFINED SYMBOLS
RCC_AHB2PeriphResetCmd
ARM GAS  /tmp/ccipRlnd.s 			page 30


