ARM GAS  /tmp/cccCWJpB.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_hash.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HASH_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	HASH_DeInit
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	HASH_DeInit:
  26              	.LFB123:
  27              		.file 1 "FWLIB/src/stm32f4xx_hash.c"
   1:FWLIB/src/stm32f4xx_hash.c **** /**
   2:FWLIB/src/stm32f4xx_hash.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_hash.c ****   * @file    stm32f4xx_hash.c
   4:FWLIB/src/stm32f4xx_hash.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_hash.c ****   * @version V1.8.0
   6:FWLIB/src/stm32f4xx_hash.c ****   * @date    04-November-2016
   7:FWLIB/src/stm32f4xx_hash.c ****   * @brief   This file provides firmware functions to manage the following 
   8:FWLIB/src/stm32f4xx_hash.c ****   *          functionalities of the HASH / HMAC Processor (HASH) peripheral:           
   9:FWLIB/src/stm32f4xx_hash.c ****   *           - Initialization and Configuration functions
  10:FWLIB/src/stm32f4xx_hash.c ****   *           - Message Digest generation functions
  11:FWLIB/src/stm32f4xx_hash.c ****   *           - context swapping functions   
  12:FWLIB/src/stm32f4xx_hash.c ****   *           - DMA interface function       
  13:FWLIB/src/stm32f4xx_hash.c ****   *           - Interrupts and flags management       
  14:FWLIB/src/stm32f4xx_hash.c ****   *         
  15:FWLIB/src/stm32f4xx_hash.c **** @verbatim
  16:FWLIB/src/stm32f4xx_hash.c ****  ===================================================================      
  17:FWLIB/src/stm32f4xx_hash.c ****                  ##### How to use this driver #####
  18:FWLIB/src/stm32f4xx_hash.c ****  ===================================================================
  19:FWLIB/src/stm32f4xx_hash.c ****             
  20:FWLIB/src/stm32f4xx_hash.c ****  *** HASH operation : *** 
  21:FWLIB/src/stm32f4xx_hash.c ****  ========================                 
  22:FWLIB/src/stm32f4xx_hash.c ****  [..]
  23:FWLIB/src/stm32f4xx_hash.c ****    (#) Enable the HASH controller clock using 
  24:FWLIB/src/stm32f4xx_hash.c ****        RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_HASH, ENABLE) function.
  25:FWLIB/src/stm32f4xx_hash.c ****              
  26:FWLIB/src/stm32f4xx_hash.c ****    (#) Initialize the HASH using HASH_Init() function. 
  27:FWLIB/src/stm32f4xx_hash.c ****                  
  28:FWLIB/src/stm32f4xx_hash.c ****    (#) Reset the HASH processor core, so that the HASH will be ready 
  29:FWLIB/src/stm32f4xx_hash.c ****        to compute he message digest of a new message by using HASH_Reset() function.
  30:FWLIB/src/stm32f4xx_hash.c ****   
  31:FWLIB/src/stm32f4xx_hash.c ****    (#) Enable the HASH controller using the HASH_Cmd() function. 
ARM GAS  /tmp/cccCWJpB.s 			page 2


  32:FWLIB/src/stm32f4xx_hash.c ****                   
  33:FWLIB/src/stm32f4xx_hash.c ****    (#) if using DMA for Data input transfer, Activate the DMA Request 
  34:FWLIB/src/stm32f4xx_hash.c ****        using HASH_DMACmd() function 
  35:FWLIB/src/stm32f4xx_hash.c ****                       
  36:FWLIB/src/stm32f4xx_hash.c ****    (#) if DMA is not used for data transfer, use HASH_DataIn() function 
  37:FWLIB/src/stm32f4xx_hash.c ****        to enter data to IN FIFO.
  38:FWLIB/src/stm32f4xx_hash.c ****                
  39:FWLIB/src/stm32f4xx_hash.c ****             
  40:FWLIB/src/stm32f4xx_hash.c ****    (#) Configure the Number of valid bits in last word of the message 
  41:FWLIB/src/stm32f4xx_hash.c ****        using HASH_SetLastWordValidBitsNbr() function.
  42:FWLIB/src/stm32f4xx_hash.c ****                
  43:FWLIB/src/stm32f4xx_hash.c ****    (#) if the message length is not an exact multiple of 512 bits, 
  44:FWLIB/src/stm32f4xx_hash.c ****        then the function HASH_StartDigest() must be called to launch the computation
  45:FWLIB/src/stm32f4xx_hash.c ****        of the final digest.     
  46:FWLIB/src/stm32f4xx_hash.c ****                
  47:FWLIB/src/stm32f4xx_hash.c ****    (#) Once computed, the digest can be read using HASH_GetDigest() function.         
  48:FWLIB/src/stm32f4xx_hash.c ****                      
  49:FWLIB/src/stm32f4xx_hash.c ****    (#) To control HASH events you can use one of the following wo methods:
  50:FWLIB/src/stm32f4xx_hash.c ****        (++) Check on HASH flags using the HASH_GetFlagStatus() function.  
  51:FWLIB/src/stm32f4xx_hash.c ****        (++) Use HASH interrupts through the function HASH_ITConfig() at 
  52:FWLIB/src/stm32f4xx_hash.c ****             initialization phase and HASH_GetITStatus() function into 
  53:FWLIB/src/stm32f4xx_hash.c ****             interrupt routines in hashing phase.
  54:FWLIB/src/stm32f4xx_hash.c ****             After checking on a flag you should clear it using HASH_ClearFlag()
  55:FWLIB/src/stm32f4xx_hash.c ****             function. And after checking on an interrupt event you should 
  56:FWLIB/src/stm32f4xx_hash.c ****             clear it using HASH_ClearITPendingBit() function.     
  57:FWLIB/src/stm32f4xx_hash.c ****                        
  58:FWLIB/src/stm32f4xx_hash.c ****    (#) Save and restore hash processor context using 
  59:FWLIB/src/stm32f4xx_hash.c ****        HASH_SaveContext() and HASH_RestoreContext() functions.     
  60:FWLIB/src/stm32f4xx_hash.c ****                 
  61:FWLIB/src/stm32f4xx_hash.c ****   
  62:FWLIB/src/stm32f4xx_hash.c ****               
  63:FWLIB/src/stm32f4xx_hash.c ****  *** HMAC operation : *** 
  64:FWLIB/src/stm32f4xx_hash.c ****  ========================
  65:FWLIB/src/stm32f4xx_hash.c ****  [..] The HMAC algorithm is used for message authentication, by 
  66:FWLIB/src/stm32f4xx_hash.c ****       irreversibly binding the message being processed to a key chosen 
  67:FWLIB/src/stm32f4xx_hash.c ****       by the user. 
  68:FWLIB/src/stm32f4xx_hash.c ****       For HMAC specifications, refer to "HMAC: keyed-hashing for message 
  69:FWLIB/src/stm32f4xx_hash.c ****       authentication, H. Krawczyk, M. Bellare, R. Canetti, February 1997"
  70:FWLIB/src/stm32f4xx_hash.c ****             
  71:FWLIB/src/stm32f4xx_hash.c ****  [..] Basically, the HMAC algorithm consists of two nested hash operations:
  72:FWLIB/src/stm32f4xx_hash.c ****       HMAC(message) = Hash[((key | pad) XOR 0x5C) | Hash(((key | pad) XOR 0x36) | message)]
  73:FWLIB/src/stm32f4xx_hash.c ****       where:
  74:FWLIB/src/stm32f4xx_hash.c ****       (+) "pad" is a sequence of zeroes needed to extend the key to the 
  75:FWLIB/src/stm32f4xx_hash.c ****           length of the underlying hash function data block (that is 
  76:FWLIB/src/stm32f4xx_hash.c ****           512 bits for both the SHA-1 and MD5 hash algorithms)
  77:FWLIB/src/stm32f4xx_hash.c ****       (+) "|"   represents the concatenation operator 
  78:FWLIB/src/stm32f4xx_hash.c ****             
  79:FWLIB/src/stm32f4xx_hash.c ****            
  80:FWLIB/src/stm32f4xx_hash.c ****  [..]To compute the HMAC, four different phases are required:                  
  81:FWLIB/src/stm32f4xx_hash.c ****    (#) Initialize the HASH using HASH_Init() function to do HMAC 
  82:FWLIB/src/stm32f4xx_hash.c ****        operation. 
  83:FWLIB/src/stm32f4xx_hash.c ****                   
  84:FWLIB/src/stm32f4xx_hash.c ****    (#) The key (to be used for the inner hash function) is then given to the core. 
  85:FWLIB/src/stm32f4xx_hash.c ****        This operation follows the same mechanism as the one used to send the 
  86:FWLIB/src/stm32f4xx_hash.c ****        message in the hash operation (that is, by HASH_DataIn() function and, 
  87:FWLIB/src/stm32f4xx_hash.c ****        finally, HASH_StartDigest() function.
  88:FWLIB/src/stm32f4xx_hash.c ****             
ARM GAS  /tmp/cccCWJpB.s 			page 3


  89:FWLIB/src/stm32f4xx_hash.c ****    (#) Once the last word has been entered and computation has started, 
  90:FWLIB/src/stm32f4xx_hash.c ****        the hash processor elaborates the key. It is then ready to accept the message
  91:FWLIB/src/stm32f4xx_hash.c ****        text using the same mechanism as the one used to send the message in the
  92:FWLIB/src/stm32f4xx_hash.c ****        hash operation.
  93:FWLIB/src/stm32f4xx_hash.c ****          
  94:FWLIB/src/stm32f4xx_hash.c ****    (#) After the first hash round, the hash processor returns "ready" to indicate 
  95:FWLIB/src/stm32f4xx_hash.c ****        that it is ready to receive the key to be used for the outer hash function 
  96:FWLIB/src/stm32f4xx_hash.c ****        (normally, this key is the same as the one used for the inner hash function). 
  97:FWLIB/src/stm32f4xx_hash.c ****        When the last word of the key is entered and computation starts, the HMAC 
  98:FWLIB/src/stm32f4xx_hash.c ****        result is made available using HASH_GetDigest() function.
  99:FWLIB/src/stm32f4xx_hash.c **** 
 100:FWLIB/src/stm32f4xx_hash.c **** @endverbatim
 101:FWLIB/src/stm32f4xx_hash.c ****   *         
 102:FWLIB/src/stm32f4xx_hash.c ****   ******************************************************************************
 103:FWLIB/src/stm32f4xx_hash.c ****   * @attention
 104:FWLIB/src/stm32f4xx_hash.c ****   *
 105:FWLIB/src/stm32f4xx_hash.c ****   * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
 106:FWLIB/src/stm32f4xx_hash.c ****   *
 107:FWLIB/src/stm32f4xx_hash.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
 108:FWLIB/src/stm32f4xx_hash.c ****   * You may not use this file except in compliance with the License.
 109:FWLIB/src/stm32f4xx_hash.c ****   * You may obtain a copy of the License at:
 110:FWLIB/src/stm32f4xx_hash.c ****   *
 111:FWLIB/src/stm32f4xx_hash.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
 112:FWLIB/src/stm32f4xx_hash.c ****   *
 113:FWLIB/src/stm32f4xx_hash.c ****   * Unless required by applicable law or agreed to in writing, software 
 114:FWLIB/src/stm32f4xx_hash.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
 115:FWLIB/src/stm32f4xx_hash.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 116:FWLIB/src/stm32f4xx_hash.c ****   * See the License for the specific language governing permissions and
 117:FWLIB/src/stm32f4xx_hash.c ****   * limitations under the License.
 118:FWLIB/src/stm32f4xx_hash.c ****   *
 119:FWLIB/src/stm32f4xx_hash.c ****   ******************************************************************************  
 120:FWLIB/src/stm32f4xx_hash.c ****   */
 121:FWLIB/src/stm32f4xx_hash.c **** 
 122:FWLIB/src/stm32f4xx_hash.c **** /* Includes ------------------------------------------------------------------*/
 123:FWLIB/src/stm32f4xx_hash.c **** #include "stm32f4xx_hash.h"
 124:FWLIB/src/stm32f4xx_hash.c **** #include "stm32f4xx_rcc.h"
 125:FWLIB/src/stm32f4xx_hash.c **** 
 126:FWLIB/src/stm32f4xx_hash.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 127:FWLIB/src/stm32f4xx_hash.c ****   * @{
 128:FWLIB/src/stm32f4xx_hash.c ****   */
 129:FWLIB/src/stm32f4xx_hash.c **** 
 130:FWLIB/src/stm32f4xx_hash.c **** /** @defgroup HASH 
 131:FWLIB/src/stm32f4xx_hash.c ****   * @brief HASH driver modules
 132:FWLIB/src/stm32f4xx_hash.c ****   * @{
 133:FWLIB/src/stm32f4xx_hash.c ****   */ 
 134:FWLIB/src/stm32f4xx_hash.c **** 
 135:FWLIB/src/stm32f4xx_hash.c **** /* Private typedef -----------------------------------------------------------*/
 136:FWLIB/src/stm32f4xx_hash.c **** /* Private define ------------------------------------------------------------*/
 137:FWLIB/src/stm32f4xx_hash.c **** /* Private macro -------------------------------------------------------------*/
 138:FWLIB/src/stm32f4xx_hash.c **** /* Private variables ---------------------------------------------------------*/
 139:FWLIB/src/stm32f4xx_hash.c **** /* Private function prototypes -----------------------------------------------*/
 140:FWLIB/src/stm32f4xx_hash.c **** /* Private functions ---------------------------------------------------------*/ 
 141:FWLIB/src/stm32f4xx_hash.c **** 
 142:FWLIB/src/stm32f4xx_hash.c **** /** @defgroup HASH_Private_Functions
 143:FWLIB/src/stm32f4xx_hash.c ****   * @{
 144:FWLIB/src/stm32f4xx_hash.c ****   */ 
 145:FWLIB/src/stm32f4xx_hash.c **** 
ARM GAS  /tmp/cccCWJpB.s 			page 4


 146:FWLIB/src/stm32f4xx_hash.c **** /** @defgroup HASH_Group1 Initialization and Configuration functions
 147:FWLIB/src/stm32f4xx_hash.c ****  *  @brief    Initialization and Configuration functions 
 148:FWLIB/src/stm32f4xx_hash.c ****  *
 149:FWLIB/src/stm32f4xx_hash.c **** @verbatim    
 150:FWLIB/src/stm32f4xx_hash.c ****  ===============================================================================
 151:FWLIB/src/stm32f4xx_hash.c ****               ##### Initialization and Configuration functions #####
 152:FWLIB/src/stm32f4xx_hash.c ****  ===============================================================================  
 153:FWLIB/src/stm32f4xx_hash.c ****  [..] This section provides functions allowing to 
 154:FWLIB/src/stm32f4xx_hash.c ****    (+) Initialize the HASH peripheral
 155:FWLIB/src/stm32f4xx_hash.c ****    (+) Configure the HASH Processor 
 156:FWLIB/src/stm32f4xx_hash.c ****    (+) MD5/SHA1, 
 157:FWLIB/src/stm32f4xx_hash.c ****    (+) HASH/HMAC, 
 158:FWLIB/src/stm32f4xx_hash.c ****    (+) datatype 
 159:FWLIB/src/stm32f4xx_hash.c ****    (+) HMAC Key (if mode = HMAC)
 160:FWLIB/src/stm32f4xx_hash.c ****    (+) Reset the HASH Processor 
 161:FWLIB/src/stm32f4xx_hash.c ****    
 162:FWLIB/src/stm32f4xx_hash.c **** @endverbatim
 163:FWLIB/src/stm32f4xx_hash.c ****   * @{
 164:FWLIB/src/stm32f4xx_hash.c ****   */
 165:FWLIB/src/stm32f4xx_hash.c ****   
 166:FWLIB/src/stm32f4xx_hash.c **** /**
 167:FWLIB/src/stm32f4xx_hash.c ****   * @brief  De-initializes the HASH peripheral registers to their default reset values
 168:FWLIB/src/stm32f4xx_hash.c ****   * @param  None
 169:FWLIB/src/stm32f4xx_hash.c ****   * @retval None
 170:FWLIB/src/stm32f4xx_hash.c ****   */
 171:FWLIB/src/stm32f4xx_hash.c **** void HASH_DeInit(void)
 172:FWLIB/src/stm32f4xx_hash.c **** {
  28              		.loc 1 172 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 08B5     		push	{r3, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
 173:FWLIB/src/stm32f4xx_hash.c ****   /* Enable HASH reset state */
 174:FWLIB/src/stm32f4xx_hash.c ****   RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, ENABLE);
  37              		.loc 1 174 0
  38 0002 0121     		movs	r1, #1
  39 0004 2020     		movs	r0, #32
  40 0006 FFF7FEFF 		bl	RCC_AHB2PeriphResetCmd
  41              	.LVL0:
 175:FWLIB/src/stm32f4xx_hash.c ****   /* Release HASH from reset state */
 176:FWLIB/src/stm32f4xx_hash.c ****   RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, DISABLE);
  42              		.loc 1 176 0
  43 000a 0021     		movs	r1, #0
  44 000c 2020     		movs	r0, #32
  45 000e FFF7FEFF 		bl	RCC_AHB2PeriphResetCmd
  46              	.LVL1:
  47 0012 08BD     		pop	{r3, pc}
  48              		.cfi_endproc
  49              	.LFE123:
  51              		.section	.text.HASH_Init,"ax",%progbits
  52              		.align	1
  53              		.global	HASH_Init
  54              		.syntax unified
ARM GAS  /tmp/cccCWJpB.s 			page 5


  55              		.thumb
  56              		.thumb_func
  57              		.fpu fpv4-sp-d16
  59              	HASH_Init:
  60              	.LFB124:
 177:FWLIB/src/stm32f4xx_hash.c **** }
 178:FWLIB/src/stm32f4xx_hash.c **** 
 179:FWLIB/src/stm32f4xx_hash.c **** /**
 180:FWLIB/src/stm32f4xx_hash.c ****   * @brief  Initializes the HASH peripheral according to the specified parameters
 181:FWLIB/src/stm32f4xx_hash.c ****   *         in the HASH_InitStruct structure.
 182:FWLIB/src/stm32f4xx_hash.c ****   * @note   the hash processor is reset when calling this function so that the
 183:FWLIB/src/stm32f4xx_hash.c ****   *         HASH will be ready to compute the message digest of a new message.
 184:FWLIB/src/stm32f4xx_hash.c ****   *         There is no need to call HASH_Reset() function.           
 185:FWLIB/src/stm32f4xx_hash.c ****   * @param  HASH_InitStruct: pointer to a HASH_InitTypeDef structure that contains
 186:FWLIB/src/stm32f4xx_hash.c ****   *         the configuration information for the HASH peripheral.
 187:FWLIB/src/stm32f4xx_hash.c ****   * @note   The field HASH_HMACKeyType in HASH_InitTypeDef must be filled only 
 188:FWLIB/src/stm32f4xx_hash.c ****   *          if the algorithm mode is HMAC.       
 189:FWLIB/src/stm32f4xx_hash.c ****   * @retval None
 190:FWLIB/src/stm32f4xx_hash.c ****   */
 191:FWLIB/src/stm32f4xx_hash.c **** void HASH_Init(HASH_InitTypeDef* HASH_InitStruct)
 192:FWLIB/src/stm32f4xx_hash.c **** {
  61              		.loc 1 192 0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 0
  64              		@ frame_needed = 0, uses_anonymous_args = 0
  65              		@ link register save eliminated.
  66              	.LVL2:
  67 0000 10B4     		push	{r4}
  68              	.LCFI1:
  69              		.cfi_def_cfa_offset 4
  70              		.cfi_offset 4, -4
 193:FWLIB/src/stm32f4xx_hash.c ****   /* Check the parameters */
 194:FWLIB/src/stm32f4xx_hash.c ****   assert_param(IS_HASH_ALGOSELECTION(HASH_InitStruct->HASH_AlgoSelection));
 195:FWLIB/src/stm32f4xx_hash.c ****   assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
 196:FWLIB/src/stm32f4xx_hash.c ****   assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
 197:FWLIB/src/stm32f4xx_hash.c ****   
 198:FWLIB/src/stm32f4xx_hash.c ****   /* Configure the Algorithm used, algorithm mode and the datatype */
 199:FWLIB/src/stm32f4xx_hash.c ****   HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  71              		.loc 1 199 0
  72 0002 124A     		ldr	r2, .L7
  73 0004 1368     		ldr	r3, [r2]
  74 0006 23F48023 		bic	r3, r3, #262144
  75 000a 23F0F003 		bic	r3, r3, #240
  76 000e 1360     		str	r3, [r2]
 200:FWLIB/src/stm32f4xx_hash.c ****   HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
  77              		.loc 1 200 0
  78 0010 1168     		ldr	r1, [r2]
  79 0012 0368     		ldr	r3, [r0]
 201:FWLIB/src/stm32f4xx_hash.c ****                HASH_InitStruct->HASH_DataType | \
  80              		.loc 1 201 0
  81 0014 8468     		ldr	r4, [r0, #8]
 200:FWLIB/src/stm32f4xx_hash.c ****   HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
  82              		.loc 1 200 0
  83 0016 2343     		orrs	r3, r3, r4
 202:FWLIB/src/stm32f4xx_hash.c ****                HASH_InitStruct->HASH_AlgoMode);
  84              		.loc 1 202 0
  85 0018 4468     		ldr	r4, [r0, #4]
ARM GAS  /tmp/cccCWJpB.s 			page 6


 201:FWLIB/src/stm32f4xx_hash.c ****                HASH_InitStruct->HASH_DataType | \
  86              		.loc 1 201 0
  87 001a 2343     		orrs	r3, r3, r4
 200:FWLIB/src/stm32f4xx_hash.c ****   HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
  88              		.loc 1 200 0
  89 001c 0B43     		orrs	r3, r3, r1
  90 001e 1360     		str	r3, [r2]
 203:FWLIB/src/stm32f4xx_hash.c ****   
 204:FWLIB/src/stm32f4xx_hash.c ****   /* if algorithm mode is HMAC, set the Key */  
 205:FWLIB/src/stm32f4xx_hash.c ****   if(HASH_InitStruct->HASH_AlgoMode == HASH_AlgoMode_HMAC) 
  91              		.loc 1 205 0
  92 0020 4368     		ldr	r3, [r0, #4]
  93 0022 402B     		cmp	r3, #64
  94 0024 07D0     		beq	.L6
  95              	.L4:
 206:FWLIB/src/stm32f4xx_hash.c ****   {
 207:FWLIB/src/stm32f4xx_hash.c ****     assert_param(IS_HASH_HMAC_KEYTYPE(HASH_InitStruct->HASH_HMACKeyType));
 208:FWLIB/src/stm32f4xx_hash.c ****     HASH->CR &= ~HASH_CR_LKEY;
 209:FWLIB/src/stm32f4xx_hash.c ****     HASH->CR |= HASH_InitStruct->HASH_HMACKeyType;
 210:FWLIB/src/stm32f4xx_hash.c ****   }
 211:FWLIB/src/stm32f4xx_hash.c **** 
 212:FWLIB/src/stm32f4xx_hash.c ****   /* Reset the HASH processor core, so that the HASH will be ready to compute 
 213:FWLIB/src/stm32f4xx_hash.c ****      the message digest of a new message */
 214:FWLIB/src/stm32f4xx_hash.c ****   HASH->CR |= HASH_CR_INIT;  
  96              		.loc 1 214 0
  97 0026 094A     		ldr	r2, .L7
  98 0028 1368     		ldr	r3, [r2]
  99 002a 43F00403 		orr	r3, r3, #4
 100 002e 1360     		str	r3, [r2]
 215:FWLIB/src/stm32f4xx_hash.c **** }
 101              		.loc 1 215 0
 102 0030 5DF8044B 		ldr	r4, [sp], #4
 103              	.LCFI2:
 104              		.cfi_remember_state
 105              		.cfi_restore 4
 106              		.cfi_def_cfa_offset 0
 107 0034 7047     		bx	lr
 108              	.L6:
 109              	.LCFI3:
 110              		.cfi_restore_state
 208:FWLIB/src/stm32f4xx_hash.c ****     HASH->CR |= HASH_InitStruct->HASH_HMACKeyType;
 111              		.loc 1 208 0
 112 0036 1346     		mov	r3, r2
 113 0038 1268     		ldr	r2, [r2]
 114 003a 22F48032 		bic	r2, r2, #65536
 115 003e 1A60     		str	r2, [r3]
 209:FWLIB/src/stm32f4xx_hash.c ****   }
 116              		.loc 1 209 0
 117 0040 1A68     		ldr	r2, [r3]
 118 0042 C168     		ldr	r1, [r0, #12]
 119 0044 0A43     		orrs	r2, r2, r1
 120 0046 1A60     		str	r2, [r3]
 121 0048 EDE7     		b	.L4
 122              	.L8:
 123 004a 00BF     		.align	2
 124              	.L7:
 125 004c 00040650 		.word	1342571520
ARM GAS  /tmp/cccCWJpB.s 			page 7


 126              		.cfi_endproc
 127              	.LFE124:
 129              		.section	.text.HASH_StructInit,"ax",%progbits
 130              		.align	1
 131              		.global	HASH_StructInit
 132              		.syntax unified
 133              		.thumb
 134              		.thumb_func
 135              		.fpu fpv4-sp-d16
 137              	HASH_StructInit:
 138              	.LFB125:
 216:FWLIB/src/stm32f4xx_hash.c **** 
 217:FWLIB/src/stm32f4xx_hash.c **** /**
 218:FWLIB/src/stm32f4xx_hash.c ****   * @brief  Fills each HASH_InitStruct member with its default value.
 219:FWLIB/src/stm32f4xx_hash.c ****   * @param  HASH_InitStruct : pointer to a HASH_InitTypeDef structure which will
 220:FWLIB/src/stm32f4xx_hash.c ****   *          be initialized.  
 221:FWLIB/src/stm32f4xx_hash.c ****   *  @note  The default values set are : Processor mode is HASH, Algorithm selected is SHA1,
 222:FWLIB/src/stm32f4xx_hash.c ****   *          Data type selected is 32b and HMAC Key Type is short key.  
 223:FWLIB/src/stm32f4xx_hash.c ****   * @retval None
 224:FWLIB/src/stm32f4xx_hash.c ****   */
 225:FWLIB/src/stm32f4xx_hash.c **** void HASH_StructInit(HASH_InitTypeDef* HASH_InitStruct)
 226:FWLIB/src/stm32f4xx_hash.c **** {
 139              		.loc 1 226 0
 140              		.cfi_startproc
 141              		@ args = 0, pretend = 0, frame = 0
 142              		@ frame_needed = 0, uses_anonymous_args = 0
 143              		@ link register save eliminated.
 144              	.LVL3:
 227:FWLIB/src/stm32f4xx_hash.c ****   /* Initialize the HASH_AlgoSelection member */
 228:FWLIB/src/stm32f4xx_hash.c ****   HASH_InitStruct->HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 145              		.loc 1 228 0
 146 0000 0023     		movs	r3, #0
 147 0002 0360     		str	r3, [r0]
 229:FWLIB/src/stm32f4xx_hash.c **** 
 230:FWLIB/src/stm32f4xx_hash.c ****   /* Initialize the HASH_AlgoMode member */
 231:FWLIB/src/stm32f4xx_hash.c ****   HASH_InitStruct->HASH_AlgoMode = HASH_AlgoMode_HASH;
 148              		.loc 1 231 0
 149 0004 4360     		str	r3, [r0, #4]
 232:FWLIB/src/stm32f4xx_hash.c **** 
 233:FWLIB/src/stm32f4xx_hash.c ****   /* Initialize the HASH_DataType member */
 234:FWLIB/src/stm32f4xx_hash.c ****   HASH_InitStruct->HASH_DataType = HASH_DataType_32b;
 150              		.loc 1 234 0
 151 0006 8360     		str	r3, [r0, #8]
 235:FWLIB/src/stm32f4xx_hash.c **** 
 236:FWLIB/src/stm32f4xx_hash.c ****   /* Initialize the HASH_HMACKeyType member */
 237:FWLIB/src/stm32f4xx_hash.c ****   HASH_InitStruct->HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 152              		.loc 1 237 0
 153 0008 C360     		str	r3, [r0, #12]
 154 000a 7047     		bx	lr
 155              		.cfi_endproc
 156              	.LFE125:
 158              		.section	.text.HASH_Reset,"ax",%progbits
 159              		.align	1
 160              		.global	HASH_Reset
 161              		.syntax unified
 162              		.thumb
 163              		.thumb_func
ARM GAS  /tmp/cccCWJpB.s 			page 8


 164              		.fpu fpv4-sp-d16
 166              	HASH_Reset:
 167              	.LFB126:
 238:FWLIB/src/stm32f4xx_hash.c **** }
 239:FWLIB/src/stm32f4xx_hash.c **** 
 240:FWLIB/src/stm32f4xx_hash.c **** /**
 241:FWLIB/src/stm32f4xx_hash.c ****   * @brief  Resets the HASH processor core, so that the HASH will be ready
 242:FWLIB/src/stm32f4xx_hash.c ****   *         to compute the message digest of a new message.
 243:FWLIB/src/stm32f4xx_hash.c ****   * @note   Calling this function will clear the HASH_SR_DCIS (Digest calculation 
 244:FWLIB/src/stm32f4xx_hash.c ****   *         completion interrupt status) bit corresponding to HASH_IT_DCI 
 245:FWLIB/src/stm32f4xx_hash.c ****   *         interrupt and HASH_FLAG_DCIS flag. 
 246:FWLIB/src/stm32f4xx_hash.c ****   * @param  None
 247:FWLIB/src/stm32f4xx_hash.c ****   * @retval None
 248:FWLIB/src/stm32f4xx_hash.c ****   */
 249:FWLIB/src/stm32f4xx_hash.c **** void HASH_Reset(void)
 250:FWLIB/src/stm32f4xx_hash.c **** {
 168              		.loc 1 250 0
 169              		.cfi_startproc
 170              		@ args = 0, pretend = 0, frame = 0
 171              		@ frame_needed = 0, uses_anonymous_args = 0
 172              		@ link register save eliminated.
 251:FWLIB/src/stm32f4xx_hash.c ****   /* Reset the HASH processor core */
 252:FWLIB/src/stm32f4xx_hash.c ****   HASH->CR |= HASH_CR_INIT;
 173              		.loc 1 252 0
 174 0000 024A     		ldr	r2, .L11
 175 0002 1368     		ldr	r3, [r2]
 176 0004 43F00403 		orr	r3, r3, #4
 177 0008 1360     		str	r3, [r2]
 178 000a 7047     		bx	lr
 179              	.L12:
 180              		.align	2
 181              	.L11:
 182 000c 00040650 		.word	1342571520
 183              		.cfi_endproc
 184              	.LFE126:
 186              		.section	.text.HASH_SetLastWordValidBitsNbr,"ax",%progbits
 187              		.align	1
 188              		.global	HASH_SetLastWordValidBitsNbr
 189              		.syntax unified
 190              		.thumb
 191              		.thumb_func
 192              		.fpu fpv4-sp-d16
 194              	HASH_SetLastWordValidBitsNbr:
 195              	.LFB127:
 253:FWLIB/src/stm32f4xx_hash.c **** }
 254:FWLIB/src/stm32f4xx_hash.c **** /**
 255:FWLIB/src/stm32f4xx_hash.c ****   * @}
 256:FWLIB/src/stm32f4xx_hash.c ****   */
 257:FWLIB/src/stm32f4xx_hash.c ****  
 258:FWLIB/src/stm32f4xx_hash.c **** /** @defgroup HASH_Group2 Message Digest generation functions
 259:FWLIB/src/stm32f4xx_hash.c ****  *  @brief    Message Digest generation functions
 260:FWLIB/src/stm32f4xx_hash.c ****  *
 261:FWLIB/src/stm32f4xx_hash.c **** @verbatim    
 262:FWLIB/src/stm32f4xx_hash.c ****  ===============================================================================
 263:FWLIB/src/stm32f4xx_hash.c ****                   ##### Message Digest generation functions #####
 264:FWLIB/src/stm32f4xx_hash.c ****  ===============================================================================  
 265:FWLIB/src/stm32f4xx_hash.c ****  [..] This section provides functions allowing the generation of message digest: 
ARM GAS  /tmp/cccCWJpB.s 			page 9


 266:FWLIB/src/stm32f4xx_hash.c ****    (+) Push data in the IN FIFO : using HASH_DataIn()
 267:FWLIB/src/stm32f4xx_hash.c ****    (+) Get the number of words set in IN FIFO, use HASH_GetInFIFOWordsNbr()  
 268:FWLIB/src/stm32f4xx_hash.c ****    (+) set the last word valid bits number using HASH_SetLastWordValidBitsNbr() 
 269:FWLIB/src/stm32f4xx_hash.c ****    (+) start digest calculation : using HASH_StartDigest()
 270:FWLIB/src/stm32f4xx_hash.c ****    (+) Get the Digest message : using HASH_GetDigest()
 271:FWLIB/src/stm32f4xx_hash.c ****  
 272:FWLIB/src/stm32f4xx_hash.c **** @endverbatim
 273:FWLIB/src/stm32f4xx_hash.c ****   * @{
 274:FWLIB/src/stm32f4xx_hash.c ****   */
 275:FWLIB/src/stm32f4xx_hash.c **** 
 276:FWLIB/src/stm32f4xx_hash.c **** 
 277:FWLIB/src/stm32f4xx_hash.c **** /**
 278:FWLIB/src/stm32f4xx_hash.c ****   * @brief  Configure the Number of valid bits in last word of the message
 279:FWLIB/src/stm32f4xx_hash.c ****   * @param  ValidNumber: Number of valid bits in last word of the message.
 280:FWLIB/src/stm32f4xx_hash.c ****   *           This parameter must be a number between 0 and 0x1F.
 281:FWLIB/src/stm32f4xx_hash.c ****   *             - 0x00: All 32 bits of the last data written are valid
 282:FWLIB/src/stm32f4xx_hash.c ****   *             - 0x01: Only bit [0] of the last data written is valid
 283:FWLIB/src/stm32f4xx_hash.c ****   *             - 0x02: Only bits[1:0] of the last data written are valid
 284:FWLIB/src/stm32f4xx_hash.c ****   *             - 0x03: Only bits[2:0] of the last data written are valid
 285:FWLIB/src/stm32f4xx_hash.c ****   *             - ...
 286:FWLIB/src/stm32f4xx_hash.c ****   *             - 0x1F: Only bits[30:0] of the last data written are valid    
 287:FWLIB/src/stm32f4xx_hash.c ****   * @note   The Number of valid bits must be set before to start the message 
 288:FWLIB/src/stm32f4xx_hash.c ****   *         digest competition (in Hash and HMAC) and key treatment(in HMAC).    
 289:FWLIB/src/stm32f4xx_hash.c ****   * @retval None
 290:FWLIB/src/stm32f4xx_hash.c ****   */
 291:FWLIB/src/stm32f4xx_hash.c **** void HASH_SetLastWordValidBitsNbr(uint16_t ValidNumber)
 292:FWLIB/src/stm32f4xx_hash.c **** {
 196              		.loc 1 292 0
 197              		.cfi_startproc
 198              		@ args = 0, pretend = 0, frame = 0
 199              		@ frame_needed = 0, uses_anonymous_args = 0
 200              		@ link register save eliminated.
 201              	.LVL4:
 293:FWLIB/src/stm32f4xx_hash.c ****   /* Check the parameters */
 294:FWLIB/src/stm32f4xx_hash.c ****   assert_param(IS_HASH_VALIDBITSNUMBER(ValidNumber));
 295:FWLIB/src/stm32f4xx_hash.c ****   
 296:FWLIB/src/stm32f4xx_hash.c ****   /* Configure the Number of valid bits in last word of the message */
 297:FWLIB/src/stm32f4xx_hash.c ****   HASH->STR &= ~(HASH_STR_NBW);
 202              		.loc 1 297 0
 203 0000 044B     		ldr	r3, .L14
 204 0002 9A68     		ldr	r2, [r3, #8]
 205 0004 22F01F02 		bic	r2, r2, #31
 206 0008 9A60     		str	r2, [r3, #8]
 298:FWLIB/src/stm32f4xx_hash.c ****   HASH->STR |= ValidNumber;
 207              		.loc 1 298 0
 208 000a 9A68     		ldr	r2, [r3, #8]
 209 000c 1043     		orrs	r0, r0, r2
 210              	.LVL5:
 211 000e 9860     		str	r0, [r3, #8]
 212 0010 7047     		bx	lr
 213              	.L15:
 214 0012 00BF     		.align	2
 215              	.L14:
 216 0014 00040650 		.word	1342571520
 217              		.cfi_endproc
 218              	.LFE127:
 220              		.section	.text.HASH_DataIn,"ax",%progbits
ARM GAS  /tmp/cccCWJpB.s 			page 10


 221              		.align	1
 222              		.global	HASH_DataIn
 223              		.syntax unified
 224              		.thumb
 225              		.thumb_func
 226              		.fpu fpv4-sp-d16
 228              	HASH_DataIn:
 229              	.LFB128:
 299:FWLIB/src/stm32f4xx_hash.c **** }
 300:FWLIB/src/stm32f4xx_hash.c **** 
 301:FWLIB/src/stm32f4xx_hash.c **** /**
 302:FWLIB/src/stm32f4xx_hash.c ****   * @brief  Writes data in the Data Input FIFO
 303:FWLIB/src/stm32f4xx_hash.c ****   * @param  Data: new data of the message to be processed.
 304:FWLIB/src/stm32f4xx_hash.c ****   * @retval None
 305:FWLIB/src/stm32f4xx_hash.c ****   */
 306:FWLIB/src/stm32f4xx_hash.c **** void HASH_DataIn(uint32_t Data)
 307:FWLIB/src/stm32f4xx_hash.c **** {
 230              		.loc 1 307 0
 231              		.cfi_startproc
 232              		@ args = 0, pretend = 0, frame = 0
 233              		@ frame_needed = 0, uses_anonymous_args = 0
 234              		@ link register save eliminated.
 235              	.LVL6:
 308:FWLIB/src/stm32f4xx_hash.c ****   /* Write in the DIN register a new data */
 309:FWLIB/src/stm32f4xx_hash.c ****   HASH->DIN = Data;
 236              		.loc 1 309 0
 237 0000 014B     		ldr	r3, .L17
 238 0002 5860     		str	r0, [r3, #4]
 239 0004 7047     		bx	lr
 240              	.L18:
 241 0006 00BF     		.align	2
 242              	.L17:
 243 0008 00040650 		.word	1342571520
 244              		.cfi_endproc
 245              	.LFE128:
 247              		.section	.text.HASH_GetInFIFOWordsNbr,"ax",%progbits
 248              		.align	1
 249              		.global	HASH_GetInFIFOWordsNbr
 250              		.syntax unified
 251              		.thumb
 252              		.thumb_func
 253              		.fpu fpv4-sp-d16
 255              	HASH_GetInFIFOWordsNbr:
 256              	.LFB129:
 310:FWLIB/src/stm32f4xx_hash.c **** }
 311:FWLIB/src/stm32f4xx_hash.c **** 
 312:FWLIB/src/stm32f4xx_hash.c **** /**
 313:FWLIB/src/stm32f4xx_hash.c ****   * @brief  Returns the number of words already pushed into the IN FIFO.
 314:FWLIB/src/stm32f4xx_hash.c ****   * @param  None
 315:FWLIB/src/stm32f4xx_hash.c ****   * @retval The value of words already pushed into the IN FIFO.
 316:FWLIB/src/stm32f4xx_hash.c ****   */
 317:FWLIB/src/stm32f4xx_hash.c **** uint8_t HASH_GetInFIFOWordsNbr(void)
 318:FWLIB/src/stm32f4xx_hash.c **** {
 257              		.loc 1 318 0
 258              		.cfi_startproc
 259              		@ args = 0, pretend = 0, frame = 0
 260              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cccCWJpB.s 			page 11


 261              		@ link register save eliminated.
 319:FWLIB/src/stm32f4xx_hash.c ****   /* Return the value of NBW bits */
 320:FWLIB/src/stm32f4xx_hash.c ****   return ((HASH->CR & HASH_CR_NBW) >> 8);
 262              		.loc 1 320 0
 263 0000 024B     		ldr	r3, .L20
 264 0002 1868     		ldr	r0, [r3]
 321:FWLIB/src/stm32f4xx_hash.c **** }
 265              		.loc 1 321 0
 266 0004 C0F30320 		ubfx	r0, r0, #8, #4
 267 0008 7047     		bx	lr
 268              	.L21:
 269 000a 00BF     		.align	2
 270              	.L20:
 271 000c 00040650 		.word	1342571520
 272              		.cfi_endproc
 273              	.LFE129:
 275              		.section	.text.HASH_GetDigest,"ax",%progbits
 276              		.align	1
 277              		.global	HASH_GetDigest
 278              		.syntax unified
 279              		.thumb
 280              		.thumb_func
 281              		.fpu fpv4-sp-d16
 283              	HASH_GetDigest:
 284              	.LFB130:
 322:FWLIB/src/stm32f4xx_hash.c **** 
 323:FWLIB/src/stm32f4xx_hash.c **** /**
 324:FWLIB/src/stm32f4xx_hash.c ****   * @brief  Provides the message digest result.
 325:FWLIB/src/stm32f4xx_hash.c ****   * @note   In MD5 mode, Data[7] to Data[4] filed of HASH_MsgDigest structure is not used
 326:FWLIB/src/stm32f4xx_hash.c ****   *         and is read as zero.
 327:FWLIB/src/stm32f4xx_hash.c ****   *         In SHA-1 mode, Data[7] to Data[5] filed of HASH_MsgDigest structure is not used
 328:FWLIB/src/stm32f4xx_hash.c ****   *         and is read as zero.    
 329:FWLIB/src/stm32f4xx_hash.c ****   *         In SHA-224 mode, Data[7] filed of HASH_MsgDigest structure is not used
 330:FWLIB/src/stm32f4xx_hash.c ****   *         and is read as zero.  
 331:FWLIB/src/stm32f4xx_hash.c ****   * @param  HASH_MessageDigest: pointer to a HASH_MsgDigest structure which will 
 332:FWLIB/src/stm32f4xx_hash.c ****   *         hold the message digest result 
 333:FWLIB/src/stm32f4xx_hash.c ****   * @retval None
 334:FWLIB/src/stm32f4xx_hash.c ****   */
 335:FWLIB/src/stm32f4xx_hash.c **** void HASH_GetDigest(HASH_MsgDigest* HASH_MessageDigest)
 336:FWLIB/src/stm32f4xx_hash.c **** {
 285              		.loc 1 336 0
 286              		.cfi_startproc
 287              		@ args = 0, pretend = 0, frame = 0
 288              		@ frame_needed = 0, uses_anonymous_args = 0
 289              		@ link register save eliminated.
 290              	.LVL7:
 337:FWLIB/src/stm32f4xx_hash.c ****   /* Get the data field */
 338:FWLIB/src/stm32f4xx_hash.c ****   HASH_MessageDigest->Data[0] = HASH->HR[0];
 291              		.loc 1 338 0
 292 0000 094B     		ldr	r3, .L23
 293 0002 DA68     		ldr	r2, [r3, #12]
 294 0004 0260     		str	r2, [r0]
 339:FWLIB/src/stm32f4xx_hash.c ****   HASH_MessageDigest->Data[1] = HASH->HR[1];
 295              		.loc 1 339 0
 296 0006 1A69     		ldr	r2, [r3, #16]
 297 0008 4260     		str	r2, [r0, #4]
 340:FWLIB/src/stm32f4xx_hash.c ****   HASH_MessageDigest->Data[2] = HASH->HR[2];
ARM GAS  /tmp/cccCWJpB.s 			page 12


 298              		.loc 1 340 0
 299 000a 5A69     		ldr	r2, [r3, #20]
 300 000c 8260     		str	r2, [r0, #8]
 341:FWLIB/src/stm32f4xx_hash.c ****   HASH_MessageDigest->Data[3] = HASH->HR[3];
 301              		.loc 1 341 0
 302 000e 9A69     		ldr	r2, [r3, #24]
 303 0010 C260     		str	r2, [r0, #12]
 342:FWLIB/src/stm32f4xx_hash.c ****   HASH_MessageDigest->Data[4] = HASH->HR[4];
 304              		.loc 1 342 0
 305 0012 DB69     		ldr	r3, [r3, #28]
 306 0014 0361     		str	r3, [r0, #16]
 343:FWLIB/src/stm32f4xx_hash.c ****   HASH_MessageDigest->Data[5] = HASH_DIGEST->HR[5];
 307              		.loc 1 343 0
 308 0016 054B     		ldr	r3, .L23+4
 309 0018 5A69     		ldr	r2, [r3, #20]
 310 001a 4261     		str	r2, [r0, #20]
 344:FWLIB/src/stm32f4xx_hash.c ****   HASH_MessageDigest->Data[6] = HASH_DIGEST->HR[6];
 311              		.loc 1 344 0
 312 001c 9A69     		ldr	r2, [r3, #24]
 313 001e 8261     		str	r2, [r0, #24]
 345:FWLIB/src/stm32f4xx_hash.c ****   HASH_MessageDigest->Data[7] = HASH_DIGEST->HR[7];
 314              		.loc 1 345 0
 315 0020 DB69     		ldr	r3, [r3, #28]
 316 0022 C361     		str	r3, [r0, #28]
 317 0024 7047     		bx	lr
 318              	.L24:
 319 0026 00BF     		.align	2
 320              	.L23:
 321 0028 00040650 		.word	1342571520
 322 002c 10070650 		.word	1342572304
 323              		.cfi_endproc
 324              	.LFE130:
 326              		.section	.text.HASH_StartDigest,"ax",%progbits
 327              		.align	1
 328              		.global	HASH_StartDigest
 329              		.syntax unified
 330              		.thumb
 331              		.thumb_func
 332              		.fpu fpv4-sp-d16
 334              	HASH_StartDigest:
 335              	.LFB131:
 346:FWLIB/src/stm32f4xx_hash.c **** }
 347:FWLIB/src/stm32f4xx_hash.c **** 
 348:FWLIB/src/stm32f4xx_hash.c **** /**
 349:FWLIB/src/stm32f4xx_hash.c ****   * @brief  Starts the message padding and calculation of the final message     
 350:FWLIB/src/stm32f4xx_hash.c ****   * @param  None
 351:FWLIB/src/stm32f4xx_hash.c ****   * @retval None
 352:FWLIB/src/stm32f4xx_hash.c ****   */
 353:FWLIB/src/stm32f4xx_hash.c **** void HASH_StartDigest(void)
 354:FWLIB/src/stm32f4xx_hash.c **** {
 336              		.loc 1 354 0
 337              		.cfi_startproc
 338              		@ args = 0, pretend = 0, frame = 0
 339              		@ frame_needed = 0, uses_anonymous_args = 0
 340              		@ link register save eliminated.
 355:FWLIB/src/stm32f4xx_hash.c ****   /* Start the Digest calculation */
 356:FWLIB/src/stm32f4xx_hash.c ****   HASH->STR |= HASH_STR_DCAL;
ARM GAS  /tmp/cccCWJpB.s 			page 13


 341              		.loc 1 356 0
 342 0000 024A     		ldr	r2, .L26
 343 0002 9368     		ldr	r3, [r2, #8]
 344 0004 43F48073 		orr	r3, r3, #256
 345 0008 9360     		str	r3, [r2, #8]
 346 000a 7047     		bx	lr
 347              	.L27:
 348              		.align	2
 349              	.L26:
 350 000c 00040650 		.word	1342571520
 351              		.cfi_endproc
 352              	.LFE131:
 354              		.section	.text.HASH_SaveContext,"ax",%progbits
 355              		.align	1
 356              		.global	HASH_SaveContext
 357              		.syntax unified
 358              		.thumb
 359              		.thumb_func
 360              		.fpu fpv4-sp-d16
 362              	HASH_SaveContext:
 363              	.LFB132:
 357:FWLIB/src/stm32f4xx_hash.c **** }
 358:FWLIB/src/stm32f4xx_hash.c **** /**
 359:FWLIB/src/stm32f4xx_hash.c ****   * @}
 360:FWLIB/src/stm32f4xx_hash.c ****   */
 361:FWLIB/src/stm32f4xx_hash.c **** 
 362:FWLIB/src/stm32f4xx_hash.c **** /** @defgroup HASH_Group3 Context swapping functions
 363:FWLIB/src/stm32f4xx_hash.c ****  *  @brief   Context swapping functions
 364:FWLIB/src/stm32f4xx_hash.c ****  *
 365:FWLIB/src/stm32f4xx_hash.c **** @verbatim   
 366:FWLIB/src/stm32f4xx_hash.c ****  ===============================================================================
 367:FWLIB/src/stm32f4xx_hash.c ****                       ##### Context swapping functions #####
 368:FWLIB/src/stm32f4xx_hash.c ****  ===============================================================================  
 369:FWLIB/src/stm32f4xx_hash.c ****  
 370:FWLIB/src/stm32f4xx_hash.c ****  [..] This section provides functions allowing to save and store HASH Context
 371:FWLIB/src/stm32f4xx_hash.c ****   
 372:FWLIB/src/stm32f4xx_hash.c ****  [..] It is possible to interrupt a HASH/HMAC process to perform another processing 
 373:FWLIB/src/stm32f4xx_hash.c ****       with a higher priority, and to complete the interrupted process later on, when 
 374:FWLIB/src/stm32f4xx_hash.c ****       the higher priority task is complete. To do so, the context of the interrupted 
 375:FWLIB/src/stm32f4xx_hash.c ****       task must be saved from the HASH registers to memory, and then be restored 
 376:FWLIB/src/stm32f4xx_hash.c ****       from memory to the HASH registers.
 377:FWLIB/src/stm32f4xx_hash.c ****   
 378:FWLIB/src/stm32f4xx_hash.c ****    (#) To save the current context, use HASH_SaveContext() function
 379:FWLIB/src/stm32f4xx_hash.c ****    (#) To restore the saved context, use HASH_RestoreContext() function 
 380:FWLIB/src/stm32f4xx_hash.c ****   
 381:FWLIB/src/stm32f4xx_hash.c **** 
 382:FWLIB/src/stm32f4xx_hash.c **** @endverbatim
 383:FWLIB/src/stm32f4xx_hash.c ****   * @{
 384:FWLIB/src/stm32f4xx_hash.c ****   */
 385:FWLIB/src/stm32f4xx_hash.c ****   
 386:FWLIB/src/stm32f4xx_hash.c **** /**
 387:FWLIB/src/stm32f4xx_hash.c ****   * @brief  Save the Hash peripheral Context. 
 388:FWLIB/src/stm32f4xx_hash.c ****   * @note   The context can be saved only when no block is currently being 
 389:FWLIB/src/stm32f4xx_hash.c ****   *         processed. So user must wait for DINIS = 1 (the last block has been 
 390:FWLIB/src/stm32f4xx_hash.c ****   *         processed and the input FIFO is empty) or NBW != 0 (the FIFO is not 
 391:FWLIB/src/stm32f4xx_hash.c ****   *         full and no processing is ongoing).   
 392:FWLIB/src/stm32f4xx_hash.c ****   * @param  HASH_ContextSave: pointer to a HASH_Context structure that contains
ARM GAS  /tmp/cccCWJpB.s 			page 14


 393:FWLIB/src/stm32f4xx_hash.c ****   *         the repository for current context.
 394:FWLIB/src/stm32f4xx_hash.c ****   * @retval None
 395:FWLIB/src/stm32f4xx_hash.c ****   */
 396:FWLIB/src/stm32f4xx_hash.c **** void HASH_SaveContext(HASH_Context* HASH_ContextSave)
 397:FWLIB/src/stm32f4xx_hash.c **** {
 364              		.loc 1 397 0
 365              		.cfi_startproc
 366              		@ args = 0, pretend = 0, frame = 0
 367              		@ frame_needed = 0, uses_anonymous_args = 0
 368              		@ link register save eliminated.
 369              	.LVL8:
 398:FWLIB/src/stm32f4xx_hash.c ****   uint8_t i = 0;
 399:FWLIB/src/stm32f4xx_hash.c ****   
 400:FWLIB/src/stm32f4xx_hash.c ****   /* save context registers */
 401:FWLIB/src/stm32f4xx_hash.c ****   HASH_ContextSave->HASH_IMR = HASH->IMR;  
 370              		.loc 1 401 0
 371 0000 0B4B     		ldr	r3, .L31
 372 0002 1A6A     		ldr	r2, [r3, #32]
 373 0004 0260     		str	r2, [r0]
 402:FWLIB/src/stm32f4xx_hash.c ****   HASH_ContextSave->HASH_STR = HASH->STR;      
 374              		.loc 1 402 0
 375 0006 9A68     		ldr	r2, [r3, #8]
 376 0008 4260     		str	r2, [r0, #4]
 403:FWLIB/src/stm32f4xx_hash.c ****   HASH_ContextSave->HASH_CR  = HASH->CR;     
 377              		.loc 1 403 0
 378 000a 1B68     		ldr	r3, [r3]
 379 000c 8360     		str	r3, [r0, #8]
 404:FWLIB/src/stm32f4xx_hash.c ****   for(i=0; i<=53;i++)
 380              		.loc 1 404 0
 381 000e 0023     		movs	r3, #0
 382 0010 0AE0     		b	.L29
 383              	.LVL9:
 384              	.L30:
 405:FWLIB/src/stm32f4xx_hash.c ****   {
 406:FWLIB/src/stm32f4xx_hash.c ****      HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
 385              		.loc 1 406 0 discriminator 3
 386 0012 03F13E01 		add	r1, r3, #62
 387 0016 064A     		ldr	r2, .L31
 388 0018 52F82110 		ldr	r1, [r2, r1, lsl #2]
 389 001c 9A1C     		adds	r2, r3, #2
 390 001e 00EB8202 		add	r2, r0, r2, lsl #2
 391 0022 5160     		str	r1, [r2, #4]
 404:FWLIB/src/stm32f4xx_hash.c ****   for(i=0; i<=53;i++)
 392              		.loc 1 404 0 discriminator 3
 393 0024 0133     		adds	r3, r3, #1
 394              	.LVL10:
 395 0026 DBB2     		uxtb	r3, r3
 396              	.LVL11:
 397              	.L29:
 404:FWLIB/src/stm32f4xx_hash.c ****   for(i=0; i<=53;i++)
 398              		.loc 1 404 0 is_stmt 0 discriminator 1
 399 0028 352B     		cmp	r3, #53
 400 002a F2D9     		bls	.L30
 407:FWLIB/src/stm32f4xx_hash.c ****   }   
 408:FWLIB/src/stm32f4xx_hash.c **** }
 401              		.loc 1 408 0 is_stmt 1
 402 002c 7047     		bx	lr
ARM GAS  /tmp/cccCWJpB.s 			page 15


 403              	.L32:
 404 002e 00BF     		.align	2
 405              	.L31:
 406 0030 00040650 		.word	1342571520
 407              		.cfi_endproc
 408              	.LFE132:
 410              		.section	.text.HASH_RestoreContext,"ax",%progbits
 411              		.align	1
 412              		.global	HASH_RestoreContext
 413              		.syntax unified
 414              		.thumb
 415              		.thumb_func
 416              		.fpu fpv4-sp-d16
 418              	HASH_RestoreContext:
 419              	.LFB133:
 409:FWLIB/src/stm32f4xx_hash.c **** 
 410:FWLIB/src/stm32f4xx_hash.c **** /**
 411:FWLIB/src/stm32f4xx_hash.c ****   * @brief  Restore the Hash peripheral Context.  
 412:FWLIB/src/stm32f4xx_hash.c ****   * @note   After calling this function, user can restart the processing from the
 413:FWLIB/src/stm32f4xx_hash.c ****   *         point where it has been interrupted.  
 414:FWLIB/src/stm32f4xx_hash.c ****   * @param  HASH_ContextRestore: pointer to a HASH_Context structure that contains
 415:FWLIB/src/stm32f4xx_hash.c ****   *         the repository for saved context.
 416:FWLIB/src/stm32f4xx_hash.c ****   * @retval None
 417:FWLIB/src/stm32f4xx_hash.c ****   */
 418:FWLIB/src/stm32f4xx_hash.c **** void HASH_RestoreContext(HASH_Context* HASH_ContextRestore)  
 419:FWLIB/src/stm32f4xx_hash.c **** {
 420              		.loc 1 419 0
 421              		.cfi_startproc
 422              		@ args = 0, pretend = 0, frame = 0
 423              		@ frame_needed = 0, uses_anonymous_args = 0
 424              		@ link register save eliminated.
 425              	.LVL12:
 420:FWLIB/src/stm32f4xx_hash.c ****   uint8_t i = 0;
 421:FWLIB/src/stm32f4xx_hash.c ****   
 422:FWLIB/src/stm32f4xx_hash.c ****   /* restore context registers */
 423:FWLIB/src/stm32f4xx_hash.c ****   HASH->IMR = HASH_ContextRestore->HASH_IMR;   
 426              		.loc 1 423 0
 427 0000 0268     		ldr	r2, [r0]
 428 0002 0F4B     		ldr	r3, .L40
 429 0004 1A62     		str	r2, [r3, #32]
 424:FWLIB/src/stm32f4xx_hash.c ****   HASH->STR = HASH_ContextRestore->HASH_STR;     
 430              		.loc 1 424 0
 431 0006 4268     		ldr	r2, [r0, #4]
 432 0008 9A60     		str	r2, [r3, #8]
 425:FWLIB/src/stm32f4xx_hash.c ****   HASH->CR = HASH_ContextRestore->HASH_CR;
 433              		.loc 1 425 0
 434 000a 8268     		ldr	r2, [r0, #8]
 435 000c 1A60     		str	r2, [r3]
 426:FWLIB/src/stm32f4xx_hash.c ****   
 427:FWLIB/src/stm32f4xx_hash.c ****   /* Initialize the hash processor */
 428:FWLIB/src/stm32f4xx_hash.c ****   HASH->CR |= HASH_CR_INIT; 
 436              		.loc 1 428 0
 437 000e 1A68     		ldr	r2, [r3]
 438 0010 42F00402 		orr	r2, r2, #4
 439 0014 1A60     		str	r2, [r3]
 429:FWLIB/src/stm32f4xx_hash.c ****   
 430:FWLIB/src/stm32f4xx_hash.c ****    /* continue restoring context registers */     
ARM GAS  /tmp/cccCWJpB.s 			page 16


 431:FWLIB/src/stm32f4xx_hash.c ****   for(i=0; i<=53;i++)
 440              		.loc 1 431 0
 441 0016 0023     		movs	r3, #0
 442              	.LVL13:
 443 0018 352B     		cmp	r3, #53
 444 001a 10D8     		bhi	.L39
 419:FWLIB/src/stm32f4xx_hash.c ****   uint8_t i = 0;
 445              		.loc 1 419 0
 446 001c 10B4     		push	{r4}
 447              	.LCFI4:
 448              		.cfi_def_cfa_offset 4
 449              		.cfi_offset 4, -4
 450              	.L35:
 432:FWLIB/src/stm32f4xx_hash.c ****   {
 433:FWLIB/src/stm32f4xx_hash.c ****      HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
 451              		.loc 1 433 0 discriminator 3
 452 001e 9A1C     		adds	r2, r3, #2
 453 0020 00EB8202 		add	r2, r0, r2, lsl #2
 454 0024 5468     		ldr	r4, [r2, #4]
 455 0026 03F13E01 		add	r1, r3, #62
 456 002a 054A     		ldr	r2, .L40
 457 002c 42F82140 		str	r4, [r2, r1, lsl #2]
 431:FWLIB/src/stm32f4xx_hash.c ****   {
 458              		.loc 1 431 0 discriminator 3
 459 0030 0133     		adds	r3, r3, #1
 460              	.LVL14:
 461 0032 DBB2     		uxtb	r3, r3
 462              	.LVL15:
 463 0034 352B     		cmp	r3, #53
 464 0036 F2D9     		bls	.L35
 434:FWLIB/src/stm32f4xx_hash.c ****   }   
 435:FWLIB/src/stm32f4xx_hash.c **** }
 465              		.loc 1 435 0
 466 0038 5DF8044B 		ldr	r4, [sp], #4
 467              	.LCFI5:
 468              		.cfi_restore 4
 469              		.cfi_def_cfa_offset 0
 470 003c 7047     		bx	lr
 471              	.L39:
 472 003e 7047     		bx	lr
 473              	.L41:
 474              		.align	2
 475              	.L40:
 476 0040 00040650 		.word	1342571520
 477              		.cfi_endproc
 478              	.LFE133:
 480              		.section	.text.HASH_AutoStartDigest,"ax",%progbits
 481              		.align	1
 482              		.global	HASH_AutoStartDigest
 483              		.syntax unified
 484              		.thumb
 485              		.thumb_func
 486              		.fpu fpv4-sp-d16
 488              	HASH_AutoStartDigest:
 489              	.LFB134:
 436:FWLIB/src/stm32f4xx_hash.c **** /**
 437:FWLIB/src/stm32f4xx_hash.c ****   * @}
ARM GAS  /tmp/cccCWJpB.s 			page 17


 438:FWLIB/src/stm32f4xx_hash.c ****   */
 439:FWLIB/src/stm32f4xx_hash.c **** 
 440:FWLIB/src/stm32f4xx_hash.c **** /** @defgroup HASH_Group4 HASH's DMA interface Configuration function
 441:FWLIB/src/stm32f4xx_hash.c ****  *  @brief   HASH's DMA interface Configuration function 
 442:FWLIB/src/stm32f4xx_hash.c ****  *
 443:FWLIB/src/stm32f4xx_hash.c **** @verbatim   
 444:FWLIB/src/stm32f4xx_hash.c ****  ===============================================================================
 445:FWLIB/src/stm32f4xx_hash.c ****                ##### HASH's DMA interface Configuration function #####
 446:FWLIB/src/stm32f4xx_hash.c ****  ===============================================================================  
 447:FWLIB/src/stm32f4xx_hash.c **** 
 448:FWLIB/src/stm32f4xx_hash.c ****  [..] This section provides functions allowing to configure the DMA interface for 
 449:FWLIB/src/stm32f4xx_hash.c ****       HASH/ HMAC data input transfer.
 450:FWLIB/src/stm32f4xx_hash.c ****    
 451:FWLIB/src/stm32f4xx_hash.c ****  [..] When the DMA mode is enabled (using the HASH_DMACmd() function), data can be 
 452:FWLIB/src/stm32f4xx_hash.c ****       sent to the IN FIFO using the DMA peripheral.
 453:FWLIB/src/stm32f4xx_hash.c **** 
 454:FWLIB/src/stm32f4xx_hash.c **** @endverbatim
 455:FWLIB/src/stm32f4xx_hash.c ****   * @{
 456:FWLIB/src/stm32f4xx_hash.c ****   */
 457:FWLIB/src/stm32f4xx_hash.c **** 
 458:FWLIB/src/stm32f4xx_hash.c **** /**
 459:FWLIB/src/stm32f4xx_hash.c ****   * @brief  Enables or disables auto-start message padding and
 460:FWLIB/src/stm32f4xx_hash.c ****   *         calculation of the final message digest at the end of DMA transfer.
 461:FWLIB/src/stm32f4xx_hash.c ****   * @param  NewState: new state of the selected HASH DMA transfer request.
 462:FWLIB/src/stm32f4xx_hash.c ****   *          This parameter can be: ENABLE or DISABLE.
 463:FWLIB/src/stm32f4xx_hash.c ****   * @retval None
 464:FWLIB/src/stm32f4xx_hash.c ****   */
 465:FWLIB/src/stm32f4xx_hash.c **** void HASH_AutoStartDigest(FunctionalState NewState)
 466:FWLIB/src/stm32f4xx_hash.c **** {
 490              		.loc 1 466 0
 491              		.cfi_startproc
 492              		@ args = 0, pretend = 0, frame = 0
 493              		@ frame_needed = 0, uses_anonymous_args = 0
 494              		@ link register save eliminated.
 495              	.LVL16:
 467:FWLIB/src/stm32f4xx_hash.c ****   /* Check the parameters */
 468:FWLIB/src/stm32f4xx_hash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 469:FWLIB/src/stm32f4xx_hash.c **** 
 470:FWLIB/src/stm32f4xx_hash.c ****   if (NewState != DISABLE)
 496              		.loc 1 470 0
 497 0000 28B9     		cbnz	r0, .L45
 471:FWLIB/src/stm32f4xx_hash.c ****   {
 472:FWLIB/src/stm32f4xx_hash.c ****     /* Enable the auto start of the final message digest at the end of DMA transfer */
 473:FWLIB/src/stm32f4xx_hash.c ****     HASH->CR &= ~HASH_CR_MDMAT;
 474:FWLIB/src/stm32f4xx_hash.c ****   }
 475:FWLIB/src/stm32f4xx_hash.c ****   else
 476:FWLIB/src/stm32f4xx_hash.c ****   {
 477:FWLIB/src/stm32f4xx_hash.c ****     /* Disable the auto start of the final message digest at the end of DMA transfer */
 478:FWLIB/src/stm32f4xx_hash.c ****     HASH->CR |= HASH_CR_MDMAT;
 498              		.loc 1 478 0
 499 0002 064A     		ldr	r2, .L46
 500 0004 1368     		ldr	r3, [r2]
 501 0006 43F40053 		orr	r3, r3, #8192
 502 000a 1360     		str	r3, [r2]
 503 000c 7047     		bx	lr
 504              	.L45:
 473:FWLIB/src/stm32f4xx_hash.c ****   }
ARM GAS  /tmp/cccCWJpB.s 			page 18


 505              		.loc 1 473 0
 506 000e 034A     		ldr	r2, .L46
 507 0010 1368     		ldr	r3, [r2]
 508 0012 23F40053 		bic	r3, r3, #8192
 509 0016 1360     		str	r3, [r2]
 510 0018 7047     		bx	lr
 511              	.L47:
 512 001a 00BF     		.align	2
 513              	.L46:
 514 001c 00040650 		.word	1342571520
 515              		.cfi_endproc
 516              	.LFE134:
 518              		.section	.text.HASH_DMACmd,"ax",%progbits
 519              		.align	1
 520              		.global	HASH_DMACmd
 521              		.syntax unified
 522              		.thumb
 523              		.thumb_func
 524              		.fpu fpv4-sp-d16
 526              	HASH_DMACmd:
 527              	.LFB135:
 479:FWLIB/src/stm32f4xx_hash.c ****   }
 480:FWLIB/src/stm32f4xx_hash.c **** }
 481:FWLIB/src/stm32f4xx_hash.c ****   
 482:FWLIB/src/stm32f4xx_hash.c **** /**
 483:FWLIB/src/stm32f4xx_hash.c ****   * @brief  Enables or disables the HASH DMA interface.
 484:FWLIB/src/stm32f4xx_hash.c ****   * @note   The DMA is disabled by hardware after the end of transfer.
 485:FWLIB/src/stm32f4xx_hash.c ****   * @param  NewState: new state of the selected HASH DMA transfer request.
 486:FWLIB/src/stm32f4xx_hash.c ****   *          This parameter can be: ENABLE or DISABLE.
 487:FWLIB/src/stm32f4xx_hash.c ****   * @retval None
 488:FWLIB/src/stm32f4xx_hash.c ****   */
 489:FWLIB/src/stm32f4xx_hash.c **** void HASH_DMACmd(FunctionalState NewState)
 490:FWLIB/src/stm32f4xx_hash.c **** {
 528              		.loc 1 490 0
 529              		.cfi_startproc
 530              		@ args = 0, pretend = 0, frame = 0
 531              		@ frame_needed = 0, uses_anonymous_args = 0
 532              		@ link register save eliminated.
 533              	.LVL17:
 491:FWLIB/src/stm32f4xx_hash.c ****   /* Check the parameters */
 492:FWLIB/src/stm32f4xx_hash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 493:FWLIB/src/stm32f4xx_hash.c **** 
 494:FWLIB/src/stm32f4xx_hash.c ****   if (NewState != DISABLE)
 534              		.loc 1 494 0
 535 0000 28B9     		cbnz	r0, .L51
 495:FWLIB/src/stm32f4xx_hash.c ****   {
 496:FWLIB/src/stm32f4xx_hash.c ****     /* Enable the HASH DMA request */
 497:FWLIB/src/stm32f4xx_hash.c ****     HASH->CR |= HASH_CR_DMAE;
 498:FWLIB/src/stm32f4xx_hash.c ****   }
 499:FWLIB/src/stm32f4xx_hash.c ****   else
 500:FWLIB/src/stm32f4xx_hash.c ****   {
 501:FWLIB/src/stm32f4xx_hash.c ****     /* Disable the HASH DMA request */
 502:FWLIB/src/stm32f4xx_hash.c ****     HASH->CR &= ~HASH_CR_DMAE;
 536              		.loc 1 502 0
 537 0002 064A     		ldr	r2, .L52
 538 0004 1368     		ldr	r3, [r2]
 539 0006 23F00803 		bic	r3, r3, #8
ARM GAS  /tmp/cccCWJpB.s 			page 19


 540 000a 1360     		str	r3, [r2]
 541 000c 7047     		bx	lr
 542              	.L51:
 497:FWLIB/src/stm32f4xx_hash.c ****   }
 543              		.loc 1 497 0
 544 000e 034A     		ldr	r2, .L52
 545 0010 1368     		ldr	r3, [r2]
 546 0012 43F00803 		orr	r3, r3, #8
 547 0016 1360     		str	r3, [r2]
 548 0018 7047     		bx	lr
 549              	.L53:
 550 001a 00BF     		.align	2
 551              	.L52:
 552 001c 00040650 		.word	1342571520
 553              		.cfi_endproc
 554              	.LFE135:
 556              		.section	.text.HASH_ITConfig,"ax",%progbits
 557              		.align	1
 558              		.global	HASH_ITConfig
 559              		.syntax unified
 560              		.thumb
 561              		.thumb_func
 562              		.fpu fpv4-sp-d16
 564              	HASH_ITConfig:
 565              	.LFB136:
 503:FWLIB/src/stm32f4xx_hash.c ****   }
 504:FWLIB/src/stm32f4xx_hash.c **** }
 505:FWLIB/src/stm32f4xx_hash.c **** /**
 506:FWLIB/src/stm32f4xx_hash.c ****   * @}
 507:FWLIB/src/stm32f4xx_hash.c ****   */
 508:FWLIB/src/stm32f4xx_hash.c **** 
 509:FWLIB/src/stm32f4xx_hash.c **** /** @defgroup HASH_Group5 Interrupts and flags management functions
 510:FWLIB/src/stm32f4xx_hash.c ****  *  @brief   Interrupts and flags management functions
 511:FWLIB/src/stm32f4xx_hash.c ****  *
 512:FWLIB/src/stm32f4xx_hash.c **** @verbatim   
 513:FWLIB/src/stm32f4xx_hash.c ****  ===============================================================================
 514:FWLIB/src/stm32f4xx_hash.c ****                ##### Interrupts and flags management functions #####
 515:FWLIB/src/stm32f4xx_hash.c ****  ===============================================================================  
 516:FWLIB/src/stm32f4xx_hash.c **** 
 517:FWLIB/src/stm32f4xx_hash.c ****  [..] This section provides functions allowing to configure the HASH Interrupts and 
 518:FWLIB/src/stm32f4xx_hash.c ****       to get the status and clear flags and Interrupts pending bits.
 519:FWLIB/src/stm32f4xx_hash.c ****   
 520:FWLIB/src/stm32f4xx_hash.c ****  [..] The HASH provides 2 Interrupts sources and 5 Flags:
 521:FWLIB/src/stm32f4xx_hash.c ****   
 522:FWLIB/src/stm32f4xx_hash.c ****  *** Flags : ***
 523:FWLIB/src/stm32f4xx_hash.c ****  =============== 
 524:FWLIB/src/stm32f4xx_hash.c ****  [..]
 525:FWLIB/src/stm32f4xx_hash.c ****    (#) HASH_FLAG_DINIS : set when 16 locations are free in the Data IN FIFO 
 526:FWLIB/src/stm32f4xx_hash.c ****       which means that a  new block (512 bit) can be entered into the input buffer.
 527:FWLIB/src/stm32f4xx_hash.c ****                           
 528:FWLIB/src/stm32f4xx_hash.c ****    (#) HASH_FLAG_DCIS :  set when Digest calculation is complete
 529:FWLIB/src/stm32f4xx_hash.c ****       
 530:FWLIB/src/stm32f4xx_hash.c ****    (#) HASH_FLAG_DMAS :  set when HASH's DMA interface is enabled (DMAE=1) or 
 531:FWLIB/src/stm32f4xx_hash.c ****        a transfer is ongoing. This Flag is cleared only by hardware.
 532:FWLIB/src/stm32f4xx_hash.c ****                            
 533:FWLIB/src/stm32f4xx_hash.c ****    (#) HASH_FLAG_BUSY :  set when The hash core is processing a block of data
 534:FWLIB/src/stm32f4xx_hash.c ****        This Flag is cleared only by hardware. 
ARM GAS  /tmp/cccCWJpB.s 			page 20


 535:FWLIB/src/stm32f4xx_hash.c ****                            
 536:FWLIB/src/stm32f4xx_hash.c ****    (#) HASH_FLAG_DINNE : set when Data IN FIFO is not empty which means that 
 537:FWLIB/src/stm32f4xx_hash.c ****        the Data IN FIFO contains at least one word of data. This Flag is cleared 
 538:FWLIB/src/stm32f4xx_hash.c ****        only by hardware.
 539:FWLIB/src/stm32f4xx_hash.c ****      
 540:FWLIB/src/stm32f4xx_hash.c ****  *** Interrupts : ***
 541:FWLIB/src/stm32f4xx_hash.c ****  ====================
 542:FWLIB/src/stm32f4xx_hash.c ****  [..]   
 543:FWLIB/src/stm32f4xx_hash.c ****    (#) HASH_IT_DINI  : if enabled, this interrupt source is pending when 16 
 544:FWLIB/src/stm32f4xx_hash.c ****        locations are free in the Data IN FIFO  which means that a new block (512 bit)
 545:FWLIB/src/stm32f4xx_hash.c ****        can be entered into the input buffer. This interrupt source is cleared using 
 546:FWLIB/src/stm32f4xx_hash.c ****        HASH_ClearITPendingBit(HASH_IT_DINI) function.
 547:FWLIB/src/stm32f4xx_hash.c ****    
 548:FWLIB/src/stm32f4xx_hash.c ****    (#) HASH_IT_DCI   : if enabled, this interrupt source is pending when Digest 
 549:FWLIB/src/stm32f4xx_hash.c ****        calculation is complete. This interrupt source is cleared using 
 550:FWLIB/src/stm32f4xx_hash.c ****        HASH_ClearITPendingBit(HASH_IT_DCI) function.
 551:FWLIB/src/stm32f4xx_hash.c **** 
 552:FWLIB/src/stm32f4xx_hash.c ****  *** Managing the HASH controller events : ***
 553:FWLIB/src/stm32f4xx_hash.c ****  =============================================
 554:FWLIB/src/stm32f4xx_hash.c ****  [..] The user should identify which mode will be used in his application to manage 
 555:FWLIB/src/stm32f4xx_hash.c ****       the HASH controller events: Polling mode or Interrupt mode.
 556:FWLIB/src/stm32f4xx_hash.c ****   
 557:FWLIB/src/stm32f4xx_hash.c ****    (#) In the Polling Mode it is advised to use the following functions:
 558:FWLIB/src/stm32f4xx_hash.c ****        (++) HASH_GetFlagStatus() : to check if flags events occur. 
 559:FWLIB/src/stm32f4xx_hash.c ****        (++) HASH_ClearFlag()     : to clear the flags events.
 560:FWLIB/src/stm32f4xx_hash.c ****     
 561:FWLIB/src/stm32f4xx_hash.c ****    (#)  In the Interrupt Mode it is advised to use the following functions:
 562:FWLIB/src/stm32f4xx_hash.c ****        (++) HASH_ITConfig()       : to enable or disable the interrupt source.
 563:FWLIB/src/stm32f4xx_hash.c ****        (++) HASH_GetITStatus()    : to check if Interrupt occurs.
 564:FWLIB/src/stm32f4xx_hash.c ****        (++) HASH_ClearITPendingBit() : to clear the Interrupt pending Bit 
 565:FWLIB/src/stm32f4xx_hash.c ****             (corresponding Flag). 
 566:FWLIB/src/stm32f4xx_hash.c **** 
 567:FWLIB/src/stm32f4xx_hash.c **** @endverbatim
 568:FWLIB/src/stm32f4xx_hash.c ****   * @{
 569:FWLIB/src/stm32f4xx_hash.c ****   */ 
 570:FWLIB/src/stm32f4xx_hash.c ****   
 571:FWLIB/src/stm32f4xx_hash.c **** /**
 572:FWLIB/src/stm32f4xx_hash.c ****   * @brief  Enables or disables the specified HASH interrupts.
 573:FWLIB/src/stm32f4xx_hash.c ****   * @param  HASH_IT: specifies the HASH interrupt source to be enabled or disabled.
 574:FWLIB/src/stm32f4xx_hash.c ****   *          This parameter can be any combination of the following values:
 575:FWLIB/src/stm32f4xx_hash.c ****   *            @arg HASH_IT_DINI: Data Input interrupt
 576:FWLIB/src/stm32f4xx_hash.c ****   *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
 577:FWLIB/src/stm32f4xx_hash.c ****   * @param  NewState: new state of the specified HASH interrupt.
 578:FWLIB/src/stm32f4xx_hash.c ****   *           This parameter can be: ENABLE or DISABLE.
 579:FWLIB/src/stm32f4xx_hash.c ****   * @retval None
 580:FWLIB/src/stm32f4xx_hash.c ****   */
 581:FWLIB/src/stm32f4xx_hash.c **** void HASH_ITConfig(uint32_t HASH_IT, FunctionalState NewState)
 582:FWLIB/src/stm32f4xx_hash.c **** {
 566              		.loc 1 582 0
 567              		.cfi_startproc
 568              		@ args = 0, pretend = 0, frame = 0
 569              		@ frame_needed = 0, uses_anonymous_args = 0
 570              		@ link register save eliminated.
 571              	.LVL18:
 583:FWLIB/src/stm32f4xx_hash.c ****   /* Check the parameters */
 584:FWLIB/src/stm32f4xx_hash.c ****   assert_param(IS_HASH_IT(HASH_IT));
 585:FWLIB/src/stm32f4xx_hash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
ARM GAS  /tmp/cccCWJpB.s 			page 21


 586:FWLIB/src/stm32f4xx_hash.c **** 
 587:FWLIB/src/stm32f4xx_hash.c ****   if (NewState != DISABLE)
 572              		.loc 1 587 0
 573 0000 29B9     		cbnz	r1, .L57
 588:FWLIB/src/stm32f4xx_hash.c ****   {
 589:FWLIB/src/stm32f4xx_hash.c ****     /* Enable the selected HASH interrupt */
 590:FWLIB/src/stm32f4xx_hash.c ****     HASH->IMR |= HASH_IT;
 591:FWLIB/src/stm32f4xx_hash.c ****   }
 592:FWLIB/src/stm32f4xx_hash.c ****   else
 593:FWLIB/src/stm32f4xx_hash.c ****   {
 594:FWLIB/src/stm32f4xx_hash.c ****     /* Disable the selected HASH interrupt */
 595:FWLIB/src/stm32f4xx_hash.c ****     HASH->IMR &= (uint32_t)(~HASH_IT);
 574              		.loc 1 595 0
 575 0002 054A     		ldr	r2, .L58
 576 0004 136A     		ldr	r3, [r2, #32]
 577 0006 23EA0000 		bic	r0, r3, r0
 578              	.LVL19:
 579 000a 1062     		str	r0, [r2, #32]
 580 000c 7047     		bx	lr
 581              	.LVL20:
 582              	.L57:
 590:FWLIB/src/stm32f4xx_hash.c ****   }
 583              		.loc 1 590 0
 584 000e 024A     		ldr	r2, .L58
 585 0010 136A     		ldr	r3, [r2, #32]
 586 0012 1843     		orrs	r0, r0, r3
 587              	.LVL21:
 588 0014 1062     		str	r0, [r2, #32]
 589 0016 7047     		bx	lr
 590              	.L59:
 591              		.align	2
 592              	.L58:
 593 0018 00040650 		.word	1342571520
 594              		.cfi_endproc
 595              	.LFE136:
 597              		.section	.text.HASH_GetFlagStatus,"ax",%progbits
 598              		.align	1
 599              		.global	HASH_GetFlagStatus
 600              		.syntax unified
 601              		.thumb
 602              		.thumb_func
 603              		.fpu fpv4-sp-d16
 605              	HASH_GetFlagStatus:
 606              	.LFB137:
 596:FWLIB/src/stm32f4xx_hash.c ****   }
 597:FWLIB/src/stm32f4xx_hash.c **** }
 598:FWLIB/src/stm32f4xx_hash.c **** 
 599:FWLIB/src/stm32f4xx_hash.c **** /**
 600:FWLIB/src/stm32f4xx_hash.c ****   * @brief  Checks whether the specified HASH flag is set or not.
 601:FWLIB/src/stm32f4xx_hash.c ****   * @param  HASH_FLAG: specifies the HASH flag to check.
 602:FWLIB/src/stm32f4xx_hash.c ****   *          This parameter can be one of the following values:
 603:FWLIB/src/stm32f4xx_hash.c ****   *            @arg HASH_FLAG_DINIS: Data input interrupt status flag
 604:FWLIB/src/stm32f4xx_hash.c ****   *            @arg HASH_FLAG_DCIS: Digest calculation completion interrupt status flag
 605:FWLIB/src/stm32f4xx_hash.c ****   *            @arg HASH_FLAG_BUSY: Busy flag
 606:FWLIB/src/stm32f4xx_hash.c ****   *            @arg HASH_FLAG_DMAS: DMAS Status flag
 607:FWLIB/src/stm32f4xx_hash.c ****   *            @arg HASH_FLAG_DINNE: Data Input register (DIN) not empty status flag
 608:FWLIB/src/stm32f4xx_hash.c ****   * @retval The new state of HASH_FLAG (SET or RESET)
ARM GAS  /tmp/cccCWJpB.s 			page 22


 609:FWLIB/src/stm32f4xx_hash.c ****   */
 610:FWLIB/src/stm32f4xx_hash.c **** FlagStatus HASH_GetFlagStatus(uint32_t HASH_FLAG)
 611:FWLIB/src/stm32f4xx_hash.c **** {
 607              		.loc 1 611 0
 608              		.cfi_startproc
 609              		@ args = 0, pretend = 0, frame = 0
 610              		@ frame_needed = 0, uses_anonymous_args = 0
 611              		@ link register save eliminated.
 612              	.LVL22:
 612:FWLIB/src/stm32f4xx_hash.c ****   FlagStatus bitstatus = RESET;
 613:FWLIB/src/stm32f4xx_hash.c ****   uint32_t tempreg = 0;
 614:FWLIB/src/stm32f4xx_hash.c **** 
 615:FWLIB/src/stm32f4xx_hash.c ****   /* Check the parameters */
 616:FWLIB/src/stm32f4xx_hash.c ****   assert_param(IS_HASH_GET_FLAG(HASH_FLAG));
 617:FWLIB/src/stm32f4xx_hash.c **** 
 618:FWLIB/src/stm32f4xx_hash.c ****   /* check if the FLAG is in CR register */
 619:FWLIB/src/stm32f4xx_hash.c ****   if ((HASH_FLAG & HASH_FLAG_DINNE) != (uint32_t)RESET ) 
 613              		.loc 1 619 0
 614 0000 10F4805F 		tst	r0, #4096
 615 0004 05D0     		beq	.L61
 620:FWLIB/src/stm32f4xx_hash.c ****   {
 621:FWLIB/src/stm32f4xx_hash.c ****     tempreg = HASH->CR;
 616              		.loc 1 621 0
 617 0006 054B     		ldr	r3, .L66
 618 0008 1B68     		ldr	r3, [r3]
 619              	.LVL23:
 620              	.L62:
 622:FWLIB/src/stm32f4xx_hash.c ****   }
 623:FWLIB/src/stm32f4xx_hash.c ****   else /* The FLAG is in SR register */
 624:FWLIB/src/stm32f4xx_hash.c ****   {
 625:FWLIB/src/stm32f4xx_hash.c ****     tempreg = HASH->SR;
 626:FWLIB/src/stm32f4xx_hash.c ****   }
 627:FWLIB/src/stm32f4xx_hash.c **** 
 628:FWLIB/src/stm32f4xx_hash.c ****   /* Check the status of the specified HASH flag */
 629:FWLIB/src/stm32f4xx_hash.c ****   if ((tempreg & HASH_FLAG) != (uint32_t)RESET)
 621              		.loc 1 629 0
 622 000a 0342     		tst	r3, r0
 623 000c 04D1     		bne	.L65
 630:FWLIB/src/stm32f4xx_hash.c ****   {
 631:FWLIB/src/stm32f4xx_hash.c ****     /* HASH is set */
 632:FWLIB/src/stm32f4xx_hash.c ****     bitstatus = SET;
 633:FWLIB/src/stm32f4xx_hash.c ****   }
 634:FWLIB/src/stm32f4xx_hash.c ****   else
 635:FWLIB/src/stm32f4xx_hash.c ****   {
 636:FWLIB/src/stm32f4xx_hash.c ****     /* HASH_FLAG is reset */
 637:FWLIB/src/stm32f4xx_hash.c ****     bitstatus = RESET;
 624              		.loc 1 637 0
 625 000e 0020     		movs	r0, #0
 626              	.LVL24:
 638:FWLIB/src/stm32f4xx_hash.c ****   }
 639:FWLIB/src/stm32f4xx_hash.c **** 
 640:FWLIB/src/stm32f4xx_hash.c ****   /* Return the HASH_FLAG status */
 641:FWLIB/src/stm32f4xx_hash.c ****   return  bitstatus;
 642:FWLIB/src/stm32f4xx_hash.c **** }
 627              		.loc 1 642 0
 628 0010 7047     		bx	lr
 629              	.LVL25:
ARM GAS  /tmp/cccCWJpB.s 			page 23


 630              	.L61:
 625:FWLIB/src/stm32f4xx_hash.c ****   }
 631              		.loc 1 625 0
 632 0012 024B     		ldr	r3, .L66
 633 0014 5B6A     		ldr	r3, [r3, #36]
 634              	.LVL26:
 635 0016 F8E7     		b	.L62
 636              	.L65:
 632:FWLIB/src/stm32f4xx_hash.c ****   }
 637              		.loc 1 632 0
 638 0018 0120     		movs	r0, #1
 639              	.LVL27:
 640 001a 7047     		bx	lr
 641              	.L67:
 642              		.align	2
 643              	.L66:
 644 001c 00040650 		.word	1342571520
 645              		.cfi_endproc
 646              	.LFE137:
 648              		.section	.text.HASH_ClearFlag,"ax",%progbits
 649              		.align	1
 650              		.global	HASH_ClearFlag
 651              		.syntax unified
 652              		.thumb
 653              		.thumb_func
 654              		.fpu fpv4-sp-d16
 656              	HASH_ClearFlag:
 657              	.LFB138:
 643:FWLIB/src/stm32f4xx_hash.c **** /**
 644:FWLIB/src/stm32f4xx_hash.c ****   * @brief  Clears the HASH flags.
 645:FWLIB/src/stm32f4xx_hash.c ****   * @param  HASH_FLAG: specifies the flag to clear. 
 646:FWLIB/src/stm32f4xx_hash.c ****   *          This parameter can be any combination of the following values:
 647:FWLIB/src/stm32f4xx_hash.c ****   *            @arg HASH_FLAG_DINIS: Data Input Flag
 648:FWLIB/src/stm32f4xx_hash.c ****   *            @arg HASH_FLAG_DCIS: Digest Calculation Completion Flag                       
 649:FWLIB/src/stm32f4xx_hash.c ****   * @retval None
 650:FWLIB/src/stm32f4xx_hash.c ****   */
 651:FWLIB/src/stm32f4xx_hash.c **** void HASH_ClearFlag(uint32_t HASH_FLAG)
 652:FWLIB/src/stm32f4xx_hash.c **** {
 658              		.loc 1 652 0
 659              		.cfi_startproc
 660              		@ args = 0, pretend = 0, frame = 0
 661              		@ frame_needed = 0, uses_anonymous_args = 0
 662              		@ link register save eliminated.
 663              	.LVL28:
 653:FWLIB/src/stm32f4xx_hash.c ****   /* Check the parameters */
 654:FWLIB/src/stm32f4xx_hash.c ****   assert_param(IS_HASH_CLEAR_FLAG(HASH_FLAG));
 655:FWLIB/src/stm32f4xx_hash.c ****   
 656:FWLIB/src/stm32f4xx_hash.c ****   /* Clear the selected HASH flags */
 657:FWLIB/src/stm32f4xx_hash.c ****   HASH->SR = ~(uint32_t)HASH_FLAG;
 664              		.loc 1 657 0
 665 0000 C043     		mvns	r0, r0
 666              	.LVL29:
 667 0002 014B     		ldr	r3, .L69
 668 0004 5862     		str	r0, [r3, #36]
 669 0006 7047     		bx	lr
 670              	.L70:
 671              		.align	2
ARM GAS  /tmp/cccCWJpB.s 			page 24


 672              	.L69:
 673 0008 00040650 		.word	1342571520
 674              		.cfi_endproc
 675              	.LFE138:
 677              		.section	.text.HASH_GetITStatus,"ax",%progbits
 678              		.align	1
 679              		.global	HASH_GetITStatus
 680              		.syntax unified
 681              		.thumb
 682              		.thumb_func
 683              		.fpu fpv4-sp-d16
 685              	HASH_GetITStatus:
 686              	.LFB139:
 658:FWLIB/src/stm32f4xx_hash.c **** }
 659:FWLIB/src/stm32f4xx_hash.c **** /**
 660:FWLIB/src/stm32f4xx_hash.c ****   * @brief  Checks whether the specified HASH interrupt has occurred or not.
 661:FWLIB/src/stm32f4xx_hash.c ****   * @param  HASH_IT: specifies the HASH interrupt source to check.
 662:FWLIB/src/stm32f4xx_hash.c ****   *          This parameter can be one of the following values:
 663:FWLIB/src/stm32f4xx_hash.c ****   *            @arg HASH_IT_DINI: Data Input interrupt
 664:FWLIB/src/stm32f4xx_hash.c ****   *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
 665:FWLIB/src/stm32f4xx_hash.c ****   * @retval The new state of HASH_IT (SET or RESET).
 666:FWLIB/src/stm32f4xx_hash.c ****   */
 667:FWLIB/src/stm32f4xx_hash.c **** ITStatus HASH_GetITStatus(uint32_t HASH_IT)
 668:FWLIB/src/stm32f4xx_hash.c **** {
 687              		.loc 1 668 0
 688              		.cfi_startproc
 689              		@ args = 0, pretend = 0, frame = 0
 690              		@ frame_needed = 0, uses_anonymous_args = 0
 691              		@ link register save eliminated.
 692              	.LVL30:
 669:FWLIB/src/stm32f4xx_hash.c ****   ITStatus bitstatus = RESET;
 670:FWLIB/src/stm32f4xx_hash.c ****   uint32_t tmpreg = 0;
 671:FWLIB/src/stm32f4xx_hash.c **** 
 672:FWLIB/src/stm32f4xx_hash.c ****   /* Check the parameters */
 673:FWLIB/src/stm32f4xx_hash.c ****   assert_param(IS_HASH_GET_IT(HASH_IT));  
 674:FWLIB/src/stm32f4xx_hash.c **** 
 675:FWLIB/src/stm32f4xx_hash.c **** 
 676:FWLIB/src/stm32f4xx_hash.c ****   /* Check the status of the specified HASH interrupt */
 677:FWLIB/src/stm32f4xx_hash.c ****   tmpreg =  HASH->SR;
 693              		.loc 1 677 0
 694 0000 044A     		ldr	r2, .L75
 695 0002 536A     		ldr	r3, [r2, #36]
 696              	.LVL31:
 678:FWLIB/src/stm32f4xx_hash.c **** 
 679:FWLIB/src/stm32f4xx_hash.c ****   if (((HASH->IMR & tmpreg) & HASH_IT) != RESET)
 697              		.loc 1 679 0
 698 0004 126A     		ldr	r2, [r2, #32]
 699 0006 1340     		ands	r3, r3, r2
 700              	.LVL32:
 701 0008 0342     		tst	r3, r0
 702 000a 01D1     		bne	.L74
 680:FWLIB/src/stm32f4xx_hash.c ****   {
 681:FWLIB/src/stm32f4xx_hash.c ****     /* HASH_IT is set */
 682:FWLIB/src/stm32f4xx_hash.c ****     bitstatus = SET;
 683:FWLIB/src/stm32f4xx_hash.c ****   }
 684:FWLIB/src/stm32f4xx_hash.c ****   else
 685:FWLIB/src/stm32f4xx_hash.c ****   {
ARM GAS  /tmp/cccCWJpB.s 			page 25


 686:FWLIB/src/stm32f4xx_hash.c ****     /* HASH_IT is reset */
 687:FWLIB/src/stm32f4xx_hash.c ****     bitstatus = RESET;
 703              		.loc 1 687 0
 704 000c 0020     		movs	r0, #0
 705              	.LVL33:
 688:FWLIB/src/stm32f4xx_hash.c ****   }
 689:FWLIB/src/stm32f4xx_hash.c ****   /* Return the HASH_IT status */
 690:FWLIB/src/stm32f4xx_hash.c ****   return bitstatus;
 691:FWLIB/src/stm32f4xx_hash.c **** }
 706              		.loc 1 691 0
 707 000e 7047     		bx	lr
 708              	.LVL34:
 709              	.L74:
 682:FWLIB/src/stm32f4xx_hash.c ****   }
 710              		.loc 1 682 0
 711 0010 0120     		movs	r0, #1
 712              	.LVL35:
 713 0012 7047     		bx	lr
 714              	.L76:
 715              		.align	2
 716              	.L75:
 717 0014 00040650 		.word	1342571520
 718              		.cfi_endproc
 719              	.LFE139:
 721              		.section	.text.HASH_ClearITPendingBit,"ax",%progbits
 722              		.align	1
 723              		.global	HASH_ClearITPendingBit
 724              		.syntax unified
 725              		.thumb
 726              		.thumb_func
 727              		.fpu fpv4-sp-d16
 729              	HASH_ClearITPendingBit:
 730              	.LFB140:
 692:FWLIB/src/stm32f4xx_hash.c **** 
 693:FWLIB/src/stm32f4xx_hash.c **** /**
 694:FWLIB/src/stm32f4xx_hash.c ****   * @brief  Clears the HASH interrupt pending bit(s).
 695:FWLIB/src/stm32f4xx_hash.c ****   * @param  HASH_IT: specifies the HASH interrupt pending bit(s) to clear.
 696:FWLIB/src/stm32f4xx_hash.c ****   *          This parameter can be any combination of the following values:
 697:FWLIB/src/stm32f4xx_hash.c ****   *            @arg HASH_IT_DINI: Data Input interrupt
 698:FWLIB/src/stm32f4xx_hash.c ****   *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
 699:FWLIB/src/stm32f4xx_hash.c ****   * @retval None
 700:FWLIB/src/stm32f4xx_hash.c ****   */
 701:FWLIB/src/stm32f4xx_hash.c **** void HASH_ClearITPendingBit(uint32_t HASH_IT)
 702:FWLIB/src/stm32f4xx_hash.c **** {
 731              		.loc 1 702 0
 732              		.cfi_startproc
 733              		@ args = 0, pretend = 0, frame = 0
 734              		@ frame_needed = 0, uses_anonymous_args = 0
 735              		@ link register save eliminated.
 736              	.LVL36:
 703:FWLIB/src/stm32f4xx_hash.c ****   /* Check the parameters */
 704:FWLIB/src/stm32f4xx_hash.c ****   assert_param(IS_HASH_IT(HASH_IT));
 705:FWLIB/src/stm32f4xx_hash.c **** 
 706:FWLIB/src/stm32f4xx_hash.c ****   /* Clear the selected HASH interrupt pending bit */
 707:FWLIB/src/stm32f4xx_hash.c ****   HASH->SR = (uint32_t)(~HASH_IT);
 737              		.loc 1 707 0
 738 0000 C043     		mvns	r0, r0
ARM GAS  /tmp/cccCWJpB.s 			page 26


 739              	.LVL37:
 740 0002 014B     		ldr	r3, .L78
 741 0004 5862     		str	r0, [r3, #36]
 742 0006 7047     		bx	lr
 743              	.L79:
 744              		.align	2
 745              	.L78:
 746 0008 00040650 		.word	1342571520
 747              		.cfi_endproc
 748              	.LFE140:
 750              		.text
 751              	.Letext0:
 752              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 753              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 754              		.file 4 "F4_CORE/core_cm4.h"
 755              		.file 5 "USER/system_stm32f4xx.h"
 756              		.file 6 "USER/stm32f4xx.h"
 757              		.file 7 "FWLIB/inc/stm32f4xx_hash.h"
 758              		.file 8 "FWLIB/inc/stm32f4xx_rcc.h"
ARM GAS  /tmp/cccCWJpB.s 			page 27


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_hash.c
     /tmp/cccCWJpB.s:18     .text.HASH_DeInit:0000000000000000 $t
     /tmp/cccCWJpB.s:25     .text.HASH_DeInit:0000000000000000 HASH_DeInit
     /tmp/cccCWJpB.s:52     .text.HASH_Init:0000000000000000 $t
     /tmp/cccCWJpB.s:59     .text.HASH_Init:0000000000000000 HASH_Init
     /tmp/cccCWJpB.s:125    .text.HASH_Init:000000000000004c $d
     /tmp/cccCWJpB.s:130    .text.HASH_StructInit:0000000000000000 $t
     /tmp/cccCWJpB.s:137    .text.HASH_StructInit:0000000000000000 HASH_StructInit
     /tmp/cccCWJpB.s:159    .text.HASH_Reset:0000000000000000 $t
     /tmp/cccCWJpB.s:166    .text.HASH_Reset:0000000000000000 HASH_Reset
     /tmp/cccCWJpB.s:182    .text.HASH_Reset:000000000000000c $d
     /tmp/cccCWJpB.s:187    .text.HASH_SetLastWordValidBitsNbr:0000000000000000 $t
     /tmp/cccCWJpB.s:194    .text.HASH_SetLastWordValidBitsNbr:0000000000000000 HASH_SetLastWordValidBitsNbr
     /tmp/cccCWJpB.s:216    .text.HASH_SetLastWordValidBitsNbr:0000000000000014 $d
     /tmp/cccCWJpB.s:221    .text.HASH_DataIn:0000000000000000 $t
     /tmp/cccCWJpB.s:228    .text.HASH_DataIn:0000000000000000 HASH_DataIn
     /tmp/cccCWJpB.s:243    .text.HASH_DataIn:0000000000000008 $d
     /tmp/cccCWJpB.s:248    .text.HASH_GetInFIFOWordsNbr:0000000000000000 $t
     /tmp/cccCWJpB.s:255    .text.HASH_GetInFIFOWordsNbr:0000000000000000 HASH_GetInFIFOWordsNbr
     /tmp/cccCWJpB.s:271    .text.HASH_GetInFIFOWordsNbr:000000000000000c $d
     /tmp/cccCWJpB.s:276    .text.HASH_GetDigest:0000000000000000 $t
     /tmp/cccCWJpB.s:283    .text.HASH_GetDigest:0000000000000000 HASH_GetDigest
     /tmp/cccCWJpB.s:321    .text.HASH_GetDigest:0000000000000028 $d
     /tmp/cccCWJpB.s:327    .text.HASH_StartDigest:0000000000000000 $t
     /tmp/cccCWJpB.s:334    .text.HASH_StartDigest:0000000000000000 HASH_StartDigest
     /tmp/cccCWJpB.s:350    .text.HASH_StartDigest:000000000000000c $d
     /tmp/cccCWJpB.s:355    .text.HASH_SaveContext:0000000000000000 $t
     /tmp/cccCWJpB.s:362    .text.HASH_SaveContext:0000000000000000 HASH_SaveContext
     /tmp/cccCWJpB.s:406    .text.HASH_SaveContext:0000000000000030 $d
     /tmp/cccCWJpB.s:411    .text.HASH_RestoreContext:0000000000000000 $t
     /tmp/cccCWJpB.s:418    .text.HASH_RestoreContext:0000000000000000 HASH_RestoreContext
     /tmp/cccCWJpB.s:476    .text.HASH_RestoreContext:0000000000000040 $d
     /tmp/cccCWJpB.s:481    .text.HASH_AutoStartDigest:0000000000000000 $t
     /tmp/cccCWJpB.s:488    .text.HASH_AutoStartDigest:0000000000000000 HASH_AutoStartDigest
     /tmp/cccCWJpB.s:514    .text.HASH_AutoStartDigest:000000000000001c $d
     /tmp/cccCWJpB.s:519    .text.HASH_DMACmd:0000000000000000 $t
     /tmp/cccCWJpB.s:526    .text.HASH_DMACmd:0000000000000000 HASH_DMACmd
     /tmp/cccCWJpB.s:552    .text.HASH_DMACmd:000000000000001c $d
     /tmp/cccCWJpB.s:557    .text.HASH_ITConfig:0000000000000000 $t
     /tmp/cccCWJpB.s:564    .text.HASH_ITConfig:0000000000000000 HASH_ITConfig
     /tmp/cccCWJpB.s:593    .text.HASH_ITConfig:0000000000000018 $d
     /tmp/cccCWJpB.s:598    .text.HASH_GetFlagStatus:0000000000000000 $t
     /tmp/cccCWJpB.s:605    .text.HASH_GetFlagStatus:0000000000000000 HASH_GetFlagStatus
     /tmp/cccCWJpB.s:644    .text.HASH_GetFlagStatus:000000000000001c $d
     /tmp/cccCWJpB.s:649    .text.HASH_ClearFlag:0000000000000000 $t
     /tmp/cccCWJpB.s:656    .text.HASH_ClearFlag:0000000000000000 HASH_ClearFlag
     /tmp/cccCWJpB.s:673    .text.HASH_ClearFlag:0000000000000008 $d
     /tmp/cccCWJpB.s:678    .text.HASH_GetITStatus:0000000000000000 $t
     /tmp/cccCWJpB.s:685    .text.HASH_GetITStatus:0000000000000000 HASH_GetITStatus
     /tmp/cccCWJpB.s:717    .text.HASH_GetITStatus:0000000000000014 $d
     /tmp/cccCWJpB.s:722    .text.HASH_ClearITPendingBit:0000000000000000 $t
     /tmp/cccCWJpB.s:729    .text.HASH_ClearITPendingBit:0000000000000000 HASH_ClearITPendingBit
     /tmp/cccCWJpB.s:746    .text.HASH_ClearITPendingBit:0000000000000008 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
ARM GAS  /tmp/cccCWJpB.s 			page 28


RCC_AHB2PeriphResetCmd
