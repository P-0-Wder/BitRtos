ARM GAS  /tmp/cce2r3br.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_wwdg.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.WWDG_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	WWDG_DeInit
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	WWDG_DeInit:
  26              	.LFB123:
  27              		.file 1 "FWLIB/src/stm32f4xx_wwdg.c"
   1:FWLIB/src/stm32f4xx_wwdg.c **** /**
   2:FWLIB/src/stm32f4xx_wwdg.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_wwdg.c ****   * @file    stm32f4xx_wwdg.c
   4:FWLIB/src/stm32f4xx_wwdg.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_wwdg.c ****   * @version V1.8.0
   6:FWLIB/src/stm32f4xx_wwdg.c ****   * @date    04-November-2016
   7:FWLIB/src/stm32f4xx_wwdg.c ****   * @brief   This file provides firmware functions to manage the following 
   8:FWLIB/src/stm32f4xx_wwdg.c ****   *          functionalities of the Window watchdog (WWDG) peripheral:           
   9:FWLIB/src/stm32f4xx_wwdg.c ****   *           + Prescaler, Refresh window and Counter configuration
  10:FWLIB/src/stm32f4xx_wwdg.c ****   *           + WWDG activation
  11:FWLIB/src/stm32f4xx_wwdg.c ****   *           + Interrupts and flags management
  12:FWLIB/src/stm32f4xx_wwdg.c ****   *             
  13:FWLIB/src/stm32f4xx_wwdg.c ****  @verbatim    
  14:FWLIB/src/stm32f4xx_wwdg.c ****  ===============================================================================
  15:FWLIB/src/stm32f4xx_wwdg.c ****                            ##### WWDG features #####
  16:FWLIB/src/stm32f4xx_wwdg.c ****  ===============================================================================
  17:FWLIB/src/stm32f4xx_wwdg.c ****     [..]                                      
  18:FWLIB/src/stm32f4xx_wwdg.c ****         Once enabled the WWDG generates a system reset on expiry of a programmed
  19:FWLIB/src/stm32f4xx_wwdg.c ****         time period, unless the program refreshes the counter (downcounter) 
  20:FWLIB/src/stm32f4xx_wwdg.c ****         before to reach 0x3F value (i.e. a reset is generated when the counter
  21:FWLIB/src/stm32f4xx_wwdg.c ****         value rolls over from 0x40 to 0x3F). 
  22:FWLIB/src/stm32f4xx_wwdg.c ****         An MCU reset is also generated if the counter value is refreshed
  23:FWLIB/src/stm32f4xx_wwdg.c ****         before the counter has reached the refresh window value. This 
  24:FWLIB/src/stm32f4xx_wwdg.c ****         implies that the counter must be refreshed in a limited window.
  25:FWLIB/src/stm32f4xx_wwdg.c ****               
  26:FWLIB/src/stm32f4xx_wwdg.c ****         Once enabled the WWDG cannot be disabled except by a system reset.
  27:FWLIB/src/stm32f4xx_wwdg.c ****           
  28:FWLIB/src/stm32f4xx_wwdg.c ****         WWDGRST flag in RCC_CSR register can be used to inform when a WWDG
  29:FWLIB/src/stm32f4xx_wwdg.c ****         reset occurs.
  30:FWLIB/src/stm32f4xx_wwdg.c ****              
  31:FWLIB/src/stm32f4xx_wwdg.c ****         The WWDG counter input clock is derived from the APB clock divided 
ARM GAS  /tmp/cce2r3br.s 			page 2


  32:FWLIB/src/stm32f4xx_wwdg.c ****         by a programmable prescaler.
  33:FWLIB/src/stm32f4xx_wwdg.c ****                 
  34:FWLIB/src/stm32f4xx_wwdg.c ****         WWDG counter clock = PCLK1 / Prescaler
  35:FWLIB/src/stm32f4xx_wwdg.c ****         WWDG timeout = (WWDG counter clock) * (counter value)
  36:FWLIB/src/stm32f4xx_wwdg.c ****                        
  37:FWLIB/src/stm32f4xx_wwdg.c ****         Min-max timeout value @42 MHz(PCLK1): ~97.5 us / ~49.9 ms
  38:FWLIB/src/stm32f4xx_wwdg.c ****                              
  39:FWLIB/src/stm32f4xx_wwdg.c ****                       ##### How to use this driver #####
  40:FWLIB/src/stm32f4xx_wwdg.c ****  ===============================================================================
  41:FWLIB/src/stm32f4xx_wwdg.c ****     [..]
  42:FWLIB/src/stm32f4xx_wwdg.c ****       (#) Enable WWDG clock using RCC_APB1PeriphClockCmd(RCC_APB1Periph_WWDG, ENABLE) function
  43:FWLIB/src/stm32f4xx_wwdg.c ****               
  44:FWLIB/src/stm32f4xx_wwdg.c ****       (#) Configure the WWDG prescaler using WWDG_SetPrescaler() function
  45:FWLIB/src/stm32f4xx_wwdg.c ****                              
  46:FWLIB/src/stm32f4xx_wwdg.c ****       (#) Configure the WWDG refresh window using WWDG_SetWindowValue() function
  47:FWLIB/src/stm32f4xx_wwdg.c ****               
  48:FWLIB/src/stm32f4xx_wwdg.c ****       (#) Set the WWDG counter value and start it using WWDG_Enable() function.
  49:FWLIB/src/stm32f4xx_wwdg.c ****           When the WWDG is enabled the counter value should be configured to 
  50:FWLIB/src/stm32f4xx_wwdg.c ****           a value greater than 0x40 to prevent generating an immediate reset.     
  51:FWLIB/src/stm32f4xx_wwdg.c ****               
  52:FWLIB/src/stm32f4xx_wwdg.c ****       (#) Optionally you can enable the Early wakeup interrupt which is 
  53:FWLIB/src/stm32f4xx_wwdg.c ****           generated when the counter reach 0x40.
  54:FWLIB/src/stm32f4xx_wwdg.c ****           Once enabled this interrupt cannot be disabled except by a system reset.
  55:FWLIB/src/stm32f4xx_wwdg.c ****                   
  56:FWLIB/src/stm32f4xx_wwdg.c ****       (#) Then the application program must refresh the WWDG counter at regular
  57:FWLIB/src/stm32f4xx_wwdg.c ****           intervals during normal operation to prevent an MCU reset, using
  58:FWLIB/src/stm32f4xx_wwdg.c ****           WWDG_SetCounter() function. This operation must occur only when
  59:FWLIB/src/stm32f4xx_wwdg.c ****           the counter value is lower than the refresh window value, 
  60:FWLIB/src/stm32f4xx_wwdg.c ****           programmed using WWDG_SetWindowValue().         
  61:FWLIB/src/stm32f4xx_wwdg.c ****   
  62:FWLIB/src/stm32f4xx_wwdg.c ****     @endverbatim
  63:FWLIB/src/stm32f4xx_wwdg.c ****   ******************************************************************************
  64:FWLIB/src/stm32f4xx_wwdg.c ****   * @attention
  65:FWLIB/src/stm32f4xx_wwdg.c ****   *
  66:FWLIB/src/stm32f4xx_wwdg.c ****   * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
  67:FWLIB/src/stm32f4xx_wwdg.c ****   *
  68:FWLIB/src/stm32f4xx_wwdg.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  69:FWLIB/src/stm32f4xx_wwdg.c ****   * You may not use this file except in compliance with the License.
  70:FWLIB/src/stm32f4xx_wwdg.c ****   * You may obtain a copy of the License at:
  71:FWLIB/src/stm32f4xx_wwdg.c ****   *
  72:FWLIB/src/stm32f4xx_wwdg.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  73:FWLIB/src/stm32f4xx_wwdg.c ****   *
  74:FWLIB/src/stm32f4xx_wwdg.c ****   * Unless required by applicable law or agreed to in writing, software 
  75:FWLIB/src/stm32f4xx_wwdg.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  76:FWLIB/src/stm32f4xx_wwdg.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  77:FWLIB/src/stm32f4xx_wwdg.c ****   * See the License for the specific language governing permissions and
  78:FWLIB/src/stm32f4xx_wwdg.c ****   * limitations under the License.
  79:FWLIB/src/stm32f4xx_wwdg.c ****   *
  80:FWLIB/src/stm32f4xx_wwdg.c ****   ******************************************************************************
  81:FWLIB/src/stm32f4xx_wwdg.c ****   */
  82:FWLIB/src/stm32f4xx_wwdg.c **** 
  83:FWLIB/src/stm32f4xx_wwdg.c **** /* Includes ------------------------------------------------------------------*/
  84:FWLIB/src/stm32f4xx_wwdg.c **** #include "stm32f4xx_wwdg.h"
  85:FWLIB/src/stm32f4xx_wwdg.c **** #include "stm32f4xx_rcc.h"
  86:FWLIB/src/stm32f4xx_wwdg.c **** 
  87:FWLIB/src/stm32f4xx_wwdg.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  88:FWLIB/src/stm32f4xx_wwdg.c ****   * @{
ARM GAS  /tmp/cce2r3br.s 			page 3


  89:FWLIB/src/stm32f4xx_wwdg.c ****   */
  90:FWLIB/src/stm32f4xx_wwdg.c **** 
  91:FWLIB/src/stm32f4xx_wwdg.c **** /** @defgroup WWDG 
  92:FWLIB/src/stm32f4xx_wwdg.c ****   * @brief WWDG driver modules
  93:FWLIB/src/stm32f4xx_wwdg.c ****   * @{
  94:FWLIB/src/stm32f4xx_wwdg.c ****   */
  95:FWLIB/src/stm32f4xx_wwdg.c **** 
  96:FWLIB/src/stm32f4xx_wwdg.c **** /* Private typedef -----------------------------------------------------------*/
  97:FWLIB/src/stm32f4xx_wwdg.c **** /* Private define ------------------------------------------------------------*/
  98:FWLIB/src/stm32f4xx_wwdg.c **** 
  99:FWLIB/src/stm32f4xx_wwdg.c **** /* ----------- WWDG registers bit address in the alias region ----------- */
 100:FWLIB/src/stm32f4xx_wwdg.c **** #define WWDG_OFFSET       (WWDG_BASE - PERIPH_BASE)
 101:FWLIB/src/stm32f4xx_wwdg.c **** /* Alias word address of EWI bit */
 102:FWLIB/src/stm32f4xx_wwdg.c **** #define CFR_OFFSET        (WWDG_OFFSET + 0x04)
 103:FWLIB/src/stm32f4xx_wwdg.c **** #define EWI_BitNumber     0x09
 104:FWLIB/src/stm32f4xx_wwdg.c **** #define CFR_EWI_BB        (PERIPH_BB_BASE + (CFR_OFFSET * 32) + (EWI_BitNumber * 4))
 105:FWLIB/src/stm32f4xx_wwdg.c **** 
 106:FWLIB/src/stm32f4xx_wwdg.c **** /* --------------------- WWDG registers bit mask ------------------------ */
 107:FWLIB/src/stm32f4xx_wwdg.c **** /* CFR register bit mask */
 108:FWLIB/src/stm32f4xx_wwdg.c **** #define CFR_WDGTB_MASK    ((uint32_t)0xFFFFFE7F)
 109:FWLIB/src/stm32f4xx_wwdg.c **** #define CFR_W_MASK        ((uint32_t)0xFFFFFF80)
 110:FWLIB/src/stm32f4xx_wwdg.c **** #define BIT_MASK          ((uint8_t)0x7F)
 111:FWLIB/src/stm32f4xx_wwdg.c **** 
 112:FWLIB/src/stm32f4xx_wwdg.c **** /* Private macro -------------------------------------------------------------*/
 113:FWLIB/src/stm32f4xx_wwdg.c **** /* Private variables ---------------------------------------------------------*/
 114:FWLIB/src/stm32f4xx_wwdg.c **** /* Private function prototypes -----------------------------------------------*/
 115:FWLIB/src/stm32f4xx_wwdg.c **** /* Private functions ---------------------------------------------------------*/
 116:FWLIB/src/stm32f4xx_wwdg.c **** 
 117:FWLIB/src/stm32f4xx_wwdg.c **** /** @defgroup WWDG_Private_Functions
 118:FWLIB/src/stm32f4xx_wwdg.c ****   * @{
 119:FWLIB/src/stm32f4xx_wwdg.c ****   */
 120:FWLIB/src/stm32f4xx_wwdg.c **** 
 121:FWLIB/src/stm32f4xx_wwdg.c **** /** @defgroup WWDG_Group1 Prescaler, Refresh window and Counter configuration functions
 122:FWLIB/src/stm32f4xx_wwdg.c ****  *  @brief   Prescaler, Refresh window and Counter configuration functions 
 123:FWLIB/src/stm32f4xx_wwdg.c ****  *
 124:FWLIB/src/stm32f4xx_wwdg.c **** @verbatim   
 125:FWLIB/src/stm32f4xx_wwdg.c ****  ===============================================================================
 126:FWLIB/src/stm32f4xx_wwdg.c ****     ##### Prescaler, Refresh window and Counter configuration functions #####
 127:FWLIB/src/stm32f4xx_wwdg.c ****  ===============================================================================  
 128:FWLIB/src/stm32f4xx_wwdg.c **** 
 129:FWLIB/src/stm32f4xx_wwdg.c **** @endverbatim
 130:FWLIB/src/stm32f4xx_wwdg.c ****   * @{
 131:FWLIB/src/stm32f4xx_wwdg.c ****   */
 132:FWLIB/src/stm32f4xx_wwdg.c **** 
 133:FWLIB/src/stm32f4xx_wwdg.c **** /**
 134:FWLIB/src/stm32f4xx_wwdg.c ****   * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
 135:FWLIB/src/stm32f4xx_wwdg.c ****   * @param  None
 136:FWLIB/src/stm32f4xx_wwdg.c ****   * @retval None
 137:FWLIB/src/stm32f4xx_wwdg.c ****   */
 138:FWLIB/src/stm32f4xx_wwdg.c **** void WWDG_DeInit(void)
 139:FWLIB/src/stm32f4xx_wwdg.c **** {
  28              		.loc 1 139 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 08B5     		push	{r3, lr}
  33              	.LCFI0:
ARM GAS  /tmp/cce2r3br.s 			page 4


  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
 140:FWLIB/src/stm32f4xx_wwdg.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
  37              		.loc 1 140 0
  38 0002 0121     		movs	r1, #1
  39 0004 4FF40060 		mov	r0, #2048
  40 0008 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  41              	.LVL0:
 141:FWLIB/src/stm32f4xx_wwdg.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
  42              		.loc 1 141 0
  43 000c 0021     		movs	r1, #0
  44 000e 4FF40060 		mov	r0, #2048
  45 0012 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  46              	.LVL1:
  47 0016 08BD     		pop	{r3, pc}
  48              		.cfi_endproc
  49              	.LFE123:
  51              		.section	.text.WWDG_SetPrescaler,"ax",%progbits
  52              		.align	1
  53              		.global	WWDG_SetPrescaler
  54              		.syntax unified
  55              		.thumb
  56              		.thumb_func
  57              		.fpu fpv4-sp-d16
  59              	WWDG_SetPrescaler:
  60              	.LFB124:
 142:FWLIB/src/stm32f4xx_wwdg.c **** }
 143:FWLIB/src/stm32f4xx_wwdg.c **** 
 144:FWLIB/src/stm32f4xx_wwdg.c **** /**
 145:FWLIB/src/stm32f4xx_wwdg.c ****   * @brief  Sets the WWDG Prescaler.
 146:FWLIB/src/stm32f4xx_wwdg.c ****   * @param  WWDG_Prescaler: specifies the WWDG Prescaler.
 147:FWLIB/src/stm32f4xx_wwdg.c ****   *   This parameter can be one of the following values:
 148:FWLIB/src/stm32f4xx_wwdg.c ****   *     @arg WWDG_Prescaler_1: WWDG counter clock = (PCLK1/4096)/1
 149:FWLIB/src/stm32f4xx_wwdg.c ****   *     @arg WWDG_Prescaler_2: WWDG counter clock = (PCLK1/4096)/2
 150:FWLIB/src/stm32f4xx_wwdg.c ****   *     @arg WWDG_Prescaler_4: WWDG counter clock = (PCLK1/4096)/4
 151:FWLIB/src/stm32f4xx_wwdg.c ****   *     @arg WWDG_Prescaler_8: WWDG counter clock = (PCLK1/4096)/8
 152:FWLIB/src/stm32f4xx_wwdg.c ****   * @retval None
 153:FWLIB/src/stm32f4xx_wwdg.c ****   */
 154:FWLIB/src/stm32f4xx_wwdg.c **** void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
 155:FWLIB/src/stm32f4xx_wwdg.c **** {
  61              		.loc 1 155 0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 0
  64              		@ frame_needed = 0, uses_anonymous_args = 0
  65              		@ link register save eliminated.
  66              	.LVL2:
 156:FWLIB/src/stm32f4xx_wwdg.c ****   uint32_t tmpreg = 0;
 157:FWLIB/src/stm32f4xx_wwdg.c ****   /* Check the parameters */
 158:FWLIB/src/stm32f4xx_wwdg.c ****   assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
 159:FWLIB/src/stm32f4xx_wwdg.c ****   /* Clear WDGTB[1:0] bits */
 160:FWLIB/src/stm32f4xx_wwdg.c ****   tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
  67              		.loc 1 160 0
  68 0000 034A     		ldr	r2, .L4
  69 0002 5368     		ldr	r3, [r2, #4]
  70 0004 23F4C073 		bic	r3, r3, #384
  71              	.LVL3:
ARM GAS  /tmp/cce2r3br.s 			page 5


 161:FWLIB/src/stm32f4xx_wwdg.c ****   /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
 162:FWLIB/src/stm32f4xx_wwdg.c ****   tmpreg |= WWDG_Prescaler;
  72              		.loc 1 162 0
  73 0008 1843     		orrs	r0, r0, r3
  74              	.LVL4:
 163:FWLIB/src/stm32f4xx_wwdg.c ****   /* Store the new value */
 164:FWLIB/src/stm32f4xx_wwdg.c ****   WWDG->CFR = tmpreg;
  75              		.loc 1 164 0
  76 000a 5060     		str	r0, [r2, #4]
  77 000c 7047     		bx	lr
  78              	.L5:
  79 000e 00BF     		.align	2
  80              	.L4:
  81 0010 002C0040 		.word	1073753088
  82              		.cfi_endproc
  83              	.LFE124:
  85              		.section	.text.WWDG_SetWindowValue,"ax",%progbits
  86              		.align	1
  87              		.global	WWDG_SetWindowValue
  88              		.syntax unified
  89              		.thumb
  90              		.thumb_func
  91              		.fpu fpv4-sp-d16
  93              	WWDG_SetWindowValue:
  94              	.LFB125:
 165:FWLIB/src/stm32f4xx_wwdg.c **** }
 166:FWLIB/src/stm32f4xx_wwdg.c **** 
 167:FWLIB/src/stm32f4xx_wwdg.c **** /**
 168:FWLIB/src/stm32f4xx_wwdg.c ****   * @brief  Sets the WWDG window value.
 169:FWLIB/src/stm32f4xx_wwdg.c ****   * @param  WindowValue: specifies the window value to be compared to the downcounter.
 170:FWLIB/src/stm32f4xx_wwdg.c ****   *   This parameter value must be lower than 0x80.
 171:FWLIB/src/stm32f4xx_wwdg.c ****   * @retval None
 172:FWLIB/src/stm32f4xx_wwdg.c ****   */
 173:FWLIB/src/stm32f4xx_wwdg.c **** void WWDG_SetWindowValue(uint8_t WindowValue)
 174:FWLIB/src/stm32f4xx_wwdg.c **** {
  95              		.loc 1 174 0
  96              		.cfi_startproc
  97              		@ args = 0, pretend = 0, frame = 8
  98              		@ frame_needed = 0, uses_anonymous_args = 0
  99              		@ link register save eliminated.
 100              	.LVL5:
 101 0000 82B0     		sub	sp, sp, #8
 102              	.LCFI1:
 103              		.cfi_def_cfa_offset 8
 175:FWLIB/src/stm32f4xx_wwdg.c ****   __IO uint32_t tmpreg = 0;
 104              		.loc 1 175 0
 105 0002 0023     		movs	r3, #0
 106 0004 0193     		str	r3, [sp, #4]
 176:FWLIB/src/stm32f4xx_wwdg.c **** 
 177:FWLIB/src/stm32f4xx_wwdg.c ****   /* Check the parameters */
 178:FWLIB/src/stm32f4xx_wwdg.c ****   assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
 179:FWLIB/src/stm32f4xx_wwdg.c ****   /* Clear W[6:0] bits */
 180:FWLIB/src/stm32f4xx_wwdg.c **** 
 181:FWLIB/src/stm32f4xx_wwdg.c ****   tmpreg = WWDG->CFR & CFR_W_MASK;
 107              		.loc 1 181 0
 108 0006 074A     		ldr	r2, .L8
 109 0008 5368     		ldr	r3, [r2, #4]
ARM GAS  /tmp/cce2r3br.s 			page 6


 110 000a 23F07F03 		bic	r3, r3, #127
 111 000e 0193     		str	r3, [sp, #4]
 182:FWLIB/src/stm32f4xx_wwdg.c **** 
 183:FWLIB/src/stm32f4xx_wwdg.c ****   /* Set W[6:0] bits according to WindowValue value */
 184:FWLIB/src/stm32f4xx_wwdg.c ****   tmpreg |= WindowValue & (uint32_t) BIT_MASK;
 112              		.loc 1 184 0
 113 0010 00F07F00 		and	r0, r0, #127
 114              	.LVL6:
 115 0014 019B     		ldr	r3, [sp, #4]
 116 0016 1843     		orrs	r0, r0, r3
 117 0018 0190     		str	r0, [sp, #4]
 185:FWLIB/src/stm32f4xx_wwdg.c **** 
 186:FWLIB/src/stm32f4xx_wwdg.c ****   /* Store the new value */
 187:FWLIB/src/stm32f4xx_wwdg.c ****   WWDG->CFR = tmpreg;
 118              		.loc 1 187 0
 119 001a 019B     		ldr	r3, [sp, #4]
 120 001c 5360     		str	r3, [r2, #4]
 188:FWLIB/src/stm32f4xx_wwdg.c **** }
 121              		.loc 1 188 0
 122 001e 02B0     		add	sp, sp, #8
 123              	.LCFI2:
 124              		.cfi_def_cfa_offset 0
 125              		@ sp needed
 126 0020 7047     		bx	lr
 127              	.L9:
 128 0022 00BF     		.align	2
 129              	.L8:
 130 0024 002C0040 		.word	1073753088
 131              		.cfi_endproc
 132              	.LFE125:
 134              		.section	.text.WWDG_EnableIT,"ax",%progbits
 135              		.align	1
 136              		.global	WWDG_EnableIT
 137              		.syntax unified
 138              		.thumb
 139              		.thumb_func
 140              		.fpu fpv4-sp-d16
 142              	WWDG_EnableIT:
 143              	.LFB126:
 189:FWLIB/src/stm32f4xx_wwdg.c **** 
 190:FWLIB/src/stm32f4xx_wwdg.c **** /**
 191:FWLIB/src/stm32f4xx_wwdg.c ****   * @brief  Enables the WWDG Early Wakeup interrupt(EWI).
 192:FWLIB/src/stm32f4xx_wwdg.c ****   * @note   Once enabled this interrupt cannot be disabled except by a system reset.
 193:FWLIB/src/stm32f4xx_wwdg.c ****   * @param  None
 194:FWLIB/src/stm32f4xx_wwdg.c ****   * @retval None
 195:FWLIB/src/stm32f4xx_wwdg.c ****   */
 196:FWLIB/src/stm32f4xx_wwdg.c **** void WWDG_EnableIT(void)
 197:FWLIB/src/stm32f4xx_wwdg.c **** {
 144              		.loc 1 197 0
 145              		.cfi_startproc
 146              		@ args = 0, pretend = 0, frame = 0
 147              		@ frame_needed = 0, uses_anonymous_args = 0
 148              		@ link register save eliminated.
 198:FWLIB/src/stm32f4xx_wwdg.c ****   *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
 149              		.loc 1 198 0
 150 0000 0122     		movs	r2, #1
 151 0002 014B     		ldr	r3, .L11
ARM GAS  /tmp/cce2r3br.s 			page 7


 152 0004 1A60     		str	r2, [r3]
 153 0006 7047     		bx	lr
 154              	.L12:
 155              		.align	2
 156              	.L11:
 157 0008 A4800542 		.word	1107656868
 158              		.cfi_endproc
 159              	.LFE126:
 161              		.section	.text.WWDG_SetCounter,"ax",%progbits
 162              		.align	1
 163              		.global	WWDG_SetCounter
 164              		.syntax unified
 165              		.thumb
 166              		.thumb_func
 167              		.fpu fpv4-sp-d16
 169              	WWDG_SetCounter:
 170              	.LFB127:
 199:FWLIB/src/stm32f4xx_wwdg.c **** }
 200:FWLIB/src/stm32f4xx_wwdg.c **** 
 201:FWLIB/src/stm32f4xx_wwdg.c **** /**
 202:FWLIB/src/stm32f4xx_wwdg.c ****   * @brief  Sets the WWDG counter value.
 203:FWLIB/src/stm32f4xx_wwdg.c ****   * @param  Counter: specifies the watchdog counter value.
 204:FWLIB/src/stm32f4xx_wwdg.c ****   *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
 205:FWLIB/src/stm32f4xx_wwdg.c ****   *   an immediate reset) 
 206:FWLIB/src/stm32f4xx_wwdg.c ****   * @retval None
 207:FWLIB/src/stm32f4xx_wwdg.c ****   */
 208:FWLIB/src/stm32f4xx_wwdg.c **** void WWDG_SetCounter(uint8_t Counter)
 209:FWLIB/src/stm32f4xx_wwdg.c **** {
 171              		.loc 1 209 0
 172              		.cfi_startproc
 173              		@ args = 0, pretend = 0, frame = 0
 174              		@ frame_needed = 0, uses_anonymous_args = 0
 175              		@ link register save eliminated.
 176              	.LVL7:
 210:FWLIB/src/stm32f4xx_wwdg.c ****   /* Check the parameters */
 211:FWLIB/src/stm32f4xx_wwdg.c ****   assert_param(IS_WWDG_COUNTER(Counter));
 212:FWLIB/src/stm32f4xx_wwdg.c ****   /* Write to T[6:0] bits to configure the counter value, no need to do
 213:FWLIB/src/stm32f4xx_wwdg.c ****      a read-modify-write; writing a 0 to WDGA bit does nothing */
 214:FWLIB/src/stm32f4xx_wwdg.c ****   WWDG->CR = Counter & BIT_MASK;
 177              		.loc 1 214 0
 178 0000 00F07F00 		and	r0, r0, #127
 179              	.LVL8:
 180 0004 014B     		ldr	r3, .L14
 181 0006 1860     		str	r0, [r3]
 182 0008 7047     		bx	lr
 183              	.L15:
 184 000a 00BF     		.align	2
 185              	.L14:
 186 000c 002C0040 		.word	1073753088
 187              		.cfi_endproc
 188              	.LFE127:
 190              		.section	.text.WWDG_Enable,"ax",%progbits
 191              		.align	1
 192              		.global	WWDG_Enable
 193              		.syntax unified
 194              		.thumb
 195              		.thumb_func
ARM GAS  /tmp/cce2r3br.s 			page 8


 196              		.fpu fpv4-sp-d16
 198              	WWDG_Enable:
 199              	.LFB128:
 215:FWLIB/src/stm32f4xx_wwdg.c **** }
 216:FWLIB/src/stm32f4xx_wwdg.c **** /**
 217:FWLIB/src/stm32f4xx_wwdg.c ****   * @}
 218:FWLIB/src/stm32f4xx_wwdg.c ****   */
 219:FWLIB/src/stm32f4xx_wwdg.c **** 
 220:FWLIB/src/stm32f4xx_wwdg.c **** /** @defgroup WWDG_Group2 WWDG activation functions
 221:FWLIB/src/stm32f4xx_wwdg.c ****  *  @brief   WWDG activation functions 
 222:FWLIB/src/stm32f4xx_wwdg.c ****  *
 223:FWLIB/src/stm32f4xx_wwdg.c **** @verbatim   
 224:FWLIB/src/stm32f4xx_wwdg.c ****  ===============================================================================
 225:FWLIB/src/stm32f4xx_wwdg.c ****                     ##### WWDG activation function #####
 226:FWLIB/src/stm32f4xx_wwdg.c ****  ===============================================================================  
 227:FWLIB/src/stm32f4xx_wwdg.c **** 
 228:FWLIB/src/stm32f4xx_wwdg.c **** @endverbatim
 229:FWLIB/src/stm32f4xx_wwdg.c ****   * @{
 230:FWLIB/src/stm32f4xx_wwdg.c ****   */
 231:FWLIB/src/stm32f4xx_wwdg.c **** 
 232:FWLIB/src/stm32f4xx_wwdg.c **** /**
 233:FWLIB/src/stm32f4xx_wwdg.c ****   * @brief  Enables WWDG and load the counter value.                  
 234:FWLIB/src/stm32f4xx_wwdg.c ****   * @param  Counter: specifies the watchdog counter value.
 235:FWLIB/src/stm32f4xx_wwdg.c ****   *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
 236:FWLIB/src/stm32f4xx_wwdg.c ****   *   an immediate reset)
 237:FWLIB/src/stm32f4xx_wwdg.c ****   * @retval None
 238:FWLIB/src/stm32f4xx_wwdg.c ****   */
 239:FWLIB/src/stm32f4xx_wwdg.c **** void WWDG_Enable(uint8_t Counter)
 240:FWLIB/src/stm32f4xx_wwdg.c **** {
 200              		.loc 1 240 0
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 0
 203              		@ frame_needed = 0, uses_anonymous_args = 0
 204              		@ link register save eliminated.
 205              	.LVL9:
 241:FWLIB/src/stm32f4xx_wwdg.c ****   /* Check the parameters */
 242:FWLIB/src/stm32f4xx_wwdg.c ****   assert_param(IS_WWDG_COUNTER(Counter));
 243:FWLIB/src/stm32f4xx_wwdg.c ****   WWDG->CR = WWDG_CR_WDGA | Counter;
 206              		.loc 1 243 0
 207 0000 40F08000 		orr	r0, r0, #128
 208              	.LVL10:
 209 0004 014B     		ldr	r3, .L17
 210 0006 1860     		str	r0, [r3]
 211 0008 7047     		bx	lr
 212              	.L18:
 213 000a 00BF     		.align	2
 214              	.L17:
 215 000c 002C0040 		.word	1073753088
 216              		.cfi_endproc
 217              	.LFE128:
 219              		.section	.text.WWDG_GetFlagStatus,"ax",%progbits
 220              		.align	1
 221              		.global	WWDG_GetFlagStatus
 222              		.syntax unified
 223              		.thumb
 224              		.thumb_func
 225              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cce2r3br.s 			page 9


 227              	WWDG_GetFlagStatus:
 228              	.LFB129:
 244:FWLIB/src/stm32f4xx_wwdg.c **** }
 245:FWLIB/src/stm32f4xx_wwdg.c **** /**
 246:FWLIB/src/stm32f4xx_wwdg.c ****   * @}
 247:FWLIB/src/stm32f4xx_wwdg.c ****   */
 248:FWLIB/src/stm32f4xx_wwdg.c **** 
 249:FWLIB/src/stm32f4xx_wwdg.c **** /** @defgroup WWDG_Group3 Interrupts and flags management functions
 250:FWLIB/src/stm32f4xx_wwdg.c ****  *  @brief   Interrupts and flags management functions 
 251:FWLIB/src/stm32f4xx_wwdg.c ****  *
 252:FWLIB/src/stm32f4xx_wwdg.c **** @verbatim   
 253:FWLIB/src/stm32f4xx_wwdg.c ****  ===============================================================================
 254:FWLIB/src/stm32f4xx_wwdg.c ****             ##### Interrupts and flags management functions #####
 255:FWLIB/src/stm32f4xx_wwdg.c ****  ===============================================================================  
 256:FWLIB/src/stm32f4xx_wwdg.c **** 
 257:FWLIB/src/stm32f4xx_wwdg.c **** @endverbatim
 258:FWLIB/src/stm32f4xx_wwdg.c ****   * @{
 259:FWLIB/src/stm32f4xx_wwdg.c ****   */
 260:FWLIB/src/stm32f4xx_wwdg.c **** 
 261:FWLIB/src/stm32f4xx_wwdg.c **** /**
 262:FWLIB/src/stm32f4xx_wwdg.c ****   * @brief  Checks whether the Early Wakeup interrupt flag is set or not.
 263:FWLIB/src/stm32f4xx_wwdg.c ****   * @param  None
 264:FWLIB/src/stm32f4xx_wwdg.c ****   * @retval The new state of the Early Wakeup interrupt flag (SET or RESET)
 265:FWLIB/src/stm32f4xx_wwdg.c ****   */
 266:FWLIB/src/stm32f4xx_wwdg.c **** FlagStatus WWDG_GetFlagStatus(void)
 267:FWLIB/src/stm32f4xx_wwdg.c **** {
 229              		.loc 1 267 0
 230              		.cfi_startproc
 231              		@ args = 0, pretend = 0, frame = 0
 232              		@ frame_needed = 0, uses_anonymous_args = 0
 233              		@ link register save eliminated.
 234              	.LVL11:
 268:FWLIB/src/stm32f4xx_wwdg.c ****   FlagStatus bitstatus = RESET;
 269:FWLIB/src/stm32f4xx_wwdg.c ****     
 270:FWLIB/src/stm32f4xx_wwdg.c ****   if ((WWDG->SR) != (uint32_t)RESET)
 235              		.loc 1 270 0
 236 0000 034B     		ldr	r3, .L23
 237 0002 9B68     		ldr	r3, [r3, #8]
 238 0004 0BB9     		cbnz	r3, .L22
 271:FWLIB/src/stm32f4xx_wwdg.c ****   {
 272:FWLIB/src/stm32f4xx_wwdg.c ****     bitstatus = SET;
 273:FWLIB/src/stm32f4xx_wwdg.c ****   }
 274:FWLIB/src/stm32f4xx_wwdg.c ****   else
 275:FWLIB/src/stm32f4xx_wwdg.c ****   {
 276:FWLIB/src/stm32f4xx_wwdg.c ****     bitstatus = RESET;
 239              		.loc 1 276 0
 240 0006 0020     		movs	r0, #0
 241              	.LVL12:
 277:FWLIB/src/stm32f4xx_wwdg.c ****   }
 278:FWLIB/src/stm32f4xx_wwdg.c ****   return bitstatus;
 279:FWLIB/src/stm32f4xx_wwdg.c **** }
 242              		.loc 1 279 0
 243 0008 7047     		bx	lr
 244              	.LVL13:
 245              	.L22:
 272:FWLIB/src/stm32f4xx_wwdg.c ****   }
 246              		.loc 1 272 0
ARM GAS  /tmp/cce2r3br.s 			page 10


 247 000a 0120     		movs	r0, #1
 248 000c 7047     		bx	lr
 249              	.L24:
 250 000e 00BF     		.align	2
 251              	.L23:
 252 0010 002C0040 		.word	1073753088
 253              		.cfi_endproc
 254              	.LFE129:
 256              		.section	.text.WWDG_ClearFlag,"ax",%progbits
 257              		.align	1
 258              		.global	WWDG_ClearFlag
 259              		.syntax unified
 260              		.thumb
 261              		.thumb_func
 262              		.fpu fpv4-sp-d16
 264              	WWDG_ClearFlag:
 265              	.LFB130:
 280:FWLIB/src/stm32f4xx_wwdg.c **** 
 281:FWLIB/src/stm32f4xx_wwdg.c **** /**
 282:FWLIB/src/stm32f4xx_wwdg.c ****   * @brief  Clears Early Wakeup interrupt flag.
 283:FWLIB/src/stm32f4xx_wwdg.c ****   * @param  None
 284:FWLIB/src/stm32f4xx_wwdg.c ****   * @retval None
 285:FWLIB/src/stm32f4xx_wwdg.c ****   */
 286:FWLIB/src/stm32f4xx_wwdg.c **** void WWDG_ClearFlag(void)
 287:FWLIB/src/stm32f4xx_wwdg.c **** {
 266              		.loc 1 287 0
 267              		.cfi_startproc
 268              		@ args = 0, pretend = 0, frame = 0
 269              		@ frame_needed = 0, uses_anonymous_args = 0
 270              		@ link register save eliminated.
 288:FWLIB/src/stm32f4xx_wwdg.c ****   WWDG->SR = (uint32_t)RESET;
 271              		.loc 1 288 0
 272 0000 0022     		movs	r2, #0
 273 0002 014B     		ldr	r3, .L26
 274 0004 9A60     		str	r2, [r3, #8]
 275 0006 7047     		bx	lr
 276              	.L27:
 277              		.align	2
 278              	.L26:
 279 0008 002C0040 		.word	1073753088
 280              		.cfi_endproc
 281              	.LFE130:
 283              		.text
 284              	.Letext0:
 285              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 286              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 287              		.file 4 "F4_CORE/core_cm4.h"
 288              		.file 5 "USER/system_stm32f4xx.h"
 289              		.file 6 "USER/stm32f4xx.h"
 290              		.file 7 "FWLIB/inc/stm32f4xx_rcc.h"
ARM GAS  /tmp/cce2r3br.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_wwdg.c
     /tmp/cce2r3br.s:18     .text.WWDG_DeInit:0000000000000000 $t
     /tmp/cce2r3br.s:25     .text.WWDG_DeInit:0000000000000000 WWDG_DeInit
     /tmp/cce2r3br.s:52     .text.WWDG_SetPrescaler:0000000000000000 $t
     /tmp/cce2r3br.s:59     .text.WWDG_SetPrescaler:0000000000000000 WWDG_SetPrescaler
     /tmp/cce2r3br.s:81     .text.WWDG_SetPrescaler:0000000000000010 $d
     /tmp/cce2r3br.s:86     .text.WWDG_SetWindowValue:0000000000000000 $t
     /tmp/cce2r3br.s:93     .text.WWDG_SetWindowValue:0000000000000000 WWDG_SetWindowValue
     /tmp/cce2r3br.s:130    .text.WWDG_SetWindowValue:0000000000000024 $d
     /tmp/cce2r3br.s:135    .text.WWDG_EnableIT:0000000000000000 $t
     /tmp/cce2r3br.s:142    .text.WWDG_EnableIT:0000000000000000 WWDG_EnableIT
     /tmp/cce2r3br.s:157    .text.WWDG_EnableIT:0000000000000008 $d
     /tmp/cce2r3br.s:162    .text.WWDG_SetCounter:0000000000000000 $t
     /tmp/cce2r3br.s:169    .text.WWDG_SetCounter:0000000000000000 WWDG_SetCounter
     /tmp/cce2r3br.s:186    .text.WWDG_SetCounter:000000000000000c $d
     /tmp/cce2r3br.s:191    .text.WWDG_Enable:0000000000000000 $t
     /tmp/cce2r3br.s:198    .text.WWDG_Enable:0000000000000000 WWDG_Enable
     /tmp/cce2r3br.s:215    .text.WWDG_Enable:000000000000000c $d
     /tmp/cce2r3br.s:220    .text.WWDG_GetFlagStatus:0000000000000000 $t
     /tmp/cce2r3br.s:227    .text.WWDG_GetFlagStatus:0000000000000000 WWDG_GetFlagStatus
     /tmp/cce2r3br.s:252    .text.WWDG_GetFlagStatus:0000000000000010 $d
     /tmp/cce2r3br.s:257    .text.WWDG_ClearFlag:0000000000000000 $t
     /tmp/cce2r3br.s:264    .text.WWDG_ClearFlag:0000000000000000 WWDG_ClearFlag
     /tmp/cce2r3br.s:279    .text.WWDG_ClearFlag:0000000000000008 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
