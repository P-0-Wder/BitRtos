ARM GAS  /tmp/cc8b35bz.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_dma2d.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.DMA2D_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	DMA2D_DeInit
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	DMA2D_DeInit:
  26              	.LFB123:
  27              		.file 1 "FWLIB/src/stm32f4xx_dma2d.c"
   1:FWLIB/src/stm32f4xx_dma2d.c **** /**
   2:FWLIB/src/stm32f4xx_dma2d.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_dma2d.c ****   * @file    stm32f4xx_dma2d.c
   4:FWLIB/src/stm32f4xx_dma2d.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_dma2d.c ****   * @version V1.8.0
   6:FWLIB/src/stm32f4xx_dma2d.c ****   * @date    04-November-2016
   7:FWLIB/src/stm32f4xx_dma2d.c ****   * @brief   This file provides firmware functions to manage the following 
   8:FWLIB/src/stm32f4xx_dma2d.c ****   *          functionalities of the DMA2D controller (DMA2D) peripheral:
   9:FWLIB/src/stm32f4xx_dma2d.c ****   *           + Initialization and configuration
  10:FWLIB/src/stm32f4xx_dma2d.c ****   *           + Interrupts and flags management
  11:FWLIB/src/stm32f4xx_dma2d.c ****   *           
  12:FWLIB/src/stm32f4xx_dma2d.c ****   @verbatim  
  13:FWLIB/src/stm32f4xx_dma2d.c ****  ===============================================================================
  14:FWLIB/src/stm32f4xx_dma2d.c ****                       ##### How to use this driver #####
  15:FWLIB/src/stm32f4xx_dma2d.c ****  ===============================================================================
  16:FWLIB/src/stm32f4xx_dma2d.c ****     [..]
  17:FWLIB/src/stm32f4xx_dma2d.c ****         (#) Enable DMA2D clock using 
  18:FWLIB/src/stm32f4xx_dma2d.c ****             RCC_APB2PeriphResetCmd(RCC_APB2Periph_DMA2D, ENABLE) function.
  19:FWLIB/src/stm32f4xx_dma2d.c ****             
  20:FWLIB/src/stm32f4xx_dma2d.c ****         (#) Configures DMA2D
  21:FWLIB/src/stm32f4xx_dma2d.c ****           (++) transfer mode 
  22:FWLIB/src/stm32f4xx_dma2d.c ****           (++) pixel format, line_number, pixel_per_line
  23:FWLIB/src/stm32f4xx_dma2d.c ****           (++) output memory address
  24:FWLIB/src/stm32f4xx_dma2d.c ****           (++) alpha value
  25:FWLIB/src/stm32f4xx_dma2d.c ****           (++) output offset
  26:FWLIB/src/stm32f4xx_dma2d.c ****           (++) Default color (RGB)
  27:FWLIB/src/stm32f4xx_dma2d.c ****            
  28:FWLIB/src/stm32f4xx_dma2d.c ****         (#) Configures Foreground or/and background
  29:FWLIB/src/stm32f4xx_dma2d.c ****           (++) memory address
  30:FWLIB/src/stm32f4xx_dma2d.c ****           (++) alpha value
  31:FWLIB/src/stm32f4xx_dma2d.c ****           (++) offset and default color
ARM GAS  /tmp/cc8b35bz.s 			page 2


  32:FWLIB/src/stm32f4xx_dma2d.c ****   
  33:FWLIB/src/stm32f4xx_dma2d.c ****         (#) Call the DMA2D_Start() to enable the DMA2D controller.
  34:FWLIB/src/stm32f4xx_dma2d.c ****         
  35:FWLIB/src/stm32f4xx_dma2d.c ****     @endverbatim
  36:FWLIB/src/stm32f4xx_dma2d.c ****   
  37:FWLIB/src/stm32f4xx_dma2d.c ****   ******************************************************************************
  38:FWLIB/src/stm32f4xx_dma2d.c ****   * @attention
  39:FWLIB/src/stm32f4xx_dma2d.c ****   *
  40:FWLIB/src/stm32f4xx_dma2d.c ****   * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
  41:FWLIB/src/stm32f4xx_dma2d.c ****   *
  42:FWLIB/src/stm32f4xx_dma2d.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  43:FWLIB/src/stm32f4xx_dma2d.c ****   * You may not use this file except in compliance with the License.
  44:FWLIB/src/stm32f4xx_dma2d.c ****   * You may obtain a copy of the License at:
  45:FWLIB/src/stm32f4xx_dma2d.c ****   *
  46:FWLIB/src/stm32f4xx_dma2d.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  47:FWLIB/src/stm32f4xx_dma2d.c ****   *
  48:FWLIB/src/stm32f4xx_dma2d.c ****   * Unless required by applicable law or agreed to in writing, software 
  49:FWLIB/src/stm32f4xx_dma2d.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  50:FWLIB/src/stm32f4xx_dma2d.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  51:FWLIB/src/stm32f4xx_dma2d.c ****   * See the License for the specific language governing permissions and
  52:FWLIB/src/stm32f4xx_dma2d.c ****   * limitations under the License.
  53:FWLIB/src/stm32f4xx_dma2d.c ****   *
  54:FWLIB/src/stm32f4xx_dma2d.c ****   ******************************************************************************
  55:FWLIB/src/stm32f4xx_dma2d.c ****   */ 
  56:FWLIB/src/stm32f4xx_dma2d.c **** 
  57:FWLIB/src/stm32f4xx_dma2d.c **** /* Includes ------------------------------------------------------------------*/
  58:FWLIB/src/stm32f4xx_dma2d.c **** #include "stm32f4xx_dma2d.h"
  59:FWLIB/src/stm32f4xx_dma2d.c **** #include "stm32f4xx_rcc.h"
  60:FWLIB/src/stm32f4xx_dma2d.c **** 
  61:FWLIB/src/stm32f4xx_dma2d.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  62:FWLIB/src/stm32f4xx_dma2d.c ****   * @{
  63:FWLIB/src/stm32f4xx_dma2d.c ****   */
  64:FWLIB/src/stm32f4xx_dma2d.c **** 
  65:FWLIB/src/stm32f4xx_dma2d.c **** /** @defgroup DMA2D 
  66:FWLIB/src/stm32f4xx_dma2d.c ****   * @brief DMA2D driver modules
  67:FWLIB/src/stm32f4xx_dma2d.c ****   * @{
  68:FWLIB/src/stm32f4xx_dma2d.c ****   */
  69:FWLIB/src/stm32f4xx_dma2d.c **** 
  70:FWLIB/src/stm32f4xx_dma2d.c **** /* Private typedef -----------------------------------------------------------*/
  71:FWLIB/src/stm32f4xx_dma2d.c **** /* Private define ------------------------------------------------------------*/
  72:FWLIB/src/stm32f4xx_dma2d.c **** /* Private macro -------------------------------------------------------------*/
  73:FWLIB/src/stm32f4xx_dma2d.c **** /* Private variables ---------------------------------------------------------*/
  74:FWLIB/src/stm32f4xx_dma2d.c **** /* Private function prototypes -----------------------------------------------*/
  75:FWLIB/src/stm32f4xx_dma2d.c **** /* Private functions ---------------------------------------------------------*/
  76:FWLIB/src/stm32f4xx_dma2d.c **** 
  77:FWLIB/src/stm32f4xx_dma2d.c **** #define CR_MASK                     ((uint32_t)0xFFFCE0FC)  /* DMA2D CR Mask */
  78:FWLIB/src/stm32f4xx_dma2d.c **** #define PFCCR_MASK                  ((uint32_t)0x00FC00C0)  /* DMA2D FGPFCCR Mask */
  79:FWLIB/src/stm32f4xx_dma2d.c **** #define DEAD_MASK                   ((uint32_t)0xFFFF00FE)  /* DMA2D DEAD Mask */
  80:FWLIB/src/stm32f4xx_dma2d.c **** 
  81:FWLIB/src/stm32f4xx_dma2d.c **** /** @defgroup DMA2D_Private_Functions
  82:FWLIB/src/stm32f4xx_dma2d.c ****   * @{
  83:FWLIB/src/stm32f4xx_dma2d.c ****   */
  84:FWLIB/src/stm32f4xx_dma2d.c **** 
  85:FWLIB/src/stm32f4xx_dma2d.c **** /** @defgroup DMA2D_Group1 Initialization and Configuration functions
  86:FWLIB/src/stm32f4xx_dma2d.c ****  *  @brief   Initialization and Configuration functions 
  87:FWLIB/src/stm32f4xx_dma2d.c ****  *
  88:FWLIB/src/stm32f4xx_dma2d.c **** @verbatim
ARM GAS  /tmp/cc8b35bz.s 			page 3


  89:FWLIB/src/stm32f4xx_dma2d.c ****  ===============================================================================
  90:FWLIB/src/stm32f4xx_dma2d.c ****             ##### Initialization and Configuration functions #####
  91:FWLIB/src/stm32f4xx_dma2d.c ****  ===============================================================================
  92:FWLIB/src/stm32f4xx_dma2d.c ****     [..]  This section provides functions allowing to:
  93:FWLIB/src/stm32f4xx_dma2d.c ****       (+) Initialize and configure the DMA2D
  94:FWLIB/src/stm32f4xx_dma2d.c ****       (+) Start/Abort/Suspend Transfer
  95:FWLIB/src/stm32f4xx_dma2d.c ****       (+) Initialize, configure and set Foreground and background
  96:FWLIB/src/stm32f4xx_dma2d.c ****       (+) configure and enable DeadTime
  97:FWLIB/src/stm32f4xx_dma2d.c ****       (+) configure lineWatermark
  98:FWLIB/src/stm32f4xx_dma2d.c ****     
  99:FWLIB/src/stm32f4xx_dma2d.c ****     
 100:FWLIB/src/stm32f4xx_dma2d.c **** @endverbatim
 101:FWLIB/src/stm32f4xx_dma2d.c ****   * @{
 102:FWLIB/src/stm32f4xx_dma2d.c ****   */
 103:FWLIB/src/stm32f4xx_dma2d.c **** 
 104:FWLIB/src/stm32f4xx_dma2d.c **** /**
 105:FWLIB/src/stm32f4xx_dma2d.c ****   * @brief  Deinitializes the DMA2D peripheral registers to their default reset
 106:FWLIB/src/stm32f4xx_dma2d.c ****   *         values.
 107:FWLIB/src/stm32f4xx_dma2d.c ****   * @param  None
 108:FWLIB/src/stm32f4xx_dma2d.c ****   * @retval None
 109:FWLIB/src/stm32f4xx_dma2d.c ****   */
 110:FWLIB/src/stm32f4xx_dma2d.c **** 
 111:FWLIB/src/stm32f4xx_dma2d.c **** void DMA2D_DeInit(void)
 112:FWLIB/src/stm32f4xx_dma2d.c **** {
  28              		.loc 1 112 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 08B5     		push	{r3, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
 113:FWLIB/src/stm32f4xx_dma2d.c ****   /* Enable DMA2D reset state */
 114:FWLIB/src/stm32f4xx_dma2d.c ****   RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, ENABLE);
  37              		.loc 1 114 0
  38 0002 0121     		movs	r1, #1
  39 0004 4FF40000 		mov	r0, #8388608
  40 0008 FFF7FEFF 		bl	RCC_AHB1PeriphResetCmd
  41              	.LVL0:
 115:FWLIB/src/stm32f4xx_dma2d.c ****   /* Release DMA2D from reset state */
 116:FWLIB/src/stm32f4xx_dma2d.c ****   RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, DISABLE);
  42              		.loc 1 116 0
  43 000c 0021     		movs	r1, #0
  44 000e 4FF40000 		mov	r0, #8388608
  45 0012 FFF7FEFF 		bl	RCC_AHB1PeriphResetCmd
  46              	.LVL1:
  47 0016 08BD     		pop	{r3, pc}
  48              		.cfi_endproc
  49              	.LFE123:
  51              		.section	.text.DMA2D_Init,"ax",%progbits
  52              		.align	1
  53              		.global	DMA2D_Init
  54              		.syntax unified
  55              		.thumb
  56              		.thumb_func
  57              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cc8b35bz.s 			page 4


  59              	DMA2D_Init:
  60              	.LFB124:
 117:FWLIB/src/stm32f4xx_dma2d.c **** }
 118:FWLIB/src/stm32f4xx_dma2d.c **** 
 119:FWLIB/src/stm32f4xx_dma2d.c **** 
 120:FWLIB/src/stm32f4xx_dma2d.c **** /**
 121:FWLIB/src/stm32f4xx_dma2d.c ****   * @brief  Initializes the DMA2D peripheral according to the specified parameters
 122:FWLIB/src/stm32f4xx_dma2d.c ****   *         in the DMA2D_InitStruct.
 123:FWLIB/src/stm32f4xx_dma2d.c ****   * @note   This function can be used only when the DMA2D is disabled.
 124:FWLIB/src/stm32f4xx_dma2d.c ****   * @param  DMA2D_InitStruct: pointer to a DMA2D_InitTypeDef structure that contains
 125:FWLIB/src/stm32f4xx_dma2d.c ****   *         the configuration information for the specified DMA2D peripheral.
 126:FWLIB/src/stm32f4xx_dma2d.c ****   * @retval None
 127:FWLIB/src/stm32f4xx_dma2d.c ****   */
 128:FWLIB/src/stm32f4xx_dma2d.c **** void DMA2D_Init(DMA2D_InitTypeDef* DMA2D_InitStruct)
 129:FWLIB/src/stm32f4xx_dma2d.c **** {
  61              		.loc 1 129 0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 0
  64              		@ frame_needed = 0, uses_anonymous_args = 0
  65              		@ link register save eliminated.
  66              	.LVL2:
  67 0000 30B4     		push	{r4, r5}
  68              	.LCFI1:
  69              		.cfi_def_cfa_offset 8
  70              		.cfi_offset 4, -8
  71              		.cfi_offset 5, -4
  72              	.LVL3:
 130:FWLIB/src/stm32f4xx_dma2d.c **** 
 131:FWLIB/src/stm32f4xx_dma2d.c ****   uint32_t outgreen = 0;
 132:FWLIB/src/stm32f4xx_dma2d.c ****   uint32_t outred   = 0;
 133:FWLIB/src/stm32f4xx_dma2d.c ****   uint32_t outalpha = 0;
 134:FWLIB/src/stm32f4xx_dma2d.c ****   uint32_t pixline  = 0;
 135:FWLIB/src/stm32f4xx_dma2d.c **** 
 136:FWLIB/src/stm32f4xx_dma2d.c ****   /* Check the parameters */
 137:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_MODE(DMA2D_InitStruct->DMA2D_Mode));
 138:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_CMODE(DMA2D_InitStruct->DMA2D_CMode));
 139:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_OGREEN(DMA2D_InitStruct->DMA2D_OutputGreen));
 140:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_ORED(DMA2D_InitStruct->DMA2D_OutputRed));
 141:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_OBLUE(DMA2D_InitStruct->DMA2D_OutputBlue));
 142:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_OALPHA(DMA2D_InitStruct->DMA2D_OutputAlpha));
 143:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_OUTPUT_OFFSET(DMA2D_InitStruct->DMA2D_OutputOffset));
 144:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_LINE(DMA2D_InitStruct->DMA2D_NumberOfLine));
 145:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_PIXEL(DMA2D_InitStruct->DMA2D_PixelPerLine));
 146:FWLIB/src/stm32f4xx_dma2d.c **** 
 147:FWLIB/src/stm32f4xx_dma2d.c ****   /* Configures the DMA2D operation mode */
 148:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->CR &= (uint32_t)CR_MASK;
  73              		.loc 1 148 0
  74 0002 2E4B     		ldr	r3, .L14
  75 0004 1A68     		ldr	r2, [r3]
  76 0006 22F00312 		bic	r2, r2, #196611
  77 000a 22F4F852 		bic	r2, r2, #7936
  78 000e 1A60     		str	r2, [r3]
 149:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->CR |= (DMA2D_InitStruct->DMA2D_Mode);
  79              		.loc 1 149 0
  80 0010 1A68     		ldr	r2, [r3]
  81 0012 0168     		ldr	r1, [r0]
  82 0014 0A43     		orrs	r2, r2, r1
ARM GAS  /tmp/cc8b35bz.s 			page 5


  83 0016 1A60     		str	r2, [r3]
 150:FWLIB/src/stm32f4xx_dma2d.c **** 
 151:FWLIB/src/stm32f4xx_dma2d.c ****   /* Configures the color mode of the output image */
 152:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->OPFCCR &= ~(uint32_t)DMA2D_OPFCCR_CM;
  84              		.loc 1 152 0
  85 0018 5A6B     		ldr	r2, [r3, #52]
  86 001a 22F00702 		bic	r2, r2, #7
  87 001e 5A63     		str	r2, [r3, #52]
 153:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->OPFCCR |= (DMA2D_InitStruct->DMA2D_CMode);
  88              		.loc 1 153 0
  89 0020 5A6B     		ldr	r2, [r3, #52]
  90 0022 4168     		ldr	r1, [r0, #4]
  91 0024 0A43     		orrs	r2, r2, r1
  92 0026 5A63     		str	r2, [r3, #52]
 154:FWLIB/src/stm32f4xx_dma2d.c **** 
 155:FWLIB/src/stm32f4xx_dma2d.c ****   /* Configures the output color */
 156:FWLIB/src/stm32f4xx_dma2d.c **** 
 157:FWLIB/src/stm32f4xx_dma2d.c ****   if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB8888)
  93              		.loc 1 157 0
  94 0028 4368     		ldr	r3, [r0, #4]
  95 002a 63B1     		cbz	r3, .L10
 158:FWLIB/src/stm32f4xx_dma2d.c ****   {
 159:FWLIB/src/stm32f4xx_dma2d.c ****     outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
 160:FWLIB/src/stm32f4xx_dma2d.c ****     outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
 161:FWLIB/src/stm32f4xx_dma2d.c ****     outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 24;
 162:FWLIB/src/stm32f4xx_dma2d.c ****   }
 163:FWLIB/src/stm32f4xx_dma2d.c ****   else
 164:FWLIB/src/stm32f4xx_dma2d.c ****   
 165:FWLIB/src/stm32f4xx_dma2d.c ****     if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_RGB888)
  96              		.loc 1 165 0
  97 002c 012B     		cmp	r3, #1
  98 002e 31D0     		beq	.L11
 166:FWLIB/src/stm32f4xx_dma2d.c ****     {
 167:FWLIB/src/stm32f4xx_dma2d.c ****       outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
 168:FWLIB/src/stm32f4xx_dma2d.c ****       outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
 169:FWLIB/src/stm32f4xx_dma2d.c ****       outalpha = (uint32_t)0x00000000;
 170:FWLIB/src/stm32f4xx_dma2d.c ****     }
 171:FWLIB/src/stm32f4xx_dma2d.c ****      
 172:FWLIB/src/stm32f4xx_dma2d.c ****   else
 173:FWLIB/src/stm32f4xx_dma2d.c **** 
 174:FWLIB/src/stm32f4xx_dma2d.c ****     if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_RGB565)
  99              		.loc 1 174 0
 100 0030 022B     		cmp	r3, #2
 101 0032 35D0     		beq	.L12
 175:FWLIB/src/stm32f4xx_dma2d.c ****     {
 176:FWLIB/src/stm32f4xx_dma2d.c ****       outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 5;
 177:FWLIB/src/stm32f4xx_dma2d.c ****       outred = DMA2D_InitStruct->DMA2D_OutputRed << 11;
 178:FWLIB/src/stm32f4xx_dma2d.c ****       outalpha = (uint32_t)0x00000000;
 179:FWLIB/src/stm32f4xx_dma2d.c ****     }
 180:FWLIB/src/stm32f4xx_dma2d.c **** 
 181:FWLIB/src/stm32f4xx_dma2d.c ****   else
 182:FWLIB/src/stm32f4xx_dma2d.c **** 
 183:FWLIB/src/stm32f4xx_dma2d.c ****     if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB1555)
 102              		.loc 1 183 0
 103 0034 032B     		cmp	r3, #3
 104 0036 39D0     		beq	.L13
 184:FWLIB/src/stm32f4xx_dma2d.c ****     {  
ARM GAS  /tmp/cc8b35bz.s 			page 6


 185:FWLIB/src/stm32f4xx_dma2d.c ****       outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 5;
 186:FWLIB/src/stm32f4xx_dma2d.c ****       outred = DMA2D_InitStruct->DMA2D_OutputRed << 10;
 187:FWLIB/src/stm32f4xx_dma2d.c ****       outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 15;
 188:FWLIB/src/stm32f4xx_dma2d.c ****     }
 189:FWLIB/src/stm32f4xx_dma2d.c **** 
 190:FWLIB/src/stm32f4xx_dma2d.c ****   else /* DMA2D_CMode = DMA2D_ARGB4444 */
 191:FWLIB/src/stm32f4xx_dma2d.c ****   {
 192:FWLIB/src/stm32f4xx_dma2d.c ****     outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 4;
 105              		.loc 1 192 0
 106 0038 C268     		ldr	r2, [r0, #12]
 107 003a 1201     		lsls	r2, r2, #4
 108              	.LVL4:
 193:FWLIB/src/stm32f4xx_dma2d.c ****     outred = DMA2D_InitStruct->DMA2D_OutputRed << 8;
 109              		.loc 1 193 0
 110 003c 0569     		ldr	r5, [r0, #16]
 111 003e 2D02     		lsls	r5, r5, #8
 112              	.LVL5:
 194:FWLIB/src/stm32f4xx_dma2d.c ****     outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 12;
 113              		.loc 1 194 0
 114 0040 4169     		ldr	r1, [r0, #20]
 115 0042 0903     		lsls	r1, r1, #12
 116              	.LVL6:
 117 0044 05E0     		b	.L5
 118              	.LVL7:
 119              	.L10:
 159:FWLIB/src/stm32f4xx_dma2d.c ****     outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
 120              		.loc 1 159 0
 121 0046 C268     		ldr	r2, [r0, #12]
 122 0048 1202     		lsls	r2, r2, #8
 123              	.LVL8:
 160:FWLIB/src/stm32f4xx_dma2d.c ****     outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 24;
 124              		.loc 1 160 0
 125 004a 0569     		ldr	r5, [r0, #16]
 126 004c 2D04     		lsls	r5, r5, #16
 127              	.LVL9:
 161:FWLIB/src/stm32f4xx_dma2d.c ****   }
 128              		.loc 1 161 0
 129 004e 4169     		ldr	r1, [r0, #20]
 130 0050 0906     		lsls	r1, r1, #24
 131              	.LVL10:
 132              	.L5:
 195:FWLIB/src/stm32f4xx_dma2d.c ****   }  
 196:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->OCOLR |= ((outgreen) | (outred) | (DMA2D_InitStruct->DMA2D_OutputBlue) | (outalpha));
 133              		.loc 1 196 0
 134 0052 1A4B     		ldr	r3, .L14
 135 0054 9C6B     		ldr	r4, [r3, #56]
 136 0056 2A43     		orrs	r2, r2, r5
 137              	.LVL11:
 138 0058 8568     		ldr	r5, [r0, #8]
 139              	.LVL12:
 140 005a 2A43     		orrs	r2, r2, r5
 141 005c 0A43     		orrs	r2, r2, r1
 142 005e 2243     		orrs	r2, r2, r4
 143 0060 9A63     		str	r2, [r3, #56]
 197:FWLIB/src/stm32f4xx_dma2d.c **** 
 198:FWLIB/src/stm32f4xx_dma2d.c ****   /* Configures the output memory address */
 199:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->OMAR = (DMA2D_InitStruct->DMA2D_OutputMemoryAdd);
ARM GAS  /tmp/cc8b35bz.s 			page 7


 144              		.loc 1 199 0
 145 0062 8269     		ldr	r2, [r0, #24]
 146 0064 DA63     		str	r2, [r3, #60]
 200:FWLIB/src/stm32f4xx_dma2d.c **** 
 201:FWLIB/src/stm32f4xx_dma2d.c ****   /* Configure  the line Offset */
 202:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->OOR &= ~(uint32_t)DMA2D_OOR_LO;
 147              		.loc 1 202 0
 148 0066 1A6C     		ldr	r2, [r3, #64]
 149 0068 22F47F52 		bic	r2, r2, #16320
 150 006c 22F03F02 		bic	r2, r2, #63
 151 0070 1A64     		str	r2, [r3, #64]
 203:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->OOR |= (DMA2D_InitStruct->DMA2D_OutputOffset);
 152              		.loc 1 203 0
 153 0072 1A6C     		ldr	r2, [r3, #64]
 154 0074 C169     		ldr	r1, [r0, #28]
 155              	.LVL13:
 156 0076 0A43     		orrs	r2, r2, r1
 157 0078 1A64     		str	r2, [r3, #64]
 204:FWLIB/src/stm32f4xx_dma2d.c **** 
 205:FWLIB/src/stm32f4xx_dma2d.c ****   /* Configure the number of line and pixel per line */
 206:FWLIB/src/stm32f4xx_dma2d.c ****   pixline = DMA2D_InitStruct->DMA2D_PixelPerLine << 16; 
 158              		.loc 1 206 0
 159 007a 456A     		ldr	r5, [r0, #36]
 160              	.LVL14:
 207:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->NLR &= ~(DMA2D_NLR_NL | DMA2D_NLR_PL);
 161              		.loc 1 207 0
 162 007c 5C6C     		ldr	r4, [r3, #68]
 163 007e 04F04044 		and	r4, r4, #-1073741824
 164 0082 5C64     		str	r4, [r3, #68]
 208:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->NLR |= ((DMA2D_InitStruct->DMA2D_NumberOfLine) | (pixline));
 165              		.loc 1 208 0
 166 0084 5A6C     		ldr	r2, [r3, #68]
 167 0086 016A     		ldr	r1, [r0, #32]
 168 0088 41EA0541 		orr	r1, r1, r5, lsl #16
 169 008c 0A43     		orrs	r2, r2, r1
 170 008e 5A64     		str	r2, [r3, #68]
 209:FWLIB/src/stm32f4xx_dma2d.c **** 
 210:FWLIB/src/stm32f4xx_dma2d.c **** /**
 211:FWLIB/src/stm32f4xx_dma2d.c ****   * @brief  Fills each DMA2D_InitStruct member with its default value.
 212:FWLIB/src/stm32f4xx_dma2d.c ****   * @param  DMA2D_InitStruct: pointer to a DMA2D_InitTypeDef structure which will
 213:FWLIB/src/stm32f4xx_dma2d.c ****   *         be initialized.
 214:FWLIB/src/stm32f4xx_dma2d.c ****   * @retval None
 215:FWLIB/src/stm32f4xx_dma2d.c ****   */
 216:FWLIB/src/stm32f4xx_dma2d.c **** }
 171              		.loc 1 216 0
 172 0090 30BC     		pop	{r4, r5}
 173              	.LCFI2:
 174              		.cfi_remember_state
 175              		.cfi_restore 5
 176              		.cfi_restore 4
 177              		.cfi_def_cfa_offset 0
 178              	.LVL15:
 179 0092 7047     		bx	lr
 180              	.LVL16:
 181              	.L11:
 182              	.LCFI3:
 183              		.cfi_restore_state
ARM GAS  /tmp/cc8b35bz.s 			page 8


 167:FWLIB/src/stm32f4xx_dma2d.c ****       outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
 184              		.loc 1 167 0
 185 0094 C268     		ldr	r2, [r0, #12]
 186 0096 1202     		lsls	r2, r2, #8
 187              	.LVL17:
 168:FWLIB/src/stm32f4xx_dma2d.c ****       outalpha = (uint32_t)0x00000000;
 188              		.loc 1 168 0
 189 0098 0569     		ldr	r5, [r0, #16]
 190 009a 2D04     		lsls	r5, r5, #16
 191              	.LVL18:
 169:FWLIB/src/stm32f4xx_dma2d.c ****     }
 192              		.loc 1 169 0
 193 009c 0021     		movs	r1, #0
 194 009e D8E7     		b	.L5
 195              	.LVL19:
 196              	.L12:
 176:FWLIB/src/stm32f4xx_dma2d.c ****       outred = DMA2D_InitStruct->DMA2D_OutputRed << 11;
 197              		.loc 1 176 0
 198 00a0 C268     		ldr	r2, [r0, #12]
 199 00a2 5201     		lsls	r2, r2, #5
 200              	.LVL20:
 177:FWLIB/src/stm32f4xx_dma2d.c ****       outalpha = (uint32_t)0x00000000;
 201              		.loc 1 177 0
 202 00a4 0569     		ldr	r5, [r0, #16]
 203 00a6 ED02     		lsls	r5, r5, #11
 204              	.LVL21:
 178:FWLIB/src/stm32f4xx_dma2d.c ****     }
 205              		.loc 1 178 0
 206 00a8 0021     		movs	r1, #0
 207 00aa D2E7     		b	.L5
 208              	.LVL22:
 209              	.L13:
 185:FWLIB/src/stm32f4xx_dma2d.c ****       outred = DMA2D_InitStruct->DMA2D_OutputRed << 10;
 210              		.loc 1 185 0
 211 00ac C268     		ldr	r2, [r0, #12]
 212 00ae 5201     		lsls	r2, r2, #5
 213              	.LVL23:
 186:FWLIB/src/stm32f4xx_dma2d.c ****       outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 15;
 214              		.loc 1 186 0
 215 00b0 0569     		ldr	r5, [r0, #16]
 216 00b2 AD02     		lsls	r5, r5, #10
 217              	.LVL24:
 187:FWLIB/src/stm32f4xx_dma2d.c ****     }
 218              		.loc 1 187 0
 219 00b4 4169     		ldr	r1, [r0, #20]
 220 00b6 C903     		lsls	r1, r1, #15
 221              	.LVL25:
 222 00b8 CBE7     		b	.L5
 223              	.L15:
 224 00ba 00BF     		.align	2
 225              	.L14:
 226 00bc 00B00240 		.word	1073917952
 227              		.cfi_endproc
 228              	.LFE124:
 230              		.section	.text.DMA2D_StructInit,"ax",%progbits
 231              		.align	1
 232              		.global	DMA2D_StructInit
ARM GAS  /tmp/cc8b35bz.s 			page 9


 233              		.syntax unified
 234              		.thumb
 235              		.thumb_func
 236              		.fpu fpv4-sp-d16
 238              	DMA2D_StructInit:
 239              	.LFB125:
 217:FWLIB/src/stm32f4xx_dma2d.c **** void DMA2D_StructInit(DMA2D_InitTypeDef* DMA2D_InitStruct)
 218:FWLIB/src/stm32f4xx_dma2d.c **** {
 240              		.loc 1 218 0
 241              		.cfi_startproc
 242              		@ args = 0, pretend = 0, frame = 0
 243              		@ frame_needed = 0, uses_anonymous_args = 0
 244              		@ link register save eliminated.
 245              	.LVL26:
 219:FWLIB/src/stm32f4xx_dma2d.c ****   /* Initialize the transfer mode member */
 220:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_InitStruct->DMA2D_Mode = DMA2D_M2M;
 246              		.loc 1 220 0
 247 0000 0023     		movs	r3, #0
 248 0002 0360     		str	r3, [r0]
 221:FWLIB/src/stm32f4xx_dma2d.c **** 
 222:FWLIB/src/stm32f4xx_dma2d.c ****   /* Initialize the output color mode members */
 223:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_InitStruct->DMA2D_CMode = DMA2D_ARGB8888;
 249              		.loc 1 223 0
 250 0004 4360     		str	r3, [r0, #4]
 224:FWLIB/src/stm32f4xx_dma2d.c **** 
 225:FWLIB/src/stm32f4xx_dma2d.c ****   /* Initialize the alpha and RGB values */
 226:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_InitStruct->DMA2D_OutputGreen = 0x00;
 251              		.loc 1 226 0
 252 0006 C360     		str	r3, [r0, #12]
 227:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_InitStruct->DMA2D_OutputBlue = 0x00;
 253              		.loc 1 227 0
 254 0008 8360     		str	r3, [r0, #8]
 228:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_InitStruct->DMA2D_OutputRed = 0x00;
 255              		.loc 1 228 0
 256 000a 0361     		str	r3, [r0, #16]
 229:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_InitStruct->DMA2D_OutputAlpha = 0x00;
 257              		.loc 1 229 0
 258 000c 4361     		str	r3, [r0, #20]
 230:FWLIB/src/stm32f4xx_dma2d.c **** 
 231:FWLIB/src/stm32f4xx_dma2d.c ****   /* Initialize the output memory address */
 232:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_InitStruct->DMA2D_OutputMemoryAdd = 0x00;
 259              		.loc 1 232 0
 260 000e 8361     		str	r3, [r0, #24]
 233:FWLIB/src/stm32f4xx_dma2d.c **** 
 234:FWLIB/src/stm32f4xx_dma2d.c ****   /* Initialize the output offset */
 235:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_InitStruct->DMA2D_OutputOffset = 0x00;
 261              		.loc 1 235 0
 262 0010 C361     		str	r3, [r0, #28]
 236:FWLIB/src/stm32f4xx_dma2d.c **** 
 237:FWLIB/src/stm32f4xx_dma2d.c ****   /* Initialize the number of line and the number of pixel per line */
 238:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_InitStruct->DMA2D_NumberOfLine = 0x00;
 263              		.loc 1 238 0
 264 0012 0362     		str	r3, [r0, #32]
 239:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_InitStruct->DMA2D_PixelPerLine = 0x00;
 265              		.loc 1 239 0
 266 0014 4362     		str	r3, [r0, #36]
 267 0016 7047     		bx	lr
ARM GAS  /tmp/cc8b35bz.s 			page 10


 268              		.cfi_endproc
 269              	.LFE125:
 271              		.section	.text.DMA2D_StartTransfer,"ax",%progbits
 272              		.align	1
 273              		.global	DMA2D_StartTransfer
 274              		.syntax unified
 275              		.thumb
 276              		.thumb_func
 277              		.fpu fpv4-sp-d16
 279              	DMA2D_StartTransfer:
 280              	.LFB126:
 240:FWLIB/src/stm32f4xx_dma2d.c **** }
 241:FWLIB/src/stm32f4xx_dma2d.c **** 
 242:FWLIB/src/stm32f4xx_dma2d.c **** /**
 243:FWLIB/src/stm32f4xx_dma2d.c ****   * @brief  Start the DMA2D transfer.
 244:FWLIB/src/stm32f4xx_dma2d.c ****   * @param 
 245:FWLIB/src/stm32f4xx_dma2d.c ****   * @retval None
 246:FWLIB/src/stm32f4xx_dma2d.c ****   */
 247:FWLIB/src/stm32f4xx_dma2d.c **** 
 248:FWLIB/src/stm32f4xx_dma2d.c **** void DMA2D_StartTransfer(void)
 249:FWLIB/src/stm32f4xx_dma2d.c **** {
 281              		.loc 1 249 0
 282              		.cfi_startproc
 283              		@ args = 0, pretend = 0, frame = 0
 284              		@ frame_needed = 0, uses_anonymous_args = 0
 285              		@ link register save eliminated.
 250:FWLIB/src/stm32f4xx_dma2d.c ****     /* Start DMA2D transfer by setting START bit */
 251:FWLIB/src/stm32f4xx_dma2d.c ****     DMA2D->CR |= (uint32_t)DMA2D_CR_START;
 286              		.loc 1 251 0
 287 0000 024A     		ldr	r2, .L18
 288 0002 1368     		ldr	r3, [r2]
 289 0004 43F00103 		orr	r3, r3, #1
 290 0008 1360     		str	r3, [r2]
 291 000a 7047     		bx	lr
 292              	.L19:
 293              		.align	2
 294              	.L18:
 295 000c 00B00240 		.word	1073917952
 296              		.cfi_endproc
 297              	.LFE126:
 299              		.section	.text.DMA2D_AbortTransfer,"ax",%progbits
 300              		.align	1
 301              		.global	DMA2D_AbortTransfer
 302              		.syntax unified
 303              		.thumb
 304              		.thumb_func
 305              		.fpu fpv4-sp-d16
 307              	DMA2D_AbortTransfer:
 308              	.LFB127:
 252:FWLIB/src/stm32f4xx_dma2d.c **** }
 253:FWLIB/src/stm32f4xx_dma2d.c **** 
 254:FWLIB/src/stm32f4xx_dma2d.c **** /**
 255:FWLIB/src/stm32f4xx_dma2d.c ****   * @brief  Abort the DMA2D transfer.
 256:FWLIB/src/stm32f4xx_dma2d.c ****   * @param
 257:FWLIB/src/stm32f4xx_dma2d.c ****   * @retval None
 258:FWLIB/src/stm32f4xx_dma2d.c ****   */
 259:FWLIB/src/stm32f4xx_dma2d.c **** 
ARM GAS  /tmp/cc8b35bz.s 			page 11


 260:FWLIB/src/stm32f4xx_dma2d.c **** void DMA2D_AbortTransfer(void)
 261:FWLIB/src/stm32f4xx_dma2d.c **** {
 309              		.loc 1 261 0
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 0
 312              		@ frame_needed = 0, uses_anonymous_args = 0
 313              		@ link register save eliminated.
 262:FWLIB/src/stm32f4xx_dma2d.c ****     /* Start DMA2D transfer by setting START bit */
 263:FWLIB/src/stm32f4xx_dma2d.c ****     DMA2D->CR |= (uint32_t)DMA2D_CR_ABORT;
 314              		.loc 1 263 0
 315 0000 024A     		ldr	r2, .L21
 316 0002 1368     		ldr	r3, [r2]
 317 0004 43F00403 		orr	r3, r3, #4
 318 0008 1360     		str	r3, [r2]
 319 000a 7047     		bx	lr
 320              	.L22:
 321              		.align	2
 322              	.L21:
 323 000c 00B00240 		.word	1073917952
 324              		.cfi_endproc
 325              	.LFE127:
 327              		.section	.text.DMA2D_Suspend,"ax",%progbits
 328              		.align	1
 329              		.global	DMA2D_Suspend
 330              		.syntax unified
 331              		.thumb
 332              		.thumb_func
 333              		.fpu fpv4-sp-d16
 335              	DMA2D_Suspend:
 336              	.LFB128:
 264:FWLIB/src/stm32f4xx_dma2d.c **** 
 265:FWLIB/src/stm32f4xx_dma2d.c **** }
 266:FWLIB/src/stm32f4xx_dma2d.c **** 
 267:FWLIB/src/stm32f4xx_dma2d.c **** /**
 268:FWLIB/src/stm32f4xx_dma2d.c ****   * @brief  Stop or continue the DMA2D transfer.
 269:FWLIB/src/stm32f4xx_dma2d.c ****   * @param  NewState: new state of the DMA2D peripheral.
 270:FWLIB/src/stm32f4xx_dma2d.c ****   *   This parameter can be: ENABLE or DISABLE.
 271:FWLIB/src/stm32f4xx_dma2d.c ****   * @retval None
 272:FWLIB/src/stm32f4xx_dma2d.c ****   */
 273:FWLIB/src/stm32f4xx_dma2d.c **** void DMA2D_Suspend(FunctionalState NewState)
 274:FWLIB/src/stm32f4xx_dma2d.c **** {
 337              		.loc 1 274 0
 338              		.cfi_startproc
 339              		@ args = 0, pretend = 0, frame = 0
 340              		@ frame_needed = 0, uses_anonymous_args = 0
 341              		@ link register save eliminated.
 342              	.LVL27:
 275:FWLIB/src/stm32f4xx_dma2d.c ****   /* Check the parameters */
 276:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 277:FWLIB/src/stm32f4xx_dma2d.c **** 
 278:FWLIB/src/stm32f4xx_dma2d.c ****   if (NewState != DISABLE)
 343              		.loc 1 278 0
 344 0000 28B9     		cbnz	r0, .L26
 279:FWLIB/src/stm32f4xx_dma2d.c ****   {
 280:FWLIB/src/stm32f4xx_dma2d.c ****     /* Suspend DMA2D transfer by setting STOP bit */
 281:FWLIB/src/stm32f4xx_dma2d.c ****     DMA2D->CR |= (uint32_t)DMA2D_CR_SUSP;
 282:FWLIB/src/stm32f4xx_dma2d.c ****   }
ARM GAS  /tmp/cc8b35bz.s 			page 12


 283:FWLIB/src/stm32f4xx_dma2d.c ****   else
 284:FWLIB/src/stm32f4xx_dma2d.c ****   {
 285:FWLIB/src/stm32f4xx_dma2d.c ****     /* Continue DMA2D transfer by clearing STOP bit */
 286:FWLIB/src/stm32f4xx_dma2d.c ****     DMA2D->CR &= ~(uint32_t)DMA2D_CR_SUSP;
 345              		.loc 1 286 0
 346 0002 064A     		ldr	r2, .L27
 347 0004 1368     		ldr	r3, [r2]
 348 0006 23F00203 		bic	r3, r3, #2
 349 000a 1360     		str	r3, [r2]
 350 000c 7047     		bx	lr
 351              	.L26:
 281:FWLIB/src/stm32f4xx_dma2d.c ****   }
 352              		.loc 1 281 0
 353 000e 034A     		ldr	r2, .L27
 354 0010 1368     		ldr	r3, [r2]
 355 0012 43F00203 		orr	r3, r3, #2
 356 0016 1360     		str	r3, [r2]
 357 0018 7047     		bx	lr
 358              	.L28:
 359 001a 00BF     		.align	2
 360              	.L27:
 361 001c 00B00240 		.word	1073917952
 362              		.cfi_endproc
 363              	.LFE128:
 365              		.section	.text.DMA2D_FGConfig,"ax",%progbits
 366              		.align	1
 367              		.global	DMA2D_FGConfig
 368              		.syntax unified
 369              		.thumb
 370              		.thumb_func
 371              		.fpu fpv4-sp-d16
 373              	DMA2D_FGConfig:
 374              	.LFB129:
 287:FWLIB/src/stm32f4xx_dma2d.c ****   }
 288:FWLIB/src/stm32f4xx_dma2d.c **** }
 289:FWLIB/src/stm32f4xx_dma2d.c **** 
 290:FWLIB/src/stm32f4xx_dma2d.c **** /**
 291:FWLIB/src/stm32f4xx_dma2d.c ****   * @brief  Configures the Foreground according to the specified parameters
 292:FWLIB/src/stm32f4xx_dma2d.c ****   *         in the DMA2D_FGStruct.
 293:FWLIB/src/stm32f4xx_dma2d.c ****   * @note   This function can be used only when the transfer is disabled.
 294:FWLIB/src/stm32f4xx_dma2d.c ****   * @param  DMA2D_FGStruct: pointer to a DMA2D_FGTypeDef structure that contains
 295:FWLIB/src/stm32f4xx_dma2d.c ****   *         the configuration information for the specified Background.
 296:FWLIB/src/stm32f4xx_dma2d.c ****   * @retval None
 297:FWLIB/src/stm32f4xx_dma2d.c ****   */
 298:FWLIB/src/stm32f4xx_dma2d.c **** void DMA2D_FGConfig(DMA2D_FG_InitTypeDef* DMA2D_FG_InitStruct)
 299:FWLIB/src/stm32f4xx_dma2d.c **** {
 375              		.loc 1 299 0
 376              		.cfi_startproc
 377              		@ args = 0, pretend = 0, frame = 0
 378              		@ frame_needed = 0, uses_anonymous_args = 0
 379              		@ link register save eliminated.
 380              	.LVL28:
 381 0000 F0B4     		push	{r4, r5, r6, r7}
 382              	.LCFI4:
 383              		.cfi_def_cfa_offset 16
 384              		.cfi_offset 4, -16
 385              		.cfi_offset 5, -12
ARM GAS  /tmp/cc8b35bz.s 			page 13


 386              		.cfi_offset 6, -8
 387              		.cfi_offset 7, -4
 388              	.LVL29:
 300:FWLIB/src/stm32f4xx_dma2d.c **** 
 301:FWLIB/src/stm32f4xx_dma2d.c ****   uint32_t fg_clutcolormode = 0;
 302:FWLIB/src/stm32f4xx_dma2d.c ****   uint32_t fg_clutsize = 0;
 303:FWLIB/src/stm32f4xx_dma2d.c ****   uint32_t fg_alpha_mode = 0;
 304:FWLIB/src/stm32f4xx_dma2d.c ****   uint32_t fg_alphavalue = 0;
 305:FWLIB/src/stm32f4xx_dma2d.c ****   uint32_t fg_colorgreen = 0;
 306:FWLIB/src/stm32f4xx_dma2d.c ****   uint32_t fg_colorred = 0;
 307:FWLIB/src/stm32f4xx_dma2d.c **** 
 308:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_FGO(DMA2D_FG_InitStruct->DMA2D_FGO));
 309:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_FGCM(DMA2D_FG_InitStruct->DMA2D_FGCM));
 310:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_FG_CLUT_CM(DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM));
 311:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_FG_CLUT_SIZE(DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE));
 312:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_FG_ALPHA_MODE(DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE));
 313:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_FG_ALPHA_VALUE(DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE));
 314:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_FGC_BLUE(DMA2D_FG_InitStruct->DMA2D_FGC_BLUE));
 315:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_FGC_GREEN(DMA2D_FG_InitStruct->DMA2D_FGC_GREEN));
 316:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_FGC_RED(DMA2D_FG_InitStruct->DMA2D_FGC_RED));
 317:FWLIB/src/stm32f4xx_dma2d.c **** 
 318:FWLIB/src/stm32f4xx_dma2d.c ****   /* Configures the FG memory address */
 319:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->FGMAR = (DMA2D_FG_InitStruct->DMA2D_FGMA);
 389              		.loc 1 319 0
 390 0002 0268     		ldr	r2, [r0]
 391 0004 184B     		ldr	r3, .L31
 392 0006 DA60     		str	r2, [r3, #12]
 320:FWLIB/src/stm32f4xx_dma2d.c **** 
 321:FWLIB/src/stm32f4xx_dma2d.c ****   /* Configures the FG offset */
 322:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->FGOR &= ~(uint32_t)DMA2D_FGOR_LO;
 393              		.loc 1 322 0
 394 0008 1A69     		ldr	r2, [r3, #16]
 395 000a 22F47F52 		bic	r2, r2, #16320
 396 000e 22F03F02 		bic	r2, r2, #63
 397 0012 1A61     		str	r2, [r3, #16]
 323:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->FGOR |= (DMA2D_FG_InitStruct->DMA2D_FGO);
 398              		.loc 1 323 0
 399 0014 1A69     		ldr	r2, [r3, #16]
 400 0016 4168     		ldr	r1, [r0, #4]
 401 0018 0A43     		orrs	r2, r2, r1
 402 001a 1A61     		str	r2, [r3, #16]
 324:FWLIB/src/stm32f4xx_dma2d.c **** 
 325:FWLIB/src/stm32f4xx_dma2d.c ****   /* Configures foreground Pixel Format Convertor */
 326:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->FGPFCCR &= (uint32_t)PFCCR_MASK;
 403              		.loc 1 326 0
 404 001c D969     		ldr	r1, [r3, #28]
 405 001e 134A     		ldr	r2, .L31+4
 406 0020 0A40     		ands	r2, r2, r1
 407 0022 DA61     		str	r2, [r3, #28]
 327:FWLIB/src/stm32f4xx_dma2d.c ****   fg_clutcolormode = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM << 4;
 408              		.loc 1 327 0
 409 0024 C768     		ldr	r7, [r0, #12]
 410              	.LVL30:
 328:FWLIB/src/stm32f4xx_dma2d.c ****   fg_clutsize = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE << 8;
 411              		.loc 1 328 0
 412 0026 0669     		ldr	r6, [r0, #16]
 413              	.LVL31:
ARM GAS  /tmp/cc8b35bz.s 			page 14


 329:FWLIB/src/stm32f4xx_dma2d.c ****   fg_alpha_mode = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE << 16;
 414              		.loc 1 329 0
 415 0028 4569     		ldr	r5, [r0, #20]
 416              	.LVL32:
 330:FWLIB/src/stm32f4xx_dma2d.c ****   fg_alphavalue = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE << 24;
 417              		.loc 1 330 0
 418 002a 8469     		ldr	r4, [r0, #24]
 419              	.LVL33:
 331:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->FGPFCCR |= (DMA2D_FG_InitStruct->DMA2D_FGCM | fg_clutcolormode | fg_clutsize | \
 420              		.loc 1 331 0
 421 002c D969     		ldr	r1, [r3, #28]
 422 002e 8268     		ldr	r2, [r0, #8]
 423 0030 42EA0712 		orr	r2, r2, r7, lsl #4
 424 0034 42EA0622 		orr	r2, r2, r6, lsl #8
 425 0038 42EA0542 		orr	r2, r2, r5, lsl #16
 332:FWLIB/src/stm32f4xx_dma2d.c ****                     fg_alpha_mode | fg_alphavalue);
 426              		.loc 1 332 0
 427 003c 42EA0462 		orr	r2, r2, r4, lsl #24
 331:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->FGPFCCR |= (DMA2D_FG_InitStruct->DMA2D_FGCM | fg_clutcolormode | fg_clutsize | \
 428              		.loc 1 331 0
 429 0040 0A43     		orrs	r2, r2, r1
 430 0042 DA61     		str	r2, [r3, #28]
 333:FWLIB/src/stm32f4xx_dma2d.c **** 
 334:FWLIB/src/stm32f4xx_dma2d.c ****   /* Configures foreground color */
 335:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->FGCOLR &= ~(DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED);
 431              		.loc 1 335 0
 432 0044 1A6A     		ldr	r2, [r3, #32]
 433 0046 02F07F42 		and	r2, r2, #-16777216
 434 004a 1A62     		str	r2, [r3, #32]
 336:FWLIB/src/stm32f4xx_dma2d.c ****   fg_colorgreen = DMA2D_FG_InitStruct->DMA2D_FGC_GREEN << 8;
 435              		.loc 1 336 0
 436 004c 056A     		ldr	r5, [r0, #32]
 437              	.LVL34:
 337:FWLIB/src/stm32f4xx_dma2d.c ****   fg_colorred = DMA2D_FG_InitStruct->DMA2D_FGC_RED << 16;
 438              		.loc 1 337 0
 439 004e 446A     		ldr	r4, [r0, #36]
 440              	.LVL35:
 338:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->FGCOLR |= (DMA2D_FG_InitStruct->DMA2D_FGC_BLUE | fg_colorgreen | fg_colorred);
 441              		.loc 1 338 0
 442 0050 196A     		ldr	r1, [r3, #32]
 443 0052 C269     		ldr	r2, [r0, #28]
 444 0054 42EA0522 		orr	r2, r2, r5, lsl #8
 445 0058 42EA0442 		orr	r2, r2, r4, lsl #16
 446 005c 0A43     		orrs	r2, r2, r1
 447 005e 1A62     		str	r2, [r3, #32]
 339:FWLIB/src/stm32f4xx_dma2d.c **** 
 340:FWLIB/src/stm32f4xx_dma2d.c ****   /* Configures foreground CLUT memory address */
 341:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->FGCMAR = DMA2D_FG_InitStruct->DMA2D_FGCMAR;
 448              		.loc 1 341 0
 449 0060 826A     		ldr	r2, [r0, #40]
 450 0062 DA62     		str	r2, [r3, #44]
 342:FWLIB/src/stm32f4xx_dma2d.c **** }
 451              		.loc 1 342 0
 452 0064 F0BC     		pop	{r4, r5, r6, r7}
 453              	.LCFI5:
 454              		.cfi_restore 7
 455              		.cfi_restore 6
ARM GAS  /tmp/cc8b35bz.s 			page 15


 456              		.cfi_restore 5
 457              		.cfi_restore 4
 458              		.cfi_def_cfa_offset 0
 459              	.LVL36:
 460 0066 7047     		bx	lr
 461              	.L32:
 462              		.align	2
 463              	.L31:
 464 0068 00B00240 		.word	1073917952
 465 006c C000FC00 		.word	16515264
 466              		.cfi_endproc
 467              	.LFE129:
 469              		.section	.text.DMA2D_FG_StructInit,"ax",%progbits
 470              		.align	1
 471              		.global	DMA2D_FG_StructInit
 472              		.syntax unified
 473              		.thumb
 474              		.thumb_func
 475              		.fpu fpv4-sp-d16
 477              	DMA2D_FG_StructInit:
 478              	.LFB130:
 343:FWLIB/src/stm32f4xx_dma2d.c **** 
 344:FWLIB/src/stm32f4xx_dma2d.c **** /**
 345:FWLIB/src/stm32f4xx_dma2d.c ****   * @brief  Fills each DMA2D_FGStruct member with its default value.
 346:FWLIB/src/stm32f4xx_dma2d.c ****   * @param  DMA2D_FGStruct: pointer to a DMA2D_FGTypeDef structure which will
 347:FWLIB/src/stm32f4xx_dma2d.c ****   *         be initialized.
 348:FWLIB/src/stm32f4xx_dma2d.c ****   * @retval None
 349:FWLIB/src/stm32f4xx_dma2d.c ****   */
 350:FWLIB/src/stm32f4xx_dma2d.c **** void DMA2D_FG_StructInit(DMA2D_FG_InitTypeDef* DMA2D_FG_InitStruct)
 351:FWLIB/src/stm32f4xx_dma2d.c **** {
 479              		.loc 1 351 0
 480              		.cfi_startproc
 481              		@ args = 0, pretend = 0, frame = 0
 482              		@ frame_needed = 0, uses_anonymous_args = 0
 483              		@ link register save eliminated.
 484              	.LVL37:
 352:FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D foreground memory address */
 353:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_FG_InitStruct->DMA2D_FGMA = 0x00;
 485              		.loc 1 353 0
 486 0000 0023     		movs	r3, #0
 487 0002 0360     		str	r3, [r0]
 354:FWLIB/src/stm32f4xx_dma2d.c **** 
 355:FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D foreground offset */
 356:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_FG_InitStruct->DMA2D_FGO = 0x00;
 488              		.loc 1 356 0
 489 0004 4360     		str	r3, [r0, #4]
 357:FWLIB/src/stm32f4xx_dma2d.c **** 
 358:FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D foreground color mode */
 359:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_FG_InitStruct->DMA2D_FGCM = CM_ARGB8888;
 490              		.loc 1 359 0
 491 0006 8360     		str	r3, [r0, #8]
 360:FWLIB/src/stm32f4xx_dma2d.c **** 
 361:FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D foreground CLUT color mode */
 362:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM = CLUT_CM_ARGB8888;
 492              		.loc 1 362 0
 493 0008 C360     		str	r3, [r0, #12]
 363:FWLIB/src/stm32f4xx_dma2d.c **** 
ARM GAS  /tmp/cc8b35bz.s 			page 16


 364:FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D foreground CLUT size */
 365:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE = 0x00;
 494              		.loc 1 365 0
 495 000a 0361     		str	r3, [r0, #16]
 366:FWLIB/src/stm32f4xx_dma2d.c **** 
 367:FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D foreground alpha mode */
 368:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE = NO_MODIF_ALPHA_VALUE;
 496              		.loc 1 368 0
 497 000c 4361     		str	r3, [r0, #20]
 369:FWLIB/src/stm32f4xx_dma2d.c **** 
 370:FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D foreground alpha value */
 371:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE = 0x00;
 498              		.loc 1 371 0
 499 000e 8361     		str	r3, [r0, #24]
 372:FWLIB/src/stm32f4xx_dma2d.c **** 
 373:FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D foreground blue value */
 374:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_FG_InitStruct->DMA2D_FGC_BLUE = 0x00;
 500              		.loc 1 374 0
 501 0010 C361     		str	r3, [r0, #28]
 375:FWLIB/src/stm32f4xx_dma2d.c **** 
 376:FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D foreground green value */
 377:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_FG_InitStruct->DMA2D_FGC_GREEN = 0x00;
 502              		.loc 1 377 0
 503 0012 0362     		str	r3, [r0, #32]
 378:FWLIB/src/stm32f4xx_dma2d.c **** 
 379:FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D foreground red value */
 380:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_FG_InitStruct->DMA2D_FGC_RED = 0x00;
 504              		.loc 1 380 0
 505 0014 4362     		str	r3, [r0, #36]
 381:FWLIB/src/stm32f4xx_dma2d.c **** 
 382:FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D foreground CLUT memory address */
 383:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_FG_InitStruct->DMA2D_FGCMAR = 0x00;
 506              		.loc 1 383 0
 507 0016 8362     		str	r3, [r0, #40]
 508 0018 7047     		bx	lr
 509              		.cfi_endproc
 510              	.LFE130:
 512              		.section	.text.DMA2D_BGConfig,"ax",%progbits
 513              		.align	1
 514              		.global	DMA2D_BGConfig
 515              		.syntax unified
 516              		.thumb
 517              		.thumb_func
 518              		.fpu fpv4-sp-d16
 520              	DMA2D_BGConfig:
 521              	.LFB131:
 384:FWLIB/src/stm32f4xx_dma2d.c **** }
 385:FWLIB/src/stm32f4xx_dma2d.c **** 
 386:FWLIB/src/stm32f4xx_dma2d.c **** 
 387:FWLIB/src/stm32f4xx_dma2d.c **** /**
 388:FWLIB/src/stm32f4xx_dma2d.c ****   * @brief  Configures the Background according to the specified parameters
 389:FWLIB/src/stm32f4xx_dma2d.c ****   *         in the DMA2D_BGStruct.
 390:FWLIB/src/stm32f4xx_dma2d.c ****   * @note   This function can be used only when the transfer is disabled.
 391:FWLIB/src/stm32f4xx_dma2d.c ****   * @param  DMA2D_BGStruct: pointer to a DMA2D_BGTypeDef structure that contains
 392:FWLIB/src/stm32f4xx_dma2d.c ****   *         the configuration information for the specified Background.
 393:FWLIB/src/stm32f4xx_dma2d.c ****   * @retval None
 394:FWLIB/src/stm32f4xx_dma2d.c ****   */
ARM GAS  /tmp/cc8b35bz.s 			page 17


 395:FWLIB/src/stm32f4xx_dma2d.c **** void DMA2D_BGConfig(DMA2D_BG_InitTypeDef* DMA2D_BG_InitStruct)
 396:FWLIB/src/stm32f4xx_dma2d.c **** {
 522              		.loc 1 396 0
 523              		.cfi_startproc
 524              		@ args = 0, pretend = 0, frame = 0
 525              		@ frame_needed = 0, uses_anonymous_args = 0
 526              		@ link register save eliminated.
 527              	.LVL38:
 528 0000 F0B4     		push	{r4, r5, r6, r7}
 529              	.LCFI6:
 530              		.cfi_def_cfa_offset 16
 531              		.cfi_offset 4, -16
 532              		.cfi_offset 5, -12
 533              		.cfi_offset 6, -8
 534              		.cfi_offset 7, -4
 535              	.LVL39:
 397:FWLIB/src/stm32f4xx_dma2d.c **** 
 398:FWLIB/src/stm32f4xx_dma2d.c ****   uint32_t bg_clutcolormode = 0;
 399:FWLIB/src/stm32f4xx_dma2d.c ****   uint32_t bg_clutsize = 0;
 400:FWLIB/src/stm32f4xx_dma2d.c ****   uint32_t bg_alpha_mode = 0;
 401:FWLIB/src/stm32f4xx_dma2d.c ****   uint32_t bg_alphavalue = 0;
 402:FWLIB/src/stm32f4xx_dma2d.c ****   uint32_t bg_colorgreen = 0;
 403:FWLIB/src/stm32f4xx_dma2d.c ****   uint32_t bg_colorred = 0;
 404:FWLIB/src/stm32f4xx_dma2d.c **** 
 405:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_BGO(DMA2D_BG_InitStruct->DMA2D_BGO));
 406:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_BGCM(DMA2D_BG_InitStruct->DMA2D_BGCM));
 407:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_BG_CLUT_CM(DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM));
 408:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_BG_CLUT_SIZE(DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE));
 409:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_BG_ALPHA_MODE(DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE));
 410:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_BG_ALPHA_VALUE(DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE));
 411:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_BGC_BLUE(DMA2D_BG_InitStruct->DMA2D_BGC_BLUE));
 412:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_BGC_GREEN(DMA2D_BG_InitStruct->DMA2D_BGC_GREEN));
 413:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_BGC_RED(DMA2D_BG_InitStruct->DMA2D_BGC_RED));
 414:FWLIB/src/stm32f4xx_dma2d.c **** 
 415:FWLIB/src/stm32f4xx_dma2d.c ****   /* Configures the BG memory address */
 416:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->BGMAR = (DMA2D_BG_InitStruct->DMA2D_BGMA);
 536              		.loc 1 416 0
 537 0002 0268     		ldr	r2, [r0]
 538 0004 184B     		ldr	r3, .L36
 539 0006 5A61     		str	r2, [r3, #20]
 417:FWLIB/src/stm32f4xx_dma2d.c **** 
 418:FWLIB/src/stm32f4xx_dma2d.c ****   /* Configures the BG offset */
 419:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->BGOR &= ~(uint32_t)DMA2D_BGOR_LO;
 540              		.loc 1 419 0
 541 0008 9A69     		ldr	r2, [r3, #24]
 542 000a 22F47F52 		bic	r2, r2, #16320
 543 000e 22F03F02 		bic	r2, r2, #63
 544 0012 9A61     		str	r2, [r3, #24]
 420:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->BGOR |= (DMA2D_BG_InitStruct->DMA2D_BGO);
 545              		.loc 1 420 0
 546 0014 9A69     		ldr	r2, [r3, #24]
 547 0016 4168     		ldr	r1, [r0, #4]
 548 0018 0A43     		orrs	r2, r2, r1
 549 001a 9A61     		str	r2, [r3, #24]
 421:FWLIB/src/stm32f4xx_dma2d.c **** 
 422:FWLIB/src/stm32f4xx_dma2d.c ****   /* Configures background Pixel Format Convertor */
 423:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->BGPFCCR &= (uint32_t)PFCCR_MASK;
ARM GAS  /tmp/cc8b35bz.s 			page 18


 550              		.loc 1 423 0
 551 001c 596A     		ldr	r1, [r3, #36]
 552 001e 134A     		ldr	r2, .L36+4
 553 0020 0A40     		ands	r2, r2, r1
 554 0022 5A62     		str	r2, [r3, #36]
 424:FWLIB/src/stm32f4xx_dma2d.c ****   bg_clutcolormode = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM << 4;
 555              		.loc 1 424 0
 556 0024 C768     		ldr	r7, [r0, #12]
 557              	.LVL40:
 425:FWLIB/src/stm32f4xx_dma2d.c ****   bg_clutsize = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE << 8;
 558              		.loc 1 425 0
 559 0026 0669     		ldr	r6, [r0, #16]
 560              	.LVL41:
 426:FWLIB/src/stm32f4xx_dma2d.c ****   bg_alpha_mode = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE << 16;
 561              		.loc 1 426 0
 562 0028 4569     		ldr	r5, [r0, #20]
 563              	.LVL42:
 427:FWLIB/src/stm32f4xx_dma2d.c ****   bg_alphavalue = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE << 24;
 564              		.loc 1 427 0
 565 002a 8469     		ldr	r4, [r0, #24]
 566              	.LVL43:
 428:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->BGPFCCR |= (DMA2D_BG_InitStruct->DMA2D_BGCM | bg_clutcolormode | bg_clutsize | \
 567              		.loc 1 428 0
 568 002c 596A     		ldr	r1, [r3, #36]
 569 002e 8268     		ldr	r2, [r0, #8]
 570 0030 42EA0712 		orr	r2, r2, r7, lsl #4
 571 0034 42EA0622 		orr	r2, r2, r6, lsl #8
 572 0038 42EA0542 		orr	r2, r2, r5, lsl #16
 429:FWLIB/src/stm32f4xx_dma2d.c ****                     bg_alpha_mode | bg_alphavalue);
 573              		.loc 1 429 0
 574 003c 42EA0462 		orr	r2, r2, r4, lsl #24
 428:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->BGPFCCR |= (DMA2D_BG_InitStruct->DMA2D_BGCM | bg_clutcolormode | bg_clutsize | \
 575              		.loc 1 428 0
 576 0040 0A43     		orrs	r2, r2, r1
 577 0042 5A62     		str	r2, [r3, #36]
 430:FWLIB/src/stm32f4xx_dma2d.c **** 
 431:FWLIB/src/stm32f4xx_dma2d.c ****   /* Configures background color */
 432:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->BGCOLR &= ~(DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | DMA2D_BGCOLR_RED);
 578              		.loc 1 432 0
 579 0044 9A6A     		ldr	r2, [r3, #40]
 580 0046 02F07F42 		and	r2, r2, #-16777216
 581 004a 9A62     		str	r2, [r3, #40]
 433:FWLIB/src/stm32f4xx_dma2d.c ****   bg_colorgreen = DMA2D_BG_InitStruct->DMA2D_BGC_GREEN << 8;
 582              		.loc 1 433 0
 583 004c 056A     		ldr	r5, [r0, #32]
 584              	.LVL44:
 434:FWLIB/src/stm32f4xx_dma2d.c ****   bg_colorred = DMA2D_BG_InitStruct->DMA2D_BGC_RED << 16;
 585              		.loc 1 434 0
 586 004e 446A     		ldr	r4, [r0, #36]
 587              	.LVL45:
 435:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->BGCOLR |= (DMA2D_BG_InitStruct->DMA2D_BGC_BLUE | bg_colorgreen | bg_colorred);
 588              		.loc 1 435 0
 589 0050 996A     		ldr	r1, [r3, #40]
 590 0052 C269     		ldr	r2, [r0, #28]
 591 0054 42EA0522 		orr	r2, r2, r5, lsl #8
 592 0058 42EA0442 		orr	r2, r2, r4, lsl #16
 593 005c 0A43     		orrs	r2, r2, r1
ARM GAS  /tmp/cc8b35bz.s 			page 19


 594 005e 9A62     		str	r2, [r3, #40]
 436:FWLIB/src/stm32f4xx_dma2d.c ****   
 437:FWLIB/src/stm32f4xx_dma2d.c ****   /* Configures background CLUT memory address */
 438:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->BGCMAR = DMA2D_BG_InitStruct->DMA2D_BGCMAR;
 595              		.loc 1 438 0
 596 0060 826A     		ldr	r2, [r0, #40]
 597 0062 1A63     		str	r2, [r3, #48]
 439:FWLIB/src/stm32f4xx_dma2d.c **** 
 440:FWLIB/src/stm32f4xx_dma2d.c **** }
 598              		.loc 1 440 0
 599 0064 F0BC     		pop	{r4, r5, r6, r7}
 600              	.LCFI7:
 601              		.cfi_restore 7
 602              		.cfi_restore 6
 603              		.cfi_restore 5
 604              		.cfi_restore 4
 605              		.cfi_def_cfa_offset 0
 606              	.LVL46:
 607 0066 7047     		bx	lr
 608              	.L37:
 609              		.align	2
 610              	.L36:
 611 0068 00B00240 		.word	1073917952
 612 006c C000FC00 		.word	16515264
 613              		.cfi_endproc
 614              	.LFE131:
 616              		.section	.text.DMA2D_BG_StructInit,"ax",%progbits
 617              		.align	1
 618              		.global	DMA2D_BG_StructInit
 619              		.syntax unified
 620              		.thumb
 621              		.thumb_func
 622              		.fpu fpv4-sp-d16
 624              	DMA2D_BG_StructInit:
 625              	.LFB132:
 441:FWLIB/src/stm32f4xx_dma2d.c **** 
 442:FWLIB/src/stm32f4xx_dma2d.c **** /**
 443:FWLIB/src/stm32f4xx_dma2d.c ****   * @brief  Fills each DMA2D_BGStruct member with its default value.
 444:FWLIB/src/stm32f4xx_dma2d.c ****   * @param  DMA2D_BGStruct: pointer to a DMA2D_BGTypeDef structure which will
 445:FWLIB/src/stm32f4xx_dma2d.c ****   *         be initialized.
 446:FWLIB/src/stm32f4xx_dma2d.c ****   * @retval None
 447:FWLIB/src/stm32f4xx_dma2d.c ****   */
 448:FWLIB/src/stm32f4xx_dma2d.c **** void DMA2D_BG_StructInit(DMA2D_BG_InitTypeDef* DMA2D_BG_InitStruct)
 449:FWLIB/src/stm32f4xx_dma2d.c **** {
 626              		.loc 1 449 0
 627              		.cfi_startproc
 628              		@ args = 0, pretend = 0, frame = 0
 629              		@ frame_needed = 0, uses_anonymous_args = 0
 630              		@ link register save eliminated.
 631              	.LVL47:
 450:FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D background memory address */
 451:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_BG_InitStruct->DMA2D_BGMA = 0x00;
 632              		.loc 1 451 0
 633 0000 0023     		movs	r3, #0
 634 0002 0360     		str	r3, [r0]
 452:FWLIB/src/stm32f4xx_dma2d.c **** 
 453:FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D background offset */
ARM GAS  /tmp/cc8b35bz.s 			page 20


 454:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_BG_InitStruct->DMA2D_BGO = 0x00;
 635              		.loc 1 454 0
 636 0004 4360     		str	r3, [r0, #4]
 455:FWLIB/src/stm32f4xx_dma2d.c **** 
 456:FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D background color mode */
 457:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_BG_InitStruct->DMA2D_BGCM = CM_ARGB8888;
 637              		.loc 1 457 0
 638 0006 8360     		str	r3, [r0, #8]
 458:FWLIB/src/stm32f4xx_dma2d.c **** 
 459:FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D background CLUT color mode */
 460:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM = CLUT_CM_ARGB8888;
 639              		.loc 1 460 0
 640 0008 C360     		str	r3, [r0, #12]
 461:FWLIB/src/stm32f4xx_dma2d.c **** 
 462:FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D background CLUT size */
 463:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE = 0x00;
 641              		.loc 1 463 0
 642 000a 0361     		str	r3, [r0, #16]
 464:FWLIB/src/stm32f4xx_dma2d.c **** 
 465:FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D background alpha mode */
 466:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE = NO_MODIF_ALPHA_VALUE;
 643              		.loc 1 466 0
 644 000c 4361     		str	r3, [r0, #20]
 467:FWLIB/src/stm32f4xx_dma2d.c **** 
 468:FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D background alpha value */
 469:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE = 0x00;
 645              		.loc 1 469 0
 646 000e 8361     		str	r3, [r0, #24]
 470:FWLIB/src/stm32f4xx_dma2d.c **** 
 471:FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D background blue value */
 472:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_BG_InitStruct->DMA2D_BGC_BLUE = 0x00;
 647              		.loc 1 472 0
 648 0010 C361     		str	r3, [r0, #28]
 473:FWLIB/src/stm32f4xx_dma2d.c **** 
 474:FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D background green value */
 475:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_BG_InitStruct->DMA2D_BGC_GREEN = 0x00;
 649              		.loc 1 475 0
 650 0012 0362     		str	r3, [r0, #32]
 476:FWLIB/src/stm32f4xx_dma2d.c **** 
 477:FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D background red value */
 478:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_BG_InitStruct->DMA2D_BGC_RED = 0x00;
 651              		.loc 1 478 0
 652 0014 4362     		str	r3, [r0, #36]
 479:FWLIB/src/stm32f4xx_dma2d.c **** 
 480:FWLIB/src/stm32f4xx_dma2d.c ****   /*!< Initialize the DMA2D background CLUT memory address */
 481:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_BG_InitStruct->DMA2D_BGCMAR = 0x00;
 653              		.loc 1 481 0
 654 0016 8362     		str	r3, [r0, #40]
 655 0018 7047     		bx	lr
 656              		.cfi_endproc
 657              	.LFE132:
 659              		.section	.text.DMA2D_FGStart,"ax",%progbits
 660              		.align	1
 661              		.global	DMA2D_FGStart
 662              		.syntax unified
 663              		.thumb
 664              		.thumb_func
ARM GAS  /tmp/cc8b35bz.s 			page 21


 665              		.fpu fpv4-sp-d16
 667              	DMA2D_FGStart:
 668              	.LFB133:
 482:FWLIB/src/stm32f4xx_dma2d.c **** }
 483:FWLIB/src/stm32f4xx_dma2d.c **** 
 484:FWLIB/src/stm32f4xx_dma2d.c **** /**
 485:FWLIB/src/stm32f4xx_dma2d.c ****   * @brief  Start the automatic loading of the CLUT or abort the transfer.
 486:FWLIB/src/stm32f4xx_dma2d.c ****   * @param  NewState: new state of the DMA2D peripheral.
 487:FWLIB/src/stm32f4xx_dma2d.c ****   *   This parameter can be: ENABLE or DISABLE.
 488:FWLIB/src/stm32f4xx_dma2d.c ****   * @retval None
 489:FWLIB/src/stm32f4xx_dma2d.c ****   */
 490:FWLIB/src/stm32f4xx_dma2d.c **** 
 491:FWLIB/src/stm32f4xx_dma2d.c **** void DMA2D_FGStart(FunctionalState NewState) 
 492:FWLIB/src/stm32f4xx_dma2d.c **** {
 669              		.loc 1 492 0
 670              		.cfi_startproc
 671              		@ args = 0, pretend = 0, frame = 0
 672              		@ frame_needed = 0, uses_anonymous_args = 0
 673              		@ link register save eliminated.
 674              	.LVL48:
 493:FWLIB/src/stm32f4xx_dma2d.c ****   /* Check the parameters */
 494:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 495:FWLIB/src/stm32f4xx_dma2d.c **** 
 496:FWLIB/src/stm32f4xx_dma2d.c ****   if (NewState != DISABLE)
 675              		.loc 1 496 0
 676 0000 28B9     		cbnz	r0, .L42
 497:FWLIB/src/stm32f4xx_dma2d.c ****   {
 498:FWLIB/src/stm32f4xx_dma2d.c ****     /* Start the automatic loading of the CLUT */
 499:FWLIB/src/stm32f4xx_dma2d.c ****     DMA2D->FGPFCCR |= DMA2D_FGPFCCR_START;
 500:FWLIB/src/stm32f4xx_dma2d.c ****   }
 501:FWLIB/src/stm32f4xx_dma2d.c ****   else
 502:FWLIB/src/stm32f4xx_dma2d.c ****   {
 503:FWLIB/src/stm32f4xx_dma2d.c ****     /* abort the transfer */
 504:FWLIB/src/stm32f4xx_dma2d.c ****     DMA2D->FGPFCCR &= (uint32_t)~DMA2D_FGPFCCR_START;
 677              		.loc 1 504 0
 678 0002 064A     		ldr	r2, .L43
 679 0004 D369     		ldr	r3, [r2, #28]
 680 0006 23F02003 		bic	r3, r3, #32
 681 000a D361     		str	r3, [r2, #28]
 682 000c 7047     		bx	lr
 683              	.L42:
 499:FWLIB/src/stm32f4xx_dma2d.c ****   }
 684              		.loc 1 499 0
 685 000e 034A     		ldr	r2, .L43
 686 0010 D369     		ldr	r3, [r2, #28]
 687 0012 43F02003 		orr	r3, r3, #32
 688 0016 D361     		str	r3, [r2, #28]
 689 0018 7047     		bx	lr
 690              	.L44:
 691 001a 00BF     		.align	2
 692              	.L43:
 693 001c 00B00240 		.word	1073917952
 694              		.cfi_endproc
 695              	.LFE133:
 697              		.section	.text.DMA2D_BGStart,"ax",%progbits
 698              		.align	1
 699              		.global	DMA2D_BGStart
ARM GAS  /tmp/cc8b35bz.s 			page 22


 700              		.syntax unified
 701              		.thumb
 702              		.thumb_func
 703              		.fpu fpv4-sp-d16
 705              	DMA2D_BGStart:
 706              	.LFB134:
 505:FWLIB/src/stm32f4xx_dma2d.c ****   }
 506:FWLIB/src/stm32f4xx_dma2d.c **** }
 507:FWLIB/src/stm32f4xx_dma2d.c **** 
 508:FWLIB/src/stm32f4xx_dma2d.c **** /**
 509:FWLIB/src/stm32f4xx_dma2d.c ****   * @brief  Start the automatic loading of the CLUT or abort the transfer.
 510:FWLIB/src/stm32f4xx_dma2d.c ****   * @param  NewState: new state of the DMA2D peripheral.
 511:FWLIB/src/stm32f4xx_dma2d.c ****   *   This parameter can be: ENABLE or DISABLE.
 512:FWLIB/src/stm32f4xx_dma2d.c ****   * @retval None
 513:FWLIB/src/stm32f4xx_dma2d.c ****   */
 514:FWLIB/src/stm32f4xx_dma2d.c ****   
 515:FWLIB/src/stm32f4xx_dma2d.c **** void DMA2D_BGStart(FunctionalState NewState) 
 516:FWLIB/src/stm32f4xx_dma2d.c **** {
 707              		.loc 1 516 0
 708              		.cfi_startproc
 709              		@ args = 0, pretend = 0, frame = 0
 710              		@ frame_needed = 0, uses_anonymous_args = 0
 711              		@ link register save eliminated.
 712              	.LVL49:
 517:FWLIB/src/stm32f4xx_dma2d.c ****   /* Check the parameters */
 518:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 519:FWLIB/src/stm32f4xx_dma2d.c ****   
 520:FWLIB/src/stm32f4xx_dma2d.c ****   if (NewState != DISABLE)
 713              		.loc 1 520 0
 714 0000 28B9     		cbnz	r0, .L48
 521:FWLIB/src/stm32f4xx_dma2d.c ****   {
 522:FWLIB/src/stm32f4xx_dma2d.c ****     /* Start the automatic loading of the CLUT */
 523:FWLIB/src/stm32f4xx_dma2d.c ****     DMA2D->BGPFCCR |= DMA2D_BGPFCCR_START;
 524:FWLIB/src/stm32f4xx_dma2d.c ****   }
 525:FWLIB/src/stm32f4xx_dma2d.c ****   else
 526:FWLIB/src/stm32f4xx_dma2d.c ****   {
 527:FWLIB/src/stm32f4xx_dma2d.c ****     /* abort the transfer */
 528:FWLIB/src/stm32f4xx_dma2d.c ****     DMA2D->BGPFCCR &= (uint32_t)~DMA2D_BGPFCCR_START;
 715              		.loc 1 528 0
 716 0002 064A     		ldr	r2, .L49
 717 0004 536A     		ldr	r3, [r2, #36]
 718 0006 23F02003 		bic	r3, r3, #32
 719 000a 5362     		str	r3, [r2, #36]
 720 000c 7047     		bx	lr
 721              	.L48:
 523:FWLIB/src/stm32f4xx_dma2d.c ****   }
 722              		.loc 1 523 0
 723 000e 034A     		ldr	r2, .L49
 724 0010 536A     		ldr	r3, [r2, #36]
 725 0012 43F02003 		orr	r3, r3, #32
 726 0016 5362     		str	r3, [r2, #36]
 727 0018 7047     		bx	lr
 728              	.L50:
 729 001a 00BF     		.align	2
 730              	.L49:
 731 001c 00B00240 		.word	1073917952
 732              		.cfi_endproc
ARM GAS  /tmp/cc8b35bz.s 			page 23


 733              	.LFE134:
 735              		.section	.text.DMA2D_DeadTimeConfig,"ax",%progbits
 736              		.align	1
 737              		.global	DMA2D_DeadTimeConfig
 738              		.syntax unified
 739              		.thumb
 740              		.thumb_func
 741              		.fpu fpv4-sp-d16
 743              	DMA2D_DeadTimeConfig:
 744              	.LFB135:
 529:FWLIB/src/stm32f4xx_dma2d.c ****   }
 530:FWLIB/src/stm32f4xx_dma2d.c **** }
 531:FWLIB/src/stm32f4xx_dma2d.c **** 
 532:FWLIB/src/stm32f4xx_dma2d.c **** /**
 533:FWLIB/src/stm32f4xx_dma2d.c ****   * @brief  Configures the DMA2D dead time.
 534:FWLIB/src/stm32f4xx_dma2d.c ****   * @param  DMA2D_DeadTime: specifies the DMA2D dead time.
 535:FWLIB/src/stm32f4xx_dma2d.c ****   *   This parameter can be one of the following values:
 536:FWLIB/src/stm32f4xx_dma2d.c ****   * @retval None
 537:FWLIB/src/stm32f4xx_dma2d.c ****   */
 538:FWLIB/src/stm32f4xx_dma2d.c **** void DMA2D_DeadTimeConfig(uint32_t DMA2D_DeadTime, FunctionalState NewState)
 539:FWLIB/src/stm32f4xx_dma2d.c **** {
 745              		.loc 1 539 0
 746              		.cfi_startproc
 747              		@ args = 0, pretend = 0, frame = 0
 748              		@ frame_needed = 0, uses_anonymous_args = 0
 749              		@ link register save eliminated.
 750              	.LVL50:
 540:FWLIB/src/stm32f4xx_dma2d.c ****    uint32_t DeadTime;
 541:FWLIB/src/stm32f4xx_dma2d.c **** 
 542:FWLIB/src/stm32f4xx_dma2d.c ****   /* Check the parameters */
 543:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_DEAD_TIME(DMA2D_DeadTime));
 544:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 545:FWLIB/src/stm32f4xx_dma2d.c **** 
 546:FWLIB/src/stm32f4xx_dma2d.c ****   if (NewState != DISABLE)
 751              		.loc 1 546 0
 752 0000 29B9     		cbnz	r1, .L54
 547:FWLIB/src/stm32f4xx_dma2d.c ****   {
 548:FWLIB/src/stm32f4xx_dma2d.c ****     /* Enable and Configures the dead time */
 549:FWLIB/src/stm32f4xx_dma2d.c ****     DMA2D->AMTCR &= (uint32_t)DEAD_MASK;
 550:FWLIB/src/stm32f4xx_dma2d.c ****     DeadTime = DMA2D_DeadTime << 8;
 551:FWLIB/src/stm32f4xx_dma2d.c ****     DMA2D->AMTCR |= (DeadTime | DMA2D_AMTCR_EN);
 552:FWLIB/src/stm32f4xx_dma2d.c ****   }
 553:FWLIB/src/stm32f4xx_dma2d.c ****   else
 554:FWLIB/src/stm32f4xx_dma2d.c ****   {
 555:FWLIB/src/stm32f4xx_dma2d.c ****      DMA2D->AMTCR &= ~(uint32_t)DMA2D_AMTCR_EN;
 753              		.loc 1 555 0
 754 0002 0A4A     		ldr	r2, .L55
 755 0004 D36C     		ldr	r3, [r2, #76]
 756 0006 23F00103 		bic	r3, r3, #1
 757 000a D364     		str	r3, [r2, #76]
 758 000c 7047     		bx	lr
 759              	.L54:
 549:FWLIB/src/stm32f4xx_dma2d.c ****     DeadTime = DMA2D_DeadTime << 8;
 760              		.loc 1 549 0
 761 000e 074A     		ldr	r2, .L55
 762 0010 D36C     		ldr	r3, [r2, #76]
 763 0012 23F47F43 		bic	r3, r3, #65280
ARM GAS  /tmp/cc8b35bz.s 			page 24


 764 0016 23F00103 		bic	r3, r3, #1
 765 001a D364     		str	r3, [r2, #76]
 766              	.LVL51:
 551:FWLIB/src/stm32f4xx_dma2d.c ****   }
 767              		.loc 1 551 0
 768 001c D36C     		ldr	r3, [r2, #76]
 769 001e 43EA0020 		orr	r0, r3, r0, lsl #8
 770              	.LVL52:
 771 0022 40F00100 		orr	r0, r0, #1
 772 0026 D064     		str	r0, [r2, #76]
 773 0028 7047     		bx	lr
 774              	.L56:
 775 002a 00BF     		.align	2
 776              	.L55:
 777 002c 00B00240 		.word	1073917952
 778              		.cfi_endproc
 779              	.LFE135:
 781              		.section	.text.DMA2D_LineWatermarkConfig,"ax",%progbits
 782              		.align	1
 783              		.global	DMA2D_LineWatermarkConfig
 784              		.syntax unified
 785              		.thumb
 786              		.thumb_func
 787              		.fpu fpv4-sp-d16
 789              	DMA2D_LineWatermarkConfig:
 790              	.LFB136:
 556:FWLIB/src/stm32f4xx_dma2d.c ****   }
 557:FWLIB/src/stm32f4xx_dma2d.c **** }
 558:FWLIB/src/stm32f4xx_dma2d.c **** 
 559:FWLIB/src/stm32f4xx_dma2d.c **** /**
 560:FWLIB/src/stm32f4xx_dma2d.c ****   * @brief  Define the configuration of the line watermark .
 561:FWLIB/src/stm32f4xx_dma2d.c ****   * @param  DMA2D_LWatermarkConfig: Line Watermark configuration.
 562:FWLIB/src/stm32f4xx_dma2d.c ****   * @retval None
 563:FWLIB/src/stm32f4xx_dma2d.c ****   */
 564:FWLIB/src/stm32f4xx_dma2d.c **** 
 565:FWLIB/src/stm32f4xx_dma2d.c **** void DMA2D_LineWatermarkConfig(uint32_t DMA2D_LWatermarkConfig)
 566:FWLIB/src/stm32f4xx_dma2d.c **** {
 791              		.loc 1 566 0
 792              		.cfi_startproc
 793              		@ args = 0, pretend = 0, frame = 0
 794              		@ frame_needed = 0, uses_anonymous_args = 0
 795              		@ link register save eliminated.
 796              	.LVL53:
 567:FWLIB/src/stm32f4xx_dma2d.c ****   /* Check the parameters */
 568:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_LineWatermark(DMA2D_LWatermarkConfig));
 569:FWLIB/src/stm32f4xx_dma2d.c **** 
 570:FWLIB/src/stm32f4xx_dma2d.c ****   /* Sets the Line watermark configuration */
 571:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->LWR = (uint32_t)DMA2D_LWatermarkConfig;
 797              		.loc 1 571 0
 798 0000 014B     		ldr	r3, .L58
 799 0002 9864     		str	r0, [r3, #72]
 800 0004 7047     		bx	lr
 801              	.L59:
 802 0006 00BF     		.align	2
 803              	.L58:
 804 0008 00B00240 		.word	1073917952
 805              		.cfi_endproc
ARM GAS  /tmp/cc8b35bz.s 			page 25


 806              	.LFE136:
 808              		.section	.text.DMA2D_ITConfig,"ax",%progbits
 809              		.align	1
 810              		.global	DMA2D_ITConfig
 811              		.syntax unified
 812              		.thumb
 813              		.thumb_func
 814              		.fpu fpv4-sp-d16
 816              	DMA2D_ITConfig:
 817              	.LFB137:
 572:FWLIB/src/stm32f4xx_dma2d.c **** }
 573:FWLIB/src/stm32f4xx_dma2d.c **** 
 574:FWLIB/src/stm32f4xx_dma2d.c **** /**
 575:FWLIB/src/stm32f4xx_dma2d.c ****   * @}
 576:FWLIB/src/stm32f4xx_dma2d.c ****   */
 577:FWLIB/src/stm32f4xx_dma2d.c **** 
 578:FWLIB/src/stm32f4xx_dma2d.c **** /** @defgroup DMA2D_Group2 Interrupts and flags management functions
 579:FWLIB/src/stm32f4xx_dma2d.c ****  *  @brief   Interrupts and flags management functions
 580:FWLIB/src/stm32f4xx_dma2d.c ****  *
 581:FWLIB/src/stm32f4xx_dma2d.c **** @verbatim
 582:FWLIB/src/stm32f4xx_dma2d.c ****  ===============================================================================
 583:FWLIB/src/stm32f4xx_dma2d.c ****             ##### Interrupts and flags management functions #####
 584:FWLIB/src/stm32f4xx_dma2d.c ****  ===============================================================================
 585:FWLIB/src/stm32f4xx_dma2d.c **** 
 586:FWLIB/src/stm32f4xx_dma2d.c ****     [..] This section provides functions allowing to configure the DMA2D 
 587:FWLIB/src/stm32f4xx_dma2d.c ****          Interrupts and to get the status and clear flags and Interrupts 
 588:FWLIB/src/stm32f4xx_dma2d.c ****          pending bits.
 589:FWLIB/src/stm32f4xx_dma2d.c ****     [..] The DMA2D provides 6 Interrupts sources and 6 Flags
 590:FWLIB/src/stm32f4xx_dma2d.c ****     
 591:FWLIB/src/stm32f4xx_dma2d.c ****     *** Flags ***
 592:FWLIB/src/stm32f4xx_dma2d.c ****     =============
 593:FWLIB/src/stm32f4xx_dma2d.c ****     [..]
 594:FWLIB/src/stm32f4xx_dma2d.c ****       (+) DMA2D_FLAG_CE : Configuration Error Interrupt flag
 595:FWLIB/src/stm32f4xx_dma2d.c ****       (+) DMA2D_FLAG_CAE: CLUT Access Error Interrupt flag
 596:FWLIB/src/stm32f4xx_dma2d.c ****       (+) DMA2D_FLAG_TW:  Transfer Watermark Interrupt flag
 597:FWLIB/src/stm32f4xx_dma2d.c ****       (+) DMA2D_FLAG_TC:  Transfer Complete interrupt flag
 598:FWLIB/src/stm32f4xx_dma2d.c ****       (+) DMA2D_FLAG_TE:  Transfer Error interrupt flag
 599:FWLIB/src/stm32f4xx_dma2d.c ****       (+) DMA2D_FLAG_CTC: CLUT Transfer Complete Interrupt flag
 600:FWLIB/src/stm32f4xx_dma2d.c ****       
 601:FWLIB/src/stm32f4xx_dma2d.c ****     *** Interrupts ***
 602:FWLIB/src/stm32f4xx_dma2d.c ****     ==================
 603:FWLIB/src/stm32f4xx_dma2d.c ****     [..]
 604:FWLIB/src/stm32f4xx_dma2d.c ****       (+) DMA2D_IT_CE: Configuration Error Interrupt is generated when a wrong 
 605:FWLIB/src/stm32f4xx_dma2d.c ****                        configuration is detected
 606:FWLIB/src/stm32f4xx_dma2d.c ****       (+) DMA2D_IT_CAE: CLUT Access Error Interrupt
 607:FWLIB/src/stm32f4xx_dma2d.c ****       (+) DMA2D_IT_TW: Transfer Watermark Interrupt is generated when 
 608:FWLIB/src/stm32f4xx_dma2d.c ****                        the programmed watermark is reached 
 609:FWLIB/src/stm32f4xx_dma2d.c ****       (+) DMA2D_IT_TE: Transfer Error interrupt is generated when the CPU trying 
 610:FWLIB/src/stm32f4xx_dma2d.c ****                        to access the CLUT while a CLUT loading or a DMA2D1 transfer 
 611:FWLIB/src/stm32f4xx_dma2d.c ****                        is on going       
 612:FWLIB/src/stm32f4xx_dma2d.c ****       (+) DMA2D_IT_CTC: CLUT Transfer Complete Interrupt 
 613:FWLIB/src/stm32f4xx_dma2d.c ****       (+) DMA2D_IT_TC: Transfer Complete interrupt         
 614:FWLIB/src/stm32f4xx_dma2d.c **** @endverbatim
 615:FWLIB/src/stm32f4xx_dma2d.c ****   * @{
 616:FWLIB/src/stm32f4xx_dma2d.c ****   */
 617:FWLIB/src/stm32f4xx_dma2d.c **** /**
 618:FWLIB/src/stm32f4xx_dma2d.c ****   * @brief  Enables or disables the specified DMA2D's interrupts.
ARM GAS  /tmp/cc8b35bz.s 			page 26


 619:FWLIB/src/stm32f4xx_dma2d.c ****   * @param  DMA2D_IT: specifies the DMA2D interrupts sources to be enabled or disabled.
 620:FWLIB/src/stm32f4xx_dma2d.c ****   *   This parameter can be any combination of the following values:
 621:FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_IT_CE:   Configuration Error Interrupt Enable.
 622:FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_IT_CTC:  CLUT Transfer Complete Interrupt Enable.
 623:FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_IT_CAE:  CLUT Access Error Interrupt Enable.
 624:FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_IT_TW:   Transfer Watermark Interrupt Enable.
 625:FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_IT_TC:   Transfer Complete interrupt enable.
 626:FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_IT_TE:   Transfer Error interrupt enable.
 627:FWLIB/src/stm32f4xx_dma2d.c ****   * @param NewState: new state of the specified DMA2D interrupts.
 628:FWLIB/src/stm32f4xx_dma2d.c ****   *   This parameter can be: ENABLE or DISABLE.
 629:FWLIB/src/stm32f4xx_dma2d.c ****   * @retval None
 630:FWLIB/src/stm32f4xx_dma2d.c ****   */
 631:FWLIB/src/stm32f4xx_dma2d.c **** 
 632:FWLIB/src/stm32f4xx_dma2d.c **** void DMA2D_ITConfig(uint32_t DMA2D_IT, FunctionalState NewState)
 633:FWLIB/src/stm32f4xx_dma2d.c **** {
 818              		.loc 1 633 0
 819              		.cfi_startproc
 820              		@ args = 0, pretend = 0, frame = 0
 821              		@ frame_needed = 0, uses_anonymous_args = 0
 822              		@ link register save eliminated.
 823              	.LVL54:
 634:FWLIB/src/stm32f4xx_dma2d.c ****   /* Check the parameters */
 635:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_IT(DMA2D_IT));
 636:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 637:FWLIB/src/stm32f4xx_dma2d.c **** 
 638:FWLIB/src/stm32f4xx_dma2d.c ****   if (NewState != DISABLE)
 824              		.loc 1 638 0
 825 0000 29B9     		cbnz	r1, .L63
 639:FWLIB/src/stm32f4xx_dma2d.c ****   {
 640:FWLIB/src/stm32f4xx_dma2d.c ****     /* Enable the selected DMA2D interrupts */
 641:FWLIB/src/stm32f4xx_dma2d.c ****     DMA2D->CR |= DMA2D_IT;
 642:FWLIB/src/stm32f4xx_dma2d.c ****   }
 643:FWLIB/src/stm32f4xx_dma2d.c ****   else
 644:FWLIB/src/stm32f4xx_dma2d.c ****   {
 645:FWLIB/src/stm32f4xx_dma2d.c ****     /* Disable the selected DMA2D interrupts */
 646:FWLIB/src/stm32f4xx_dma2d.c ****     DMA2D->CR &= (uint32_t)~DMA2D_IT;
 826              		.loc 1 646 0
 827 0002 054A     		ldr	r2, .L64
 828 0004 1368     		ldr	r3, [r2]
 829 0006 23EA0000 		bic	r0, r3, r0
 830              	.LVL55:
 831 000a 1060     		str	r0, [r2]
 832 000c 7047     		bx	lr
 833              	.LVL56:
 834              	.L63:
 641:FWLIB/src/stm32f4xx_dma2d.c ****   }
 835              		.loc 1 641 0
 836 000e 024A     		ldr	r2, .L64
 837 0010 1368     		ldr	r3, [r2]
 838 0012 1843     		orrs	r0, r0, r3
 839              	.LVL57:
 840 0014 1060     		str	r0, [r2]
 841 0016 7047     		bx	lr
 842              	.L65:
 843              		.align	2
 844              	.L64:
 845 0018 00B00240 		.word	1073917952
ARM GAS  /tmp/cc8b35bz.s 			page 27


 846              		.cfi_endproc
 847              	.LFE137:
 849              		.section	.text.DMA2D_GetFlagStatus,"ax",%progbits
 850              		.align	1
 851              		.global	DMA2D_GetFlagStatus
 852              		.syntax unified
 853              		.thumb
 854              		.thumb_func
 855              		.fpu fpv4-sp-d16
 857              	DMA2D_GetFlagStatus:
 858              	.LFB138:
 647:FWLIB/src/stm32f4xx_dma2d.c ****   }
 648:FWLIB/src/stm32f4xx_dma2d.c **** }
 649:FWLIB/src/stm32f4xx_dma2d.c **** 
 650:FWLIB/src/stm32f4xx_dma2d.c **** /**
 651:FWLIB/src/stm32f4xx_dma2d.c ****   * @brief  Checks whether the specified DMA2D's flag is set or not.
 652:FWLIB/src/stm32f4xx_dma2d.c ****   * @param  DMA2D_FLAG: specifies the flag to check.
 653:FWLIB/src/stm32f4xx_dma2d.c ****   *   This parameter can be one of the following values:
 654:FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_FLAG_CE:   Configuration Error Interrupt flag.
 655:FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_FLAG_CTC:  CLUT Transfer Complete Interrupt flag.
 656:FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_FLAG_CAE:  CLUT Access Error Interrupt flag.
 657:FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_FLAG_TW:   Transfer Watermark Interrupt flag.
 658:FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_FLAG_TC:   Transfer Complete interrupt flag.
 659:FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_FLAG_TE:   Transfer Error interrupt flag.
 660:FWLIB/src/stm32f4xx_dma2d.c ****   * @retval The new state of DMA2D_FLAG (SET or RESET).
 661:FWLIB/src/stm32f4xx_dma2d.c ****   */
 662:FWLIB/src/stm32f4xx_dma2d.c **** 
 663:FWLIB/src/stm32f4xx_dma2d.c **** FlagStatus DMA2D_GetFlagStatus(uint32_t DMA2D_FLAG)
 664:FWLIB/src/stm32f4xx_dma2d.c **** {
 859              		.loc 1 664 0
 860              		.cfi_startproc
 861              		@ args = 0, pretend = 0, frame = 0
 862              		@ frame_needed = 0, uses_anonymous_args = 0
 863              		@ link register save eliminated.
 864              	.LVL58:
 665:FWLIB/src/stm32f4xx_dma2d.c ****   FlagStatus bitstatus = RESET;
 666:FWLIB/src/stm32f4xx_dma2d.c ****   
 667:FWLIB/src/stm32f4xx_dma2d.c ****   /* Check the parameters */
 668:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_GET_FLAG(DMA2D_FLAG));
 669:FWLIB/src/stm32f4xx_dma2d.c ****   
 670:FWLIB/src/stm32f4xx_dma2d.c ****   /* Check the status of the specified DMA2D flag */
 671:FWLIB/src/stm32f4xx_dma2d.c ****   if (((DMA2D->ISR) & DMA2D_FLAG) != (uint32_t)RESET)
 865              		.loc 1 671 0
 866 0000 034B     		ldr	r3, .L70
 867 0002 5B68     		ldr	r3, [r3, #4]
 868 0004 0342     		tst	r3, r0
 869 0006 01D1     		bne	.L69
 672:FWLIB/src/stm32f4xx_dma2d.c ****   {
 673:FWLIB/src/stm32f4xx_dma2d.c ****     /* DMA2D_FLAG is set */
 674:FWLIB/src/stm32f4xx_dma2d.c ****     bitstatus = SET;
 675:FWLIB/src/stm32f4xx_dma2d.c ****   }
 676:FWLIB/src/stm32f4xx_dma2d.c ****   else
 677:FWLIB/src/stm32f4xx_dma2d.c ****   {
 678:FWLIB/src/stm32f4xx_dma2d.c ****     /* DMA2D_FLAG is reset */
 679:FWLIB/src/stm32f4xx_dma2d.c ****     bitstatus = RESET;
 870              		.loc 1 679 0
 871 0008 0020     		movs	r0, #0
ARM GAS  /tmp/cc8b35bz.s 			page 28


 872              	.LVL59:
 680:FWLIB/src/stm32f4xx_dma2d.c ****   }
 681:FWLIB/src/stm32f4xx_dma2d.c ****   /* Return the DMA2D_FLAG status */
 682:FWLIB/src/stm32f4xx_dma2d.c ****   return bitstatus;
 683:FWLIB/src/stm32f4xx_dma2d.c **** }
 873              		.loc 1 683 0
 874 000a 7047     		bx	lr
 875              	.LVL60:
 876              	.L69:
 674:FWLIB/src/stm32f4xx_dma2d.c ****   }
 877              		.loc 1 674 0
 878 000c 0120     		movs	r0, #1
 879              	.LVL61:
 880 000e 7047     		bx	lr
 881              	.L71:
 882              		.align	2
 883              	.L70:
 884 0010 00B00240 		.word	1073917952
 885              		.cfi_endproc
 886              	.LFE138:
 888              		.section	.text.DMA2D_ClearFlag,"ax",%progbits
 889              		.align	1
 890              		.global	DMA2D_ClearFlag
 891              		.syntax unified
 892              		.thumb
 893              		.thumb_func
 894              		.fpu fpv4-sp-d16
 896              	DMA2D_ClearFlag:
 897              	.LFB139:
 684:FWLIB/src/stm32f4xx_dma2d.c **** 
 685:FWLIB/src/stm32f4xx_dma2d.c **** /**
 686:FWLIB/src/stm32f4xx_dma2d.c ****   * @brief  Clears the DMA2D's pending flags.
 687:FWLIB/src/stm32f4xx_dma2d.c ****   * @param  DMA2D_FLAG: specifies the flag to clear.
 688:FWLIB/src/stm32f4xx_dma2d.c ****   *   This parameter can be any combination of the following values:
 689:FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_FLAG_CE:   Configuration Error Interrupt flag.
 690:FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_FLAG_CTC:  CLUT Transfer Complete Interrupt flag.
 691:FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_FLAG_CAE:  CLUT Access Error Interrupt flag.
 692:FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_FLAG_TW:   Transfer Watermark Interrupt flag.
 693:FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_FLAG_TC:   Transfer Complete interrupt flag.
 694:FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_FLAG_TE:   Transfer Error interrupt flag.
 695:FWLIB/src/stm32f4xx_dma2d.c ****   * @retval None
 696:FWLIB/src/stm32f4xx_dma2d.c ****   */
 697:FWLIB/src/stm32f4xx_dma2d.c **** void DMA2D_ClearFlag(uint32_t DMA2D_FLAG)
 698:FWLIB/src/stm32f4xx_dma2d.c **** {
 898              		.loc 1 698 0
 899              		.cfi_startproc
 900              		@ args = 0, pretend = 0, frame = 0
 901              		@ frame_needed = 0, uses_anonymous_args = 0
 902              		@ link register save eliminated.
 903              	.LVL62:
 699:FWLIB/src/stm32f4xx_dma2d.c ****   /* Check the parameters */
 700:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_GET_FLAG(DMA2D_FLAG));
 701:FWLIB/src/stm32f4xx_dma2d.c ****     
 702:FWLIB/src/stm32f4xx_dma2d.c ****   /* Clear the corresponding DMA2D flag */
 703:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->IFCR = (uint32_t)DMA2D_FLAG;
 904              		.loc 1 703 0
 905 0000 014B     		ldr	r3, .L73
ARM GAS  /tmp/cc8b35bz.s 			page 29


 906 0002 9860     		str	r0, [r3, #8]
 907 0004 7047     		bx	lr
 908              	.L74:
 909 0006 00BF     		.align	2
 910              	.L73:
 911 0008 00B00240 		.word	1073917952
 912              		.cfi_endproc
 913              	.LFE139:
 915              		.section	.text.DMA2D_GetITStatus,"ax",%progbits
 916              		.align	1
 917              		.global	DMA2D_GetITStatus
 918              		.syntax unified
 919              		.thumb
 920              		.thumb_func
 921              		.fpu fpv4-sp-d16
 923              	DMA2D_GetITStatus:
 924              	.LFB140:
 704:FWLIB/src/stm32f4xx_dma2d.c **** }
 705:FWLIB/src/stm32f4xx_dma2d.c **** 
 706:FWLIB/src/stm32f4xx_dma2d.c **** /**
 707:FWLIB/src/stm32f4xx_dma2d.c ****   * @brief  Checks whether the specified DMA2D's interrupt has occurred or not.
 708:FWLIB/src/stm32f4xx_dma2d.c ****   * @param  DMA2D_IT: specifies the DMA2D interrupts sources to check.
 709:FWLIB/src/stm32f4xx_dma2d.c ****   *   This parameter can be one of the following values:
 710:FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_IT_CE:   Configuration Error Interrupt Enable.
 711:FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_IT_CTC:  CLUT Transfer Complete Interrupt Enable.
 712:FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_IT_CAE:  CLUT Access Error Interrupt Enable.
 713:FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_IT_TW:   Transfer Watermark Interrupt Enable.
 714:FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_IT_TC:   Transfer Complete interrupt enable.
 715:FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_IT_TE:   Transfer Error interrupt enable.
 716:FWLIB/src/stm32f4xx_dma2d.c ****   * @retval The new state of the DMA2D_IT (SET or RESET).
 717:FWLIB/src/stm32f4xx_dma2d.c ****   */
 718:FWLIB/src/stm32f4xx_dma2d.c **** ITStatus DMA2D_GetITStatus(uint32_t DMA2D_IT)
 719:FWLIB/src/stm32f4xx_dma2d.c **** {
 925              		.loc 1 719 0
 926              		.cfi_startproc
 927              		@ args = 0, pretend = 0, frame = 0
 928              		@ frame_needed = 0, uses_anonymous_args = 0
 929              		@ link register save eliminated.
 930              	.LVL63:
 720:FWLIB/src/stm32f4xx_dma2d.c ****   ITStatus bitstatus = RESET;
 721:FWLIB/src/stm32f4xx_dma2d.c ****   uint32_t DMA2D_IT_FLAG = DMA2D_IT >> 8;
 722:FWLIB/src/stm32f4xx_dma2d.c ****   
 723:FWLIB/src/stm32f4xx_dma2d.c ****   /* Check the parameters */
 724:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_IT(DMA2D_IT));
 725:FWLIB/src/stm32f4xx_dma2d.c **** 
 726:FWLIB/src/stm32f4xx_dma2d.c ****   if ((DMA2D->ISR & DMA2D_IT_FLAG) != (uint32_t)RESET)
 931              		.loc 1 726 0
 932 0000 074B     		ldr	r3, .L80
 933 0002 5B68     		ldr	r3, [r3, #4]
 934 0004 13EA1023 		ands	r3, r3, r0, lsr #8
 935 0008 07D0     		beq	.L78
 727:FWLIB/src/stm32f4xx_dma2d.c ****   {
 728:FWLIB/src/stm32f4xx_dma2d.c ****     bitstatus = SET;
 936              		.loc 1 728 0
 937 000a 0123     		movs	r3, #1
 938              	.L76:
 939              	.LVL64:
ARM GAS  /tmp/cc8b35bz.s 			page 30


 729:FWLIB/src/stm32f4xx_dma2d.c ****   }
 730:FWLIB/src/stm32f4xx_dma2d.c ****   else
 731:FWLIB/src/stm32f4xx_dma2d.c ****   {
 732:FWLIB/src/stm32f4xx_dma2d.c ****     bitstatus = RESET;
 733:FWLIB/src/stm32f4xx_dma2d.c ****   }
 734:FWLIB/src/stm32f4xx_dma2d.c ****   
 735:FWLIB/src/stm32f4xx_dma2d.c ****   if (((DMA2D->CR & DMA2D_IT) != (uint32_t)RESET) && (bitstatus != (uint32_t)RESET))
 940              		.loc 1 735 0
 941 000c 044A     		ldr	r2, .L80
 942 000e 1268     		ldr	r2, [r2]
 943 0010 1042     		tst	r0, r2
 944 0012 00D1     		bne	.L77
 736:FWLIB/src/stm32f4xx_dma2d.c ****   {
 737:FWLIB/src/stm32f4xx_dma2d.c ****     bitstatus = SET;
 738:FWLIB/src/stm32f4xx_dma2d.c ****   }
 739:FWLIB/src/stm32f4xx_dma2d.c ****   else
 740:FWLIB/src/stm32f4xx_dma2d.c ****   {
 741:FWLIB/src/stm32f4xx_dma2d.c ****     bitstatus = RESET;
 945              		.loc 1 741 0
 946 0014 0023     		movs	r3, #0
 947              	.LVL65:
 948              	.L77:
 742:FWLIB/src/stm32f4xx_dma2d.c ****   }
 743:FWLIB/src/stm32f4xx_dma2d.c ****   return bitstatus;
 744:FWLIB/src/stm32f4xx_dma2d.c **** }
 949              		.loc 1 744 0
 950 0016 1846     		mov	r0, r3
 951              	.LVL66:
 952 0018 7047     		bx	lr
 953              	.LVL67:
 954              	.L78:
 732:FWLIB/src/stm32f4xx_dma2d.c ****   }
 955              		.loc 1 732 0
 956 001a 0023     		movs	r3, #0
 957 001c F6E7     		b	.L76
 958              	.L81:
 959 001e 00BF     		.align	2
 960              	.L80:
 961 0020 00B00240 		.word	1073917952
 962              		.cfi_endproc
 963              	.LFE140:
 965              		.section	.text.DMA2D_ClearITPendingBit,"ax",%progbits
 966              		.align	1
 967              		.global	DMA2D_ClearITPendingBit
 968              		.syntax unified
 969              		.thumb
 970              		.thumb_func
 971              		.fpu fpv4-sp-d16
 973              	DMA2D_ClearITPendingBit:
 974              	.LFB141:
 745:FWLIB/src/stm32f4xx_dma2d.c **** 
 746:FWLIB/src/stm32f4xx_dma2d.c **** /**
 747:FWLIB/src/stm32f4xx_dma2d.c ****   * @brief  Clears the DMA2D's interrupt pending bits.
 748:FWLIB/src/stm32f4xx_dma2d.c ****   * @param  DMA2D_IT: specifies the interrupt pending bit to clear.
 749:FWLIB/src/stm32f4xx_dma2d.c ****   *   This parameter can be any combination of the following values:
 750:FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_IT_CE:   Configuration Error Interrupt.
 751:FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_IT_CTC:  CLUT Transfer Complete Interrupt.
ARM GAS  /tmp/cc8b35bz.s 			page 31


 752:FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_IT_CAE:  CLUT Access Error Interrupt.
 753:FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_IT_TW:   Transfer Watermark Interrupt.
 754:FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_IT_TC:   Transfer Complete interrupt.
 755:FWLIB/src/stm32f4xx_dma2d.c ****   *     @arg DMA2D_IT_TE:   Transfer Error interrupt.
 756:FWLIB/src/stm32f4xx_dma2d.c ****   * @retval None
 757:FWLIB/src/stm32f4xx_dma2d.c ****   */
 758:FWLIB/src/stm32f4xx_dma2d.c **** void DMA2D_ClearITPendingBit(uint32_t DMA2D_IT)
 759:FWLIB/src/stm32f4xx_dma2d.c **** {
 975              		.loc 1 759 0
 976              		.cfi_startproc
 977              		@ args = 0, pretend = 0, frame = 0
 978              		@ frame_needed = 0, uses_anonymous_args = 0
 979              		@ link register save eliminated.
 980              	.LVL68:
 760:FWLIB/src/stm32f4xx_dma2d.c ****   /* Check the parameters */
 761:FWLIB/src/stm32f4xx_dma2d.c ****   assert_param(IS_DMA2D_IT(DMA2D_IT));
 762:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D_IT = DMA2D_IT >> 8;
 981              		.loc 1 762 0
 982 0000 000A     		lsrs	r0, r0, #8
 983              	.LVL69:
 763:FWLIB/src/stm32f4xx_dma2d.c ****     
 764:FWLIB/src/stm32f4xx_dma2d.c ****   /* Clear the corresponding DMA2D Interrupt */
 765:FWLIB/src/stm32f4xx_dma2d.c ****   DMA2D->IFCR = (uint32_t)DMA2D_IT;
 984              		.loc 1 765 0
 985 0002 014B     		ldr	r3, .L83
 986 0004 9860     		str	r0, [r3, #8]
 987 0006 7047     		bx	lr
 988              	.L84:
 989              		.align	2
 990              	.L83:
 991 0008 00B00240 		.word	1073917952
 992              		.cfi_endproc
 993              	.LFE141:
 995              		.text
 996              	.Letext0:
 997              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 998              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 999              		.file 4 "F4_CORE/core_cm4.h"
 1000              		.file 5 "USER/system_stm32f4xx.h"
 1001              		.file 6 "USER/stm32f4xx.h"
 1002              		.file 7 "FWLIB/inc/stm32f4xx_dma2d.h"
 1003              		.file 8 "FWLIB/inc/stm32f4xx_rcc.h"
ARM GAS  /tmp/cc8b35bz.s 			page 32


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_dma2d.c
     /tmp/cc8b35bz.s:18     .text.DMA2D_DeInit:0000000000000000 $t
     /tmp/cc8b35bz.s:25     .text.DMA2D_DeInit:0000000000000000 DMA2D_DeInit
     /tmp/cc8b35bz.s:52     .text.DMA2D_Init:0000000000000000 $t
     /tmp/cc8b35bz.s:59     .text.DMA2D_Init:0000000000000000 DMA2D_Init
     /tmp/cc8b35bz.s:226    .text.DMA2D_Init:00000000000000bc $d
     /tmp/cc8b35bz.s:231    .text.DMA2D_StructInit:0000000000000000 $t
     /tmp/cc8b35bz.s:238    .text.DMA2D_StructInit:0000000000000000 DMA2D_StructInit
     /tmp/cc8b35bz.s:272    .text.DMA2D_StartTransfer:0000000000000000 $t
     /tmp/cc8b35bz.s:279    .text.DMA2D_StartTransfer:0000000000000000 DMA2D_StartTransfer
     /tmp/cc8b35bz.s:295    .text.DMA2D_StartTransfer:000000000000000c $d
     /tmp/cc8b35bz.s:300    .text.DMA2D_AbortTransfer:0000000000000000 $t
     /tmp/cc8b35bz.s:307    .text.DMA2D_AbortTransfer:0000000000000000 DMA2D_AbortTransfer
     /tmp/cc8b35bz.s:323    .text.DMA2D_AbortTransfer:000000000000000c $d
     /tmp/cc8b35bz.s:328    .text.DMA2D_Suspend:0000000000000000 $t
     /tmp/cc8b35bz.s:335    .text.DMA2D_Suspend:0000000000000000 DMA2D_Suspend
     /tmp/cc8b35bz.s:361    .text.DMA2D_Suspend:000000000000001c $d
     /tmp/cc8b35bz.s:366    .text.DMA2D_FGConfig:0000000000000000 $t
     /tmp/cc8b35bz.s:373    .text.DMA2D_FGConfig:0000000000000000 DMA2D_FGConfig
     /tmp/cc8b35bz.s:464    .text.DMA2D_FGConfig:0000000000000068 $d
     /tmp/cc8b35bz.s:470    .text.DMA2D_FG_StructInit:0000000000000000 $t
     /tmp/cc8b35bz.s:477    .text.DMA2D_FG_StructInit:0000000000000000 DMA2D_FG_StructInit
     /tmp/cc8b35bz.s:513    .text.DMA2D_BGConfig:0000000000000000 $t
     /tmp/cc8b35bz.s:520    .text.DMA2D_BGConfig:0000000000000000 DMA2D_BGConfig
     /tmp/cc8b35bz.s:611    .text.DMA2D_BGConfig:0000000000000068 $d
     /tmp/cc8b35bz.s:617    .text.DMA2D_BG_StructInit:0000000000000000 $t
     /tmp/cc8b35bz.s:624    .text.DMA2D_BG_StructInit:0000000000000000 DMA2D_BG_StructInit
     /tmp/cc8b35bz.s:660    .text.DMA2D_FGStart:0000000000000000 $t
     /tmp/cc8b35bz.s:667    .text.DMA2D_FGStart:0000000000000000 DMA2D_FGStart
     /tmp/cc8b35bz.s:693    .text.DMA2D_FGStart:000000000000001c $d
     /tmp/cc8b35bz.s:698    .text.DMA2D_BGStart:0000000000000000 $t
     /tmp/cc8b35bz.s:705    .text.DMA2D_BGStart:0000000000000000 DMA2D_BGStart
     /tmp/cc8b35bz.s:731    .text.DMA2D_BGStart:000000000000001c $d
     /tmp/cc8b35bz.s:736    .text.DMA2D_DeadTimeConfig:0000000000000000 $t
     /tmp/cc8b35bz.s:743    .text.DMA2D_DeadTimeConfig:0000000000000000 DMA2D_DeadTimeConfig
     /tmp/cc8b35bz.s:777    .text.DMA2D_DeadTimeConfig:000000000000002c $d
     /tmp/cc8b35bz.s:782    .text.DMA2D_LineWatermarkConfig:0000000000000000 $t
     /tmp/cc8b35bz.s:789    .text.DMA2D_LineWatermarkConfig:0000000000000000 DMA2D_LineWatermarkConfig
     /tmp/cc8b35bz.s:804    .text.DMA2D_LineWatermarkConfig:0000000000000008 $d
     /tmp/cc8b35bz.s:809    .text.DMA2D_ITConfig:0000000000000000 $t
     /tmp/cc8b35bz.s:816    .text.DMA2D_ITConfig:0000000000000000 DMA2D_ITConfig
     /tmp/cc8b35bz.s:845    .text.DMA2D_ITConfig:0000000000000018 $d
     /tmp/cc8b35bz.s:850    .text.DMA2D_GetFlagStatus:0000000000000000 $t
     /tmp/cc8b35bz.s:857    .text.DMA2D_GetFlagStatus:0000000000000000 DMA2D_GetFlagStatus
     /tmp/cc8b35bz.s:884    .text.DMA2D_GetFlagStatus:0000000000000010 $d
     /tmp/cc8b35bz.s:889    .text.DMA2D_ClearFlag:0000000000000000 $t
     /tmp/cc8b35bz.s:896    .text.DMA2D_ClearFlag:0000000000000000 DMA2D_ClearFlag
     /tmp/cc8b35bz.s:911    .text.DMA2D_ClearFlag:0000000000000008 $d
     /tmp/cc8b35bz.s:916    .text.DMA2D_GetITStatus:0000000000000000 $t
     /tmp/cc8b35bz.s:923    .text.DMA2D_GetITStatus:0000000000000000 DMA2D_GetITStatus
     /tmp/cc8b35bz.s:961    .text.DMA2D_GetITStatus:0000000000000020 $d
     /tmp/cc8b35bz.s:966    .text.DMA2D_ClearITPendingBit:0000000000000000 $t
     /tmp/cc8b35bz.s:973    .text.DMA2D_ClearITPendingBit:0000000000000000 DMA2D_ClearITPendingBit
     /tmp/cc8b35bz.s:991    .text.DMA2D_ClearITPendingBit:0000000000000008 $d
                     .debug_frame:0000000000000010 $d

ARM GAS  /tmp/cc8b35bz.s 			page 33


UNDEFINED SYMBOLS
RCC_AHB1PeriphResetCmd
