ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"task_manager.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.Task_Exit,"ax",%progbits
  22              		.align	2
  23              		.thumb
  24              		.thumb_func
  26              	Task_Exit:
  27              	.LFB127:
  28              		.file 1 "SYS/task_manager/task_manager.c"
   1:SYS/task_manager/task_manager.c **** #include "task_manager.h"
   2:SYS/task_manager/task_manager.c **** #include "runtime.h"
   3:SYS/task_manager/task_manager.c **** #include "string.h"
   4:SYS/task_manager/task_manager.c **** #include "stddef.h"
   5:SYS/task_manager/task_manager.c **** #include "periph_gpio.h"
   6:SYS/task_manager/task_manager.c **** #include "periph_timer.h"
   7:SYS/task_manager/task_manager.c **** #include <stdio.h>
   8:SYS/task_manager/task_manager.c **** #include "task_manager_cfg.h"
   9:SYS/task_manager/task_manager.c **** #include "binary_tree.h"
  10:SYS/task_manager/task_manager.c **** #include "linked_list.h"
  11:SYS/task_manager/task_manager.c **** #include "mmu.h"
  12:SYS/task_manager/task_manager.c **** 
  13:SYS/task_manager/task_manager.c **** //coder: 8_B!T0
  14:SYS/task_manager/task_manager.c **** //bref:
  15:SYS/task_manager/task_manager.c **** //estabishment a task running system with priority calling functional
  16:SYS/task_manager/task_manager.c **** //alway calling the highest priority function in all function under the ready table
  17:SYS/task_manager/task_manager.c **** //reference to ucos (version earler than v8.6)
  18:SYS/task_manager/task_manager.c **** 
  19:SYS/task_manager/task_manager.c **** /*
  20:SYS/task_manager/task_manager.c **** *******************************   TASK Handle    *******************************
  21:SYS/task_manager/task_manager.c **** 
  22:SYS/task_manager/task_manager.c ****              task0   task1   task2   task3   task4   task5   task6   task7
  23:SYS/task_manager/task_manager.c **** group0     |_______|_______|_______|_______|_______|_______|_______|_______|
  24:SYS/task_manager/task_manager.c **** group1     |_______|_______|_______|_______|_______|_______|_______|_______|
  25:SYS/task_manager/task_manager.c **** group2     |_______|_______|_______|_______|_______|_______|_______|_______|
  26:SYS/task_manager/task_manager.c **** group3     |_______|_______|_______|_______|_______|_______|_______|_______|
  27:SYS/task_manager/task_manager.c **** group4     |_______|_______|_______|_______|_______|_______|_______|_______|
  28:SYS/task_manager/task_manager.c **** group5     |_______|_______|_______|_______|_______|_______|_______|_______|
  29:SYS/task_manager/task_manager.c **** group6     |_______|_______|_______|_______|_______|_______|_______|_______|
  30:SYS/task_manager/task_manager.c **** group7     |_______|_______|_______|_______|_______|_______|_______|_______|
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 2


  31:SYS/task_manager/task_manager.c **** 
  32:SYS/task_manager/task_manager.c **** */
  33:SYS/task_manager/task_manager.c **** 
  34:SYS/task_manager/task_manager.c **** #define GET_TASKGROUP_PRIORITY(x) x >> 3
  35:SYS/task_manager/task_manager.c **** #define GET_TASKINGROUP_PRIORITY(y) y & 0X07
  36:SYS/task_manager/task_manager.c **** 
  37:SYS/task_manager/task_manager.c **** static const uint8_t Tsk_Handle[256] = {0, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,  //0x00 ~ 0
  38:SYS/task_manager/task_manager.c ****                                         4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,  //0x10 ~ 0
  39:SYS/task_manager/task_manager.c ****                                         5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,  //0x20 ~ 0
  40:SYS/task_manager/task_manager.c ****                                         4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,  //0x30 ~ 0
  41:SYS/task_manager/task_manager.c ****                                         6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,  //0x40 ~ 0
  42:SYS/task_manager/task_manager.c ****                                         4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,  //0x50 ~ 0
  43:SYS/task_manager/task_manager.c ****                                         5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,  //0x60 ~ 0
  44:SYS/task_manager/task_manager.c ****                                         4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,  //0x70 ~ 0
  45:SYS/task_manager/task_manager.c ****                                         7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,  //0x80 ~ 0
  46:SYS/task_manager/task_manager.c ****                                         4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,  //0x90 ~ 0
  47:SYS/task_manager/task_manager.c ****                                         5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,  //0xA0 ~ 0
  48:SYS/task_manager/task_manager.c ****                                         4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,  //0xB0 ~ 0
  49:SYS/task_manager/task_manager.c ****                                         6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,  //0xC0 ~ 0
  50:SYS/task_manager/task_manager.c ****                                         4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,  //0xD0 ~ 0
  51:SYS/task_manager/task_manager.c ****                                         5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,  //0xE0 ~ 0
  52:SYS/task_manager/task_manager.c ****                                         4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0}; //0xF0 ~ 0
  53:SYS/task_manager/task_manager.c **** 
  54:SYS/task_manager/task_manager.c **** Task *Task_Ptr[Group_Sum][Task_Priority_Sum];
  55:SYS/task_manager/task_manager.c **** volatile Task *CurRunTsk_Ptr = NULL;
  56:SYS/task_manager/task_manager.c **** volatile Task *NxtRunTsk_Ptr = NULL;
  57:SYS/task_manager/task_manager.c **** static bool traverse_start = false;
  58:SYS/task_manager/task_manager.c **** 
  59:SYS/task_manager/task_manager.c **** static volatile TskMap_State TskHdl_RdyMap = {.Grp = 0, .TskInGrp[0] = 0, .TskInGrp[1] = 0, .TskInG
  60:SYS/task_manager/task_manager.c **** static volatile TskMap_State TskHdl_PndMap = {.Grp = 0, .TskInGrp[0] = 0, .TskInGrp[1] = 0, .TskInG
  61:SYS/task_manager/task_manager.c **** static volatile TskMap_State TskHdl_BlkMap = {.Grp = 0, .TskInGrp[0] = 0, .TskInGrp[1] = 0, .TskInG
  62:SYS/task_manager/task_manager.c **** 
  63:SYS/task_manager/task_manager.c **** static Task_Create_RegList_s TskCrt_RegList = {.num = 0,
  64:SYS/task_manager/task_manager.c ****                                                .list = {.prv = NULL, .nxt = NULL, .data = NULL}};
  65:SYS/task_manager/task_manager.c **** static volatile TaskSys_State TskSys_state = TaskSys_Initial;
  66:SYS/task_manager/task_manager.c **** static uint32_t TaskSys_Idle_US = 0;
  67:SYS/task_manager/task_manager.c **** static float TaskSys_Idle_Ocupy = 0.0f;
  68:SYS/task_manager/task_manager.c **** static SYSTEM_RunTime TaskSys_StartTime;
  69:SYS/task_manager/task_manager.c **** 
  70:SYS/task_manager/task_manager.c **** static void Task_SetReady(Task *tsk);
  71:SYS/task_manager/task_manager.c **** static void Task_ClearReady(Task *tsk);
  72:SYS/task_manager/task_manager.c **** 
  73:SYS/task_manager/task_manager.c **** #if (TASK_SCHEDULER_TYPE == PREEMPTIVE_SCHDULER)
  74:SYS/task_manager/task_manager.c **** volatile Task *PndHstTsk_Ptr = NULL;
  75:SYS/task_manager/task_manager.c **** 
  76:SYS/task_manager/task_manager.c **** volatile TaskStack_ControlBlock CurTsk_TCB;
  77:SYS/task_manager/task_manager.c **** volatile TaskStack_ControlBlock NxtTsk_TCB;
  78:SYS/task_manager/task_manager.c **** 
  79:SYS/task_manager/task_manager.c **** static uint32_t Task_OS_StkMem[MSP_MEM_SPACE_SIZE];
  80:SYS/task_manager/task_manager.c **** uint32_t *Task_OS_ExpStkBase;
  81:SYS/task_manager/task_manager.c **** 
  82:SYS/task_manager/task_manager.c **** static void Task_SetStkPtr_Val(Task *tsk);
  83:SYS/task_manager/task_manager.c **** static void Task_ClearPending(Task *tsk);
  84:SYS/task_manager/task_manager.c **** static void Task_ClearBlock(Task *tsk);
  85:SYS/task_manager/task_manager.c **** static void Task_SetBASEPRI(uint32_t ulBASEPRI);
  86:SYS/task_manager/task_manager.c **** 
  87:SYS/task_manager/task_manager.c **** void Task_SetPending(Task *tsk);
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 3


  88:SYS/task_manager/task_manager.c **** #endif
  89:SYS/task_manager/task_manager.c **** 
  90:SYS/task_manager/task_manager.c **** static void Task_Exec(Task *tsk_ptr);
  91:SYS/task_manager/task_manager.c **** static void Task_SetPendSVPro(void);
  92:SYS/task_manager/task_manager.c **** void Task_TriggerPendSV(void);
  93:SYS/task_manager/task_manager.c **** 
  94:SYS/task_manager/task_manager.c **** static void ReSet_Task_Data(Task *task)
  95:SYS/task_manager/task_manager.c **** {
  96:SYS/task_manager/task_manager.c ****     task->priority.Suction.Group_Level = 0;
  97:SYS/task_manager/task_manager.c ****     task->priority.Suction.Task_Level = 0;
  98:SYS/task_manager/task_manager.c ****     task->Task_name = NULL;
  99:SYS/task_manager/task_manager.c ****     task->exec_frq = 0;
 100:SYS/task_manager/task_manager.c ****     task->exec_interval_us = 0;
 101:SYS/task_manager/task_manager.c ****     task->Exec_Func = NULL;
 102:SYS/task_manager/task_manager.c **** 
 103:SYS/task_manager/task_manager.c ****     task->Exec_status.detect_exec_frq = 0;
 104:SYS/task_manager/task_manager.c ****     task->Exec_status.detect_exec_time_arv = 0;
 105:SYS/task_manager/task_manager.c ****     task->Exec_status.detect_exec_time_max = 0;
 106:SYS/task_manager/task_manager.c ****     task->Exec_status.Exec_Times = 0;
 107:SYS/task_manager/task_manager.c ****     task->Exec_status.cpu_opy = 0;
 108:SYS/task_manager/task_manager.c ****     task->Exec_status.totlal_running_time = 0;
 109:SYS/task_manager/task_manager.c **** 
 110:SYS/task_manager/task_manager.c ****     task->delay_info.on_delay = false;
 111:SYS/task_manager/task_manager.c ****     task->delay_info.tsk_hdl = 0;
 112:SYS/task_manager/task_manager.c ****     task->delay_info.time_unit = 0;
 113:SYS/task_manager/task_manager.c **** 
 114:SYS/task_manager/task_manager.c ****     List_ItemInit(&task->delay_item, &task->delay_info);
 115:SYS/task_manager/task_manager.c **** 
 116:SYS/task_manager/task_manager.c ****     RuntimeObj_Reset(&(task->Exec_status.Exec_Time));
 117:SYS/task_manager/task_manager.c ****     RuntimeObj_Reset(&(task->Exec_status.Init_Time));
 118:SYS/task_manager/task_manager.c ****     RuntimeObj_Reset(&(task->Exec_status.Start_Time));
 119:SYS/task_manager/task_manager.c **** 
 120:SYS/task_manager/task_manager.c ****     task->Exec_status.State = Task_Done;
 121:SYS/task_manager/task_manager.c **** }
 122:SYS/task_manager/task_manager.c **** 
 123:SYS/task_manager/task_manager.c **** static void Task_ReSet_BaseInfo(Task_Base_Info *info)
 124:SYS/task_manager/task_manager.c **** {
 125:SYS/task_manager/task_manager.c ****     info->avg_exec_us = 0;
 126:SYS/task_manager/task_manager.c ****     info->cpu_opy = 0;
 127:SYS/task_manager/task_manager.c ****     info->exec_frq = 0;
 128:SYS/task_manager/task_manager.c ****     info->exec_times = 0;
 129:SYS/task_manager/task_manager.c ****     info->group = 0;
 130:SYS/task_manager/task_manager.c ****     info->max_exec_us = 0;
 131:SYS/task_manager/task_manager.c ****     info->priority = 0;
 132:SYS/task_manager/task_manager.c **** 
 133:SYS/task_manager/task_manager.c ****     memset(info->name, NULL, TASK_NAME_MAXLEN);
 134:SYS/task_manager/task_manager.c **** }
 135:SYS/task_manager/task_manager.c **** 
 136:SYS/task_manager/task_manager.c **** static bool TaskSys_Init(void)
 137:SYS/task_manager/task_manager.c **** {
 138:SYS/task_manager/task_manager.c **** #if (TASK_SCHEDULER_TYPE == PREEMPTIVE_SCHDULER)
 139:SYS/task_manager/task_manager.c ****     //init OS Stack Memory Space
 140:SYS/task_manager/task_manager.c ****     memset(Task_OS_StkMem, NULL, MSP_MEM_SPACE_SIZE);
 141:SYS/task_manager/task_manager.c **** 
 142:SYS/task_manager/task_manager.c ****     Task_OS_ExpStkBase = Task_OS_StkMem + MSP_MEM_SPACE_SIZE - 1;
 143:SYS/task_manager/task_manager.c **** #endif
 144:SYS/task_manager/task_manager.c **** 
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 4


 145:SYS/task_manager/task_manager.c ****     //periph_Timer_CounterMode_Init(Timer_4, TimerCounter_1M_Prescaler, TimerCounter_1us_Period, 0,
 146:SYS/task_manager/task_manager.c ****     //periph_Timer_Counter_SetEnable(Timer_4, DISABLE);
 147:SYS/task_manager/task_manager.c **** 
 148:SYS/task_manager/task_manager.c ****     uint8_t index = 0;
 149:SYS/task_manager/task_manager.c **** 
 150:SYS/task_manager/task_manager.c ****     for (uint8_t group_index = Group_0; group_index < Group_Sum; group_index++)
 151:SYS/task_manager/task_manager.c ****     {
 152:SYS/task_manager/task_manager.c ****         for (uint8_t task_priority = Task_Priority_0; task_priority < Task_Priority_Sum; task_prior
 153:SYS/task_manager/task_manager.c ****         {
 154:SYS/task_manager/task_manager.c ****             ReSet_Task_Data(Task_Ptr[group_index][task_priority]);
 155:SYS/task_manager/task_manager.c **** 
 156:SYS/task_manager/task_manager.c **** #if (TASK_SCHEDULER_TYPE == PREEMPTIVE_SCHDULER)
 157:SYS/task_manager/task_manager.c ****             Task_Ptr[group_index][task_priority]->Stack_Depth = 0;
 158:SYS/task_manager/task_manager.c ****             Task_Ptr[group_index][task_priority]->TCB.Stack = NULL;
 159:SYS/task_manager/task_manager.c ****             Task_Ptr[group_index][task_priority]->TCB.Top_Stk_Ptr = NULL;
 160:SYS/task_manager/task_manager.c **** #endif
 161:SYS/task_manager/task_manager.c ****             Task_Ptr[group_index][task_priority] = NULL;
 162:SYS/task_manager/task_manager.c **** 
 163:SYS/task_manager/task_manager.c ****             index++;
 164:SYS/task_manager/task_manager.c ****         }
 165:SYS/task_manager/task_manager.c ****     }
 166:SYS/task_manager/task_manager.c **** 
 167:SYS/task_manager/task_manager.c ****     TskCrt_RegList.num = 0;
 168:SYS/task_manager/task_manager.c ****     TskCrt_RegList.list.data = NULL;
 169:SYS/task_manager/task_manager.c ****     TskCrt_RegList.list.nxt = NULL;
 170:SYS/task_manager/task_manager.c ****     TskCrt_RegList.list.prv = NULL;
 171:SYS/task_manager/task_manager.c **** 
 172:SYS/task_manager/task_manager.c ****     ReSet_Task_Data(CurRunTsk_Ptr);
 173:SYS/task_manager/task_manager.c ****     TskSys_state = TaskSys_Prepare;
 174:SYS/task_manager/task_manager.c **** 
 175:SYS/task_manager/task_manager.c ****     NVIC_SetPriority(PendSV_IRQn, 15);
 176:SYS/task_manager/task_manager.c **** }
 177:SYS/task_manager/task_manager.c **** 
 178:SYS/task_manager/task_manager.c **** static void Task_Exit(void)
 179:SYS/task_manager/task_manager.c **** {
  29              		.loc 1 179 0
  30              		.cfi_startproc
  31              		@ Volatile: function does not return.
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  35              	.L2:
  36 0000 FEE7     		b	.L2
  37              		.cfi_endproc
  38              	.LFE127:
  40 0002 00BF     		.section	.text.Task_SetBASEPRI,"ax",%progbits
  41              		.align	2
  42              		.thumb
  43              		.thumb_func
  45              	Task_SetBASEPRI:
  46              	.LFB135:
 180:SYS/task_manager/task_manager.c ****     //task caller will not exit
 181:SYS/task_manager/task_manager.c ****     while (true)
 182:SYS/task_manager/task_manager.c ****     {
 183:SYS/task_manager/task_manager.c ****     }
 184:SYS/task_manager/task_manager.c **** }
 185:SYS/task_manager/task_manager.c **** 
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 5


 186:SYS/task_manager/task_manager.c **** static void Task_Idle(void)
 187:SYS/task_manager/task_manager.c **** {
 188:SYS/task_manager/task_manager.c ****     SYSTEM_RunTime cur_time;
 189:SYS/task_manager/task_manager.c ****     SYSTEM_RunTime time_diff;
 190:SYS/task_manager/task_manager.c **** 
 191:SYS/task_manager/task_manager.c ****     RuntimeObj_Reset(&time_diff);
 192:SYS/task_manager/task_manager.c ****     RuntimeObj_Reset(&cur_time);
 193:SYS/task_manager/task_manager.c **** 
 194:SYS/task_manager/task_manager.c ****     cur_time = Get_CurrentRunningUs();
 195:SYS/task_manager/task_manager.c ****     time_diff = Get_TimeDifference_Between(TaskSys_StartTime, cur_time);
 196:SYS/task_manager/task_manager.c **** 
 197:SYS/task_manager/task_manager.c ****     TaskSys_Idle_US++;
 198:SYS/task_manager/task_manager.c ****     TaskSys_Idle_Ocupy = (TaskSys_Idle_US / (float)time_diff);
 199:SYS/task_manager/task_manager.c **** }
 200:SYS/task_manager/task_manager.c **** 
 201:SYS/task_manager/task_manager.c **** #if (TASK_SCHEDULER_TYPE == PREEMPTIVE_SCHDULER)
 202:SYS/task_manager/task_manager.c **** 
 203:SYS/task_manager/task_manager.c **** void Task_Resume_FromBlock(Task *tsk)
 204:SYS/task_manager/task_manager.c **** {
 205:SYS/task_manager/task_manager.c ****     Task_ClearBlock(tsk);
 206:SYS/task_manager/task_manager.c ****     Task_SetReady(tsk);
 207:SYS/task_manager/task_manager.c **** 
 208:SYS/task_manager/task_manager.c ****     tsk->Exec_status.State = Task_Running;
 209:SYS/task_manager/task_manager.c ****     NxtTsk_TCB.Top_Stk_Ptr = &tsk->TCB.Top_Stk_Ptr;
 210:SYS/task_manager/task_manager.c ****     NxtTsk_TCB.Stack = tsk->TCB.Stack;
 211:SYS/task_manager/task_manager.c ****     CurRunTsk_Ptr = tsk;
 212:SYS/task_manager/task_manager.c **** }
 213:SYS/task_manager/task_manager.c **** 
 214:SYS/task_manager/task_manager.c **** void Task_SetBlock(Task *tsk)
 215:SYS/task_manager/task_manager.c **** {
 216:SYS/task_manager/task_manager.c ****     uint8_t grp_id = GET_TASKGROUP_PRIORITY(tsk->priority.Priority);
 217:SYS/task_manager/task_manager.c ****     uint8_t tsk_id = GET_TASKINGROUP_PRIORITY(tsk->priority.Priority);
 218:SYS/task_manager/task_manager.c **** 
 219:SYS/task_manager/task_manager.c ****     //set current group block
 220:SYS/task_manager/task_manager.c ****     TskHdl_BlkMap.Grp.Flg |= 1 << grp_id;
 221:SYS/task_manager/task_manager.c ****     //set current task under this group flag to block
 222:SYS/task_manager/task_manager.c ****     TskHdl_BlkMap.TskInGrp[grp_id].Flg |= 1 << tsk_id;
 223:SYS/task_manager/task_manager.c **** 
 224:SYS/task_manager/task_manager.c ****     //reset task in ready reg group
 225:SYS/task_manager/task_manager.c ****     TskHdl_RdyMap.TskInGrp[grp_id].Flg &= ~(1 << tsk_id);
 226:SYS/task_manager/task_manager.c ****     //if no task ready then clear group reg
 227:SYS/task_manager/task_manager.c ****     if (TskHdl_RdyMap.TskInGrp[grp_id].Flg == 0)
 228:SYS/task_manager/task_manager.c ****     {
 229:SYS/task_manager/task_manager.c ****         TskHdl_RdyMap.Grp.Flg &= ~(1 << grp_id);
 230:SYS/task_manager/task_manager.c ****     }
 231:SYS/task_manager/task_manager.c **** 
 232:SYS/task_manager/task_manager.c ****     //set task state
 233:SYS/task_manager/task_manager.c ****     tsk->Exec_status.State = Task_Block;
 234:SYS/task_manager/task_manager.c **** 
 235:SYS/task_manager/task_manager.c ****     CurRunTsk_Ptr = NULL;
 236:SYS/task_manager/task_manager.c **** 
 237:SYS/task_manager/task_manager.c ****     Task_SetBASEPRI(0);
 238:SYS/task_manager/task_manager.c **** }
 239:SYS/task_manager/task_manager.c **** 
 240:SYS/task_manager/task_manager.c **** void Task_SetPending(Task *tsk)
 241:SYS/task_manager/task_manager.c **** {
 242:SYS/task_manager/task_manager.c ****     uint8_t grp_id = GET_TASKGROUP_PRIORITY(tsk->priority.Priority);
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 6


 243:SYS/task_manager/task_manager.c ****     uint8_t tsk_id = GET_TASKINGROUP_PRIORITY(tsk->priority.Priority);
 244:SYS/task_manager/task_manager.c **** 
 245:SYS/task_manager/task_manager.c ****     //set current group pending
 246:SYS/task_manager/task_manager.c ****     TskHdl_PndMap.Grp.Flg |= 1 << grp_id;
 247:SYS/task_manager/task_manager.c ****     //set current task under this group flag to ready
 248:SYS/task_manager/task_manager.c ****     TskHdl_PndMap.TskInGrp[grp_id].Flg |= 1 << tsk_id;
 249:SYS/task_manager/task_manager.c **** 
 250:SYS/task_manager/task_manager.c ****     //set task state
 251:SYS/task_manager/task_manager.c ****     tsk->Exec_status.State = Task_Pending;
 252:SYS/task_manager/task_manager.c **** }
 253:SYS/task_manager/task_manager.c **** 
 254:SYS/task_manager/task_manager.c **** void Task_SwitchStack(void)
 255:SYS/task_manager/task_manager.c **** {
 256:SYS/task_manager/task_manager.c ****     CurTsk_TCB = NxtTsk_TCB;
 257:SYS/task_manager/task_manager.c **** }
 258:SYS/task_manager/task_manager.c **** 
 259:SYS/task_manager/task_manager.c **** Task *Task_Get_HighestRank_PndTask(void)
 260:SYS/task_manager/task_manager.c **** {
 261:SYS/task_manager/task_manager.c ****     uint8_t grp_id;
 262:SYS/task_manager/task_manager.c ****     uint8_t tsk_id;
 263:SYS/task_manager/task_manager.c **** 
 264:SYS/task_manager/task_manager.c ****     if (TskHdl_PndMap.Grp.Flg)
 265:SYS/task_manager/task_manager.c ****     {
 266:SYS/task_manager/task_manager.c ****         //find group
 267:SYS/task_manager/task_manager.c ****         grp_id = Tsk_Handle[TskHdl_PndMap.Grp.Flg];
 268:SYS/task_manager/task_manager.c ****         //find task in group
 269:SYS/task_manager/task_manager.c ****         tsk_id = Tsk_Handle[TskHdl_PndMap.TskInGrp[grp_id].Flg];
 270:SYS/task_manager/task_manager.c ****     }
 271:SYS/task_manager/task_manager.c ****     else
 272:SYS/task_manager/task_manager.c ****         return NULL;
 273:SYS/task_manager/task_manager.c **** 
 274:SYS/task_manager/task_manager.c ****     if (Task_Ptr[grp_id][tsk_id] != NULL)
 275:SYS/task_manager/task_manager.c ****     {
 276:SYS/task_manager/task_manager.c ****         return Task_Ptr[grp_id][tsk_id];
 277:SYS/task_manager/task_manager.c ****     }
 278:SYS/task_manager/task_manager.c ****     else
 279:SYS/task_manager/task_manager.c ****     {
 280:SYS/task_manager/task_manager.c ****         TskHdl_PndMap.Grp.Flg &= ~(1 << grp_id);
 281:SYS/task_manager/task_manager.c ****         TskHdl_PndMap.TskInGrp[grp_id].Flg &= ~(1 << tsk_id);
 282:SYS/task_manager/task_manager.c ****         return NULL;
 283:SYS/task_manager/task_manager.c ****     }
 284:SYS/task_manager/task_manager.c **** }
 285:SYS/task_manager/task_manager.c **** 
 286:SYS/task_manager/task_manager.c **** static uint32_t Task_EnterCritical(void)
 287:SYS/task_manager/task_manager.c **** {
 288:SYS/task_manager/task_manager.c ****     /* Set BASEPRI to the max syscall priority to effect a critical
 289:SYS/task_manager/task_manager.c **** 	section. */
 290:SYS/task_manager/task_manager.c ****     uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 291:SYS/task_manager/task_manager.c **** 
 292:SYS/task_manager/task_manager.c ****     __asm volatile(
 293:SYS/task_manager/task_manager.c ****         "	mrs %0, basepri											\n"
 294:SYS/task_manager/task_manager.c ****         "	mov %1, %2												\n"
 295:SYS/task_manager/task_manager.c ****         "	msr basepri, %1											\n"
 296:SYS/task_manager/task_manager.c ****         "	isb														\n"
 297:SYS/task_manager/task_manager.c ****         "	dsb														\n"
 298:SYS/task_manager/task_manager.c ****         : "=r"(ulOriginalBASEPRI), "=r"(ulNewBASEPRI)
 299:SYS/task_manager/task_manager.c ****         : "i"(80)
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 7


 300:SYS/task_manager/task_manager.c ****         : "memory");
 301:SYS/task_manager/task_manager.c **** 
 302:SYS/task_manager/task_manager.c ****     /* This return will not be reached but is necessary to prevent compiler
 303:SYS/task_manager/task_manager.c **** 	warnings. */
 304:SYS/task_manager/task_manager.c ****     return ulOriginalBASEPRI;
 305:SYS/task_manager/task_manager.c **** }
 306:SYS/task_manager/task_manager.c **** 
 307:SYS/task_manager/task_manager.c **** __attribute__((nake)) static void Task_SetBASEPRI(uint32_t ulBASEPRI)
 308:SYS/task_manager/task_manager.c **** {
  47              		.loc 1 308 0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  51              		@ link register save eliminated.
  52              	.LVL0:
 309:SYS/task_manager/task_manager.c ****     __ASM("	msr basepri, %0	" ::"r"(ulBASEPRI)
  53              		.loc 1 309 0
  54              		.syntax unified
  55              	@ 309 "SYS/task_manager/task_manager.c" 1
  56 0000 80F31188 			msr basepri, r0	
  57              	@ 0 "" 2
  58              		.thumb
  59              		.syntax unified
  60 0004 7047     		bx	lr
  61              		.cfi_endproc
  62              	.LFE135:
  64 0006 00BF     		.section	.text.Task_SetReady,"ax",%progbits
  65              		.align	2
  66              		.thumb
  67              		.thumb_func
  69              	Task_SetReady:
  70              	.LFB143:
 310:SYS/task_manager/task_manager.c ****           : "memory");
 311:SYS/task_manager/task_manager.c **** }
 312:SYS/task_manager/task_manager.c **** 
 313:SYS/task_manager/task_manager.c **** __attribute__((naked)) static void Task_ExitCritical(void)
 314:SYS/task_manager/task_manager.c **** {
 315:SYS/task_manager/task_manager.c ****     /* Barrier instructions are not used as this function is only used to
 316:SYS/task_manager/task_manager.c **** 	lower the BASEPRI value. */
 317:SYS/task_manager/task_manager.c ****     __ASM("	msr basepri, %0	" ::"r"(0)
 318:SYS/task_manager/task_manager.c ****           : "memory");
 319:SYS/task_manager/task_manager.c **** }
 320:SYS/task_manager/task_manager.c **** 
 321:SYS/task_manager/task_manager.c **** __attribute__((naked)) static void Task_Recover(void)
 322:SYS/task_manager/task_manager.c **** {
 323:SYS/task_manager/task_manager.c ****     __ASM("LDR	  R3, CurrentTCBConst_Tmp2");
 324:SYS/task_manager/task_manager.c ****     __ASM("LDR    R1, [R3]");
 325:SYS/task_manager/task_manager.c ****     __ASM("LDR    R0, [R1]");
 326:SYS/task_manager/task_manager.c **** 
 327:SYS/task_manager/task_manager.c ****     __ASM("LDMIA  R0!, {R4-R11, R14}");
 328:SYS/task_manager/task_manager.c **** 
 329:SYS/task_manager/task_manager.c ****     __ASM("MSR    PSP, R0");
 330:SYS/task_manager/task_manager.c ****     __ASM("ISB");
 331:SYS/task_manager/task_manager.c ****     __ASM("BX     R14");
 332:SYS/task_manager/task_manager.c ****     __ASM(".ALIGN 4");
 333:SYS/task_manager/task_manager.c ****     __ASM("CurrentTCBConst_Tmp2: .word CurTsk_TCB");
 334:SYS/task_manager/task_manager.c **** }
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 8


 335:SYS/task_manager/task_manager.c **** 
 336:SYS/task_manager/task_manager.c **** __attribute__((naked)) void Task_SaveCurProc(void)
 337:SYS/task_manager/task_manager.c **** {
 338:SYS/task_manager/task_manager.c ****     __ASM("MRS    R0, PSP");
 339:SYS/task_manager/task_manager.c ****     __ASM("LDR	  R3, CurrentTCBConst_Tmp3");
 340:SYS/task_manager/task_manager.c ****     __ASM("LDR    R2, [R3]");
 341:SYS/task_manager/task_manager.c **** 
 342:SYS/task_manager/task_manager.c ****     __ASM("ISB");
 343:SYS/task_manager/task_manager.c **** 
 344:SYS/task_manager/task_manager.c ****     __ASM("STMDB    R0!, {R4-R11, R14}");
 345:SYS/task_manager/task_manager.c ****     __ASM("STR      R0, [R2]");
 346:SYS/task_manager/task_manager.c **** 
 347:SYS/task_manager/task_manager.c ****     /******************************  FPU SECTION  *********************************/
 348:SYS/task_manager/task_manager.c ****     __ASM("TST      R14, #0x10");
 349:SYS/task_manager/task_manager.c ****     __ASM("IT       EQ");
 350:SYS/task_manager/task_manager.c ****     __ASM("VSTMDBEQ R0!, {s16-s31}");
 351:SYS/task_manager/task_manager.c ****     /******************************  FPU SECTION  *********************************/
 352:SYS/task_manager/task_manager.c **** 
 353:SYS/task_manager/task_manager.c ****     __ASM("ISB");
 354:SYS/task_manager/task_manager.c ****     __ASM("BX       R14");
 355:SYS/task_manager/task_manager.c **** 
 356:SYS/task_manager/task_manager.c ****     __ASM("CurrentTCBConst_Tmp3: .word CurTsk_TCB");
 357:SYS/task_manager/task_manager.c **** }
 358:SYS/task_manager/task_manager.c **** 
 359:SYS/task_manager/task_manager.c **** __attribute__((naked)) void Task_Load(void)
 360:SYS/task_manager/task_manager.c **** {
 361:SYS/task_manager/task_manager.c ****     __ASM("LDR	  R3, =CurTsk_TCB");
 362:SYS/task_manager/task_manager.c ****     __ASM("LDR    R1, [R3]");
 363:SYS/task_manager/task_manager.c ****     __ASM("LDR    R0, [R1]");
 364:SYS/task_manager/task_manager.c **** 
 365:SYS/task_manager/task_manager.c ****     __ASM("LDMIA  R0!, {R4-R11, R14}");
 366:SYS/task_manager/task_manager.c **** 
 367:SYS/task_manager/task_manager.c ****     /******************************  FPU SECTION  *********************************/
 368:SYS/task_manager/task_manager.c ****     __ASM("TST      R14, #0x10");
 369:SYS/task_manager/task_manager.c ****     __ASM("IT       EQ");
 370:SYS/task_manager/task_manager.c ****     __ASM("VLDMIAEQ R0!, {s16-s31}");
 371:SYS/task_manager/task_manager.c ****     /******************************  FPU SECTION  *********************************/
 372:SYS/task_manager/task_manager.c **** 
 373:SYS/task_manager/task_manager.c ****     __ASM("MSR    PSP, R0");
 374:SYS/task_manager/task_manager.c ****     __ASM("ISB");
 375:SYS/task_manager/task_manager.c ****     //__ASM("MOV    R0, #240");
 376:SYS/task_manager/task_manager.c ****     //__ASM("MSR	  BASEPRI, R0");
 377:SYS/task_manager/task_manager.c ****     __ASM("BX     R14");
 378:SYS/task_manager/task_manager.c ****     __ASM(".ALIGN 4");
 379:SYS/task_manager/task_manager.c **** }
 380:SYS/task_manager/task_manager.c **** 
 381:SYS/task_manager/task_manager.c **** void Load_FirstTask(void)
 382:SYS/task_manager/task_manager.c **** {
 383:SYS/task_manager/task_manager.c ****     Task_Load();
 384:SYS/task_manager/task_manager.c **** }
 385:SYS/task_manager/task_manager.c **** 
 386:SYS/task_manager/task_manager.c **** __attribute__((naked)) void Task_SwitchContext(void)
 387:SYS/task_manager/task_manager.c **** {
 388:SYS/task_manager/task_manager.c ****     __ASM("MRS      R0, PSP");
 389:SYS/task_manager/task_manager.c ****     __ASM("ISB");
 390:SYS/task_manager/task_manager.c **** 
 391:SYS/task_manager/task_manager.c ****     __ASM("LDR      R3, CurrentTCBConst_Tmp");
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 9


 392:SYS/task_manager/task_manager.c ****     __ASM("LDR      R2, [R3]");
 393:SYS/task_manager/task_manager.c **** 
 394:SYS/task_manager/task_manager.c ****     /******************************  FPU SECTION  *********************************/
 395:SYS/task_manager/task_manager.c ****     __ASM("TST      R14, #0x10");
 396:SYS/task_manager/task_manager.c ****     __ASM("IT       EQ");
 397:SYS/task_manager/task_manager.c ****     __ASM("VSTMDBEQ R0!, {s16-s31}");
 398:SYS/task_manager/task_manager.c ****     /******************************  FPU SECTION  *********************************/
 399:SYS/task_manager/task_manager.c **** 
 400:SYS/task_manager/task_manager.c ****     __ASM("STMDB    R0!, {R4-R11, R14}");
 401:SYS/task_manager/task_manager.c ****     __ASM("STR      R0, [R2]");
 402:SYS/task_manager/task_manager.c **** 
 403:SYS/task_manager/task_manager.c ****     __ASM("STMDB    SP!, {R0, R3}");
 404:SYS/task_manager/task_manager.c ****     __ASM("MOV      R0, %0" ::"i"(0x50));
 405:SYS/task_manager/task_manager.c ****     __ASM("MSR      BASEPRI, R0");
 406:SYS/task_manager/task_manager.c **** 
 407:SYS/task_manager/task_manager.c ****     __ASM("DSB");
 408:SYS/task_manager/task_manager.c ****     __ASM("ISB");
 409:SYS/task_manager/task_manager.c **** 
 410:SYS/task_manager/task_manager.c ****     __ASM("BL       Task_SwitchStack");
 411:SYS/task_manager/task_manager.c **** 
 412:SYS/task_manager/task_manager.c ****     __ASM("MOV      R0, #0");
 413:SYS/task_manager/task_manager.c ****     __ASM("MSR      BASEPRI, R0");
 414:SYS/task_manager/task_manager.c ****     __ASM("LDMIA    SP!, {R0, R3}");
 415:SYS/task_manager/task_manager.c **** 
 416:SYS/task_manager/task_manager.c ****     __ASM("LDR      R1, [R3]");
 417:SYS/task_manager/task_manager.c ****     __ASM("LDR      R0, [R1]");
 418:SYS/task_manager/task_manager.c **** 
 419:SYS/task_manager/task_manager.c ****     __ASM("LDMIA    R0!, {R4-R11, R14}");
 420:SYS/task_manager/task_manager.c **** 
 421:SYS/task_manager/task_manager.c ****     /******************************  FPU SECTION  *********************************/
 422:SYS/task_manager/task_manager.c ****     __ASM("TST      R14, #0x10");
 423:SYS/task_manager/task_manager.c ****     __ASM("IT       EQ");
 424:SYS/task_manager/task_manager.c ****     __ASM("VLDMIAEQ R0!, {s16-s31}");
 425:SYS/task_manager/task_manager.c ****     /******************************  FPU SECTION  *********************************/
 426:SYS/task_manager/task_manager.c **** 
 427:SYS/task_manager/task_manager.c ****     __ASM("MSR      PSP,R0");
 428:SYS/task_manager/task_manager.c ****     __ASM("ISB");
 429:SYS/task_manager/task_manager.c ****     //__ASM("MOV      R0, #240");
 430:SYS/task_manager/task_manager.c ****     //__ASM("MSR	    BASEPRI, R0");
 431:SYS/task_manager/task_manager.c ****     __ASM("BX       R14");
 432:SYS/task_manager/task_manager.c **** 
 433:SYS/task_manager/task_manager.c ****     __ASM("CurrentTCBConst_Tmp: .word CurTsk_TCB");
 434:SYS/task_manager/task_manager.c ****     __ASM(".ALIGN 4");
 435:SYS/task_manager/task_manager.c **** }
 436:SYS/task_manager/task_manager.c **** 
 437:SYS/task_manager/task_manager.c **** static void Task_SetStkPtr_Val(Task *tsk)
 438:SYS/task_manager/task_manager.c **** {
 439:SYS/task_manager/task_manager.c ****     uint32_t *Tsk_Ptr_tmp = NULL;
 440:SYS/task_manager/task_manager.c **** 
 441:SYS/task_manager/task_manager.c ****     memset(tsk->TCB.Stack, TASK_STACK_DEFAULT, tsk->Stack_Depth * sizeof(uint32_t));
 442:SYS/task_manager/task_manager.c **** 
 443:SYS/task_manager/task_manager.c ****     Tsk_Ptr_tmp = &tsk->TCB.Stack + (tsk->Stack_Depth - (uint32_t)1);
 444:SYS/task_manager/task_manager.c ****     Tsk_Ptr_tmp = (uint32_t *)((uint32_t)(Tsk_Ptr_tmp)&0XFFFFFFF8ul);
 445:SYS/task_manager/task_manager.c **** 
 446:SYS/task_manager/task_manager.c ****     Tsk_Ptr_tmp--;
 447:SYS/task_manager/task_manager.c ****     *Tsk_Ptr_tmp = 0x01000000uL; /* xPSR */
 448:SYS/task_manager/task_manager.c **** 
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 10


 449:SYS/task_manager/task_manager.c ****     Tsk_Ptr_tmp--;
 450:SYS/task_manager/task_manager.c ****     *Tsk_Ptr_tmp = ((uint32_t)Task_Caller) & 0xfffffffeUL; /* PC */
 451:SYS/task_manager/task_manager.c **** 
 452:SYS/task_manager/task_manager.c ****     Tsk_Ptr_tmp--;
 453:SYS/task_manager/task_manager.c ****     *Tsk_Ptr_tmp = (uint32_t)Task_Exit; /* LR */
 454:SYS/task_manager/task_manager.c **** 
 455:SYS/task_manager/task_manager.c ****     /* Save code space by skipping register initialisation. */
 456:SYS/task_manager/task_manager.c ****     Tsk_Ptr_tmp -= 5;              /* R12, R3, R2 and R1. */
 457:SYS/task_manager/task_manager.c ****     *Tsk_Ptr_tmp = (uint32_t)NULL; /* R0 */
 458:SYS/task_manager/task_manager.c **** 
 459:SYS/task_manager/task_manager.c ****     /* A save method is being used that requires each task to maintain its
 460:SYS/task_manager/task_manager.c **** 	    own exec return value. */
 461:SYS/task_manager/task_manager.c ****     Tsk_Ptr_tmp--;
 462:SYS/task_manager/task_manager.c ****     *Tsk_Ptr_tmp = 0xfffffffd;
 463:SYS/task_manager/task_manager.c **** 
 464:SYS/task_manager/task_manager.c ****     Tsk_Ptr_tmp -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 465:SYS/task_manager/task_manager.c **** 
 466:SYS/task_manager/task_manager.c ****     //set task stack top pointer
 467:SYS/task_manager/task_manager.c ****     tsk->TCB.Top_Stk_Ptr = Tsk_Ptr_tmp; //&Tsk_Ptr_tmp
 468:SYS/task_manager/task_manager.c **** }
 469:SYS/task_manager/task_manager.c **** 
 470:SYS/task_manager/task_manager.c **** #endif
 471:SYS/task_manager/task_manager.c **** 
 472:SYS/task_manager/task_manager.c **** static void Task_SetReady(Task *tsk)
 473:SYS/task_manager/task_manager.c **** {
  71              		.loc 1 473 0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 0
  74              		@ frame_needed = 0, uses_anonymous_args = 0
  75              		@ link register save eliminated.
  76              	.LVL1:
  77 0000 70B4     		push	{r4, r5, r6}
  78              	.LCFI0:
  79              		.cfi_def_cfa_offset 12
  80              		.cfi_offset 4, -12
  81              		.cfi_offset 5, -8
  82              		.cfi_offset 6, -4
 474:SYS/task_manager/task_manager.c ****     uint8_t grp_id = GET_TASKGROUP_PRIORITY(tsk->priority.Priority);
  83              		.loc 1 474 0
  84 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
  85 0004 DA08     		lsrs	r2, r3, #3
  86              	.LVL2:
 475:SYS/task_manager/task_manager.c ****     uint8_t tsk_id = GET_TASKINGROUP_PRIORITY(tsk->priority.Priority);
  87              		.loc 1 475 0
  88 0006 03F00704 		and	r4, r3, #7
  89              	.LVL3:
 476:SYS/task_manager/task_manager.c **** 
 477:SYS/task_manager/task_manager.c ****     //set current group flag to ready
 478:SYS/task_manager/task_manager.c ****     TskHdl_RdyMap.Grp.Flg |= 1 << grp_id;
  90              		.loc 1 478 0
  91 000a 094D     		ldr	r5, .L6
  92 000c 2E78     		ldrb	r6, [r5]	@ zero_extendqisi2
  93 000e 0123     		movs	r3, #1
  94 0010 03FA02F1 		lsl	r1, r3, r2
  95 0014 3143     		orrs	r1, r1, r6
  96 0016 C9B2     		uxtb	r1, r1
  97 0018 2970     		strb	r1, [r5]
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 11


 479:SYS/task_manager/task_manager.c ****     //set current task under this group flag to ready
 480:SYS/task_manager/task_manager.c ****     TskHdl_RdyMap.TskInGrp[grp_id].Flg |= 1 << tsk_id;
  98              		.loc 1 480 0
  99 001a 2A44     		add	r2, r2, r5
 100              	.LVL4:
 101 001c 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
 102 001e A340     		lsls	r3, r3, r4
 103 0020 0B43     		orrs	r3, r3, r1
 104 0022 DBB2     		uxtb	r3, r3
 105 0024 5370     		strb	r3, [r2, #1]
 481:SYS/task_manager/task_manager.c **** 
 482:SYS/task_manager/task_manager.c ****     tsk->Exec_status.State = Task_Ready;
 106              		.loc 1 482 0
 107 0026 0023     		movs	r3, #0
 108 0028 80F84830 		strb	r3, [r0, #72]
 483:SYS/task_manager/task_manager.c **** }
 109              		.loc 1 483 0
 110 002c 70BC     		pop	{r4, r5, r6}
 111              	.LCFI1:
 112              		.cfi_restore 6
 113              		.cfi_restore 5
 114              		.cfi_restore 4
 115              		.cfi_def_cfa_offset 0
 116              	.LVL5:
 117 002e 7047     		bx	lr
 118              	.L7:
 119              		.align	2
 120              	.L6:
 121 0030 00000000 		.word	.LANCHOR0
 122              		.cfi_endproc
 123              	.LFE143:
 125              		.section	.text.Task_ClearBlock,"ax",%progbits
 126              		.align	2
 127              		.thumb
 128              		.thumb_func
 130              	Task_ClearBlock:
 131              	.LFB144:
 484:SYS/task_manager/task_manager.c **** 
 485:SYS/task_manager/task_manager.c **** static void Task_ClearBlock(Task *tsk)
 486:SYS/task_manager/task_manager.c **** {
 132              		.loc 1 486 0
 133              		.cfi_startproc
 134              		@ args = 0, pretend = 0, frame = 0
 135              		@ frame_needed = 0, uses_anonymous_args = 0
 136              		@ link register save eliminated.
 137              	.LVL6:
 138 0000 10B4     		push	{r4}
 139              	.LCFI2:
 140              		.cfi_def_cfa_offset 4
 141              		.cfi_offset 4, -4
 487:SYS/task_manager/task_manager.c ****     uint8_t grp_id = GET_TASKGROUP_PRIORITY(tsk->priority.Priority);
 142              		.loc 1 487 0
 143 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 144 0004 DC08     		lsrs	r4, r3, #3
 145              	.LVL7:
 488:SYS/task_manager/task_manager.c ****     uint8_t tsk_id = GET_TASKINGROUP_PRIORITY(tsk->priority.Priority);
 146              		.loc 1 488 0
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 12


 147 0006 03F00702 		and	r2, r3, #7
 148              	.LVL8:
 489:SYS/task_manager/task_manager.c **** 
 490:SYS/task_manager/task_manager.c ****     TskHdl_BlkMap.TskInGrp[grp_id].Flg &= ~(1 << tsk_id);
 149              		.loc 1 490 0
 150 000a 0B4B     		ldr	r3, .L11
 151 000c 2344     		add	r3, r3, r4
 152 000e 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 153 0010 0120     		movs	r0, #1
 154              	.LVL9:
 155 0012 00FA02F2 		lsl	r2, r0, r2
 156              	.LVL10:
 157 0016 21EA0202 		bic	r2, r1, r2
 158 001a 5A70     		strb	r2, [r3, #1]
 159              	.LVL11:
 491:SYS/task_manager/task_manager.c ****     if (TskHdl_BlkMap.TskInGrp[grp_id].Flg == 0)
 160              		.loc 1 491 0
 161 001c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 162 001e 13F0FF0F 		tst	r3, #255
 163 0022 06D1     		bne	.L8
 492:SYS/task_manager/task_manager.c ****     {
 493:SYS/task_manager/task_manager.c ****         TskHdl_BlkMap.Grp.Flg &= ~(1 << grp_id);
 164              		.loc 1 493 0
 165 0024 0449     		ldr	r1, .L11
 166 0026 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 167 0028 00FA04F4 		lsl	r4, r0, r4
 168              	.LVL12:
 169 002c 23EA0404 		bic	r4, r3, r4
 170 0030 0C70     		strb	r4, [r1]
 171              	.L8:
 494:SYS/task_manager/task_manager.c ****     }
 495:SYS/task_manager/task_manager.c **** }
 172              		.loc 1 495 0
 173 0032 5DF8044B 		ldr	r4, [sp], #4
 174              	.LCFI3:
 175              		.cfi_restore 4
 176              		.cfi_def_cfa_offset 0
 177 0036 7047     		bx	lr
 178              	.L12:
 179              		.align	2
 180              	.L11:
 181 0038 00000000 		.word	.LANCHOR1
 182              		.cfi_endproc
 183              	.LFE144:
 185              		.section	.text.Task_ClearPending,"ax",%progbits
 186              		.align	2
 187              		.thumb
 188              		.thumb_func
 190              	Task_ClearPending:
 191              	.LFB145:
 496:SYS/task_manager/task_manager.c **** 
 497:SYS/task_manager/task_manager.c **** static void Task_ClearPending(Task *tsk)
 498:SYS/task_manager/task_manager.c **** {
 192              		.loc 1 498 0
 193              		.cfi_startproc
 194              		@ args = 0, pretend = 0, frame = 0
 195              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 13


 196              		@ link register save eliminated.
 197              	.LVL13:
 198 0000 10B4     		push	{r4}
 199              	.LCFI4:
 200              		.cfi_def_cfa_offset 4
 201              		.cfi_offset 4, -4
 499:SYS/task_manager/task_manager.c ****     uint8_t grp_id = GET_TASKGROUP_PRIORITY(tsk->priority.Priority);
 202              		.loc 1 499 0
 203 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 204 0004 DC08     		lsrs	r4, r3, #3
 205              	.LVL14:
 500:SYS/task_manager/task_manager.c ****     uint8_t tsk_id = GET_TASKINGROUP_PRIORITY(tsk->priority.Priority);
 206              		.loc 1 500 0
 207 0006 03F00702 		and	r2, r3, #7
 208              	.LVL15:
 501:SYS/task_manager/task_manager.c **** 
 502:SYS/task_manager/task_manager.c ****     TskHdl_PndMap.TskInGrp[grp_id].Flg &= ~(1 << tsk_id);
 209              		.loc 1 502 0
 210 000a 0B4B     		ldr	r3, .L16
 211 000c 2344     		add	r3, r3, r4
 212 000e 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 213 0010 0120     		movs	r0, #1
 214              	.LVL16:
 215 0012 00FA02F2 		lsl	r2, r0, r2
 216              	.LVL17:
 217 0016 21EA0202 		bic	r2, r1, r2
 218 001a 5A70     		strb	r2, [r3, #1]
 219              	.LVL18:
 503:SYS/task_manager/task_manager.c ****     if (TskHdl_PndMap.TskInGrp[grp_id].Flg == 0)
 220              		.loc 1 503 0
 221 001c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 222 001e 13F0FF0F 		tst	r3, #255
 223 0022 06D1     		bne	.L13
 504:SYS/task_manager/task_manager.c ****     {
 505:SYS/task_manager/task_manager.c ****         TskHdl_PndMap.Grp.Flg &= ~(1 << grp_id);
 224              		.loc 1 505 0
 225 0024 0449     		ldr	r1, .L16
 226 0026 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 227 0028 00FA04F4 		lsl	r4, r0, r4
 228              	.LVL19:
 229 002c 23EA0404 		bic	r4, r3, r4
 230 0030 0C70     		strb	r4, [r1]
 231              	.L13:
 506:SYS/task_manager/task_manager.c ****     }
 507:SYS/task_manager/task_manager.c **** }
 232              		.loc 1 507 0
 233 0032 5DF8044B 		ldr	r4, [sp], #4
 234              	.LCFI5:
 235              		.cfi_restore 4
 236              		.cfi_def_cfa_offset 0
 237 0036 7047     		bx	lr
 238              	.L17:
 239              		.align	2
 240              	.L16:
 241 0038 00000000 		.word	.LANCHOR2
 242              		.cfi_endproc
 243              	.LFE145:
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 14


 245              		.section	.text.Task_ClearReady,"ax",%progbits
 246              		.align	2
 247              		.thumb
 248              		.thumb_func
 250              	Task_ClearReady:
 251              	.LFB146:
 508:SYS/task_manager/task_manager.c **** 
 509:SYS/task_manager/task_manager.c **** static void Task_ClearReady(Task *tsk)
 510:SYS/task_manager/task_manager.c **** {
 252              		.loc 1 510 0
 253              		.cfi_startproc
 254              		@ args = 0, pretend = 0, frame = 0
 255              		@ frame_needed = 0, uses_anonymous_args = 0
 256              		@ link register save eliminated.
 257              	.LVL20:
 258 0000 10B4     		push	{r4}
 259              	.LCFI6:
 260              		.cfi_def_cfa_offset 4
 261              		.cfi_offset 4, -4
 511:SYS/task_manager/task_manager.c ****     uint8_t grp_id = GET_TASKGROUP_PRIORITY(tsk->priority.Priority);
 262              		.loc 1 511 0
 263 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 264 0004 DC08     		lsrs	r4, r3, #3
 265              	.LVL21:
 512:SYS/task_manager/task_manager.c ****     uint8_t tsk_id = GET_TASKINGROUP_PRIORITY(tsk->priority.Priority);
 266              		.loc 1 512 0
 267 0006 03F00702 		and	r2, r3, #7
 268              	.LVL22:
 513:SYS/task_manager/task_manager.c **** 
 514:SYS/task_manager/task_manager.c ****     TskHdl_RdyMap.TskInGrp[grp_id].Flg &= ~(1 << tsk_id);
 269              		.loc 1 514 0
 270 000a 0B4B     		ldr	r3, .L21
 271 000c 2344     		add	r3, r3, r4
 272 000e 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 273 0010 0120     		movs	r0, #1
 274              	.LVL23:
 275 0012 00FA02F2 		lsl	r2, r0, r2
 276              	.LVL24:
 277 0016 21EA0202 		bic	r2, r1, r2
 278 001a 5A70     		strb	r2, [r3, #1]
 279              	.LVL25:
 515:SYS/task_manager/task_manager.c ****     if (TskHdl_RdyMap.TskInGrp[grp_id].Flg == 0)
 280              		.loc 1 515 0
 281 001c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 282 001e 13F0FF0F 		tst	r3, #255
 283 0022 06D1     		bne	.L18
 516:SYS/task_manager/task_manager.c ****     {
 517:SYS/task_manager/task_manager.c ****         TskHdl_RdyMap.Grp.Flg &= ~(1 << grp_id);
 284              		.loc 1 517 0
 285 0024 0449     		ldr	r1, .L21
 286 0026 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 287 0028 00FA04F4 		lsl	r4, r0, r4
 288              	.LVL26:
 289 002c 23EA0404 		bic	r4, r3, r4
 290 0030 0C70     		strb	r4, [r1]
 291              	.L18:
 518:SYS/task_manager/task_manager.c ****     }
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 15


 519:SYS/task_manager/task_manager.c **** }
 292              		.loc 1 519 0
 293 0032 5DF8044B 		ldr	r4, [sp], #4
 294              	.LCFI7:
 295              		.cfi_restore 4
 296              		.cfi_def_cfa_offset 0
 297 0036 7047     		bx	lr
 298              	.L22:
 299              		.align	2
 300              	.L21:
 301 0038 00000000 		.word	.LANCHOR0
 302              		.cfi_endproc
 303              	.LFE146:
 305              		.section	.text.Task_SetPendSVPro,"ax",%progbits
 306              		.align	2
 307              		.thumb
 308              		.thumb_func
 310              	Task_SetPendSVPro:
 311              	.LFB149:
 520:SYS/task_manager/task_manager.c **** 
 521:SYS/task_manager/task_manager.c **** Task *Task_Get_HighestRank_RdyTask(void)
 522:SYS/task_manager/task_manager.c **** {
 523:SYS/task_manager/task_manager.c ****     uint8_t grp_id = 0;
 524:SYS/task_manager/task_manager.c ****     uint8_t tsk_id = 0;
 525:SYS/task_manager/task_manager.c **** 
 526:SYS/task_manager/task_manager.c ****     if (TskHdl_RdyMap.Grp.Flg)
 527:SYS/task_manager/task_manager.c ****     {
 528:SYS/task_manager/task_manager.c ****         //find group
 529:SYS/task_manager/task_manager.c ****         grp_id = Tsk_Handle[TskHdl_RdyMap.Grp.Flg];
 530:SYS/task_manager/task_manager.c ****         //find task in group
 531:SYS/task_manager/task_manager.c ****         tsk_id = Tsk_Handle[TskHdl_RdyMap.TskInGrp[grp_id].Flg];
 532:SYS/task_manager/task_manager.c ****     }
 533:SYS/task_manager/task_manager.c ****     else
 534:SYS/task_manager/task_manager.c ****         return NULL;
 535:SYS/task_manager/task_manager.c **** 
 536:SYS/task_manager/task_manager.c ****     if (Task_Ptr[grp_id][tsk_id] != NULL)
 537:SYS/task_manager/task_manager.c ****     {
 538:SYS/task_manager/task_manager.c ****         return Task_Ptr[grp_id][tsk_id];
 539:SYS/task_manager/task_manager.c ****     }
 540:SYS/task_manager/task_manager.c ****     else
 541:SYS/task_manager/task_manager.c ****     {
 542:SYS/task_manager/task_manager.c ****         TskHdl_RdyMap.Grp.Flg &= ~(1 << grp_id);
 543:SYS/task_manager/task_manager.c ****         TskHdl_RdyMap.TskInGrp[grp_id].Flg &= ~(1 << tsk_id);
 544:SYS/task_manager/task_manager.c ****         return NULL;
 545:SYS/task_manager/task_manager.c ****     }
 546:SYS/task_manager/task_manager.c **** }
 547:SYS/task_manager/task_manager.c **** 
 548:SYS/task_manager/task_manager.c **** void Task_SetNextTask_Ptr(const Task *nxt)
 549:SYS/task_manager/task_manager.c **** {
 550:SYS/task_manager/task_manager.c ****     if (nxt != NULL)
 551:SYS/task_manager/task_manager.c ****     {
 552:SYS/task_manager/task_manager.c ****         NxtRunTsk_Ptr = nxt;
 553:SYS/task_manager/task_manager.c ****         NxtTsk_TCB.Top_Stk_Ptr = &NxtRunTsk_Ptr->TCB.Top_Stk_Ptr;
 554:SYS/task_manager/task_manager.c ****         NxtTsk_TCB.Stack = NxtRunTsk_Ptr->TCB.Stack;
 555:SYS/task_manager/task_manager.c ****     }
 556:SYS/task_manager/task_manager.c **** }
 557:SYS/task_manager/task_manager.c **** 
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 16


 558:SYS/task_manager/task_manager.c **** //first need to know is linux support AT&T formate ASM code
 559:SYS/task_manager/task_manager.c **** __attribute__((naked)) static void Task_SetPendSVPro(void)
 560:SYS/task_manager/task_manager.c **** {
 312              		.loc 1 560 0
 313              		.cfi_startproc
 314              		@ Naked Function: prologue and epilogue provided by programmer.
 315              		@ args = 0, pretend = 0, frame = 0
 316              		@ frame_needed = 0, uses_anonymous_args = 0
 561:SYS/task_manager/task_manager.c ****     //set pendsv interrupt
 562:SYS/task_manager/task_manager.c ****     __ASM(".equ NVIC_SYSPRI14, 0xE000ED22");
 317              		.loc 1 562 0
 318              		.syntax unified
 319              	@ 562 "SYS/task_manager/task_manager.c" 1
 320              		.equ NVIC_SYSPRI14, 0xE000ED22
 321              	@ 0 "" 2
 563:SYS/task_manager/task_manager.c ****     __ASM(".equ NVIC_PENDSV_PRI, 0xFF");
 322              		.loc 1 563 0
 323              	@ 563 "SYS/task_manager/task_manager.c" 1
 324              		.equ NVIC_PENDSV_PRI, 0xFF
 325              	@ 0 "" 2
 564:SYS/task_manager/task_manager.c **** 
 565:SYS/task_manager/task_manager.c ****     __ASM("LDR      R0, =NVIC_SYSPRI14");
 326              		.loc 1 565 0
 327              	@ 565 "SYS/task_manager/task_manager.c" 1
 328 0000 0548     		LDR      R0, =NVIC_SYSPRI14
 329              	@ 0 "" 2
 566:SYS/task_manager/task_manager.c ****     __ASM("LDR      R1, =NVIC_PENDSV_PRI");
 330              		.loc 1 566 0
 331              	@ 566 "SYS/task_manager/task_manager.c" 1
 332 0002 FF21     		LDR      R1, =NVIC_PENDSV_PRI
 333              	@ 0 "" 2
 567:SYS/task_manager/task_manager.c ****     __ASM("STRB     R1, [R0]");
 334              		.loc 1 567 0
 335              	@ 567 "SYS/task_manager/task_manager.c" 1
 336 0004 0170     		STRB     R1, [R0]
 337              	@ 0 "" 2
 568:SYS/task_manager/task_manager.c **** 
 569:SYS/task_manager/task_manager.c **** #if (TASK_SCHEDULER_TYPE == PREEMPTIVE_SCHDULER)
 570:SYS/task_manager/task_manager.c ****     //set PSP to 0 to initial context switch call
 571:SYS/task_manager/task_manager.c ****     __ASM("MOVS     R0, #0");
 338              		.loc 1 571 0
 339              	@ 571 "SYS/task_manager/task_manager.c" 1
 340 0006 0020     		MOVS     R0, #0
 341              	@ 0 "" 2
 572:SYS/task_manager/task_manager.c ****     __ASM("MSR      PSP, R0");
 342              		.loc 1 572 0
 343              	@ 572 "SYS/task_manager/task_manager.c" 1
 344 0008 80F30988 		MSR      PSP, R0
 345              	@ 0 "" 2
 573:SYS/task_manager/task_manager.c **** 
 574:SYS/task_manager/task_manager.c ****     //initial MSP to Task_OS_ExpStkBase
 575:SYS/task_manager/task_manager.c ****     __ASM("LDR      R0, =Task_OS_ExpStkBase");
 346              		.loc 1 575 0
 347              	@ 575 "SYS/task_manager/task_manager.c" 1
 348 000c 0348     		LDR      R0, =Task_OS_ExpStkBase
 349              	@ 0 "" 2
 576:SYS/task_manager/task_manager.c ****     __ASM("LDR      R1, [R0]");
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 17


 350              		.loc 1 576 0
 351              	@ 576 "SYS/task_manager/task_manager.c" 1
 352 000e 0168     		LDR      R1, [R0]
 353              	@ 0 "" 2
 577:SYS/task_manager/task_manager.c ****     __ASM("MSR      MSP, R1");
 354              		.loc 1 577 0
 355              	@ 577 "SYS/task_manager/task_manager.c" 1
 356 0010 81F30888 		MSR      MSP, R1
 357              	@ 0 "" 2
 578:SYS/task_manager/task_manager.c **** #endif
 579:SYS/task_manager/task_manager.c **** 
 580:SYS/task_manager/task_manager.c ****     __ASM("BX       LR");
 358              		.loc 1 580 0
 359              	@ 580 "SYS/task_manager/task_manager.c" 1
 360 0014 7047     		BX       LR
 361              	@ 0 "" 2
 581:SYS/task_manager/task_manager.c **** }
 362              		.loc 1 581 0
 363              		.thumb
 364              		.syntax unified
 365              		.cfi_endproc
 366              	.LFE149:
 368 0016 0000     		.section	.text.Task_PriorityCompare,"ax",%progbits
 369              		.align	2
 370              		.global	Task_PriorityCompare
 371              		.thumb
 372              		.thumb_func
 374              	Task_PriorityCompare:
 375              	.LFB153:
 582:SYS/task_manager/task_manager.c **** 
 583:SYS/task_manager/task_manager.c **** __attribute__((naked)) void Task_TriggerPendSV(void)
 584:SYS/task_manager/task_manager.c **** {
 585:SYS/task_manager/task_manager.c ****     __ASM(".equ NVIC_INT_CTRL, 0xE000ED04");
 586:SYS/task_manager/task_manager.c ****     __ASM(".equ NVIC_PENDSVSET, 0x10000000");
 587:SYS/task_manager/task_manager.c **** 
 588:SYS/task_manager/task_manager.c ****     __ASM("LDR      R0, =NVIC_INT_CTRL");
 589:SYS/task_manager/task_manager.c ****     __ASM("LDR      R1, =NVIC_PENDSVSET");
 590:SYS/task_manager/task_manager.c ****     __ASM("STR      R1, [R0]");
 591:SYS/task_manager/task_manager.c ****     __ASM("BX       LR");
 592:SYS/task_manager/task_manager.c **** }
 593:SYS/task_manager/task_manager.c **** 
 594:SYS/task_manager/task_manager.c **** void Task_Force_TriggerPendSV(void)
 595:SYS/task_manager/task_manager.c **** {
 596:SYS/task_manager/task_manager.c ****     /* Barriers are normally not required but do ensure the code is completely \
 597:SYS/task_manager/task_manager.c ****         within the specified behaviour for the architecture. */
 598:SYS/task_manager/task_manager.c ****     __ASM volatile("dsb" ::
 599:SYS/task_manager/task_manager.c ****                        : "memory");
 600:SYS/task_manager/task_manager.c ****     __ASM volatile("isb");
 601:SYS/task_manager/task_manager.c ****     Task_TriggerPendSV();
 602:SYS/task_manager/task_manager.c **** }
 603:SYS/task_manager/task_manager.c **** 
 604:SYS/task_manager/task_manager.c **** uint8_t Task_Get_TaskNum(void)
 605:SYS/task_manager/task_manager.c **** {
 606:SYS/task_manager/task_manager.c ****     return TskCrt_RegList.num;
 607:SYS/task_manager/task_manager.c **** }
 608:SYS/task_manager/task_manager.c **** 
 609:SYS/task_manager/task_manager.c **** //return high priority task pointer
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 18


 610:SYS/task_manager/task_manager.c **** Task *Task_PriorityCompare(const Task *tsk_l, const Task *tsk_r)
 611:SYS/task_manager/task_manager.c **** {
 376              		.loc 1 611 0
 377              		.cfi_startproc
 378              		@ args = 0, pretend = 0, frame = 0
 379              		@ frame_needed = 0, uses_anonymous_args = 0
 380              		@ link register save eliminated.
 381              	.LVL27:
 382 0000 30B4     		push	{r4, r5}
 383              	.LCFI8:
 384              		.cfi_def_cfa_offset 8
 385              		.cfi_offset 4, -8
 386              		.cfi_offset 5, -4
 612:SYS/task_manager/task_manager.c ****     if ((tsk_l == NULL) && (tsk_r == NULL))
 387              		.loc 1 612 0
 388 0002 0346     		mov	r3, r0
 389 0004 00B9     		cbnz	r0, .L25
 390              		.loc 1 612 0 is_stmt 0 discriminator 1
 391 0006 89B1     		cbz	r1, .L30
 392              	.L25:
 613:SYS/task_manager/task_manager.c ****     {
 614:SYS/task_manager/task_manager.c ****         return NULL;
 615:SYS/task_manager/task_manager.c ****     }
 616:SYS/task_manager/task_manager.c **** 
 617:SYS/task_manager/task_manager.c ****     if ((tsk_l == NULL) && (tsk_r != NULL))
 393              		.loc 1 617 0 is_stmt 1
 394 0008 03B9     		cbnz	r3, .L27
 395              		.loc 1 617 0 is_stmt 0 discriminator 1
 396 000a 89B9     		cbnz	r1, .L31
 397              	.L27:
 618:SYS/task_manager/task_manager.c ****     {
 619:SYS/task_manager/task_manager.c ****         return tsk_r;
 620:SYS/task_manager/task_manager.c ****     }
 621:SYS/task_manager/task_manager.c **** 
 622:SYS/task_manager/task_manager.c ****     if ((tsk_l != NULL) && (tsk_r == NULL))
 398              		.loc 1 622 0 is_stmt 1
 399 000c 03B1     		cbz	r3, .L28
 400              		.loc 1 622 0 is_stmt 0 discriminator 1
 401 000e 89B1     		cbz	r1, .L32
 402              	.L28:
 623:SYS/task_manager/task_manager.c ****     {
 624:SYS/task_manager/task_manager.c ****         return tsk_l;
 625:SYS/task_manager/task_manager.c ****     }
 626:SYS/task_manager/task_manager.c **** 
 627:SYS/task_manager/task_manager.c ****     uint8_t L_Grp_level = GET_TASKGROUP_PRIORITY(tsk_l->priority.Suction.Group_Level);
 403              		.loc 1 627 0 is_stmt 1
 404 0010 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 405              	.LVL28:
 406 0012 0025     		movs	r5, #0
 407              	.LVL29:
 628:SYS/task_manager/task_manager.c ****     uint8_t R_Grp_level = GET_TASKGROUP_PRIORITY(tsk_r->priority.Suction.Group_Level);
 408              		.loc 1 628 0
 409 0014 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 410              	.LVL30:
 629:SYS/task_manager/task_manager.c ****     uint8_t L_TskPri_level = GET_TASKINGROUP_PRIORITY(tsk_l->priority.Suction.Task_Level);
 411              		.loc 1 629 0
 412 0016 00F00700 		and	r0, r0, #7
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 19


 413              	.LVL31:
 630:SYS/task_manager/task_manager.c ****     uint8_t R_TskPri_level = GET_TASKINGROUP_PRIORITY(tsk_r->priority.Suction.Task_Level);
 414              		.loc 1 630 0
 415 001a 02F00702 		and	r2, r2, #7
 416              	.LVL32:
 631:SYS/task_manager/task_manager.c **** 
 632:SYS/task_manager/task_manager.c ****     if (L_Grp_level < R_Grp_level)
 633:SYS/task_manager/task_manager.c ****     {
 634:SYS/task_manager/task_manager.c ****         return tsk_l;
 635:SYS/task_manager/task_manager.c ****     }
 636:SYS/task_manager/task_manager.c ****     else if (L_Grp_level > R_Grp_level)
 417              		.loc 1 636 0
 418 001e AD42     		cmp	r5, r5
 419 0020 0AD8     		bhi	.L34
 637:SYS/task_manager/task_manager.c ****     {
 638:SYS/task_manager/task_manager.c ****         return tsk_r;
 639:SYS/task_manager/task_manager.c ****     }
 640:SYS/task_manager/task_manager.c ****     else if (L_Grp_level == R_Grp_level)
 420              		.loc 1 640 0
 421 0022 02D1     		bne	.L29
 641:SYS/task_manager/task_manager.c ****     {
 642:SYS/task_manager/task_manager.c ****         if (L_TskPri_level < R_TskPri_level)
 422              		.loc 1 642 0
 423 0024 9042     		cmp	r0, r2
 424 0026 09D3     		bcc	.L35
 643:SYS/task_manager/task_manager.c ****         {
 644:SYS/task_manager/task_manager.c ****             return tsk_l;
 645:SYS/task_manager/task_manager.c ****         }
 646:SYS/task_manager/task_manager.c ****         else if (L_TskPri_level > R_TskPri_level)
 425              		.loc 1 646 0
 426 0028 0AD8     		bhi	.L36
 427              	.L29:
 647:SYS/task_manager/task_manager.c ****         {
 648:SYS/task_manager/task_manager.c ****             return tsk_r;
 649:SYS/task_manager/task_manager.c ****         }
 650:SYS/task_manager/task_manager.c ****     }
 651:SYS/task_manager/task_manager.c **** }
 428              		.loc 1 651 0
 429 002a 0AE0     		b	.L24
 430              	.LVL33:
 431              	.L30:
 614:SYS/task_manager/task_manager.c ****     }
 432              		.loc 1 614 0
 433 002c 0020     		movs	r0, #0
 434              	.LVL34:
 435 002e 08E0     		b	.L24
 436              	.LVL35:
 437              	.L31:
 619:SYS/task_manager/task_manager.c ****     }
 438              		.loc 1 619 0
 439 0030 0846     		mov	r0, r1
 440              	.LVL36:
 441 0032 06E0     		b	.L24
 442              	.LVL37:
 443              	.L32:
 624:SYS/task_manager/task_manager.c ****     }
 444              		.loc 1 624 0
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 20


 445 0034 1846     		mov	r0, r3
 446              	.LVL38:
 447 0036 04E0     		b	.L24
 448              	.LVL39:
 449              	.L34:
 638:SYS/task_manager/task_manager.c ****     }
 450              		.loc 1 638 0
 451 0038 0846     		mov	r0, r1
 452 003a 02E0     		b	.L24
 453              	.L35:
 644:SYS/task_manager/task_manager.c ****         }
 454              		.loc 1 644 0
 455 003c 1846     		mov	r0, r3
 456 003e 00E0     		b	.L24
 457              	.L36:
 648:SYS/task_manager/task_manager.c ****         }
 458              		.loc 1 648 0
 459 0040 0846     		mov	r0, r1
 460              	.LVL40:
 461              	.L24:
 462              		.loc 1 651 0
 463 0042 30BC     		pop	{r4, r5}
 464              	.LCFI9:
 465              		.cfi_restore 5
 466              		.cfi_restore 4
 467              		.cfi_def_cfa_offset 0
 468 0044 7047     		bx	lr
 469              		.cfi_endproc
 470              	.LFE153:
 472 0046 00BF     		.section	.text.ReSet_Task_Data,"ax",%progbits
 473              		.align	2
 474              		.thumb
 475              		.thumb_func
 477              	ReSet_Task_Data:
 478              	.LFB124:
  95:SYS/task_manager/task_manager.c ****     task->priority.Suction.Group_Level = 0;
 479              		.loc 1 95 0
 480              		.cfi_startproc
 481              		@ args = 0, pretend = 0, frame = 0
 482              		@ frame_needed = 0, uses_anonymous_args = 0
 483              	.LVL41:
 484 0000 10B5     		push	{r4, lr}
 485              	.LCFI10:
 486              		.cfi_def_cfa_offset 8
 487              		.cfi_offset 4, -8
 488              		.cfi_offset 14, -4
 489 0002 0446     		mov	r4, r0
  96:SYS/task_manager/task_manager.c ****     task->priority.Suction.Task_Level = 0;
 490              		.loc 1 96 0
 491 0004 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
  97:SYS/task_manager/task_manager.c ****     task->Task_name = NULL;
 492              		.loc 1 97 0
 493 0006 03F0C703 		and	r3, r3, #199
 494 000a 6FF30203 		bfc	r3, #0, #3
 495 000e 0370     		strb	r3, [r0]
  98:SYS/task_manager/task_manager.c ****     task->exec_frq = 0;
 496              		.loc 1 98 0
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 21


 497 0010 0023     		movs	r3, #0
 498 0012 4360     		str	r3, [r0, #4]
  99:SYS/task_manager/task_manager.c ****     task->exec_interval_us = 0;
 499              		.loc 1 99 0
 500 0014 8360     		str	r3, [r0, #8]
 100:SYS/task_manager/task_manager.c ****     task->Exec_Func = NULL;
 501              		.loc 1 100 0
 502 0016 8381     		strh	r3, [r0, #12]	@ movhi
 101:SYS/task_manager/task_manager.c **** 
 503              		.loc 1 101 0
 504 0018 0361     		str	r3, [r0, #16]
 103:SYS/task_manager/task_manager.c ****     task->Exec_status.detect_exec_time_arv = 0;
 505              		.loc 1 103 0
 506 001a C362     		str	r3, [r0, #44]
 104:SYS/task_manager/task_manager.c ****     task->Exec_status.detect_exec_time_max = 0;
 507              		.loc 1 104 0
 508 001c 0363     		str	r3, [r0, #48]
 105:SYS/task_manager/task_manager.c ****     task->Exec_status.Exec_Times = 0;
 509              		.loc 1 105 0
 510 001e 4363     		str	r3, [r0, #52]
 106:SYS/task_manager/task_manager.c ****     task->Exec_status.cpu_opy = 0;
 511              		.loc 1 106 0
 512 0020 8363     		str	r3, [r0, #56]
 107:SYS/task_manager/task_manager.c ****     task->Exec_status.totlal_running_time = 0;
 513              		.loc 1 107 0
 514 0022 0022     		movs	r2, #0
 515 0024 4264     		str	r2, [r0, #68]	@ float
 108:SYS/task_manager/task_manager.c **** 
 516              		.loc 1 108 0
 517 0026 0364     		str	r3, [r0, #64]
 110:SYS/task_manager/task_manager.c ****     task->delay_info.tsk_hdl = 0;
 518              		.loc 1 110 0
 519 0028 80F85C30 		strb	r3, [r0, #92]
 111:SYS/task_manager/task_manager.c ****     task->delay_info.time_unit = 0;
 520              		.loc 1 111 0
 521 002c 0366     		str	r3, [r0, #96]
 112:SYS/task_manager/task_manager.c **** 
 522              		.loc 1 112 0
 523 002e 4366     		str	r3, [r0, #100]
 114:SYS/task_manager/task_manager.c **** 
 524              		.loc 1 114 0
 525 0030 00F15C01 		add	r1, r0, #92
 526 0034 7430     		adds	r0, r0, #116
 527              	.LVL42:
 528 0036 FFF7FEFF 		bl	List_ItemInit
 529              	.LVL43:
 116:SYS/task_manager/task_manager.c ****     RuntimeObj_Reset(&(task->Exec_status.Init_Time));
 530              		.loc 1 116 0
 531 003a 04F12400 		add	r0, r4, #36
 532 003e FFF7FEFF 		bl	RuntimeObj_Reset
 533              	.LVL44:
 117:SYS/task_manager/task_manager.c ****     RuntimeObj_Reset(&(task->Exec_status.Start_Time));
 534              		.loc 1 117 0
 535 0042 04F11400 		add	r0, r4, #20
 536 0046 FFF7FEFF 		bl	RuntimeObj_Reset
 537              	.LVL45:
 118:SYS/task_manager/task_manager.c **** 
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 22


 538              		.loc 1 118 0
 539 004a 04F11C00 		add	r0, r4, #28
 540 004e FFF7FEFF 		bl	RuntimeObj_Reset
 541              	.LVL46:
 120:SYS/task_manager/task_manager.c **** }
 542              		.loc 1 120 0
 543 0052 0523     		movs	r3, #5
 544 0054 84F84830 		strb	r3, [r4, #72]
 545 0058 10BD     		pop	{r4, pc}
 546              		.cfi_endproc
 547              	.LFE124:
 549 005a 00BF     		.section	.text.TaskSys_Init,"ax",%progbits
 550              		.align	2
 551              		.thumb
 552              		.thumb_func
 554              	TaskSys_Init:
 555              	.LFB126:
 137:SYS/task_manager/task_manager.c **** #if (TASK_SCHEDULER_TYPE == PREEMPTIVE_SCHDULER)
 556              		.loc 1 137 0
 557              		.cfi_startproc
 558              		@ args = 0, pretend = 0, frame = 0
 559              		@ frame_needed = 0, uses_anonymous_args = 0
 560 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 561              	.LCFI11:
 562              		.cfi_def_cfa_offset 24
 563              		.cfi_offset 3, -24
 564              		.cfi_offset 4, -20
 565              		.cfi_offset 5, -16
 566              		.cfi_offset 6, -12
 567              		.cfi_offset 7, -8
 568              		.cfi_offset 14, -4
 140:SYS/task_manager/task_manager.c **** 
 569              		.loc 1 140 0
 570 0002 1E4C     		ldr	r4, .L46
 571 0004 4FF42052 		mov	r2, #10240
 572 0008 0021     		movs	r1, #0
 573 000a 2046     		mov	r0, r4
 574 000c FFF7FEFF 		bl	memset
 575              	.LVL47:
 142:SYS/task_manager/task_manager.c **** #endif
 576              		.loc 1 142 0
 577 0010 04F51F43 		add	r3, r4, #40704
 578 0014 FC33     		adds	r3, r3, #252
 579 0016 1A4A     		ldr	r2, .L46+4
 580 0018 1360     		str	r3, [r2]
 581              	.LVL48:
 582              	.LBB6:
 150:SYS/task_manager/task_manager.c ****     {
 583              		.loc 1 150 0
 584 001a 0027     		movs	r7, #0
 585 001c 1AE0     		b	.L41
 586              	.LVL49:
 587              	.L42:
 588              	.LBB7:
 154:SYS/task_manager/task_manager.c **** 
 589              		.loc 1 154 0 discriminator 3
 590 001e 194D     		ldr	r5, .L46+8
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 23


 591 0020 04EBC706 		add	r6, r4, r7, lsl #3
 592 0024 55F82600 		ldr	r0, [r5, r6, lsl #2]
 593 0028 FFF7FEFF 		bl	ReSet_Task_Data
 594              	.LVL50:
 157:SYS/task_manager/task_manager.c ****             Task_Ptr[group_index][task_priority]->TCB.Stack = NULL;
 595              		.loc 1 157 0 discriminator 3
 596 002c 55F82620 		ldr	r2, [r5, r6, lsl #2]
 597 0030 0023     		movs	r3, #0
 598 0032 D364     		str	r3, [r2, #76]
 158:SYS/task_manager/task_manager.c ****             Task_Ptr[group_index][task_priority]->TCB.Top_Stk_Ptr = NULL;
 599              		.loc 1 158 0 discriminator 3
 600 0034 55F82620 		ldr	r2, [r5, r6, lsl #2]
 601 0038 5365     		str	r3, [r2, #84]
 159:SYS/task_manager/task_manager.c **** #endif
 602              		.loc 1 159 0 discriminator 3
 603 003a 55F82620 		ldr	r2, [r5, r6, lsl #2]
 604 003e 1365     		str	r3, [r2, #80]
 161:SYS/task_manager/task_manager.c **** 
 605              		.loc 1 161 0 discriminator 3
 606 0040 45F82630 		str	r3, [r5, r6, lsl #2]
 152:SYS/task_manager/task_manager.c ****         {
 607              		.loc 1 152 0 discriminator 3
 608 0044 0134     		adds	r4, r4, #1
 609              	.LVL51:
 610 0046 E4B2     		uxtb	r4, r4
 611              	.LVL52:
 612 0048 00E0     		b	.L43
 613              	.LVL53:
 614              	.L44:
 615              	.LBE7:
 616 004a 0024     		movs	r4, #0
 617              	.L43:
 618              	.LVL54:
 619              	.LBB8:
 152:SYS/task_manager/task_manager.c ****         {
 620              		.loc 1 152 0 is_stmt 0 discriminator 1
 621 004c 072C     		cmp	r4, #7
 622 004e E6D9     		bls	.L42
 623              	.LBE8:
 150:SYS/task_manager/task_manager.c ****     {
 624              		.loc 1 150 0 is_stmt 1 discriminator 2
 625 0050 0137     		adds	r7, r7, #1
 626              	.LVL55:
 627 0052 FFB2     		uxtb	r7, r7
 628              	.LVL56:
 629              	.L41:
 150:SYS/task_manager/task_manager.c ****     {
 630              		.loc 1 150 0 is_stmt 0 discriminator 1
 631 0054 072F     		cmp	r7, #7
 632 0056 F8D9     		bls	.L44
 633              	.LBE6:
 167:SYS/task_manager/task_manager.c ****     TskCrt_RegList.list.data = NULL;
 634              		.loc 1 167 0 is_stmt 1
 635 0058 0B4B     		ldr	r3, .L46+12
 636 005a 0022     		movs	r2, #0
 637 005c 1A70     		strb	r2, [r3]
 168:SYS/task_manager/task_manager.c ****     TskCrt_RegList.list.nxt = NULL;
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 24


 638              		.loc 1 168 0
 639 005e 5A61     		str	r2, [r3, #20]
 169:SYS/task_manager/task_manager.c ****     TskCrt_RegList.list.prv = NULL;
 640              		.loc 1 169 0
 641 0060 1A61     		str	r2, [r3, #16]
 170:SYS/task_manager/task_manager.c **** 
 642              		.loc 1 170 0
 643 0062 DA60     		str	r2, [r3, #12]
 172:SYS/task_manager/task_manager.c ****     TskSys_state = TaskSys_Prepare;
 644              		.loc 1 172 0
 645 0064 094B     		ldr	r3, .L46+16
 646 0066 1868     		ldr	r0, [r3]
 647 0068 FFF7FEFF 		bl	ReSet_Task_Data
 648              	.LVL57:
 173:SYS/task_manager/task_manager.c **** 
 649              		.loc 1 173 0
 650 006c 0122     		movs	r2, #1
 651 006e 084B     		ldr	r3, .L46+20
 652 0070 1A70     		strb	r2, [r3]
 653              	.LVL58:
 654              	.LBB9:
 655              	.LBB10:
 656              		.file 2 "F4_CORE/core_cm4.h"
   1:F4_CORE/core_cm4.h **** /**************************************************************************//**
   2:F4_CORE/core_cm4.h ****  * @file     core_cm4.h
   3:F4_CORE/core_cm4.h ****  * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
   4:F4_CORE/core_cm4.h ****  * @version  V4.10
   5:F4_CORE/core_cm4.h ****  * @date     18. March 2015
   6:F4_CORE/core_cm4.h ****  *
   7:F4_CORE/core_cm4.h ****  * @note
   8:F4_CORE/core_cm4.h ****  *
   9:F4_CORE/core_cm4.h ****  ******************************************************************************/
  10:F4_CORE/core_cm4.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
  11:F4_CORE/core_cm4.h **** 
  12:F4_CORE/core_cm4.h ****    All rights reserved.
  13:F4_CORE/core_cm4.h ****    Redistribution and use in source and binary forms, with or without
  14:F4_CORE/core_cm4.h ****    modification, are permitted provided that the following conditions are met:
  15:F4_CORE/core_cm4.h ****    - Redistributions of source code must retain the above copyright
  16:F4_CORE/core_cm4.h ****      notice, this list of conditions and the following disclaimer.
  17:F4_CORE/core_cm4.h ****    - Redistributions in binary form must reproduce the above copyright
  18:F4_CORE/core_cm4.h ****      notice, this list of conditions and the following disclaimer in the
  19:F4_CORE/core_cm4.h ****      documentation and/or other materials provided with the distribution.
  20:F4_CORE/core_cm4.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:F4_CORE/core_cm4.h ****      to endorse or promote products derived from this software without
  22:F4_CORE/core_cm4.h ****      specific prior written permission.
  23:F4_CORE/core_cm4.h ****    *
  24:F4_CORE/core_cm4.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:F4_CORE/core_cm4.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:F4_CORE/core_cm4.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:F4_CORE/core_cm4.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:F4_CORE/core_cm4.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:F4_CORE/core_cm4.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:F4_CORE/core_cm4.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:F4_CORE/core_cm4.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:F4_CORE/core_cm4.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:F4_CORE/core_cm4.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:F4_CORE/core_cm4.h ****    POSSIBILITY OF SUCH DAMAGE.
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 25


  35:F4_CORE/core_cm4.h ****    ---------------------------------------------------------------------------*/
  36:F4_CORE/core_cm4.h **** 
  37:F4_CORE/core_cm4.h **** 
  38:F4_CORE/core_cm4.h **** #if defined ( __ICCARM__ )
  39:F4_CORE/core_cm4.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  40:F4_CORE/core_cm4.h **** #endif
  41:F4_CORE/core_cm4.h **** 
  42:F4_CORE/core_cm4.h **** #ifndef __CORE_CM4_H_GENERIC
  43:F4_CORE/core_cm4.h **** #define __CORE_CM4_H_GENERIC
  44:F4_CORE/core_cm4.h **** 
  45:F4_CORE/core_cm4.h **** #ifdef __cplusplus
  46:F4_CORE/core_cm4.h ****  extern "C" {
  47:F4_CORE/core_cm4.h **** #endif
  48:F4_CORE/core_cm4.h **** 
  49:F4_CORE/core_cm4.h **** /** \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  50:F4_CORE/core_cm4.h ****   CMSIS violates the following MISRA-C:2004 rules:
  51:F4_CORE/core_cm4.h **** 
  52:F4_CORE/core_cm4.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  53:F4_CORE/core_cm4.h ****      Function definitions in header files are used to allow 'inlining'.
  54:F4_CORE/core_cm4.h **** 
  55:F4_CORE/core_cm4.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  56:F4_CORE/core_cm4.h ****      Unions are used for effective representation of core registers.
  57:F4_CORE/core_cm4.h **** 
  58:F4_CORE/core_cm4.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  59:F4_CORE/core_cm4.h ****      Function-like macros are used to allow more efficient code.
  60:F4_CORE/core_cm4.h ****  */
  61:F4_CORE/core_cm4.h **** 
  62:F4_CORE/core_cm4.h **** 
  63:F4_CORE/core_cm4.h **** /*******************************************************************************
  64:F4_CORE/core_cm4.h ****  *                 CMSIS definitions
  65:F4_CORE/core_cm4.h ****  ******************************************************************************/
  66:F4_CORE/core_cm4.h **** /** \ingroup Cortex_M4
  67:F4_CORE/core_cm4.h ****   @{
  68:F4_CORE/core_cm4.h ****  */
  69:F4_CORE/core_cm4.h **** 
  70:F4_CORE/core_cm4.h **** /*  CMSIS CM4 definitions */
  71:F4_CORE/core_cm4.h **** #define __CM4_CMSIS_VERSION_MAIN  (0x04)                                   /*!< [31:16] CMSIS HAL m
  72:F4_CORE/core_cm4.h **** #define __CM4_CMSIS_VERSION_SUB   (0x00)                                   /*!< [15:0]  CMSIS HAL s
  73:F4_CORE/core_cm4.h **** #define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16) | \
  74:F4_CORE/core_cm4.h ****                                     __CM4_CMSIS_VERSION_SUB          )     /*!< CMSIS HAL version n
  75:F4_CORE/core_cm4.h **** 
  76:F4_CORE/core_cm4.h **** #define __CORTEX_M                (0x04)                                   /*!< Cortex-M Core      
  77:F4_CORE/core_cm4.h **** 
  78:F4_CORE/core_cm4.h **** 
  79:F4_CORE/core_cm4.h **** #if   defined ( __CC_ARM )
  80:F4_CORE/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  81:F4_CORE/core_cm4.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  82:F4_CORE/core_cm4.h ****   #define __STATIC_INLINE  static __inline
  83:F4_CORE/core_cm4.h **** 
  84:F4_CORE/core_cm4.h **** #elif defined ( __GNUC__ )
  85:F4_CORE/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  86:F4_CORE/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  87:F4_CORE/core_cm4.h ****   #define __STATIC_INLINE  static inline
  88:F4_CORE/core_cm4.h **** 
  89:F4_CORE/core_cm4.h **** #elif defined ( __ICCARM__ )
  90:F4_CORE/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  91:F4_CORE/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 26


  92:F4_CORE/core_cm4.h ****   #define __STATIC_INLINE  static inline
  93:F4_CORE/core_cm4.h **** 
  94:F4_CORE/core_cm4.h **** #elif defined ( __TMS470__ )
  95:F4_CORE/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
  96:F4_CORE/core_cm4.h ****   #define __STATIC_INLINE  static inline
  97:F4_CORE/core_cm4.h **** 
  98:F4_CORE/core_cm4.h **** #elif defined ( __TASKING__ )
  99:F4_CORE/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 100:F4_CORE/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 101:F4_CORE/core_cm4.h ****   #define __STATIC_INLINE  static inline
 102:F4_CORE/core_cm4.h **** 
 103:F4_CORE/core_cm4.h **** #elif defined ( __CSMC__ )
 104:F4_CORE/core_cm4.h ****   #define __packed
 105:F4_CORE/core_cm4.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 106:F4_CORE/core_cm4.h ****   #define __INLINE         inline                                    /*use -pc99 on compile line !<
 107:F4_CORE/core_cm4.h ****   #define __STATIC_INLINE  static inline
 108:F4_CORE/core_cm4.h **** 
 109:F4_CORE/core_cm4.h **** #endif
 110:F4_CORE/core_cm4.h **** 
 111:F4_CORE/core_cm4.h **** /** __FPU_USED indicates whether an FPU is used or not.
 112:F4_CORE/core_cm4.h ****     For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and fun
 113:F4_CORE/core_cm4.h **** */
 114:F4_CORE/core_cm4.h **** #if defined ( __CC_ARM )
 115:F4_CORE/core_cm4.h ****   #if defined __TARGET_FPU_VFP
 116:F4_CORE/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 117:F4_CORE/core_cm4.h ****       #define __FPU_USED       1
 118:F4_CORE/core_cm4.h ****     #else
 119:F4_CORE/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 120:F4_CORE/core_cm4.h ****       #define __FPU_USED       0
 121:F4_CORE/core_cm4.h ****     #endif
 122:F4_CORE/core_cm4.h ****   #else
 123:F4_CORE/core_cm4.h ****     #define __FPU_USED         0
 124:F4_CORE/core_cm4.h ****   #endif
 125:F4_CORE/core_cm4.h **** 
 126:F4_CORE/core_cm4.h **** #elif defined ( __GNUC__ )
 127:F4_CORE/core_cm4.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 128:F4_CORE/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 129:F4_CORE/core_cm4.h ****       #define __FPU_USED       1
 130:F4_CORE/core_cm4.h ****     #else
 131:F4_CORE/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 132:F4_CORE/core_cm4.h ****       #define __FPU_USED       0
 133:F4_CORE/core_cm4.h ****     #endif
 134:F4_CORE/core_cm4.h ****   #else
 135:F4_CORE/core_cm4.h ****     #define __FPU_USED         1
 136:F4_CORE/core_cm4.h ****   #endif
 137:F4_CORE/core_cm4.h **** 
 138:F4_CORE/core_cm4.h **** #elif defined ( __ICCARM__ )
 139:F4_CORE/core_cm4.h ****   #if defined __ARMVFP__
 140:F4_CORE/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 141:F4_CORE/core_cm4.h ****       #define __FPU_USED       1
 142:F4_CORE/core_cm4.h ****     #else
 143:F4_CORE/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 144:F4_CORE/core_cm4.h ****       #define __FPU_USED       0
 145:F4_CORE/core_cm4.h ****     #endif
 146:F4_CORE/core_cm4.h ****   #else
 147:F4_CORE/core_cm4.h ****     #define __FPU_USED         0
 148:F4_CORE/core_cm4.h ****   #endif
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 27


 149:F4_CORE/core_cm4.h **** 
 150:F4_CORE/core_cm4.h **** #elif defined ( __TMS470__ )
 151:F4_CORE/core_cm4.h ****   #if defined __TI_VFP_SUPPORT__
 152:F4_CORE/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 153:F4_CORE/core_cm4.h ****       #define __FPU_USED       1
 154:F4_CORE/core_cm4.h ****     #else
 155:F4_CORE/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 156:F4_CORE/core_cm4.h ****       #define __FPU_USED       0
 157:F4_CORE/core_cm4.h ****     #endif
 158:F4_CORE/core_cm4.h ****   #else
 159:F4_CORE/core_cm4.h ****     #define __FPU_USED         0
 160:F4_CORE/core_cm4.h ****   #endif
 161:F4_CORE/core_cm4.h **** 
 162:F4_CORE/core_cm4.h **** #elif defined ( __TASKING__ )
 163:F4_CORE/core_cm4.h ****   #if defined __FPU_VFP__
 164:F4_CORE/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 165:F4_CORE/core_cm4.h ****       #define __FPU_USED       1
 166:F4_CORE/core_cm4.h ****     #else
 167:F4_CORE/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 168:F4_CORE/core_cm4.h ****       #define __FPU_USED       0
 169:F4_CORE/core_cm4.h ****     #endif
 170:F4_CORE/core_cm4.h ****   #else
 171:F4_CORE/core_cm4.h ****     #define __FPU_USED         0
 172:F4_CORE/core_cm4.h ****   #endif
 173:F4_CORE/core_cm4.h **** 
 174:F4_CORE/core_cm4.h **** #elif defined ( __CSMC__ )		/* Cosmic */
 175:F4_CORE/core_cm4.h ****   #if ( __CSMC__ & 0x400)		// FPU present for parser
 176:F4_CORE/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 177:F4_CORE/core_cm4.h ****       #define __FPU_USED       1
 178:F4_CORE/core_cm4.h ****     #else
 179:F4_CORE/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 180:F4_CORE/core_cm4.h ****       #define __FPU_USED       0
 181:F4_CORE/core_cm4.h ****     #endif
 182:F4_CORE/core_cm4.h ****   #else
 183:F4_CORE/core_cm4.h ****     #define __FPU_USED         0
 184:F4_CORE/core_cm4.h ****   #endif
 185:F4_CORE/core_cm4.h **** #endif
 186:F4_CORE/core_cm4.h **** 
 187:F4_CORE/core_cm4.h **** #include <stdint.h>                      /* standard types definitions                      */
 188:F4_CORE/core_cm4.h **** #include <core_cmInstr.h>                /* Core Instruction Access                         */
 189:F4_CORE/core_cm4.h **** #include <core_cmFunc.h>                 /* Core Function Access                            */
 190:F4_CORE/core_cm4.h **** #include <core_cmSimd.h>                 /* Compiler specific SIMD Intrinsics               */
 191:F4_CORE/core_cm4.h **** 
 192:F4_CORE/core_cm4.h **** #ifdef __cplusplus
 193:F4_CORE/core_cm4.h **** }
 194:F4_CORE/core_cm4.h **** #endif
 195:F4_CORE/core_cm4.h **** 
 196:F4_CORE/core_cm4.h **** #endif /* __CORE_CM4_H_GENERIC */
 197:F4_CORE/core_cm4.h **** 
 198:F4_CORE/core_cm4.h **** #ifndef __CMSIS_GENERIC
 199:F4_CORE/core_cm4.h **** 
 200:F4_CORE/core_cm4.h **** #ifndef __CORE_CM4_H_DEPENDANT
 201:F4_CORE/core_cm4.h **** #define __CORE_CM4_H_DEPENDANT
 202:F4_CORE/core_cm4.h **** 
 203:F4_CORE/core_cm4.h **** #ifdef __cplusplus
 204:F4_CORE/core_cm4.h ****  extern "C" {
 205:F4_CORE/core_cm4.h **** #endif
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 28


 206:F4_CORE/core_cm4.h **** 
 207:F4_CORE/core_cm4.h **** /* check device defines and use defaults */
 208:F4_CORE/core_cm4.h **** #if defined __CHECK_DEVICE_DEFINES
 209:F4_CORE/core_cm4.h ****   #ifndef __CM4_REV
 210:F4_CORE/core_cm4.h ****     #define __CM4_REV               0x0000
 211:F4_CORE/core_cm4.h ****     #warning "__CM4_REV not defined in device header file; using default!"
 212:F4_CORE/core_cm4.h ****   #endif
 213:F4_CORE/core_cm4.h **** 
 214:F4_CORE/core_cm4.h ****   #ifndef __FPU_PRESENT
 215:F4_CORE/core_cm4.h ****     #define __FPU_PRESENT             0
 216:F4_CORE/core_cm4.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 217:F4_CORE/core_cm4.h ****   #endif
 218:F4_CORE/core_cm4.h **** 
 219:F4_CORE/core_cm4.h ****   #ifndef __MPU_PRESENT
 220:F4_CORE/core_cm4.h ****     #define __MPU_PRESENT             0
 221:F4_CORE/core_cm4.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 222:F4_CORE/core_cm4.h ****   #endif
 223:F4_CORE/core_cm4.h **** 
 224:F4_CORE/core_cm4.h ****   #ifndef __NVIC_PRIO_BITS
 225:F4_CORE/core_cm4.h ****     #define __NVIC_PRIO_BITS          4
 226:F4_CORE/core_cm4.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 227:F4_CORE/core_cm4.h ****   #endif
 228:F4_CORE/core_cm4.h **** 
 229:F4_CORE/core_cm4.h ****   #ifndef __Vendor_SysTickConfig
 230:F4_CORE/core_cm4.h ****     #define __Vendor_SysTickConfig    0
 231:F4_CORE/core_cm4.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 232:F4_CORE/core_cm4.h ****   #endif
 233:F4_CORE/core_cm4.h **** #endif
 234:F4_CORE/core_cm4.h **** 
 235:F4_CORE/core_cm4.h **** /* IO definitions (access restrictions to peripheral registers) */
 236:F4_CORE/core_cm4.h **** /**
 237:F4_CORE/core_cm4.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 238:F4_CORE/core_cm4.h **** 
 239:F4_CORE/core_cm4.h ****     <strong>IO Type Qualifiers</strong> are used
 240:F4_CORE/core_cm4.h ****     \li to specify the access to peripheral variables.
 241:F4_CORE/core_cm4.h ****     \li for automatic generation of peripheral register debug information.
 242:F4_CORE/core_cm4.h **** */
 243:F4_CORE/core_cm4.h **** #ifdef __cplusplus
 244:F4_CORE/core_cm4.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions                 */
 245:F4_CORE/core_cm4.h **** #else
 246:F4_CORE/core_cm4.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions                 */
 247:F4_CORE/core_cm4.h **** #endif
 248:F4_CORE/core_cm4.h **** #define     __O     volatile             /*!< Defines 'write only' permissions                */
 249:F4_CORE/core_cm4.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions              */
 250:F4_CORE/core_cm4.h **** 
 251:F4_CORE/core_cm4.h **** /*@} end of group Cortex_M4 */
 252:F4_CORE/core_cm4.h **** 
 253:F4_CORE/core_cm4.h **** 
 254:F4_CORE/core_cm4.h **** 
 255:F4_CORE/core_cm4.h **** /*******************************************************************************
 256:F4_CORE/core_cm4.h ****  *                 Register Abstraction
 257:F4_CORE/core_cm4.h ****   Core Register contain:
 258:F4_CORE/core_cm4.h ****   - Core Register
 259:F4_CORE/core_cm4.h ****   - Core NVIC Register
 260:F4_CORE/core_cm4.h ****   - Core SCB Register
 261:F4_CORE/core_cm4.h ****   - Core SysTick Register
 262:F4_CORE/core_cm4.h ****   - Core Debug Register
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 29


 263:F4_CORE/core_cm4.h ****   - Core MPU Register
 264:F4_CORE/core_cm4.h ****   - Core FPU Register
 265:F4_CORE/core_cm4.h ****  ******************************************************************************/
 266:F4_CORE/core_cm4.h **** /** \defgroup CMSIS_core_register Defines and Type Definitions
 267:F4_CORE/core_cm4.h ****     \brief Type definitions and defines for Cortex-M processor based devices.
 268:F4_CORE/core_cm4.h **** */
 269:F4_CORE/core_cm4.h **** 
 270:F4_CORE/core_cm4.h **** /** \ingroup    CMSIS_core_register
 271:F4_CORE/core_cm4.h ****     \defgroup   CMSIS_CORE  Status and Control Registers
 272:F4_CORE/core_cm4.h ****     \brief  Core Register type definitions.
 273:F4_CORE/core_cm4.h ****   @{
 274:F4_CORE/core_cm4.h ****  */
 275:F4_CORE/core_cm4.h **** 
 276:F4_CORE/core_cm4.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 277:F4_CORE/core_cm4.h ****  */
 278:F4_CORE/core_cm4.h **** typedef union
 279:F4_CORE/core_cm4.h **** {
 280:F4_CORE/core_cm4.h ****   struct
 281:F4_CORE/core_cm4.h ****   {
 282:F4_CORE/core_cm4.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 283:F4_CORE/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 284:F4_CORE/core_cm4.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 285:F4_CORE/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 286:F4_CORE/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 287:F4_CORE/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 288:F4_CORE/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 289:F4_CORE/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 290:F4_CORE/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 291:F4_CORE/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 292:F4_CORE/core_cm4.h **** } APSR_Type;
 293:F4_CORE/core_cm4.h **** 
 294:F4_CORE/core_cm4.h **** /* APSR Register Definitions */
 295:F4_CORE/core_cm4.h **** #define APSR_N_Pos                         31                                             /*!< APSR
 296:F4_CORE/core_cm4.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 297:F4_CORE/core_cm4.h **** 
 298:F4_CORE/core_cm4.h **** #define APSR_Z_Pos                         30                                             /*!< APSR
 299:F4_CORE/core_cm4.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 300:F4_CORE/core_cm4.h **** 
 301:F4_CORE/core_cm4.h **** #define APSR_C_Pos                         29                                             /*!< APSR
 302:F4_CORE/core_cm4.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 303:F4_CORE/core_cm4.h **** 
 304:F4_CORE/core_cm4.h **** #define APSR_V_Pos                         28                                             /*!< APSR
 305:F4_CORE/core_cm4.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 306:F4_CORE/core_cm4.h **** 
 307:F4_CORE/core_cm4.h **** #define APSR_Q_Pos                         27                                             /*!< APSR
 308:F4_CORE/core_cm4.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 309:F4_CORE/core_cm4.h **** 
 310:F4_CORE/core_cm4.h **** #define APSR_GE_Pos                        16                                             /*!< APSR
 311:F4_CORE/core_cm4.h **** #define APSR_GE_Msk                        (0xFUL << APSR_GE_Pos)                         /*!< APSR
 312:F4_CORE/core_cm4.h **** 
 313:F4_CORE/core_cm4.h **** 
 314:F4_CORE/core_cm4.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 315:F4_CORE/core_cm4.h ****  */
 316:F4_CORE/core_cm4.h **** typedef union
 317:F4_CORE/core_cm4.h **** {
 318:F4_CORE/core_cm4.h ****   struct
 319:F4_CORE/core_cm4.h ****   {
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 30


 320:F4_CORE/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 321:F4_CORE/core_cm4.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 322:F4_CORE/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 323:F4_CORE/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 324:F4_CORE/core_cm4.h **** } IPSR_Type;
 325:F4_CORE/core_cm4.h **** 
 326:F4_CORE/core_cm4.h **** /* IPSR Register Definitions */
 327:F4_CORE/core_cm4.h **** #define IPSR_ISR_Pos                        0                                             /*!< IPSR
 328:F4_CORE/core_cm4.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 329:F4_CORE/core_cm4.h **** 
 330:F4_CORE/core_cm4.h **** 
 331:F4_CORE/core_cm4.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 332:F4_CORE/core_cm4.h ****  */
 333:F4_CORE/core_cm4.h **** typedef union
 334:F4_CORE/core_cm4.h **** {
 335:F4_CORE/core_cm4.h ****   struct
 336:F4_CORE/core_cm4.h ****   {
 337:F4_CORE/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 338:F4_CORE/core_cm4.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 339:F4_CORE/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 340:F4_CORE/core_cm4.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 341:F4_CORE/core_cm4.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 342:F4_CORE/core_cm4.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 343:F4_CORE/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 344:F4_CORE/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 345:F4_CORE/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 346:F4_CORE/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 347:F4_CORE/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 348:F4_CORE/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 349:F4_CORE/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 350:F4_CORE/core_cm4.h **** } xPSR_Type;
 351:F4_CORE/core_cm4.h **** 
 352:F4_CORE/core_cm4.h **** /* xPSR Register Definitions */
 353:F4_CORE/core_cm4.h **** #define xPSR_N_Pos                         31                                             /*!< xPSR
 354:F4_CORE/core_cm4.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 355:F4_CORE/core_cm4.h **** 
 356:F4_CORE/core_cm4.h **** #define xPSR_Z_Pos                         30                                             /*!< xPSR
 357:F4_CORE/core_cm4.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 358:F4_CORE/core_cm4.h **** 
 359:F4_CORE/core_cm4.h **** #define xPSR_C_Pos                         29                                             /*!< xPSR
 360:F4_CORE/core_cm4.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 361:F4_CORE/core_cm4.h **** 
 362:F4_CORE/core_cm4.h **** #define xPSR_V_Pos                         28                                             /*!< xPSR
 363:F4_CORE/core_cm4.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 364:F4_CORE/core_cm4.h **** 
 365:F4_CORE/core_cm4.h **** #define xPSR_Q_Pos                         27                                             /*!< xPSR
 366:F4_CORE/core_cm4.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 367:F4_CORE/core_cm4.h **** 
 368:F4_CORE/core_cm4.h **** #define xPSR_IT_Pos                        25                                             /*!< xPSR
 369:F4_CORE/core_cm4.h **** #define xPSR_IT_Msk                        (3UL << xPSR_IT_Pos)                           /*!< xPSR
 370:F4_CORE/core_cm4.h **** 
 371:F4_CORE/core_cm4.h **** #define xPSR_T_Pos                         24                                             /*!< xPSR
 372:F4_CORE/core_cm4.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 373:F4_CORE/core_cm4.h **** 
 374:F4_CORE/core_cm4.h **** #define xPSR_GE_Pos                        16                                             /*!< xPSR
 375:F4_CORE/core_cm4.h **** #define xPSR_GE_Msk                        (0xFUL << xPSR_GE_Pos)                         /*!< xPSR
 376:F4_CORE/core_cm4.h **** 
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 31


 377:F4_CORE/core_cm4.h **** #define xPSR_ISR_Pos                        0                                             /*!< xPSR
 378:F4_CORE/core_cm4.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 379:F4_CORE/core_cm4.h **** 
 380:F4_CORE/core_cm4.h **** 
 381:F4_CORE/core_cm4.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 382:F4_CORE/core_cm4.h ****  */
 383:F4_CORE/core_cm4.h **** typedef union
 384:F4_CORE/core_cm4.h **** {
 385:F4_CORE/core_cm4.h ****   struct
 386:F4_CORE/core_cm4.h ****   {
 387:F4_CORE/core_cm4.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 388:F4_CORE/core_cm4.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 389:F4_CORE/core_cm4.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 390:F4_CORE/core_cm4.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 391:F4_CORE/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 392:F4_CORE/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 393:F4_CORE/core_cm4.h **** } CONTROL_Type;
 394:F4_CORE/core_cm4.h **** 
 395:F4_CORE/core_cm4.h **** /* CONTROL Register Definitions */
 396:F4_CORE/core_cm4.h **** #define CONTROL_FPCA_Pos                    2                                             /*!< CONT
 397:F4_CORE/core_cm4.h **** #define CONTROL_FPCA_Msk                   (1UL << CONTROL_FPCA_Pos)                      /*!< CONT
 398:F4_CORE/core_cm4.h **** 
 399:F4_CORE/core_cm4.h **** #define CONTROL_SPSEL_Pos                   1                                             /*!< CONT
 400:F4_CORE/core_cm4.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 401:F4_CORE/core_cm4.h **** 
 402:F4_CORE/core_cm4.h **** #define CONTROL_nPRIV_Pos                   0                                             /*!< CONT
 403:F4_CORE/core_cm4.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 404:F4_CORE/core_cm4.h **** 
 405:F4_CORE/core_cm4.h **** /*@} end of group CMSIS_CORE */
 406:F4_CORE/core_cm4.h **** 
 407:F4_CORE/core_cm4.h **** 
 408:F4_CORE/core_cm4.h **** /** \ingroup    CMSIS_core_register
 409:F4_CORE/core_cm4.h ****     \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 410:F4_CORE/core_cm4.h ****     \brief      Type definitions for the NVIC Registers
 411:F4_CORE/core_cm4.h ****   @{
 412:F4_CORE/core_cm4.h ****  */
 413:F4_CORE/core_cm4.h **** 
 414:F4_CORE/core_cm4.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 415:F4_CORE/core_cm4.h ****  */
 416:F4_CORE/core_cm4.h **** typedef struct
 417:F4_CORE/core_cm4.h **** {
 418:F4_CORE/core_cm4.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 419:F4_CORE/core_cm4.h ****        uint32_t RESERVED0[24];
 420:F4_CORE/core_cm4.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 421:F4_CORE/core_cm4.h ****        uint32_t RSERVED1[24];
 422:F4_CORE/core_cm4.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 423:F4_CORE/core_cm4.h ****        uint32_t RESERVED2[24];
 424:F4_CORE/core_cm4.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 425:F4_CORE/core_cm4.h ****        uint32_t RESERVED3[24];
 426:F4_CORE/core_cm4.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 427:F4_CORE/core_cm4.h ****        uint32_t RESERVED4[56];
 428:F4_CORE/core_cm4.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 429:F4_CORE/core_cm4.h ****        uint32_t RESERVED5[644];
 430:F4_CORE/core_cm4.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 431:F4_CORE/core_cm4.h **** }  NVIC_Type;
 432:F4_CORE/core_cm4.h **** 
 433:F4_CORE/core_cm4.h **** /* Software Triggered Interrupt Register Definitions */
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 32


 434:F4_CORE/core_cm4.h **** #define NVIC_STIR_INTID_Pos                 0                                          /*!< STIR: I
 435:F4_CORE/core_cm4.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 436:F4_CORE/core_cm4.h **** 
 437:F4_CORE/core_cm4.h **** /*@} end of group CMSIS_NVIC */
 438:F4_CORE/core_cm4.h **** 
 439:F4_CORE/core_cm4.h **** 
 440:F4_CORE/core_cm4.h **** /** \ingroup  CMSIS_core_register
 441:F4_CORE/core_cm4.h ****     \defgroup CMSIS_SCB     System Control Block (SCB)
 442:F4_CORE/core_cm4.h ****     \brief      Type definitions for the System Control Block Registers
 443:F4_CORE/core_cm4.h ****   @{
 444:F4_CORE/core_cm4.h ****  */
 445:F4_CORE/core_cm4.h **** 
 446:F4_CORE/core_cm4.h **** /** \brief  Structure type to access the System Control Block (SCB).
 447:F4_CORE/core_cm4.h ****  */
 448:F4_CORE/core_cm4.h **** typedef struct
 449:F4_CORE/core_cm4.h **** {
 450:F4_CORE/core_cm4.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register             
 451:F4_CORE/core_cm4.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 452:F4_CORE/core_cm4.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 453:F4_CORE/core_cm4.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 454:F4_CORE/core_cm4.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 455:F4_CORE/core_cm4.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 456:F4_CORE/core_cm4.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 457:F4_CORE/core_cm4.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 458:F4_CORE/core_cm4.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 459:F4_CORE/core_cm4.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  HardFault Status Register       
 460:F4_CORE/core_cm4.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 461:F4_CORE/core_cm4.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 462:F4_CORE/core_cm4.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  BusFault Address Register       
 463:F4_CORE/core_cm4.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 464:F4_CORE/core_cm4.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 465:F4_CORE/core_cm4.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 466:F4_CORE/core_cm4.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 467:F4_CORE/core_cm4.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 468:F4_CORE/core_cm4.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 469:F4_CORE/core_cm4.h ****        uint32_t RESERVED0[5];
 470:F4_CORE/core_cm4.h ****   __IO uint32_t CPACR;                   /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 471:F4_CORE/core_cm4.h **** } SCB_Type;
 472:F4_CORE/core_cm4.h **** 
 473:F4_CORE/core_cm4.h **** /* SCB CPUID Register Definitions */
 474:F4_CORE/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 475:F4_CORE/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 476:F4_CORE/core_cm4.h **** 
 477:F4_CORE/core_cm4.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 478:F4_CORE/core_cm4.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 479:F4_CORE/core_cm4.h **** 
 480:F4_CORE/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 481:F4_CORE/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 482:F4_CORE/core_cm4.h **** 
 483:F4_CORE/core_cm4.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 484:F4_CORE/core_cm4.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 485:F4_CORE/core_cm4.h **** 
 486:F4_CORE/core_cm4.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 487:F4_CORE/core_cm4.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 488:F4_CORE/core_cm4.h **** 
 489:F4_CORE/core_cm4.h **** /* SCB Interrupt Control State Register Definitions */
 490:F4_CORE/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 33


 491:F4_CORE/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 492:F4_CORE/core_cm4.h **** 
 493:F4_CORE/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 494:F4_CORE/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 495:F4_CORE/core_cm4.h **** 
 496:F4_CORE/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 497:F4_CORE/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 498:F4_CORE/core_cm4.h **** 
 499:F4_CORE/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 500:F4_CORE/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 501:F4_CORE/core_cm4.h **** 
 502:F4_CORE/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 503:F4_CORE/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 504:F4_CORE/core_cm4.h **** 
 505:F4_CORE/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 506:F4_CORE/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 507:F4_CORE/core_cm4.h **** 
 508:F4_CORE/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 509:F4_CORE/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 510:F4_CORE/core_cm4.h **** 
 511:F4_CORE/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 512:F4_CORE/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 513:F4_CORE/core_cm4.h **** 
 514:F4_CORE/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 515:F4_CORE/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 516:F4_CORE/core_cm4.h **** 
 517:F4_CORE/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 518:F4_CORE/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 519:F4_CORE/core_cm4.h **** 
 520:F4_CORE/core_cm4.h **** /* SCB Vector Table Offset Register Definitions */
 521:F4_CORE/core_cm4.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 522:F4_CORE/core_cm4.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 523:F4_CORE/core_cm4.h **** 
 524:F4_CORE/core_cm4.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 525:F4_CORE/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 526:F4_CORE/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 527:F4_CORE/core_cm4.h **** 
 528:F4_CORE/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 529:F4_CORE/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 530:F4_CORE/core_cm4.h **** 
 531:F4_CORE/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 532:F4_CORE/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 533:F4_CORE/core_cm4.h **** 
 534:F4_CORE/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 535:F4_CORE/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 536:F4_CORE/core_cm4.h **** 
 537:F4_CORE/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 538:F4_CORE/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 539:F4_CORE/core_cm4.h **** 
 540:F4_CORE/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 541:F4_CORE/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 542:F4_CORE/core_cm4.h **** 
 543:F4_CORE/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 544:F4_CORE/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 545:F4_CORE/core_cm4.h **** 
 546:F4_CORE/core_cm4.h **** /* SCB System Control Register Definitions */
 547:F4_CORE/core_cm4.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 34


 548:F4_CORE/core_cm4.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 549:F4_CORE/core_cm4.h **** 
 550:F4_CORE/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 551:F4_CORE/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 552:F4_CORE/core_cm4.h **** 
 553:F4_CORE/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 554:F4_CORE/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 555:F4_CORE/core_cm4.h **** 
 556:F4_CORE/core_cm4.h **** /* SCB Configuration Control Register Definitions */
 557:F4_CORE/core_cm4.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 558:F4_CORE/core_cm4.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 559:F4_CORE/core_cm4.h **** 
 560:F4_CORE/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 561:F4_CORE/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 562:F4_CORE/core_cm4.h **** 
 563:F4_CORE/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 564:F4_CORE/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 565:F4_CORE/core_cm4.h **** 
 566:F4_CORE/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 567:F4_CORE/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 568:F4_CORE/core_cm4.h **** 
 569:F4_CORE/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 570:F4_CORE/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 571:F4_CORE/core_cm4.h **** 
 572:F4_CORE/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 573:F4_CORE/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 574:F4_CORE/core_cm4.h **** 
 575:F4_CORE/core_cm4.h **** /* SCB System Handler Control and State Register Definitions */
 576:F4_CORE/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 577:F4_CORE/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 578:F4_CORE/core_cm4.h **** 
 579:F4_CORE/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 580:F4_CORE/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 581:F4_CORE/core_cm4.h **** 
 582:F4_CORE/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 583:F4_CORE/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 584:F4_CORE/core_cm4.h **** 
 585:F4_CORE/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 586:F4_CORE/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 587:F4_CORE/core_cm4.h **** 
 588:F4_CORE/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 589:F4_CORE/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 590:F4_CORE/core_cm4.h **** 
 591:F4_CORE/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 592:F4_CORE/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 593:F4_CORE/core_cm4.h **** 
 594:F4_CORE/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 595:F4_CORE/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 596:F4_CORE/core_cm4.h **** 
 597:F4_CORE/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 598:F4_CORE/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 599:F4_CORE/core_cm4.h **** 
 600:F4_CORE/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 601:F4_CORE/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 602:F4_CORE/core_cm4.h **** 
 603:F4_CORE/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 604:F4_CORE/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 35


 605:F4_CORE/core_cm4.h **** 
 606:F4_CORE/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 607:F4_CORE/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 608:F4_CORE/core_cm4.h **** 
 609:F4_CORE/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 610:F4_CORE/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 611:F4_CORE/core_cm4.h **** 
 612:F4_CORE/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 613:F4_CORE/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 614:F4_CORE/core_cm4.h **** 
 615:F4_CORE/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 616:F4_CORE/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 617:F4_CORE/core_cm4.h **** 
 618:F4_CORE/core_cm4.h **** /* SCB Configurable Fault Status Registers Definitions */
 619:F4_CORE/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 620:F4_CORE/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 621:F4_CORE/core_cm4.h **** 
 622:F4_CORE/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 623:F4_CORE/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 624:F4_CORE/core_cm4.h **** 
 625:F4_CORE/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 626:F4_CORE/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 627:F4_CORE/core_cm4.h **** 
 628:F4_CORE/core_cm4.h **** /* SCB Hard Fault Status Registers Definitions */
 629:F4_CORE/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 630:F4_CORE/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 631:F4_CORE/core_cm4.h **** 
 632:F4_CORE/core_cm4.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 633:F4_CORE/core_cm4.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 634:F4_CORE/core_cm4.h **** 
 635:F4_CORE/core_cm4.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 636:F4_CORE/core_cm4.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 637:F4_CORE/core_cm4.h **** 
 638:F4_CORE/core_cm4.h **** /* SCB Debug Fault Status Register Definitions */
 639:F4_CORE/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 640:F4_CORE/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 641:F4_CORE/core_cm4.h **** 
 642:F4_CORE/core_cm4.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 643:F4_CORE/core_cm4.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 644:F4_CORE/core_cm4.h **** 
 645:F4_CORE/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 646:F4_CORE/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 647:F4_CORE/core_cm4.h **** 
 648:F4_CORE/core_cm4.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 649:F4_CORE/core_cm4.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 650:F4_CORE/core_cm4.h **** 
 651:F4_CORE/core_cm4.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 652:F4_CORE/core_cm4.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 653:F4_CORE/core_cm4.h **** 
 654:F4_CORE/core_cm4.h **** /*@} end of group CMSIS_SCB */
 655:F4_CORE/core_cm4.h **** 
 656:F4_CORE/core_cm4.h **** 
 657:F4_CORE/core_cm4.h **** /** \ingroup  CMSIS_core_register
 658:F4_CORE/core_cm4.h ****     \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 659:F4_CORE/core_cm4.h ****     \brief      Type definitions for the System Control and ID Register not in the SCB
 660:F4_CORE/core_cm4.h ****   @{
 661:F4_CORE/core_cm4.h ****  */
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 36


 662:F4_CORE/core_cm4.h **** 
 663:F4_CORE/core_cm4.h **** /** \brief  Structure type to access the System Control and ID Register not in the SCB.
 664:F4_CORE/core_cm4.h ****  */
 665:F4_CORE/core_cm4.h **** typedef struct
 666:F4_CORE/core_cm4.h **** {
 667:F4_CORE/core_cm4.h ****        uint32_t RESERVED0[1];
 668:F4_CORE/core_cm4.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 669:F4_CORE/core_cm4.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 670:F4_CORE/core_cm4.h **** } SCnSCB_Type;
 671:F4_CORE/core_cm4.h **** 
 672:F4_CORE/core_cm4.h **** /* Interrupt Controller Type Register Definitions */
 673:F4_CORE/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0                                          /*!< ICTR: I
 674:F4_CORE/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 675:F4_CORE/core_cm4.h **** 
 676:F4_CORE/core_cm4.h **** /* Auxiliary Control Register Definitions */
 677:F4_CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Pos            9                                          /*!< ACTLR: 
 678:F4_CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: 
 679:F4_CORE/core_cm4.h **** 
 680:F4_CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Pos            8                                          /*!< ACTLR: 
 681:F4_CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: 
 682:F4_CORE/core_cm4.h **** 
 683:F4_CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2                                          /*!< ACTLR: 
 684:F4_CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 685:F4_CORE/core_cm4.h **** 
 686:F4_CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1                                          /*!< ACTLR: 
 687:F4_CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 688:F4_CORE/core_cm4.h **** 
 689:F4_CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0                                          /*!< ACTLR: 
 690:F4_CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 691:F4_CORE/core_cm4.h **** 
 692:F4_CORE/core_cm4.h **** /*@} end of group CMSIS_SCnotSCB */
 693:F4_CORE/core_cm4.h **** 
 694:F4_CORE/core_cm4.h **** 
 695:F4_CORE/core_cm4.h **** /** \ingroup  CMSIS_core_register
 696:F4_CORE/core_cm4.h ****     \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 697:F4_CORE/core_cm4.h ****     \brief      Type definitions for the System Timer Registers.
 698:F4_CORE/core_cm4.h ****   @{
 699:F4_CORE/core_cm4.h ****  */
 700:F4_CORE/core_cm4.h **** 
 701:F4_CORE/core_cm4.h **** /** \brief  Structure type to access the System Timer (SysTick).
 702:F4_CORE/core_cm4.h ****  */
 703:F4_CORE/core_cm4.h **** typedef struct
 704:F4_CORE/core_cm4.h **** {
 705:F4_CORE/core_cm4.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 706:F4_CORE/core_cm4.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 707:F4_CORE/core_cm4.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 708:F4_CORE/core_cm4.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 709:F4_CORE/core_cm4.h **** } SysTick_Type;
 710:F4_CORE/core_cm4.h **** 
 711:F4_CORE/core_cm4.h **** /* SysTick Control / Status Register Definitions */
 712:F4_CORE/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 713:F4_CORE/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 714:F4_CORE/core_cm4.h **** 
 715:F4_CORE/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 716:F4_CORE/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 717:F4_CORE/core_cm4.h **** 
 718:F4_CORE/core_cm4.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 37


 719:F4_CORE/core_cm4.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 720:F4_CORE/core_cm4.h **** 
 721:F4_CORE/core_cm4.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 722:F4_CORE/core_cm4.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 723:F4_CORE/core_cm4.h **** 
 724:F4_CORE/core_cm4.h **** /* SysTick Reload Register Definitions */
 725:F4_CORE/core_cm4.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 726:F4_CORE/core_cm4.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 727:F4_CORE/core_cm4.h **** 
 728:F4_CORE/core_cm4.h **** /* SysTick Current Register Definitions */
 729:F4_CORE/core_cm4.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 730:F4_CORE/core_cm4.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 731:F4_CORE/core_cm4.h **** 
 732:F4_CORE/core_cm4.h **** /* SysTick Calibration Register Definitions */
 733:F4_CORE/core_cm4.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 734:F4_CORE/core_cm4.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 735:F4_CORE/core_cm4.h **** 
 736:F4_CORE/core_cm4.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 737:F4_CORE/core_cm4.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 738:F4_CORE/core_cm4.h **** 
 739:F4_CORE/core_cm4.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 740:F4_CORE/core_cm4.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 741:F4_CORE/core_cm4.h **** 
 742:F4_CORE/core_cm4.h **** /*@} end of group CMSIS_SysTick */
 743:F4_CORE/core_cm4.h **** 
 744:F4_CORE/core_cm4.h **** 
 745:F4_CORE/core_cm4.h **** /** \ingroup  CMSIS_core_register
 746:F4_CORE/core_cm4.h ****     \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 747:F4_CORE/core_cm4.h ****     \brief      Type definitions for the Instrumentation Trace Macrocell (ITM)
 748:F4_CORE/core_cm4.h ****   @{
 749:F4_CORE/core_cm4.h ****  */
 750:F4_CORE/core_cm4.h **** 
 751:F4_CORE/core_cm4.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 752:F4_CORE/core_cm4.h ****  */
 753:F4_CORE/core_cm4.h **** typedef struct
 754:F4_CORE/core_cm4.h **** {
 755:F4_CORE/core_cm4.h ****   __O  union
 756:F4_CORE/core_cm4.h ****   {
 757:F4_CORE/core_cm4.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 758:F4_CORE/core_cm4.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 759:F4_CORE/core_cm4.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 760:F4_CORE/core_cm4.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 761:F4_CORE/core_cm4.h ****        uint32_t RESERVED0[864];
 762:F4_CORE/core_cm4.h ****   __IO uint32_t TER;                     /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register       
 763:F4_CORE/core_cm4.h ****        uint32_t RESERVED1[15];
 764:F4_CORE/core_cm4.h ****   __IO uint32_t TPR;                     /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register    
 765:F4_CORE/core_cm4.h ****        uint32_t RESERVED2[15];
 766:F4_CORE/core_cm4.h ****   __IO uint32_t TCR;                     /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register      
 767:F4_CORE/core_cm4.h ****        uint32_t RESERVED3[29];
 768:F4_CORE/core_cm4.h ****   __O  uint32_t IWR;                     /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register  
 769:F4_CORE/core_cm4.h ****   __I  uint32_t IRR;                     /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register   
 770:F4_CORE/core_cm4.h ****   __IO uint32_t IMCR;                    /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 771:F4_CORE/core_cm4.h ****        uint32_t RESERVED4[43];
 772:F4_CORE/core_cm4.h ****   __O  uint32_t LAR;                     /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register        
 773:F4_CORE/core_cm4.h ****   __I  uint32_t LSR;                     /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register        
 774:F4_CORE/core_cm4.h ****        uint32_t RESERVED5[6];
 775:F4_CORE/core_cm4.h ****   __I  uint32_t PID4;                    /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 38


 776:F4_CORE/core_cm4.h ****   __I  uint32_t PID5;                    /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 777:F4_CORE/core_cm4.h ****   __I  uint32_t PID6;                    /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 778:F4_CORE/core_cm4.h ****   __I  uint32_t PID7;                    /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 779:F4_CORE/core_cm4.h ****   __I  uint32_t PID0;                    /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 780:F4_CORE/core_cm4.h ****   __I  uint32_t PID1;                    /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 781:F4_CORE/core_cm4.h ****   __I  uint32_t PID2;                    /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 782:F4_CORE/core_cm4.h ****   __I  uint32_t PID3;                    /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 783:F4_CORE/core_cm4.h ****   __I  uint32_t CID0;                    /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 784:F4_CORE/core_cm4.h ****   __I  uint32_t CID1;                    /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 785:F4_CORE/core_cm4.h ****   __I  uint32_t CID2;                    /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 786:F4_CORE/core_cm4.h ****   __I  uint32_t CID3;                    /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 787:F4_CORE/core_cm4.h **** } ITM_Type;
 788:F4_CORE/core_cm4.h **** 
 789:F4_CORE/core_cm4.h **** /* ITM Trace Privilege Register Definitions */
 790:F4_CORE/core_cm4.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 791:F4_CORE/core_cm4.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL /*<< ITM_TPR_PRIVMASK_Pos*/)            /*!< ITM 
 792:F4_CORE/core_cm4.h **** 
 793:F4_CORE/core_cm4.h **** /* ITM Trace Control Register Definitions */
 794:F4_CORE/core_cm4.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 795:F4_CORE/core_cm4.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 796:F4_CORE/core_cm4.h **** 
 797:F4_CORE/core_cm4.h **** #define ITM_TCR_TraceBusID_Pos             16                                             /*!< ITM 
 798:F4_CORE/core_cm4.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 799:F4_CORE/core_cm4.h **** 
 800:F4_CORE/core_cm4.h **** #define ITM_TCR_GTSFREQ_Pos                10                                             /*!< ITM 
 801:F4_CORE/core_cm4.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 802:F4_CORE/core_cm4.h **** 
 803:F4_CORE/core_cm4.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 804:F4_CORE/core_cm4.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 805:F4_CORE/core_cm4.h **** 
 806:F4_CORE/core_cm4.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 807:F4_CORE/core_cm4.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 808:F4_CORE/core_cm4.h **** 
 809:F4_CORE/core_cm4.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 810:F4_CORE/core_cm4.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 811:F4_CORE/core_cm4.h **** 
 812:F4_CORE/core_cm4.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 813:F4_CORE/core_cm4.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 814:F4_CORE/core_cm4.h **** 
 815:F4_CORE/core_cm4.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 816:F4_CORE/core_cm4.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 817:F4_CORE/core_cm4.h **** 
 818:F4_CORE/core_cm4.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 819:F4_CORE/core_cm4.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 820:F4_CORE/core_cm4.h **** 
 821:F4_CORE/core_cm4.h **** /* ITM Integration Write Register Definitions */
 822:F4_CORE/core_cm4.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 823:F4_CORE/core_cm4.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 824:F4_CORE/core_cm4.h **** 
 825:F4_CORE/core_cm4.h **** /* ITM Integration Read Register Definitions */
 826:F4_CORE/core_cm4.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 827:F4_CORE/core_cm4.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
 828:F4_CORE/core_cm4.h **** 
 829:F4_CORE/core_cm4.h **** /* ITM Integration Mode Control Register Definitions */
 830:F4_CORE/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 831:F4_CORE/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 832:F4_CORE/core_cm4.h **** 
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 39


 833:F4_CORE/core_cm4.h **** /* ITM Lock Status Register Definitions */
 834:F4_CORE/core_cm4.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 835:F4_CORE/core_cm4.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 836:F4_CORE/core_cm4.h **** 
 837:F4_CORE/core_cm4.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 838:F4_CORE/core_cm4.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 839:F4_CORE/core_cm4.h **** 
 840:F4_CORE/core_cm4.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 841:F4_CORE/core_cm4.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 842:F4_CORE/core_cm4.h **** 
 843:F4_CORE/core_cm4.h **** /*@}*/ /* end of group CMSIS_ITM */
 844:F4_CORE/core_cm4.h **** 
 845:F4_CORE/core_cm4.h **** 
 846:F4_CORE/core_cm4.h **** /** \ingroup  CMSIS_core_register
 847:F4_CORE/core_cm4.h ****     \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 848:F4_CORE/core_cm4.h ****     \brief      Type definitions for the Data Watchpoint and Trace (DWT)
 849:F4_CORE/core_cm4.h ****   @{
 850:F4_CORE/core_cm4.h ****  */
 851:F4_CORE/core_cm4.h **** 
 852:F4_CORE/core_cm4.h **** /** \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 853:F4_CORE/core_cm4.h ****  */
 854:F4_CORE/core_cm4.h **** typedef struct
 855:F4_CORE/core_cm4.h **** {
 856:F4_CORE/core_cm4.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  Control Register                
 857:F4_CORE/core_cm4.h ****   __IO uint32_t CYCCNT;                  /*!< Offset: 0x004 (R/W)  Cycle Count Register            
 858:F4_CORE/core_cm4.h ****   __IO uint32_t CPICNT;                  /*!< Offset: 0x008 (R/W)  CPI Count Register              
 859:F4_CORE/core_cm4.h ****   __IO uint32_t EXCCNT;                  /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 860:F4_CORE/core_cm4.h ****   __IO uint32_t SLEEPCNT;                /*!< Offset: 0x010 (R/W)  Sleep Count Register            
 861:F4_CORE/core_cm4.h ****   __IO uint32_t LSUCNT;                  /*!< Offset: 0x014 (R/W)  LSU Count Register              
 862:F4_CORE/core_cm4.h ****   __IO uint32_t FOLDCNT;                 /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 863:F4_CORE/core_cm4.h ****   __I  uint32_t PCSR;                    /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 864:F4_CORE/core_cm4.h ****   __IO uint32_t COMP0;                   /*!< Offset: 0x020 (R/W)  Comparator Register 0           
 865:F4_CORE/core_cm4.h ****   __IO uint32_t MASK0;                   /*!< Offset: 0x024 (R/W)  Mask Register 0                 
 866:F4_CORE/core_cm4.h ****   __IO uint32_t FUNCTION0;               /*!< Offset: 0x028 (R/W)  Function Register 0             
 867:F4_CORE/core_cm4.h ****        uint32_t RESERVED0[1];
 868:F4_CORE/core_cm4.h ****   __IO uint32_t COMP1;                   /*!< Offset: 0x030 (R/W)  Comparator Register 1           
 869:F4_CORE/core_cm4.h ****   __IO uint32_t MASK1;                   /*!< Offset: 0x034 (R/W)  Mask Register 1                 
 870:F4_CORE/core_cm4.h ****   __IO uint32_t FUNCTION1;               /*!< Offset: 0x038 (R/W)  Function Register 1             
 871:F4_CORE/core_cm4.h ****        uint32_t RESERVED1[1];
 872:F4_CORE/core_cm4.h ****   __IO uint32_t COMP2;                   /*!< Offset: 0x040 (R/W)  Comparator Register 2           
 873:F4_CORE/core_cm4.h ****   __IO uint32_t MASK2;                   /*!< Offset: 0x044 (R/W)  Mask Register 2                 
 874:F4_CORE/core_cm4.h ****   __IO uint32_t FUNCTION2;               /*!< Offset: 0x048 (R/W)  Function Register 2             
 875:F4_CORE/core_cm4.h ****        uint32_t RESERVED2[1];
 876:F4_CORE/core_cm4.h ****   __IO uint32_t COMP3;                   /*!< Offset: 0x050 (R/W)  Comparator Register 3           
 877:F4_CORE/core_cm4.h ****   __IO uint32_t MASK3;                   /*!< Offset: 0x054 (R/W)  Mask Register 3                 
 878:F4_CORE/core_cm4.h ****   __IO uint32_t FUNCTION3;               /*!< Offset: 0x058 (R/W)  Function Register 3             
 879:F4_CORE/core_cm4.h **** } DWT_Type;
 880:F4_CORE/core_cm4.h **** 
 881:F4_CORE/core_cm4.h **** /* DWT Control Register Definitions */
 882:F4_CORE/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Pos               28                                          /*!< DWT CTR
 883:F4_CORE/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 884:F4_CORE/core_cm4.h **** 
 885:F4_CORE/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Pos              27                                          /*!< DWT CTR
 886:F4_CORE/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 887:F4_CORE/core_cm4.h **** 
 888:F4_CORE/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26                                          /*!< DWT CTR
 889:F4_CORE/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 40


 890:F4_CORE/core_cm4.h **** 
 891:F4_CORE/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Pos              25                                          /*!< DWT CTR
 892:F4_CORE/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 893:F4_CORE/core_cm4.h **** 
 894:F4_CORE/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Pos              24                                          /*!< DWT CTR
 895:F4_CORE/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 896:F4_CORE/core_cm4.h **** 
 897:F4_CORE/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Pos             22                                          /*!< DWT CTR
 898:F4_CORE/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 899:F4_CORE/core_cm4.h **** 
 900:F4_CORE/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21                                          /*!< DWT CTR
 901:F4_CORE/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 902:F4_CORE/core_cm4.h **** 
 903:F4_CORE/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Pos             20                                          /*!< DWT CTR
 904:F4_CORE/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 905:F4_CORE/core_cm4.h **** 
 906:F4_CORE/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19                                          /*!< DWT CTR
 907:F4_CORE/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 908:F4_CORE/core_cm4.h **** 
 909:F4_CORE/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Pos             18                                          /*!< DWT CTR
 910:F4_CORE/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 911:F4_CORE/core_cm4.h **** 
 912:F4_CORE/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Pos             17                                          /*!< DWT CTR
 913:F4_CORE/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 914:F4_CORE/core_cm4.h **** 
 915:F4_CORE/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Pos             16                                          /*!< DWT CTR
 916:F4_CORE/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 917:F4_CORE/core_cm4.h **** 
 918:F4_CORE/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12                                          /*!< DWT CTR
 919:F4_CORE/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 920:F4_CORE/core_cm4.h **** 
 921:F4_CORE/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Pos               10                                          /*!< DWT CTR
 922:F4_CORE/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 923:F4_CORE/core_cm4.h **** 
 924:F4_CORE/core_cm4.h **** #define DWT_CTRL_CYCTAP_Pos                 9                                          /*!< DWT CTR
 925:F4_CORE/core_cm4.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 926:F4_CORE/core_cm4.h **** 
 927:F4_CORE/core_cm4.h **** #define DWT_CTRL_POSTINIT_Pos               5                                          /*!< DWT CTR
 928:F4_CORE/core_cm4.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 929:F4_CORE/core_cm4.h **** 
 930:F4_CORE/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Pos             1                                          /*!< DWT CTR
 931:F4_CORE/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 932:F4_CORE/core_cm4.h **** 
 933:F4_CORE/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Pos              0                                          /*!< DWT CTR
 934:F4_CORE/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 935:F4_CORE/core_cm4.h **** 
 936:F4_CORE/core_cm4.h **** /* DWT CPI Count Register Definitions */
 937:F4_CORE/core_cm4.h **** #define DWT_CPICNT_CPICNT_Pos               0                                          /*!< DWT CPI
 938:F4_CORE/core_cm4.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 939:F4_CORE/core_cm4.h **** 
 940:F4_CORE/core_cm4.h **** /* DWT Exception Overhead Count Register Definitions */
 941:F4_CORE/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Pos               0                                          /*!< DWT EXC
 942:F4_CORE/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
 943:F4_CORE/core_cm4.h **** 
 944:F4_CORE/core_cm4.h **** /* DWT Sleep Count Register Definitions */
 945:F4_CORE/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0                                          /*!< DWT SLE
 946:F4_CORE/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 41


 947:F4_CORE/core_cm4.h **** 
 948:F4_CORE/core_cm4.h **** /* DWT LSU Count Register Definitions */
 949:F4_CORE/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Pos               0                                          /*!< DWT LSU
 950:F4_CORE/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
 951:F4_CORE/core_cm4.h **** 
 952:F4_CORE/core_cm4.h **** /* DWT Folded-instruction Count Register Definitions */
 953:F4_CORE/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0                                          /*!< DWT FOL
 954:F4_CORE/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
 955:F4_CORE/core_cm4.h **** 
 956:F4_CORE/core_cm4.h **** /* DWT Comparator Mask Register Definitions */
 957:F4_CORE/core_cm4.h **** #define DWT_MASK_MASK_Pos                   0                                          /*!< DWT MAS
 958:F4_CORE/core_cm4.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
 959:F4_CORE/core_cm4.h **** 
 960:F4_CORE/core_cm4.h **** /* DWT Comparator Function Register Definitions */
 961:F4_CORE/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Pos           24                                          /*!< DWT FUN
 962:F4_CORE/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
 963:F4_CORE/core_cm4.h **** 
 964:F4_CORE/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16                                          /*!< DWT FUN
 965:F4_CORE/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
 966:F4_CORE/core_cm4.h **** 
 967:F4_CORE/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12                                          /*!< DWT FUN
 968:F4_CORE/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
 969:F4_CORE/core_cm4.h **** 
 970:F4_CORE/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10                                          /*!< DWT FUN
 971:F4_CORE/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
 972:F4_CORE/core_cm4.h **** 
 973:F4_CORE/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9                                          /*!< DWT FUN
 974:F4_CORE/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
 975:F4_CORE/core_cm4.h **** 
 976:F4_CORE/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8                                          /*!< DWT FUN
 977:F4_CORE/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
 978:F4_CORE/core_cm4.h **** 
 979:F4_CORE/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7                                          /*!< DWT FUN
 980:F4_CORE/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
 981:F4_CORE/core_cm4.h **** 
 982:F4_CORE/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5                                          /*!< DWT FUN
 983:F4_CORE/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
 984:F4_CORE/core_cm4.h **** 
 985:F4_CORE/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Pos           0                                          /*!< DWT FUN
 986:F4_CORE/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
 987:F4_CORE/core_cm4.h **** 
 988:F4_CORE/core_cm4.h **** /*@}*/ /* end of group CMSIS_DWT */
 989:F4_CORE/core_cm4.h **** 
 990:F4_CORE/core_cm4.h **** 
 991:F4_CORE/core_cm4.h **** /** \ingroup  CMSIS_core_register
 992:F4_CORE/core_cm4.h ****     \defgroup CMSIS_TPI     Trace Port Interface (TPI)
 993:F4_CORE/core_cm4.h ****     \brief      Type definitions for the Trace Port Interface (TPI)
 994:F4_CORE/core_cm4.h ****   @{
 995:F4_CORE/core_cm4.h ****  */
 996:F4_CORE/core_cm4.h **** 
 997:F4_CORE/core_cm4.h **** /** \brief  Structure type to access the Trace Port Interface Register (TPI).
 998:F4_CORE/core_cm4.h ****  */
 999:F4_CORE/core_cm4.h **** typedef struct
1000:F4_CORE/core_cm4.h **** {
1001:F4_CORE/core_cm4.h ****   __IO uint32_t SSPSR;                   /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
1002:F4_CORE/core_cm4.h ****   __IO uint32_t CSPSR;                   /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
1003:F4_CORE/core_cm4.h ****        uint32_t RESERVED0[2];
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 42


1004:F4_CORE/core_cm4.h ****   __IO uint32_t ACPR;                    /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1005:F4_CORE/core_cm4.h ****        uint32_t RESERVED1[55];
1006:F4_CORE/core_cm4.h ****   __IO uint32_t SPPR;                    /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1007:F4_CORE/core_cm4.h ****        uint32_t RESERVED2[131];
1008:F4_CORE/core_cm4.h ****   __I  uint32_t FFSR;                    /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1009:F4_CORE/core_cm4.h ****   __IO uint32_t FFCR;                    /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1010:F4_CORE/core_cm4.h ****   __I  uint32_t FSCR;                    /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1011:F4_CORE/core_cm4.h ****        uint32_t RESERVED3[759];
1012:F4_CORE/core_cm4.h ****   __I  uint32_t TRIGGER;                 /*!< Offset: 0xEE8 (R/ )  TRIGGER */
1013:F4_CORE/core_cm4.h ****   __I  uint32_t FIFO0;                   /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1014:F4_CORE/core_cm4.h ****   __I  uint32_t ITATBCTR2;               /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1015:F4_CORE/core_cm4.h ****        uint32_t RESERVED4[1];
1016:F4_CORE/core_cm4.h ****   __I  uint32_t ITATBCTR0;               /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1017:F4_CORE/core_cm4.h ****   __I  uint32_t FIFO1;                   /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1018:F4_CORE/core_cm4.h ****   __IO uint32_t ITCTRL;                  /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1019:F4_CORE/core_cm4.h ****        uint32_t RESERVED5[39];
1020:F4_CORE/core_cm4.h ****   __IO uint32_t CLAIMSET;                /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1021:F4_CORE/core_cm4.h ****   __IO uint32_t CLAIMCLR;                /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1022:F4_CORE/core_cm4.h ****        uint32_t RESERVED7[8];
1023:F4_CORE/core_cm4.h ****   __I  uint32_t DEVID;                   /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1024:F4_CORE/core_cm4.h ****   __I  uint32_t DEVTYPE;                 /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1025:F4_CORE/core_cm4.h **** } TPI_Type;
1026:F4_CORE/core_cm4.h **** 
1027:F4_CORE/core_cm4.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1028:F4_CORE/core_cm4.h **** #define TPI_ACPR_PRESCALER_Pos              0                                          /*!< TPI ACP
1029:F4_CORE/core_cm4.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1030:F4_CORE/core_cm4.h **** 
1031:F4_CORE/core_cm4.h **** /* TPI Selected Pin Protocol Register Definitions */
1032:F4_CORE/core_cm4.h **** #define TPI_SPPR_TXMODE_Pos                 0                                          /*!< TPI SPP
1033:F4_CORE/core_cm4.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1034:F4_CORE/core_cm4.h **** 
1035:F4_CORE/core_cm4.h **** /* TPI Formatter and Flush Status Register Definitions */
1036:F4_CORE/core_cm4.h **** #define TPI_FFSR_FtNonStop_Pos              3                                          /*!< TPI FFS
1037:F4_CORE/core_cm4.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1038:F4_CORE/core_cm4.h **** 
1039:F4_CORE/core_cm4.h **** #define TPI_FFSR_TCPresent_Pos              2                                          /*!< TPI FFS
1040:F4_CORE/core_cm4.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1041:F4_CORE/core_cm4.h **** 
1042:F4_CORE/core_cm4.h **** #define TPI_FFSR_FtStopped_Pos              1                                          /*!< TPI FFS
1043:F4_CORE/core_cm4.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1044:F4_CORE/core_cm4.h **** 
1045:F4_CORE/core_cm4.h **** #define TPI_FFSR_FlInProg_Pos               0                                          /*!< TPI FFS
1046:F4_CORE/core_cm4.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1047:F4_CORE/core_cm4.h **** 
1048:F4_CORE/core_cm4.h **** /* TPI Formatter and Flush Control Register Definitions */
1049:F4_CORE/core_cm4.h **** #define TPI_FFCR_TrigIn_Pos                 8                                          /*!< TPI FFC
1050:F4_CORE/core_cm4.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1051:F4_CORE/core_cm4.h **** 
1052:F4_CORE/core_cm4.h **** #define TPI_FFCR_EnFCont_Pos                1                                          /*!< TPI FFC
1053:F4_CORE/core_cm4.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1054:F4_CORE/core_cm4.h **** 
1055:F4_CORE/core_cm4.h **** /* TPI TRIGGER Register Definitions */
1056:F4_CORE/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Pos             0                                          /*!< TPI TRI
1057:F4_CORE/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1058:F4_CORE/core_cm4.h **** 
1059:F4_CORE/core_cm4.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1060:F4_CORE/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 43


1061:F4_CORE/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1062:F4_CORE/core_cm4.h **** 
1063:F4_CORE/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27                                          /*!< TPI FIF
1064:F4_CORE/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1065:F4_CORE/core_cm4.h **** 
1066:F4_CORE/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
1067:F4_CORE/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1068:F4_CORE/core_cm4.h **** 
1069:F4_CORE/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24                                          /*!< TPI FIF
1070:F4_CORE/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1071:F4_CORE/core_cm4.h **** 
1072:F4_CORE/core_cm4.h **** #define TPI_FIFO0_ETM2_Pos                 16                                          /*!< TPI FIF
1073:F4_CORE/core_cm4.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1074:F4_CORE/core_cm4.h **** 
1075:F4_CORE/core_cm4.h **** #define TPI_FIFO0_ETM1_Pos                  8                                          /*!< TPI FIF
1076:F4_CORE/core_cm4.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1077:F4_CORE/core_cm4.h **** 
1078:F4_CORE/core_cm4.h **** #define TPI_FIFO0_ETM0_Pos                  0                                          /*!< TPI FIF
1079:F4_CORE/core_cm4.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1080:F4_CORE/core_cm4.h **** 
1081:F4_CORE/core_cm4.h **** /* TPI ITATBCTR2 Register Definitions */
1082:F4_CORE/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0                                          /*!< TPI ITA
1083:F4_CORE/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR2_ATREADY_Pos*/)    /*!< TPI ITA
1084:F4_CORE/core_cm4.h **** 
1085:F4_CORE/core_cm4.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1086:F4_CORE/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
1087:F4_CORE/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1088:F4_CORE/core_cm4.h **** 
1089:F4_CORE/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27                                          /*!< TPI FIF
1090:F4_CORE/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1091:F4_CORE/core_cm4.h **** 
1092:F4_CORE/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
1093:F4_CORE/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1094:F4_CORE/core_cm4.h **** 
1095:F4_CORE/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24                                          /*!< TPI FIF
1096:F4_CORE/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1097:F4_CORE/core_cm4.h **** 
1098:F4_CORE/core_cm4.h **** #define TPI_FIFO1_ITM2_Pos                 16                                          /*!< TPI FIF
1099:F4_CORE/core_cm4.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1100:F4_CORE/core_cm4.h **** 
1101:F4_CORE/core_cm4.h **** #define TPI_FIFO1_ITM1_Pos                  8                                          /*!< TPI FIF
1102:F4_CORE/core_cm4.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1103:F4_CORE/core_cm4.h **** 
1104:F4_CORE/core_cm4.h **** #define TPI_FIFO1_ITM0_Pos                  0                                          /*!< TPI FIF
1105:F4_CORE/core_cm4.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1106:F4_CORE/core_cm4.h **** 
1107:F4_CORE/core_cm4.h **** /* TPI ITATBCTR0 Register Definitions */
1108:F4_CORE/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0                                          /*!< TPI ITA
1109:F4_CORE/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR0_ATREADY_Pos*/)    /*!< TPI ITA
1110:F4_CORE/core_cm4.h **** 
1111:F4_CORE/core_cm4.h **** /* TPI Integration Mode Control Register Definitions */
1112:F4_CORE/core_cm4.h **** #define TPI_ITCTRL_Mode_Pos                 0                                          /*!< TPI ITC
1113:F4_CORE/core_cm4.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1114:F4_CORE/core_cm4.h **** 
1115:F4_CORE/core_cm4.h **** /* TPI DEVID Register Definitions */
1116:F4_CORE/core_cm4.h **** #define TPI_DEVID_NRZVALID_Pos             11                                          /*!< TPI DEV
1117:F4_CORE/core_cm4.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 44


1118:F4_CORE/core_cm4.h **** 
1119:F4_CORE/core_cm4.h **** #define TPI_DEVID_MANCVALID_Pos            10                                          /*!< TPI DEV
1120:F4_CORE/core_cm4.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1121:F4_CORE/core_cm4.h **** 
1122:F4_CORE/core_cm4.h **** #define TPI_DEVID_PTINVALID_Pos             9                                          /*!< TPI DEV
1123:F4_CORE/core_cm4.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1124:F4_CORE/core_cm4.h **** 
1125:F4_CORE/core_cm4.h **** #define TPI_DEVID_MinBufSz_Pos              6                                          /*!< TPI DEV
1126:F4_CORE/core_cm4.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1127:F4_CORE/core_cm4.h **** 
1128:F4_CORE/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Pos             5                                          /*!< TPI DEV
1129:F4_CORE/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1130:F4_CORE/core_cm4.h **** 
1131:F4_CORE/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Pos          0                                          /*!< TPI DEV
1132:F4_CORE/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1133:F4_CORE/core_cm4.h **** 
1134:F4_CORE/core_cm4.h **** /* TPI DEVTYPE Register Definitions */
1135:F4_CORE/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Pos           4                                          /*!< TPI DEV
1136:F4_CORE/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1137:F4_CORE/core_cm4.h **** 
1138:F4_CORE/core_cm4.h **** #define TPI_DEVTYPE_SubType_Pos             0                                          /*!< TPI DEV
1139:F4_CORE/core_cm4.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1140:F4_CORE/core_cm4.h **** 
1141:F4_CORE/core_cm4.h **** /*@}*/ /* end of group CMSIS_TPI */
1142:F4_CORE/core_cm4.h **** 
1143:F4_CORE/core_cm4.h **** 
1144:F4_CORE/core_cm4.h **** #if (__MPU_PRESENT == 1)
1145:F4_CORE/core_cm4.h **** /** \ingroup  CMSIS_core_register
1146:F4_CORE/core_cm4.h ****     \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1147:F4_CORE/core_cm4.h ****     \brief      Type definitions for the Memory Protection Unit (MPU)
1148:F4_CORE/core_cm4.h ****   @{
1149:F4_CORE/core_cm4.h ****  */
1150:F4_CORE/core_cm4.h **** 
1151:F4_CORE/core_cm4.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
1152:F4_CORE/core_cm4.h ****  */
1153:F4_CORE/core_cm4.h **** typedef struct
1154:F4_CORE/core_cm4.h **** {
1155:F4_CORE/core_cm4.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
1156:F4_CORE/core_cm4.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
1157:F4_CORE/core_cm4.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
1158:F4_CORE/core_cm4.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1159:F4_CORE/core_cm4.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1160:F4_CORE/core_cm4.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1161:F4_CORE/core_cm4.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1162:F4_CORE/core_cm4.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1163:F4_CORE/core_cm4.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1164:F4_CORE/core_cm4.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1165:F4_CORE/core_cm4.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1166:F4_CORE/core_cm4.h **** } MPU_Type;
1167:F4_CORE/core_cm4.h **** 
1168:F4_CORE/core_cm4.h **** /* MPU Type Register */
1169:F4_CORE/core_cm4.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
1170:F4_CORE/core_cm4.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1171:F4_CORE/core_cm4.h **** 
1172:F4_CORE/core_cm4.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
1173:F4_CORE/core_cm4.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1174:F4_CORE/core_cm4.h **** 
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 45


1175:F4_CORE/core_cm4.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
1176:F4_CORE/core_cm4.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1177:F4_CORE/core_cm4.h **** 
1178:F4_CORE/core_cm4.h **** /* MPU Control Register */
1179:F4_CORE/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
1180:F4_CORE/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1181:F4_CORE/core_cm4.h **** 
1182:F4_CORE/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
1183:F4_CORE/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1184:F4_CORE/core_cm4.h **** 
1185:F4_CORE/core_cm4.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
1186:F4_CORE/core_cm4.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1187:F4_CORE/core_cm4.h **** 
1188:F4_CORE/core_cm4.h **** /* MPU Region Number Register */
1189:F4_CORE/core_cm4.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
1190:F4_CORE/core_cm4.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1191:F4_CORE/core_cm4.h **** 
1192:F4_CORE/core_cm4.h **** /* MPU Region Base Address Register */
1193:F4_CORE/core_cm4.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
1194:F4_CORE/core_cm4.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1195:F4_CORE/core_cm4.h **** 
1196:F4_CORE/core_cm4.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
1197:F4_CORE/core_cm4.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1198:F4_CORE/core_cm4.h **** 
1199:F4_CORE/core_cm4.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
1200:F4_CORE/core_cm4.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1201:F4_CORE/core_cm4.h **** 
1202:F4_CORE/core_cm4.h **** /* MPU Region Attribute and Size Register */
1203:F4_CORE/core_cm4.h **** #define MPU_RASR_ATTRS_Pos                 16                                             /*!< MPU 
1204:F4_CORE/core_cm4.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1205:F4_CORE/core_cm4.h **** 
1206:F4_CORE/core_cm4.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
1207:F4_CORE/core_cm4.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1208:F4_CORE/core_cm4.h **** 
1209:F4_CORE/core_cm4.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
1210:F4_CORE/core_cm4.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1211:F4_CORE/core_cm4.h **** 
1212:F4_CORE/core_cm4.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
1213:F4_CORE/core_cm4.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1214:F4_CORE/core_cm4.h **** 
1215:F4_CORE/core_cm4.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
1216:F4_CORE/core_cm4.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1217:F4_CORE/core_cm4.h **** 
1218:F4_CORE/core_cm4.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
1219:F4_CORE/core_cm4.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1220:F4_CORE/core_cm4.h **** 
1221:F4_CORE/core_cm4.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
1222:F4_CORE/core_cm4.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1223:F4_CORE/core_cm4.h **** 
1224:F4_CORE/core_cm4.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
1225:F4_CORE/core_cm4.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1226:F4_CORE/core_cm4.h **** 
1227:F4_CORE/core_cm4.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
1228:F4_CORE/core_cm4.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1229:F4_CORE/core_cm4.h **** 
1230:F4_CORE/core_cm4.h **** #define MPU_RASR_ENABLE_Pos                 0                                             /*!< MPU 
1231:F4_CORE/core_cm4.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 46


1232:F4_CORE/core_cm4.h **** 
1233:F4_CORE/core_cm4.h **** /*@} end of group CMSIS_MPU */
1234:F4_CORE/core_cm4.h **** #endif
1235:F4_CORE/core_cm4.h **** 
1236:F4_CORE/core_cm4.h **** 
1237:F4_CORE/core_cm4.h **** #if (__FPU_PRESENT == 1)
1238:F4_CORE/core_cm4.h **** /** \ingroup  CMSIS_core_register
1239:F4_CORE/core_cm4.h ****     \defgroup CMSIS_FPU     Floating Point Unit (FPU)
1240:F4_CORE/core_cm4.h ****     \brief      Type definitions for the Floating Point Unit (FPU)
1241:F4_CORE/core_cm4.h ****   @{
1242:F4_CORE/core_cm4.h ****  */
1243:F4_CORE/core_cm4.h **** 
1244:F4_CORE/core_cm4.h **** /** \brief  Structure type to access the Floating Point Unit (FPU).
1245:F4_CORE/core_cm4.h ****  */
1246:F4_CORE/core_cm4.h **** typedef struct
1247:F4_CORE/core_cm4.h **** {
1248:F4_CORE/core_cm4.h ****        uint32_t RESERVED0[1];
1249:F4_CORE/core_cm4.h ****   __IO uint32_t FPCCR;                   /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
1250:F4_CORE/core_cm4.h ****   __IO uint32_t FPCAR;                   /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
1251:F4_CORE/core_cm4.h ****   __IO uint32_t FPDSCR;                  /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
1252:F4_CORE/core_cm4.h ****   __I  uint32_t MVFR0;                   /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
1253:F4_CORE/core_cm4.h ****   __I  uint32_t MVFR1;                   /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
1254:F4_CORE/core_cm4.h **** } FPU_Type;
1255:F4_CORE/core_cm4.h **** 
1256:F4_CORE/core_cm4.h **** /* Floating-Point Context Control Register */
1257:F4_CORE/core_cm4.h **** #define FPU_FPCCR_ASPEN_Pos                31                                             /*!< FPCC
1258:F4_CORE/core_cm4.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
1259:F4_CORE/core_cm4.h **** 
1260:F4_CORE/core_cm4.h **** #define FPU_FPCCR_LSPEN_Pos                30                                             /*!< FPCC
1261:F4_CORE/core_cm4.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
1262:F4_CORE/core_cm4.h **** 
1263:F4_CORE/core_cm4.h **** #define FPU_FPCCR_MONRDY_Pos                8                                             /*!< FPCC
1264:F4_CORE/core_cm4.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
1265:F4_CORE/core_cm4.h **** 
1266:F4_CORE/core_cm4.h **** #define FPU_FPCCR_BFRDY_Pos                 6                                             /*!< FPCC
1267:F4_CORE/core_cm4.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
1268:F4_CORE/core_cm4.h **** 
1269:F4_CORE/core_cm4.h **** #define FPU_FPCCR_MMRDY_Pos                 5                                             /*!< FPCC
1270:F4_CORE/core_cm4.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
1271:F4_CORE/core_cm4.h **** 
1272:F4_CORE/core_cm4.h **** #define FPU_FPCCR_HFRDY_Pos                 4                                             /*!< FPCC
1273:F4_CORE/core_cm4.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
1274:F4_CORE/core_cm4.h **** 
1275:F4_CORE/core_cm4.h **** #define FPU_FPCCR_THREAD_Pos                3                                             /*!< FPCC
1276:F4_CORE/core_cm4.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
1277:F4_CORE/core_cm4.h **** 
1278:F4_CORE/core_cm4.h **** #define FPU_FPCCR_USER_Pos                  1                                             /*!< FPCC
1279:F4_CORE/core_cm4.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
1280:F4_CORE/core_cm4.h **** 
1281:F4_CORE/core_cm4.h **** #define FPU_FPCCR_LSPACT_Pos                0                                             /*!< FPCC
1282:F4_CORE/core_cm4.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL /*<< FPU_FPCCR_LSPACT_Pos*/)              /*!< FPCC
1283:F4_CORE/core_cm4.h **** 
1284:F4_CORE/core_cm4.h **** /* Floating-Point Context Address Register */
1285:F4_CORE/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Pos               3                                             /*!< FPCA
1286:F4_CORE/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
1287:F4_CORE/core_cm4.h **** 
1288:F4_CORE/core_cm4.h **** /* Floating-Point Default Status Control Register */
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 47


1289:F4_CORE/core_cm4.h **** #define FPU_FPDSCR_AHP_Pos                 26                                             /*!< FPDS
1290:F4_CORE/core_cm4.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
1291:F4_CORE/core_cm4.h **** 
1292:F4_CORE/core_cm4.h **** #define FPU_FPDSCR_DN_Pos                  25                                             /*!< FPDS
1293:F4_CORE/core_cm4.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
1294:F4_CORE/core_cm4.h **** 
1295:F4_CORE/core_cm4.h **** #define FPU_FPDSCR_FZ_Pos                  24                                             /*!< FPDS
1296:F4_CORE/core_cm4.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
1297:F4_CORE/core_cm4.h **** 
1298:F4_CORE/core_cm4.h **** #define FPU_FPDSCR_RMode_Pos               22                                             /*!< FPDS
1299:F4_CORE/core_cm4.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
1300:F4_CORE/core_cm4.h **** 
1301:F4_CORE/core_cm4.h **** /* Media and FP Feature Register 0 */
1302:F4_CORE/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28                                             /*!< MVFR
1303:F4_CORE/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
1304:F4_CORE/core_cm4.h **** 
1305:F4_CORE/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Pos        24                                             /*!< MVFR
1306:F4_CORE/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
1307:F4_CORE/core_cm4.h **** 
1308:F4_CORE/core_cm4.h **** #define FPU_MVFR0_Square_root_Pos          20                                             /*!< MVFR
1309:F4_CORE/core_cm4.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
1310:F4_CORE/core_cm4.h **** 
1311:F4_CORE/core_cm4.h **** #define FPU_MVFR0_Divide_Pos               16                                             /*!< MVFR
1312:F4_CORE/core_cm4.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
1313:F4_CORE/core_cm4.h **** 
1314:F4_CORE/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12                                             /*!< MVFR
1315:F4_CORE/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
1316:F4_CORE/core_cm4.h **** 
1317:F4_CORE/core_cm4.h **** #define FPU_MVFR0_Double_precision_Pos      8                                             /*!< MVFR
1318:F4_CORE/core_cm4.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
1319:F4_CORE/core_cm4.h **** 
1320:F4_CORE/core_cm4.h **** #define FPU_MVFR0_Single_precision_Pos      4                                             /*!< MVFR
1321:F4_CORE/core_cm4.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
1322:F4_CORE/core_cm4.h **** 
1323:F4_CORE/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0                                             /*!< MVFR
1324:F4_CORE/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL /*<< FPU_MVFR0_A_SIMD_registers_Pos*/)  /*!< MVFR
1325:F4_CORE/core_cm4.h **** 
1326:F4_CORE/core_cm4.h **** /* Media and FP Feature Register 1 */
1327:F4_CORE/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28                                             /*!< MVFR
1328:F4_CORE/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
1329:F4_CORE/core_cm4.h **** 
1330:F4_CORE/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Pos              24                                             /*!< MVFR
1331:F4_CORE/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
1332:F4_CORE/core_cm4.h **** 
1333:F4_CORE/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4                                             /*!< MVFR
1334:F4_CORE/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
1335:F4_CORE/core_cm4.h **** 
1336:F4_CORE/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Pos              0                                             /*!< MVFR
1337:F4_CORE/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL /*<< FPU_MVFR1_FtZ_mode_Pos*/)          /*!< MVFR
1338:F4_CORE/core_cm4.h **** 
1339:F4_CORE/core_cm4.h **** /*@} end of group CMSIS_FPU */
1340:F4_CORE/core_cm4.h **** #endif
1341:F4_CORE/core_cm4.h **** 
1342:F4_CORE/core_cm4.h **** 
1343:F4_CORE/core_cm4.h **** /** \ingroup  CMSIS_core_register
1344:F4_CORE/core_cm4.h ****     \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1345:F4_CORE/core_cm4.h ****     \brief      Type definitions for the Core Debug Registers
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 48


1346:F4_CORE/core_cm4.h ****   @{
1347:F4_CORE/core_cm4.h ****  */
1348:F4_CORE/core_cm4.h **** 
1349:F4_CORE/core_cm4.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
1350:F4_CORE/core_cm4.h ****  */
1351:F4_CORE/core_cm4.h **** typedef struct
1352:F4_CORE/core_cm4.h **** {
1353:F4_CORE/core_cm4.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1354:F4_CORE/core_cm4.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1355:F4_CORE/core_cm4.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1356:F4_CORE/core_cm4.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1357:F4_CORE/core_cm4.h **** } CoreDebug_Type;
1358:F4_CORE/core_cm4.h **** 
1359:F4_CORE/core_cm4.h **** /* Debug Halting Control and Status Register */
1360:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
1361:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1362:F4_CORE/core_cm4.h **** 
1363:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
1364:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1365:F4_CORE/core_cm4.h **** 
1366:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
1367:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1368:F4_CORE/core_cm4.h **** 
1369:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
1370:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1371:F4_CORE/core_cm4.h **** 
1372:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
1373:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1374:F4_CORE/core_cm4.h **** 
1375:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
1376:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1377:F4_CORE/core_cm4.h **** 
1378:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
1379:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1380:F4_CORE/core_cm4.h **** 
1381:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
1382:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1383:F4_CORE/core_cm4.h **** 
1384:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
1385:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1386:F4_CORE/core_cm4.h **** 
1387:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
1388:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1389:F4_CORE/core_cm4.h **** 
1390:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
1391:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1392:F4_CORE/core_cm4.h **** 
1393:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
1394:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1395:F4_CORE/core_cm4.h **** 
1396:F4_CORE/core_cm4.h **** /* Debug Core Register Selector Register */
1397:F4_CORE/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
1398:F4_CORE/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1399:F4_CORE/core_cm4.h **** 
1400:F4_CORE/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
1401:F4_CORE/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1402:F4_CORE/core_cm4.h **** 
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 49


1403:F4_CORE/core_cm4.h **** /* Debug Exception and Monitor Control Register */
1404:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
1405:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1406:F4_CORE/core_cm4.h **** 
1407:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
1408:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1409:F4_CORE/core_cm4.h **** 
1410:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
1411:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1412:F4_CORE/core_cm4.h **** 
1413:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
1414:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1415:F4_CORE/core_cm4.h **** 
1416:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
1417:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1418:F4_CORE/core_cm4.h **** 
1419:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
1420:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1421:F4_CORE/core_cm4.h **** 
1422:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
1423:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1424:F4_CORE/core_cm4.h **** 
1425:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
1426:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1427:F4_CORE/core_cm4.h **** 
1428:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
1429:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1430:F4_CORE/core_cm4.h **** 
1431:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
1432:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1433:F4_CORE/core_cm4.h **** 
1434:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
1435:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1436:F4_CORE/core_cm4.h **** 
1437:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
1438:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1439:F4_CORE/core_cm4.h **** 
1440:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
1441:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1442:F4_CORE/core_cm4.h **** 
1443:F4_CORE/core_cm4.h **** /*@} end of group CMSIS_CoreDebug */
1444:F4_CORE/core_cm4.h **** 
1445:F4_CORE/core_cm4.h **** 
1446:F4_CORE/core_cm4.h **** /** \ingroup    CMSIS_core_register
1447:F4_CORE/core_cm4.h ****     \defgroup   CMSIS_core_base     Core Definitions
1448:F4_CORE/core_cm4.h ****     \brief      Definitions for base addresses, unions, and structures.
1449:F4_CORE/core_cm4.h ****   @{
1450:F4_CORE/core_cm4.h ****  */
1451:F4_CORE/core_cm4.h **** 
1452:F4_CORE/core_cm4.h **** /* Memory mapping of Cortex-M4 Hardware */
1453:F4_CORE/core_cm4.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1454:F4_CORE/core_cm4.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
1455:F4_CORE/core_cm4.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address        
1456:F4_CORE/core_cm4.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address        
1457:F4_CORE/core_cm4.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1458:F4_CORE/core_cm4.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
1459:F4_CORE/core_cm4.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 50


1460:F4_CORE/core_cm4.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1461:F4_CORE/core_cm4.h **** 
1462:F4_CORE/core_cm4.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1463:F4_CORE/core_cm4.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1464:F4_CORE/core_cm4.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1465:F4_CORE/core_cm4.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1466:F4_CORE/core_cm4.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1467:F4_CORE/core_cm4.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1468:F4_CORE/core_cm4.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1469:F4_CORE/core_cm4.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1470:F4_CORE/core_cm4.h **** 
1471:F4_CORE/core_cm4.h **** #if (__MPU_PRESENT == 1)
1472:F4_CORE/core_cm4.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
1473:F4_CORE/core_cm4.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit  
1474:F4_CORE/core_cm4.h **** #endif
1475:F4_CORE/core_cm4.h **** 
1476:F4_CORE/core_cm4.h **** #if (__FPU_PRESENT == 1)
1477:F4_CORE/core_cm4.h ****   #define FPU_BASE          (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit     
1478:F4_CORE/core_cm4.h ****   #define FPU               ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit     
1479:F4_CORE/core_cm4.h **** #endif
1480:F4_CORE/core_cm4.h **** 
1481:F4_CORE/core_cm4.h **** /*@} */
1482:F4_CORE/core_cm4.h **** 
1483:F4_CORE/core_cm4.h **** 
1484:F4_CORE/core_cm4.h **** 
1485:F4_CORE/core_cm4.h **** /*******************************************************************************
1486:F4_CORE/core_cm4.h ****  *                Hardware Abstraction Layer
1487:F4_CORE/core_cm4.h ****   Core Function Interface contains:
1488:F4_CORE/core_cm4.h ****   - Core NVIC Functions
1489:F4_CORE/core_cm4.h ****   - Core SysTick Functions
1490:F4_CORE/core_cm4.h ****   - Core Debug Functions
1491:F4_CORE/core_cm4.h ****   - Core Register Access Functions
1492:F4_CORE/core_cm4.h ****  ******************************************************************************/
1493:F4_CORE/core_cm4.h **** /** \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1494:F4_CORE/core_cm4.h **** */
1495:F4_CORE/core_cm4.h **** 
1496:F4_CORE/core_cm4.h **** 
1497:F4_CORE/core_cm4.h **** 
1498:F4_CORE/core_cm4.h **** /* ##########################   NVIC functions  #################################### */
1499:F4_CORE/core_cm4.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1500:F4_CORE/core_cm4.h ****     \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1501:F4_CORE/core_cm4.h ****     \brief      Functions that manage interrupts and exceptions via the NVIC.
1502:F4_CORE/core_cm4.h ****     @{
1503:F4_CORE/core_cm4.h ****  */
1504:F4_CORE/core_cm4.h **** 
1505:F4_CORE/core_cm4.h **** /** \brief  Set Priority Grouping
1506:F4_CORE/core_cm4.h **** 
1507:F4_CORE/core_cm4.h ****   The function sets the priority grouping field using the required unlock sequence.
1508:F4_CORE/core_cm4.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1509:F4_CORE/core_cm4.h ****   Only values from 0..7 are used.
1510:F4_CORE/core_cm4.h ****   In case of a conflict between priority grouping and available
1511:F4_CORE/core_cm4.h ****   priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1512:F4_CORE/core_cm4.h **** 
1513:F4_CORE/core_cm4.h ****     \param [in]      PriorityGroup  Priority grouping field.
1514:F4_CORE/core_cm4.h ****  */
1515:F4_CORE/core_cm4.h **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1516:F4_CORE/core_cm4.h **** {
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 51


1517:F4_CORE/core_cm4.h ****   uint32_t reg_value;
1518:F4_CORE/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1519:F4_CORE/core_cm4.h **** 
1520:F4_CORE/core_cm4.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1521:F4_CORE/core_cm4.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear 
1522:F4_CORE/core_cm4.h ****   reg_value  =  (reg_value                                   |
1523:F4_CORE/core_cm4.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1524:F4_CORE/core_cm4.h ****                 (PriorityGroupTmp << 8)                       );              /* Insert write key a
1525:F4_CORE/core_cm4.h ****   SCB->AIRCR =  reg_value;
1526:F4_CORE/core_cm4.h **** }
1527:F4_CORE/core_cm4.h **** 
1528:F4_CORE/core_cm4.h **** 
1529:F4_CORE/core_cm4.h **** /** \brief  Get Priority Grouping
1530:F4_CORE/core_cm4.h **** 
1531:F4_CORE/core_cm4.h ****   The function reads the priority grouping field from the NVIC Interrupt Controller.
1532:F4_CORE/core_cm4.h **** 
1533:F4_CORE/core_cm4.h ****     \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1534:F4_CORE/core_cm4.h ****  */
1535:F4_CORE/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1536:F4_CORE/core_cm4.h **** {
1537:F4_CORE/core_cm4.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
1538:F4_CORE/core_cm4.h **** }
1539:F4_CORE/core_cm4.h **** 
1540:F4_CORE/core_cm4.h **** 
1541:F4_CORE/core_cm4.h **** /** \brief  Enable External Interrupt
1542:F4_CORE/core_cm4.h **** 
1543:F4_CORE/core_cm4.h ****     The function enables a device-specific interrupt in the NVIC interrupt controller.
1544:F4_CORE/core_cm4.h **** 
1545:F4_CORE/core_cm4.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1546:F4_CORE/core_cm4.h ****  */
1547:F4_CORE/core_cm4.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1548:F4_CORE/core_cm4.h **** {
1549:F4_CORE/core_cm4.h ****   NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1550:F4_CORE/core_cm4.h **** }
1551:F4_CORE/core_cm4.h **** 
1552:F4_CORE/core_cm4.h **** 
1553:F4_CORE/core_cm4.h **** /** \brief  Disable External Interrupt
1554:F4_CORE/core_cm4.h **** 
1555:F4_CORE/core_cm4.h ****     The function disables a device-specific interrupt in the NVIC interrupt controller.
1556:F4_CORE/core_cm4.h **** 
1557:F4_CORE/core_cm4.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1558:F4_CORE/core_cm4.h ****  */
1559:F4_CORE/core_cm4.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1560:F4_CORE/core_cm4.h **** {
1561:F4_CORE/core_cm4.h ****   NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1562:F4_CORE/core_cm4.h **** }
1563:F4_CORE/core_cm4.h **** 
1564:F4_CORE/core_cm4.h **** 
1565:F4_CORE/core_cm4.h **** /** \brief  Get Pending Interrupt
1566:F4_CORE/core_cm4.h **** 
1567:F4_CORE/core_cm4.h ****     The function reads the pending register in the NVIC and returns the pending bit
1568:F4_CORE/core_cm4.h ****     for the specified interrupt.
1569:F4_CORE/core_cm4.h **** 
1570:F4_CORE/core_cm4.h ****     \param [in]      IRQn  Interrupt number.
1571:F4_CORE/core_cm4.h **** 
1572:F4_CORE/core_cm4.h ****     \return             0  Interrupt status is not pending.
1573:F4_CORE/core_cm4.h ****     \return             1  Interrupt status is pending.
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 52


1574:F4_CORE/core_cm4.h ****  */
1575:F4_CORE/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1576:F4_CORE/core_cm4.h **** {
1577:F4_CORE/core_cm4.h ****   return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t
1578:F4_CORE/core_cm4.h **** }
1579:F4_CORE/core_cm4.h **** 
1580:F4_CORE/core_cm4.h **** 
1581:F4_CORE/core_cm4.h **** /** \brief  Set Pending Interrupt
1582:F4_CORE/core_cm4.h **** 
1583:F4_CORE/core_cm4.h ****     The function sets the pending bit of an external interrupt.
1584:F4_CORE/core_cm4.h **** 
1585:F4_CORE/core_cm4.h ****     \param [in]      IRQn  Interrupt number. Value cannot be negative.
1586:F4_CORE/core_cm4.h ****  */
1587:F4_CORE/core_cm4.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1588:F4_CORE/core_cm4.h **** {
1589:F4_CORE/core_cm4.h ****   NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1590:F4_CORE/core_cm4.h **** }
1591:F4_CORE/core_cm4.h **** 
1592:F4_CORE/core_cm4.h **** 
1593:F4_CORE/core_cm4.h **** /** \brief  Clear Pending Interrupt
1594:F4_CORE/core_cm4.h **** 
1595:F4_CORE/core_cm4.h ****     The function clears the pending bit of an external interrupt.
1596:F4_CORE/core_cm4.h **** 
1597:F4_CORE/core_cm4.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1598:F4_CORE/core_cm4.h ****  */
1599:F4_CORE/core_cm4.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1600:F4_CORE/core_cm4.h **** {
1601:F4_CORE/core_cm4.h ****   NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1602:F4_CORE/core_cm4.h **** }
1603:F4_CORE/core_cm4.h **** 
1604:F4_CORE/core_cm4.h **** 
1605:F4_CORE/core_cm4.h **** /** \brief  Get Active Interrupt
1606:F4_CORE/core_cm4.h **** 
1607:F4_CORE/core_cm4.h ****     The function reads the active register in NVIC and returns the active bit.
1608:F4_CORE/core_cm4.h **** 
1609:F4_CORE/core_cm4.h ****     \param [in]      IRQn  Interrupt number.
1610:F4_CORE/core_cm4.h **** 
1611:F4_CORE/core_cm4.h ****     \return             0  Interrupt status is not active.
1612:F4_CORE/core_cm4.h ****     \return             1  Interrupt status is active.
1613:F4_CORE/core_cm4.h ****  */
1614:F4_CORE/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1615:F4_CORE/core_cm4.h **** {
1616:F4_CORE/core_cm4.h ****   return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t
1617:F4_CORE/core_cm4.h **** }
1618:F4_CORE/core_cm4.h **** 
1619:F4_CORE/core_cm4.h **** 
1620:F4_CORE/core_cm4.h **** /** \brief  Set Interrupt Priority
1621:F4_CORE/core_cm4.h **** 
1622:F4_CORE/core_cm4.h ****     The function sets the priority of an interrupt.
1623:F4_CORE/core_cm4.h **** 
1624:F4_CORE/core_cm4.h ****     \note The priority cannot be set for every core interrupt.
1625:F4_CORE/core_cm4.h **** 
1626:F4_CORE/core_cm4.h ****     \param [in]      IRQn  Interrupt number.
1627:F4_CORE/core_cm4.h ****     \param [in]  priority  Priority to set.
1628:F4_CORE/core_cm4.h ****  */
1629:F4_CORE/core_cm4.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1630:F4_CORE/core_cm4.h **** {
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 53


1631:F4_CORE/core_cm4.h ****   if((int32_t)IRQn < 0) {
1632:F4_CORE/core_cm4.h ****     SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BIT
 657              		.loc 2 1632 0
 658 0072 F022     		movs	r2, #240
 659 0074 074B     		ldr	r3, .L46+24
 660 0076 83F82220 		strb	r2, [r3, #34]
 661              	.LVL59:
 662              	.LBE10:
 663              	.LBE9:
 176:SYS/task_manager/task_manager.c **** 
 664              		.loc 1 176 0
 665 007a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 666              	.LVL60:
 667              	.L47:
 668              		.align	2
 669              	.L46:
 670 007c 00000000 		.word	.LANCHOR3
 671 0080 00000000 		.word	Task_OS_ExpStkBase
 672 0084 00000000 		.word	Task_Ptr
 673 0088 00000000 		.word	.LANCHOR4
 674 008c 00000000 		.word	.LANCHOR5
 675 0090 00000000 		.word	.LANCHOR6
 676 0094 00ED00E0 		.word	-536810240
 677              		.cfi_endproc
 678              	.LFE126:
 680              		.section	.text.Task_SetStkPtr_Val,"ax",%progbits
 681              		.align	2
 682              		.thumb
 683              		.thumb_func
 685              	Task_SetStkPtr_Val:
 686              	.LFB142:
 438:SYS/task_manager/task_manager.c ****     uint32_t *Tsk_Ptr_tmp = NULL;
 687              		.loc 1 438 0
 688              		.cfi_startproc
 689              		@ args = 0, pretend = 0, frame = 0
 690              		@ frame_needed = 0, uses_anonymous_args = 0
 691              	.LVL61:
 692 0000 10B5     		push	{r4, lr}
 693              	.LCFI12:
 694              		.cfi_def_cfa_offset 8
 695              		.cfi_offset 4, -8
 696              		.cfi_offset 14, -4
 697 0002 0446     		mov	r4, r0
 698              	.LVL62:
 441:SYS/task_manager/task_manager.c **** 
 699              		.loc 1 441 0
 700 0004 C26C     		ldr	r2, [r0, #76]
 701 0006 9200     		lsls	r2, r2, #2
 702 0008 8B21     		movs	r1, #139
 703 000a 406D     		ldr	r0, [r0, #84]
 704              	.LVL63:
 705 000c FFF7FEFF 		bl	memset
 706              	.LVL64:
 443:SYS/task_manager/task_manager.c ****     Tsk_Ptr_tmp = (uint32_t *)((uint32_t)(Tsk_Ptr_tmp)&0XFFFFFFF8ul);
 707              		.loc 1 443 0
 708 0010 04F15402 		add	r2, r4, #84
 709 0014 E36C     		ldr	r3, [r4, #76]
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 54


 710 0016 03F18043 		add	r3, r3, #1073741824
 711 001a 013B     		subs	r3, r3, #1
 712 001c 02EB8303 		add	r3, r2, r3, lsl #2
 713              	.LVL65:
 444:SYS/task_manager/task_manager.c **** 
 714              		.loc 1 444 0
 715 0020 23F00703 		bic	r3, r3, #7
 716              	.LVL66:
 447:SYS/task_manager/task_manager.c **** 
 717              		.loc 1 447 0
 718 0024 4FF08072 		mov	r2, #16777216
 719 0028 43F8042C 		str	r2, [r3, #-4]
 720              	.LVL67:
 450:SYS/task_manager/task_manager.c **** 
 721              		.loc 1 450 0
 722 002c 084A     		ldr	r2, .L50
 723 002e 22F00102 		bic	r2, r2, #1
 724 0032 43F8082C 		str	r2, [r3, #-8]
 725              	.LVL68:
 453:SYS/task_manager/task_manager.c **** 
 726              		.loc 1 453 0
 727 0036 074A     		ldr	r2, .L50+4
 728 0038 43F80C2C 		str	r2, [r3, #-12]
 729              	.LVL69:
 457:SYS/task_manager/task_manager.c **** 
 730              		.loc 1 457 0
 731 003c 0022     		movs	r2, #0
 732 003e 43F8202C 		str	r2, [r3, #-32]
 733              	.LVL70:
 462:SYS/task_manager/task_manager.c **** 
 734              		.loc 1 462 0
 735 0042 6FF00202 		mvn	r2, #2
 736 0046 43F8242C 		str	r2, [r3, #-36]
 464:SYS/task_manager/task_manager.c **** 
 737              		.loc 1 464 0
 738 004a 443B     		subs	r3, r3, #68
 739              	.LVL71:
 467:SYS/task_manager/task_manager.c **** }
 740              		.loc 1 467 0
 741 004c 2365     		str	r3, [r4, #80]
 742 004e 10BD     		pop	{r4, pc}
 743              	.LVL72:
 744              	.L51:
 745              		.align	2
 746              	.L50:
 747 0050 00000000 		.word	Task_Caller
 748 0054 00000000 		.word	Task_Exit
 749              		.cfi_endproc
 750              	.LFE142:
 752              		.global	__aeabi_ul2f
 753              		.section	.text.Task_Idle,"ax",%progbits
 754              		.align	2
 755              		.thumb
 756              		.thumb_func
 758              	Task_Idle:
 759              	.LFB128:
 187:SYS/task_manager/task_manager.c ****     SYSTEM_RunTime cur_time;
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 55


 760              		.loc 1 187 0
 761              		.cfi_startproc
 762              		@ args = 0, pretend = 0, frame = 16
 763              		@ frame_needed = 0, uses_anonymous_args = 0
 764 0000 10B5     		push	{r4, lr}
 765              	.LCFI13:
 766              		.cfi_def_cfa_offset 8
 767              		.cfi_offset 4, -8
 768              		.cfi_offset 14, -4
 769 0002 84B0     		sub	sp, sp, #16
 770              	.LCFI14:
 771              		.cfi_def_cfa_offset 24
 191:SYS/task_manager/task_manager.c ****     RuntimeObj_Reset(&cur_time);
 772              		.loc 1 191 0
 773 0004 6846     		mov	r0, sp
 774 0006 FFF7FEFF 		bl	RuntimeObj_Reset
 775              	.LVL73:
 192:SYS/task_manager/task_manager.c **** 
 776              		.loc 1 192 0
 777 000a 02A8     		add	r0, sp, #8
 778 000c FFF7FEFF 		bl	RuntimeObj_Reset
 779              	.LVL74:
 194:SYS/task_manager/task_manager.c ****     time_diff = Get_TimeDifference_Between(TaskSys_StartTime, cur_time);
 780              		.loc 1 194 0
 781 0010 FFF7FEFF 		bl	Get_CurrentRunningUs
 782              	.LVL75:
 783 0014 0246     		mov	r2, r0
 784 0016 0B46     		mov	r3, r1
 785 0018 CDE90223 		strd	r2, [sp, #8]
 195:SYS/task_manager/task_manager.c **** 
 786              		.loc 1 195 0
 787 001c 0B49     		ldr	r1, .L54
 788 001e D1E90001 		ldrd	r0, [r1]
 789 0022 FFF7FEFF 		bl	Get_TimeDifference_Between
 790              	.LVL76:
 197:SYS/task_manager/task_manager.c ****     TaskSys_Idle_Ocupy = (TaskSys_Idle_US / (float)time_diff);
 791              		.loc 1 197 0
 792 0026 0A4B     		ldr	r3, .L54+4
 793 0028 1C68     		ldr	r4, [r3]
 794 002a 0134     		adds	r4, r4, #1
 795 002c 1C60     		str	r4, [r3]
 198:SYS/task_manager/task_manager.c **** }
 796              		.loc 1 198 0
 797 002e FFF7FEFF 		bl	__aeabi_ul2f
 798              	.LVL77:
 799 0032 07EE904A 		vmov	s15, r4	@ int
 800 0036 F8EE677A 		vcvt.f32.u32	s15, s15
 801 003a 06EE900A 		vmov	s13, r0
 802 003e 87EEA67A 		vdiv.f32	s14, s15, s13
 803 0042 044B     		ldr	r3, .L54+8
 804 0044 83ED007A 		vstr.32	s14, [r3]
 199:SYS/task_manager/task_manager.c **** 
 805              		.loc 1 199 0
 806 0048 04B0     		add	sp, sp, #16
 807              	.LCFI15:
 808              		.cfi_def_cfa_offset 8
 809              		@ sp needed
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 56


 810 004a 10BD     		pop	{r4, pc}
 811              	.L55:
 812              		.align	2
 813              	.L54:
 814 004c 00000000 		.word	.LANCHOR7
 815 0050 00000000 		.word	.LANCHOR8
 816 0054 00000000 		.word	.LANCHOR9
 817              		.cfi_endproc
 818              	.LFE128:
 820              		.section	.text.Task_Exec,"ax",%progbits
 821              		.align	2
 822              		.thumb
 823              		.thumb_func
 825              	Task_Exec:
 826              	.LFB159:
 652:SYS/task_manager/task_manager.c **** 
 653:SYS/task_manager/task_manager.c **** Task_Handler Task_Create(const char *name, uint32_t frq, Priority_Group group, TASK_Priority priori
 654:SYS/task_manager/task_manager.c **** {
 655:SYS/task_manager/task_manager.c ****     Task_Handler handle;
 656:SYS/task_manager/task_manager.c ****     uint16_t task_name_len = strlen(name);
 657:SYS/task_manager/task_manager.c ****     uint32_t *Tsk_Ptr_tmp = NULL;
 658:SYS/task_manager/task_manager.c ****     static bool taskOs_InitState = false;
 659:SYS/task_manager/task_manager.c **** 
 660:SYS/task_manager/task_manager.c ****     if (!taskOs_InitState)
 661:SYS/task_manager/task_manager.c ****     {
 662:SYS/task_manager/task_manager.c ****         TaskSys_Init();
 663:SYS/task_manager/task_manager.c ****         taskOs_InitState = true;
 664:SYS/task_manager/task_manager.c ****     }
 665:SYS/task_manager/task_manager.c **** 
 666:SYS/task_manager/task_manager.c ****     //already have task in current group and priority in task pointer matrix
 667:SYS/task_manager/task_manager.c ****     if (Task_Ptr[group][priority] != NULL)
 668:SYS/task_manager/task_manager.c ****     {
 669:SYS/task_manager/task_manager.c ****         return TASK_REGISTED;
 670:SYS/task_manager/task_manager.c ****     }
 671:SYS/task_manager/task_manager.c **** 
 672:SYS/task_manager/task_manager.c ****     //request a memory space for Task_Ptr contain
 673:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority] = (Task *)MMU_Malloc(sizeof(Task));
 674:SYS/task_manager/task_manager.c **** 
 675:SYS/task_manager/task_manager.c ****     //record Task_Ptr poiner`s address
 676:SYS/task_manager/task_manager.c ****     handle = *&Task_Ptr[group][priority];
 677:SYS/task_manager/task_manager.c **** 
 678:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->Task_name = name;
 679:SYS/task_manager/task_manager.c **** 
 680:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->exec_frq = frq;
 681:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->exec_interval_us = RUNTIEM_MAX_TICK_FRQ / frq;
 682:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->Exec_Func = func;
 683:SYS/task_manager/task_manager.c **** 
 684:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->priority.Priority = (group << 3) | priority;
 685:SYS/task_manager/task_manager.c **** 
 686:SYS/task_manager/task_manager.c **** #if (TASK_SCHEDULER_TYPE == PREEMPTIVE_SCHDULER)
 687:SYS/task_manager/task_manager.c ****     //init delay tag
 688:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->delay_info.on_delay = false;
 689:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->delay_info.tsk_hdl = handle;
 690:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->delay_info.time_unit = 0;
 691:SYS/task_manager/task_manager.c **** 
 692:SYS/task_manager/task_manager.c ****     //request memory space for task stack
 693:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->Stack_Depth = StackDepth;
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 57


 694:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->TCB.Stack = (uint32_t *)MMU_Malloc(StackDepth * sizeof(uint32_t));
 695:SYS/task_manager/task_manager.c **** 
 696:SYS/task_manager/task_manager.c ****     if (Task_Ptr[group][priority]->TCB.Stack != NULL)
 697:SYS/task_manager/task_manager.c ****     {
 698:SYS/task_manager/task_manager.c ****         Task_SetStkPtr_Val(Task_Ptr[group][priority]);
 699:SYS/task_manager/task_manager.c ****     }
 700:SYS/task_manager/task_manager.c ****     else
 701:SYS/task_manager/task_manager.c ****     {
 702:SYS/task_manager/task_manager.c ****         return TASK_BAD_MEMSPC_REQ;
 703:SYS/task_manager/task_manager.c ****     }
 704:SYS/task_manager/task_manager.c **** #endif
 705:SYS/task_manager/task_manager.c **** 
 706:SYS/task_manager/task_manager.c ****     //reset single loop running us
 707:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->TskFuncUing_US = 0;
 708:SYS/task_manager/task_manager.c **** 
 709:SYS/task_manager/task_manager.c ****     //reset task cpu occupy data
 710:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->Exec_status.cpu_opy = 0;
 711:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->Exec_status.totlal_running_time = 0;
 712:SYS/task_manager/task_manager.c **** 
 713:SYS/task_manager/task_manager.c ****     //set current group flag to ready
 714:SYS/task_manager/task_manager.c ****     TskHdl_RdyMap.Grp.Flg |= 1 << GET_TASKGROUP_PRIORITY(Task_Ptr[group][priority]->priority.Priori
 715:SYS/task_manager/task_manager.c ****     //set current task under this group flag to ready
 716:SYS/task_manager/task_manager.c ****     TskHdl_RdyMap.TskInGrp[GET_TASKGROUP_PRIORITY(Task_Ptr[group][priority]->priority.Priority)].Fl
 717:SYS/task_manager/task_manager.c **** 
 718:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->Exec_status.detect_exec_frq = 0;
 719:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->Exec_status.detect_exec_time_arv = 0;
 720:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->Exec_status.detect_exec_time_max = 0;
 721:SYS/task_manager/task_manager.c **** 
 722:SYS/task_manager/task_manager.c ****     RuntimeObj_Reset(&(Task_Ptr[group][priority]->Exec_status.Exec_Time));
 723:SYS/task_manager/task_manager.c ****     RuntimeObj_Reset(&(Task_Ptr[group][priority]->Exec_status.Init_Time));
 724:SYS/task_manager/task_manager.c ****     RuntimeObj_Reset(&(Task_Ptr[group][priority]->Exec_status.Start_Time));
 725:SYS/task_manager/task_manager.c **** 
 726:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->Exec_status.Init_Time = Get_CurrentRunningUs();
 727:SYS/task_manager/task_manager.c **** 
 728:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->Exec_status.Exec_Times = 0;
 729:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->Exec_status.error_code = NOERROR;
 730:SYS/task_manager/task_manager.c **** 
 731:SYS/task_manager/task_manager.c ****     Task_SetReady(Task_Ptr[group][priority]);
 732:SYS/task_manager/task_manager.c **** 
 733:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->item_ptr = (item_obj *)MMU_Malloc(sizeof(item_obj));
 734:SYS/task_manager/task_manager.c ****     if (Task_Ptr[group][priority]->item_ptr == NULL)
 735:SYS/task_manager/task_manager.c ****     {
 736:SYS/task_manager/task_manager.c ****         return TASK_BAD_MEMSPC_REQ;
 737:SYS/task_manager/task_manager.c ****     }
 738:SYS/task_manager/task_manager.c **** 
 739:SYS/task_manager/task_manager.c ****     List_ItemInit(Task_Ptr[group][priority]->item_ptr, Task_Ptr[group][priority]);
 740:SYS/task_manager/task_manager.c ****     if (TskCrt_RegList.num == 0)
 741:SYS/task_manager/task_manager.c ****     {
 742:SYS/task_manager/task_manager.c ****         List_Init(&TskCrt_RegList.list, Task_Ptr[group][priority]->item_ptr, by_condition, Task_Pri
 743:SYS/task_manager/task_manager.c ****     }
 744:SYS/task_manager/task_manager.c ****     else
 745:SYS/task_manager/task_manager.c ****     {
 746:SYS/task_manager/task_manager.c ****         List_Insert_Item(&TskCrt_RegList.list, Task_Ptr[group][priority]->item_ptr);
 747:SYS/task_manager/task_manager.c ****     }
 748:SYS/task_manager/task_manager.c **** 
 749:SYS/task_manager/task_manager.c ****     List_ItemInit(&Task_Ptr[group][priority]->delay_item, &Task_Ptr[group][priority]->delay_info);
 750:SYS/task_manager/task_manager.c **** 
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 58


 751:SYS/task_manager/task_manager.c ****     TskCrt_RegList.num++;
 752:SYS/task_manager/task_manager.c **** 
 753:SYS/task_manager/task_manager.c ****     return handle;
 754:SYS/task_manager/task_manager.c **** }
 755:SYS/task_manager/task_manager.c **** 
 756:SYS/task_manager/task_manager.c **** //Remove func untest
 757:SYS/task_manager/task_manager.c **** void Task_Remove(Task_Handler Tsk_Hdl)
 758:SYS/task_manager/task_manager.c **** {
 759:SYS/task_manager/task_manager.c ****     //convert Tsk_Hdl from uint32_t var to Task Address which we need to delete
 760:SYS/task_manager/task_manager.c ****     //MMU_Free that memory space
 761:SYS/task_manager/task_manager.c ****     //erase all data in specificly memory space
 762:SYS/task_manager/task_manager.c ****     //set Task pointer to Null which we wanted to be delete
 763:SYS/task_manager/task_manager.c **** 
 764:SYS/task_manager/task_manager.c ****     uint8_t remove_group = GET_TASKGROUP_PRIORITY(((Task *)Tsk_Hdl)->priority.Priority);
 765:SYS/task_manager/task_manager.c ****     uint8_t remove_task = GET_TASKINGROUP_PRIORITY(((Task *)Tsk_Hdl)->priority.Priority);
 766:SYS/task_manager/task_manager.c **** 
 767:SYS/task_manager/task_manager.c ****     ReSet_Task_Data((Task *)Tsk_Hdl);
 768:SYS/task_manager/task_manager.c **** 
 769:SYS/task_manager/task_manager.c **** #if (TASK_SCHEDULER_TYPE == PREEMPTIVE_SCHDULER)
 770:SYS/task_manager/task_manager.c ****     MMU_Free((uint32_t *)((Task *)Tsk_Hdl)->TCB.Stack);
 771:SYS/task_manager/task_manager.c ****     MMU_Free((uint32_t *)((Task *)Tsk_Hdl)->TCB.Top_Stk_Ptr);
 772:SYS/task_manager/task_manager.c **** #endif
 773:SYS/task_manager/task_manager.c **** 
 774:SYS/task_manager/task_manager.c ****     MMU_Free((Task *)Tsk_Hdl);
 775:SYS/task_manager/task_manager.c ****     Task_Ptr[remove_group][remove_task] = NULL;
 776:SYS/task_manager/task_manager.c **** }
 777:SYS/task_manager/task_manager.c **** 
 778:SYS/task_manager/task_manager.c **** void TaskSystem_Start(void)
 779:SYS/task_manager/task_manager.c **** {
 780:SYS/task_manager/task_manager.c ****     Runtime_Config(RUNTIME_TICK_FRQ_40K);
 781:SYS/task_manager/task_manager.c ****     Runtime_Set_start_Callback(NULL);
 782:SYS/task_manager/task_manager.c ****     Runtime_Set_stop_Callback(NULL);
 783:SYS/task_manager/task_manager.c ****     Runtime_Set_tick_Callback(Task_Scheduler); /* 5us cast by calling the scheduler */
 784:SYS/task_manager/task_manager.c ****     Runtime_Start();
 785:SYS/task_manager/task_manager.c **** 
 786:SYS/task_manager/task_manager.c ****     RuntimeObj_Reset(&TaskSys_StartTime);
 787:SYS/task_manager/task_manager.c **** 
 788:SYS/task_manager/task_manager.c ****     TaskSys_StartTime = Get_CurrentRunningUs();
 789:SYS/task_manager/task_manager.c **** 
 790:SYS/task_manager/task_manager.c **** #if (TASK_SCHEDULER_TYPE == PREEMPTIVE_SCHDULER)
 791:SYS/task_manager/task_manager.c ****     NxtRunTsk_Ptr = Task_Get_HighestRank_RdyTask();
 792:SYS/task_manager/task_manager.c **** 
 793:SYS/task_manager/task_manager.c ****     if (NxtRunTsk_Ptr != NULL)
 794:SYS/task_manager/task_manager.c ****     {
 795:SYS/task_manager/task_manager.c ****         NxtTsk_TCB.Top_Stk_Ptr = &NxtRunTsk_Ptr->TCB.Top_Stk_Ptr;
 796:SYS/task_manager/task_manager.c ****         NxtTsk_TCB.Stack = NxtRunTsk_Ptr->TCB.Stack;
 797:SYS/task_manager/task_manager.c **** 
 798:SYS/task_manager/task_manager.c ****         CurTsk_TCB = NxtTsk_TCB;
 799:SYS/task_manager/task_manager.c ****     }
 800:SYS/task_manager/task_manager.c **** #endif
 801:SYS/task_manager/task_manager.c **** 
 802:SYS/task_manager/task_manager.c ****     Task_SetPendSVPro();
 803:SYS/task_manager/task_manager.c ****     Task_TriggerPendSV();
 804:SYS/task_manager/task_manager.c **** 
 805:SYS/task_manager/task_manager.c ****     return true;
 806:SYS/task_manager/task_manager.c **** }
 807:SYS/task_manager/task_manager.c **** 
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 59


 808:SYS/task_manager/task_manager.c **** void Task_SetRunState(Task_Handler Tsk_Handle, TASK_STATE state)
 809:SYS/task_manager/task_manager.c **** {
 810:SYS/task_manager/task_manager.c ****     ((Task *)Tsk_Handle)->Exec_status.State = state;
 811:SYS/task_manager/task_manager.c **** }
 812:SYS/task_manager/task_manager.c **** 
 813:SYS/task_manager/task_manager.c **** static Task *Get_TaskInstance(uint8_t group, uint8_t priority)
 814:SYS/task_manager/task_manager.c **** {
 815:SYS/task_manager/task_manager.c ****     return Task_Ptr[group][priority];
 816:SYS/task_manager/task_manager.c **** }
 817:SYS/task_manager/task_manager.c **** 
 818:SYS/task_manager/task_manager.c **** static void Task_Exec(Task *tsk_ptr)
 819:SYS/task_manager/task_manager.c **** {
 827              		.loc 1 819 0
 828              		.cfi_startproc
 829              		@ args = 0, pretend = 0, frame = 8
 830              		@ frame_needed = 0, uses_anonymous_args = 0
 831              	.LVL78:
 832 0000 30B5     		push	{r4, r5, lr}
 833              	.LCFI16:
 834              		.cfi_def_cfa_offset 12
 835              		.cfi_offset 4, -12
 836              		.cfi_offset 5, -8
 837              		.cfi_offset 14, -4
 838 0002 83B0     		sub	sp, sp, #12
 839              	.LCFI17:
 840              		.cfi_def_cfa_offset 24
 820:SYS/task_manager/task_manager.c ****     SYSTEM_RunTime time_diff;
 821:SYS/task_manager/task_manager.c ****     RuntimeObj_Reset(&time_diff);
 841              		.loc 1 821 0
 842 0004 6846     		mov	r0, sp
 843              	.LVL79:
 844 0006 FFF7FEFF 		bl	RuntimeObj_Reset
 845              	.LVL80:
 822:SYS/task_manager/task_manager.c **** 
 823:SYS/task_manager/task_manager.c ****     tsk_ptr = NxtRunTsk_Ptr;
 846              		.loc 1 823 0
 847 000a 314B     		ldr	r3, .L64
 848 000c 1C68     		ldr	r4, [r3]
 849              	.LVL81:
 850              	.L57:
 824:SYS/task_manager/task_manager.c **** 
 825:SYS/task_manager/task_manager.c ****     while (true)
 826:SYS/task_manager/task_manager.c ****     {
 827:SYS/task_manager/task_manager.c ****         if (tsk_ptr->Exec_status.State == Task_Ready)
 851              		.loc 1 827 0
 852 000e 94F84830 		ldrb	r3, [r4, #72]	@ zero_extendqisi2
 853 0012 002B     		cmp	r3, #0
 854 0014 FBD1     		bne	.L57
 828:SYS/task_manager/task_manager.c ****         {
 829:SYS/task_manager/task_manager.c ****             tsk_ptr->TskFuncUing_US = 0;
 855              		.loc 1 829 0
 856 0016 A365     		str	r3, [r4, #88]
 830:SYS/task_manager/task_manager.c **** 
 831:SYS/task_manager/task_manager.c ****             //when task function execute finish reset ready flag of current task in group
 832:SYS/task_manager/task_manager.c ****             //code down below
 833:SYS/task_manager/task_manager.c ****             Task_ClearReady(tsk_ptr);
 857              		.loc 1 833 0
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 60


 858 0018 2046     		mov	r0, r4
 859 001a FFF7FEFF 		bl	Task_ClearReady
 860              	.LVL82:
 834:SYS/task_manager/task_manager.c **** 
 835:SYS/task_manager/task_manager.c ****             //set current running task
 836:SYS/task_manager/task_manager.c ****             CurRunTsk_Ptr = tsk_ptr;
 861              		.loc 1 836 0
 862 001e 2D4B     		ldr	r3, .L64+4
 863 0020 1C60     		str	r4, [r3]
 837:SYS/task_manager/task_manager.c **** 
 838:SYS/task_manager/task_manager.c ****             if (tsk_ptr->Exec_status.Exec_Times == 0)
 864              		.loc 1 838 0
 865 0022 A36B     		ldr	r3, [r4, #56]
 866 0024 2BB9     		cbnz	r3, .L58
 839:SYS/task_manager/task_manager.c ****             {
 840:SYS/task_manager/task_manager.c ****                 tsk_ptr->Exec_status.Start_Time = Get_CurrentRunningUs();
 867              		.loc 1 840 0
 868 0026 FFF7FEFF 		bl	Get_CurrentRunningUs
 869              	.LVL83:
 870 002a E061     		str	r0, [r4, #28]
 871 002c 2162     		str	r1, [r4, #32]
 841:SYS/task_manager/task_manager.c ****                 tsk_ptr->Exec_status.Exec_Time = tsk_ptr->Exec_status.Start_Time;
 872              		.loc 1 841 0
 873 002e 6062     		str	r0, [r4, #36]
 874 0030 A162     		str	r1, [r4, #40]
 875              	.L58:
 842:SYS/task_manager/task_manager.c ****             }
 843:SYS/task_manager/task_manager.c **** 
 844:SYS/task_manager/task_manager.c ****             tsk_ptr->Exec_status.State = Task_Running;
 876              		.loc 1 844 0
 877 0032 0123     		movs	r3, #1
 878 0034 84F84830 		strb	r3, [r4, #72]
 845:SYS/task_manager/task_manager.c **** 
 846:SYS/task_manager/task_manager.c ****             //execute task funtion
 847:SYS/task_manager/task_manager.c ****             tsk_ptr->Exec_Func(*&tsk_ptr);
 879              		.loc 1 847 0
 880 0038 2369     		ldr	r3, [r4, #16]
 881 003a 2046     		mov	r0, r4
 882 003c 9847     		blx	r3
 883              	.LVL84:
 848:SYS/task_manager/task_manager.c **** 
 849:SYS/task_manager/task_manager.c ****             //record task running times
 850:SYS/task_manager/task_manager.c ****             tsk_ptr->Exec_status.Exec_Times++;
 884              		.loc 1 850 0
 885 003e A36B     		ldr	r3, [r4, #56]
 886 0040 0133     		adds	r3, r3, #1
 887 0042 A363     		str	r3, [r4, #56]
 851:SYS/task_manager/task_manager.c **** 
 852:SYS/task_manager/task_manager.c ****             //get max task execut time
 853:SYS/task_manager/task_manager.c ****             if (tsk_ptr->TskFuncUing_US > tsk_ptr->Exec_status.detect_exec_time_max)
 888              		.loc 1 853 0
 889 0044 A36D     		ldr	r3, [r4, #88]
 890 0046 626B     		ldr	r2, [r4, #52]
 891 0048 9342     		cmp	r3, r2
 892 004a 00D9     		bls	.L59
 854:SYS/task_manager/task_manager.c ****             {
 855:SYS/task_manager/task_manager.c ****                 tsk_ptr->Exec_status.detect_exec_time_max = tsk_ptr->TskFuncUing_US;
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 61


 893              		.loc 1 855 0
 894 004c 6363     		str	r3, [r4, #52]
 895              	.L59:
 856:SYS/task_manager/task_manager.c ****             }
 857:SYS/task_manager/task_manager.c **** 
 858:SYS/task_manager/task_manager.c ****             //get task total execute time unit in us
 859:SYS/task_manager/task_manager.c ****             tsk_ptr->Exec_status.totlal_running_time += tsk_ptr->TskFuncUing_US;
 896              		.loc 1 859 0
 897 004e 226C     		ldr	r2, [r4, #64]
 898 0050 1344     		add	r3, r3, r2
 899 0052 2364     		str	r3, [r4, #64]
 860:SYS/task_manager/task_manager.c ****             time_diff = Get_TimeDifference_Between(tsk_ptr->Exec_status.Start_Time, tsk_ptr->Exec_s
 900              		.loc 1 860 0
 901 0054 626A     		ldr	r2, [r4, #36]
 902 0056 A36A     		ldr	r3, [r4, #40]
 903 0058 E069     		ldr	r0, [r4, #28]
 904 005a 216A     		ldr	r1, [r4, #32]
 905 005c FFF7FEFF 		bl	Get_TimeDifference_Between
 906              	.LVL85:
 907 0060 CDE90001 		strd	r0, [sp]
 861:SYS/task_manager/task_manager.c **** 
 862:SYS/task_manager/task_manager.c ****             tsk_ptr->Exec_status.cpu_opy = tsk_ptr->Exec_status.totlal_running_time / (float)time_d
 908              		.loc 1 862 0
 909 0064 256C     		ldr	r5, [r4, #64]
 910 0066 FFF7FEFF 		bl	__aeabi_ul2f
 911              	.LVL86:
 912 006a 07EE905A 		vmov	s15, r5	@ int
 913 006e B8EE677A 		vcvt.f32.u32	s14, s15
 914 0072 06EE900A 		vmov	s13, r0
 915 0076 C7EE267A 		vdiv.f32	s15, s14, s13
 863:SYS/task_manager/task_manager.c ****             tsk_ptr->Exec_status.cpu_opy *= 100;
 916              		.loc 1 863 0
 917 007a 9FED177A 		vldr.32	s14, .L64+8
 918 007e 67EE877A 		vmul.f32	s15, s15, s14
 919 0082 C4ED117A 		vstr.32	s15, [r4, #68]
 864:SYS/task_manager/task_manager.c **** 
 865:SYS/task_manager/task_manager.c ****             //get average task running time
 866:SYS/task_manager/task_manager.c ****             tsk_ptr->Exec_status.detect_exec_time_arv += tsk_ptr->TskFuncUing_US;
 920              		.loc 1 866 0
 921 0086 A26D     		ldr	r2, [r4, #88]
 922 0088 236B     		ldr	r3, [r4, #48]
 923 008a 1344     		add	r3, r3, r2
 924 008c 2363     		str	r3, [r4, #48]
 867:SYS/task_manager/task_manager.c ****             if (tsk_ptr->Exec_status.Exec_Times > 1)
 925              		.loc 1 867 0
 926 008e A26B     		ldr	r2, [r4, #56]
 927 0090 012A     		cmp	r2, #1
 928 0092 01D9     		bls	.L60
 868:SYS/task_manager/task_manager.c ****             {
 869:SYS/task_manager/task_manager.c ****                 tsk_ptr->Exec_status.detect_exec_time_arv /= 2;
 929              		.loc 1 869 0
 930 0094 5B08     		lsrs	r3, r3, #1
 931 0096 2363     		str	r3, [r4, #48]
 932              	.L60:
 870:SYS/task_manager/task_manager.c ****             }
 871:SYS/task_manager/task_manager.c **** 
 872:SYS/task_manager/task_manager.c ****             tsk_ptr->Exec_status.Exec_Time = Get_TargetRunTime(tsk_ptr->exec_interval_us);
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 62


 933              		.loc 1 872 0
 934 0098 A089     		ldrh	r0, [r4, #12]
 935 009a FFF7FEFF 		bl	Get_TargetRunTime
 936              	.LVL87:
 937 009e 6062     		str	r0, [r4, #36]
 938 00a0 A162     		str	r1, [r4, #40]
 873:SYS/task_manager/task_manager.c **** 
 874:SYS/task_manager/task_manager.c ****             //get task execute frequence
 875:SYS/task_manager/task_manager.c ****             if (tsk_ptr->Exec_status.Exec_Times)
 939              		.loc 1 875 0
 940 00a2 A56B     		ldr	r5, [r4, #56]
 941 00a4 6DB1     		cbz	r5, .L61
 876:SYS/task_manager/task_manager.c ****             {
 877:SYS/task_manager/task_manager.c ****                 tsk_ptr->Exec_status.detect_exec_frq = (uint32_t)(tsk_ptr->Exec_status.Exec_Times /
 942              		.loc 1 877 0
 943 00a6 FFF7FEFF 		bl	__aeabi_ul2f
 944              	.LVL88:
 945 00aa 07EE905A 		vmov	s15, r5	@ int
 946 00ae F8EE677A 		vcvt.f32.u32	s15, s15
 947 00b2 06EE900A 		vmov	s13, r0
 948 00b6 87EEA67A 		vdiv.f32	s14, s15, s13
 949 00ba BCEEC77A 		vcvt.u32.f32	s14, s14
 950 00be 84ED0B7A 		vstr.32	s14, [r4, #44]	@ int
 951              	.L61:
 878:SYS/task_manager/task_manager.c ****             }
 879:SYS/task_manager/task_manager.c **** 
 880:SYS/task_manager/task_manager.c ****             tsk_ptr->Exec_status.State = Task_Stop;
 952              		.loc 1 880 0
 953 00c2 0223     		movs	r3, #2
 954 00c4 84F84830 		strb	r3, [r4, #72]
 881:SYS/task_manager/task_manager.c **** 
 882:SYS/task_manager/task_manager.c ****             //erase currnet runnint task pointer
 883:SYS/task_manager/task_manager.c ****             CurRunTsk_Ptr = NULL;
 955              		.loc 1 883 0
 956 00c8 0022     		movs	r2, #0
 957 00ca 024B     		ldr	r3, .L64+4
 958 00cc 1A60     		str	r2, [r3]
 959 00ce 9EE7     		b	.L57
 960              	.L65:
 961              		.align	2
 962              	.L64:
 963 00d0 00000000 		.word	.LANCHOR10
 964 00d4 00000000 		.word	.LANCHOR5
 965 00d8 0000C842 		.word	1120403456
 966              		.cfi_endproc
 967              	.LFE159:
 969              		.section	.text.Task_Caller,"ax",%progbits
 970              		.align	2
 971              		.global	Task_Caller
 972              		.thumb
 973              		.thumb_func
 975              	Task_Caller:
 976              	.LFB162:
 884:SYS/task_manager/task_manager.c ****         }
 885:SYS/task_manager/task_manager.c ****     }
 886:SYS/task_manager/task_manager.c **** }
 887:SYS/task_manager/task_manager.c **** 
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 63


 888:SYS/task_manager/task_manager.c **** uint32_t Task_Get_IdleUS(void)
 889:SYS/task_manager/task_manager.c **** {
 890:SYS/task_manager/task_manager.c ****     return TaskSys_Idle_US;
 891:SYS/task_manager/task_manager.c **** }
 892:SYS/task_manager/task_manager.c **** 
 893:SYS/task_manager/task_manager.c **** float Task_Get_IdleOcupy(void)
 894:SYS/task_manager/task_manager.c **** {
 895:SYS/task_manager/task_manager.c ****     return TaskSys_Idle_Ocupy;
 896:SYS/task_manager/task_manager.c **** }
 897:SYS/task_manager/task_manager.c **** 
 898:SYS/task_manager/task_manager.c **** void Task_Caller(void)
 899:SYS/task_manager/task_manager.c **** {
 977              		.loc 1 899 0
 978              		.cfi_startproc
 979              		@ args = 0, pretend = 0, frame = 0
 980              		@ frame_needed = 0, uses_anonymous_args = 0
 981 0000 08B5     		push	{r3, lr}
 982              	.LCFI18:
 983              		.cfi_def_cfa_offset 8
 984              		.cfi_offset 3, -8
 985              		.cfi_offset 14, -4
 900:SYS/task_manager/task_manager.c ****     static uint8_t i = 0;
 901:SYS/task_manager/task_manager.c **** 
 902:SYS/task_manager/task_manager.c ****     //if any task in any group is under ready state
 903:SYS/task_manager/task_manager.c ****     if (NxtRunTsk_Ptr != NULL)
 986              		.loc 1 903 0
 987 0002 094B     		ldr	r3, .L70
 988 0004 1868     		ldr	r0, [r3]
 989 0006 68B1     		cbz	r0, .L66
 904:SYS/task_manager/task_manager.c ****     {
 905:SYS/task_manager/task_manager.c ****         i++;
 990              		.loc 1 905 0
 991 0008 084A     		ldr	r2, .L70+4
 992 000a 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 993 000c 0133     		adds	r3, r3, #1
 994 000e DBB2     		uxtb	r3, r3
 995 0010 1370     		strb	r3, [r2]
 906:SYS/task_manager/task_manager.c ****         if (i == TskCrt_RegList.num)
 996              		.loc 1 906 0
 997 0012 074A     		ldr	r2, .L70+8
 998 0014 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 999 0016 9342     		cmp	r3, r2
 1000 0018 02D1     		bne	.L68
 907:SYS/task_manager/task_manager.c ****         {
 908:SYS/task_manager/task_manager.c ****             traverse_start = true;
 1001              		.loc 1 908 0
 1002 001a 0122     		movs	r2, #1
 1003 001c 054B     		ldr	r3, .L70+12
 1004 001e 1A70     		strb	r2, [r3]
 1005              	.L68:
 909:SYS/task_manager/task_manager.c ****         }
 910:SYS/task_manager/task_manager.c **** 
 911:SYS/task_manager/task_manager.c ****         //execute task function in function matrix
 912:SYS/task_manager/task_manager.c ****         Task_Exec(NxtRunTsk_Ptr);
 1006              		.loc 1 912 0
 1007 0020 FFF7FEFF 		bl	Task_Exec
 1008              	.LVL89:
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 64


 1009              	.L66:
 1010 0024 08BD     		pop	{r3, pc}
 1011              	.L71:
 1012 0026 00BF     		.align	2
 1013              	.L70:
 1014 0028 00000000 		.word	.LANCHOR10
 1015 002c 00000000 		.word	.LANCHOR11
 1016 0030 00000000 		.word	.LANCHOR4
 1017 0034 00000000 		.word	.LANCHOR12
 1018              		.cfi_endproc
 1019              	.LFE162:
 1021              		.section	.text.Task_CrtList_TraversePoll_callback,"ax",%progbits
 1022              		.align	2
 1023              		.thumb
 1024              		.thumb_func
 1026              	Task_CrtList_TraversePoll_callback:
 1027              	.LFB165:
 913:SYS/task_manager/task_manager.c ****     }
 914:SYS/task_manager/task_manager.c **** }
 915:SYS/task_manager/task_manager.c **** 
 916:SYS/task_manager/task_manager.c **** void TaskSys_Set_State(TaskSys_State state)
 917:SYS/task_manager/task_manager.c **** {
 918:SYS/task_manager/task_manager.c ****     TskSys_state = state;
 919:SYS/task_manager/task_manager.c **** }
 920:SYS/task_manager/task_manager.c **** 
 921:SYS/task_manager/task_manager.c **** TaskSys_State TaskSys_Get_State(void)
 922:SYS/task_manager/task_manager.c **** {
 923:SYS/task_manager/task_manager.c ****     return TskSys_state;
 924:SYS/task_manager/task_manager.c **** }
 925:SYS/task_manager/task_manager.c **** 
 926:SYS/task_manager/task_manager.c **** static int Task_CrtList_TraversePoll_callback(item_obj *item, void *data, void *arg)
 927:SYS/task_manager/task_manager.c **** {
 1028              		.loc 1 927 0
 1029              		.cfi_startproc
 1030              		@ args = 0, pretend = 0, frame = 0
 1031              		@ frame_needed = 0, uses_anonymous_args = 0
 1032              	.LVL90:
 928:SYS/task_manager/task_manager.c ****     if (data != NULL)
 1033              		.loc 1 928 0
 1034 0000 A1B1     		cbz	r1, .L75
 929:SYS/task_manager/task_manager.c ****     {
 930:SYS/task_manager/task_manager.c ****         //get current highest priority task handler AKA NxtRunTsk_Ptr
 931:SYS/task_manager/task_manager.c **** 
 932:SYS/task_manager/task_manager.c ****         if ((TskSys_state == TaskSys_Start) &&
 1035              		.loc 1 932 0
 1036 0002 0B4B     		ldr	r3, .L76
 1037 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1038 0006 DBB2     		uxtb	r3, r3
 1039 0008 022B     		cmp	r3, #2
 1040 000a 0FD1     		bne	.L75
 933:SYS/task_manager/task_manager.c ****             (((Task *)data)->Exec_status.State == Task_Stop) &&
 1041              		.loc 1 933 0 discriminator 1
 1042 000c 91F84830 		ldrb	r3, [r1, #72]	@ zero_extendqisi2
 932:SYS/task_manager/task_manager.c ****             (((Task *)data)->Exec_status.State == Task_Stop) &&
 1043              		.loc 1 932 0 discriminator 1
 1044 0010 022B     		cmp	r3, #2
 1045 0012 0BD1     		bne	.L75
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 65


 927:SYS/task_manager/task_manager.c ****     if (data != NULL)
 1046              		.loc 1 927 0
 1047 0014 10B5     		push	{r4, lr}
 1048              	.LCFI19:
 1049              		.cfi_def_cfa_offset 8
 1050              		.cfi_offset 4, -8
 1051              		.cfi_offset 14, -4
 1052 0016 0C46     		mov	r4, r1
 934:SYS/task_manager/task_manager.c ****             (!RuntimeObj_CompareWithCurrent(((Task *)data)->Exec_status.Exec_Time)))
 1053              		.loc 1 934 0
 1054 0018 486A     		ldr	r0, [r1, #36]
 1055              	.LVL91:
 1056 001a 896A     		ldr	r1, [r1, #40]
 1057              	.LVL92:
 1058 001c FFF7FEFF 		bl	RuntimeObj_CompareWithCurrent
 1059              	.LVL93:
 933:SYS/task_manager/task_manager.c ****             (!RuntimeObj_CompareWithCurrent(((Task *)data)->Exec_status.Exec_Time)))
 1060              		.loc 1 933 0
 1061 0020 10B9     		cbnz	r0, .L73
 935:SYS/task_manager/task_manager.c ****         {
 936:SYS/task_manager/task_manager.c ****             Task_SetReady((Task *)data);
 1062              		.loc 1 936 0
 1063 0022 2046     		mov	r0, r4
 1064 0024 FFF7FEFF 		bl	Task_SetReady
 1065              	.LVL94:
 1066              	.L73:
 937:SYS/task_manager/task_manager.c ****         }
 938:SYS/task_manager/task_manager.c ****     }
 939:SYS/task_manager/task_manager.c **** 
 940:SYS/task_manager/task_manager.c ****     return 0;
 941:SYS/task_manager/task_manager.c **** }
 1067              		.loc 1 941 0
 1068 0028 0020     		movs	r0, #0
 1069 002a 10BD     		pop	{r4, pc}
 1070              	.LVL95:
 1071              	.L75:
 1072              	.LCFI20:
 1073              		.cfi_def_cfa_offset 0
 1074              		.cfi_restore 4
 1075              		.cfi_restore 14
 1076 002c 0020     		movs	r0, #0
 1077              	.LVL96:
 1078 002e 7047     		bx	lr
 1079              	.L77:
 1080              		.align	2
 1081              	.L76:
 1082 0030 00000000 		.word	.LANCHOR6
 1083              		.cfi_endproc
 1084              	.LFE165:
 1086              		.section	.text.Task_Resume_FromBlock,"ax",%progbits
 1087              		.align	2
 1088              		.global	Task_Resume_FromBlock
 1089              		.thumb
 1090              		.thumb_func
 1092              	Task_Resume_FromBlock:
 1093              	.LFB129:
 204:SYS/task_manager/task_manager.c ****     Task_ClearBlock(tsk);
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 66


 1094              		.loc 1 204 0
 1095              		.cfi_startproc
 1096              		@ args = 0, pretend = 0, frame = 0
 1097              		@ frame_needed = 0, uses_anonymous_args = 0
 1098              	.LVL97:
 1099 0000 10B5     		push	{r4, lr}
 1100              	.LCFI21:
 1101              		.cfi_def_cfa_offset 8
 1102              		.cfi_offset 4, -8
 1103              		.cfi_offset 14, -4
 1104 0002 0446     		mov	r4, r0
 205:SYS/task_manager/task_manager.c ****     Task_SetReady(tsk);
 1105              		.loc 1 205 0
 1106 0004 FFF7FEFF 		bl	Task_ClearBlock
 1107              	.LVL98:
 206:SYS/task_manager/task_manager.c **** 
 1108              		.loc 1 206 0
 1109 0008 2046     		mov	r0, r4
 1110 000a FFF7FEFF 		bl	Task_SetReady
 1111              	.LVL99:
 208:SYS/task_manager/task_manager.c ****     NxtTsk_TCB.Top_Stk_Ptr = &tsk->TCB.Top_Stk_Ptr;
 1112              		.loc 1 208 0
 1113 000e 0123     		movs	r3, #1
 1114 0010 84F84830 		strb	r3, [r4, #72]
 209:SYS/task_manager/task_manager.c ****     NxtTsk_TCB.Stack = tsk->TCB.Stack;
 1115              		.loc 1 209 0
 1116 0014 04F15002 		add	r2, r4, #80
 1117 0018 034B     		ldr	r3, .L80
 1118 001a 1A60     		str	r2, [r3]
 210:SYS/task_manager/task_manager.c ****     CurRunTsk_Ptr = tsk;
 1119              		.loc 1 210 0
 1120 001c 626D     		ldr	r2, [r4, #84]
 1121 001e 5A60     		str	r2, [r3, #4]
 211:SYS/task_manager/task_manager.c **** }
 1122              		.loc 1 211 0
 1123 0020 024B     		ldr	r3, .L80+4
 1124 0022 1C60     		str	r4, [r3]
 1125 0024 10BD     		pop	{r4, pc}
 1126              	.LVL100:
 1127              	.L81:
 1128 0026 00BF     		.align	2
 1129              	.L80:
 1130 0028 00000000 		.word	NxtTsk_TCB
 1131 002c 00000000 		.word	.LANCHOR5
 1132              		.cfi_endproc
 1133              	.LFE129:
 1135              		.section	.text.Task_SetBlock,"ax",%progbits
 1136              		.align	2
 1137              		.global	Task_SetBlock
 1138              		.thumb
 1139              		.thumb_func
 1141              	Task_SetBlock:
 1142              	.LFB130:
 215:SYS/task_manager/task_manager.c ****     uint8_t grp_id = GET_TASKGROUP_PRIORITY(tsk->priority.Priority);
 1143              		.loc 1 215 0
 1144              		.cfi_startproc
 1145              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 67


 1146              		@ frame_needed = 0, uses_anonymous_args = 0
 1147              	.LVL101:
 1148 0000 70B5     		push	{r4, r5, r6, lr}
 1149              	.LCFI22:
 1150              		.cfi_def_cfa_offset 16
 1151              		.cfi_offset 4, -16
 1152              		.cfi_offset 5, -12
 1153              		.cfi_offset 6, -8
 1154              		.cfi_offset 14, -4
 216:SYS/task_manager/task_manager.c ****     uint8_t tsk_id = GET_TASKINGROUP_PRIORITY(tsk->priority.Priority);
 1155              		.loc 1 216 0
 1156 0002 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 1157 0004 D308     		lsrs	r3, r2, #3
 1158              	.LVL102:
 217:SYS/task_manager/task_manager.c **** 
 1159              		.loc 1 217 0
 1160 0006 02F00706 		and	r6, r2, #7
 1161              	.LVL103:
 220:SYS/task_manager/task_manager.c ****     //set current task under this group flag to block
 1162              		.loc 1 220 0
 1163 000a 1449     		ldr	r1, .L85
 1164 000c 0C78     		ldrb	r4, [r1]	@ zero_extendqisi2
 1165 000e 0122     		movs	r2, #1
 1166 0010 02FA03F5 		lsl	r5, r2, r3
 1167 0014 6DB2     		sxtb	r5, r5
 1168 0016 2C43     		orrs	r4, r4, r5
 1169 0018 E4B2     		uxtb	r4, r4
 1170 001a 0C70     		strb	r4, [r1]
 222:SYS/task_manager/task_manager.c **** 
 1171              		.loc 1 222 0
 1172 001c 1944     		add	r1, r1, r3
 1173 001e 4C78     		ldrb	r4, [r1, #1]	@ zero_extendqisi2
 1174 0020 B240     		lsls	r2, r2, r6
 1175 0022 52B2     		sxtb	r2, r2
 1176 0024 1443     		orrs	r4, r4, r2
 1177 0026 E4B2     		uxtb	r4, r4
 1178 0028 4C70     		strb	r4, [r1, #1]
 225:SYS/task_manager/task_manager.c ****     //if no task ready then clear group reg
 1179              		.loc 1 225 0
 1180 002a 0D49     		ldr	r1, .L85+4
 1181 002c 0B44     		add	r3, r3, r1
 1182              	.LVL104:
 1183 002e 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 1184 0030 21EA0202 		bic	r2, r1, r2
 1185 0034 5A70     		strb	r2, [r3, #1]
 227:SYS/task_manager/task_manager.c ****     {
 1186              		.loc 1 227 0
 1187 0036 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1188              	.LVL105:
 1189 0038 13F0FF0F 		tst	r3, #255
 1190 003c 04D1     		bne	.L83
 229:SYS/task_manager/task_manager.c ****     }
 1191              		.loc 1 229 0
 1192 003e 084A     		ldr	r2, .L85+4
 1193 0040 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1194 0042 23EA0505 		bic	r5, r3, r5
 1195 0046 1570     		strb	r5, [r2]
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 68


 1196              	.L83:
 233:SYS/task_manager/task_manager.c **** 
 1197              		.loc 1 233 0
 1198 0048 0323     		movs	r3, #3
 1199 004a 80F84830 		strb	r3, [r0, #72]
 235:SYS/task_manager/task_manager.c **** 
 1200              		.loc 1 235 0
 1201 004e 0020     		movs	r0, #0
 1202              	.LVL106:
 1203 0050 044B     		ldr	r3, .L85+8
 1204 0052 1860     		str	r0, [r3]
 237:SYS/task_manager/task_manager.c **** }
 1205              		.loc 1 237 0
 1206 0054 FFF7FEFF 		bl	Task_SetBASEPRI
 1207              	.LVL107:
 1208 0058 70BD     		pop	{r4, r5, r6, pc}
 1209              	.LVL108:
 1210              	.L86:
 1211 005a 00BF     		.align	2
 1212              	.L85:
 1213 005c 00000000 		.word	.LANCHOR1
 1214 0060 00000000 		.word	.LANCHOR0
 1215 0064 00000000 		.word	.LANCHOR5
 1216              		.cfi_endproc
 1217              	.LFE130:
 1219              		.section	.text.Task_SetPending,"ax",%progbits
 1220              		.align	2
 1221              		.global	Task_SetPending
 1222              		.thumb
 1223              		.thumb_func
 1225              	Task_SetPending:
 1226              	.LFB131:
 241:SYS/task_manager/task_manager.c ****     uint8_t grp_id = GET_TASKGROUP_PRIORITY(tsk->priority.Priority);
 1227              		.loc 1 241 0
 1228              		.cfi_startproc
 1229              		@ args = 0, pretend = 0, frame = 0
 1230              		@ frame_needed = 0, uses_anonymous_args = 0
 1231              		@ link register save eliminated.
 1232              	.LVL109:
 1233 0000 70B4     		push	{r4, r5, r6}
 1234              	.LCFI23:
 1235              		.cfi_def_cfa_offset 12
 1236              		.cfi_offset 4, -12
 1237              		.cfi_offset 5, -8
 1238              		.cfi_offset 6, -4
 242:SYS/task_manager/task_manager.c ****     uint8_t tsk_id = GET_TASKINGROUP_PRIORITY(tsk->priority.Priority);
 1239              		.loc 1 242 0
 1240 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 1241 0004 DA08     		lsrs	r2, r3, #3
 1242              	.LVL110:
 243:SYS/task_manager/task_manager.c **** 
 1243              		.loc 1 243 0
 1244 0006 03F00704 		and	r4, r3, #7
 1245              	.LVL111:
 246:SYS/task_manager/task_manager.c ****     //set current task under this group flag to ready
 1246              		.loc 1 246 0
 1247 000a 094D     		ldr	r5, .L89
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 69


 1248 000c 2E78     		ldrb	r6, [r5]	@ zero_extendqisi2
 1249 000e 0123     		movs	r3, #1
 1250 0010 03FA02F1 		lsl	r1, r3, r2
 1251 0014 3143     		orrs	r1, r1, r6
 1252 0016 C9B2     		uxtb	r1, r1
 1253 0018 2970     		strb	r1, [r5]
 248:SYS/task_manager/task_manager.c **** 
 1254              		.loc 1 248 0
 1255 001a 2A44     		add	r2, r2, r5
 1256              	.LVL112:
 1257 001c 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
 1258 001e A340     		lsls	r3, r3, r4
 1259 0020 0B43     		orrs	r3, r3, r1
 1260 0022 DBB2     		uxtb	r3, r3
 1261 0024 5370     		strb	r3, [r2, #1]
 251:SYS/task_manager/task_manager.c **** }
 1262              		.loc 1 251 0
 1263 0026 0423     		movs	r3, #4
 1264 0028 80F84830 		strb	r3, [r0, #72]
 252:SYS/task_manager/task_manager.c **** 
 1265              		.loc 1 252 0
 1266 002c 70BC     		pop	{r4, r5, r6}
 1267              	.LCFI24:
 1268              		.cfi_restore 6
 1269              		.cfi_restore 5
 1270              		.cfi_restore 4
 1271              		.cfi_def_cfa_offset 0
 1272              	.LVL113:
 1273 002e 7047     		bx	lr
 1274              	.L90:
 1275              		.align	2
 1276              	.L89:
 1277 0030 00000000 		.word	.LANCHOR2
 1278              		.cfi_endproc
 1279              	.LFE131:
 1281              		.section	.text.Task_SwitchStack,"ax",%progbits
 1282              		.align	2
 1283              		.global	Task_SwitchStack
 1284              		.thumb
 1285              		.thumb_func
 1287              	Task_SwitchStack:
 1288              	.LFB132:
 255:SYS/task_manager/task_manager.c ****     CurTsk_TCB = NxtTsk_TCB;
 1289              		.loc 1 255 0
 1290              		.cfi_startproc
 1291              		@ args = 0, pretend = 0, frame = 0
 1292              		@ frame_needed = 0, uses_anonymous_args = 0
 1293              		@ link register save eliminated.
 256:SYS/task_manager/task_manager.c **** }
 1294              		.loc 1 256 0
 1295 0000 034B     		ldr	r3, .L92
 1296 0002 044A     		ldr	r2, .L92+4
 1297 0004 92E80300 		ldmia	r2, {r0, r1}
 1298 0008 83E80300 		stmia	r3, {r0, r1}
 1299 000c 7047     		bx	lr
 1300              	.L93:
 1301 000e 00BF     		.align	2
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 70


 1302              	.L92:
 1303 0010 00000000 		.word	CurTsk_TCB
 1304 0014 00000000 		.word	NxtTsk_TCB
 1305              		.cfi_endproc
 1306              	.LFE132:
 1308              		.section	.text.Task_Get_HighestRank_PndTask,"ax",%progbits
 1309              		.align	2
 1310              		.global	Task_Get_HighestRank_PndTask
 1311              		.thumb
 1312              		.thumb_func
 1314              	Task_Get_HighestRank_PndTask:
 1315              	.LFB133:
 260:SYS/task_manager/task_manager.c ****     uint8_t grp_id;
 1316              		.loc 1 260 0
 1317              		.cfi_startproc
 1318              		@ args = 0, pretend = 0, frame = 0
 1319              		@ frame_needed = 0, uses_anonymous_args = 0
 1320              		@ link register save eliminated.
 264:SYS/task_manager/task_manager.c ****     {
 1321              		.loc 1 264 0
 1322 0000 144B     		ldr	r3, .L100
 1323 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1324 0004 13F0FF0F 		tst	r3, #255
 1325 0008 1FD0     		beq	.L96
 267:SYS/task_manager/task_manager.c ****         //find task in group
 1326              		.loc 1 267 0
 1327 000a 124B     		ldr	r3, .L100
 1328 000c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1329 000e D2B2     		uxtb	r2, r2
 1330 0010 1149     		ldr	r1, .L100+4
 1331 0012 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 269:SYS/task_manager/task_manager.c ****     }
 1332              		.loc 1 269 0
 1333 0014 1344     		add	r3, r3, r2
 1334 0016 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1335 0018 DBB2     		uxtb	r3, r3
 1336 001a CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 274:SYS/task_manager/task_manager.c ****     {
 1337              		.loc 1 274 0
 1338 001c 03EBC200 		add	r0, r3, r2, lsl #3
 1339 0020 0E49     		ldr	r1, .L100+8
 1340 0022 51F82000 		ldr	r0, [r1, r0, lsl #2]
 1341 0026 98B9     		cbnz	r0, .L99
 260:SYS/task_manager/task_manager.c ****     uint8_t grp_id;
 1342              		.loc 1 260 0
 1343 0028 70B4     		push	{r4, r5, r6}
 1344              	.LCFI25:
 1345              		.cfi_def_cfa_offset 12
 1346              		.cfi_offset 4, -12
 1347              		.cfi_offset 5, -8
 1348              		.cfi_offset 6, -4
 280:SYS/task_manager/task_manager.c ****         TskHdl_PndMap.TskInGrp[grp_id].Flg &= ~(1 << tsk_id);
 1349              		.loc 1 280 0
 1350 002a 0A4C     		ldr	r4, .L100
 1351 002c 2578     		ldrb	r5, [r4]	@ zero_extendqisi2
 1352 002e 0121     		movs	r1, #1
 1353 0030 01FA02F6 		lsl	r6, r1, r2
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 71


 1354 0034 25EA0605 		bic	r5, r5, r6
 1355 0038 2570     		strb	r5, [r4]
 281:SYS/task_manager/task_manager.c ****         return NULL;
 1356              		.loc 1 281 0
 1357 003a 2244     		add	r2, r2, r4
 1358 003c 5478     		ldrb	r4, [r2, #1]	@ zero_extendqisi2
 1359 003e 01FA03F3 		lsl	r3, r1, r3
 1360 0042 24EA0303 		bic	r3, r4, r3
 1361 0046 5370     		strb	r3, [r2, #1]
 282:SYS/task_manager/task_manager.c ****     }
 1362              		.loc 1 282 0
 1363 0048 01E0     		b	.L95
 1364              	.L96:
 1365              	.LCFI26:
 1366              		.cfi_def_cfa_offset 0
 1367              		.cfi_restore 4
 1368              		.cfi_restore 5
 1369              		.cfi_restore 6
 272:SYS/task_manager/task_manager.c **** 
 1370              		.loc 1 272 0
 1371 004a 0020     		movs	r0, #0
 1372 004c 7047     		bx	lr
 1373              	.L95:
 1374              	.LCFI27:
 1375              		.cfi_def_cfa_offset 12
 1376              		.cfi_offset 4, -12
 1377              		.cfi_offset 5, -8
 1378              		.cfi_offset 6, -4
 284:SYS/task_manager/task_manager.c **** 
 1379              		.loc 1 284 0
 1380 004e 70BC     		pop	{r4, r5, r6}
 1381              	.LCFI28:
 1382              		.cfi_restore 6
 1383              		.cfi_restore 5
 1384              		.cfi_restore 4
 1385              		.cfi_def_cfa_offset 0
 1386              	.L99:
 1387 0050 7047     		bx	lr
 1388              	.L101:
 1389 0052 00BF     		.align	2
 1390              	.L100:
 1391 0054 00000000 		.word	.LANCHOR2
 1392 0058 00000000 		.word	.LANCHOR13
 1393 005c 00000000 		.word	Task_Ptr
 1394              		.cfi_endproc
 1395              	.LFE133:
 1397              		.section	.text.Task_SaveCurProc,"ax",%progbits
 1398              		.align	2
 1399              		.global	Task_SaveCurProc
 1400              		.thumb
 1401              		.thumb_func
 1403              	Task_SaveCurProc:
 1404              	.LFB138:
 337:SYS/task_manager/task_manager.c ****     __ASM("MRS    R0, PSP");
 1405              		.loc 1 337 0
 1406              		.cfi_startproc
 1407              		@ Naked Function: prologue and epilogue provided by programmer.
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 72


 1408              		@ args = 0, pretend = 0, frame = 0
 1409              		@ frame_needed = 0, uses_anonymous_args = 0
 338:SYS/task_manager/task_manager.c ****     __ASM("LDR	  R3, CurrentTCBConst_Tmp3");
 1410              		.loc 1 338 0
 1411              		.syntax unified
 1412              	@ 338 "SYS/task_manager/task_manager.c" 1
 1413 0000 EFF30980 		MRS    R0, PSP
 1414              	@ 0 "" 2
 339:SYS/task_manager/task_manager.c ****     __ASM("LDR    R2, [R3]");
 1415              		.loc 1 339 0
 1416              	@ 339 "SYS/task_manager/task_manager.c" 1
 1417 0004 DFF81C30 		LDR	  R3, CurrentTCBConst_Tmp3
 1418              	@ 0 "" 2
 340:SYS/task_manager/task_manager.c **** 
 1419              		.loc 1 340 0
 1420              	@ 340 "SYS/task_manager/task_manager.c" 1
 1421 0008 1A68     		LDR    R2, [R3]
 1422              	@ 0 "" 2
 342:SYS/task_manager/task_manager.c **** 
 1423              		.loc 1 342 0
 1424              	@ 342 "SYS/task_manager/task_manager.c" 1
 1425 000a BFF36F8F 		ISB
 1426              	@ 0 "" 2
 344:SYS/task_manager/task_manager.c ****     __ASM("STR      R0, [R2]");
 1427              		.loc 1 344 0
 1428              	@ 344 "SYS/task_manager/task_manager.c" 1
 1429 000e 20E9F04F 		STMDB    R0!, {R4-R11, R14}
 1430              	@ 0 "" 2
 345:SYS/task_manager/task_manager.c **** 
 1431              		.loc 1 345 0
 1432              	@ 345 "SYS/task_manager/task_manager.c" 1
 1433 0012 1060     		STR      R0, [R2]
 1434              	@ 0 "" 2
 348:SYS/task_manager/task_manager.c ****     __ASM("IT       EQ");
 1435              		.loc 1 348 0
 1436              	@ 348 "SYS/task_manager/task_manager.c" 1
 1437 0014 1EF0100F 		TST      R14, #0x10
 1438              	@ 0 "" 2
 349:SYS/task_manager/task_manager.c ****     __ASM("VSTMDBEQ R0!, {s16-s31}");
 1439              		.loc 1 349 0
 1440              	@ 349 "SYS/task_manager/task_manager.c" 1
 1441 0018 08BF     		IT       EQ
 1442              	@ 0 "" 2
 350:SYS/task_manager/task_manager.c ****     /******************************  FPU SECTION  *********************************/
 1443              		.loc 1 350 0
 1444              	@ 350 "SYS/task_manager/task_manager.c" 1
 1445 001a 20ED108A 		VSTMDBEQ R0!, {s16-s31}
 1446              	@ 0 "" 2
 353:SYS/task_manager/task_manager.c ****     __ASM("BX       R14");
 1447              		.loc 1 353 0
 1448              	@ 353 "SYS/task_manager/task_manager.c" 1
 1449 001e BFF36F8F 		ISB
 1450              	@ 0 "" 2
 354:SYS/task_manager/task_manager.c **** 
 1451              		.loc 1 354 0
 1452              	@ 354 "SYS/task_manager/task_manager.c" 1
 1453 0022 7047     		BX       R14
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 73


 1454              	@ 0 "" 2
 356:SYS/task_manager/task_manager.c **** }
 1455              		.loc 1 356 0
 1456              	@ 356 "SYS/task_manager/task_manager.c" 1
 1457 0024 00000000 		CurrentTCBConst_Tmp3: .word CurTsk_TCB
 1458              	@ 0 "" 2
 357:SYS/task_manager/task_manager.c **** 
 1459              		.loc 1 357 0
 1460              		.thumb
 1461              		.syntax unified
 1462              		.cfi_endproc
 1463              	.LFE138:
 1465              		.section	.text.Task_Load,"ax",%progbits
 1466              		.align	2
 1467              		.global	Task_Load
 1468              		.thumb
 1469              		.thumb_func
 1471              	Task_Load:
 1472              	.LFB139:
 360:SYS/task_manager/task_manager.c ****     __ASM("LDR	  R3, =CurTsk_TCB");
 1473              		.loc 1 360 0
 1474              		.cfi_startproc
 1475              		@ Naked Function: prologue and epilogue provided by programmer.
 1476              		@ args = 0, pretend = 0, frame = 0
 1477              		@ frame_needed = 0, uses_anonymous_args = 0
 361:SYS/task_manager/task_manager.c ****     __ASM("LDR    R1, [R3]");
 1478              		.loc 1 361 0
 1479              		.syntax unified
 1480              	@ 361 "SYS/task_manager/task_manager.c" 1
 1481 0000 074B     		LDR	  R3, =CurTsk_TCB
 1482              	@ 0 "" 2
 362:SYS/task_manager/task_manager.c ****     __ASM("LDR    R0, [R1]");
 1483              		.loc 1 362 0
 1484              	@ 362 "SYS/task_manager/task_manager.c" 1
 1485 0002 1968     		LDR    R1, [R3]
 1486              	@ 0 "" 2
 363:SYS/task_manager/task_manager.c **** 
 1487              		.loc 1 363 0
 1488              	@ 363 "SYS/task_manager/task_manager.c" 1
 1489 0004 0868     		LDR    R0, [R1]
 1490              	@ 0 "" 2
 365:SYS/task_manager/task_manager.c **** 
 1491              		.loc 1 365 0
 1492              	@ 365 "SYS/task_manager/task_manager.c" 1
 1493 0006 B0E8F04F 		LDMIA  R0!, {R4-R11, R14}
 1494              	@ 0 "" 2
 368:SYS/task_manager/task_manager.c ****     __ASM("IT       EQ");
 1495              		.loc 1 368 0
 1496              	@ 368 "SYS/task_manager/task_manager.c" 1
 1497 000a 1EF0100F 		TST      R14, #0x10
 1498              	@ 0 "" 2
 369:SYS/task_manager/task_manager.c ****     __ASM("VLDMIAEQ R0!, {s16-s31}");
 1499              		.loc 1 369 0
 1500              	@ 369 "SYS/task_manager/task_manager.c" 1
 1501 000e 08BF     		IT       EQ
 1502              	@ 0 "" 2
 370:SYS/task_manager/task_manager.c ****     /******************************  FPU SECTION  *********************************/
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 74


 1503              		.loc 1 370 0
 1504              	@ 370 "SYS/task_manager/task_manager.c" 1
 1505 0010 B0EC108A 		VLDMIAEQ R0!, {s16-s31}
 1506              	@ 0 "" 2
 373:SYS/task_manager/task_manager.c ****     __ASM("ISB");
 1507              		.loc 1 373 0
 1508              	@ 373 "SYS/task_manager/task_manager.c" 1
 1509 0014 80F30988 		MSR    PSP, R0
 1510              	@ 0 "" 2
 374:SYS/task_manager/task_manager.c ****     //__ASM("MOV    R0, #240");
 1511              		.loc 1 374 0
 1512              	@ 374 "SYS/task_manager/task_manager.c" 1
 1513 0018 BFF36F8F 		ISB
 1514              	@ 0 "" 2
 377:SYS/task_manager/task_manager.c ****     __ASM(".ALIGN 4");
 1515              		.loc 1 377 0
 1516              	@ 377 "SYS/task_manager/task_manager.c" 1
 1517 001c 7047     		BX     R14
 1518              	@ 0 "" 2
 378:SYS/task_manager/task_manager.c **** }
 1519              		.loc 1 378 0
 1520              	@ 378 "SYS/task_manager/task_manager.c" 1
 1521 001e 00BF     		.ALIGN 4
 1522              	@ 0 "" 2
 379:SYS/task_manager/task_manager.c **** 
 1523              		.loc 1 379 0
 1524              		.thumb
 1525              		.syntax unified
 1526              		.cfi_endproc
 1527              	.LFE139:
 1529              		.section	.text.Load_FirstTask,"ax",%progbits
 1530              		.align	2
 1531              		.global	Load_FirstTask
 1532              		.thumb
 1533              		.thumb_func
 1535              	Load_FirstTask:
 1536              	.LFB140:
 382:SYS/task_manager/task_manager.c ****     Task_Load();
 1537              		.loc 1 382 0
 1538              		.cfi_startproc
 1539              		@ args = 0, pretend = 0, frame = 0
 1540              		@ frame_needed = 0, uses_anonymous_args = 0
 1541 0000 08B5     		push	{r3, lr}
 1542              	.LCFI29:
 1543              		.cfi_def_cfa_offset 8
 1544              		.cfi_offset 3, -8
 1545              		.cfi_offset 14, -4
 383:SYS/task_manager/task_manager.c **** }
 1546              		.loc 1 383 0
 1547 0002 FFF7FEFF 		bl	Task_Load
 1548              	.LVL114:
 1549 0006 08BD     		pop	{r3, pc}
 1550              		.cfi_endproc
 1551              	.LFE140:
 1553              		.section	.text.Task_SwitchContext,"ax",%progbits
 1554              		.align	2
 1555              		.global	Task_SwitchContext
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 75


 1556              		.thumb
 1557              		.thumb_func
 1559              	Task_SwitchContext:
 1560              	.LFB141:
 387:SYS/task_manager/task_manager.c ****     __ASM("MRS      R0, PSP");
 1561              		.loc 1 387 0
 1562              		.cfi_startproc
 1563              		@ Naked Function: prologue and epilogue provided by programmer.
 1564              		@ args = 0, pretend = 0, frame = 0
 1565              		@ frame_needed = 0, uses_anonymous_args = 0
 388:SYS/task_manager/task_manager.c ****     __ASM("ISB");
 1566              		.loc 1 388 0
 1567              		.syntax unified
 1568              	@ 388 "SYS/task_manager/task_manager.c" 1
 1569 0000 EFF30980 		MRS      R0, PSP
 1570              	@ 0 "" 2
 389:SYS/task_manager/task_manager.c **** 
 1571              		.loc 1 389 0
 1572              	@ 389 "SYS/task_manager/task_manager.c" 1
 1573 0004 BFF36F8F 		ISB
 1574              	@ 0 "" 2
 391:SYS/task_manager/task_manager.c ****     __ASM("LDR      R2, [R3]");
 1575              		.loc 1 391 0
 1576              	@ 391 "SYS/task_manager/task_manager.c" 1
 1577 0008 DFF85030 		LDR      R3, CurrentTCBConst_Tmp
 1578              	@ 0 "" 2
 392:SYS/task_manager/task_manager.c **** 
 1579              		.loc 1 392 0
 1580              	@ 392 "SYS/task_manager/task_manager.c" 1
 1581 000c 1A68     		LDR      R2, [R3]
 1582              	@ 0 "" 2
 395:SYS/task_manager/task_manager.c ****     __ASM("IT       EQ");
 1583              		.loc 1 395 0
 1584              	@ 395 "SYS/task_manager/task_manager.c" 1
 1585 000e 1EF0100F 		TST      R14, #0x10
 1586              	@ 0 "" 2
 396:SYS/task_manager/task_manager.c ****     __ASM("VSTMDBEQ R0!, {s16-s31}");
 1587              		.loc 1 396 0
 1588              	@ 396 "SYS/task_manager/task_manager.c" 1
 1589 0012 08BF     		IT       EQ
 1590              	@ 0 "" 2
 397:SYS/task_manager/task_manager.c ****     /******************************  FPU SECTION  *********************************/
 1591              		.loc 1 397 0
 1592              	@ 397 "SYS/task_manager/task_manager.c" 1
 1593 0014 20ED108A 		VSTMDBEQ R0!, {s16-s31}
 1594              	@ 0 "" 2
 400:SYS/task_manager/task_manager.c ****     __ASM("STR      R0, [R2]");
 1595              		.loc 1 400 0
 1596              	@ 400 "SYS/task_manager/task_manager.c" 1
 1597 0018 20E9F04F 		STMDB    R0!, {R4-R11, R14}
 1598              	@ 0 "" 2
 401:SYS/task_manager/task_manager.c **** 
 1599              		.loc 1 401 0
 1600              	@ 401 "SYS/task_manager/task_manager.c" 1
 1601 001c 1060     		STR      R0, [R2]
 1602              	@ 0 "" 2
 403:SYS/task_manager/task_manager.c ****     __ASM("MOV      R0, %0" ::"i"(0x50));
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 76


 1603              		.loc 1 403 0
 1604              	@ 403 "SYS/task_manager/task_manager.c" 1
 1605 001e 2DE90900 		STMDB    SP!, {R0, R3}
 1606              	@ 0 "" 2
 404:SYS/task_manager/task_manager.c ****     __ASM("MSR      BASEPRI, R0");
 1607              		.loc 1 404 0
 1608              	@ 404 "SYS/task_manager/task_manager.c" 1
 1609 0022 4FF05000 		MOV      R0, #80
 1610              	@ 0 "" 2
 405:SYS/task_manager/task_manager.c **** 
 1611              		.loc 1 405 0
 1612              	@ 405 "SYS/task_manager/task_manager.c" 1
 1613 0026 80F31188 		MSR      BASEPRI, R0
 1614              	@ 0 "" 2
 407:SYS/task_manager/task_manager.c ****     __ASM("ISB");
 1615              		.loc 1 407 0
 1616              	@ 407 "SYS/task_manager/task_manager.c" 1
 1617 002a BFF34F8F 		DSB
 1618              	@ 0 "" 2
 408:SYS/task_manager/task_manager.c **** 
 1619              		.loc 1 408 0
 1620              	@ 408 "SYS/task_manager/task_manager.c" 1
 1621 002e BFF36F8F 		ISB
 1622              	@ 0 "" 2
 410:SYS/task_manager/task_manager.c **** 
 1623              		.loc 1 410 0
 1624              	@ 410 "SYS/task_manager/task_manager.c" 1
 1625 0032 FFF7FEFF 		BL       Task_SwitchStack
 1626              	@ 0 "" 2
 412:SYS/task_manager/task_manager.c ****     __ASM("MSR      BASEPRI, R0");
 1627              		.loc 1 412 0
 1628              	@ 412 "SYS/task_manager/task_manager.c" 1
 1629 0036 4FF00000 		MOV      R0, #0
 1630              	@ 0 "" 2
 413:SYS/task_manager/task_manager.c ****     __ASM("LDMIA    SP!, {R0, R3}");
 1631              		.loc 1 413 0
 1632              	@ 413 "SYS/task_manager/task_manager.c" 1
 1633 003a 80F31188 		MSR      BASEPRI, R0
 1634              	@ 0 "" 2
 414:SYS/task_manager/task_manager.c **** 
 1635              		.loc 1 414 0
 1636              	@ 414 "SYS/task_manager/task_manager.c" 1
 1637 003e 09BC     		LDMIA    SP!, {R0, R3}
 1638              	@ 0 "" 2
 416:SYS/task_manager/task_manager.c ****     __ASM("LDR      R0, [R1]");
 1639              		.loc 1 416 0
 1640              	@ 416 "SYS/task_manager/task_manager.c" 1
 1641 0040 1968     		LDR      R1, [R3]
 1642              	@ 0 "" 2
 417:SYS/task_manager/task_manager.c **** 
 1643              		.loc 1 417 0
 1644              	@ 417 "SYS/task_manager/task_manager.c" 1
 1645 0042 0868     		LDR      R0, [R1]
 1646              	@ 0 "" 2
 419:SYS/task_manager/task_manager.c **** 
 1647              		.loc 1 419 0
 1648              	@ 419 "SYS/task_manager/task_manager.c" 1
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 77


 1649 0044 B0E8F04F 		LDMIA    R0!, {R4-R11, R14}
 1650              	@ 0 "" 2
 422:SYS/task_manager/task_manager.c ****     __ASM("IT       EQ");
 1651              		.loc 1 422 0
 1652              	@ 422 "SYS/task_manager/task_manager.c" 1
 1653 0048 1EF0100F 		TST      R14, #0x10
 1654              	@ 0 "" 2
 423:SYS/task_manager/task_manager.c ****     __ASM("VLDMIAEQ R0!, {s16-s31}");
 1655              		.loc 1 423 0
 1656              	@ 423 "SYS/task_manager/task_manager.c" 1
 1657 004c 08BF     		IT       EQ
 1658              	@ 0 "" 2
 424:SYS/task_manager/task_manager.c ****     /******************************  FPU SECTION  *********************************/
 1659              		.loc 1 424 0
 1660              	@ 424 "SYS/task_manager/task_manager.c" 1
 1661 004e B0EC108A 		VLDMIAEQ R0!, {s16-s31}
 1662              	@ 0 "" 2
 427:SYS/task_manager/task_manager.c ****     __ASM("ISB");
 1663              		.loc 1 427 0
 1664              	@ 427 "SYS/task_manager/task_manager.c" 1
 1665 0052 80F30988 		MSR      PSP,R0
 1666              	@ 0 "" 2
 428:SYS/task_manager/task_manager.c ****     //__ASM("MOV      R0, #240");
 1667              		.loc 1 428 0
 1668              	@ 428 "SYS/task_manager/task_manager.c" 1
 1669 0056 BFF36F8F 		ISB
 1670              	@ 0 "" 2
 431:SYS/task_manager/task_manager.c **** 
 1671              		.loc 1 431 0
 1672              	@ 431 "SYS/task_manager/task_manager.c" 1
 1673 005a 7047     		BX       R14
 1674              	@ 0 "" 2
 433:SYS/task_manager/task_manager.c ****     __ASM(".ALIGN 4");
 1675              		.loc 1 433 0
 1676              	@ 433 "SYS/task_manager/task_manager.c" 1
 1677 005c 00000000 		CurrentTCBConst_Tmp: .word CurTsk_TCB
 1678              	@ 0 "" 2
 434:SYS/task_manager/task_manager.c **** }
 1679              		.loc 1 434 0
 1680              	@ 434 "SYS/task_manager/task_manager.c" 1
 1681              		.ALIGN 4
 1682              	@ 0 "" 2
 435:SYS/task_manager/task_manager.c **** 
 1683              		.loc 1 435 0
 1684              		.thumb
 1685              		.syntax unified
 1686              		.cfi_endproc
 1687              	.LFE141:
 1689              		.section	.text.Task_Get_HighestRank_RdyTask,"ax",%progbits
 1690              		.align	2
 1691              		.global	Task_Get_HighestRank_RdyTask
 1692              		.thumb
 1693              		.thumb_func
 1695              	Task_Get_HighestRank_RdyTask:
 1696              	.LFB147:
 522:SYS/task_manager/task_manager.c ****     uint8_t grp_id = 0;
 1697              		.loc 1 522 0
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 78


 1698              		.cfi_startproc
 1699              		@ args = 0, pretend = 0, frame = 0
 1700              		@ frame_needed = 0, uses_anonymous_args = 0
 1701              		@ link register save eliminated.
 1702              	.LVL115:
 526:SYS/task_manager/task_manager.c ****     {
 1703              		.loc 1 526 0
 1704 0000 144B     		ldr	r3, .L113
 1705 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1706 0004 13F0FF0F 		tst	r3, #255
 1707 0008 1FD0     		beq	.L109
 529:SYS/task_manager/task_manager.c ****         //find task in group
 1708              		.loc 1 529 0
 1709 000a 124B     		ldr	r3, .L113
 1710 000c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1711 000e D2B2     		uxtb	r2, r2
 1712 0010 1149     		ldr	r1, .L113+4
 1713 0012 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 1714              	.LVL116:
 531:SYS/task_manager/task_manager.c ****     }
 1715              		.loc 1 531 0
 1716 0014 1344     		add	r3, r3, r2
 1717 0016 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1718 0018 DBB2     		uxtb	r3, r3
 1719 001a CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 1720              	.LVL117:
 536:SYS/task_manager/task_manager.c ****     {
 1721              		.loc 1 536 0
 1722 001c 03EBC200 		add	r0, r3, r2, lsl #3
 1723 0020 0E49     		ldr	r1, .L113+8
 1724 0022 51F82000 		ldr	r0, [r1, r0, lsl #2]
 1725 0026 98B9     		cbnz	r0, .L112
 522:SYS/task_manager/task_manager.c ****     uint8_t grp_id = 0;
 1726              		.loc 1 522 0
 1727 0028 70B4     		push	{r4, r5, r6}
 1728              	.LCFI30:
 1729              		.cfi_def_cfa_offset 12
 1730              		.cfi_offset 4, -12
 1731              		.cfi_offset 5, -8
 1732              		.cfi_offset 6, -4
 542:SYS/task_manager/task_manager.c ****         TskHdl_RdyMap.TskInGrp[grp_id].Flg &= ~(1 << tsk_id);
 1733              		.loc 1 542 0
 1734 002a 0A4C     		ldr	r4, .L113
 1735 002c 2578     		ldrb	r5, [r4]	@ zero_extendqisi2
 1736 002e 0121     		movs	r1, #1
 1737 0030 01FA02F6 		lsl	r6, r1, r2
 1738 0034 25EA0605 		bic	r5, r5, r6
 1739 0038 2570     		strb	r5, [r4]
 543:SYS/task_manager/task_manager.c ****         return NULL;
 1740              		.loc 1 543 0
 1741 003a 2244     		add	r2, r2, r4
 1742 003c 5478     		ldrb	r4, [r2, #1]	@ zero_extendqisi2
 1743 003e 01FA03F3 		lsl	r3, r1, r3
 1744 0042 24EA0303 		bic	r3, r4, r3
 1745 0046 5370     		strb	r3, [r2, #1]
 544:SYS/task_manager/task_manager.c ****     }
 1746              		.loc 1 544 0
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 79


 1747 0048 01E0     		b	.L108
 1748              	.LVL118:
 1749              	.L109:
 1750              	.LCFI31:
 1751              		.cfi_def_cfa_offset 0
 1752              		.cfi_restore 4
 1753              		.cfi_restore 5
 1754              		.cfi_restore 6
 534:SYS/task_manager/task_manager.c **** 
 1755              		.loc 1 534 0
 1756 004a 0020     		movs	r0, #0
 1757 004c 7047     		bx	lr
 1758              	.LVL119:
 1759              	.L108:
 1760              	.LCFI32:
 1761              		.cfi_def_cfa_offset 12
 1762              		.cfi_offset 4, -12
 1763              		.cfi_offset 5, -8
 1764              		.cfi_offset 6, -4
 546:SYS/task_manager/task_manager.c **** 
 1765              		.loc 1 546 0
 1766 004e 70BC     		pop	{r4, r5, r6}
 1767              	.LCFI33:
 1768              		.cfi_restore 6
 1769              		.cfi_restore 5
 1770              		.cfi_restore 4
 1771              		.cfi_def_cfa_offset 0
 1772              	.L112:
 1773 0050 7047     		bx	lr
 1774              	.L114:
 1775 0052 00BF     		.align	2
 1776              	.L113:
 1777 0054 00000000 		.word	.LANCHOR0
 1778 0058 00000000 		.word	.LANCHOR13
 1779 005c 00000000 		.word	Task_Ptr
 1780              		.cfi_endproc
 1781              	.LFE147:
 1783              		.section	.text.Task_SetNextTask_Ptr,"ax",%progbits
 1784              		.align	2
 1785              		.global	Task_SetNextTask_Ptr
 1786              		.thumb
 1787              		.thumb_func
 1789              	Task_SetNextTask_Ptr:
 1790              	.LFB148:
 549:SYS/task_manager/task_manager.c ****     if (nxt != NULL)
 1791              		.loc 1 549 0
 1792              		.cfi_startproc
 1793              		@ args = 0, pretend = 0, frame = 0
 1794              		@ frame_needed = 0, uses_anonymous_args = 0
 1795              		@ link register save eliminated.
 1796              	.LVL120:
 550:SYS/task_manager/task_manager.c ****     {
 1797              		.loc 1 550 0
 1798 0000 38B1     		cbz	r0, .L115
 552:SYS/task_manager/task_manager.c ****         NxtTsk_TCB.Top_Stk_Ptr = &NxtRunTsk_Ptr->TCB.Top_Stk_Ptr;
 1799              		.loc 1 552 0
 1800 0002 044A     		ldr	r2, .L117
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 80


 1801 0004 1060     		str	r0, [r2]
 553:SYS/task_manager/task_manager.c ****         NxtTsk_TCB.Stack = NxtRunTsk_Ptr->TCB.Stack;
 1802              		.loc 1 553 0
 1803 0006 00F15001 		add	r1, r0, #80
 1804 000a 034A     		ldr	r2, .L117+4
 1805 000c 1160     		str	r1, [r2]
 554:SYS/task_manager/task_manager.c ****     }
 1806              		.loc 1 554 0
 1807 000e 436D     		ldr	r3, [r0, #84]
 1808 0010 5360     		str	r3, [r2, #4]
 1809              	.L115:
 1810 0012 7047     		bx	lr
 1811              	.L118:
 1812              		.align	2
 1813              	.L117:
 1814 0014 00000000 		.word	.LANCHOR10
 1815 0018 00000000 		.word	NxtTsk_TCB
 1816              		.cfi_endproc
 1817              	.LFE148:
 1819              		.section	.text.Task_TriggerPendSV,"ax",%progbits
 1820              		.align	2
 1821              		.global	Task_TriggerPendSV
 1822              		.thumb
 1823              		.thumb_func
 1825              	Task_TriggerPendSV:
 1826              	.LFB150:
 584:SYS/task_manager/task_manager.c ****     __ASM(".equ NVIC_INT_CTRL, 0xE000ED04");
 1827              		.loc 1 584 0
 1828              		.cfi_startproc
 1829              		@ Naked Function: prologue and epilogue provided by programmer.
 1830              		@ args = 0, pretend = 0, frame = 0
 1831              		@ frame_needed = 0, uses_anonymous_args = 0
 585:SYS/task_manager/task_manager.c ****     __ASM(".equ NVIC_PENDSVSET, 0x10000000");
 1832              		.loc 1 585 0
 1833              		.syntax unified
 1834              	@ 585 "SYS/task_manager/task_manager.c" 1
 1835              		.equ NVIC_INT_CTRL, 0xE000ED04
 1836              	@ 0 "" 2
 586:SYS/task_manager/task_manager.c **** 
 1837              		.loc 1 586 0
 1838              	@ 586 "SYS/task_manager/task_manager.c" 1
 1839              		.equ NVIC_PENDSVSET, 0x10000000
 1840              	@ 0 "" 2
 588:SYS/task_manager/task_manager.c ****     __ASM("LDR      R1, =NVIC_PENDSVSET");
 1841              		.loc 1 588 0
 1842              	@ 588 "SYS/task_manager/task_manager.c" 1
 1843 0000 0248     		LDR      R0, =NVIC_INT_CTRL
 1844              	@ 0 "" 2
 589:SYS/task_manager/task_manager.c ****     __ASM("STR      R1, [R0]");
 1845              		.loc 1 589 0
 1846              	@ 589 "SYS/task_manager/task_manager.c" 1
 1847 0002 4FF08051 		LDR      R1, =NVIC_PENDSVSET
 1848              	@ 0 "" 2
 590:SYS/task_manager/task_manager.c ****     __ASM("BX       LR");
 1849              		.loc 1 590 0
 1850              	@ 590 "SYS/task_manager/task_manager.c" 1
 1851 0006 0160     		STR      R1, [R0]
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 81


 1852              	@ 0 "" 2
 591:SYS/task_manager/task_manager.c **** }
 1853              		.loc 1 591 0
 1854              	@ 591 "SYS/task_manager/task_manager.c" 1
 1855 0008 7047     		BX       LR
 1856              	@ 0 "" 2
 592:SYS/task_manager/task_manager.c **** 
 1857              		.loc 1 592 0
 1858              		.thumb
 1859              		.syntax unified
 1860              		.cfi_endproc
 1861              	.LFE150:
 1863 000a 0000     		.section	.text.Task_Scheduler,"ax",%progbits
 1864              		.align	2
 1865              		.global	Task_Scheduler
 1866              		.thumb
 1867              		.thumb_func
 1869              	Task_Scheduler:
 1870              	.LFB166:
 942:SYS/task_manager/task_manager.c **** 
 943:SYS/task_manager/task_manager.c **** void Task_Scheduler(void)
 944:SYS/task_manager/task_manager.c **** {
 1871              		.loc 1 944 0
 1872              		.cfi_startproc
 1873              		@ args = 0, pretend = 0, frame = 0
 1874              		@ frame_needed = 0, uses_anonymous_args = 0
 945:SYS/task_manager/task_manager.c ****     static uint8_t grp = 0;
 946:SYS/task_manager/task_manager.c ****     static uint8_t tsk = 0;
 947:SYS/task_manager/task_manager.c **** 
 948:SYS/task_manager/task_manager.c ****     if (TskSys_state != TaskSys_Start)
 1875              		.loc 1 948 0
 1876 0000 504B     		ldr	r3, .L135
 1877 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1878 0004 DBB2     		uxtb	r3, r3
 1879 0006 022B     		cmp	r3, #2
 1880 0008 40F09A80 		bne	.L134
 944:SYS/task_manager/task_manager.c ****     static uint8_t grp = 0;
 1881              		.loc 1 944 0
 1882 000c 70B5     		push	{r4, r5, r6, lr}
 1883              	.LCFI34:
 1884              		.cfi_def_cfa_offset 16
 1885              		.cfi_offset 4, -16
 1886              		.cfi_offset 5, -12
 1887              		.cfi_offset 6, -8
 1888              		.cfi_offset 14, -4
 949:SYS/task_manager/task_manager.c ****         return;
 950:SYS/task_manager/task_manager.c **** 
 951:SYS/task_manager/task_manager.c ****     if (traverse_start)
 1889              		.loc 1 951 0
 1890 000e 4E4B     		ldr	r3, .L135+4
 1891 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1892 0012 2BB1     		cbz	r3, .L122
 952:SYS/task_manager/task_manager.c ****         List_traverse(&TskCrt_RegList.list, Task_CrtList_TraversePoll_callback, NULL, sub_callback)
 1893              		.loc 1 952 0
 1894 0014 0123     		movs	r3, #1
 1895 0016 0022     		movs	r2, #0
 1896 0018 4C49     		ldr	r1, .L135+8
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 82


 1897 001a 4D48     		ldr	r0, .L135+12
 1898 001c FFF7FEFF 		bl	List_traverse
 1899              	.LVL121:
 1900              	.L122:
 953:SYS/task_manager/task_manager.c **** 
 954:SYS/task_manager/task_manager.c ****     NxtRunTsk_Ptr = Task_Get_HighestRank_RdyTask();
 1901              		.loc 1 954 0
 1902 0020 FFF7FEFF 		bl	Task_Get_HighestRank_RdyTask
 1903              	.LVL122:
 1904 0024 4B4B     		ldr	r3, .L135+16
 1905 0026 1860     		str	r0, [r3]
 955:SYS/task_manager/task_manager.c **** 
 956:SYS/task_manager/task_manager.c **** #if (TASK_SCHEDULER_TYPE == PREEMPTIVE_SCHDULER)
 957:SYS/task_manager/task_manager.c **** 
 958:SYS/task_manager/task_manager.c ****     PndHstTsk_Ptr = Task_Get_HighestRank_PndTask();
 1906              		.loc 1 958 0
 1907 0028 FFF7FEFF 		bl	Task_Get_HighestRank_PndTask
 1908              	.LVL123:
 1909 002c 0646     		mov	r6, r0
 1910 002e 4A4B     		ldr	r3, .L135+20
 1911 0030 1860     		str	r0, [r3]
 959:SYS/task_manager/task_manager.c **** 
 960:SYS/task_manager/task_manager.c ****     if (CurRunTsk_Ptr == NULL)
 1912              		.loc 1 960 0
 1913 0032 4A4B     		ldr	r3, .L135+24
 1914 0034 1D68     		ldr	r5, [r3]
 1915 0036 002D     		cmp	r5, #0
 1916 0038 34D1     		bne	.L123
 961:SYS/task_manager/task_manager.c ****     {
 962:SYS/task_manager/task_manager.c ****         if (PndHstTsk_Ptr == NULL)
 1917              		.loc 1 962 0
 1918 003a 70B9     		cbnz	r0, .L124
 963:SYS/task_manager/task_manager.c ****         {
 964:SYS/task_manager/task_manager.c ****             //Current Run task Pointer is Null also no task In pending mode
 965:SYS/task_manager/task_manager.c ****             //set CurRunTsk_Ptr to NxtRunTsk_Ptr
 966:SYS/task_manager/task_manager.c ****             if (NxtRunTsk_Ptr != NULL)
 1919              		.loc 1 966 0
 1920 003c 454B     		ldr	r3, .L135+16
 1921 003e 1B68     		ldr	r3, [r3]
 1922 0040 43B1     		cbz	r3, .L125
 967:SYS/task_manager/task_manager.c ****             {
 968:SYS/task_manager/task_manager.c ****                 NxtTsk_TCB.Top_Stk_Ptr = &NxtRunTsk_Ptr->TCB.Top_Stk_Ptr;
 1923              		.loc 1 968 0
 1924 0042 03F15001 		add	r1, r3, #80
 1925 0046 464A     		ldr	r2, .L135+28
 1926 0048 1160     		str	r1, [r2]
 969:SYS/task_manager/task_manager.c ****                 NxtTsk_TCB.Stack = NxtRunTsk_Ptr->TCB.Stack;
 1927              		.loc 1 969 0
 1928 004a 5B6D     		ldr	r3, [r3, #84]
 1929 004c 5360     		str	r3, [r2, #4]
 970:SYS/task_manager/task_manager.c **** 
 971:SYS/task_manager/task_manager.c ****                 Task_TriggerPendSV();
 1930              		.loc 1 971 0
 1931 004e FFF7FEFF 		bl	Task_TriggerPendSV
 1932              	.LVL124:
 972:SYS/task_manager/task_manager.c ****                 return;
 1933              		.loc 1 972 0
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 83


 1934 0052 70BD     		pop	{r4, r5, r6, pc}
 1935              	.L125:
 973:SYS/task_manager/task_manager.c ****             }
 974:SYS/task_manager/task_manager.c ****             else
 975:SYS/task_manager/task_manager.c ****             {
 976:SYS/task_manager/task_manager.c ****                 //doing idle function
 977:SYS/task_manager/task_manager.c ****                 Task_Idle();
 1936              		.loc 1 977 0
 1937 0054 FFF7FEFF 		bl	Task_Idle
 1938              	.LVL125:
 1939 0058 70BD     		pop	{r4, r5, r6, pc}
 1940              	.L124:
 978:SYS/task_manager/task_manager.c ****             }
 979:SYS/task_manager/task_manager.c ****         }
 980:SYS/task_manager/task_manager.c ****         else
 981:SYS/task_manager/task_manager.c ****         {
 982:SYS/task_manager/task_manager.c ****             if (NxtRunTsk_Ptr != NULL)
 1941              		.loc 1 982 0
 1942 005a 3E4B     		ldr	r3, .L135+16
 1943 005c 1C68     		ldr	r4, [r3]
 1944 005e A4B1     		cbz	r4, .L126
 983:SYS/task_manager/task_manager.c ****             {
 984:SYS/task_manager/task_manager.c ****                 //if has NxtRunTsk_Ptr is not NULL also have task in pending state
 985:SYS/task_manager/task_manager.c ****                 //then get the highest priority task in pend list
 986:SYS/task_manager/task_manager.c ****                 //compare with NxtRunTsk_Ptr
 987:SYS/task_manager/task_manager.c ****                 if (((NxtRunTsk_Ptr != PndHstTsk_Ptr) &&
 1945              		.loc 1 987 0
 1946 0060 A042     		cmp	r0, r4
 1947 0062 05D0     		beq	.L127
 988:SYS/task_manager/task_manager.c ****                      (Task_PriorityCompare(NxtRunTsk_Ptr, PndHstTsk_Ptr) == PndHstTsk_Ptr)) ||
 1948              		.loc 1 988 0 discriminator 1
 1949 0064 0146     		mov	r1, r0
 1950 0066 2046     		mov	r0, r4
 1951 0068 FFF7FEFF 		bl	Task_PriorityCompare
 1952              	.LVL126:
 987:SYS/task_manager/task_manager.c ****                      (Task_PriorityCompare(NxtRunTsk_Ptr, PndHstTsk_Ptr) == PndHstTsk_Ptr)) ||
 1953              		.loc 1 987 0 discriminator 1
 1954 006c 8642     		cmp	r6, r0
 1955 006e 01D0     		beq	.L128
 1956              	.L127:
 1957              		.loc 1 988 0
 1958 0070 A642     		cmp	r6, r4
 1959 0072 0CD1     		bne	.L129
 1960              	.L128:
 989:SYS/task_manager/task_manager.c ****                     (NxtRunTsk_Ptr == PndHstTsk_Ptr))
 990:SYS/task_manager/task_manager.c ****                 {
 991:SYS/task_manager/task_manager.c ****                     Task_ClearPending(PndHstTsk_Ptr);
 1961              		.loc 1 991 0
 1962 0074 3046     		mov	r0, r6
 1963 0076 FFF7FEFF 		bl	Task_ClearPending
 1964              	.LVL127:
 992:SYS/task_manager/task_manager.c ****                     PndHstTsk_Ptr->Exec_status.State = Task_Stop;
 1965              		.loc 1 992 0
 1966 007a 374B     		ldr	r3, .L135+20
 1967 007c 1B68     		ldr	r3, [r3]
 1968 007e 0222     		movs	r2, #2
 1969 0080 83F84820 		strb	r2, [r3, #72]
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 84


 993:SYS/task_manager/task_manager.c ****                     NxtRunTsk_Ptr = PndHstTsk_Ptr;
 1970              		.loc 1 993 0
 1971 0084 334A     		ldr	r2, .L135+16
 1972 0086 1360     		str	r3, [r2]
 1973 0088 01E0     		b	.L129
 1974              	.L126:
 994:SYS/task_manager/task_manager.c ****                 }
 995:SYS/task_manager/task_manager.c ****             }
 996:SYS/task_manager/task_manager.c ****             else
 997:SYS/task_manager/task_manager.c ****             {
 998:SYS/task_manager/task_manager.c ****                 //if NxtRunTsk_Ptr is NULL
 999:SYS/task_manager/task_manager.c ****                 //then set NxtRunTsk_Ptr PndHstTsk_Ptr
1000:SYS/task_manager/task_manager.c ****                 NxtRunTsk_Ptr = PndHstTsk_Ptr;
 1975              		.loc 1 1000 0
 1976 008a 324B     		ldr	r3, .L135+16
 1977 008c 1860     		str	r0, [r3]
 1978              	.L129:
1001:SYS/task_manager/task_manager.c ****             }
1002:SYS/task_manager/task_manager.c **** 
1003:SYS/task_manager/task_manager.c ****             NxtTsk_TCB.Top_Stk_Ptr = &NxtRunTsk_Ptr->TCB.Top_Stk_Ptr;
 1979              		.loc 1 1003 0
 1980 008e 314B     		ldr	r3, .L135+16
 1981 0090 1A68     		ldr	r2, [r3]
 1982 0092 02F15001 		add	r1, r2, #80
 1983 0096 324B     		ldr	r3, .L135+28
 1984 0098 1960     		str	r1, [r3]
1004:SYS/task_manager/task_manager.c ****             NxtTsk_TCB.Stack = NxtRunTsk_Ptr->TCB.Stack;
 1985              		.loc 1 1004 0
 1986 009a 526D     		ldr	r2, [r2, #84]
 1987 009c 5A60     		str	r2, [r3, #4]
1005:SYS/task_manager/task_manager.c **** 
1006:SYS/task_manager/task_manager.c ****             Task_TriggerPendSV();
 1988              		.loc 1 1006 0
 1989 009e FFF7FEFF 		bl	Task_TriggerPendSV
 1990              	.LVL128:
1007:SYS/task_manager/task_manager.c ****             return;
 1991              		.loc 1 1007 0
 1992 00a2 70BD     		pop	{r4, r5, r6, pc}
 1993              	.L123:
1008:SYS/task_manager/task_manager.c ****         }
1009:SYS/task_manager/task_manager.c ****     }
1010:SYS/task_manager/task_manager.c ****     else
1011:SYS/task_manager/task_manager.c ****     {
1012:SYS/task_manager/task_manager.c ****         if (CurRunTsk_Ptr != NxtRunTsk_Ptr)
 1994              		.loc 1 1012 0
 1995 00a4 2B4B     		ldr	r3, .L135+16
 1996 00a6 1C68     		ldr	r4, [r3]
 1997 00a8 A542     		cmp	r5, r4
 1998 00aa 2DD0     		beq	.L130
1013:SYS/task_manager/task_manager.c ****         {
1014:SYS/task_manager/task_manager.c ****             if ((NxtRunTsk_Ptr != NULL) && (Task_PriorityCompare(CurRunTsk_Ptr, NxtRunTsk_Ptr) == N
 1999              		.loc 1 1014 0
 2000 00ac 002C     		cmp	r4, #0
 2001 00ae 46D0     		beq	.L120
 2002              		.loc 1 1014 0 is_stmt 0 discriminator 1
 2003 00b0 2146     		mov	r1, r4
 2004 00b2 2846     		mov	r0, r5
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 85


 2005 00b4 FFF7FEFF 		bl	Task_PriorityCompare
 2006              	.LVL129:
 2007 00b8 8442     		cmp	r4, r0
 2008 00ba 40D1     		bne	.L120
1015:SYS/task_manager/task_manager.c ****             {
1016:SYS/task_manager/task_manager.c ****                 //if NxtRunTsk_Ptr group priority is higher then CurRunTsk_Ptr also PndHstTsk_Ptr
1017:SYS/task_manager/task_manager.c ****                 //set current run task as pending state first
1018:SYS/task_manager/task_manager.c ****                 Task_ClearReady(CurRunTsk_Ptr);
 2009              		.loc 1 1018 0 is_stmt 1
 2010 00bc 2846     		mov	r0, r5
 2011 00be FFF7FEFF 		bl	Task_ClearReady
 2012              	.LVL130:
1019:SYS/task_manager/task_manager.c ****                 Task_SetPending(CurRunTsk_Ptr);
 2013              		.loc 1 1019 0
 2014 00c2 264B     		ldr	r3, .L135+24
 2015 00c4 1868     		ldr	r0, [r3]
 2016 00c6 FFF7FEFF 		bl	Task_SetPending
 2017              	.LVL131:
1020:SYS/task_manager/task_manager.c **** 
1021:SYS/task_manager/task_manager.c ****                 //get the highset priority task in pending list
1022:SYS/task_manager/task_manager.c ****                 //if PndHstTsk_Ptr is not NULL
1023:SYS/task_manager/task_manager.c ****                 //then compare the priority between the NxtRunTsk_Ptr and PndHstTsk_Ptr
1024:SYS/task_manager/task_manager.c ****                 if (PndHstTsk_Ptr != NULL)
 2018              		.loc 1 1024 0
 2019 00ca 234B     		ldr	r3, .L135+20
 2020 00cc 1C68     		ldr	r4, [r3]
 2021 00ce 84B1     		cbz	r4, .L131
1025:SYS/task_manager/task_manager.c ****                 {
1026:SYS/task_manager/task_manager.c ****                     if (Task_PriorityCompare(PndHstTsk_Ptr, NxtRunTsk_Ptr) == PndHstTsk_Ptr)
 2022              		.loc 1 1026 0
 2023 00d0 204B     		ldr	r3, .L135+16
 2024 00d2 1968     		ldr	r1, [r3]
 2025 00d4 2046     		mov	r0, r4
 2026 00d6 FFF7FEFF 		bl	Task_PriorityCompare
 2027              	.LVL132:
 2028 00da 8442     		cmp	r4, r0
 2029 00dc 09D1     		bne	.L131
1027:SYS/task_manager/task_manager.c ****                     {
1028:SYS/task_manager/task_manager.c ****                         Task_ClearPending(PndHstTsk_Ptr);
 2030              		.loc 1 1028 0
 2031 00de 2046     		mov	r0, r4
 2032 00e0 FFF7FEFF 		bl	Task_ClearPending
 2033              	.LVL133:
1029:SYS/task_manager/task_manager.c ****                         PndHstTsk_Ptr->Exec_status.State = Task_Stop;
 2034              		.loc 1 1029 0
 2035 00e4 1C4B     		ldr	r3, .L135+20
 2036 00e6 1B68     		ldr	r3, [r3]
 2037 00e8 0222     		movs	r2, #2
 2038 00ea 83F84820 		strb	r2, [r3, #72]
1030:SYS/task_manager/task_manager.c ****                         NxtRunTsk_Ptr = PndHstTsk_Ptr;
 2039              		.loc 1 1030 0
 2040 00ee 194A     		ldr	r2, .L135+16
 2041 00f0 1360     		str	r3, [r2]
 2042              	.L131:
1031:SYS/task_manager/task_manager.c ****                     }
1032:SYS/task_manager/task_manager.c ****                 }
1033:SYS/task_manager/task_manager.c **** 
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 86


1034:SYS/task_manager/task_manager.c ****                 NxtTsk_TCB.Top_Stk_Ptr = &NxtRunTsk_Ptr->TCB.Top_Stk_Ptr;
 2043              		.loc 1 1034 0
 2044 00f2 184B     		ldr	r3, .L135+16
 2045 00f4 1A68     		ldr	r2, [r3]
 2046 00f6 02F15001 		add	r1, r2, #80
 2047 00fa 194B     		ldr	r3, .L135+28
 2048 00fc 1960     		str	r1, [r3]
1035:SYS/task_manager/task_manager.c ****                 NxtTsk_TCB.Stack = NxtRunTsk_Ptr->TCB.Stack;
 2049              		.loc 1 1035 0
 2050 00fe 526D     		ldr	r2, [r2, #84]
 2051 0100 5A60     		str	r2, [r3, #4]
1036:SYS/task_manager/task_manager.c **** 
1037:SYS/task_manager/task_manager.c ****                 Task_TriggerPendSV();
 2052              		.loc 1 1037 0
 2053 0102 FFF7FEFF 		bl	Task_TriggerPendSV
 2054              	.LVL134:
1038:SYS/task_manager/task_manager.c ****                 return;
 2055              		.loc 1 1038 0
 2056 0106 70BD     		pop	{r4, r5, r6, pc}
 2057              	.L130:
1039:SYS/task_manager/task_manager.c ****             }
1040:SYS/task_manager/task_manager.c ****         }
1041:SYS/task_manager/task_manager.c ****         else
1042:SYS/task_manager/task_manager.c ****         {
1043:SYS/task_manager/task_manager.c ****             //compare with the highest priority pending task
1044:SYS/task_manager/task_manager.c ****             if ((PndHstTsk_Ptr != NULL) && (Task_PriorityCompare(CurRunTsk_Ptr, PndHstTsk_Ptr) == P
 2058              		.loc 1 1044 0
 2059 0108 78B1     		cbz	r0, .L132
 2060              		.loc 1 1044 0 is_stmt 0 discriminator 1
 2061 010a 0146     		mov	r1, r0
 2062 010c 2846     		mov	r0, r5
 2063 010e FFF7FEFF 		bl	Task_PriorityCompare
 2064              	.LVL135:
 2065 0112 8642     		cmp	r6, r0
 2066 0114 09D1     		bne	.L132
1045:SYS/task_manager/task_manager.c ****             {
1046:SYS/task_manager/task_manager.c ****                 //if PndHstTsk_Ptr group priority is higher then CurRunTsk_Ptr
1047:SYS/task_manager/task_manager.c ****                 //set current run task as pending state first
1048:SYS/task_manager/task_manager.c ****                 Task_SetPending(CurRunTsk_Ptr);
 2067              		.loc 1 1048 0 is_stmt 1
 2068 0116 2846     		mov	r0, r5
 2069 0118 FFF7FEFF 		bl	Task_SetPending
 2070              	.LVL136:
1049:SYS/task_manager/task_manager.c ****                 Task_SetReady(PndHstTsk_Ptr);
 2071              		.loc 1 1049 0
 2072 011c 0E4C     		ldr	r4, .L135+20
 2073 011e 2068     		ldr	r0, [r4]
 2074 0120 FFF7FEFF 		bl	Task_SetReady
 2075              	.LVL137:
1050:SYS/task_manager/task_manager.c ****                 NxtRunTsk_Ptr = Task_Stop;
1051:SYS/task_manager/task_manager.c **** 
1052:SYS/task_manager/task_manager.c ****                 NxtRunTsk_Ptr = PndHstTsk_Ptr;
 2076              		.loc 1 1052 0
 2077 0124 2268     		ldr	r2, [r4]
 2078 0126 0B4B     		ldr	r3, .L135+16
 2079 0128 1A60     		str	r2, [r3]
 2080              	.L132:
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 87


1053:SYS/task_manager/task_manager.c ****             }
1054:SYS/task_manager/task_manager.c **** 
1055:SYS/task_manager/task_manager.c ****             NxtTsk_TCB.Top_Stk_Ptr = &NxtRunTsk_Ptr->TCB.Top_Stk_Ptr;
 2081              		.loc 1 1055 0
 2082 012a 0A4B     		ldr	r3, .L135+16
 2083 012c 1A68     		ldr	r2, [r3]
 2084 012e 02F15001 		add	r1, r2, #80
 2085 0132 0B4B     		ldr	r3, .L135+28
 2086 0134 1960     		str	r1, [r3]
1056:SYS/task_manager/task_manager.c ****             NxtTsk_TCB.Stack = NxtRunTsk_Ptr->TCB.Stack;
 2087              		.loc 1 1056 0
 2088 0136 526D     		ldr	r2, [r2, #84]
 2089 0138 5A60     		str	r2, [r3, #4]
1057:SYS/task_manager/task_manager.c **** 
1058:SYS/task_manager/task_manager.c ****             Task_TriggerPendSV();
 2090              		.loc 1 1058 0
 2091 013a FFF7FEFF 		bl	Task_TriggerPendSV
 2092              	.LVL138:
 2093              	.L120:
 2094 013e 70BD     		pop	{r4, r5, r6, pc}
 2095              	.L134:
 2096              	.LCFI35:
 2097              		.cfi_def_cfa_offset 0
 2098              		.cfi_restore 4
 2099              		.cfi_restore 5
 2100              		.cfi_restore 6
 2101              		.cfi_restore 14
 2102 0140 7047     		bx	lr
 2103              	.L136:
 2104 0142 00BF     		.align	2
 2105              	.L135:
 2106 0144 00000000 		.word	.LANCHOR6
 2107 0148 00000000 		.word	.LANCHOR12
 2108 014c 00000000 		.word	Task_CrtList_TraversePoll_callback
 2109 0150 04000000 		.word	.LANCHOR4+4
 2110 0154 00000000 		.word	.LANCHOR10
 2111 0158 00000000 		.word	.LANCHOR14
 2112 015c 00000000 		.word	.LANCHOR5
 2113 0160 00000000 		.word	NxtTsk_TCB
 2114              		.cfi_endproc
 2115              	.LFE166:
 2117              		.section	.text.Task_Force_TriggerPendSV,"ax",%progbits
 2118              		.align	2
 2119              		.global	Task_Force_TriggerPendSV
 2120              		.thumb
 2121              		.thumb_func
 2123              	Task_Force_TriggerPendSV:
 2124              	.LFB151:
 595:SYS/task_manager/task_manager.c ****     /* Barriers are normally not required but do ensure the code is completely \
 2125              		.loc 1 595 0
 2126              		.cfi_startproc
 2127              		@ args = 0, pretend = 0, frame = 0
 2128              		@ frame_needed = 0, uses_anonymous_args = 0
 2129 0000 08B5     		push	{r3, lr}
 2130              	.LCFI36:
 2131              		.cfi_def_cfa_offset 8
 2132              		.cfi_offset 3, -8
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 88


 2133              		.cfi_offset 14, -4
 598:SYS/task_manager/task_manager.c ****                        : "memory");
 2134              		.loc 1 598 0
 2135              		.syntax unified
 2136              	@ 598 "SYS/task_manager/task_manager.c" 1
 2137 0002 BFF34F8F 		dsb
 2138              	@ 0 "" 2
 600:SYS/task_manager/task_manager.c ****     Task_TriggerPendSV();
 2139              		.loc 1 600 0
 2140              	@ 600 "SYS/task_manager/task_manager.c" 1
 2141 0006 BFF36F8F 		isb
 2142              	@ 0 "" 2
 601:SYS/task_manager/task_manager.c **** }
 2143              		.loc 1 601 0
 2144              		.thumb
 2145              		.syntax unified
 2146 000a FFF7FEFF 		bl	Task_TriggerPendSV
 2147              	.LVL139:
 2148 000e 08BD     		pop	{r3, pc}
 2149              		.cfi_endproc
 2150              	.LFE151:
 2152              		.section	.text.Task_Get_TaskNum,"ax",%progbits
 2153              		.align	2
 2154              		.global	Task_Get_TaskNum
 2155              		.thumb
 2156              		.thumb_func
 2158              	Task_Get_TaskNum:
 2159              	.LFB152:
 605:SYS/task_manager/task_manager.c ****     return TskCrt_RegList.num;
 2160              		.loc 1 605 0
 2161              		.cfi_startproc
 2162              		@ args = 0, pretend = 0, frame = 0
 2163              		@ frame_needed = 0, uses_anonymous_args = 0
 2164              		@ link register save eliminated.
 607:SYS/task_manager/task_manager.c **** 
 2165              		.loc 1 607 0
 2166 0000 014B     		ldr	r3, .L140
 2167 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 2168 0004 7047     		bx	lr
 2169              	.L141:
 2170 0006 00BF     		.align	2
 2171              	.L140:
 2172 0008 00000000 		.word	.LANCHOR4
 2173              		.cfi_endproc
 2174              	.LFE152:
 2176              		.global	__aeabi_ui2d
 2177              		.global	__aeabi_ddiv
 2178              		.global	__aeabi_d2uiz
 2179              		.section	.text.Task_Create,"ax",%progbits
 2180              		.align	2
 2181              		.global	Task_Create
 2182              		.thumb
 2183              		.thumb_func
 2185              	Task_Create:
 2186              	.LFB154:
 654:SYS/task_manager/task_manager.c ****     Task_Handler handle;
 2187              		.loc 1 654 0
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 89


 2188              		.cfi_startproc
 2189              		@ args = 8, pretend = 0, frame = 0
 2190              		@ frame_needed = 0, uses_anonymous_args = 0
 2191              	.LVL140:
 2192 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2193              	.LCFI37:
 2194              		.cfi_def_cfa_offset 40
 2195              		.cfi_offset 3, -40
 2196              		.cfi_offset 4, -36
 2197              		.cfi_offset 5, -32
 2198              		.cfi_offset 6, -28
 2199              		.cfi_offset 7, -24
 2200              		.cfi_offset 8, -20
 2201              		.cfi_offset 9, -16
 2202              		.cfi_offset 10, -12
 2203              		.cfi_offset 11, -8
 2204              		.cfi_offset 14, -4
 2205 0004 8046     		mov	r8, r0
 2206 0006 0F46     		mov	r7, r1
 2207 0008 1646     		mov	r6, r2
 2208 000a 1C46     		mov	r4, r3
 2209              	.LVL141:
 660:SYS/task_manager/task_manager.c ****     {
 2210              		.loc 1 660 0
 2211 000c 784B     		ldr	r3, .L151+8
 2212              	.LVL142:
 2213 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2214 0010 23B9     		cbnz	r3, .L143
 662:SYS/task_manager/task_manager.c ****         taskOs_InitState = true;
 2215              		.loc 1 662 0
 2216 0012 FFF7FEFF 		bl	TaskSys_Init
 2217              	.LVL143:
 663:SYS/task_manager/task_manager.c ****     }
 2218              		.loc 1 663 0
 2219 0016 0122     		movs	r2, #1
 2220 0018 754B     		ldr	r3, .L151+8
 2221 001a 1A70     		strb	r2, [r3]
 2222              	.L143:
 667:SYS/task_manager/task_manager.c ****     {
 2223              		.loc 1 667 0
 2224 001c 04EBC603 		add	r3, r4, r6, lsl #3
 2225 0020 744A     		ldr	r2, .L151+12
 2226 0022 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2227 0026 002B     		cmp	r3, #0
 2228 0028 40F0D280 		bne	.L147
 673:SYS/task_manager/task_manager.c **** 
 2229              		.loc 1 673 0
 2230 002c 8820     		movs	r0, #136
 2231 002e FFF7FEFF 		bl	MMU_Malloc
 2232              	.LVL144:
 2233 0032 0546     		mov	r5, r0
 2234 0034 DFF8BC91 		ldr	r9, .L151+12
 2235 0038 4FEAC60B 		lsl	fp, r6, #3
 2236 003c 0BEB040A 		add	r10, fp, r4
 2237 0040 49F82A00 		str	r0, [r9, r10, lsl #2]
 2238              	.LVL145:
 678:SYS/task_manager/task_manager.c **** 
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 90


 2239              		.loc 1 678 0
 2240 0044 C0F80480 		str	r8, [r0, #4]
 680:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->exec_interval_us = RUNTIEM_MAX_TICK_FRQ / frq;
 2241              		.loc 1 680 0
 2242 0048 59F82A30 		ldr	r3, [r9, r10, lsl #2]
 2243 004c 9F60     		str	r7, [r3, #8]
 681:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->Exec_Func = func;
 2244              		.loc 1 681 0
 2245 004e 59F82A80 		ldr	r8, [r9, r10, lsl #2]
 2246              	.LVL146:
 2247 0052 3846     		mov	r0, r7
 2248              	.LVL147:
 2249 0054 FFF7FEFF 		bl	__aeabi_ui2d
 2250              	.LVL148:
 2251 0058 0246     		mov	r2, r0
 2252 005a 0B46     		mov	r3, r1
 2253 005c 62A1     		adr	r1, .L151
 2254 005e D1E90001 		ldrd	r0, [r1]
 2255 0062 FFF7FEFF 		bl	__aeabi_ddiv
 2256              	.LVL149:
 2257 0066 FFF7FEFF 		bl	__aeabi_d2uiz
 2258              	.LVL150:
 2259 006a A8F80C00 		strh	r0, [r8, #12]	@ movhi
 682:SYS/task_manager/task_manager.c **** 
 2260              		.loc 1 682 0
 2261 006e 59F82A30 		ldr	r3, [r9, r10, lsl #2]
 2262 0072 0A9A     		ldr	r2, [sp, #40]
 2263 0074 1A61     		str	r2, [r3, #16]
 684:SYS/task_manager/task_manager.c **** 
 2264              		.loc 1 684 0
 2265 0076 59F82A30 		ldr	r3, [r9, r10, lsl #2]
 2266 007a 4BEA040B 		orr	fp, fp, r4
 2267 007e 83F800B0 		strb	fp, [r3]
 688:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->delay_info.tsk_hdl = handle;
 2268              		.loc 1 688 0
 2269 0082 59F82A20 		ldr	r2, [r9, r10, lsl #2]
 2270 0086 0023     		movs	r3, #0
 2271 0088 82F85C30 		strb	r3, [r2, #92]
 689:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->delay_info.time_unit = 0;
 2272              		.loc 1 689 0
 2273 008c 59F82A20 		ldr	r2, [r9, r10, lsl #2]
 2274 0090 1566     		str	r5, [r2, #96]
 690:SYS/task_manager/task_manager.c **** 
 2275              		.loc 1 690 0
 2276 0092 59F82A20 		ldr	r2, [r9, r10, lsl #2]
 2277 0096 5366     		str	r3, [r2, #100]
 693:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->TCB.Stack = (uint32_t *)MMU_Malloc(StackDepth * sizeof(uint32_t));
 2278              		.loc 1 693 0
 2279 0098 59F82A30 		ldr	r3, [r9, r10, lsl #2]
 2280 009c 0B9A     		ldr	r2, [sp, #44]
 2281 009e DA64     		str	r2, [r3, #76]
 694:SYS/task_manager/task_manager.c **** 
 2282              		.loc 1 694 0
 2283 00a0 59F82A70 		ldr	r7, [r9, r10, lsl #2]
 2284              	.LVL151:
 2285 00a4 9000     		lsls	r0, r2, #2
 2286 00a6 80B2     		uxth	r0, r0
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 91


 2287 00a8 FFF7FEFF 		bl	MMU_Malloc
 2288              	.LVL152:
 2289 00ac 7865     		str	r0, [r7, #84]
 696:SYS/task_manager/task_manager.c ****     {
 2290              		.loc 1 696 0
 2291 00ae 59F82A00 		ldr	r0, [r9, r10, lsl #2]
 2292 00b2 436D     		ldr	r3, [r0, #84]
 2293 00b4 002B     		cmp	r3, #0
 2294 00b6 00F08E80 		beq	.L148
 698:SYS/task_manager/task_manager.c ****     }
 2295              		.loc 1 698 0
 2296 00ba FFF7FEFF 		bl	Task_SetStkPtr_Val
 2297              	.LVL153:
 707:SYS/task_manager/task_manager.c **** 
 2298              		.loc 1 707 0
 2299 00be 4F46     		mov	r7, r9
 2300 00c0 04EBC608 		add	r8, r4, r6, lsl #3
 2301 00c4 59F82830 		ldr	r3, [r9, r8, lsl #2]
 2302 00c8 4FF00009 		mov	r9, #0
 2303 00cc C3F85890 		str	r9, [r3, #88]
 710:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->Exec_status.totlal_running_time = 0;
 2304              		.loc 1 710 0
 2305 00d0 57F82830 		ldr	r3, [r7, r8, lsl #2]
 2306 00d4 0022     		movs	r2, #0
 2307 00d6 5A64     		str	r2, [r3, #68]	@ float
 711:SYS/task_manager/task_manager.c **** 
 2308              		.loc 1 711 0
 2309 00d8 57F82830 		ldr	r3, [r7, r8, lsl #2]
 2310 00dc C3F84090 		str	r9, [r3, #64]
 714:SYS/task_manager/task_manager.c ****     //set current task under this group flag to ready
 2311              		.loc 1 714 0
 2312 00e0 454A     		ldr	r2, .L151+16
 2313 00e2 92F800E0 		ldrb	lr, [r2]	@ zero_extendqisi2
 2314 00e6 57F82800 		ldr	r0, [r7, r8, lsl #2]
 2315 00ea 0178     		ldrb	r1, [r0]	@ zero_extendqisi2
 2316 00ec 0123     		movs	r3, #1
 2317 00ee 03FA01F1 		lsl	r1, r3, r1
 2318 00f2 4EEAE101 		orr	r1, lr, r1, asr #3
 2319 00f6 C9B2     		uxtb	r1, r1
 2320 00f8 1170     		strb	r1, [r2]
 716:SYS/task_manager/task_manager.c **** 
 2321              		.loc 1 716 0
 2322 00fa 0178     		ldrb	r1, [r0]	@ zero_extendqisi2
 2323 00fc 02EBD102 		add	r2, r2, r1, lsr #3
 2324 0100 92F801E0 		ldrb	lr, [r2, #1]	@ zero_extendqisi2
 2325 0104 8B40     		lsls	r3, r3, r1
 2326 0106 03F00703 		and	r3, r3, #7
 2327 010a 4EEA0303 		orr	r3, lr, r3
 2328 010e 5370     		strb	r3, [r2, #1]
 718:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->Exec_status.detect_exec_time_arv = 0;
 2329              		.loc 1 718 0
 2330 0110 C0F82C90 		str	r9, [r0, #44]
 719:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->Exec_status.detect_exec_time_max = 0;
 2331              		.loc 1 719 0
 2332 0114 57F82830 		ldr	r3, [r7, r8, lsl #2]
 2333 0118 C3F83090 		str	r9, [r3, #48]
 720:SYS/task_manager/task_manager.c **** 
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 92


 2334              		.loc 1 720 0
 2335 011c 57F82830 		ldr	r3, [r7, r8, lsl #2]
 2336 0120 C3F83490 		str	r9, [r3, #52]
 722:SYS/task_manager/task_manager.c ****     RuntimeObj_Reset(&(Task_Ptr[group][priority]->Exec_status.Init_Time));
 2337              		.loc 1 722 0
 2338 0124 57F82800 		ldr	r0, [r7, r8, lsl #2]
 2339 0128 2430     		adds	r0, r0, #36
 2340 012a FFF7FEFF 		bl	RuntimeObj_Reset
 2341              	.LVL154:
 723:SYS/task_manager/task_manager.c ****     RuntimeObj_Reset(&(Task_Ptr[group][priority]->Exec_status.Start_Time));
 2342              		.loc 1 723 0
 2343 012e 57F82800 		ldr	r0, [r7, r8, lsl #2]
 2344 0132 1430     		adds	r0, r0, #20
 2345 0134 FFF7FEFF 		bl	RuntimeObj_Reset
 2346              	.LVL155:
 724:SYS/task_manager/task_manager.c **** 
 2347              		.loc 1 724 0
 2348 0138 57F82800 		ldr	r0, [r7, r8, lsl #2]
 2349 013c 1C30     		adds	r0, r0, #28
 2350 013e FFF7FEFF 		bl	RuntimeObj_Reset
 2351              	.LVL156:
 726:SYS/task_manager/task_manager.c **** 
 2352              		.loc 1 726 0
 2353 0142 57F828A0 		ldr	r10, [r7, r8, lsl #2]
 2354 0146 FFF7FEFF 		bl	Get_CurrentRunningUs
 2355              	.LVL157:
 2356 014a CAF81400 		str	r0, [r10, #20]
 2357 014e CAF81810 		str	r1, [r10, #24]
 728:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->Exec_status.error_code = NOERROR;
 2358              		.loc 1 728 0
 2359 0152 57F82830 		ldr	r3, [r7, r8, lsl #2]
 2360 0156 C3F83890 		str	r9, [r3, #56]
 729:SYS/task_manager/task_manager.c **** 
 2361              		.loc 1 729 0
 2362 015a 57F82830 		ldr	r3, [r7, r8, lsl #2]
 2363 015e 83F83C90 		strb	r9, [r3, #60]
 731:SYS/task_manager/task_manager.c **** 
 2364              		.loc 1 731 0
 2365 0162 57F82800 		ldr	r0, [r7, r8, lsl #2]
 2366 0166 FFF7FEFF 		bl	Task_SetReady
 2367              	.LVL158:
 733:SYS/task_manager/task_manager.c ****     if (Task_Ptr[group][priority]->item_ptr == NULL)
 2368              		.loc 1 733 0
 2369 016a 57F82890 		ldr	r9, [r7, r8, lsl #2]
 2370 016e 1420     		movs	r0, #20
 2371 0170 FFF7FEFF 		bl	MMU_Malloc
 2372              	.LVL159:
 2373 0174 C9F87000 		str	r0, [r9, #112]
 734:SYS/task_manager/task_manager.c ****     {
 2374              		.loc 1 734 0
 2375 0178 57F82810 		ldr	r1, [r7, r8, lsl #2]
 2376 017c 086F     		ldr	r0, [r1, #112]
 2377 017e 68B3     		cbz	r0, .L149
 739:SYS/task_manager/task_manager.c ****     if (TskCrt_RegList.num == 0)
 2378              		.loc 1 739 0
 2379 0180 FFF7FEFF 		bl	List_ItemInit
 2380              	.LVL160:
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 93


 740:SYS/task_manager/task_manager.c ****     {
 2381              		.loc 1 740 0
 2382 0184 1D4B     		ldr	r3, .L151+20
 2383 0186 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2384 0188 43B9     		cbnz	r3, .L145
 742:SYS/task_manager/task_manager.c ****     }
 2385              		.loc 1 742 0
 2386 018a 57F82810 		ldr	r1, [r7, r8, lsl #2]
 2387 018e 1C4B     		ldr	r3, .L151+24
 2388 0190 0222     		movs	r2, #2
 2389 0192 096F     		ldr	r1, [r1, #112]
 2390 0194 1B48     		ldr	r0, .L151+28
 2391 0196 FFF7FEFF 		bl	List_Init
 2392              	.LVL161:
 2393 019a 08E0     		b	.L146
 2394              	.L145:
 746:SYS/task_manager/task_manager.c ****     }
 2395              		.loc 1 746 0
 2396 019c 04EBC603 		add	r3, r4, r6, lsl #3
 2397 01a0 144A     		ldr	r2, .L151+12
 2398 01a2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2399 01a6 196F     		ldr	r1, [r3, #112]
 2400 01a8 1648     		ldr	r0, .L151+28
 2401 01aa FFF7FEFF 		bl	List_Insert_Item
 2402              	.LVL162:
 2403              	.L146:
 749:SYS/task_manager/task_manager.c **** 
 2404              		.loc 1 749 0
 2405 01ae 04EBC604 		add	r4, r4, r6, lsl #3
 2406 01b2 104B     		ldr	r3, .L151+12
 2407 01b4 53F82400 		ldr	r0, [r3, r4, lsl #2]
 2408 01b8 00F15C01 		add	r1, r0, #92
 2409 01bc 7430     		adds	r0, r0, #116
 2410 01be FFF7FEFF 		bl	List_ItemInit
 2411              	.LVL163:
 751:SYS/task_manager/task_manager.c **** 
 2412              		.loc 1 751 0
 2413 01c2 0E4A     		ldr	r2, .L151+20
 2414 01c4 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 2415 01c6 0133     		adds	r3, r3, #1
 2416 01c8 1370     		strb	r3, [r2]
 753:SYS/task_manager/task_manager.c **** }
 2417              		.loc 1 753 0
 2418 01ca 2846     		mov	r0, r5
 2419 01cc BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2420              	.LVL164:
 2421              	.L147:
 669:SYS/task_manager/task_manager.c ****     }
 2422              		.loc 1 669 0
 2423 01d0 0120     		movs	r0, #1
 2424 01d2 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2425              	.LVL165:
 2426              	.L148:
 702:SYS/task_manager/task_manager.c ****     }
 2427              		.loc 1 702 0
 2428 01d6 0020     		movs	r0, #0
 2429 01d8 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 94


 2430              	.LVL166:
 2431              	.L149:
 736:SYS/task_manager/task_manager.c ****     }
 2432              		.loc 1 736 0
 2433 01dc 0020     		movs	r0, #0
 754:SYS/task_manager/task_manager.c **** 
 2434              		.loc 1 754 0
 2435 01de BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2436              	.LVL167:
 2437              	.L152:
 2438 01e2 00BFAFF3 		.align	3
 2438      0080
 2439              	.L151:
 2440 01e8 00000000 		.word	0
 2441 01ec 80842E41 		.word	1093567616
 2442 01f0 00000000 		.word	.LANCHOR15
 2443 01f4 00000000 		.word	Task_Ptr
 2444 01f8 00000000 		.word	.LANCHOR0
 2445 01fc 00000000 		.word	.LANCHOR4
 2446 0200 00000000 		.word	Task_PriorityCompare
 2447 0204 04000000 		.word	.LANCHOR4+4
 2448              		.cfi_endproc
 2449              	.LFE154:
 2451              		.section	.text.Task_Remove,"ax",%progbits
 2452              		.align	2
 2453              		.global	Task_Remove
 2454              		.thumb
 2455              		.thumb_func
 2457              	Task_Remove:
 2458              	.LFB155:
 758:SYS/task_manager/task_manager.c ****     //convert Tsk_Hdl from uint32_t var to Task Address which we need to delete
 2459              		.loc 1 758 0
 2460              		.cfi_startproc
 2461              		@ args = 0, pretend = 0, frame = 0
 2462              		@ frame_needed = 0, uses_anonymous_args = 0
 2463              	.LVL168:
 2464 0000 70B5     		push	{r4, r5, r6, lr}
 2465              	.LCFI38:
 2466              		.cfi_def_cfa_offset 16
 2467              		.cfi_offset 4, -16
 2468              		.cfi_offset 5, -12
 2469              		.cfi_offset 6, -8
 2470              		.cfi_offset 14, -4
 2471 0002 0546     		mov	r5, r0
 764:SYS/task_manager/task_manager.c ****     uint8_t remove_task = GET_TASKINGROUP_PRIORITY(((Task *)Tsk_Hdl)->priority.Priority);
 2472              		.loc 1 764 0
 2473 0004 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 2474 0006 DE08     		lsrs	r6, r3, #3
 2475              	.LVL169:
 765:SYS/task_manager/task_manager.c **** 
 2476              		.loc 1 765 0
 2477 0008 03F00704 		and	r4, r3, #7
 2478              	.LVL170:
 767:SYS/task_manager/task_manager.c **** 
 2479              		.loc 1 767 0
 2480 000c FFF7FEFF 		bl	ReSet_Task_Data
 2481              	.LVL171:
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 95


 770:SYS/task_manager/task_manager.c ****     MMU_Free((uint32_t *)((Task *)Tsk_Hdl)->TCB.Top_Stk_Ptr);
 2482              		.loc 1 770 0
 2483 0010 686D     		ldr	r0, [r5, #84]
 2484 0012 FFF7FEFF 		bl	MMU_Free
 2485              	.LVL172:
 771:SYS/task_manager/task_manager.c **** #endif
 2486              		.loc 1 771 0
 2487 0016 286D     		ldr	r0, [r5, #80]
 2488 0018 FFF7FEFF 		bl	MMU_Free
 2489              	.LVL173:
 774:SYS/task_manager/task_manager.c ****     Task_Ptr[remove_group][remove_task] = NULL;
 2490              		.loc 1 774 0
 2491 001c 2846     		mov	r0, r5
 2492 001e FFF7FEFF 		bl	MMU_Free
 2493              	.LVL174:
 775:SYS/task_manager/task_manager.c **** }
 2494              		.loc 1 775 0
 2495 0022 04EBC603 		add	r3, r4, r6, lsl #3
 2496 0026 0021     		movs	r1, #0
 2497 0028 014A     		ldr	r2, .L155
 2498 002a 42F82310 		str	r1, [r2, r3, lsl #2]
 2499 002e 70BD     		pop	{r4, r5, r6, pc}
 2500              	.LVL175:
 2501              	.L156:
 2502              		.align	2
 2503              	.L155:
 2504 0030 00000000 		.word	Task_Ptr
 2505              		.cfi_endproc
 2506              	.LFE155:
 2508              		.section	.text.TaskSystem_Start,"ax",%progbits
 2509              		.align	2
 2510              		.global	TaskSystem_Start
 2511              		.thumb
 2512              		.thumb_func
 2514              	TaskSystem_Start:
 2515              	.LFB156:
 779:SYS/task_manager/task_manager.c ****     Runtime_Config(RUNTIME_TICK_FRQ_40K);
 2516              		.loc 1 779 0
 2517              		.cfi_startproc
 2518              		@ args = 0, pretend = 0, frame = 0
 2519              		@ frame_needed = 0, uses_anonymous_args = 0
 2520 0000 10B5     		push	{r4, lr}
 2521              	.LCFI39:
 2522              		.cfi_def_cfa_offset 8
 2523              		.cfi_offset 4, -8
 2524              		.cfi_offset 14, -4
 780:SYS/task_manager/task_manager.c ****     Runtime_Set_start_Callback(NULL);
 2525              		.loc 1 780 0
 2526 0002 49F64040 		movw	r0, #40000
 2527 0006 FFF7FEFF 		bl	Runtime_Config
 2528              	.LVL176:
 781:SYS/task_manager/task_manager.c ****     Runtime_Set_stop_Callback(NULL);
 2529              		.loc 1 781 0
 2530 000a 0020     		movs	r0, #0
 2531 000c FFF7FEFF 		bl	Runtime_Set_start_Callback
 2532              	.LVL177:
 782:SYS/task_manager/task_manager.c ****     Runtime_Set_tick_Callback(Task_Scheduler); /* 5us cast by calling the scheduler */
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 96


 2533              		.loc 1 782 0
 2534 0010 0020     		movs	r0, #0
 2535 0012 FFF7FEFF 		bl	Runtime_Set_stop_Callback
 2536              	.LVL178:
 783:SYS/task_manager/task_manager.c ****     Runtime_Start();
 2537              		.loc 1 783 0
 2538 0016 1148     		ldr	r0, .L160
 2539 0018 FFF7FEFF 		bl	Runtime_Set_tick_Callback
 2540              	.LVL179:
 784:SYS/task_manager/task_manager.c **** 
 2541              		.loc 1 784 0
 2542 001c FFF7FEFF 		bl	Runtime_Start
 2543              	.LVL180:
 786:SYS/task_manager/task_manager.c **** 
 2544              		.loc 1 786 0
 2545 0020 0F4C     		ldr	r4, .L160+4
 2546 0022 2046     		mov	r0, r4
 2547 0024 FFF7FEFF 		bl	RuntimeObj_Reset
 2548              	.LVL181:
 788:SYS/task_manager/task_manager.c **** 
 2549              		.loc 1 788 0
 2550 0028 FFF7FEFF 		bl	Get_CurrentRunningUs
 2551              	.LVL182:
 2552 002c C4E90001 		strd	r0, [r4]
 791:SYS/task_manager/task_manager.c **** 
 2553              		.loc 1 791 0
 2554 0030 FFF7FEFF 		bl	Task_Get_HighestRank_RdyTask
 2555              	.LVL183:
 2556 0034 0B4B     		ldr	r3, .L160+8
 2557 0036 1860     		str	r0, [r3]
 793:SYS/task_manager/task_manager.c ****     {
 2558              		.loc 1 793 0
 2559 0038 50B1     		cbz	r0, .L158
 795:SYS/task_manager/task_manager.c ****         NxtTsk_TCB.Stack = NxtRunTsk_Ptr->TCB.Stack;
 2560              		.loc 1 795 0
 2561 003a 00F15002 		add	r2, r0, #80
 2562 003e 0A4B     		ldr	r3, .L160+12
 2563 0040 1A60     		str	r2, [r3]
 796:SYS/task_manager/task_manager.c **** 
 2564              		.loc 1 796 0
 2565 0042 426D     		ldr	r2, [r0, #84]
 2566 0044 5A60     		str	r2, [r3, #4]
 798:SYS/task_manager/task_manager.c ****     }
 2567              		.loc 1 798 0
 2568 0046 094A     		ldr	r2, .L160+16
 2569 0048 93E80300 		ldmia	r3, {r0, r1}
 2570 004c 82E80300 		stmia	r2, {r0, r1}
 2571              	.L158:
 802:SYS/task_manager/task_manager.c ****     Task_TriggerPendSV();
 2572              		.loc 1 802 0
 2573 0050 FFF7FEFF 		bl	Task_SetPendSVPro
 2574              	.LVL184:
 803:SYS/task_manager/task_manager.c **** 
 2575              		.loc 1 803 0
 2576 0054 FFF7FEFF 		bl	Task_TriggerPendSV
 2577              	.LVL185:
 2578 0058 10BD     		pop	{r4, pc}
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 97


 2579              	.L161:
 2580 005a 00BF     		.align	2
 2581              	.L160:
 2582 005c 00000000 		.word	Task_Scheduler
 2583 0060 00000000 		.word	.LANCHOR7
 2584 0064 00000000 		.word	.LANCHOR10
 2585 0068 00000000 		.word	NxtTsk_TCB
 2586 006c 00000000 		.word	CurTsk_TCB
 2587              		.cfi_endproc
 2588              	.LFE156:
 2590              		.section	.text.Task_SetRunState,"ax",%progbits
 2591              		.align	2
 2592              		.global	Task_SetRunState
 2593              		.thumb
 2594              		.thumb_func
 2596              	Task_SetRunState:
 2597              	.LFB157:
 809:SYS/task_manager/task_manager.c ****     ((Task *)Tsk_Handle)->Exec_status.State = state;
 2598              		.loc 1 809 0
 2599              		.cfi_startproc
 2600              		@ args = 0, pretend = 0, frame = 0
 2601              		@ frame_needed = 0, uses_anonymous_args = 0
 2602              		@ link register save eliminated.
 2603              	.LVL186:
 810:SYS/task_manager/task_manager.c **** }
 2604              		.loc 1 810 0
 2605 0000 80F84810 		strb	r1, [r0, #72]
 2606 0004 7047     		bx	lr
 2607              		.cfi_endproc
 2608              	.LFE157:
 2610 0006 00BF     		.section	.text.Task_Get_IdleUS,"ax",%progbits
 2611              		.align	2
 2612              		.global	Task_Get_IdleUS
 2613              		.thumb
 2614              		.thumb_func
 2616              	Task_Get_IdleUS:
 2617              	.LFB160:
 889:SYS/task_manager/task_manager.c ****     return TaskSys_Idle_US;
 2618              		.loc 1 889 0
 2619              		.cfi_startproc
 2620              		@ args = 0, pretend = 0, frame = 0
 2621              		@ frame_needed = 0, uses_anonymous_args = 0
 2622              		@ link register save eliminated.
 891:SYS/task_manager/task_manager.c **** 
 2623              		.loc 1 891 0
 2624 0000 014B     		ldr	r3, .L164
 2625 0002 1868     		ldr	r0, [r3]
 2626 0004 7047     		bx	lr
 2627              	.L165:
 2628 0006 00BF     		.align	2
 2629              	.L164:
 2630 0008 00000000 		.word	.LANCHOR8
 2631              		.cfi_endproc
 2632              	.LFE160:
 2634              		.section	.text.Task_Get_IdleOcupy,"ax",%progbits
 2635              		.align	2
 2636              		.global	Task_Get_IdleOcupy
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 98


 2637              		.thumb
 2638              		.thumb_func
 2640              	Task_Get_IdleOcupy:
 2641              	.LFB161:
 894:SYS/task_manager/task_manager.c ****     return TaskSys_Idle_Ocupy;
 2642              		.loc 1 894 0
 2643              		.cfi_startproc
 2644              		@ args = 0, pretend = 0, frame = 0
 2645              		@ frame_needed = 0, uses_anonymous_args = 0
 2646              		@ link register save eliminated.
 896:SYS/task_manager/task_manager.c **** 
 2647              		.loc 1 896 0
 2648 0000 014B     		ldr	r3, .L167
 2649 0002 93ED000A 		vldr.32	s0, [r3]
 2650 0006 7047     		bx	lr
 2651              	.L168:
 2652              		.align	2
 2653              	.L167:
 2654 0008 00000000 		.word	.LANCHOR9
 2655              		.cfi_endproc
 2656              	.LFE161:
 2658              		.section	.text.TaskSys_Set_State,"ax",%progbits
 2659              		.align	2
 2660              		.global	TaskSys_Set_State
 2661              		.thumb
 2662              		.thumb_func
 2664              	TaskSys_Set_State:
 2665              	.LFB163:
 917:SYS/task_manager/task_manager.c ****     TskSys_state = state;
 2666              		.loc 1 917 0
 2667              		.cfi_startproc
 2668              		@ args = 0, pretend = 0, frame = 0
 2669              		@ frame_needed = 0, uses_anonymous_args = 0
 2670              		@ link register save eliminated.
 2671              	.LVL187:
 918:SYS/task_manager/task_manager.c **** }
 2672              		.loc 1 918 0
 2673 0000 014B     		ldr	r3, .L170
 2674 0002 1870     		strb	r0, [r3]
 2675 0004 7047     		bx	lr
 2676              	.L171:
 2677 0006 00BF     		.align	2
 2678              	.L170:
 2679 0008 00000000 		.word	.LANCHOR6
 2680              		.cfi_endproc
 2681              	.LFE163:
 2683              		.section	.text.TaskSys_Get_State,"ax",%progbits
 2684              		.align	2
 2685              		.global	TaskSys_Get_State
 2686              		.thumb
 2687              		.thumb_func
 2689              	TaskSys_Get_State:
 2690              	.LFB164:
 922:SYS/task_manager/task_manager.c ****     return TskSys_state;
 2691              		.loc 1 922 0
 2692              		.cfi_startproc
 2693              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 99


 2694              		@ frame_needed = 0, uses_anonymous_args = 0
 2695              		@ link register save eliminated.
 923:SYS/task_manager/task_manager.c **** }
 2696              		.loc 1 923 0
 2697 0000 014B     		ldr	r3, .L173
 2698 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 924:SYS/task_manager/task_manager.c **** 
 2699              		.loc 1 924 0
 2700 0004 7047     		bx	lr
 2701              	.L174:
 2702 0006 00BF     		.align	2
 2703              	.L173:
 2704 0008 00000000 		.word	.LANCHOR6
 2705              		.cfi_endproc
 2706              	.LFE164:
 2708              		.section	.text.Task_GetInfo_ByIndex,"ax",%progbits
 2709              		.align	2
 2710              		.global	Task_GetInfo_ByIndex
 2711              		.thumb
 2712              		.thumb_func
 2714              	Task_GetInfo_ByIndex:
 2715              	.LFB167:
1059:SYS/task_manager/task_manager.c ****             return;
1060:SYS/task_manager/task_manager.c ****         }
1061:SYS/task_manager/task_manager.c ****     }
1062:SYS/task_manager/task_manager.c **** #else
1063:SYS/task_manager/task_manager.c ****     Task_TriggerPendSV();
1064:SYS/task_manager/task_manager.c **** #endif
1065:SYS/task_manager/task_manager.c **** }
1066:SYS/task_manager/task_manager.c **** 
1067:SYS/task_manager/task_manager.c **** Task_Base_Info Task_GetInfo_ByIndex(uint8_t index)
1068:SYS/task_manager/task_manager.c **** {
 2716              		.loc 1 1068 0
 2717              		.cfi_startproc
 2718              		@ args = 0, pretend = 0, frame = 0
 2719              		@ frame_needed = 0, uses_anonymous_args = 0
 2720              		@ link register save eliminated.
 2721              	.LVL188:
1069:SYS/task_manager/task_manager.c ****     Task_Base_Info task_info;
1070:SYS/task_manager/task_manager.c **** 
1071:SYS/task_manager/task_manager.c ****     return task_info;
1072:SYS/task_manager/task_manager.c **** }
 2722              		.loc 1 1072 0
 2723 0000 7047     		bx	lr
 2724              		.cfi_endproc
 2725              	.LFE167:
 2727 0002 00BF     		.section	.text.Task_GetCurrentRunTask,"ax",%progbits
 2728              		.align	2
 2729              		.global	Task_GetCurrentRunTask
 2730              		.thumb
 2731              		.thumb_func
 2733              	Task_GetCurrentRunTask:
 2734              	.LFB168:
1073:SYS/task_manager/task_manager.c **** 
1074:SYS/task_manager/task_manager.c **** Task *Task_GetCurrentRunTask(void)
1075:SYS/task_manager/task_manager.c **** {
 2735              		.loc 1 1075 0
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 100


 2736              		.cfi_startproc
 2737              		@ args = 0, pretend = 0, frame = 0
 2738              		@ frame_needed = 0, uses_anonymous_args = 0
 2739              		@ link register save eliminated.
1076:SYS/task_manager/task_manager.c ****     return CurRunTsk_Ptr;
1077:SYS/task_manager/task_manager.c **** }
 2740              		.loc 1 1077 0
 2741 0000 014B     		ldr	r3, .L177
 2742 0002 1868     		ldr	r0, [r3]
 2743 0004 7047     		bx	lr
 2744              	.L178:
 2745 0006 00BF     		.align	2
 2746              	.L177:
 2747 0008 00000000 		.word	.LANCHOR5
 2748              		.cfi_endproc
 2749              	.LFE168:
 2751              		.section	.text.Task_Statistic_Cast,"ax",%progbits
 2752              		.align	2
 2753              		.global	Task_Statistic_Cast
 2754              		.thumb
 2755              		.thumb_func
 2757              	Task_Statistic_Cast:
 2758              	.LFB169:
1078:SYS/task_manager/task_manager.c **** 
1079:SYS/task_manager/task_manager.c **** void Task_Statistic_Cast(uint32_t time_base)
1080:SYS/task_manager/task_manager.c **** {
 2759              		.loc 1 1080 0
 2760              		.cfi_startproc
 2761              		@ args = 0, pretend = 0, frame = 0
 2762              		@ frame_needed = 0, uses_anonymous_args = 0
 2763              		@ link register save eliminated.
 2764              	.LVL189:
1081:SYS/task_manager/task_manager.c ****     if ((CurRunTsk_Ptr != NULL) && (CurRunTsk_Ptr->Exec_status.State == Task_Running))
 2765              		.loc 1 1081 0
 2766 0000 054B     		ldr	r3, .L181
 2767 0002 1A68     		ldr	r2, [r3]
 2768 0004 3AB1     		cbz	r2, .L179
 2769              		.loc 1 1081 0 is_stmt 0 discriminator 1
 2770 0006 92F84830 		ldrb	r3, [r2, #72]	@ zero_extendqisi2
 2771 000a DBB2     		uxtb	r3, r3
 2772 000c 012B     		cmp	r3, #1
 2773 000e 02D1     		bne	.L179
1082:SYS/task_manager/task_manager.c ****     {
1083:SYS/task_manager/task_manager.c ****         CurRunTsk_Ptr->TskFuncUing_US += time_base;
 2774              		.loc 1 1083 0 is_stmt 1
 2775 0010 936D     		ldr	r3, [r2, #88]
 2776 0012 1844     		add	r0, r0, r3
 2777              	.LVL190:
 2778 0014 9065     		str	r0, [r2, #88]
 2779              	.L179:
 2780 0016 7047     		bx	lr
 2781              	.L182:
 2782              		.align	2
 2783              	.L181:
 2784 0018 00000000 		.word	.LANCHOR5
 2785              		.cfi_endproc
 2786              	.LFE169:
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 101


 2788              		.section	.text.Task_GetStackRemain,"ax",%progbits
 2789              		.align	2
 2790              		.global	Task_GetStackRemain
 2791              		.thumb
 2792              		.thumb_func
 2794              	Task_GetStackRemain:
 2795              	.LFB170:
1084:SYS/task_manager/task_manager.c ****     }
1085:SYS/task_manager/task_manager.c **** }
1086:SYS/task_manager/task_manager.c **** 
1087:SYS/task_manager/task_manager.c **** uint32_t Task_GetStackRemain(const Task_Handler hdl)
1088:SYS/task_manager/task_manager.c **** {
 2796              		.loc 1 1088 0
 2797              		.cfi_startproc
 2798              		@ args = 0, pretend = 0, frame = 0
 2799              		@ frame_needed = 0, uses_anonymous_args = 0
 2800              		@ link register save eliminated.
 2801              	.LVL191:
1089:SYS/task_manager/task_manager.c ****     uint32_t remain_size = 0;
1090:SYS/task_manager/task_manager.c **** 
1091:SYS/task_manager/task_manager.c ****     __asm("cpsid i");
 2802              		.loc 1 1091 0
 2803              		.syntax unified
 2804              	@ 1091 "SYS/task_manager/task_manager.c" 1
 2805 0000 72B6     		cpsid i
 2806              	@ 0 "" 2
1089:SYS/task_manager/task_manager.c ****     uint32_t remain_size = 0;
 2807              		.loc 1 1089 0
 2808              		.thumb
 2809              		.syntax unified
 2810 0002 0022     		movs	r2, #0
1092:SYS/task_manager/task_manager.c **** 
1093:SYS/task_manager/task_manager.c ****     while ((uint8_t)(((Task *)hdl)->TCB.Stack + remain_size) == TASK_STACK_DEFAULT)
 2811              		.loc 1 1093 0
 2812 0004 00E0     		b	.L184
 2813              	.LVL192:
 2814              	.L185:
1094:SYS/task_manager/task_manager.c ****     {
1095:SYS/task_manager/task_manager.c ****         remain_size++;
 2815              		.loc 1 1095 0
 2816 0006 0132     		adds	r2, r2, #1
 2817              	.LVL193:
 2818              	.L184:
1093:SYS/task_manager/task_manager.c ****     {
 2819              		.loc 1 1093 0
 2820 0008 436D     		ldr	r3, [r0, #84]
 2821 000a 03EB8203 		add	r3, r3, r2, lsl #2
 2822 000e DBB2     		uxtb	r3, r3
 2823 0010 8B2B     		cmp	r3, #139
 2824 0012 F8D0     		beq	.L185
1096:SYS/task_manager/task_manager.c ****     }
1097:SYS/task_manager/task_manager.c **** 
1098:SYS/task_manager/task_manager.c ****     __asm("cpsie i");
 2825              		.loc 1 1098 0
 2826              		.syntax unified
 2827              	@ 1098 "SYS/task_manager/task_manager.c" 1
 2828 0014 62B6     		cpsie i
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 102


 2829              	@ 0 "" 2
1099:SYS/task_manager/task_manager.c **** 
1100:SYS/task_manager/task_manager.c ****     return (remain_size / 4);
1101:SYS/task_manager/task_manager.c **** }
 2830              		.loc 1 1101 0
 2831              		.thumb
 2832              		.syntax unified
 2833 0016 9008     		lsrs	r0, r2, #2
 2834              	.LVL194:
 2835 0018 7047     		bx	lr
 2836              		.cfi_endproc
 2837              	.LFE170:
 2839              		.comm	Task_OS_ExpStkBase,4,4
 2840              		.comm	NxtTsk_TCB,8,4
 2841              		.comm	CurTsk_TCB,8,4
 2842              		.global	PndHstTsk_Ptr
 2843              		.global	NxtRunTsk_Ptr
 2844              		.global	CurRunTsk_Ptr
 2845              		.comm	Task_Ptr,256,4
 2846 001a 00BF     		.section	.bss.TskHdl_RdyMap,"aw",%nobits
 2847              		.align	2
 2848              		.set	.LANCHOR0,. + 0
 2851              	TskHdl_RdyMap:
 2852 0000 00000000 		.space	9
 2852      00000000 
 2852      00
 2853              		.section	.bss.i.10166,"aw",%nobits
 2854              		.set	.LANCHOR11,. + 0
 2857              	i.10166:
 2858 0000 00       		.space	1
 2859              		.section	.bss.TaskSys_StartTime,"aw",%nobits
 2860              		.align	3
 2861              		.set	.LANCHOR7,. + 0
 2864              	TaskSys_StartTime:
 2865 0000 00000000 		.space	8
 2865      00000000 
 2866              		.section	.bss.taskOs_InitState.10135,"aw",%nobits
 2867              		.set	.LANCHOR15,. + 0
 2870              	taskOs_InitState.10135:
 2871 0000 00       		.space	1
 2872              		.section	.bss.TaskSys_Idle_Ocupy,"aw",%nobits
 2873              		.align	2
 2874              		.set	.LANCHOR9,. + 0
 2877              	TaskSys_Idle_Ocupy:
 2878 0000 00000000 		.space	4
 2879              		.section	.bss.Task_OS_StkMem,"aw",%nobits
 2880              		.align	2
 2881              		.set	.LANCHOR3,. + 0
 2884              	Task_OS_StkMem:
 2885 0000 00000000 		.space	40960
 2885      00000000 
 2885      00000000 
 2885      00000000 
 2885      00000000 
 2886              		.section	.bss.TskHdl_PndMap,"aw",%nobits
 2887              		.align	2
 2888              		.set	.LANCHOR2,. + 0
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 103


 2891              	TskHdl_PndMap:
 2892 0000 00000000 		.space	9
 2892      00000000 
 2892      00
 2893              		.section	.bss.TaskSys_Idle_US,"aw",%nobits
 2894              		.align	2
 2895              		.set	.LANCHOR8,. + 0
 2898              	TaskSys_Idle_US:
 2899 0000 00000000 		.space	4
 2900              		.section	.bss.TskSys_state,"aw",%nobits
 2901              		.set	.LANCHOR6,. + 0
 2904              	TskSys_state:
 2905 0000 00       		.space	1
 2906              		.section	.bss.TskHdl_BlkMap,"aw",%nobits
 2907              		.align	2
 2908              		.set	.LANCHOR1,. + 0
 2911              	TskHdl_BlkMap:
 2912 0000 00000000 		.space	9
 2912      00000000 
 2912      00
 2913              		.section	.bss.NxtRunTsk_Ptr,"aw",%nobits
 2914              		.align	2
 2915              		.set	.LANCHOR10,. + 0
 2918              	NxtRunTsk_Ptr:
 2919 0000 00000000 		.space	4
 2920              		.section	.bss.TskCrt_RegList,"aw",%nobits
 2921              		.align	2
 2922              		.set	.LANCHOR4,. + 0
 2925              	TskCrt_RegList:
 2926 0000 00000000 		.space	24
 2926      00000000 
 2926      00000000 
 2926      00000000 
 2926      00000000 
 2927              		.section	.rodata.Tsk_Handle,"a",%progbits
 2928              		.align	2
 2929              		.set	.LANCHOR13,. + 0
 2932              	Tsk_Handle:
 2933 0000 00       		.byte	0
 2934 0001 00       		.byte	0
 2935 0002 01       		.byte	1
 2936 0003 00       		.byte	0
 2937 0004 02       		.byte	2
 2938 0005 00       		.byte	0
 2939 0006 01       		.byte	1
 2940 0007 00       		.byte	0
 2941 0008 03       		.byte	3
 2942 0009 00       		.byte	0
 2943 000a 01       		.byte	1
 2944 000b 00       		.byte	0
 2945 000c 02       		.byte	2
 2946 000d 00       		.byte	0
 2947 000e 01       		.byte	1
 2948 000f 00       		.byte	0
 2949 0010 04       		.byte	4
 2950 0011 00       		.byte	0
 2951 0012 01       		.byte	1
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 104


 2952 0013 00       		.byte	0
 2953 0014 02       		.byte	2
 2954 0015 00       		.byte	0
 2955 0016 01       		.byte	1
 2956 0017 00       		.byte	0
 2957 0018 03       		.byte	3
 2958 0019 00       		.byte	0
 2959 001a 01       		.byte	1
 2960 001b 00       		.byte	0
 2961 001c 02       		.byte	2
 2962 001d 00       		.byte	0
 2963 001e 01       		.byte	1
 2964 001f 00       		.byte	0
 2965 0020 05       		.byte	5
 2966 0021 00       		.byte	0
 2967 0022 01       		.byte	1
 2968 0023 00       		.byte	0
 2969 0024 02       		.byte	2
 2970 0025 00       		.byte	0
 2971 0026 01       		.byte	1
 2972 0027 00       		.byte	0
 2973 0028 03       		.byte	3
 2974 0029 00       		.byte	0
 2975 002a 01       		.byte	1
 2976 002b 00       		.byte	0
 2977 002c 02       		.byte	2
 2978 002d 00       		.byte	0
 2979 002e 01       		.byte	1
 2980 002f 00       		.byte	0
 2981 0030 04       		.byte	4
 2982 0031 00       		.byte	0
 2983 0032 01       		.byte	1
 2984 0033 00       		.byte	0
 2985 0034 02       		.byte	2
 2986 0035 00       		.byte	0
 2987 0036 01       		.byte	1
 2988 0037 00       		.byte	0
 2989 0038 03       		.byte	3
 2990 0039 00       		.byte	0
 2991 003a 01       		.byte	1
 2992 003b 00       		.byte	0
 2993 003c 02       		.byte	2
 2994 003d 00       		.byte	0
 2995 003e 01       		.byte	1
 2996 003f 00       		.byte	0
 2997 0040 06       		.byte	6
 2998 0041 00       		.byte	0
 2999 0042 01       		.byte	1
 3000 0043 00       		.byte	0
 3001 0044 02       		.byte	2
 3002 0045 00       		.byte	0
 3003 0046 01       		.byte	1
 3004 0047 00       		.byte	0
 3005 0048 03       		.byte	3
 3006 0049 00       		.byte	0
 3007 004a 01       		.byte	1
 3008 004b 00       		.byte	0
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 105


 3009 004c 02       		.byte	2
 3010 004d 00       		.byte	0
 3011 004e 01       		.byte	1
 3012 004f 00       		.byte	0
 3013 0050 04       		.byte	4
 3014 0051 00       		.byte	0
 3015 0052 01       		.byte	1
 3016 0053 00       		.byte	0
 3017 0054 02       		.byte	2
 3018 0055 00       		.byte	0
 3019 0056 01       		.byte	1
 3020 0057 00       		.byte	0
 3021 0058 03       		.byte	3
 3022 0059 00       		.byte	0
 3023 005a 01       		.byte	1
 3024 005b 00       		.byte	0
 3025 005c 02       		.byte	2
 3026 005d 00       		.byte	0
 3027 005e 01       		.byte	1
 3028 005f 00       		.byte	0
 3029 0060 05       		.byte	5
 3030 0061 00       		.byte	0
 3031 0062 01       		.byte	1
 3032 0063 00       		.byte	0
 3033 0064 02       		.byte	2
 3034 0065 00       		.byte	0
 3035 0066 01       		.byte	1
 3036 0067 00       		.byte	0
 3037 0068 03       		.byte	3
 3038 0069 00       		.byte	0
 3039 006a 01       		.byte	1
 3040 006b 00       		.byte	0
 3041 006c 02       		.byte	2
 3042 006d 00       		.byte	0
 3043 006e 01       		.byte	1
 3044 006f 00       		.byte	0
 3045 0070 04       		.byte	4
 3046 0071 00       		.byte	0
 3047 0072 01       		.byte	1
 3048 0073 00       		.byte	0
 3049 0074 02       		.byte	2
 3050 0075 00       		.byte	0
 3051 0076 01       		.byte	1
 3052 0077 00       		.byte	0
 3053 0078 03       		.byte	3
 3054 0079 00       		.byte	0
 3055 007a 01       		.byte	1
 3056 007b 00       		.byte	0
 3057 007c 02       		.byte	2
 3058 007d 00       		.byte	0
 3059 007e 01       		.byte	1
 3060 007f 00       		.byte	0
 3061 0080 07       		.byte	7
 3062 0081 00       		.byte	0
 3063 0082 01       		.byte	1
 3064 0083 00       		.byte	0
 3065 0084 02       		.byte	2
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 106


 3066 0085 00       		.byte	0
 3067 0086 01       		.byte	1
 3068 0087 00       		.byte	0
 3069 0088 03       		.byte	3
 3070 0089 00       		.byte	0
 3071 008a 01       		.byte	1
 3072 008b 00       		.byte	0
 3073 008c 02       		.byte	2
 3074 008d 00       		.byte	0
 3075 008e 01       		.byte	1
 3076 008f 00       		.byte	0
 3077 0090 04       		.byte	4
 3078 0091 00       		.byte	0
 3079 0092 01       		.byte	1
 3080 0093 00       		.byte	0
 3081 0094 02       		.byte	2
 3082 0095 00       		.byte	0
 3083 0096 01       		.byte	1
 3084 0097 00       		.byte	0
 3085 0098 03       		.byte	3
 3086 0099 00       		.byte	0
 3087 009a 01       		.byte	1
 3088 009b 00       		.byte	0
 3089 009c 02       		.byte	2
 3090 009d 00       		.byte	0
 3091 009e 01       		.byte	1
 3092 009f 00       		.byte	0
 3093 00a0 05       		.byte	5
 3094 00a1 00       		.byte	0
 3095 00a2 01       		.byte	1
 3096 00a3 00       		.byte	0
 3097 00a4 02       		.byte	2
 3098 00a5 00       		.byte	0
 3099 00a6 01       		.byte	1
 3100 00a7 00       		.byte	0
 3101 00a8 03       		.byte	3
 3102 00a9 00       		.byte	0
 3103 00aa 01       		.byte	1
 3104 00ab 00       		.byte	0
 3105 00ac 02       		.byte	2
 3106 00ad 00       		.byte	0
 3107 00ae 01       		.byte	1
 3108 00af 00       		.byte	0
 3109 00b0 04       		.byte	4
 3110 00b1 00       		.byte	0
 3111 00b2 01       		.byte	1
 3112 00b3 00       		.byte	0
 3113 00b4 02       		.byte	2
 3114 00b5 00       		.byte	0
 3115 00b6 01       		.byte	1
 3116 00b7 00       		.byte	0
 3117 00b8 03       		.byte	3
 3118 00b9 00       		.byte	0
 3119 00ba 01       		.byte	1
 3120 00bb 00       		.byte	0
 3121 00bc 02       		.byte	2
 3122 00bd 00       		.byte	0
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 107


 3123 00be 01       		.byte	1
 3124 00bf 00       		.byte	0
 3125 00c0 06       		.byte	6
 3126 00c1 00       		.byte	0
 3127 00c2 01       		.byte	1
 3128 00c3 00       		.byte	0
 3129 00c4 02       		.byte	2
 3130 00c5 00       		.byte	0
 3131 00c6 01       		.byte	1
 3132 00c7 00       		.byte	0
 3133 00c8 03       		.byte	3
 3134 00c9 00       		.byte	0
 3135 00ca 01       		.byte	1
 3136 00cb 00       		.byte	0
 3137 00cc 02       		.byte	2
 3138 00cd 00       		.byte	0
 3139 00ce 01       		.byte	1
 3140 00cf 00       		.byte	0
 3141 00d0 04       		.byte	4
 3142 00d1 00       		.byte	0
 3143 00d2 01       		.byte	1
 3144 00d3 00       		.byte	0
 3145 00d4 02       		.byte	2
 3146 00d5 00       		.byte	0
 3147 00d6 01       		.byte	1
 3148 00d7 00       		.byte	0
 3149 00d8 03       		.byte	3
 3150 00d9 00       		.byte	0
 3151 00da 01       		.byte	1
 3152 00db 00       		.byte	0
 3153 00dc 02       		.byte	2
 3154 00dd 00       		.byte	0
 3155 00de 01       		.byte	1
 3156 00df 00       		.byte	0
 3157 00e0 05       		.byte	5
 3158 00e1 00       		.byte	0
 3159 00e2 01       		.byte	1
 3160 00e3 00       		.byte	0
 3161 00e4 02       		.byte	2
 3162 00e5 00       		.byte	0
 3163 00e6 01       		.byte	1
 3164 00e7 00       		.byte	0
 3165 00e8 03       		.byte	3
 3166 00e9 00       		.byte	0
 3167 00ea 01       		.byte	1
 3168 00eb 00       		.byte	0
 3169 00ec 02       		.byte	2
 3170 00ed 00       		.byte	0
 3171 00ee 01       		.byte	1
 3172 00ef 00       		.byte	0
 3173 00f0 04       		.byte	4
 3174 00f1 00       		.byte	0
 3175 00f2 01       		.byte	1
 3176 00f3 00       		.byte	0
 3177 00f4 02       		.byte	2
 3178 00f5 00       		.byte	0
 3179 00f6 01       		.byte	1
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 108


 3180 00f7 00       		.byte	0
 3181 00f8 03       		.byte	3
 3182 00f9 00       		.byte	0
 3183 00fa 01       		.byte	1
 3184 00fb 00       		.byte	0
 3185 00fc 02       		.byte	2
 3186 00fd 00       		.byte	0
 3187 00fe 01       		.byte	1
 3188 00ff 00       		.byte	0
 3189              		.section	.bss.PndHstTsk_Ptr,"aw",%nobits
 3190              		.align	2
 3191              		.set	.LANCHOR14,. + 0
 3194              	PndHstTsk_Ptr:
 3195 0000 00000000 		.space	4
 3196              		.section	.bss.CurRunTsk_Ptr,"aw",%nobits
 3197              		.align	2
 3198              		.set	.LANCHOR5,. + 0
 3201              	CurRunTsk_Ptr:
 3202 0000 00000000 		.space	4
 3203              		.section	.bss.traverse_start,"aw",%nobits
 3204              		.set	.LANCHOR12,. + 0
 3207              	traverse_start:
 3208 0000 00       		.space	1
 3209              		.text
 3210              	.Letext0:
 3211              		.file 3 "d:\\gcc_arm\\5.4 2016q3\\arm-none-eabi\\include\\machine\\_default_types.h"
 3212              		.file 4 "d:\\gcc_arm\\5.4 2016q3\\arm-none-eabi\\include\\sys\\_stdint.h"
 3213              		.file 5 "SYS/runtime/runtime.h"
 3214              		.file 6 "SYS/data_structure/linked_list.h"
 3215              		.file 7 "SYS/task_manager/task_manager.h"
 3216              		.file 8 "USER/stm32f4xx.h"
 3217              		.file 9 "d:\\gcc_arm\\5.4 2016q3\\arm-none-eabi\\include\\string.h"
 3218              		.file 10 "SYS/memng/mmu.h"
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 109


DEFINED SYMBOLS
                            *ABS*:00000000 task_manager.c
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:22     .text.Task_Exit:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:26     .text.Task_Exit:00000000 Task_Exit
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:41     .text.Task_SetBASEPRI:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:45     .text.Task_SetBASEPRI:00000000 Task_SetBASEPRI
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:65     .text.Task_SetReady:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:69     .text.Task_SetReady:00000000 Task_SetReady
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:121    .text.Task_SetReady:00000030 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:126    .text.Task_ClearBlock:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:130    .text.Task_ClearBlock:00000000 Task_ClearBlock
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:181    .text.Task_ClearBlock:00000038 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:186    .text.Task_ClearPending:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:190    .text.Task_ClearPending:00000000 Task_ClearPending
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:241    .text.Task_ClearPending:00000038 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:246    .text.Task_ClearReady:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:250    .text.Task_ClearReady:00000000 Task_ClearReady
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:301    .text.Task_ClearReady:00000038 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:306    .text.Task_SetPendSVPro:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:310    .text.Task_SetPendSVPro:00000000 Task_SetPendSVPro
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:320    *ABS*:e000ed22 NVIC_SYSPRI14
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:324    *ABS*:000000ff NVIC_PENDSV_PRI
                            *COM*:00000004 Task_OS_ExpStkBase
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:369    .text.Task_PriorityCompare:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:374    .text.Task_PriorityCompare:00000000 Task_PriorityCompare
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:473    .text.ReSet_Task_Data:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:477    .text.ReSet_Task_Data:00000000 ReSet_Task_Data
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:550    .text.TaskSys_Init:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:554    .text.TaskSys_Init:00000000 TaskSys_Init
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:670    .text.TaskSys_Init:0000007c $d
                            *COM*:00000100 Task_Ptr
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:681    .text.Task_SetStkPtr_Val:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:685    .text.Task_SetStkPtr_Val:00000000 Task_SetStkPtr_Val
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:747    .text.Task_SetStkPtr_Val:00000050 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:975    .text.Task_Caller:00000000 Task_Caller
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:754    .text.Task_Idle:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:758    .text.Task_Idle:00000000 Task_Idle
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:814    .text.Task_Idle:0000004c $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:821    .text.Task_Exec:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:825    .text.Task_Exec:00000000 Task_Exec
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:963    .text.Task_Exec:000000d0 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:970    .text.Task_Caller:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1014   .text.Task_Caller:00000028 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1022   .text.Task_CrtList_TraversePoll_callback:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1026   .text.Task_CrtList_TraversePoll_callback:00000000 Task_CrtList_TraversePoll_callback
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1082   .text.Task_CrtList_TraversePoll_callback:00000030 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1087   .text.Task_Resume_FromBlock:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1092   .text.Task_Resume_FromBlock:00000000 Task_Resume_FromBlock
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1130   .text.Task_Resume_FromBlock:00000028 $d
                            *COM*:00000008 NxtTsk_TCB
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1136   .text.Task_SetBlock:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1141   .text.Task_SetBlock:00000000 Task_SetBlock
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1213   .text.Task_SetBlock:0000005c $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1220   .text.Task_SetPending:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1225   .text.Task_SetPending:00000000 Task_SetPending
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1277   .text.Task_SetPending:00000030 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1282   .text.Task_SwitchStack:00000000 $t
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 110


C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1287   .text.Task_SwitchStack:00000000 Task_SwitchStack
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1303   .text.Task_SwitchStack:00000010 $d
                            *COM*:00000008 CurTsk_TCB
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1309   .text.Task_Get_HighestRank_PndTask:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1314   .text.Task_Get_HighestRank_PndTask:00000000 Task_Get_HighestRank_PndTask
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1391   .text.Task_Get_HighestRank_PndTask:00000054 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1398   .text.Task_SaveCurProc:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1403   .text.Task_SaveCurProc:00000000 Task_SaveCurProc
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1457   .text.Task_SaveCurProc:00000024 CurrentTCBConst_Tmp3
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1457   .text.Task_SaveCurProc:00000024 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1466   .text.Task_Load:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1471   .text.Task_Load:00000000 Task_Load
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1530   .text.Load_FirstTask:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1535   .text.Load_FirstTask:00000000 Load_FirstTask
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1554   .text.Task_SwitchContext:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1559   .text.Task_SwitchContext:00000000 Task_SwitchContext
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1677   .text.Task_SwitchContext:0000005c CurrentTCBConst_Tmp
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1677   .text.Task_SwitchContext:0000005c $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1690   .text.Task_Get_HighestRank_RdyTask:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1695   .text.Task_Get_HighestRank_RdyTask:00000000 Task_Get_HighestRank_RdyTask
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1777   .text.Task_Get_HighestRank_RdyTask:00000054 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1784   .text.Task_SetNextTask_Ptr:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1789   .text.Task_SetNextTask_Ptr:00000000 Task_SetNextTask_Ptr
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1814   .text.Task_SetNextTask_Ptr:00000014 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1820   .text.Task_TriggerPendSV:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1825   .text.Task_TriggerPendSV:00000000 Task_TriggerPendSV
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1835   *ABS*:e000ed04 NVIC_INT_CTRL
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1839   *ABS*:10000000 NVIC_PENDSVSET
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1864   .text.Task_Scheduler:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1869   .text.Task_Scheduler:00000000 Task_Scheduler
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2106   .text.Task_Scheduler:00000144 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2118   .text.Task_Force_TriggerPendSV:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2123   .text.Task_Force_TriggerPendSV:00000000 Task_Force_TriggerPendSV
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2153   .text.Task_Get_TaskNum:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2158   .text.Task_Get_TaskNum:00000000 Task_Get_TaskNum
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2172   .text.Task_Get_TaskNum:00000008 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2180   .text.Task_Create:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2185   .text.Task_Create:00000000 Task_Create
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2440   .text.Task_Create:000001e8 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2452   .text.Task_Remove:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2457   .text.Task_Remove:00000000 Task_Remove
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2504   .text.Task_Remove:00000030 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2509   .text.TaskSystem_Start:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2514   .text.TaskSystem_Start:00000000 TaskSystem_Start
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2582   .text.TaskSystem_Start:0000005c $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2591   .text.Task_SetRunState:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2596   .text.Task_SetRunState:00000000 Task_SetRunState
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2611   .text.Task_Get_IdleUS:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2616   .text.Task_Get_IdleUS:00000000 Task_Get_IdleUS
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2630   .text.Task_Get_IdleUS:00000008 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2635   .text.Task_Get_IdleOcupy:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2640   .text.Task_Get_IdleOcupy:00000000 Task_Get_IdleOcupy
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2654   .text.Task_Get_IdleOcupy:00000008 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2659   .text.TaskSys_Set_State:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2664   .text.TaskSys_Set_State:00000000 TaskSys_Set_State
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2679   .text.TaskSys_Set_State:00000008 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2684   .text.TaskSys_Get_State:00000000 $t
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 111


C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2689   .text.TaskSys_Get_State:00000000 TaskSys_Get_State
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2704   .text.TaskSys_Get_State:00000008 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2709   .text.Task_GetInfo_ByIndex:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2714   .text.Task_GetInfo_ByIndex:00000000 Task_GetInfo_ByIndex
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2728   .text.Task_GetCurrentRunTask:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2733   .text.Task_GetCurrentRunTask:00000000 Task_GetCurrentRunTask
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2747   .text.Task_GetCurrentRunTask:00000008 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2752   .text.Task_Statistic_Cast:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2757   .text.Task_Statistic_Cast:00000000 Task_Statistic_Cast
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2784   .text.Task_Statistic_Cast:00000018 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2789   .text.Task_GetStackRemain:00000000 $t
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2794   .text.Task_GetStackRemain:00000000 Task_GetStackRemain
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:3194   .bss.PndHstTsk_Ptr:00000000 PndHstTsk_Ptr
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2918   .bss.NxtRunTsk_Ptr:00000000 NxtRunTsk_Ptr
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:3201   .bss.CurRunTsk_Ptr:00000000 CurRunTsk_Ptr
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2847   .bss.TskHdl_RdyMap:00000000 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2851   .bss.TskHdl_RdyMap:00000000 TskHdl_RdyMap
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2857   .bss.i.10166:00000000 i.10166
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2858   .bss.i.10166:00000000 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2860   .bss.TaskSys_StartTime:00000000 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2864   .bss.TaskSys_StartTime:00000000 TaskSys_StartTime
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2870   .bss.taskOs_InitState.10135:00000000 taskOs_InitState.10135
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2871   .bss.taskOs_InitState.10135:00000000 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2873   .bss.TaskSys_Idle_Ocupy:00000000 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2877   .bss.TaskSys_Idle_Ocupy:00000000 TaskSys_Idle_Ocupy
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2880   .bss.Task_OS_StkMem:00000000 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2884   .bss.Task_OS_StkMem:00000000 Task_OS_StkMem
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2887   .bss.TskHdl_PndMap:00000000 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2891   .bss.TskHdl_PndMap:00000000 TskHdl_PndMap
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2894   .bss.TaskSys_Idle_US:00000000 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2898   .bss.TaskSys_Idle_US:00000000 TaskSys_Idle_US
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2904   .bss.TskSys_state:00000000 TskSys_state
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2905   .bss.TskSys_state:00000000 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2907   .bss.TskHdl_BlkMap:00000000 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2911   .bss.TskHdl_BlkMap:00000000 TskHdl_BlkMap
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2914   .bss.NxtRunTsk_Ptr:00000000 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2921   .bss.TskCrt_RegList:00000000 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2925   .bss.TskCrt_RegList:00000000 TskCrt_RegList
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2928   .rodata.Tsk_Handle:00000000 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:2932   .rodata.Tsk_Handle:00000000 Tsk_Handle
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:3190   .bss.PndHstTsk_Ptr:00000000 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:3197   .bss.CurRunTsk_Ptr:00000000 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:3207   .bss.traverse_start:00000000 traverse_start
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:3208   .bss.traverse_start:00000000 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:1863   .text.Task_TriggerPendSV:0000000a $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:10116  .text.Task_TriggerPendSV:0000000c $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:10116  .text.Task_Load:00000020 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:368    .text.Task_SetPendSVPro:00000016 $d
C:\Users\why\AppData\Local\Temp\cce4jRTs.s:10116  .text.Task_SetPendSVPro:00000018 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
List_ItemInit
RuntimeObj_Reset
memset
__aeabi_ul2f
Get_CurrentRunningUs
ARM GAS  C:\Users\why\AppData\Local\Temp\cce4jRTs.s 			page 112


Get_TimeDifference_Between
Get_TargetRunTime
RuntimeObj_CompareWithCurrent
List_traverse
__aeabi_ui2d
__aeabi_ddiv
__aeabi_d2uiz
MMU_Malloc
List_Init
List_Insert_Item
MMU_Free
Runtime_Config
Runtime_Set_start_Callback
Runtime_Set_stop_Callback
Runtime_Set_tick_Callback
Runtime_Start
