ARM GAS  /tmp/ccHlURRu.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"task_manager.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.Task_Exit,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	Task_Exit:
  25              	.LFB127:
  26              		.file 1 "SYS/task_manager/task_manager.c"
   1:SYS/task_manager/task_manager.c **** #include "task_manager.h"
   2:SYS/task_manager/task_manager.c **** #include "runtime.h"
   3:SYS/task_manager/task_manager.c **** #include "string.h"
   4:SYS/task_manager/task_manager.c **** #include "stddef.h"
   5:SYS/task_manager/task_manager.c **** #include "periph_gpio.h"
   6:SYS/task_manager/task_manager.c **** #include "periph_timer.h"
   7:SYS/task_manager/task_manager.c **** #include <stdio.h>
   8:SYS/task_manager/task_manager.c **** #include "task_manager_cfg.h"
   9:SYS/task_manager/task_manager.c **** #include "binary_tree.h"
  10:SYS/task_manager/task_manager.c **** #include "linked_list.h"
  11:SYS/task_manager/task_manager.c **** #include "mmu.h"
  12:SYS/task_manager/task_manager.c **** 
  13:SYS/task_manager/task_manager.c **** //coder: 8_B!T0
  14:SYS/task_manager/task_manager.c **** //bref:
  15:SYS/task_manager/task_manager.c **** //estabishment a task running system with priority calling functional
  16:SYS/task_manager/task_manager.c **** //alway calling the highest priority function in all function under the ready table
  17:SYS/task_manager/task_manager.c **** //reference to ucos (version earler than v8.6)
  18:SYS/task_manager/task_manager.c **** 
  19:SYS/task_manager/task_manager.c **** /*
  20:SYS/task_manager/task_manager.c **** *******************************   TASK Handle    *******************************
  21:SYS/task_manager/task_manager.c **** 
  22:SYS/task_manager/task_manager.c ****              task0   task1   task2   task3   task4   task5   task6   task7
  23:SYS/task_manager/task_manager.c **** group0     |_______|_______|_______|_______|_______|_______|_______|_______|
  24:SYS/task_manager/task_manager.c **** group1     |_______|_______|_______|_______|_______|_______|_______|_______|
  25:SYS/task_manager/task_manager.c **** group2     |_______|_______|_______|_______|_______|_______|_______|_______|
  26:SYS/task_manager/task_manager.c **** group3     |_______|_______|_______|_______|_______|_______|_______|_______|
  27:SYS/task_manager/task_manager.c **** group4     |_______|_______|_______|_______|_______|_______|_______|_______|
  28:SYS/task_manager/task_manager.c **** group5     |_______|_______|_______|_______|_______|_______|_______|_______|
  29:SYS/task_manager/task_manager.c **** group6     |_______|_______|_______|_______|_______|_______|_______|_______|
  30:SYS/task_manager/task_manager.c **** group7     |_______|_______|_______|_______|_______|_______|_______|_______|
  31:SYS/task_manager/task_manager.c **** 
  32:SYS/task_manager/task_manager.c **** */
ARM GAS  /tmp/ccHlURRu.s 			page 2


  33:SYS/task_manager/task_manager.c **** 
  34:SYS/task_manager/task_manager.c **** #define GET_TASKGROUP_PRIORITY(x) x >> 3
  35:SYS/task_manager/task_manager.c **** #define GET_TASKINGROUP_PRIORITY(y) y & 0X07
  36:SYS/task_manager/task_manager.c **** 
  37:SYS/task_manager/task_manager.c **** static const uint8_t Tsk_Handle[256] = {0, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,  //0x00 ~ 0
  38:SYS/task_manager/task_manager.c ****                                         4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,  //0x10 ~ 0
  39:SYS/task_manager/task_manager.c ****                                         5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,  //0x20 ~ 0
  40:SYS/task_manager/task_manager.c ****                                         4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,  //0x30 ~ 0
  41:SYS/task_manager/task_manager.c ****                                         6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,  //0x40 ~ 0
  42:SYS/task_manager/task_manager.c ****                                         4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,  //0x50 ~ 0
  43:SYS/task_manager/task_manager.c ****                                         5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,  //0x60 ~ 0
  44:SYS/task_manager/task_manager.c ****                                         4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,  //0x70 ~ 0
  45:SYS/task_manager/task_manager.c ****                                         7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,  //0x80 ~ 0
  46:SYS/task_manager/task_manager.c ****                                         4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,  //0x90 ~ 0
  47:SYS/task_manager/task_manager.c ****                                         5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,  //0xA0 ~ 0
  48:SYS/task_manager/task_manager.c ****                                         4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,  //0xB0 ~ 0
  49:SYS/task_manager/task_manager.c ****                                         6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,  //0xC0 ~ 0
  50:SYS/task_manager/task_manager.c ****                                         4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,  //0xD0 ~ 0
  51:SYS/task_manager/task_manager.c ****                                         5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,  //0xE0 ~ 0
  52:SYS/task_manager/task_manager.c ****                                         4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0}; //0xF0 ~ 0
  53:SYS/task_manager/task_manager.c **** 
  54:SYS/task_manager/task_manager.c **** Task *Task_Ptr[Group_Sum][Task_Priority_Sum];
  55:SYS/task_manager/task_manager.c **** volatile Task *CurRunTsk_Ptr = NULL;
  56:SYS/task_manager/task_manager.c **** volatile Task *NxtRunTsk_Ptr = NULL;
  57:SYS/task_manager/task_manager.c **** static bool traverse_start = false;
  58:SYS/task_manager/task_manager.c **** 
  59:SYS/task_manager/task_manager.c **** static volatile TskMap_State TskHdl_RdyMap = {.Grp = 0, .TskInGrp[0] = 0, .TskInGrp[1] = 0, .TskInG
  60:SYS/task_manager/task_manager.c **** static volatile TskMap_State TskHdl_PndMap = {.Grp = 0, .TskInGrp[0] = 0, .TskInGrp[1] = 0, .TskInG
  61:SYS/task_manager/task_manager.c **** static volatile TskMap_State TskHdl_BlkMap = {.Grp = 0, .TskInGrp[0] = 0, .TskInGrp[1] = 0, .TskInG
  62:SYS/task_manager/task_manager.c **** 
  63:SYS/task_manager/task_manager.c **** static Task_Create_RegList_s TskCrt_RegList = {.num = 0,
  64:SYS/task_manager/task_manager.c ****                                                .list = {.prv = NULL, .nxt = NULL, .data = NULL}};
  65:SYS/task_manager/task_manager.c **** static volatile TaskSys_State TskSys_state = TaskSys_Initial;
  66:SYS/task_manager/task_manager.c **** static uint32_t TaskSys_Idle_US = 0;
  67:SYS/task_manager/task_manager.c **** static float TaskSys_Idle_Ocupy = 0.0f;
  68:SYS/task_manager/task_manager.c **** static SYSTEM_RunTime TaskSys_StartTime;
  69:SYS/task_manager/task_manager.c **** 
  70:SYS/task_manager/task_manager.c **** static void Task_SetReady(Task *tsk);
  71:SYS/task_manager/task_manager.c **** static void Task_ClearReady(Task *tsk);
  72:SYS/task_manager/task_manager.c **** 
  73:SYS/task_manager/task_manager.c **** #if (TASK_SCHEDULER_TYPE == PREEMPTIVE_SCHDULER)
  74:SYS/task_manager/task_manager.c **** volatile Task *PndHstTsk_Ptr = NULL;
  75:SYS/task_manager/task_manager.c **** 
  76:SYS/task_manager/task_manager.c **** volatile TaskStack_ControlBlock CurTsk_TCB;
  77:SYS/task_manager/task_manager.c **** volatile TaskStack_ControlBlock NxtTsk_TCB;
  78:SYS/task_manager/task_manager.c **** 
  79:SYS/task_manager/task_manager.c **** static uint32_t Task_OS_StkMem[MSP_MEM_SPACE_SIZE];
  80:SYS/task_manager/task_manager.c **** uint32_t *Task_OS_ExpStkBase;
  81:SYS/task_manager/task_manager.c **** 
  82:SYS/task_manager/task_manager.c **** static void Task_SetStkPtr_Val(Task *tsk);
  83:SYS/task_manager/task_manager.c **** static void Task_ClearPending(Task *tsk);
  84:SYS/task_manager/task_manager.c **** static void Task_ClearBlock(Task *tsk);
  85:SYS/task_manager/task_manager.c **** static void Task_SetBASEPRI(uint32_t ulBASEPRI);
  86:SYS/task_manager/task_manager.c **** 
  87:SYS/task_manager/task_manager.c **** void Task_SetPending(Task *tsk);
  88:SYS/task_manager/task_manager.c **** #endif
  89:SYS/task_manager/task_manager.c **** 
ARM GAS  /tmp/ccHlURRu.s 			page 3


  90:SYS/task_manager/task_manager.c **** static void Task_Exec(Task *tsk_ptr);
  91:SYS/task_manager/task_manager.c **** static void Task_SetPendSVPro(void);
  92:SYS/task_manager/task_manager.c **** void Task_TriggerPendSV(void);
  93:SYS/task_manager/task_manager.c **** 
  94:SYS/task_manager/task_manager.c **** static void ReSet_Task_Data(Task *task)
  95:SYS/task_manager/task_manager.c **** {
  96:SYS/task_manager/task_manager.c ****     task->priority.Suction.Group_Level = 0;
  97:SYS/task_manager/task_manager.c ****     task->priority.Suction.Task_Level = 0;
  98:SYS/task_manager/task_manager.c ****     task->Task_name = NULL;
  99:SYS/task_manager/task_manager.c ****     task->exec_frq = 0;
 100:SYS/task_manager/task_manager.c ****     task->exec_interval_us = 0;
 101:SYS/task_manager/task_manager.c ****     task->Exec_Func = NULL;
 102:SYS/task_manager/task_manager.c **** 
 103:SYS/task_manager/task_manager.c ****     task->Exec_status.detect_exec_frq = 0;
 104:SYS/task_manager/task_manager.c ****     task->Exec_status.detect_exec_time_arv = 0;
 105:SYS/task_manager/task_manager.c ****     task->Exec_status.detect_exec_time_max = 0;
 106:SYS/task_manager/task_manager.c ****     task->Exec_status.Exec_Times = 0;
 107:SYS/task_manager/task_manager.c ****     task->Exec_status.cpu_opy = 0;
 108:SYS/task_manager/task_manager.c ****     task->Exec_status.totlal_running_time = 0;
 109:SYS/task_manager/task_manager.c **** 
 110:SYS/task_manager/task_manager.c ****     task->delay_info.on_delay = false;
 111:SYS/task_manager/task_manager.c ****     task->delay_info.tsk_hdl = 0;
 112:SYS/task_manager/task_manager.c ****     task->delay_info.time_unit = 0;
 113:SYS/task_manager/task_manager.c **** 
 114:SYS/task_manager/task_manager.c ****     List_ItemInit(&task->delay_item, &task->delay_info);
 115:SYS/task_manager/task_manager.c **** 
 116:SYS/task_manager/task_manager.c ****     RuntimeObj_Reset(&(task->Exec_status.Exec_Time));
 117:SYS/task_manager/task_manager.c ****     RuntimeObj_Reset(&(task->Exec_status.Init_Time));
 118:SYS/task_manager/task_manager.c ****     RuntimeObj_Reset(&(task->Exec_status.Start_Time));
 119:SYS/task_manager/task_manager.c **** 
 120:SYS/task_manager/task_manager.c ****     task->Exec_status.State = Task_Done;
 121:SYS/task_manager/task_manager.c **** }
 122:SYS/task_manager/task_manager.c **** 
 123:SYS/task_manager/task_manager.c **** static void Task_ReSet_BaseInfo(Task_Base_Info *info)
 124:SYS/task_manager/task_manager.c **** {
 125:SYS/task_manager/task_manager.c ****     info->avg_exec_us = 0;
 126:SYS/task_manager/task_manager.c ****     info->cpu_opy = 0;
 127:SYS/task_manager/task_manager.c ****     info->exec_frq = 0;
 128:SYS/task_manager/task_manager.c ****     info->exec_times = 0;
 129:SYS/task_manager/task_manager.c ****     info->group = 0;
 130:SYS/task_manager/task_manager.c ****     info->max_exec_us = 0;
 131:SYS/task_manager/task_manager.c ****     info->priority = 0;
 132:SYS/task_manager/task_manager.c **** 
 133:SYS/task_manager/task_manager.c ****     memset(info->name, NULL, TASK_NAME_MAXLEN);
 134:SYS/task_manager/task_manager.c **** }
 135:SYS/task_manager/task_manager.c **** 
 136:SYS/task_manager/task_manager.c **** static bool TaskSys_Init(void)
 137:SYS/task_manager/task_manager.c **** {
 138:SYS/task_manager/task_manager.c **** #if (TASK_SCHEDULER_TYPE == PREEMPTIVE_SCHDULER)
 139:SYS/task_manager/task_manager.c ****     //init OS Stack Memory Space
 140:SYS/task_manager/task_manager.c ****     memset(Task_OS_StkMem, NULL, MSP_MEM_SPACE_SIZE);
 141:SYS/task_manager/task_manager.c **** 
 142:SYS/task_manager/task_manager.c ****     Task_OS_ExpStkBase = Task_OS_StkMem + MSP_MEM_SPACE_SIZE - 1;
 143:SYS/task_manager/task_manager.c **** #endif
 144:SYS/task_manager/task_manager.c **** 
 145:SYS/task_manager/task_manager.c ****     //periph_Timer_CounterMode_Init(Timer_4, TimerCounter_1M_Prescaler, TimerCounter_1us_Period, 0,
 146:SYS/task_manager/task_manager.c ****     //periph_Timer_Counter_SetEnable(Timer_4, DISABLE);
ARM GAS  /tmp/ccHlURRu.s 			page 4


 147:SYS/task_manager/task_manager.c **** 
 148:SYS/task_manager/task_manager.c ****     uint8_t index = 0;
 149:SYS/task_manager/task_manager.c **** 
 150:SYS/task_manager/task_manager.c ****     for (uint8_t group_index = Group_0; group_index < Group_Sum; group_index++)
 151:SYS/task_manager/task_manager.c ****     {
 152:SYS/task_manager/task_manager.c ****         for (uint8_t task_priority = Task_Priority_0; task_priority < Task_Priority_Sum; task_prior
 153:SYS/task_manager/task_manager.c ****         {
 154:SYS/task_manager/task_manager.c ****             ReSet_Task_Data(Task_Ptr[group_index][task_priority]);
 155:SYS/task_manager/task_manager.c **** 
 156:SYS/task_manager/task_manager.c **** #if (TASK_SCHEDULER_TYPE == PREEMPTIVE_SCHDULER)
 157:SYS/task_manager/task_manager.c ****             Task_Ptr[group_index][task_priority]->Stack_Depth = 0;
 158:SYS/task_manager/task_manager.c ****             Task_Ptr[group_index][task_priority]->TCB.Stack = NULL;
 159:SYS/task_manager/task_manager.c ****             Task_Ptr[group_index][task_priority]->TCB.Top_Stk_Ptr = NULL;
 160:SYS/task_manager/task_manager.c **** #endif
 161:SYS/task_manager/task_manager.c ****             Task_Ptr[group_index][task_priority] = NULL;
 162:SYS/task_manager/task_manager.c **** 
 163:SYS/task_manager/task_manager.c ****             index++;
 164:SYS/task_manager/task_manager.c ****         }
 165:SYS/task_manager/task_manager.c ****     }
 166:SYS/task_manager/task_manager.c **** 
 167:SYS/task_manager/task_manager.c ****     TskCrt_RegList.num = 0;
 168:SYS/task_manager/task_manager.c ****     TskCrt_RegList.list.data = NULL;
 169:SYS/task_manager/task_manager.c ****     TskCrt_RegList.list.nxt = NULL;
 170:SYS/task_manager/task_manager.c ****     TskCrt_RegList.list.prv = NULL;
 171:SYS/task_manager/task_manager.c **** 
 172:SYS/task_manager/task_manager.c ****     ReSet_Task_Data(CurRunTsk_Ptr);
 173:SYS/task_manager/task_manager.c ****     TskSys_state = TaskSys_Prepare;
 174:SYS/task_manager/task_manager.c **** 
 175:SYS/task_manager/task_manager.c ****     NVIC_SetPriority(PendSV_IRQn, 15);
 176:SYS/task_manager/task_manager.c **** }
 177:SYS/task_manager/task_manager.c **** 
 178:SYS/task_manager/task_manager.c **** static void Task_Exit(void)
 179:SYS/task_manager/task_manager.c **** {
  27              		.loc 1 179 0
  28              		.cfi_startproc
  29              		@ Volatile: function does not return.
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.L2:
  34 0000 FEE7     		b	.L2
  35              		.cfi_endproc
  36              	.LFE127:
  38              		.section	.text.Task_SetBASEPRI,"ax",%progbits
  39              		.align	1
  40              		.syntax unified
  41              		.thumb
  42              		.thumb_func
  43              		.fpu fpv4-sp-d16
  45              	Task_SetBASEPRI:
  46              	.LFB135:
 180:SYS/task_manager/task_manager.c ****     //task caller will not exit
 181:SYS/task_manager/task_manager.c ****     while (true)
 182:SYS/task_manager/task_manager.c ****     {
 183:SYS/task_manager/task_manager.c ****     }
 184:SYS/task_manager/task_manager.c **** }
 185:SYS/task_manager/task_manager.c **** 
ARM GAS  /tmp/ccHlURRu.s 			page 5


 186:SYS/task_manager/task_manager.c **** static void Task_Idle(void)
 187:SYS/task_manager/task_manager.c **** {
 188:SYS/task_manager/task_manager.c ****     SYSTEM_RunTime cur_time;
 189:SYS/task_manager/task_manager.c ****     SYSTEM_RunTime time_diff;
 190:SYS/task_manager/task_manager.c **** 
 191:SYS/task_manager/task_manager.c ****     RuntimeObj_Reset(&time_diff);
 192:SYS/task_manager/task_manager.c ****     RuntimeObj_Reset(&cur_time);
 193:SYS/task_manager/task_manager.c **** 
 194:SYS/task_manager/task_manager.c ****     cur_time = Get_CurrentRunningUs();
 195:SYS/task_manager/task_manager.c ****     time_diff = Get_TimeDifference_Between(TaskSys_StartTime, cur_time);
 196:SYS/task_manager/task_manager.c **** 
 197:SYS/task_manager/task_manager.c ****     TaskSys_Idle_US++;
 198:SYS/task_manager/task_manager.c ****     TaskSys_Idle_Ocupy = (TaskSys_Idle_US / (float)time_diff);
 199:SYS/task_manager/task_manager.c **** }
 200:SYS/task_manager/task_manager.c **** 
 201:SYS/task_manager/task_manager.c **** #if (TASK_SCHEDULER_TYPE == PREEMPTIVE_SCHDULER)
 202:SYS/task_manager/task_manager.c **** 
 203:SYS/task_manager/task_manager.c **** void Task_Resume_FromBlock(Task *tsk)
 204:SYS/task_manager/task_manager.c **** {
 205:SYS/task_manager/task_manager.c ****     Task_ClearBlock(tsk);
 206:SYS/task_manager/task_manager.c ****     Task_SetReady(tsk);
 207:SYS/task_manager/task_manager.c **** 
 208:SYS/task_manager/task_manager.c ****     tsk->Exec_status.State = Task_Running;
 209:SYS/task_manager/task_manager.c ****     NxtTsk_TCB.Top_Stk_Ptr = &tsk->TCB.Top_Stk_Ptr;
 210:SYS/task_manager/task_manager.c ****     NxtTsk_TCB.Stack = tsk->TCB.Stack;
 211:SYS/task_manager/task_manager.c ****     CurRunTsk_Ptr = tsk;
 212:SYS/task_manager/task_manager.c **** }
 213:SYS/task_manager/task_manager.c **** 
 214:SYS/task_manager/task_manager.c **** void Task_SetBlock(Task *tsk)
 215:SYS/task_manager/task_manager.c **** {
 216:SYS/task_manager/task_manager.c ****     uint8_t grp_id = GET_TASKGROUP_PRIORITY(tsk->priority.Priority);
 217:SYS/task_manager/task_manager.c ****     uint8_t tsk_id = GET_TASKINGROUP_PRIORITY(tsk->priority.Priority);
 218:SYS/task_manager/task_manager.c **** 
 219:SYS/task_manager/task_manager.c ****     //set current group block
 220:SYS/task_manager/task_manager.c ****     TskHdl_BlkMap.Grp.Flg |= 1 << grp_id;
 221:SYS/task_manager/task_manager.c ****     //set current task under this group flag to block
 222:SYS/task_manager/task_manager.c ****     TskHdl_BlkMap.TskInGrp[grp_id].Flg |= 1 << tsk_id;
 223:SYS/task_manager/task_manager.c **** 
 224:SYS/task_manager/task_manager.c ****     //reset task in ready reg group
 225:SYS/task_manager/task_manager.c ****     TskHdl_RdyMap.TskInGrp[grp_id].Flg &= ~(1 << tsk_id);
 226:SYS/task_manager/task_manager.c ****     //if no task ready then clear group reg
 227:SYS/task_manager/task_manager.c ****     if (TskHdl_RdyMap.TskInGrp[grp_id].Flg == 0)
 228:SYS/task_manager/task_manager.c ****     {
 229:SYS/task_manager/task_manager.c ****         TskHdl_RdyMap.Grp.Flg &= ~(1 << grp_id);
 230:SYS/task_manager/task_manager.c ****     }
 231:SYS/task_manager/task_manager.c **** 
 232:SYS/task_manager/task_manager.c ****     //set task state
 233:SYS/task_manager/task_manager.c ****     tsk->Exec_status.State = Task_Block;
 234:SYS/task_manager/task_manager.c **** 
 235:SYS/task_manager/task_manager.c ****     CurRunTsk_Ptr = NULL;
 236:SYS/task_manager/task_manager.c **** 
 237:SYS/task_manager/task_manager.c ****     Task_SetBASEPRI(0);
 238:SYS/task_manager/task_manager.c **** }
 239:SYS/task_manager/task_manager.c **** 
 240:SYS/task_manager/task_manager.c **** void Task_SetPending(Task *tsk)
 241:SYS/task_manager/task_manager.c **** {
 242:SYS/task_manager/task_manager.c ****     uint8_t grp_id = GET_TASKGROUP_PRIORITY(tsk->priority.Priority);
ARM GAS  /tmp/ccHlURRu.s 			page 6


 243:SYS/task_manager/task_manager.c ****     uint8_t tsk_id = GET_TASKINGROUP_PRIORITY(tsk->priority.Priority);
 244:SYS/task_manager/task_manager.c **** 
 245:SYS/task_manager/task_manager.c ****     //set current group pending
 246:SYS/task_manager/task_manager.c ****     TskHdl_PndMap.Grp.Flg |= 1 << grp_id;
 247:SYS/task_manager/task_manager.c ****     //set current task under this group flag to ready
 248:SYS/task_manager/task_manager.c ****     TskHdl_PndMap.TskInGrp[grp_id].Flg |= 1 << tsk_id;
 249:SYS/task_manager/task_manager.c **** 
 250:SYS/task_manager/task_manager.c ****     //set task state
 251:SYS/task_manager/task_manager.c ****     tsk->Exec_status.State = Task_Pending;
 252:SYS/task_manager/task_manager.c **** }
 253:SYS/task_manager/task_manager.c **** 
 254:SYS/task_manager/task_manager.c **** void Task_SwitchStack(void)
 255:SYS/task_manager/task_manager.c **** {
 256:SYS/task_manager/task_manager.c ****     CurTsk_TCB = NxtTsk_TCB;
 257:SYS/task_manager/task_manager.c **** }
 258:SYS/task_manager/task_manager.c **** 
 259:SYS/task_manager/task_manager.c **** Task *Task_Get_HighestRank_PndTask(void)
 260:SYS/task_manager/task_manager.c **** {
 261:SYS/task_manager/task_manager.c ****     uint8_t grp_id;
 262:SYS/task_manager/task_manager.c ****     uint8_t tsk_id;
 263:SYS/task_manager/task_manager.c **** 
 264:SYS/task_manager/task_manager.c ****     if (TskHdl_PndMap.Grp.Flg)
 265:SYS/task_manager/task_manager.c ****     {
 266:SYS/task_manager/task_manager.c ****         //find group
 267:SYS/task_manager/task_manager.c ****         grp_id = Tsk_Handle[TskHdl_PndMap.Grp.Flg];
 268:SYS/task_manager/task_manager.c ****         //find task in group
 269:SYS/task_manager/task_manager.c ****         tsk_id = Tsk_Handle[TskHdl_PndMap.TskInGrp[grp_id].Flg];
 270:SYS/task_manager/task_manager.c ****     }
 271:SYS/task_manager/task_manager.c ****     else
 272:SYS/task_manager/task_manager.c ****         return NULL;
 273:SYS/task_manager/task_manager.c **** 
 274:SYS/task_manager/task_manager.c ****     if (Task_Ptr[grp_id][tsk_id] != NULL)
 275:SYS/task_manager/task_manager.c ****     {
 276:SYS/task_manager/task_manager.c ****         return Task_Ptr[grp_id][tsk_id];
 277:SYS/task_manager/task_manager.c ****     }
 278:SYS/task_manager/task_manager.c ****     else
 279:SYS/task_manager/task_manager.c ****     {
 280:SYS/task_manager/task_manager.c ****         TskHdl_PndMap.Grp.Flg &= ~(1 << grp_id);
 281:SYS/task_manager/task_manager.c ****         TskHdl_PndMap.TskInGrp[grp_id].Flg &= ~(1 << tsk_id);
 282:SYS/task_manager/task_manager.c ****         return NULL;
 283:SYS/task_manager/task_manager.c ****     }
 284:SYS/task_manager/task_manager.c **** }
 285:SYS/task_manager/task_manager.c **** 
 286:SYS/task_manager/task_manager.c **** static uint32_t Task_EnterCritical(void)
 287:SYS/task_manager/task_manager.c **** {
 288:SYS/task_manager/task_manager.c ****     /* Set BASEPRI to the max syscall priority to effect a critical
 289:SYS/task_manager/task_manager.c **** 	section. */
 290:SYS/task_manager/task_manager.c ****     uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 291:SYS/task_manager/task_manager.c **** 
 292:SYS/task_manager/task_manager.c ****     __asm volatile(
 293:SYS/task_manager/task_manager.c ****         "	mrs %0, basepri											\n"
 294:SYS/task_manager/task_manager.c ****         "	mov %1, %2												\n"
 295:SYS/task_manager/task_manager.c ****         "	msr basepri, %1											\n"
 296:SYS/task_manager/task_manager.c ****         "	isb														\n"
 297:SYS/task_manager/task_manager.c ****         "	dsb														\n"
 298:SYS/task_manager/task_manager.c ****         : "=r"(ulOriginalBASEPRI), "=r"(ulNewBASEPRI)
 299:SYS/task_manager/task_manager.c ****         : "i"(80)
ARM GAS  /tmp/ccHlURRu.s 			page 7


 300:SYS/task_manager/task_manager.c ****         : "memory");
 301:SYS/task_manager/task_manager.c **** 
 302:SYS/task_manager/task_manager.c ****     /* This return will not be reached but is necessary to prevent compiler
 303:SYS/task_manager/task_manager.c **** 	warnings. */
 304:SYS/task_manager/task_manager.c ****     return ulOriginalBASEPRI;
 305:SYS/task_manager/task_manager.c **** }
 306:SYS/task_manager/task_manager.c **** 
 307:SYS/task_manager/task_manager.c **** __attribute__((nake)) static void Task_SetBASEPRI(uint32_t ulBASEPRI)
 308:SYS/task_manager/task_manager.c **** {
  47              		.loc 1 308 0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  51              		@ link register save eliminated.
  52              	.LVL0:
 309:SYS/task_manager/task_manager.c ****     __ASM("	msr basepri, %0	" ::"r"(ulBASEPRI)
  53              		.loc 1 309 0
  54              		.syntax unified
  55              	@ 309 "SYS/task_manager/task_manager.c" 1
  56 0000 80F31188 			msr basepri, r0	
  57              	@ 0 "" 2
  58              		.thumb
  59              		.syntax unified
  60 0004 7047     		bx	lr
  61              		.cfi_endproc
  62              	.LFE135:
  64              		.section	.text.Task_SetReady,"ax",%progbits
  65              		.align	1
  66              		.syntax unified
  67              		.thumb
  68              		.thumb_func
  69              		.fpu fpv4-sp-d16
  71              	Task_SetReady:
  72              	.LFB143:
 310:SYS/task_manager/task_manager.c ****           : "memory");
 311:SYS/task_manager/task_manager.c **** }
 312:SYS/task_manager/task_manager.c **** 
 313:SYS/task_manager/task_manager.c **** __attribute__((naked)) static void Task_ExitCritical(void)
 314:SYS/task_manager/task_manager.c **** {
 315:SYS/task_manager/task_manager.c ****     /* Barrier instructions are not used as this function is only used to
 316:SYS/task_manager/task_manager.c **** 	lower the BASEPRI value. */
 317:SYS/task_manager/task_manager.c ****     __ASM("	msr basepri, %0	" ::"r"(0)
 318:SYS/task_manager/task_manager.c ****           : "memory");
 319:SYS/task_manager/task_manager.c **** }
 320:SYS/task_manager/task_manager.c **** 
 321:SYS/task_manager/task_manager.c **** __attribute__((naked)) static void Task_Recover(void)
 322:SYS/task_manager/task_manager.c **** {
 323:SYS/task_manager/task_manager.c ****     __ASM("LDR	  R3, CurrentTCBConst_Tmp2");
 324:SYS/task_manager/task_manager.c ****     __ASM("LDR    R1, [R3]");
 325:SYS/task_manager/task_manager.c ****     __ASM("LDR    R0, [R1]");
 326:SYS/task_manager/task_manager.c **** 
 327:SYS/task_manager/task_manager.c ****     __ASM("LDMIA  R0!, {R4-R11, R14}");
 328:SYS/task_manager/task_manager.c **** 
 329:SYS/task_manager/task_manager.c ****     __ASM("MSR    PSP, R0");
 330:SYS/task_manager/task_manager.c ****     __ASM("ISB");
 331:SYS/task_manager/task_manager.c ****     __ASM("BX     R14");
 332:SYS/task_manager/task_manager.c ****     __ASM(".ALIGN 4");
ARM GAS  /tmp/ccHlURRu.s 			page 8


 333:SYS/task_manager/task_manager.c ****     __ASM("CurrentTCBConst_Tmp2: .word CurTsk_TCB");
 334:SYS/task_manager/task_manager.c **** }
 335:SYS/task_manager/task_manager.c **** 
 336:SYS/task_manager/task_manager.c **** __attribute__((naked)) void Task_SaveCurProc(void)
 337:SYS/task_manager/task_manager.c **** {
 338:SYS/task_manager/task_manager.c ****     __ASM("MRS    R0, PSP");
 339:SYS/task_manager/task_manager.c ****     __ASM("LDR	  R3, CurrentTCBConst_Tmp3");
 340:SYS/task_manager/task_manager.c ****     __ASM("LDR    R2, [R3]");
 341:SYS/task_manager/task_manager.c **** 
 342:SYS/task_manager/task_manager.c ****     __ASM("ISB");
 343:SYS/task_manager/task_manager.c **** 
 344:SYS/task_manager/task_manager.c ****     __ASM("STMDB    R0!, {R4-R11, R14}");
 345:SYS/task_manager/task_manager.c ****     __ASM("STR      R0, [R2]");
 346:SYS/task_manager/task_manager.c **** 
 347:SYS/task_manager/task_manager.c ****     /******************************  FPU SECTION  *********************************/
 348:SYS/task_manager/task_manager.c ****     __ASM("TST      R14, #0x10");
 349:SYS/task_manager/task_manager.c ****     __ASM("IT       EQ");
 350:SYS/task_manager/task_manager.c ****     __ASM("VSTMDBEQ R0!, {s16-s31}");
 351:SYS/task_manager/task_manager.c ****     /******************************  FPU SECTION  *********************************/
 352:SYS/task_manager/task_manager.c **** 
 353:SYS/task_manager/task_manager.c ****     __ASM("ISB");
 354:SYS/task_manager/task_manager.c ****     __ASM("BX       R14");
 355:SYS/task_manager/task_manager.c **** 
 356:SYS/task_manager/task_manager.c ****     __ASM("CurrentTCBConst_Tmp3: .word CurTsk_TCB");
 357:SYS/task_manager/task_manager.c **** }
 358:SYS/task_manager/task_manager.c **** 
 359:SYS/task_manager/task_manager.c **** __attribute__((naked)) void Task_Load(void)
 360:SYS/task_manager/task_manager.c **** {
 361:SYS/task_manager/task_manager.c ****     __ASM("LDR	  R3, =CurTsk_TCB");
 362:SYS/task_manager/task_manager.c ****     __ASM("LDR    R1, [R3]");
 363:SYS/task_manager/task_manager.c ****     __ASM("LDR    R0, [R1]");
 364:SYS/task_manager/task_manager.c **** 
 365:SYS/task_manager/task_manager.c ****     __ASM("LDMIA  R0!, {R4-R11, R14}");
 366:SYS/task_manager/task_manager.c **** 
 367:SYS/task_manager/task_manager.c ****     /******************************  FPU SECTION  *********************************/
 368:SYS/task_manager/task_manager.c ****     __ASM("TST      R14, #0x10");
 369:SYS/task_manager/task_manager.c ****     __ASM("IT       EQ");
 370:SYS/task_manager/task_manager.c ****     __ASM("VLDMIAEQ R0!, {s16-s31}");
 371:SYS/task_manager/task_manager.c ****     /******************************  FPU SECTION  *********************************/
 372:SYS/task_manager/task_manager.c **** 
 373:SYS/task_manager/task_manager.c ****     __ASM("MSR    PSP, R0");
 374:SYS/task_manager/task_manager.c ****     __ASM("ISB");
 375:SYS/task_manager/task_manager.c ****     //__ASM("MOV    R0, #240");
 376:SYS/task_manager/task_manager.c ****     //__ASM("MSR	  BASEPRI, R0");
 377:SYS/task_manager/task_manager.c ****     __ASM("BX     R14");
 378:SYS/task_manager/task_manager.c ****     __ASM(".ALIGN 4");
 379:SYS/task_manager/task_manager.c **** }
 380:SYS/task_manager/task_manager.c **** 
 381:SYS/task_manager/task_manager.c **** void Load_FirstTask(void)
 382:SYS/task_manager/task_manager.c **** {
 383:SYS/task_manager/task_manager.c ****     Task_Load();
 384:SYS/task_manager/task_manager.c **** }
 385:SYS/task_manager/task_manager.c **** 
 386:SYS/task_manager/task_manager.c **** __attribute__((naked)) void Task_SwitchContext(void)
 387:SYS/task_manager/task_manager.c **** {
 388:SYS/task_manager/task_manager.c ****     __ASM("MRS      R0, PSP");
 389:SYS/task_manager/task_manager.c ****     __ASM("ISB");
ARM GAS  /tmp/ccHlURRu.s 			page 9


 390:SYS/task_manager/task_manager.c **** 
 391:SYS/task_manager/task_manager.c ****     __ASM("LDR      R3, CurrentTCBConst_Tmp");
 392:SYS/task_manager/task_manager.c ****     __ASM("LDR      R2, [R3]");
 393:SYS/task_manager/task_manager.c **** 
 394:SYS/task_manager/task_manager.c ****     /******************************  FPU SECTION  *********************************/
 395:SYS/task_manager/task_manager.c ****     __ASM("TST      R14, #0x10");
 396:SYS/task_manager/task_manager.c ****     __ASM("IT       EQ");
 397:SYS/task_manager/task_manager.c ****     __ASM("VSTMDBEQ R0!, {s16-s31}");
 398:SYS/task_manager/task_manager.c ****     /******************************  FPU SECTION  *********************************/
 399:SYS/task_manager/task_manager.c **** 
 400:SYS/task_manager/task_manager.c ****     __ASM("STMDB    R0!, {R4-R11, R14}");
 401:SYS/task_manager/task_manager.c ****     __ASM("STR      R0, [R2]");
 402:SYS/task_manager/task_manager.c **** 
 403:SYS/task_manager/task_manager.c ****     __ASM("STMDB    SP!, {R0, R3}");
 404:SYS/task_manager/task_manager.c ****     __ASM("MOV      R0, %0" ::"i"(0x50));
 405:SYS/task_manager/task_manager.c ****     __ASM("MSR      BASEPRI, R0");
 406:SYS/task_manager/task_manager.c **** 
 407:SYS/task_manager/task_manager.c ****     __ASM("DSB");
 408:SYS/task_manager/task_manager.c ****     __ASM("ISB");
 409:SYS/task_manager/task_manager.c **** 
 410:SYS/task_manager/task_manager.c ****     __ASM("BL       Task_SwitchStack");
 411:SYS/task_manager/task_manager.c **** 
 412:SYS/task_manager/task_manager.c ****     __ASM("MOV      R0, #0");
 413:SYS/task_manager/task_manager.c ****     __ASM("MSR      BASEPRI, R0");
 414:SYS/task_manager/task_manager.c ****     __ASM("LDMIA    SP!, {R0, R3}");
 415:SYS/task_manager/task_manager.c **** 
 416:SYS/task_manager/task_manager.c ****     __ASM("LDR      R1, [R3]");
 417:SYS/task_manager/task_manager.c ****     __ASM("LDR      R0, [R1]");
 418:SYS/task_manager/task_manager.c **** 
 419:SYS/task_manager/task_manager.c ****     __ASM("LDMIA    R0!, {R4-R11, R14}");
 420:SYS/task_manager/task_manager.c **** 
 421:SYS/task_manager/task_manager.c ****     /******************************  FPU SECTION  *********************************/
 422:SYS/task_manager/task_manager.c ****     __ASM("TST      R14, #0x10");
 423:SYS/task_manager/task_manager.c ****     __ASM("IT       EQ");
 424:SYS/task_manager/task_manager.c ****     __ASM("VLDMIAEQ R0!, {s16-s31}");
 425:SYS/task_manager/task_manager.c ****     /******************************  FPU SECTION  *********************************/
 426:SYS/task_manager/task_manager.c **** 
 427:SYS/task_manager/task_manager.c ****     __ASM("MSR      PSP,R0");
 428:SYS/task_manager/task_manager.c ****     __ASM("ISB");
 429:SYS/task_manager/task_manager.c ****     //__ASM("MOV      R0, #240");
 430:SYS/task_manager/task_manager.c ****     //__ASM("MSR	    BASEPRI, R0");
 431:SYS/task_manager/task_manager.c ****     __ASM("BX       R14");
 432:SYS/task_manager/task_manager.c **** 
 433:SYS/task_manager/task_manager.c ****     __ASM("CurrentTCBConst_Tmp: .word CurTsk_TCB");
 434:SYS/task_manager/task_manager.c ****     __ASM(".ALIGN 4");
 435:SYS/task_manager/task_manager.c **** }
 436:SYS/task_manager/task_manager.c **** 
 437:SYS/task_manager/task_manager.c **** static void Task_SetStkPtr_Val(Task *tsk)
 438:SYS/task_manager/task_manager.c **** {
 439:SYS/task_manager/task_manager.c ****     uint32_t *Tsk_Ptr_tmp = NULL;
 440:SYS/task_manager/task_manager.c **** 
 441:SYS/task_manager/task_manager.c ****     memset(tsk->TCB.Stack, TASK_STACK_DEFAULT, tsk->Stack_Depth * sizeof(uint32_t));
 442:SYS/task_manager/task_manager.c **** 
 443:SYS/task_manager/task_manager.c ****     Tsk_Ptr_tmp = &tsk->TCB.Stack + (tsk->Stack_Depth - (uint32_t)1);
 444:SYS/task_manager/task_manager.c ****     Tsk_Ptr_tmp = (uint32_t *)((uint32_t)(Tsk_Ptr_tmp)&0XFFFFFFF8ul);
 445:SYS/task_manager/task_manager.c **** 
 446:SYS/task_manager/task_manager.c ****     Tsk_Ptr_tmp--;
ARM GAS  /tmp/ccHlURRu.s 			page 10


 447:SYS/task_manager/task_manager.c ****     *Tsk_Ptr_tmp = 0x01000000uL; /* xPSR */
 448:SYS/task_manager/task_manager.c **** 
 449:SYS/task_manager/task_manager.c ****     Tsk_Ptr_tmp--;
 450:SYS/task_manager/task_manager.c ****     *Tsk_Ptr_tmp = ((uint32_t)Task_Caller) & 0xfffffffeUL; /* PC */
 451:SYS/task_manager/task_manager.c **** 
 452:SYS/task_manager/task_manager.c ****     Tsk_Ptr_tmp--;
 453:SYS/task_manager/task_manager.c ****     *Tsk_Ptr_tmp = (uint32_t)Task_Exit; /* LR */
 454:SYS/task_manager/task_manager.c **** 
 455:SYS/task_manager/task_manager.c ****     /* Save code space by skipping register initialisation. */
 456:SYS/task_manager/task_manager.c ****     Tsk_Ptr_tmp -= 5;              /* R12, R3, R2 and R1. */
 457:SYS/task_manager/task_manager.c ****     *Tsk_Ptr_tmp = (uint32_t)NULL; /* R0 */
 458:SYS/task_manager/task_manager.c **** 
 459:SYS/task_manager/task_manager.c ****     /* A save method is being used that requires each task to maintain its
 460:SYS/task_manager/task_manager.c **** 	    own exec return value. */
 461:SYS/task_manager/task_manager.c ****     Tsk_Ptr_tmp--;
 462:SYS/task_manager/task_manager.c ****     *Tsk_Ptr_tmp = 0xfffffffd;
 463:SYS/task_manager/task_manager.c **** 
 464:SYS/task_manager/task_manager.c ****     Tsk_Ptr_tmp -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 465:SYS/task_manager/task_manager.c **** 
 466:SYS/task_manager/task_manager.c ****     //set task stack top pointer
 467:SYS/task_manager/task_manager.c ****     tsk->TCB.Top_Stk_Ptr = Tsk_Ptr_tmp; //&Tsk_Ptr_tmp
 468:SYS/task_manager/task_manager.c **** }
 469:SYS/task_manager/task_manager.c **** 
 470:SYS/task_manager/task_manager.c **** #endif
 471:SYS/task_manager/task_manager.c **** 
 472:SYS/task_manager/task_manager.c **** static void Task_SetReady(Task *tsk)
 473:SYS/task_manager/task_manager.c **** {
  73              		.loc 1 473 0
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 0
  76              		@ frame_needed = 0, uses_anonymous_args = 0
  77              		@ link register save eliminated.
  78              	.LVL1:
  79 0000 70B4     		push	{r4, r5, r6}
  80              	.LCFI0:
  81              		.cfi_def_cfa_offset 12
  82              		.cfi_offset 4, -12
  83              		.cfi_offset 5, -8
  84              		.cfi_offset 6, -4
 474:SYS/task_manager/task_manager.c ****     uint8_t grp_id = GET_TASKGROUP_PRIORITY(tsk->priority.Priority);
  85              		.loc 1 474 0
  86 0002 0478     		ldrb	r4, [r0]	@ zero_extendqisi2
  87 0004 E208     		lsrs	r2, r4, #3
  88              	.LVL2:
 475:SYS/task_manager/task_manager.c ****     uint8_t tsk_id = GET_TASKINGROUP_PRIORITY(tsk->priority.Priority);
  89              		.loc 1 475 0
  90 0006 04F00705 		and	r5, r4, #7
  91              	.LVL3:
 476:SYS/task_manager/task_manager.c **** 
 477:SYS/task_manager/task_manager.c ****     //set current group flag to ready
 478:SYS/task_manager/task_manager.c ****     TskHdl_RdyMap.Grp.Flg |= 1 << grp_id;
  92              		.loc 1 478 0
  93 000a 094B     		ldr	r3, .L6
  94 000c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
  95 000e 0124     		movs	r4, #1
  96 0010 04FA02F6 		lsl	r6, r4, r2
  97 0014 3143     		orrs	r1, r1, r6
ARM GAS  /tmp/ccHlURRu.s 			page 11


  98 0016 C9B2     		uxtb	r1, r1
  99 0018 1970     		strb	r1, [r3]
 479:SYS/task_manager/task_manager.c ****     //set current task under this group flag to ready
 480:SYS/task_manager/task_manager.c ****     TskHdl_RdyMap.TskInGrp[grp_id].Flg |= 1 << tsk_id;
 100              		.loc 1 480 0
 101 001a 1344     		add	r3, r3, r2
 102 001c 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 103              	.LVL4:
 104 001e AC40     		lsls	r4, r4, r5
 105 0020 2243     		orrs	r2, r2, r4
 106 0022 D2B2     		uxtb	r2, r2
 107 0024 5A70     		strb	r2, [r3, #1]
 481:SYS/task_manager/task_manager.c **** 
 482:SYS/task_manager/task_manager.c ****     tsk->Exec_status.State = Task_Ready;
 108              		.loc 1 482 0
 109 0026 0023     		movs	r3, #0
 110 0028 80F84830 		strb	r3, [r0, #72]
 483:SYS/task_manager/task_manager.c **** }
 111              		.loc 1 483 0
 112 002c 70BC     		pop	{r4, r5, r6}
 113              	.LCFI1:
 114              		.cfi_restore 6
 115              		.cfi_restore 5
 116              		.cfi_restore 4
 117              		.cfi_def_cfa_offset 0
 118              	.LVL5:
 119 002e 7047     		bx	lr
 120              	.L7:
 121              		.align	2
 122              	.L6:
 123 0030 00000000 		.word	.LANCHOR0
 124              		.cfi_endproc
 125              	.LFE143:
 127              		.section	.text.Task_ClearBlock,"ax",%progbits
 128              		.align	1
 129              		.syntax unified
 130              		.thumb
 131              		.thumb_func
 132              		.fpu fpv4-sp-d16
 134              	Task_ClearBlock:
 135              	.LFB144:
 484:SYS/task_manager/task_manager.c **** 
 485:SYS/task_manager/task_manager.c **** static void Task_ClearBlock(Task *tsk)
 486:SYS/task_manager/task_manager.c **** {
 136              		.loc 1 486 0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 140              		@ link register save eliminated.
 141              	.LVL6:
 142 0000 10B4     		push	{r4}
 143              	.LCFI2:
 144              		.cfi_def_cfa_offset 4
 145              		.cfi_offset 4, -4
 487:SYS/task_manager/task_manager.c ****     uint8_t grp_id = GET_TASKGROUP_PRIORITY(tsk->priority.Priority);
 146              		.loc 1 487 0
 147 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
ARM GAS  /tmp/ccHlURRu.s 			page 12


 148 0004 DC08     		lsrs	r4, r3, #3
 149              	.LVL7:
 488:SYS/task_manager/task_manager.c ****     uint8_t tsk_id = GET_TASKINGROUP_PRIORITY(tsk->priority.Priority);
 150              		.loc 1 488 0
 151 0006 03F00702 		and	r2, r3, #7
 152              	.LVL8:
 489:SYS/task_manager/task_manager.c **** 
 490:SYS/task_manager/task_manager.c ****     TskHdl_BlkMap.TskInGrp[grp_id].Flg &= ~(1 << tsk_id);
 153              		.loc 1 490 0
 154 000a 0A4B     		ldr	r3, .L11
 155 000c 2344     		add	r3, r3, r4
 156 000e 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 157 0010 0120     		movs	r0, #1
 158              	.LVL9:
 159 0012 00FA02F2 		lsl	r2, r0, r2
 160              	.LVL10:
 161 0016 21EA0202 		bic	r2, r1, r2
 162 001a 5A70     		strb	r2, [r3, #1]
 163              	.LVL11:
 491:SYS/task_manager/task_manager.c ****     if (TskHdl_BlkMap.TskInGrp[grp_id].Flg == 0)
 164              		.loc 1 491 0
 165 001c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 166 001e 33B9     		cbnz	r3, .L8
 492:SYS/task_manager/task_manager.c ****     {
 493:SYS/task_manager/task_manager.c ****         TskHdl_BlkMap.Grp.Flg &= ~(1 << grp_id);
 167              		.loc 1 493 0
 168 0020 0449     		ldr	r1, .L11
 169 0022 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 170 0024 00FA04F4 		lsl	r4, r0, r4
 171              	.LVL12:
 172 0028 23EA0404 		bic	r4, r3, r4
 173 002c 0C70     		strb	r4, [r1]
 174              	.L8:
 494:SYS/task_manager/task_manager.c ****     }
 495:SYS/task_manager/task_manager.c **** }
 175              		.loc 1 495 0
 176 002e 5DF8044B 		ldr	r4, [sp], #4
 177              	.LCFI3:
 178              		.cfi_restore 4
 179              		.cfi_def_cfa_offset 0
 180 0032 7047     		bx	lr
 181              	.L12:
 182              		.align	2
 183              	.L11:
 184 0034 00000000 		.word	.LANCHOR1
 185              		.cfi_endproc
 186              	.LFE144:
 188              		.section	.text.Task_ClearPending,"ax",%progbits
 189              		.align	1
 190              		.syntax unified
 191              		.thumb
 192              		.thumb_func
 193              		.fpu fpv4-sp-d16
 195              	Task_ClearPending:
 196              	.LFB145:
 496:SYS/task_manager/task_manager.c **** 
 497:SYS/task_manager/task_manager.c **** static void Task_ClearPending(Task *tsk)
ARM GAS  /tmp/ccHlURRu.s 			page 13


 498:SYS/task_manager/task_manager.c **** {
 197              		.loc 1 498 0
 198              		.cfi_startproc
 199              		@ args = 0, pretend = 0, frame = 0
 200              		@ frame_needed = 0, uses_anonymous_args = 0
 201              		@ link register save eliminated.
 202              	.LVL13:
 203 0000 10B4     		push	{r4}
 204              	.LCFI4:
 205              		.cfi_def_cfa_offset 4
 206              		.cfi_offset 4, -4
 499:SYS/task_manager/task_manager.c ****     uint8_t grp_id = GET_TASKGROUP_PRIORITY(tsk->priority.Priority);
 207              		.loc 1 499 0
 208 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 209 0004 DC08     		lsrs	r4, r3, #3
 210              	.LVL14:
 500:SYS/task_manager/task_manager.c ****     uint8_t tsk_id = GET_TASKINGROUP_PRIORITY(tsk->priority.Priority);
 211              		.loc 1 500 0
 212 0006 03F00702 		and	r2, r3, #7
 213              	.LVL15:
 501:SYS/task_manager/task_manager.c **** 
 502:SYS/task_manager/task_manager.c ****     TskHdl_PndMap.TskInGrp[grp_id].Flg &= ~(1 << tsk_id);
 214              		.loc 1 502 0
 215 000a 0A4B     		ldr	r3, .L16
 216 000c 2344     		add	r3, r3, r4
 217 000e 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 218 0010 0120     		movs	r0, #1
 219              	.LVL16:
 220 0012 00FA02F2 		lsl	r2, r0, r2
 221              	.LVL17:
 222 0016 21EA0202 		bic	r2, r1, r2
 223 001a 5A70     		strb	r2, [r3, #1]
 224              	.LVL18:
 503:SYS/task_manager/task_manager.c ****     if (TskHdl_PndMap.TskInGrp[grp_id].Flg == 0)
 225              		.loc 1 503 0
 226 001c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 227 001e 33B9     		cbnz	r3, .L13
 504:SYS/task_manager/task_manager.c ****     {
 505:SYS/task_manager/task_manager.c ****         TskHdl_PndMap.Grp.Flg &= ~(1 << grp_id);
 228              		.loc 1 505 0
 229 0020 0449     		ldr	r1, .L16
 230 0022 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 231 0024 00FA04F4 		lsl	r4, r0, r4
 232              	.LVL19:
 233 0028 23EA0404 		bic	r4, r3, r4
 234 002c 0C70     		strb	r4, [r1]
 235              	.L13:
 506:SYS/task_manager/task_manager.c ****     }
 507:SYS/task_manager/task_manager.c **** }
 236              		.loc 1 507 0
 237 002e 5DF8044B 		ldr	r4, [sp], #4
 238              	.LCFI5:
 239              		.cfi_restore 4
 240              		.cfi_def_cfa_offset 0
 241 0032 7047     		bx	lr
 242              	.L17:
 243              		.align	2
ARM GAS  /tmp/ccHlURRu.s 			page 14


 244              	.L16:
 245 0034 00000000 		.word	.LANCHOR2
 246              		.cfi_endproc
 247              	.LFE145:
 249              		.section	.text.Task_ClearReady,"ax",%progbits
 250              		.align	1
 251              		.syntax unified
 252              		.thumb
 253              		.thumb_func
 254              		.fpu fpv4-sp-d16
 256              	Task_ClearReady:
 257              	.LFB146:
 508:SYS/task_manager/task_manager.c **** 
 509:SYS/task_manager/task_manager.c **** static void Task_ClearReady(Task *tsk)
 510:SYS/task_manager/task_manager.c **** {
 258              		.loc 1 510 0
 259              		.cfi_startproc
 260              		@ args = 0, pretend = 0, frame = 0
 261              		@ frame_needed = 0, uses_anonymous_args = 0
 262              		@ link register save eliminated.
 263              	.LVL20:
 264 0000 10B4     		push	{r4}
 265              	.LCFI6:
 266              		.cfi_def_cfa_offset 4
 267              		.cfi_offset 4, -4
 511:SYS/task_manager/task_manager.c ****     uint8_t grp_id = GET_TASKGROUP_PRIORITY(tsk->priority.Priority);
 268              		.loc 1 511 0
 269 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 270 0004 DC08     		lsrs	r4, r3, #3
 271              	.LVL21:
 512:SYS/task_manager/task_manager.c ****     uint8_t tsk_id = GET_TASKINGROUP_PRIORITY(tsk->priority.Priority);
 272              		.loc 1 512 0
 273 0006 03F00702 		and	r2, r3, #7
 274              	.LVL22:
 513:SYS/task_manager/task_manager.c **** 
 514:SYS/task_manager/task_manager.c ****     TskHdl_RdyMap.TskInGrp[grp_id].Flg &= ~(1 << tsk_id);
 275              		.loc 1 514 0
 276 000a 0A4B     		ldr	r3, .L21
 277 000c 2344     		add	r3, r3, r4
 278 000e 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 279 0010 0120     		movs	r0, #1
 280              	.LVL23:
 281 0012 00FA02F2 		lsl	r2, r0, r2
 282              	.LVL24:
 283 0016 21EA0202 		bic	r2, r1, r2
 284 001a 5A70     		strb	r2, [r3, #1]
 285              	.LVL25:
 515:SYS/task_manager/task_manager.c ****     if (TskHdl_RdyMap.TskInGrp[grp_id].Flg == 0)
 286              		.loc 1 515 0
 287 001c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 288 001e 33B9     		cbnz	r3, .L18
 516:SYS/task_manager/task_manager.c ****     {
 517:SYS/task_manager/task_manager.c ****         TskHdl_RdyMap.Grp.Flg &= ~(1 << grp_id);
 289              		.loc 1 517 0
 290 0020 0449     		ldr	r1, .L21
 291 0022 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 292 0024 00FA04F4 		lsl	r4, r0, r4
ARM GAS  /tmp/ccHlURRu.s 			page 15


 293              	.LVL26:
 294 0028 23EA0404 		bic	r4, r3, r4
 295 002c 0C70     		strb	r4, [r1]
 296              	.L18:
 518:SYS/task_manager/task_manager.c ****     }
 519:SYS/task_manager/task_manager.c **** }
 297              		.loc 1 519 0
 298 002e 5DF8044B 		ldr	r4, [sp], #4
 299              	.LCFI7:
 300              		.cfi_restore 4
 301              		.cfi_def_cfa_offset 0
 302 0032 7047     		bx	lr
 303              	.L22:
 304              		.align	2
 305              	.L21:
 306 0034 00000000 		.word	.LANCHOR0
 307              		.cfi_endproc
 308              	.LFE146:
 310              		.section	.text.Task_SetPendSVPro,"ax",%progbits
 311              		.align	1
 312              		.syntax unified
 313              		.thumb
 314              		.thumb_func
 315              		.fpu fpv4-sp-d16
 317              	Task_SetPendSVPro:
 318              	.LFB149:
 520:SYS/task_manager/task_manager.c **** 
 521:SYS/task_manager/task_manager.c **** Task *Task_Get_HighestRank_RdyTask(void)
 522:SYS/task_manager/task_manager.c **** {
 523:SYS/task_manager/task_manager.c ****     uint8_t grp_id = 0;
 524:SYS/task_manager/task_manager.c ****     uint8_t tsk_id = 0;
 525:SYS/task_manager/task_manager.c **** 
 526:SYS/task_manager/task_manager.c ****     if (TskHdl_RdyMap.Grp.Flg)
 527:SYS/task_manager/task_manager.c ****     {
 528:SYS/task_manager/task_manager.c ****         //find group
 529:SYS/task_manager/task_manager.c ****         grp_id = Tsk_Handle[TskHdl_RdyMap.Grp.Flg];
 530:SYS/task_manager/task_manager.c ****         //find task in group
 531:SYS/task_manager/task_manager.c ****         tsk_id = Tsk_Handle[TskHdl_RdyMap.TskInGrp[grp_id].Flg];
 532:SYS/task_manager/task_manager.c ****     }
 533:SYS/task_manager/task_manager.c ****     else
 534:SYS/task_manager/task_manager.c ****         return NULL;
 535:SYS/task_manager/task_manager.c **** 
 536:SYS/task_manager/task_manager.c ****     if (Task_Ptr[grp_id][tsk_id] != NULL)
 537:SYS/task_manager/task_manager.c ****     {
 538:SYS/task_manager/task_manager.c ****         return Task_Ptr[grp_id][tsk_id];
 539:SYS/task_manager/task_manager.c ****     }
 540:SYS/task_manager/task_manager.c ****     else
 541:SYS/task_manager/task_manager.c ****     {
 542:SYS/task_manager/task_manager.c ****         TskHdl_RdyMap.Grp.Flg &= ~(1 << grp_id);
 543:SYS/task_manager/task_manager.c ****         TskHdl_RdyMap.TskInGrp[grp_id].Flg &= ~(1 << tsk_id);
 544:SYS/task_manager/task_manager.c ****         return NULL;
 545:SYS/task_manager/task_manager.c ****     }
 546:SYS/task_manager/task_manager.c **** }
 547:SYS/task_manager/task_manager.c **** 
 548:SYS/task_manager/task_manager.c **** void Task_SetNextTask_Ptr(const Task *nxt)
 549:SYS/task_manager/task_manager.c **** {
 550:SYS/task_manager/task_manager.c ****     if (nxt != NULL)
ARM GAS  /tmp/ccHlURRu.s 			page 16


 551:SYS/task_manager/task_manager.c ****     {
 552:SYS/task_manager/task_manager.c ****         NxtRunTsk_Ptr = nxt;
 553:SYS/task_manager/task_manager.c ****         NxtTsk_TCB.Top_Stk_Ptr = &NxtRunTsk_Ptr->TCB.Top_Stk_Ptr;
 554:SYS/task_manager/task_manager.c ****         NxtTsk_TCB.Stack = NxtRunTsk_Ptr->TCB.Stack;
 555:SYS/task_manager/task_manager.c ****     }
 556:SYS/task_manager/task_manager.c **** }
 557:SYS/task_manager/task_manager.c **** 
 558:SYS/task_manager/task_manager.c **** //first need to know is linux support AT&T formate ASM code
 559:SYS/task_manager/task_manager.c **** __attribute__((naked)) static void Task_SetPendSVPro(void)
 560:SYS/task_manager/task_manager.c **** {
 319              		.loc 1 560 0
 320              		.cfi_startproc
 321              		@ Naked Function: prologue and epilogue provided by programmer.
 322              		@ args = 0, pretend = 0, frame = 0
 323              		@ frame_needed = 0, uses_anonymous_args = 0
 561:SYS/task_manager/task_manager.c ****     //set pendsv interrupt
 562:SYS/task_manager/task_manager.c ****     __ASM(".equ NVIC_SYSPRI14, 0xE000ED22");
 324              		.loc 1 562 0
 325              		.syntax unified
 326              	@ 562 "SYS/task_manager/task_manager.c" 1
 327              		.equ NVIC_SYSPRI14, 0xE000ED22
 328              	@ 0 "" 2
 563:SYS/task_manager/task_manager.c ****     __ASM(".equ NVIC_PENDSV_PRI, 0xFF");
 329              		.loc 1 563 0
 330              	@ 563 "SYS/task_manager/task_manager.c" 1
 331              		.equ NVIC_PENDSV_PRI, 0xFF
 332              	@ 0 "" 2
 564:SYS/task_manager/task_manager.c **** 
 565:SYS/task_manager/task_manager.c ****     __ASM("LDR      R0, =NVIC_SYSPRI14");
 333              		.loc 1 565 0
 334              	@ 565 "SYS/task_manager/task_manager.c" 1
 335 0000 0548     		LDR      R0, =NVIC_SYSPRI14
 336              	@ 0 "" 2
 566:SYS/task_manager/task_manager.c ****     __ASM("LDR      R1, =NVIC_PENDSV_PRI");
 337              		.loc 1 566 0
 338              	@ 566 "SYS/task_manager/task_manager.c" 1
 339 0002 FF21     		LDR      R1, =NVIC_PENDSV_PRI
 340              	@ 0 "" 2
 567:SYS/task_manager/task_manager.c ****     __ASM("STRB     R1, [R0]");
 341              		.loc 1 567 0
 342              	@ 567 "SYS/task_manager/task_manager.c" 1
 343 0004 0170     		STRB     R1, [R0]
 344              	@ 0 "" 2
 568:SYS/task_manager/task_manager.c **** 
 569:SYS/task_manager/task_manager.c **** #if (TASK_SCHEDULER_TYPE == PREEMPTIVE_SCHDULER)
 570:SYS/task_manager/task_manager.c ****     //set PSP to 0 to initial context switch call
 571:SYS/task_manager/task_manager.c ****     __ASM("MOVS     R0, #0");
 345              		.loc 1 571 0
 346              	@ 571 "SYS/task_manager/task_manager.c" 1
 347 0006 0020     		MOVS     R0, #0
 348              	@ 0 "" 2
 572:SYS/task_manager/task_manager.c ****     __ASM("MSR      PSP, R0");
 349              		.loc 1 572 0
 350              	@ 572 "SYS/task_manager/task_manager.c" 1
 351 0008 80F30988 		MSR      PSP, R0
 352              	@ 0 "" 2
 573:SYS/task_manager/task_manager.c **** 
ARM GAS  /tmp/ccHlURRu.s 			page 17


 574:SYS/task_manager/task_manager.c ****     //initial MSP to Task_OS_ExpStkBase
 575:SYS/task_manager/task_manager.c ****     __ASM("LDR      R0, =Task_OS_ExpStkBase");
 353              		.loc 1 575 0
 354              	@ 575 "SYS/task_manager/task_manager.c" 1
 355 000c 0348     		LDR      R0, =Task_OS_ExpStkBase
 356              	@ 0 "" 2
 576:SYS/task_manager/task_manager.c ****     __ASM("LDR      R1, [R0]");
 357              		.loc 1 576 0
 358              	@ 576 "SYS/task_manager/task_manager.c" 1
 359 000e 0168     		LDR      R1, [R0]
 360              	@ 0 "" 2
 577:SYS/task_manager/task_manager.c ****     __ASM("MSR      MSP, R1");
 361              		.loc 1 577 0
 362              	@ 577 "SYS/task_manager/task_manager.c" 1
 363 0010 81F30888 		MSR      MSP, R1
 364              	@ 0 "" 2
 578:SYS/task_manager/task_manager.c **** #endif
 579:SYS/task_manager/task_manager.c **** 
 580:SYS/task_manager/task_manager.c ****     __ASM("BX       LR");
 365              		.loc 1 580 0
 366              	@ 580 "SYS/task_manager/task_manager.c" 1
 367 0014 7047     		BX       LR
 368              	@ 0 "" 2
 581:SYS/task_manager/task_manager.c **** }
 369              		.loc 1 581 0
 370              		.thumb
 371              		.syntax unified
 372              		.cfi_endproc
 373              	.LFE149:
 375 0016 0000     		.section	.text.Task_PriorityCompare,"ax",%progbits
 376              		.align	1
 377              		.global	Task_PriorityCompare
 378              		.syntax unified
 379              		.thumb
 380              		.thumb_func
 381              		.fpu fpv4-sp-d16
 383              	Task_PriorityCompare:
 384              	.LFB153:
 582:SYS/task_manager/task_manager.c **** 
 583:SYS/task_manager/task_manager.c **** __attribute__((naked)) void Task_TriggerPendSV(void)
 584:SYS/task_manager/task_manager.c **** {
 585:SYS/task_manager/task_manager.c ****     __ASM(".equ NVIC_INT_CTRL, 0xE000ED04");
 586:SYS/task_manager/task_manager.c ****     __ASM(".equ NVIC_PENDSVSET, 0x10000000");
 587:SYS/task_manager/task_manager.c **** 
 588:SYS/task_manager/task_manager.c ****     __ASM("LDR      R0, =NVIC_INT_CTRL");
 589:SYS/task_manager/task_manager.c ****     __ASM("LDR      R1, =NVIC_PENDSVSET");
 590:SYS/task_manager/task_manager.c ****     __ASM("STR      R1, [R0]");
 591:SYS/task_manager/task_manager.c ****     __ASM("BX       LR");
 592:SYS/task_manager/task_manager.c **** }
 593:SYS/task_manager/task_manager.c **** 
 594:SYS/task_manager/task_manager.c **** void Task_Force_TriggerPendSV(void)
 595:SYS/task_manager/task_manager.c **** {
 596:SYS/task_manager/task_manager.c ****     /* Barriers are normally not required but do ensure the code is completely \
 597:SYS/task_manager/task_manager.c ****         within the specified behaviour for the architecture. */
 598:SYS/task_manager/task_manager.c ****     __ASM volatile("dsb" ::
 599:SYS/task_manager/task_manager.c ****                        : "memory");
 600:SYS/task_manager/task_manager.c ****     __ASM volatile("isb");
ARM GAS  /tmp/ccHlURRu.s 			page 18


 601:SYS/task_manager/task_manager.c ****     Task_TriggerPendSV();
 602:SYS/task_manager/task_manager.c **** }
 603:SYS/task_manager/task_manager.c **** 
 604:SYS/task_manager/task_manager.c **** uint8_t Task_Get_TaskNum(void)
 605:SYS/task_manager/task_manager.c **** {
 606:SYS/task_manager/task_manager.c ****     return TskCrt_RegList.num;
 607:SYS/task_manager/task_manager.c **** }
 608:SYS/task_manager/task_manager.c **** 
 609:SYS/task_manager/task_manager.c **** //return high priority task pointer
 610:SYS/task_manager/task_manager.c **** Task *Task_PriorityCompare(const Task *tsk_l, const Task *tsk_r)
 611:SYS/task_manager/task_manager.c **** {
 385              		.loc 1 611 0
 386              		.cfi_startproc
 387              		@ args = 0, pretend = 0, frame = 0
 388              		@ frame_needed = 0, uses_anonymous_args = 0
 389              		@ link register save eliminated.
 390              	.LVL27:
 612:SYS/task_manager/task_manager.c ****     if ((tsk_l == NULL) && (tsk_r == NULL))
 391              		.loc 1 612 0
 392 0000 0346     		mov	r3, r0
 393 0002 90B1     		cbz	r0, .L40
 394              	.L25:
 613:SYS/task_manager/task_manager.c ****     {
 614:SYS/task_manager/task_manager.c ****         return NULL;
 615:SYS/task_manager/task_manager.c ****     }
 616:SYS/task_manager/task_manager.c **** 
 617:SYS/task_manager/task_manager.c ****     if ((tsk_l == NULL) && (tsk_r != NULL))
 395              		.loc 1 617 0
 396 0004 ABB1     		cbz	r3, .L41
 397              	.L27:
 618:SYS/task_manager/task_manager.c ****     {
 619:SYS/task_manager/task_manager.c ****         return tsk_r;
 620:SYS/task_manager/task_manager.c ****     }
 621:SYS/task_manager/task_manager.c **** 
 622:SYS/task_manager/task_manager.c ****     if ((tsk_l != NULL) && (tsk_r == NULL))
 398              		.loc 1 622 0
 399 0006 03B1     		cbz	r3, .L28
 400              		.loc 1 622 0 is_stmt 0 discriminator 1
 401 0008 B9B1     		cbz	r1, .L32
 402              	.L28:
 611:SYS/task_manager/task_manager.c ****     if ((tsk_l == NULL) && (tsk_r == NULL))
 403              		.loc 1 611 0 is_stmt 1
 404 000a 30B4     		push	{r4, r5}
 405              	.LCFI8:
 406              		.cfi_def_cfa_offset 8
 407              		.cfi_offset 4, -8
 408              		.cfi_offset 5, -4
 623:SYS/task_manager/task_manager.c ****     {
 624:SYS/task_manager/task_manager.c ****         return tsk_l;
 625:SYS/task_manager/task_manager.c ****     }
 626:SYS/task_manager/task_manager.c **** 
 627:SYS/task_manager/task_manager.c ****     uint8_t L_Grp_level = GET_TASKGROUP_PRIORITY(tsk_l->priority.Suction.Group_Level);
 409              		.loc 1 627 0
 410 000c 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 411              	.LVL28:
 412 000e 0025     		movs	r5, #0
 413              	.LVL29:
ARM GAS  /tmp/ccHlURRu.s 			page 19


 628:SYS/task_manager/task_manager.c ****     uint8_t R_Grp_level = GET_TASKGROUP_PRIORITY(tsk_r->priority.Suction.Group_Level);
 414              		.loc 1 628 0
 415 0010 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 416              	.LVL30:
 629:SYS/task_manager/task_manager.c ****     uint8_t L_TskPri_level = GET_TASKINGROUP_PRIORITY(tsk_l->priority.Suction.Task_Level);
 417              		.loc 1 629 0
 418 0012 00F00700 		and	r0, r0, #7
 419              	.LVL31:
 630:SYS/task_manager/task_manager.c ****     uint8_t R_TskPri_level = GET_TASKINGROUP_PRIORITY(tsk_r->priority.Suction.Task_Level);
 420              		.loc 1 630 0
 421 0016 02F00702 		and	r2, r2, #7
 422              	.LVL32:
 631:SYS/task_manager/task_manager.c **** 
 632:SYS/task_manager/task_manager.c ****     if (L_Grp_level < R_Grp_level)
 633:SYS/task_manager/task_manager.c ****     {
 634:SYS/task_manager/task_manager.c ****         return tsk_l;
 635:SYS/task_manager/task_manager.c ****     }
 636:SYS/task_manager/task_manager.c ****     else if (L_Grp_level > R_Grp_level)
 423              		.loc 1 636 0
 424 001a AD42     		cmp	r5, r5
 425 001c 0FD8     		bhi	.L34
 637:SYS/task_manager/task_manager.c ****     {
 638:SYS/task_manager/task_manager.c ****         return tsk_r;
 639:SYS/task_manager/task_manager.c ****     }
 640:SYS/task_manager/task_manager.c ****     else if (L_Grp_level == R_Grp_level)
 426              		.loc 1 640 0
 427 001e 0FD1     		bne	.L24
 641:SYS/task_manager/task_manager.c ****     {
 642:SYS/task_manager/task_manager.c ****         if (L_TskPri_level < R_TskPri_level)
 428              		.loc 1 642 0
 429 0020 9042     		cmp	r0, r2
 430 0022 0FD3     		bcc	.L35
 643:SYS/task_manager/task_manager.c ****         {
 644:SYS/task_manager/task_manager.c ****             return tsk_l;
 645:SYS/task_manager/task_manager.c ****         }
 646:SYS/task_manager/task_manager.c ****         else if (L_TskPri_level > R_TskPri_level)
 431              		.loc 1 646 0
 432 0024 0CD9     		bls	.L24
 647:SYS/task_manager/task_manager.c ****         {
 648:SYS/task_manager/task_manager.c ****             return tsk_r;
 433              		.loc 1 648 0
 434 0026 0846     		mov	r0, r1
 435 0028 0AE0     		b	.L24
 436              	.LVL33:
 437              	.L40:
 438              	.LCFI9:
 439              		.cfi_def_cfa_offset 0
 440              		.cfi_restore 4
 441              		.cfi_restore 5
 612:SYS/task_manager/task_manager.c ****     {
 442              		.loc 1 612 0 discriminator 1
 443 002a 0029     		cmp	r1, #0
 444 002c EAD1     		bne	.L25
 614:SYS/task_manager/task_manager.c ****     }
 445              		.loc 1 614 0
 446 002e 0020     		movs	r0, #0
 447              	.LVL34:
ARM GAS  /tmp/ccHlURRu.s 			page 20


 448 0030 7047     		bx	lr
 449              	.LVL35:
 450              	.L41:
 617:SYS/task_manager/task_manager.c ****     {
 451              		.loc 1 617 0 discriminator 1
 452 0032 0029     		cmp	r1, #0
 453 0034 E7D0     		beq	.L27
 619:SYS/task_manager/task_manager.c ****     }
 454              		.loc 1 619 0
 455 0036 0846     		mov	r0, r1
 456              	.LVL36:
 457 0038 7047     		bx	lr
 458              	.LVL37:
 459              	.L32:
 624:SYS/task_manager/task_manager.c ****     }
 460              		.loc 1 624 0
 461 003a 1846     		mov	r0, r3
 462              	.LVL38:
 463 003c 7047     		bx	lr
 464              	.LVL39:
 465              	.L34:
 466              	.LCFI10:
 467              		.cfi_def_cfa_offset 8
 468              		.cfi_offset 4, -8
 469              		.cfi_offset 5, -4
 638:SYS/task_manager/task_manager.c ****     }
 470              		.loc 1 638 0
 471 003e 0846     		mov	r0, r1
 472              	.L24:
 649:SYS/task_manager/task_manager.c ****         }
 650:SYS/task_manager/task_manager.c ****     }
 651:SYS/task_manager/task_manager.c **** }
 473              		.loc 1 651 0
 474 0040 30BC     		pop	{r4, r5}
 475              	.LCFI11:
 476              		.cfi_remember_state
 477              		.cfi_restore 5
 478              		.cfi_restore 4
 479              		.cfi_def_cfa_offset 0
 480              	.LVL40:
 481 0042 7047     		bx	lr
 482              	.LVL41:
 483              	.L35:
 484              	.LCFI12:
 485              		.cfi_restore_state
 644:SYS/task_manager/task_manager.c ****         }
 486              		.loc 1 644 0
 487 0044 1846     		mov	r0, r3
 488 0046 FBE7     		b	.L24
 489              		.cfi_endproc
 490              	.LFE153:
 492              		.section	.text.ReSet_Task_Data,"ax",%progbits
 493              		.align	1
 494              		.syntax unified
 495              		.thumb
 496              		.thumb_func
 497              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccHlURRu.s 			page 21


 499              	ReSet_Task_Data:
 500              	.LFB124:
  95:SYS/task_manager/task_manager.c ****     task->priority.Suction.Group_Level = 0;
 501              		.loc 1 95 0
 502              		.cfi_startproc
 503              		@ args = 0, pretend = 0, frame = 0
 504              		@ frame_needed = 0, uses_anonymous_args = 0
 505              	.LVL42:
 506 0000 10B5     		push	{r4, lr}
 507              	.LCFI13:
 508              		.cfi_def_cfa_offset 8
 509              		.cfi_offset 4, -8
 510              		.cfi_offset 14, -4
 511 0002 0446     		mov	r4, r0
  96:SYS/task_manager/task_manager.c ****     task->priority.Suction.Task_Level = 0;
 512              		.loc 1 96 0
 513 0004 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
  97:SYS/task_manager/task_manager.c ****     task->Task_name = NULL;
 514              		.loc 1 97 0
 515 0006 03F0C703 		and	r3, r3, #199
 516 000a 6FF30203 		bfc	r3, #0, #3
 517 000e 0370     		strb	r3, [r0]
  98:SYS/task_manager/task_manager.c ****     task->exec_frq = 0;
 518              		.loc 1 98 0
 519 0010 0023     		movs	r3, #0
 520 0012 4360     		str	r3, [r0, #4]
  99:SYS/task_manager/task_manager.c ****     task->exec_interval_us = 0;
 521              		.loc 1 99 0
 522 0014 8360     		str	r3, [r0, #8]
 100:SYS/task_manager/task_manager.c ****     task->Exec_Func = NULL;
 523              		.loc 1 100 0
 524 0016 8381     		strh	r3, [r0, #12]	@ movhi
 101:SYS/task_manager/task_manager.c **** 
 525              		.loc 1 101 0
 526 0018 0361     		str	r3, [r0, #16]
 103:SYS/task_manager/task_manager.c ****     task->Exec_status.detect_exec_time_arv = 0;
 527              		.loc 1 103 0
 528 001a C362     		str	r3, [r0, #44]
 104:SYS/task_manager/task_manager.c ****     task->Exec_status.detect_exec_time_max = 0;
 529              		.loc 1 104 0
 530 001c 0363     		str	r3, [r0, #48]
 105:SYS/task_manager/task_manager.c ****     task->Exec_status.Exec_Times = 0;
 531              		.loc 1 105 0
 532 001e 4363     		str	r3, [r0, #52]
 106:SYS/task_manager/task_manager.c ****     task->Exec_status.cpu_opy = 0;
 533              		.loc 1 106 0
 534 0020 8363     		str	r3, [r0, #56]
 107:SYS/task_manager/task_manager.c ****     task->Exec_status.totlal_running_time = 0;
 535              		.loc 1 107 0
 536 0022 0022     		movs	r2, #0
 537 0024 4264     		str	r2, [r0, #68]	@ float
 108:SYS/task_manager/task_manager.c **** 
 538              		.loc 1 108 0
 539 0026 0364     		str	r3, [r0, #64]
 110:SYS/task_manager/task_manager.c ****     task->delay_info.tsk_hdl = 0;
 540              		.loc 1 110 0
 541 0028 80F85C30 		strb	r3, [r0, #92]
ARM GAS  /tmp/ccHlURRu.s 			page 22


 111:SYS/task_manager/task_manager.c ****     task->delay_info.time_unit = 0;
 542              		.loc 1 111 0
 543 002c 0366     		str	r3, [r0, #96]
 112:SYS/task_manager/task_manager.c **** 
 544              		.loc 1 112 0
 545 002e 4366     		str	r3, [r0, #100]
 114:SYS/task_manager/task_manager.c **** 
 546              		.loc 1 114 0
 547 0030 00F15C01 		add	r1, r0, #92
 548 0034 7430     		adds	r0, r0, #116
 549              	.LVL43:
 550 0036 FFF7FEFF 		bl	List_ItemInit
 551              	.LVL44:
 116:SYS/task_manager/task_manager.c ****     RuntimeObj_Reset(&(task->Exec_status.Init_Time));
 552              		.loc 1 116 0
 553 003a 04F12400 		add	r0, r4, #36
 554 003e FFF7FEFF 		bl	RuntimeObj_Reset
 555              	.LVL45:
 117:SYS/task_manager/task_manager.c ****     RuntimeObj_Reset(&(task->Exec_status.Start_Time));
 556              		.loc 1 117 0
 557 0042 04F11400 		add	r0, r4, #20
 558 0046 FFF7FEFF 		bl	RuntimeObj_Reset
 559              	.LVL46:
 118:SYS/task_manager/task_manager.c **** 
 560              		.loc 1 118 0
 561 004a 04F11C00 		add	r0, r4, #28
 562 004e FFF7FEFF 		bl	RuntimeObj_Reset
 563              	.LVL47:
 120:SYS/task_manager/task_manager.c **** }
 564              		.loc 1 120 0
 565 0052 0523     		movs	r3, #5
 566 0054 84F84830 		strb	r3, [r4, #72]
 567 0058 10BD     		pop	{r4, pc}
 568              		.cfi_endproc
 569              	.LFE124:
 571              		.section	.text.TaskSys_Init,"ax",%progbits
 572              		.align	1
 573              		.syntax unified
 574              		.thumb
 575              		.thumb_func
 576              		.fpu fpv4-sp-d16
 578              	TaskSys_Init:
 579              	.LFB126:
 137:SYS/task_manager/task_manager.c **** #if (TASK_SCHEDULER_TYPE == PREEMPTIVE_SCHDULER)
 580              		.loc 1 137 0
 581              		.cfi_startproc
 582              		@ args = 0, pretend = 0, frame = 0
 583              		@ frame_needed = 0, uses_anonymous_args = 0
 584 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 585              	.LCFI14:
 586              		.cfi_def_cfa_offset 24
 587              		.cfi_offset 3, -24
 588              		.cfi_offset 4, -20
 589              		.cfi_offset 5, -16
 590              		.cfi_offset 6, -12
 591              		.cfi_offset 7, -8
 592              		.cfi_offset 14, -4
ARM GAS  /tmp/ccHlURRu.s 			page 23


 140:SYS/task_manager/task_manager.c **** 
 593              		.loc 1 140 0
 594 0002 1E4C     		ldr	r4, .L51
 595 0004 4FF42052 		mov	r2, #10240
 596 0008 0021     		movs	r1, #0
 597 000a 2046     		mov	r0, r4
 598 000c FFF7FEFF 		bl	memset
 599              	.LVL48:
 142:SYS/task_manager/task_manager.c **** #endif
 600              		.loc 1 142 0
 601 0010 04F51F44 		add	r4, r4, #40704
 602 0014 FC34     		adds	r4, r4, #252
 603 0016 1A4A     		ldr	r2, .L51+4
 604 0018 1460     		str	r4, [r2]
 605              	.LVL49:
 606              	.LBB6:
 150:SYS/task_manager/task_manager.c ****     {
 607              		.loc 1 150 0
 608 001a 0027     		movs	r7, #0
 609 001c 18E0     		b	.L45
 610              	.LVL50:
 611              	.L46:
 612              	.LBB7:
 154:SYS/task_manager/task_manager.c **** 
 613              		.loc 1 154 0 discriminator 3
 614 001e 194D     		ldr	r5, .L51+8
 615 0020 04EBC706 		add	r6, r4, r7, lsl #3
 616 0024 55F82600 		ldr	r0, [r5, r6, lsl #2]
 617 0028 FFF7FEFF 		bl	ReSet_Task_Data
 618              	.LVL51:
 157:SYS/task_manager/task_manager.c ****             Task_Ptr[group_index][task_priority]->TCB.Stack = NULL;
 619              		.loc 1 157 0 discriminator 3
 620 002c 55F82620 		ldr	r2, [r5, r6, lsl #2]
 621 0030 0023     		movs	r3, #0
 622 0032 D364     		str	r3, [r2, #76]
 158:SYS/task_manager/task_manager.c ****             Task_Ptr[group_index][task_priority]->TCB.Top_Stk_Ptr = NULL;
 623              		.loc 1 158 0 discriminator 3
 624 0034 55F82620 		ldr	r2, [r5, r6, lsl #2]
 625 0038 5365     		str	r3, [r2, #84]
 159:SYS/task_manager/task_manager.c **** #endif
 626              		.loc 1 159 0 discriminator 3
 627 003a 55F82620 		ldr	r2, [r5, r6, lsl #2]
 628 003e 1365     		str	r3, [r2, #80]
 161:SYS/task_manager/task_manager.c **** 
 629              		.loc 1 161 0 discriminator 3
 630 0040 45F82630 		str	r3, [r5, r6, lsl #2]
 152:SYS/task_manager/task_manager.c ****         {
 631              		.loc 1 152 0 discriminator 3
 632 0044 0134     		adds	r4, r4, #1
 633              	.LVL52:
 634 0046 E4B2     		uxtb	r4, r4
 635              	.LVL53:
 636              	.L47:
 152:SYS/task_manager/task_manager.c ****         {
 637              		.loc 1 152 0 is_stmt 0 discriminator 1
 638 0048 072C     		cmp	r4, #7
 639 004a E8D9     		bls	.L46
ARM GAS  /tmp/ccHlURRu.s 			page 24


 640              	.LBE7:
 150:SYS/task_manager/task_manager.c ****     {
 641              		.loc 1 150 0 is_stmt 1 discriminator 2
 642 004c 0137     		adds	r7, r7, #1
 643              	.LVL54:
 644 004e FFB2     		uxtb	r7, r7
 645              	.LVL55:
 646              	.L45:
 150:SYS/task_manager/task_manager.c ****     {
 647              		.loc 1 150 0 is_stmt 0 discriminator 1
 648 0050 072F     		cmp	r7, #7
 649 0052 01D8     		bhi	.L50
 650 0054 0024     		movs	r4, #0
 651 0056 F7E7     		b	.L47
 652              	.L50:
 653              	.LBE6:
 167:SYS/task_manager/task_manager.c ****     TskCrt_RegList.list.data = NULL;
 654              		.loc 1 167 0 is_stmt 1
 655 0058 0B4B     		ldr	r3, .L51+12
 656 005a 0022     		movs	r2, #0
 657 005c 1A70     		strb	r2, [r3]
 168:SYS/task_manager/task_manager.c ****     TskCrt_RegList.list.nxt = NULL;
 658              		.loc 1 168 0
 659 005e 5A61     		str	r2, [r3, #20]
 169:SYS/task_manager/task_manager.c ****     TskCrt_RegList.list.prv = NULL;
 660              		.loc 1 169 0
 661 0060 1A61     		str	r2, [r3, #16]
 170:SYS/task_manager/task_manager.c **** 
 662              		.loc 1 170 0
 663 0062 DA60     		str	r2, [r3, #12]
 172:SYS/task_manager/task_manager.c ****     TskSys_state = TaskSys_Prepare;
 664              		.loc 1 172 0
 665 0064 094B     		ldr	r3, .L51+16
 666 0066 1868     		ldr	r0, [r3]
 667 0068 FFF7FEFF 		bl	ReSet_Task_Data
 668              	.LVL56:
 173:SYS/task_manager/task_manager.c **** 
 669              		.loc 1 173 0
 670 006c 0122     		movs	r2, #1
 671 006e 084B     		ldr	r3, .L51+20
 672 0070 1A70     		strb	r2, [r3]
 673              	.LVL57:
 674              	.LBB8:
 675              	.LBB9:
 676              		.file 2 "F4_CORE/core_cm4.h"
   1:F4_CORE/core_cm4.h **** /**************************************************************************//**
   2:F4_CORE/core_cm4.h ****  * @file     core_cm4.h
   3:F4_CORE/core_cm4.h ****  * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
   4:F4_CORE/core_cm4.h ****  * @version  V4.10
   5:F4_CORE/core_cm4.h ****  * @date     18. March 2015
   6:F4_CORE/core_cm4.h ****  *
   7:F4_CORE/core_cm4.h ****  * @note
   8:F4_CORE/core_cm4.h ****  *
   9:F4_CORE/core_cm4.h ****  ******************************************************************************/
  10:F4_CORE/core_cm4.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
  11:F4_CORE/core_cm4.h **** 
  12:F4_CORE/core_cm4.h ****    All rights reserved.
ARM GAS  /tmp/ccHlURRu.s 			page 25


  13:F4_CORE/core_cm4.h ****    Redistribution and use in source and binary forms, with or without
  14:F4_CORE/core_cm4.h ****    modification, are permitted provided that the following conditions are met:
  15:F4_CORE/core_cm4.h ****    - Redistributions of source code must retain the above copyright
  16:F4_CORE/core_cm4.h ****      notice, this list of conditions and the following disclaimer.
  17:F4_CORE/core_cm4.h ****    - Redistributions in binary form must reproduce the above copyright
  18:F4_CORE/core_cm4.h ****      notice, this list of conditions and the following disclaimer in the
  19:F4_CORE/core_cm4.h ****      documentation and/or other materials provided with the distribution.
  20:F4_CORE/core_cm4.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:F4_CORE/core_cm4.h ****      to endorse or promote products derived from this software without
  22:F4_CORE/core_cm4.h ****      specific prior written permission.
  23:F4_CORE/core_cm4.h ****    *
  24:F4_CORE/core_cm4.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:F4_CORE/core_cm4.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:F4_CORE/core_cm4.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:F4_CORE/core_cm4.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:F4_CORE/core_cm4.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:F4_CORE/core_cm4.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:F4_CORE/core_cm4.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:F4_CORE/core_cm4.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:F4_CORE/core_cm4.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:F4_CORE/core_cm4.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:F4_CORE/core_cm4.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:F4_CORE/core_cm4.h ****    ---------------------------------------------------------------------------*/
  36:F4_CORE/core_cm4.h **** 
  37:F4_CORE/core_cm4.h **** 
  38:F4_CORE/core_cm4.h **** #if defined ( __ICCARM__ )
  39:F4_CORE/core_cm4.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  40:F4_CORE/core_cm4.h **** #endif
  41:F4_CORE/core_cm4.h **** 
  42:F4_CORE/core_cm4.h **** #ifndef __CORE_CM4_H_GENERIC
  43:F4_CORE/core_cm4.h **** #define __CORE_CM4_H_GENERIC
  44:F4_CORE/core_cm4.h **** 
  45:F4_CORE/core_cm4.h **** #ifdef __cplusplus
  46:F4_CORE/core_cm4.h ****  extern "C" {
  47:F4_CORE/core_cm4.h **** #endif
  48:F4_CORE/core_cm4.h **** 
  49:F4_CORE/core_cm4.h **** /** \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  50:F4_CORE/core_cm4.h ****   CMSIS violates the following MISRA-C:2004 rules:
  51:F4_CORE/core_cm4.h **** 
  52:F4_CORE/core_cm4.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  53:F4_CORE/core_cm4.h ****      Function definitions in header files are used to allow 'inlining'.
  54:F4_CORE/core_cm4.h **** 
  55:F4_CORE/core_cm4.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  56:F4_CORE/core_cm4.h ****      Unions are used for effective representation of core registers.
  57:F4_CORE/core_cm4.h **** 
  58:F4_CORE/core_cm4.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  59:F4_CORE/core_cm4.h ****      Function-like macros are used to allow more efficient code.
  60:F4_CORE/core_cm4.h ****  */
  61:F4_CORE/core_cm4.h **** 
  62:F4_CORE/core_cm4.h **** 
  63:F4_CORE/core_cm4.h **** /*******************************************************************************
  64:F4_CORE/core_cm4.h ****  *                 CMSIS definitions
  65:F4_CORE/core_cm4.h ****  ******************************************************************************/
  66:F4_CORE/core_cm4.h **** /** \ingroup Cortex_M4
  67:F4_CORE/core_cm4.h ****   @{
  68:F4_CORE/core_cm4.h ****  */
  69:F4_CORE/core_cm4.h **** 
ARM GAS  /tmp/ccHlURRu.s 			page 26


  70:F4_CORE/core_cm4.h **** /*  CMSIS CM4 definitions */
  71:F4_CORE/core_cm4.h **** #define __CM4_CMSIS_VERSION_MAIN  (0x04)                                   /*!< [31:16] CMSIS HAL m
  72:F4_CORE/core_cm4.h **** #define __CM4_CMSIS_VERSION_SUB   (0x00)                                   /*!< [15:0]  CMSIS HAL s
  73:F4_CORE/core_cm4.h **** #define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16) | \
  74:F4_CORE/core_cm4.h ****                                     __CM4_CMSIS_VERSION_SUB          )     /*!< CMSIS HAL version n
  75:F4_CORE/core_cm4.h **** 
  76:F4_CORE/core_cm4.h **** #define __CORTEX_M                (0x04)                                   /*!< Cortex-M Core      
  77:F4_CORE/core_cm4.h **** 
  78:F4_CORE/core_cm4.h **** 
  79:F4_CORE/core_cm4.h **** #if   defined ( __CC_ARM )
  80:F4_CORE/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  81:F4_CORE/core_cm4.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  82:F4_CORE/core_cm4.h ****   #define __STATIC_INLINE  static __inline
  83:F4_CORE/core_cm4.h **** 
  84:F4_CORE/core_cm4.h **** #elif defined ( __GNUC__ )
  85:F4_CORE/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  86:F4_CORE/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  87:F4_CORE/core_cm4.h ****   #define __STATIC_INLINE  static inline
  88:F4_CORE/core_cm4.h **** 
  89:F4_CORE/core_cm4.h **** #elif defined ( __ICCARM__ )
  90:F4_CORE/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  91:F4_CORE/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
  92:F4_CORE/core_cm4.h ****   #define __STATIC_INLINE  static inline
  93:F4_CORE/core_cm4.h **** 
  94:F4_CORE/core_cm4.h **** #elif defined ( __TMS470__ )
  95:F4_CORE/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
  96:F4_CORE/core_cm4.h ****   #define __STATIC_INLINE  static inline
  97:F4_CORE/core_cm4.h **** 
  98:F4_CORE/core_cm4.h **** #elif defined ( __TASKING__ )
  99:F4_CORE/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 100:F4_CORE/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 101:F4_CORE/core_cm4.h ****   #define __STATIC_INLINE  static inline
 102:F4_CORE/core_cm4.h **** 
 103:F4_CORE/core_cm4.h **** #elif defined ( __CSMC__ )
 104:F4_CORE/core_cm4.h ****   #define __packed
 105:F4_CORE/core_cm4.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 106:F4_CORE/core_cm4.h ****   #define __INLINE         inline                                    /*use -pc99 on compile line !<
 107:F4_CORE/core_cm4.h ****   #define __STATIC_INLINE  static inline
 108:F4_CORE/core_cm4.h **** 
 109:F4_CORE/core_cm4.h **** #endif
 110:F4_CORE/core_cm4.h **** 
 111:F4_CORE/core_cm4.h **** /** __FPU_USED indicates whether an FPU is used or not.
 112:F4_CORE/core_cm4.h ****     For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and fun
 113:F4_CORE/core_cm4.h **** */
 114:F4_CORE/core_cm4.h **** #if defined ( __CC_ARM )
 115:F4_CORE/core_cm4.h ****   #if defined __TARGET_FPU_VFP
 116:F4_CORE/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 117:F4_CORE/core_cm4.h ****       #define __FPU_USED       1
 118:F4_CORE/core_cm4.h ****     #else
 119:F4_CORE/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 120:F4_CORE/core_cm4.h ****       #define __FPU_USED       0
 121:F4_CORE/core_cm4.h ****     #endif
 122:F4_CORE/core_cm4.h ****   #else
 123:F4_CORE/core_cm4.h ****     #define __FPU_USED         0
 124:F4_CORE/core_cm4.h ****   #endif
 125:F4_CORE/core_cm4.h **** 
 126:F4_CORE/core_cm4.h **** #elif defined ( __GNUC__ )
ARM GAS  /tmp/ccHlURRu.s 			page 27


 127:F4_CORE/core_cm4.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 128:F4_CORE/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 129:F4_CORE/core_cm4.h ****       #define __FPU_USED       1
 130:F4_CORE/core_cm4.h ****     #else
 131:F4_CORE/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 132:F4_CORE/core_cm4.h ****       #define __FPU_USED       0
 133:F4_CORE/core_cm4.h ****     #endif
 134:F4_CORE/core_cm4.h ****   #else
 135:F4_CORE/core_cm4.h ****     #define __FPU_USED         1
 136:F4_CORE/core_cm4.h ****   #endif
 137:F4_CORE/core_cm4.h **** 
 138:F4_CORE/core_cm4.h **** #elif defined ( __ICCARM__ )
 139:F4_CORE/core_cm4.h ****   #if defined __ARMVFP__
 140:F4_CORE/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 141:F4_CORE/core_cm4.h ****       #define __FPU_USED       1
 142:F4_CORE/core_cm4.h ****     #else
 143:F4_CORE/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 144:F4_CORE/core_cm4.h ****       #define __FPU_USED       0
 145:F4_CORE/core_cm4.h ****     #endif
 146:F4_CORE/core_cm4.h ****   #else
 147:F4_CORE/core_cm4.h ****     #define __FPU_USED         0
 148:F4_CORE/core_cm4.h ****   #endif
 149:F4_CORE/core_cm4.h **** 
 150:F4_CORE/core_cm4.h **** #elif defined ( __TMS470__ )
 151:F4_CORE/core_cm4.h ****   #if defined __TI_VFP_SUPPORT__
 152:F4_CORE/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 153:F4_CORE/core_cm4.h ****       #define __FPU_USED       1
 154:F4_CORE/core_cm4.h ****     #else
 155:F4_CORE/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 156:F4_CORE/core_cm4.h ****       #define __FPU_USED       0
 157:F4_CORE/core_cm4.h ****     #endif
 158:F4_CORE/core_cm4.h ****   #else
 159:F4_CORE/core_cm4.h ****     #define __FPU_USED         0
 160:F4_CORE/core_cm4.h ****   #endif
 161:F4_CORE/core_cm4.h **** 
 162:F4_CORE/core_cm4.h **** #elif defined ( __TASKING__ )
 163:F4_CORE/core_cm4.h ****   #if defined __FPU_VFP__
 164:F4_CORE/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 165:F4_CORE/core_cm4.h ****       #define __FPU_USED       1
 166:F4_CORE/core_cm4.h ****     #else
 167:F4_CORE/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 168:F4_CORE/core_cm4.h ****       #define __FPU_USED       0
 169:F4_CORE/core_cm4.h ****     #endif
 170:F4_CORE/core_cm4.h ****   #else
 171:F4_CORE/core_cm4.h ****     #define __FPU_USED         0
 172:F4_CORE/core_cm4.h ****   #endif
 173:F4_CORE/core_cm4.h **** 
 174:F4_CORE/core_cm4.h **** #elif defined ( __CSMC__ )		/* Cosmic */
 175:F4_CORE/core_cm4.h ****   #if ( __CSMC__ & 0x400)		// FPU present for parser
 176:F4_CORE/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 177:F4_CORE/core_cm4.h ****       #define __FPU_USED       1
 178:F4_CORE/core_cm4.h ****     #else
 179:F4_CORE/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 180:F4_CORE/core_cm4.h ****       #define __FPU_USED       0
 181:F4_CORE/core_cm4.h ****     #endif
 182:F4_CORE/core_cm4.h ****   #else
 183:F4_CORE/core_cm4.h ****     #define __FPU_USED         0
ARM GAS  /tmp/ccHlURRu.s 			page 28


 184:F4_CORE/core_cm4.h ****   #endif
 185:F4_CORE/core_cm4.h **** #endif
 186:F4_CORE/core_cm4.h **** 
 187:F4_CORE/core_cm4.h **** #include <stdint.h>                      /* standard types definitions                      */
 188:F4_CORE/core_cm4.h **** #include <core_cmInstr.h>                /* Core Instruction Access                         */
 189:F4_CORE/core_cm4.h **** #include <core_cmFunc.h>                 /* Core Function Access                            */
 190:F4_CORE/core_cm4.h **** #include <core_cmSimd.h>                 /* Compiler specific SIMD Intrinsics               */
 191:F4_CORE/core_cm4.h **** 
 192:F4_CORE/core_cm4.h **** #ifdef __cplusplus
 193:F4_CORE/core_cm4.h **** }
 194:F4_CORE/core_cm4.h **** #endif
 195:F4_CORE/core_cm4.h **** 
 196:F4_CORE/core_cm4.h **** #endif /* __CORE_CM4_H_GENERIC */
 197:F4_CORE/core_cm4.h **** 
 198:F4_CORE/core_cm4.h **** #ifndef __CMSIS_GENERIC
 199:F4_CORE/core_cm4.h **** 
 200:F4_CORE/core_cm4.h **** #ifndef __CORE_CM4_H_DEPENDANT
 201:F4_CORE/core_cm4.h **** #define __CORE_CM4_H_DEPENDANT
 202:F4_CORE/core_cm4.h **** 
 203:F4_CORE/core_cm4.h **** #ifdef __cplusplus
 204:F4_CORE/core_cm4.h ****  extern "C" {
 205:F4_CORE/core_cm4.h **** #endif
 206:F4_CORE/core_cm4.h **** 
 207:F4_CORE/core_cm4.h **** /* check device defines and use defaults */
 208:F4_CORE/core_cm4.h **** #if defined __CHECK_DEVICE_DEFINES
 209:F4_CORE/core_cm4.h ****   #ifndef __CM4_REV
 210:F4_CORE/core_cm4.h ****     #define __CM4_REV               0x0000
 211:F4_CORE/core_cm4.h ****     #warning "__CM4_REV not defined in device header file; using default!"
 212:F4_CORE/core_cm4.h ****   #endif
 213:F4_CORE/core_cm4.h **** 
 214:F4_CORE/core_cm4.h ****   #ifndef __FPU_PRESENT
 215:F4_CORE/core_cm4.h ****     #define __FPU_PRESENT             0
 216:F4_CORE/core_cm4.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 217:F4_CORE/core_cm4.h ****   #endif
 218:F4_CORE/core_cm4.h **** 
 219:F4_CORE/core_cm4.h ****   #ifndef __MPU_PRESENT
 220:F4_CORE/core_cm4.h ****     #define __MPU_PRESENT             0
 221:F4_CORE/core_cm4.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 222:F4_CORE/core_cm4.h ****   #endif
 223:F4_CORE/core_cm4.h **** 
 224:F4_CORE/core_cm4.h ****   #ifndef __NVIC_PRIO_BITS
 225:F4_CORE/core_cm4.h ****     #define __NVIC_PRIO_BITS          4
 226:F4_CORE/core_cm4.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 227:F4_CORE/core_cm4.h ****   #endif
 228:F4_CORE/core_cm4.h **** 
 229:F4_CORE/core_cm4.h ****   #ifndef __Vendor_SysTickConfig
 230:F4_CORE/core_cm4.h ****     #define __Vendor_SysTickConfig    0
 231:F4_CORE/core_cm4.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 232:F4_CORE/core_cm4.h ****   #endif
 233:F4_CORE/core_cm4.h **** #endif
 234:F4_CORE/core_cm4.h **** 
 235:F4_CORE/core_cm4.h **** /* IO definitions (access restrictions to peripheral registers) */
 236:F4_CORE/core_cm4.h **** /**
 237:F4_CORE/core_cm4.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 238:F4_CORE/core_cm4.h **** 
 239:F4_CORE/core_cm4.h ****     <strong>IO Type Qualifiers</strong> are used
 240:F4_CORE/core_cm4.h ****     \li to specify the access to peripheral variables.
ARM GAS  /tmp/ccHlURRu.s 			page 29


 241:F4_CORE/core_cm4.h ****     \li for automatic generation of peripheral register debug information.
 242:F4_CORE/core_cm4.h **** */
 243:F4_CORE/core_cm4.h **** #ifdef __cplusplus
 244:F4_CORE/core_cm4.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions                 */
 245:F4_CORE/core_cm4.h **** #else
 246:F4_CORE/core_cm4.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions                 */
 247:F4_CORE/core_cm4.h **** #endif
 248:F4_CORE/core_cm4.h **** #define     __O     volatile             /*!< Defines 'write only' permissions                */
 249:F4_CORE/core_cm4.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions              */
 250:F4_CORE/core_cm4.h **** 
 251:F4_CORE/core_cm4.h **** /*@} end of group Cortex_M4 */
 252:F4_CORE/core_cm4.h **** 
 253:F4_CORE/core_cm4.h **** 
 254:F4_CORE/core_cm4.h **** 
 255:F4_CORE/core_cm4.h **** /*******************************************************************************
 256:F4_CORE/core_cm4.h ****  *                 Register Abstraction
 257:F4_CORE/core_cm4.h ****   Core Register contain:
 258:F4_CORE/core_cm4.h ****   - Core Register
 259:F4_CORE/core_cm4.h ****   - Core NVIC Register
 260:F4_CORE/core_cm4.h ****   - Core SCB Register
 261:F4_CORE/core_cm4.h ****   - Core SysTick Register
 262:F4_CORE/core_cm4.h ****   - Core Debug Register
 263:F4_CORE/core_cm4.h ****   - Core MPU Register
 264:F4_CORE/core_cm4.h ****   - Core FPU Register
 265:F4_CORE/core_cm4.h ****  ******************************************************************************/
 266:F4_CORE/core_cm4.h **** /** \defgroup CMSIS_core_register Defines and Type Definitions
 267:F4_CORE/core_cm4.h ****     \brief Type definitions and defines for Cortex-M processor based devices.
 268:F4_CORE/core_cm4.h **** */
 269:F4_CORE/core_cm4.h **** 
 270:F4_CORE/core_cm4.h **** /** \ingroup    CMSIS_core_register
 271:F4_CORE/core_cm4.h ****     \defgroup   CMSIS_CORE  Status and Control Registers
 272:F4_CORE/core_cm4.h ****     \brief  Core Register type definitions.
 273:F4_CORE/core_cm4.h ****   @{
 274:F4_CORE/core_cm4.h ****  */
 275:F4_CORE/core_cm4.h **** 
 276:F4_CORE/core_cm4.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 277:F4_CORE/core_cm4.h ****  */
 278:F4_CORE/core_cm4.h **** typedef union
 279:F4_CORE/core_cm4.h **** {
 280:F4_CORE/core_cm4.h ****   struct
 281:F4_CORE/core_cm4.h ****   {
 282:F4_CORE/core_cm4.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 283:F4_CORE/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 284:F4_CORE/core_cm4.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 285:F4_CORE/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 286:F4_CORE/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 287:F4_CORE/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 288:F4_CORE/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 289:F4_CORE/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 290:F4_CORE/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 291:F4_CORE/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 292:F4_CORE/core_cm4.h **** } APSR_Type;
 293:F4_CORE/core_cm4.h **** 
 294:F4_CORE/core_cm4.h **** /* APSR Register Definitions */
 295:F4_CORE/core_cm4.h **** #define APSR_N_Pos                         31                                             /*!< APSR
 296:F4_CORE/core_cm4.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 297:F4_CORE/core_cm4.h **** 
ARM GAS  /tmp/ccHlURRu.s 			page 30


 298:F4_CORE/core_cm4.h **** #define APSR_Z_Pos                         30                                             /*!< APSR
 299:F4_CORE/core_cm4.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 300:F4_CORE/core_cm4.h **** 
 301:F4_CORE/core_cm4.h **** #define APSR_C_Pos                         29                                             /*!< APSR
 302:F4_CORE/core_cm4.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 303:F4_CORE/core_cm4.h **** 
 304:F4_CORE/core_cm4.h **** #define APSR_V_Pos                         28                                             /*!< APSR
 305:F4_CORE/core_cm4.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 306:F4_CORE/core_cm4.h **** 
 307:F4_CORE/core_cm4.h **** #define APSR_Q_Pos                         27                                             /*!< APSR
 308:F4_CORE/core_cm4.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 309:F4_CORE/core_cm4.h **** 
 310:F4_CORE/core_cm4.h **** #define APSR_GE_Pos                        16                                             /*!< APSR
 311:F4_CORE/core_cm4.h **** #define APSR_GE_Msk                        (0xFUL << APSR_GE_Pos)                         /*!< APSR
 312:F4_CORE/core_cm4.h **** 
 313:F4_CORE/core_cm4.h **** 
 314:F4_CORE/core_cm4.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 315:F4_CORE/core_cm4.h ****  */
 316:F4_CORE/core_cm4.h **** typedef union
 317:F4_CORE/core_cm4.h **** {
 318:F4_CORE/core_cm4.h ****   struct
 319:F4_CORE/core_cm4.h ****   {
 320:F4_CORE/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 321:F4_CORE/core_cm4.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 322:F4_CORE/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 323:F4_CORE/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 324:F4_CORE/core_cm4.h **** } IPSR_Type;
 325:F4_CORE/core_cm4.h **** 
 326:F4_CORE/core_cm4.h **** /* IPSR Register Definitions */
 327:F4_CORE/core_cm4.h **** #define IPSR_ISR_Pos                        0                                             /*!< IPSR
 328:F4_CORE/core_cm4.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 329:F4_CORE/core_cm4.h **** 
 330:F4_CORE/core_cm4.h **** 
 331:F4_CORE/core_cm4.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 332:F4_CORE/core_cm4.h ****  */
 333:F4_CORE/core_cm4.h **** typedef union
 334:F4_CORE/core_cm4.h **** {
 335:F4_CORE/core_cm4.h ****   struct
 336:F4_CORE/core_cm4.h ****   {
 337:F4_CORE/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 338:F4_CORE/core_cm4.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 339:F4_CORE/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 340:F4_CORE/core_cm4.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 341:F4_CORE/core_cm4.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 342:F4_CORE/core_cm4.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 343:F4_CORE/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 344:F4_CORE/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 345:F4_CORE/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 346:F4_CORE/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 347:F4_CORE/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 348:F4_CORE/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 349:F4_CORE/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 350:F4_CORE/core_cm4.h **** } xPSR_Type;
 351:F4_CORE/core_cm4.h **** 
 352:F4_CORE/core_cm4.h **** /* xPSR Register Definitions */
 353:F4_CORE/core_cm4.h **** #define xPSR_N_Pos                         31                                             /*!< xPSR
 354:F4_CORE/core_cm4.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
ARM GAS  /tmp/ccHlURRu.s 			page 31


 355:F4_CORE/core_cm4.h **** 
 356:F4_CORE/core_cm4.h **** #define xPSR_Z_Pos                         30                                             /*!< xPSR
 357:F4_CORE/core_cm4.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 358:F4_CORE/core_cm4.h **** 
 359:F4_CORE/core_cm4.h **** #define xPSR_C_Pos                         29                                             /*!< xPSR
 360:F4_CORE/core_cm4.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 361:F4_CORE/core_cm4.h **** 
 362:F4_CORE/core_cm4.h **** #define xPSR_V_Pos                         28                                             /*!< xPSR
 363:F4_CORE/core_cm4.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 364:F4_CORE/core_cm4.h **** 
 365:F4_CORE/core_cm4.h **** #define xPSR_Q_Pos                         27                                             /*!< xPSR
 366:F4_CORE/core_cm4.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 367:F4_CORE/core_cm4.h **** 
 368:F4_CORE/core_cm4.h **** #define xPSR_IT_Pos                        25                                             /*!< xPSR
 369:F4_CORE/core_cm4.h **** #define xPSR_IT_Msk                        (3UL << xPSR_IT_Pos)                           /*!< xPSR
 370:F4_CORE/core_cm4.h **** 
 371:F4_CORE/core_cm4.h **** #define xPSR_T_Pos                         24                                             /*!< xPSR
 372:F4_CORE/core_cm4.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 373:F4_CORE/core_cm4.h **** 
 374:F4_CORE/core_cm4.h **** #define xPSR_GE_Pos                        16                                             /*!< xPSR
 375:F4_CORE/core_cm4.h **** #define xPSR_GE_Msk                        (0xFUL << xPSR_GE_Pos)                         /*!< xPSR
 376:F4_CORE/core_cm4.h **** 
 377:F4_CORE/core_cm4.h **** #define xPSR_ISR_Pos                        0                                             /*!< xPSR
 378:F4_CORE/core_cm4.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 379:F4_CORE/core_cm4.h **** 
 380:F4_CORE/core_cm4.h **** 
 381:F4_CORE/core_cm4.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 382:F4_CORE/core_cm4.h ****  */
 383:F4_CORE/core_cm4.h **** typedef union
 384:F4_CORE/core_cm4.h **** {
 385:F4_CORE/core_cm4.h ****   struct
 386:F4_CORE/core_cm4.h ****   {
 387:F4_CORE/core_cm4.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 388:F4_CORE/core_cm4.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 389:F4_CORE/core_cm4.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 390:F4_CORE/core_cm4.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 391:F4_CORE/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 392:F4_CORE/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 393:F4_CORE/core_cm4.h **** } CONTROL_Type;
 394:F4_CORE/core_cm4.h **** 
 395:F4_CORE/core_cm4.h **** /* CONTROL Register Definitions */
 396:F4_CORE/core_cm4.h **** #define CONTROL_FPCA_Pos                    2                                             /*!< CONT
 397:F4_CORE/core_cm4.h **** #define CONTROL_FPCA_Msk                   (1UL << CONTROL_FPCA_Pos)                      /*!< CONT
 398:F4_CORE/core_cm4.h **** 
 399:F4_CORE/core_cm4.h **** #define CONTROL_SPSEL_Pos                   1                                             /*!< CONT
 400:F4_CORE/core_cm4.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 401:F4_CORE/core_cm4.h **** 
 402:F4_CORE/core_cm4.h **** #define CONTROL_nPRIV_Pos                   0                                             /*!< CONT
 403:F4_CORE/core_cm4.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 404:F4_CORE/core_cm4.h **** 
 405:F4_CORE/core_cm4.h **** /*@} end of group CMSIS_CORE */
 406:F4_CORE/core_cm4.h **** 
 407:F4_CORE/core_cm4.h **** 
 408:F4_CORE/core_cm4.h **** /** \ingroup    CMSIS_core_register
 409:F4_CORE/core_cm4.h ****     \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 410:F4_CORE/core_cm4.h ****     \brief      Type definitions for the NVIC Registers
 411:F4_CORE/core_cm4.h ****   @{
ARM GAS  /tmp/ccHlURRu.s 			page 32


 412:F4_CORE/core_cm4.h ****  */
 413:F4_CORE/core_cm4.h **** 
 414:F4_CORE/core_cm4.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 415:F4_CORE/core_cm4.h ****  */
 416:F4_CORE/core_cm4.h **** typedef struct
 417:F4_CORE/core_cm4.h **** {
 418:F4_CORE/core_cm4.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 419:F4_CORE/core_cm4.h ****        uint32_t RESERVED0[24];
 420:F4_CORE/core_cm4.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 421:F4_CORE/core_cm4.h ****        uint32_t RSERVED1[24];
 422:F4_CORE/core_cm4.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 423:F4_CORE/core_cm4.h ****        uint32_t RESERVED2[24];
 424:F4_CORE/core_cm4.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 425:F4_CORE/core_cm4.h ****        uint32_t RESERVED3[24];
 426:F4_CORE/core_cm4.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 427:F4_CORE/core_cm4.h ****        uint32_t RESERVED4[56];
 428:F4_CORE/core_cm4.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 429:F4_CORE/core_cm4.h ****        uint32_t RESERVED5[644];
 430:F4_CORE/core_cm4.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 431:F4_CORE/core_cm4.h **** }  NVIC_Type;
 432:F4_CORE/core_cm4.h **** 
 433:F4_CORE/core_cm4.h **** /* Software Triggered Interrupt Register Definitions */
 434:F4_CORE/core_cm4.h **** #define NVIC_STIR_INTID_Pos                 0                                          /*!< STIR: I
 435:F4_CORE/core_cm4.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 436:F4_CORE/core_cm4.h **** 
 437:F4_CORE/core_cm4.h **** /*@} end of group CMSIS_NVIC */
 438:F4_CORE/core_cm4.h **** 
 439:F4_CORE/core_cm4.h **** 
 440:F4_CORE/core_cm4.h **** /** \ingroup  CMSIS_core_register
 441:F4_CORE/core_cm4.h ****     \defgroup CMSIS_SCB     System Control Block (SCB)
 442:F4_CORE/core_cm4.h ****     \brief      Type definitions for the System Control Block Registers
 443:F4_CORE/core_cm4.h ****   @{
 444:F4_CORE/core_cm4.h ****  */
 445:F4_CORE/core_cm4.h **** 
 446:F4_CORE/core_cm4.h **** /** \brief  Structure type to access the System Control Block (SCB).
 447:F4_CORE/core_cm4.h ****  */
 448:F4_CORE/core_cm4.h **** typedef struct
 449:F4_CORE/core_cm4.h **** {
 450:F4_CORE/core_cm4.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register             
 451:F4_CORE/core_cm4.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 452:F4_CORE/core_cm4.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 453:F4_CORE/core_cm4.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 454:F4_CORE/core_cm4.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 455:F4_CORE/core_cm4.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 456:F4_CORE/core_cm4.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 457:F4_CORE/core_cm4.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 458:F4_CORE/core_cm4.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 459:F4_CORE/core_cm4.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  HardFault Status Register       
 460:F4_CORE/core_cm4.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 461:F4_CORE/core_cm4.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 462:F4_CORE/core_cm4.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  BusFault Address Register       
 463:F4_CORE/core_cm4.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 464:F4_CORE/core_cm4.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 465:F4_CORE/core_cm4.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 466:F4_CORE/core_cm4.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 467:F4_CORE/core_cm4.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 468:F4_CORE/core_cm4.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
ARM GAS  /tmp/ccHlURRu.s 			page 33


 469:F4_CORE/core_cm4.h ****        uint32_t RESERVED0[5];
 470:F4_CORE/core_cm4.h ****   __IO uint32_t CPACR;                   /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 471:F4_CORE/core_cm4.h **** } SCB_Type;
 472:F4_CORE/core_cm4.h **** 
 473:F4_CORE/core_cm4.h **** /* SCB CPUID Register Definitions */
 474:F4_CORE/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 475:F4_CORE/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 476:F4_CORE/core_cm4.h **** 
 477:F4_CORE/core_cm4.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 478:F4_CORE/core_cm4.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 479:F4_CORE/core_cm4.h **** 
 480:F4_CORE/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 481:F4_CORE/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 482:F4_CORE/core_cm4.h **** 
 483:F4_CORE/core_cm4.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 484:F4_CORE/core_cm4.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 485:F4_CORE/core_cm4.h **** 
 486:F4_CORE/core_cm4.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 487:F4_CORE/core_cm4.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 488:F4_CORE/core_cm4.h **** 
 489:F4_CORE/core_cm4.h **** /* SCB Interrupt Control State Register Definitions */
 490:F4_CORE/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 491:F4_CORE/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 492:F4_CORE/core_cm4.h **** 
 493:F4_CORE/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 494:F4_CORE/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 495:F4_CORE/core_cm4.h **** 
 496:F4_CORE/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 497:F4_CORE/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 498:F4_CORE/core_cm4.h **** 
 499:F4_CORE/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 500:F4_CORE/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 501:F4_CORE/core_cm4.h **** 
 502:F4_CORE/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 503:F4_CORE/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 504:F4_CORE/core_cm4.h **** 
 505:F4_CORE/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 506:F4_CORE/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 507:F4_CORE/core_cm4.h **** 
 508:F4_CORE/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 509:F4_CORE/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 510:F4_CORE/core_cm4.h **** 
 511:F4_CORE/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 512:F4_CORE/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 513:F4_CORE/core_cm4.h **** 
 514:F4_CORE/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 515:F4_CORE/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 516:F4_CORE/core_cm4.h **** 
 517:F4_CORE/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 518:F4_CORE/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 519:F4_CORE/core_cm4.h **** 
 520:F4_CORE/core_cm4.h **** /* SCB Vector Table Offset Register Definitions */
 521:F4_CORE/core_cm4.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 522:F4_CORE/core_cm4.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 523:F4_CORE/core_cm4.h **** 
 524:F4_CORE/core_cm4.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 525:F4_CORE/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
ARM GAS  /tmp/ccHlURRu.s 			page 34


 526:F4_CORE/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 527:F4_CORE/core_cm4.h **** 
 528:F4_CORE/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 529:F4_CORE/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 530:F4_CORE/core_cm4.h **** 
 531:F4_CORE/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 532:F4_CORE/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 533:F4_CORE/core_cm4.h **** 
 534:F4_CORE/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 535:F4_CORE/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 536:F4_CORE/core_cm4.h **** 
 537:F4_CORE/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 538:F4_CORE/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 539:F4_CORE/core_cm4.h **** 
 540:F4_CORE/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 541:F4_CORE/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 542:F4_CORE/core_cm4.h **** 
 543:F4_CORE/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 544:F4_CORE/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 545:F4_CORE/core_cm4.h **** 
 546:F4_CORE/core_cm4.h **** /* SCB System Control Register Definitions */
 547:F4_CORE/core_cm4.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 548:F4_CORE/core_cm4.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 549:F4_CORE/core_cm4.h **** 
 550:F4_CORE/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 551:F4_CORE/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 552:F4_CORE/core_cm4.h **** 
 553:F4_CORE/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 554:F4_CORE/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 555:F4_CORE/core_cm4.h **** 
 556:F4_CORE/core_cm4.h **** /* SCB Configuration Control Register Definitions */
 557:F4_CORE/core_cm4.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 558:F4_CORE/core_cm4.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 559:F4_CORE/core_cm4.h **** 
 560:F4_CORE/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 561:F4_CORE/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 562:F4_CORE/core_cm4.h **** 
 563:F4_CORE/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 564:F4_CORE/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 565:F4_CORE/core_cm4.h **** 
 566:F4_CORE/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 567:F4_CORE/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 568:F4_CORE/core_cm4.h **** 
 569:F4_CORE/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 570:F4_CORE/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 571:F4_CORE/core_cm4.h **** 
 572:F4_CORE/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 573:F4_CORE/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 574:F4_CORE/core_cm4.h **** 
 575:F4_CORE/core_cm4.h **** /* SCB System Handler Control and State Register Definitions */
 576:F4_CORE/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 577:F4_CORE/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 578:F4_CORE/core_cm4.h **** 
 579:F4_CORE/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 580:F4_CORE/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 581:F4_CORE/core_cm4.h **** 
 582:F4_CORE/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
ARM GAS  /tmp/ccHlURRu.s 			page 35


 583:F4_CORE/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 584:F4_CORE/core_cm4.h **** 
 585:F4_CORE/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 586:F4_CORE/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 587:F4_CORE/core_cm4.h **** 
 588:F4_CORE/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 589:F4_CORE/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 590:F4_CORE/core_cm4.h **** 
 591:F4_CORE/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 592:F4_CORE/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 593:F4_CORE/core_cm4.h **** 
 594:F4_CORE/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 595:F4_CORE/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 596:F4_CORE/core_cm4.h **** 
 597:F4_CORE/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 598:F4_CORE/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 599:F4_CORE/core_cm4.h **** 
 600:F4_CORE/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 601:F4_CORE/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 602:F4_CORE/core_cm4.h **** 
 603:F4_CORE/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 604:F4_CORE/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 605:F4_CORE/core_cm4.h **** 
 606:F4_CORE/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 607:F4_CORE/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 608:F4_CORE/core_cm4.h **** 
 609:F4_CORE/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 610:F4_CORE/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 611:F4_CORE/core_cm4.h **** 
 612:F4_CORE/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 613:F4_CORE/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 614:F4_CORE/core_cm4.h **** 
 615:F4_CORE/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 616:F4_CORE/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 617:F4_CORE/core_cm4.h **** 
 618:F4_CORE/core_cm4.h **** /* SCB Configurable Fault Status Registers Definitions */
 619:F4_CORE/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 620:F4_CORE/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 621:F4_CORE/core_cm4.h **** 
 622:F4_CORE/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 623:F4_CORE/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 624:F4_CORE/core_cm4.h **** 
 625:F4_CORE/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 626:F4_CORE/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 627:F4_CORE/core_cm4.h **** 
 628:F4_CORE/core_cm4.h **** /* SCB Hard Fault Status Registers Definitions */
 629:F4_CORE/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 630:F4_CORE/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 631:F4_CORE/core_cm4.h **** 
 632:F4_CORE/core_cm4.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 633:F4_CORE/core_cm4.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 634:F4_CORE/core_cm4.h **** 
 635:F4_CORE/core_cm4.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 636:F4_CORE/core_cm4.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 637:F4_CORE/core_cm4.h **** 
 638:F4_CORE/core_cm4.h **** /* SCB Debug Fault Status Register Definitions */
 639:F4_CORE/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
ARM GAS  /tmp/ccHlURRu.s 			page 36


 640:F4_CORE/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 641:F4_CORE/core_cm4.h **** 
 642:F4_CORE/core_cm4.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 643:F4_CORE/core_cm4.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 644:F4_CORE/core_cm4.h **** 
 645:F4_CORE/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 646:F4_CORE/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 647:F4_CORE/core_cm4.h **** 
 648:F4_CORE/core_cm4.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 649:F4_CORE/core_cm4.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 650:F4_CORE/core_cm4.h **** 
 651:F4_CORE/core_cm4.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 652:F4_CORE/core_cm4.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 653:F4_CORE/core_cm4.h **** 
 654:F4_CORE/core_cm4.h **** /*@} end of group CMSIS_SCB */
 655:F4_CORE/core_cm4.h **** 
 656:F4_CORE/core_cm4.h **** 
 657:F4_CORE/core_cm4.h **** /** \ingroup  CMSIS_core_register
 658:F4_CORE/core_cm4.h ****     \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 659:F4_CORE/core_cm4.h ****     \brief      Type definitions for the System Control and ID Register not in the SCB
 660:F4_CORE/core_cm4.h ****   @{
 661:F4_CORE/core_cm4.h ****  */
 662:F4_CORE/core_cm4.h **** 
 663:F4_CORE/core_cm4.h **** /** \brief  Structure type to access the System Control and ID Register not in the SCB.
 664:F4_CORE/core_cm4.h ****  */
 665:F4_CORE/core_cm4.h **** typedef struct
 666:F4_CORE/core_cm4.h **** {
 667:F4_CORE/core_cm4.h ****        uint32_t RESERVED0[1];
 668:F4_CORE/core_cm4.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 669:F4_CORE/core_cm4.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 670:F4_CORE/core_cm4.h **** } SCnSCB_Type;
 671:F4_CORE/core_cm4.h **** 
 672:F4_CORE/core_cm4.h **** /* Interrupt Controller Type Register Definitions */
 673:F4_CORE/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0                                          /*!< ICTR: I
 674:F4_CORE/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 675:F4_CORE/core_cm4.h **** 
 676:F4_CORE/core_cm4.h **** /* Auxiliary Control Register Definitions */
 677:F4_CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Pos            9                                          /*!< ACTLR: 
 678:F4_CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: 
 679:F4_CORE/core_cm4.h **** 
 680:F4_CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Pos            8                                          /*!< ACTLR: 
 681:F4_CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: 
 682:F4_CORE/core_cm4.h **** 
 683:F4_CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2                                          /*!< ACTLR: 
 684:F4_CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 685:F4_CORE/core_cm4.h **** 
 686:F4_CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1                                          /*!< ACTLR: 
 687:F4_CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 688:F4_CORE/core_cm4.h **** 
 689:F4_CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0                                          /*!< ACTLR: 
 690:F4_CORE/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 691:F4_CORE/core_cm4.h **** 
 692:F4_CORE/core_cm4.h **** /*@} end of group CMSIS_SCnotSCB */
 693:F4_CORE/core_cm4.h **** 
 694:F4_CORE/core_cm4.h **** 
 695:F4_CORE/core_cm4.h **** /** \ingroup  CMSIS_core_register
 696:F4_CORE/core_cm4.h ****     \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
ARM GAS  /tmp/ccHlURRu.s 			page 37


 697:F4_CORE/core_cm4.h ****     \brief      Type definitions for the System Timer Registers.
 698:F4_CORE/core_cm4.h ****   @{
 699:F4_CORE/core_cm4.h ****  */
 700:F4_CORE/core_cm4.h **** 
 701:F4_CORE/core_cm4.h **** /** \brief  Structure type to access the System Timer (SysTick).
 702:F4_CORE/core_cm4.h ****  */
 703:F4_CORE/core_cm4.h **** typedef struct
 704:F4_CORE/core_cm4.h **** {
 705:F4_CORE/core_cm4.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 706:F4_CORE/core_cm4.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 707:F4_CORE/core_cm4.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 708:F4_CORE/core_cm4.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 709:F4_CORE/core_cm4.h **** } SysTick_Type;
 710:F4_CORE/core_cm4.h **** 
 711:F4_CORE/core_cm4.h **** /* SysTick Control / Status Register Definitions */
 712:F4_CORE/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 713:F4_CORE/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 714:F4_CORE/core_cm4.h **** 
 715:F4_CORE/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 716:F4_CORE/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 717:F4_CORE/core_cm4.h **** 
 718:F4_CORE/core_cm4.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 719:F4_CORE/core_cm4.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 720:F4_CORE/core_cm4.h **** 
 721:F4_CORE/core_cm4.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 722:F4_CORE/core_cm4.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 723:F4_CORE/core_cm4.h **** 
 724:F4_CORE/core_cm4.h **** /* SysTick Reload Register Definitions */
 725:F4_CORE/core_cm4.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 726:F4_CORE/core_cm4.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 727:F4_CORE/core_cm4.h **** 
 728:F4_CORE/core_cm4.h **** /* SysTick Current Register Definitions */
 729:F4_CORE/core_cm4.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 730:F4_CORE/core_cm4.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 731:F4_CORE/core_cm4.h **** 
 732:F4_CORE/core_cm4.h **** /* SysTick Calibration Register Definitions */
 733:F4_CORE/core_cm4.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 734:F4_CORE/core_cm4.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 735:F4_CORE/core_cm4.h **** 
 736:F4_CORE/core_cm4.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 737:F4_CORE/core_cm4.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 738:F4_CORE/core_cm4.h **** 
 739:F4_CORE/core_cm4.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 740:F4_CORE/core_cm4.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 741:F4_CORE/core_cm4.h **** 
 742:F4_CORE/core_cm4.h **** /*@} end of group CMSIS_SysTick */
 743:F4_CORE/core_cm4.h **** 
 744:F4_CORE/core_cm4.h **** 
 745:F4_CORE/core_cm4.h **** /** \ingroup  CMSIS_core_register
 746:F4_CORE/core_cm4.h ****     \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 747:F4_CORE/core_cm4.h ****     \brief      Type definitions for the Instrumentation Trace Macrocell (ITM)
 748:F4_CORE/core_cm4.h ****   @{
 749:F4_CORE/core_cm4.h ****  */
 750:F4_CORE/core_cm4.h **** 
 751:F4_CORE/core_cm4.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 752:F4_CORE/core_cm4.h ****  */
 753:F4_CORE/core_cm4.h **** typedef struct
ARM GAS  /tmp/ccHlURRu.s 			page 38


 754:F4_CORE/core_cm4.h **** {
 755:F4_CORE/core_cm4.h ****   __O  union
 756:F4_CORE/core_cm4.h ****   {
 757:F4_CORE/core_cm4.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 758:F4_CORE/core_cm4.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 759:F4_CORE/core_cm4.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 760:F4_CORE/core_cm4.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 761:F4_CORE/core_cm4.h ****        uint32_t RESERVED0[864];
 762:F4_CORE/core_cm4.h ****   __IO uint32_t TER;                     /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register       
 763:F4_CORE/core_cm4.h ****        uint32_t RESERVED1[15];
 764:F4_CORE/core_cm4.h ****   __IO uint32_t TPR;                     /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register    
 765:F4_CORE/core_cm4.h ****        uint32_t RESERVED2[15];
 766:F4_CORE/core_cm4.h ****   __IO uint32_t TCR;                     /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register      
 767:F4_CORE/core_cm4.h ****        uint32_t RESERVED3[29];
 768:F4_CORE/core_cm4.h ****   __O  uint32_t IWR;                     /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register  
 769:F4_CORE/core_cm4.h ****   __I  uint32_t IRR;                     /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register   
 770:F4_CORE/core_cm4.h ****   __IO uint32_t IMCR;                    /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 771:F4_CORE/core_cm4.h ****        uint32_t RESERVED4[43];
 772:F4_CORE/core_cm4.h ****   __O  uint32_t LAR;                     /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register        
 773:F4_CORE/core_cm4.h ****   __I  uint32_t LSR;                     /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register        
 774:F4_CORE/core_cm4.h ****        uint32_t RESERVED5[6];
 775:F4_CORE/core_cm4.h ****   __I  uint32_t PID4;                    /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 776:F4_CORE/core_cm4.h ****   __I  uint32_t PID5;                    /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 777:F4_CORE/core_cm4.h ****   __I  uint32_t PID6;                    /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 778:F4_CORE/core_cm4.h ****   __I  uint32_t PID7;                    /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 779:F4_CORE/core_cm4.h ****   __I  uint32_t PID0;                    /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 780:F4_CORE/core_cm4.h ****   __I  uint32_t PID1;                    /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 781:F4_CORE/core_cm4.h ****   __I  uint32_t PID2;                    /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 782:F4_CORE/core_cm4.h ****   __I  uint32_t PID3;                    /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 783:F4_CORE/core_cm4.h ****   __I  uint32_t CID0;                    /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 784:F4_CORE/core_cm4.h ****   __I  uint32_t CID1;                    /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 785:F4_CORE/core_cm4.h ****   __I  uint32_t CID2;                    /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 786:F4_CORE/core_cm4.h ****   __I  uint32_t CID3;                    /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 787:F4_CORE/core_cm4.h **** } ITM_Type;
 788:F4_CORE/core_cm4.h **** 
 789:F4_CORE/core_cm4.h **** /* ITM Trace Privilege Register Definitions */
 790:F4_CORE/core_cm4.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 791:F4_CORE/core_cm4.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL /*<< ITM_TPR_PRIVMASK_Pos*/)            /*!< ITM 
 792:F4_CORE/core_cm4.h **** 
 793:F4_CORE/core_cm4.h **** /* ITM Trace Control Register Definitions */
 794:F4_CORE/core_cm4.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 795:F4_CORE/core_cm4.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 796:F4_CORE/core_cm4.h **** 
 797:F4_CORE/core_cm4.h **** #define ITM_TCR_TraceBusID_Pos             16                                             /*!< ITM 
 798:F4_CORE/core_cm4.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 799:F4_CORE/core_cm4.h **** 
 800:F4_CORE/core_cm4.h **** #define ITM_TCR_GTSFREQ_Pos                10                                             /*!< ITM 
 801:F4_CORE/core_cm4.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 802:F4_CORE/core_cm4.h **** 
 803:F4_CORE/core_cm4.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 804:F4_CORE/core_cm4.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 805:F4_CORE/core_cm4.h **** 
 806:F4_CORE/core_cm4.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 807:F4_CORE/core_cm4.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 808:F4_CORE/core_cm4.h **** 
 809:F4_CORE/core_cm4.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 810:F4_CORE/core_cm4.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
ARM GAS  /tmp/ccHlURRu.s 			page 39


 811:F4_CORE/core_cm4.h **** 
 812:F4_CORE/core_cm4.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 813:F4_CORE/core_cm4.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 814:F4_CORE/core_cm4.h **** 
 815:F4_CORE/core_cm4.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 816:F4_CORE/core_cm4.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 817:F4_CORE/core_cm4.h **** 
 818:F4_CORE/core_cm4.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 819:F4_CORE/core_cm4.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 820:F4_CORE/core_cm4.h **** 
 821:F4_CORE/core_cm4.h **** /* ITM Integration Write Register Definitions */
 822:F4_CORE/core_cm4.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 823:F4_CORE/core_cm4.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 824:F4_CORE/core_cm4.h **** 
 825:F4_CORE/core_cm4.h **** /* ITM Integration Read Register Definitions */
 826:F4_CORE/core_cm4.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 827:F4_CORE/core_cm4.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
 828:F4_CORE/core_cm4.h **** 
 829:F4_CORE/core_cm4.h **** /* ITM Integration Mode Control Register Definitions */
 830:F4_CORE/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 831:F4_CORE/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 832:F4_CORE/core_cm4.h **** 
 833:F4_CORE/core_cm4.h **** /* ITM Lock Status Register Definitions */
 834:F4_CORE/core_cm4.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 835:F4_CORE/core_cm4.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 836:F4_CORE/core_cm4.h **** 
 837:F4_CORE/core_cm4.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 838:F4_CORE/core_cm4.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 839:F4_CORE/core_cm4.h **** 
 840:F4_CORE/core_cm4.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 841:F4_CORE/core_cm4.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 842:F4_CORE/core_cm4.h **** 
 843:F4_CORE/core_cm4.h **** /*@}*/ /* end of group CMSIS_ITM */
 844:F4_CORE/core_cm4.h **** 
 845:F4_CORE/core_cm4.h **** 
 846:F4_CORE/core_cm4.h **** /** \ingroup  CMSIS_core_register
 847:F4_CORE/core_cm4.h ****     \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 848:F4_CORE/core_cm4.h ****     \brief      Type definitions for the Data Watchpoint and Trace (DWT)
 849:F4_CORE/core_cm4.h ****   @{
 850:F4_CORE/core_cm4.h ****  */
 851:F4_CORE/core_cm4.h **** 
 852:F4_CORE/core_cm4.h **** /** \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 853:F4_CORE/core_cm4.h ****  */
 854:F4_CORE/core_cm4.h **** typedef struct
 855:F4_CORE/core_cm4.h **** {
 856:F4_CORE/core_cm4.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  Control Register                
 857:F4_CORE/core_cm4.h ****   __IO uint32_t CYCCNT;                  /*!< Offset: 0x004 (R/W)  Cycle Count Register            
 858:F4_CORE/core_cm4.h ****   __IO uint32_t CPICNT;                  /*!< Offset: 0x008 (R/W)  CPI Count Register              
 859:F4_CORE/core_cm4.h ****   __IO uint32_t EXCCNT;                  /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 860:F4_CORE/core_cm4.h ****   __IO uint32_t SLEEPCNT;                /*!< Offset: 0x010 (R/W)  Sleep Count Register            
 861:F4_CORE/core_cm4.h ****   __IO uint32_t LSUCNT;                  /*!< Offset: 0x014 (R/W)  LSU Count Register              
 862:F4_CORE/core_cm4.h ****   __IO uint32_t FOLDCNT;                 /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 863:F4_CORE/core_cm4.h ****   __I  uint32_t PCSR;                    /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 864:F4_CORE/core_cm4.h ****   __IO uint32_t COMP0;                   /*!< Offset: 0x020 (R/W)  Comparator Register 0           
 865:F4_CORE/core_cm4.h ****   __IO uint32_t MASK0;                   /*!< Offset: 0x024 (R/W)  Mask Register 0                 
 866:F4_CORE/core_cm4.h ****   __IO uint32_t FUNCTION0;               /*!< Offset: 0x028 (R/W)  Function Register 0             
 867:F4_CORE/core_cm4.h ****        uint32_t RESERVED0[1];
ARM GAS  /tmp/ccHlURRu.s 			page 40


 868:F4_CORE/core_cm4.h ****   __IO uint32_t COMP1;                   /*!< Offset: 0x030 (R/W)  Comparator Register 1           
 869:F4_CORE/core_cm4.h ****   __IO uint32_t MASK1;                   /*!< Offset: 0x034 (R/W)  Mask Register 1                 
 870:F4_CORE/core_cm4.h ****   __IO uint32_t FUNCTION1;               /*!< Offset: 0x038 (R/W)  Function Register 1             
 871:F4_CORE/core_cm4.h ****        uint32_t RESERVED1[1];
 872:F4_CORE/core_cm4.h ****   __IO uint32_t COMP2;                   /*!< Offset: 0x040 (R/W)  Comparator Register 2           
 873:F4_CORE/core_cm4.h ****   __IO uint32_t MASK2;                   /*!< Offset: 0x044 (R/W)  Mask Register 2                 
 874:F4_CORE/core_cm4.h ****   __IO uint32_t FUNCTION2;               /*!< Offset: 0x048 (R/W)  Function Register 2             
 875:F4_CORE/core_cm4.h ****        uint32_t RESERVED2[1];
 876:F4_CORE/core_cm4.h ****   __IO uint32_t COMP3;                   /*!< Offset: 0x050 (R/W)  Comparator Register 3           
 877:F4_CORE/core_cm4.h ****   __IO uint32_t MASK3;                   /*!< Offset: 0x054 (R/W)  Mask Register 3                 
 878:F4_CORE/core_cm4.h ****   __IO uint32_t FUNCTION3;               /*!< Offset: 0x058 (R/W)  Function Register 3             
 879:F4_CORE/core_cm4.h **** } DWT_Type;
 880:F4_CORE/core_cm4.h **** 
 881:F4_CORE/core_cm4.h **** /* DWT Control Register Definitions */
 882:F4_CORE/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Pos               28                                          /*!< DWT CTR
 883:F4_CORE/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 884:F4_CORE/core_cm4.h **** 
 885:F4_CORE/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Pos              27                                          /*!< DWT CTR
 886:F4_CORE/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 887:F4_CORE/core_cm4.h **** 
 888:F4_CORE/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26                                          /*!< DWT CTR
 889:F4_CORE/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 890:F4_CORE/core_cm4.h **** 
 891:F4_CORE/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Pos              25                                          /*!< DWT CTR
 892:F4_CORE/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 893:F4_CORE/core_cm4.h **** 
 894:F4_CORE/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Pos              24                                          /*!< DWT CTR
 895:F4_CORE/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 896:F4_CORE/core_cm4.h **** 
 897:F4_CORE/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Pos             22                                          /*!< DWT CTR
 898:F4_CORE/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 899:F4_CORE/core_cm4.h **** 
 900:F4_CORE/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21                                          /*!< DWT CTR
 901:F4_CORE/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 902:F4_CORE/core_cm4.h **** 
 903:F4_CORE/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Pos             20                                          /*!< DWT CTR
 904:F4_CORE/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 905:F4_CORE/core_cm4.h **** 
 906:F4_CORE/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19                                          /*!< DWT CTR
 907:F4_CORE/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 908:F4_CORE/core_cm4.h **** 
 909:F4_CORE/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Pos             18                                          /*!< DWT CTR
 910:F4_CORE/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 911:F4_CORE/core_cm4.h **** 
 912:F4_CORE/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Pos             17                                          /*!< DWT CTR
 913:F4_CORE/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 914:F4_CORE/core_cm4.h **** 
 915:F4_CORE/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Pos             16                                          /*!< DWT CTR
 916:F4_CORE/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 917:F4_CORE/core_cm4.h **** 
 918:F4_CORE/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12                                          /*!< DWT CTR
 919:F4_CORE/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 920:F4_CORE/core_cm4.h **** 
 921:F4_CORE/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Pos               10                                          /*!< DWT CTR
 922:F4_CORE/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 923:F4_CORE/core_cm4.h **** 
 924:F4_CORE/core_cm4.h **** #define DWT_CTRL_CYCTAP_Pos                 9                                          /*!< DWT CTR
ARM GAS  /tmp/ccHlURRu.s 			page 41


 925:F4_CORE/core_cm4.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 926:F4_CORE/core_cm4.h **** 
 927:F4_CORE/core_cm4.h **** #define DWT_CTRL_POSTINIT_Pos               5                                          /*!< DWT CTR
 928:F4_CORE/core_cm4.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 929:F4_CORE/core_cm4.h **** 
 930:F4_CORE/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Pos             1                                          /*!< DWT CTR
 931:F4_CORE/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 932:F4_CORE/core_cm4.h **** 
 933:F4_CORE/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Pos              0                                          /*!< DWT CTR
 934:F4_CORE/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 935:F4_CORE/core_cm4.h **** 
 936:F4_CORE/core_cm4.h **** /* DWT CPI Count Register Definitions */
 937:F4_CORE/core_cm4.h **** #define DWT_CPICNT_CPICNT_Pos               0                                          /*!< DWT CPI
 938:F4_CORE/core_cm4.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 939:F4_CORE/core_cm4.h **** 
 940:F4_CORE/core_cm4.h **** /* DWT Exception Overhead Count Register Definitions */
 941:F4_CORE/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Pos               0                                          /*!< DWT EXC
 942:F4_CORE/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
 943:F4_CORE/core_cm4.h **** 
 944:F4_CORE/core_cm4.h **** /* DWT Sleep Count Register Definitions */
 945:F4_CORE/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0                                          /*!< DWT SLE
 946:F4_CORE/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
 947:F4_CORE/core_cm4.h **** 
 948:F4_CORE/core_cm4.h **** /* DWT LSU Count Register Definitions */
 949:F4_CORE/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Pos               0                                          /*!< DWT LSU
 950:F4_CORE/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
 951:F4_CORE/core_cm4.h **** 
 952:F4_CORE/core_cm4.h **** /* DWT Folded-instruction Count Register Definitions */
 953:F4_CORE/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0                                          /*!< DWT FOL
 954:F4_CORE/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
 955:F4_CORE/core_cm4.h **** 
 956:F4_CORE/core_cm4.h **** /* DWT Comparator Mask Register Definitions */
 957:F4_CORE/core_cm4.h **** #define DWT_MASK_MASK_Pos                   0                                          /*!< DWT MAS
 958:F4_CORE/core_cm4.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
 959:F4_CORE/core_cm4.h **** 
 960:F4_CORE/core_cm4.h **** /* DWT Comparator Function Register Definitions */
 961:F4_CORE/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Pos           24                                          /*!< DWT FUN
 962:F4_CORE/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
 963:F4_CORE/core_cm4.h **** 
 964:F4_CORE/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16                                          /*!< DWT FUN
 965:F4_CORE/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
 966:F4_CORE/core_cm4.h **** 
 967:F4_CORE/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12                                          /*!< DWT FUN
 968:F4_CORE/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
 969:F4_CORE/core_cm4.h **** 
 970:F4_CORE/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10                                          /*!< DWT FUN
 971:F4_CORE/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
 972:F4_CORE/core_cm4.h **** 
 973:F4_CORE/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9                                          /*!< DWT FUN
 974:F4_CORE/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
 975:F4_CORE/core_cm4.h **** 
 976:F4_CORE/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8                                          /*!< DWT FUN
 977:F4_CORE/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
 978:F4_CORE/core_cm4.h **** 
 979:F4_CORE/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7                                          /*!< DWT FUN
 980:F4_CORE/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
 981:F4_CORE/core_cm4.h **** 
ARM GAS  /tmp/ccHlURRu.s 			page 42


 982:F4_CORE/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5                                          /*!< DWT FUN
 983:F4_CORE/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
 984:F4_CORE/core_cm4.h **** 
 985:F4_CORE/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Pos           0                                          /*!< DWT FUN
 986:F4_CORE/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
 987:F4_CORE/core_cm4.h **** 
 988:F4_CORE/core_cm4.h **** /*@}*/ /* end of group CMSIS_DWT */
 989:F4_CORE/core_cm4.h **** 
 990:F4_CORE/core_cm4.h **** 
 991:F4_CORE/core_cm4.h **** /** \ingroup  CMSIS_core_register
 992:F4_CORE/core_cm4.h ****     \defgroup CMSIS_TPI     Trace Port Interface (TPI)
 993:F4_CORE/core_cm4.h ****     \brief      Type definitions for the Trace Port Interface (TPI)
 994:F4_CORE/core_cm4.h ****   @{
 995:F4_CORE/core_cm4.h ****  */
 996:F4_CORE/core_cm4.h **** 
 997:F4_CORE/core_cm4.h **** /** \brief  Structure type to access the Trace Port Interface Register (TPI).
 998:F4_CORE/core_cm4.h ****  */
 999:F4_CORE/core_cm4.h **** typedef struct
1000:F4_CORE/core_cm4.h **** {
1001:F4_CORE/core_cm4.h ****   __IO uint32_t SSPSR;                   /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
1002:F4_CORE/core_cm4.h ****   __IO uint32_t CSPSR;                   /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
1003:F4_CORE/core_cm4.h ****        uint32_t RESERVED0[2];
1004:F4_CORE/core_cm4.h ****   __IO uint32_t ACPR;                    /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1005:F4_CORE/core_cm4.h ****        uint32_t RESERVED1[55];
1006:F4_CORE/core_cm4.h ****   __IO uint32_t SPPR;                    /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1007:F4_CORE/core_cm4.h ****        uint32_t RESERVED2[131];
1008:F4_CORE/core_cm4.h ****   __I  uint32_t FFSR;                    /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1009:F4_CORE/core_cm4.h ****   __IO uint32_t FFCR;                    /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1010:F4_CORE/core_cm4.h ****   __I  uint32_t FSCR;                    /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1011:F4_CORE/core_cm4.h ****        uint32_t RESERVED3[759];
1012:F4_CORE/core_cm4.h ****   __I  uint32_t TRIGGER;                 /*!< Offset: 0xEE8 (R/ )  TRIGGER */
1013:F4_CORE/core_cm4.h ****   __I  uint32_t FIFO0;                   /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1014:F4_CORE/core_cm4.h ****   __I  uint32_t ITATBCTR2;               /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1015:F4_CORE/core_cm4.h ****        uint32_t RESERVED4[1];
1016:F4_CORE/core_cm4.h ****   __I  uint32_t ITATBCTR0;               /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1017:F4_CORE/core_cm4.h ****   __I  uint32_t FIFO1;                   /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1018:F4_CORE/core_cm4.h ****   __IO uint32_t ITCTRL;                  /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1019:F4_CORE/core_cm4.h ****        uint32_t RESERVED5[39];
1020:F4_CORE/core_cm4.h ****   __IO uint32_t CLAIMSET;                /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1021:F4_CORE/core_cm4.h ****   __IO uint32_t CLAIMCLR;                /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1022:F4_CORE/core_cm4.h ****        uint32_t RESERVED7[8];
1023:F4_CORE/core_cm4.h ****   __I  uint32_t DEVID;                   /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1024:F4_CORE/core_cm4.h ****   __I  uint32_t DEVTYPE;                 /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1025:F4_CORE/core_cm4.h **** } TPI_Type;
1026:F4_CORE/core_cm4.h **** 
1027:F4_CORE/core_cm4.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1028:F4_CORE/core_cm4.h **** #define TPI_ACPR_PRESCALER_Pos              0                                          /*!< TPI ACP
1029:F4_CORE/core_cm4.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1030:F4_CORE/core_cm4.h **** 
1031:F4_CORE/core_cm4.h **** /* TPI Selected Pin Protocol Register Definitions */
1032:F4_CORE/core_cm4.h **** #define TPI_SPPR_TXMODE_Pos                 0                                          /*!< TPI SPP
1033:F4_CORE/core_cm4.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1034:F4_CORE/core_cm4.h **** 
1035:F4_CORE/core_cm4.h **** /* TPI Formatter and Flush Status Register Definitions */
1036:F4_CORE/core_cm4.h **** #define TPI_FFSR_FtNonStop_Pos              3                                          /*!< TPI FFS
1037:F4_CORE/core_cm4.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1038:F4_CORE/core_cm4.h **** 
ARM GAS  /tmp/ccHlURRu.s 			page 43


1039:F4_CORE/core_cm4.h **** #define TPI_FFSR_TCPresent_Pos              2                                          /*!< TPI FFS
1040:F4_CORE/core_cm4.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1041:F4_CORE/core_cm4.h **** 
1042:F4_CORE/core_cm4.h **** #define TPI_FFSR_FtStopped_Pos              1                                          /*!< TPI FFS
1043:F4_CORE/core_cm4.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1044:F4_CORE/core_cm4.h **** 
1045:F4_CORE/core_cm4.h **** #define TPI_FFSR_FlInProg_Pos               0                                          /*!< TPI FFS
1046:F4_CORE/core_cm4.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1047:F4_CORE/core_cm4.h **** 
1048:F4_CORE/core_cm4.h **** /* TPI Formatter and Flush Control Register Definitions */
1049:F4_CORE/core_cm4.h **** #define TPI_FFCR_TrigIn_Pos                 8                                          /*!< TPI FFC
1050:F4_CORE/core_cm4.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1051:F4_CORE/core_cm4.h **** 
1052:F4_CORE/core_cm4.h **** #define TPI_FFCR_EnFCont_Pos                1                                          /*!< TPI FFC
1053:F4_CORE/core_cm4.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1054:F4_CORE/core_cm4.h **** 
1055:F4_CORE/core_cm4.h **** /* TPI TRIGGER Register Definitions */
1056:F4_CORE/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Pos             0                                          /*!< TPI TRI
1057:F4_CORE/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1058:F4_CORE/core_cm4.h **** 
1059:F4_CORE/core_cm4.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1060:F4_CORE/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
1061:F4_CORE/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1062:F4_CORE/core_cm4.h **** 
1063:F4_CORE/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27                                          /*!< TPI FIF
1064:F4_CORE/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1065:F4_CORE/core_cm4.h **** 
1066:F4_CORE/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
1067:F4_CORE/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1068:F4_CORE/core_cm4.h **** 
1069:F4_CORE/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24                                          /*!< TPI FIF
1070:F4_CORE/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1071:F4_CORE/core_cm4.h **** 
1072:F4_CORE/core_cm4.h **** #define TPI_FIFO0_ETM2_Pos                 16                                          /*!< TPI FIF
1073:F4_CORE/core_cm4.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1074:F4_CORE/core_cm4.h **** 
1075:F4_CORE/core_cm4.h **** #define TPI_FIFO0_ETM1_Pos                  8                                          /*!< TPI FIF
1076:F4_CORE/core_cm4.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1077:F4_CORE/core_cm4.h **** 
1078:F4_CORE/core_cm4.h **** #define TPI_FIFO0_ETM0_Pos                  0                                          /*!< TPI FIF
1079:F4_CORE/core_cm4.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1080:F4_CORE/core_cm4.h **** 
1081:F4_CORE/core_cm4.h **** /* TPI ITATBCTR2 Register Definitions */
1082:F4_CORE/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0                                          /*!< TPI ITA
1083:F4_CORE/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR2_ATREADY_Pos*/)    /*!< TPI ITA
1084:F4_CORE/core_cm4.h **** 
1085:F4_CORE/core_cm4.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1086:F4_CORE/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
1087:F4_CORE/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1088:F4_CORE/core_cm4.h **** 
1089:F4_CORE/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27                                          /*!< TPI FIF
1090:F4_CORE/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1091:F4_CORE/core_cm4.h **** 
1092:F4_CORE/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
1093:F4_CORE/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1094:F4_CORE/core_cm4.h **** 
1095:F4_CORE/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24                                          /*!< TPI FIF
ARM GAS  /tmp/ccHlURRu.s 			page 44


1096:F4_CORE/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1097:F4_CORE/core_cm4.h **** 
1098:F4_CORE/core_cm4.h **** #define TPI_FIFO1_ITM2_Pos                 16                                          /*!< TPI FIF
1099:F4_CORE/core_cm4.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1100:F4_CORE/core_cm4.h **** 
1101:F4_CORE/core_cm4.h **** #define TPI_FIFO1_ITM1_Pos                  8                                          /*!< TPI FIF
1102:F4_CORE/core_cm4.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1103:F4_CORE/core_cm4.h **** 
1104:F4_CORE/core_cm4.h **** #define TPI_FIFO1_ITM0_Pos                  0                                          /*!< TPI FIF
1105:F4_CORE/core_cm4.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1106:F4_CORE/core_cm4.h **** 
1107:F4_CORE/core_cm4.h **** /* TPI ITATBCTR0 Register Definitions */
1108:F4_CORE/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0                                          /*!< TPI ITA
1109:F4_CORE/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR0_ATREADY_Pos*/)    /*!< TPI ITA
1110:F4_CORE/core_cm4.h **** 
1111:F4_CORE/core_cm4.h **** /* TPI Integration Mode Control Register Definitions */
1112:F4_CORE/core_cm4.h **** #define TPI_ITCTRL_Mode_Pos                 0                                          /*!< TPI ITC
1113:F4_CORE/core_cm4.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1114:F4_CORE/core_cm4.h **** 
1115:F4_CORE/core_cm4.h **** /* TPI DEVID Register Definitions */
1116:F4_CORE/core_cm4.h **** #define TPI_DEVID_NRZVALID_Pos             11                                          /*!< TPI DEV
1117:F4_CORE/core_cm4.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1118:F4_CORE/core_cm4.h **** 
1119:F4_CORE/core_cm4.h **** #define TPI_DEVID_MANCVALID_Pos            10                                          /*!< TPI DEV
1120:F4_CORE/core_cm4.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1121:F4_CORE/core_cm4.h **** 
1122:F4_CORE/core_cm4.h **** #define TPI_DEVID_PTINVALID_Pos             9                                          /*!< TPI DEV
1123:F4_CORE/core_cm4.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1124:F4_CORE/core_cm4.h **** 
1125:F4_CORE/core_cm4.h **** #define TPI_DEVID_MinBufSz_Pos              6                                          /*!< TPI DEV
1126:F4_CORE/core_cm4.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1127:F4_CORE/core_cm4.h **** 
1128:F4_CORE/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Pos             5                                          /*!< TPI DEV
1129:F4_CORE/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1130:F4_CORE/core_cm4.h **** 
1131:F4_CORE/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Pos          0                                          /*!< TPI DEV
1132:F4_CORE/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1133:F4_CORE/core_cm4.h **** 
1134:F4_CORE/core_cm4.h **** /* TPI DEVTYPE Register Definitions */
1135:F4_CORE/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Pos           4                                          /*!< TPI DEV
1136:F4_CORE/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1137:F4_CORE/core_cm4.h **** 
1138:F4_CORE/core_cm4.h **** #define TPI_DEVTYPE_SubType_Pos             0                                          /*!< TPI DEV
1139:F4_CORE/core_cm4.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1140:F4_CORE/core_cm4.h **** 
1141:F4_CORE/core_cm4.h **** /*@}*/ /* end of group CMSIS_TPI */
1142:F4_CORE/core_cm4.h **** 
1143:F4_CORE/core_cm4.h **** 
1144:F4_CORE/core_cm4.h **** #if (__MPU_PRESENT == 1)
1145:F4_CORE/core_cm4.h **** /** \ingroup  CMSIS_core_register
1146:F4_CORE/core_cm4.h ****     \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1147:F4_CORE/core_cm4.h ****     \brief      Type definitions for the Memory Protection Unit (MPU)
1148:F4_CORE/core_cm4.h ****   @{
1149:F4_CORE/core_cm4.h ****  */
1150:F4_CORE/core_cm4.h **** 
1151:F4_CORE/core_cm4.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
1152:F4_CORE/core_cm4.h ****  */
ARM GAS  /tmp/ccHlURRu.s 			page 45


1153:F4_CORE/core_cm4.h **** typedef struct
1154:F4_CORE/core_cm4.h **** {
1155:F4_CORE/core_cm4.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
1156:F4_CORE/core_cm4.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
1157:F4_CORE/core_cm4.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
1158:F4_CORE/core_cm4.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1159:F4_CORE/core_cm4.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1160:F4_CORE/core_cm4.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1161:F4_CORE/core_cm4.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1162:F4_CORE/core_cm4.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1163:F4_CORE/core_cm4.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1164:F4_CORE/core_cm4.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1165:F4_CORE/core_cm4.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1166:F4_CORE/core_cm4.h **** } MPU_Type;
1167:F4_CORE/core_cm4.h **** 
1168:F4_CORE/core_cm4.h **** /* MPU Type Register */
1169:F4_CORE/core_cm4.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
1170:F4_CORE/core_cm4.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1171:F4_CORE/core_cm4.h **** 
1172:F4_CORE/core_cm4.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
1173:F4_CORE/core_cm4.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1174:F4_CORE/core_cm4.h **** 
1175:F4_CORE/core_cm4.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
1176:F4_CORE/core_cm4.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1177:F4_CORE/core_cm4.h **** 
1178:F4_CORE/core_cm4.h **** /* MPU Control Register */
1179:F4_CORE/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
1180:F4_CORE/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1181:F4_CORE/core_cm4.h **** 
1182:F4_CORE/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
1183:F4_CORE/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1184:F4_CORE/core_cm4.h **** 
1185:F4_CORE/core_cm4.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
1186:F4_CORE/core_cm4.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1187:F4_CORE/core_cm4.h **** 
1188:F4_CORE/core_cm4.h **** /* MPU Region Number Register */
1189:F4_CORE/core_cm4.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
1190:F4_CORE/core_cm4.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1191:F4_CORE/core_cm4.h **** 
1192:F4_CORE/core_cm4.h **** /* MPU Region Base Address Register */
1193:F4_CORE/core_cm4.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
1194:F4_CORE/core_cm4.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1195:F4_CORE/core_cm4.h **** 
1196:F4_CORE/core_cm4.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
1197:F4_CORE/core_cm4.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1198:F4_CORE/core_cm4.h **** 
1199:F4_CORE/core_cm4.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
1200:F4_CORE/core_cm4.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1201:F4_CORE/core_cm4.h **** 
1202:F4_CORE/core_cm4.h **** /* MPU Region Attribute and Size Register */
1203:F4_CORE/core_cm4.h **** #define MPU_RASR_ATTRS_Pos                 16                                             /*!< MPU 
1204:F4_CORE/core_cm4.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1205:F4_CORE/core_cm4.h **** 
1206:F4_CORE/core_cm4.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
1207:F4_CORE/core_cm4.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1208:F4_CORE/core_cm4.h **** 
1209:F4_CORE/core_cm4.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
ARM GAS  /tmp/ccHlURRu.s 			page 46


1210:F4_CORE/core_cm4.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1211:F4_CORE/core_cm4.h **** 
1212:F4_CORE/core_cm4.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
1213:F4_CORE/core_cm4.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1214:F4_CORE/core_cm4.h **** 
1215:F4_CORE/core_cm4.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
1216:F4_CORE/core_cm4.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1217:F4_CORE/core_cm4.h **** 
1218:F4_CORE/core_cm4.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
1219:F4_CORE/core_cm4.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1220:F4_CORE/core_cm4.h **** 
1221:F4_CORE/core_cm4.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
1222:F4_CORE/core_cm4.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1223:F4_CORE/core_cm4.h **** 
1224:F4_CORE/core_cm4.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
1225:F4_CORE/core_cm4.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1226:F4_CORE/core_cm4.h **** 
1227:F4_CORE/core_cm4.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
1228:F4_CORE/core_cm4.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1229:F4_CORE/core_cm4.h **** 
1230:F4_CORE/core_cm4.h **** #define MPU_RASR_ENABLE_Pos                 0                                             /*!< MPU 
1231:F4_CORE/core_cm4.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1232:F4_CORE/core_cm4.h **** 
1233:F4_CORE/core_cm4.h **** /*@} end of group CMSIS_MPU */
1234:F4_CORE/core_cm4.h **** #endif
1235:F4_CORE/core_cm4.h **** 
1236:F4_CORE/core_cm4.h **** 
1237:F4_CORE/core_cm4.h **** #if (__FPU_PRESENT == 1)
1238:F4_CORE/core_cm4.h **** /** \ingroup  CMSIS_core_register
1239:F4_CORE/core_cm4.h ****     \defgroup CMSIS_FPU     Floating Point Unit (FPU)
1240:F4_CORE/core_cm4.h ****     \brief      Type definitions for the Floating Point Unit (FPU)
1241:F4_CORE/core_cm4.h ****   @{
1242:F4_CORE/core_cm4.h ****  */
1243:F4_CORE/core_cm4.h **** 
1244:F4_CORE/core_cm4.h **** /** \brief  Structure type to access the Floating Point Unit (FPU).
1245:F4_CORE/core_cm4.h ****  */
1246:F4_CORE/core_cm4.h **** typedef struct
1247:F4_CORE/core_cm4.h **** {
1248:F4_CORE/core_cm4.h ****        uint32_t RESERVED0[1];
1249:F4_CORE/core_cm4.h ****   __IO uint32_t FPCCR;                   /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
1250:F4_CORE/core_cm4.h ****   __IO uint32_t FPCAR;                   /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
1251:F4_CORE/core_cm4.h ****   __IO uint32_t FPDSCR;                  /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
1252:F4_CORE/core_cm4.h ****   __I  uint32_t MVFR0;                   /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
1253:F4_CORE/core_cm4.h ****   __I  uint32_t MVFR1;                   /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
1254:F4_CORE/core_cm4.h **** } FPU_Type;
1255:F4_CORE/core_cm4.h **** 
1256:F4_CORE/core_cm4.h **** /* Floating-Point Context Control Register */
1257:F4_CORE/core_cm4.h **** #define FPU_FPCCR_ASPEN_Pos                31                                             /*!< FPCC
1258:F4_CORE/core_cm4.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
1259:F4_CORE/core_cm4.h **** 
1260:F4_CORE/core_cm4.h **** #define FPU_FPCCR_LSPEN_Pos                30                                             /*!< FPCC
1261:F4_CORE/core_cm4.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
1262:F4_CORE/core_cm4.h **** 
1263:F4_CORE/core_cm4.h **** #define FPU_FPCCR_MONRDY_Pos                8                                             /*!< FPCC
1264:F4_CORE/core_cm4.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
1265:F4_CORE/core_cm4.h **** 
1266:F4_CORE/core_cm4.h **** #define FPU_FPCCR_BFRDY_Pos                 6                                             /*!< FPCC
ARM GAS  /tmp/ccHlURRu.s 			page 47


1267:F4_CORE/core_cm4.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
1268:F4_CORE/core_cm4.h **** 
1269:F4_CORE/core_cm4.h **** #define FPU_FPCCR_MMRDY_Pos                 5                                             /*!< FPCC
1270:F4_CORE/core_cm4.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
1271:F4_CORE/core_cm4.h **** 
1272:F4_CORE/core_cm4.h **** #define FPU_FPCCR_HFRDY_Pos                 4                                             /*!< FPCC
1273:F4_CORE/core_cm4.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
1274:F4_CORE/core_cm4.h **** 
1275:F4_CORE/core_cm4.h **** #define FPU_FPCCR_THREAD_Pos                3                                             /*!< FPCC
1276:F4_CORE/core_cm4.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
1277:F4_CORE/core_cm4.h **** 
1278:F4_CORE/core_cm4.h **** #define FPU_FPCCR_USER_Pos                  1                                             /*!< FPCC
1279:F4_CORE/core_cm4.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
1280:F4_CORE/core_cm4.h **** 
1281:F4_CORE/core_cm4.h **** #define FPU_FPCCR_LSPACT_Pos                0                                             /*!< FPCC
1282:F4_CORE/core_cm4.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL /*<< FPU_FPCCR_LSPACT_Pos*/)              /*!< FPCC
1283:F4_CORE/core_cm4.h **** 
1284:F4_CORE/core_cm4.h **** /* Floating-Point Context Address Register */
1285:F4_CORE/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Pos               3                                             /*!< FPCA
1286:F4_CORE/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
1287:F4_CORE/core_cm4.h **** 
1288:F4_CORE/core_cm4.h **** /* Floating-Point Default Status Control Register */
1289:F4_CORE/core_cm4.h **** #define FPU_FPDSCR_AHP_Pos                 26                                             /*!< FPDS
1290:F4_CORE/core_cm4.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
1291:F4_CORE/core_cm4.h **** 
1292:F4_CORE/core_cm4.h **** #define FPU_FPDSCR_DN_Pos                  25                                             /*!< FPDS
1293:F4_CORE/core_cm4.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
1294:F4_CORE/core_cm4.h **** 
1295:F4_CORE/core_cm4.h **** #define FPU_FPDSCR_FZ_Pos                  24                                             /*!< FPDS
1296:F4_CORE/core_cm4.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
1297:F4_CORE/core_cm4.h **** 
1298:F4_CORE/core_cm4.h **** #define FPU_FPDSCR_RMode_Pos               22                                             /*!< FPDS
1299:F4_CORE/core_cm4.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
1300:F4_CORE/core_cm4.h **** 
1301:F4_CORE/core_cm4.h **** /* Media and FP Feature Register 0 */
1302:F4_CORE/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28                                             /*!< MVFR
1303:F4_CORE/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
1304:F4_CORE/core_cm4.h **** 
1305:F4_CORE/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Pos        24                                             /*!< MVFR
1306:F4_CORE/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
1307:F4_CORE/core_cm4.h **** 
1308:F4_CORE/core_cm4.h **** #define FPU_MVFR0_Square_root_Pos          20                                             /*!< MVFR
1309:F4_CORE/core_cm4.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
1310:F4_CORE/core_cm4.h **** 
1311:F4_CORE/core_cm4.h **** #define FPU_MVFR0_Divide_Pos               16                                             /*!< MVFR
1312:F4_CORE/core_cm4.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
1313:F4_CORE/core_cm4.h **** 
1314:F4_CORE/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12                                             /*!< MVFR
1315:F4_CORE/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
1316:F4_CORE/core_cm4.h **** 
1317:F4_CORE/core_cm4.h **** #define FPU_MVFR0_Double_precision_Pos      8                                             /*!< MVFR
1318:F4_CORE/core_cm4.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
1319:F4_CORE/core_cm4.h **** 
1320:F4_CORE/core_cm4.h **** #define FPU_MVFR0_Single_precision_Pos      4                                             /*!< MVFR
1321:F4_CORE/core_cm4.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
1322:F4_CORE/core_cm4.h **** 
1323:F4_CORE/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0                                             /*!< MVFR
ARM GAS  /tmp/ccHlURRu.s 			page 48


1324:F4_CORE/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL /*<< FPU_MVFR0_A_SIMD_registers_Pos*/)  /*!< MVFR
1325:F4_CORE/core_cm4.h **** 
1326:F4_CORE/core_cm4.h **** /* Media and FP Feature Register 1 */
1327:F4_CORE/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28                                             /*!< MVFR
1328:F4_CORE/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
1329:F4_CORE/core_cm4.h **** 
1330:F4_CORE/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Pos              24                                             /*!< MVFR
1331:F4_CORE/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
1332:F4_CORE/core_cm4.h **** 
1333:F4_CORE/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4                                             /*!< MVFR
1334:F4_CORE/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
1335:F4_CORE/core_cm4.h **** 
1336:F4_CORE/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Pos              0                                             /*!< MVFR
1337:F4_CORE/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL /*<< FPU_MVFR1_FtZ_mode_Pos*/)          /*!< MVFR
1338:F4_CORE/core_cm4.h **** 
1339:F4_CORE/core_cm4.h **** /*@} end of group CMSIS_FPU */
1340:F4_CORE/core_cm4.h **** #endif
1341:F4_CORE/core_cm4.h **** 
1342:F4_CORE/core_cm4.h **** 
1343:F4_CORE/core_cm4.h **** /** \ingroup  CMSIS_core_register
1344:F4_CORE/core_cm4.h ****     \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1345:F4_CORE/core_cm4.h ****     \brief      Type definitions for the Core Debug Registers
1346:F4_CORE/core_cm4.h ****   @{
1347:F4_CORE/core_cm4.h ****  */
1348:F4_CORE/core_cm4.h **** 
1349:F4_CORE/core_cm4.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
1350:F4_CORE/core_cm4.h ****  */
1351:F4_CORE/core_cm4.h **** typedef struct
1352:F4_CORE/core_cm4.h **** {
1353:F4_CORE/core_cm4.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1354:F4_CORE/core_cm4.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1355:F4_CORE/core_cm4.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1356:F4_CORE/core_cm4.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1357:F4_CORE/core_cm4.h **** } CoreDebug_Type;
1358:F4_CORE/core_cm4.h **** 
1359:F4_CORE/core_cm4.h **** /* Debug Halting Control and Status Register */
1360:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
1361:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1362:F4_CORE/core_cm4.h **** 
1363:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
1364:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1365:F4_CORE/core_cm4.h **** 
1366:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
1367:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1368:F4_CORE/core_cm4.h **** 
1369:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
1370:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1371:F4_CORE/core_cm4.h **** 
1372:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
1373:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1374:F4_CORE/core_cm4.h **** 
1375:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
1376:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1377:F4_CORE/core_cm4.h **** 
1378:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
1379:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1380:F4_CORE/core_cm4.h **** 
ARM GAS  /tmp/ccHlURRu.s 			page 49


1381:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
1382:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1383:F4_CORE/core_cm4.h **** 
1384:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
1385:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1386:F4_CORE/core_cm4.h **** 
1387:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
1388:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1389:F4_CORE/core_cm4.h **** 
1390:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
1391:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1392:F4_CORE/core_cm4.h **** 
1393:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
1394:F4_CORE/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1395:F4_CORE/core_cm4.h **** 
1396:F4_CORE/core_cm4.h **** /* Debug Core Register Selector Register */
1397:F4_CORE/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
1398:F4_CORE/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1399:F4_CORE/core_cm4.h **** 
1400:F4_CORE/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
1401:F4_CORE/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1402:F4_CORE/core_cm4.h **** 
1403:F4_CORE/core_cm4.h **** /* Debug Exception and Monitor Control Register */
1404:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
1405:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1406:F4_CORE/core_cm4.h **** 
1407:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
1408:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1409:F4_CORE/core_cm4.h **** 
1410:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
1411:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1412:F4_CORE/core_cm4.h **** 
1413:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
1414:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1415:F4_CORE/core_cm4.h **** 
1416:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
1417:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1418:F4_CORE/core_cm4.h **** 
1419:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
1420:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1421:F4_CORE/core_cm4.h **** 
1422:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
1423:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1424:F4_CORE/core_cm4.h **** 
1425:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
1426:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1427:F4_CORE/core_cm4.h **** 
1428:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
1429:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1430:F4_CORE/core_cm4.h **** 
1431:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
1432:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1433:F4_CORE/core_cm4.h **** 
1434:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
1435:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1436:F4_CORE/core_cm4.h **** 
1437:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
ARM GAS  /tmp/ccHlURRu.s 			page 50


1438:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1439:F4_CORE/core_cm4.h **** 
1440:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
1441:F4_CORE/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1442:F4_CORE/core_cm4.h **** 
1443:F4_CORE/core_cm4.h **** /*@} end of group CMSIS_CoreDebug */
1444:F4_CORE/core_cm4.h **** 
1445:F4_CORE/core_cm4.h **** 
1446:F4_CORE/core_cm4.h **** /** \ingroup    CMSIS_core_register
1447:F4_CORE/core_cm4.h ****     \defgroup   CMSIS_core_base     Core Definitions
1448:F4_CORE/core_cm4.h ****     \brief      Definitions for base addresses, unions, and structures.
1449:F4_CORE/core_cm4.h ****   @{
1450:F4_CORE/core_cm4.h ****  */
1451:F4_CORE/core_cm4.h **** 
1452:F4_CORE/core_cm4.h **** /* Memory mapping of Cortex-M4 Hardware */
1453:F4_CORE/core_cm4.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1454:F4_CORE/core_cm4.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
1455:F4_CORE/core_cm4.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address        
1456:F4_CORE/core_cm4.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address        
1457:F4_CORE/core_cm4.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1458:F4_CORE/core_cm4.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
1459:F4_CORE/core_cm4.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
1460:F4_CORE/core_cm4.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1461:F4_CORE/core_cm4.h **** 
1462:F4_CORE/core_cm4.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1463:F4_CORE/core_cm4.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1464:F4_CORE/core_cm4.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1465:F4_CORE/core_cm4.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1466:F4_CORE/core_cm4.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1467:F4_CORE/core_cm4.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1468:F4_CORE/core_cm4.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1469:F4_CORE/core_cm4.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1470:F4_CORE/core_cm4.h **** 
1471:F4_CORE/core_cm4.h **** #if (__MPU_PRESENT == 1)
1472:F4_CORE/core_cm4.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
1473:F4_CORE/core_cm4.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit  
1474:F4_CORE/core_cm4.h **** #endif
1475:F4_CORE/core_cm4.h **** 
1476:F4_CORE/core_cm4.h **** #if (__FPU_PRESENT == 1)
1477:F4_CORE/core_cm4.h ****   #define FPU_BASE          (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit     
1478:F4_CORE/core_cm4.h ****   #define FPU               ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit     
1479:F4_CORE/core_cm4.h **** #endif
1480:F4_CORE/core_cm4.h **** 
1481:F4_CORE/core_cm4.h **** /*@} */
1482:F4_CORE/core_cm4.h **** 
1483:F4_CORE/core_cm4.h **** 
1484:F4_CORE/core_cm4.h **** 
1485:F4_CORE/core_cm4.h **** /*******************************************************************************
1486:F4_CORE/core_cm4.h ****  *                Hardware Abstraction Layer
1487:F4_CORE/core_cm4.h ****   Core Function Interface contains:
1488:F4_CORE/core_cm4.h ****   - Core NVIC Functions
1489:F4_CORE/core_cm4.h ****   - Core SysTick Functions
1490:F4_CORE/core_cm4.h ****   - Core Debug Functions
1491:F4_CORE/core_cm4.h ****   - Core Register Access Functions
1492:F4_CORE/core_cm4.h ****  ******************************************************************************/
1493:F4_CORE/core_cm4.h **** /** \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1494:F4_CORE/core_cm4.h **** */
ARM GAS  /tmp/ccHlURRu.s 			page 51


1495:F4_CORE/core_cm4.h **** 
1496:F4_CORE/core_cm4.h **** 
1497:F4_CORE/core_cm4.h **** 
1498:F4_CORE/core_cm4.h **** /* ##########################   NVIC functions  #################################### */
1499:F4_CORE/core_cm4.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1500:F4_CORE/core_cm4.h ****     \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1501:F4_CORE/core_cm4.h ****     \brief      Functions that manage interrupts and exceptions via the NVIC.
1502:F4_CORE/core_cm4.h ****     @{
1503:F4_CORE/core_cm4.h ****  */
1504:F4_CORE/core_cm4.h **** 
1505:F4_CORE/core_cm4.h **** /** \brief  Set Priority Grouping
1506:F4_CORE/core_cm4.h **** 
1507:F4_CORE/core_cm4.h ****   The function sets the priority grouping field using the required unlock sequence.
1508:F4_CORE/core_cm4.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1509:F4_CORE/core_cm4.h ****   Only values from 0..7 are used.
1510:F4_CORE/core_cm4.h ****   In case of a conflict between priority grouping and available
1511:F4_CORE/core_cm4.h ****   priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1512:F4_CORE/core_cm4.h **** 
1513:F4_CORE/core_cm4.h ****     \param [in]      PriorityGroup  Priority grouping field.
1514:F4_CORE/core_cm4.h ****  */
1515:F4_CORE/core_cm4.h **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1516:F4_CORE/core_cm4.h **** {
1517:F4_CORE/core_cm4.h ****   uint32_t reg_value;
1518:F4_CORE/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1519:F4_CORE/core_cm4.h **** 
1520:F4_CORE/core_cm4.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1521:F4_CORE/core_cm4.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear 
1522:F4_CORE/core_cm4.h ****   reg_value  =  (reg_value                                   |
1523:F4_CORE/core_cm4.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1524:F4_CORE/core_cm4.h ****                 (PriorityGroupTmp << 8)                       );              /* Insert write key a
1525:F4_CORE/core_cm4.h ****   SCB->AIRCR =  reg_value;
1526:F4_CORE/core_cm4.h **** }
1527:F4_CORE/core_cm4.h **** 
1528:F4_CORE/core_cm4.h **** 
1529:F4_CORE/core_cm4.h **** /** \brief  Get Priority Grouping
1530:F4_CORE/core_cm4.h **** 
1531:F4_CORE/core_cm4.h ****   The function reads the priority grouping field from the NVIC Interrupt Controller.
1532:F4_CORE/core_cm4.h **** 
1533:F4_CORE/core_cm4.h ****     \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1534:F4_CORE/core_cm4.h ****  */
1535:F4_CORE/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1536:F4_CORE/core_cm4.h **** {
1537:F4_CORE/core_cm4.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
1538:F4_CORE/core_cm4.h **** }
1539:F4_CORE/core_cm4.h **** 
1540:F4_CORE/core_cm4.h **** 
1541:F4_CORE/core_cm4.h **** /** \brief  Enable External Interrupt
1542:F4_CORE/core_cm4.h **** 
1543:F4_CORE/core_cm4.h ****     The function enables a device-specific interrupt in the NVIC interrupt controller.
1544:F4_CORE/core_cm4.h **** 
1545:F4_CORE/core_cm4.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1546:F4_CORE/core_cm4.h ****  */
1547:F4_CORE/core_cm4.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1548:F4_CORE/core_cm4.h **** {
1549:F4_CORE/core_cm4.h ****   NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1550:F4_CORE/core_cm4.h **** }
1551:F4_CORE/core_cm4.h **** 
ARM GAS  /tmp/ccHlURRu.s 			page 52


1552:F4_CORE/core_cm4.h **** 
1553:F4_CORE/core_cm4.h **** /** \brief  Disable External Interrupt
1554:F4_CORE/core_cm4.h **** 
1555:F4_CORE/core_cm4.h ****     The function disables a device-specific interrupt in the NVIC interrupt controller.
1556:F4_CORE/core_cm4.h **** 
1557:F4_CORE/core_cm4.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1558:F4_CORE/core_cm4.h ****  */
1559:F4_CORE/core_cm4.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1560:F4_CORE/core_cm4.h **** {
1561:F4_CORE/core_cm4.h ****   NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1562:F4_CORE/core_cm4.h **** }
1563:F4_CORE/core_cm4.h **** 
1564:F4_CORE/core_cm4.h **** 
1565:F4_CORE/core_cm4.h **** /** \brief  Get Pending Interrupt
1566:F4_CORE/core_cm4.h **** 
1567:F4_CORE/core_cm4.h ****     The function reads the pending register in the NVIC and returns the pending bit
1568:F4_CORE/core_cm4.h ****     for the specified interrupt.
1569:F4_CORE/core_cm4.h **** 
1570:F4_CORE/core_cm4.h ****     \param [in]      IRQn  Interrupt number.
1571:F4_CORE/core_cm4.h **** 
1572:F4_CORE/core_cm4.h ****     \return             0  Interrupt status is not pending.
1573:F4_CORE/core_cm4.h ****     \return             1  Interrupt status is pending.
1574:F4_CORE/core_cm4.h ****  */
1575:F4_CORE/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1576:F4_CORE/core_cm4.h **** {
1577:F4_CORE/core_cm4.h ****   return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t
1578:F4_CORE/core_cm4.h **** }
1579:F4_CORE/core_cm4.h **** 
1580:F4_CORE/core_cm4.h **** 
1581:F4_CORE/core_cm4.h **** /** \brief  Set Pending Interrupt
1582:F4_CORE/core_cm4.h **** 
1583:F4_CORE/core_cm4.h ****     The function sets the pending bit of an external interrupt.
1584:F4_CORE/core_cm4.h **** 
1585:F4_CORE/core_cm4.h ****     \param [in]      IRQn  Interrupt number. Value cannot be negative.
1586:F4_CORE/core_cm4.h ****  */
1587:F4_CORE/core_cm4.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1588:F4_CORE/core_cm4.h **** {
1589:F4_CORE/core_cm4.h ****   NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1590:F4_CORE/core_cm4.h **** }
1591:F4_CORE/core_cm4.h **** 
1592:F4_CORE/core_cm4.h **** 
1593:F4_CORE/core_cm4.h **** /** \brief  Clear Pending Interrupt
1594:F4_CORE/core_cm4.h **** 
1595:F4_CORE/core_cm4.h ****     The function clears the pending bit of an external interrupt.
1596:F4_CORE/core_cm4.h **** 
1597:F4_CORE/core_cm4.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1598:F4_CORE/core_cm4.h ****  */
1599:F4_CORE/core_cm4.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1600:F4_CORE/core_cm4.h **** {
1601:F4_CORE/core_cm4.h ****   NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1602:F4_CORE/core_cm4.h **** }
1603:F4_CORE/core_cm4.h **** 
1604:F4_CORE/core_cm4.h **** 
1605:F4_CORE/core_cm4.h **** /** \brief  Get Active Interrupt
1606:F4_CORE/core_cm4.h **** 
1607:F4_CORE/core_cm4.h ****     The function reads the active register in NVIC and returns the active bit.
1608:F4_CORE/core_cm4.h **** 
ARM GAS  /tmp/ccHlURRu.s 			page 53


1609:F4_CORE/core_cm4.h ****     \param [in]      IRQn  Interrupt number.
1610:F4_CORE/core_cm4.h **** 
1611:F4_CORE/core_cm4.h ****     \return             0  Interrupt status is not active.
1612:F4_CORE/core_cm4.h ****     \return             1  Interrupt status is active.
1613:F4_CORE/core_cm4.h ****  */
1614:F4_CORE/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1615:F4_CORE/core_cm4.h **** {
1616:F4_CORE/core_cm4.h ****   return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t
1617:F4_CORE/core_cm4.h **** }
1618:F4_CORE/core_cm4.h **** 
1619:F4_CORE/core_cm4.h **** 
1620:F4_CORE/core_cm4.h **** /** \brief  Set Interrupt Priority
1621:F4_CORE/core_cm4.h **** 
1622:F4_CORE/core_cm4.h ****     The function sets the priority of an interrupt.
1623:F4_CORE/core_cm4.h **** 
1624:F4_CORE/core_cm4.h ****     \note The priority cannot be set for every core interrupt.
1625:F4_CORE/core_cm4.h **** 
1626:F4_CORE/core_cm4.h ****     \param [in]      IRQn  Interrupt number.
1627:F4_CORE/core_cm4.h ****     \param [in]  priority  Priority to set.
1628:F4_CORE/core_cm4.h ****  */
1629:F4_CORE/core_cm4.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1630:F4_CORE/core_cm4.h **** {
1631:F4_CORE/core_cm4.h ****   if((int32_t)IRQn < 0) {
1632:F4_CORE/core_cm4.h ****     SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BIT
 677              		.loc 2 1632 0
 678 0072 F022     		movs	r2, #240
 679 0074 074B     		ldr	r3, .L51+24
 680 0076 83F82220 		strb	r2, [r3, #34]
 681              	.LVL58:
 682              	.LBE9:
 683              	.LBE8:
 176:SYS/task_manager/task_manager.c **** 
 684              		.loc 1 176 0
 685 007a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 686              	.LVL59:
 687              	.L52:
 688              		.align	2
 689              	.L51:
 690 007c 00000000 		.word	.LANCHOR3
 691 0080 00000000 		.word	Task_OS_ExpStkBase
 692 0084 00000000 		.word	Task_Ptr
 693 0088 00000000 		.word	.LANCHOR4
 694 008c 00000000 		.word	.LANCHOR5
 695 0090 00000000 		.word	.LANCHOR6
 696 0094 00ED00E0 		.word	-536810240
 697              		.cfi_endproc
 698              	.LFE126:
 700              		.section	.text.Task_SetStkPtr_Val,"ax",%progbits
 701              		.align	1
 702              		.syntax unified
 703              		.thumb
 704              		.thumb_func
 705              		.fpu fpv4-sp-d16
 707              	Task_SetStkPtr_Val:
 708              	.LFB142:
 438:SYS/task_manager/task_manager.c ****     uint32_t *Tsk_Ptr_tmp = NULL;
 709              		.loc 1 438 0
ARM GAS  /tmp/ccHlURRu.s 			page 54


 710              		.cfi_startproc
 711              		@ args = 0, pretend = 0, frame = 0
 712              		@ frame_needed = 0, uses_anonymous_args = 0
 713              	.LVL60:
 714 0000 10B5     		push	{r4, lr}
 715              	.LCFI15:
 716              		.cfi_def_cfa_offset 8
 717              		.cfi_offset 4, -8
 718              		.cfi_offset 14, -4
 719 0002 0446     		mov	r4, r0
 720              	.LVL61:
 441:SYS/task_manager/task_manager.c **** 
 721              		.loc 1 441 0
 722 0004 C26C     		ldr	r2, [r0, #76]
 723 0006 9200     		lsls	r2, r2, #2
 724 0008 8B21     		movs	r1, #139
 725 000a 406D     		ldr	r0, [r0, #84]
 726              	.LVL62:
 727 000c FFF7FEFF 		bl	memset
 728              	.LVL63:
 443:SYS/task_manager/task_manager.c ****     Tsk_Ptr_tmp = (uint32_t *)((uint32_t)(Tsk_Ptr_tmp)&0XFFFFFFF8ul);
 729              		.loc 1 443 0
 730 0010 04F15403 		add	r3, r4, #84
 731 0014 E26C     		ldr	r2, [r4, #76]
 732 0016 02F18042 		add	r2, r2, #1073741824
 733 001a 013A     		subs	r2, r2, #1
 734 001c 03EB8203 		add	r3, r3, r2, lsl #2
 735              	.LVL64:
 444:SYS/task_manager/task_manager.c **** 
 736              		.loc 1 444 0
 737 0020 23F00703 		bic	r3, r3, #7
 738              	.LVL65:
 447:SYS/task_manager/task_manager.c **** 
 739              		.loc 1 447 0
 740 0024 4FF08072 		mov	r2, #16777216
 741 0028 43F8042C 		str	r2, [r3, #-4]
 742              	.LVL66:
 450:SYS/task_manager/task_manager.c **** 
 743              		.loc 1 450 0
 744 002c 084A     		ldr	r2, .L55
 745 002e 22F00102 		bic	r2, r2, #1
 746 0032 43F8082C 		str	r2, [r3, #-8]
 747              	.LVL67:
 453:SYS/task_manager/task_manager.c **** 
 748              		.loc 1 453 0
 749 0036 074A     		ldr	r2, .L55+4
 750 0038 43F80C2C 		str	r2, [r3, #-12]
 751              	.LVL68:
 457:SYS/task_manager/task_manager.c **** 
 752              		.loc 1 457 0
 753 003c 0022     		movs	r2, #0
 754 003e 43F8202C 		str	r2, [r3, #-32]
 755              	.LVL69:
 462:SYS/task_manager/task_manager.c **** 
 756              		.loc 1 462 0
 757 0042 6FF00202 		mvn	r2, #2
 758 0046 43F8242C 		str	r2, [r3, #-36]
ARM GAS  /tmp/ccHlURRu.s 			page 55


 464:SYS/task_manager/task_manager.c **** 
 759              		.loc 1 464 0
 760 004a 443B     		subs	r3, r3, #68
 761              	.LVL70:
 467:SYS/task_manager/task_manager.c **** }
 762              		.loc 1 467 0
 763 004c 2365     		str	r3, [r4, #80]
 764 004e 10BD     		pop	{r4, pc}
 765              	.LVL71:
 766              	.L56:
 767              		.align	2
 768              	.L55:
 769 0050 00000000 		.word	Task_Caller
 770 0054 00000000 		.word	Task_Exit
 771              		.cfi_endproc
 772              	.LFE142:
 774              		.global	__aeabi_ul2f
 775              		.section	.text.Task_Idle,"ax",%progbits
 776              		.align	1
 777              		.syntax unified
 778              		.thumb
 779              		.thumb_func
 780              		.fpu fpv4-sp-d16
 782              	Task_Idle:
 783              	.LFB128:
 187:SYS/task_manager/task_manager.c ****     SYSTEM_RunTime cur_time;
 784              		.loc 1 187 0
 785              		.cfi_startproc
 786              		@ args = 0, pretend = 0, frame = 16
 787              		@ frame_needed = 0, uses_anonymous_args = 0
 788 0000 10B5     		push	{r4, lr}
 789              	.LCFI16:
 790              		.cfi_def_cfa_offset 8
 791              		.cfi_offset 4, -8
 792              		.cfi_offset 14, -4
 793 0002 84B0     		sub	sp, sp, #16
 794              	.LCFI17:
 795              		.cfi_def_cfa_offset 24
 191:SYS/task_manager/task_manager.c ****     RuntimeObj_Reset(&cur_time);
 796              		.loc 1 191 0
 797 0004 6846     		mov	r0, sp
 798 0006 FFF7FEFF 		bl	RuntimeObj_Reset
 799              	.LVL72:
 192:SYS/task_manager/task_manager.c **** 
 800              		.loc 1 192 0
 801 000a 02A8     		add	r0, sp, #8
 802 000c FFF7FEFF 		bl	RuntimeObj_Reset
 803              	.LVL73:
 194:SYS/task_manager/task_manager.c ****     time_diff = Get_TimeDifference_Between(TaskSys_StartTime, cur_time);
 804              		.loc 1 194 0
 805 0010 FFF7FEFF 		bl	Get_CurrentRunningUs
 806              	.LVL74:
 807 0014 0246     		mov	r2, r0
 808 0016 0B46     		mov	r3, r1
 809 0018 CDE90223 		strd	r2, [sp, #8]
 195:SYS/task_manager/task_manager.c **** 
 810              		.loc 1 195 0
ARM GAS  /tmp/ccHlURRu.s 			page 56


 811 001c 0B49     		ldr	r1, .L59
 812 001e D1E90001 		ldrd	r0, [r1]
 813 0022 FFF7FEFF 		bl	Get_TimeDifference_Between
 814              	.LVL75:
 197:SYS/task_manager/task_manager.c ****     TaskSys_Idle_Ocupy = (TaskSys_Idle_US / (float)time_diff);
 815              		.loc 1 197 0
 816 0026 0A4B     		ldr	r3, .L59+4
 817 0028 1C68     		ldr	r4, [r3]
 818 002a 0134     		adds	r4, r4, #1
 819 002c 1C60     		str	r4, [r3]
 198:SYS/task_manager/task_manager.c **** }
 820              		.loc 1 198 0
 821 002e FFF7FEFF 		bl	__aeabi_ul2f
 822              	.LVL76:
 823 0032 07EE904A 		vmov	s15, r4	@ int
 824 0036 F8EE677A 		vcvt.f32.u32	s15, s15
 825 003a 06EE900A 		vmov	s13, r0
 826 003e 87EEA67A 		vdiv.f32	s14, s15, s13
 827 0042 044B     		ldr	r3, .L59+8
 828 0044 83ED007A 		vstr.32	s14, [r3]
 199:SYS/task_manager/task_manager.c **** 
 829              		.loc 1 199 0
 830 0048 04B0     		add	sp, sp, #16
 831              	.LCFI18:
 832              		.cfi_def_cfa_offset 8
 833              		@ sp needed
 834 004a 10BD     		pop	{r4, pc}
 835              	.L60:
 836              		.align	2
 837              	.L59:
 838 004c 00000000 		.word	.LANCHOR7
 839 0050 00000000 		.word	.LANCHOR8
 840 0054 00000000 		.word	.LANCHOR9
 841              		.cfi_endproc
 842              	.LFE128:
 844              		.section	.text.Task_Exec,"ax",%progbits
 845              		.align	1
 846              		.syntax unified
 847              		.thumb
 848              		.thumb_func
 849              		.fpu fpv4-sp-d16
 851              	Task_Exec:
 852              	.LFB159:
 652:SYS/task_manager/task_manager.c **** 
 653:SYS/task_manager/task_manager.c **** Task_Handler Task_Create(const char *name, uint32_t frq, Priority_Group group, TASK_Priority priori
 654:SYS/task_manager/task_manager.c **** {
 655:SYS/task_manager/task_manager.c ****     Task_Handler handle;
 656:SYS/task_manager/task_manager.c ****     uint16_t task_name_len = strlen(name);
 657:SYS/task_manager/task_manager.c ****     uint32_t *Tsk_Ptr_tmp = NULL;
 658:SYS/task_manager/task_manager.c ****     static bool taskOs_InitState = false;
 659:SYS/task_manager/task_manager.c **** 
 660:SYS/task_manager/task_manager.c ****     if (!taskOs_InitState)
 661:SYS/task_manager/task_manager.c ****     {
 662:SYS/task_manager/task_manager.c ****         TaskSys_Init();
 663:SYS/task_manager/task_manager.c ****         taskOs_InitState = true;
 664:SYS/task_manager/task_manager.c ****     }
 665:SYS/task_manager/task_manager.c **** 
ARM GAS  /tmp/ccHlURRu.s 			page 57


 666:SYS/task_manager/task_manager.c ****     //already have task in current group and priority in task pointer matrix
 667:SYS/task_manager/task_manager.c ****     if (Task_Ptr[group][priority] != NULL)
 668:SYS/task_manager/task_manager.c ****     {
 669:SYS/task_manager/task_manager.c ****         return TASK_REGISTED;
 670:SYS/task_manager/task_manager.c ****     }
 671:SYS/task_manager/task_manager.c **** 
 672:SYS/task_manager/task_manager.c ****     //request a memory space for Task_Ptr contain
 673:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority] = (Task *)MMU_Malloc(sizeof(Task));
 674:SYS/task_manager/task_manager.c **** 
 675:SYS/task_manager/task_manager.c ****     //record Task_Ptr poiner`s address
 676:SYS/task_manager/task_manager.c ****     handle = *&Task_Ptr[group][priority];
 677:SYS/task_manager/task_manager.c **** 
 678:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->Task_name = name;
 679:SYS/task_manager/task_manager.c **** 
 680:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->exec_frq = frq;
 681:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->exec_interval_us = RUNTIEM_MAX_TICK_FRQ / frq;
 682:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->Exec_Func = func;
 683:SYS/task_manager/task_manager.c **** 
 684:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->priority.Priority = (group << 3) | priority;
 685:SYS/task_manager/task_manager.c **** 
 686:SYS/task_manager/task_manager.c **** #if (TASK_SCHEDULER_TYPE == PREEMPTIVE_SCHDULER)
 687:SYS/task_manager/task_manager.c ****     //init delay tag
 688:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->delay_info.on_delay = false;
 689:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->delay_info.tsk_hdl = handle;
 690:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->delay_info.time_unit = 0;
 691:SYS/task_manager/task_manager.c **** 
 692:SYS/task_manager/task_manager.c ****     //request memory space for task stack
 693:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->Stack_Depth = StackDepth;
 694:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->TCB.Stack = (uint32_t *)MMU_Malloc(StackDepth * sizeof(uint32_t));
 695:SYS/task_manager/task_manager.c **** 
 696:SYS/task_manager/task_manager.c ****     if (Task_Ptr[group][priority]->TCB.Stack != NULL)
 697:SYS/task_manager/task_manager.c ****     {
 698:SYS/task_manager/task_manager.c ****         Task_SetStkPtr_Val(Task_Ptr[group][priority]);
 699:SYS/task_manager/task_manager.c ****     }
 700:SYS/task_manager/task_manager.c ****     else
 701:SYS/task_manager/task_manager.c ****     {
 702:SYS/task_manager/task_manager.c ****         return TASK_BAD_MEMSPC_REQ;
 703:SYS/task_manager/task_manager.c ****     }
 704:SYS/task_manager/task_manager.c **** #endif
 705:SYS/task_manager/task_manager.c **** 
 706:SYS/task_manager/task_manager.c ****     //reset single loop running us
 707:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->TskFuncUing_US = 0;
 708:SYS/task_manager/task_manager.c **** 
 709:SYS/task_manager/task_manager.c ****     //reset task cpu occupy data
 710:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->Exec_status.cpu_opy = 0;
 711:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->Exec_status.totlal_running_time = 0;
 712:SYS/task_manager/task_manager.c **** 
 713:SYS/task_manager/task_manager.c ****     //set current group flag to ready
 714:SYS/task_manager/task_manager.c ****     TskHdl_RdyMap.Grp.Flg |= 1 << GET_TASKGROUP_PRIORITY(Task_Ptr[group][priority]->priority.Priori
 715:SYS/task_manager/task_manager.c ****     //set current task under this group flag to ready
 716:SYS/task_manager/task_manager.c ****     TskHdl_RdyMap.TskInGrp[GET_TASKGROUP_PRIORITY(Task_Ptr[group][priority]->priority.Priority)].Fl
 717:SYS/task_manager/task_manager.c **** 
 718:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->Exec_status.detect_exec_frq = 0;
 719:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->Exec_status.detect_exec_time_arv = 0;
 720:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->Exec_status.detect_exec_time_max = 0;
 721:SYS/task_manager/task_manager.c **** 
 722:SYS/task_manager/task_manager.c ****     RuntimeObj_Reset(&(Task_Ptr[group][priority]->Exec_status.Exec_Time));
ARM GAS  /tmp/ccHlURRu.s 			page 58


 723:SYS/task_manager/task_manager.c ****     RuntimeObj_Reset(&(Task_Ptr[group][priority]->Exec_status.Init_Time));
 724:SYS/task_manager/task_manager.c ****     RuntimeObj_Reset(&(Task_Ptr[group][priority]->Exec_status.Start_Time));
 725:SYS/task_manager/task_manager.c **** 
 726:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->Exec_status.Init_Time = Get_CurrentRunningUs();
 727:SYS/task_manager/task_manager.c **** 
 728:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->Exec_status.Exec_Times = 0;
 729:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->Exec_status.error_code = NOERROR;
 730:SYS/task_manager/task_manager.c **** 
 731:SYS/task_manager/task_manager.c ****     Task_SetReady(Task_Ptr[group][priority]);
 732:SYS/task_manager/task_manager.c **** 
 733:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->item_ptr = (item_obj *)MMU_Malloc(sizeof(item_obj));
 734:SYS/task_manager/task_manager.c ****     if (Task_Ptr[group][priority]->item_ptr == NULL)
 735:SYS/task_manager/task_manager.c ****     {
 736:SYS/task_manager/task_manager.c ****         return TASK_BAD_MEMSPC_REQ;
 737:SYS/task_manager/task_manager.c ****     }
 738:SYS/task_manager/task_manager.c **** 
 739:SYS/task_manager/task_manager.c ****     List_ItemInit(Task_Ptr[group][priority]->item_ptr, Task_Ptr[group][priority]);
 740:SYS/task_manager/task_manager.c ****     if (TskCrt_RegList.num == 0)
 741:SYS/task_manager/task_manager.c ****     {
 742:SYS/task_manager/task_manager.c ****         List_Init(&TskCrt_RegList.list, Task_Ptr[group][priority]->item_ptr, by_condition, Task_Pri
 743:SYS/task_manager/task_manager.c ****     }
 744:SYS/task_manager/task_manager.c ****     else
 745:SYS/task_manager/task_manager.c ****     {
 746:SYS/task_manager/task_manager.c ****         List_Insert_Item(&TskCrt_RegList.list, Task_Ptr[group][priority]->item_ptr);
 747:SYS/task_manager/task_manager.c ****     }
 748:SYS/task_manager/task_manager.c **** 
 749:SYS/task_manager/task_manager.c ****     List_ItemInit(&Task_Ptr[group][priority]->delay_item, &Task_Ptr[group][priority]->delay_info);
 750:SYS/task_manager/task_manager.c **** 
 751:SYS/task_manager/task_manager.c ****     TskCrt_RegList.num++;
 752:SYS/task_manager/task_manager.c **** 
 753:SYS/task_manager/task_manager.c ****     return handle;
 754:SYS/task_manager/task_manager.c **** }
 755:SYS/task_manager/task_manager.c **** 
 756:SYS/task_manager/task_manager.c **** //Remove func untest
 757:SYS/task_manager/task_manager.c **** void Task_Remove(Task_Handler Tsk_Hdl)
 758:SYS/task_manager/task_manager.c **** {
 759:SYS/task_manager/task_manager.c ****     //convert Tsk_Hdl from uint32_t var to Task Address which we need to delete
 760:SYS/task_manager/task_manager.c ****     //MMU_Free that memory space
 761:SYS/task_manager/task_manager.c ****     //erase all data in specificly memory space
 762:SYS/task_manager/task_manager.c ****     //set Task pointer to Null which we wanted to be delete
 763:SYS/task_manager/task_manager.c **** 
 764:SYS/task_manager/task_manager.c ****     uint8_t remove_group = GET_TASKGROUP_PRIORITY(((Task *)Tsk_Hdl)->priority.Priority);
 765:SYS/task_manager/task_manager.c ****     uint8_t remove_task = GET_TASKINGROUP_PRIORITY(((Task *)Tsk_Hdl)->priority.Priority);
 766:SYS/task_manager/task_manager.c **** 
 767:SYS/task_manager/task_manager.c ****     ReSet_Task_Data((Task *)Tsk_Hdl);
 768:SYS/task_manager/task_manager.c **** 
 769:SYS/task_manager/task_manager.c **** #if (TASK_SCHEDULER_TYPE == PREEMPTIVE_SCHDULER)
 770:SYS/task_manager/task_manager.c ****     MMU_Free((uint32_t *)((Task *)Tsk_Hdl)->TCB.Stack);
 771:SYS/task_manager/task_manager.c ****     MMU_Free((uint32_t *)((Task *)Tsk_Hdl)->TCB.Top_Stk_Ptr);
 772:SYS/task_manager/task_manager.c **** #endif
 773:SYS/task_manager/task_manager.c **** 
 774:SYS/task_manager/task_manager.c ****     MMU_Free((Task *)Tsk_Hdl);
 775:SYS/task_manager/task_manager.c ****     Task_Ptr[remove_group][remove_task] = NULL;
 776:SYS/task_manager/task_manager.c **** }
 777:SYS/task_manager/task_manager.c **** 
 778:SYS/task_manager/task_manager.c **** void TaskSystem_Start(void)
 779:SYS/task_manager/task_manager.c **** {
ARM GAS  /tmp/ccHlURRu.s 			page 59


 780:SYS/task_manager/task_manager.c ****     Runtime_Config(RUNTIME_TICK_FRQ_40K);
 781:SYS/task_manager/task_manager.c ****     Runtime_Set_start_Callback(NULL);
 782:SYS/task_manager/task_manager.c ****     Runtime_Set_stop_Callback(NULL);
 783:SYS/task_manager/task_manager.c ****     Runtime_Set_tick_Callback(Task_Scheduler); /* 5us cast by calling the scheduler */
 784:SYS/task_manager/task_manager.c ****     Runtime_Start();
 785:SYS/task_manager/task_manager.c **** 
 786:SYS/task_manager/task_manager.c ****     RuntimeObj_Reset(&TaskSys_StartTime);
 787:SYS/task_manager/task_manager.c **** 
 788:SYS/task_manager/task_manager.c ****     TaskSys_StartTime = Get_CurrentRunningUs();
 789:SYS/task_manager/task_manager.c **** 
 790:SYS/task_manager/task_manager.c **** #if (TASK_SCHEDULER_TYPE == PREEMPTIVE_SCHDULER)
 791:SYS/task_manager/task_manager.c ****     NxtRunTsk_Ptr = Task_Get_HighestRank_RdyTask();
 792:SYS/task_manager/task_manager.c **** 
 793:SYS/task_manager/task_manager.c ****     if (NxtRunTsk_Ptr != NULL)
 794:SYS/task_manager/task_manager.c ****     {
 795:SYS/task_manager/task_manager.c ****         NxtTsk_TCB.Top_Stk_Ptr = &NxtRunTsk_Ptr->TCB.Top_Stk_Ptr;
 796:SYS/task_manager/task_manager.c ****         NxtTsk_TCB.Stack = NxtRunTsk_Ptr->TCB.Stack;
 797:SYS/task_manager/task_manager.c **** 
 798:SYS/task_manager/task_manager.c ****         CurTsk_TCB = NxtTsk_TCB;
 799:SYS/task_manager/task_manager.c ****     }
 800:SYS/task_manager/task_manager.c **** #endif
 801:SYS/task_manager/task_manager.c **** 
 802:SYS/task_manager/task_manager.c ****     Task_SetPendSVPro();
 803:SYS/task_manager/task_manager.c ****     Task_TriggerPendSV();
 804:SYS/task_manager/task_manager.c **** 
 805:SYS/task_manager/task_manager.c ****     return true;
 806:SYS/task_manager/task_manager.c **** }
 807:SYS/task_manager/task_manager.c **** 
 808:SYS/task_manager/task_manager.c **** void Task_SetRunState(Task_Handler Tsk_Handle, TASK_STATE state)
 809:SYS/task_manager/task_manager.c **** {
 810:SYS/task_manager/task_manager.c ****     ((Task *)Tsk_Handle)->Exec_status.State = state;
 811:SYS/task_manager/task_manager.c **** }
 812:SYS/task_manager/task_manager.c **** 
 813:SYS/task_manager/task_manager.c **** static Task *Get_TaskInstance(uint8_t group, uint8_t priority)
 814:SYS/task_manager/task_manager.c **** {
 815:SYS/task_manager/task_manager.c ****     return Task_Ptr[group][priority];
 816:SYS/task_manager/task_manager.c **** }
 817:SYS/task_manager/task_manager.c **** 
 818:SYS/task_manager/task_manager.c **** static void Task_Exec(Task *tsk_ptr)
 819:SYS/task_manager/task_manager.c **** {
 853              		.loc 1 819 0
 854              		.cfi_startproc
 855              		@ Volatile: function does not return.
 856              		@ args = 0, pretend = 0, frame = 8
 857              		@ frame_needed = 0, uses_anonymous_args = 0
 858              	.LVL77:
 859 0000 00B5     		push	{lr}
 860              	.LCFI19:
 861              		.cfi_def_cfa_offset 4
 862              		.cfi_offset 14, -4
 863 0002 83B0     		sub	sp, sp, #12
 864              	.LCFI20:
 865              		.cfi_def_cfa_offset 16
 820:SYS/task_manager/task_manager.c ****     SYSTEM_RunTime time_diff;
 821:SYS/task_manager/task_manager.c ****     RuntimeObj_Reset(&time_diff);
 866              		.loc 1 821 0
 867 0004 6846     		mov	r0, sp
ARM GAS  /tmp/ccHlURRu.s 			page 60


 868              	.LVL78:
 869 0006 FFF7FEFF 		bl	RuntimeObj_Reset
 870              	.LVL79:
 822:SYS/task_manager/task_manager.c **** 
 823:SYS/task_manager/task_manager.c ****     tsk_ptr = NxtRunTsk_Ptr;
 871              		.loc 1 823 0
 872 000a 314B     		ldr	r3, .L69
 873 000c 1C68     		ldr	r4, [r3]
 874              	.LVL80:
 875              	.L62:
 824:SYS/task_manager/task_manager.c **** 
 825:SYS/task_manager/task_manager.c ****     while (true)
 826:SYS/task_manager/task_manager.c ****     {
 827:SYS/task_manager/task_manager.c ****         if (tsk_ptr->Exec_status.State == Task_Ready)
 876              		.loc 1 827 0
 877 000e 94F84830 		ldrb	r3, [r4, #72]	@ zero_extendqisi2
 878 0012 002B     		cmp	r3, #0
 879 0014 FBD1     		bne	.L62
 828:SYS/task_manager/task_manager.c ****         {
 829:SYS/task_manager/task_manager.c ****             tsk_ptr->TskFuncUing_US = 0;
 880              		.loc 1 829 0
 881 0016 A365     		str	r3, [r4, #88]
 830:SYS/task_manager/task_manager.c **** 
 831:SYS/task_manager/task_manager.c ****             //when task function execute finish reset ready flag of current task in group
 832:SYS/task_manager/task_manager.c ****             //code down below
 833:SYS/task_manager/task_manager.c ****             Task_ClearReady(tsk_ptr);
 882              		.loc 1 833 0
 883 0018 2046     		mov	r0, r4
 884 001a FFF7FEFF 		bl	Task_ClearReady
 885              	.LVL81:
 834:SYS/task_manager/task_manager.c **** 
 835:SYS/task_manager/task_manager.c ****             //set current running task
 836:SYS/task_manager/task_manager.c ****             CurRunTsk_Ptr = tsk_ptr;
 886              		.loc 1 836 0
 887 001e 2D4B     		ldr	r3, .L69+4
 888 0020 1C60     		str	r4, [r3]
 837:SYS/task_manager/task_manager.c **** 
 838:SYS/task_manager/task_manager.c ****             if (tsk_ptr->Exec_status.Exec_Times == 0)
 889              		.loc 1 838 0
 890 0022 A36B     		ldr	r3, [r4, #56]
 891 0024 2BB9     		cbnz	r3, .L63
 839:SYS/task_manager/task_manager.c ****             {
 840:SYS/task_manager/task_manager.c ****                 tsk_ptr->Exec_status.Start_Time = Get_CurrentRunningUs();
 892              		.loc 1 840 0
 893 0026 FFF7FEFF 		bl	Get_CurrentRunningUs
 894              	.LVL82:
 895 002a E061     		str	r0, [r4, #28]
 896 002c 2162     		str	r1, [r4, #32]
 841:SYS/task_manager/task_manager.c ****                 tsk_ptr->Exec_status.Exec_Time = tsk_ptr->Exec_status.Start_Time;
 897              		.loc 1 841 0
 898 002e 6062     		str	r0, [r4, #36]
 899 0030 A162     		str	r1, [r4, #40]
 900              	.L63:
 842:SYS/task_manager/task_manager.c ****             }
 843:SYS/task_manager/task_manager.c **** 
 844:SYS/task_manager/task_manager.c ****             tsk_ptr->Exec_status.State = Task_Running;
 901              		.loc 1 844 0
ARM GAS  /tmp/ccHlURRu.s 			page 61


 902 0032 0123     		movs	r3, #1
 903 0034 84F84830 		strb	r3, [r4, #72]
 845:SYS/task_manager/task_manager.c **** 
 846:SYS/task_manager/task_manager.c ****             //execute task funtion
 847:SYS/task_manager/task_manager.c ****             tsk_ptr->Exec_Func(*&tsk_ptr);
 904              		.loc 1 847 0
 905 0038 2369     		ldr	r3, [r4, #16]
 906 003a 2046     		mov	r0, r4
 907 003c 9847     		blx	r3
 908              	.LVL83:
 848:SYS/task_manager/task_manager.c **** 
 849:SYS/task_manager/task_manager.c ****             //record task running times
 850:SYS/task_manager/task_manager.c ****             tsk_ptr->Exec_status.Exec_Times++;
 909              		.loc 1 850 0
 910 003e A36B     		ldr	r3, [r4, #56]
 911 0040 0133     		adds	r3, r3, #1
 912 0042 A363     		str	r3, [r4, #56]
 851:SYS/task_manager/task_manager.c **** 
 852:SYS/task_manager/task_manager.c ****             //get max task execut time
 853:SYS/task_manager/task_manager.c ****             if (tsk_ptr->TskFuncUing_US > tsk_ptr->Exec_status.detect_exec_time_max)
 913              		.loc 1 853 0
 914 0044 A26D     		ldr	r2, [r4, #88]
 915 0046 636B     		ldr	r3, [r4, #52]
 916 0048 9A42     		cmp	r2, r3
 917 004a 00D9     		bls	.L64
 854:SYS/task_manager/task_manager.c ****             {
 855:SYS/task_manager/task_manager.c ****                 tsk_ptr->Exec_status.detect_exec_time_max = tsk_ptr->TskFuncUing_US;
 918              		.loc 1 855 0
 919 004c 6263     		str	r2, [r4, #52]
 920              	.L64:
 856:SYS/task_manager/task_manager.c ****             }
 857:SYS/task_manager/task_manager.c **** 
 858:SYS/task_manager/task_manager.c ****             //get task total execute time unit in us
 859:SYS/task_manager/task_manager.c ****             tsk_ptr->Exec_status.totlal_running_time += tsk_ptr->TskFuncUing_US;
 921              		.loc 1 859 0
 922 004e 236C     		ldr	r3, [r4, #64]
 923 0050 1344     		add	r3, r3, r2
 924 0052 2364     		str	r3, [r4, #64]
 860:SYS/task_manager/task_manager.c ****             time_diff = Get_TimeDifference_Between(tsk_ptr->Exec_status.Start_Time, tsk_ptr->Exec_s
 925              		.loc 1 860 0
 926 0054 626A     		ldr	r2, [r4, #36]
 927 0056 A36A     		ldr	r3, [r4, #40]
 928 0058 E069     		ldr	r0, [r4, #28]
 929 005a 216A     		ldr	r1, [r4, #32]
 930 005c FFF7FEFF 		bl	Get_TimeDifference_Between
 931              	.LVL84:
 932 0060 CDE90001 		strd	r0, [sp]
 861:SYS/task_manager/task_manager.c **** 
 862:SYS/task_manager/task_manager.c ****             tsk_ptr->Exec_status.cpu_opy = tsk_ptr->Exec_status.totlal_running_time / (float)time_d
 933              		.loc 1 862 0
 934 0064 256C     		ldr	r5, [r4, #64]
 935 0066 FFF7FEFF 		bl	__aeabi_ul2f
 936              	.LVL85:
 937 006a 07EE905A 		vmov	s15, r5	@ int
 938 006e B8EE677A 		vcvt.f32.u32	s14, s15
 939 0072 06EE900A 		vmov	s13, r0
 940 0076 C7EE267A 		vdiv.f32	s15, s14, s13
ARM GAS  /tmp/ccHlURRu.s 			page 62


 863:SYS/task_manager/task_manager.c ****             tsk_ptr->Exec_status.cpu_opy *= 100;
 941              		.loc 1 863 0
 942 007a 9FED177A 		vldr.32	s14, .L69+8
 943 007e 67EE877A 		vmul.f32	s15, s15, s14
 944 0082 C4ED117A 		vstr.32	s15, [r4, #68]
 864:SYS/task_manager/task_manager.c **** 
 865:SYS/task_manager/task_manager.c ****             //get average task running time
 866:SYS/task_manager/task_manager.c ****             tsk_ptr->Exec_status.detect_exec_time_arv += tsk_ptr->TskFuncUing_US;
 945              		.loc 1 866 0
 946 0086 A36D     		ldr	r3, [r4, #88]
 947 0088 226B     		ldr	r2, [r4, #48]
 948 008a 1344     		add	r3, r3, r2
 949 008c 2363     		str	r3, [r4, #48]
 867:SYS/task_manager/task_manager.c ****             if (tsk_ptr->Exec_status.Exec_Times > 1)
 950              		.loc 1 867 0
 951 008e A26B     		ldr	r2, [r4, #56]
 952 0090 012A     		cmp	r2, #1
 953 0092 01D9     		bls	.L65
 868:SYS/task_manager/task_manager.c ****             {
 869:SYS/task_manager/task_manager.c ****                 tsk_ptr->Exec_status.detect_exec_time_arv /= 2;
 954              		.loc 1 869 0
 955 0094 5B08     		lsrs	r3, r3, #1
 956 0096 2363     		str	r3, [r4, #48]
 957              	.L65:
 870:SYS/task_manager/task_manager.c ****             }
 871:SYS/task_manager/task_manager.c **** 
 872:SYS/task_manager/task_manager.c ****             tsk_ptr->Exec_status.Exec_Time = Get_TargetRunTime(tsk_ptr->exec_interval_us);
 958              		.loc 1 872 0
 959 0098 A089     		ldrh	r0, [r4, #12]
 960 009a FFF7FEFF 		bl	Get_TargetRunTime
 961              	.LVL86:
 962 009e 6062     		str	r0, [r4, #36]
 963 00a0 A162     		str	r1, [r4, #40]
 873:SYS/task_manager/task_manager.c **** 
 874:SYS/task_manager/task_manager.c ****             //get task execute frequence
 875:SYS/task_manager/task_manager.c ****             if (tsk_ptr->Exec_status.Exec_Times)
 964              		.loc 1 875 0
 965 00a2 A56B     		ldr	r5, [r4, #56]
 966 00a4 6DB1     		cbz	r5, .L66
 876:SYS/task_manager/task_manager.c ****             {
 877:SYS/task_manager/task_manager.c ****                 tsk_ptr->Exec_status.detect_exec_frq = (uint32_t)(tsk_ptr->Exec_status.Exec_Times /
 967              		.loc 1 877 0
 968 00a6 FFF7FEFF 		bl	__aeabi_ul2f
 969              	.LVL87:
 970 00aa 07EE905A 		vmov	s15, r5	@ int
 971 00ae F8EE677A 		vcvt.f32.u32	s15, s15
 972 00b2 06EE900A 		vmov	s13, r0
 973 00b6 87EEA67A 		vdiv.f32	s14, s15, s13
 974 00ba BCEEC77A 		vcvt.u32.f32	s14, s14
 975 00be 84ED0B7A 		vstr.32	s14, [r4, #44]	@ int
 976              	.L66:
 878:SYS/task_manager/task_manager.c ****             }
 879:SYS/task_manager/task_manager.c **** 
 880:SYS/task_manager/task_manager.c ****             tsk_ptr->Exec_status.State = Task_Stop;
 977              		.loc 1 880 0
 978 00c2 0223     		movs	r3, #2
 979 00c4 84F84830 		strb	r3, [r4, #72]
ARM GAS  /tmp/ccHlURRu.s 			page 63


 881:SYS/task_manager/task_manager.c **** 
 882:SYS/task_manager/task_manager.c ****             //erase currnet runnint task pointer
 883:SYS/task_manager/task_manager.c ****             CurRunTsk_Ptr = NULL;
 980              		.loc 1 883 0
 981 00c8 0022     		movs	r2, #0
 982 00ca 024B     		ldr	r3, .L69+4
 983 00cc 1A60     		str	r2, [r3]
 984 00ce 9EE7     		b	.L62
 985              	.L70:
 986              		.align	2
 987              	.L69:
 988 00d0 00000000 		.word	.LANCHOR10
 989 00d4 00000000 		.word	.LANCHOR5
 990 00d8 0000C842 		.word	1120403456
 991              		.cfi_endproc
 992              	.LFE159:
 994              		.section	.text.Task_Caller,"ax",%progbits
 995              		.align	1
 996              		.global	Task_Caller
 997              		.syntax unified
 998              		.thumb
 999              		.thumb_func
 1000              		.fpu fpv4-sp-d16
 1002              	Task_Caller:
 1003              	.LFB162:
 884:SYS/task_manager/task_manager.c ****         }
 885:SYS/task_manager/task_manager.c ****     }
 886:SYS/task_manager/task_manager.c **** }
 887:SYS/task_manager/task_manager.c **** 
 888:SYS/task_manager/task_manager.c **** uint32_t Task_Get_IdleUS(void)
 889:SYS/task_manager/task_manager.c **** {
 890:SYS/task_manager/task_manager.c ****     return TaskSys_Idle_US;
 891:SYS/task_manager/task_manager.c **** }
 892:SYS/task_manager/task_manager.c **** 
 893:SYS/task_manager/task_manager.c **** float Task_Get_IdleOcupy(void)
 894:SYS/task_manager/task_manager.c **** {
 895:SYS/task_manager/task_manager.c ****     return TaskSys_Idle_Ocupy;
 896:SYS/task_manager/task_manager.c **** }
 897:SYS/task_manager/task_manager.c **** 
 898:SYS/task_manager/task_manager.c **** void Task_Caller(void)
 899:SYS/task_manager/task_manager.c **** {
 1004              		.loc 1 899 0
 1005              		.cfi_startproc
 1006              		@ args = 0, pretend = 0, frame = 0
 1007              		@ frame_needed = 0, uses_anonymous_args = 0
 1008 0000 08B5     		push	{r3, lr}
 1009              	.LCFI21:
 1010              		.cfi_def_cfa_offset 8
 1011              		.cfi_offset 3, -8
 1012              		.cfi_offset 14, -4
 900:SYS/task_manager/task_manager.c ****     static uint8_t i = 0;
 901:SYS/task_manager/task_manager.c **** 
 902:SYS/task_manager/task_manager.c ****     //if any task in any group is under ready state
 903:SYS/task_manager/task_manager.c ****     if (NxtRunTsk_Ptr != NULL)
 1013              		.loc 1 903 0
 1014 0002 094B     		ldr	r3, .L77
 1015 0004 1868     		ldr	r0, [r3]
ARM GAS  /tmp/ccHlURRu.s 			page 64


 1016 0006 00B9     		cbnz	r0, .L75
 1017 0008 08BD     		pop	{r3, pc}
 1018              	.L75:
 904:SYS/task_manager/task_manager.c ****     {
 905:SYS/task_manager/task_manager.c ****         i++;
 1019              		.loc 1 905 0
 1020 000a 084A     		ldr	r2, .L77+4
 1021 000c 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1022 000e 0133     		adds	r3, r3, #1
 1023 0010 DBB2     		uxtb	r3, r3
 1024 0012 1370     		strb	r3, [r2]
 906:SYS/task_manager/task_manager.c ****         if (i == TskCrt_RegList.num)
 1025              		.loc 1 906 0
 1026 0014 064A     		ldr	r2, .L77+8
 1027 0016 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1028 0018 9342     		cmp	r3, r2
 1029 001a 01D0     		beq	.L76
 1030              	.L73:
 907:SYS/task_manager/task_manager.c ****         {
 908:SYS/task_manager/task_manager.c ****             traverse_start = true;
 909:SYS/task_manager/task_manager.c ****         }
 910:SYS/task_manager/task_manager.c **** 
 911:SYS/task_manager/task_manager.c ****         //execute task function in function matrix
 912:SYS/task_manager/task_manager.c ****         Task_Exec(NxtRunTsk_Ptr);
 1031              		.loc 1 912 0
 1032 001c FFF7FEFF 		bl	Task_Exec
 1033              	.LVL88:
 1034              	.L76:
 908:SYS/task_manager/task_manager.c ****         }
 1035              		.loc 1 908 0
 1036 0020 0122     		movs	r2, #1
 1037 0022 044B     		ldr	r3, .L77+12
 1038 0024 1A70     		strb	r2, [r3]
 1039 0026 F9E7     		b	.L73
 1040              	.L78:
 1041              		.align	2
 1042              	.L77:
 1043 0028 00000000 		.word	.LANCHOR10
 1044 002c 00000000 		.word	.LANCHOR11
 1045 0030 00000000 		.word	.LANCHOR4
 1046 0034 00000000 		.word	.LANCHOR12
 1047              		.cfi_endproc
 1048              	.LFE162:
 1050              		.section	.text.Task_CrtList_TraversePoll_callback,"ax",%progbits
 1051              		.align	1
 1052              		.syntax unified
 1053              		.thumb
 1054              		.thumb_func
 1055              		.fpu fpv4-sp-d16
 1057              	Task_CrtList_TraversePoll_callback:
 1058              	.LFB165:
 913:SYS/task_manager/task_manager.c ****     }
 914:SYS/task_manager/task_manager.c **** }
 915:SYS/task_manager/task_manager.c **** 
 916:SYS/task_manager/task_manager.c **** void TaskSys_Set_State(TaskSys_State state)
 917:SYS/task_manager/task_manager.c **** {
 918:SYS/task_manager/task_manager.c ****     TskSys_state = state;
ARM GAS  /tmp/ccHlURRu.s 			page 65


 919:SYS/task_manager/task_manager.c **** }
 920:SYS/task_manager/task_manager.c **** 
 921:SYS/task_manager/task_manager.c **** TaskSys_State TaskSys_Get_State(void)
 922:SYS/task_manager/task_manager.c **** {
 923:SYS/task_manager/task_manager.c ****     return TskSys_state;
 924:SYS/task_manager/task_manager.c **** }
 925:SYS/task_manager/task_manager.c **** 
 926:SYS/task_manager/task_manager.c **** static int Task_CrtList_TraversePoll_callback(item_obj *item, void *data, void *arg)
 927:SYS/task_manager/task_manager.c **** {
 1059              		.loc 1 927 0
 1060              		.cfi_startproc
 1061              		@ args = 0, pretend = 0, frame = 0
 1062              		@ frame_needed = 0, uses_anonymous_args = 0
 1063              	.LVL89:
 928:SYS/task_manager/task_manager.c ****     if (data != NULL)
 1064              		.loc 1 928 0
 1065 0000 B1B1     		cbz	r1, .L82
 927:SYS/task_manager/task_manager.c ****     if (data != NULL)
 1066              		.loc 1 927 0
 1067 0002 10B5     		push	{r4, lr}
 1068              	.LCFI22:
 1069              		.cfi_def_cfa_offset 8
 1070              		.cfi_offset 4, -8
 1071              		.cfi_offset 14, -4
 1072 0004 0C46     		mov	r4, r1
 929:SYS/task_manager/task_manager.c ****     {
 930:SYS/task_manager/task_manager.c ****         //get current highest priority task handler AKA NxtRunTsk_Ptr
 931:SYS/task_manager/task_manager.c **** 
 932:SYS/task_manager/task_manager.c ****         if ((TskSys_state == TaskSys_Start) &&
 1073              		.loc 1 932 0
 1074 0006 0B4B     		ldr	r3, .L86
 1075 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1076 000a DBB2     		uxtb	r3, r3
 1077 000c 022B     		cmp	r3, #2
 1078 000e 01D0     		beq	.L85
 1079              	.LVL90:
 1080              	.L80:
 933:SYS/task_manager/task_manager.c ****             (((Task *)data)->Exec_status.State == Task_Stop) &&
 934:SYS/task_manager/task_manager.c ****             (!RuntimeObj_CompareWithCurrent(((Task *)data)->Exec_status.Exec_Time)))
 935:SYS/task_manager/task_manager.c ****         {
 936:SYS/task_manager/task_manager.c ****             Task_SetReady((Task *)data);
 937:SYS/task_manager/task_manager.c ****         }
 938:SYS/task_manager/task_manager.c ****     }
 939:SYS/task_manager/task_manager.c **** 
 940:SYS/task_manager/task_manager.c ****     return 0;
 941:SYS/task_manager/task_manager.c **** }
 1081              		.loc 1 941 0
 1082 0010 0020     		movs	r0, #0
 1083 0012 10BD     		pop	{r4, pc}
 1084              	.LVL91:
 1085              	.L85:
 933:SYS/task_manager/task_manager.c ****             (((Task *)data)->Exec_status.State == Task_Stop) &&
 1086              		.loc 1 933 0 discriminator 1
 1087 0014 91F84830 		ldrb	r3, [r1, #72]	@ zero_extendqisi2
 932:SYS/task_manager/task_manager.c ****             (((Task *)data)->Exec_status.State == Task_Stop) &&
 1088              		.loc 1 932 0 discriminator 1
 1089 0018 022B     		cmp	r3, #2
ARM GAS  /tmp/ccHlURRu.s 			page 66


 1090 001a F9D1     		bne	.L80
 934:SYS/task_manager/task_manager.c ****         {
 1091              		.loc 1 934 0
 1092 001c 486A     		ldr	r0, [r1, #36]
 1093              	.LVL92:
 1094 001e 896A     		ldr	r1, [r1, #40]
 1095              	.LVL93:
 1096 0020 FFF7FEFF 		bl	RuntimeObj_CompareWithCurrent
 1097              	.LVL94:
 933:SYS/task_manager/task_manager.c ****             (((Task *)data)->Exec_status.State == Task_Stop) &&
 1098              		.loc 1 933 0
 1099 0024 0028     		cmp	r0, #0
 1100 0026 F3D1     		bne	.L80
 936:SYS/task_manager/task_manager.c ****         }
 1101              		.loc 1 936 0
 1102 0028 2046     		mov	r0, r4
 1103 002a FFF7FEFF 		bl	Task_SetReady
 1104              	.LVL95:
 1105 002e EFE7     		b	.L80
 1106              	.LVL96:
 1107              	.L82:
 1108              	.LCFI23:
 1109              		.cfi_def_cfa_offset 0
 1110              		.cfi_restore 4
 1111              		.cfi_restore 14
 1112              		.loc 1 941 0
 1113 0030 0020     		movs	r0, #0
 1114              	.LVL97:
 1115 0032 7047     		bx	lr
 1116              	.L87:
 1117              		.align	2
 1118              	.L86:
 1119 0034 00000000 		.word	.LANCHOR6
 1120              		.cfi_endproc
 1121              	.LFE165:
 1123              		.section	.text.Task_Resume_FromBlock,"ax",%progbits
 1124              		.align	1
 1125              		.global	Task_Resume_FromBlock
 1126              		.syntax unified
 1127              		.thumb
 1128              		.thumb_func
 1129              		.fpu fpv4-sp-d16
 1131              	Task_Resume_FromBlock:
 1132              	.LFB129:
 204:SYS/task_manager/task_manager.c ****     Task_ClearBlock(tsk);
 1133              		.loc 1 204 0
 1134              		.cfi_startproc
 1135              		@ args = 0, pretend = 0, frame = 0
 1136              		@ frame_needed = 0, uses_anonymous_args = 0
 1137              	.LVL98:
 1138 0000 10B5     		push	{r4, lr}
 1139              	.LCFI24:
 1140              		.cfi_def_cfa_offset 8
 1141              		.cfi_offset 4, -8
 1142              		.cfi_offset 14, -4
 1143 0002 0446     		mov	r4, r0
 205:SYS/task_manager/task_manager.c ****     Task_SetReady(tsk);
ARM GAS  /tmp/ccHlURRu.s 			page 67


 1144              		.loc 1 205 0
 1145 0004 FFF7FEFF 		bl	Task_ClearBlock
 1146              	.LVL99:
 206:SYS/task_manager/task_manager.c **** 
 1147              		.loc 1 206 0
 1148 0008 2046     		mov	r0, r4
 1149 000a FFF7FEFF 		bl	Task_SetReady
 1150              	.LVL100:
 208:SYS/task_manager/task_manager.c ****     NxtTsk_TCB.Top_Stk_Ptr = &tsk->TCB.Top_Stk_Ptr;
 1151              		.loc 1 208 0
 1152 000e 0123     		movs	r3, #1
 1153 0010 84F84830 		strb	r3, [r4, #72]
 209:SYS/task_manager/task_manager.c ****     NxtTsk_TCB.Stack = tsk->TCB.Stack;
 1154              		.loc 1 209 0
 1155 0014 04F15002 		add	r2, r4, #80
 1156 0018 034B     		ldr	r3, .L90
 1157 001a 1A60     		str	r2, [r3]
 210:SYS/task_manager/task_manager.c ****     CurRunTsk_Ptr = tsk;
 1158              		.loc 1 210 0
 1159 001c 626D     		ldr	r2, [r4, #84]
 1160 001e 5A60     		str	r2, [r3, #4]
 211:SYS/task_manager/task_manager.c **** }
 1161              		.loc 1 211 0
 1162 0020 024B     		ldr	r3, .L90+4
 1163 0022 1C60     		str	r4, [r3]
 1164 0024 10BD     		pop	{r4, pc}
 1165              	.LVL101:
 1166              	.L91:
 1167 0026 00BF     		.align	2
 1168              	.L90:
 1169 0028 00000000 		.word	NxtTsk_TCB
 1170 002c 00000000 		.word	.LANCHOR5
 1171              		.cfi_endproc
 1172              	.LFE129:
 1174              		.section	.text.Task_SetBlock,"ax",%progbits
 1175              		.align	1
 1176              		.global	Task_SetBlock
 1177              		.syntax unified
 1178              		.thumb
 1179              		.thumb_func
 1180              		.fpu fpv4-sp-d16
 1182              	Task_SetBlock:
 1183              	.LFB130:
 215:SYS/task_manager/task_manager.c ****     uint8_t grp_id = GET_TASKGROUP_PRIORITY(tsk->priority.Priority);
 1184              		.loc 1 215 0
 1185              		.cfi_startproc
 1186              		@ args = 0, pretend = 0, frame = 0
 1187              		@ frame_needed = 0, uses_anonymous_args = 0
 1188              	.LVL102:
 1189 0000 70B5     		push	{r4, r5, r6, lr}
 1190              	.LCFI25:
 1191              		.cfi_def_cfa_offset 16
 1192              		.cfi_offset 4, -16
 1193              		.cfi_offset 5, -12
 1194              		.cfi_offset 6, -8
 1195              		.cfi_offset 14, -4
 216:SYS/task_manager/task_manager.c ****     uint8_t tsk_id = GET_TASKINGROUP_PRIORITY(tsk->priority.Priority);
ARM GAS  /tmp/ccHlURRu.s 			page 68


 1196              		.loc 1 216 0
 1197 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 1198 0004 DD08     		lsrs	r5, r3, #3
 1199              	.LVL103:
 217:SYS/task_manager/task_manager.c **** 
 1200              		.loc 1 217 0
 1201 0006 03F00706 		and	r6, r3, #7
 1202              	.LVL104:
 220:SYS/task_manager/task_manager.c ****     //set current task under this group flag to block
 1203              		.loc 1 220 0
 1204 000a 134A     		ldr	r2, .L95
 1205 000c 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 1206 000e 0123     		movs	r3, #1
 1207 0010 03FA05F4 		lsl	r4, r3, r5
 1208 0014 64B2     		sxtb	r4, r4
 1209 0016 2143     		orrs	r1, r1, r4
 1210 0018 C9B2     		uxtb	r1, r1
 1211 001a 1170     		strb	r1, [r2]
 222:SYS/task_manager/task_manager.c **** 
 1212              		.loc 1 222 0
 1213 001c 2A44     		add	r2, r2, r5
 1214 001e 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
 1215 0020 B340     		lsls	r3, r3, r6
 1216 0022 5BB2     		sxtb	r3, r3
 1217 0024 1943     		orrs	r1, r1, r3
 1218 0026 C9B2     		uxtb	r1, r1
 1219 0028 5170     		strb	r1, [r2, #1]
 225:SYS/task_manager/task_manager.c ****     //if no task ready then clear group reg
 1220              		.loc 1 225 0
 1221 002a 0C4A     		ldr	r2, .L95+4
 1222 002c 2A44     		add	r2, r2, r5
 1223 002e 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
 1224 0030 21EA0303 		bic	r3, r1, r3
 1225 0034 5370     		strb	r3, [r2, #1]
 227:SYS/task_manager/task_manager.c ****     {
 1226              		.loc 1 227 0
 1227 0036 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 1228 0038 23B9     		cbnz	r3, .L93
 229:SYS/task_manager/task_manager.c ****     }
 1229              		.loc 1 229 0
 1230 003a 084A     		ldr	r2, .L95+4
 1231 003c 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1232 003e 23EA0404 		bic	r4, r3, r4
 1233 0042 1470     		strb	r4, [r2]
 1234              	.L93:
 233:SYS/task_manager/task_manager.c **** 
 1235              		.loc 1 233 0
 1236 0044 0323     		movs	r3, #3
 1237 0046 80F84830 		strb	r3, [r0, #72]
 235:SYS/task_manager/task_manager.c **** 
 1238              		.loc 1 235 0
 1239 004a 0020     		movs	r0, #0
 1240              	.LVL105:
 1241 004c 044B     		ldr	r3, .L95+8
 1242 004e 1860     		str	r0, [r3]
 237:SYS/task_manager/task_manager.c **** }
 1243              		.loc 1 237 0
ARM GAS  /tmp/ccHlURRu.s 			page 69


 1244 0050 FFF7FEFF 		bl	Task_SetBASEPRI
 1245              	.LVL106:
 1246 0054 70BD     		pop	{r4, r5, r6, pc}
 1247              	.LVL107:
 1248              	.L96:
 1249 0056 00BF     		.align	2
 1250              	.L95:
 1251 0058 00000000 		.word	.LANCHOR1
 1252 005c 00000000 		.word	.LANCHOR0
 1253 0060 00000000 		.word	.LANCHOR5
 1254              		.cfi_endproc
 1255              	.LFE130:
 1257              		.section	.text.Task_SetPending,"ax",%progbits
 1258              		.align	1
 1259              		.global	Task_SetPending
 1260              		.syntax unified
 1261              		.thumb
 1262              		.thumb_func
 1263              		.fpu fpv4-sp-d16
 1265              	Task_SetPending:
 1266              	.LFB131:
 241:SYS/task_manager/task_manager.c ****     uint8_t grp_id = GET_TASKGROUP_PRIORITY(tsk->priority.Priority);
 1267              		.loc 1 241 0
 1268              		.cfi_startproc
 1269              		@ args = 0, pretend = 0, frame = 0
 1270              		@ frame_needed = 0, uses_anonymous_args = 0
 1271              		@ link register save eliminated.
 1272              	.LVL108:
 1273 0000 70B4     		push	{r4, r5, r6}
 1274              	.LCFI26:
 1275              		.cfi_def_cfa_offset 12
 1276              		.cfi_offset 4, -12
 1277              		.cfi_offset 5, -8
 1278              		.cfi_offset 6, -4
 242:SYS/task_manager/task_manager.c ****     uint8_t tsk_id = GET_TASKINGROUP_PRIORITY(tsk->priority.Priority);
 1279              		.loc 1 242 0
 1280 0002 0478     		ldrb	r4, [r0]	@ zero_extendqisi2
 1281 0004 E208     		lsrs	r2, r4, #3
 1282              	.LVL109:
 243:SYS/task_manager/task_manager.c **** 
 1283              		.loc 1 243 0
 1284 0006 04F00705 		and	r5, r4, #7
 1285              	.LVL110:
 246:SYS/task_manager/task_manager.c ****     //set current task under this group flag to ready
 1286              		.loc 1 246 0
 1287 000a 094B     		ldr	r3, .L99
 1288 000c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1289 000e 0124     		movs	r4, #1
 1290 0010 04FA02F6 		lsl	r6, r4, r2
 1291 0014 3143     		orrs	r1, r1, r6
 1292 0016 C9B2     		uxtb	r1, r1
 1293 0018 1970     		strb	r1, [r3]
 248:SYS/task_manager/task_manager.c **** 
 1294              		.loc 1 248 0
 1295 001a 1344     		add	r3, r3, r2
 1296 001c 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 1297              	.LVL111:
ARM GAS  /tmp/ccHlURRu.s 			page 70


 1298 001e AC40     		lsls	r4, r4, r5
 1299 0020 2243     		orrs	r2, r2, r4
 1300 0022 D2B2     		uxtb	r2, r2
 1301 0024 5A70     		strb	r2, [r3, #1]
 251:SYS/task_manager/task_manager.c **** }
 1302              		.loc 1 251 0
 1303 0026 0423     		movs	r3, #4
 1304 0028 80F84830 		strb	r3, [r0, #72]
 252:SYS/task_manager/task_manager.c **** 
 1305              		.loc 1 252 0
 1306 002c 70BC     		pop	{r4, r5, r6}
 1307              	.LCFI27:
 1308              		.cfi_restore 6
 1309              		.cfi_restore 5
 1310              		.cfi_restore 4
 1311              		.cfi_def_cfa_offset 0
 1312              	.LVL112:
 1313 002e 7047     		bx	lr
 1314              	.L100:
 1315              		.align	2
 1316              	.L99:
 1317 0030 00000000 		.word	.LANCHOR2
 1318              		.cfi_endproc
 1319              	.LFE131:
 1321              		.section	.text.Task_SwitchStack,"ax",%progbits
 1322              		.align	1
 1323              		.global	Task_SwitchStack
 1324              		.syntax unified
 1325              		.thumb
 1326              		.thumb_func
 1327              		.fpu fpv4-sp-d16
 1329              	Task_SwitchStack:
 1330              	.LFB132:
 255:SYS/task_manager/task_manager.c ****     CurTsk_TCB = NxtTsk_TCB;
 1331              		.loc 1 255 0
 1332              		.cfi_startproc
 1333              		@ args = 0, pretend = 0, frame = 0
 1334              		@ frame_needed = 0, uses_anonymous_args = 0
 1335              		@ link register save eliminated.
 256:SYS/task_manager/task_manager.c **** }
 1336              		.loc 1 256 0
 1337 0000 034B     		ldr	r3, .L102
 1338 0002 044A     		ldr	r2, .L102+4
 1339 0004 92E80300 		ldm	r2, {r0, r1}
 1340 0008 83E80300 		stm	r3, {r0, r1}
 1341 000c 7047     		bx	lr
 1342              	.L103:
 1343 000e 00BF     		.align	2
 1344              	.L102:
 1345 0010 00000000 		.word	CurTsk_TCB
 1346 0014 00000000 		.word	NxtTsk_TCB
 1347              		.cfi_endproc
 1348              	.LFE132:
 1350              		.section	.text.Task_Get_HighestRank_PndTask,"ax",%progbits
 1351              		.align	1
 1352              		.global	Task_Get_HighestRank_PndTask
 1353              		.syntax unified
ARM GAS  /tmp/ccHlURRu.s 			page 71


 1354              		.thumb
 1355              		.thumb_func
 1356              		.fpu fpv4-sp-d16
 1358              	Task_Get_HighestRank_PndTask:
 1359              	.LFB133:
 260:SYS/task_manager/task_manager.c ****     uint8_t grp_id;
 1360              		.loc 1 260 0
 1361              		.cfi_startproc
 1362              		@ args = 0, pretend = 0, frame = 0
 1363              		@ frame_needed = 0, uses_anonymous_args = 0
 1364              		@ link register save eliminated.
 264:SYS/task_manager/task_manager.c ****     {
 1365              		.loc 1 264 0
 1366 0000 134B     		ldr	r3, .L113
 1367 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1368 0004 0BB3     		cbz	r3, .L106
 267:SYS/task_manager/task_manager.c ****         //find task in group
 1369              		.loc 1 267 0
 1370 0006 124B     		ldr	r3, .L113
 1371 0008 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1372 000a D2B2     		uxtb	r2, r2
 1373 000c 1149     		ldr	r1, .L113+4
 1374 000e 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 269:SYS/task_manager/task_manager.c ****     }
 1375              		.loc 1 269 0
 1376 0010 1344     		add	r3, r3, r2
 1377 0012 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1378 0014 DBB2     		uxtb	r3, r3
 1379 0016 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 274:SYS/task_manager/task_manager.c ****     {
 1380              		.loc 1 274 0
 1381 0018 03EBC200 		add	r0, r3, r2, lsl #3
 1382 001c 0E49     		ldr	r1, .L113+8
 1383 001e 51F82000 		ldr	r0, [r1, r0, lsl #2]
 1384 0022 00B1     		cbz	r0, .L112
 1385              	.L111:
 284:SYS/task_manager/task_manager.c **** 
 1386              		.loc 1 284 0
 1387 0024 7047     		bx	lr
 1388              	.L112:
 260:SYS/task_manager/task_manager.c ****     uint8_t grp_id;
 1389              		.loc 1 260 0
 1390 0026 70B4     		push	{r4, r5, r6}
 1391              	.LCFI28:
 1392              		.cfi_def_cfa_offset 12
 1393              		.cfi_offset 4, -12
 1394              		.cfi_offset 5, -8
 1395              		.cfi_offset 6, -4
 280:SYS/task_manager/task_manager.c ****         TskHdl_PndMap.TskInGrp[grp_id].Flg &= ~(1 << tsk_id);
 1396              		.loc 1 280 0
 1397 0028 0949     		ldr	r1, .L113
 1398 002a 0D78     		ldrb	r5, [r1]	@ zero_extendqisi2
 1399 002c 0124     		movs	r4, #1
 1400 002e 04FA02F6 		lsl	r6, r4, r2
 1401 0032 25EA0605 		bic	r5, r5, r6
 1402 0036 0D70     		strb	r5, [r1]
 281:SYS/task_manager/task_manager.c ****         return NULL;
ARM GAS  /tmp/ccHlURRu.s 			page 72


 1403              		.loc 1 281 0
 1404 0038 0A44     		add	r2, r2, r1
 1405 003a 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
 1406 003c 04FA03F3 		lsl	r3, r4, r3
 1407 0040 21EA0303 		bic	r3, r1, r3
 1408 0044 5370     		strb	r3, [r2, #1]
 284:SYS/task_manager/task_manager.c **** 
 1409              		.loc 1 284 0
 1410 0046 70BC     		pop	{r4, r5, r6}
 1411              	.LCFI29:
 1412              		.cfi_restore 6
 1413              		.cfi_restore 5
 1414              		.cfi_restore 4
 1415              		.cfi_def_cfa_offset 0
 1416 0048 ECE7     		b	.L111
 1417              	.L106:
 272:SYS/task_manager/task_manager.c **** 
 1418              		.loc 1 272 0
 1419 004a 0020     		movs	r0, #0
 1420 004c 7047     		bx	lr
 1421              	.L114:
 1422 004e 00BF     		.align	2
 1423              	.L113:
 1424 0050 00000000 		.word	.LANCHOR2
 1425 0054 00000000 		.word	.LANCHOR13
 1426 0058 00000000 		.word	Task_Ptr
 1427              		.cfi_endproc
 1428              	.LFE133:
 1430              		.section	.text.Task_SaveCurProc,"ax",%progbits
 1431              		.align	1
 1432              		.global	Task_SaveCurProc
 1433              		.syntax unified
 1434              		.thumb
 1435              		.thumb_func
 1436              		.fpu fpv4-sp-d16
 1438              	Task_SaveCurProc:
 1439              	.LFB138:
 337:SYS/task_manager/task_manager.c ****     __ASM("MRS    R0, PSP");
 1440              		.loc 1 337 0
 1441              		.cfi_startproc
 1442              		@ Naked Function: prologue and epilogue provided by programmer.
 1443              		@ args = 0, pretend = 0, frame = 0
 1444              		@ frame_needed = 0, uses_anonymous_args = 0
 338:SYS/task_manager/task_manager.c ****     __ASM("LDR	  R3, CurrentTCBConst_Tmp3");
 1445              		.loc 1 338 0
 1446              		.syntax unified
 1447              	@ 338 "SYS/task_manager/task_manager.c" 1
 1448 0000 EFF30980 		MRS    R0, PSP
 1449              	@ 0 "" 2
 339:SYS/task_manager/task_manager.c ****     __ASM("LDR    R2, [R3]");
 1450              		.loc 1 339 0
 1451              	@ 339 "SYS/task_manager/task_manager.c" 1
 1452 0004 DFF81C30 		LDR	  R3, CurrentTCBConst_Tmp3
 1453              	@ 0 "" 2
 340:SYS/task_manager/task_manager.c **** 
 1454              		.loc 1 340 0
 1455              	@ 340 "SYS/task_manager/task_manager.c" 1
ARM GAS  /tmp/ccHlURRu.s 			page 73


 1456 0008 1A68     		LDR    R2, [R3]
 1457              	@ 0 "" 2
 342:SYS/task_manager/task_manager.c **** 
 1458              		.loc 1 342 0
 1459              	@ 342 "SYS/task_manager/task_manager.c" 1
 1460 000a BFF36F8F 		ISB
 1461              	@ 0 "" 2
 344:SYS/task_manager/task_manager.c ****     __ASM("STR      R0, [R2]");
 1462              		.loc 1 344 0
 1463              	@ 344 "SYS/task_manager/task_manager.c" 1
 1464 000e 20E9F04F 		STMDB    R0!, {R4-R11, R14}
 1465              	@ 0 "" 2
 345:SYS/task_manager/task_manager.c **** 
 1466              		.loc 1 345 0
 1467              	@ 345 "SYS/task_manager/task_manager.c" 1
 1468 0012 1060     		STR      R0, [R2]
 1469              	@ 0 "" 2
 348:SYS/task_manager/task_manager.c ****     __ASM("IT       EQ");
 1470              		.loc 1 348 0
 1471              	@ 348 "SYS/task_manager/task_manager.c" 1
 1472 0014 1EF0100F 		TST      R14, #0x10
 1473              	@ 0 "" 2
 349:SYS/task_manager/task_manager.c ****     __ASM("VSTMDBEQ R0!, {s16-s31}");
 1474              		.loc 1 349 0
 1475              	@ 349 "SYS/task_manager/task_manager.c" 1
 1476 0018 08BF     		IT       EQ
 1477              	@ 0 "" 2
 350:SYS/task_manager/task_manager.c ****     /******************************  FPU SECTION  *********************************/
 1478              		.loc 1 350 0
 1479              	@ 350 "SYS/task_manager/task_manager.c" 1
 1480 001a 20ED108A 		VSTMDBEQ R0!, {s16-s31}
 1481              	@ 0 "" 2
 353:SYS/task_manager/task_manager.c ****     __ASM("BX       R14");
 1482              		.loc 1 353 0
 1483              	@ 353 "SYS/task_manager/task_manager.c" 1
 1484 001e BFF36F8F 		ISB
 1485              	@ 0 "" 2
 354:SYS/task_manager/task_manager.c **** 
 1486              		.loc 1 354 0
 1487              	@ 354 "SYS/task_manager/task_manager.c" 1
 1488 0022 7047     		BX       R14
 1489              	@ 0 "" 2
 356:SYS/task_manager/task_manager.c **** }
 1490              		.loc 1 356 0
 1491              	@ 356 "SYS/task_manager/task_manager.c" 1
 1492 0024 00000000 		CurrentTCBConst_Tmp3: .word CurTsk_TCB
 1493              	@ 0 "" 2
 357:SYS/task_manager/task_manager.c **** 
 1494              		.loc 1 357 0
 1495              		.thumb
 1496              		.syntax unified
 1497              		.cfi_endproc
 1498              	.LFE138:
 1500              		.section	.text.Task_Load,"ax",%progbits
 1501              		.align	1
 1502              		.global	Task_Load
 1503              		.syntax unified
ARM GAS  /tmp/ccHlURRu.s 			page 74


 1504              		.thumb
 1505              		.thumb_func
 1506              		.fpu fpv4-sp-d16
 1508              	Task_Load:
 1509              	.LFB139:
 360:SYS/task_manager/task_manager.c ****     __ASM("LDR	  R3, =CurTsk_TCB");
 1510              		.loc 1 360 0
 1511              		.cfi_startproc
 1512              		@ Naked Function: prologue and epilogue provided by programmer.
 1513              		@ args = 0, pretend = 0, frame = 0
 1514              		@ frame_needed = 0, uses_anonymous_args = 0
 361:SYS/task_manager/task_manager.c ****     __ASM("LDR    R1, [R3]");
 1515              		.loc 1 361 0
 1516              		.syntax unified
 1517              	@ 361 "SYS/task_manager/task_manager.c" 1
 1518 0000 074B     		LDR	  R3, =CurTsk_TCB
 1519              	@ 0 "" 2
 362:SYS/task_manager/task_manager.c ****     __ASM("LDR    R0, [R1]");
 1520              		.loc 1 362 0
 1521              	@ 362 "SYS/task_manager/task_manager.c" 1
 1522 0002 1968     		LDR    R1, [R3]
 1523              	@ 0 "" 2
 363:SYS/task_manager/task_manager.c **** 
 1524              		.loc 1 363 0
 1525              	@ 363 "SYS/task_manager/task_manager.c" 1
 1526 0004 0868     		LDR    R0, [R1]
 1527              	@ 0 "" 2
 365:SYS/task_manager/task_manager.c **** 
 1528              		.loc 1 365 0
 1529              	@ 365 "SYS/task_manager/task_manager.c" 1
 1530 0006 B0E8F04F 		LDMIA  R0!, {R4-R11, R14}
 1531              	@ 0 "" 2
 368:SYS/task_manager/task_manager.c ****     __ASM("IT       EQ");
 1532              		.loc 1 368 0
 1533              	@ 368 "SYS/task_manager/task_manager.c" 1
 1534 000a 1EF0100F 		TST      R14, #0x10
 1535              	@ 0 "" 2
 369:SYS/task_manager/task_manager.c ****     __ASM("VLDMIAEQ R0!, {s16-s31}");
 1536              		.loc 1 369 0
 1537              	@ 369 "SYS/task_manager/task_manager.c" 1
 1538 000e 08BF     		IT       EQ
 1539              	@ 0 "" 2
 370:SYS/task_manager/task_manager.c ****     /******************************  FPU SECTION  *********************************/
 1540              		.loc 1 370 0
 1541              	@ 370 "SYS/task_manager/task_manager.c" 1
 1542 0010 B0EC108A 		VLDMIAEQ R0!, {s16-s31}
 1543              	@ 0 "" 2
 373:SYS/task_manager/task_manager.c ****     __ASM("ISB");
 1544              		.loc 1 373 0
 1545              	@ 373 "SYS/task_manager/task_manager.c" 1
 1546 0014 80F30988 		MSR    PSP, R0
 1547              	@ 0 "" 2
 374:SYS/task_manager/task_manager.c ****     //__ASM("MOV    R0, #240");
 1548              		.loc 1 374 0
 1549              	@ 374 "SYS/task_manager/task_manager.c" 1
 1550 0018 BFF36F8F 		ISB
 1551              	@ 0 "" 2
ARM GAS  /tmp/ccHlURRu.s 			page 75


 377:SYS/task_manager/task_manager.c ****     __ASM(".ALIGN 4");
 1552              		.loc 1 377 0
 1553              	@ 377 "SYS/task_manager/task_manager.c" 1
 1554 001c 7047     		BX     R14
 1555              	@ 0 "" 2
 378:SYS/task_manager/task_manager.c **** }
 1556              		.loc 1 378 0
 1557              	@ 378 "SYS/task_manager/task_manager.c" 1
 1558 001e 00BF     		.ALIGN 4
 1559              	@ 0 "" 2
 379:SYS/task_manager/task_manager.c **** 
 1560              		.loc 1 379 0
 1561              		.thumb
 1562              		.syntax unified
 1563              		.cfi_endproc
 1564              	.LFE139:
 1566              		.section	.text.Load_FirstTask,"ax",%progbits
 1567              		.align	1
 1568              		.global	Load_FirstTask
 1569              		.syntax unified
 1570              		.thumb
 1571              		.thumb_func
 1572              		.fpu fpv4-sp-d16
 1574              	Load_FirstTask:
 1575              	.LFB140:
 382:SYS/task_manager/task_manager.c ****     Task_Load();
 1576              		.loc 1 382 0
 1577              		.cfi_startproc
 1578              		@ args = 0, pretend = 0, frame = 0
 1579              		@ frame_needed = 0, uses_anonymous_args = 0
 1580 0000 08B5     		push	{r3, lr}
 1581              	.LCFI30:
 1582              		.cfi_def_cfa_offset 8
 1583              		.cfi_offset 3, -8
 1584              		.cfi_offset 14, -4
 383:SYS/task_manager/task_manager.c **** }
 1585              		.loc 1 383 0
 1586 0002 FFF7FEFF 		bl	Task_Load
 1587              	.LVL113:
 1588 0006 08BD     		pop	{r3, pc}
 1589              		.cfi_endproc
 1590              	.LFE140:
 1592              		.section	.text.Task_SwitchContext,"ax",%progbits
 1593              		.align	1
 1594              		.global	Task_SwitchContext
 1595              		.syntax unified
 1596              		.thumb
 1597              		.thumb_func
 1598              		.fpu fpv4-sp-d16
 1600              	Task_SwitchContext:
 1601              	.LFB141:
 387:SYS/task_manager/task_manager.c ****     __ASM("MRS      R0, PSP");
 1602              		.loc 1 387 0
 1603              		.cfi_startproc
 1604              		@ Naked Function: prologue and epilogue provided by programmer.
 1605              		@ args = 0, pretend = 0, frame = 0
 1606              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccHlURRu.s 			page 76


 388:SYS/task_manager/task_manager.c ****     __ASM("ISB");
 1607              		.loc 1 388 0
 1608              		.syntax unified
 1609              	@ 388 "SYS/task_manager/task_manager.c" 1
 1610 0000 EFF30980 		MRS      R0, PSP
 1611              	@ 0 "" 2
 389:SYS/task_manager/task_manager.c **** 
 1612              		.loc 1 389 0
 1613              	@ 389 "SYS/task_manager/task_manager.c" 1
 1614 0004 BFF36F8F 		ISB
 1615              	@ 0 "" 2
 391:SYS/task_manager/task_manager.c ****     __ASM("LDR      R2, [R3]");
 1616              		.loc 1 391 0
 1617              	@ 391 "SYS/task_manager/task_manager.c" 1
 1618 0008 DFF85030 		LDR      R3, CurrentTCBConst_Tmp
 1619              	@ 0 "" 2
 392:SYS/task_manager/task_manager.c **** 
 1620              		.loc 1 392 0
 1621              	@ 392 "SYS/task_manager/task_manager.c" 1
 1622 000c 1A68     		LDR      R2, [R3]
 1623              	@ 0 "" 2
 395:SYS/task_manager/task_manager.c ****     __ASM("IT       EQ");
 1624              		.loc 1 395 0
 1625              	@ 395 "SYS/task_manager/task_manager.c" 1
 1626 000e 1EF0100F 		TST      R14, #0x10
 1627              	@ 0 "" 2
 396:SYS/task_manager/task_manager.c ****     __ASM("VSTMDBEQ R0!, {s16-s31}");
 1628              		.loc 1 396 0
 1629              	@ 396 "SYS/task_manager/task_manager.c" 1
 1630 0012 08BF     		IT       EQ
 1631              	@ 0 "" 2
 397:SYS/task_manager/task_manager.c ****     /******************************  FPU SECTION  *********************************/
 1632              		.loc 1 397 0
 1633              	@ 397 "SYS/task_manager/task_manager.c" 1
 1634 0014 20ED108A 		VSTMDBEQ R0!, {s16-s31}
 1635              	@ 0 "" 2
 400:SYS/task_manager/task_manager.c ****     __ASM("STR      R0, [R2]");
 1636              		.loc 1 400 0
 1637              	@ 400 "SYS/task_manager/task_manager.c" 1
 1638 0018 20E9F04F 		STMDB    R0!, {R4-R11, R14}
 1639              	@ 0 "" 2
 401:SYS/task_manager/task_manager.c **** 
 1640              		.loc 1 401 0
 1641              	@ 401 "SYS/task_manager/task_manager.c" 1
 1642 001c 1060     		STR      R0, [R2]
 1643              	@ 0 "" 2
 403:SYS/task_manager/task_manager.c ****     __ASM("MOV      R0, %0" ::"i"(0x50));
 1644              		.loc 1 403 0
 1645              	@ 403 "SYS/task_manager/task_manager.c" 1
 1646 001e 2DE90900 		STMDB    SP!, {R0, R3}
 1647              	@ 0 "" 2
 404:SYS/task_manager/task_manager.c ****     __ASM("MSR      BASEPRI, R0");
 1648              		.loc 1 404 0
 1649              	@ 404 "SYS/task_manager/task_manager.c" 1
 1650 0022 4FF05000 		MOV      R0, #80
 1651              	@ 0 "" 2
 405:SYS/task_manager/task_manager.c **** 
ARM GAS  /tmp/ccHlURRu.s 			page 77


 1652              		.loc 1 405 0
 1653              	@ 405 "SYS/task_manager/task_manager.c" 1
 1654 0026 80F31188 		MSR      BASEPRI, R0
 1655              	@ 0 "" 2
 407:SYS/task_manager/task_manager.c ****     __ASM("ISB");
 1656              		.loc 1 407 0
 1657              	@ 407 "SYS/task_manager/task_manager.c" 1
 1658 002a BFF34F8F 		DSB
 1659              	@ 0 "" 2
 408:SYS/task_manager/task_manager.c **** 
 1660              		.loc 1 408 0
 1661              	@ 408 "SYS/task_manager/task_manager.c" 1
 1662 002e BFF36F8F 		ISB
 1663              	@ 0 "" 2
 410:SYS/task_manager/task_manager.c **** 
 1664              		.loc 1 410 0
 1665              	@ 410 "SYS/task_manager/task_manager.c" 1
 1666 0032 FFF7FEFF 		BL       Task_SwitchStack
 1667              	@ 0 "" 2
 412:SYS/task_manager/task_manager.c ****     __ASM("MSR      BASEPRI, R0");
 1668              		.loc 1 412 0
 1669              	@ 412 "SYS/task_manager/task_manager.c" 1
 1670 0036 4FF00000 		MOV      R0, #0
 1671              	@ 0 "" 2
 413:SYS/task_manager/task_manager.c ****     __ASM("LDMIA    SP!, {R0, R3}");
 1672              		.loc 1 413 0
 1673              	@ 413 "SYS/task_manager/task_manager.c" 1
 1674 003a 80F31188 		MSR      BASEPRI, R0
 1675              	@ 0 "" 2
 414:SYS/task_manager/task_manager.c **** 
 1676              		.loc 1 414 0
 1677              	@ 414 "SYS/task_manager/task_manager.c" 1
 1678 003e 09BC     		LDMIA    SP!, {R0, R3}
 1679              	@ 0 "" 2
 416:SYS/task_manager/task_manager.c ****     __ASM("LDR      R0, [R1]");
 1680              		.loc 1 416 0
 1681              	@ 416 "SYS/task_manager/task_manager.c" 1
 1682 0040 1968     		LDR      R1, [R3]
 1683              	@ 0 "" 2
 417:SYS/task_manager/task_manager.c **** 
 1684              		.loc 1 417 0
 1685              	@ 417 "SYS/task_manager/task_manager.c" 1
 1686 0042 0868     		LDR      R0, [R1]
 1687              	@ 0 "" 2
 419:SYS/task_manager/task_manager.c **** 
 1688              		.loc 1 419 0
 1689              	@ 419 "SYS/task_manager/task_manager.c" 1
 1690 0044 B0E8F04F 		LDMIA    R0!, {R4-R11, R14}
 1691              	@ 0 "" 2
 422:SYS/task_manager/task_manager.c ****     __ASM("IT       EQ");
 1692              		.loc 1 422 0
 1693              	@ 422 "SYS/task_manager/task_manager.c" 1
 1694 0048 1EF0100F 		TST      R14, #0x10
 1695              	@ 0 "" 2
 423:SYS/task_manager/task_manager.c ****     __ASM("VLDMIAEQ R0!, {s16-s31}");
 1696              		.loc 1 423 0
 1697              	@ 423 "SYS/task_manager/task_manager.c" 1
ARM GAS  /tmp/ccHlURRu.s 			page 78


 1698 004c 08BF     		IT       EQ
 1699              	@ 0 "" 2
 424:SYS/task_manager/task_manager.c ****     /******************************  FPU SECTION  *********************************/
 1700              		.loc 1 424 0
 1701              	@ 424 "SYS/task_manager/task_manager.c" 1
 1702 004e B0EC108A 		VLDMIAEQ R0!, {s16-s31}
 1703              	@ 0 "" 2
 427:SYS/task_manager/task_manager.c ****     __ASM("ISB");
 1704              		.loc 1 427 0
 1705              	@ 427 "SYS/task_manager/task_manager.c" 1
 1706 0052 80F30988 		MSR      PSP,R0
 1707              	@ 0 "" 2
 428:SYS/task_manager/task_manager.c ****     //__ASM("MOV      R0, #240");
 1708              		.loc 1 428 0
 1709              	@ 428 "SYS/task_manager/task_manager.c" 1
 1710 0056 BFF36F8F 		ISB
 1711              	@ 0 "" 2
 431:SYS/task_manager/task_manager.c **** 
 1712              		.loc 1 431 0
 1713              	@ 431 "SYS/task_manager/task_manager.c" 1
 1714 005a 7047     		BX       R14
 1715              	@ 0 "" 2
 433:SYS/task_manager/task_manager.c ****     __ASM(".ALIGN 4");
 1716              		.loc 1 433 0
 1717              	@ 433 "SYS/task_manager/task_manager.c" 1
 1718 005c 00000000 		CurrentTCBConst_Tmp: .word CurTsk_TCB
 1719              	@ 0 "" 2
 434:SYS/task_manager/task_manager.c **** }
 1720              		.loc 1 434 0
 1721              	@ 434 "SYS/task_manager/task_manager.c" 1
 1722              		.ALIGN 4
 1723              	@ 0 "" 2
 435:SYS/task_manager/task_manager.c **** 
 1724              		.loc 1 435 0
 1725              		.thumb
 1726              		.syntax unified
 1727              		.cfi_endproc
 1728              	.LFE141:
 1730              		.section	.text.Task_Get_HighestRank_RdyTask,"ax",%progbits
 1731              		.align	1
 1732              		.global	Task_Get_HighestRank_RdyTask
 1733              		.syntax unified
 1734              		.thumb
 1735              		.thumb_func
 1736              		.fpu fpv4-sp-d16
 1738              	Task_Get_HighestRank_RdyTask:
 1739              	.LFB147:
 522:SYS/task_manager/task_manager.c ****     uint8_t grp_id = 0;
 1740              		.loc 1 522 0
 1741              		.cfi_startproc
 1742              		@ args = 0, pretend = 0, frame = 0
 1743              		@ frame_needed = 0, uses_anonymous_args = 0
 1744              		@ link register save eliminated.
 1745              	.LVL114:
 526:SYS/task_manager/task_manager.c ****     {
 1746              		.loc 1 526 0
 1747 0000 134B     		ldr	r3, .L129
ARM GAS  /tmp/ccHlURRu.s 			page 79


 1748 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1749 0004 0BB3     		cbz	r3, .L122
 529:SYS/task_manager/task_manager.c ****         //find task in group
 1750              		.loc 1 529 0
 1751 0006 124B     		ldr	r3, .L129
 1752 0008 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1753 000a D2B2     		uxtb	r2, r2
 1754 000c 1149     		ldr	r1, .L129+4
 1755 000e 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 1756              	.LVL115:
 531:SYS/task_manager/task_manager.c ****     }
 1757              		.loc 1 531 0
 1758 0010 1344     		add	r3, r3, r2
 1759 0012 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1760 0014 DBB2     		uxtb	r3, r3
 1761 0016 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 1762              	.LVL116:
 536:SYS/task_manager/task_manager.c ****     {
 1763              		.loc 1 536 0
 1764 0018 03EBC200 		add	r0, r3, r2, lsl #3
 1765 001c 0E49     		ldr	r1, .L129+8
 1766 001e 51F82000 		ldr	r0, [r1, r0, lsl #2]
 1767 0022 00B1     		cbz	r0, .L128
 1768              	.L127:
 546:SYS/task_manager/task_manager.c **** 
 1769              		.loc 1 546 0
 1770 0024 7047     		bx	lr
 1771              	.L128:
 522:SYS/task_manager/task_manager.c ****     uint8_t grp_id = 0;
 1772              		.loc 1 522 0
 1773 0026 70B4     		push	{r4, r5, r6}
 1774              	.LCFI31:
 1775              		.cfi_def_cfa_offset 12
 1776              		.cfi_offset 4, -12
 1777              		.cfi_offset 5, -8
 1778              		.cfi_offset 6, -4
 542:SYS/task_manager/task_manager.c ****         TskHdl_RdyMap.TskInGrp[grp_id].Flg &= ~(1 << tsk_id);
 1779              		.loc 1 542 0
 1780 0028 0949     		ldr	r1, .L129
 1781 002a 0D78     		ldrb	r5, [r1]	@ zero_extendqisi2
 1782 002c 0124     		movs	r4, #1
 1783 002e 04FA02F6 		lsl	r6, r4, r2
 1784 0032 25EA0605 		bic	r5, r5, r6
 1785 0036 0D70     		strb	r5, [r1]
 543:SYS/task_manager/task_manager.c ****         return NULL;
 1786              		.loc 1 543 0
 1787 0038 0A44     		add	r2, r2, r1
 1788 003a 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
 1789 003c 04FA03F3 		lsl	r3, r4, r3
 1790 0040 21EA0303 		bic	r3, r1, r3
 1791 0044 5370     		strb	r3, [r2, #1]
 546:SYS/task_manager/task_manager.c **** 
 1792              		.loc 1 546 0
 1793 0046 70BC     		pop	{r4, r5, r6}
 1794              	.LCFI32:
 1795              		.cfi_restore 6
 1796              		.cfi_restore 5
ARM GAS  /tmp/ccHlURRu.s 			page 80


 1797              		.cfi_restore 4
 1798              		.cfi_def_cfa_offset 0
 1799 0048 ECE7     		b	.L127
 1800              	.LVL117:
 1801              	.L122:
 534:SYS/task_manager/task_manager.c **** 
 1802              		.loc 1 534 0
 1803 004a 0020     		movs	r0, #0
 1804 004c 7047     		bx	lr
 1805              	.L130:
 1806 004e 00BF     		.align	2
 1807              	.L129:
 1808 0050 00000000 		.word	.LANCHOR0
 1809 0054 00000000 		.word	.LANCHOR13
 1810 0058 00000000 		.word	Task_Ptr
 1811              		.cfi_endproc
 1812              	.LFE147:
 1814              		.section	.text.Task_SetNextTask_Ptr,"ax",%progbits
 1815              		.align	1
 1816              		.global	Task_SetNextTask_Ptr
 1817              		.syntax unified
 1818              		.thumb
 1819              		.thumb_func
 1820              		.fpu fpv4-sp-d16
 1822              	Task_SetNextTask_Ptr:
 1823              	.LFB148:
 549:SYS/task_manager/task_manager.c ****     if (nxt != NULL)
 1824              		.loc 1 549 0
 1825              		.cfi_startproc
 1826              		@ args = 0, pretend = 0, frame = 0
 1827              		@ frame_needed = 0, uses_anonymous_args = 0
 1828              		@ link register save eliminated.
 1829              	.LVL118:
 550:SYS/task_manager/task_manager.c ****     {
 1830              		.loc 1 550 0
 1831 0000 38B1     		cbz	r0, .L131
 552:SYS/task_manager/task_manager.c ****         NxtTsk_TCB.Top_Stk_Ptr = &NxtRunTsk_Ptr->TCB.Top_Stk_Ptr;
 1832              		.loc 1 552 0
 1833 0002 044A     		ldr	r2, .L133
 1834 0004 1060     		str	r0, [r2]
 553:SYS/task_manager/task_manager.c ****         NxtTsk_TCB.Stack = NxtRunTsk_Ptr->TCB.Stack;
 1835              		.loc 1 553 0
 1836 0006 00F15001 		add	r1, r0, #80
 1837 000a 034A     		ldr	r2, .L133+4
 1838 000c 1160     		str	r1, [r2]
 554:SYS/task_manager/task_manager.c ****     }
 1839              		.loc 1 554 0
 1840 000e 436D     		ldr	r3, [r0, #84]
 1841 0010 5360     		str	r3, [r2, #4]
 1842              	.L131:
 1843 0012 7047     		bx	lr
 1844              	.L134:
 1845              		.align	2
 1846              	.L133:
 1847 0014 00000000 		.word	.LANCHOR10
 1848 0018 00000000 		.word	NxtTsk_TCB
 1849              		.cfi_endproc
ARM GAS  /tmp/ccHlURRu.s 			page 81


 1850              	.LFE148:
 1852              		.section	.text.Task_TriggerPendSV,"ax",%progbits
 1853              		.align	1
 1854              		.global	Task_TriggerPendSV
 1855              		.syntax unified
 1856              		.thumb
 1857              		.thumb_func
 1858              		.fpu fpv4-sp-d16
 1860              	Task_TriggerPendSV:
 1861              	.LFB150:
 584:SYS/task_manager/task_manager.c ****     __ASM(".equ NVIC_INT_CTRL, 0xE000ED04");
 1862              		.loc 1 584 0
 1863              		.cfi_startproc
 1864              		@ Naked Function: prologue and epilogue provided by programmer.
 1865              		@ args = 0, pretend = 0, frame = 0
 1866              		@ frame_needed = 0, uses_anonymous_args = 0
 585:SYS/task_manager/task_manager.c ****     __ASM(".equ NVIC_PENDSVSET, 0x10000000");
 1867              		.loc 1 585 0
 1868              		.syntax unified
 1869              	@ 585 "SYS/task_manager/task_manager.c" 1
 1870              		.equ NVIC_INT_CTRL, 0xE000ED04
 1871              	@ 0 "" 2
 586:SYS/task_manager/task_manager.c **** 
 1872              		.loc 1 586 0
 1873              	@ 586 "SYS/task_manager/task_manager.c" 1
 1874              		.equ NVIC_PENDSVSET, 0x10000000
 1875              	@ 0 "" 2
 588:SYS/task_manager/task_manager.c ****     __ASM("LDR      R1, =NVIC_PENDSVSET");
 1876              		.loc 1 588 0
 1877              	@ 588 "SYS/task_manager/task_manager.c" 1
 1878 0000 0248     		LDR      R0, =NVIC_INT_CTRL
 1879              	@ 0 "" 2
 589:SYS/task_manager/task_manager.c ****     __ASM("STR      R1, [R0]");
 1880              		.loc 1 589 0
 1881              	@ 589 "SYS/task_manager/task_manager.c" 1
 1882 0002 4FF08051 		LDR      R1, =NVIC_PENDSVSET
 1883              	@ 0 "" 2
 590:SYS/task_manager/task_manager.c ****     __ASM("BX       LR");
 1884              		.loc 1 590 0
 1885              	@ 590 "SYS/task_manager/task_manager.c" 1
 1886 0006 0160     		STR      R1, [R0]
 1887              	@ 0 "" 2
 591:SYS/task_manager/task_manager.c **** }
 1888              		.loc 1 591 0
 1889              	@ 591 "SYS/task_manager/task_manager.c" 1
 1890 0008 7047     		BX       LR
 1891              	@ 0 "" 2
 592:SYS/task_manager/task_manager.c **** 
 1892              		.loc 1 592 0
 1893              		.thumb
 1894              		.syntax unified
 1895              		.cfi_endproc
 1896              	.LFE150:
 1898 000a 0000     		.section	.text.Task_Scheduler,"ax",%progbits
 1899              		.align	1
 1900              		.global	Task_Scheduler
 1901              		.syntax unified
ARM GAS  /tmp/ccHlURRu.s 			page 82


 1902              		.thumb
 1903              		.thumb_func
 1904              		.fpu fpv4-sp-d16
 1906              	Task_Scheduler:
 1907              	.LFB166:
 942:SYS/task_manager/task_manager.c **** 
 943:SYS/task_manager/task_manager.c **** void Task_Scheduler(void)
 944:SYS/task_manager/task_manager.c **** {
 1908              		.loc 1 944 0
 1909              		.cfi_startproc
 1910              		@ args = 0, pretend = 0, frame = 0
 1911              		@ frame_needed = 0, uses_anonymous_args = 0
 945:SYS/task_manager/task_manager.c ****     static uint8_t grp = 0;
 946:SYS/task_manager/task_manager.c ****     static uint8_t tsk = 0;
 947:SYS/task_manager/task_manager.c **** 
 948:SYS/task_manager/task_manager.c ****     if (TskSys_state != TaskSys_Start)
 1912              		.loc 1 948 0
 1913 0000 514B     		ldr	r3, .L160
 1914 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1915 0004 DBB2     		uxtb	r3, r3
 1916 0006 022B     		cmp	r3, #2
 1917 0008 00D0     		beq	.L153
 1918 000a 7047     		bx	lr
 1919              	.L153:
 944:SYS/task_manager/task_manager.c ****     static uint8_t grp = 0;
 1920              		.loc 1 944 0
 1921 000c 70B5     		push	{r4, r5, r6, lr}
 1922              	.LCFI33:
 1923              		.cfi_def_cfa_offset 16
 1924              		.cfi_offset 4, -16
 1925              		.cfi_offset 5, -12
 1926              		.cfi_offset 6, -8
 1927              		.cfi_offset 14, -4
 949:SYS/task_manager/task_manager.c ****         return;
 950:SYS/task_manager/task_manager.c **** 
 951:SYS/task_manager/task_manager.c ****     if (traverse_start)
 1928              		.loc 1 951 0
 1929 000e 4F4B     		ldr	r3, .L160+4
 1930 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1931 0012 BBB9     		cbnz	r3, .L154
 1932              	.L138:
 952:SYS/task_manager/task_manager.c ****         List_traverse(&TskCrt_RegList.list, Task_CrtList_TraversePoll_callback, NULL, sub_callback)
 953:SYS/task_manager/task_manager.c **** 
 954:SYS/task_manager/task_manager.c ****     NxtRunTsk_Ptr = Task_Get_HighestRank_RdyTask();
 1933              		.loc 1 954 0
 1934 0014 FFF7FEFF 		bl	Task_Get_HighestRank_RdyTask
 1935              	.LVL119:
 1936 0018 4D4B     		ldr	r3, .L160+8
 1937 001a 1860     		str	r0, [r3]
 955:SYS/task_manager/task_manager.c **** 
 956:SYS/task_manager/task_manager.c **** #if (TASK_SCHEDULER_TYPE == PREEMPTIVE_SCHDULER)
 957:SYS/task_manager/task_manager.c **** 
 958:SYS/task_manager/task_manager.c ****     PndHstTsk_Ptr = Task_Get_HighestRank_PndTask();
 1938              		.loc 1 958 0
 1939 001c FFF7FEFF 		bl	Task_Get_HighestRank_PndTask
 1940              	.LVL120:
 1941 0020 0646     		mov	r6, r0
ARM GAS  /tmp/ccHlURRu.s 			page 83


 1942 0022 4C4B     		ldr	r3, .L160+12
 1943 0024 1860     		str	r0, [r3]
 959:SYS/task_manager/task_manager.c **** 
 960:SYS/task_manager/task_manager.c ****     if (CurRunTsk_Ptr == NULL)
 1944              		.loc 1 960 0
 1945 0026 4C4B     		ldr	r3, .L160+16
 1946 0028 1D68     		ldr	r5, [r3]
 1947 002a 95B1     		cbz	r5, .L155
 961:SYS/task_manager/task_manager.c ****     {
 962:SYS/task_manager/task_manager.c ****         if (PndHstTsk_Ptr == NULL)
 963:SYS/task_manager/task_manager.c ****         {
 964:SYS/task_manager/task_manager.c ****             //Current Run task Pointer is Null also no task In pending mode
 965:SYS/task_manager/task_manager.c ****             //set CurRunTsk_Ptr to NxtRunTsk_Ptr
 966:SYS/task_manager/task_manager.c ****             if (NxtRunTsk_Ptr != NULL)
 967:SYS/task_manager/task_manager.c ****             {
 968:SYS/task_manager/task_manager.c ****                 NxtTsk_TCB.Top_Stk_Ptr = &NxtRunTsk_Ptr->TCB.Top_Stk_Ptr;
 969:SYS/task_manager/task_manager.c ****                 NxtTsk_TCB.Stack = NxtRunTsk_Ptr->TCB.Stack;
 970:SYS/task_manager/task_manager.c **** 
 971:SYS/task_manager/task_manager.c ****                 Task_TriggerPendSV();
 972:SYS/task_manager/task_manager.c ****                 return;
 973:SYS/task_manager/task_manager.c ****             }
 974:SYS/task_manager/task_manager.c ****             else
 975:SYS/task_manager/task_manager.c ****             {
 976:SYS/task_manager/task_manager.c ****                 //doing idle function
 977:SYS/task_manager/task_manager.c ****                 Task_Idle();
 978:SYS/task_manager/task_manager.c ****             }
 979:SYS/task_manager/task_manager.c ****         }
 980:SYS/task_manager/task_manager.c ****         else
 981:SYS/task_manager/task_manager.c ****         {
 982:SYS/task_manager/task_manager.c ****             if (NxtRunTsk_Ptr != NULL)
 983:SYS/task_manager/task_manager.c ****             {
 984:SYS/task_manager/task_manager.c ****                 //if has NxtRunTsk_Ptr is not NULL also have task in pending state
 985:SYS/task_manager/task_manager.c ****                 //then get the highest priority task in pend list
 986:SYS/task_manager/task_manager.c ****                 //compare with NxtRunTsk_Ptr
 987:SYS/task_manager/task_manager.c ****                 if (((NxtRunTsk_Ptr != PndHstTsk_Ptr) &&
 988:SYS/task_manager/task_manager.c ****                      (Task_PriorityCompare(NxtRunTsk_Ptr, PndHstTsk_Ptr) == PndHstTsk_Ptr)) ||
 989:SYS/task_manager/task_manager.c ****                     (NxtRunTsk_Ptr == PndHstTsk_Ptr))
 990:SYS/task_manager/task_manager.c ****                 {
 991:SYS/task_manager/task_manager.c ****                     Task_ClearPending(PndHstTsk_Ptr);
 992:SYS/task_manager/task_manager.c ****                     PndHstTsk_Ptr->Exec_status.State = Task_Stop;
 993:SYS/task_manager/task_manager.c ****                     NxtRunTsk_Ptr = PndHstTsk_Ptr;
 994:SYS/task_manager/task_manager.c ****                 }
 995:SYS/task_manager/task_manager.c ****             }
 996:SYS/task_manager/task_manager.c ****             else
 997:SYS/task_manager/task_manager.c ****             {
 998:SYS/task_manager/task_manager.c ****                 //if NxtRunTsk_Ptr is NULL
 999:SYS/task_manager/task_manager.c ****                 //then set NxtRunTsk_Ptr PndHstTsk_Ptr
1000:SYS/task_manager/task_manager.c ****                 NxtRunTsk_Ptr = PndHstTsk_Ptr;
1001:SYS/task_manager/task_manager.c ****             }
1002:SYS/task_manager/task_manager.c **** 
1003:SYS/task_manager/task_manager.c ****             NxtTsk_TCB.Top_Stk_Ptr = &NxtRunTsk_Ptr->TCB.Top_Stk_Ptr;
1004:SYS/task_manager/task_manager.c ****             NxtTsk_TCB.Stack = NxtRunTsk_Ptr->TCB.Stack;
1005:SYS/task_manager/task_manager.c **** 
1006:SYS/task_manager/task_manager.c ****             Task_TriggerPendSV();
1007:SYS/task_manager/task_manager.c ****             return;
1008:SYS/task_manager/task_manager.c ****         }
1009:SYS/task_manager/task_manager.c ****     }
ARM GAS  /tmp/ccHlURRu.s 			page 84


1010:SYS/task_manager/task_manager.c ****     else
1011:SYS/task_manager/task_manager.c ****     {
1012:SYS/task_manager/task_manager.c ****         if (CurRunTsk_Ptr != NxtRunTsk_Ptr)
 1948              		.loc 1 1012 0
 1949 002c 484B     		ldr	r3, .L160+8
 1950 002e 1C68     		ldr	r4, [r3]
 1951 0030 A542     		cmp	r5, r4
 1952 0032 6CD0     		beq	.L146
1013:SYS/task_manager/task_manager.c ****         {
1014:SYS/task_manager/task_manager.c ****             if ((NxtRunTsk_Ptr != NULL) && (Task_PriorityCompare(CurRunTsk_Ptr, NxtRunTsk_Ptr) == N
 1953              		.loc 1 1014 0
 1954 0034 2CB1     		cbz	r4, .L136
 1955              		.loc 1 1014 0 is_stmt 0 discriminator 1
 1956 0036 2146     		mov	r1, r4
 1957 0038 2846     		mov	r0, r5
 1958 003a FFF7FEFF 		bl	Task_PriorityCompare
 1959              	.LVL121:
 1960 003e 8442     		cmp	r4, r0
 1961 0040 3ED0     		beq	.L156
 1962              	.L136:
 1963 0042 70BD     		pop	{r4, r5, r6, pc}
 1964              	.L154:
 952:SYS/task_manager/task_manager.c **** 
 1965              		.loc 1 952 0 is_stmt 1
 1966 0044 0123     		movs	r3, #1
 1967 0046 0022     		movs	r2, #0
 1968 0048 4449     		ldr	r1, .L160+20
 1969 004a 4548     		ldr	r0, .L160+24
 1970 004c FFF7FEFF 		bl	List_traverse
 1971              	.LVL122:
 1972 0050 E0E7     		b	.L138
 1973              	.L155:
 962:SYS/task_manager/task_manager.c ****         {
 1974              		.loc 1 962 0
 1975 0052 C0B1     		cbz	r0, .L157
 982:SYS/task_manager/task_manager.c ****             {
 1976              		.loc 1 982 0
 1977 0054 3E4B     		ldr	r3, .L160+8
 1978 0056 1C68     		ldr	r4, [r3]
 1979 0058 002C     		cmp	r4, #0
 1980 005a 2ED0     		beq	.L142
 987:SYS/task_manager/task_manager.c ****                      (Task_PriorityCompare(NxtRunTsk_Ptr, PndHstTsk_Ptr) == PndHstTsk_Ptr)) ||
 1981              		.loc 1 987 0
 1982 005c A042     		cmp	r0, r4
 1983 005e 05D0     		beq	.L143
 988:SYS/task_manager/task_manager.c ****                     (NxtRunTsk_Ptr == PndHstTsk_Ptr))
 1984              		.loc 1 988 0 discriminator 1
 1985 0060 0146     		mov	r1, r0
 1986 0062 2046     		mov	r0, r4
 1987 0064 FFF7FEFF 		bl	Task_PriorityCompare
 1988              	.LVL123:
 987:SYS/task_manager/task_manager.c ****                      (Task_PriorityCompare(NxtRunTsk_Ptr, PndHstTsk_Ptr) == PndHstTsk_Ptr)) ||
 1989              		.loc 1 987 0 discriminator 1
 1990 0068 8642     		cmp	r6, r0
 1991 006a 1BD0     		beq	.L144
 1992              	.L143:
 988:SYS/task_manager/task_manager.c ****                     (NxtRunTsk_Ptr == PndHstTsk_Ptr))
ARM GAS  /tmp/ccHlURRu.s 			page 85


 1993              		.loc 1 988 0
 1994 006c A642     		cmp	r6, r4
 1995 006e 19D0     		beq	.L144
 1996              	.L145:
1003:SYS/task_manager/task_manager.c ****             NxtTsk_TCB.Stack = NxtRunTsk_Ptr->TCB.Stack;
 1997              		.loc 1 1003 0
 1998 0070 374B     		ldr	r3, .L160+8
 1999 0072 1A68     		ldr	r2, [r3]
 2000 0074 02F15001 		add	r1, r2, #80
 2001 0078 3A4B     		ldr	r3, .L160+28
 2002 007a 1960     		str	r1, [r3]
1004:SYS/task_manager/task_manager.c **** 
 2003              		.loc 1 1004 0
 2004 007c 526D     		ldr	r2, [r2, #84]
 2005 007e 5A60     		str	r2, [r3, #4]
1006:SYS/task_manager/task_manager.c ****             return;
 2006              		.loc 1 1006 0
 2007 0080 FFF7FEFF 		bl	Task_TriggerPendSV
 2008              	.LVL124:
1007:SYS/task_manager/task_manager.c ****         }
 2009              		.loc 1 1007 0
 2010 0084 70BD     		pop	{r4, r5, r6, pc}
 2011              	.L157:
 966:SYS/task_manager/task_manager.c ****             {
 2012              		.loc 1 966 0
 2013 0086 324B     		ldr	r3, .L160+8
 2014 0088 1B68     		ldr	r3, [r3]
 2015 008a 43B1     		cbz	r3, .L141
 968:SYS/task_manager/task_manager.c ****                 NxtTsk_TCB.Stack = NxtRunTsk_Ptr->TCB.Stack;
 2016              		.loc 1 968 0
 2017 008c 03F15001 		add	r1, r3, #80
 2018 0090 344A     		ldr	r2, .L160+28
 2019 0092 1160     		str	r1, [r2]
 969:SYS/task_manager/task_manager.c **** 
 2020              		.loc 1 969 0
 2021 0094 5B6D     		ldr	r3, [r3, #84]
 2022 0096 5360     		str	r3, [r2, #4]
 971:SYS/task_manager/task_manager.c ****                 return;
 2023              		.loc 1 971 0
 2024 0098 FFF7FEFF 		bl	Task_TriggerPendSV
 2025              	.LVL125:
 972:SYS/task_manager/task_manager.c ****             }
 2026              		.loc 1 972 0
 2027 009c 70BD     		pop	{r4, r5, r6, pc}
 2028              	.L141:
 977:SYS/task_manager/task_manager.c ****             }
 2029              		.loc 1 977 0
 2030 009e FFF7FEFF 		bl	Task_Idle
 2031              	.LVL126:
 2032 00a2 70BD     		pop	{r4, r5, r6, pc}
 2033              	.L144:
 991:SYS/task_manager/task_manager.c ****                     PndHstTsk_Ptr->Exec_status.State = Task_Stop;
 2034              		.loc 1 991 0
 2035 00a4 3046     		mov	r0, r6
 2036 00a6 FFF7FEFF 		bl	Task_ClearPending
 2037              	.LVL127:
 992:SYS/task_manager/task_manager.c ****                     NxtRunTsk_Ptr = PndHstTsk_Ptr;
ARM GAS  /tmp/ccHlURRu.s 			page 86


 2038              		.loc 1 992 0
 2039 00aa 2A4B     		ldr	r3, .L160+12
 2040 00ac 1B68     		ldr	r3, [r3]
 2041 00ae 0222     		movs	r2, #2
 2042 00b0 83F84820 		strb	r2, [r3, #72]
 993:SYS/task_manager/task_manager.c ****                 }
 2043              		.loc 1 993 0
 2044 00b4 264A     		ldr	r2, .L160+8
 2045 00b6 1360     		str	r3, [r2]
 2046 00b8 DAE7     		b	.L145
 2047              	.L142:
1000:SYS/task_manager/task_manager.c ****             }
 2048              		.loc 1 1000 0
 2049 00ba 254B     		ldr	r3, .L160+8
 2050 00bc 1860     		str	r0, [r3]
 2051 00be D7E7     		b	.L145
 2052              	.L156:
1015:SYS/task_manager/task_manager.c ****             {
1016:SYS/task_manager/task_manager.c ****                 //if NxtRunTsk_Ptr group priority is higher then CurRunTsk_Ptr also PndHstTsk_Ptr
1017:SYS/task_manager/task_manager.c ****                 //set current run task as pending state first
1018:SYS/task_manager/task_manager.c ****                 Task_ClearReady(CurRunTsk_Ptr);
 2053              		.loc 1 1018 0
 2054 00c0 2846     		mov	r0, r5
 2055 00c2 FFF7FEFF 		bl	Task_ClearReady
 2056              	.LVL128:
1019:SYS/task_manager/task_manager.c ****                 Task_SetPending(CurRunTsk_Ptr);
 2057              		.loc 1 1019 0
 2058 00c6 244B     		ldr	r3, .L160+16
 2059 00c8 1868     		ldr	r0, [r3]
 2060 00ca FFF7FEFF 		bl	Task_SetPending
 2061              	.LVL129:
1020:SYS/task_manager/task_manager.c **** 
1021:SYS/task_manager/task_manager.c ****                 //get the highset priority task in pending list
1022:SYS/task_manager/task_manager.c ****                 //if PndHstTsk_Ptr is not NULL
1023:SYS/task_manager/task_manager.c ****                 //then compare the priority between the NxtRunTsk_Ptr and PndHstTsk_Ptr
1024:SYS/task_manager/task_manager.c ****                 if (PndHstTsk_Ptr != NULL)
 2062              		.loc 1 1024 0
 2063 00ce 214B     		ldr	r3, .L160+12
 2064 00d0 1C68     		ldr	r4, [r3]
 2065 00d2 34B1     		cbz	r4, .L147
1025:SYS/task_manager/task_manager.c ****                 {
1026:SYS/task_manager/task_manager.c ****                     if (Task_PriorityCompare(PndHstTsk_Ptr, NxtRunTsk_Ptr) == PndHstTsk_Ptr)
 2066              		.loc 1 1026 0
 2067 00d4 1E4B     		ldr	r3, .L160+8
 2068 00d6 1968     		ldr	r1, [r3]
 2069 00d8 2046     		mov	r0, r4
 2070 00da FFF7FEFF 		bl	Task_PriorityCompare
 2071              	.LVL130:
 2072 00de 8442     		cmp	r4, r0
 2073 00e0 0AD0     		beq	.L158
 2074              	.L147:
1027:SYS/task_manager/task_manager.c ****                     {
1028:SYS/task_manager/task_manager.c ****                         Task_ClearPending(PndHstTsk_Ptr);
1029:SYS/task_manager/task_manager.c ****                         PndHstTsk_Ptr->Exec_status.State = Task_Stop;
1030:SYS/task_manager/task_manager.c ****                         NxtRunTsk_Ptr = PndHstTsk_Ptr;
1031:SYS/task_manager/task_manager.c ****                     }
1032:SYS/task_manager/task_manager.c ****                 }
ARM GAS  /tmp/ccHlURRu.s 			page 87


1033:SYS/task_manager/task_manager.c **** 
1034:SYS/task_manager/task_manager.c ****                 NxtTsk_TCB.Top_Stk_Ptr = &NxtRunTsk_Ptr->TCB.Top_Stk_Ptr;
 2075              		.loc 1 1034 0
 2076 00e2 1B4B     		ldr	r3, .L160+8
 2077 00e4 1A68     		ldr	r2, [r3]
 2078 00e6 02F15001 		add	r1, r2, #80
 2079 00ea 1E4B     		ldr	r3, .L160+28
 2080 00ec 1960     		str	r1, [r3]
1035:SYS/task_manager/task_manager.c ****                 NxtTsk_TCB.Stack = NxtRunTsk_Ptr->TCB.Stack;
 2081              		.loc 1 1035 0
 2082 00ee 526D     		ldr	r2, [r2, #84]
 2083 00f0 5A60     		str	r2, [r3, #4]
1036:SYS/task_manager/task_manager.c **** 
1037:SYS/task_manager/task_manager.c ****                 Task_TriggerPendSV();
 2084              		.loc 1 1037 0
 2085 00f2 FFF7FEFF 		bl	Task_TriggerPendSV
 2086              	.LVL131:
1038:SYS/task_manager/task_manager.c ****                 return;
 2087              		.loc 1 1038 0
 2088 00f6 70BD     		pop	{r4, r5, r6, pc}
 2089              	.L158:
1028:SYS/task_manager/task_manager.c ****                         PndHstTsk_Ptr->Exec_status.State = Task_Stop;
 2090              		.loc 1 1028 0
 2091 00f8 2046     		mov	r0, r4
 2092 00fa FFF7FEFF 		bl	Task_ClearPending
 2093              	.LVL132:
1029:SYS/task_manager/task_manager.c ****                         NxtRunTsk_Ptr = PndHstTsk_Ptr;
 2094              		.loc 1 1029 0
 2095 00fe 154B     		ldr	r3, .L160+12
 2096 0100 1B68     		ldr	r3, [r3]
 2097 0102 0222     		movs	r2, #2
 2098 0104 83F84820 		strb	r2, [r3, #72]
1030:SYS/task_manager/task_manager.c ****                     }
 2099              		.loc 1 1030 0
 2100 0108 114A     		ldr	r2, .L160+8
 2101 010a 1360     		str	r3, [r2]
 2102 010c E9E7     		b	.L147
 2103              	.L146:
1039:SYS/task_manager/task_manager.c ****             }
1040:SYS/task_manager/task_manager.c ****         }
1041:SYS/task_manager/task_manager.c ****         else
1042:SYS/task_manager/task_manager.c ****         {
1043:SYS/task_manager/task_manager.c ****             //compare with the highest priority pending task
1044:SYS/task_manager/task_manager.c ****             if ((PndHstTsk_Ptr != NULL) && (Task_PriorityCompare(CurRunTsk_Ptr, PndHstTsk_Ptr) == P
 2104              		.loc 1 1044 0
 2105 010e 28B1     		cbz	r0, .L148
 2106              		.loc 1 1044 0 is_stmt 0 discriminator 1
 2107 0110 0146     		mov	r1, r0
 2108 0112 2846     		mov	r0, r5
 2109 0114 FFF7FEFF 		bl	Task_PriorityCompare
 2110              	.LVL133:
 2111 0118 8642     		cmp	r6, r0
 2112 011a 0AD0     		beq	.L159
 2113              	.L148:
1045:SYS/task_manager/task_manager.c ****             {
1046:SYS/task_manager/task_manager.c ****                 //if PndHstTsk_Ptr group priority is higher then CurRunTsk_Ptr
1047:SYS/task_manager/task_manager.c ****                 //set current run task as pending state first
ARM GAS  /tmp/ccHlURRu.s 			page 88


1048:SYS/task_manager/task_manager.c ****                 Task_SetPending(CurRunTsk_Ptr);
1049:SYS/task_manager/task_manager.c ****                 Task_SetReady(PndHstTsk_Ptr);
1050:SYS/task_manager/task_manager.c ****                 NxtRunTsk_Ptr = Task_Stop;
1051:SYS/task_manager/task_manager.c **** 
1052:SYS/task_manager/task_manager.c ****                 NxtRunTsk_Ptr = PndHstTsk_Ptr;
1053:SYS/task_manager/task_manager.c ****             }
1054:SYS/task_manager/task_manager.c **** 
1055:SYS/task_manager/task_manager.c ****             NxtTsk_TCB.Top_Stk_Ptr = &NxtRunTsk_Ptr->TCB.Top_Stk_Ptr;
 2114              		.loc 1 1055 0 is_stmt 1
 2115 011c 0C4B     		ldr	r3, .L160+8
 2116 011e 1A68     		ldr	r2, [r3]
 2117 0120 02F15001 		add	r1, r2, #80
 2118 0124 0F4B     		ldr	r3, .L160+28
 2119 0126 1960     		str	r1, [r3]
1056:SYS/task_manager/task_manager.c ****             NxtTsk_TCB.Stack = NxtRunTsk_Ptr->TCB.Stack;
 2120              		.loc 1 1056 0
 2121 0128 526D     		ldr	r2, [r2, #84]
 2122 012a 5A60     		str	r2, [r3, #4]
1057:SYS/task_manager/task_manager.c **** 
1058:SYS/task_manager/task_manager.c ****             Task_TriggerPendSV();
 2123              		.loc 1 1058 0
 2124 012c FFF7FEFF 		bl	Task_TriggerPendSV
 2125              	.LVL134:
1059:SYS/task_manager/task_manager.c ****             return;
 2126              		.loc 1 1059 0
 2127 0130 87E7     		b	.L136
 2128              	.L159:
1048:SYS/task_manager/task_manager.c ****                 Task_SetReady(PndHstTsk_Ptr);
 2129              		.loc 1 1048 0
 2130 0132 2846     		mov	r0, r5
 2131 0134 FFF7FEFF 		bl	Task_SetPending
 2132              	.LVL135:
1049:SYS/task_manager/task_manager.c ****                 NxtRunTsk_Ptr = Task_Stop;
 2133              		.loc 1 1049 0
 2134 0138 064C     		ldr	r4, .L160+12
 2135 013a 2068     		ldr	r0, [r4]
 2136 013c FFF7FEFF 		bl	Task_SetReady
 2137              	.LVL136:
1052:SYS/task_manager/task_manager.c ****             }
 2138              		.loc 1 1052 0
 2139 0140 2268     		ldr	r2, [r4]
 2140 0142 034B     		ldr	r3, .L160+8
 2141 0144 1A60     		str	r2, [r3]
 2142 0146 E9E7     		b	.L148
 2143              	.L161:
 2144              		.align	2
 2145              	.L160:
 2146 0148 00000000 		.word	.LANCHOR6
 2147 014c 00000000 		.word	.LANCHOR12
 2148 0150 00000000 		.word	.LANCHOR10
 2149 0154 00000000 		.word	.LANCHOR14
 2150 0158 00000000 		.word	.LANCHOR5
 2151 015c 00000000 		.word	Task_CrtList_TraversePoll_callback
 2152 0160 04000000 		.word	.LANCHOR4+4
 2153 0164 00000000 		.word	NxtTsk_TCB
 2154              		.cfi_endproc
 2155              	.LFE166:
ARM GAS  /tmp/ccHlURRu.s 			page 89


 2157              		.section	.text.Task_Force_TriggerPendSV,"ax",%progbits
 2158              		.align	1
 2159              		.global	Task_Force_TriggerPendSV
 2160              		.syntax unified
 2161              		.thumb
 2162              		.thumb_func
 2163              		.fpu fpv4-sp-d16
 2165              	Task_Force_TriggerPendSV:
 2166              	.LFB151:
 595:SYS/task_manager/task_manager.c ****     /* Barriers are normally not required but do ensure the code is completely \
 2167              		.loc 1 595 0
 2168              		.cfi_startproc
 2169              		@ args = 0, pretend = 0, frame = 0
 2170              		@ frame_needed = 0, uses_anonymous_args = 0
 2171 0000 08B5     		push	{r3, lr}
 2172              	.LCFI34:
 2173              		.cfi_def_cfa_offset 8
 2174              		.cfi_offset 3, -8
 2175              		.cfi_offset 14, -4
 598:SYS/task_manager/task_manager.c ****                        : "memory");
 2176              		.loc 1 598 0
 2177              		.syntax unified
 2178              	@ 598 "SYS/task_manager/task_manager.c" 1
 2179 0002 BFF34F8F 		dsb
 2180              	@ 0 "" 2
 600:SYS/task_manager/task_manager.c ****     Task_TriggerPendSV();
 2181              		.loc 1 600 0
 2182              	@ 600 "SYS/task_manager/task_manager.c" 1
 2183 0006 BFF36F8F 		isb
 2184              	@ 0 "" 2
 601:SYS/task_manager/task_manager.c **** }
 2185              		.loc 1 601 0
 2186              		.thumb
 2187              		.syntax unified
 2188 000a FFF7FEFF 		bl	Task_TriggerPendSV
 2189              	.LVL137:
 2190 000e 08BD     		pop	{r3, pc}
 2191              		.cfi_endproc
 2192              	.LFE151:
 2194              		.section	.text.Task_Get_TaskNum,"ax",%progbits
 2195              		.align	1
 2196              		.global	Task_Get_TaskNum
 2197              		.syntax unified
 2198              		.thumb
 2199              		.thumb_func
 2200              		.fpu fpv4-sp-d16
 2202              	Task_Get_TaskNum:
 2203              	.LFB152:
 605:SYS/task_manager/task_manager.c ****     return TskCrt_RegList.num;
 2204              		.loc 1 605 0
 2205              		.cfi_startproc
 2206              		@ args = 0, pretend = 0, frame = 0
 2207              		@ frame_needed = 0, uses_anonymous_args = 0
 2208              		@ link register save eliminated.
 607:SYS/task_manager/task_manager.c **** 
 2209              		.loc 1 607 0
 2210 0000 014B     		ldr	r3, .L165
ARM GAS  /tmp/ccHlURRu.s 			page 90


 2211 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 2212 0004 7047     		bx	lr
 2213              	.L166:
 2214 0006 00BF     		.align	2
 2215              	.L165:
 2216 0008 00000000 		.word	.LANCHOR4
 2217              		.cfi_endproc
 2218              	.LFE152:
 2220              		.global	__aeabi_ui2d
 2221              		.global	__aeabi_ddiv
 2222              		.global	__aeabi_d2uiz
 2223              		.section	.text.Task_Create,"ax",%progbits
 2224              		.align	1
 2225              		.global	Task_Create
 2226              		.syntax unified
 2227              		.thumb
 2228              		.thumb_func
 2229              		.fpu fpv4-sp-d16
 2231              	Task_Create:
 2232              	.LFB154:
 654:SYS/task_manager/task_manager.c ****     Task_Handler handle;
 2233              		.loc 1 654 0
 2234              		.cfi_startproc
 2235              		@ args = 8, pretend = 0, frame = 8
 2236              		@ frame_needed = 0, uses_anonymous_args = 0
 2237              	.LVL138:
 2238 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2239              	.LCFI35:
 2240              		.cfi_def_cfa_offset 36
 2241              		.cfi_offset 4, -36
 2242              		.cfi_offset 5, -32
 2243              		.cfi_offset 6, -28
 2244              		.cfi_offset 7, -24
 2245              		.cfi_offset 8, -20
 2246              		.cfi_offset 9, -16
 2247              		.cfi_offset 10, -12
 2248              		.cfi_offset 11, -8
 2249              		.cfi_offset 14, -4
 2250 0004 83B0     		sub	sp, sp, #12
 2251              	.LCFI36:
 2252              		.cfi_def_cfa_offset 48
 2253 0006 8146     		mov	r9, r0
 2254 0008 0191     		str	r1, [sp, #4]
 2255 000a 1546     		mov	r5, r2
 2256 000c 1C46     		mov	r4, r3
 2257              	.LVL139:
 660:SYS/task_manager/task_manager.c ****     {
 2258              		.loc 1 660 0
 2259 000e 764B     		ldr	r3, .L178+8
 2260              	.LVL140:
 2261 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2262 0012 53B1     		cbz	r3, .L176
 2263              	.LVL141:
 2264              	.L168:
 667:SYS/task_manager/task_manager.c ****     {
 2265              		.loc 1 667 0
 2266 0014 04EBC503 		add	r3, r4, r5, lsl #3
ARM GAS  /tmp/ccHlURRu.s 			page 91


 2267 0018 744A     		ldr	r2, .L178+12
 2268 001a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2269 001e 53B1     		cbz	r3, .L177
 669:SYS/task_manager/task_manager.c ****     }
 2270              		.loc 1 669 0
 2271 0020 0126     		movs	r6, #1
 2272              	.LVL142:
 2273              	.L167:
 754:SYS/task_manager/task_manager.c **** 
 2274              		.loc 1 754 0
 2275 0022 3046     		mov	r0, r6
 2276 0024 03B0     		add	sp, sp, #12
 2277              	.LCFI37:
 2278              		.cfi_remember_state
 2279              		.cfi_def_cfa_offset 36
 2280              		@ sp needed
 2281 0026 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2282              	.LVL143:
 2283              	.L176:
 2284              	.LCFI38:
 2285              		.cfi_restore_state
 662:SYS/task_manager/task_manager.c ****         taskOs_InitState = true;
 2286              		.loc 1 662 0
 2287 002a FFF7FEFF 		bl	TaskSys_Init
 2288              	.LVL144:
 663:SYS/task_manager/task_manager.c ****     }
 2289              		.loc 1 663 0
 2290 002e 0122     		movs	r2, #1
 2291 0030 6D4B     		ldr	r3, .L178+8
 2292 0032 1A70     		strb	r2, [r3]
 2293 0034 EEE7     		b	.L168
 2294              	.L177:
 673:SYS/task_manager/task_manager.c **** 
 2295              		.loc 1 673 0
 2296 0036 8820     		movs	r0, #136
 2297 0038 FFF7FEFF 		bl	MMU_Malloc
 2298              	.LVL145:
 2299 003c 8246     		mov	r10, r0
 2300 003e 6B4F     		ldr	r7, .L178+12
 2301 0040 4FEAC50B 		lsl	fp, r5, #3
 2302 0044 0BEB0408 		add	r8, fp, r4
 2303 0048 47F82800 		str	r0, [r7, r8, lsl #2]
 676:SYS/task_manager/task_manager.c **** 
 2304              		.loc 1 676 0
 2305 004c 0646     		mov	r6, r0
 2306              	.LVL146:
 678:SYS/task_manager/task_manager.c **** 
 2307              		.loc 1 678 0
 2308 004e C0F80490 		str	r9, [r0, #4]
 680:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->exec_interval_us = RUNTIEM_MAX_TICK_FRQ / frq;
 2309              		.loc 1 680 0
 2310 0052 57F82830 		ldr	r3, [r7, r8, lsl #2]
 2311 0056 019A     		ldr	r2, [sp, #4]
 2312 0058 9A60     		str	r2, [r3, #8]
 681:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->Exec_Func = func;
 2313              		.loc 1 681 0
 2314 005a 57F82890 		ldr	r9, [r7, r8, lsl #2]
ARM GAS  /tmp/ccHlURRu.s 			page 92


 2315              	.LVL147:
 2316 005e 1046     		mov	r0, r2
 2317              	.LVL148:
 2318 0060 FFF7FEFF 		bl	__aeabi_ui2d
 2319              	.LVL149:
 2320 0064 0246     		mov	r2, r0
 2321 0066 0B46     		mov	r3, r1
 2322 0068 5DA1     		adr	r1, .L178
 2323 006a D1E90001 		ldrd	r0, [r1]
 2324 006e FFF7FEFF 		bl	__aeabi_ddiv
 2325              	.LVL150:
 2326 0072 FFF7FEFF 		bl	__aeabi_d2uiz
 2327              	.LVL151:
 2328 0076 A9F80C00 		strh	r0, [r9, #12]	@ movhi
 682:SYS/task_manager/task_manager.c **** 
 2329              		.loc 1 682 0
 2330 007a 57F82830 		ldr	r3, [r7, r8, lsl #2]
 2331 007e 0C9A     		ldr	r2, [sp, #48]
 2332 0080 1A61     		str	r2, [r3, #16]
 684:SYS/task_manager/task_manager.c **** 
 2333              		.loc 1 684 0
 2334 0082 57F82830 		ldr	r3, [r7, r8, lsl #2]
 2335 0086 4BEA040B 		orr	fp, fp, r4
 2336 008a 83F800B0 		strb	fp, [r3]
 688:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->delay_info.tsk_hdl = handle;
 2337              		.loc 1 688 0
 2338 008e 57F82820 		ldr	r2, [r7, r8, lsl #2]
 2339 0092 0023     		movs	r3, #0
 2340 0094 82F85C30 		strb	r3, [r2, #92]
 689:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->delay_info.time_unit = 0;
 2341              		.loc 1 689 0
 2342 0098 57F82820 		ldr	r2, [r7, r8, lsl #2]
 2343 009c C2F860A0 		str	r10, [r2, #96]
 690:SYS/task_manager/task_manager.c **** 
 2344              		.loc 1 690 0
 2345 00a0 57F82820 		ldr	r2, [r7, r8, lsl #2]
 2346 00a4 5366     		str	r3, [r2, #100]
 693:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->TCB.Stack = (uint32_t *)MMU_Malloc(StackDepth * sizeof(uint32_t));
 2347              		.loc 1 693 0
 2348 00a6 57F82830 		ldr	r3, [r7, r8, lsl #2]
 2349 00aa 0D9A     		ldr	r2, [sp, #52]
 2350 00ac DA64     		str	r2, [r3, #76]
 694:SYS/task_manager/task_manager.c **** 
 2351              		.loc 1 694 0
 2352 00ae 57F82890 		ldr	r9, [r7, r8, lsl #2]
 2353 00b2 9000     		lsls	r0, r2, #2
 2354 00b4 80B2     		uxth	r0, r0
 2355 00b6 FFF7FEFF 		bl	MMU_Malloc
 2356              	.LVL152:
 2357 00ba C9F85400 		str	r0, [r9, #84]
 696:SYS/task_manager/task_manager.c ****     {
 2358              		.loc 1 696 0
 2359 00be 57F82800 		ldr	r0, [r7, r8, lsl #2]
 2360 00c2 436D     		ldr	r3, [r0, #84]
 2361 00c4 002B     		cmp	r3, #0
 2362 00c6 00F08680 		beq	.L173
 698:SYS/task_manager/task_manager.c ****     }
ARM GAS  /tmp/ccHlURRu.s 			page 93


 2363              		.loc 1 698 0
 2364 00ca FFF7FEFF 		bl	Task_SetStkPtr_Val
 2365              	.LVL153:
 707:SYS/task_manager/task_manager.c **** 
 2366              		.loc 1 707 0
 2367 00ce 57F82830 		ldr	r3, [r7, r8, lsl #2]
 2368 00d2 4FF00009 		mov	r9, #0
 2369 00d6 C3F85890 		str	r9, [r3, #88]
 710:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->Exec_status.totlal_running_time = 0;
 2370              		.loc 1 710 0
 2371 00da 57F82830 		ldr	r3, [r7, r8, lsl #2]
 2372 00de 0022     		movs	r2, #0
 2373 00e0 5A64     		str	r2, [r3, #68]	@ float
 711:SYS/task_manager/task_manager.c **** 
 2374              		.loc 1 711 0
 2375 00e2 57F82830 		ldr	r3, [r7, r8, lsl #2]
 2376 00e6 C3F84090 		str	r9, [r3, #64]
 714:SYS/task_manager/task_manager.c ****     //set current task under this group flag to ready
 2377              		.loc 1 714 0
 2378 00ea 414B     		ldr	r3, .L178+16
 2379 00ec 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 2380 00ee 57F82800 		ldr	r0, [r7, r8, lsl #2]
 2381 00f2 90F800E0 		ldrb	lr, [r0]	@ zero_extendqisi2
 2382 00f6 0122     		movs	r2, #1
 2383 00f8 02FA0EFE 		lsl	lr, r2, lr
 2384 00fc 41EAEE01 		orr	r1, r1, lr, asr #3
 2385 0100 C9B2     		uxtb	r1, r1
 2386 0102 1970     		strb	r1, [r3]
 716:SYS/task_manager/task_manager.c **** 
 2387              		.loc 1 716 0
 2388 0104 90F800E0 		ldrb	lr, [r0]	@ zero_extendqisi2
 2389 0108 03EBDE03 		add	r3, r3, lr, lsr #3
 2390 010c 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 2391 010e 02FA0EF2 		lsl	r2, r2, lr
 2392 0112 02F00702 		and	r2, r2, #7
 2393 0116 0A43     		orrs	r2, r2, r1
 2394 0118 5A70     		strb	r2, [r3, #1]
 718:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->Exec_status.detect_exec_time_arv = 0;
 2395              		.loc 1 718 0
 2396 011a C0F82C90 		str	r9, [r0, #44]
 719:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->Exec_status.detect_exec_time_max = 0;
 2397              		.loc 1 719 0
 2398 011e 57F82830 		ldr	r3, [r7, r8, lsl #2]
 2399 0122 C3F83090 		str	r9, [r3, #48]
 720:SYS/task_manager/task_manager.c **** 
 2400              		.loc 1 720 0
 2401 0126 57F82830 		ldr	r3, [r7, r8, lsl #2]
 2402 012a C3F83490 		str	r9, [r3, #52]
 722:SYS/task_manager/task_manager.c ****     RuntimeObj_Reset(&(Task_Ptr[group][priority]->Exec_status.Init_Time));
 2403              		.loc 1 722 0
 2404 012e 57F82800 		ldr	r0, [r7, r8, lsl #2]
 2405 0132 2430     		adds	r0, r0, #36
 2406 0134 FFF7FEFF 		bl	RuntimeObj_Reset
 2407              	.LVL154:
 723:SYS/task_manager/task_manager.c ****     RuntimeObj_Reset(&(Task_Ptr[group][priority]->Exec_status.Start_Time));
 2408              		.loc 1 723 0
 2409 0138 57F82800 		ldr	r0, [r7, r8, lsl #2]
ARM GAS  /tmp/ccHlURRu.s 			page 94


 2410 013c 1430     		adds	r0, r0, #20
 2411 013e FFF7FEFF 		bl	RuntimeObj_Reset
 2412              	.LVL155:
 724:SYS/task_manager/task_manager.c **** 
 2413              		.loc 1 724 0
 2414 0142 57F82800 		ldr	r0, [r7, r8, lsl #2]
 2415 0146 1C30     		adds	r0, r0, #28
 2416 0148 FFF7FEFF 		bl	RuntimeObj_Reset
 2417              	.LVL156:
 726:SYS/task_manager/task_manager.c **** 
 2418              		.loc 1 726 0
 2419 014c 57F828A0 		ldr	r10, [r7, r8, lsl #2]
 2420 0150 FFF7FEFF 		bl	Get_CurrentRunningUs
 2421              	.LVL157:
 2422 0154 CAF81400 		str	r0, [r10, #20]
 2423 0158 CAF81810 		str	r1, [r10, #24]
 728:SYS/task_manager/task_manager.c ****     Task_Ptr[group][priority]->Exec_status.error_code = NOERROR;
 2424              		.loc 1 728 0
 2425 015c 57F82830 		ldr	r3, [r7, r8, lsl #2]
 2426 0160 C3F83890 		str	r9, [r3, #56]
 729:SYS/task_manager/task_manager.c **** 
 2427              		.loc 1 729 0
 2428 0164 57F82830 		ldr	r3, [r7, r8, lsl #2]
 2429 0168 83F83C90 		strb	r9, [r3, #60]
 731:SYS/task_manager/task_manager.c **** 
 2430              		.loc 1 731 0
 2431 016c 57F82800 		ldr	r0, [r7, r8, lsl #2]
 2432 0170 FFF7FEFF 		bl	Task_SetReady
 2433              	.LVL158:
 733:SYS/task_manager/task_manager.c ****     if (Task_Ptr[group][priority]->item_ptr == NULL)
 2434              		.loc 1 733 0
 2435 0174 57F82890 		ldr	r9, [r7, r8, lsl #2]
 2436 0178 1420     		movs	r0, #20
 2437 017a FFF7FEFF 		bl	MMU_Malloc
 2438              	.LVL159:
 2439 017e C9F87000 		str	r0, [r9, #112]
 734:SYS/task_manager/task_manager.c ****     {
 2440              		.loc 1 734 0
 2441 0182 57F82810 		ldr	r1, [r7, r8, lsl #2]
 2442 0186 086F     		ldr	r0, [r1, #112]
 2443 0188 38B3     		cbz	r0, .L174
 739:SYS/task_manager/task_manager.c ****     if (TskCrt_RegList.num == 0)
 2444              		.loc 1 739 0
 2445 018a FFF7FEFF 		bl	List_ItemInit
 2446              	.LVL160:
 740:SYS/task_manager/task_manager.c ****     {
 2447              		.loc 1 740 0
 2448 018e 194B     		ldr	r3, .L178+20
 2449 0190 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2450 0192 B3B9     		cbnz	r3, .L170
 742:SYS/task_manager/task_manager.c ****     }
 2451              		.loc 1 742 0
 2452 0194 57F82810 		ldr	r1, [r7, r8, lsl #2]
 2453 0198 174B     		ldr	r3, .L178+24
 2454 019a 0222     		movs	r2, #2
 2455 019c 096F     		ldr	r1, [r1, #112]
 2456 019e 1748     		ldr	r0, .L178+28
ARM GAS  /tmp/ccHlURRu.s 			page 95


 2457 01a0 FFF7FEFF 		bl	List_Init
 2458              	.LVL161:
 2459              	.L171:
 749:SYS/task_manager/task_manager.c **** 
 2460              		.loc 1 749 0
 2461 01a4 04EBC504 		add	r4, r4, r5, lsl #3
 2462 01a8 104B     		ldr	r3, .L178+12
 2463 01aa 53F82400 		ldr	r0, [r3, r4, lsl #2]
 2464 01ae 00F15C01 		add	r1, r0, #92
 2465 01b2 7430     		adds	r0, r0, #116
 2466 01b4 FFF7FEFF 		bl	List_ItemInit
 2467              	.LVL162:
 751:SYS/task_manager/task_manager.c **** 
 2468              		.loc 1 751 0
 2469 01b8 0E4A     		ldr	r2, .L178+20
 2470 01ba 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 2471 01bc 0133     		adds	r3, r3, #1
 2472 01be 1370     		strb	r3, [r2]
 753:SYS/task_manager/task_manager.c **** }
 2473              		.loc 1 753 0
 2474 01c0 2FE7     		b	.L167
 2475              	.L170:
 746:SYS/task_manager/task_manager.c ****     }
 2476              		.loc 1 746 0
 2477 01c2 04EBC503 		add	r3, r4, r5, lsl #3
 2478 01c6 094A     		ldr	r2, .L178+12
 2479 01c8 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2480 01cc 196F     		ldr	r1, [r3, #112]
 2481 01ce 0B48     		ldr	r0, .L178+28
 2482 01d0 FFF7FEFF 		bl	List_Insert_Item
 2483              	.LVL163:
 2484 01d4 E6E7     		b	.L171
 2485              	.L173:
 702:SYS/task_manager/task_manager.c ****     }
 2486              		.loc 1 702 0
 2487 01d6 0026     		movs	r6, #0
 2488              	.LVL164:
 2489 01d8 23E7     		b	.L167
 2490              	.LVL165:
 2491              	.L174:
 736:SYS/task_manager/task_manager.c ****     }
 2492              		.loc 1 736 0
 2493 01da 0026     		movs	r6, #0
 2494              	.LVL166:
 2495 01dc 21E7     		b	.L167
 2496              	.L179:
 2497 01de 00BF     		.align	3
 2498              	.L178:
 2499 01e0 00000000 		.word	0
 2500 01e4 80842E41 		.word	1093567616
 2501 01e8 00000000 		.word	.LANCHOR15
 2502 01ec 00000000 		.word	Task_Ptr
 2503 01f0 00000000 		.word	.LANCHOR0
 2504 01f4 00000000 		.word	.LANCHOR4
 2505 01f8 00000000 		.word	Task_PriorityCompare
 2506 01fc 04000000 		.word	.LANCHOR4+4
 2507              		.cfi_endproc
ARM GAS  /tmp/ccHlURRu.s 			page 96


 2508              	.LFE154:
 2510              		.section	.text.Task_Remove,"ax",%progbits
 2511              		.align	1
 2512              		.global	Task_Remove
 2513              		.syntax unified
 2514              		.thumb
 2515              		.thumb_func
 2516              		.fpu fpv4-sp-d16
 2518              	Task_Remove:
 2519              	.LFB155:
 758:SYS/task_manager/task_manager.c ****     //convert Tsk_Hdl from uint32_t var to Task Address which we need to delete
 2520              		.loc 1 758 0
 2521              		.cfi_startproc
 2522              		@ args = 0, pretend = 0, frame = 0
 2523              		@ frame_needed = 0, uses_anonymous_args = 0
 2524              	.LVL167:
 2525 0000 70B5     		push	{r4, r5, r6, lr}
 2526              	.LCFI39:
 2527              		.cfi_def_cfa_offset 16
 2528              		.cfi_offset 4, -16
 2529              		.cfi_offset 5, -12
 2530              		.cfi_offset 6, -8
 2531              		.cfi_offset 14, -4
 2532 0002 0546     		mov	r5, r0
 764:SYS/task_manager/task_manager.c ****     uint8_t remove_task = GET_TASKINGROUP_PRIORITY(((Task *)Tsk_Hdl)->priority.Priority);
 2533              		.loc 1 764 0
 2534 0004 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 2535 0006 DE08     		lsrs	r6, r3, #3
 2536              	.LVL168:
 765:SYS/task_manager/task_manager.c **** 
 2537              		.loc 1 765 0
 2538 0008 03F00704 		and	r4, r3, #7
 2539              	.LVL169:
 767:SYS/task_manager/task_manager.c **** 
 2540              		.loc 1 767 0
 2541 000c FFF7FEFF 		bl	ReSet_Task_Data
 2542              	.LVL170:
 770:SYS/task_manager/task_manager.c ****     MMU_Free((uint32_t *)((Task *)Tsk_Hdl)->TCB.Top_Stk_Ptr);
 2543              		.loc 1 770 0
 2544 0010 686D     		ldr	r0, [r5, #84]
 2545 0012 FFF7FEFF 		bl	MMU_Free
 2546              	.LVL171:
 771:SYS/task_manager/task_manager.c **** #endif
 2547              		.loc 1 771 0
 2548 0016 286D     		ldr	r0, [r5, #80]
 2549 0018 FFF7FEFF 		bl	MMU_Free
 2550              	.LVL172:
 774:SYS/task_manager/task_manager.c ****     Task_Ptr[remove_group][remove_task] = NULL;
 2551              		.loc 1 774 0
 2552 001c 2846     		mov	r0, r5
 2553 001e FFF7FEFF 		bl	MMU_Free
 2554              	.LVL173:
 775:SYS/task_manager/task_manager.c **** }
 2555              		.loc 1 775 0
 2556 0022 04EBC603 		add	r3, r4, r6, lsl #3
 2557 0026 0021     		movs	r1, #0
 2558 0028 014A     		ldr	r2, .L182
ARM GAS  /tmp/ccHlURRu.s 			page 97


 2559 002a 42F82310 		str	r1, [r2, r3, lsl #2]
 2560 002e 70BD     		pop	{r4, r5, r6, pc}
 2561              	.LVL174:
 2562              	.L183:
 2563              		.align	2
 2564              	.L182:
 2565 0030 00000000 		.word	Task_Ptr
 2566              		.cfi_endproc
 2567              	.LFE155:
 2569              		.section	.text.TaskSystem_Start,"ax",%progbits
 2570              		.align	1
 2571              		.global	TaskSystem_Start
 2572              		.syntax unified
 2573              		.thumb
 2574              		.thumb_func
 2575              		.fpu fpv4-sp-d16
 2577              	TaskSystem_Start:
 2578              	.LFB156:
 779:SYS/task_manager/task_manager.c ****     Runtime_Config(RUNTIME_TICK_FRQ_40K);
 2579              		.loc 1 779 0
 2580              		.cfi_startproc
 2581              		@ args = 0, pretend = 0, frame = 0
 2582              		@ frame_needed = 0, uses_anonymous_args = 0
 2583 0000 10B5     		push	{r4, lr}
 2584              	.LCFI40:
 2585              		.cfi_def_cfa_offset 8
 2586              		.cfi_offset 4, -8
 2587              		.cfi_offset 14, -4
 780:SYS/task_manager/task_manager.c ****     Runtime_Set_start_Callback(NULL);
 2588              		.loc 1 780 0
 2589 0002 49F64040 		movw	r0, #40000
 2590 0006 FFF7FEFF 		bl	Runtime_Config
 2591              	.LVL175:
 781:SYS/task_manager/task_manager.c ****     Runtime_Set_stop_Callback(NULL);
 2592              		.loc 1 781 0
 2593 000a 0020     		movs	r0, #0
 2594 000c FFF7FEFF 		bl	Runtime_Set_start_Callback
 2595              	.LVL176:
 782:SYS/task_manager/task_manager.c ****     Runtime_Set_tick_Callback(Task_Scheduler); /* 5us cast by calling the scheduler */
 2596              		.loc 1 782 0
 2597 0010 0020     		movs	r0, #0
 2598 0012 FFF7FEFF 		bl	Runtime_Set_stop_Callback
 2599              	.LVL177:
 783:SYS/task_manager/task_manager.c ****     Runtime_Start();
 2600              		.loc 1 783 0
 2601 0016 1148     		ldr	r0, .L187
 2602 0018 FFF7FEFF 		bl	Runtime_Set_tick_Callback
 2603              	.LVL178:
 784:SYS/task_manager/task_manager.c **** 
 2604              		.loc 1 784 0
 2605 001c FFF7FEFF 		bl	Runtime_Start
 2606              	.LVL179:
 786:SYS/task_manager/task_manager.c **** 
 2607              		.loc 1 786 0
 2608 0020 0F4C     		ldr	r4, .L187+4
 2609 0022 2046     		mov	r0, r4
 2610 0024 FFF7FEFF 		bl	RuntimeObj_Reset
ARM GAS  /tmp/ccHlURRu.s 			page 98


 2611              	.LVL180:
 788:SYS/task_manager/task_manager.c **** 
 2612              		.loc 1 788 0
 2613 0028 FFF7FEFF 		bl	Get_CurrentRunningUs
 2614              	.LVL181:
 2615 002c C4E90001 		strd	r0, [r4]
 791:SYS/task_manager/task_manager.c **** 
 2616              		.loc 1 791 0
 2617 0030 FFF7FEFF 		bl	Task_Get_HighestRank_RdyTask
 2618              	.LVL182:
 2619 0034 0B4B     		ldr	r3, .L187+8
 2620 0036 1860     		str	r0, [r3]
 793:SYS/task_manager/task_manager.c ****     {
 2621              		.loc 1 793 0
 2622 0038 50B1     		cbz	r0, .L185
 795:SYS/task_manager/task_manager.c ****         NxtTsk_TCB.Stack = NxtRunTsk_Ptr->TCB.Stack;
 2623              		.loc 1 795 0
 2624 003a 00F15002 		add	r2, r0, #80
 2625 003e 0A4B     		ldr	r3, .L187+12
 2626 0040 1A60     		str	r2, [r3]
 796:SYS/task_manager/task_manager.c **** 
 2627              		.loc 1 796 0
 2628 0042 426D     		ldr	r2, [r0, #84]
 2629 0044 5A60     		str	r2, [r3, #4]
 798:SYS/task_manager/task_manager.c ****     }
 2630              		.loc 1 798 0
 2631 0046 094A     		ldr	r2, .L187+16
 2632 0048 93E80300 		ldm	r3, {r0, r1}
 2633 004c 82E80300 		stm	r2, {r0, r1}
 2634              	.L185:
 802:SYS/task_manager/task_manager.c ****     Task_TriggerPendSV();
 2635              		.loc 1 802 0
 2636 0050 FFF7FEFF 		bl	Task_SetPendSVPro
 2637              	.LVL183:
 803:SYS/task_manager/task_manager.c **** 
 2638              		.loc 1 803 0
 2639 0054 FFF7FEFF 		bl	Task_TriggerPendSV
 2640              	.LVL184:
 2641 0058 10BD     		pop	{r4, pc}
 2642              	.L188:
 2643 005a 00BF     		.align	2
 2644              	.L187:
 2645 005c 00000000 		.word	Task_Scheduler
 2646 0060 00000000 		.word	.LANCHOR7
 2647 0064 00000000 		.word	.LANCHOR10
 2648 0068 00000000 		.word	NxtTsk_TCB
 2649 006c 00000000 		.word	CurTsk_TCB
 2650              		.cfi_endproc
 2651              	.LFE156:
 2653              		.section	.text.Task_SetRunState,"ax",%progbits
 2654              		.align	1
 2655              		.global	Task_SetRunState
 2656              		.syntax unified
 2657              		.thumb
 2658              		.thumb_func
 2659              		.fpu fpv4-sp-d16
 2661              	Task_SetRunState:
ARM GAS  /tmp/ccHlURRu.s 			page 99


 2662              	.LFB157:
 809:SYS/task_manager/task_manager.c ****     ((Task *)Tsk_Handle)->Exec_status.State = state;
 2663              		.loc 1 809 0
 2664              		.cfi_startproc
 2665              		@ args = 0, pretend = 0, frame = 0
 2666              		@ frame_needed = 0, uses_anonymous_args = 0
 2667              		@ link register save eliminated.
 2668              	.LVL185:
 810:SYS/task_manager/task_manager.c **** }
 2669              		.loc 1 810 0
 2670 0000 80F84810 		strb	r1, [r0, #72]
 2671 0004 7047     		bx	lr
 2672              		.cfi_endproc
 2673              	.LFE157:
 2675              		.section	.text.Task_Get_IdleUS,"ax",%progbits
 2676              		.align	1
 2677              		.global	Task_Get_IdleUS
 2678              		.syntax unified
 2679              		.thumb
 2680              		.thumb_func
 2681              		.fpu fpv4-sp-d16
 2683              	Task_Get_IdleUS:
 2684              	.LFB160:
 889:SYS/task_manager/task_manager.c ****     return TaskSys_Idle_US;
 2685              		.loc 1 889 0
 2686              		.cfi_startproc
 2687              		@ args = 0, pretend = 0, frame = 0
 2688              		@ frame_needed = 0, uses_anonymous_args = 0
 2689              		@ link register save eliminated.
 891:SYS/task_manager/task_manager.c **** 
 2690              		.loc 1 891 0
 2691 0000 014B     		ldr	r3, .L191
 2692 0002 1868     		ldr	r0, [r3]
 2693 0004 7047     		bx	lr
 2694              	.L192:
 2695 0006 00BF     		.align	2
 2696              	.L191:
 2697 0008 00000000 		.word	.LANCHOR8
 2698              		.cfi_endproc
 2699              	.LFE160:
 2701              		.section	.text.Task_Get_IdleOcupy,"ax",%progbits
 2702              		.align	1
 2703              		.global	Task_Get_IdleOcupy
 2704              		.syntax unified
 2705              		.thumb
 2706              		.thumb_func
 2707              		.fpu fpv4-sp-d16
 2709              	Task_Get_IdleOcupy:
 2710              	.LFB161:
 894:SYS/task_manager/task_manager.c ****     return TaskSys_Idle_Ocupy;
 2711              		.loc 1 894 0
 2712              		.cfi_startproc
 2713              		@ args = 0, pretend = 0, frame = 0
 2714              		@ frame_needed = 0, uses_anonymous_args = 0
 2715              		@ link register save eliminated.
 896:SYS/task_manager/task_manager.c **** 
 2716              		.loc 1 896 0
ARM GAS  /tmp/ccHlURRu.s 			page 100


 2717 0000 014B     		ldr	r3, .L194
 2718 0002 93ED000A 		vldr.32	s0, [r3]
 2719 0006 7047     		bx	lr
 2720              	.L195:
 2721              		.align	2
 2722              	.L194:
 2723 0008 00000000 		.word	.LANCHOR9
 2724              		.cfi_endproc
 2725              	.LFE161:
 2727              		.section	.text.TaskSys_Set_State,"ax",%progbits
 2728              		.align	1
 2729              		.global	TaskSys_Set_State
 2730              		.syntax unified
 2731              		.thumb
 2732              		.thumb_func
 2733              		.fpu fpv4-sp-d16
 2735              	TaskSys_Set_State:
 2736              	.LFB163:
 917:SYS/task_manager/task_manager.c ****     TskSys_state = state;
 2737              		.loc 1 917 0
 2738              		.cfi_startproc
 2739              		@ args = 0, pretend = 0, frame = 0
 2740              		@ frame_needed = 0, uses_anonymous_args = 0
 2741              		@ link register save eliminated.
 2742              	.LVL186:
 918:SYS/task_manager/task_manager.c **** }
 2743              		.loc 1 918 0
 2744 0000 014B     		ldr	r3, .L197
 2745 0002 1870     		strb	r0, [r3]
 2746 0004 7047     		bx	lr
 2747              	.L198:
 2748 0006 00BF     		.align	2
 2749              	.L197:
 2750 0008 00000000 		.word	.LANCHOR6
 2751              		.cfi_endproc
 2752              	.LFE163:
 2754              		.section	.text.TaskSys_Get_State,"ax",%progbits
 2755              		.align	1
 2756              		.global	TaskSys_Get_State
 2757              		.syntax unified
 2758              		.thumb
 2759              		.thumb_func
 2760              		.fpu fpv4-sp-d16
 2762              	TaskSys_Get_State:
 2763              	.LFB164:
 922:SYS/task_manager/task_manager.c ****     return TskSys_state;
 2764              		.loc 1 922 0
 2765              		.cfi_startproc
 2766              		@ args = 0, pretend = 0, frame = 0
 2767              		@ frame_needed = 0, uses_anonymous_args = 0
 2768              		@ link register save eliminated.
 923:SYS/task_manager/task_manager.c **** }
 2769              		.loc 1 923 0
 2770 0000 014B     		ldr	r3, .L200
 2771 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 924:SYS/task_manager/task_manager.c **** 
 2772              		.loc 1 924 0
ARM GAS  /tmp/ccHlURRu.s 			page 101


 2773 0004 7047     		bx	lr
 2774              	.L201:
 2775 0006 00BF     		.align	2
 2776              	.L200:
 2777 0008 00000000 		.word	.LANCHOR6
 2778              		.cfi_endproc
 2779              	.LFE164:
 2781              		.section	.text.Task_GetInfo_ByIndex,"ax",%progbits
 2782              		.align	1
 2783              		.global	Task_GetInfo_ByIndex
 2784              		.syntax unified
 2785              		.thumb
 2786              		.thumb_func
 2787              		.fpu fpv4-sp-d16
 2789              	Task_GetInfo_ByIndex:
 2790              	.LFB167:
1060:SYS/task_manager/task_manager.c ****         }
1061:SYS/task_manager/task_manager.c ****     }
1062:SYS/task_manager/task_manager.c **** #else
1063:SYS/task_manager/task_manager.c ****     Task_TriggerPendSV();
1064:SYS/task_manager/task_manager.c **** #endif
1065:SYS/task_manager/task_manager.c **** }
1066:SYS/task_manager/task_manager.c **** 
1067:SYS/task_manager/task_manager.c **** Task_Base_Info Task_GetInfo_ByIndex(uint8_t index)
1068:SYS/task_manager/task_manager.c **** {
 2791              		.loc 1 1068 0
 2792              		.cfi_startproc
 2793              		@ args = 0, pretend = 0, frame = 0
 2794              		@ frame_needed = 0, uses_anonymous_args = 0
 2795              		@ link register save eliminated.
 2796              	.LVL187:
1069:SYS/task_manager/task_manager.c ****     Task_Base_Info task_info;
1070:SYS/task_manager/task_manager.c **** 
1071:SYS/task_manager/task_manager.c ****     return task_info;
1072:SYS/task_manager/task_manager.c **** }
 2797              		.loc 1 1072 0
 2798 0000 7047     		bx	lr
 2799              		.cfi_endproc
 2800              	.LFE167:
 2802              		.section	.text.Task_GetCurrentRunTask,"ax",%progbits
 2803              		.align	1
 2804              		.global	Task_GetCurrentRunTask
 2805              		.syntax unified
 2806              		.thumb
 2807              		.thumb_func
 2808              		.fpu fpv4-sp-d16
 2810              	Task_GetCurrentRunTask:
 2811              	.LFB168:
1073:SYS/task_manager/task_manager.c **** 
1074:SYS/task_manager/task_manager.c **** Task *Task_GetCurrentRunTask(void)
1075:SYS/task_manager/task_manager.c **** {
 2812              		.loc 1 1075 0
 2813              		.cfi_startproc
 2814              		@ args = 0, pretend = 0, frame = 0
 2815              		@ frame_needed = 0, uses_anonymous_args = 0
 2816              		@ link register save eliminated.
1076:SYS/task_manager/task_manager.c ****     return CurRunTsk_Ptr;
ARM GAS  /tmp/ccHlURRu.s 			page 102


1077:SYS/task_manager/task_manager.c **** }
 2817              		.loc 1 1077 0
 2818 0000 014B     		ldr	r3, .L204
 2819 0002 1868     		ldr	r0, [r3]
 2820 0004 7047     		bx	lr
 2821              	.L205:
 2822 0006 00BF     		.align	2
 2823              	.L204:
 2824 0008 00000000 		.word	.LANCHOR5
 2825              		.cfi_endproc
 2826              	.LFE168:
 2828              		.section	.text.Task_Statistic_Cast,"ax",%progbits
 2829              		.align	1
 2830              		.global	Task_Statistic_Cast
 2831              		.syntax unified
 2832              		.thumb
 2833              		.thumb_func
 2834              		.fpu fpv4-sp-d16
 2836              	Task_Statistic_Cast:
 2837              	.LFB169:
1078:SYS/task_manager/task_manager.c **** 
1079:SYS/task_manager/task_manager.c **** void Task_Statistic_Cast(uint32_t time_base)
1080:SYS/task_manager/task_manager.c **** {
 2838              		.loc 1 1080 0
 2839              		.cfi_startproc
 2840              		@ args = 0, pretend = 0, frame = 0
 2841              		@ frame_needed = 0, uses_anonymous_args = 0
 2842              		@ link register save eliminated.
 2843              	.LVL188:
1081:SYS/task_manager/task_manager.c ****     if ((CurRunTsk_Ptr != NULL) && (CurRunTsk_Ptr->Exec_status.State == Task_Running))
 2844              		.loc 1 1081 0
 2845 0000 064B     		ldr	r3, .L209
 2846 0002 1A68     		ldr	r2, [r3]
 2847 0004 22B1     		cbz	r2, .L206
 2848              		.loc 1 1081 0 is_stmt 0 discriminator 1
 2849 0006 92F84830 		ldrb	r3, [r2, #72]	@ zero_extendqisi2
 2850 000a DBB2     		uxtb	r3, r3
 2851 000c 012B     		cmp	r3, #1
 2852 000e 00D0     		beq	.L208
 2853              	.LVL189:
 2854              	.L206:
 2855 0010 7047     		bx	lr
 2856              	.LVL190:
 2857              	.L208:
1082:SYS/task_manager/task_manager.c ****     {
1083:SYS/task_manager/task_manager.c ****         CurRunTsk_Ptr->TskFuncUing_US += time_base;
 2858              		.loc 1 1083 0 is_stmt 1
 2859 0012 936D     		ldr	r3, [r2, #88]
 2860 0014 1844     		add	r0, r0, r3
 2861              	.LVL191:
 2862 0016 9065     		str	r0, [r2, #88]
1084:SYS/task_manager/task_manager.c ****     }
1085:SYS/task_manager/task_manager.c **** }
 2863              		.loc 1 1085 0
 2864 0018 FAE7     		b	.L206
 2865              	.L210:
 2866 001a 00BF     		.align	2
ARM GAS  /tmp/ccHlURRu.s 			page 103


 2867              	.L209:
 2868 001c 00000000 		.word	.LANCHOR5
 2869              		.cfi_endproc
 2870              	.LFE169:
 2872              		.section	.text.Task_GetStackRemain,"ax",%progbits
 2873              		.align	1
 2874              		.global	Task_GetStackRemain
 2875              		.syntax unified
 2876              		.thumb
 2877              		.thumb_func
 2878              		.fpu fpv4-sp-d16
 2880              	Task_GetStackRemain:
 2881              	.LFB170:
1086:SYS/task_manager/task_manager.c **** 
1087:SYS/task_manager/task_manager.c **** uint32_t Task_GetStackRemain(const Task_Handler hdl)
1088:SYS/task_manager/task_manager.c **** {
 2882              		.loc 1 1088 0
 2883              		.cfi_startproc
 2884              		@ args = 0, pretend = 0, frame = 0
 2885              		@ frame_needed = 0, uses_anonymous_args = 0
 2886              		@ link register save eliminated.
 2887              	.LVL192:
1089:SYS/task_manager/task_manager.c ****     uint32_t remain_size = 0;
1090:SYS/task_manager/task_manager.c **** 
1091:SYS/task_manager/task_manager.c ****     __asm("cpsid i");
 2888              		.loc 1 1091 0
 2889              		.syntax unified
 2890              	@ 1091 "SYS/task_manager/task_manager.c" 1
 2891 0000 72B6     		cpsid i
 2892              	@ 0 "" 2
1089:SYS/task_manager/task_manager.c ****     uint32_t remain_size = 0;
 2893              		.loc 1 1089 0
 2894              		.thumb
 2895              		.syntax unified
 2896 0002 0022     		movs	r2, #0
1092:SYS/task_manager/task_manager.c **** 
1093:SYS/task_manager/task_manager.c ****     while ((uint8_t)(((Task *)hdl)->TCB.Stack + remain_size) == TASK_STACK_DEFAULT)
 2897              		.loc 1 1093 0
 2898 0004 00E0     		b	.L212
 2899              	.LVL193:
 2900              	.L213:
1094:SYS/task_manager/task_manager.c ****     {
1095:SYS/task_manager/task_manager.c ****         remain_size++;
 2901              		.loc 1 1095 0
 2902 0006 0132     		adds	r2, r2, #1
 2903              	.LVL194:
 2904              	.L212:
1093:SYS/task_manager/task_manager.c ****     {
 2905              		.loc 1 1093 0
 2906 0008 436D     		ldr	r3, [r0, #84]
 2907 000a 03EB8203 		add	r3, r3, r2, lsl #2
 2908 000e DBB2     		uxtb	r3, r3
 2909 0010 8B2B     		cmp	r3, #139
 2910 0012 F8D0     		beq	.L213
1096:SYS/task_manager/task_manager.c ****     }
1097:SYS/task_manager/task_manager.c **** 
1098:SYS/task_manager/task_manager.c ****     __asm("cpsie i");
ARM GAS  /tmp/ccHlURRu.s 			page 104


 2911              		.loc 1 1098 0
 2912              		.syntax unified
 2913              	@ 1098 "SYS/task_manager/task_manager.c" 1
 2914 0014 62B6     		cpsie i
 2915              	@ 0 "" 2
1099:SYS/task_manager/task_manager.c **** 
1100:SYS/task_manager/task_manager.c ****     return (remain_size / 4);
1101:SYS/task_manager/task_manager.c **** }
 2916              		.loc 1 1101 0
 2917              		.thumb
 2918              		.syntax unified
 2919 0016 9008     		lsrs	r0, r2, #2
 2920              	.LVL195:
 2921 0018 7047     		bx	lr
 2922              		.cfi_endproc
 2923              	.LFE170:
 2925              		.comm	Task_OS_ExpStkBase,4,4
 2926              		.comm	NxtTsk_TCB,8,4
 2927              		.comm	CurTsk_TCB,8,4
 2928              		.global	PndHstTsk_Ptr
 2929              		.global	NxtRunTsk_Ptr
 2930              		.global	CurRunTsk_Ptr
 2931              		.comm	Task_Ptr,256,4
 2932              		.section	.bss.CurRunTsk_Ptr,"aw",%nobits
 2933              		.align	2
 2934              		.set	.LANCHOR5,. + 0
 2937              	CurRunTsk_Ptr:
 2938 0000 00000000 		.space	4
 2939              		.section	.bss.NxtRunTsk_Ptr,"aw",%nobits
 2940              		.align	2
 2941              		.set	.LANCHOR10,. + 0
 2944              	NxtRunTsk_Ptr:
 2945 0000 00000000 		.space	4
 2946              		.section	.bss.PndHstTsk_Ptr,"aw",%nobits
 2947              		.align	2
 2948              		.set	.LANCHOR14,. + 0
 2951              	PndHstTsk_Ptr:
 2952 0000 00000000 		.space	4
 2953              		.section	.bss.TaskSys_Idle_Ocupy,"aw",%nobits
 2954              		.align	2
 2955              		.set	.LANCHOR9,. + 0
 2958              	TaskSys_Idle_Ocupy:
 2959 0000 00000000 		.space	4
 2960              		.section	.bss.TaskSys_Idle_US,"aw",%nobits
 2961              		.align	2
 2962              		.set	.LANCHOR8,. + 0
 2965              	TaskSys_Idle_US:
 2966 0000 00000000 		.space	4
 2967              		.section	.bss.TaskSys_StartTime,"aw",%nobits
 2968              		.align	3
 2969              		.set	.LANCHOR7,. + 0
 2972              	TaskSys_StartTime:
 2973 0000 00000000 		.space	8
 2973      00000000 
 2974              		.section	.bss.Task_OS_StkMem,"aw",%nobits
 2975              		.align	2
 2976              		.set	.LANCHOR3,. + 0
ARM GAS  /tmp/ccHlURRu.s 			page 105


 2979              	Task_OS_StkMem:
 2980 0000 00000000 		.space	40960
 2980      00000000 
 2980      00000000 
 2980      00000000 
 2980      00000000 
 2981              		.section	.bss.TskCrt_RegList,"aw",%nobits
 2982              		.align	2
 2983              		.set	.LANCHOR4,. + 0
 2986              	TskCrt_RegList:
 2987 0000 00000000 		.space	24
 2987      00000000 
 2987      00000000 
 2987      00000000 
 2987      00000000 
 2988              		.section	.bss.TskHdl_BlkMap,"aw",%nobits
 2989              		.align	2
 2990              		.set	.LANCHOR1,. + 0
 2993              	TskHdl_BlkMap:
 2994 0000 00000000 		.space	9
 2994      00000000 
 2994      00
 2995              		.section	.bss.TskHdl_PndMap,"aw",%nobits
 2996              		.align	2
 2997              		.set	.LANCHOR2,. + 0
 3000              	TskHdl_PndMap:
 3001 0000 00000000 		.space	9
 3001      00000000 
 3001      00
 3002              		.section	.bss.TskHdl_RdyMap,"aw",%nobits
 3003              		.align	2
 3004              		.set	.LANCHOR0,. + 0
 3007              	TskHdl_RdyMap:
 3008 0000 00000000 		.space	9
 3008      00000000 
 3008      00
 3009              		.section	.bss.TskSys_state,"aw",%nobits
 3010              		.set	.LANCHOR6,. + 0
 3013              	TskSys_state:
 3014 0000 00       		.space	1
 3015              		.section	.bss.i.11214,"aw",%nobits
 3016              		.set	.LANCHOR11,. + 0
 3019              	i.11214:
 3020 0000 00       		.space	1
 3021              		.section	.bss.taskOs_InitState.11183,"aw",%nobits
 3022              		.set	.LANCHOR15,. + 0
 3025              	taskOs_InitState.11183:
 3026 0000 00       		.space	1
 3027              		.section	.bss.traverse_start,"aw",%nobits
 3028              		.set	.LANCHOR12,. + 0
 3031              	traverse_start:
 3032 0000 00       		.space	1
 3033              		.section	.rodata.Tsk_Handle,"a",%progbits
 3034              		.align	2
 3035              		.set	.LANCHOR13,. + 0
 3038              	Tsk_Handle:
 3039 0000 00       		.byte	0
ARM GAS  /tmp/ccHlURRu.s 			page 106


 3040 0001 00       		.byte	0
 3041 0002 01       		.byte	1
 3042 0003 00       		.byte	0
 3043 0004 02       		.byte	2
 3044 0005 00       		.byte	0
 3045 0006 01       		.byte	1
 3046 0007 00       		.byte	0
 3047 0008 03       		.byte	3
 3048 0009 00       		.byte	0
 3049 000a 01       		.byte	1
 3050 000b 00       		.byte	0
 3051 000c 02       		.byte	2
 3052 000d 00       		.byte	0
 3053 000e 01       		.byte	1
 3054 000f 00       		.byte	0
 3055 0010 04       		.byte	4
 3056 0011 00       		.byte	0
 3057 0012 01       		.byte	1
 3058 0013 00       		.byte	0
 3059 0014 02       		.byte	2
 3060 0015 00       		.byte	0
 3061 0016 01       		.byte	1
 3062 0017 00       		.byte	0
 3063 0018 03       		.byte	3
 3064 0019 00       		.byte	0
 3065 001a 01       		.byte	1
 3066 001b 00       		.byte	0
 3067 001c 02       		.byte	2
 3068 001d 00       		.byte	0
 3069 001e 01       		.byte	1
 3070 001f 00       		.byte	0
 3071 0020 05       		.byte	5
 3072 0021 00       		.byte	0
 3073 0022 01       		.byte	1
 3074 0023 00       		.byte	0
 3075 0024 02       		.byte	2
 3076 0025 00       		.byte	0
 3077 0026 01       		.byte	1
 3078 0027 00       		.byte	0
 3079 0028 03       		.byte	3
 3080 0029 00       		.byte	0
 3081 002a 01       		.byte	1
 3082 002b 00       		.byte	0
 3083 002c 02       		.byte	2
 3084 002d 00       		.byte	0
 3085 002e 01       		.byte	1
 3086 002f 00       		.byte	0
 3087 0030 04       		.byte	4
 3088 0031 00       		.byte	0
 3089 0032 01       		.byte	1
 3090 0033 00       		.byte	0
 3091 0034 02       		.byte	2
 3092 0035 00       		.byte	0
 3093 0036 01       		.byte	1
 3094 0037 00       		.byte	0
 3095 0038 03       		.byte	3
 3096 0039 00       		.byte	0
ARM GAS  /tmp/ccHlURRu.s 			page 107


 3097 003a 01       		.byte	1
 3098 003b 00       		.byte	0
 3099 003c 02       		.byte	2
 3100 003d 00       		.byte	0
 3101 003e 01       		.byte	1
 3102 003f 00       		.byte	0
 3103 0040 06       		.byte	6
 3104 0041 00       		.byte	0
 3105 0042 01       		.byte	1
 3106 0043 00       		.byte	0
 3107 0044 02       		.byte	2
 3108 0045 00       		.byte	0
 3109 0046 01       		.byte	1
 3110 0047 00       		.byte	0
 3111 0048 03       		.byte	3
 3112 0049 00       		.byte	0
 3113 004a 01       		.byte	1
 3114 004b 00       		.byte	0
 3115 004c 02       		.byte	2
 3116 004d 00       		.byte	0
 3117 004e 01       		.byte	1
 3118 004f 00       		.byte	0
 3119 0050 04       		.byte	4
 3120 0051 00       		.byte	0
 3121 0052 01       		.byte	1
 3122 0053 00       		.byte	0
 3123 0054 02       		.byte	2
 3124 0055 00       		.byte	0
 3125 0056 01       		.byte	1
 3126 0057 00       		.byte	0
 3127 0058 03       		.byte	3
 3128 0059 00       		.byte	0
 3129 005a 01       		.byte	1
 3130 005b 00       		.byte	0
 3131 005c 02       		.byte	2
 3132 005d 00       		.byte	0
 3133 005e 01       		.byte	1
 3134 005f 00       		.byte	0
 3135 0060 05       		.byte	5
 3136 0061 00       		.byte	0
 3137 0062 01       		.byte	1
 3138 0063 00       		.byte	0
 3139 0064 02       		.byte	2
 3140 0065 00       		.byte	0
 3141 0066 01       		.byte	1
 3142 0067 00       		.byte	0
 3143 0068 03       		.byte	3
 3144 0069 00       		.byte	0
 3145 006a 01       		.byte	1
 3146 006b 00       		.byte	0
 3147 006c 02       		.byte	2
 3148 006d 00       		.byte	0
 3149 006e 01       		.byte	1
 3150 006f 00       		.byte	0
 3151 0070 04       		.byte	4
 3152 0071 00       		.byte	0
 3153 0072 01       		.byte	1
ARM GAS  /tmp/ccHlURRu.s 			page 108


 3154 0073 00       		.byte	0
 3155 0074 02       		.byte	2
 3156 0075 00       		.byte	0
 3157 0076 01       		.byte	1
 3158 0077 00       		.byte	0
 3159 0078 03       		.byte	3
 3160 0079 00       		.byte	0
 3161 007a 01       		.byte	1
 3162 007b 00       		.byte	0
 3163 007c 02       		.byte	2
 3164 007d 00       		.byte	0
 3165 007e 01       		.byte	1
 3166 007f 00       		.byte	0
 3167 0080 07       		.byte	7
 3168 0081 00       		.byte	0
 3169 0082 01       		.byte	1
 3170 0083 00       		.byte	0
 3171 0084 02       		.byte	2
 3172 0085 00       		.byte	0
 3173 0086 01       		.byte	1
 3174 0087 00       		.byte	0
 3175 0088 03       		.byte	3
 3176 0089 00       		.byte	0
 3177 008a 01       		.byte	1
 3178 008b 00       		.byte	0
 3179 008c 02       		.byte	2
 3180 008d 00       		.byte	0
 3181 008e 01       		.byte	1
 3182 008f 00       		.byte	0
 3183 0090 04       		.byte	4
 3184 0091 00       		.byte	0
 3185 0092 01       		.byte	1
 3186 0093 00       		.byte	0
 3187 0094 02       		.byte	2
 3188 0095 00       		.byte	0
 3189 0096 01       		.byte	1
 3190 0097 00       		.byte	0
 3191 0098 03       		.byte	3
 3192 0099 00       		.byte	0
 3193 009a 01       		.byte	1
 3194 009b 00       		.byte	0
 3195 009c 02       		.byte	2
 3196 009d 00       		.byte	0
 3197 009e 01       		.byte	1
 3198 009f 00       		.byte	0
 3199 00a0 05       		.byte	5
 3200 00a1 00       		.byte	0
 3201 00a2 01       		.byte	1
 3202 00a3 00       		.byte	0
 3203 00a4 02       		.byte	2
 3204 00a5 00       		.byte	0
 3205 00a6 01       		.byte	1
 3206 00a7 00       		.byte	0
 3207 00a8 03       		.byte	3
 3208 00a9 00       		.byte	0
 3209 00aa 01       		.byte	1
 3210 00ab 00       		.byte	0
ARM GAS  /tmp/ccHlURRu.s 			page 109


 3211 00ac 02       		.byte	2
 3212 00ad 00       		.byte	0
 3213 00ae 01       		.byte	1
 3214 00af 00       		.byte	0
 3215 00b0 04       		.byte	4
 3216 00b1 00       		.byte	0
 3217 00b2 01       		.byte	1
 3218 00b3 00       		.byte	0
 3219 00b4 02       		.byte	2
 3220 00b5 00       		.byte	0
 3221 00b6 01       		.byte	1
 3222 00b7 00       		.byte	0
 3223 00b8 03       		.byte	3
 3224 00b9 00       		.byte	0
 3225 00ba 01       		.byte	1
 3226 00bb 00       		.byte	0
 3227 00bc 02       		.byte	2
 3228 00bd 00       		.byte	0
 3229 00be 01       		.byte	1
 3230 00bf 00       		.byte	0
 3231 00c0 06       		.byte	6
 3232 00c1 00       		.byte	0
 3233 00c2 01       		.byte	1
 3234 00c3 00       		.byte	0
 3235 00c4 02       		.byte	2
 3236 00c5 00       		.byte	0
 3237 00c6 01       		.byte	1
 3238 00c7 00       		.byte	0
 3239 00c8 03       		.byte	3
 3240 00c9 00       		.byte	0
 3241 00ca 01       		.byte	1
 3242 00cb 00       		.byte	0
 3243 00cc 02       		.byte	2
 3244 00cd 00       		.byte	0
 3245 00ce 01       		.byte	1
 3246 00cf 00       		.byte	0
 3247 00d0 04       		.byte	4
 3248 00d1 00       		.byte	0
 3249 00d2 01       		.byte	1
 3250 00d3 00       		.byte	0
 3251 00d4 02       		.byte	2
 3252 00d5 00       		.byte	0
 3253 00d6 01       		.byte	1
 3254 00d7 00       		.byte	0
 3255 00d8 03       		.byte	3
 3256 00d9 00       		.byte	0
 3257 00da 01       		.byte	1
 3258 00db 00       		.byte	0
 3259 00dc 02       		.byte	2
 3260 00dd 00       		.byte	0
 3261 00de 01       		.byte	1
 3262 00df 00       		.byte	0
 3263 00e0 05       		.byte	5
 3264 00e1 00       		.byte	0
 3265 00e2 01       		.byte	1
 3266 00e3 00       		.byte	0
 3267 00e4 02       		.byte	2
ARM GAS  /tmp/ccHlURRu.s 			page 110


 3268 00e5 00       		.byte	0
 3269 00e6 01       		.byte	1
 3270 00e7 00       		.byte	0
 3271 00e8 03       		.byte	3
 3272 00e9 00       		.byte	0
 3273 00ea 01       		.byte	1
 3274 00eb 00       		.byte	0
 3275 00ec 02       		.byte	2
 3276 00ed 00       		.byte	0
 3277 00ee 01       		.byte	1
 3278 00ef 00       		.byte	0
 3279 00f0 04       		.byte	4
 3280 00f1 00       		.byte	0
 3281 00f2 01       		.byte	1
 3282 00f3 00       		.byte	0
 3283 00f4 02       		.byte	2
 3284 00f5 00       		.byte	0
 3285 00f6 01       		.byte	1
 3286 00f7 00       		.byte	0
 3287 00f8 03       		.byte	3
 3288 00f9 00       		.byte	0
 3289 00fa 01       		.byte	1
 3290 00fb 00       		.byte	0
 3291 00fc 02       		.byte	2
 3292 00fd 00       		.byte	0
 3293 00fe 01       		.byte	1
 3294 00ff 00       		.byte	0
 3295              		.text
 3296              	.Letext0:
 3297              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 3298              		.file 4 "/usr/include/newlib/sys/lock.h"
 3299              		.file 5 "/usr/include/newlib/sys/_types.h"
 3300              		.file 6 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 3301              		.file 7 "/usr/include/newlib/sys/reent.h"
 3302              		.file 8 "/usr/include/newlib/sys/_stdint.h"
 3303              		.file 9 "SYS/runtime/runtime.h"
 3304              		.file 10 "/usr/include/newlib/stdlib.h"
 3305              		.file 11 "SYS/data_structure/linked_list.h"
 3306              		.file 12 "SYS/task_manager/task_manager.h"
 3307              		.file 13 "USER/stm32f4xx.h"
 3308              		.file 14 "USER/system_stm32f4xx.h"
 3309              		.file 15 "Bsp/periph_timer.h"
 3310              		.file 16 "SYS/memng/mmu.h"
 3311              		.file 17 "/usr/include/newlib/string.h"
ARM GAS  /tmp/ccHlURRu.s 			page 111


DEFINED SYMBOLS
                            *ABS*:0000000000000000 task_manager.c
     /tmp/ccHlURRu.s:18     .text.Task_Exit:0000000000000000 $t
     /tmp/ccHlURRu.s:24     .text.Task_Exit:0000000000000000 Task_Exit
     /tmp/ccHlURRu.s:39     .text.Task_SetBASEPRI:0000000000000000 $t
     /tmp/ccHlURRu.s:45     .text.Task_SetBASEPRI:0000000000000000 Task_SetBASEPRI
     /tmp/ccHlURRu.s:65     .text.Task_SetReady:0000000000000000 $t
     /tmp/ccHlURRu.s:71     .text.Task_SetReady:0000000000000000 Task_SetReady
     /tmp/ccHlURRu.s:123    .text.Task_SetReady:0000000000000030 $d
     /tmp/ccHlURRu.s:128    .text.Task_ClearBlock:0000000000000000 $t
     /tmp/ccHlURRu.s:134    .text.Task_ClearBlock:0000000000000000 Task_ClearBlock
     /tmp/ccHlURRu.s:184    .text.Task_ClearBlock:0000000000000034 $d
     /tmp/ccHlURRu.s:189    .text.Task_ClearPending:0000000000000000 $t
     /tmp/ccHlURRu.s:195    .text.Task_ClearPending:0000000000000000 Task_ClearPending
     /tmp/ccHlURRu.s:245    .text.Task_ClearPending:0000000000000034 $d
     /tmp/ccHlURRu.s:250    .text.Task_ClearReady:0000000000000000 $t
     /tmp/ccHlURRu.s:256    .text.Task_ClearReady:0000000000000000 Task_ClearReady
     /tmp/ccHlURRu.s:306    .text.Task_ClearReady:0000000000000034 $d
     /tmp/ccHlURRu.s:311    .text.Task_SetPendSVPro:0000000000000000 $t
     /tmp/ccHlURRu.s:317    .text.Task_SetPendSVPro:0000000000000000 Task_SetPendSVPro
     /tmp/ccHlURRu.s:327    *ABS*:00000000e000ed22 NVIC_SYSPRI14
     /tmp/ccHlURRu.s:331    *ABS*:00000000000000ff NVIC_PENDSV_PRI
                            *COM*:0000000000000004 Task_OS_ExpStkBase
     /tmp/ccHlURRu.s:376    .text.Task_PriorityCompare:0000000000000000 $t
     /tmp/ccHlURRu.s:383    .text.Task_PriorityCompare:0000000000000000 Task_PriorityCompare
     /tmp/ccHlURRu.s:493    .text.ReSet_Task_Data:0000000000000000 $t
     /tmp/ccHlURRu.s:499    .text.ReSet_Task_Data:0000000000000000 ReSet_Task_Data
     /tmp/ccHlURRu.s:572    .text.TaskSys_Init:0000000000000000 $t
     /tmp/ccHlURRu.s:578    .text.TaskSys_Init:0000000000000000 TaskSys_Init
     /tmp/ccHlURRu.s:690    .text.TaskSys_Init:000000000000007c $d
                            *COM*:0000000000000100 Task_Ptr
     /tmp/ccHlURRu.s:701    .text.Task_SetStkPtr_Val:0000000000000000 $t
     /tmp/ccHlURRu.s:707    .text.Task_SetStkPtr_Val:0000000000000000 Task_SetStkPtr_Val
     /tmp/ccHlURRu.s:769    .text.Task_SetStkPtr_Val:0000000000000050 $d
     /tmp/ccHlURRu.s:1002   .text.Task_Caller:0000000000000000 Task_Caller
     /tmp/ccHlURRu.s:776    .text.Task_Idle:0000000000000000 $t
     /tmp/ccHlURRu.s:782    .text.Task_Idle:0000000000000000 Task_Idle
     /tmp/ccHlURRu.s:838    .text.Task_Idle:000000000000004c $d
     /tmp/ccHlURRu.s:845    .text.Task_Exec:0000000000000000 $t
     /tmp/ccHlURRu.s:851    .text.Task_Exec:0000000000000000 Task_Exec
     /tmp/ccHlURRu.s:988    .text.Task_Exec:00000000000000d0 $d
     /tmp/ccHlURRu.s:995    .text.Task_Caller:0000000000000000 $t
     /tmp/ccHlURRu.s:1043   .text.Task_Caller:0000000000000028 $d
     /tmp/ccHlURRu.s:1051   .text.Task_CrtList_TraversePoll_callback:0000000000000000 $t
     /tmp/ccHlURRu.s:1057   .text.Task_CrtList_TraversePoll_callback:0000000000000000 Task_CrtList_TraversePoll_callback
     /tmp/ccHlURRu.s:1119   .text.Task_CrtList_TraversePoll_callback:0000000000000034 $d
     /tmp/ccHlURRu.s:1124   .text.Task_Resume_FromBlock:0000000000000000 $t
     /tmp/ccHlURRu.s:1131   .text.Task_Resume_FromBlock:0000000000000000 Task_Resume_FromBlock
     /tmp/ccHlURRu.s:1169   .text.Task_Resume_FromBlock:0000000000000028 $d
                            *COM*:0000000000000008 NxtTsk_TCB
     /tmp/ccHlURRu.s:1175   .text.Task_SetBlock:0000000000000000 $t
     /tmp/ccHlURRu.s:1182   .text.Task_SetBlock:0000000000000000 Task_SetBlock
     /tmp/ccHlURRu.s:1251   .text.Task_SetBlock:0000000000000058 $d
     /tmp/ccHlURRu.s:1258   .text.Task_SetPending:0000000000000000 $t
     /tmp/ccHlURRu.s:1265   .text.Task_SetPending:0000000000000000 Task_SetPending
     /tmp/ccHlURRu.s:1317   .text.Task_SetPending:0000000000000030 $d
     /tmp/ccHlURRu.s:1322   .text.Task_SwitchStack:0000000000000000 $t
ARM GAS  /tmp/ccHlURRu.s 			page 112


     /tmp/ccHlURRu.s:1329   .text.Task_SwitchStack:0000000000000000 Task_SwitchStack
     /tmp/ccHlURRu.s:1345   .text.Task_SwitchStack:0000000000000010 $d
                            *COM*:0000000000000008 CurTsk_TCB
     /tmp/ccHlURRu.s:1351   .text.Task_Get_HighestRank_PndTask:0000000000000000 $t
     /tmp/ccHlURRu.s:1358   .text.Task_Get_HighestRank_PndTask:0000000000000000 Task_Get_HighestRank_PndTask
     /tmp/ccHlURRu.s:1424   .text.Task_Get_HighestRank_PndTask:0000000000000050 $d
     /tmp/ccHlURRu.s:1431   .text.Task_SaveCurProc:0000000000000000 $t
     /tmp/ccHlURRu.s:1438   .text.Task_SaveCurProc:0000000000000000 Task_SaveCurProc
     /tmp/ccHlURRu.s:1492   .text.Task_SaveCurProc:0000000000000024 CurrentTCBConst_Tmp3
     /tmp/ccHlURRu.s:1492   .text.Task_SaveCurProc:0000000000000024 $d
     /tmp/ccHlURRu.s:1501   .text.Task_Load:0000000000000000 $t
     /tmp/ccHlURRu.s:1508   .text.Task_Load:0000000000000000 Task_Load
     /tmp/ccHlURRu.s:1567   .text.Load_FirstTask:0000000000000000 $t
     /tmp/ccHlURRu.s:1574   .text.Load_FirstTask:0000000000000000 Load_FirstTask
     /tmp/ccHlURRu.s:1593   .text.Task_SwitchContext:0000000000000000 $t
     /tmp/ccHlURRu.s:1600   .text.Task_SwitchContext:0000000000000000 Task_SwitchContext
     /tmp/ccHlURRu.s:1718   .text.Task_SwitchContext:000000000000005c CurrentTCBConst_Tmp
     /tmp/ccHlURRu.s:1718   .text.Task_SwitchContext:000000000000005c $d
     /tmp/ccHlURRu.s:1731   .text.Task_Get_HighestRank_RdyTask:0000000000000000 $t
     /tmp/ccHlURRu.s:1738   .text.Task_Get_HighestRank_RdyTask:0000000000000000 Task_Get_HighestRank_RdyTask
     /tmp/ccHlURRu.s:1808   .text.Task_Get_HighestRank_RdyTask:0000000000000050 $d
     /tmp/ccHlURRu.s:1815   .text.Task_SetNextTask_Ptr:0000000000000000 $t
     /tmp/ccHlURRu.s:1822   .text.Task_SetNextTask_Ptr:0000000000000000 Task_SetNextTask_Ptr
     /tmp/ccHlURRu.s:1847   .text.Task_SetNextTask_Ptr:0000000000000014 $d
     /tmp/ccHlURRu.s:1853   .text.Task_TriggerPendSV:0000000000000000 $t
     /tmp/ccHlURRu.s:1860   .text.Task_TriggerPendSV:0000000000000000 Task_TriggerPendSV
     /tmp/ccHlURRu.s:1870   *ABS*:00000000e000ed04 NVIC_INT_CTRL
     /tmp/ccHlURRu.s:1874   *ABS*:0000000010000000 NVIC_PENDSVSET
     /tmp/ccHlURRu.s:1899   .text.Task_Scheduler:0000000000000000 $t
     /tmp/ccHlURRu.s:1906   .text.Task_Scheduler:0000000000000000 Task_Scheduler
     /tmp/ccHlURRu.s:2146   .text.Task_Scheduler:0000000000000148 $d
     /tmp/ccHlURRu.s:2158   .text.Task_Force_TriggerPendSV:0000000000000000 $t
     /tmp/ccHlURRu.s:2165   .text.Task_Force_TriggerPendSV:0000000000000000 Task_Force_TriggerPendSV
     /tmp/ccHlURRu.s:2195   .text.Task_Get_TaskNum:0000000000000000 $t
     /tmp/ccHlURRu.s:2202   .text.Task_Get_TaskNum:0000000000000000 Task_Get_TaskNum
     /tmp/ccHlURRu.s:2216   .text.Task_Get_TaskNum:0000000000000008 $d
     /tmp/ccHlURRu.s:2224   .text.Task_Create:0000000000000000 $t
     /tmp/ccHlURRu.s:2231   .text.Task_Create:0000000000000000 Task_Create
     /tmp/ccHlURRu.s:2499   .text.Task_Create:00000000000001e0 $d
     /tmp/ccHlURRu.s:2511   .text.Task_Remove:0000000000000000 $t
     /tmp/ccHlURRu.s:2518   .text.Task_Remove:0000000000000000 Task_Remove
     /tmp/ccHlURRu.s:2565   .text.Task_Remove:0000000000000030 $d
     /tmp/ccHlURRu.s:2570   .text.TaskSystem_Start:0000000000000000 $t
     /tmp/ccHlURRu.s:2577   .text.TaskSystem_Start:0000000000000000 TaskSystem_Start
     /tmp/ccHlURRu.s:2645   .text.TaskSystem_Start:000000000000005c $d
     /tmp/ccHlURRu.s:2654   .text.Task_SetRunState:0000000000000000 $t
     /tmp/ccHlURRu.s:2661   .text.Task_SetRunState:0000000000000000 Task_SetRunState
     /tmp/ccHlURRu.s:2676   .text.Task_Get_IdleUS:0000000000000000 $t
     /tmp/ccHlURRu.s:2683   .text.Task_Get_IdleUS:0000000000000000 Task_Get_IdleUS
     /tmp/ccHlURRu.s:2697   .text.Task_Get_IdleUS:0000000000000008 $d
     /tmp/ccHlURRu.s:2702   .text.Task_Get_IdleOcupy:0000000000000000 $t
     /tmp/ccHlURRu.s:2709   .text.Task_Get_IdleOcupy:0000000000000000 Task_Get_IdleOcupy
     /tmp/ccHlURRu.s:2723   .text.Task_Get_IdleOcupy:0000000000000008 $d
     /tmp/ccHlURRu.s:2728   .text.TaskSys_Set_State:0000000000000000 $t
     /tmp/ccHlURRu.s:2735   .text.TaskSys_Set_State:0000000000000000 TaskSys_Set_State
     /tmp/ccHlURRu.s:2750   .text.TaskSys_Set_State:0000000000000008 $d
     /tmp/ccHlURRu.s:2755   .text.TaskSys_Get_State:0000000000000000 $t
ARM GAS  /tmp/ccHlURRu.s 			page 113


     /tmp/ccHlURRu.s:2762   .text.TaskSys_Get_State:0000000000000000 TaskSys_Get_State
     /tmp/ccHlURRu.s:2777   .text.TaskSys_Get_State:0000000000000008 $d
     /tmp/ccHlURRu.s:2782   .text.Task_GetInfo_ByIndex:0000000000000000 $t
     /tmp/ccHlURRu.s:2789   .text.Task_GetInfo_ByIndex:0000000000000000 Task_GetInfo_ByIndex
     /tmp/ccHlURRu.s:2803   .text.Task_GetCurrentRunTask:0000000000000000 $t
     /tmp/ccHlURRu.s:2810   .text.Task_GetCurrentRunTask:0000000000000000 Task_GetCurrentRunTask
     /tmp/ccHlURRu.s:2824   .text.Task_GetCurrentRunTask:0000000000000008 $d
     /tmp/ccHlURRu.s:2829   .text.Task_Statistic_Cast:0000000000000000 $t
     /tmp/ccHlURRu.s:2836   .text.Task_Statistic_Cast:0000000000000000 Task_Statistic_Cast
     /tmp/ccHlURRu.s:2868   .text.Task_Statistic_Cast:000000000000001c $d
     /tmp/ccHlURRu.s:2873   .text.Task_GetStackRemain:0000000000000000 $t
     /tmp/ccHlURRu.s:2880   .text.Task_GetStackRemain:0000000000000000 Task_GetStackRemain
     /tmp/ccHlURRu.s:2951   .bss.PndHstTsk_Ptr:0000000000000000 PndHstTsk_Ptr
     /tmp/ccHlURRu.s:2944   .bss.NxtRunTsk_Ptr:0000000000000000 NxtRunTsk_Ptr
     /tmp/ccHlURRu.s:2937   .bss.CurRunTsk_Ptr:0000000000000000 CurRunTsk_Ptr
     /tmp/ccHlURRu.s:2933   .bss.CurRunTsk_Ptr:0000000000000000 $d
     /tmp/ccHlURRu.s:2940   .bss.NxtRunTsk_Ptr:0000000000000000 $d
     /tmp/ccHlURRu.s:2947   .bss.PndHstTsk_Ptr:0000000000000000 $d
     /tmp/ccHlURRu.s:2954   .bss.TaskSys_Idle_Ocupy:0000000000000000 $d
     /tmp/ccHlURRu.s:2958   .bss.TaskSys_Idle_Ocupy:0000000000000000 TaskSys_Idle_Ocupy
     /tmp/ccHlURRu.s:2961   .bss.TaskSys_Idle_US:0000000000000000 $d
     /tmp/ccHlURRu.s:2965   .bss.TaskSys_Idle_US:0000000000000000 TaskSys_Idle_US
     /tmp/ccHlURRu.s:2968   .bss.TaskSys_StartTime:0000000000000000 $d
     /tmp/ccHlURRu.s:2972   .bss.TaskSys_StartTime:0000000000000000 TaskSys_StartTime
     /tmp/ccHlURRu.s:2975   .bss.Task_OS_StkMem:0000000000000000 $d
     /tmp/ccHlURRu.s:2979   .bss.Task_OS_StkMem:0000000000000000 Task_OS_StkMem
     /tmp/ccHlURRu.s:2982   .bss.TskCrt_RegList:0000000000000000 $d
     /tmp/ccHlURRu.s:2986   .bss.TskCrt_RegList:0000000000000000 TskCrt_RegList
     /tmp/ccHlURRu.s:2989   .bss.TskHdl_BlkMap:0000000000000000 $d
     /tmp/ccHlURRu.s:2993   .bss.TskHdl_BlkMap:0000000000000000 TskHdl_BlkMap
     /tmp/ccHlURRu.s:2996   .bss.TskHdl_PndMap:0000000000000000 $d
     /tmp/ccHlURRu.s:3000   .bss.TskHdl_PndMap:0000000000000000 TskHdl_PndMap
     /tmp/ccHlURRu.s:3003   .bss.TskHdl_RdyMap:0000000000000000 $d
     /tmp/ccHlURRu.s:3007   .bss.TskHdl_RdyMap:0000000000000000 TskHdl_RdyMap
     /tmp/ccHlURRu.s:3013   .bss.TskSys_state:0000000000000000 TskSys_state
     /tmp/ccHlURRu.s:3014   .bss.TskSys_state:0000000000000000 $d
     /tmp/ccHlURRu.s:3019   .bss.i.11214:0000000000000000 i.11214
     /tmp/ccHlURRu.s:3020   .bss.i.11214:0000000000000000 $d
     /tmp/ccHlURRu.s:3025   .bss.taskOs_InitState.11183:0000000000000000 taskOs_InitState.11183
     /tmp/ccHlURRu.s:3026   .bss.taskOs_InitState.11183:0000000000000000 $d
     /tmp/ccHlURRu.s:3031   .bss.traverse_start:0000000000000000 traverse_start
     /tmp/ccHlURRu.s:3032   .bss.traverse_start:0000000000000000 $d
     /tmp/ccHlURRu.s:3034   .rodata.Tsk_Handle:0000000000000000 $d
     /tmp/ccHlURRu.s:3038   .rodata.Tsk_Handle:0000000000000000 Tsk_Handle
     /tmp/ccHlURRu.s:1898   .text.Task_TriggerPendSV:000000000000000a $d
     /tmp/ccHlURRu.s:12081  .text.Task_TriggerPendSV:000000000000000c $d
     /tmp/ccHlURRu.s:12081  .text.Task_Load:0000000000000020 $d
     /tmp/ccHlURRu.s:375    .text.Task_SetPendSVPro:0000000000000016 $d
     /tmp/ccHlURRu.s:12081  .text.Task_SetPendSVPro:0000000000000018 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
List_ItemInit
RuntimeObj_Reset
memset
__aeabi_ul2f
Get_CurrentRunningUs
ARM GAS  /tmp/ccHlURRu.s 			page 114


Get_TimeDifference_Between
Get_TargetRunTime
RuntimeObj_CompareWithCurrent
List_traverse
__aeabi_ui2d
__aeabi_ddiv
__aeabi_d2uiz
MMU_Malloc
List_Init
List_Insert_Item
MMU_Free
Runtime_Config
Runtime_Set_start_Callback
Runtime_Set_stop_Callback
Runtime_Set_tick_Callback
Runtime_Start
