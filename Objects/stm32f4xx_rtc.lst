ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"stm32f4xx_rtc.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.RTC_ByteToBcd2,"ax",%progbits
  22              		.align	2
  23              		.thumb
  24              		.thumb_func
  26              	RTC_ByteToBcd2:
  27              	.LFB178:
  28              		.file 1 "FWLIB/src/stm32f4xx_rtc.c"
   1:FWLIB/src/stm32f4xx_rtc.c **** /**
   2:FWLIB/src/stm32f4xx_rtc.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_rtc.c ****   * @file    stm32f4xx_rtc.c
   4:FWLIB/src/stm32f4xx_rtc.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_rtc.c ****   * @version V1.8.0
   6:FWLIB/src/stm32f4xx_rtc.c ****   * @date    04-November-2016
   7:FWLIB/src/stm32f4xx_rtc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:FWLIB/src/stm32f4xx_rtc.c ****   *          functionalities of the Real-Time Clock (RTC) peripheral:
   9:FWLIB/src/stm32f4xx_rtc.c ****   *           + Initialization
  10:FWLIB/src/stm32f4xx_rtc.c ****   *           + Calendar (Time and Date) configuration
  11:FWLIB/src/stm32f4xx_rtc.c ****   *           + Alarms (Alarm A and Alarm B) configuration
  12:FWLIB/src/stm32f4xx_rtc.c ****   *           + WakeUp Timer configuration
  13:FWLIB/src/stm32f4xx_rtc.c ****   *           + Daylight Saving configuration
  14:FWLIB/src/stm32f4xx_rtc.c ****   *           + Output pin Configuration
  15:FWLIB/src/stm32f4xx_rtc.c ****   *           + Coarse digital Calibration configuration
  16:FWLIB/src/stm32f4xx_rtc.c ****   *           + Smooth digital Calibration configuration
  17:FWLIB/src/stm32f4xx_rtc.c ****   *           + TimeStamp configuration
  18:FWLIB/src/stm32f4xx_rtc.c ****   *           + Tampers configuration
  19:FWLIB/src/stm32f4xx_rtc.c ****   *           + Backup Data Registers configuration
  20:FWLIB/src/stm32f4xx_rtc.c ****   *           + Shift control synchronisation    
  21:FWLIB/src/stm32f4xx_rtc.c ****   *           + RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration
  22:FWLIB/src/stm32f4xx_rtc.c ****   *           + Interrupts and flags management
  23:FWLIB/src/stm32f4xx_rtc.c ****   *
  24:FWLIB/src/stm32f4xx_rtc.c **** @verbatim
  25:FWLIB/src/stm32f4xx_rtc.c **** 
  26:FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
  27:FWLIB/src/stm32f4xx_rtc.c ****               ##### Backup Domain Operating Condition #####
  28:FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
  29:FWLIB/src/stm32f4xx_rtc.c ****  [..] The real-time clock (RTC), the RTC backup registers, and the backup 
  30:FWLIB/src/stm32f4xx_rtc.c ****       SRAM (BKP SRAM) can be powered from the VBAT voltage when the main 
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 2


  31:FWLIB/src/stm32f4xx_rtc.c ****       VDD supply is powered off.
  32:FWLIB/src/stm32f4xx_rtc.c ****       To retain the content of the RTC backup registers, backup SRAM, and supply 
  33:FWLIB/src/stm32f4xx_rtc.c ****       the RTC when VDD is turned off, VBAT pin can be connected to an optional 
  34:FWLIB/src/stm32f4xx_rtc.c ****       standby voltage supplied by a battery or by another source.
  35:FWLIB/src/stm32f4xx_rtc.c **** 
  36:FWLIB/src/stm32f4xx_rtc.c ****  [..] To allow the RTC to operate even when the main digital supply (VDD) is turned
  37:FWLIB/src/stm32f4xx_rtc.c ****       off, the VBAT pin powers the following blocks:
  38:FWLIB/src/stm32f4xx_rtc.c ****    (#) The RTC
  39:FWLIB/src/stm32f4xx_rtc.c ****    (#) The LSE oscillator
  40:FWLIB/src/stm32f4xx_rtc.c ****    (#) The backup SRAM when the low power backup regulator is enabled
  41:FWLIB/src/stm32f4xx_rtc.c ****    (#) PC13 to PC15 I/Os, plus PI8 I/O (when available)
  42:FWLIB/src/stm32f4xx_rtc.c ****   
  43:FWLIB/src/stm32f4xx_rtc.c ****  [..] When the backup domain is supplied by VDD (analog switch connected to VDD),
  44:FWLIB/src/stm32f4xx_rtc.c ****       the following functions are available:
  45:FWLIB/src/stm32f4xx_rtc.c ****    (#) PC14 and PC15 can be used as either GPIO or LSE pins
  46:FWLIB/src/stm32f4xx_rtc.c ****    (#) PC13 can be used as a GPIO or as the RTC_AF1 pin
  47:FWLIB/src/stm32f4xx_rtc.c ****    (#) PI8 can be used as a GPIO or as the RTC_AF2 pin
  48:FWLIB/src/stm32f4xx_rtc.c ****   
  49:FWLIB/src/stm32f4xx_rtc.c ****  [..] When the backup domain is supplied by VBAT (analog switch connected to VBAT 
  50:FWLIB/src/stm32f4xx_rtc.c ****       because VDD is not present), the following functions are available:
  51:FWLIB/src/stm32f4xx_rtc.c ****    (#) PC14 and PC15 can be used as LSE pins only
  52:FWLIB/src/stm32f4xx_rtc.c ****    (#) PC13 can be used as the RTC_AF1 pin 
  53:FWLIB/src/stm32f4xx_rtc.c ****    (#) PI8 can be used as the RTC_AF2 pin
  54:FWLIB/src/stm32f4xx_rtc.c ****   
  55:FWLIB/src/stm32f4xx_rtc.c ****             
  56:FWLIB/src/stm32f4xx_rtc.c ****                    ##### Backup Domain Reset #####
  57:FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
  58:FWLIB/src/stm32f4xx_rtc.c ****  [..] The backup domain reset sets all RTC registers and the RCC_BDCR register 
  59:FWLIB/src/stm32f4xx_rtc.c ****       to their reset values. The BKPSRAM is not affected by this reset. The only
  60:FWLIB/src/stm32f4xx_rtc.c ****       way of resetting the BKPSRAM is through the Flash interface by requesting 
  61:FWLIB/src/stm32f4xx_rtc.c ****       a protection level change from 1 to 0.
  62:FWLIB/src/stm32f4xx_rtc.c ****  [..] A backup domain reset is generated when one of the following events occurs:
  63:FWLIB/src/stm32f4xx_rtc.c ****    (#) Software reset, triggered by setting the BDRST bit in the 
  64:FWLIB/src/stm32f4xx_rtc.c ****        RCC Backup domain control register (RCC_BDCR). You can use the
  65:FWLIB/src/stm32f4xx_rtc.c ****        RCC_BackupResetCmd().
  66:FWLIB/src/stm32f4xx_rtc.c ****    (#) VDD or VBAT power on, if both supplies have previously been powered off.
  67:FWLIB/src/stm32f4xx_rtc.c ****   
  68:FWLIB/src/stm32f4xx_rtc.c **** 
  69:FWLIB/src/stm32f4xx_rtc.c ****                    ##### Backup Domain Access #####
  70:FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
  71:FWLIB/src/stm32f4xx_rtc.c ****  [..] After reset, the backup domain (RTC registers, RTC backup data 
  72:FWLIB/src/stm32f4xx_rtc.c ****       registers and backup SRAM) is protected against possible unwanted write 
  73:FWLIB/src/stm32f4xx_rtc.c ****       accesses. 
  74:FWLIB/src/stm32f4xx_rtc.c ****  [..] To enable access to the RTC Domain and RTC registers, proceed as follows:
  75:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the Power Controller (PWR) APB1 interface clock using the
  76:FWLIB/src/stm32f4xx_rtc.c ****        RCC_APB1PeriphClockCmd() function.
  77:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable access to RTC domain using the PWR_BackupAccessCmd() function.
  78:FWLIB/src/stm32f4xx_rtc.c ****    (+) Select the RTC clock source using the RCC_RTCCLKConfig() function.
  79:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable RTC Clock using the RCC_RTCCLKCmd() function.
  80:FWLIB/src/stm32f4xx_rtc.c ****   
  81:FWLIB/src/stm32f4xx_rtc.c ****   
  82:FWLIB/src/stm32f4xx_rtc.c ****                   ##### How to use RTC Driver #####
  83:FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
  84:FWLIB/src/stm32f4xx_rtc.c ****  [..] 
  85:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the RTC domain access (see description in the section above)
  86:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the RTC Prescaler (Asynchronous and Synchronous) and RTC hour 
  87:FWLIB/src/stm32f4xx_rtc.c ****        format using the RTC_Init() function.
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 3


  88:FWLIB/src/stm32f4xx_rtc.c ****   
  89:FWLIB/src/stm32f4xx_rtc.c ****  *** Time and Date configuration ***
  90:FWLIB/src/stm32f4xx_rtc.c ****  ===================================
  91:FWLIB/src/stm32f4xx_rtc.c ****  [..] 
  92:FWLIB/src/stm32f4xx_rtc.c ****    (+) To configure the RTC Calendar (Time and Date) use the RTC_SetTime()
  93:FWLIB/src/stm32f4xx_rtc.c ****        and RTC_SetDate() functions.
  94:FWLIB/src/stm32f4xx_rtc.c ****    (+) To read the RTC Calendar, use the RTC_GetTime() and RTC_GetDate() functions.
  95:FWLIB/src/stm32f4xx_rtc.c ****    (+) Use the RTC_DayLightSavingConfig() function to add or sub one
  96:FWLIB/src/stm32f4xx_rtc.c ****        hour to the RTC Calendar.    
  97:FWLIB/src/stm32f4xx_rtc.c ****   
  98:FWLIB/src/stm32f4xx_rtc.c ****  *** Alarm configuration ***
  99:FWLIB/src/stm32f4xx_rtc.c ****  ===========================
 100:FWLIB/src/stm32f4xx_rtc.c ****  [..]
 101:FWLIB/src/stm32f4xx_rtc.c ****    (+) To configure the RTC Alarm use the RTC_SetAlarm() function.
 102:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the selected RTC Alarm using the RTC_AlarmCmd() function
 103:FWLIB/src/stm32f4xx_rtc.c ****    (+) To read the RTC Alarm, use the RTC_GetAlarm() function.
 104:FWLIB/src/stm32f4xx_rtc.c ****    (+) To read the RTC alarm SubSecond, use the RTC_GetAlarmSubSecond() function.
 105:FWLIB/src/stm32f4xx_rtc.c ****   
 106:FWLIB/src/stm32f4xx_rtc.c ****  *** RTC Wakeup configuration ***
 107:FWLIB/src/stm32f4xx_rtc.c ****  ================================
 108:FWLIB/src/stm32f4xx_rtc.c ****  [..] 
 109:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the RTC Wakeup Clock source use the RTC_WakeUpClockConfig()
 110:FWLIB/src/stm32f4xx_rtc.c ****        function.
 111:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the RTC WakeUp Counter using the RTC_SetWakeUpCounter() function  
 112:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the RTC WakeUp using the RTC_WakeUpCmd() function  
 113:FWLIB/src/stm32f4xx_rtc.c ****    (+) To read the RTC WakeUp Counter register, use the RTC_GetWakeUpCounter() 
 114:FWLIB/src/stm32f4xx_rtc.c ****        function.
 115:FWLIB/src/stm32f4xx_rtc.c ****   
 116:FWLIB/src/stm32f4xx_rtc.c ****  *** Outputs configuration ***
 117:FWLIB/src/stm32f4xx_rtc.c ****  =============================
 118:FWLIB/src/stm32f4xx_rtc.c ****  [..] The RTC has 2 different outputs:
 119:FWLIB/src/stm32f4xx_rtc.c ****    (+) AFO_ALARM: this output is used to manage the RTC Alarm A, Alarm B
 120:FWLIB/src/stm32f4xx_rtc.c ****        and WaKeUp signals. To output the selected RTC signal on RTC_AF1 pin, use the 
 121:FWLIB/src/stm32f4xx_rtc.c ****        RTC_OutputConfig() function.                
 122:FWLIB/src/stm32f4xx_rtc.c ****    (+) AFO_CALIB: this output is 512Hz signal or 1Hz. To output the RTC Clock on 
 123:FWLIB/src/stm32f4xx_rtc.c ****        RTC_AF1 pin, use the RTC_CalibOutputCmd() function.
 124:FWLIB/src/stm32f4xx_rtc.c ****   
 125:FWLIB/src/stm32f4xx_rtc.c ****  *** Smooth digital Calibration configuration ***
 126:FWLIB/src/stm32f4xx_rtc.c ****  ================================================    
 127:FWLIB/src/stm32f4xx_rtc.c ****  [..]
 128:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the RTC Original Digital Calibration Value and the corresponding
 129:FWLIB/src/stm32f4xx_rtc.c ****        calibration cycle period (32s,16s and 8s) using the RTC_SmoothCalibConfig() 
 130:FWLIB/src/stm32f4xx_rtc.c ****        function.
 131:FWLIB/src/stm32f4xx_rtc.c ****   
 132:FWLIB/src/stm32f4xx_rtc.c ****  *** Coarse digital Calibration configuration ***
 133:FWLIB/src/stm32f4xx_rtc.c ****  ================================================
 134:FWLIB/src/stm32f4xx_rtc.c ****  [..]
 135:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the RTC Coarse Calibration Value and the corresponding
 136:FWLIB/src/stm32f4xx_rtc.c ****        sign using the RTC_CoarseCalibConfig() function.
 137:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the RTC Coarse Calibration using the RTC_CoarseCalibCmd() function  
 138:FWLIB/src/stm32f4xx_rtc.c ****   
 139:FWLIB/src/stm32f4xx_rtc.c ****  *** TimeStamp configuration ***
 140:FWLIB/src/stm32f4xx_rtc.c ****  ===============================
 141:FWLIB/src/stm32f4xx_rtc.c ****  [..]
 142:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the RTC_AF1 trigger and enables the RTC TimeStamp using the RTC
 143:FWLIB/src/stm32f4xx_rtc.c ****       _TimeStampCmd() function.
 144:FWLIB/src/stm32f4xx_rtc.c ****    (+) To read the RTC TimeStamp Time and Date register, use the RTC_GetTimeStamp()
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 4


 145:FWLIB/src/stm32f4xx_rtc.c ****        function.
 146:FWLIB/src/stm32f4xx_rtc.c ****    (+) To read the RTC TimeStamp SubSecond register, use the 
 147:FWLIB/src/stm32f4xx_rtc.c ****        RTC_GetTimeStampSubSecond() function.
 148:FWLIB/src/stm32f4xx_rtc.c ****    (+) The TAMPER1 alternate function can be mapped either to RTC_AF1(PC13)
 149:FWLIB/src/stm32f4xx_rtc.c ****        or RTC_AF2 (PI8) depending on the value of TAMP1INSEL bit in 
 150:FWLIB/src/stm32f4xx_rtc.c ****        RTC_TAFCR register. You can use the  RTC_TamperPinSelection() function to
 151:FWLIB/src/stm32f4xx_rtc.c ****        select the corresponding pin.     
 152:FWLIB/src/stm32f4xx_rtc.c ****   
 153:FWLIB/src/stm32f4xx_rtc.c ****  *** Tamper configuration ***
 154:FWLIB/src/stm32f4xx_rtc.c ****  ============================
 155:FWLIB/src/stm32f4xx_rtc.c ****  [..]
 156:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the RTC Tamper using the RTC_TamperCmd() function.
 157:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the Tamper filter count using RTC_TamperFilterConfig()
 158:FWLIB/src/stm32f4xx_rtc.c ****        function. 
 159:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the RTC Tamper trigger Edge or Level according to the Tamper 
 160:FWLIB/src/stm32f4xx_rtc.c ****        filter (if equal to 0 Edge else Level) value using the RTC_TamperConfig() 
 161:FWLIB/src/stm32f4xx_rtc.c ****        function.
 162:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the Tamper sampling frequency using RTC_TamperSamplingFreqConfig()
 163:FWLIB/src/stm32f4xx_rtc.c ****        function.
 164:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the Tamper precharge or discharge duration using 
 165:FWLIB/src/stm32f4xx_rtc.c ****        RTC_TamperPinsPrechargeDuration() function.
 166:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the Tamper Pull-UP using RTC_TamperPullUpDisableCmd() function.
 167:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the Time stamp on Tamper detection event using  
 168:FWLIB/src/stm32f4xx_rtc.c ****        TC_TSOnTamperDetecCmd() function.
 169:FWLIB/src/stm32f4xx_rtc.c ****    (+) The TIMESTAMP alternate function can be mapped to either RTC_AF1 
 170:FWLIB/src/stm32f4xx_rtc.c ****        or RTC_AF2 depending on the value of the TSINSEL bit in the RTC_TAFCR 
 171:FWLIB/src/stm32f4xx_rtc.c ****        register. You can use the  RTC_TimeStampPinSelection() function to select 
 172:FWLIB/src/stm32f4xx_rtc.c ****        the corresponding pin. 
 173:FWLIB/src/stm32f4xx_rtc.c ****   
 174:FWLIB/src/stm32f4xx_rtc.c ****  *** Backup Data Registers configuration ***
 175:FWLIB/src/stm32f4xx_rtc.c ****  ===========================================
 176:FWLIB/src/stm32f4xx_rtc.c ****  [..]
 177:FWLIB/src/stm32f4xx_rtc.c ****    (+) To write to the RTC Backup Data registers, use the RTC_WriteBackupRegister()
 178:FWLIB/src/stm32f4xx_rtc.c ****        function.  
 179:FWLIB/src/stm32f4xx_rtc.c ****    (+) To read the RTC Backup Data registers, use the RTC_ReadBackupRegister()
 180:FWLIB/src/stm32f4xx_rtc.c ****        function.
 181:FWLIB/src/stm32f4xx_rtc.c ****    
 182:FWLIB/src/stm32f4xx_rtc.c **** 
 183:FWLIB/src/stm32f4xx_rtc.c ****                   ##### RTC and low power modes #####
 184:FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
 185:FWLIB/src/stm32f4xx_rtc.c ****  [..] The MCU can be woken up from a low power mode by an RTC alternate 
 186:FWLIB/src/stm32f4xx_rtc.c ****       function.
 187:FWLIB/src/stm32f4xx_rtc.c ****  [..] The RTC alternate functions are the RTC alarms (Alarm A and Alarm B), 
 188:FWLIB/src/stm32f4xx_rtc.c ****       RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
 189:FWLIB/src/stm32f4xx_rtc.c ****       These RTC alternate functions can wake up the system from the Stop and 
 190:FWLIB/src/stm32f4xx_rtc.c ****       Standby lowpower modes.
 191:FWLIB/src/stm32f4xx_rtc.c ****  [..] The system can also wake up from low power modes without depending 
 192:FWLIB/src/stm32f4xx_rtc.c ****       on an external interrupt (Auto-wakeup mode), by using the RTC alarm 
 193:FWLIB/src/stm32f4xx_rtc.c ****       or the RTC wakeup events.
 194:FWLIB/src/stm32f4xx_rtc.c ****  [..] The RTC provides a programmable time base for waking up from the 
 195:FWLIB/src/stm32f4xx_rtc.c ****       Stop or Standby mode at regular intervals.
 196:FWLIB/src/stm32f4xx_rtc.c ****       Wakeup from STOP and Standby modes is possible only when the RTC clock source
 197:FWLIB/src/stm32f4xx_rtc.c ****       is LSE or LSI.
 198:FWLIB/src/stm32f4xx_rtc.c ****   
 199:FWLIB/src/stm32f4xx_rtc.c **** 
 200:FWLIB/src/stm32f4xx_rtc.c ****           ##### Selection of RTC_AF1 alternate functions #####
 201:FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 5


 202:FWLIB/src/stm32f4xx_rtc.c ****  [..] The RTC_AF1 pin (PC13) can be used for the following purposes:
 203:FWLIB/src/stm32f4xx_rtc.c ****    (+) AFO_ALARM output
 204:FWLIB/src/stm32f4xx_rtc.c ****    (+) AFO_CALIB output
 205:FWLIB/src/stm32f4xx_rtc.c ****    (+) AFI_TAMPER
 206:FWLIB/src/stm32f4xx_rtc.c ****    (+) AFI_TIMESTAMP
 207:FWLIB/src/stm32f4xx_rtc.c ****  
 208:FWLIB/src/stm32f4xx_rtc.c ****  [..]   
 209:FWLIB/src/stm32f4xx_rtc.c ****    +-----------------------------------------------------------------------------------------------
 210:FWLIB/src/stm32f4xx_rtc.c ****    |     Pin         |AFO_ALARM |AFO_CALIB |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    |
 211:FWLIB/src/stm32f4xx_rtc.c ****    |  configuration  | ENABLED  | ENABLED  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin |
 212:FWLIB/src/stm32f4xx_rtc.c ****    |  and function   |          |          |           |              | selection  |  selection   |
 213:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 214:FWLIB/src/stm32f4xx_rtc.c ****    |   Alarm out     |          |          |           |              |    Don't   |     Don't    |
 215:FWLIB/src/stm32f4xx_rtc.c ****    |   output OD     |     1    |Don't care|Don't care | Don't care   |    care    |     care     |
 216:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 217:FWLIB/src/stm32f4xx_rtc.c ****    |   Alarm out     |          |          |           |              |    Don't   |     Don't    |
 218:FWLIB/src/stm32f4xx_rtc.c ****    |   output PP     |     1    |Don't care|Don't care | Don't care   |    care    |     care     |
 219:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 220:FWLIB/src/stm32f4xx_rtc.c ****    | Calibration out |          |          |           |              |    Don't   |     Don't    |
 221:FWLIB/src/stm32f4xx_rtc.c ****    |   output PP     |     0    |    1     |Don't care | Don't care   |    care    |     care     |
 222:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 223:FWLIB/src/stm32f4xx_rtc.c ****    |  TAMPER input   |          |          |           |              |            |     Don't    |
 224:FWLIB/src/stm32f4xx_rtc.c ****    |   floating      |     0    |    0     |     1     |      0       |      0     |     care     |
 225:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 226:FWLIB/src/stm32f4xx_rtc.c ****    |  TIMESTAMP and  |          |          |           |              |            |              |
 227:FWLIB/src/stm32f4xx_rtc.c ****    |  TAMPER input   |     0    |    0     |     1     |      1       |      0     |      0       |
 228:FWLIB/src/stm32f4xx_rtc.c ****    |   floating      |          |          |           |              |            |              |
 229:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 230:FWLIB/src/stm32f4xx_rtc.c ****    | TIMESTAMP input |          |          |           |              |    Don't   |              |
 231:FWLIB/src/stm32f4xx_rtc.c ****    |    floating     |     0    |    0     |     0     |      1       |    care    |      0       |
 232:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 233:FWLIB/src/stm32f4xx_rtc.c ****    |  Standard GPIO  |     0    |    0     |     0     |      0       | Don't care |  Don't care  |
 234:FWLIB/src/stm32f4xx_rtc.c ****    +-----------------------------------------------------------------------------------------------
 235:FWLIB/src/stm32f4xx_rtc.c **** 
 236:FWLIB/src/stm32f4xx_rtc.c ****             
 237:FWLIB/src/stm32f4xx_rtc.c ****         #####  Selection of RTC_AF2 alternate functions #####
 238:FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
 239:FWLIB/src/stm32f4xx_rtc.c ****  [..] The RTC_AF2 pin (PI8) can be used for the following purposes:
 240:FWLIB/src/stm32f4xx_rtc.c ****    (+) AFI_TAMPER
 241:FWLIB/src/stm32f4xx_rtc.c ****    (+) AFI_TIMESTAMP
 242:FWLIB/src/stm32f4xx_rtc.c ****  [..]
 243:FWLIB/src/stm32f4xx_rtc.c ****    +---------------------------------------------------------------------------------------+
 244:FWLIB/src/stm32f4xx_rtc.c ****    |     Pin         |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    |ALARMOUTTYPE  |
 245:FWLIB/src/stm32f4xx_rtc.c ****    |  configuration  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin |  AFO_ALARM   |
 246:FWLIB/src/stm32f4xx_rtc.c ****    |  and function   |           |              | selection  |  selection   |Configuration |
 247:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|-----------|--------------|------------|--------------|--------------|
 248:FWLIB/src/stm32f4xx_rtc.c ****    |  TAMPER input   |           |              |            |     Don't    |              |
 249:FWLIB/src/stm32f4xx_rtc.c ****    |   floating      |     1     |      0       |      1     |     care     |  Don't care  |
 250:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|-----------|--------------|------------|--------------|--------------|
 251:FWLIB/src/stm32f4xx_rtc.c ****    |  TIMESTAMP and  |           |              |            |              |              |
 252:FWLIB/src/stm32f4xx_rtc.c ****    |  TAMPER input   |     1     |      1       |      1     |      1       |  Don't care  |
 253:FWLIB/src/stm32f4xx_rtc.c ****    |   floating      |           |              |            |              |              |
 254:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|-----------|--------------|------------|--------------|--------------|
 255:FWLIB/src/stm32f4xx_rtc.c ****    | TIMESTAMP input |           |              |    Don't   |              |              |
 256:FWLIB/src/stm32f4xx_rtc.c ****    |    floating     |     0     |      1       |    care    |      1       |  Don't care  |
 257:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|-----------|--------------|------------|--------------|--------------|
 258:FWLIB/src/stm32f4xx_rtc.c ****    |  Standard GPIO  |     0     |      0       | Don't care |  Don't care  |  Don't care  |
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 6


 259:FWLIB/src/stm32f4xx_rtc.c ****    +---------------------------------------------------------------------------------------+   
 260:FWLIB/src/stm32f4xx_rtc.c ****  
 261:FWLIB/src/stm32f4xx_rtc.c ****      
 262:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
 263:FWLIB/src/stm32f4xx_rtc.c ****   
 264:FWLIB/src/stm32f4xx_rtc.c ****   ******************************************************************************
 265:FWLIB/src/stm32f4xx_rtc.c ****   * @attention
 266:FWLIB/src/stm32f4xx_rtc.c ****   *
 267:FWLIB/src/stm32f4xx_rtc.c ****   * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
 268:FWLIB/src/stm32f4xx_rtc.c ****   *
 269:FWLIB/src/stm32f4xx_rtc.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
 270:FWLIB/src/stm32f4xx_rtc.c ****   * You may not use this file except in compliance with the License.
 271:FWLIB/src/stm32f4xx_rtc.c ****   * You may obtain a copy of the License at:
 272:FWLIB/src/stm32f4xx_rtc.c ****   *
 273:FWLIB/src/stm32f4xx_rtc.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
 274:FWLIB/src/stm32f4xx_rtc.c ****   *
 275:FWLIB/src/stm32f4xx_rtc.c ****   * Unless required by applicable law or agreed to in writing, software 
 276:FWLIB/src/stm32f4xx_rtc.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
 277:FWLIB/src/stm32f4xx_rtc.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 278:FWLIB/src/stm32f4xx_rtc.c ****   * See the License for the specific language governing permissions and
 279:FWLIB/src/stm32f4xx_rtc.c ****   * limitations under the License.
 280:FWLIB/src/stm32f4xx_rtc.c ****   *
 281:FWLIB/src/stm32f4xx_rtc.c ****   ******************************************************************************
 282:FWLIB/src/stm32f4xx_rtc.c ****   */ 
 283:FWLIB/src/stm32f4xx_rtc.c **** 
 284:FWLIB/src/stm32f4xx_rtc.c **** /* Includes ------------------------------------------------------------------*/
 285:FWLIB/src/stm32f4xx_rtc.c **** #include "stm32f4xx_rtc.h"
 286:FWLIB/src/stm32f4xx_rtc.c **** 
 287:FWLIB/src/stm32f4xx_rtc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 288:FWLIB/src/stm32f4xx_rtc.c ****   * @{
 289:FWLIB/src/stm32f4xx_rtc.c ****   */
 290:FWLIB/src/stm32f4xx_rtc.c **** 
 291:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC 
 292:FWLIB/src/stm32f4xx_rtc.c ****   * @brief RTC driver modules
 293:FWLIB/src/stm32f4xx_rtc.c ****   * @{
 294:FWLIB/src/stm32f4xx_rtc.c ****   */
 295:FWLIB/src/stm32f4xx_rtc.c **** 
 296:FWLIB/src/stm32f4xx_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 297:FWLIB/src/stm32f4xx_rtc.c **** /* Private define ------------------------------------------------------------*/
 298:FWLIB/src/stm32f4xx_rtc.c **** 
 299:FWLIB/src/stm32f4xx_rtc.c **** /* Masks Definition */
 300:FWLIB/src/stm32f4xx_rtc.c **** #define RTC_TR_RESERVED_MASK    ((uint32_t)0x007F7F7F)
 301:FWLIB/src/stm32f4xx_rtc.c **** #define RTC_DR_RESERVED_MASK    ((uint32_t)0x00FFFF3F) 
 302:FWLIB/src/stm32f4xx_rtc.c **** #define RTC_INIT_MASK           ((uint32_t)0xFFFFFFFF)  
 303:FWLIB/src/stm32f4xx_rtc.c **** #define RTC_RSF_MASK            ((uint32_t)0xFFFFFF5F)
 304:FWLIB/src/stm32f4xx_rtc.c **** #define RTC_FLAGS_MASK          ((uint32_t)(RTC_FLAG_TSOVF | RTC_FLAG_TSF | RTC_FLAG_WUTF | \
 305:FWLIB/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBF | RTC_FLAG_ALRAF | RTC_FLAG_INITF | \
 306:FWLIB/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_RSF | RTC_FLAG_INITS | RTC_FLAG_WUTWF | \
 307:FWLIB/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBWF | RTC_FLAG_ALRAWF | RTC_FLAG_TAMP1F | \
 308:FWLIB/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_TAMP2F | RTC_FLAG_RECALPF | RTC_FLAG_SHPF))
 309:FWLIB/src/stm32f4xx_rtc.c **** 
 310:FWLIB/src/stm32f4xx_rtc.c **** #define INITMODE_TIMEOUT         ((uint32_t) 0x00010000)
 311:FWLIB/src/stm32f4xx_rtc.c **** #define SYNCHRO_TIMEOUT          ((uint32_t) 0x00020000)
 312:FWLIB/src/stm32f4xx_rtc.c **** #define RECALPF_TIMEOUT          ((uint32_t) 0x00020000)
 313:FWLIB/src/stm32f4xx_rtc.c **** #define SHPF_TIMEOUT             ((uint32_t) 0x00001000)
 314:FWLIB/src/stm32f4xx_rtc.c **** 
 315:FWLIB/src/stm32f4xx_rtc.c **** /* Private macro -------------------------------------------------------------*/
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 7


 316:FWLIB/src/stm32f4xx_rtc.c **** /* Private variables ---------------------------------------------------------*/
 317:FWLIB/src/stm32f4xx_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 318:FWLIB/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value);
 319:FWLIB/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value);
 320:FWLIB/src/stm32f4xx_rtc.c **** 
 321:FWLIB/src/stm32f4xx_rtc.c **** /* Private functions ---------------------------------------------------------*/
 322:FWLIB/src/stm32f4xx_rtc.c **** 
 323:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Private_Functions
 324:FWLIB/src/stm32f4xx_rtc.c ****   * @{
 325:FWLIB/src/stm32f4xx_rtc.c ****   */ 
 326:FWLIB/src/stm32f4xx_rtc.c **** 
 327:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group1 Initialization and Configuration functions
 328:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Initialization and Configuration functions 
 329:FWLIB/src/stm32f4xx_rtc.c ****  *
 330:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
 331:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
 332:FWLIB/src/stm32f4xx_rtc.c ****              ##### Initialization and Configuration functions #####
 333:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
 334:FWLIB/src/stm32f4xx_rtc.c ****  
 335:FWLIB/src/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to initialize and configure the RTC
 336:FWLIB/src/stm32f4xx_rtc.c ****       Prescaler (Synchronous and Asynchronous), RTC Hour format, disable RTC registers
 337:FWLIB/src/stm32f4xx_rtc.c ****       Write protection, enter and exit the RTC initialization mode, RTC registers
 338:FWLIB/src/stm32f4xx_rtc.c ****       synchronization check and reference clock detection enable.
 339:FWLIB/src/stm32f4xx_rtc.c ****   
 340:FWLIB/src/stm32f4xx_rtc.c ****    (#) The RTC Prescaler is programmed to generate the RTC 1Hz time base. It is
 341:FWLIB/src/stm32f4xx_rtc.c ****        split into 2 programmable prescalers to minimize power consumption.
 342:FWLIB/src/stm32f4xx_rtc.c ****        (++) A 7-bit asynchronous prescaler and A 13-bit synchronous prescaler.
 343:FWLIB/src/stm32f4xx_rtc.c ****        (++) When both prescalers are used, it is recommended to configure the 
 344:FWLIB/src/stm32f4xx_rtc.c ****             asynchronous prescaler to a high value to minimize consumption.
 345:FWLIB/src/stm32f4xx_rtc.c **** 
 346:FWLIB/src/stm32f4xx_rtc.c ****    (#) All RTC registers are Write protected. Writing to the RTC registers
 347:FWLIB/src/stm32f4xx_rtc.c ****        is enabled by writing a key into the Write Protection register, RTC_WPR.
 348:FWLIB/src/stm32f4xx_rtc.c **** 
 349:FWLIB/src/stm32f4xx_rtc.c ****    (#) To Configure the RTC Calendar, user application should enter initialization
 350:FWLIB/src/stm32f4xx_rtc.c ****        mode. In this mode, the calendar counter is stopped and its value can be 
 351:FWLIB/src/stm32f4xx_rtc.c ****        updated. When the initialization sequence is complete, the calendar restarts 
 352:FWLIB/src/stm32f4xx_rtc.c ****        counting after 4 RTCCLK cycles.
 353:FWLIB/src/stm32f4xx_rtc.c **** 
 354:FWLIB/src/stm32f4xx_rtc.c ****    (#) To read the calendar through the shadow registers after Calendar initialization,
 355:FWLIB/src/stm32f4xx_rtc.c ****        calendar update or after wakeup from low power modes the software must first 
 356:FWLIB/src/stm32f4xx_rtc.c ****        clear the RSF flag. The software must then wait until it is set again before 
 357:FWLIB/src/stm32f4xx_rtc.c ****        reading the calendar, which means that the calendar registers have been 
 358:FWLIB/src/stm32f4xx_rtc.c ****        correctly copied into the RTC_TR and RTC_DR shadow registers.
 359:FWLIB/src/stm32f4xx_rtc.c ****        The RTC_WaitForSynchro() function implements the above software sequence 
 360:FWLIB/src/stm32f4xx_rtc.c ****        (RSF clear and RSF check).
 361:FWLIB/src/stm32f4xx_rtc.c **** 
 362:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
 363:FWLIB/src/stm32f4xx_rtc.c ****   * @{
 364:FWLIB/src/stm32f4xx_rtc.c ****   */
 365:FWLIB/src/stm32f4xx_rtc.c **** 
 366:FWLIB/src/stm32f4xx_rtc.c **** /**
 367:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Deinitializes the RTC registers to their default reset values.
 368:FWLIB/src/stm32f4xx_rtc.c ****   * @note   This function doesn't reset the RTC Clock source and RTC Backup Data
 369:FWLIB/src/stm32f4xx_rtc.c ****   *         registers.       
 370:FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
 371:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 372:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are deinitialized
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 8


 373:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not deinitialized
 374:FWLIB/src/stm32f4xx_rtc.c ****   */
 375:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_DeInit(void)
 376:FWLIB/src/stm32f4xx_rtc.c **** {
 377:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 378:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 379:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 380:FWLIB/src/stm32f4xx_rtc.c ****   
 381:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 382:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 383:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 384:FWLIB/src/stm32f4xx_rtc.c **** 
 385:FWLIB/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 386:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 387:FWLIB/src/stm32f4xx_rtc.c ****   {
 388:FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
 389:FWLIB/src/stm32f4xx_rtc.c ****   }  
 390:FWLIB/src/stm32f4xx_rtc.c ****   else
 391:FWLIB/src/stm32f4xx_rtc.c ****   {
 392:FWLIB/src/stm32f4xx_rtc.c ****     /* Reset TR, DR and CR registers */
 393:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)0x00000000;
 394:FWLIB/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
 395:FWLIB/src/stm32f4xx_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 396:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)0x00000007;
 397:FWLIB/src/stm32f4xx_rtc.c ****   
 398:FWLIB/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 399:FWLIB/src/stm32f4xx_rtc.c ****     do
 400:FWLIB/src/stm32f4xx_rtc.c ****     {
 401:FWLIB/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 402:FWLIB/src/stm32f4xx_rtc.c ****       wutcounter++;  
 403:FWLIB/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 404:FWLIB/src/stm32f4xx_rtc.c ****     
 405:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 406:FWLIB/src/stm32f4xx_rtc.c ****     {
 407:FWLIB/src/stm32f4xx_rtc.c ****       status = ERROR;
 408:FWLIB/src/stm32f4xx_rtc.c ****     }
 409:FWLIB/src/stm32f4xx_rtc.c ****     else
 410:FWLIB/src/stm32f4xx_rtc.c ****     {
 411:FWLIB/src/stm32f4xx_rtc.c ****       /* Reset all RTC CR register bits */
 412:FWLIB/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)0x00000000;
 413:FWLIB/src/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 414:FWLIB/src/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 415:FWLIB/src/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 416:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 417:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 418:FWLIB/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)0x00000000;
 419:FWLIB/src/stm32f4xx_rtc.c ****       RTC->CALR = (uint32_t)0x00000000;
 420:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMASSR = (uint32_t)0x00000000;
 421:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMBSSR = (uint32_t)0x00000000;
 422:FWLIB/src/stm32f4xx_rtc.c ****       
 423:FWLIB/src/stm32f4xx_rtc.c ****       /* Reset ISR register and exit initialization mode */
 424:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ISR = (uint32_t)0x00000000;
 425:FWLIB/src/stm32f4xx_rtc.c ****       
 426:FWLIB/src/stm32f4xx_rtc.c ****       /* Reset Tamper and alternate functions configuration register */
 427:FWLIB/src/stm32f4xx_rtc.c ****       RTC->TAFCR = 0x00000000;
 428:FWLIB/src/stm32f4xx_rtc.c ****   
 429:FWLIB/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 9


 430:FWLIB/src/stm32f4xx_rtc.c ****       {
 431:FWLIB/src/stm32f4xx_rtc.c ****         status = ERROR;
 432:FWLIB/src/stm32f4xx_rtc.c ****       }
 433:FWLIB/src/stm32f4xx_rtc.c ****       else
 434:FWLIB/src/stm32f4xx_rtc.c ****       {
 435:FWLIB/src/stm32f4xx_rtc.c ****         status = SUCCESS;      
 436:FWLIB/src/stm32f4xx_rtc.c ****       }
 437:FWLIB/src/stm32f4xx_rtc.c ****     }
 438:FWLIB/src/stm32f4xx_rtc.c ****   }
 439:FWLIB/src/stm32f4xx_rtc.c ****   
 440:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 441:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 442:FWLIB/src/stm32f4xx_rtc.c ****   
 443:FWLIB/src/stm32f4xx_rtc.c ****   return status;
 444:FWLIB/src/stm32f4xx_rtc.c **** }
 445:FWLIB/src/stm32f4xx_rtc.c **** 
 446:FWLIB/src/stm32f4xx_rtc.c **** /**
 447:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Initializes the RTC registers according to the specified parameters 
 448:FWLIB/src/stm32f4xx_rtc.c ****   *         in RTC_InitStruct.
 449:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure that contains 
 450:FWLIB/src/stm32f4xx_rtc.c ****   *         the configuration information for the RTC peripheral.
 451:FWLIB/src/stm32f4xx_rtc.c ****   * @note   The RTC Prescaler register is write protected and can be written in 
 452:FWLIB/src/stm32f4xx_rtc.c ****   *         initialization mode only.  
 453:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 454:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are initialized
 455:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not initialized  
 456:FWLIB/src/stm32f4xx_rtc.c ****   */
 457:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
 458:FWLIB/src/stm32f4xx_rtc.c **** {
 459:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 460:FWLIB/src/stm32f4xx_rtc.c ****   
 461:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 462:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
 463:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
 464:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));
 465:FWLIB/src/stm32f4xx_rtc.c **** 
 466:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 467:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 468:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 469:FWLIB/src/stm32f4xx_rtc.c **** 
 470:FWLIB/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 471:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 472:FWLIB/src/stm32f4xx_rtc.c ****   {
 473:FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
 474:FWLIB/src/stm32f4xx_rtc.c ****   } 
 475:FWLIB/src/stm32f4xx_rtc.c ****   else
 476:FWLIB/src/stm32f4xx_rtc.c ****   {
 477:FWLIB/src/stm32f4xx_rtc.c ****     /* Clear RTC CR FMT Bit */
 478:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 479:FWLIB/src/stm32f4xx_rtc.c ****     /* Set RTC_CR register */
 480:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 481:FWLIB/src/stm32f4xx_rtc.c ****   
 482:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the RTC PRER */
 483:FWLIB/src/stm32f4xx_rtc.c ****     RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 484:FWLIB/src/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 485:FWLIB/src/stm32f4xx_rtc.c **** 
 486:FWLIB/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 10


 487:FWLIB/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 488:FWLIB/src/stm32f4xx_rtc.c **** 
 489:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 490:FWLIB/src/stm32f4xx_rtc.c ****   }
 491:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 492:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 493:FWLIB/src/stm32f4xx_rtc.c ****   
 494:FWLIB/src/stm32f4xx_rtc.c ****   return status;
 495:FWLIB/src/stm32f4xx_rtc.c **** }
 496:FWLIB/src/stm32f4xx_rtc.c **** 
 497:FWLIB/src/stm32f4xx_rtc.c **** /**
 498:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_InitStruct member with its default value.
 499:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
 500:FWLIB/src/stm32f4xx_rtc.c ****   *         initialized.
 501:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
 502:FWLIB/src/stm32f4xx_rtc.c ****   */
 503:FWLIB/src/stm32f4xx_rtc.c **** void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
 504:FWLIB/src/stm32f4xx_rtc.c **** {
 505:FWLIB/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_HourFormat member */
 506:FWLIB/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 507:FWLIB/src/stm32f4xx_rtc.c ****     
 508:FWLIB/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_AsynchPrediv member */
 509:FWLIB/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 510:FWLIB/src/stm32f4xx_rtc.c **** 
 511:FWLIB/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_SynchPrediv member */
 512:FWLIB/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 513:FWLIB/src/stm32f4xx_rtc.c **** }
 514:FWLIB/src/stm32f4xx_rtc.c **** 
 515:FWLIB/src/stm32f4xx_rtc.c **** /**
 516:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC registers write protection.
 517:FWLIB/src/stm32f4xx_rtc.c ****   * @note   All the RTC registers are write protected except for RTC_ISR[13:8], 
 518:FWLIB/src/stm32f4xx_rtc.c ****   *         RTC_TAFCR and RTC_BKPxR.
 519:FWLIB/src/stm32f4xx_rtc.c ****   * @note   Writing a wrong key reactivates the write protection.
 520:FWLIB/src/stm32f4xx_rtc.c ****   * @note   The protection mechanism is not affected by system reset.  
 521:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the write protection.
 522:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 523:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
 524:FWLIB/src/stm32f4xx_rtc.c ****   */
 525:FWLIB/src/stm32f4xx_rtc.c **** void RTC_WriteProtectionCmd(FunctionalState NewState)
 526:FWLIB/src/stm32f4xx_rtc.c **** {
 527:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 528:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 529:FWLIB/src/stm32f4xx_rtc.c ****     
 530:FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 531:FWLIB/src/stm32f4xx_rtc.c ****   {
 532:FWLIB/src/stm32f4xx_rtc.c ****     /* Enable the write protection for RTC registers */
 533:FWLIB/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xFF;   
 534:FWLIB/src/stm32f4xx_rtc.c ****   }
 535:FWLIB/src/stm32f4xx_rtc.c ****   else
 536:FWLIB/src/stm32f4xx_rtc.c ****   {
 537:FWLIB/src/stm32f4xx_rtc.c ****     /* Disable the write protection for RTC registers */
 538:FWLIB/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xCA;
 539:FWLIB/src/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 540:FWLIB/src/stm32f4xx_rtc.c ****   }
 541:FWLIB/src/stm32f4xx_rtc.c **** }
 542:FWLIB/src/stm32f4xx_rtc.c **** 
 543:FWLIB/src/stm32f4xx_rtc.c **** /**
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 11


 544:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enters the RTC Initialization mode.
 545:FWLIB/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 546:FWLIB/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.    
 547:FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
 548:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 549:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC is in Init mode
 550:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC is not in Init mode  
 551:FWLIB/src/stm32f4xx_rtc.c ****   */
 552:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_EnterInitMode(void)
 553:FWLIB/src/stm32f4xx_rtc.c **** {
 554:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 555:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 556:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t initstatus = 0x00;
 557:FWLIB/src/stm32f4xx_rtc.c ****      
 558:FWLIB/src/stm32f4xx_rtc.c ****   /* Check if the Initialization mode is set */
 559:FWLIB/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 560:FWLIB/src/stm32f4xx_rtc.c ****   {
 561:FWLIB/src/stm32f4xx_rtc.c ****     /* Set the Initialization mode */
 562:FWLIB/src/stm32f4xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 563:FWLIB/src/stm32f4xx_rtc.c ****     
 564:FWLIB/src/stm32f4xx_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
 565:FWLIB/src/stm32f4xx_rtc.c ****     do
 566:FWLIB/src/stm32f4xx_rtc.c ****     {
 567:FWLIB/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 568:FWLIB/src/stm32f4xx_rtc.c ****       initcounter++;  
 569:FWLIB/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 570:FWLIB/src/stm32f4xx_rtc.c ****     
 571:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 572:FWLIB/src/stm32f4xx_rtc.c ****     {
 573:FWLIB/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 574:FWLIB/src/stm32f4xx_rtc.c ****     }
 575:FWLIB/src/stm32f4xx_rtc.c ****     else
 576:FWLIB/src/stm32f4xx_rtc.c ****     {
 577:FWLIB/src/stm32f4xx_rtc.c ****       status = ERROR;
 578:FWLIB/src/stm32f4xx_rtc.c ****     }        
 579:FWLIB/src/stm32f4xx_rtc.c ****   }
 580:FWLIB/src/stm32f4xx_rtc.c ****   else
 581:FWLIB/src/stm32f4xx_rtc.c ****   {
 582:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;  
 583:FWLIB/src/stm32f4xx_rtc.c ****   } 
 584:FWLIB/src/stm32f4xx_rtc.c ****     
 585:FWLIB/src/stm32f4xx_rtc.c ****   return (status);  
 586:FWLIB/src/stm32f4xx_rtc.c **** }
 587:FWLIB/src/stm32f4xx_rtc.c **** 
 588:FWLIB/src/stm32f4xx_rtc.c **** /**
 589:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Exits the RTC Initialization mode.
 590:FWLIB/src/stm32f4xx_rtc.c ****   * @note   When the initialization sequence is complete, the calendar restarts 
 591:FWLIB/src/stm32f4xx_rtc.c ****   *         counting after 4 RTCCLK cycles.  
 592:FWLIB/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 593:FWLIB/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
 594:FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
 595:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
 596:FWLIB/src/stm32f4xx_rtc.c ****   */
 597:FWLIB/src/stm32f4xx_rtc.c **** void RTC_ExitInitMode(void)
 598:FWLIB/src/stm32f4xx_rtc.c **** { 
 599:FWLIB/src/stm32f4xx_rtc.c ****   /* Exit Initialization mode */
 600:FWLIB/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 12


 601:FWLIB/src/stm32f4xx_rtc.c **** }
 602:FWLIB/src/stm32f4xx_rtc.c **** 
 603:FWLIB/src/stm32f4xx_rtc.c **** /**
 604:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are 
 605:FWLIB/src/stm32f4xx_rtc.c ****   *         synchronized with RTC APB clock.
 606:FWLIB/src/stm32f4xx_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the 
 607:FWLIB/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function. 
 608:FWLIB/src/stm32f4xx_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar 
 609:FWLIB/src/stm32f4xx_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes 
 610:FWLIB/src/stm32f4xx_rtc.c ****   *         the software must first clear the RSF flag. 
 611:FWLIB/src/stm32f4xx_rtc.c ****   *         The software must then wait until it is set again before reading 
 612:FWLIB/src/stm32f4xx_rtc.c ****   *         the calendar, which means that the calendar registers have been 
 613:FWLIB/src/stm32f4xx_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
 614:FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
 615:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 616:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are synchronised
 617:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not synchronised
 618:FWLIB/src/stm32f4xx_rtc.c ****   */
 619:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WaitForSynchro(void)
 620:FWLIB/src/stm32f4xx_rtc.c **** {
 621:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 622:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 623:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t synchrostatus = 0x00;
 624:FWLIB/src/stm32f4xx_rtc.c **** 
 625:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 626:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 627:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 628:FWLIB/src/stm32f4xx_rtc.c ****     
 629:FWLIB/src/stm32f4xx_rtc.c ****   /* Clear RSF flag */
 630:FWLIB/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 631:FWLIB/src/stm32f4xx_rtc.c ****     
 632:FWLIB/src/stm32f4xx_rtc.c ****   /* Wait the registers to be synchronised */
 633:FWLIB/src/stm32f4xx_rtc.c ****   do
 634:FWLIB/src/stm32f4xx_rtc.c ****   {
 635:FWLIB/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 636:FWLIB/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 637:FWLIB/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 638:FWLIB/src/stm32f4xx_rtc.c ****     
 639:FWLIB/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 640:FWLIB/src/stm32f4xx_rtc.c ****   {
 641:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 642:FWLIB/src/stm32f4xx_rtc.c ****   }
 643:FWLIB/src/stm32f4xx_rtc.c ****   else
 644:FWLIB/src/stm32f4xx_rtc.c ****   {
 645:FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
 646:FWLIB/src/stm32f4xx_rtc.c ****   }        
 647:FWLIB/src/stm32f4xx_rtc.c **** 
 648:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 649:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 650:FWLIB/src/stm32f4xx_rtc.c ****     
 651:FWLIB/src/stm32f4xx_rtc.c ****   return (status); 
 652:FWLIB/src/stm32f4xx_rtc.c **** }
 653:FWLIB/src/stm32f4xx_rtc.c **** 
 654:FWLIB/src/stm32f4xx_rtc.c **** /**
 655:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC reference clock detection.
 656:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the RTC reference clock.
 657:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 13


 658:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 659:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC reference clock detection is enabled
 660:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC reference clock detection is disabled  
 661:FWLIB/src/stm32f4xx_rtc.c ****   */
 662:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
 663:FWLIB/src/stm32f4xx_rtc.c **** { 
 664:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 665:FWLIB/src/stm32f4xx_rtc.c ****   
 666:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 667:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 668:FWLIB/src/stm32f4xx_rtc.c ****   
 669:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 670:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 671:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 672:FWLIB/src/stm32f4xx_rtc.c ****     
 673:FWLIB/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 674:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 675:FWLIB/src/stm32f4xx_rtc.c ****   {
 676:FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
 677:FWLIB/src/stm32f4xx_rtc.c ****   } 
 678:FWLIB/src/stm32f4xx_rtc.c ****   else
 679:FWLIB/src/stm32f4xx_rtc.c ****   {  
 680:FWLIB/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 681:FWLIB/src/stm32f4xx_rtc.c ****     {
 682:FWLIB/src/stm32f4xx_rtc.c ****       /* Enable the RTC reference clock detection */
 683:FWLIB/src/stm32f4xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;   
 684:FWLIB/src/stm32f4xx_rtc.c ****     }
 685:FWLIB/src/stm32f4xx_rtc.c ****     else
 686:FWLIB/src/stm32f4xx_rtc.c ****     {
 687:FWLIB/src/stm32f4xx_rtc.c ****       /* Disable the RTC reference clock detection */
 688:FWLIB/src/stm32f4xx_rtc.c ****       RTC->CR &= ~RTC_CR_REFCKON;    
 689:FWLIB/src/stm32f4xx_rtc.c ****     }
 690:FWLIB/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 691:FWLIB/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 692:FWLIB/src/stm32f4xx_rtc.c ****     
 693:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 694:FWLIB/src/stm32f4xx_rtc.c ****   }
 695:FWLIB/src/stm32f4xx_rtc.c ****   
 696:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 697:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 698:FWLIB/src/stm32f4xx_rtc.c ****   
 699:FWLIB/src/stm32f4xx_rtc.c ****   return status; 
 700:FWLIB/src/stm32f4xx_rtc.c **** }
 701:FWLIB/src/stm32f4xx_rtc.c **** 
 702:FWLIB/src/stm32f4xx_rtc.c **** /**
 703:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Bypass Shadow feature.
 704:FWLIB/src/stm32f4xx_rtc.c ****   * @note   When the Bypass Shadow is enabled the calendar value are taken 
 705:FWLIB/src/stm32f4xx_rtc.c ****   *         directly from the Calendar counter.
 706:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Bypass Shadow feature.
 707:FWLIB/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
 708:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
 709:FWLIB/src/stm32f4xx_rtc.c **** */
 710:FWLIB/src/stm32f4xx_rtc.c **** void RTC_BypassShadowCmd(FunctionalState NewState)
 711:FWLIB/src/stm32f4xx_rtc.c **** {
 712:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 713:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 714:FWLIB/src/stm32f4xx_rtc.c **** 
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 14


 715:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 716:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 717:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 718:FWLIB/src/stm32f4xx_rtc.c ****   
 719:FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 720:FWLIB/src/stm32f4xx_rtc.c ****   {
 721:FWLIB/src/stm32f4xx_rtc.c ****     /* Set the BYPSHAD bit */
 722:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 723:FWLIB/src/stm32f4xx_rtc.c ****   }
 724:FWLIB/src/stm32f4xx_rtc.c ****   else
 725:FWLIB/src/stm32f4xx_rtc.c ****   {
 726:FWLIB/src/stm32f4xx_rtc.c ****     /* Reset the BYPSHAD bit */
 727:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 728:FWLIB/src/stm32f4xx_rtc.c ****   }
 729:FWLIB/src/stm32f4xx_rtc.c **** 
 730:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 731:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 732:FWLIB/src/stm32f4xx_rtc.c **** }
 733:FWLIB/src/stm32f4xx_rtc.c **** 
 734:FWLIB/src/stm32f4xx_rtc.c **** /**
 735:FWLIB/src/stm32f4xx_rtc.c ****   * @}
 736:FWLIB/src/stm32f4xx_rtc.c ****   */
 737:FWLIB/src/stm32f4xx_rtc.c **** 
 738:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group2 Time and Date configuration functions
 739:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Time and Date configuration functions 
 740:FWLIB/src/stm32f4xx_rtc.c ****  *
 741:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
 742:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
 743:FWLIB/src/stm32f4xx_rtc.c ****                  ##### Time and Date configuration functions #####
 744:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
 745:FWLIB/src/stm32f4xx_rtc.c ****  
 746:FWLIB/src/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to program and read the RTC Calendar
 747:FWLIB/src/stm32f4xx_rtc.c ****       (Time and Date).
 748:FWLIB/src/stm32f4xx_rtc.c **** 
 749:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
 750:FWLIB/src/stm32f4xx_rtc.c ****   * @{
 751:FWLIB/src/stm32f4xx_rtc.c ****   */
 752:FWLIB/src/stm32f4xx_rtc.c **** 
 753:FWLIB/src/stm32f4xx_rtc.c **** /**
 754:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current time.
 755:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 756:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 757:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 758:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 759:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that contains 
 760:FWLIB/src/stm32f4xx_rtc.c ****   *                        the time configuration information for the RTC.     
 761:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 762:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Time register is configured
 763:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Time register is not configured
 764:FWLIB/src/stm32f4xx_rtc.c ****   */
 765:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 766:FWLIB/src/stm32f4xx_rtc.c **** {
 767:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 768:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 769:FWLIB/src/stm32f4xx_rtc.c ****     
 770:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 771:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 15


 772:FWLIB/src/stm32f4xx_rtc.c ****   
 773:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 774:FWLIB/src/stm32f4xx_rtc.c ****   {
 775:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 776:FWLIB/src/stm32f4xx_rtc.c ****     {
 777:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
 778:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
 779:FWLIB/src/stm32f4xx_rtc.c ****     } 
 780:FWLIB/src/stm32f4xx_rtc.c ****     else
 781:FWLIB/src/stm32f4xx_rtc.c ****     {
 782:FWLIB/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 783:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 784:FWLIB/src/stm32f4xx_rtc.c ****     }
 785:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
 786:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
 787:FWLIB/src/stm32f4xx_rtc.c ****   }
 788:FWLIB/src/stm32f4xx_rtc.c ****   else
 789:FWLIB/src/stm32f4xx_rtc.c ****   {
 790:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 791:FWLIB/src/stm32f4xx_rtc.c ****     {
 792:FWLIB/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 793:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 794:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
 795:FWLIB/src/stm32f4xx_rtc.c ****     } 
 796:FWLIB/src/stm32f4xx_rtc.c ****     else
 797:FWLIB/src/stm32f4xx_rtc.c ****     {
 798:FWLIB/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 799:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 800:FWLIB/src/stm32f4xx_rtc.c ****     }
 801:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
 802:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
 803:FWLIB/src/stm32f4xx_rtc.c ****   }
 804:FWLIB/src/stm32f4xx_rtc.c ****   
 805:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 806:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 807:FWLIB/src/stm32f4xx_rtc.c ****   {
 808:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 809:FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 810:FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 811:FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 812:FWLIB/src/stm32f4xx_rtc.c ****   }  
 813:FWLIB/src/stm32f4xx_rtc.c ****   else
 814:FWLIB/src/stm32f4xx_rtc.c ****   {
 815:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 816:FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 817:FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 818:FWLIB/src/stm32f4xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 819:FWLIB/src/stm32f4xx_rtc.c ****   }  
 820:FWLIB/src/stm32f4xx_rtc.c **** 
 821:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 822:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 823:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 824:FWLIB/src/stm32f4xx_rtc.c **** 
 825:FWLIB/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 826:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 827:FWLIB/src/stm32f4xx_rtc.c ****   {
 828:FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 16


 829:FWLIB/src/stm32f4xx_rtc.c ****   } 
 830:FWLIB/src/stm32f4xx_rtc.c ****   else
 831:FWLIB/src/stm32f4xx_rtc.c ****   {
 832:FWLIB/src/stm32f4xx_rtc.c ****     /* Set the RTC_TR register */
 833:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 834:FWLIB/src/stm32f4xx_rtc.c **** 
 835:FWLIB/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 836:FWLIB/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 837:FWLIB/src/stm32f4xx_rtc.c **** 
 838:FWLIB/src/stm32f4xx_rtc.c ****     /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 839:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 840:FWLIB/src/stm32f4xx_rtc.c ****     {
 841:FWLIB/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 842:FWLIB/src/stm32f4xx_rtc.c ****     {
 843:FWLIB/src/stm32f4xx_rtc.c ****       status = ERROR;
 844:FWLIB/src/stm32f4xx_rtc.c ****     }
 845:FWLIB/src/stm32f4xx_rtc.c ****     else
 846:FWLIB/src/stm32f4xx_rtc.c ****     {
 847:FWLIB/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 848:FWLIB/src/stm32f4xx_rtc.c ****     }
 849:FWLIB/src/stm32f4xx_rtc.c ****   }
 850:FWLIB/src/stm32f4xx_rtc.c ****     else
 851:FWLIB/src/stm32f4xx_rtc.c ****     {
 852:FWLIB/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 853:FWLIB/src/stm32f4xx_rtc.c ****     }
 854:FWLIB/src/stm32f4xx_rtc.c ****   }
 855:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 856:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 857:FWLIB/src/stm32f4xx_rtc.c ****     
 858:FWLIB/src/stm32f4xx_rtc.c ****   return status;
 859:FWLIB/src/stm32f4xx_rtc.c **** }
 860:FWLIB/src/stm32f4xx_rtc.c **** 
 861:FWLIB/src/stm32f4xx_rtc.c **** /**
 862:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_TimeStruct member with its default value
 863:FWLIB/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00min:00sec).
 864:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
 865:FWLIB/src/stm32f4xx_rtc.c ****   *         initialized.
 866:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
 867:FWLIB/src/stm32f4xx_rtc.c ****   */
 868:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
 869:FWLIB/src/stm32f4xx_rtc.c **** {
 870:FWLIB/src/stm32f4xx_rtc.c ****   /* Time = 00h:00min:00sec */
 871:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 872:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 873:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 874:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 875:FWLIB/src/stm32f4xx_rtc.c **** }
 876:FWLIB/src/stm32f4xx_rtc.c **** 
 877:FWLIB/src/stm32f4xx_rtc.c **** /**
 878:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current Time.
 879:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
 880:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 881:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 882:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 883:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
 884:FWLIB/src/stm32f4xx_rtc.c ****   *                        contain the returned current time configuration.     
 885:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 17


 886:FWLIB/src/stm32f4xx_rtc.c ****   */
 887:FWLIB/src/stm32f4xx_rtc.c **** void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 888:FWLIB/src/stm32f4xx_rtc.c **** {
 889:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 890:FWLIB/src/stm32f4xx_rtc.c **** 
 891:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 892:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 893:FWLIB/src/stm32f4xx_rtc.c **** 
 894:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
 895:FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 896:FWLIB/src/stm32f4xx_rtc.c ****   
 897:FWLIB/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
 898:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 899:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 900:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 901:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 902:FWLIB/src/stm32f4xx_rtc.c **** 
 903:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 904:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 905:FWLIB/src/stm32f4xx_rtc.c ****   {
 906:FWLIB/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
 907:FWLIB/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 908:FWLIB/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 909:FWLIB/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 910:FWLIB/src/stm32f4xx_rtc.c ****   }
 911:FWLIB/src/stm32f4xx_rtc.c **** }
 912:FWLIB/src/stm32f4xx_rtc.c **** 
 913:FWLIB/src/stm32f4xx_rtc.c **** /**
 914:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC current Calendar Sub seconds value.
 915:FWLIB/src/stm32f4xx_rtc.c ****   * @note   This function freeze the Time and Date registers after reading the 
 916:FWLIB/src/stm32f4xx_rtc.c ****   *         SSR register.
 917:FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
 918:FWLIB/src/stm32f4xx_rtc.c ****   * @retval RTC current Calendar Sub seconds value.
 919:FWLIB/src/stm32f4xx_rtc.c ****   */
 920:FWLIB/src/stm32f4xx_rtc.c **** uint32_t RTC_GetSubSecond(void)
 921:FWLIB/src/stm32f4xx_rtc.c **** {
 922:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 923:FWLIB/src/stm32f4xx_rtc.c ****   
 924:FWLIB/src/stm32f4xx_rtc.c ****   /* Get sub seconds values from the correspondent registers*/
 925:FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->SSR);
 926:FWLIB/src/stm32f4xx_rtc.c ****   
 927:FWLIB/src/stm32f4xx_rtc.c ****   /* Read DR register to unfroze calendar registers */
 928:FWLIB/src/stm32f4xx_rtc.c ****   (void) (RTC->DR);
 929:FWLIB/src/stm32f4xx_rtc.c ****   
 930:FWLIB/src/stm32f4xx_rtc.c ****   return (tmpreg);
 931:FWLIB/src/stm32f4xx_rtc.c **** }
 932:FWLIB/src/stm32f4xx_rtc.c **** 
 933:FWLIB/src/stm32f4xx_rtc.c **** /**
 934:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current date.
 935:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 936:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 937:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 938:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 939:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure that contains 
 940:FWLIB/src/stm32f4xx_rtc.c ****   *                         the date configuration information for the RTC.
 941:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 942:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Date register is configured
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 18


 943:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Date register is not configured
 944:FWLIB/src/stm32f4xx_rtc.c ****   */
 945:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
 946:FWLIB/src/stm32f4xx_rtc.c **** {
 947:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 948:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 949:FWLIB/src/stm32f4xx_rtc.c ****   
 950:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 951:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 952:FWLIB/src/stm32f4xx_rtc.c **** 
 953:FWLIB/src/stm32f4xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 954:FWLIB/src/stm32f4xx_rtc.c ****   {
 955:FWLIB/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 956:FWLIB/src/stm32f4xx_rtc.c ****   }  
 957:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 958:FWLIB/src/stm32f4xx_rtc.c ****   {
 959:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_DateStruct->RTC_Year));
 960:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_DateStruct->RTC_Month));
 961:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
 962:FWLIB/src/stm32f4xx_rtc.c ****   }
 963:FWLIB/src/stm32f4xx_rtc.c ****   else
 964:FWLIB/src/stm32f4xx_rtc.c ****   {
 965:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
 966:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 967:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(tmpreg));
 968:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 969:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(tmpreg));
 970:FWLIB/src/stm32f4xx_rtc.c ****   }
 971:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));
 972:FWLIB/src/stm32f4xx_rtc.c **** 
 973:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 974:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 975:FWLIB/src/stm32f4xx_rtc.c ****   {
 976:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 977:FWLIB/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 978:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 979:FWLIB/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 980:FWLIB/src/stm32f4xx_rtc.c ****   }  
 981:FWLIB/src/stm32f4xx_rtc.c ****   else
 982:FWLIB/src/stm32f4xx_rtc.c ****   {
 983:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 984:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 985:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 986:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 987:FWLIB/src/stm32f4xx_rtc.c ****   }
 988:FWLIB/src/stm32f4xx_rtc.c **** 
 989:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 990:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 991:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 992:FWLIB/src/stm32f4xx_rtc.c **** 
 993:FWLIB/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 994:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 995:FWLIB/src/stm32f4xx_rtc.c ****   {
 996:FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
 997:FWLIB/src/stm32f4xx_rtc.c ****   } 
 998:FWLIB/src/stm32f4xx_rtc.c ****   else
 999:FWLIB/src/stm32f4xx_rtc.c ****   {
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 19


1000:FWLIB/src/stm32f4xx_rtc.c ****     /* Set the RTC_DR register */
1001:FWLIB/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
1002:FWLIB/src/stm32f4xx_rtc.c **** 
1003:FWLIB/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1004:FWLIB/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
1005:FWLIB/src/stm32f4xx_rtc.c **** 
1006:FWLIB/src/stm32f4xx_rtc.c ****     /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
1007:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
1008:FWLIB/src/stm32f4xx_rtc.c ****     {
1009:FWLIB/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
1010:FWLIB/src/stm32f4xx_rtc.c ****     {
1011:FWLIB/src/stm32f4xx_rtc.c ****       status = ERROR;
1012:FWLIB/src/stm32f4xx_rtc.c ****     }
1013:FWLIB/src/stm32f4xx_rtc.c ****     else
1014:FWLIB/src/stm32f4xx_rtc.c ****     {
1015:FWLIB/src/stm32f4xx_rtc.c ****       status = SUCCESS;
1016:FWLIB/src/stm32f4xx_rtc.c ****     }
1017:FWLIB/src/stm32f4xx_rtc.c ****   }
1018:FWLIB/src/stm32f4xx_rtc.c ****     else
1019:FWLIB/src/stm32f4xx_rtc.c ****     {
1020:FWLIB/src/stm32f4xx_rtc.c ****       status = SUCCESS;
1021:FWLIB/src/stm32f4xx_rtc.c ****     }
1022:FWLIB/src/stm32f4xx_rtc.c ****   }
1023:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1024:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
1025:FWLIB/src/stm32f4xx_rtc.c ****   
1026:FWLIB/src/stm32f4xx_rtc.c ****   return status;
1027:FWLIB/src/stm32f4xx_rtc.c **** }
1028:FWLIB/src/stm32f4xx_rtc.c **** 
1029:FWLIB/src/stm32f4xx_rtc.c **** /**
1030:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_DateStruct member with its default value
1031:FWLIB/src/stm32f4xx_rtc.c ****   *         (Monday, January 01 xx00).
1032:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
1033:FWLIB/src/stm32f4xx_rtc.c ****   *         initialized.
1034:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1035:FWLIB/src/stm32f4xx_rtc.c ****   */
1036:FWLIB/src/stm32f4xx_rtc.c **** void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
1037:FWLIB/src/stm32f4xx_rtc.c **** {
1038:FWLIB/src/stm32f4xx_rtc.c ****   /* Monday, January 01 xx00 */
1039:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
1040:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
1041:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
1042:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
1043:FWLIB/src/stm32f4xx_rtc.c **** }
1044:FWLIB/src/stm32f4xx_rtc.c **** 
1045:FWLIB/src/stm32f4xx_rtc.c **** /**
1046:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current date. 
1047:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1048:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1049:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1050:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1051:FWLIB/src/stm32f4xx_rtc.c ****   * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
1052:FWLIB/src/stm32f4xx_rtc.c ****   *                        contain the returned current date configuration.     
1053:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1054:FWLIB/src/stm32f4xx_rtc.c ****   */
1055:FWLIB/src/stm32f4xx_rtc.c **** void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
1056:FWLIB/src/stm32f4xx_rtc.c **** {
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 20


1057:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1058:FWLIB/src/stm32f4xx_rtc.c **** 
1059:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1060:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1061:FWLIB/src/stm32f4xx_rtc.c ****   
1062:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
1063:FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
1064:FWLIB/src/stm32f4xx_rtc.c **** 
1065:FWLIB/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
1066:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
1067:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
1068:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
1069:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
1070:FWLIB/src/stm32f4xx_rtc.c **** 
1071:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1072:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1073:FWLIB/src/stm32f4xx_rtc.c ****   {
1074:FWLIB/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
1075:FWLIB/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
1076:FWLIB/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
1077:FWLIB/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
1078:FWLIB/src/stm32f4xx_rtc.c ****   }
1079:FWLIB/src/stm32f4xx_rtc.c **** }
1080:FWLIB/src/stm32f4xx_rtc.c **** 
1081:FWLIB/src/stm32f4xx_rtc.c **** /**
1082:FWLIB/src/stm32f4xx_rtc.c ****   * @}
1083:FWLIB/src/stm32f4xx_rtc.c ****   */
1084:FWLIB/src/stm32f4xx_rtc.c **** 
1085:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group3 Alarms configuration functions
1086:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Alarms (Alarm A and Alarm B) configuration functions 
1087:FWLIB/src/stm32f4xx_rtc.c ****  *
1088:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
1089:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
1090:FWLIB/src/stm32f4xx_rtc.c ****          ##### Alarms A and B configuration functions #####
1091:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
1092:FWLIB/src/stm32f4xx_rtc.c ****  
1093:FWLIB/src/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to program and read the RTC Alarms.
1094:FWLIB/src/stm32f4xx_rtc.c **** 
1095:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
1096:FWLIB/src/stm32f4xx_rtc.c ****   * @{
1097:FWLIB/src/stm32f4xx_rtc.c ****   */
1098:FWLIB/src/stm32f4xx_rtc.c **** 
1099:FWLIB/src/stm32f4xx_rtc.c **** /**
1100:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Set the specified RTC Alarm.
1101:FWLIB/src/stm32f4xx_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1102:FWLIB/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_AlarmCmd(DISABLE)).    
1103:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1104:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1105:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1106:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1107:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1108:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1109:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1110:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1111:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
1112:FWLIB/src/stm32f4xx_rtc.c ****   *                          contains the alarm configuration parameters.     
1113:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 21


1114:FWLIB/src/stm32f4xx_rtc.c ****   */
1115:FWLIB/src/stm32f4xx_rtc.c **** void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1116:FWLIB/src/stm32f4xx_rtc.c **** {
1117:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1118:FWLIB/src/stm32f4xx_rtc.c ****   
1119:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1120:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1121:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1122:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
1123:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));
1124:FWLIB/src/stm32f4xx_rtc.c **** 
1125:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1126:FWLIB/src/stm32f4xx_rtc.c ****   {
1127:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
1128:FWLIB/src/stm32f4xx_rtc.c ****     {
1129:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1130:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1131:FWLIB/src/stm32f4xx_rtc.c ****     } 
1132:FWLIB/src/stm32f4xx_rtc.c ****     else
1133:FWLIB/src/stm32f4xx_rtc.c ****     {
1134:FWLIB/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
1135:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1136:FWLIB/src/stm32f4xx_rtc.c ****     }
1137:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes));
1138:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds));
1139:FWLIB/src/stm32f4xx_rtc.c ****     
1140:FWLIB/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1141:FWLIB/src/stm32f4xx_rtc.c ****     {
1142:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1143:FWLIB/src/stm32f4xx_rtc.c ****     }
1144:FWLIB/src/stm32f4xx_rtc.c ****     else
1145:FWLIB/src/stm32f4xx_rtc.c ****     {
1146:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1147:FWLIB/src/stm32f4xx_rtc.c ****     }
1148:FWLIB/src/stm32f4xx_rtc.c ****   }
1149:FWLIB/src/stm32f4xx_rtc.c ****   else
1150:FWLIB/src/stm32f4xx_rtc.c ****   {
1151:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
1152:FWLIB/src/stm32f4xx_rtc.c ****     {
1153:FWLIB/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
1154:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
1155:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1156:FWLIB/src/stm32f4xx_rtc.c ****     } 
1157:FWLIB/src/stm32f4xx_rtc.c ****     else
1158:FWLIB/src/stm32f4xx_rtc.c ****     {
1159:FWLIB/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
1160:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
1161:FWLIB/src/stm32f4xx_rtc.c ****     }
1162:FWLIB/src/stm32f4xx_rtc.c ****     
1163:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
1164:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
1165:FWLIB/src/stm32f4xx_rtc.c ****     
1166:FWLIB/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1167:FWLIB/src/stm32f4xx_rtc.c ****     {
1168:FWLIB/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1169:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
1170:FWLIB/src/stm32f4xx_rtc.c ****     }
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 22


1171:FWLIB/src/stm32f4xx_rtc.c ****     else
1172:FWLIB/src/stm32f4xx_rtc.c ****     {
1173:FWLIB/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1174:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
1175:FWLIB/src/stm32f4xx_rtc.c ****     }    
1176:FWLIB/src/stm32f4xx_rtc.c ****   }
1177:FWLIB/src/stm32f4xx_rtc.c **** 
1178:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1179:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
1180:FWLIB/src/stm32f4xx_rtc.c ****   {
1181:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
1182:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
1183:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
1184:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
1185:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
1186:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
1187:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
1188:FWLIB/src/stm32f4xx_rtc.c ****   }  
1189:FWLIB/src/stm32f4xx_rtc.c ****   else
1190:FWLIB/src/stm32f4xx_rtc.c ****   {
1191:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
1192:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
1193:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
1194:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
1195:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
1196:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
1197:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
1198:FWLIB/src/stm32f4xx_rtc.c ****   } 
1199:FWLIB/src/stm32f4xx_rtc.c **** 
1200:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1201:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1202:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1203:FWLIB/src/stm32f4xx_rtc.c **** 
1204:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the Alarm register */
1205:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1206:FWLIB/src/stm32f4xx_rtc.c ****   {
1207:FWLIB/src/stm32f4xx_rtc.c ****     RTC->ALRMAR = (uint32_t)tmpreg;
1208:FWLIB/src/stm32f4xx_rtc.c ****   }
1209:FWLIB/src/stm32f4xx_rtc.c ****   else
1210:FWLIB/src/stm32f4xx_rtc.c ****   {
1211:FWLIB/src/stm32f4xx_rtc.c ****     RTC->ALRMBR = (uint32_t)tmpreg;
1212:FWLIB/src/stm32f4xx_rtc.c ****   }
1213:FWLIB/src/stm32f4xx_rtc.c **** 
1214:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1215:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
1216:FWLIB/src/stm32f4xx_rtc.c **** }
1217:FWLIB/src/stm32f4xx_rtc.c **** 
1218:FWLIB/src/stm32f4xx_rtc.c **** /**
1219:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_AlarmStruct member with its default value
1220:FWLIB/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00mn:00sec / Date = 1st day of the month/Mask =
1221:FWLIB/src/stm32f4xx_rtc.c ****   *         all fields are masked).
1222:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
1223:FWLIB/src/stm32f4xx_rtc.c ****   *         will be initialized.
1224:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1225:FWLIB/src/stm32f4xx_rtc.c ****   */
1226:FWLIB/src/stm32f4xx_rtc.c **** void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
1227:FWLIB/src/stm32f4xx_rtc.c **** {
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 23


1228:FWLIB/src/stm32f4xx_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
1229:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
1230:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
1231:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
1232:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
1233:FWLIB/src/stm32f4xx_rtc.c **** 
1234:FWLIB/src/stm32f4xx_rtc.c ****   /* Alarm Date Settings : Date = 1st day of the month */
1235:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
1236:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
1237:FWLIB/src/stm32f4xx_rtc.c **** 
1238:FWLIB/src/stm32f4xx_rtc.c ****   /* Alarm Masks Settings : Mask =  all fields are not masked */
1239:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
1240:FWLIB/src/stm32f4xx_rtc.c **** }
1241:FWLIB/src/stm32f4xx_rtc.c **** 
1242:FWLIB/src/stm32f4xx_rtc.c **** /**
1243:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC Alarm value and masks.
1244:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1245:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1246:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1247:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1248:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1249:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1250:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1251:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1252:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
1253:FWLIB/src/stm32f4xx_rtc.c ****   *                          contains the output alarm configuration values.     
1254:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1255:FWLIB/src/stm32f4xx_rtc.c ****   */
1256:FWLIB/src/stm32f4xx_rtc.c **** void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1257:FWLIB/src/stm32f4xx_rtc.c **** {
1258:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1259:FWLIB/src/stm32f4xx_rtc.c **** 
1260:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1261:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1262:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm)); 
1263:FWLIB/src/stm32f4xx_rtc.c **** 
1264:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1265:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1266:FWLIB/src/stm32f4xx_rtc.c ****   {
1267:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMAR);
1268:FWLIB/src/stm32f4xx_rtc.c ****   }
1269:FWLIB/src/stm32f4xx_rtc.c ****   else
1270:FWLIB/src/stm32f4xx_rtc.c ****   {
1271:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMBR);
1272:FWLIB/src/stm32f4xx_rtc.c ****   }
1273:FWLIB/src/stm32f4xx_rtc.c **** 
1274:FWLIB/src/stm32f4xx_rtc.c ****   /* Fill the structure with the read parameters */
1275:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
1276:FWLIB/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
1277:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
1278:FWLIB/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
1279:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
1280:FWLIB/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_SU));
1281:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
1282:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
1283:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
1284:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 24


1285:FWLIB/src/stm32f4xx_rtc.c **** 
1286:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1287:FWLIB/src/stm32f4xx_rtc.c ****   {
1288:FWLIB/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1289:FWLIB/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
1290:FWLIB/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1291:FWLIB/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
1292:FWLIB/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1293:FWLIB/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
1294:FWLIB/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1295:FWLIB/src/stm32f4xx_rtc.c ****   }  
1296:FWLIB/src/stm32f4xx_rtc.c **** }
1297:FWLIB/src/stm32f4xx_rtc.c **** 
1298:FWLIB/src/stm32f4xx_rtc.c **** /**
1299:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC Alarm.
1300:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1301:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
1302:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1303:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1304:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified alarm.
1305:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1306:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1307:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Alarm is enabled/disabled
1308:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Alarm is not enabled/disabled  
1309:FWLIB/src/stm32f4xx_rtc.c ****   */
1310:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
1311:FWLIB/src/stm32f4xx_rtc.c **** {
1312:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
1313:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t alarmstatus = 0x00;
1314:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1315:FWLIB/src/stm32f4xx_rtc.c ****     
1316:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1317:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
1318:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1319:FWLIB/src/stm32f4xx_rtc.c **** 
1320:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1321:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1322:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1323:FWLIB/src/stm32f4xx_rtc.c **** 
1324:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the Alarm state */
1325:FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1326:FWLIB/src/stm32f4xx_rtc.c ****   {
1327:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
1328:FWLIB/src/stm32f4xx_rtc.c **** 
1329:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
1330:FWLIB/src/stm32f4xx_rtc.c ****   }
1331:FWLIB/src/stm32f4xx_rtc.c ****   else
1332:FWLIB/src/stm32f4xx_rtc.c ****   { 
1333:FWLIB/src/stm32f4xx_rtc.c ****     /* Disable the Alarm in RTC_CR register */
1334:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_Alarm;
1335:FWLIB/src/stm32f4xx_rtc.c ****    
1336:FWLIB/src/stm32f4xx_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1337:FWLIB/src/stm32f4xx_rtc.c ****     do
1338:FWLIB/src/stm32f4xx_rtc.c ****     {
1339:FWLIB/src/stm32f4xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
1340:FWLIB/src/stm32f4xx_rtc.c ****       alarmcounter++;  
1341:FWLIB/src/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 25


1342:FWLIB/src/stm32f4xx_rtc.c ****     
1343:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
1344:FWLIB/src/stm32f4xx_rtc.c ****     {
1345:FWLIB/src/stm32f4xx_rtc.c ****       status = ERROR;
1346:FWLIB/src/stm32f4xx_rtc.c ****     } 
1347:FWLIB/src/stm32f4xx_rtc.c ****     else
1348:FWLIB/src/stm32f4xx_rtc.c ****     {
1349:FWLIB/src/stm32f4xx_rtc.c ****       status = SUCCESS;
1350:FWLIB/src/stm32f4xx_rtc.c ****     }        
1351:FWLIB/src/stm32f4xx_rtc.c ****   } 
1352:FWLIB/src/stm32f4xx_rtc.c **** 
1353:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1354:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1355:FWLIB/src/stm32f4xx_rtc.c ****   
1356:FWLIB/src/stm32f4xx_rtc.c ****   return status;
1357:FWLIB/src/stm32f4xx_rtc.c **** }
1358:FWLIB/src/stm32f4xx_rtc.c **** 
1359:FWLIB/src/stm32f4xx_rtc.c **** /**
1360:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configure the RTC AlarmA/B Sub seconds value and mask.*
1361:FWLIB/src/stm32f4xx_rtc.c ****   * @note   This function is performed only when the Alarm is disabled. 
1362:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1363:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1364:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1365:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1366:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondValue: specifies the Sub seconds value.
1367:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be a value from 0 to 0x00007FFF.
1368:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondMask:  specifies the Sub seconds Mask.
1369:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be any combination of the following values:
1370:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_All    : All Alarm SS fields are masked.
1371:FWLIB/src/stm32f4xx_rtc.c ****   *                                          There is no comparison on sub seconds for Alarm.
1372:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_1 : SS[14:1] are don't care in Alarm comparison.
1373:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[0] is compared
1374:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_2 : SS[14:2] are don't care in Alarm comparison.
1375:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[1:0] are compared
1376:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_3 : SS[14:3] are don't care in Alarm comparison.
1377:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[2:0] are compared
1378:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_4 : SS[14:4] are don't care in Alarm comparison.
1379:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[3:0] are compared
1380:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_5 : SS[14:5] are don't care in Alarm comparison.
1381:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[4:0] are compared
1382:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_6 : SS[14:6] are don't care in Alarm comparison.
1383:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[5:0] are compared
1384:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_7 : SS[14:7] are don't care in Alarm comparison.
1385:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[6:0] are compared
1386:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_8 : SS[14:8] are don't care in Alarm comparison.
1387:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[7:0] are compared
1388:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_9 : SS[14:9] are don't care in Alarm comparison.
1389:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[8:0] are compared
1390:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_10: SS[14:10] are don't care in Alarm comparison.
1391:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[9:0] are compared
1392:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_11: SS[14:11] are don't care in Alarm comparison.
1393:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[10:0] are compared
1394:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_12: SS[14:12] are don't care in Alarm comparison.
1395:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[11:0] are compared
1396:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_13: SS[14:13] are don't care in Alarm comparison.
1397:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[12:0] are compared
1398:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14   : SS[14] is don't care in Alarm comparison.
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 26


1399:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[13:0] are compared
1400:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
1401:FWLIB/src/stm32f4xx_rtc.c ****   *                                          to activate alarm
1402:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1403:FWLIB/src/stm32f4xx_rtc.c ****   */
1404:FWLIB/src/stm32f4xx_rtc.c **** void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_Al
1405:FWLIB/src/stm32f4xx_rtc.c **** {
1406:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1407:FWLIB/src/stm32f4xx_rtc.c **** 
1408:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1409:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1410:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
1411:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
1412:FWLIB/src/stm32f4xx_rtc.c ****   
1413:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1414:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1415:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1416:FWLIB/src/stm32f4xx_rtc.c ****   
1417:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the Alarm A or Alarm B Sub Second registers */
1418:FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
1419:FWLIB/src/stm32f4xx_rtc.c ****   
1420:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1421:FWLIB/src/stm32f4xx_rtc.c ****   {
1422:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Alarm A Sub Second register */
1423:FWLIB/src/stm32f4xx_rtc.c ****     RTC->ALRMASSR = tmpreg;
1424:FWLIB/src/stm32f4xx_rtc.c ****   }
1425:FWLIB/src/stm32f4xx_rtc.c ****   else
1426:FWLIB/src/stm32f4xx_rtc.c ****   {
1427:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Alarm B Sub Second register */
1428:FWLIB/src/stm32f4xx_rtc.c ****     RTC->ALRMBSSR = tmpreg;
1429:FWLIB/src/stm32f4xx_rtc.c ****   }
1430:FWLIB/src/stm32f4xx_rtc.c **** 
1431:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1432:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
1433:FWLIB/src/stm32f4xx_rtc.c **** 
1434:FWLIB/src/stm32f4xx_rtc.c **** }
1435:FWLIB/src/stm32f4xx_rtc.c **** 
1436:FWLIB/src/stm32f4xx_rtc.c **** /**
1437:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC Alarm Sub seconds value.
1438:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1439:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1440:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1441:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1442:FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
1443:FWLIB/src/stm32f4xx_rtc.c ****   * @retval RTC Alarm Sub seconds value.
1444:FWLIB/src/stm32f4xx_rtc.c ****   */
1445:FWLIB/src/stm32f4xx_rtc.c **** uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
1446:FWLIB/src/stm32f4xx_rtc.c **** {
1447:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1448:FWLIB/src/stm32f4xx_rtc.c ****   
1449:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1450:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1451:FWLIB/src/stm32f4xx_rtc.c ****   {
1452:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
1453:FWLIB/src/stm32f4xx_rtc.c ****   }
1454:FWLIB/src/stm32f4xx_rtc.c ****   else
1455:FWLIB/src/stm32f4xx_rtc.c ****   {
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 27


1456:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
1457:FWLIB/src/stm32f4xx_rtc.c ****   } 
1458:FWLIB/src/stm32f4xx_rtc.c ****   
1459:FWLIB/src/stm32f4xx_rtc.c ****   return (tmpreg);
1460:FWLIB/src/stm32f4xx_rtc.c **** }
1461:FWLIB/src/stm32f4xx_rtc.c **** 
1462:FWLIB/src/stm32f4xx_rtc.c **** /**
1463:FWLIB/src/stm32f4xx_rtc.c ****   * @}
1464:FWLIB/src/stm32f4xx_rtc.c ****   */
1465:FWLIB/src/stm32f4xx_rtc.c **** 
1466:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group4 WakeUp Timer configuration functions
1467:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   WakeUp Timer configuration functions 
1468:FWLIB/src/stm32f4xx_rtc.c ****  *
1469:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
1470:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
1471:FWLIB/src/stm32f4xx_rtc.c ****                  ##### WakeUp Timer configuration functions #####
1472:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
1473:FWLIB/src/stm32f4xx_rtc.c **** 
1474:FWLIB/src/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to program and read the RTC WakeUp.
1475:FWLIB/src/stm32f4xx_rtc.c **** 
1476:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
1477:FWLIB/src/stm32f4xx_rtc.c ****   * @{
1478:FWLIB/src/stm32f4xx_rtc.c ****   */
1479:FWLIB/src/stm32f4xx_rtc.c **** 
1480:FWLIB/src/stm32f4xx_rtc.c **** /**
1481:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup clock source.
1482:FWLIB/src/stm32f4xx_rtc.c ****   * @note   The WakeUp Clock source can only be changed when the RTC WakeUp
1483:FWLIB/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).      
1484:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpClock: Wakeup Clock source.
1485:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1486:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div16: RTC Wakeup Counter Clock = RTCCLK/16
1487:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div8: RTC Wakeup Counter Clock = RTCCLK/8
1488:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div4: RTC Wakeup Counter Clock = RTCCLK/4
1489:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div2: RTC Wakeup Counter Clock = RTCCLK/2
1490:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
1491:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
1492:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1493:FWLIB/src/stm32f4xx_rtc.c ****   */
1494:FWLIB/src/stm32f4xx_rtc.c **** void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
1495:FWLIB/src/stm32f4xx_rtc.c **** {
1496:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1497:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));
1498:FWLIB/src/stm32f4xx_rtc.c **** 
1499:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1500:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1501:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1502:FWLIB/src/stm32f4xx_rtc.c **** 
1503:FWLIB/src/stm32f4xx_rtc.c ****   /* Clear the Wakeup Timer clock source bits in CR register */
1504:FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
1505:FWLIB/src/stm32f4xx_rtc.c **** 
1506:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the clock source */
1507:FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
1508:FWLIB/src/stm32f4xx_rtc.c ****   
1509:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1510:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1511:FWLIB/src/stm32f4xx_rtc.c **** }
1512:FWLIB/src/stm32f4xx_rtc.c **** 
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 28


1513:FWLIB/src/stm32f4xx_rtc.c **** /**
1514:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup counter.
1515:FWLIB/src/stm32f4xx_rtc.c ****   * @note   The RTC WakeUp counter can only be written when the RTC WakeUp
1516:FWLIB/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).        
1517:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
1518:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be a value from 0x0000 to 0xFFFF. 
1519:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1520:FWLIB/src/stm32f4xx_rtc.c ****   */
1521:FWLIB/src/stm32f4xx_rtc.c **** void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
1522:FWLIB/src/stm32f4xx_rtc.c **** {
1523:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1524:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
1525:FWLIB/src/stm32f4xx_rtc.c ****   
1526:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1527:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1528:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1529:FWLIB/src/stm32f4xx_rtc.c ****   
1530:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the Wakeup Timer counter */
1531:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
1532:FWLIB/src/stm32f4xx_rtc.c ****   
1533:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1534:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1535:FWLIB/src/stm32f4xx_rtc.c **** }
1536:FWLIB/src/stm32f4xx_rtc.c **** 
1537:FWLIB/src/stm32f4xx_rtc.c **** /**
1538:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC WakeUp timer counter value.
1539:FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
1540:FWLIB/src/stm32f4xx_rtc.c ****   * @retval The RTC WakeUp Counter value.
1541:FWLIB/src/stm32f4xx_rtc.c ****   */
1542:FWLIB/src/stm32f4xx_rtc.c **** uint32_t RTC_GetWakeUpCounter(void)
1543:FWLIB/src/stm32f4xx_rtc.c **** {
1544:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the counter value */
1545:FWLIB/src/stm32f4xx_rtc.c ****   return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
1546:FWLIB/src/stm32f4xx_rtc.c **** }
1547:FWLIB/src/stm32f4xx_rtc.c **** 
1548:FWLIB/src/stm32f4xx_rtc.c **** /**
1549:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC WakeUp timer.
1550:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the WakeUp timer.
1551:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1552:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1553:FWLIB/src/stm32f4xx_rtc.c ****   */
1554:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
1555:FWLIB/src/stm32f4xx_rtc.c **** {
1556:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
1557:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
1558:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1559:FWLIB/src/stm32f4xx_rtc.c ****   
1560:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1561:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1562:FWLIB/src/stm32f4xx_rtc.c **** 
1563:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1564:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1565:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1566:FWLIB/src/stm32f4xx_rtc.c **** 
1567:FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1568:FWLIB/src/stm32f4xx_rtc.c ****   {
1569:FWLIB/src/stm32f4xx_rtc.c ****     /* Enable the Wakeup Timer */
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 29


1570:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
1571:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
1572:FWLIB/src/stm32f4xx_rtc.c ****   }
1573:FWLIB/src/stm32f4xx_rtc.c ****   else
1574:FWLIB/src/stm32f4xx_rtc.c ****   {
1575:FWLIB/src/stm32f4xx_rtc.c ****     /* Disable the Wakeup Timer */
1576:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_WUTE;
1577:FWLIB/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
1578:FWLIB/src/stm32f4xx_rtc.c ****     do
1579:FWLIB/src/stm32f4xx_rtc.c ****     {
1580:FWLIB/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
1581:FWLIB/src/stm32f4xx_rtc.c ****       wutcounter++;  
1582:FWLIB/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
1583:FWLIB/src/stm32f4xx_rtc.c ****     
1584:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
1585:FWLIB/src/stm32f4xx_rtc.c ****     {
1586:FWLIB/src/stm32f4xx_rtc.c ****       status = ERROR;
1587:FWLIB/src/stm32f4xx_rtc.c ****     }
1588:FWLIB/src/stm32f4xx_rtc.c ****     else
1589:FWLIB/src/stm32f4xx_rtc.c ****     {
1590:FWLIB/src/stm32f4xx_rtc.c ****       status = SUCCESS;
1591:FWLIB/src/stm32f4xx_rtc.c ****     }    
1592:FWLIB/src/stm32f4xx_rtc.c ****   }
1593:FWLIB/src/stm32f4xx_rtc.c **** 
1594:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1595:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1596:FWLIB/src/stm32f4xx_rtc.c ****   
1597:FWLIB/src/stm32f4xx_rtc.c ****   return status;
1598:FWLIB/src/stm32f4xx_rtc.c **** }
1599:FWLIB/src/stm32f4xx_rtc.c **** 
1600:FWLIB/src/stm32f4xx_rtc.c **** /**
1601:FWLIB/src/stm32f4xx_rtc.c ****   * @}
1602:FWLIB/src/stm32f4xx_rtc.c ****   */
1603:FWLIB/src/stm32f4xx_rtc.c **** 
1604:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group5 Daylight Saving configuration functions
1605:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Daylight Saving configuration functions 
1606:FWLIB/src/stm32f4xx_rtc.c ****  *
1607:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
1608:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
1609:FWLIB/src/stm32f4xx_rtc.c ****               ##### Daylight Saving configuration functions #####
1610:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
1611:FWLIB/src/stm32f4xx_rtc.c **** 
1612:FWLIB/src/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to configure the RTC DayLight Saving.
1613:FWLIB/src/stm32f4xx_rtc.c **** 
1614:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
1615:FWLIB/src/stm32f4xx_rtc.c ****   * @{
1616:FWLIB/src/stm32f4xx_rtc.c ****   */
1617:FWLIB/src/stm32f4xx_rtc.c **** 
1618:FWLIB/src/stm32f4xx_rtc.c **** /**
1619:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Adds or substract one hour from the current time.
1620:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_DayLightSaveOperation: the value of hour adjustment. 
1621:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1622:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_SUB1H: Substract one hour (winter time)
1623:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_ADD1H: Add one hour (summer time)
1624:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_StoreOperation: Specifies the value to be written in the BCK bit 
1625:FWLIB/src/stm32f4xx_rtc.c ****   *                            in CR register to store the operation.
1626:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 30


1627:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
1628:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Set: BCK Bit Set
1629:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1630:FWLIB/src/stm32f4xx_rtc.c ****   */
1631:FWLIB/src/stm32f4xx_rtc.c **** void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
1632:FWLIB/src/stm32f4xx_rtc.c **** {
1633:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1634:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
1635:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));
1636:FWLIB/src/stm32f4xx_rtc.c **** 
1637:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1638:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1639:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1640:FWLIB/src/stm32f4xx_rtc.c **** 
1641:FWLIB/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1642:FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_BCK);
1643:FWLIB/src/stm32f4xx_rtc.c **** 
1644:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1645:FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
1646:FWLIB/src/stm32f4xx_rtc.c **** 
1647:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1648:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1649:FWLIB/src/stm32f4xx_rtc.c **** }
1650:FWLIB/src/stm32f4xx_rtc.c **** 
1651:FWLIB/src/stm32f4xx_rtc.c **** /**
1652:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC Day Light Saving stored operation.
1653:FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
1654:FWLIB/src/stm32f4xx_rtc.c ****   * @retval RTC Day Light Saving stored operation.
1655:FWLIB/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Reset
1656:FWLIB/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Set       
1657:FWLIB/src/stm32f4xx_rtc.c ****   */
1658:FWLIB/src/stm32f4xx_rtc.c **** uint32_t RTC_GetStoreOperation(void)
1659:FWLIB/src/stm32f4xx_rtc.c **** {
1660:FWLIB/src/stm32f4xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
1661:FWLIB/src/stm32f4xx_rtc.c **** }
1662:FWLIB/src/stm32f4xx_rtc.c **** 
1663:FWLIB/src/stm32f4xx_rtc.c **** /**
1664:FWLIB/src/stm32f4xx_rtc.c ****   * @}
1665:FWLIB/src/stm32f4xx_rtc.c ****   */
1666:FWLIB/src/stm32f4xx_rtc.c **** 
1667:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group6 Output pin Configuration function
1668:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Output pin Configuration function 
1669:FWLIB/src/stm32f4xx_rtc.c ****  *
1670:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
1671:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
1672:FWLIB/src/stm32f4xx_rtc.c ****                  ##### Output pin Configuration function #####
1673:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
1674:FWLIB/src/stm32f4xx_rtc.c **** 
1675:FWLIB/src/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to configure the RTC Output source.
1676:FWLIB/src/stm32f4xx_rtc.c **** 
1677:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
1678:FWLIB/src/stm32f4xx_rtc.c ****   * @{
1679:FWLIB/src/stm32f4xx_rtc.c ****   */
1680:FWLIB/src/stm32f4xx_rtc.c **** 
1681:FWLIB/src/stm32f4xx_rtc.c **** /**
1682:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC output source (AFO_ALARM).
1683:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Output: Specifies which signal will be routed to the RTC output. 
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 31


1684:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1685:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_Disable: No output selected
1686:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmA: signal of AlarmA mapped to output
1687:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmB: signal of AlarmB mapped to output
1688:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_WakeUp: signal of WakeUp mapped to output
1689:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputPolarity: Specifies the polarity of the output signal. 
1690:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1691:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_High: The output pin is high when the 
1692:FWLIB/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1693:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
1694:FWLIB/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1695:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1696:FWLIB/src/stm32f4xx_rtc.c ****   */
1697:FWLIB/src/stm32f4xx_rtc.c **** void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
1698:FWLIB/src/stm32f4xx_rtc.c **** {
1699:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1700:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT(RTC_Output));
1701:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));
1702:FWLIB/src/stm32f4xx_rtc.c **** 
1703:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1704:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1705:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1706:FWLIB/src/stm32f4xx_rtc.c **** 
1707:FWLIB/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1708:FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
1709:FWLIB/src/stm32f4xx_rtc.c **** 
1710:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the output selection and polarity */
1711:FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
1712:FWLIB/src/stm32f4xx_rtc.c **** 
1713:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1714:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1715:FWLIB/src/stm32f4xx_rtc.c **** }
1716:FWLIB/src/stm32f4xx_rtc.c **** 
1717:FWLIB/src/stm32f4xx_rtc.c **** /**
1718:FWLIB/src/stm32f4xx_rtc.c ****   * @}
1719:FWLIB/src/stm32f4xx_rtc.c ****   */
1720:FWLIB/src/stm32f4xx_rtc.c **** 
1721:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group7 Digital Calibration configuration functions
1722:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Coarse Calibration configuration functions 
1723:FWLIB/src/stm32f4xx_rtc.c ****  *
1724:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
1725:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
1726:FWLIB/src/stm32f4xx_rtc.c ****               ##### Digital Calibration configuration functions #####
1727:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
1728:FWLIB/src/stm32f4xx_rtc.c **** 
1729:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
1730:FWLIB/src/stm32f4xx_rtc.c ****   * @{
1731:FWLIB/src/stm32f4xx_rtc.c ****   */
1732:FWLIB/src/stm32f4xx_rtc.c **** 
1733:FWLIB/src/stm32f4xx_rtc.c **** /**
1734:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the Coarse calibration parameters.
1735:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibSign: specifies the sign of the coarse calibration value.
1736:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
1737:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Positive: The value sign is positive 
1738:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Negative: The value sign is negative
1739:FWLIB/src/stm32f4xx_rtc.c ****   * @param  Value: value of coarse calibration expressed in ppm (coded on 5 bits).
1740:FWLIB/src/stm32f4xx_rtc.c ****   *    
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 32


1741:FWLIB/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 63 when using negative
1742:FWLIB/src/stm32f4xx_rtc.c ****   *         sign with a 2-ppm step.
1743:FWLIB/src/stm32f4xx_rtc.c ****   *           
1744:FWLIB/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 126 when using positive
1745:FWLIB/src/stm32f4xx_rtc.c ****   *         sign with a 4-ppm step.
1746:FWLIB/src/stm32f4xx_rtc.c ****   *           
1747:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1748:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are initialized
1749:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not initialized     
1750:FWLIB/src/stm32f4xx_rtc.c ****   */
1751:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
1752:FWLIB/src/stm32f4xx_rtc.c **** {
1753:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1754:FWLIB/src/stm32f4xx_rtc.c ****    
1755:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1756:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
1757:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_VALUE(Value)); 
1758:FWLIB/src/stm32f4xx_rtc.c **** 
1759:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1760:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1761:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1762:FWLIB/src/stm32f4xx_rtc.c **** 
1763:FWLIB/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1764:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
1765:FWLIB/src/stm32f4xx_rtc.c ****   {
1766:FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
1767:FWLIB/src/stm32f4xx_rtc.c ****   } 
1768:FWLIB/src/stm32f4xx_rtc.c ****   else
1769:FWLIB/src/stm32f4xx_rtc.c ****   {
1770:FWLIB/src/stm32f4xx_rtc.c ****     /* Set the coarse calibration value */
1771:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
1772:FWLIB/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1773:FWLIB/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
1774:FWLIB/src/stm32f4xx_rtc.c ****     
1775:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;
1776:FWLIB/src/stm32f4xx_rtc.c ****   } 
1777:FWLIB/src/stm32f4xx_rtc.c **** 
1778:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1779:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1780:FWLIB/src/stm32f4xx_rtc.c ****   
1781:FWLIB/src/stm32f4xx_rtc.c ****   return status;
1782:FWLIB/src/stm32f4xx_rtc.c **** }
1783:FWLIB/src/stm32f4xx_rtc.c **** 
1784:FWLIB/src/stm32f4xx_rtc.c **** /**
1785:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the Coarse calibration process.
1786:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Coarse calibration.
1787:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1788:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1789:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are enabled/disabled
1790:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not enabled/disabled    
1791:FWLIB/src/stm32f4xx_rtc.c ****   */
1792:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
1793:FWLIB/src/stm32f4xx_rtc.c **** {
1794:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1795:FWLIB/src/stm32f4xx_rtc.c ****   
1796:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1797:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 33


1798:FWLIB/src/stm32f4xx_rtc.c **** 
1799:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1800:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1801:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1802:FWLIB/src/stm32f4xx_rtc.c ****   
1803:FWLIB/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1804:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
1805:FWLIB/src/stm32f4xx_rtc.c ****   {
1806:FWLIB/src/stm32f4xx_rtc.c ****     status =  ERROR;
1807:FWLIB/src/stm32f4xx_rtc.c ****   }
1808:FWLIB/src/stm32f4xx_rtc.c ****   else
1809:FWLIB/src/stm32f4xx_rtc.c ****   {
1810:FWLIB/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
1811:FWLIB/src/stm32f4xx_rtc.c ****     {
1812:FWLIB/src/stm32f4xx_rtc.c ****       /* Enable the Coarse Calibration */
1813:FWLIB/src/stm32f4xx_rtc.c ****       RTC->CR |= (uint32_t)RTC_CR_DCE;
1814:FWLIB/src/stm32f4xx_rtc.c ****     }
1815:FWLIB/src/stm32f4xx_rtc.c ****     else
1816:FWLIB/src/stm32f4xx_rtc.c ****     { 
1817:FWLIB/src/stm32f4xx_rtc.c ****       /* Disable the Coarse Calibration */
1818:FWLIB/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)~RTC_CR_DCE;
1819:FWLIB/src/stm32f4xx_rtc.c ****     }
1820:FWLIB/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1821:FWLIB/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
1822:FWLIB/src/stm32f4xx_rtc.c ****     
1823:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;
1824:FWLIB/src/stm32f4xx_rtc.c ****   } 
1825:FWLIB/src/stm32f4xx_rtc.c ****   
1826:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1827:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1828:FWLIB/src/stm32f4xx_rtc.c ****   
1829:FWLIB/src/stm32f4xx_rtc.c ****   return status;
1830:FWLIB/src/stm32f4xx_rtc.c **** }
1831:FWLIB/src/stm32f4xx_rtc.c **** 
1832:FWLIB/src/stm32f4xx_rtc.c **** /**
1833:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC clock to be output through the relative pin.
1834:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the digital calibration Output.
1835:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1836:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1837:FWLIB/src/stm32f4xx_rtc.c ****   */
1838:FWLIB/src/stm32f4xx_rtc.c **** void RTC_CalibOutputCmd(FunctionalState NewState)
1839:FWLIB/src/stm32f4xx_rtc.c **** {
1840:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1841:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1842:FWLIB/src/stm32f4xx_rtc.c ****   
1843:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1844:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1845:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1846:FWLIB/src/stm32f4xx_rtc.c ****   
1847:FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1848:FWLIB/src/stm32f4xx_rtc.c ****   {
1849:FWLIB/src/stm32f4xx_rtc.c ****     /* Enable the RTC clock output */
1850:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
1851:FWLIB/src/stm32f4xx_rtc.c ****   }
1852:FWLIB/src/stm32f4xx_rtc.c ****   else
1853:FWLIB/src/stm32f4xx_rtc.c ****   { 
1854:FWLIB/src/stm32f4xx_rtc.c ****     /* Disable the RTC clock output */
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 34


1855:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_COE;
1856:FWLIB/src/stm32f4xx_rtc.c ****   }
1857:FWLIB/src/stm32f4xx_rtc.c ****   
1858:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1859:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1860:FWLIB/src/stm32f4xx_rtc.c **** }
1861:FWLIB/src/stm32f4xx_rtc.c **** 
1862:FWLIB/src/stm32f4xx_rtc.c **** /**
1863:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configure the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
1864:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibOutput : Select the Calibration output Selection .
1865:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1866:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
1867:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
1868:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1869:FWLIB/src/stm32f4xx_rtc.c **** */
1870:FWLIB/src/stm32f4xx_rtc.c **** void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
1871:FWLIB/src/stm32f4xx_rtc.c **** {
1872:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1873:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));
1874:FWLIB/src/stm32f4xx_rtc.c **** 
1875:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1876:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1877:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1878:FWLIB/src/stm32f4xx_rtc.c ****   
1879:FWLIB/src/stm32f4xx_rtc.c ****   /*clear flags before configuration */
1880:FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
1881:FWLIB/src/stm32f4xx_rtc.c **** 
1882:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1883:FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_CalibOutput;
1884:FWLIB/src/stm32f4xx_rtc.c **** 
1885:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1886:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
1887:FWLIB/src/stm32f4xx_rtc.c **** }
1888:FWLIB/src/stm32f4xx_rtc.c **** 
1889:FWLIB/src/stm32f4xx_rtc.c **** /**
1890:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the Smooth Calibration Settings.
1891:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPeriod : Select the Smooth Calibration Period.
1892:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be can be one of the following values:
1893:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_32sec : The smooth calibration period is 32s.
1894:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_16sec : The smooth calibration period is 16s.
1895:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_8sec  : The smooth calibration period is 8s.
1896:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPlusPulses : Select to Set or reset the CALP bit.
1897:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1898:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Set  : Add one RTCCLK pulse every 2**11 pulses.
1899:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Reset: No RTCCLK pulses are added.
1900:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_SmouthCalibMinusPulsesValue: Select the value of CALM[8:0] bits.
1901:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one any value from 0 to 0x000001FF.
1902:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1903:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Calib registers are configured
1904:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Calib registers are not configured
1905:FWLIB/src/stm32f4xx_rtc.c **** */
1906:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
1907:FWLIB/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmoothCalibPlusPulses,
1908:FWLIB/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmouthCalibMinusPulsesValue)
1909:FWLIB/src/stm32f4xx_rtc.c **** {
1910:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1911:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t recalpfcount = 0;
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 35


1912:FWLIB/src/stm32f4xx_rtc.c **** 
1913:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1914:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
1915:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
1916:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));
1917:FWLIB/src/stm32f4xx_rtc.c **** 
1918:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1919:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1920:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1921:FWLIB/src/stm32f4xx_rtc.c ****   
1922:FWLIB/src/stm32f4xx_rtc.c ****   /* check if a calibration is pending*/
1923:FWLIB/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
1924:FWLIB/src/stm32f4xx_rtc.c ****   {
1925:FWLIB/src/stm32f4xx_rtc.c ****     /* wait until the Calibration is completed*/
1926:FWLIB/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
1927:FWLIB/src/stm32f4xx_rtc.c ****     {
1928:FWLIB/src/stm32f4xx_rtc.c ****       recalpfcount++;
1929:FWLIB/src/stm32f4xx_rtc.c ****     }
1930:FWLIB/src/stm32f4xx_rtc.c ****   }
1931:FWLIB/src/stm32f4xx_rtc.c **** 
1932:FWLIB/src/stm32f4xx_rtc.c ****   /* check if the calibration pending is completed or if there is no calibration operation at all*/
1933:FWLIB/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
1934:FWLIB/src/stm32f4xx_rtc.c ****   {
1935:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Smooth calibration settings */
1936:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | 
1937:FWLIB/src/stm32f4xx_rtc.c **** 
1938:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;
1939:FWLIB/src/stm32f4xx_rtc.c ****   }
1940:FWLIB/src/stm32f4xx_rtc.c ****   else
1941:FWLIB/src/stm32f4xx_rtc.c ****   {
1942:FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
1943:FWLIB/src/stm32f4xx_rtc.c ****   }
1944:FWLIB/src/stm32f4xx_rtc.c **** 
1945:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1946:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
1947:FWLIB/src/stm32f4xx_rtc.c ****   
1948:FWLIB/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
1949:FWLIB/src/stm32f4xx_rtc.c **** }
1950:FWLIB/src/stm32f4xx_rtc.c **** 
1951:FWLIB/src/stm32f4xx_rtc.c **** /**
1952:FWLIB/src/stm32f4xx_rtc.c ****   * @}
1953:FWLIB/src/stm32f4xx_rtc.c ****   */
1954:FWLIB/src/stm32f4xx_rtc.c **** 
1955:FWLIB/src/stm32f4xx_rtc.c **** 
1956:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group8 TimeStamp configuration functions
1957:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   TimeStamp configuration functions 
1958:FWLIB/src/stm32f4xx_rtc.c ****  *
1959:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
1960:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
1961:FWLIB/src/stm32f4xx_rtc.c ****                  ##### TimeStamp configuration functions #####
1962:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
1963:FWLIB/src/stm32f4xx_rtc.c **** 
1964:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
1965:FWLIB/src/stm32f4xx_rtc.c ****   * @{
1966:FWLIB/src/stm32f4xx_rtc.c ****   */
1967:FWLIB/src/stm32f4xx_rtc.c **** 
1968:FWLIB/src/stm32f4xx_rtc.c **** /**
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 36


1969:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC TimeStamp functionality with the 
1970:FWLIB/src/stm32f4xx_rtc.c ****   *         specified time stamp pin stimulating edge.
1971:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampEdge: Specifies the pin edge on which the TimeStamp is 
1972:FWLIB/src/stm32f4xx_rtc.c ****   *         activated.
1973:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1974:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Rising: the Time stamp event occurs on the rising 
1975:FWLIB/src/stm32f4xx_rtc.c ****   *                                    edge of the related pin.
1976:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Falling: the Time stamp event occurs on the 
1977:FWLIB/src/stm32f4xx_rtc.c ****   *                                     falling edge of the related pin.
1978:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the TimeStamp.
1979:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1980:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1981:FWLIB/src/stm32f4xx_rtc.c ****   */
1982:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
1983:FWLIB/src/stm32f4xx_rtc.c **** {
1984:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1985:FWLIB/src/stm32f4xx_rtc.c **** 
1986:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1987:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
1988:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1989:FWLIB/src/stm32f4xx_rtc.c **** 
1990:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the RTC_CR register and clear the bits to be configured */
1991:FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
1992:FWLIB/src/stm32f4xx_rtc.c **** 
1993:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the new configuration */
1994:FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1995:FWLIB/src/stm32f4xx_rtc.c ****   {
1996:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
1997:FWLIB/src/stm32f4xx_rtc.c ****   }
1998:FWLIB/src/stm32f4xx_rtc.c ****   else
1999:FWLIB/src/stm32f4xx_rtc.c ****   {
2000:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge);
2001:FWLIB/src/stm32f4xx_rtc.c ****   }
2002:FWLIB/src/stm32f4xx_rtc.c **** 
2003:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2004:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
2005:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
2006:FWLIB/src/stm32f4xx_rtc.c **** 
2007:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the Time Stamp TSEDGE and Enable bits */
2008:FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR = (uint32_t)tmpreg;
2009:FWLIB/src/stm32f4xx_rtc.c **** 
2010:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2011:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
2012:FWLIB/src/stm32f4xx_rtc.c **** }
2013:FWLIB/src/stm32f4xx_rtc.c **** 
2014:FWLIB/src/stm32f4xx_rtc.c **** /**
2015:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC TimeStamp value and masks.
2016:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
2017:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2018:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
2019:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
2020:FWLIB/src/stm32f4xx_rtc.c ****   * @param RTC_StampTimeStruct: pointer to a RTC_TimeTypeDef structure that will 
2021:FWLIB/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp time values. 
2022:FWLIB/src/stm32f4xx_rtc.c ****   * @param RTC_StampDateStruct: pointer to a RTC_DateTypeDef structure that will 
2023:FWLIB/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp date values.     
2024:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2025:FWLIB/src/stm32f4xx_rtc.c ****   */
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 37


2026:FWLIB/src/stm32f4xx_rtc.c **** void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
2027:FWLIB/src/stm32f4xx_rtc.c ****                                       RTC_DateTypeDef* RTC_StampDateStruct)
2028:FWLIB/src/stm32f4xx_rtc.c **** {
2029:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
2030:FWLIB/src/stm32f4xx_rtc.c **** 
2031:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2032:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
2033:FWLIB/src/stm32f4xx_rtc.c **** 
2034:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the TimeStamp time and date registers values */
2035:FWLIB/src/stm32f4xx_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
2036:FWLIB/src/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
2037:FWLIB/src/stm32f4xx_rtc.c **** 
2038:FWLIB/src/stm32f4xx_rtc.c ****   /* Fill the Time structure fields with the read parameters */
2039:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
2040:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
2041:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
2042:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
2043:FWLIB/src/stm32f4xx_rtc.c **** 
2044:FWLIB/src/stm32f4xx_rtc.c ****   /* Fill the Date structure fields with the read parameters */
2045:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
2046:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
2047:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
2048:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
2049:FWLIB/src/stm32f4xx_rtc.c **** 
2050:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
2051:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
2052:FWLIB/src/stm32f4xx_rtc.c ****   {
2053:FWLIB/src/stm32f4xx_rtc.c ****     /* Convert the Time structure parameters to Binary format */
2054:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
2055:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
2056:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
2057:FWLIB/src/stm32f4xx_rtc.c **** 
2058:FWLIB/src/stm32f4xx_rtc.c ****     /* Convert the Date structure parameters to Binary format */
2059:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
2060:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
2061:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
2062:FWLIB/src/stm32f4xx_rtc.c ****   }
2063:FWLIB/src/stm32f4xx_rtc.c **** }
2064:FWLIB/src/stm32f4xx_rtc.c **** 
2065:FWLIB/src/stm32f4xx_rtc.c **** /**
2066:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC timestamp Sub seconds value.
2067:FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
2068:FWLIB/src/stm32f4xx_rtc.c ****   * @retval RTC current timestamp Sub seconds value.
2069:FWLIB/src/stm32f4xx_rtc.c ****   */
2070:FWLIB/src/stm32f4xx_rtc.c **** uint32_t RTC_GetTimeStampSubSecond(void)
2071:FWLIB/src/stm32f4xx_rtc.c **** {
2072:FWLIB/src/stm32f4xx_rtc.c ****   /* Get timestamp sub seconds values from the correspondent registers */
2073:FWLIB/src/stm32f4xx_rtc.c ****   return (uint32_t)(RTC->TSSSR);
2074:FWLIB/src/stm32f4xx_rtc.c **** }
2075:FWLIB/src/stm32f4xx_rtc.c **** 
2076:FWLIB/src/stm32f4xx_rtc.c **** /**
2077:FWLIB/src/stm32f4xx_rtc.c ****   * @}
2078:FWLIB/src/stm32f4xx_rtc.c ****   */
2079:FWLIB/src/stm32f4xx_rtc.c **** 
2080:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group9 Tampers configuration functions
2081:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Tampers configuration functions 
2082:FWLIB/src/stm32f4xx_rtc.c ****  *
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 38


2083:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
2084:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
2085:FWLIB/src/stm32f4xx_rtc.c ****                  ##### Tampers configuration functions #####
2086:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
2087:FWLIB/src/stm32f4xx_rtc.c **** 
2088:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
2089:FWLIB/src/stm32f4xx_rtc.c ****   * @{
2090:FWLIB/src/stm32f4xx_rtc.c ****   */
2091:FWLIB/src/stm32f4xx_rtc.c **** 
2092:FWLIB/src/stm32f4xx_rtc.c **** /**
2093:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the select Tamper pin edge.
2094:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2095:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1 or RTC_Tamper 2
2096:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperTrigger: Specifies the trigger on the tamper pin that 
2097:FWLIB/src/stm32f4xx_rtc.c ****   *         stimulates tamper event. 
2098:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2099:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_RisingEdge: Rising Edge of the tamper pin causes tamper event.
2100:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_FallingEdge: Falling Edge of the tamper pin causes tamper event.
2101:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
2102:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
2103:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2104:FWLIB/src/stm32f4xx_rtc.c ****   */
2105:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
2106:FWLIB/src/stm32f4xx_rtc.c **** {
2107:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2108:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
2109:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
2110:FWLIB/src/stm32f4xx_rtc.c ****  
2111:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
2112:FWLIB/src/stm32f4xx_rtc.c ****   {  
2113:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2114:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
2115:FWLIB/src/stm32f4xx_rtc.c ****   }
2116:FWLIB/src/stm32f4xx_rtc.c ****   else
2117:FWLIB/src/stm32f4xx_rtc.c ****   { 
2118:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2119:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
2120:FWLIB/src/stm32f4xx_rtc.c ****   }  
2121:FWLIB/src/stm32f4xx_rtc.c **** }
2122:FWLIB/src/stm32f4xx_rtc.c **** 
2123:FWLIB/src/stm32f4xx_rtc.c **** /**
2124:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Tamper detection.
2125:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2126:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1 or RTC_Tamper_2
2127:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the tamper pin.
2128:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.                   
2129:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2130:FWLIB/src/stm32f4xx_rtc.c ****   */
2131:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
2132:FWLIB/src/stm32f4xx_rtc.c **** {
2133:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2134:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper));  
2135:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2136:FWLIB/src/stm32f4xx_rtc.c ****   
2137:FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
2138:FWLIB/src/stm32f4xx_rtc.c ****   {
2139:FWLIB/src/stm32f4xx_rtc.c ****     /* Enable the selected Tamper pin */
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 39


2140:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
2141:FWLIB/src/stm32f4xx_rtc.c ****   }
2142:FWLIB/src/stm32f4xx_rtc.c ****   else
2143:FWLIB/src/stm32f4xx_rtc.c ****   {
2144:FWLIB/src/stm32f4xx_rtc.c ****     /* Disable the selected Tamper pin */
2145:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
2146:FWLIB/src/stm32f4xx_rtc.c ****   }  
2147:FWLIB/src/stm32f4xx_rtc.c **** }
2148:FWLIB/src/stm32f4xx_rtc.c **** 
2149:FWLIB/src/stm32f4xx_rtc.c **** /**
2150:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Filter.
2151:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperFilter: Specifies the tampers filter.
2152:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2153:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_Disable: Tamper filter is disabled.
2154:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_2Sample: Tamper is activated after 2 consecutive 
2155:FWLIB/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2156:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_4Sample: Tamper is activated after 4 consecutive 
2157:FWLIB/src/stm32f4xx_rtc.c ****   *                                    samples at the active level
2158:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
2159:FWLIB/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2160:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2161:FWLIB/src/stm32f4xx_rtc.c ****   */
2162:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
2163:FWLIB/src/stm32f4xx_rtc.c **** {
2164:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2165:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
2166:FWLIB/src/stm32f4xx_rtc.c ****    
2167:FWLIB/src/stm32f4xx_rtc.c ****   /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
2168:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
2169:FWLIB/src/stm32f4xx_rtc.c **** 
2170:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2171:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
2172:FWLIB/src/stm32f4xx_rtc.c **** }
2173:FWLIB/src/stm32f4xx_rtc.c **** 
2174:FWLIB/src/stm32f4xx_rtc.c **** /**
2175:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Sampling Frequency.
2176:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperSamplingFreq: Specifies the tampers Sampling Frequency.
2177:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2178:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div32768: Each of the tamper inputs are sampled
2179:FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 32768
2180:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div16384: Each of the tamper inputs are sampled
2181:FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 16384
2182:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div8192: Each of the tamper inputs are sampled
2183:FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 8192
2184:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div4096: Each of the tamper inputs are sampled
2185:FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 4096
2186:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div2048: Each of the tamper inputs are sampled
2187:FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 2048
2188:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div1024: Each of the tamper inputs are sampled
2189:FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 1024
2190:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div512: Each of the tamper inputs are sampled
2191:FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 512  
2192:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
2193:FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 256  
2194:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2195:FWLIB/src/stm32f4xx_rtc.c ****   */
2196:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 40


2197:FWLIB/src/stm32f4xx_rtc.c **** {
2198:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2199:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
2200:FWLIB/src/stm32f4xx_rtc.c ****  
2201:FWLIB/src/stm32f4xx_rtc.c ****   /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
2202:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
2203:FWLIB/src/stm32f4xx_rtc.c **** 
2204:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2205:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
2206:FWLIB/src/stm32f4xx_rtc.c **** }
2207:FWLIB/src/stm32f4xx_rtc.c **** 
2208:FWLIB/src/stm32f4xx_rtc.c **** /**
2209:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Pins input Precharge Duration.
2210:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPrechargeDuration: Specifies the Tampers Pins input
2211:FWLIB/src/stm32f4xx_rtc.c ****   *         Precharge Duration.
2212:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2213:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_1RTCCLK: Tamper pins are precharged before sampling during
2214:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_2RTCCLK: Tamper pins are precharged before sampling during
2215:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are precharged before sampling during
2216:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are precharged before sampling during
2217:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2218:FWLIB/src/stm32f4xx_rtc.c ****   */
2219:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
2220:FWLIB/src/stm32f4xx_rtc.c **** {
2221:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2222:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
2223:FWLIB/src/stm32f4xx_rtc.c ****    
2224:FWLIB/src/stm32f4xx_rtc.c ****   /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
2225:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
2226:FWLIB/src/stm32f4xx_rtc.c **** 
2227:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2228:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
2229:FWLIB/src/stm32f4xx_rtc.c **** }
2230:FWLIB/src/stm32f4xx_rtc.c **** 
2231:FWLIB/src/stm32f4xx_rtc.c **** /**
2232:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the TimeStamp on Tamper Detection Event.
2233:FWLIB/src/stm32f4xx_rtc.c ****   * @note   The timestamp is valid even the TSE bit in tamper control register 
2234:FWLIB/src/stm32f4xx_rtc.c ****   *         is reset.   
2235:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the timestamp on tamper event.
2236:FWLIB/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
2237:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2238:FWLIB/src/stm32f4xx_rtc.c ****   */
2239:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
2240:FWLIB/src/stm32f4xx_rtc.c **** {
2241:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2242:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2243:FWLIB/src/stm32f4xx_rtc.c ****    
2244:FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
2245:FWLIB/src/stm32f4xx_rtc.c ****   {
2246:FWLIB/src/stm32f4xx_rtc.c ****     /* Save timestamp on tamper detection event */
2247:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
2248:FWLIB/src/stm32f4xx_rtc.c ****   }
2249:FWLIB/src/stm32f4xx_rtc.c ****   else
2250:FWLIB/src/stm32f4xx_rtc.c ****   {
2251:FWLIB/src/stm32f4xx_rtc.c ****     /* Tamper detection does not cause a timestamp to be saved */
2252:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
2253:FWLIB/src/stm32f4xx_rtc.c ****   }
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 41


2254:FWLIB/src/stm32f4xx_rtc.c **** }
2255:FWLIB/src/stm32f4xx_rtc.c **** 
2256:FWLIB/src/stm32f4xx_rtc.c **** /**
2257:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Precharge of Tamper pin.
2258:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of tamper pull up.
2259:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be: ENABLE or DISABLE.                   
2260:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2261:FWLIB/src/stm32f4xx_rtc.c ****   */
2262:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TamperPullUpCmd(FunctionalState NewState)
2263:FWLIB/src/stm32f4xx_rtc.c **** {
2264:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2265:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2266:FWLIB/src/stm32f4xx_rtc.c ****   
2267:FWLIB/src/stm32f4xx_rtc.c ****  if (NewState != DISABLE)
2268:FWLIB/src/stm32f4xx_rtc.c ****   {
2269:FWLIB/src/stm32f4xx_rtc.c ****     /* Enable precharge of the selected Tamper pin */
2270:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
2271:FWLIB/src/stm32f4xx_rtc.c ****   }
2272:FWLIB/src/stm32f4xx_rtc.c ****   else
2273:FWLIB/src/stm32f4xx_rtc.c ****   {
2274:FWLIB/src/stm32f4xx_rtc.c ****     /* Disable precharge of the selected Tamper pin */
2275:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
2276:FWLIB/src/stm32f4xx_rtc.c ****   } 
2277:FWLIB/src/stm32f4xx_rtc.c **** }
2278:FWLIB/src/stm32f4xx_rtc.c **** 
2279:FWLIB/src/stm32f4xx_rtc.c **** /**
2280:FWLIB/src/stm32f4xx_rtc.c ****   * @}
2281:FWLIB/src/stm32f4xx_rtc.c ****   */
2282:FWLIB/src/stm32f4xx_rtc.c **** 
2283:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group10 Backup Data Registers configuration functions
2284:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Backup Data Registers configuration functions  
2285:FWLIB/src/stm32f4xx_rtc.c ****  *
2286:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
2287:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
2288:FWLIB/src/stm32f4xx_rtc.c ****              ##### Backup Data Registers configuration functions ##### 
2289:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
2290:FWLIB/src/stm32f4xx_rtc.c **** 
2291:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
2292:FWLIB/src/stm32f4xx_rtc.c ****   * @{
2293:FWLIB/src/stm32f4xx_rtc.c ****   */
2294:FWLIB/src/stm32f4xx_rtc.c **** 
2295:FWLIB/src/stm32f4xx_rtc.c **** /**
2296:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Writes a data in a specified RTC Backup data register.
2297:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2298:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2299:FWLIB/src/stm32f4xx_rtc.c ****   *                          specify the register.
2300:FWLIB/src/stm32f4xx_rtc.c ****   * @param  Data: Data to be written in the specified RTC Backup data register.                    
2301:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2302:FWLIB/src/stm32f4xx_rtc.c ****   */
2303:FWLIB/src/stm32f4xx_rtc.c **** void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
2304:FWLIB/src/stm32f4xx_rtc.c **** {
2305:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
2306:FWLIB/src/stm32f4xx_rtc.c ****   
2307:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2308:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2309:FWLIB/src/stm32f4xx_rtc.c **** 
2310:FWLIB/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 42


2311:FWLIB/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
2312:FWLIB/src/stm32f4xx_rtc.c **** 
2313:FWLIB/src/stm32f4xx_rtc.c ****   /* Write the specified register */
2314:FWLIB/src/stm32f4xx_rtc.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
2315:FWLIB/src/stm32f4xx_rtc.c **** }
2316:FWLIB/src/stm32f4xx_rtc.c **** 
2317:FWLIB/src/stm32f4xx_rtc.c **** /**
2318:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Reads data from the specified RTC Backup data Register.
2319:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2320:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2321:FWLIB/src/stm32f4xx_rtc.c ****   *                          specify the register.                   
2322:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2323:FWLIB/src/stm32f4xx_rtc.c ****   */
2324:FWLIB/src/stm32f4xx_rtc.c **** uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
2325:FWLIB/src/stm32f4xx_rtc.c **** {
2326:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
2327:FWLIB/src/stm32f4xx_rtc.c ****   
2328:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2329:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2330:FWLIB/src/stm32f4xx_rtc.c **** 
2331:FWLIB/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
2332:FWLIB/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
2333:FWLIB/src/stm32f4xx_rtc.c ****   
2334:FWLIB/src/stm32f4xx_rtc.c ****   /* Read the specified register */
2335:FWLIB/src/stm32f4xx_rtc.c ****   return (*(__IO uint32_t *)tmp);
2336:FWLIB/src/stm32f4xx_rtc.c **** }
2337:FWLIB/src/stm32f4xx_rtc.c **** 
2338:FWLIB/src/stm32f4xx_rtc.c **** /**
2339:FWLIB/src/stm32f4xx_rtc.c ****   * @}
2340:FWLIB/src/stm32f4xx_rtc.c ****   */
2341:FWLIB/src/stm32f4xx_rtc.c **** 
2342:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group11 RTC Tamper and TimeStamp Pins Selection and Output Type Config configurat
2343:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   RTC Tamper and TimeStamp Pins Selection and Output Type Config 
2344:FWLIB/src/stm32f4xx_rtc.c ****  *           configuration functions  
2345:FWLIB/src/stm32f4xx_rtc.c ****  *
2346:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
2347:FWLIB/src/stm32f4xx_rtc.c ****  ==================================================================================================
2348:FWLIB/src/stm32f4xx_rtc.c ****  ##### RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration functions #####
2349:FWLIB/src/stm32f4xx_rtc.c ****  ==================================================================================================
2350:FWLIB/src/stm32f4xx_rtc.c **** 
2351:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
2352:FWLIB/src/stm32f4xx_rtc.c ****   * @{
2353:FWLIB/src/stm32f4xx_rtc.c ****   */
2354:FWLIB/src/stm32f4xx_rtc.c **** 
2355:FWLIB/src/stm32f4xx_rtc.c **** /**
2356:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC Tamper Pin.
2357:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPin: specifies the RTC Tamper Pin.
2358:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2359:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_Default: RTC_AF1 is used as RTC Tamper Pin.
2360:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_Pos1: RTC_AF2 is selected as RTC Tamper Pin.    
2361:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2362:FWLIB/src/stm32f4xx_rtc.c ****   */
2363:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
2364:FWLIB/src/stm32f4xx_rtc.c **** {
2365:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2366:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
2367:FWLIB/src/stm32f4xx_rtc.c ****   
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 43


2368:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
2369:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
2370:FWLIB/src/stm32f4xx_rtc.c **** }
2371:FWLIB/src/stm32f4xx_rtc.c **** 
2372:FWLIB/src/stm32f4xx_rtc.c **** /**
2373:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC TimeStamp Pin.
2374:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampPin: specifies the RTC TimeStamp Pin.
2375:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2376:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
2377:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
2378:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2379:FWLIB/src/stm32f4xx_rtc.c ****   */
2380:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
2381:FWLIB/src/stm32f4xx_rtc.c **** {
2382:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2383:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
2384:FWLIB/src/stm32f4xx_rtc.c ****   
2385:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
2386:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
2387:FWLIB/src/stm32f4xx_rtc.c **** }
2388:FWLIB/src/stm32f4xx_rtc.c **** 
2389:FWLIB/src/stm32f4xx_rtc.c **** /**
2390:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Output Pin mode. 
2391:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputType: specifies the RTC Output (PC13) pin mode.
2392:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2393:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_OpenDrain: RTC Output (PC13) is configured in 
2394:FWLIB/src/stm32f4xx_rtc.c ****   *                                    Open Drain mode.
2395:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
2396:FWLIB/src/stm32f4xx_rtc.c ****   *                                    Push Pull mode.    
2397:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2398:FWLIB/src/stm32f4xx_rtc.c ****   */
2399:FWLIB/src/stm32f4xx_rtc.c **** void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
2400:FWLIB/src/stm32f4xx_rtc.c **** {
2401:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2402:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
2403:FWLIB/src/stm32f4xx_rtc.c ****   
2404:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
2405:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
2406:FWLIB/src/stm32f4xx_rtc.c **** }
2407:FWLIB/src/stm32f4xx_rtc.c **** 
2408:FWLIB/src/stm32f4xx_rtc.c **** /**
2409:FWLIB/src/stm32f4xx_rtc.c ****   * @}
2410:FWLIB/src/stm32f4xx_rtc.c ****   */
2411:FWLIB/src/stm32f4xx_rtc.c **** 
2412:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group12 Shift control synchronisation functions
2413:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Shift control synchronisation functions 
2414:FWLIB/src/stm32f4xx_rtc.c ****  *
2415:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
2416:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
2417:FWLIB/src/stm32f4xx_rtc.c ****               ##### Shift control synchronisation functions #####
2418:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
2419:FWLIB/src/stm32f4xx_rtc.c **** 
2420:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
2421:FWLIB/src/stm32f4xx_rtc.c ****   * @{
2422:FWLIB/src/stm32f4xx_rtc.c ****   */
2423:FWLIB/src/stm32f4xx_rtc.c **** 
2424:FWLIB/src/stm32f4xx_rtc.c **** /**
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 44


2425:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the Synchronization Shift Control Settings.
2426:FWLIB/src/stm32f4xx_rtc.c ****   * @note   When REFCKON is set, firmware must not write to Shift control register 
2427:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftAdd1S : Select to add or not 1 second to the time Calendar.
2428:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values :
2429:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Set  : Add one second to the clock calendar. 
2430:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Reset: No effect.
2431:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftSubFS: Select the number of Second Fractions to Substitute.
2432:FWLIB/src/stm32f4xx_rtc.c ****   *         This parameter can be one any value from 0 to 0x7FFF.
2433:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
2434:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Shift registers are configured
2435:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Shift registers are not configured
2436:FWLIB/src/stm32f4xx_rtc.c **** */
2437:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
2438:FWLIB/src/stm32f4xx_rtc.c **** {
2439:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
2440:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t shpfcount = 0;
2441:FWLIB/src/stm32f4xx_rtc.c **** 
2442:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2443:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
2444:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));
2445:FWLIB/src/stm32f4xx_rtc.c **** 
2446:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2447:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
2448:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
2449:FWLIB/src/stm32f4xx_rtc.c ****   
2450:FWLIB/src/stm32f4xx_rtc.c ****   /* Check if a Shift is pending*/
2451:FWLIB/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
2452:FWLIB/src/stm32f4xx_rtc.c ****   {
2453:FWLIB/src/stm32f4xx_rtc.c ****     /* Wait until the shift is completed*/
2454:FWLIB/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
2455:FWLIB/src/stm32f4xx_rtc.c ****     {
2456:FWLIB/src/stm32f4xx_rtc.c ****       shpfcount++;
2457:FWLIB/src/stm32f4xx_rtc.c ****     }
2458:FWLIB/src/stm32f4xx_rtc.c ****   }
2459:FWLIB/src/stm32f4xx_rtc.c **** 
2460:FWLIB/src/stm32f4xx_rtc.c ****   /* Check if the Shift pending is completed or if there is no Shift operation at all*/
2461:FWLIB/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
2462:FWLIB/src/stm32f4xx_rtc.c ****   {
2463:FWLIB/src/stm32f4xx_rtc.c ****     /* check if the reference clock detection is disabled */
2464:FWLIB/src/stm32f4xx_rtc.c ****     if((RTC->CR & RTC_CR_REFCKON) == RESET)
2465:FWLIB/src/stm32f4xx_rtc.c ****     {
2466:FWLIB/src/stm32f4xx_rtc.c ****       /* Configure the Shift settings */
2467:FWLIB/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
2468:FWLIB/src/stm32f4xx_rtc.c ****     
2469:FWLIB/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
2470:FWLIB/src/stm32f4xx_rtc.c ****       {
2471:FWLIB/src/stm32f4xx_rtc.c ****         status = ERROR;
2472:FWLIB/src/stm32f4xx_rtc.c ****       }
2473:FWLIB/src/stm32f4xx_rtc.c ****       else
2474:FWLIB/src/stm32f4xx_rtc.c ****       {
2475:FWLIB/src/stm32f4xx_rtc.c ****         status = SUCCESS;
2476:FWLIB/src/stm32f4xx_rtc.c ****       }
2477:FWLIB/src/stm32f4xx_rtc.c ****     }
2478:FWLIB/src/stm32f4xx_rtc.c ****     else
2479:FWLIB/src/stm32f4xx_rtc.c ****     {
2480:FWLIB/src/stm32f4xx_rtc.c ****       status = ERROR;
2481:FWLIB/src/stm32f4xx_rtc.c ****     }
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 45


2482:FWLIB/src/stm32f4xx_rtc.c ****   }
2483:FWLIB/src/stm32f4xx_rtc.c ****   else
2484:FWLIB/src/stm32f4xx_rtc.c ****   {
2485:FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
2486:FWLIB/src/stm32f4xx_rtc.c ****   }
2487:FWLIB/src/stm32f4xx_rtc.c **** 
2488:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2489:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
2490:FWLIB/src/stm32f4xx_rtc.c ****   
2491:FWLIB/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
2492:FWLIB/src/stm32f4xx_rtc.c **** }
2493:FWLIB/src/stm32f4xx_rtc.c **** 
2494:FWLIB/src/stm32f4xx_rtc.c **** /**
2495:FWLIB/src/stm32f4xx_rtc.c ****   * @}
2496:FWLIB/src/stm32f4xx_rtc.c ****   */
2497:FWLIB/src/stm32f4xx_rtc.c **** 
2498:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group13 Interrupts and flags management functions
2499:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Interrupts and flags management functions  
2500:FWLIB/src/stm32f4xx_rtc.c ****  *
2501:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
2502:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
2503:FWLIB/src/stm32f4xx_rtc.c ****               ##### Interrupts and flags management functions #####
2504:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
2505:FWLIB/src/stm32f4xx_rtc.c ****  [..] All RTC interrupts are connected to the EXTI controller.
2506:FWLIB/src/stm32f4xx_rtc.c ****  
2507:FWLIB/src/stm32f4xx_rtc.c ****    (+) To enable the RTC Alarm interrupt, the following sequence is required:
2508:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the EXTI Line 17 in interrupt mode and select 
2509:FWLIB/src/stm32f4xx_rtc.c ****             the rising edge sensitivity using the EXTI_Init() function.
2510:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the RTC_Alarm IRQ channel in the NVIC using the 
2511:FWLIB/src/stm32f4xx_rtc.c ****             NVIC_Init() function.
2512:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure the RTC to generate RTC alarms (Alarm A and/or Alarm B) using
2513:FWLIB/src/stm32f4xx_rtc.c ****             the RTC_SetAlarm() and RTC_AlarmCmd() functions.
2514:FWLIB/src/stm32f4xx_rtc.c **** 
2515:FWLIB/src/stm32f4xx_rtc.c ****    (+) To enable the RTC Wakeup interrupt, the following sequence is required:
2516:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the EXTI Line 22 in interrupt mode and select the
2517:FWLIB/src/stm32f4xx_rtc.c ****             rising edge sensitivity using the EXTI_Init() function.
2518:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the RTC_WKUP IRQ channel in the NVIC using the 
2519:FWLIB/src/stm32f4xx_rtc.c ****             NVIC_Init() function.
2520:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure the RTC to generate the RTC wakeup timer event using the 
2521:FWLIB/src/stm32f4xx_rtc.c ****             RTC_WakeUpClockConfig(), RTC_SetWakeUpCounter() and RTC_WakeUpCmd() 
2522:FWLIB/src/stm32f4xx_rtc.c ****             functions.
2523:FWLIB/src/stm32f4xx_rtc.c **** 
2524:FWLIB/src/stm32f4xx_rtc.c ****    (+) To enable the RTC Tamper interrupt, the following sequence is required:
2525:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the EXTI Line 21 in interrupt mode and select 
2526:FWLIB/src/stm32f4xx_rtc.c ****             the rising edge sensitivity using the EXTI_Init() function.
2527:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the
2528:FWLIB/src/stm32f4xx_rtc.c ****             NVIC_Init() function.
2529:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure the RTC to detect the RTC tamper event using the 
2530:FWLIB/src/stm32f4xx_rtc.c ****             RTC_TamperTriggerConfig() and RTC_TamperCmd() functions.
2531:FWLIB/src/stm32f4xx_rtc.c **** 
2532:FWLIB/src/stm32f4xx_rtc.c ****    (+) To enable the RTC TimeStamp interrupt, the following sequence is required:
2533:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the EXTI Line 21 in interrupt mode and select the
2534:FWLIB/src/stm32f4xx_rtc.c ****             rising edge sensitivity using the EXTI_Init() function.
2535:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the 
2536:FWLIB/src/stm32f4xx_rtc.c ****             NVIC_Init() function.
2537:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure the RTC to detect the RTC time stamp event using the 
2538:FWLIB/src/stm32f4xx_rtc.c ****             RTC_TimeStampCmd() functions.
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 46


2539:FWLIB/src/stm32f4xx_rtc.c **** 
2540:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
2541:FWLIB/src/stm32f4xx_rtc.c ****   * @{
2542:FWLIB/src/stm32f4xx_rtc.c ****   */
2543:FWLIB/src/stm32f4xx_rtc.c **** 
2544:FWLIB/src/stm32f4xx_rtc.c **** /**
2545:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC interrupts.
2546:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt sources to be enabled or disabled. 
2547:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2548:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS:  Time Stamp interrupt mask
2549:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT:  WakeUp Timer interrupt mask
2550:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB:  Alarm B interrupt mask
2551:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA:  Alarm A interrupt mask
2552:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP: Tamper event interrupt mask
2553:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified RTC interrupts.
2554:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
2555:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2556:FWLIB/src/stm32f4xx_rtc.c ****   */
2557:FWLIB/src/stm32f4xx_rtc.c **** void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
2558:FWLIB/src/stm32f4xx_rtc.c **** {
2559:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2560:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CONFIG_IT(RTC_IT));
2561:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2562:FWLIB/src/stm32f4xx_rtc.c **** 
2563:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2564:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
2565:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
2566:FWLIB/src/stm32f4xx_rtc.c **** 
2567:FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
2568:FWLIB/src/stm32f4xx_rtc.c ****   {
2569:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2570:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
2571:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2572:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
2573:FWLIB/src/stm32f4xx_rtc.c ****   }
2574:FWLIB/src/stm32f4xx_rtc.c ****   else
2575:FWLIB/src/stm32f4xx_rtc.c ****   {
2576:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2577:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
2578:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2579:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
2580:FWLIB/src/stm32f4xx_rtc.c ****   }
2581:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2582:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
2583:FWLIB/src/stm32f4xx_rtc.c **** }
2584:FWLIB/src/stm32f4xx_rtc.c **** 
2585:FWLIB/src/stm32f4xx_rtc.c **** /**
2586:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC flag is set or not.
2587:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the flag to check.
2588:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2589:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RECALPF: RECALPF event flag.
2590:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2591:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP2F: Tamper 2 event flag
2592:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp OverFlow flag
2593:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2594:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2595:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 47


2596:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2597:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITF: Initialization mode flag
2598:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2599:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITS: Registers Configured flag
2600:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_SHPF: Shift operation pending flag.
2601:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTWF: WakeUp Timer Write flag
2602:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
2603:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
2604:FWLIB/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_FLAG (SET or RESET).
2605:FWLIB/src/stm32f4xx_rtc.c ****   */
2606:FWLIB/src/stm32f4xx_rtc.c **** FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
2607:FWLIB/src/stm32f4xx_rtc.c **** {
2608:FWLIB/src/stm32f4xx_rtc.c ****   FlagStatus bitstatus = RESET;
2609:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
2610:FWLIB/src/stm32f4xx_rtc.c ****   
2611:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2612:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
2613:FWLIB/src/stm32f4xx_rtc.c ****   
2614:FWLIB/src/stm32f4xx_rtc.c ****   /* Get all the flags */
2615:FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
2616:FWLIB/src/stm32f4xx_rtc.c ****   
2617:FWLIB/src/stm32f4xx_rtc.c ****   /* Return the status of the flag */
2618:FWLIB/src/stm32f4xx_rtc.c ****   if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
2619:FWLIB/src/stm32f4xx_rtc.c ****   {
2620:FWLIB/src/stm32f4xx_rtc.c ****     bitstatus = SET;
2621:FWLIB/src/stm32f4xx_rtc.c ****   }
2622:FWLIB/src/stm32f4xx_rtc.c ****   else
2623:FWLIB/src/stm32f4xx_rtc.c ****   {
2624:FWLIB/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
2625:FWLIB/src/stm32f4xx_rtc.c ****   }
2626:FWLIB/src/stm32f4xx_rtc.c ****   return bitstatus;
2627:FWLIB/src/stm32f4xx_rtc.c **** }
2628:FWLIB/src/stm32f4xx_rtc.c **** 
2629:FWLIB/src/stm32f4xx_rtc.c **** /**
2630:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's pending flags.
2631:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the RTC flag to clear.
2632:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2633:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2634:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP2F: Tamper 2 event flag
2635:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp Overflow flag 
2636:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2637:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2638:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2639:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2640:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2641:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2642:FWLIB/src/stm32f4xx_rtc.c ****   */
2643:FWLIB/src/stm32f4xx_rtc.c **** void RTC_ClearFlag(uint32_t RTC_FLAG)
2644:FWLIB/src/stm32f4xx_rtc.c **** {
2645:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2646:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));
2647:FWLIB/src/stm32f4xx_rtc.c **** 
2648:FWLIB/src/stm32f4xx_rtc.c ****   /* Clear the Flags in the RTC_ISR register */
2649:FWLIB/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR &
2650:FWLIB/src/stm32f4xx_rtc.c **** }
2651:FWLIB/src/stm32f4xx_rtc.c **** 
2652:FWLIB/src/stm32f4xx_rtc.c **** /**
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 48


2653:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC interrupt has occurred or not.
2654:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt source to check.
2655:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2656:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2657:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2658:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2659:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2660:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt
2661:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP2: Tamper 2 event interrupt
2662:FWLIB/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_IT (SET or RESET).
2663:FWLIB/src/stm32f4xx_rtc.c ****   */
2664:FWLIB/src/stm32f4xx_rtc.c **** ITStatus RTC_GetITStatus(uint32_t RTC_IT)
2665:FWLIB/src/stm32f4xx_rtc.c **** {
2666:FWLIB/src/stm32f4xx_rtc.c ****   ITStatus bitstatus = RESET;
2667:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0, enablestatus = 0;
2668:FWLIB/src/stm32f4xx_rtc.c ****  
2669:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2670:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_IT(RTC_IT));
2671:FWLIB/src/stm32f4xx_rtc.c ****   
2672:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the TAMPER Interrupt enable bit and pending bit */
2673:FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
2674:FWLIB/src/stm32f4xx_rtc.c ****  
2675:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the Interrupt enable Status */
2676:FWLIB/src/stm32f4xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)) | (tmpreg & (RTC_IT >> 1
2677:FWLIB/src/stm32f4xx_rtc.c ****   
2678:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the Interrupt pending bit */
2679:FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
2680:FWLIB/src/stm32f4xx_rtc.c ****   
2681:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the status of the Interrupt */
2682:FWLIB/src/stm32f4xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
2683:FWLIB/src/stm32f4xx_rtc.c ****   {
2684:FWLIB/src/stm32f4xx_rtc.c ****     bitstatus = SET;
2685:FWLIB/src/stm32f4xx_rtc.c ****   }
2686:FWLIB/src/stm32f4xx_rtc.c ****   else
2687:FWLIB/src/stm32f4xx_rtc.c ****   {
2688:FWLIB/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
2689:FWLIB/src/stm32f4xx_rtc.c ****   }
2690:FWLIB/src/stm32f4xx_rtc.c ****   return bitstatus;
2691:FWLIB/src/stm32f4xx_rtc.c **** }
2692:FWLIB/src/stm32f4xx_rtc.c **** 
2693:FWLIB/src/stm32f4xx_rtc.c **** /**
2694:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's interrupt pending bits.
2695:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt pending bit to clear.
2696:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2697:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2698:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2699:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2700:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2701:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt
2702:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP2: Tamper 2 event interrupt 
2703:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2704:FWLIB/src/stm32f4xx_rtc.c ****   */
2705:FWLIB/src/stm32f4xx_rtc.c **** void RTC_ClearITPendingBit(uint32_t RTC_IT)
2706:FWLIB/src/stm32f4xx_rtc.c **** {
2707:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
2708:FWLIB/src/stm32f4xx_rtc.c **** 
2709:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 49


2710:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_IT(RTC_IT));
2711:FWLIB/src/stm32f4xx_rtc.c **** 
2712:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the RTC_ISR Interrupt pending bits mask */
2713:FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC_IT >> 4);
2714:FWLIB/src/stm32f4xx_rtc.c **** 
2715:FWLIB/src/stm32f4xx_rtc.c ****   /* Clear the interrupt pending bits in the RTC_ISR register */
2716:FWLIB/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
2717:FWLIB/src/stm32f4xx_rtc.c **** }
2718:FWLIB/src/stm32f4xx_rtc.c **** 
2719:FWLIB/src/stm32f4xx_rtc.c **** /**
2720:FWLIB/src/stm32f4xx_rtc.c ****   * @}
2721:FWLIB/src/stm32f4xx_rtc.c ****   */
2722:FWLIB/src/stm32f4xx_rtc.c **** 
2723:FWLIB/src/stm32f4xx_rtc.c **** /**
2724:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
2725:FWLIB/src/stm32f4xx_rtc.c ****   * @param  Value: Byte to be converted.
2726:FWLIB/src/stm32f4xx_rtc.c ****   * @retval Converted byte
2727:FWLIB/src/stm32f4xx_rtc.c ****   */
2728:FWLIB/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value)
2729:FWLIB/src/stm32f4xx_rtc.c **** {
  29              		.loc 1 2729 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
2730:FWLIB/src/stm32f4xx_rtc.c ****   uint8_t bcdhigh = 0;
  35              		.loc 1 2730 0
  36 0000 0023     		movs	r3, #0
2731:FWLIB/src/stm32f4xx_rtc.c ****   
2732:FWLIB/src/stm32f4xx_rtc.c ****   while (Value >= 10)
  37              		.loc 1 2732 0
  38 0002 03E0     		b	.L2
  39              	.LVL1:
  40              	.L3:
2733:FWLIB/src/stm32f4xx_rtc.c ****   {
2734:FWLIB/src/stm32f4xx_rtc.c ****     bcdhigh++;
  41              		.loc 1 2734 0
  42 0004 0133     		adds	r3, r3, #1
  43              	.LVL2:
  44 0006 DBB2     		uxtb	r3, r3
  45              	.LVL3:
2735:FWLIB/src/stm32f4xx_rtc.c ****     Value -= 10;
  46              		.loc 1 2735 0
  47 0008 0A38     		subs	r0, r0, #10
  48              	.LVL4:
  49 000a C0B2     		uxtb	r0, r0
  50              	.LVL5:
  51              	.L2:
2732:FWLIB/src/stm32f4xx_rtc.c ****   {
  52              		.loc 1 2732 0
  53 000c 0928     		cmp	r0, #9
  54 000e F9D8     		bhi	.L3
2736:FWLIB/src/stm32f4xx_rtc.c ****   }
2737:FWLIB/src/stm32f4xx_rtc.c ****   
2738:FWLIB/src/stm32f4xx_rtc.c ****   return  ((uint8_t)(bcdhigh << 4) | Value);
  55              		.loc 1 2738 0
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 50


  56 0010 1B01     		lsls	r3, r3, #4
  57              	.LVL6:
  58 0012 DBB2     		uxtb	r3, r3
2739:FWLIB/src/stm32f4xx_rtc.c **** }
  59              		.loc 1 2739 0
  60 0014 1843     		orrs	r0, r0, r3
  61              	.LVL7:
  62 0016 7047     		bx	lr
  63              		.cfi_endproc
  64              	.LFE178:
  66              		.section	.text.RTC_Bcd2ToByte,"ax",%progbits
  67              		.align	2
  68              		.thumb
  69              		.thumb_func
  71              	RTC_Bcd2ToByte:
  72              	.LFB179:
2740:FWLIB/src/stm32f4xx_rtc.c **** 
2741:FWLIB/src/stm32f4xx_rtc.c **** /**
2742:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Convert from 2 digit BCD to Binary.
2743:FWLIB/src/stm32f4xx_rtc.c ****   * @param  Value: BCD value to be converted.
2744:FWLIB/src/stm32f4xx_rtc.c ****   * @retval Converted word
2745:FWLIB/src/stm32f4xx_rtc.c ****   */
2746:FWLIB/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value)
2747:FWLIB/src/stm32f4xx_rtc.c **** {
  73              		.loc 1 2747 0
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 0
  76              		@ frame_needed = 0, uses_anonymous_args = 0
  77              		@ link register save eliminated.
  78              	.LVL8:
2748:FWLIB/src/stm32f4xx_rtc.c ****   uint8_t tmp = 0;
2749:FWLIB/src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
  79              		.loc 1 2749 0
  80 0000 0309     		lsrs	r3, r0, #4
  81 0002 03EB8303 		add	r3, r3, r3, lsl #2
  82 0006 5A00     		lsls	r2, r3, #1
  83 0008 D2B2     		uxtb	r2, r2
  84              	.LVL9:
2750:FWLIB/src/stm32f4xx_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
  85              		.loc 1 2750 0
  86 000a 00F00F00 		and	r0, r0, #15
  87              	.LVL10:
  88 000e 1044     		add	r0, r0, r2
2751:FWLIB/src/stm32f4xx_rtc.c **** }
  89              		.loc 1 2751 0
  90 0010 C0B2     		uxtb	r0, r0
  91 0012 7047     		bx	lr
  92              		.cfi_endproc
  93              	.LFE179:
  95              		.section	.text.RTC_StructInit,"ax",%progbits
  96              		.align	2
  97              		.global	RTC_StructInit
  98              		.thumb
  99              		.thumb_func
 101              	RTC_StructInit:
 102              	.LFB125:
 504:FWLIB/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_HourFormat member */
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 51


 103              		.loc 1 504 0
 104              		.cfi_startproc
 105              		@ args = 0, pretend = 0, frame = 0
 106              		@ frame_needed = 0, uses_anonymous_args = 0
 107              		@ link register save eliminated.
 108              	.LVL11:
 506:FWLIB/src/stm32f4xx_rtc.c ****     
 109              		.loc 1 506 0
 110 0000 0023     		movs	r3, #0
 111 0002 0360     		str	r3, [r0]
 509:FWLIB/src/stm32f4xx_rtc.c **** 
 112              		.loc 1 509 0
 113 0004 7F23     		movs	r3, #127
 114 0006 4360     		str	r3, [r0, #4]
 512:FWLIB/src/stm32f4xx_rtc.c **** }
 115              		.loc 1 512 0
 116 0008 FF23     		movs	r3, #255
 117 000a 8360     		str	r3, [r0, #8]
 118 000c 7047     		bx	lr
 119              		.cfi_endproc
 120              	.LFE125:
 122 000e 00BF     		.section	.text.RTC_WriteProtectionCmd,"ax",%progbits
 123              		.align	2
 124              		.global	RTC_WriteProtectionCmd
 125              		.thumb
 126              		.thumb_func
 128              	RTC_WriteProtectionCmd:
 129              	.LFB126:
 526:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 130              		.loc 1 526 0
 131              		.cfi_startproc
 132              		@ args = 0, pretend = 0, frame = 0
 133              		@ frame_needed = 0, uses_anonymous_args = 0
 134              		@ link register save eliminated.
 135              	.LVL12:
 530:FWLIB/src/stm32f4xx_rtc.c ****   {
 136              		.loc 1 530 0
 137 0000 18B1     		cbz	r0, .L7
 533:FWLIB/src/stm32f4xx_rtc.c ****   }
 138              		.loc 1 533 0
 139 0002 FF22     		movs	r2, #255
 140 0004 044B     		ldr	r3, .L9
 141 0006 5A62     		str	r2, [r3, #36]
 142 0008 7047     		bx	lr
 143              	.L7:
 538:FWLIB/src/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 144              		.loc 1 538 0
 145 000a 034B     		ldr	r3, .L9
 146 000c CA22     		movs	r2, #202
 147 000e 5A62     		str	r2, [r3, #36]
 539:FWLIB/src/stm32f4xx_rtc.c ****   }
 148              		.loc 1 539 0
 149 0010 5322     		movs	r2, #83
 150 0012 5A62     		str	r2, [r3, #36]
 151 0014 7047     		bx	lr
 152              	.L10:
 153 0016 00BF     		.align	2
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 52


 154              	.L9:
 155 0018 00280040 		.word	1073752064
 156              		.cfi_endproc
 157              	.LFE126:
 159              		.section	.text.RTC_EnterInitMode,"ax",%progbits
 160              		.align	2
 161              		.global	RTC_EnterInitMode
 162              		.thumb
 163              		.thumb_func
 165              	RTC_EnterInitMode:
 166              	.LFB127:
 553:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 167              		.loc 1 553 0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 8
 170              		@ frame_needed = 0, uses_anonymous_args = 0
 171              		@ link register save eliminated.
 172 0000 82B0     		sub	sp, sp, #8
 173              	.LCFI0:
 174              		.cfi_def_cfa_offset 8
 554:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 175              		.loc 1 554 0
 176 0002 0023     		movs	r3, #0
 177 0004 0193     		str	r3, [sp, #4]
 178              	.LVL13:
 559:FWLIB/src/stm32f4xx_rtc.c ****   {
 179              		.loc 1 559 0
 180 0006 114B     		ldr	r3, .L18
 181 0008 DB68     		ldr	r3, [r3, #12]
 182 000a 13F0400F 		tst	r3, #64
 183 000e 17D1     		bne	.L15
 562:FWLIB/src/stm32f4xx_rtc.c ****     
 184              		.loc 1 562 0
 185 0010 4FF0FF32 		mov	r2, #-1
 186 0014 0D4B     		ldr	r3, .L18
 187 0016 DA60     		str	r2, [r3, #12]
 188              	.LVL14:
 189              	.L14:
 567:FWLIB/src/stm32f4xx_rtc.c ****       initcounter++;  
 190              		.loc 1 567 0 discriminator 2
 191 0018 0C4B     		ldr	r3, .L18
 192 001a DB68     		ldr	r3, [r3, #12]
 193 001c 03F04002 		and	r2, r3, #64
 194              	.LVL15:
 568:FWLIB/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 195              		.loc 1 568 0 discriminator 2
 196 0020 019B     		ldr	r3, [sp, #4]
 197 0022 0133     		adds	r3, r3, #1
 198 0024 0193     		str	r3, [sp, #4]
 569:FWLIB/src/stm32f4xx_rtc.c ****     
 199              		.loc 1 569 0 discriminator 2
 200 0026 019B     		ldr	r3, [sp, #4]
 201 0028 B3F5803F 		cmp	r3, #65536
 202 002c 01D0     		beq	.L13
 569:FWLIB/src/stm32f4xx_rtc.c ****     
 203              		.loc 1 569 0 is_stmt 0 discriminator 1
 204 002e 002A     		cmp	r2, #0
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 53


 205 0030 F2D0     		beq	.L14
 206              	.L13:
 571:FWLIB/src/stm32f4xx_rtc.c ****     {
 207              		.loc 1 571 0 is_stmt 1
 208 0032 064B     		ldr	r3, .L18
 209 0034 DB68     		ldr	r3, [r3, #12]
 210 0036 13F0400F 		tst	r3, #64
 211 003a 03D0     		beq	.L16
 573:FWLIB/src/stm32f4xx_rtc.c ****     }
 212              		.loc 1 573 0
 213 003c 0120     		movs	r0, #1
 214 003e 02E0     		b	.L12
 215              	.LVL16:
 216              	.L15:
 582:FWLIB/src/stm32f4xx_rtc.c ****   } 
 217              		.loc 1 582 0
 218 0040 0120     		movs	r0, #1
 219 0042 00E0     		b	.L12
 220              	.LVL17:
 221              	.L16:
 577:FWLIB/src/stm32f4xx_rtc.c ****     }        
 222              		.loc 1 577 0
 223 0044 0020     		movs	r0, #0
 224              	.LVL18:
 225              	.L12:
 586:FWLIB/src/stm32f4xx_rtc.c **** 
 226              		.loc 1 586 0
 227 0046 02B0     		add	sp, sp, #8
 228              	.LCFI1:
 229              		.cfi_def_cfa_offset 0
 230              		@ sp needed
 231 0048 7047     		bx	lr
 232              	.L19:
 233 004a 00BF     		.align	2
 234              	.L18:
 235 004c 00280040 		.word	1073752064
 236              		.cfi_endproc
 237              	.LFE127:
 239              		.section	.text.RTC_ExitInitMode,"ax",%progbits
 240              		.align	2
 241              		.global	RTC_ExitInitMode
 242              		.thumb
 243              		.thumb_func
 245              	RTC_ExitInitMode:
 246              	.LFB128:
 598:FWLIB/src/stm32f4xx_rtc.c ****   /* Exit Initialization mode */
 247              		.loc 1 598 0
 248              		.cfi_startproc
 249              		@ args = 0, pretend = 0, frame = 0
 250              		@ frame_needed = 0, uses_anonymous_args = 0
 251              		@ link register save eliminated.
 600:FWLIB/src/stm32f4xx_rtc.c **** }
 252              		.loc 1 600 0
 253 0000 024A     		ldr	r2, .L21
 254 0002 D368     		ldr	r3, [r2, #12]
 255 0004 23F08003 		bic	r3, r3, #128
 256 0008 D360     		str	r3, [r2, #12]
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 54


 257 000a 7047     		bx	lr
 258              	.L22:
 259              		.align	2
 260              	.L21:
 261 000c 00280040 		.word	1073752064
 262              		.cfi_endproc
 263              	.LFE128:
 265              		.section	.text.RTC_Init,"ax",%progbits
 266              		.align	2
 267              		.global	RTC_Init
 268              		.thumb
 269              		.thumb_func
 271              	RTC_Init:
 272              	.LFB124:
 458:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 273              		.loc 1 458 0
 274              		.cfi_startproc
 275              		@ args = 0, pretend = 0, frame = 0
 276              		@ frame_needed = 0, uses_anonymous_args = 0
 277              	.LVL19:
 278 0000 10B5     		push	{r4, lr}
 279              	.LCFI2:
 280              		.cfi_def_cfa_offset 8
 281              		.cfi_offset 4, -8
 282              		.cfi_offset 14, -4
 283 0002 0446     		mov	r4, r0
 284              	.LVL20:
 467:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 285              		.loc 1 467 0
 286 0004 104B     		ldr	r3, .L27
 287 0006 CA22     		movs	r2, #202
 288 0008 5A62     		str	r2, [r3, #36]
 468:FWLIB/src/stm32f4xx_rtc.c **** 
 289              		.loc 1 468 0
 290 000a 5322     		movs	r2, #83
 291 000c 5A62     		str	r2, [r3, #36]
 471:FWLIB/src/stm32f4xx_rtc.c ****   {
 292              		.loc 1 471 0
 293 000e FFF7FEFF 		bl	RTC_EnterInitMode
 294              	.LVL21:
 295 0012 98B1     		cbz	r0, .L25
 478:FWLIB/src/stm32f4xx_rtc.c ****     /* Set RTC_CR register */
 296              		.loc 1 478 0
 297 0014 0C4B     		ldr	r3, .L27
 298 0016 9A68     		ldr	r2, [r3, #8]
 299 0018 22F04002 		bic	r2, r2, #64
 300 001c 9A60     		str	r2, [r3, #8]
 480:FWLIB/src/stm32f4xx_rtc.c ****   
 301              		.loc 1 480 0
 302 001e 9968     		ldr	r1, [r3, #8]
 303 0020 2268     		ldr	r2, [r4]
 304 0022 0A43     		orrs	r2, r2, r1
 305 0024 9A60     		str	r2, [r3, #8]
 483:FWLIB/src/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 306              		.loc 1 483 0
 307 0026 A268     		ldr	r2, [r4, #8]
 308 0028 1A61     		str	r2, [r3, #16]
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 55


 484:FWLIB/src/stm32f4xx_rtc.c **** 
 309              		.loc 1 484 0
 310 002a 1A69     		ldr	r2, [r3, #16]
 311 002c 6168     		ldr	r1, [r4, #4]
 312 002e 42EA0142 		orr	r2, r2, r1, lsl #16
 313 0032 1A61     		str	r2, [r3, #16]
 487:FWLIB/src/stm32f4xx_rtc.c **** 
 314              		.loc 1 487 0
 315 0034 FFF7FEFF 		bl	RTC_ExitInitMode
 316              	.LVL22:
 489:FWLIB/src/stm32f4xx_rtc.c ****   }
 317              		.loc 1 489 0
 318 0038 0120     		movs	r0, #1
 319 003a 00E0     		b	.L24
 320              	.LVL23:
 321              	.L25:
 473:FWLIB/src/stm32f4xx_rtc.c ****   } 
 322              		.loc 1 473 0
 323 003c 0020     		movs	r0, #0
 324              	.LVL24:
 325              	.L24:
 492:FWLIB/src/stm32f4xx_rtc.c ****   
 326              		.loc 1 492 0
 327 003e FF22     		movs	r2, #255
 328 0040 014B     		ldr	r3, .L27
 329 0042 5A62     		str	r2, [r3, #36]
 495:FWLIB/src/stm32f4xx_rtc.c **** 
 330              		.loc 1 495 0
 331 0044 10BD     		pop	{r4, pc}
 332              	.LVL25:
 333              	.L28:
 334 0046 00BF     		.align	2
 335              	.L27:
 336 0048 00280040 		.word	1073752064
 337              		.cfi_endproc
 338              	.LFE124:
 340              		.section	.text.RTC_WaitForSynchro,"ax",%progbits
 341              		.align	2
 342              		.global	RTC_WaitForSynchro
 343              		.thumb
 344              		.thumb_func
 346              	RTC_WaitForSynchro:
 347              	.LFB129:
 620:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 348              		.loc 1 620 0
 349              		.cfi_startproc
 350              		@ args = 0, pretend = 0, frame = 8
 351              		@ frame_needed = 0, uses_anonymous_args = 0
 352              		@ link register save eliminated.
 353 0000 82B0     		sub	sp, sp, #8
 354              	.LCFI3:
 355              		.cfi_def_cfa_offset 8
 621:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 356              		.loc 1 621 0
 357 0002 0023     		movs	r3, #0
 358 0004 0193     		str	r3, [sp, #4]
 359              	.LVL26:
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 56


 626:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 360              		.loc 1 626 0
 361 0006 114B     		ldr	r3, .L35
 362 0008 CA22     		movs	r2, #202
 363 000a 5A62     		str	r2, [r3, #36]
 627:FWLIB/src/stm32f4xx_rtc.c ****     
 364              		.loc 1 627 0
 365 000c 5322     		movs	r2, #83
 366 000e 5A62     		str	r2, [r3, #36]
 630:FWLIB/src/stm32f4xx_rtc.c ****     
 367              		.loc 1 630 0
 368 0010 DA68     		ldr	r2, [r3, #12]
 369 0012 22F0A002 		bic	r2, r2, #160
 370 0016 DA60     		str	r2, [r3, #12]
 371              	.LVL27:
 372              	.L31:
 635:FWLIB/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 373              		.loc 1 635 0 discriminator 2
 374 0018 0C4B     		ldr	r3, .L35
 375 001a DB68     		ldr	r3, [r3, #12]
 376 001c 03F02002 		and	r2, r3, #32
 377              	.LVL28:
 636:FWLIB/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 378              		.loc 1 636 0 discriminator 2
 379 0020 019B     		ldr	r3, [sp, #4]
 380 0022 0133     		adds	r3, r3, #1
 381 0024 0193     		str	r3, [sp, #4]
 637:FWLIB/src/stm32f4xx_rtc.c ****     
 382              		.loc 1 637 0 discriminator 2
 383 0026 019B     		ldr	r3, [sp, #4]
 384 0028 B3F5003F 		cmp	r3, #131072
 385 002c 01D0     		beq	.L30
 637:FWLIB/src/stm32f4xx_rtc.c ****     
 386              		.loc 1 637 0 is_stmt 0 discriminator 1
 387 002e 002A     		cmp	r2, #0
 388 0030 F2D0     		beq	.L31
 389              	.L30:
 639:FWLIB/src/stm32f4xx_rtc.c ****   {
 390              		.loc 1 639 0 is_stmt 1
 391 0032 064B     		ldr	r3, .L35
 392 0034 DB68     		ldr	r3, [r3, #12]
 393 0036 13F0200F 		tst	r3, #32
 394 003a 01D0     		beq	.L33
 641:FWLIB/src/stm32f4xx_rtc.c ****   }
 395              		.loc 1 641 0
 396 003c 0120     		movs	r0, #1
 397 003e 00E0     		b	.L32
 398              	.L33:
 645:FWLIB/src/stm32f4xx_rtc.c ****   }        
 399              		.loc 1 645 0
 400 0040 0020     		movs	r0, #0
 401              	.L32:
 402              	.LVL29:
 649:FWLIB/src/stm32f4xx_rtc.c ****     
 403              		.loc 1 649 0
 404 0042 FF22     		movs	r2, #255
 405              	.LVL30:
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 57


 406 0044 014B     		ldr	r3, .L35
 407 0046 5A62     		str	r2, [r3, #36]
 652:FWLIB/src/stm32f4xx_rtc.c **** 
 408              		.loc 1 652 0
 409 0048 02B0     		add	sp, sp, #8
 410              	.LCFI4:
 411              		.cfi_def_cfa_offset 0
 412              		@ sp needed
 413 004a 7047     		bx	lr
 414              	.L36:
 415              		.align	2
 416              	.L35:
 417 004c 00280040 		.word	1073752064
 418              		.cfi_endproc
 419              	.LFE129:
 421              		.section	.text.RTC_DeInit,"ax",%progbits
 422              		.align	2
 423              		.global	RTC_DeInit
 424              		.thumb
 425              		.thumb_func
 427              	RTC_DeInit:
 428              	.LFB123:
 376:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 429              		.loc 1 376 0
 430              		.cfi_startproc
 431              		@ args = 0, pretend = 0, frame = 8
 432              		@ frame_needed = 0, uses_anonymous_args = 0
 433 0000 00B5     		push	{lr}
 434              	.LCFI5:
 435              		.cfi_def_cfa_offset 4
 436              		.cfi_offset 14, -4
 437 0002 83B0     		sub	sp, sp, #12
 438              	.LCFI6:
 439              		.cfi_def_cfa_offset 16
 377:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 440              		.loc 1 377 0
 441 0004 0023     		movs	r3, #0
 442 0006 0193     		str	r3, [sp, #4]
 443              	.LVL31:
 382:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 444              		.loc 1 382 0
 445 0008 224B     		ldr	r3, .L45
 446 000a CA22     		movs	r2, #202
 447 000c 5A62     		str	r2, [r3, #36]
 383:FWLIB/src/stm32f4xx_rtc.c **** 
 448              		.loc 1 383 0
 449 000e 5322     		movs	r2, #83
 450 0010 5A62     		str	r2, [r3, #36]
 386:FWLIB/src/stm32f4xx_rtc.c ****   {
 451              		.loc 1 386 0
 452 0012 FFF7FEFF 		bl	RTC_EnterInitMode
 453              	.LVL32:
 454 0016 0028     		cmp	r0, #0
 455 0018 31D0     		beq	.L41
 393:FWLIB/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
 456              		.loc 1 393 0
 457 001a 1E4B     		ldr	r3, .L45
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 58


 458 001c 0022     		movs	r2, #0
 459 001e 1A60     		str	r2, [r3]
 394:FWLIB/src/stm32f4xx_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 460              		.loc 1 394 0
 461 0020 42F20112 		movw	r2, #8449
 462 0024 5A60     		str	r2, [r3, #4]
 396:FWLIB/src/stm32f4xx_rtc.c ****   
 463              		.loc 1 396 0
 464 0026 9A68     		ldr	r2, [r3, #8]
 465 0028 02F00702 		and	r2, r2, #7
 466 002c 9A60     		str	r2, [r3, #8]
 467              	.LVL33:
 468              	.L40:
 401:FWLIB/src/stm32f4xx_rtc.c ****       wutcounter++;  
 469              		.loc 1 401 0 discriminator 2
 470 002e 194B     		ldr	r3, .L45
 471 0030 DB68     		ldr	r3, [r3, #12]
 472 0032 03F00402 		and	r2, r3, #4
 473              	.LVL34:
 402:FWLIB/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 474              		.loc 1 402 0 discriminator 2
 475 0036 019B     		ldr	r3, [sp, #4]
 476 0038 0133     		adds	r3, r3, #1
 477 003a 0193     		str	r3, [sp, #4]
 403:FWLIB/src/stm32f4xx_rtc.c ****     
 478              		.loc 1 403 0 discriminator 2
 479 003c 019B     		ldr	r3, [sp, #4]
 480 003e B3F5803F 		cmp	r3, #65536
 481 0042 01D0     		beq	.L39
 403:FWLIB/src/stm32f4xx_rtc.c ****     
 482              		.loc 1 403 0 is_stmt 0 discriminator 1
 483 0044 002A     		cmp	r2, #0
 484 0046 F2D0     		beq	.L40
 485              	.L39:
 405:FWLIB/src/stm32f4xx_rtc.c ****     {
 486              		.loc 1 405 0 is_stmt 1
 487 0048 124B     		ldr	r3, .L45
 488 004a DB68     		ldr	r3, [r3, #12]
 489 004c 13F0040F 		tst	r3, #4
 490 0050 17D0     		beq	.L42
 412:FWLIB/src/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 491              		.loc 1 412 0
 492 0052 104B     		ldr	r3, .L45
 493 0054 9A68     		ldr	r2, [r3, #8]
 494              	.LVL35:
 495 0056 0022     		movs	r2, #0
 496 0058 9A60     		str	r2, [r3, #8]
 413:FWLIB/src/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 497              		.loc 1 413 0
 498 005a 4FF6FF71 		movw	r1, #65535
 499 005e 5961     		str	r1, [r3, #20]
 414:FWLIB/src/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 500              		.loc 1 414 0
 501 0060 0D49     		ldr	r1, .L45+4
 502 0062 1961     		str	r1, [r3, #16]
 415:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 503              		.loc 1 415 0
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 59


 504 0064 9A61     		str	r2, [r3, #24]
 416:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 505              		.loc 1 416 0
 506 0066 DA61     		str	r2, [r3, #28]
 417:FWLIB/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)0x00000000;
 507              		.loc 1 417 0
 508 0068 1A62     		str	r2, [r3, #32]
 418:FWLIB/src/stm32f4xx_rtc.c ****       RTC->CALR = (uint32_t)0x00000000;
 509              		.loc 1 418 0
 510 006a DA62     		str	r2, [r3, #44]
 419:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMASSR = (uint32_t)0x00000000;
 511              		.loc 1 419 0
 512 006c DA63     		str	r2, [r3, #60]
 420:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMBSSR = (uint32_t)0x00000000;
 513              		.loc 1 420 0
 514 006e 5A64     		str	r2, [r3, #68]
 421:FWLIB/src/stm32f4xx_rtc.c ****       
 515              		.loc 1 421 0
 516 0070 9A64     		str	r2, [r3, #72]
 424:FWLIB/src/stm32f4xx_rtc.c ****       
 517              		.loc 1 424 0
 518 0072 DA60     		str	r2, [r3, #12]
 427:FWLIB/src/stm32f4xx_rtc.c ****   
 519              		.loc 1 427 0
 520 0074 1A64     		str	r2, [r3, #64]
 429:FWLIB/src/stm32f4xx_rtc.c ****       {
 521              		.loc 1 429 0
 522 0076 FFF7FEFF 		bl	RTC_WaitForSynchro
 523              	.LVL36:
 524 007a 20B9     		cbnz	r0, .L43
 525 007c 04E0     		b	.L38
 526              	.LVL37:
 527              	.L41:
 388:FWLIB/src/stm32f4xx_rtc.c ****   }  
 528              		.loc 1 388 0
 529 007e 0020     		movs	r0, #0
 530 0080 02E0     		b	.L38
 531              	.LVL38:
 532              	.L42:
 407:FWLIB/src/stm32f4xx_rtc.c ****     }
 533              		.loc 1 407 0
 534 0082 0020     		movs	r0, #0
 535 0084 00E0     		b	.L38
 536              	.LVL39:
 537              	.L43:
 435:FWLIB/src/stm32f4xx_rtc.c ****       }
 538              		.loc 1 435 0
 539 0086 0120     		movs	r0, #1
 540              	.L38:
 541              	.LVL40:
 441:FWLIB/src/stm32f4xx_rtc.c ****   
 542              		.loc 1 441 0
 543 0088 FF22     		movs	r2, #255
 544 008a 024B     		ldr	r3, .L45
 545 008c 5A62     		str	r2, [r3, #36]
 444:FWLIB/src/stm32f4xx_rtc.c **** 
 546              		.loc 1 444 0
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 60


 547 008e 03B0     		add	sp, sp, #12
 548              	.LCFI7:
 549              		.cfi_def_cfa_offset 4
 550              		@ sp needed
 551 0090 5DF804FB 		ldr	pc, [sp], #4
 552              	.L46:
 553              		.align	2
 554              	.L45:
 555 0094 00280040 		.word	1073752064
 556 0098 FF007F00 		.word	8323327
 557              		.cfi_endproc
 558              	.LFE123:
 560              		.section	.text.RTC_RefClockCmd,"ax",%progbits
 561              		.align	2
 562              		.global	RTC_RefClockCmd
 563              		.thumb
 564              		.thumb_func
 566              	RTC_RefClockCmd:
 567              	.LFB130:
 663:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 568              		.loc 1 663 0
 569              		.cfi_startproc
 570              		@ args = 0, pretend = 0, frame = 0
 571              		@ frame_needed = 0, uses_anonymous_args = 0
 572              	.LVL41:
 573 0000 10B5     		push	{r4, lr}
 574              	.LCFI8:
 575              		.cfi_def_cfa_offset 8
 576              		.cfi_offset 4, -8
 577              		.cfi_offset 14, -4
 578 0002 0446     		mov	r4, r0
 579              	.LVL42:
 670:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 580              		.loc 1 670 0
 581 0004 0E4B     		ldr	r3, .L53
 582 0006 CA22     		movs	r2, #202
 583 0008 5A62     		str	r2, [r3, #36]
 671:FWLIB/src/stm32f4xx_rtc.c ****     
 584              		.loc 1 671 0
 585 000a 5322     		movs	r2, #83
 586 000c 5A62     		str	r2, [r3, #36]
 674:FWLIB/src/stm32f4xx_rtc.c ****   {
 587              		.loc 1 674 0
 588 000e FFF7FEFF 		bl	RTC_EnterInitMode
 589              	.LVL43:
 590 0012 78B1     		cbz	r0, .L51
 680:FWLIB/src/stm32f4xx_rtc.c ****     {
 591              		.loc 1 680 0
 592 0014 2CB1     		cbz	r4, .L49
 683:FWLIB/src/stm32f4xx_rtc.c ****     }
 593              		.loc 1 683 0
 594 0016 0A4A     		ldr	r2, .L53
 595 0018 9368     		ldr	r3, [r2, #8]
 596 001a 43F01003 		orr	r3, r3, #16
 597 001e 9360     		str	r3, [r2, #8]
 598 0020 04E0     		b	.L50
 599              	.L49:
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 61


 688:FWLIB/src/stm32f4xx_rtc.c ****     }
 600              		.loc 1 688 0
 601 0022 074A     		ldr	r2, .L53
 602 0024 9368     		ldr	r3, [r2, #8]
 603 0026 23F01003 		bic	r3, r3, #16
 604 002a 9360     		str	r3, [r2, #8]
 605              	.L50:
 691:FWLIB/src/stm32f4xx_rtc.c ****     
 606              		.loc 1 691 0
 607 002c FFF7FEFF 		bl	RTC_ExitInitMode
 608              	.LVL44:
 693:FWLIB/src/stm32f4xx_rtc.c ****   }
 609              		.loc 1 693 0
 610 0030 0120     		movs	r0, #1
 611 0032 00E0     		b	.L48
 612              	.LVL45:
 613              	.L51:
 676:FWLIB/src/stm32f4xx_rtc.c ****   } 
 614              		.loc 1 676 0
 615 0034 0020     		movs	r0, #0
 616              	.LVL46:
 617              	.L48:
 697:FWLIB/src/stm32f4xx_rtc.c ****   
 618              		.loc 1 697 0
 619 0036 FF22     		movs	r2, #255
 620 0038 014B     		ldr	r3, .L53
 621 003a 5A62     		str	r2, [r3, #36]
 700:FWLIB/src/stm32f4xx_rtc.c **** 
 622              		.loc 1 700 0
 623 003c 10BD     		pop	{r4, pc}
 624              	.L54:
 625 003e 00BF     		.align	2
 626              	.L53:
 627 0040 00280040 		.word	1073752064
 628              		.cfi_endproc
 629              	.LFE130:
 631              		.section	.text.RTC_BypassShadowCmd,"ax",%progbits
 632              		.align	2
 633              		.global	RTC_BypassShadowCmd
 634              		.thumb
 635              		.thumb_func
 637              	RTC_BypassShadowCmd:
 638              	.LFB131:
 711:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 639              		.loc 1 711 0
 640              		.cfi_startproc
 641              		@ args = 0, pretend = 0, frame = 0
 642              		@ frame_needed = 0, uses_anonymous_args = 0
 643              		@ link register save eliminated.
 644              	.LVL47:
 716:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 645              		.loc 1 716 0
 646 0000 0A4B     		ldr	r3, .L58
 647 0002 CA22     		movs	r2, #202
 648 0004 5A62     		str	r2, [r3, #36]
 717:FWLIB/src/stm32f4xx_rtc.c ****   
 649              		.loc 1 717 0
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 62


 650 0006 5322     		movs	r2, #83
 651 0008 5A62     		str	r2, [r3, #36]
 719:FWLIB/src/stm32f4xx_rtc.c ****   {
 652              		.loc 1 719 0
 653 000a 28B1     		cbz	r0, .L56
 722:FWLIB/src/stm32f4xx_rtc.c ****   }
 654              		.loc 1 722 0
 655 000c 1A46     		mov	r2, r3
 656 000e 9B68     		ldr	r3, [r3, #8]
 657 0010 43F02003 		orr	r3, r3, #32
 658 0014 9360     		str	r3, [r2, #8]
 659 0016 04E0     		b	.L57
 660              	.L56:
 727:FWLIB/src/stm32f4xx_rtc.c ****   }
 661              		.loc 1 727 0
 662 0018 044A     		ldr	r2, .L58
 663 001a 9368     		ldr	r3, [r2, #8]
 664 001c 03F0DF03 		and	r3, r3, #223
 665 0020 9360     		str	r3, [r2, #8]
 666              	.L57:
 731:FWLIB/src/stm32f4xx_rtc.c **** }
 667              		.loc 1 731 0
 668 0022 FF22     		movs	r2, #255
 669 0024 014B     		ldr	r3, .L58
 670 0026 5A62     		str	r2, [r3, #36]
 671 0028 7047     		bx	lr
 672              	.L59:
 673 002a 00BF     		.align	2
 674              	.L58:
 675 002c 00280040 		.word	1073752064
 676              		.cfi_endproc
 677              	.LFE131:
 679              		.section	.text.RTC_SetTime,"ax",%progbits
 680              		.align	2
 681              		.global	RTC_SetTime
 682              		.thumb
 683              		.thumb_func
 685              	RTC_SetTime:
 686              	.LFB132:
 766:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 687              		.loc 1 766 0
 688              		.cfi_startproc
 689              		@ args = 0, pretend = 0, frame = 0
 690              		@ frame_needed = 0, uses_anonymous_args = 0
 691              	.LVL48:
 692 0000 38B5     		push	{r3, r4, r5, lr}
 693              	.LCFI9:
 694              		.cfi_def_cfa_offset 16
 695              		.cfi_offset 3, -16
 696              		.cfi_offset 4, -12
 697              		.cfi_offset 5, -8
 698              		.cfi_offset 14, -4
 699 0002 0D46     		mov	r5, r1
 700              	.LVL49:
 773:FWLIB/src/stm32f4xx_rtc.c ****   {
 701              		.loc 1 773 0
 702 0004 0346     		mov	r3, r0
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 63


 703 0006 38B9     		cbnz	r0, .L61
 775:FWLIB/src/stm32f4xx_rtc.c ****     {
 704              		.loc 1 775 0
 705 0008 254A     		ldr	r2, .L70
 706 000a 9268     		ldr	r2, [r2, #8]
 707 000c 12F0400F 		tst	r2, #64
 708 0010 09D1     		bne	.L62
 782:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 709              		.loc 1 782 0
 710 0012 0022     		movs	r2, #0
 711 0014 CA70     		strb	r2, [r1, #3]
 712 0016 06E0     		b	.L62
 713              	.L61:
 790:FWLIB/src/stm32f4xx_rtc.c ****     {
 714              		.loc 1 790 0
 715 0018 214A     		ldr	r2, .L70
 716 001a 9268     		ldr	r2, [r2, #8]
 717 001c 12F0400F 		tst	r2, #64
 718 0020 01D1     		bne	.L62
 798:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 719              		.loc 1 798 0
 720 0022 0022     		movs	r2, #0
 721 0024 CA70     		strb	r2, [r1, #3]
 722              	.L62:
 806:FWLIB/src/stm32f4xx_rtc.c ****   {
 723              		.loc 1 806 0
 724 0026 53B1     		cbz	r3, .L63
 808:FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 725              		.loc 1 808 0
 726 0028 2C78     		ldrb	r4, [r5]	@ zero_extendqisi2
 809:FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 727              		.loc 1 809 0
 728 002a 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 729 002c 1B02     		lsls	r3, r3, #8
 808:FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 730              		.loc 1 808 0
 731 002e 43EA0444 		orr	r4, r3, r4, lsl #16
 810:FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 732              		.loc 1 810 0
 733 0032 AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 809:FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 734              		.loc 1 809 0
 735 0034 2343     		orrs	r3, r3, r4
 811:FWLIB/src/stm32f4xx_rtc.c ****   }  
 736              		.loc 1 811 0
 737 0036 E878     		ldrb	r0, [r5, #3]	@ zero_extendqisi2
 738              	.LVL50:
 808:FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 739              		.loc 1 808 0
 740 0038 43EA0044 		orr	r4, r3, r0, lsl #16
 741              	.LVL51:
 742 003c 0FE0     		b	.L64
 743              	.LVL52:
 744              	.L63:
 815:FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 745              		.loc 1 815 0
 746 003e 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 64


 747              	.LVL53:
 748 0040 FFF7FEFF 		bl	RTC_ByteToBcd2
 749              	.LVL54:
 750 0044 0404     		lsls	r4, r0, #16
 816:FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 751              		.loc 1 816 0
 752 0046 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 753 0048 FFF7FEFF 		bl	RTC_ByteToBcd2
 754              	.LVL55:
 815:FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 755              		.loc 1 815 0
 756 004c 44EA0024 		orr	r4, r4, r0, lsl #8
 817:FWLIB/src/stm32f4xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 757              		.loc 1 817 0
 758 0050 A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 759 0052 FFF7FEFF 		bl	RTC_ByteToBcd2
 760              	.LVL56:
 816:FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 761              		.loc 1 816 0
 762 0056 2043     		orrs	r0, r0, r4
 818:FWLIB/src/stm32f4xx_rtc.c ****   }  
 763              		.loc 1 818 0
 764 0058 EC78     		ldrb	r4, [r5, #3]	@ zero_extendqisi2
 815:FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 765              		.loc 1 815 0
 766 005a 40EA0444 		orr	r4, r0, r4, lsl #16
 767              	.LVL57:
 768              	.L64:
 822:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 769              		.loc 1 822 0
 770 005e 104B     		ldr	r3, .L70
 771 0060 CA22     		movs	r2, #202
 772 0062 5A62     		str	r2, [r3, #36]
 823:FWLIB/src/stm32f4xx_rtc.c **** 
 773              		.loc 1 823 0
 774 0064 5322     		movs	r2, #83
 775 0066 5A62     		str	r2, [r3, #36]
 826:FWLIB/src/stm32f4xx_rtc.c ****   {
 776              		.loc 1 826 0
 777 0068 FFF7FEFF 		bl	RTC_EnterInitMode
 778              	.LVL58:
 779 006c 78B1     		cbz	r0, .L66
 833:FWLIB/src/stm32f4xx_rtc.c **** 
 780              		.loc 1 833 0
 781 006e 04F07F30 		and	r0, r4, #2139062143
 782 0072 20F0FE40 		bic	r0, r0, #2130706432
 783 0076 0A4C     		ldr	r4, .L70
 784              	.LVL59:
 785 0078 2060     		str	r0, [r4]
 836:FWLIB/src/stm32f4xx_rtc.c **** 
 786              		.loc 1 836 0
 787 007a FFF7FEFF 		bl	RTC_ExitInitMode
 788              	.LVL60:
 839:FWLIB/src/stm32f4xx_rtc.c ****     {
 789              		.loc 1 839 0
 790 007e A368     		ldr	r3, [r4, #8]
 791 0080 13F0200F 		tst	r3, #32
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 65


 792 0084 05D1     		bne	.L67
 841:FWLIB/src/stm32f4xx_rtc.c ****     {
 793              		.loc 1 841 0
 794 0086 FFF7FEFF 		bl	RTC_WaitForSynchro
 795              	.LVL61:
 796 008a 20B9     		cbnz	r0, .L68
 797 008c 04E0     		b	.L65
 798              	.LVL62:
 799              	.L66:
 828:FWLIB/src/stm32f4xx_rtc.c ****   } 
 800              		.loc 1 828 0
 801 008e 0020     		movs	r0, #0
 802 0090 02E0     		b	.L65
 803              	.LVL63:
 804              	.L67:
 852:FWLIB/src/stm32f4xx_rtc.c ****     }
 805              		.loc 1 852 0
 806 0092 0120     		movs	r0, #1
 807 0094 00E0     		b	.L65
 808              	.L68:
 847:FWLIB/src/stm32f4xx_rtc.c ****     }
 809              		.loc 1 847 0
 810 0096 0120     		movs	r0, #1
 811              	.L65:
 812              	.LVL64:
 856:FWLIB/src/stm32f4xx_rtc.c ****     
 813              		.loc 1 856 0
 814 0098 FF22     		movs	r2, #255
 815 009a 014B     		ldr	r3, .L70
 816 009c 5A62     		str	r2, [r3, #36]
 859:FWLIB/src/stm32f4xx_rtc.c **** 
 817              		.loc 1 859 0
 818 009e 38BD     		pop	{r3, r4, r5, pc}
 819              	.LVL65:
 820              	.L71:
 821              		.align	2
 822              	.L70:
 823 00a0 00280040 		.word	1073752064
 824              		.cfi_endproc
 825              	.LFE132:
 827              		.section	.text.RTC_TimeStructInit,"ax",%progbits
 828              		.align	2
 829              		.global	RTC_TimeStructInit
 830              		.thumb
 831              		.thumb_func
 833              	RTC_TimeStructInit:
 834              	.LFB133:
 869:FWLIB/src/stm32f4xx_rtc.c ****   /* Time = 00h:00min:00sec */
 835              		.loc 1 869 0
 836              		.cfi_startproc
 837              		@ args = 0, pretend = 0, frame = 0
 838              		@ frame_needed = 0, uses_anonymous_args = 0
 839              		@ link register save eliminated.
 840              	.LVL66:
 871:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 841              		.loc 1 871 0
 842 0000 0023     		movs	r3, #0
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 66


 843 0002 C370     		strb	r3, [r0, #3]
 872:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 844              		.loc 1 872 0
 845 0004 0370     		strb	r3, [r0]
 873:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 846              		.loc 1 873 0
 847 0006 4370     		strb	r3, [r0, #1]
 874:FWLIB/src/stm32f4xx_rtc.c **** }
 848              		.loc 1 874 0
 849 0008 8370     		strb	r3, [r0, #2]
 850 000a 7047     		bx	lr
 851              		.cfi_endproc
 852              	.LFE133:
 854              		.section	.text.RTC_GetTime,"ax",%progbits
 855              		.align	2
 856              		.global	RTC_GetTime
 857              		.thumb
 858              		.thumb_func
 860              	RTC_GetTime:
 861              	.LFB134:
 888:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 862              		.loc 1 888 0
 863              		.cfi_startproc
 864              		@ args = 0, pretend = 0, frame = 0
 865              		@ frame_needed = 0, uses_anonymous_args = 0
 866              	.LVL67:
 867 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 868              	.LCFI10:
 869              		.cfi_def_cfa_offset 24
 870              		.cfi_offset 3, -24
 871              		.cfi_offset 4, -20
 872              		.cfi_offset 5, -16
 873              		.cfi_offset 6, -12
 874              		.cfi_offset 7, -8
 875              		.cfi_offset 14, -4
 876              	.LVL68:
 895:FWLIB/src/stm32f4xx_rtc.c ****   
 877              		.loc 1 895 0
 878 0002 114B     		ldr	r3, .L76
 879 0004 1B68     		ldr	r3, [r3]
 880 0006 03F07F33 		and	r3, r3, #2139062143
 881 000a 23F0FE43 		bic	r3, r3, #2130706432
 882              	.LVL69:
 898:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 883              		.loc 1 898 0
 884 000e 1A0C     		lsrs	r2, r3, #16
 885 0010 02F03F07 		and	r7, r2, #63
 886 0014 0F70     		strb	r7, [r1]
 899:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 887              		.loc 1 899 0
 888 0016 C3F30626 		ubfx	r6, r3, #8, #7
 889 001a 4E70     		strb	r6, [r1, #1]
 900:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 890              		.loc 1 900 0
 891 001c 03F07F04 		and	r4, r3, #127
 892 0020 8C70     		strb	r4, [r1, #2]
 901:FWLIB/src/stm32f4xx_rtc.c **** 
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 67


 893              		.loc 1 901 0
 894 0022 02F04002 		and	r2, r2, #64
 895 0026 CA70     		strb	r2, [r1, #3]
 904:FWLIB/src/stm32f4xx_rtc.c ****   {
 896              		.loc 1 904 0
 897 0028 60B9     		cbnz	r0, .L73
 898 002a 0D46     		mov	r5, r1
 907:FWLIB/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 899              		.loc 1 907 0
 900 002c 3846     		mov	r0, r7
 901              	.LVL70:
 902 002e FFF7FEFF 		bl	RTC_Bcd2ToByte
 903              	.LVL71:
 904 0032 2870     		strb	r0, [r5]
 908:FWLIB/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 905              		.loc 1 908 0
 906 0034 3046     		mov	r0, r6
 907 0036 FFF7FEFF 		bl	RTC_Bcd2ToByte
 908              	.LVL72:
 909 003a 6870     		strb	r0, [r5, #1]
 909:FWLIB/src/stm32f4xx_rtc.c ****   }
 910              		.loc 1 909 0
 911 003c 2046     		mov	r0, r4
 912 003e FFF7FEFF 		bl	RTC_Bcd2ToByte
 913              	.LVL73:
 914 0042 A870     		strb	r0, [r5, #2]
 915              	.LVL74:
 916              	.L73:
 917 0044 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 918              	.L77:
 919 0046 00BF     		.align	2
 920              	.L76:
 921 0048 00280040 		.word	1073752064
 922              		.cfi_endproc
 923              	.LFE134:
 925              		.section	.text.RTC_GetSubSecond,"ax",%progbits
 926              		.align	2
 927              		.global	RTC_GetSubSecond
 928              		.thumb
 929              		.thumb_func
 931              	RTC_GetSubSecond:
 932              	.LFB135:
 921:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 933              		.loc 1 921 0
 934              		.cfi_startproc
 935              		@ args = 0, pretend = 0, frame = 0
 936              		@ frame_needed = 0, uses_anonymous_args = 0
 937              		@ link register save eliminated.
 938              	.LVL75:
 925:FWLIB/src/stm32f4xx_rtc.c ****   
 939              		.loc 1 925 0
 940 0000 014B     		ldr	r3, .L79
 941 0002 986A     		ldr	r0, [r3, #40]
 942              	.LVL76:
 928:FWLIB/src/stm32f4xx_rtc.c ****   
 943              		.loc 1 928 0
 944 0004 5B68     		ldr	r3, [r3, #4]
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 68


 931:FWLIB/src/stm32f4xx_rtc.c **** 
 945              		.loc 1 931 0
 946 0006 7047     		bx	lr
 947              	.L80:
 948              		.align	2
 949              	.L79:
 950 0008 00280040 		.word	1073752064
 951              		.cfi_endproc
 952              	.LFE135:
 954              		.section	.text.RTC_SetDate,"ax",%progbits
 955              		.align	2
 956              		.global	RTC_SetDate
 957              		.thumb
 958              		.thumb_func
 960              	RTC_SetDate:
 961              	.LFB136:
 946:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 962              		.loc 1 946 0
 963              		.cfi_startproc
 964              		@ args = 0, pretend = 0, frame = 0
 965              		@ frame_needed = 0, uses_anonymous_args = 0
 966              	.LVL77:
 967 0000 38B5     		push	{r3, r4, r5, lr}
 968              	.LCFI11:
 969              		.cfi_def_cfa_offset 16
 970              		.cfi_offset 3, -16
 971              		.cfi_offset 4, -12
 972              		.cfi_offset 5, -8
 973              		.cfi_offset 14, -4
 974 0002 0D46     		mov	r5, r1
 975              	.LVL78:
 953:FWLIB/src/stm32f4xx_rtc.c ****   {
 976              		.loc 1 953 0
 977 0004 0246     		mov	r2, r0
 978 0006 38B9     		cbnz	r0, .L82
 953:FWLIB/src/stm32f4xx_rtc.c ****   {
 979              		.loc 1 953 0 is_stmt 0 discriminator 1
 980 0008 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 981 000a 13F0100F 		tst	r3, #16
 982 000e 03D0     		beq	.L82
 955:FWLIB/src/stm32f4xx_rtc.c ****   }  
 983              		.loc 1 955 0 is_stmt 1
 984 0010 23F01003 		bic	r3, r3, #16
 985 0014 0A33     		adds	r3, r3, #10
 986 0016 4B70     		strb	r3, [r1, #1]
 987              	.L82:
 974:FWLIB/src/stm32f4xx_rtc.c ****   {
 988              		.loc 1 974 0
 989 0018 52B1     		cbz	r2, .L83
 976:FWLIB/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 990              		.loc 1 976 0
 991 001a EC78     		ldrb	r4, [r5, #3]	@ zero_extendqisi2
 977:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 992              		.loc 1 977 0
 993 001c 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 994 001e 1B02     		lsls	r3, r3, #8
 976:FWLIB/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 69


 995              		.loc 1 976 0
 996 0020 43EA0444 		orr	r4, r3, r4, lsl #16
 978:FWLIB/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 997              		.loc 1 978 0
 998 0024 AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 977:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 999              		.loc 1 977 0
 1000 0026 2343     		orrs	r3, r3, r4
 979:FWLIB/src/stm32f4xx_rtc.c ****   }  
 1001              		.loc 1 979 0
 1002 0028 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 1003              	.LVL79:
 976:FWLIB/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1004              		.loc 1 976 0
 1005 002a 43EA4034 		orr	r4, r3, r0, lsl #13
 1006              	.LVL80:
 1007 002e 0FE0     		b	.L84
 1008              	.LVL81:
 1009              	.L83:
 983:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1010              		.loc 1 983 0
 1011 0030 E878     		ldrb	r0, [r5, #3]	@ zero_extendqisi2
 1012              	.LVL82:
 1013 0032 FFF7FEFF 		bl	RTC_ByteToBcd2
 1014              	.LVL83:
 1015 0036 0404     		lsls	r4, r0, #16
 984:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 1016              		.loc 1 984 0
 1017 0038 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 1018 003a FFF7FEFF 		bl	RTC_ByteToBcd2
 1019              	.LVL84:
 983:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1020              		.loc 1 983 0
 1021 003e 44EA0024 		orr	r4, r4, r0, lsl #8
 985:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 1022              		.loc 1 985 0
 1023 0042 A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 1024 0044 FFF7FEFF 		bl	RTC_ByteToBcd2
 1025              	.LVL85:
 984:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 1026              		.loc 1 984 0
 1027 0048 2043     		orrs	r0, r0, r4
 986:FWLIB/src/stm32f4xx_rtc.c ****   }
 1028              		.loc 1 986 0
 1029 004a 2C78     		ldrb	r4, [r5]	@ zero_extendqisi2
 983:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1030              		.loc 1 983 0
 1031 004c 40EA4434 		orr	r4, r0, r4, lsl #13
 1032              	.LVL86:
 1033              	.L84:
 990:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1034              		.loc 1 990 0
 1035 0050 104B     		ldr	r3, .L90
 1036 0052 CA22     		movs	r2, #202
 1037 0054 5A62     		str	r2, [r3, #36]
 991:FWLIB/src/stm32f4xx_rtc.c **** 
 1038              		.loc 1 991 0
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 70


 1039 0056 5322     		movs	r2, #83
 1040 0058 5A62     		str	r2, [r3, #36]
 994:FWLIB/src/stm32f4xx_rtc.c ****   {
 1041              		.loc 1 994 0
 1042 005a FFF7FEFF 		bl	RTC_EnterInitMode
 1043              	.LVL87:
 1044 005e 78B1     		cbz	r0, .L86
1001:FWLIB/src/stm32f4xx_rtc.c **** 
 1045              		.loc 1 1001 0
 1046 0060 24F07F40 		bic	r0, r4, #-16777216
 1047 0064 20F0C000 		bic	r0, r0, #192
 1048 0068 0A4C     		ldr	r4, .L90
 1049              	.LVL88:
 1050 006a 6060     		str	r0, [r4, #4]
1004:FWLIB/src/stm32f4xx_rtc.c **** 
 1051              		.loc 1 1004 0
 1052 006c FFF7FEFF 		bl	RTC_ExitInitMode
 1053              	.LVL89:
1007:FWLIB/src/stm32f4xx_rtc.c ****     {
 1054              		.loc 1 1007 0
 1055 0070 A368     		ldr	r3, [r4, #8]
 1056 0072 13F0200F 		tst	r3, #32
 1057 0076 05D1     		bne	.L87
1009:FWLIB/src/stm32f4xx_rtc.c ****     {
 1058              		.loc 1 1009 0
 1059 0078 FFF7FEFF 		bl	RTC_WaitForSynchro
 1060              	.LVL90:
 1061 007c 20B9     		cbnz	r0, .L88
 1062 007e 04E0     		b	.L85
 1063              	.LVL91:
 1064              	.L86:
 996:FWLIB/src/stm32f4xx_rtc.c ****   } 
 1065              		.loc 1 996 0
 1066 0080 0020     		movs	r0, #0
 1067 0082 02E0     		b	.L85
 1068              	.LVL92:
 1069              	.L87:
1020:FWLIB/src/stm32f4xx_rtc.c ****     }
 1070              		.loc 1 1020 0
 1071 0084 0120     		movs	r0, #1
 1072 0086 00E0     		b	.L85
 1073              	.L88:
1015:FWLIB/src/stm32f4xx_rtc.c ****     }
 1074              		.loc 1 1015 0
 1075 0088 0120     		movs	r0, #1
 1076              	.L85:
 1077              	.LVL93:
1024:FWLIB/src/stm32f4xx_rtc.c ****   
 1078              		.loc 1 1024 0
 1079 008a FF22     		movs	r2, #255
 1080 008c 014B     		ldr	r3, .L90
 1081 008e 5A62     		str	r2, [r3, #36]
1027:FWLIB/src/stm32f4xx_rtc.c **** 
 1082              		.loc 1 1027 0
 1083 0090 38BD     		pop	{r3, r4, r5, pc}
 1084              	.LVL94:
 1085              	.L91:
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 71


 1086 0092 00BF     		.align	2
 1087              	.L90:
 1088 0094 00280040 		.word	1073752064
 1089              		.cfi_endproc
 1090              	.LFE136:
 1092              		.section	.text.RTC_DateStructInit,"ax",%progbits
 1093              		.align	2
 1094              		.global	RTC_DateStructInit
 1095              		.thumb
 1096              		.thumb_func
 1098              	RTC_DateStructInit:
 1099              	.LFB137:
1037:FWLIB/src/stm32f4xx_rtc.c ****   /* Monday, January 01 xx00 */
 1100              		.loc 1 1037 0
 1101              		.cfi_startproc
 1102              		@ args = 0, pretend = 0, frame = 0
 1103              		@ frame_needed = 0, uses_anonymous_args = 0
 1104              		@ link register save eliminated.
 1105              	.LVL95:
1039:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
 1106              		.loc 1 1039 0
 1107 0000 0123     		movs	r3, #1
 1108 0002 0370     		strb	r3, [r0]
1040:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
 1109              		.loc 1 1040 0
 1110 0004 8370     		strb	r3, [r0, #2]
1041:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
 1111              		.loc 1 1041 0
 1112 0006 4370     		strb	r3, [r0, #1]
1042:FWLIB/src/stm32f4xx_rtc.c **** }
 1113              		.loc 1 1042 0
 1114 0008 0023     		movs	r3, #0
 1115 000a C370     		strb	r3, [r0, #3]
 1116 000c 7047     		bx	lr
 1117              		.cfi_endproc
 1118              	.LFE137:
 1120 000e 00BF     		.section	.text.RTC_GetDate,"ax",%progbits
 1121              		.align	2
 1122              		.global	RTC_GetDate
 1123              		.thumb
 1124              		.thumb_func
 1126              	RTC_GetDate:
 1127              	.LFB138:
1056:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1128              		.loc 1 1056 0
 1129              		.cfi_startproc
 1130              		@ args = 0, pretend = 0, frame = 0
 1131              		@ frame_needed = 0, uses_anonymous_args = 0
 1132              	.LVL96:
 1133 0000 70B5     		push	{r4, r5, r6, lr}
 1134              	.LCFI12:
 1135              		.cfi_def_cfa_offset 16
 1136              		.cfi_offset 4, -16
 1137              		.cfi_offset 5, -12
 1138              		.cfi_offset 6, -8
 1139              		.cfi_offset 14, -4
 1140              	.LVL97:
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 72


1063:FWLIB/src/stm32f4xx_rtc.c **** 
 1141              		.loc 1 1063 0
 1142 0002 104B     		ldr	r3, .L96
 1143 0004 5B68     		ldr	r3, [r3, #4]
 1144 0006 23F07F43 		bic	r3, r3, #-16777216
 1145 000a 23F0C003 		bic	r3, r3, #192
 1146              	.LVL98:
1066:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1147              		.loc 1 1066 0
 1148 000e 1A0C     		lsrs	r2, r3, #16
 1149 0010 CA70     		strb	r2, [r1, #3]
1067:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 1150              		.loc 1 1067 0
 1151 0012 C3F30426 		ubfx	r6, r3, #8, #5
 1152 0016 4E70     		strb	r6, [r1, #1]
1068:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 1153              		.loc 1 1068 0
 1154 0018 03F03F05 		and	r5, r3, #63
 1155 001c 8D70     		strb	r5, [r1, #2]
1069:FWLIB/src/stm32f4xx_rtc.c **** 
 1156              		.loc 1 1069 0
 1157 001e C3F34233 		ubfx	r3, r3, #13, #3
 1158              	.LVL99:
 1159 0022 0B70     		strb	r3, [r1]
1072:FWLIB/src/stm32f4xx_rtc.c ****   {
 1160              		.loc 1 1072 0
 1161 0024 60B9     		cbnz	r0, .L93
 1162 0026 0C46     		mov	r4, r1
1075:FWLIB/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1163              		.loc 1 1075 0
 1164 0028 1046     		mov	r0, r2
 1165              	.LVL100:
 1166 002a FFF7FEFF 		bl	RTC_Bcd2ToByte
 1167              	.LVL101:
 1168 002e E070     		strb	r0, [r4, #3]
1076:FWLIB/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1169              		.loc 1 1076 0
 1170 0030 3046     		mov	r0, r6
 1171 0032 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1172              	.LVL102:
 1173 0036 6070     		strb	r0, [r4, #1]
1077:FWLIB/src/stm32f4xx_rtc.c ****   }
 1174              		.loc 1 1077 0
 1175 0038 2846     		mov	r0, r5
 1176 003a FFF7FEFF 		bl	RTC_Bcd2ToByte
 1177              	.LVL103:
 1178 003e A070     		strb	r0, [r4, #2]
 1179              	.LVL104:
 1180              	.L93:
 1181 0040 70BD     		pop	{r4, r5, r6, pc}
 1182              	.L97:
 1183 0042 00BF     		.align	2
 1184              	.L96:
 1185 0044 00280040 		.word	1073752064
 1186              		.cfi_endproc
 1187              	.LFE138:
 1189              		.section	.text.RTC_SetAlarm,"ax",%progbits
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 73


 1190              		.align	2
 1191              		.global	RTC_SetAlarm
 1192              		.thumb
 1193              		.thumb_func
 1195              	RTC_SetAlarm:
 1196              	.LFB139:
1116:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1197              		.loc 1 1116 0
 1198              		.cfi_startproc
 1199              		@ args = 0, pretend = 0, frame = 0
 1200              		@ frame_needed = 0, uses_anonymous_args = 0
 1201              	.LVL105:
 1202 0000 70B5     		push	{r4, r5, r6, lr}
 1203              	.LCFI13:
 1204              		.cfi_def_cfa_offset 16
 1205              		.cfi_offset 4, -16
 1206              		.cfi_offset 5, -12
 1207              		.cfi_offset 6, -8
 1208              		.cfi_offset 14, -4
 1209 0002 0E46     		mov	r6, r1
 1210 0004 1446     		mov	r4, r2
 1211              	.LVL106:
1125:FWLIB/src/stm32f4xx_rtc.c ****   {
 1212              		.loc 1 1125 0
 1213 0006 0346     		mov	r3, r0
 1214 0008 38B9     		cbnz	r0, .L99
1127:FWLIB/src/stm32f4xx_rtc.c ****     {
 1215              		.loc 1 1127 0
 1216 000a 254A     		ldr	r2, .L108
 1217              	.LVL107:
 1218 000c 9268     		ldr	r2, [r2, #8]
 1219 000e 12F0400F 		tst	r2, #64
 1220 0012 09D1     		bne	.L101
1134:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
 1221              		.loc 1 1134 0
 1222 0014 0022     		movs	r2, #0
 1223 0016 E270     		strb	r2, [r4, #3]
 1224 0018 06E0     		b	.L101
 1225              	.LVL108:
 1226              	.L99:
1151:FWLIB/src/stm32f4xx_rtc.c ****     {
 1227              		.loc 1 1151 0
 1228 001a 214A     		ldr	r2, .L108
 1229              	.LVL109:
 1230 001c 9268     		ldr	r2, [r2, #8]
 1231 001e 12F0400F 		tst	r2, #64
 1232 0022 01D1     		bne	.L101
1159:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
 1233              		.loc 1 1159 0
 1234 0024 0022     		movs	r2, #0
 1235 0026 E270     		strb	r2, [r4, #3]
 1236              	.L101:
1179:FWLIB/src/stm32f4xx_rtc.c ****   {
 1237              		.loc 1 1179 0
 1238 0028 8BB1     		cbz	r3, .L103
1181:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1239              		.loc 1 1181 0
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 74


 1240 002a 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
1182:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1241              		.loc 1 1182 0
 1242 002c 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1243 002e 1B02     		lsls	r3, r3, #8
1181:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1244              		.loc 1 1181 0
 1245 0030 43EA0243 		orr	r3, r3, r2, lsl #16
1183:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1246              		.loc 1 1183 0
 1247 0034 A278     		ldrb	r2, [r4, #2]	@ zero_extendqisi2
1182:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1248              		.loc 1 1182 0
 1249 0036 1343     		orrs	r3, r3, r2
1184:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1250              		.loc 1 1184 0
 1251 0038 E278     		ldrb	r2, [r4, #3]	@ zero_extendqisi2
1183:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1252              		.loc 1 1183 0
 1253 003a 43EA0243 		orr	r3, r3, r2, lsl #16
1185:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1254              		.loc 1 1185 0
 1255 003e 207B     		ldrb	r0, [r4, #12]	@ zero_extendqisi2
 1256              	.LVL110:
1184:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1257              		.loc 1 1184 0
 1258 0040 43EA0063 		orr	r3, r3, r0, lsl #24
1186:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1259              		.loc 1 1186 0
 1260 0044 A068     		ldr	r0, [r4, #8]
1185:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1261              		.loc 1 1185 0
 1262 0046 1843     		orrs	r0, r0, r3
1187:FWLIB/src/stm32f4xx_rtc.c ****   }  
 1263              		.loc 1 1187 0
 1264 0048 6268     		ldr	r2, [r4, #4]
1181:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1265              		.loc 1 1181 0
 1266 004a 1043     		orrs	r0, r0, r2
 1267              	.LVL111:
 1268 004c 18E0     		b	.L104
 1269              	.LVL112:
 1270              	.L103:
1191:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1271              		.loc 1 1191 0
 1272 004e 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 1273              	.LVL113:
 1274 0050 FFF7FEFF 		bl	RTC_ByteToBcd2
 1275              	.LVL114:
 1276 0054 0504     		lsls	r5, r0, #16
1192:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1277              		.loc 1 1192 0
 1278 0056 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1279 0058 FFF7FEFF 		bl	RTC_ByteToBcd2
 1280              	.LVL115:
1191:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1281              		.loc 1 1191 0
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 75


 1282 005c 45EA0025 		orr	r5, r5, r0, lsl #8
1193:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1283              		.loc 1 1193 0
 1284 0060 A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 1285 0062 FFF7FEFF 		bl	RTC_ByteToBcd2
 1286              	.LVL116:
1192:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1287              		.loc 1 1192 0
 1288 0066 0543     		orrs	r5, r5, r0
1194:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1289              		.loc 1 1194 0
 1290 0068 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
1193:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1291              		.loc 1 1193 0
 1292 006a 45EA0045 		orr	r5, r5, r0, lsl #16
1195:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1293              		.loc 1 1195 0
 1294 006e 207B     		ldrb	r0, [r4, #12]	@ zero_extendqisi2
 1295 0070 FFF7FEFF 		bl	RTC_ByteToBcd2
 1296              	.LVL117:
1194:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1297              		.loc 1 1194 0
 1298 0074 45EA0060 		orr	r0, r5, r0, lsl #24
1196:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1299              		.loc 1 1196 0
 1300 0078 A568     		ldr	r5, [r4, #8]
1195:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1301              		.loc 1 1195 0
 1302 007a 2843     		orrs	r0, r0, r5
1197:FWLIB/src/stm32f4xx_rtc.c ****   } 
 1303              		.loc 1 1197 0
 1304 007c 6368     		ldr	r3, [r4, #4]
1191:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1305              		.loc 1 1191 0
 1306 007e 1843     		orrs	r0, r0, r3
 1307              	.LVL118:
 1308              	.L104:
1201:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1309              		.loc 1 1201 0
 1310 0080 074B     		ldr	r3, .L108
 1311 0082 CA22     		movs	r2, #202
 1312 0084 5A62     		str	r2, [r3, #36]
1202:FWLIB/src/stm32f4xx_rtc.c **** 
 1313              		.loc 1 1202 0
 1314 0086 5322     		movs	r2, #83
 1315 0088 5A62     		str	r2, [r3, #36]
1205:FWLIB/src/stm32f4xx_rtc.c ****   {
 1316              		.loc 1 1205 0
 1317 008a B6F5807F 		cmp	r6, #256
 1318 008e 01D1     		bne	.L105
1207:FWLIB/src/stm32f4xx_rtc.c ****   }
 1319              		.loc 1 1207 0
 1320 0090 D861     		str	r0, [r3, #28]
 1321 0092 01E0     		b	.L106
 1322              	.L105:
1211:FWLIB/src/stm32f4xx_rtc.c ****   }
 1323              		.loc 1 1211 0
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 76


 1324 0094 024B     		ldr	r3, .L108
 1325 0096 1862     		str	r0, [r3, #32]
 1326              	.L106:
1215:FWLIB/src/stm32f4xx_rtc.c **** }
 1327              		.loc 1 1215 0
 1328 0098 FF22     		movs	r2, #255
 1329 009a 014B     		ldr	r3, .L108
 1330 009c 5A62     		str	r2, [r3, #36]
 1331 009e 70BD     		pop	{r4, r5, r6, pc}
 1332              	.LVL119:
 1333              	.L109:
 1334              		.align	2
 1335              	.L108:
 1336 00a0 00280040 		.word	1073752064
 1337              		.cfi_endproc
 1338              	.LFE139:
 1340              		.section	.text.RTC_AlarmStructInit,"ax",%progbits
 1341              		.align	2
 1342              		.global	RTC_AlarmStructInit
 1343              		.thumb
 1344              		.thumb_func
 1346              	RTC_AlarmStructInit:
 1347              	.LFB140:
1227:FWLIB/src/stm32f4xx_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
 1348              		.loc 1 1227 0
 1349              		.cfi_startproc
 1350              		@ args = 0, pretend = 0, frame = 0
 1351              		@ frame_needed = 0, uses_anonymous_args = 0
 1352              		@ link register save eliminated.
 1353              	.LVL120:
1229:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 1354              		.loc 1 1229 0
 1355 0000 0023     		movs	r3, #0
 1356 0002 C370     		strb	r3, [r0, #3]
1230:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 1357              		.loc 1 1230 0
 1358 0004 0370     		strb	r3, [r0]
1231:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 1359              		.loc 1 1231 0
 1360 0006 4370     		strb	r3, [r0, #1]
1232:FWLIB/src/stm32f4xx_rtc.c **** 
 1361              		.loc 1 1232 0
 1362 0008 8370     		strb	r3, [r0, #2]
1235:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 1363              		.loc 1 1235 0
 1364 000a 8360     		str	r3, [r0, #8]
1236:FWLIB/src/stm32f4xx_rtc.c **** 
 1365              		.loc 1 1236 0
 1366 000c 0122     		movs	r2, #1
 1367 000e 0273     		strb	r2, [r0, #12]
1239:FWLIB/src/stm32f4xx_rtc.c **** }
 1368              		.loc 1 1239 0
 1369 0010 4360     		str	r3, [r0, #4]
 1370 0012 7047     		bx	lr
 1371              		.cfi_endproc
 1372              	.LFE140:
 1374              		.section	.text.RTC_GetAlarm,"ax",%progbits
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 77


 1375              		.align	2
 1376              		.global	RTC_GetAlarm
 1377              		.thumb
 1378              		.thumb_func
 1380              	RTC_GetAlarm:
 1381              	.LFB141:
1257:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1382              		.loc 1 1257 0
 1383              		.cfi_startproc
 1384              		@ args = 0, pretend = 0, frame = 0
 1385              		@ frame_needed = 0, uses_anonymous_args = 0
 1386              	.LVL121:
 1387 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1388              	.LCFI14:
 1389              		.cfi_def_cfa_offset 24
 1390              		.cfi_offset 3, -24
 1391              		.cfi_offset 4, -20
 1392              		.cfi_offset 5, -16
 1393              		.cfi_offset 6, -12
 1394              		.cfi_offset 7, -8
 1395              		.cfi_offset 14, -4
 1396              	.LVL122:
1265:FWLIB/src/stm32f4xx_rtc.c ****   {
 1397              		.loc 1 1265 0
 1398 0002 B1F5807F 		cmp	r1, #256
 1399 0006 02D1     		bne	.L112
1267:FWLIB/src/stm32f4xx_rtc.c ****   }
 1400              		.loc 1 1267 0
 1401 0008 174B     		ldr	r3, .L116
 1402 000a DB69     		ldr	r3, [r3, #28]
 1403              	.LVL123:
 1404 000c 01E0     		b	.L113
 1405              	.LVL124:
 1406              	.L112:
1271:FWLIB/src/stm32f4xx_rtc.c ****   }
 1407              		.loc 1 1271 0
 1408 000e 164B     		ldr	r3, .L116
 1409 0010 1B6A     		ldr	r3, [r3, #32]
 1410              	.LVL125:
 1411              	.L113:
1275:FWLIB/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
 1412              		.loc 1 1275 0
 1413 0012 C3F30741 		ubfx	r1, r3, #16, #8
 1414              	.LVL126:
 1415 0016 01F03F0E 		and	lr, r1, #63
 1416 001a 82F800E0 		strb	lr, [r2]
1277:FWLIB/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
 1417              		.loc 1 1277 0
 1418 001e C3F30626 		ubfx	r6, r3, #8, #7
 1419 0022 5670     		strb	r6, [r2, #1]
1279:FWLIB/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_SU));
 1420              		.loc 1 1279 0
 1421 0024 03F07F05 		and	r5, r3, #127
 1422 0028 9570     		strb	r5, [r2, #2]
1281:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 1423              		.loc 1 1281 0
 1424 002a 01F04001 		and	r1, r1, #64
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 78


 1425 002e D170     		strb	r1, [r2, #3]
1282:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 1426              		.loc 1 1282 0
 1427 0030 C3F30567 		ubfx	r7, r3, #24, #6
 1428 0034 1773     		strb	r7, [r2, #12]
1283:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 1429              		.loc 1 1283 0
 1430 0036 03F08041 		and	r1, r3, #1073741824
 1431 003a 9160     		str	r1, [r2, #8]
1284:FWLIB/src/stm32f4xx_rtc.c **** 
 1432              		.loc 1 1284 0
 1433 003c 03F08033 		and	r3, r3, #-2139062144
 1434              	.LVL127:
 1435 0040 5360     		str	r3, [r2, #4]
1286:FWLIB/src/stm32f4xx_rtc.c ****   {
 1436              		.loc 1 1286 0
 1437 0042 80B9     		cbnz	r0, .L111
 1438 0044 1446     		mov	r4, r2
1288:FWLIB/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
 1439              		.loc 1 1288 0
 1440 0046 7046     		mov	r0, lr
 1441              	.LVL128:
 1442 0048 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1443              	.LVL129:
 1444 004c 2070     		strb	r0, [r4]
1290:FWLIB/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
 1445              		.loc 1 1290 0
 1446 004e 3046     		mov	r0, r6
 1447 0050 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1448              	.LVL130:
 1449 0054 6070     		strb	r0, [r4, #1]
1292:FWLIB/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
 1450              		.loc 1 1292 0
 1451 0056 2846     		mov	r0, r5
 1452 0058 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1453              	.LVL131:
 1454 005c A070     		strb	r0, [r4, #2]
1294:FWLIB/src/stm32f4xx_rtc.c ****   }  
 1455              		.loc 1 1294 0
 1456 005e 3846     		mov	r0, r7
 1457 0060 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1458              	.LVL132:
 1459 0064 2073     		strb	r0, [r4, #12]
 1460              	.LVL133:
 1461              	.L111:
 1462 0066 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1463              	.L117:
 1464              		.align	2
 1465              	.L116:
 1466 0068 00280040 		.word	1073752064
 1467              		.cfi_endproc
 1468              	.LFE141:
 1470              		.section	.text.RTC_AlarmCmd,"ax",%progbits
 1471              		.align	2
 1472              		.global	RTC_AlarmCmd
 1473              		.thumb
 1474              		.thumb_func
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 79


 1476              	RTC_AlarmCmd:
 1477              	.LFB142:
1311:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
 1478              		.loc 1 1311 0
 1479              		.cfi_startproc
 1480              		@ args = 0, pretend = 0, frame = 8
 1481              		@ frame_needed = 0, uses_anonymous_args = 0
 1482              		@ link register save eliminated.
 1483              	.LVL134:
 1484 0000 82B0     		sub	sp, sp, #8
 1485              	.LCFI15:
 1486              		.cfi_def_cfa_offset 8
1312:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t alarmstatus = 0x00;
 1487              		.loc 1 1312 0
 1488 0002 0023     		movs	r3, #0
 1489 0004 0193     		str	r3, [sp, #4]
 1490              	.LVL135:
1321:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1491              		.loc 1 1321 0
 1492 0006 154B     		ldr	r3, .L125
 1493 0008 CA22     		movs	r2, #202
 1494 000a 5A62     		str	r2, [r3, #36]
1322:FWLIB/src/stm32f4xx_rtc.c **** 
 1495              		.loc 1 1322 0
 1496 000c 5322     		movs	r2, #83
 1497 000e 5A62     		str	r2, [r3, #36]
1325:FWLIB/src/stm32f4xx_rtc.c ****   {
 1498              		.loc 1 1325 0
 1499 0010 29B1     		cbz	r1, .L119
1327:FWLIB/src/stm32f4xx_rtc.c **** 
 1500              		.loc 1 1327 0
 1501 0012 1A46     		mov	r2, r3
 1502 0014 9B68     		ldr	r3, [r3, #8]
 1503 0016 1843     		orrs	r0, r0, r3
 1504              	.LVL136:
 1505 0018 9060     		str	r0, [r2, #8]
 1506              	.LVL137:
1329:FWLIB/src/stm32f4xx_rtc.c ****   }
 1507              		.loc 1 1329 0
 1508 001a 0120     		movs	r0, #1
 1509 001c 19E0     		b	.L120
 1510              	.LVL138:
 1511              	.L119:
1334:FWLIB/src/stm32f4xx_rtc.c ****    
 1512              		.loc 1 1334 0
 1513 001e 0F4A     		ldr	r2, .L125
 1514 0020 9368     		ldr	r3, [r2, #8]
 1515 0022 23EA0003 		bic	r3, r3, r0
 1516 0026 9360     		str	r3, [r2, #8]
 1517              	.LVL139:
 1518              	.L122:
1339:FWLIB/src/stm32f4xx_rtc.c ****       alarmcounter++;  
 1519              		.loc 1 1339 0 discriminator 2
 1520 0028 0C4B     		ldr	r3, .L125
 1521 002a DB68     		ldr	r3, [r3, #12]
 1522 002c 010A     		lsrs	r1, r0, #8
 1523 002e 03EA0102 		and	r2, r3, r1
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 80


 1524              	.LVL140:
1340:FWLIB/src/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 1525              		.loc 1 1340 0 discriminator 2
 1526 0032 019B     		ldr	r3, [sp, #4]
 1527 0034 0133     		adds	r3, r3, #1
 1528 0036 0193     		str	r3, [sp, #4]
1341:FWLIB/src/stm32f4xx_rtc.c ****     
 1529              		.loc 1 1341 0 discriminator 2
 1530 0038 019B     		ldr	r3, [sp, #4]
 1531 003a B3F5803F 		cmp	r3, #65536
 1532 003e 01D0     		beq	.L121
1341:FWLIB/src/stm32f4xx_rtc.c ****     
 1533              		.loc 1 1341 0 is_stmt 0 discriminator 1
 1534 0040 002A     		cmp	r2, #0
 1535 0042 F1D0     		beq	.L122
 1536              	.L121:
1343:FWLIB/src/stm32f4xx_rtc.c ****     {
 1537              		.loc 1 1343 0 is_stmt 1
 1538 0044 054B     		ldr	r3, .L125
 1539 0046 DB68     		ldr	r3, [r3, #12]
 1540 0048 1942     		tst	r1, r3
 1541 004a 01D1     		bne	.L123
1345:FWLIB/src/stm32f4xx_rtc.c ****     } 
 1542              		.loc 1 1345 0
 1543 004c 0020     		movs	r0, #0
 1544              	.LVL141:
 1545 004e 00E0     		b	.L120
 1546              	.LVL142:
 1547              	.L123:
1349:FWLIB/src/stm32f4xx_rtc.c ****     }        
 1548              		.loc 1 1349 0
 1549 0050 0120     		movs	r0, #1
 1550              	.LVL143:
 1551              	.L120:
1354:FWLIB/src/stm32f4xx_rtc.c ****   
 1552              		.loc 1 1354 0
 1553 0052 FF22     		movs	r2, #255
 1554 0054 014B     		ldr	r3, .L125
 1555 0056 5A62     		str	r2, [r3, #36]
1357:FWLIB/src/stm32f4xx_rtc.c **** 
 1556              		.loc 1 1357 0
 1557 0058 02B0     		add	sp, sp, #8
 1558              	.LCFI16:
 1559              		.cfi_def_cfa_offset 0
 1560              		@ sp needed
 1561 005a 7047     		bx	lr
 1562              	.L126:
 1563              		.align	2
 1564              	.L125:
 1565 005c 00280040 		.word	1073752064
 1566              		.cfi_endproc
 1567              	.LFE142:
 1569              		.section	.text.RTC_AlarmSubSecondConfig,"ax",%progbits
 1570              		.align	2
 1571              		.global	RTC_AlarmSubSecondConfig
 1572              		.thumb
 1573              		.thumb_func
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 81


 1575              	RTC_AlarmSubSecondConfig:
 1576              	.LFB143:
1405:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1577              		.loc 1 1405 0
 1578              		.cfi_startproc
 1579              		@ args = 0, pretend = 0, frame = 0
 1580              		@ frame_needed = 0, uses_anonymous_args = 0
 1581              		@ link register save eliminated.
 1582              	.LVL144:
 1583 0000 10B4     		push	{r4}
 1584              	.LCFI17:
 1585              		.cfi_def_cfa_offset 4
 1586              		.cfi_offset 4, -4
 1587              	.LVL145:
1414:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1588              		.loc 1 1414 0
 1589 0002 094B     		ldr	r3, .L131
 1590 0004 CA24     		movs	r4, #202
 1591 0006 5C62     		str	r4, [r3, #36]
1415:FWLIB/src/stm32f4xx_rtc.c ****   
 1592              		.loc 1 1415 0
 1593 0008 5324     		movs	r4, #83
 1594 000a 5C62     		str	r4, [r3, #36]
1418:FWLIB/src/stm32f4xx_rtc.c ****   
 1595              		.loc 1 1418 0
 1596 000c 0A43     		orrs	r2, r2, r1
 1597              	.LVL146:
1420:FWLIB/src/stm32f4xx_rtc.c ****   {
 1598              		.loc 1 1420 0
 1599 000e B0F5807F 		cmp	r0, #256
 1600 0012 01D1     		bne	.L128
1423:FWLIB/src/stm32f4xx_rtc.c ****   }
 1601              		.loc 1 1423 0
 1602 0014 5A64     		str	r2, [r3, #68]
 1603 0016 01E0     		b	.L129
 1604              	.L128:
1428:FWLIB/src/stm32f4xx_rtc.c ****   }
 1605              		.loc 1 1428 0
 1606 0018 034B     		ldr	r3, .L131
 1607 001a 9A64     		str	r2, [r3, #72]
 1608              	.L129:
1432:FWLIB/src/stm32f4xx_rtc.c **** 
 1609              		.loc 1 1432 0
 1610 001c FF22     		movs	r2, #255
 1611              	.LVL147:
 1612 001e 024B     		ldr	r3, .L131
 1613 0020 5A62     		str	r2, [r3, #36]
1434:FWLIB/src/stm32f4xx_rtc.c **** 
 1614              		.loc 1 1434 0
 1615 0022 5DF8044B 		ldr	r4, [sp], #4
 1616              	.LCFI18:
 1617              		.cfi_restore 4
 1618              		.cfi_def_cfa_offset 0
 1619 0026 7047     		bx	lr
 1620              	.L132:
 1621              		.align	2
 1622              	.L131:
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 82


 1623 0028 00280040 		.word	1073752064
 1624              		.cfi_endproc
 1625              	.LFE143:
 1627              		.section	.text.RTC_GetAlarmSubSecond,"ax",%progbits
 1628              		.align	2
 1629              		.global	RTC_GetAlarmSubSecond
 1630              		.thumb
 1631              		.thumb_func
 1633              	RTC_GetAlarmSubSecond:
 1634              	.LFB144:
1446:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1635              		.loc 1 1446 0
 1636              		.cfi_startproc
 1637              		@ args = 0, pretend = 0, frame = 0
 1638              		@ frame_needed = 0, uses_anonymous_args = 0
 1639              		@ link register save eliminated.
 1640              	.LVL148:
1450:FWLIB/src/stm32f4xx_rtc.c ****   {
 1641              		.loc 1 1450 0
 1642 0000 B0F5807F 		cmp	r0, #256
 1643 0004 04D1     		bne	.L134
1452:FWLIB/src/stm32f4xx_rtc.c ****   }
 1644              		.loc 1 1452 0
 1645 0006 054B     		ldr	r3, .L136
 1646 0008 586C     		ldr	r0, [r3, #68]
 1647              	.LVL149:
 1648 000a C0F30E00 		ubfx	r0, r0, #0, #15
 1649              	.LVL150:
 1650 000e 7047     		bx	lr
 1651              	.LVL151:
 1652              	.L134:
1456:FWLIB/src/stm32f4xx_rtc.c ****   } 
 1653              		.loc 1 1456 0
 1654 0010 024B     		ldr	r3, .L136
 1655 0012 986C     		ldr	r0, [r3, #72]
 1656              	.LVL152:
 1657 0014 C0F30E00 		ubfx	r0, r0, #0, #15
 1658              	.LVL153:
1460:FWLIB/src/stm32f4xx_rtc.c **** 
 1659              		.loc 1 1460 0
 1660 0018 7047     		bx	lr
 1661              	.L137:
 1662 001a 00BF     		.align	2
 1663              	.L136:
 1664 001c 00280040 		.word	1073752064
 1665              		.cfi_endproc
 1666              	.LFE144:
 1668              		.section	.text.RTC_WakeUpClockConfig,"ax",%progbits
 1669              		.align	2
 1670              		.global	RTC_WakeUpClockConfig
 1671              		.thumb
 1672              		.thumb_func
 1674              	RTC_WakeUpClockConfig:
 1675              	.LFB145:
1495:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 1676              		.loc 1 1495 0
 1677              		.cfi_startproc
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 83


 1678              		@ args = 0, pretend = 0, frame = 0
 1679              		@ frame_needed = 0, uses_anonymous_args = 0
 1680              		@ link register save eliminated.
 1681              	.LVL154:
1500:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1682              		.loc 1 1500 0
 1683 0000 074B     		ldr	r3, .L139
 1684 0002 CA22     		movs	r2, #202
 1685 0004 5A62     		str	r2, [r3, #36]
1501:FWLIB/src/stm32f4xx_rtc.c **** 
 1686              		.loc 1 1501 0
 1687 0006 5322     		movs	r2, #83
 1688 0008 5A62     		str	r2, [r3, #36]
1504:FWLIB/src/stm32f4xx_rtc.c **** 
 1689              		.loc 1 1504 0
 1690 000a 9A68     		ldr	r2, [r3, #8]
 1691 000c 22F00702 		bic	r2, r2, #7
 1692 0010 9A60     		str	r2, [r3, #8]
1507:FWLIB/src/stm32f4xx_rtc.c ****   
 1693              		.loc 1 1507 0
 1694 0012 9A68     		ldr	r2, [r3, #8]
 1695 0014 1043     		orrs	r0, r0, r2
 1696              	.LVL155:
 1697 0016 9860     		str	r0, [r3, #8]
1510:FWLIB/src/stm32f4xx_rtc.c **** }
 1698              		.loc 1 1510 0
 1699 0018 FF22     		movs	r2, #255
 1700 001a 5A62     		str	r2, [r3, #36]
 1701 001c 7047     		bx	lr
 1702              	.L140:
 1703 001e 00BF     		.align	2
 1704              	.L139:
 1705 0020 00280040 		.word	1073752064
 1706              		.cfi_endproc
 1707              	.LFE145:
 1709              		.section	.text.RTC_SetWakeUpCounter,"ax",%progbits
 1710              		.align	2
 1711              		.global	RTC_SetWakeUpCounter
 1712              		.thumb
 1713              		.thumb_func
 1715              	RTC_SetWakeUpCounter:
 1716              	.LFB146:
1522:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 1717              		.loc 1 1522 0
 1718              		.cfi_startproc
 1719              		@ args = 0, pretend = 0, frame = 0
 1720              		@ frame_needed = 0, uses_anonymous_args = 0
 1721              		@ link register save eliminated.
 1722              	.LVL156:
1527:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1723              		.loc 1 1527 0
 1724 0000 044B     		ldr	r3, .L142
 1725 0002 CA22     		movs	r2, #202
 1726 0004 5A62     		str	r2, [r3, #36]
1528:FWLIB/src/stm32f4xx_rtc.c ****   
 1727              		.loc 1 1528 0
 1728 0006 5322     		movs	r2, #83
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 84


 1729 0008 5A62     		str	r2, [r3, #36]
1531:FWLIB/src/stm32f4xx_rtc.c ****   
 1730              		.loc 1 1531 0
 1731 000a 5861     		str	r0, [r3, #20]
1534:FWLIB/src/stm32f4xx_rtc.c **** }
 1732              		.loc 1 1534 0
 1733 000c FF22     		movs	r2, #255
 1734 000e 5A62     		str	r2, [r3, #36]
 1735 0010 7047     		bx	lr
 1736              	.L143:
 1737 0012 00BF     		.align	2
 1738              	.L142:
 1739 0014 00280040 		.word	1073752064
 1740              		.cfi_endproc
 1741              	.LFE146:
 1743              		.section	.text.RTC_GetWakeUpCounter,"ax",%progbits
 1744              		.align	2
 1745              		.global	RTC_GetWakeUpCounter
 1746              		.thumb
 1747              		.thumb_func
 1749              	RTC_GetWakeUpCounter:
 1750              	.LFB147:
1543:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the counter value */
 1751              		.loc 1 1543 0
 1752              		.cfi_startproc
 1753              		@ args = 0, pretend = 0, frame = 0
 1754              		@ frame_needed = 0, uses_anonymous_args = 0
 1755              		@ link register save eliminated.
1545:FWLIB/src/stm32f4xx_rtc.c **** }
 1756              		.loc 1 1545 0
 1757 0000 014B     		ldr	r3, .L145
 1758 0002 5869     		ldr	r0, [r3, #20]
1546:FWLIB/src/stm32f4xx_rtc.c **** 
 1759              		.loc 1 1546 0
 1760 0004 80B2     		uxth	r0, r0
 1761 0006 7047     		bx	lr
 1762              	.L146:
 1763              		.align	2
 1764              	.L145:
 1765 0008 00280040 		.word	1073752064
 1766              		.cfi_endproc
 1767              	.LFE147:
 1769              		.section	.text.RTC_WakeUpCmd,"ax",%progbits
 1770              		.align	2
 1771              		.global	RTC_WakeUpCmd
 1772              		.thumb
 1773              		.thumb_func
 1775              	RTC_WakeUpCmd:
 1776              	.LFB148:
1555:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 1777              		.loc 1 1555 0
 1778              		.cfi_startproc
 1779              		@ args = 0, pretend = 0, frame = 8
 1780              		@ frame_needed = 0, uses_anonymous_args = 0
 1781              		@ link register save eliminated.
 1782              	.LVL157:
 1783 0000 82B0     		sub	sp, sp, #8
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 85


 1784              	.LCFI19:
 1785              		.cfi_def_cfa_offset 8
1556:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 1786              		.loc 1 1556 0
 1787 0002 0023     		movs	r3, #0
 1788 0004 0193     		str	r3, [sp, #4]
 1789              	.LVL158:
1564:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1790              		.loc 1 1564 0
 1791 0006 164B     		ldr	r3, .L154
 1792 0008 CA22     		movs	r2, #202
 1793 000a 5A62     		str	r2, [r3, #36]
1565:FWLIB/src/stm32f4xx_rtc.c **** 
 1794              		.loc 1 1565 0
 1795 000c 5322     		movs	r2, #83
 1796 000e 5A62     		str	r2, [r3, #36]
1567:FWLIB/src/stm32f4xx_rtc.c ****   {
 1797              		.loc 1 1567 0
 1798 0010 30B1     		cbz	r0, .L148
1570:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 1799              		.loc 1 1570 0
 1800 0012 1A46     		mov	r2, r3
 1801 0014 9B68     		ldr	r3, [r3, #8]
 1802 0016 43F48063 		orr	r3, r3, #1024
 1803 001a 9360     		str	r3, [r2, #8]
 1804              	.LVL159:
1571:FWLIB/src/stm32f4xx_rtc.c ****   }
 1805              		.loc 1 1571 0
 1806 001c 0120     		movs	r0, #1
 1807              	.LVL160:
 1808 001e 19E0     		b	.L149
 1809              	.LVL161:
 1810              	.L148:
1576:FWLIB/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 1811              		.loc 1 1576 0
 1812 0020 0F4A     		ldr	r2, .L154
 1813 0022 9368     		ldr	r3, [r2, #8]
 1814 0024 23F48063 		bic	r3, r3, #1024
 1815 0028 9360     		str	r3, [r2, #8]
 1816              	.LVL162:
 1817              	.L151:
1580:FWLIB/src/stm32f4xx_rtc.c ****       wutcounter++;  
 1818              		.loc 1 1580 0 discriminator 2
 1819 002a 0D4B     		ldr	r3, .L154
 1820 002c DB68     		ldr	r3, [r3, #12]
 1821 002e 03F00402 		and	r2, r3, #4
 1822              	.LVL163:
1581:FWLIB/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 1823              		.loc 1 1581 0 discriminator 2
 1824 0032 019B     		ldr	r3, [sp, #4]
 1825 0034 0133     		adds	r3, r3, #1
 1826 0036 0193     		str	r3, [sp, #4]
1582:FWLIB/src/stm32f4xx_rtc.c ****     
 1827              		.loc 1 1582 0 discriminator 2
 1828 0038 019B     		ldr	r3, [sp, #4]
 1829 003a B3F5803F 		cmp	r3, #65536
 1830 003e 01D0     		beq	.L150
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 86


1582:FWLIB/src/stm32f4xx_rtc.c ****     
 1831              		.loc 1 1582 0 is_stmt 0 discriminator 1
 1832 0040 002A     		cmp	r2, #0
 1833 0042 F2D0     		beq	.L151
 1834              	.L150:
1584:FWLIB/src/stm32f4xx_rtc.c ****     {
 1835              		.loc 1 1584 0 is_stmt 1
 1836 0044 064B     		ldr	r3, .L154
 1837 0046 DB68     		ldr	r3, [r3, #12]
 1838 0048 13F0040F 		tst	r3, #4
 1839 004c 01D1     		bne	.L152
1586:FWLIB/src/stm32f4xx_rtc.c ****     }
 1840              		.loc 1 1586 0
 1841 004e 0020     		movs	r0, #0
 1842              	.LVL164:
 1843 0050 00E0     		b	.L149
 1844              	.LVL165:
 1845              	.L152:
1590:FWLIB/src/stm32f4xx_rtc.c ****     }    
 1846              		.loc 1 1590 0
 1847 0052 0120     		movs	r0, #1
 1848              	.LVL166:
 1849              	.L149:
1595:FWLIB/src/stm32f4xx_rtc.c ****   
 1850              		.loc 1 1595 0
 1851 0054 FF22     		movs	r2, #255
 1852 0056 024B     		ldr	r3, .L154
 1853 0058 5A62     		str	r2, [r3, #36]
1598:FWLIB/src/stm32f4xx_rtc.c **** 
 1854              		.loc 1 1598 0
 1855 005a 02B0     		add	sp, sp, #8
 1856              	.LCFI20:
 1857              		.cfi_def_cfa_offset 0
 1858              		@ sp needed
 1859 005c 7047     		bx	lr
 1860              	.L155:
 1861 005e 00BF     		.align	2
 1862              	.L154:
 1863 0060 00280040 		.word	1073752064
 1864              		.cfi_endproc
 1865              	.LFE148:
 1867              		.section	.text.RTC_DayLightSavingConfig,"ax",%progbits
 1868              		.align	2
 1869              		.global	RTC_DayLightSavingConfig
 1870              		.thumb
 1871              		.thumb_func
 1873              	RTC_DayLightSavingConfig:
 1874              	.LFB149:
1632:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 1875              		.loc 1 1632 0
 1876              		.cfi_startproc
 1877              		@ args = 0, pretend = 0, frame = 0
 1878              		@ frame_needed = 0, uses_anonymous_args = 0
 1879              		@ link register save eliminated.
 1880              	.LVL167:
1638:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1881              		.loc 1 1638 0
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 87


 1882 0000 074B     		ldr	r3, .L157
 1883 0002 CA22     		movs	r2, #202
 1884 0004 5A62     		str	r2, [r3, #36]
1639:FWLIB/src/stm32f4xx_rtc.c **** 
 1885              		.loc 1 1639 0
 1886 0006 5322     		movs	r2, #83
 1887 0008 5A62     		str	r2, [r3, #36]
1642:FWLIB/src/stm32f4xx_rtc.c **** 
 1888              		.loc 1 1642 0
 1889 000a 9A68     		ldr	r2, [r3, #8]
 1890 000c 22F48022 		bic	r2, r2, #262144
 1891 0010 9A60     		str	r2, [r3, #8]
1645:FWLIB/src/stm32f4xx_rtc.c **** 
 1892              		.loc 1 1645 0
 1893 0012 9A68     		ldr	r2, [r3, #8]
 1894 0014 0143     		orrs	r1, r1, r0
 1895              	.LVL168:
 1896 0016 1143     		orrs	r1, r1, r2
 1897 0018 9960     		str	r1, [r3, #8]
1648:FWLIB/src/stm32f4xx_rtc.c **** }
 1898              		.loc 1 1648 0
 1899 001a FF22     		movs	r2, #255
 1900 001c 5A62     		str	r2, [r3, #36]
 1901 001e 7047     		bx	lr
 1902              	.L158:
 1903              		.align	2
 1904              	.L157:
 1905 0020 00280040 		.word	1073752064
 1906              		.cfi_endproc
 1907              	.LFE149:
 1909              		.section	.text.RTC_GetStoreOperation,"ax",%progbits
 1910              		.align	2
 1911              		.global	RTC_GetStoreOperation
 1912              		.thumb
 1913              		.thumb_func
 1915              	RTC_GetStoreOperation:
 1916              	.LFB150:
1659:FWLIB/src/stm32f4xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
 1917              		.loc 1 1659 0
 1918              		.cfi_startproc
 1919              		@ args = 0, pretend = 0, frame = 0
 1920              		@ frame_needed = 0, uses_anonymous_args = 0
 1921              		@ link register save eliminated.
1660:FWLIB/src/stm32f4xx_rtc.c **** }
 1922              		.loc 1 1660 0
 1923 0000 024B     		ldr	r3, .L160
 1924 0002 9868     		ldr	r0, [r3, #8]
1661:FWLIB/src/stm32f4xx_rtc.c **** 
 1925              		.loc 1 1661 0
 1926 0004 00F48020 		and	r0, r0, #262144
 1927 0008 7047     		bx	lr
 1928              	.L161:
 1929 000a 00BF     		.align	2
 1930              	.L160:
 1931 000c 00280040 		.word	1073752064
 1932              		.cfi_endproc
 1933              	.LFE150:
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 88


 1935              		.section	.text.RTC_OutputConfig,"ax",%progbits
 1936              		.align	2
 1937              		.global	RTC_OutputConfig
 1938              		.thumb
 1939              		.thumb_func
 1941              	RTC_OutputConfig:
 1942              	.LFB151:
1698:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 1943              		.loc 1 1698 0
 1944              		.cfi_startproc
 1945              		@ args = 0, pretend = 0, frame = 0
 1946              		@ frame_needed = 0, uses_anonymous_args = 0
 1947              		@ link register save eliminated.
 1948              	.LVL169:
1704:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1949              		.loc 1 1704 0
 1950 0000 074B     		ldr	r3, .L163
 1951 0002 CA22     		movs	r2, #202
 1952 0004 5A62     		str	r2, [r3, #36]
1705:FWLIB/src/stm32f4xx_rtc.c **** 
 1953              		.loc 1 1705 0
 1954 0006 5322     		movs	r2, #83
 1955 0008 5A62     		str	r2, [r3, #36]
1708:FWLIB/src/stm32f4xx_rtc.c **** 
 1956              		.loc 1 1708 0
 1957 000a 9A68     		ldr	r2, [r3, #8]
 1958 000c 22F4E002 		bic	r2, r2, #7340032
 1959 0010 9A60     		str	r2, [r3, #8]
1711:FWLIB/src/stm32f4xx_rtc.c **** 
 1960              		.loc 1 1711 0
 1961 0012 9A68     		ldr	r2, [r3, #8]
 1962 0014 0143     		orrs	r1, r1, r0
 1963              	.LVL170:
 1964 0016 1143     		orrs	r1, r1, r2
 1965 0018 9960     		str	r1, [r3, #8]
1714:FWLIB/src/stm32f4xx_rtc.c **** }
 1966              		.loc 1 1714 0
 1967 001a FF22     		movs	r2, #255
 1968 001c 5A62     		str	r2, [r3, #36]
 1969 001e 7047     		bx	lr
 1970              	.L164:
 1971              		.align	2
 1972              	.L163:
 1973 0020 00280040 		.word	1073752064
 1974              		.cfi_endproc
 1975              	.LFE151:
 1977              		.section	.text.RTC_CoarseCalibConfig,"ax",%progbits
 1978              		.align	2
 1979              		.global	RTC_CoarseCalibConfig
 1980              		.thumb
 1981              		.thumb_func
 1983              	RTC_CoarseCalibConfig:
 1984              	.LFB152:
1752:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 1985              		.loc 1 1752 0
 1986              		.cfi_startproc
 1987              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 89


 1988              		@ frame_needed = 0, uses_anonymous_args = 0
 1989              	.LVL171:
 1990 0000 38B5     		push	{r3, r4, r5, lr}
 1991              	.LCFI21:
 1992              		.cfi_def_cfa_offset 16
 1993              		.cfi_offset 3, -16
 1994              		.cfi_offset 4, -12
 1995              		.cfi_offset 5, -8
 1996              		.cfi_offset 14, -4
 1997 0002 0546     		mov	r5, r0
 1998 0004 0C46     		mov	r4, r1
 1999              	.LVL172:
1760:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2000              		.loc 1 1760 0
 2001 0006 0A4B     		ldr	r3, .L169
 2002 0008 CA22     		movs	r2, #202
 2003 000a 5A62     		str	r2, [r3, #36]
1761:FWLIB/src/stm32f4xx_rtc.c **** 
 2004              		.loc 1 1761 0
 2005 000c 5322     		movs	r2, #83
 2006 000e 5A62     		str	r2, [r3, #36]
1764:FWLIB/src/stm32f4xx_rtc.c ****   {
 2007              		.loc 1 1764 0
 2008 0010 FFF7FEFF 		bl	RTC_EnterInitMode
 2009              	.LVL173:
 2010 0014 30B1     		cbz	r0, .L167
1771:FWLIB/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 2011              		.loc 1 1771 0
 2012 0016 2C43     		orrs	r4, r4, r5
 2013              	.LVL174:
 2014 0018 054B     		ldr	r3, .L169
 2015 001a 9C61     		str	r4, [r3, #24]
1773:FWLIB/src/stm32f4xx_rtc.c ****     
 2016              		.loc 1 1773 0
 2017 001c FFF7FEFF 		bl	RTC_ExitInitMode
 2018              	.LVL175:
1775:FWLIB/src/stm32f4xx_rtc.c ****   } 
 2019              		.loc 1 1775 0
 2020 0020 0120     		movs	r0, #1
 2021 0022 00E0     		b	.L166
 2022              	.LVL176:
 2023              	.L167:
1766:FWLIB/src/stm32f4xx_rtc.c ****   } 
 2024              		.loc 1 1766 0
 2025 0024 0020     		movs	r0, #0
 2026              	.LVL177:
 2027              	.L166:
1779:FWLIB/src/stm32f4xx_rtc.c ****   
 2028              		.loc 1 1779 0
 2029 0026 FF22     		movs	r2, #255
 2030 0028 014B     		ldr	r3, .L169
 2031 002a 5A62     		str	r2, [r3, #36]
1782:FWLIB/src/stm32f4xx_rtc.c **** 
 2032              		.loc 1 1782 0
 2033 002c 38BD     		pop	{r3, r4, r5, pc}
 2034              	.LVL178:
 2035              	.L170:
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 90


 2036 002e 00BF     		.align	2
 2037              	.L169:
 2038 0030 00280040 		.word	1073752064
 2039              		.cfi_endproc
 2040              	.LFE152:
 2042              		.section	.text.RTC_CoarseCalibCmd,"ax",%progbits
 2043              		.align	2
 2044              		.global	RTC_CoarseCalibCmd
 2045              		.thumb
 2046              		.thumb_func
 2048              	RTC_CoarseCalibCmd:
 2049              	.LFB153:
1793:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2050              		.loc 1 1793 0
 2051              		.cfi_startproc
 2052              		@ args = 0, pretend = 0, frame = 0
 2053              		@ frame_needed = 0, uses_anonymous_args = 0
 2054              	.LVL179:
 2055 0000 10B5     		push	{r4, lr}
 2056              	.LCFI22:
 2057              		.cfi_def_cfa_offset 8
 2058              		.cfi_offset 4, -8
 2059              		.cfi_offset 14, -4
 2060 0002 0446     		mov	r4, r0
 2061              	.LVL180:
1800:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2062              		.loc 1 1800 0
 2063 0004 0E4B     		ldr	r3, .L177
 2064 0006 CA22     		movs	r2, #202
 2065 0008 5A62     		str	r2, [r3, #36]
1801:FWLIB/src/stm32f4xx_rtc.c ****   
 2066              		.loc 1 1801 0
 2067 000a 5322     		movs	r2, #83
 2068 000c 5A62     		str	r2, [r3, #36]
1804:FWLIB/src/stm32f4xx_rtc.c ****   {
 2069              		.loc 1 1804 0
 2070 000e FFF7FEFF 		bl	RTC_EnterInitMode
 2071              	.LVL181:
 2072 0012 78B1     		cbz	r0, .L175
1810:FWLIB/src/stm32f4xx_rtc.c ****     {
 2073              		.loc 1 1810 0
 2074 0014 2CB1     		cbz	r4, .L173
1813:FWLIB/src/stm32f4xx_rtc.c ****     }
 2075              		.loc 1 1813 0
 2076 0016 0A4A     		ldr	r2, .L177
 2077 0018 9368     		ldr	r3, [r2, #8]
 2078 001a 43F08003 		orr	r3, r3, #128
 2079 001e 9360     		str	r3, [r2, #8]
 2080 0020 04E0     		b	.L174
 2081              	.L173:
1818:FWLIB/src/stm32f4xx_rtc.c ****     }
 2082              		.loc 1 1818 0
 2083 0022 074A     		ldr	r2, .L177
 2084 0024 9368     		ldr	r3, [r2, #8]
 2085 0026 23F08003 		bic	r3, r3, #128
 2086 002a 9360     		str	r3, [r2, #8]
 2087              	.L174:
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 91


1821:FWLIB/src/stm32f4xx_rtc.c ****     
 2088              		.loc 1 1821 0
 2089 002c FFF7FEFF 		bl	RTC_ExitInitMode
 2090              	.LVL182:
1823:FWLIB/src/stm32f4xx_rtc.c ****   } 
 2091              		.loc 1 1823 0
 2092 0030 0120     		movs	r0, #1
 2093 0032 00E0     		b	.L172
 2094              	.LVL183:
 2095              	.L175:
1806:FWLIB/src/stm32f4xx_rtc.c ****   }
 2096              		.loc 1 1806 0
 2097 0034 0020     		movs	r0, #0
 2098              	.LVL184:
 2099              	.L172:
1827:FWLIB/src/stm32f4xx_rtc.c ****   
 2100              		.loc 1 1827 0
 2101 0036 FF22     		movs	r2, #255
 2102 0038 014B     		ldr	r3, .L177
 2103 003a 5A62     		str	r2, [r3, #36]
1830:FWLIB/src/stm32f4xx_rtc.c **** 
 2104              		.loc 1 1830 0
 2105 003c 10BD     		pop	{r4, pc}
 2106              	.L178:
 2107 003e 00BF     		.align	2
 2108              	.L177:
 2109 0040 00280040 		.word	1073752064
 2110              		.cfi_endproc
 2111              	.LFE153:
 2113              		.section	.text.RTC_CalibOutputCmd,"ax",%progbits
 2114              		.align	2
 2115              		.global	RTC_CalibOutputCmd
 2116              		.thumb
 2117              		.thumb_func
 2119              	RTC_CalibOutputCmd:
 2120              	.LFB154:
1839:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2121              		.loc 1 1839 0
 2122              		.cfi_startproc
 2123              		@ args = 0, pretend = 0, frame = 0
 2124              		@ frame_needed = 0, uses_anonymous_args = 0
 2125              		@ link register save eliminated.
 2126              	.LVL185:
1844:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2127              		.loc 1 1844 0
 2128 0000 0A4B     		ldr	r3, .L182
 2129 0002 CA22     		movs	r2, #202
 2130 0004 5A62     		str	r2, [r3, #36]
1845:FWLIB/src/stm32f4xx_rtc.c ****   
 2131              		.loc 1 1845 0
 2132 0006 5322     		movs	r2, #83
 2133 0008 5A62     		str	r2, [r3, #36]
1847:FWLIB/src/stm32f4xx_rtc.c ****   {
 2134              		.loc 1 1847 0
 2135 000a 28B1     		cbz	r0, .L180
1850:FWLIB/src/stm32f4xx_rtc.c ****   }
 2136              		.loc 1 1850 0
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 92


 2137 000c 1A46     		mov	r2, r3
 2138 000e 9B68     		ldr	r3, [r3, #8]
 2139 0010 43F40003 		orr	r3, r3, #8388608
 2140 0014 9360     		str	r3, [r2, #8]
 2141 0016 04E0     		b	.L181
 2142              	.L180:
1855:FWLIB/src/stm32f4xx_rtc.c ****   }
 2143              		.loc 1 1855 0
 2144 0018 044A     		ldr	r2, .L182
 2145 001a 9368     		ldr	r3, [r2, #8]
 2146 001c 23F40003 		bic	r3, r3, #8388608
 2147 0020 9360     		str	r3, [r2, #8]
 2148              	.L181:
1859:FWLIB/src/stm32f4xx_rtc.c **** }
 2149              		.loc 1 1859 0
 2150 0022 FF22     		movs	r2, #255
 2151 0024 014B     		ldr	r3, .L182
 2152 0026 5A62     		str	r2, [r3, #36]
 2153 0028 7047     		bx	lr
 2154              	.L183:
 2155 002a 00BF     		.align	2
 2156              	.L182:
 2157 002c 00280040 		.word	1073752064
 2158              		.cfi_endproc
 2159              	.LFE154:
 2161              		.section	.text.RTC_CalibOutputConfig,"ax",%progbits
 2162              		.align	2
 2163              		.global	RTC_CalibOutputConfig
 2164              		.thumb
 2165              		.thumb_func
 2167              	RTC_CalibOutputConfig:
 2168              	.LFB155:
1871:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2169              		.loc 1 1871 0
 2170              		.cfi_startproc
 2171              		@ args = 0, pretend = 0, frame = 0
 2172              		@ frame_needed = 0, uses_anonymous_args = 0
 2173              		@ link register save eliminated.
 2174              	.LVL186:
1876:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2175              		.loc 1 1876 0
 2176 0000 074B     		ldr	r3, .L185
 2177 0002 CA22     		movs	r2, #202
 2178 0004 5A62     		str	r2, [r3, #36]
1877:FWLIB/src/stm32f4xx_rtc.c ****   
 2179              		.loc 1 1877 0
 2180 0006 5322     		movs	r2, #83
 2181 0008 5A62     		str	r2, [r3, #36]
1880:FWLIB/src/stm32f4xx_rtc.c **** 
 2182              		.loc 1 1880 0
 2183 000a 9A68     		ldr	r2, [r3, #8]
 2184 000c 22F40022 		bic	r2, r2, #524288
 2185 0010 9A60     		str	r2, [r3, #8]
1883:FWLIB/src/stm32f4xx_rtc.c **** 
 2186              		.loc 1 1883 0
 2187 0012 9A68     		ldr	r2, [r3, #8]
 2188 0014 1043     		orrs	r0, r0, r2
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 93


 2189              	.LVL187:
 2190 0016 9860     		str	r0, [r3, #8]
1886:FWLIB/src/stm32f4xx_rtc.c **** }
 2191              		.loc 1 1886 0
 2192 0018 FF22     		movs	r2, #255
 2193 001a 5A62     		str	r2, [r3, #36]
 2194 001c 7047     		bx	lr
 2195              	.L186:
 2196 001e 00BF     		.align	2
 2197              	.L185:
 2198 0020 00280040 		.word	1073752064
 2199              		.cfi_endproc
 2200              	.LFE155:
 2202              		.section	.text.RTC_SmoothCalibConfig,"ax",%progbits
 2203              		.align	2
 2204              		.global	RTC_SmoothCalibConfig
 2205              		.thumb
 2206              		.thumb_func
 2208              	RTC_SmoothCalibConfig:
 2209              	.LFB156:
1909:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2210              		.loc 1 1909 0
 2211              		.cfi_startproc
 2212              		@ args = 0, pretend = 0, frame = 0
 2213              		@ frame_needed = 0, uses_anonymous_args = 0
 2214              		@ link register save eliminated.
 2215              	.LVL188:
 2216 0000 10B4     		push	{r4}
 2217              	.LCFI23:
 2218              		.cfi_def_cfa_offset 4
 2219              		.cfi_offset 4, -4
 2220              	.LVL189:
1919:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2221              		.loc 1 1919 0
 2222 0002 134B     		ldr	r3, .L195
 2223 0004 CA24     		movs	r4, #202
 2224 0006 5C62     		str	r4, [r3, #36]
1920:FWLIB/src/stm32f4xx_rtc.c ****   
 2225              		.loc 1 1920 0
 2226 0008 5324     		movs	r4, #83
 2227 000a 5C62     		str	r4, [r3, #36]
1923:FWLIB/src/stm32f4xx_rtc.c ****   {
 2228              		.loc 1 1923 0
 2229 000c DB68     		ldr	r3, [r3, #12]
 2230 000e 13F4803F 		tst	r3, #65536
 2231 0012 02D1     		bne	.L192
 2232 0014 0AE0     		b	.L189
 2233              	.LVL190:
 2234              	.L190:
1928:FWLIB/src/stm32f4xx_rtc.c ****     }
 2235              		.loc 1 1928 0
 2236 0016 0133     		adds	r3, r3, #1
 2237              	.LVL191:
 2238 0018 00E0     		b	.L188
 2239              	.LVL192:
 2240              	.L192:
 2241 001a 0023     		movs	r3, #0
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 94


 2242              	.LVL193:
 2243              	.L188:
1926:FWLIB/src/stm32f4xx_rtc.c ****     {
 2244              		.loc 1 1926 0
 2245 001c 0C4C     		ldr	r4, .L195
 2246 001e E468     		ldr	r4, [r4, #12]
 2247 0020 14F4803F 		tst	r4, #65536
 2248 0024 02D0     		beq	.L189
1926:FWLIB/src/stm32f4xx_rtc.c ****     {
 2249              		.loc 1 1926 0 is_stmt 0 discriminator 1
 2250 0026 B3F5003F 		cmp	r3, #131072
 2251 002a F4D1     		bne	.L190
 2252              	.LVL194:
 2253              	.L189:
1933:FWLIB/src/stm32f4xx_rtc.c ****   {
 2254              		.loc 1 1933 0 is_stmt 1
 2255 002c 084B     		ldr	r3, .L195
 2256 002e DB68     		ldr	r3, [r3, #12]
 2257 0030 13F4803F 		tst	r3, #65536
 2258 0034 05D1     		bne	.L193
1936:FWLIB/src/stm32f4xx_rtc.c **** 
 2259              		.loc 1 1936 0
 2260 0036 0143     		orrs	r1, r1, r0
 2261              	.LVL195:
 2262 0038 0A43     		orrs	r2, r2, r1
 2263              	.LVL196:
 2264 003a 054B     		ldr	r3, .L195
 2265 003c DA63     		str	r2, [r3, #60]
 2266              	.LVL197:
1938:FWLIB/src/stm32f4xx_rtc.c ****   }
 2267              		.loc 1 1938 0
 2268 003e 0120     		movs	r0, #1
 2269              	.LVL198:
 2270 0040 00E0     		b	.L191
 2271              	.LVL199:
 2272              	.L193:
1942:FWLIB/src/stm32f4xx_rtc.c ****   }
 2273              		.loc 1 1942 0
 2274 0042 0020     		movs	r0, #0
 2275              	.LVL200:
 2276              	.L191:
1946:FWLIB/src/stm32f4xx_rtc.c ****   
 2277              		.loc 1 1946 0
 2278 0044 FF22     		movs	r2, #255
 2279 0046 024B     		ldr	r3, .L195
 2280 0048 5A62     		str	r2, [r3, #36]
1949:FWLIB/src/stm32f4xx_rtc.c **** 
 2281              		.loc 1 1949 0
 2282 004a 5DF8044B 		ldr	r4, [sp], #4
 2283              	.LCFI24:
 2284              		.cfi_restore 4
 2285              		.cfi_def_cfa_offset 0
 2286 004e 7047     		bx	lr
 2287              	.L196:
 2288              		.align	2
 2289              	.L195:
 2290 0050 00280040 		.word	1073752064
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 95


 2291              		.cfi_endproc
 2292              	.LFE156:
 2294              		.section	.text.RTC_TimeStampCmd,"ax",%progbits
 2295              		.align	2
 2296              		.global	RTC_TimeStampCmd
 2297              		.thumb
 2298              		.thumb_func
 2300              	RTC_TimeStampCmd:
 2301              	.LFB157:
1983:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2302              		.loc 1 1983 0
 2303              		.cfi_startproc
 2304              		@ args = 0, pretend = 0, frame = 0
 2305              		@ frame_needed = 0, uses_anonymous_args = 0
 2306              		@ link register save eliminated.
 2307              	.LVL201:
1991:FWLIB/src/stm32f4xx_rtc.c **** 
 2308              		.loc 1 1991 0
 2309 0000 0A4B     		ldr	r3, .L200
 2310 0002 9B68     		ldr	r3, [r3, #8]
 2311 0004 23F40063 		bic	r3, r3, #2048
 2312 0008 23F00803 		bic	r3, r3, #8
 2313              	.LVL202:
1994:FWLIB/src/stm32f4xx_rtc.c ****   {
 2314              		.loc 1 1994 0
 2315 000c 19B1     		cbz	r1, .L198
1996:FWLIB/src/stm32f4xx_rtc.c ****   }
 2316              		.loc 1 1996 0
 2317 000e 0343     		orrs	r3, r3, r0
 2318              	.LVL203:
 2319 0010 43F40063 		orr	r3, r3, #2048
 2320              	.LVL204:
 2321 0014 00E0     		b	.L199
 2322              	.L198:
2000:FWLIB/src/stm32f4xx_rtc.c ****   }
 2323              		.loc 1 2000 0
 2324 0016 0343     		orrs	r3, r3, r0
 2325              	.LVL205:
 2326              	.L199:
2004:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2327              		.loc 1 2004 0
 2328 0018 044A     		ldr	r2, .L200
 2329 001a CA21     		movs	r1, #202
 2330              	.LVL206:
 2331 001c 5162     		str	r1, [r2, #36]
2005:FWLIB/src/stm32f4xx_rtc.c **** 
 2332              		.loc 1 2005 0
 2333 001e 5321     		movs	r1, #83
 2334 0020 5162     		str	r1, [r2, #36]
2008:FWLIB/src/stm32f4xx_rtc.c **** 
 2335              		.loc 1 2008 0
 2336 0022 9360     		str	r3, [r2, #8]
2011:FWLIB/src/stm32f4xx_rtc.c **** }
 2337              		.loc 1 2011 0
 2338 0024 FF23     		movs	r3, #255
 2339              	.LVL207:
 2340 0026 5362     		str	r3, [r2, #36]
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 96


 2341              	.LVL208:
 2342 0028 7047     		bx	lr
 2343              	.L201:
 2344 002a 00BF     		.align	2
 2345              	.L200:
 2346 002c 00280040 		.word	1073752064
 2347              		.cfi_endproc
 2348              	.LFE157:
 2350              		.section	.text.RTC_GetTimeStamp,"ax",%progbits
 2351              		.align	2
 2352              		.global	RTC_GetTimeStamp
 2353              		.thumb
 2354              		.thumb_func
 2356              	RTC_GetTimeStamp:
 2357              	.LFB158:
2028:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
 2358              		.loc 1 2028 0
 2359              		.cfi_startproc
 2360              		@ args = 0, pretend = 0, frame = 0
 2361              		@ frame_needed = 0, uses_anonymous_args = 0
 2362              	.LVL209:
 2363 0000 70B5     		push	{r4, r5, r6, lr}
 2364              	.LCFI25:
 2365              		.cfi_def_cfa_offset 16
 2366              		.cfi_offset 4, -16
 2367              		.cfi_offset 5, -12
 2368              		.cfi_offset 6, -8
 2369              		.cfi_offset 14, -4
 2370              	.LVL210:
2035:FWLIB/src/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 2371              		.loc 1 2035 0
 2372 0002 1D4B     		ldr	r3, .L205
 2373 0004 1C6B     		ldr	r4, [r3, #48]
 2374 0006 04F07F34 		and	r4, r4, #2139062143
 2375 000a 24F0FE44 		bic	r4, r4, #2130706432
 2376              	.LVL211:
2036:FWLIB/src/stm32f4xx_rtc.c **** 
 2377              		.loc 1 2036 0
 2378 000e 5B6B     		ldr	r3, [r3, #52]
 2379 0010 23F07F43 		bic	r3, r3, #-16777216
 2380 0014 23F0C003 		bic	r3, r3, #192
 2381              	.LVL212:
2039:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 2382              		.loc 1 2039 0
 2383 0018 250C     		lsrs	r5, r4, #16
 2384 001a 05F03F06 		and	r6, r5, #63
 2385 001e 0E70     		strb	r6, [r1]
2040:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 2386              		.loc 1 2040 0
 2387 0020 C4F30626 		ubfx	r6, r4, #8, #7
 2388 0024 4E70     		strb	r6, [r1, #1]
2041:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 2389              		.loc 1 2041 0
 2390 0026 8C70     		strb	r4, [r1, #2]
2042:FWLIB/src/stm32f4xx_rtc.c **** 
 2391              		.loc 1 2042 0
 2392 0028 05F04005 		and	r5, r5, #64
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 97


 2393 002c CD70     		strb	r5, [r1, #3]
2045:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 2394              		.loc 1 2045 0
 2395 002e 0024     		movs	r4, #0
 2396              	.LVL213:
 2397 0030 D470     		strb	r4, [r2, #3]
2046:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 2398              		.loc 1 2046 0
 2399 0032 C3F30424 		ubfx	r4, r3, #8, #5
 2400 0036 5470     		strb	r4, [r2, #1]
2047:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 2401              		.loc 1 2047 0
 2402 0038 9370     		strb	r3, [r2, #2]
2048:FWLIB/src/stm32f4xx_rtc.c **** 
 2403              		.loc 1 2048 0
 2404 003a C3F34233 		ubfx	r3, r3, #13, #3
 2405              	.LVL214:
 2406 003e 1370     		strb	r3, [r2]
2051:FWLIB/src/stm32f4xx_rtc.c ****   {
 2407              		.loc 1 2051 0
 2408 0040 C8B9     		cbnz	r0, .L202
 2409 0042 1446     		mov	r4, r2
 2410 0044 0D46     		mov	r5, r1
2054:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 2411              		.loc 1 2054 0
 2412 0046 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 2413              	.LVL215:
 2414 0048 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2415              	.LVL216:
 2416 004c 2870     		strb	r0, [r5]
2055:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 2417              		.loc 1 2055 0
 2418 004e 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 2419 0050 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2420              	.LVL217:
 2421 0054 6870     		strb	r0, [r5, #1]
2056:FWLIB/src/stm32f4xx_rtc.c **** 
 2422              		.loc 1 2056 0
 2423 0056 A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 2424 0058 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2425              	.LVL218:
 2426 005c A870     		strb	r0, [r5, #2]
2059:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 2427              		.loc 1 2059 0
 2428 005e 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2429 0060 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2430              	.LVL219:
 2431 0064 6070     		strb	r0, [r4, #1]
2060:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 2432              		.loc 1 2060 0
 2433 0066 A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 2434 0068 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2435              	.LVL220:
 2436 006c A070     		strb	r0, [r4, #2]
2061:FWLIB/src/stm32f4xx_rtc.c ****   }
 2437              		.loc 1 2061 0
 2438 006e 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 98


 2439 0070 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2440              	.LVL221:
 2441 0074 2070     		strb	r0, [r4]
 2442              	.LVL222:
 2443              	.L202:
 2444 0076 70BD     		pop	{r4, r5, r6, pc}
 2445              	.L206:
 2446              		.align	2
 2447              	.L205:
 2448 0078 00280040 		.word	1073752064
 2449              		.cfi_endproc
 2450              	.LFE158:
 2452              		.section	.text.RTC_GetTimeStampSubSecond,"ax",%progbits
 2453              		.align	2
 2454              		.global	RTC_GetTimeStampSubSecond
 2455              		.thumb
 2456              		.thumb_func
 2458              	RTC_GetTimeStampSubSecond:
 2459              	.LFB159:
2071:FWLIB/src/stm32f4xx_rtc.c ****   /* Get timestamp sub seconds values from the correspondent registers */
 2460              		.loc 1 2071 0
 2461              		.cfi_startproc
 2462              		@ args = 0, pretend = 0, frame = 0
 2463              		@ frame_needed = 0, uses_anonymous_args = 0
 2464              		@ link register save eliminated.
2073:FWLIB/src/stm32f4xx_rtc.c **** }
 2465              		.loc 1 2073 0
 2466 0000 014B     		ldr	r3, .L208
 2467 0002 986B     		ldr	r0, [r3, #56]
2074:FWLIB/src/stm32f4xx_rtc.c **** 
 2468              		.loc 1 2074 0
 2469 0004 7047     		bx	lr
 2470              	.L209:
 2471 0006 00BF     		.align	2
 2472              	.L208:
 2473 0008 00280040 		.word	1073752064
 2474              		.cfi_endproc
 2475              	.LFE159:
 2477              		.section	.text.RTC_TamperTriggerConfig,"ax",%progbits
 2478              		.align	2
 2479              		.global	RTC_TamperTriggerConfig
 2480              		.thumb
 2481              		.thumb_func
 2483              	RTC_TamperTriggerConfig:
 2484              	.LFB160:
2106:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2485              		.loc 1 2106 0
 2486              		.cfi_startproc
 2487              		@ args = 0, pretend = 0, frame = 0
 2488              		@ frame_needed = 0, uses_anonymous_args = 0
 2489              		@ link register save eliminated.
 2490              	.LVL223:
2111:FWLIB/src/stm32f4xx_rtc.c ****   {  
 2491              		.loc 1 2111 0
 2492 0000 29B9     		cbnz	r1, .L211
2114:FWLIB/src/stm32f4xx_rtc.c ****   }
 2493              		.loc 1 2114 0
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 99


 2494 0002 064A     		ldr	r2, .L213
 2495 0004 136C     		ldr	r3, [r2, #64]
 2496 0006 23EA4000 		bic	r0, r3, r0, lsl #1
 2497              	.LVL224:
 2498 000a 1064     		str	r0, [r2, #64]
 2499 000c 7047     		bx	lr
 2500              	.LVL225:
 2501              	.L211:
2119:FWLIB/src/stm32f4xx_rtc.c ****   }  
 2502              		.loc 1 2119 0
 2503 000e 034A     		ldr	r2, .L213
 2504 0010 136C     		ldr	r3, [r2, #64]
 2505 0012 43EA4000 		orr	r0, r3, r0, lsl #1
 2506              	.LVL226:
 2507 0016 1064     		str	r0, [r2, #64]
 2508 0018 7047     		bx	lr
 2509              	.L214:
 2510 001a 00BF     		.align	2
 2511              	.L213:
 2512 001c 00280040 		.word	1073752064
 2513              		.cfi_endproc
 2514              	.LFE160:
 2516              		.section	.text.RTC_TamperCmd,"ax",%progbits
 2517              		.align	2
 2518              		.global	RTC_TamperCmd
 2519              		.thumb
 2520              		.thumb_func
 2522              	RTC_TamperCmd:
 2523              	.LFB161:
2132:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2524              		.loc 1 2132 0
 2525              		.cfi_startproc
 2526              		@ args = 0, pretend = 0, frame = 0
 2527              		@ frame_needed = 0, uses_anonymous_args = 0
 2528              		@ link register save eliminated.
 2529              	.LVL227:
2137:FWLIB/src/stm32f4xx_rtc.c ****   {
 2530              		.loc 1 2137 0
 2531 0000 21B1     		cbz	r1, .L216
2140:FWLIB/src/stm32f4xx_rtc.c ****   }
 2532              		.loc 1 2140 0
 2533 0002 054B     		ldr	r3, .L218
 2534 0004 1A6C     		ldr	r2, [r3, #64]
 2535 0006 1043     		orrs	r0, r0, r2
 2536              	.LVL228:
 2537 0008 1864     		str	r0, [r3, #64]
 2538 000a 7047     		bx	lr
 2539              	.LVL229:
 2540              	.L216:
2145:FWLIB/src/stm32f4xx_rtc.c ****   }  
 2541              		.loc 1 2145 0
 2542 000c 024A     		ldr	r2, .L218
 2543 000e 136C     		ldr	r3, [r2, #64]
 2544 0010 23EA0000 		bic	r0, r3, r0
 2545              	.LVL230:
 2546 0014 1064     		str	r0, [r2, #64]
 2547 0016 7047     		bx	lr
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 100


 2548              	.L219:
 2549              		.align	2
 2550              	.L218:
 2551 0018 00280040 		.word	1073752064
 2552              		.cfi_endproc
 2553              	.LFE161:
 2555              		.section	.text.RTC_TamperFilterConfig,"ax",%progbits
 2556              		.align	2
 2557              		.global	RTC_TamperFilterConfig
 2558              		.thumb
 2559              		.thumb_func
 2561              	RTC_TamperFilterConfig:
 2562              	.LFB162:
2163:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2563              		.loc 1 2163 0
 2564              		.cfi_startproc
 2565              		@ args = 0, pretend = 0, frame = 0
 2566              		@ frame_needed = 0, uses_anonymous_args = 0
 2567              		@ link register save eliminated.
 2568              	.LVL231:
2168:FWLIB/src/stm32f4xx_rtc.c **** 
 2569              		.loc 1 2168 0
 2570 0000 044B     		ldr	r3, .L221
 2571 0002 1A6C     		ldr	r2, [r3, #64]
 2572 0004 22F4C052 		bic	r2, r2, #6144
 2573 0008 1A64     		str	r2, [r3, #64]
2171:FWLIB/src/stm32f4xx_rtc.c **** }
 2574              		.loc 1 2171 0
 2575 000a 1A6C     		ldr	r2, [r3, #64]
 2576 000c 1043     		orrs	r0, r0, r2
 2577              	.LVL232:
 2578 000e 1864     		str	r0, [r3, #64]
 2579 0010 7047     		bx	lr
 2580              	.L222:
 2581 0012 00BF     		.align	2
 2582              	.L221:
 2583 0014 00280040 		.word	1073752064
 2584              		.cfi_endproc
 2585              	.LFE162:
 2587              		.section	.text.RTC_TamperSamplingFreqConfig,"ax",%progbits
 2588              		.align	2
 2589              		.global	RTC_TamperSamplingFreqConfig
 2590              		.thumb
 2591              		.thumb_func
 2593              	RTC_TamperSamplingFreqConfig:
 2594              	.LFB163:
2197:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2595              		.loc 1 2197 0
 2596              		.cfi_startproc
 2597              		@ args = 0, pretend = 0, frame = 0
 2598              		@ frame_needed = 0, uses_anonymous_args = 0
 2599              		@ link register save eliminated.
 2600              	.LVL233:
2202:FWLIB/src/stm32f4xx_rtc.c **** 
 2601              		.loc 1 2202 0
 2602 0000 044B     		ldr	r3, .L224
 2603 0002 1A6C     		ldr	r2, [r3, #64]
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 101


 2604 0004 22F4E062 		bic	r2, r2, #1792
 2605 0008 1A64     		str	r2, [r3, #64]
2205:FWLIB/src/stm32f4xx_rtc.c **** }
 2606              		.loc 1 2205 0
 2607 000a 1A6C     		ldr	r2, [r3, #64]
 2608 000c 1043     		orrs	r0, r0, r2
 2609              	.LVL234:
 2610 000e 1864     		str	r0, [r3, #64]
 2611 0010 7047     		bx	lr
 2612              	.L225:
 2613 0012 00BF     		.align	2
 2614              	.L224:
 2615 0014 00280040 		.word	1073752064
 2616              		.cfi_endproc
 2617              	.LFE163:
 2619              		.section	.text.RTC_TamperPinsPrechargeDuration,"ax",%progbits
 2620              		.align	2
 2621              		.global	RTC_TamperPinsPrechargeDuration
 2622              		.thumb
 2623              		.thumb_func
 2625              	RTC_TamperPinsPrechargeDuration:
 2626              	.LFB164:
2220:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2627              		.loc 1 2220 0
 2628              		.cfi_startproc
 2629              		@ args = 0, pretend = 0, frame = 0
 2630              		@ frame_needed = 0, uses_anonymous_args = 0
 2631              		@ link register save eliminated.
 2632              	.LVL235:
2225:FWLIB/src/stm32f4xx_rtc.c **** 
 2633              		.loc 1 2225 0
 2634 0000 044B     		ldr	r3, .L227
 2635 0002 1A6C     		ldr	r2, [r3, #64]
 2636 0004 22F4C042 		bic	r2, r2, #24576
 2637 0008 1A64     		str	r2, [r3, #64]
2228:FWLIB/src/stm32f4xx_rtc.c **** }
 2638              		.loc 1 2228 0
 2639 000a 1A6C     		ldr	r2, [r3, #64]
 2640 000c 1043     		orrs	r0, r0, r2
 2641              	.LVL236:
 2642 000e 1864     		str	r0, [r3, #64]
 2643 0010 7047     		bx	lr
 2644              	.L228:
 2645 0012 00BF     		.align	2
 2646              	.L227:
 2647 0014 00280040 		.word	1073752064
 2648              		.cfi_endproc
 2649              	.LFE164:
 2651              		.section	.text.RTC_TimeStampOnTamperDetectionCmd,"ax",%progbits
 2652              		.align	2
 2653              		.global	RTC_TimeStampOnTamperDetectionCmd
 2654              		.thumb
 2655              		.thumb_func
 2657              	RTC_TimeStampOnTamperDetectionCmd:
 2658              	.LFB165:
2240:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2659              		.loc 1 2240 0
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 102


 2660              		.cfi_startproc
 2661              		@ args = 0, pretend = 0, frame = 0
 2662              		@ frame_needed = 0, uses_anonymous_args = 0
 2663              		@ link register save eliminated.
 2664              	.LVL237:
2244:FWLIB/src/stm32f4xx_rtc.c ****   {
 2665              		.loc 1 2244 0
 2666 0000 28B1     		cbz	r0, .L230
2247:FWLIB/src/stm32f4xx_rtc.c ****   }
 2667              		.loc 1 2247 0
 2668 0002 064A     		ldr	r2, .L232
 2669 0004 136C     		ldr	r3, [r2, #64]
 2670 0006 43F08003 		orr	r3, r3, #128
 2671 000a 1364     		str	r3, [r2, #64]
 2672 000c 7047     		bx	lr
 2673              	.L230:
2252:FWLIB/src/stm32f4xx_rtc.c ****   }
 2674              		.loc 1 2252 0
 2675 000e 034A     		ldr	r2, .L232
 2676 0010 136C     		ldr	r3, [r2, #64]
 2677 0012 23F08003 		bic	r3, r3, #128
 2678 0016 1364     		str	r3, [r2, #64]
 2679 0018 7047     		bx	lr
 2680              	.L233:
 2681 001a 00BF     		.align	2
 2682              	.L232:
 2683 001c 00280040 		.word	1073752064
 2684              		.cfi_endproc
 2685              	.LFE165:
 2687              		.section	.text.RTC_TamperPullUpCmd,"ax",%progbits
 2688              		.align	2
 2689              		.global	RTC_TamperPullUpCmd
 2690              		.thumb
 2691              		.thumb_func
 2693              	RTC_TamperPullUpCmd:
 2694              	.LFB166:
2263:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2695              		.loc 1 2263 0
 2696              		.cfi_startproc
 2697              		@ args = 0, pretend = 0, frame = 0
 2698              		@ frame_needed = 0, uses_anonymous_args = 0
 2699              		@ link register save eliminated.
 2700              	.LVL238:
2267:FWLIB/src/stm32f4xx_rtc.c ****   {
 2701              		.loc 1 2267 0
 2702 0000 28B1     		cbz	r0, .L235
2270:FWLIB/src/stm32f4xx_rtc.c ****   }
 2703              		.loc 1 2270 0
 2704 0002 064A     		ldr	r2, .L237
 2705 0004 136C     		ldr	r3, [r2, #64]
 2706 0006 23F40043 		bic	r3, r3, #32768
 2707 000a 1364     		str	r3, [r2, #64]
 2708 000c 7047     		bx	lr
 2709              	.L235:
2275:FWLIB/src/stm32f4xx_rtc.c ****   } 
 2710              		.loc 1 2275 0
 2711 000e 034A     		ldr	r2, .L237
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 103


 2712 0010 136C     		ldr	r3, [r2, #64]
 2713 0012 43F40043 		orr	r3, r3, #32768
 2714 0016 1364     		str	r3, [r2, #64]
 2715 0018 7047     		bx	lr
 2716              	.L238:
 2717 001a 00BF     		.align	2
 2718              	.L237:
 2719 001c 00280040 		.word	1073752064
 2720              		.cfi_endproc
 2721              	.LFE166:
 2723              		.section	.text.RTC_WriteBackupRegister,"ax",%progbits
 2724              		.align	2
 2725              		.global	RTC_WriteBackupRegister
 2726              		.thumb
 2727              		.thumb_func
 2729              	RTC_WriteBackupRegister:
 2730              	.LFB167:
2304:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 2731              		.loc 1 2304 0
 2732              		.cfi_startproc
 2733              		@ args = 0, pretend = 0, frame = 8
 2734              		@ frame_needed = 0, uses_anonymous_args = 0
 2735              		@ link register save eliminated.
 2736              	.LVL239:
 2737 0000 82B0     		sub	sp, sp, #8
 2738              	.LCFI26:
 2739              		.cfi_def_cfa_offset 8
2305:FWLIB/src/stm32f4xx_rtc.c ****   
 2740              		.loc 1 2305 0
 2741 0002 0023     		movs	r3, #0
 2742 0004 0193     		str	r3, [sp, #4]
2310:FWLIB/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 2743              		.loc 1 2310 0
 2744 0006 054B     		ldr	r3, .L241
 2745 0008 0193     		str	r3, [sp, #4]
2311:FWLIB/src/stm32f4xx_rtc.c **** 
 2746              		.loc 1 2311 0
 2747 000a 019B     		ldr	r3, [sp, #4]
 2748 000c 03EB8000 		add	r0, r3, r0, lsl #2
 2749              	.LVL240:
 2750 0010 0190     		str	r0, [sp, #4]
2314:FWLIB/src/stm32f4xx_rtc.c **** }
 2751              		.loc 1 2314 0
 2752 0012 019B     		ldr	r3, [sp, #4]
 2753 0014 1960     		str	r1, [r3]
2315:FWLIB/src/stm32f4xx_rtc.c **** 
 2754              		.loc 1 2315 0
 2755 0016 02B0     		add	sp, sp, #8
 2756              	.LCFI27:
 2757              		.cfi_def_cfa_offset 0
 2758              		@ sp needed
 2759 0018 7047     		bx	lr
 2760              	.L242:
 2761 001a 00BF     		.align	2
 2762              	.L241:
 2763 001c 50280040 		.word	1073752144
 2764              		.cfi_endproc
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 104


 2765              	.LFE167:
 2767              		.section	.text.RTC_ReadBackupRegister,"ax",%progbits
 2768              		.align	2
 2769              		.global	RTC_ReadBackupRegister
 2770              		.thumb
 2771              		.thumb_func
 2773              	RTC_ReadBackupRegister:
 2774              	.LFB168:
2325:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 2775              		.loc 1 2325 0
 2776              		.cfi_startproc
 2777              		@ args = 0, pretend = 0, frame = 8
 2778              		@ frame_needed = 0, uses_anonymous_args = 0
 2779              		@ link register save eliminated.
 2780              	.LVL241:
 2781 0000 82B0     		sub	sp, sp, #8
 2782              	.LCFI28:
 2783              		.cfi_def_cfa_offset 8
2326:FWLIB/src/stm32f4xx_rtc.c ****   
 2784              		.loc 1 2326 0
 2785 0002 0023     		movs	r3, #0
 2786 0004 0193     		str	r3, [sp, #4]
2331:FWLIB/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 2787              		.loc 1 2331 0
 2788 0006 054B     		ldr	r3, .L245
 2789 0008 0193     		str	r3, [sp, #4]
2332:FWLIB/src/stm32f4xx_rtc.c ****   
 2790              		.loc 1 2332 0
 2791 000a 019B     		ldr	r3, [sp, #4]
 2792 000c 03EB8000 		add	r0, r3, r0, lsl #2
 2793              	.LVL242:
 2794 0010 0190     		str	r0, [sp, #4]
2335:FWLIB/src/stm32f4xx_rtc.c **** }
 2795              		.loc 1 2335 0
 2796 0012 019B     		ldr	r3, [sp, #4]
 2797 0014 1868     		ldr	r0, [r3]
2336:FWLIB/src/stm32f4xx_rtc.c **** 
 2798              		.loc 1 2336 0
 2799 0016 02B0     		add	sp, sp, #8
 2800              	.LCFI29:
 2801              		.cfi_def_cfa_offset 0
 2802              		@ sp needed
 2803 0018 7047     		bx	lr
 2804              	.L246:
 2805 001a 00BF     		.align	2
 2806              	.L245:
 2807 001c 50280040 		.word	1073752144
 2808              		.cfi_endproc
 2809              	.LFE168:
 2811              		.section	.text.RTC_TamperPinSelection,"ax",%progbits
 2812              		.align	2
 2813              		.global	RTC_TamperPinSelection
 2814              		.thumb
 2815              		.thumb_func
 2817              	RTC_TamperPinSelection:
 2818              	.LFB169:
2364:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 105


 2819              		.loc 1 2364 0
 2820              		.cfi_startproc
 2821              		@ args = 0, pretend = 0, frame = 0
 2822              		@ frame_needed = 0, uses_anonymous_args = 0
 2823              		@ link register save eliminated.
 2824              	.LVL243:
2368:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 2825              		.loc 1 2368 0
 2826 0000 044B     		ldr	r3, .L248
 2827 0002 1A6C     		ldr	r2, [r3, #64]
 2828 0004 22F48032 		bic	r2, r2, #65536
 2829 0008 1A64     		str	r2, [r3, #64]
2369:FWLIB/src/stm32f4xx_rtc.c **** }
 2830              		.loc 1 2369 0
 2831 000a 1A6C     		ldr	r2, [r3, #64]
 2832 000c 1043     		orrs	r0, r0, r2
 2833              	.LVL244:
 2834 000e 1864     		str	r0, [r3, #64]
 2835 0010 7047     		bx	lr
 2836              	.L249:
 2837 0012 00BF     		.align	2
 2838              	.L248:
 2839 0014 00280040 		.word	1073752064
 2840              		.cfi_endproc
 2841              	.LFE169:
 2843              		.section	.text.RTC_TimeStampPinSelection,"ax",%progbits
 2844              		.align	2
 2845              		.global	RTC_TimeStampPinSelection
 2846              		.thumb
 2847              		.thumb_func
 2849              	RTC_TimeStampPinSelection:
 2850              	.LFB170:
2381:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2851              		.loc 1 2381 0
 2852              		.cfi_startproc
 2853              		@ args = 0, pretend = 0, frame = 0
 2854              		@ frame_needed = 0, uses_anonymous_args = 0
 2855              		@ link register save eliminated.
 2856              	.LVL245:
2385:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 2857              		.loc 1 2385 0
 2858 0000 044B     		ldr	r3, .L251
 2859 0002 1A6C     		ldr	r2, [r3, #64]
 2860 0004 22F40032 		bic	r2, r2, #131072
 2861 0008 1A64     		str	r2, [r3, #64]
2386:FWLIB/src/stm32f4xx_rtc.c **** }
 2862              		.loc 1 2386 0
 2863 000a 1A6C     		ldr	r2, [r3, #64]
 2864 000c 1043     		orrs	r0, r0, r2
 2865              	.LVL246:
 2866 000e 1864     		str	r0, [r3, #64]
 2867 0010 7047     		bx	lr
 2868              	.L252:
 2869 0012 00BF     		.align	2
 2870              	.L251:
 2871 0014 00280040 		.word	1073752064
 2872              		.cfi_endproc
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 106


 2873              	.LFE170:
 2875              		.section	.text.RTC_OutputTypeConfig,"ax",%progbits
 2876              		.align	2
 2877              		.global	RTC_OutputTypeConfig
 2878              		.thumb
 2879              		.thumb_func
 2881              	RTC_OutputTypeConfig:
 2882              	.LFB171:
2400:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2883              		.loc 1 2400 0
 2884              		.cfi_startproc
 2885              		@ args = 0, pretend = 0, frame = 0
 2886              		@ frame_needed = 0, uses_anonymous_args = 0
 2887              		@ link register save eliminated.
 2888              	.LVL247:
2404:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 2889              		.loc 1 2404 0
 2890 0000 044B     		ldr	r3, .L254
 2891 0002 1A6C     		ldr	r2, [r3, #64]
 2892 0004 22F48022 		bic	r2, r2, #262144
 2893 0008 1A64     		str	r2, [r3, #64]
2405:FWLIB/src/stm32f4xx_rtc.c **** }
 2894              		.loc 1 2405 0
 2895 000a 1A6C     		ldr	r2, [r3, #64]
 2896 000c 1043     		orrs	r0, r0, r2
 2897              	.LVL248:
 2898 000e 1864     		str	r0, [r3, #64]
 2899 0010 7047     		bx	lr
 2900              	.L255:
 2901 0012 00BF     		.align	2
 2902              	.L254:
 2903 0014 00280040 		.word	1073752064
 2904              		.cfi_endproc
 2905              	.LFE171:
 2907              		.section	.text.RTC_SynchroShiftConfig,"ax",%progbits
 2908              		.align	2
 2909              		.global	RTC_SynchroShiftConfig
 2910              		.thumb
 2911              		.thumb_func
 2913              	RTC_SynchroShiftConfig:
 2914              	.LFB172:
2438:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2915              		.loc 1 2438 0
 2916              		.cfi_startproc
 2917              		@ args = 0, pretend = 0, frame = 0
 2918              		@ frame_needed = 0, uses_anonymous_args = 0
 2919              	.LVL249:
 2920 0000 08B5     		push	{r3, lr}
 2921              	.LCFI30:
 2922              		.cfi_def_cfa_offset 8
 2923              		.cfi_offset 3, -8
 2924              		.cfi_offset 14, -4
 2925              	.LVL250:
2447:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2926              		.loc 1 2447 0
 2927 0002 174B     		ldr	r3, .L266
 2928 0004 CA22     		movs	r2, #202
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 107


 2929 0006 5A62     		str	r2, [r3, #36]
2448:FWLIB/src/stm32f4xx_rtc.c ****   
 2930              		.loc 1 2448 0
 2931 0008 5322     		movs	r2, #83
 2932 000a 5A62     		str	r2, [r3, #36]
2451:FWLIB/src/stm32f4xx_rtc.c ****   {
 2933              		.loc 1 2451 0
 2934 000c DB68     		ldr	r3, [r3, #12]
 2935 000e 13F0080F 		tst	r3, #8
 2936 0012 02D1     		bne	.L261
 2937 0014 0AE0     		b	.L258
 2938              	.LVL251:
 2939              	.L259:
2456:FWLIB/src/stm32f4xx_rtc.c ****     }
 2940              		.loc 1 2456 0
 2941 0016 0133     		adds	r3, r3, #1
 2942              	.LVL252:
 2943 0018 00E0     		b	.L257
 2944              	.LVL253:
 2945              	.L261:
 2946 001a 0023     		movs	r3, #0
 2947              	.LVL254:
 2948              	.L257:
2454:FWLIB/src/stm32f4xx_rtc.c ****     {
 2949              		.loc 1 2454 0
 2950 001c 104A     		ldr	r2, .L266
 2951 001e D268     		ldr	r2, [r2, #12]
 2952 0020 12F0080F 		tst	r2, #8
 2953 0024 02D0     		beq	.L258
2454:FWLIB/src/stm32f4xx_rtc.c ****     {
 2954              		.loc 1 2454 0 is_stmt 0 discriminator 1
 2955 0026 B3F5805F 		cmp	r3, #4096
 2956 002a F4D1     		bne	.L259
 2957              	.LVL255:
 2958              	.L258:
2461:FWLIB/src/stm32f4xx_rtc.c ****   {
 2959              		.loc 1 2461 0 is_stmt 1
 2960 002c 0C4B     		ldr	r3, .L266
 2961 002e DB68     		ldr	r3, [r3, #12]
 2962 0030 13F0080F 		tst	r3, #8
 2963 0034 0BD1     		bne	.L262
2464:FWLIB/src/stm32f4xx_rtc.c ****     {
 2964              		.loc 1 2464 0
 2965 0036 0A4B     		ldr	r3, .L266
 2966 0038 9B68     		ldr	r3, [r3, #8]
 2967 003a 13F0100F 		tst	r3, #16
 2968 003e 08D1     		bne	.L263
2467:FWLIB/src/stm32f4xx_rtc.c ****     
 2969              		.loc 1 2467 0
 2970 0040 0843     		orrs	r0, r0, r1
 2971              	.LVL256:
 2972 0042 074B     		ldr	r3, .L266
 2973 0044 D862     		str	r0, [r3, #44]
2469:FWLIB/src/stm32f4xx_rtc.c ****       {
 2974              		.loc 1 2469 0
 2975 0046 FFF7FEFF 		bl	RTC_WaitForSynchro
 2976              	.LVL257:
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 108


 2977 004a 20B9     		cbnz	r0, .L264
 2978 004c 04E0     		b	.L260
 2979              	.LVL258:
 2980              	.L262:
2485:FWLIB/src/stm32f4xx_rtc.c ****   }
 2981              		.loc 1 2485 0
 2982 004e 0020     		movs	r0, #0
 2983              	.LVL259:
 2984 0050 02E0     		b	.L260
 2985              	.LVL260:
 2986              	.L263:
2480:FWLIB/src/stm32f4xx_rtc.c ****     }
 2987              		.loc 1 2480 0
 2988 0052 0020     		movs	r0, #0
 2989              	.LVL261:
 2990 0054 00E0     		b	.L260
 2991              	.LVL262:
 2992              	.L264:
2475:FWLIB/src/stm32f4xx_rtc.c ****       }
 2993              		.loc 1 2475 0
 2994 0056 0120     		movs	r0, #1
 2995              	.L260:
 2996              	.LVL263:
2489:FWLIB/src/stm32f4xx_rtc.c ****   
 2997              		.loc 1 2489 0
 2998 0058 FF22     		movs	r2, #255
 2999 005a 014B     		ldr	r3, .L266
 3000 005c 5A62     		str	r2, [r3, #36]
2492:FWLIB/src/stm32f4xx_rtc.c **** 
 3001              		.loc 1 2492 0
 3002 005e 08BD     		pop	{r3, pc}
 3003              	.L267:
 3004              		.align	2
 3005              	.L266:
 3006 0060 00280040 		.word	1073752064
 3007              		.cfi_endproc
 3008              	.LFE172:
 3010              		.section	.text.RTC_ITConfig,"ax",%progbits
 3011              		.align	2
 3012              		.global	RTC_ITConfig
 3013              		.thumb
 3014              		.thumb_func
 3016              	RTC_ITConfig:
 3017              	.LFB173:
2558:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 3018              		.loc 1 2558 0
 3019              		.cfi_startproc
 3020              		@ args = 0, pretend = 0, frame = 0
 3021              		@ frame_needed = 0, uses_anonymous_args = 0
 3022              		@ link register save eliminated.
 3023              	.LVL264:
2564:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3024              		.loc 1 2564 0
 3025 0000 104B     		ldr	r3, .L271
 3026 0002 CA22     		movs	r2, #202
 3027 0004 5A62     		str	r2, [r3, #36]
2565:FWLIB/src/stm32f4xx_rtc.c **** 
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 109


 3028              		.loc 1 2565 0
 3029 0006 5322     		movs	r2, #83
 3030 0008 5A62     		str	r2, [r3, #36]
2567:FWLIB/src/stm32f4xx_rtc.c ****   {
 3031              		.loc 1 2567 0
 3032 000a 51B1     		cbz	r1, .L269
2570:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
 3033              		.loc 1 2570 0
 3034 000c 9968     		ldr	r1, [r3, #8]
 3035              	.LVL265:
 3036 000e 20F00402 		bic	r2, r0, #4
 3037 0012 0A43     		orrs	r2, r2, r1
 3038 0014 9A60     		str	r2, [r3, #8]
2572:FWLIB/src/stm32f4xx_rtc.c ****   }
 3039              		.loc 1 2572 0
 3040 0016 1A6C     		ldr	r2, [r3, #64]
 3041 0018 00F00400 		and	r0, r0, #4
 3042              	.LVL266:
 3043 001c 1043     		orrs	r0, r0, r2
 3044 001e 1864     		str	r0, [r3, #64]
 3045 0020 0CE0     		b	.L270
 3046              	.LVL267:
 3047              	.L269:
2577:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
 3048              		.loc 1 2577 0
 3049 0022 084B     		ldr	r3, .L271
 3050 0024 9A68     		ldr	r2, [r3, #8]
 3051 0026 20F00401 		bic	r1, r0, #4
 3052              	.LVL268:
 3053 002a 22EA0102 		bic	r2, r2, r1
 3054 002e 9A60     		str	r2, [r3, #8]
2579:FWLIB/src/stm32f4xx_rtc.c ****   }
 3055              		.loc 1 2579 0
 3056 0030 1A6C     		ldr	r2, [r3, #64]
 3057 0032 00F00400 		and	r0, r0, #4
 3058              	.LVL269:
 3059 0036 22EA0000 		bic	r0, r2, r0
 3060 003a 1864     		str	r0, [r3, #64]
 3061              	.L270:
2582:FWLIB/src/stm32f4xx_rtc.c **** }
 3062              		.loc 1 2582 0
 3063 003c FF22     		movs	r2, #255
 3064 003e 014B     		ldr	r3, .L271
 3065 0040 5A62     		str	r2, [r3, #36]
 3066 0042 7047     		bx	lr
 3067              	.L272:
 3068              		.align	2
 3069              	.L271:
 3070 0044 00280040 		.word	1073752064
 3071              		.cfi_endproc
 3072              	.LFE173:
 3074              		.section	.text.RTC_GetFlagStatus,"ax",%progbits
 3075              		.align	2
 3076              		.global	RTC_GetFlagStatus
 3077              		.thumb
 3078              		.thumb_func
 3080              	RTC_GetFlagStatus:
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 110


 3081              	.LFB174:
2607:FWLIB/src/stm32f4xx_rtc.c ****   FlagStatus bitstatus = RESET;
 3082              		.loc 1 2607 0
 3083              		.cfi_startproc
 3084              		@ args = 0, pretend = 0, frame = 0
 3085              		@ frame_needed = 0, uses_anonymous_args = 0
 3086              		@ link register save eliminated.
 3087              	.LVL270:
2615:FWLIB/src/stm32f4xx_rtc.c ****   
 3088              		.loc 1 2615 0
 3089 0000 074B     		ldr	r3, .L276
 3090 0002 DB68     		ldr	r3, [r3, #12]
 3091 0004 23F07F43 		bic	r3, r3, #-16777216
 3092 0008 23F47E03 		bic	r3, r3, #16646144
 3093 000c 23F40043 		bic	r3, r3, #32768
 3094 0010 23F08003 		bic	r3, r3, #128
 3095              	.LVL271:
2618:FWLIB/src/stm32f4xx_rtc.c ****   {
 3096              		.loc 1 2618 0
 3097 0014 0342     		tst	r3, r0
 3098 0016 01D0     		beq	.L275
2620:FWLIB/src/stm32f4xx_rtc.c ****   }
 3099              		.loc 1 2620 0
 3100 0018 0120     		movs	r0, #1
 3101              	.LVL272:
 3102 001a 7047     		bx	lr
 3103              	.LVL273:
 3104              	.L275:
2624:FWLIB/src/stm32f4xx_rtc.c ****   }
 3105              		.loc 1 2624 0
 3106 001c 0020     		movs	r0, #0
 3107              	.LVL274:
2627:FWLIB/src/stm32f4xx_rtc.c **** 
 3108              		.loc 1 2627 0
 3109 001e 7047     		bx	lr
 3110              	.L277:
 3111              		.align	2
 3112              	.L276:
 3113 0020 00280040 		.word	1073752064
 3114              		.cfi_endproc
 3115              	.LFE174:
 3117              		.section	.text.RTC_ClearFlag,"ax",%progbits
 3118              		.align	2
 3119              		.global	RTC_ClearFlag
 3120              		.thumb
 3121              		.thumb_func
 3123              	RTC_ClearFlag:
 3124              	.LFB175:
2644:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 3125              		.loc 1 2644 0
 3126              		.cfi_startproc
 3127              		@ args = 0, pretend = 0, frame = 0
 3128              		@ frame_needed = 0, uses_anonymous_args = 0
 3129              		@ link register save eliminated.
 3130              	.LVL275:
2649:FWLIB/src/stm32f4xx_rtc.c **** }
 3131              		.loc 1 2649 0
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 111


 3132 0000 80B2     		uxth	r0, r0
 3133              	.LVL276:
 3134 0002 40F08000 		orr	r0, r0, #128
 3135 0006 044A     		ldr	r2, .L279
 3136 0008 D368     		ldr	r3, [r2, #12]
 3137 000a 03F08003 		and	r3, r3, #128
 3138 000e 63EA0000 		orn	r0, r3, r0
 3139 0012 D060     		str	r0, [r2, #12]
 3140 0014 7047     		bx	lr
 3141              	.L280:
 3142 0016 00BF     		.align	2
 3143              	.L279:
 3144 0018 00280040 		.word	1073752064
 3145              		.cfi_endproc
 3146              	.LFE175:
 3148              		.section	.text.RTC_GetITStatus,"ax",%progbits
 3149              		.align	2
 3150              		.global	RTC_GetITStatus
 3151              		.thumb
 3152              		.thumb_func
 3154              	RTC_GetITStatus:
 3155              	.LFB176:
2665:FWLIB/src/stm32f4xx_rtc.c ****   ITStatus bitstatus = RESET;
 3156              		.loc 1 2665 0
 3157              		.cfi_startproc
 3158              		@ args = 0, pretend = 0, frame = 0
 3159              		@ frame_needed = 0, uses_anonymous_args = 0
 3160              		@ link register save eliminated.
 3161              	.LVL277:
 3162 0000 10B4     		push	{r4}
 3163              	.LCFI31:
 3164              		.cfi_def_cfa_offset 4
 3165              		.cfi_offset 4, -4
 3166              	.LVL278:
2673:FWLIB/src/stm32f4xx_rtc.c ****  
 3167              		.loc 1 2673 0
 3168 0002 0C4C     		ldr	r4, .L286
 3169 0004 236C     		ldr	r3, [r4, #64]
 3170 0006 03F00403 		and	r3, r3, #4
 3171              	.LVL279:
2676:FWLIB/src/stm32f4xx_rtc.c ****   
 3172              		.loc 1 2676 0
 3173 000a A168     		ldr	r1, [r4, #8]
 3174 000c 0140     		ands	r1, r1, r0
 3175 000e 03EAD032 		and	r2, r3, r0, lsr #15
 3176 0012 1143     		orrs	r1, r1, r2
 3177 0014 03EA1043 		and	r3, r3, r0, lsr #16
 3178              	.LVL280:
2679:FWLIB/src/stm32f4xx_rtc.c ****   
 3179              		.loc 1 2679 0
 3180 0018 E268     		ldr	r2, [r4, #12]
 3181 001a 02EA1010 		and	r0, r2, r0, lsr #4
 3182              	.LVL281:
2682:FWLIB/src/stm32f4xx_rtc.c ****   {
 3183              		.loc 1 2682 0
 3184 001e 0B43     		orrs	r3, r1, r3
 3185              	.LVL282:
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 112


 3186 0020 02D0     		beq	.L283
2682:FWLIB/src/stm32f4xx_rtc.c ****   {
 3187              		.loc 1 2682 0 is_stmt 0 discriminator 1
 3188 0022 80B2     		uxth	r0, r0
 3189              	.LVL283:
 3190 0024 10B9     		cbnz	r0, .L284
 3191 0026 02E0     		b	.L282
 3192              	.LVL284:
 3193              	.L283:
2688:FWLIB/src/stm32f4xx_rtc.c ****   }
 3194              		.loc 1 2688 0 is_stmt 1
 3195 0028 0020     		movs	r0, #0
 3196              	.LVL285:
 3197 002a 00E0     		b	.L282
 3198              	.L284:
2684:FWLIB/src/stm32f4xx_rtc.c ****   }
 3199              		.loc 1 2684 0
 3200 002c 0120     		movs	r0, #1
 3201              	.L282:
 3202              	.LVL286:
2691:FWLIB/src/stm32f4xx_rtc.c **** 
 3203              		.loc 1 2691 0
 3204 002e 5DF8044B 		ldr	r4, [sp], #4
 3205              	.LCFI32:
 3206              		.cfi_restore 4
 3207              		.cfi_def_cfa_offset 0
 3208 0032 7047     		bx	lr
 3209              	.L287:
 3210              		.align	2
 3211              	.L286:
 3212 0034 00280040 		.word	1073752064
 3213              		.cfi_endproc
 3214              	.LFE176:
 3216              		.section	.text.RTC_ClearITPendingBit,"ax",%progbits
 3217              		.align	2
 3218              		.global	RTC_ClearITPendingBit
 3219              		.thumb
 3220              		.thumb_func
 3222              	RTC_ClearITPendingBit:
 3223              	.LFB177:
2706:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 3224              		.loc 1 2706 0
 3225              		.cfi_startproc
 3226              		@ args = 0, pretend = 0, frame = 0
 3227              		@ frame_needed = 0, uses_anonymous_args = 0
 3228              		@ link register save eliminated.
 3229              	.LVL287:
2716:FWLIB/src/stm32f4xx_rtc.c **** }
 3230              		.loc 1 2716 0
 3231 0000 C0F30F10 		ubfx	r0, r0, #4, #16
 3232              	.LVL288:
 3233 0004 40F08000 		orr	r0, r0, #128
 3234 0008 034A     		ldr	r2, .L289
 3235 000a D368     		ldr	r3, [r2, #12]
 3236 000c 03F08003 		and	r3, r3, #128
 3237 0010 63EA0000 		orn	r0, r3, r0
 3238 0014 D060     		str	r0, [r2, #12]
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 113


 3239 0016 7047     		bx	lr
 3240              	.L290:
 3241              		.align	2
 3242              	.L289:
 3243 0018 00280040 		.word	1073752064
 3244              		.cfi_endproc
 3245              	.LFE177:
 3247              		.text
 3248              	.Letext0:
 3249              		.file 2 "d:\\gcc_arm\\5.4 2016q3\\arm-none-eabi\\include\\machine\\_default_types.h"
 3250              		.file 3 "d:\\gcc_arm\\5.4 2016q3\\arm-none-eabi\\include\\sys\\_stdint.h"
 3251              		.file 4 "USER/stm32f4xx.h"
 3252              		.file 5 "FWLIB/inc/stm32f4xx_rtc.h"
 3253              		.file 6 "F4_CORE/core_cm4.h"
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 114


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_rtc.c
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:22     .text.RTC_ByteToBcd2:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:26     .text.RTC_ByteToBcd2:00000000 RTC_ByteToBcd2
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:67     .text.RTC_Bcd2ToByte:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:71     .text.RTC_Bcd2ToByte:00000000 RTC_Bcd2ToByte
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:96     .text.RTC_StructInit:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:101    .text.RTC_StructInit:00000000 RTC_StructInit
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:123    .text.RTC_WriteProtectionCmd:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:128    .text.RTC_WriteProtectionCmd:00000000 RTC_WriteProtectionCmd
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:155    .text.RTC_WriteProtectionCmd:00000018 $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:160    .text.RTC_EnterInitMode:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:165    .text.RTC_EnterInitMode:00000000 RTC_EnterInitMode
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:235    .text.RTC_EnterInitMode:0000004c $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:240    .text.RTC_ExitInitMode:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:245    .text.RTC_ExitInitMode:00000000 RTC_ExitInitMode
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:261    .text.RTC_ExitInitMode:0000000c $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:266    .text.RTC_Init:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:271    .text.RTC_Init:00000000 RTC_Init
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:336    .text.RTC_Init:00000048 $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:341    .text.RTC_WaitForSynchro:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:346    .text.RTC_WaitForSynchro:00000000 RTC_WaitForSynchro
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:417    .text.RTC_WaitForSynchro:0000004c $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:422    .text.RTC_DeInit:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:427    .text.RTC_DeInit:00000000 RTC_DeInit
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:555    .text.RTC_DeInit:00000094 $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:561    .text.RTC_RefClockCmd:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:566    .text.RTC_RefClockCmd:00000000 RTC_RefClockCmd
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:627    .text.RTC_RefClockCmd:00000040 $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:632    .text.RTC_BypassShadowCmd:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:637    .text.RTC_BypassShadowCmd:00000000 RTC_BypassShadowCmd
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:675    .text.RTC_BypassShadowCmd:0000002c $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:680    .text.RTC_SetTime:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:685    .text.RTC_SetTime:00000000 RTC_SetTime
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:823    .text.RTC_SetTime:000000a0 $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:828    .text.RTC_TimeStructInit:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:833    .text.RTC_TimeStructInit:00000000 RTC_TimeStructInit
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:855    .text.RTC_GetTime:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:860    .text.RTC_GetTime:00000000 RTC_GetTime
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:921    .text.RTC_GetTime:00000048 $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:926    .text.RTC_GetSubSecond:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:931    .text.RTC_GetSubSecond:00000000 RTC_GetSubSecond
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:950    .text.RTC_GetSubSecond:00000008 $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:955    .text.RTC_SetDate:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:960    .text.RTC_SetDate:00000000 RTC_SetDate
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1088   .text.RTC_SetDate:00000094 $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1093   .text.RTC_DateStructInit:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1098   .text.RTC_DateStructInit:00000000 RTC_DateStructInit
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1121   .text.RTC_GetDate:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1126   .text.RTC_GetDate:00000000 RTC_GetDate
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1185   .text.RTC_GetDate:00000044 $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1190   .text.RTC_SetAlarm:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1195   .text.RTC_SetAlarm:00000000 RTC_SetAlarm
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1336   .text.RTC_SetAlarm:000000a0 $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1341   .text.RTC_AlarmStructInit:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1346   .text.RTC_AlarmStructInit:00000000 RTC_AlarmStructInit
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1375   .text.RTC_GetAlarm:00000000 $t
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 115


C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1380   .text.RTC_GetAlarm:00000000 RTC_GetAlarm
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1466   .text.RTC_GetAlarm:00000068 $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1471   .text.RTC_AlarmCmd:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1476   .text.RTC_AlarmCmd:00000000 RTC_AlarmCmd
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1565   .text.RTC_AlarmCmd:0000005c $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1570   .text.RTC_AlarmSubSecondConfig:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1575   .text.RTC_AlarmSubSecondConfig:00000000 RTC_AlarmSubSecondConfig
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1623   .text.RTC_AlarmSubSecondConfig:00000028 $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1628   .text.RTC_GetAlarmSubSecond:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1633   .text.RTC_GetAlarmSubSecond:00000000 RTC_GetAlarmSubSecond
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1664   .text.RTC_GetAlarmSubSecond:0000001c $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1669   .text.RTC_WakeUpClockConfig:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1674   .text.RTC_WakeUpClockConfig:00000000 RTC_WakeUpClockConfig
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1705   .text.RTC_WakeUpClockConfig:00000020 $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1710   .text.RTC_SetWakeUpCounter:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1715   .text.RTC_SetWakeUpCounter:00000000 RTC_SetWakeUpCounter
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1739   .text.RTC_SetWakeUpCounter:00000014 $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1744   .text.RTC_GetWakeUpCounter:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1749   .text.RTC_GetWakeUpCounter:00000000 RTC_GetWakeUpCounter
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1765   .text.RTC_GetWakeUpCounter:00000008 $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1770   .text.RTC_WakeUpCmd:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1775   .text.RTC_WakeUpCmd:00000000 RTC_WakeUpCmd
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1863   .text.RTC_WakeUpCmd:00000060 $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1868   .text.RTC_DayLightSavingConfig:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1873   .text.RTC_DayLightSavingConfig:00000000 RTC_DayLightSavingConfig
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1905   .text.RTC_DayLightSavingConfig:00000020 $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1910   .text.RTC_GetStoreOperation:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1915   .text.RTC_GetStoreOperation:00000000 RTC_GetStoreOperation
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1931   .text.RTC_GetStoreOperation:0000000c $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1936   .text.RTC_OutputConfig:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1941   .text.RTC_OutputConfig:00000000 RTC_OutputConfig
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1973   .text.RTC_OutputConfig:00000020 $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1978   .text.RTC_CoarseCalibConfig:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:1983   .text.RTC_CoarseCalibConfig:00000000 RTC_CoarseCalibConfig
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2038   .text.RTC_CoarseCalibConfig:00000030 $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2043   .text.RTC_CoarseCalibCmd:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2048   .text.RTC_CoarseCalibCmd:00000000 RTC_CoarseCalibCmd
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2109   .text.RTC_CoarseCalibCmd:00000040 $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2114   .text.RTC_CalibOutputCmd:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2119   .text.RTC_CalibOutputCmd:00000000 RTC_CalibOutputCmd
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2157   .text.RTC_CalibOutputCmd:0000002c $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2162   .text.RTC_CalibOutputConfig:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2167   .text.RTC_CalibOutputConfig:00000000 RTC_CalibOutputConfig
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2198   .text.RTC_CalibOutputConfig:00000020 $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2203   .text.RTC_SmoothCalibConfig:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2208   .text.RTC_SmoothCalibConfig:00000000 RTC_SmoothCalibConfig
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2290   .text.RTC_SmoothCalibConfig:00000050 $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2295   .text.RTC_TimeStampCmd:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2300   .text.RTC_TimeStampCmd:00000000 RTC_TimeStampCmd
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2346   .text.RTC_TimeStampCmd:0000002c $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2351   .text.RTC_GetTimeStamp:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2356   .text.RTC_GetTimeStamp:00000000 RTC_GetTimeStamp
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2448   .text.RTC_GetTimeStamp:00000078 $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2453   .text.RTC_GetTimeStampSubSecond:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2458   .text.RTC_GetTimeStampSubSecond:00000000 RTC_GetTimeStampSubSecond
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2473   .text.RTC_GetTimeStampSubSecond:00000008 $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2478   .text.RTC_TamperTriggerConfig:00000000 $t
ARM GAS  C:\Users\why\AppData\Local\Temp\ccdl6W2c.s 			page 116


C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2483   .text.RTC_TamperTriggerConfig:00000000 RTC_TamperTriggerConfig
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2512   .text.RTC_TamperTriggerConfig:0000001c $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2517   .text.RTC_TamperCmd:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2522   .text.RTC_TamperCmd:00000000 RTC_TamperCmd
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2551   .text.RTC_TamperCmd:00000018 $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2556   .text.RTC_TamperFilterConfig:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2561   .text.RTC_TamperFilterConfig:00000000 RTC_TamperFilterConfig
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2583   .text.RTC_TamperFilterConfig:00000014 $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2588   .text.RTC_TamperSamplingFreqConfig:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2593   .text.RTC_TamperSamplingFreqConfig:00000000 RTC_TamperSamplingFreqConfig
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2615   .text.RTC_TamperSamplingFreqConfig:00000014 $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2620   .text.RTC_TamperPinsPrechargeDuration:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2625   .text.RTC_TamperPinsPrechargeDuration:00000000 RTC_TamperPinsPrechargeDuration
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2647   .text.RTC_TamperPinsPrechargeDuration:00000014 $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2652   .text.RTC_TimeStampOnTamperDetectionCmd:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2657   .text.RTC_TimeStampOnTamperDetectionCmd:00000000 RTC_TimeStampOnTamperDetectionCmd
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2683   .text.RTC_TimeStampOnTamperDetectionCmd:0000001c $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2688   .text.RTC_TamperPullUpCmd:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2693   .text.RTC_TamperPullUpCmd:00000000 RTC_TamperPullUpCmd
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2719   .text.RTC_TamperPullUpCmd:0000001c $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2724   .text.RTC_WriteBackupRegister:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2729   .text.RTC_WriteBackupRegister:00000000 RTC_WriteBackupRegister
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2763   .text.RTC_WriteBackupRegister:0000001c $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2768   .text.RTC_ReadBackupRegister:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2773   .text.RTC_ReadBackupRegister:00000000 RTC_ReadBackupRegister
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2807   .text.RTC_ReadBackupRegister:0000001c $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2812   .text.RTC_TamperPinSelection:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2817   .text.RTC_TamperPinSelection:00000000 RTC_TamperPinSelection
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2839   .text.RTC_TamperPinSelection:00000014 $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2844   .text.RTC_TimeStampPinSelection:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2849   .text.RTC_TimeStampPinSelection:00000000 RTC_TimeStampPinSelection
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2871   .text.RTC_TimeStampPinSelection:00000014 $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2876   .text.RTC_OutputTypeConfig:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2881   .text.RTC_OutputTypeConfig:00000000 RTC_OutputTypeConfig
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2903   .text.RTC_OutputTypeConfig:00000014 $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2908   .text.RTC_SynchroShiftConfig:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:2913   .text.RTC_SynchroShiftConfig:00000000 RTC_SynchroShiftConfig
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:3006   .text.RTC_SynchroShiftConfig:00000060 $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:3011   .text.RTC_ITConfig:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:3016   .text.RTC_ITConfig:00000000 RTC_ITConfig
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:3070   .text.RTC_ITConfig:00000044 $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:3075   .text.RTC_GetFlagStatus:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:3080   .text.RTC_GetFlagStatus:00000000 RTC_GetFlagStatus
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:3113   .text.RTC_GetFlagStatus:00000020 $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:3118   .text.RTC_ClearFlag:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:3123   .text.RTC_ClearFlag:00000000 RTC_ClearFlag
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:3144   .text.RTC_ClearFlag:00000018 $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:3149   .text.RTC_GetITStatus:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:3154   .text.RTC_GetITStatus:00000000 RTC_GetITStatus
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:3212   .text.RTC_GetITStatus:00000034 $d
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:3217   .text.RTC_ClearITPendingBit:00000000 $t
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:3222   .text.RTC_ClearITPendingBit:00000000 RTC_ClearITPendingBit
C:\Users\why\AppData\Local\Temp\ccdl6W2c.s:3243   .text.RTC_ClearITPendingBit:00000018 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
