ARM GAS  /tmp/cc7uya1D.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_rtc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.RTC_ByteToBcd2,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	RTC_ByteToBcd2:
  26              	.LVL0:
  27              	.LFB178:
  28              		.file 1 "FWLIB/src/stm32f4xx_rtc.c"
   1:FWLIB/src/stm32f4xx_rtc.c **** /**
   2:FWLIB/src/stm32f4xx_rtc.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_rtc.c ****   * @file    stm32f4xx_rtc.c
   4:FWLIB/src/stm32f4xx_rtc.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_rtc.c ****   * @version V1.8.0
   6:FWLIB/src/stm32f4xx_rtc.c ****   * @date    04-November-2016
   7:FWLIB/src/stm32f4xx_rtc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:FWLIB/src/stm32f4xx_rtc.c ****   *          functionalities of the Real-Time Clock (RTC) peripheral:
   9:FWLIB/src/stm32f4xx_rtc.c ****   *           + Initialization
  10:FWLIB/src/stm32f4xx_rtc.c ****   *           + Calendar (Time and Date) configuration
  11:FWLIB/src/stm32f4xx_rtc.c ****   *           + Alarms (Alarm A and Alarm B) configuration
  12:FWLIB/src/stm32f4xx_rtc.c ****   *           + WakeUp Timer configuration
  13:FWLIB/src/stm32f4xx_rtc.c ****   *           + Daylight Saving configuration
  14:FWLIB/src/stm32f4xx_rtc.c ****   *           + Output pin Configuration
  15:FWLIB/src/stm32f4xx_rtc.c ****   *           + Coarse digital Calibration configuration
  16:FWLIB/src/stm32f4xx_rtc.c ****   *           + Smooth digital Calibration configuration
  17:FWLIB/src/stm32f4xx_rtc.c ****   *           + TimeStamp configuration
  18:FWLIB/src/stm32f4xx_rtc.c ****   *           + Tampers configuration
  19:FWLIB/src/stm32f4xx_rtc.c ****   *           + Backup Data Registers configuration
  20:FWLIB/src/stm32f4xx_rtc.c ****   *           + Shift control synchronisation    
  21:FWLIB/src/stm32f4xx_rtc.c ****   *           + RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration
  22:FWLIB/src/stm32f4xx_rtc.c ****   *           + Interrupts and flags management
  23:FWLIB/src/stm32f4xx_rtc.c ****   *
  24:FWLIB/src/stm32f4xx_rtc.c **** @verbatim
  25:FWLIB/src/stm32f4xx_rtc.c **** 
  26:FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
  27:FWLIB/src/stm32f4xx_rtc.c ****               ##### Backup Domain Operating Condition #####
  28:FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
  29:FWLIB/src/stm32f4xx_rtc.c ****  [..] The real-time clock (RTC), the RTC backup registers, and the backup 
  30:FWLIB/src/stm32f4xx_rtc.c ****       SRAM (BKP SRAM) can be powered from the VBAT voltage when the main 
ARM GAS  /tmp/cc7uya1D.s 			page 2


  31:FWLIB/src/stm32f4xx_rtc.c ****       VDD supply is powered off.
  32:FWLIB/src/stm32f4xx_rtc.c ****       To retain the content of the RTC backup registers, backup SRAM, and supply 
  33:FWLIB/src/stm32f4xx_rtc.c ****       the RTC when VDD is turned off, VBAT pin can be connected to an optional 
  34:FWLIB/src/stm32f4xx_rtc.c ****       standby voltage supplied by a battery or by another source.
  35:FWLIB/src/stm32f4xx_rtc.c **** 
  36:FWLIB/src/stm32f4xx_rtc.c ****  [..] To allow the RTC to operate even when the main digital supply (VDD) is turned
  37:FWLIB/src/stm32f4xx_rtc.c ****       off, the VBAT pin powers the following blocks:
  38:FWLIB/src/stm32f4xx_rtc.c ****    (#) The RTC
  39:FWLIB/src/stm32f4xx_rtc.c ****    (#) The LSE oscillator
  40:FWLIB/src/stm32f4xx_rtc.c ****    (#) The backup SRAM when the low power backup regulator is enabled
  41:FWLIB/src/stm32f4xx_rtc.c ****    (#) PC13 to PC15 I/Os, plus PI8 I/O (when available)
  42:FWLIB/src/stm32f4xx_rtc.c ****   
  43:FWLIB/src/stm32f4xx_rtc.c ****  [..] When the backup domain is supplied by VDD (analog switch connected to VDD),
  44:FWLIB/src/stm32f4xx_rtc.c ****       the following functions are available:
  45:FWLIB/src/stm32f4xx_rtc.c ****    (#) PC14 and PC15 can be used as either GPIO or LSE pins
  46:FWLIB/src/stm32f4xx_rtc.c ****    (#) PC13 can be used as a GPIO or as the RTC_AF1 pin
  47:FWLIB/src/stm32f4xx_rtc.c ****    (#) PI8 can be used as a GPIO or as the RTC_AF2 pin
  48:FWLIB/src/stm32f4xx_rtc.c ****   
  49:FWLIB/src/stm32f4xx_rtc.c ****  [..] When the backup domain is supplied by VBAT (analog switch connected to VBAT 
  50:FWLIB/src/stm32f4xx_rtc.c ****       because VDD is not present), the following functions are available:
  51:FWLIB/src/stm32f4xx_rtc.c ****    (#) PC14 and PC15 can be used as LSE pins only
  52:FWLIB/src/stm32f4xx_rtc.c ****    (#) PC13 can be used as the RTC_AF1 pin 
  53:FWLIB/src/stm32f4xx_rtc.c ****    (#) PI8 can be used as the RTC_AF2 pin
  54:FWLIB/src/stm32f4xx_rtc.c ****   
  55:FWLIB/src/stm32f4xx_rtc.c ****             
  56:FWLIB/src/stm32f4xx_rtc.c ****                    ##### Backup Domain Reset #####
  57:FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
  58:FWLIB/src/stm32f4xx_rtc.c ****  [..] The backup domain reset sets all RTC registers and the RCC_BDCR register 
  59:FWLIB/src/stm32f4xx_rtc.c ****       to their reset values. The BKPSRAM is not affected by this reset. The only
  60:FWLIB/src/stm32f4xx_rtc.c ****       way of resetting the BKPSRAM is through the Flash interface by requesting 
  61:FWLIB/src/stm32f4xx_rtc.c ****       a protection level change from 1 to 0.
  62:FWLIB/src/stm32f4xx_rtc.c ****  [..] A backup domain reset is generated when one of the following events occurs:
  63:FWLIB/src/stm32f4xx_rtc.c ****    (#) Software reset, triggered by setting the BDRST bit in the 
  64:FWLIB/src/stm32f4xx_rtc.c ****        RCC Backup domain control register (RCC_BDCR). You can use the
  65:FWLIB/src/stm32f4xx_rtc.c ****        RCC_BackupResetCmd().
  66:FWLIB/src/stm32f4xx_rtc.c ****    (#) VDD or VBAT power on, if both supplies have previously been powered off.
  67:FWLIB/src/stm32f4xx_rtc.c ****   
  68:FWLIB/src/stm32f4xx_rtc.c **** 
  69:FWLIB/src/stm32f4xx_rtc.c ****                    ##### Backup Domain Access #####
  70:FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
  71:FWLIB/src/stm32f4xx_rtc.c ****  [..] After reset, the backup domain (RTC registers, RTC backup data 
  72:FWLIB/src/stm32f4xx_rtc.c ****       registers and backup SRAM) is protected against possible unwanted write 
  73:FWLIB/src/stm32f4xx_rtc.c ****       accesses. 
  74:FWLIB/src/stm32f4xx_rtc.c ****  [..] To enable access to the RTC Domain and RTC registers, proceed as follows:
  75:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the Power Controller (PWR) APB1 interface clock using the
  76:FWLIB/src/stm32f4xx_rtc.c ****        RCC_APB1PeriphClockCmd() function.
  77:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable access to RTC domain using the PWR_BackupAccessCmd() function.
  78:FWLIB/src/stm32f4xx_rtc.c ****    (+) Select the RTC clock source using the RCC_RTCCLKConfig() function.
  79:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable RTC Clock using the RCC_RTCCLKCmd() function.
  80:FWLIB/src/stm32f4xx_rtc.c ****   
  81:FWLIB/src/stm32f4xx_rtc.c ****   
  82:FWLIB/src/stm32f4xx_rtc.c ****                   ##### How to use RTC Driver #####
  83:FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
  84:FWLIB/src/stm32f4xx_rtc.c ****  [..] 
  85:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the RTC domain access (see description in the section above)
  86:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the RTC Prescaler (Asynchronous and Synchronous) and RTC hour 
  87:FWLIB/src/stm32f4xx_rtc.c ****        format using the RTC_Init() function.
ARM GAS  /tmp/cc7uya1D.s 			page 3


  88:FWLIB/src/stm32f4xx_rtc.c ****   
  89:FWLIB/src/stm32f4xx_rtc.c ****  *** Time and Date configuration ***
  90:FWLIB/src/stm32f4xx_rtc.c ****  ===================================
  91:FWLIB/src/stm32f4xx_rtc.c ****  [..] 
  92:FWLIB/src/stm32f4xx_rtc.c ****    (+) To configure the RTC Calendar (Time and Date) use the RTC_SetTime()
  93:FWLIB/src/stm32f4xx_rtc.c ****        and RTC_SetDate() functions.
  94:FWLIB/src/stm32f4xx_rtc.c ****    (+) To read the RTC Calendar, use the RTC_GetTime() and RTC_GetDate() functions.
  95:FWLIB/src/stm32f4xx_rtc.c ****    (+) Use the RTC_DayLightSavingConfig() function to add or sub one
  96:FWLIB/src/stm32f4xx_rtc.c ****        hour to the RTC Calendar.    
  97:FWLIB/src/stm32f4xx_rtc.c ****   
  98:FWLIB/src/stm32f4xx_rtc.c ****  *** Alarm configuration ***
  99:FWLIB/src/stm32f4xx_rtc.c ****  ===========================
 100:FWLIB/src/stm32f4xx_rtc.c ****  [..]
 101:FWLIB/src/stm32f4xx_rtc.c ****    (+) To configure the RTC Alarm use the RTC_SetAlarm() function.
 102:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the selected RTC Alarm using the RTC_AlarmCmd() function
 103:FWLIB/src/stm32f4xx_rtc.c ****    (+) To read the RTC Alarm, use the RTC_GetAlarm() function.
 104:FWLIB/src/stm32f4xx_rtc.c ****    (+) To read the RTC alarm SubSecond, use the RTC_GetAlarmSubSecond() function.
 105:FWLIB/src/stm32f4xx_rtc.c ****   
 106:FWLIB/src/stm32f4xx_rtc.c ****  *** RTC Wakeup configuration ***
 107:FWLIB/src/stm32f4xx_rtc.c ****  ================================
 108:FWLIB/src/stm32f4xx_rtc.c ****  [..] 
 109:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the RTC Wakeup Clock source use the RTC_WakeUpClockConfig()
 110:FWLIB/src/stm32f4xx_rtc.c ****        function.
 111:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the RTC WakeUp Counter using the RTC_SetWakeUpCounter() function  
 112:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the RTC WakeUp using the RTC_WakeUpCmd() function  
 113:FWLIB/src/stm32f4xx_rtc.c ****    (+) To read the RTC WakeUp Counter register, use the RTC_GetWakeUpCounter() 
 114:FWLIB/src/stm32f4xx_rtc.c ****        function.
 115:FWLIB/src/stm32f4xx_rtc.c ****   
 116:FWLIB/src/stm32f4xx_rtc.c ****  *** Outputs configuration ***
 117:FWLIB/src/stm32f4xx_rtc.c ****  =============================
 118:FWLIB/src/stm32f4xx_rtc.c ****  [..] The RTC has 2 different outputs:
 119:FWLIB/src/stm32f4xx_rtc.c ****    (+) AFO_ALARM: this output is used to manage the RTC Alarm A, Alarm B
 120:FWLIB/src/stm32f4xx_rtc.c ****        and WaKeUp signals. To output the selected RTC signal on RTC_AF1 pin, use the 
 121:FWLIB/src/stm32f4xx_rtc.c ****        RTC_OutputConfig() function.                
 122:FWLIB/src/stm32f4xx_rtc.c ****    (+) AFO_CALIB: this output is 512Hz signal or 1Hz. To output the RTC Clock on 
 123:FWLIB/src/stm32f4xx_rtc.c ****        RTC_AF1 pin, use the RTC_CalibOutputCmd() function.
 124:FWLIB/src/stm32f4xx_rtc.c ****   
 125:FWLIB/src/stm32f4xx_rtc.c ****  *** Smooth digital Calibration configuration ***
 126:FWLIB/src/stm32f4xx_rtc.c ****  ================================================    
 127:FWLIB/src/stm32f4xx_rtc.c ****  [..]
 128:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the RTC Original Digital Calibration Value and the corresponding
 129:FWLIB/src/stm32f4xx_rtc.c ****        calibration cycle period (32s,16s and 8s) using the RTC_SmoothCalibConfig() 
 130:FWLIB/src/stm32f4xx_rtc.c ****        function.
 131:FWLIB/src/stm32f4xx_rtc.c ****   
 132:FWLIB/src/stm32f4xx_rtc.c ****  *** Coarse digital Calibration configuration ***
 133:FWLIB/src/stm32f4xx_rtc.c ****  ================================================
 134:FWLIB/src/stm32f4xx_rtc.c ****  [..]
 135:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the RTC Coarse Calibration Value and the corresponding
 136:FWLIB/src/stm32f4xx_rtc.c ****        sign using the RTC_CoarseCalibConfig() function.
 137:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the RTC Coarse Calibration using the RTC_CoarseCalibCmd() function  
 138:FWLIB/src/stm32f4xx_rtc.c ****   
 139:FWLIB/src/stm32f4xx_rtc.c ****  *** TimeStamp configuration ***
 140:FWLIB/src/stm32f4xx_rtc.c ****  ===============================
 141:FWLIB/src/stm32f4xx_rtc.c ****  [..]
 142:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the RTC_AF1 trigger and enables the RTC TimeStamp using the RTC
 143:FWLIB/src/stm32f4xx_rtc.c ****       _TimeStampCmd() function.
 144:FWLIB/src/stm32f4xx_rtc.c ****    (+) To read the RTC TimeStamp Time and Date register, use the RTC_GetTimeStamp()
ARM GAS  /tmp/cc7uya1D.s 			page 4


 145:FWLIB/src/stm32f4xx_rtc.c ****        function.
 146:FWLIB/src/stm32f4xx_rtc.c ****    (+) To read the RTC TimeStamp SubSecond register, use the 
 147:FWLIB/src/stm32f4xx_rtc.c ****        RTC_GetTimeStampSubSecond() function.
 148:FWLIB/src/stm32f4xx_rtc.c ****    (+) The TAMPER1 alternate function can be mapped either to RTC_AF1(PC13)
 149:FWLIB/src/stm32f4xx_rtc.c ****        or RTC_AF2 (PI8) depending on the value of TAMP1INSEL bit in 
 150:FWLIB/src/stm32f4xx_rtc.c ****        RTC_TAFCR register. You can use the  RTC_TamperPinSelection() function to
 151:FWLIB/src/stm32f4xx_rtc.c ****        select the corresponding pin.     
 152:FWLIB/src/stm32f4xx_rtc.c ****   
 153:FWLIB/src/stm32f4xx_rtc.c ****  *** Tamper configuration ***
 154:FWLIB/src/stm32f4xx_rtc.c ****  ============================
 155:FWLIB/src/stm32f4xx_rtc.c ****  [..]
 156:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the RTC Tamper using the RTC_TamperCmd() function.
 157:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the Tamper filter count using RTC_TamperFilterConfig()
 158:FWLIB/src/stm32f4xx_rtc.c ****        function. 
 159:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the RTC Tamper trigger Edge or Level according to the Tamper 
 160:FWLIB/src/stm32f4xx_rtc.c ****        filter (if equal to 0 Edge else Level) value using the RTC_TamperConfig() 
 161:FWLIB/src/stm32f4xx_rtc.c ****        function.
 162:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the Tamper sampling frequency using RTC_TamperSamplingFreqConfig()
 163:FWLIB/src/stm32f4xx_rtc.c ****        function.
 164:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the Tamper precharge or discharge duration using 
 165:FWLIB/src/stm32f4xx_rtc.c ****        RTC_TamperPinsPrechargeDuration() function.
 166:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the Tamper Pull-UP using RTC_TamperPullUpDisableCmd() function.
 167:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the Time stamp on Tamper detection event using  
 168:FWLIB/src/stm32f4xx_rtc.c ****        TC_TSOnTamperDetecCmd() function.
 169:FWLIB/src/stm32f4xx_rtc.c ****    (+) The TIMESTAMP alternate function can be mapped to either RTC_AF1 
 170:FWLIB/src/stm32f4xx_rtc.c ****        or RTC_AF2 depending on the value of the TSINSEL bit in the RTC_TAFCR 
 171:FWLIB/src/stm32f4xx_rtc.c ****        register. You can use the  RTC_TimeStampPinSelection() function to select 
 172:FWLIB/src/stm32f4xx_rtc.c ****        the corresponding pin. 
 173:FWLIB/src/stm32f4xx_rtc.c ****   
 174:FWLIB/src/stm32f4xx_rtc.c ****  *** Backup Data Registers configuration ***
 175:FWLIB/src/stm32f4xx_rtc.c ****  ===========================================
 176:FWLIB/src/stm32f4xx_rtc.c ****  [..]
 177:FWLIB/src/stm32f4xx_rtc.c ****    (+) To write to the RTC Backup Data registers, use the RTC_WriteBackupRegister()
 178:FWLIB/src/stm32f4xx_rtc.c ****        function.  
 179:FWLIB/src/stm32f4xx_rtc.c ****    (+) To read the RTC Backup Data registers, use the RTC_ReadBackupRegister()
 180:FWLIB/src/stm32f4xx_rtc.c ****        function.
 181:FWLIB/src/stm32f4xx_rtc.c ****    
 182:FWLIB/src/stm32f4xx_rtc.c **** 
 183:FWLIB/src/stm32f4xx_rtc.c ****                   ##### RTC and low power modes #####
 184:FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
 185:FWLIB/src/stm32f4xx_rtc.c ****  [..] The MCU can be woken up from a low power mode by an RTC alternate 
 186:FWLIB/src/stm32f4xx_rtc.c ****       function.
 187:FWLIB/src/stm32f4xx_rtc.c ****  [..] The RTC alternate functions are the RTC alarms (Alarm A and Alarm B), 
 188:FWLIB/src/stm32f4xx_rtc.c ****       RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
 189:FWLIB/src/stm32f4xx_rtc.c ****       These RTC alternate functions can wake up the system from the Stop and 
 190:FWLIB/src/stm32f4xx_rtc.c ****       Standby lowpower modes.
 191:FWLIB/src/stm32f4xx_rtc.c ****  [..] The system can also wake up from low power modes without depending 
 192:FWLIB/src/stm32f4xx_rtc.c ****       on an external interrupt (Auto-wakeup mode), by using the RTC alarm 
 193:FWLIB/src/stm32f4xx_rtc.c ****       or the RTC wakeup events.
 194:FWLIB/src/stm32f4xx_rtc.c ****  [..] The RTC provides a programmable time base for waking up from the 
 195:FWLIB/src/stm32f4xx_rtc.c ****       Stop or Standby mode at regular intervals.
 196:FWLIB/src/stm32f4xx_rtc.c ****       Wakeup from STOP and Standby modes is possible only when the RTC clock source
 197:FWLIB/src/stm32f4xx_rtc.c ****       is LSE or LSI.
 198:FWLIB/src/stm32f4xx_rtc.c ****   
 199:FWLIB/src/stm32f4xx_rtc.c **** 
 200:FWLIB/src/stm32f4xx_rtc.c ****           ##### Selection of RTC_AF1 alternate functions #####
 201:FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
ARM GAS  /tmp/cc7uya1D.s 			page 5


 202:FWLIB/src/stm32f4xx_rtc.c ****  [..] The RTC_AF1 pin (PC13) can be used for the following purposes:
 203:FWLIB/src/stm32f4xx_rtc.c ****    (+) AFO_ALARM output
 204:FWLIB/src/stm32f4xx_rtc.c ****    (+) AFO_CALIB output
 205:FWLIB/src/stm32f4xx_rtc.c ****    (+) AFI_TAMPER
 206:FWLIB/src/stm32f4xx_rtc.c ****    (+) AFI_TIMESTAMP
 207:FWLIB/src/stm32f4xx_rtc.c ****  
 208:FWLIB/src/stm32f4xx_rtc.c ****  [..]   
 209:FWLIB/src/stm32f4xx_rtc.c ****    +-----------------------------------------------------------------------------------------------
 210:FWLIB/src/stm32f4xx_rtc.c ****    |     Pin         |AFO_ALARM |AFO_CALIB |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    |
 211:FWLIB/src/stm32f4xx_rtc.c ****    |  configuration  | ENABLED  | ENABLED  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin |
 212:FWLIB/src/stm32f4xx_rtc.c ****    |  and function   |          |          |           |              | selection  |  selection   |
 213:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 214:FWLIB/src/stm32f4xx_rtc.c ****    |   Alarm out     |          |          |           |              |    Don't   |     Don't    |
 215:FWLIB/src/stm32f4xx_rtc.c ****    |   output OD     |     1    |Don't care|Don't care | Don't care   |    care    |     care     |
 216:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 217:FWLIB/src/stm32f4xx_rtc.c ****    |   Alarm out     |          |          |           |              |    Don't   |     Don't    |
 218:FWLIB/src/stm32f4xx_rtc.c ****    |   output PP     |     1    |Don't care|Don't care | Don't care   |    care    |     care     |
 219:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 220:FWLIB/src/stm32f4xx_rtc.c ****    | Calibration out |          |          |           |              |    Don't   |     Don't    |
 221:FWLIB/src/stm32f4xx_rtc.c ****    |   output PP     |     0    |    1     |Don't care | Don't care   |    care    |     care     |
 222:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 223:FWLIB/src/stm32f4xx_rtc.c ****    |  TAMPER input   |          |          |           |              |            |     Don't    |
 224:FWLIB/src/stm32f4xx_rtc.c ****    |   floating      |     0    |    0     |     1     |      0       |      0     |     care     |
 225:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 226:FWLIB/src/stm32f4xx_rtc.c ****    |  TIMESTAMP and  |          |          |           |              |            |              |
 227:FWLIB/src/stm32f4xx_rtc.c ****    |  TAMPER input   |     0    |    0     |     1     |      1       |      0     |      0       |
 228:FWLIB/src/stm32f4xx_rtc.c ****    |   floating      |          |          |           |              |            |              |
 229:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 230:FWLIB/src/stm32f4xx_rtc.c ****    | TIMESTAMP input |          |          |           |              |    Don't   |              |
 231:FWLIB/src/stm32f4xx_rtc.c ****    |    floating     |     0    |    0     |     0     |      1       |    care    |      0       |
 232:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 233:FWLIB/src/stm32f4xx_rtc.c ****    |  Standard GPIO  |     0    |    0     |     0     |      0       | Don't care |  Don't care  |
 234:FWLIB/src/stm32f4xx_rtc.c ****    +-----------------------------------------------------------------------------------------------
 235:FWLIB/src/stm32f4xx_rtc.c **** 
 236:FWLIB/src/stm32f4xx_rtc.c ****             
 237:FWLIB/src/stm32f4xx_rtc.c ****         #####  Selection of RTC_AF2 alternate functions #####
 238:FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
 239:FWLIB/src/stm32f4xx_rtc.c ****  [..] The RTC_AF2 pin (PI8) can be used for the following purposes:
 240:FWLIB/src/stm32f4xx_rtc.c ****    (+) AFI_TAMPER
 241:FWLIB/src/stm32f4xx_rtc.c ****    (+) AFI_TIMESTAMP
 242:FWLIB/src/stm32f4xx_rtc.c ****  [..]
 243:FWLIB/src/stm32f4xx_rtc.c ****    +---------------------------------------------------------------------------------------+
 244:FWLIB/src/stm32f4xx_rtc.c ****    |     Pin         |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    |ALARMOUTTYPE  |
 245:FWLIB/src/stm32f4xx_rtc.c ****    |  configuration  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin |  AFO_ALARM   |
 246:FWLIB/src/stm32f4xx_rtc.c ****    |  and function   |           |              | selection  |  selection   |Configuration |
 247:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|-----------|--------------|------------|--------------|--------------|
 248:FWLIB/src/stm32f4xx_rtc.c ****    |  TAMPER input   |           |              |            |     Don't    |              |
 249:FWLIB/src/stm32f4xx_rtc.c ****    |   floating      |     1     |      0       |      1     |     care     |  Don't care  |
 250:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|-----------|--------------|------------|--------------|--------------|
 251:FWLIB/src/stm32f4xx_rtc.c ****    |  TIMESTAMP and  |           |              |            |              |              |
 252:FWLIB/src/stm32f4xx_rtc.c ****    |  TAMPER input   |     1     |      1       |      1     |      1       |  Don't care  |
 253:FWLIB/src/stm32f4xx_rtc.c ****    |   floating      |           |              |            |              |              |
 254:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|-----------|--------------|------------|--------------|--------------|
 255:FWLIB/src/stm32f4xx_rtc.c ****    | TIMESTAMP input |           |              |    Don't   |              |              |
 256:FWLIB/src/stm32f4xx_rtc.c ****    |    floating     |     0     |      1       |    care    |      1       |  Don't care  |
 257:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|-----------|--------------|------------|--------------|--------------|
 258:FWLIB/src/stm32f4xx_rtc.c ****    |  Standard GPIO  |     0     |      0       | Don't care |  Don't care  |  Don't care  |
ARM GAS  /tmp/cc7uya1D.s 			page 6


 259:FWLIB/src/stm32f4xx_rtc.c ****    +---------------------------------------------------------------------------------------+   
 260:FWLIB/src/stm32f4xx_rtc.c ****  
 261:FWLIB/src/stm32f4xx_rtc.c ****      
 262:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
 263:FWLIB/src/stm32f4xx_rtc.c ****   
 264:FWLIB/src/stm32f4xx_rtc.c ****   ******************************************************************************
 265:FWLIB/src/stm32f4xx_rtc.c ****   * @attention
 266:FWLIB/src/stm32f4xx_rtc.c ****   *
 267:FWLIB/src/stm32f4xx_rtc.c ****   * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
 268:FWLIB/src/stm32f4xx_rtc.c ****   *
 269:FWLIB/src/stm32f4xx_rtc.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
 270:FWLIB/src/stm32f4xx_rtc.c ****   * You may not use this file except in compliance with the License.
 271:FWLIB/src/stm32f4xx_rtc.c ****   * You may obtain a copy of the License at:
 272:FWLIB/src/stm32f4xx_rtc.c ****   *
 273:FWLIB/src/stm32f4xx_rtc.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
 274:FWLIB/src/stm32f4xx_rtc.c ****   *
 275:FWLIB/src/stm32f4xx_rtc.c ****   * Unless required by applicable law or agreed to in writing, software 
 276:FWLIB/src/stm32f4xx_rtc.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
 277:FWLIB/src/stm32f4xx_rtc.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 278:FWLIB/src/stm32f4xx_rtc.c ****   * See the License for the specific language governing permissions and
 279:FWLIB/src/stm32f4xx_rtc.c ****   * limitations under the License.
 280:FWLIB/src/stm32f4xx_rtc.c ****   *
 281:FWLIB/src/stm32f4xx_rtc.c ****   ******************************************************************************
 282:FWLIB/src/stm32f4xx_rtc.c ****   */ 
 283:FWLIB/src/stm32f4xx_rtc.c **** 
 284:FWLIB/src/stm32f4xx_rtc.c **** /* Includes ------------------------------------------------------------------*/
 285:FWLIB/src/stm32f4xx_rtc.c **** #include "stm32f4xx_rtc.h"
 286:FWLIB/src/stm32f4xx_rtc.c **** 
 287:FWLIB/src/stm32f4xx_rtc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 288:FWLIB/src/stm32f4xx_rtc.c ****   * @{
 289:FWLIB/src/stm32f4xx_rtc.c ****   */
 290:FWLIB/src/stm32f4xx_rtc.c **** 
 291:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC 
 292:FWLIB/src/stm32f4xx_rtc.c ****   * @brief RTC driver modules
 293:FWLIB/src/stm32f4xx_rtc.c ****   * @{
 294:FWLIB/src/stm32f4xx_rtc.c ****   */
 295:FWLIB/src/stm32f4xx_rtc.c **** 
 296:FWLIB/src/stm32f4xx_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 297:FWLIB/src/stm32f4xx_rtc.c **** /* Private define ------------------------------------------------------------*/
 298:FWLIB/src/stm32f4xx_rtc.c **** 
 299:FWLIB/src/stm32f4xx_rtc.c **** /* Masks Definition */
 300:FWLIB/src/stm32f4xx_rtc.c **** #define RTC_TR_RESERVED_MASK    ((uint32_t)0x007F7F7F)
 301:FWLIB/src/stm32f4xx_rtc.c **** #define RTC_DR_RESERVED_MASK    ((uint32_t)0x00FFFF3F) 
 302:FWLIB/src/stm32f4xx_rtc.c **** #define RTC_INIT_MASK           ((uint32_t)0xFFFFFFFF)  
 303:FWLIB/src/stm32f4xx_rtc.c **** #define RTC_RSF_MASK            ((uint32_t)0xFFFFFF5F)
 304:FWLIB/src/stm32f4xx_rtc.c **** #define RTC_FLAGS_MASK          ((uint32_t)(RTC_FLAG_TSOVF | RTC_FLAG_TSF | RTC_FLAG_WUTF | \
 305:FWLIB/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBF | RTC_FLAG_ALRAF | RTC_FLAG_INITF | \
 306:FWLIB/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_RSF | RTC_FLAG_INITS | RTC_FLAG_WUTWF | \
 307:FWLIB/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBWF | RTC_FLAG_ALRAWF | RTC_FLAG_TAMP1F | \
 308:FWLIB/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_TAMP2F | RTC_FLAG_RECALPF | RTC_FLAG_SHPF))
 309:FWLIB/src/stm32f4xx_rtc.c **** 
 310:FWLIB/src/stm32f4xx_rtc.c **** #define INITMODE_TIMEOUT         ((uint32_t) 0x00010000)
 311:FWLIB/src/stm32f4xx_rtc.c **** #define SYNCHRO_TIMEOUT          ((uint32_t) 0x00020000)
 312:FWLIB/src/stm32f4xx_rtc.c **** #define RECALPF_TIMEOUT          ((uint32_t) 0x00020000)
 313:FWLIB/src/stm32f4xx_rtc.c **** #define SHPF_TIMEOUT             ((uint32_t) 0x00001000)
 314:FWLIB/src/stm32f4xx_rtc.c **** 
 315:FWLIB/src/stm32f4xx_rtc.c **** /* Private macro -------------------------------------------------------------*/
ARM GAS  /tmp/cc7uya1D.s 			page 7


 316:FWLIB/src/stm32f4xx_rtc.c **** /* Private variables ---------------------------------------------------------*/
 317:FWLIB/src/stm32f4xx_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 318:FWLIB/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value);
 319:FWLIB/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value);
 320:FWLIB/src/stm32f4xx_rtc.c **** 
 321:FWLIB/src/stm32f4xx_rtc.c **** /* Private functions ---------------------------------------------------------*/
 322:FWLIB/src/stm32f4xx_rtc.c **** 
 323:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Private_Functions
 324:FWLIB/src/stm32f4xx_rtc.c ****   * @{
 325:FWLIB/src/stm32f4xx_rtc.c ****   */ 
 326:FWLIB/src/stm32f4xx_rtc.c **** 
 327:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group1 Initialization and Configuration functions
 328:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Initialization and Configuration functions 
 329:FWLIB/src/stm32f4xx_rtc.c ****  *
 330:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
 331:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
 332:FWLIB/src/stm32f4xx_rtc.c ****              ##### Initialization and Configuration functions #####
 333:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
 334:FWLIB/src/stm32f4xx_rtc.c ****  
 335:FWLIB/src/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to initialize and configure the RTC
 336:FWLIB/src/stm32f4xx_rtc.c ****       Prescaler (Synchronous and Asynchronous), RTC Hour format, disable RTC registers
 337:FWLIB/src/stm32f4xx_rtc.c ****       Write protection, enter and exit the RTC initialization mode, RTC registers
 338:FWLIB/src/stm32f4xx_rtc.c ****       synchronization check and reference clock detection enable.
 339:FWLIB/src/stm32f4xx_rtc.c ****   
 340:FWLIB/src/stm32f4xx_rtc.c ****    (#) The RTC Prescaler is programmed to generate the RTC 1Hz time base. It is
 341:FWLIB/src/stm32f4xx_rtc.c ****        split into 2 programmable prescalers to minimize power consumption.
 342:FWLIB/src/stm32f4xx_rtc.c ****        (++) A 7-bit asynchronous prescaler and A 13-bit synchronous prescaler.
 343:FWLIB/src/stm32f4xx_rtc.c ****        (++) When both prescalers are used, it is recommended to configure the 
 344:FWLIB/src/stm32f4xx_rtc.c ****             asynchronous prescaler to a high value to minimize consumption.
 345:FWLIB/src/stm32f4xx_rtc.c **** 
 346:FWLIB/src/stm32f4xx_rtc.c ****    (#) All RTC registers are Write protected. Writing to the RTC registers
 347:FWLIB/src/stm32f4xx_rtc.c ****        is enabled by writing a key into the Write Protection register, RTC_WPR.
 348:FWLIB/src/stm32f4xx_rtc.c **** 
 349:FWLIB/src/stm32f4xx_rtc.c ****    (#) To Configure the RTC Calendar, user application should enter initialization
 350:FWLIB/src/stm32f4xx_rtc.c ****        mode. In this mode, the calendar counter is stopped and its value can be 
 351:FWLIB/src/stm32f4xx_rtc.c ****        updated. When the initialization sequence is complete, the calendar restarts 
 352:FWLIB/src/stm32f4xx_rtc.c ****        counting after 4 RTCCLK cycles.
 353:FWLIB/src/stm32f4xx_rtc.c **** 
 354:FWLIB/src/stm32f4xx_rtc.c ****    (#) To read the calendar through the shadow registers after Calendar initialization,
 355:FWLIB/src/stm32f4xx_rtc.c ****        calendar update or after wakeup from low power modes the software must first 
 356:FWLIB/src/stm32f4xx_rtc.c ****        clear the RSF flag. The software must then wait until it is set again before 
 357:FWLIB/src/stm32f4xx_rtc.c ****        reading the calendar, which means that the calendar registers have been 
 358:FWLIB/src/stm32f4xx_rtc.c ****        correctly copied into the RTC_TR and RTC_DR shadow registers.
 359:FWLIB/src/stm32f4xx_rtc.c ****        The RTC_WaitForSynchro() function implements the above software sequence 
 360:FWLIB/src/stm32f4xx_rtc.c ****        (RSF clear and RSF check).
 361:FWLIB/src/stm32f4xx_rtc.c **** 
 362:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
 363:FWLIB/src/stm32f4xx_rtc.c ****   * @{
 364:FWLIB/src/stm32f4xx_rtc.c ****   */
 365:FWLIB/src/stm32f4xx_rtc.c **** 
 366:FWLIB/src/stm32f4xx_rtc.c **** /**
 367:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Deinitializes the RTC registers to their default reset values.
 368:FWLIB/src/stm32f4xx_rtc.c ****   * @note   This function doesn't reset the RTC Clock source and RTC Backup Data
 369:FWLIB/src/stm32f4xx_rtc.c ****   *         registers.       
 370:FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
 371:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 372:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are deinitialized
ARM GAS  /tmp/cc7uya1D.s 			page 8


 373:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not deinitialized
 374:FWLIB/src/stm32f4xx_rtc.c ****   */
 375:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_DeInit(void)
 376:FWLIB/src/stm32f4xx_rtc.c **** {
 377:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 378:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 379:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 380:FWLIB/src/stm32f4xx_rtc.c ****   
 381:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 382:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 383:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 384:FWLIB/src/stm32f4xx_rtc.c **** 
 385:FWLIB/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 386:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 387:FWLIB/src/stm32f4xx_rtc.c ****   {
 388:FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
 389:FWLIB/src/stm32f4xx_rtc.c ****   }  
 390:FWLIB/src/stm32f4xx_rtc.c ****   else
 391:FWLIB/src/stm32f4xx_rtc.c ****   {
 392:FWLIB/src/stm32f4xx_rtc.c ****     /* Reset TR, DR and CR registers */
 393:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)0x00000000;
 394:FWLIB/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
 395:FWLIB/src/stm32f4xx_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 396:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)0x00000007;
 397:FWLIB/src/stm32f4xx_rtc.c ****   
 398:FWLIB/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 399:FWLIB/src/stm32f4xx_rtc.c ****     do
 400:FWLIB/src/stm32f4xx_rtc.c ****     {
 401:FWLIB/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 402:FWLIB/src/stm32f4xx_rtc.c ****       wutcounter++;  
 403:FWLIB/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 404:FWLIB/src/stm32f4xx_rtc.c ****     
 405:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 406:FWLIB/src/stm32f4xx_rtc.c ****     {
 407:FWLIB/src/stm32f4xx_rtc.c ****       status = ERROR;
 408:FWLIB/src/stm32f4xx_rtc.c ****     }
 409:FWLIB/src/stm32f4xx_rtc.c ****     else
 410:FWLIB/src/stm32f4xx_rtc.c ****     {
 411:FWLIB/src/stm32f4xx_rtc.c ****       /* Reset all RTC CR register bits */
 412:FWLIB/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)0x00000000;
 413:FWLIB/src/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 414:FWLIB/src/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 415:FWLIB/src/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 416:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 417:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 418:FWLIB/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)0x00000000;
 419:FWLIB/src/stm32f4xx_rtc.c ****       RTC->CALR = (uint32_t)0x00000000;
 420:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMASSR = (uint32_t)0x00000000;
 421:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMBSSR = (uint32_t)0x00000000;
 422:FWLIB/src/stm32f4xx_rtc.c ****       
 423:FWLIB/src/stm32f4xx_rtc.c ****       /* Reset ISR register and exit initialization mode */
 424:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ISR = (uint32_t)0x00000000;
 425:FWLIB/src/stm32f4xx_rtc.c ****       
 426:FWLIB/src/stm32f4xx_rtc.c ****       /* Reset Tamper and alternate functions configuration register */
 427:FWLIB/src/stm32f4xx_rtc.c ****       RTC->TAFCR = 0x00000000;
 428:FWLIB/src/stm32f4xx_rtc.c ****   
 429:FWLIB/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
ARM GAS  /tmp/cc7uya1D.s 			page 9


 430:FWLIB/src/stm32f4xx_rtc.c ****       {
 431:FWLIB/src/stm32f4xx_rtc.c ****         status = ERROR;
 432:FWLIB/src/stm32f4xx_rtc.c ****       }
 433:FWLIB/src/stm32f4xx_rtc.c ****       else
 434:FWLIB/src/stm32f4xx_rtc.c ****       {
 435:FWLIB/src/stm32f4xx_rtc.c ****         status = SUCCESS;      
 436:FWLIB/src/stm32f4xx_rtc.c ****       }
 437:FWLIB/src/stm32f4xx_rtc.c ****     }
 438:FWLIB/src/stm32f4xx_rtc.c ****   }
 439:FWLIB/src/stm32f4xx_rtc.c ****   
 440:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 441:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 442:FWLIB/src/stm32f4xx_rtc.c ****   
 443:FWLIB/src/stm32f4xx_rtc.c ****   return status;
 444:FWLIB/src/stm32f4xx_rtc.c **** }
 445:FWLIB/src/stm32f4xx_rtc.c **** 
 446:FWLIB/src/stm32f4xx_rtc.c **** /**
 447:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Initializes the RTC registers according to the specified parameters 
 448:FWLIB/src/stm32f4xx_rtc.c ****   *         in RTC_InitStruct.
 449:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure that contains 
 450:FWLIB/src/stm32f4xx_rtc.c ****   *         the configuration information for the RTC peripheral.
 451:FWLIB/src/stm32f4xx_rtc.c ****   * @note   The RTC Prescaler register is write protected and can be written in 
 452:FWLIB/src/stm32f4xx_rtc.c ****   *         initialization mode only.  
 453:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 454:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are initialized
 455:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not initialized  
 456:FWLIB/src/stm32f4xx_rtc.c ****   */
 457:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
 458:FWLIB/src/stm32f4xx_rtc.c **** {
 459:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 460:FWLIB/src/stm32f4xx_rtc.c ****   
 461:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 462:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
 463:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
 464:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));
 465:FWLIB/src/stm32f4xx_rtc.c **** 
 466:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 467:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 468:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 469:FWLIB/src/stm32f4xx_rtc.c **** 
 470:FWLIB/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 471:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 472:FWLIB/src/stm32f4xx_rtc.c ****   {
 473:FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
 474:FWLIB/src/stm32f4xx_rtc.c ****   } 
 475:FWLIB/src/stm32f4xx_rtc.c ****   else
 476:FWLIB/src/stm32f4xx_rtc.c ****   {
 477:FWLIB/src/stm32f4xx_rtc.c ****     /* Clear RTC CR FMT Bit */
 478:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 479:FWLIB/src/stm32f4xx_rtc.c ****     /* Set RTC_CR register */
 480:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 481:FWLIB/src/stm32f4xx_rtc.c ****   
 482:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the RTC PRER */
 483:FWLIB/src/stm32f4xx_rtc.c ****     RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 484:FWLIB/src/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 485:FWLIB/src/stm32f4xx_rtc.c **** 
 486:FWLIB/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
ARM GAS  /tmp/cc7uya1D.s 			page 10


 487:FWLIB/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 488:FWLIB/src/stm32f4xx_rtc.c **** 
 489:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 490:FWLIB/src/stm32f4xx_rtc.c ****   }
 491:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 492:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 493:FWLIB/src/stm32f4xx_rtc.c ****   
 494:FWLIB/src/stm32f4xx_rtc.c ****   return status;
 495:FWLIB/src/stm32f4xx_rtc.c **** }
 496:FWLIB/src/stm32f4xx_rtc.c **** 
 497:FWLIB/src/stm32f4xx_rtc.c **** /**
 498:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_InitStruct member with its default value.
 499:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
 500:FWLIB/src/stm32f4xx_rtc.c ****   *         initialized.
 501:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
 502:FWLIB/src/stm32f4xx_rtc.c ****   */
 503:FWLIB/src/stm32f4xx_rtc.c **** void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
 504:FWLIB/src/stm32f4xx_rtc.c **** {
 505:FWLIB/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_HourFormat member */
 506:FWLIB/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 507:FWLIB/src/stm32f4xx_rtc.c ****     
 508:FWLIB/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_AsynchPrediv member */
 509:FWLIB/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 510:FWLIB/src/stm32f4xx_rtc.c **** 
 511:FWLIB/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_SynchPrediv member */
 512:FWLIB/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 513:FWLIB/src/stm32f4xx_rtc.c **** }
 514:FWLIB/src/stm32f4xx_rtc.c **** 
 515:FWLIB/src/stm32f4xx_rtc.c **** /**
 516:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC registers write protection.
 517:FWLIB/src/stm32f4xx_rtc.c ****   * @note   All the RTC registers are write protected except for RTC_ISR[13:8], 
 518:FWLIB/src/stm32f4xx_rtc.c ****   *         RTC_TAFCR and RTC_BKPxR.
 519:FWLIB/src/stm32f4xx_rtc.c ****   * @note   Writing a wrong key reactivates the write protection.
 520:FWLIB/src/stm32f4xx_rtc.c ****   * @note   The protection mechanism is not affected by system reset.  
 521:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the write protection.
 522:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 523:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
 524:FWLIB/src/stm32f4xx_rtc.c ****   */
 525:FWLIB/src/stm32f4xx_rtc.c **** void RTC_WriteProtectionCmd(FunctionalState NewState)
 526:FWLIB/src/stm32f4xx_rtc.c **** {
 527:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 528:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 529:FWLIB/src/stm32f4xx_rtc.c ****     
 530:FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 531:FWLIB/src/stm32f4xx_rtc.c ****   {
 532:FWLIB/src/stm32f4xx_rtc.c ****     /* Enable the write protection for RTC registers */
 533:FWLIB/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xFF;   
 534:FWLIB/src/stm32f4xx_rtc.c ****   }
 535:FWLIB/src/stm32f4xx_rtc.c ****   else
 536:FWLIB/src/stm32f4xx_rtc.c ****   {
 537:FWLIB/src/stm32f4xx_rtc.c ****     /* Disable the write protection for RTC registers */
 538:FWLIB/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xCA;
 539:FWLIB/src/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 540:FWLIB/src/stm32f4xx_rtc.c ****   }
 541:FWLIB/src/stm32f4xx_rtc.c **** }
 542:FWLIB/src/stm32f4xx_rtc.c **** 
 543:FWLIB/src/stm32f4xx_rtc.c **** /**
ARM GAS  /tmp/cc7uya1D.s 			page 11


 544:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enters the RTC Initialization mode.
 545:FWLIB/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 546:FWLIB/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.    
 547:FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
 548:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 549:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC is in Init mode
 550:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC is not in Init mode  
 551:FWLIB/src/stm32f4xx_rtc.c ****   */
 552:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_EnterInitMode(void)
 553:FWLIB/src/stm32f4xx_rtc.c **** {
 554:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 555:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 556:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t initstatus = 0x00;
 557:FWLIB/src/stm32f4xx_rtc.c ****      
 558:FWLIB/src/stm32f4xx_rtc.c ****   /* Check if the Initialization mode is set */
 559:FWLIB/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 560:FWLIB/src/stm32f4xx_rtc.c ****   {
 561:FWLIB/src/stm32f4xx_rtc.c ****     /* Set the Initialization mode */
 562:FWLIB/src/stm32f4xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 563:FWLIB/src/stm32f4xx_rtc.c ****     
 564:FWLIB/src/stm32f4xx_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
 565:FWLIB/src/stm32f4xx_rtc.c ****     do
 566:FWLIB/src/stm32f4xx_rtc.c ****     {
 567:FWLIB/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 568:FWLIB/src/stm32f4xx_rtc.c ****       initcounter++;  
 569:FWLIB/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 570:FWLIB/src/stm32f4xx_rtc.c ****     
 571:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 572:FWLIB/src/stm32f4xx_rtc.c ****     {
 573:FWLIB/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 574:FWLIB/src/stm32f4xx_rtc.c ****     }
 575:FWLIB/src/stm32f4xx_rtc.c ****     else
 576:FWLIB/src/stm32f4xx_rtc.c ****     {
 577:FWLIB/src/stm32f4xx_rtc.c ****       status = ERROR;
 578:FWLIB/src/stm32f4xx_rtc.c ****     }        
 579:FWLIB/src/stm32f4xx_rtc.c ****   }
 580:FWLIB/src/stm32f4xx_rtc.c ****   else
 581:FWLIB/src/stm32f4xx_rtc.c ****   {
 582:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;  
 583:FWLIB/src/stm32f4xx_rtc.c ****   } 
 584:FWLIB/src/stm32f4xx_rtc.c ****     
 585:FWLIB/src/stm32f4xx_rtc.c ****   return (status);  
 586:FWLIB/src/stm32f4xx_rtc.c **** }
 587:FWLIB/src/stm32f4xx_rtc.c **** 
 588:FWLIB/src/stm32f4xx_rtc.c **** /**
 589:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Exits the RTC Initialization mode.
 590:FWLIB/src/stm32f4xx_rtc.c ****   * @note   When the initialization sequence is complete, the calendar restarts 
 591:FWLIB/src/stm32f4xx_rtc.c ****   *         counting after 4 RTCCLK cycles.  
 592:FWLIB/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 593:FWLIB/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
 594:FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
 595:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
 596:FWLIB/src/stm32f4xx_rtc.c ****   */
 597:FWLIB/src/stm32f4xx_rtc.c **** void RTC_ExitInitMode(void)
 598:FWLIB/src/stm32f4xx_rtc.c **** { 
 599:FWLIB/src/stm32f4xx_rtc.c ****   /* Exit Initialization mode */
 600:FWLIB/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
ARM GAS  /tmp/cc7uya1D.s 			page 12


 601:FWLIB/src/stm32f4xx_rtc.c **** }
 602:FWLIB/src/stm32f4xx_rtc.c **** 
 603:FWLIB/src/stm32f4xx_rtc.c **** /**
 604:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are 
 605:FWLIB/src/stm32f4xx_rtc.c ****   *         synchronized with RTC APB clock.
 606:FWLIB/src/stm32f4xx_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the 
 607:FWLIB/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function. 
 608:FWLIB/src/stm32f4xx_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar 
 609:FWLIB/src/stm32f4xx_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes 
 610:FWLIB/src/stm32f4xx_rtc.c ****   *         the software must first clear the RSF flag. 
 611:FWLIB/src/stm32f4xx_rtc.c ****   *         The software must then wait until it is set again before reading 
 612:FWLIB/src/stm32f4xx_rtc.c ****   *         the calendar, which means that the calendar registers have been 
 613:FWLIB/src/stm32f4xx_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
 614:FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
 615:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 616:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are synchronised
 617:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not synchronised
 618:FWLIB/src/stm32f4xx_rtc.c ****   */
 619:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WaitForSynchro(void)
 620:FWLIB/src/stm32f4xx_rtc.c **** {
 621:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 622:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 623:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t synchrostatus = 0x00;
 624:FWLIB/src/stm32f4xx_rtc.c **** 
 625:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 626:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 627:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 628:FWLIB/src/stm32f4xx_rtc.c ****     
 629:FWLIB/src/stm32f4xx_rtc.c ****   /* Clear RSF flag */
 630:FWLIB/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 631:FWLIB/src/stm32f4xx_rtc.c ****     
 632:FWLIB/src/stm32f4xx_rtc.c ****   /* Wait the registers to be synchronised */
 633:FWLIB/src/stm32f4xx_rtc.c ****   do
 634:FWLIB/src/stm32f4xx_rtc.c ****   {
 635:FWLIB/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 636:FWLIB/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 637:FWLIB/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 638:FWLIB/src/stm32f4xx_rtc.c ****     
 639:FWLIB/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 640:FWLIB/src/stm32f4xx_rtc.c ****   {
 641:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 642:FWLIB/src/stm32f4xx_rtc.c ****   }
 643:FWLIB/src/stm32f4xx_rtc.c ****   else
 644:FWLIB/src/stm32f4xx_rtc.c ****   {
 645:FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
 646:FWLIB/src/stm32f4xx_rtc.c ****   }        
 647:FWLIB/src/stm32f4xx_rtc.c **** 
 648:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 649:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 650:FWLIB/src/stm32f4xx_rtc.c ****     
 651:FWLIB/src/stm32f4xx_rtc.c ****   return (status); 
 652:FWLIB/src/stm32f4xx_rtc.c **** }
 653:FWLIB/src/stm32f4xx_rtc.c **** 
 654:FWLIB/src/stm32f4xx_rtc.c **** /**
 655:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC reference clock detection.
 656:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the RTC reference clock.
 657:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
ARM GAS  /tmp/cc7uya1D.s 			page 13


 658:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 659:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC reference clock detection is enabled
 660:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC reference clock detection is disabled  
 661:FWLIB/src/stm32f4xx_rtc.c ****   */
 662:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
 663:FWLIB/src/stm32f4xx_rtc.c **** { 
 664:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 665:FWLIB/src/stm32f4xx_rtc.c ****   
 666:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 667:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 668:FWLIB/src/stm32f4xx_rtc.c ****   
 669:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 670:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 671:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 672:FWLIB/src/stm32f4xx_rtc.c ****     
 673:FWLIB/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 674:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 675:FWLIB/src/stm32f4xx_rtc.c ****   {
 676:FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
 677:FWLIB/src/stm32f4xx_rtc.c ****   } 
 678:FWLIB/src/stm32f4xx_rtc.c ****   else
 679:FWLIB/src/stm32f4xx_rtc.c ****   {  
 680:FWLIB/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 681:FWLIB/src/stm32f4xx_rtc.c ****     {
 682:FWLIB/src/stm32f4xx_rtc.c ****       /* Enable the RTC reference clock detection */
 683:FWLIB/src/stm32f4xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;   
 684:FWLIB/src/stm32f4xx_rtc.c ****     }
 685:FWLIB/src/stm32f4xx_rtc.c ****     else
 686:FWLIB/src/stm32f4xx_rtc.c ****     {
 687:FWLIB/src/stm32f4xx_rtc.c ****       /* Disable the RTC reference clock detection */
 688:FWLIB/src/stm32f4xx_rtc.c ****       RTC->CR &= ~RTC_CR_REFCKON;    
 689:FWLIB/src/stm32f4xx_rtc.c ****     }
 690:FWLIB/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 691:FWLIB/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 692:FWLIB/src/stm32f4xx_rtc.c ****     
 693:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 694:FWLIB/src/stm32f4xx_rtc.c ****   }
 695:FWLIB/src/stm32f4xx_rtc.c ****   
 696:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 697:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 698:FWLIB/src/stm32f4xx_rtc.c ****   
 699:FWLIB/src/stm32f4xx_rtc.c ****   return status; 
 700:FWLIB/src/stm32f4xx_rtc.c **** }
 701:FWLIB/src/stm32f4xx_rtc.c **** 
 702:FWLIB/src/stm32f4xx_rtc.c **** /**
 703:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Bypass Shadow feature.
 704:FWLIB/src/stm32f4xx_rtc.c ****   * @note   When the Bypass Shadow is enabled the calendar value are taken 
 705:FWLIB/src/stm32f4xx_rtc.c ****   *         directly from the Calendar counter.
 706:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Bypass Shadow feature.
 707:FWLIB/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
 708:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
 709:FWLIB/src/stm32f4xx_rtc.c **** */
 710:FWLIB/src/stm32f4xx_rtc.c **** void RTC_BypassShadowCmd(FunctionalState NewState)
 711:FWLIB/src/stm32f4xx_rtc.c **** {
 712:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 713:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 714:FWLIB/src/stm32f4xx_rtc.c **** 
ARM GAS  /tmp/cc7uya1D.s 			page 14


 715:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 716:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 717:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 718:FWLIB/src/stm32f4xx_rtc.c ****   
 719:FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 720:FWLIB/src/stm32f4xx_rtc.c ****   {
 721:FWLIB/src/stm32f4xx_rtc.c ****     /* Set the BYPSHAD bit */
 722:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 723:FWLIB/src/stm32f4xx_rtc.c ****   }
 724:FWLIB/src/stm32f4xx_rtc.c ****   else
 725:FWLIB/src/stm32f4xx_rtc.c ****   {
 726:FWLIB/src/stm32f4xx_rtc.c ****     /* Reset the BYPSHAD bit */
 727:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 728:FWLIB/src/stm32f4xx_rtc.c ****   }
 729:FWLIB/src/stm32f4xx_rtc.c **** 
 730:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 731:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 732:FWLIB/src/stm32f4xx_rtc.c **** }
 733:FWLIB/src/stm32f4xx_rtc.c **** 
 734:FWLIB/src/stm32f4xx_rtc.c **** /**
 735:FWLIB/src/stm32f4xx_rtc.c ****   * @}
 736:FWLIB/src/stm32f4xx_rtc.c ****   */
 737:FWLIB/src/stm32f4xx_rtc.c **** 
 738:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group2 Time and Date configuration functions
 739:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Time and Date configuration functions 
 740:FWLIB/src/stm32f4xx_rtc.c ****  *
 741:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
 742:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
 743:FWLIB/src/stm32f4xx_rtc.c ****                  ##### Time and Date configuration functions #####
 744:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
 745:FWLIB/src/stm32f4xx_rtc.c ****  
 746:FWLIB/src/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to program and read the RTC Calendar
 747:FWLIB/src/stm32f4xx_rtc.c ****       (Time and Date).
 748:FWLIB/src/stm32f4xx_rtc.c **** 
 749:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
 750:FWLIB/src/stm32f4xx_rtc.c ****   * @{
 751:FWLIB/src/stm32f4xx_rtc.c ****   */
 752:FWLIB/src/stm32f4xx_rtc.c **** 
 753:FWLIB/src/stm32f4xx_rtc.c **** /**
 754:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current time.
 755:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 756:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 757:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 758:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 759:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that contains 
 760:FWLIB/src/stm32f4xx_rtc.c ****   *                        the time configuration information for the RTC.     
 761:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 762:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Time register is configured
 763:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Time register is not configured
 764:FWLIB/src/stm32f4xx_rtc.c ****   */
 765:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 766:FWLIB/src/stm32f4xx_rtc.c **** {
 767:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 768:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 769:FWLIB/src/stm32f4xx_rtc.c ****     
 770:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 771:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
ARM GAS  /tmp/cc7uya1D.s 			page 15


 772:FWLIB/src/stm32f4xx_rtc.c ****   
 773:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 774:FWLIB/src/stm32f4xx_rtc.c ****   {
 775:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 776:FWLIB/src/stm32f4xx_rtc.c ****     {
 777:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
 778:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
 779:FWLIB/src/stm32f4xx_rtc.c ****     } 
 780:FWLIB/src/stm32f4xx_rtc.c ****     else
 781:FWLIB/src/stm32f4xx_rtc.c ****     {
 782:FWLIB/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 783:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 784:FWLIB/src/stm32f4xx_rtc.c ****     }
 785:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
 786:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
 787:FWLIB/src/stm32f4xx_rtc.c ****   }
 788:FWLIB/src/stm32f4xx_rtc.c ****   else
 789:FWLIB/src/stm32f4xx_rtc.c ****   {
 790:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 791:FWLIB/src/stm32f4xx_rtc.c ****     {
 792:FWLIB/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 793:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 794:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
 795:FWLIB/src/stm32f4xx_rtc.c ****     } 
 796:FWLIB/src/stm32f4xx_rtc.c ****     else
 797:FWLIB/src/stm32f4xx_rtc.c ****     {
 798:FWLIB/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 799:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 800:FWLIB/src/stm32f4xx_rtc.c ****     }
 801:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
 802:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
 803:FWLIB/src/stm32f4xx_rtc.c ****   }
 804:FWLIB/src/stm32f4xx_rtc.c ****   
 805:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 806:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 807:FWLIB/src/stm32f4xx_rtc.c ****   {
 808:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 809:FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 810:FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 811:FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 812:FWLIB/src/stm32f4xx_rtc.c ****   }  
 813:FWLIB/src/stm32f4xx_rtc.c ****   else
 814:FWLIB/src/stm32f4xx_rtc.c ****   {
 815:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 816:FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 817:FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 818:FWLIB/src/stm32f4xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 819:FWLIB/src/stm32f4xx_rtc.c ****   }  
 820:FWLIB/src/stm32f4xx_rtc.c **** 
 821:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 822:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 823:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 824:FWLIB/src/stm32f4xx_rtc.c **** 
 825:FWLIB/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 826:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 827:FWLIB/src/stm32f4xx_rtc.c ****   {
 828:FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
ARM GAS  /tmp/cc7uya1D.s 			page 16


 829:FWLIB/src/stm32f4xx_rtc.c ****   } 
 830:FWLIB/src/stm32f4xx_rtc.c ****   else
 831:FWLIB/src/stm32f4xx_rtc.c ****   {
 832:FWLIB/src/stm32f4xx_rtc.c ****     /* Set the RTC_TR register */
 833:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 834:FWLIB/src/stm32f4xx_rtc.c **** 
 835:FWLIB/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 836:FWLIB/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 837:FWLIB/src/stm32f4xx_rtc.c **** 
 838:FWLIB/src/stm32f4xx_rtc.c ****     /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 839:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 840:FWLIB/src/stm32f4xx_rtc.c ****     {
 841:FWLIB/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 842:FWLIB/src/stm32f4xx_rtc.c ****     {
 843:FWLIB/src/stm32f4xx_rtc.c ****       status = ERROR;
 844:FWLIB/src/stm32f4xx_rtc.c ****     }
 845:FWLIB/src/stm32f4xx_rtc.c ****     else
 846:FWLIB/src/stm32f4xx_rtc.c ****     {
 847:FWLIB/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 848:FWLIB/src/stm32f4xx_rtc.c ****     }
 849:FWLIB/src/stm32f4xx_rtc.c ****   }
 850:FWLIB/src/stm32f4xx_rtc.c ****     else
 851:FWLIB/src/stm32f4xx_rtc.c ****     {
 852:FWLIB/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 853:FWLIB/src/stm32f4xx_rtc.c ****     }
 854:FWLIB/src/stm32f4xx_rtc.c ****   }
 855:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 856:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 857:FWLIB/src/stm32f4xx_rtc.c ****     
 858:FWLIB/src/stm32f4xx_rtc.c ****   return status;
 859:FWLIB/src/stm32f4xx_rtc.c **** }
 860:FWLIB/src/stm32f4xx_rtc.c **** 
 861:FWLIB/src/stm32f4xx_rtc.c **** /**
 862:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_TimeStruct member with its default value
 863:FWLIB/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00min:00sec).
 864:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
 865:FWLIB/src/stm32f4xx_rtc.c ****   *         initialized.
 866:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
 867:FWLIB/src/stm32f4xx_rtc.c ****   */
 868:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
 869:FWLIB/src/stm32f4xx_rtc.c **** {
 870:FWLIB/src/stm32f4xx_rtc.c ****   /* Time = 00h:00min:00sec */
 871:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 872:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 873:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 874:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 875:FWLIB/src/stm32f4xx_rtc.c **** }
 876:FWLIB/src/stm32f4xx_rtc.c **** 
 877:FWLIB/src/stm32f4xx_rtc.c **** /**
 878:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current Time.
 879:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
 880:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 881:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 882:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 883:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
 884:FWLIB/src/stm32f4xx_rtc.c ****   *                        contain the returned current time configuration.     
 885:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
ARM GAS  /tmp/cc7uya1D.s 			page 17


 886:FWLIB/src/stm32f4xx_rtc.c ****   */
 887:FWLIB/src/stm32f4xx_rtc.c **** void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 888:FWLIB/src/stm32f4xx_rtc.c **** {
 889:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 890:FWLIB/src/stm32f4xx_rtc.c **** 
 891:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 892:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 893:FWLIB/src/stm32f4xx_rtc.c **** 
 894:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
 895:FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 896:FWLIB/src/stm32f4xx_rtc.c ****   
 897:FWLIB/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
 898:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 899:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 900:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 901:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 902:FWLIB/src/stm32f4xx_rtc.c **** 
 903:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 904:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 905:FWLIB/src/stm32f4xx_rtc.c ****   {
 906:FWLIB/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
 907:FWLIB/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 908:FWLIB/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 909:FWLIB/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 910:FWLIB/src/stm32f4xx_rtc.c ****   }
 911:FWLIB/src/stm32f4xx_rtc.c **** }
 912:FWLIB/src/stm32f4xx_rtc.c **** 
 913:FWLIB/src/stm32f4xx_rtc.c **** /**
 914:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC current Calendar Sub seconds value.
 915:FWLIB/src/stm32f4xx_rtc.c ****   * @note   This function freeze the Time and Date registers after reading the 
 916:FWLIB/src/stm32f4xx_rtc.c ****   *         SSR register.
 917:FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
 918:FWLIB/src/stm32f4xx_rtc.c ****   * @retval RTC current Calendar Sub seconds value.
 919:FWLIB/src/stm32f4xx_rtc.c ****   */
 920:FWLIB/src/stm32f4xx_rtc.c **** uint32_t RTC_GetSubSecond(void)
 921:FWLIB/src/stm32f4xx_rtc.c **** {
 922:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 923:FWLIB/src/stm32f4xx_rtc.c ****   
 924:FWLIB/src/stm32f4xx_rtc.c ****   /* Get sub seconds values from the correspondent registers*/
 925:FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->SSR);
 926:FWLIB/src/stm32f4xx_rtc.c ****   
 927:FWLIB/src/stm32f4xx_rtc.c ****   /* Read DR register to unfroze calendar registers */
 928:FWLIB/src/stm32f4xx_rtc.c ****   (void) (RTC->DR);
 929:FWLIB/src/stm32f4xx_rtc.c ****   
 930:FWLIB/src/stm32f4xx_rtc.c ****   return (tmpreg);
 931:FWLIB/src/stm32f4xx_rtc.c **** }
 932:FWLIB/src/stm32f4xx_rtc.c **** 
 933:FWLIB/src/stm32f4xx_rtc.c **** /**
 934:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current date.
 935:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 936:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 937:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 938:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 939:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure that contains 
 940:FWLIB/src/stm32f4xx_rtc.c ****   *                         the date configuration information for the RTC.
 941:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 942:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Date register is configured
ARM GAS  /tmp/cc7uya1D.s 			page 18


 943:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Date register is not configured
 944:FWLIB/src/stm32f4xx_rtc.c ****   */
 945:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
 946:FWLIB/src/stm32f4xx_rtc.c **** {
 947:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 948:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 949:FWLIB/src/stm32f4xx_rtc.c ****   
 950:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 951:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 952:FWLIB/src/stm32f4xx_rtc.c **** 
 953:FWLIB/src/stm32f4xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 954:FWLIB/src/stm32f4xx_rtc.c ****   {
 955:FWLIB/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 956:FWLIB/src/stm32f4xx_rtc.c ****   }  
 957:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 958:FWLIB/src/stm32f4xx_rtc.c ****   {
 959:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_DateStruct->RTC_Year));
 960:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_DateStruct->RTC_Month));
 961:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
 962:FWLIB/src/stm32f4xx_rtc.c ****   }
 963:FWLIB/src/stm32f4xx_rtc.c ****   else
 964:FWLIB/src/stm32f4xx_rtc.c ****   {
 965:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
 966:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 967:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(tmpreg));
 968:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 969:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(tmpreg));
 970:FWLIB/src/stm32f4xx_rtc.c ****   }
 971:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));
 972:FWLIB/src/stm32f4xx_rtc.c **** 
 973:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 974:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 975:FWLIB/src/stm32f4xx_rtc.c ****   {
 976:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 977:FWLIB/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 978:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 979:FWLIB/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 980:FWLIB/src/stm32f4xx_rtc.c ****   }  
 981:FWLIB/src/stm32f4xx_rtc.c ****   else
 982:FWLIB/src/stm32f4xx_rtc.c ****   {
 983:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 984:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 985:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 986:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 987:FWLIB/src/stm32f4xx_rtc.c ****   }
 988:FWLIB/src/stm32f4xx_rtc.c **** 
 989:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 990:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 991:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 992:FWLIB/src/stm32f4xx_rtc.c **** 
 993:FWLIB/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 994:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 995:FWLIB/src/stm32f4xx_rtc.c ****   {
 996:FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
 997:FWLIB/src/stm32f4xx_rtc.c ****   } 
 998:FWLIB/src/stm32f4xx_rtc.c ****   else
 999:FWLIB/src/stm32f4xx_rtc.c ****   {
ARM GAS  /tmp/cc7uya1D.s 			page 19


1000:FWLIB/src/stm32f4xx_rtc.c ****     /* Set the RTC_DR register */
1001:FWLIB/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
1002:FWLIB/src/stm32f4xx_rtc.c **** 
1003:FWLIB/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1004:FWLIB/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
1005:FWLIB/src/stm32f4xx_rtc.c **** 
1006:FWLIB/src/stm32f4xx_rtc.c ****     /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
1007:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
1008:FWLIB/src/stm32f4xx_rtc.c ****     {
1009:FWLIB/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
1010:FWLIB/src/stm32f4xx_rtc.c ****     {
1011:FWLIB/src/stm32f4xx_rtc.c ****       status = ERROR;
1012:FWLIB/src/stm32f4xx_rtc.c ****     }
1013:FWLIB/src/stm32f4xx_rtc.c ****     else
1014:FWLIB/src/stm32f4xx_rtc.c ****     {
1015:FWLIB/src/stm32f4xx_rtc.c ****       status = SUCCESS;
1016:FWLIB/src/stm32f4xx_rtc.c ****     }
1017:FWLIB/src/stm32f4xx_rtc.c ****   }
1018:FWLIB/src/stm32f4xx_rtc.c ****     else
1019:FWLIB/src/stm32f4xx_rtc.c ****     {
1020:FWLIB/src/stm32f4xx_rtc.c ****       status = SUCCESS;
1021:FWLIB/src/stm32f4xx_rtc.c ****     }
1022:FWLIB/src/stm32f4xx_rtc.c ****   }
1023:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1024:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
1025:FWLIB/src/stm32f4xx_rtc.c ****   
1026:FWLIB/src/stm32f4xx_rtc.c ****   return status;
1027:FWLIB/src/stm32f4xx_rtc.c **** }
1028:FWLIB/src/stm32f4xx_rtc.c **** 
1029:FWLIB/src/stm32f4xx_rtc.c **** /**
1030:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_DateStruct member with its default value
1031:FWLIB/src/stm32f4xx_rtc.c ****   *         (Monday, January 01 xx00).
1032:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
1033:FWLIB/src/stm32f4xx_rtc.c ****   *         initialized.
1034:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1035:FWLIB/src/stm32f4xx_rtc.c ****   */
1036:FWLIB/src/stm32f4xx_rtc.c **** void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
1037:FWLIB/src/stm32f4xx_rtc.c **** {
1038:FWLIB/src/stm32f4xx_rtc.c ****   /* Monday, January 01 xx00 */
1039:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
1040:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
1041:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
1042:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
1043:FWLIB/src/stm32f4xx_rtc.c **** }
1044:FWLIB/src/stm32f4xx_rtc.c **** 
1045:FWLIB/src/stm32f4xx_rtc.c **** /**
1046:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current date. 
1047:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1048:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1049:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1050:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1051:FWLIB/src/stm32f4xx_rtc.c ****   * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
1052:FWLIB/src/stm32f4xx_rtc.c ****   *                        contain the returned current date configuration.     
1053:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1054:FWLIB/src/stm32f4xx_rtc.c ****   */
1055:FWLIB/src/stm32f4xx_rtc.c **** void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
1056:FWLIB/src/stm32f4xx_rtc.c **** {
ARM GAS  /tmp/cc7uya1D.s 			page 20


1057:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1058:FWLIB/src/stm32f4xx_rtc.c **** 
1059:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1060:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1061:FWLIB/src/stm32f4xx_rtc.c ****   
1062:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
1063:FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
1064:FWLIB/src/stm32f4xx_rtc.c **** 
1065:FWLIB/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
1066:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
1067:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
1068:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
1069:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
1070:FWLIB/src/stm32f4xx_rtc.c **** 
1071:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1072:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1073:FWLIB/src/stm32f4xx_rtc.c ****   {
1074:FWLIB/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
1075:FWLIB/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
1076:FWLIB/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
1077:FWLIB/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
1078:FWLIB/src/stm32f4xx_rtc.c ****   }
1079:FWLIB/src/stm32f4xx_rtc.c **** }
1080:FWLIB/src/stm32f4xx_rtc.c **** 
1081:FWLIB/src/stm32f4xx_rtc.c **** /**
1082:FWLIB/src/stm32f4xx_rtc.c ****   * @}
1083:FWLIB/src/stm32f4xx_rtc.c ****   */
1084:FWLIB/src/stm32f4xx_rtc.c **** 
1085:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group3 Alarms configuration functions
1086:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Alarms (Alarm A and Alarm B) configuration functions 
1087:FWLIB/src/stm32f4xx_rtc.c ****  *
1088:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
1089:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
1090:FWLIB/src/stm32f4xx_rtc.c ****          ##### Alarms A and B configuration functions #####
1091:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
1092:FWLIB/src/stm32f4xx_rtc.c ****  
1093:FWLIB/src/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to program and read the RTC Alarms.
1094:FWLIB/src/stm32f4xx_rtc.c **** 
1095:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
1096:FWLIB/src/stm32f4xx_rtc.c ****   * @{
1097:FWLIB/src/stm32f4xx_rtc.c ****   */
1098:FWLIB/src/stm32f4xx_rtc.c **** 
1099:FWLIB/src/stm32f4xx_rtc.c **** /**
1100:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Set the specified RTC Alarm.
1101:FWLIB/src/stm32f4xx_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1102:FWLIB/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_AlarmCmd(DISABLE)).    
1103:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1104:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1105:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1106:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1107:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1108:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1109:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1110:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1111:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
1112:FWLIB/src/stm32f4xx_rtc.c ****   *                          contains the alarm configuration parameters.     
1113:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
ARM GAS  /tmp/cc7uya1D.s 			page 21


1114:FWLIB/src/stm32f4xx_rtc.c ****   */
1115:FWLIB/src/stm32f4xx_rtc.c **** void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1116:FWLIB/src/stm32f4xx_rtc.c **** {
1117:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1118:FWLIB/src/stm32f4xx_rtc.c ****   
1119:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1120:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1121:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1122:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
1123:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));
1124:FWLIB/src/stm32f4xx_rtc.c **** 
1125:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1126:FWLIB/src/stm32f4xx_rtc.c ****   {
1127:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
1128:FWLIB/src/stm32f4xx_rtc.c ****     {
1129:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1130:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1131:FWLIB/src/stm32f4xx_rtc.c ****     } 
1132:FWLIB/src/stm32f4xx_rtc.c ****     else
1133:FWLIB/src/stm32f4xx_rtc.c ****     {
1134:FWLIB/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
1135:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1136:FWLIB/src/stm32f4xx_rtc.c ****     }
1137:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes));
1138:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds));
1139:FWLIB/src/stm32f4xx_rtc.c ****     
1140:FWLIB/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1141:FWLIB/src/stm32f4xx_rtc.c ****     {
1142:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1143:FWLIB/src/stm32f4xx_rtc.c ****     }
1144:FWLIB/src/stm32f4xx_rtc.c ****     else
1145:FWLIB/src/stm32f4xx_rtc.c ****     {
1146:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1147:FWLIB/src/stm32f4xx_rtc.c ****     }
1148:FWLIB/src/stm32f4xx_rtc.c ****   }
1149:FWLIB/src/stm32f4xx_rtc.c ****   else
1150:FWLIB/src/stm32f4xx_rtc.c ****   {
1151:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
1152:FWLIB/src/stm32f4xx_rtc.c ****     {
1153:FWLIB/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
1154:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
1155:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1156:FWLIB/src/stm32f4xx_rtc.c ****     } 
1157:FWLIB/src/stm32f4xx_rtc.c ****     else
1158:FWLIB/src/stm32f4xx_rtc.c ****     {
1159:FWLIB/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
1160:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
1161:FWLIB/src/stm32f4xx_rtc.c ****     }
1162:FWLIB/src/stm32f4xx_rtc.c ****     
1163:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
1164:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
1165:FWLIB/src/stm32f4xx_rtc.c ****     
1166:FWLIB/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1167:FWLIB/src/stm32f4xx_rtc.c ****     {
1168:FWLIB/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1169:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
1170:FWLIB/src/stm32f4xx_rtc.c ****     }
ARM GAS  /tmp/cc7uya1D.s 			page 22


1171:FWLIB/src/stm32f4xx_rtc.c ****     else
1172:FWLIB/src/stm32f4xx_rtc.c ****     {
1173:FWLIB/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1174:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
1175:FWLIB/src/stm32f4xx_rtc.c ****     }    
1176:FWLIB/src/stm32f4xx_rtc.c ****   }
1177:FWLIB/src/stm32f4xx_rtc.c **** 
1178:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1179:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
1180:FWLIB/src/stm32f4xx_rtc.c ****   {
1181:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
1182:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
1183:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
1184:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
1185:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
1186:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
1187:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
1188:FWLIB/src/stm32f4xx_rtc.c ****   }  
1189:FWLIB/src/stm32f4xx_rtc.c ****   else
1190:FWLIB/src/stm32f4xx_rtc.c ****   {
1191:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
1192:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
1193:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
1194:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
1195:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
1196:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
1197:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
1198:FWLIB/src/stm32f4xx_rtc.c ****   } 
1199:FWLIB/src/stm32f4xx_rtc.c **** 
1200:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1201:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1202:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1203:FWLIB/src/stm32f4xx_rtc.c **** 
1204:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the Alarm register */
1205:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1206:FWLIB/src/stm32f4xx_rtc.c ****   {
1207:FWLIB/src/stm32f4xx_rtc.c ****     RTC->ALRMAR = (uint32_t)tmpreg;
1208:FWLIB/src/stm32f4xx_rtc.c ****   }
1209:FWLIB/src/stm32f4xx_rtc.c ****   else
1210:FWLIB/src/stm32f4xx_rtc.c ****   {
1211:FWLIB/src/stm32f4xx_rtc.c ****     RTC->ALRMBR = (uint32_t)tmpreg;
1212:FWLIB/src/stm32f4xx_rtc.c ****   }
1213:FWLIB/src/stm32f4xx_rtc.c **** 
1214:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1215:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
1216:FWLIB/src/stm32f4xx_rtc.c **** }
1217:FWLIB/src/stm32f4xx_rtc.c **** 
1218:FWLIB/src/stm32f4xx_rtc.c **** /**
1219:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_AlarmStruct member with its default value
1220:FWLIB/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00mn:00sec / Date = 1st day of the month/Mask =
1221:FWLIB/src/stm32f4xx_rtc.c ****   *         all fields are masked).
1222:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
1223:FWLIB/src/stm32f4xx_rtc.c ****   *         will be initialized.
1224:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1225:FWLIB/src/stm32f4xx_rtc.c ****   */
1226:FWLIB/src/stm32f4xx_rtc.c **** void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
1227:FWLIB/src/stm32f4xx_rtc.c **** {
ARM GAS  /tmp/cc7uya1D.s 			page 23


1228:FWLIB/src/stm32f4xx_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
1229:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
1230:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
1231:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
1232:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
1233:FWLIB/src/stm32f4xx_rtc.c **** 
1234:FWLIB/src/stm32f4xx_rtc.c ****   /* Alarm Date Settings : Date = 1st day of the month */
1235:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
1236:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
1237:FWLIB/src/stm32f4xx_rtc.c **** 
1238:FWLIB/src/stm32f4xx_rtc.c ****   /* Alarm Masks Settings : Mask =  all fields are not masked */
1239:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
1240:FWLIB/src/stm32f4xx_rtc.c **** }
1241:FWLIB/src/stm32f4xx_rtc.c **** 
1242:FWLIB/src/stm32f4xx_rtc.c **** /**
1243:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC Alarm value and masks.
1244:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1245:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1246:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1247:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1248:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1249:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1250:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1251:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1252:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
1253:FWLIB/src/stm32f4xx_rtc.c ****   *                          contains the output alarm configuration values.     
1254:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1255:FWLIB/src/stm32f4xx_rtc.c ****   */
1256:FWLIB/src/stm32f4xx_rtc.c **** void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1257:FWLIB/src/stm32f4xx_rtc.c **** {
1258:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1259:FWLIB/src/stm32f4xx_rtc.c **** 
1260:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1261:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1262:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm)); 
1263:FWLIB/src/stm32f4xx_rtc.c **** 
1264:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1265:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1266:FWLIB/src/stm32f4xx_rtc.c ****   {
1267:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMAR);
1268:FWLIB/src/stm32f4xx_rtc.c ****   }
1269:FWLIB/src/stm32f4xx_rtc.c ****   else
1270:FWLIB/src/stm32f4xx_rtc.c ****   {
1271:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMBR);
1272:FWLIB/src/stm32f4xx_rtc.c ****   }
1273:FWLIB/src/stm32f4xx_rtc.c **** 
1274:FWLIB/src/stm32f4xx_rtc.c ****   /* Fill the structure with the read parameters */
1275:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
1276:FWLIB/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
1277:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
1278:FWLIB/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
1279:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
1280:FWLIB/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_SU));
1281:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
1282:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
1283:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
1284:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
ARM GAS  /tmp/cc7uya1D.s 			page 24


1285:FWLIB/src/stm32f4xx_rtc.c **** 
1286:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1287:FWLIB/src/stm32f4xx_rtc.c ****   {
1288:FWLIB/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1289:FWLIB/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
1290:FWLIB/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1291:FWLIB/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
1292:FWLIB/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1293:FWLIB/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
1294:FWLIB/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1295:FWLIB/src/stm32f4xx_rtc.c ****   }  
1296:FWLIB/src/stm32f4xx_rtc.c **** }
1297:FWLIB/src/stm32f4xx_rtc.c **** 
1298:FWLIB/src/stm32f4xx_rtc.c **** /**
1299:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC Alarm.
1300:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1301:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
1302:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1303:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1304:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified alarm.
1305:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1306:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1307:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Alarm is enabled/disabled
1308:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Alarm is not enabled/disabled  
1309:FWLIB/src/stm32f4xx_rtc.c ****   */
1310:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
1311:FWLIB/src/stm32f4xx_rtc.c **** {
1312:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
1313:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t alarmstatus = 0x00;
1314:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1315:FWLIB/src/stm32f4xx_rtc.c ****     
1316:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1317:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
1318:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1319:FWLIB/src/stm32f4xx_rtc.c **** 
1320:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1321:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1322:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1323:FWLIB/src/stm32f4xx_rtc.c **** 
1324:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the Alarm state */
1325:FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1326:FWLIB/src/stm32f4xx_rtc.c ****   {
1327:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
1328:FWLIB/src/stm32f4xx_rtc.c **** 
1329:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
1330:FWLIB/src/stm32f4xx_rtc.c ****   }
1331:FWLIB/src/stm32f4xx_rtc.c ****   else
1332:FWLIB/src/stm32f4xx_rtc.c ****   { 
1333:FWLIB/src/stm32f4xx_rtc.c ****     /* Disable the Alarm in RTC_CR register */
1334:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_Alarm;
1335:FWLIB/src/stm32f4xx_rtc.c ****    
1336:FWLIB/src/stm32f4xx_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1337:FWLIB/src/stm32f4xx_rtc.c ****     do
1338:FWLIB/src/stm32f4xx_rtc.c ****     {
1339:FWLIB/src/stm32f4xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
1340:FWLIB/src/stm32f4xx_rtc.c ****       alarmcounter++;  
1341:FWLIB/src/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
ARM GAS  /tmp/cc7uya1D.s 			page 25


1342:FWLIB/src/stm32f4xx_rtc.c ****     
1343:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
1344:FWLIB/src/stm32f4xx_rtc.c ****     {
1345:FWLIB/src/stm32f4xx_rtc.c ****       status = ERROR;
1346:FWLIB/src/stm32f4xx_rtc.c ****     } 
1347:FWLIB/src/stm32f4xx_rtc.c ****     else
1348:FWLIB/src/stm32f4xx_rtc.c ****     {
1349:FWLIB/src/stm32f4xx_rtc.c ****       status = SUCCESS;
1350:FWLIB/src/stm32f4xx_rtc.c ****     }        
1351:FWLIB/src/stm32f4xx_rtc.c ****   } 
1352:FWLIB/src/stm32f4xx_rtc.c **** 
1353:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1354:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1355:FWLIB/src/stm32f4xx_rtc.c ****   
1356:FWLIB/src/stm32f4xx_rtc.c ****   return status;
1357:FWLIB/src/stm32f4xx_rtc.c **** }
1358:FWLIB/src/stm32f4xx_rtc.c **** 
1359:FWLIB/src/stm32f4xx_rtc.c **** /**
1360:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configure the RTC AlarmA/B Sub seconds value and mask.*
1361:FWLIB/src/stm32f4xx_rtc.c ****   * @note   This function is performed only when the Alarm is disabled. 
1362:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1363:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1364:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1365:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1366:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondValue: specifies the Sub seconds value.
1367:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be a value from 0 to 0x00007FFF.
1368:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondMask:  specifies the Sub seconds Mask.
1369:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be any combination of the following values:
1370:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_All    : All Alarm SS fields are masked.
1371:FWLIB/src/stm32f4xx_rtc.c ****   *                                          There is no comparison on sub seconds for Alarm.
1372:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_1 : SS[14:1] are don't care in Alarm comparison.
1373:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[0] is compared
1374:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_2 : SS[14:2] are don't care in Alarm comparison.
1375:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[1:0] are compared
1376:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_3 : SS[14:3] are don't care in Alarm comparison.
1377:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[2:0] are compared
1378:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_4 : SS[14:4] are don't care in Alarm comparison.
1379:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[3:0] are compared
1380:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_5 : SS[14:5] are don't care in Alarm comparison.
1381:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[4:0] are compared
1382:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_6 : SS[14:6] are don't care in Alarm comparison.
1383:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[5:0] are compared
1384:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_7 : SS[14:7] are don't care in Alarm comparison.
1385:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[6:0] are compared
1386:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_8 : SS[14:8] are don't care in Alarm comparison.
1387:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[7:0] are compared
1388:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_9 : SS[14:9] are don't care in Alarm comparison.
1389:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[8:0] are compared
1390:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_10: SS[14:10] are don't care in Alarm comparison.
1391:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[9:0] are compared
1392:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_11: SS[14:11] are don't care in Alarm comparison.
1393:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[10:0] are compared
1394:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_12: SS[14:12] are don't care in Alarm comparison.
1395:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[11:0] are compared
1396:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_13: SS[14:13] are don't care in Alarm comparison.
1397:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[12:0] are compared
1398:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14   : SS[14] is don't care in Alarm comparison.
ARM GAS  /tmp/cc7uya1D.s 			page 26


1399:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[13:0] are compared
1400:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
1401:FWLIB/src/stm32f4xx_rtc.c ****   *                                          to activate alarm
1402:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1403:FWLIB/src/stm32f4xx_rtc.c ****   */
1404:FWLIB/src/stm32f4xx_rtc.c **** void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_Al
1405:FWLIB/src/stm32f4xx_rtc.c **** {
1406:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1407:FWLIB/src/stm32f4xx_rtc.c **** 
1408:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1409:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1410:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
1411:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
1412:FWLIB/src/stm32f4xx_rtc.c ****   
1413:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1414:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1415:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1416:FWLIB/src/stm32f4xx_rtc.c ****   
1417:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the Alarm A or Alarm B Sub Second registers */
1418:FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
1419:FWLIB/src/stm32f4xx_rtc.c ****   
1420:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1421:FWLIB/src/stm32f4xx_rtc.c ****   {
1422:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Alarm A Sub Second register */
1423:FWLIB/src/stm32f4xx_rtc.c ****     RTC->ALRMASSR = tmpreg;
1424:FWLIB/src/stm32f4xx_rtc.c ****   }
1425:FWLIB/src/stm32f4xx_rtc.c ****   else
1426:FWLIB/src/stm32f4xx_rtc.c ****   {
1427:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Alarm B Sub Second register */
1428:FWLIB/src/stm32f4xx_rtc.c ****     RTC->ALRMBSSR = tmpreg;
1429:FWLIB/src/stm32f4xx_rtc.c ****   }
1430:FWLIB/src/stm32f4xx_rtc.c **** 
1431:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1432:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
1433:FWLIB/src/stm32f4xx_rtc.c **** 
1434:FWLIB/src/stm32f4xx_rtc.c **** }
1435:FWLIB/src/stm32f4xx_rtc.c **** 
1436:FWLIB/src/stm32f4xx_rtc.c **** /**
1437:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC Alarm Sub seconds value.
1438:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1439:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1440:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1441:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1442:FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
1443:FWLIB/src/stm32f4xx_rtc.c ****   * @retval RTC Alarm Sub seconds value.
1444:FWLIB/src/stm32f4xx_rtc.c ****   */
1445:FWLIB/src/stm32f4xx_rtc.c **** uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
1446:FWLIB/src/stm32f4xx_rtc.c **** {
1447:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1448:FWLIB/src/stm32f4xx_rtc.c ****   
1449:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1450:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1451:FWLIB/src/stm32f4xx_rtc.c ****   {
1452:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
1453:FWLIB/src/stm32f4xx_rtc.c ****   }
1454:FWLIB/src/stm32f4xx_rtc.c ****   else
1455:FWLIB/src/stm32f4xx_rtc.c ****   {
ARM GAS  /tmp/cc7uya1D.s 			page 27


1456:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
1457:FWLIB/src/stm32f4xx_rtc.c ****   } 
1458:FWLIB/src/stm32f4xx_rtc.c ****   
1459:FWLIB/src/stm32f4xx_rtc.c ****   return (tmpreg);
1460:FWLIB/src/stm32f4xx_rtc.c **** }
1461:FWLIB/src/stm32f4xx_rtc.c **** 
1462:FWLIB/src/stm32f4xx_rtc.c **** /**
1463:FWLIB/src/stm32f4xx_rtc.c ****   * @}
1464:FWLIB/src/stm32f4xx_rtc.c ****   */
1465:FWLIB/src/stm32f4xx_rtc.c **** 
1466:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group4 WakeUp Timer configuration functions
1467:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   WakeUp Timer configuration functions 
1468:FWLIB/src/stm32f4xx_rtc.c ****  *
1469:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
1470:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
1471:FWLIB/src/stm32f4xx_rtc.c ****                  ##### WakeUp Timer configuration functions #####
1472:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
1473:FWLIB/src/stm32f4xx_rtc.c **** 
1474:FWLIB/src/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to program and read the RTC WakeUp.
1475:FWLIB/src/stm32f4xx_rtc.c **** 
1476:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
1477:FWLIB/src/stm32f4xx_rtc.c ****   * @{
1478:FWLIB/src/stm32f4xx_rtc.c ****   */
1479:FWLIB/src/stm32f4xx_rtc.c **** 
1480:FWLIB/src/stm32f4xx_rtc.c **** /**
1481:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup clock source.
1482:FWLIB/src/stm32f4xx_rtc.c ****   * @note   The WakeUp Clock source can only be changed when the RTC WakeUp
1483:FWLIB/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).      
1484:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpClock: Wakeup Clock source.
1485:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1486:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div16: RTC Wakeup Counter Clock = RTCCLK/16
1487:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div8: RTC Wakeup Counter Clock = RTCCLK/8
1488:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div4: RTC Wakeup Counter Clock = RTCCLK/4
1489:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div2: RTC Wakeup Counter Clock = RTCCLK/2
1490:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
1491:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
1492:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1493:FWLIB/src/stm32f4xx_rtc.c ****   */
1494:FWLIB/src/stm32f4xx_rtc.c **** void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
1495:FWLIB/src/stm32f4xx_rtc.c **** {
1496:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1497:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));
1498:FWLIB/src/stm32f4xx_rtc.c **** 
1499:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1500:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1501:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1502:FWLIB/src/stm32f4xx_rtc.c **** 
1503:FWLIB/src/stm32f4xx_rtc.c ****   /* Clear the Wakeup Timer clock source bits in CR register */
1504:FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
1505:FWLIB/src/stm32f4xx_rtc.c **** 
1506:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the clock source */
1507:FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
1508:FWLIB/src/stm32f4xx_rtc.c ****   
1509:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1510:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1511:FWLIB/src/stm32f4xx_rtc.c **** }
1512:FWLIB/src/stm32f4xx_rtc.c **** 
ARM GAS  /tmp/cc7uya1D.s 			page 28


1513:FWLIB/src/stm32f4xx_rtc.c **** /**
1514:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup counter.
1515:FWLIB/src/stm32f4xx_rtc.c ****   * @note   The RTC WakeUp counter can only be written when the RTC WakeUp
1516:FWLIB/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).        
1517:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
1518:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be a value from 0x0000 to 0xFFFF. 
1519:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1520:FWLIB/src/stm32f4xx_rtc.c ****   */
1521:FWLIB/src/stm32f4xx_rtc.c **** void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
1522:FWLIB/src/stm32f4xx_rtc.c **** {
1523:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1524:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
1525:FWLIB/src/stm32f4xx_rtc.c ****   
1526:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1527:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1528:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1529:FWLIB/src/stm32f4xx_rtc.c ****   
1530:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the Wakeup Timer counter */
1531:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
1532:FWLIB/src/stm32f4xx_rtc.c ****   
1533:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1534:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1535:FWLIB/src/stm32f4xx_rtc.c **** }
1536:FWLIB/src/stm32f4xx_rtc.c **** 
1537:FWLIB/src/stm32f4xx_rtc.c **** /**
1538:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC WakeUp timer counter value.
1539:FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
1540:FWLIB/src/stm32f4xx_rtc.c ****   * @retval The RTC WakeUp Counter value.
1541:FWLIB/src/stm32f4xx_rtc.c ****   */
1542:FWLIB/src/stm32f4xx_rtc.c **** uint32_t RTC_GetWakeUpCounter(void)
1543:FWLIB/src/stm32f4xx_rtc.c **** {
1544:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the counter value */
1545:FWLIB/src/stm32f4xx_rtc.c ****   return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
1546:FWLIB/src/stm32f4xx_rtc.c **** }
1547:FWLIB/src/stm32f4xx_rtc.c **** 
1548:FWLIB/src/stm32f4xx_rtc.c **** /**
1549:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC WakeUp timer.
1550:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the WakeUp timer.
1551:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1552:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1553:FWLIB/src/stm32f4xx_rtc.c ****   */
1554:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
1555:FWLIB/src/stm32f4xx_rtc.c **** {
1556:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
1557:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
1558:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1559:FWLIB/src/stm32f4xx_rtc.c ****   
1560:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1561:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1562:FWLIB/src/stm32f4xx_rtc.c **** 
1563:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1564:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1565:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1566:FWLIB/src/stm32f4xx_rtc.c **** 
1567:FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1568:FWLIB/src/stm32f4xx_rtc.c ****   {
1569:FWLIB/src/stm32f4xx_rtc.c ****     /* Enable the Wakeup Timer */
ARM GAS  /tmp/cc7uya1D.s 			page 29


1570:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
1571:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
1572:FWLIB/src/stm32f4xx_rtc.c ****   }
1573:FWLIB/src/stm32f4xx_rtc.c ****   else
1574:FWLIB/src/stm32f4xx_rtc.c ****   {
1575:FWLIB/src/stm32f4xx_rtc.c ****     /* Disable the Wakeup Timer */
1576:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_WUTE;
1577:FWLIB/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
1578:FWLIB/src/stm32f4xx_rtc.c ****     do
1579:FWLIB/src/stm32f4xx_rtc.c ****     {
1580:FWLIB/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
1581:FWLIB/src/stm32f4xx_rtc.c ****       wutcounter++;  
1582:FWLIB/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
1583:FWLIB/src/stm32f4xx_rtc.c ****     
1584:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
1585:FWLIB/src/stm32f4xx_rtc.c ****     {
1586:FWLIB/src/stm32f4xx_rtc.c ****       status = ERROR;
1587:FWLIB/src/stm32f4xx_rtc.c ****     }
1588:FWLIB/src/stm32f4xx_rtc.c ****     else
1589:FWLIB/src/stm32f4xx_rtc.c ****     {
1590:FWLIB/src/stm32f4xx_rtc.c ****       status = SUCCESS;
1591:FWLIB/src/stm32f4xx_rtc.c ****     }    
1592:FWLIB/src/stm32f4xx_rtc.c ****   }
1593:FWLIB/src/stm32f4xx_rtc.c **** 
1594:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1595:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1596:FWLIB/src/stm32f4xx_rtc.c ****   
1597:FWLIB/src/stm32f4xx_rtc.c ****   return status;
1598:FWLIB/src/stm32f4xx_rtc.c **** }
1599:FWLIB/src/stm32f4xx_rtc.c **** 
1600:FWLIB/src/stm32f4xx_rtc.c **** /**
1601:FWLIB/src/stm32f4xx_rtc.c ****   * @}
1602:FWLIB/src/stm32f4xx_rtc.c ****   */
1603:FWLIB/src/stm32f4xx_rtc.c **** 
1604:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group5 Daylight Saving configuration functions
1605:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Daylight Saving configuration functions 
1606:FWLIB/src/stm32f4xx_rtc.c ****  *
1607:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
1608:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
1609:FWLIB/src/stm32f4xx_rtc.c ****               ##### Daylight Saving configuration functions #####
1610:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
1611:FWLIB/src/stm32f4xx_rtc.c **** 
1612:FWLIB/src/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to configure the RTC DayLight Saving.
1613:FWLIB/src/stm32f4xx_rtc.c **** 
1614:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
1615:FWLIB/src/stm32f4xx_rtc.c ****   * @{
1616:FWLIB/src/stm32f4xx_rtc.c ****   */
1617:FWLIB/src/stm32f4xx_rtc.c **** 
1618:FWLIB/src/stm32f4xx_rtc.c **** /**
1619:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Adds or substract one hour from the current time.
1620:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_DayLightSaveOperation: the value of hour adjustment. 
1621:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1622:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_SUB1H: Substract one hour (winter time)
1623:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_ADD1H: Add one hour (summer time)
1624:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_StoreOperation: Specifies the value to be written in the BCK bit 
1625:FWLIB/src/stm32f4xx_rtc.c ****   *                            in CR register to store the operation.
1626:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
ARM GAS  /tmp/cc7uya1D.s 			page 30


1627:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
1628:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Set: BCK Bit Set
1629:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1630:FWLIB/src/stm32f4xx_rtc.c ****   */
1631:FWLIB/src/stm32f4xx_rtc.c **** void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
1632:FWLIB/src/stm32f4xx_rtc.c **** {
1633:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1634:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
1635:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));
1636:FWLIB/src/stm32f4xx_rtc.c **** 
1637:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1638:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1639:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1640:FWLIB/src/stm32f4xx_rtc.c **** 
1641:FWLIB/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1642:FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_BCK);
1643:FWLIB/src/stm32f4xx_rtc.c **** 
1644:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1645:FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
1646:FWLIB/src/stm32f4xx_rtc.c **** 
1647:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1648:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1649:FWLIB/src/stm32f4xx_rtc.c **** }
1650:FWLIB/src/stm32f4xx_rtc.c **** 
1651:FWLIB/src/stm32f4xx_rtc.c **** /**
1652:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC Day Light Saving stored operation.
1653:FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
1654:FWLIB/src/stm32f4xx_rtc.c ****   * @retval RTC Day Light Saving stored operation.
1655:FWLIB/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Reset
1656:FWLIB/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Set       
1657:FWLIB/src/stm32f4xx_rtc.c ****   */
1658:FWLIB/src/stm32f4xx_rtc.c **** uint32_t RTC_GetStoreOperation(void)
1659:FWLIB/src/stm32f4xx_rtc.c **** {
1660:FWLIB/src/stm32f4xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
1661:FWLIB/src/stm32f4xx_rtc.c **** }
1662:FWLIB/src/stm32f4xx_rtc.c **** 
1663:FWLIB/src/stm32f4xx_rtc.c **** /**
1664:FWLIB/src/stm32f4xx_rtc.c ****   * @}
1665:FWLIB/src/stm32f4xx_rtc.c ****   */
1666:FWLIB/src/stm32f4xx_rtc.c **** 
1667:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group6 Output pin Configuration function
1668:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Output pin Configuration function 
1669:FWLIB/src/stm32f4xx_rtc.c ****  *
1670:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
1671:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
1672:FWLIB/src/stm32f4xx_rtc.c ****                  ##### Output pin Configuration function #####
1673:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
1674:FWLIB/src/stm32f4xx_rtc.c **** 
1675:FWLIB/src/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to configure the RTC Output source.
1676:FWLIB/src/stm32f4xx_rtc.c **** 
1677:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
1678:FWLIB/src/stm32f4xx_rtc.c ****   * @{
1679:FWLIB/src/stm32f4xx_rtc.c ****   */
1680:FWLIB/src/stm32f4xx_rtc.c **** 
1681:FWLIB/src/stm32f4xx_rtc.c **** /**
1682:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC output source (AFO_ALARM).
1683:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Output: Specifies which signal will be routed to the RTC output. 
ARM GAS  /tmp/cc7uya1D.s 			page 31


1684:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1685:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_Disable: No output selected
1686:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmA: signal of AlarmA mapped to output
1687:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmB: signal of AlarmB mapped to output
1688:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_WakeUp: signal of WakeUp mapped to output
1689:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputPolarity: Specifies the polarity of the output signal. 
1690:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1691:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_High: The output pin is high when the 
1692:FWLIB/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1693:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
1694:FWLIB/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1695:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1696:FWLIB/src/stm32f4xx_rtc.c ****   */
1697:FWLIB/src/stm32f4xx_rtc.c **** void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
1698:FWLIB/src/stm32f4xx_rtc.c **** {
1699:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1700:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT(RTC_Output));
1701:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));
1702:FWLIB/src/stm32f4xx_rtc.c **** 
1703:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1704:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1705:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1706:FWLIB/src/stm32f4xx_rtc.c **** 
1707:FWLIB/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1708:FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
1709:FWLIB/src/stm32f4xx_rtc.c **** 
1710:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the output selection and polarity */
1711:FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
1712:FWLIB/src/stm32f4xx_rtc.c **** 
1713:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1714:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1715:FWLIB/src/stm32f4xx_rtc.c **** }
1716:FWLIB/src/stm32f4xx_rtc.c **** 
1717:FWLIB/src/stm32f4xx_rtc.c **** /**
1718:FWLIB/src/stm32f4xx_rtc.c ****   * @}
1719:FWLIB/src/stm32f4xx_rtc.c ****   */
1720:FWLIB/src/stm32f4xx_rtc.c **** 
1721:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group7 Digital Calibration configuration functions
1722:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Coarse Calibration configuration functions 
1723:FWLIB/src/stm32f4xx_rtc.c ****  *
1724:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
1725:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
1726:FWLIB/src/stm32f4xx_rtc.c ****               ##### Digital Calibration configuration functions #####
1727:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
1728:FWLIB/src/stm32f4xx_rtc.c **** 
1729:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
1730:FWLIB/src/stm32f4xx_rtc.c ****   * @{
1731:FWLIB/src/stm32f4xx_rtc.c ****   */
1732:FWLIB/src/stm32f4xx_rtc.c **** 
1733:FWLIB/src/stm32f4xx_rtc.c **** /**
1734:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the Coarse calibration parameters.
1735:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibSign: specifies the sign of the coarse calibration value.
1736:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
1737:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Positive: The value sign is positive 
1738:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Negative: The value sign is negative
1739:FWLIB/src/stm32f4xx_rtc.c ****   * @param  Value: value of coarse calibration expressed in ppm (coded on 5 bits).
1740:FWLIB/src/stm32f4xx_rtc.c ****   *    
ARM GAS  /tmp/cc7uya1D.s 			page 32


1741:FWLIB/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 63 when using negative
1742:FWLIB/src/stm32f4xx_rtc.c ****   *         sign with a 2-ppm step.
1743:FWLIB/src/stm32f4xx_rtc.c ****   *           
1744:FWLIB/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 126 when using positive
1745:FWLIB/src/stm32f4xx_rtc.c ****   *         sign with a 4-ppm step.
1746:FWLIB/src/stm32f4xx_rtc.c ****   *           
1747:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1748:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are initialized
1749:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not initialized     
1750:FWLIB/src/stm32f4xx_rtc.c ****   */
1751:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
1752:FWLIB/src/stm32f4xx_rtc.c **** {
1753:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1754:FWLIB/src/stm32f4xx_rtc.c ****    
1755:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1756:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
1757:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_VALUE(Value)); 
1758:FWLIB/src/stm32f4xx_rtc.c **** 
1759:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1760:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1761:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1762:FWLIB/src/stm32f4xx_rtc.c **** 
1763:FWLIB/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1764:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
1765:FWLIB/src/stm32f4xx_rtc.c ****   {
1766:FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
1767:FWLIB/src/stm32f4xx_rtc.c ****   } 
1768:FWLIB/src/stm32f4xx_rtc.c ****   else
1769:FWLIB/src/stm32f4xx_rtc.c ****   {
1770:FWLIB/src/stm32f4xx_rtc.c ****     /* Set the coarse calibration value */
1771:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
1772:FWLIB/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1773:FWLIB/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
1774:FWLIB/src/stm32f4xx_rtc.c ****     
1775:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;
1776:FWLIB/src/stm32f4xx_rtc.c ****   } 
1777:FWLIB/src/stm32f4xx_rtc.c **** 
1778:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1779:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1780:FWLIB/src/stm32f4xx_rtc.c ****   
1781:FWLIB/src/stm32f4xx_rtc.c ****   return status;
1782:FWLIB/src/stm32f4xx_rtc.c **** }
1783:FWLIB/src/stm32f4xx_rtc.c **** 
1784:FWLIB/src/stm32f4xx_rtc.c **** /**
1785:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the Coarse calibration process.
1786:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Coarse calibration.
1787:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1788:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1789:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are enabled/disabled
1790:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not enabled/disabled    
1791:FWLIB/src/stm32f4xx_rtc.c ****   */
1792:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
1793:FWLIB/src/stm32f4xx_rtc.c **** {
1794:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1795:FWLIB/src/stm32f4xx_rtc.c ****   
1796:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1797:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
ARM GAS  /tmp/cc7uya1D.s 			page 33


1798:FWLIB/src/stm32f4xx_rtc.c **** 
1799:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1800:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1801:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1802:FWLIB/src/stm32f4xx_rtc.c ****   
1803:FWLIB/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1804:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
1805:FWLIB/src/stm32f4xx_rtc.c ****   {
1806:FWLIB/src/stm32f4xx_rtc.c ****     status =  ERROR;
1807:FWLIB/src/stm32f4xx_rtc.c ****   }
1808:FWLIB/src/stm32f4xx_rtc.c ****   else
1809:FWLIB/src/stm32f4xx_rtc.c ****   {
1810:FWLIB/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
1811:FWLIB/src/stm32f4xx_rtc.c ****     {
1812:FWLIB/src/stm32f4xx_rtc.c ****       /* Enable the Coarse Calibration */
1813:FWLIB/src/stm32f4xx_rtc.c ****       RTC->CR |= (uint32_t)RTC_CR_DCE;
1814:FWLIB/src/stm32f4xx_rtc.c ****     }
1815:FWLIB/src/stm32f4xx_rtc.c ****     else
1816:FWLIB/src/stm32f4xx_rtc.c ****     { 
1817:FWLIB/src/stm32f4xx_rtc.c ****       /* Disable the Coarse Calibration */
1818:FWLIB/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)~RTC_CR_DCE;
1819:FWLIB/src/stm32f4xx_rtc.c ****     }
1820:FWLIB/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1821:FWLIB/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
1822:FWLIB/src/stm32f4xx_rtc.c ****     
1823:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;
1824:FWLIB/src/stm32f4xx_rtc.c ****   } 
1825:FWLIB/src/stm32f4xx_rtc.c ****   
1826:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1827:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1828:FWLIB/src/stm32f4xx_rtc.c ****   
1829:FWLIB/src/stm32f4xx_rtc.c ****   return status;
1830:FWLIB/src/stm32f4xx_rtc.c **** }
1831:FWLIB/src/stm32f4xx_rtc.c **** 
1832:FWLIB/src/stm32f4xx_rtc.c **** /**
1833:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC clock to be output through the relative pin.
1834:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the digital calibration Output.
1835:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1836:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1837:FWLIB/src/stm32f4xx_rtc.c ****   */
1838:FWLIB/src/stm32f4xx_rtc.c **** void RTC_CalibOutputCmd(FunctionalState NewState)
1839:FWLIB/src/stm32f4xx_rtc.c **** {
1840:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1841:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1842:FWLIB/src/stm32f4xx_rtc.c ****   
1843:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1844:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1845:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1846:FWLIB/src/stm32f4xx_rtc.c ****   
1847:FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1848:FWLIB/src/stm32f4xx_rtc.c ****   {
1849:FWLIB/src/stm32f4xx_rtc.c ****     /* Enable the RTC clock output */
1850:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
1851:FWLIB/src/stm32f4xx_rtc.c ****   }
1852:FWLIB/src/stm32f4xx_rtc.c ****   else
1853:FWLIB/src/stm32f4xx_rtc.c ****   { 
1854:FWLIB/src/stm32f4xx_rtc.c ****     /* Disable the RTC clock output */
ARM GAS  /tmp/cc7uya1D.s 			page 34


1855:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_COE;
1856:FWLIB/src/stm32f4xx_rtc.c ****   }
1857:FWLIB/src/stm32f4xx_rtc.c ****   
1858:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1859:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1860:FWLIB/src/stm32f4xx_rtc.c **** }
1861:FWLIB/src/stm32f4xx_rtc.c **** 
1862:FWLIB/src/stm32f4xx_rtc.c **** /**
1863:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configure the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
1864:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibOutput : Select the Calibration output Selection .
1865:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1866:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
1867:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
1868:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1869:FWLIB/src/stm32f4xx_rtc.c **** */
1870:FWLIB/src/stm32f4xx_rtc.c **** void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
1871:FWLIB/src/stm32f4xx_rtc.c **** {
1872:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1873:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));
1874:FWLIB/src/stm32f4xx_rtc.c **** 
1875:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1876:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1877:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1878:FWLIB/src/stm32f4xx_rtc.c ****   
1879:FWLIB/src/stm32f4xx_rtc.c ****   /*clear flags before configuration */
1880:FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
1881:FWLIB/src/stm32f4xx_rtc.c **** 
1882:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1883:FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_CalibOutput;
1884:FWLIB/src/stm32f4xx_rtc.c **** 
1885:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1886:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
1887:FWLIB/src/stm32f4xx_rtc.c **** }
1888:FWLIB/src/stm32f4xx_rtc.c **** 
1889:FWLIB/src/stm32f4xx_rtc.c **** /**
1890:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the Smooth Calibration Settings.
1891:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPeriod : Select the Smooth Calibration Period.
1892:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be can be one of the following values:
1893:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_32sec : The smooth calibration period is 32s.
1894:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_16sec : The smooth calibration period is 16s.
1895:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_8sec  : The smooth calibration period is 8s.
1896:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPlusPulses : Select to Set or reset the CALP bit.
1897:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1898:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Set  : Add one RTCCLK pulse every 2**11 pulses.
1899:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Reset: No RTCCLK pulses are added.
1900:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_SmouthCalibMinusPulsesValue: Select the value of CALM[8:0] bits.
1901:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one any value from 0 to 0x000001FF.
1902:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1903:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Calib registers are configured
1904:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Calib registers are not configured
1905:FWLIB/src/stm32f4xx_rtc.c **** */
1906:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
1907:FWLIB/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmoothCalibPlusPulses,
1908:FWLIB/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmouthCalibMinusPulsesValue)
1909:FWLIB/src/stm32f4xx_rtc.c **** {
1910:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1911:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t recalpfcount = 0;
ARM GAS  /tmp/cc7uya1D.s 			page 35


1912:FWLIB/src/stm32f4xx_rtc.c **** 
1913:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1914:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
1915:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
1916:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));
1917:FWLIB/src/stm32f4xx_rtc.c **** 
1918:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1919:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1920:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1921:FWLIB/src/stm32f4xx_rtc.c ****   
1922:FWLIB/src/stm32f4xx_rtc.c ****   /* check if a calibration is pending*/
1923:FWLIB/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
1924:FWLIB/src/stm32f4xx_rtc.c ****   {
1925:FWLIB/src/stm32f4xx_rtc.c ****     /* wait until the Calibration is completed*/
1926:FWLIB/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
1927:FWLIB/src/stm32f4xx_rtc.c ****     {
1928:FWLIB/src/stm32f4xx_rtc.c ****       recalpfcount++;
1929:FWLIB/src/stm32f4xx_rtc.c ****     }
1930:FWLIB/src/stm32f4xx_rtc.c ****   }
1931:FWLIB/src/stm32f4xx_rtc.c **** 
1932:FWLIB/src/stm32f4xx_rtc.c ****   /* check if the calibration pending is completed or if there is no calibration operation at all*/
1933:FWLIB/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
1934:FWLIB/src/stm32f4xx_rtc.c ****   {
1935:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Smooth calibration settings */
1936:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | 
1937:FWLIB/src/stm32f4xx_rtc.c **** 
1938:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;
1939:FWLIB/src/stm32f4xx_rtc.c ****   }
1940:FWLIB/src/stm32f4xx_rtc.c ****   else
1941:FWLIB/src/stm32f4xx_rtc.c ****   {
1942:FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
1943:FWLIB/src/stm32f4xx_rtc.c ****   }
1944:FWLIB/src/stm32f4xx_rtc.c **** 
1945:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1946:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
1947:FWLIB/src/stm32f4xx_rtc.c ****   
1948:FWLIB/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
1949:FWLIB/src/stm32f4xx_rtc.c **** }
1950:FWLIB/src/stm32f4xx_rtc.c **** 
1951:FWLIB/src/stm32f4xx_rtc.c **** /**
1952:FWLIB/src/stm32f4xx_rtc.c ****   * @}
1953:FWLIB/src/stm32f4xx_rtc.c ****   */
1954:FWLIB/src/stm32f4xx_rtc.c **** 
1955:FWLIB/src/stm32f4xx_rtc.c **** 
1956:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group8 TimeStamp configuration functions
1957:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   TimeStamp configuration functions 
1958:FWLIB/src/stm32f4xx_rtc.c ****  *
1959:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
1960:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
1961:FWLIB/src/stm32f4xx_rtc.c ****                  ##### TimeStamp configuration functions #####
1962:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
1963:FWLIB/src/stm32f4xx_rtc.c **** 
1964:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
1965:FWLIB/src/stm32f4xx_rtc.c ****   * @{
1966:FWLIB/src/stm32f4xx_rtc.c ****   */
1967:FWLIB/src/stm32f4xx_rtc.c **** 
1968:FWLIB/src/stm32f4xx_rtc.c **** /**
ARM GAS  /tmp/cc7uya1D.s 			page 36


1969:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC TimeStamp functionality with the 
1970:FWLIB/src/stm32f4xx_rtc.c ****   *         specified time stamp pin stimulating edge.
1971:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampEdge: Specifies the pin edge on which the TimeStamp is 
1972:FWLIB/src/stm32f4xx_rtc.c ****   *         activated.
1973:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1974:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Rising: the Time stamp event occurs on the rising 
1975:FWLIB/src/stm32f4xx_rtc.c ****   *                                    edge of the related pin.
1976:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Falling: the Time stamp event occurs on the 
1977:FWLIB/src/stm32f4xx_rtc.c ****   *                                     falling edge of the related pin.
1978:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the TimeStamp.
1979:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1980:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1981:FWLIB/src/stm32f4xx_rtc.c ****   */
1982:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
1983:FWLIB/src/stm32f4xx_rtc.c **** {
1984:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1985:FWLIB/src/stm32f4xx_rtc.c **** 
1986:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1987:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
1988:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1989:FWLIB/src/stm32f4xx_rtc.c **** 
1990:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the RTC_CR register and clear the bits to be configured */
1991:FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
1992:FWLIB/src/stm32f4xx_rtc.c **** 
1993:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the new configuration */
1994:FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1995:FWLIB/src/stm32f4xx_rtc.c ****   {
1996:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
1997:FWLIB/src/stm32f4xx_rtc.c ****   }
1998:FWLIB/src/stm32f4xx_rtc.c ****   else
1999:FWLIB/src/stm32f4xx_rtc.c ****   {
2000:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge);
2001:FWLIB/src/stm32f4xx_rtc.c ****   }
2002:FWLIB/src/stm32f4xx_rtc.c **** 
2003:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2004:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
2005:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
2006:FWLIB/src/stm32f4xx_rtc.c **** 
2007:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the Time Stamp TSEDGE and Enable bits */
2008:FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR = (uint32_t)tmpreg;
2009:FWLIB/src/stm32f4xx_rtc.c **** 
2010:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2011:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
2012:FWLIB/src/stm32f4xx_rtc.c **** }
2013:FWLIB/src/stm32f4xx_rtc.c **** 
2014:FWLIB/src/stm32f4xx_rtc.c **** /**
2015:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC TimeStamp value and masks.
2016:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
2017:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2018:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
2019:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
2020:FWLIB/src/stm32f4xx_rtc.c ****   * @param RTC_StampTimeStruct: pointer to a RTC_TimeTypeDef structure that will 
2021:FWLIB/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp time values. 
2022:FWLIB/src/stm32f4xx_rtc.c ****   * @param RTC_StampDateStruct: pointer to a RTC_DateTypeDef structure that will 
2023:FWLIB/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp date values.     
2024:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2025:FWLIB/src/stm32f4xx_rtc.c ****   */
ARM GAS  /tmp/cc7uya1D.s 			page 37


2026:FWLIB/src/stm32f4xx_rtc.c **** void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
2027:FWLIB/src/stm32f4xx_rtc.c ****                                       RTC_DateTypeDef* RTC_StampDateStruct)
2028:FWLIB/src/stm32f4xx_rtc.c **** {
2029:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
2030:FWLIB/src/stm32f4xx_rtc.c **** 
2031:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2032:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
2033:FWLIB/src/stm32f4xx_rtc.c **** 
2034:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the TimeStamp time and date registers values */
2035:FWLIB/src/stm32f4xx_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
2036:FWLIB/src/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
2037:FWLIB/src/stm32f4xx_rtc.c **** 
2038:FWLIB/src/stm32f4xx_rtc.c ****   /* Fill the Time structure fields with the read parameters */
2039:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
2040:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
2041:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
2042:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
2043:FWLIB/src/stm32f4xx_rtc.c **** 
2044:FWLIB/src/stm32f4xx_rtc.c ****   /* Fill the Date structure fields with the read parameters */
2045:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
2046:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
2047:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
2048:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
2049:FWLIB/src/stm32f4xx_rtc.c **** 
2050:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
2051:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
2052:FWLIB/src/stm32f4xx_rtc.c ****   {
2053:FWLIB/src/stm32f4xx_rtc.c ****     /* Convert the Time structure parameters to Binary format */
2054:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
2055:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
2056:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
2057:FWLIB/src/stm32f4xx_rtc.c **** 
2058:FWLIB/src/stm32f4xx_rtc.c ****     /* Convert the Date structure parameters to Binary format */
2059:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
2060:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
2061:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
2062:FWLIB/src/stm32f4xx_rtc.c ****   }
2063:FWLIB/src/stm32f4xx_rtc.c **** }
2064:FWLIB/src/stm32f4xx_rtc.c **** 
2065:FWLIB/src/stm32f4xx_rtc.c **** /**
2066:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC timestamp Sub seconds value.
2067:FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
2068:FWLIB/src/stm32f4xx_rtc.c ****   * @retval RTC current timestamp Sub seconds value.
2069:FWLIB/src/stm32f4xx_rtc.c ****   */
2070:FWLIB/src/stm32f4xx_rtc.c **** uint32_t RTC_GetTimeStampSubSecond(void)
2071:FWLIB/src/stm32f4xx_rtc.c **** {
2072:FWLIB/src/stm32f4xx_rtc.c ****   /* Get timestamp sub seconds values from the correspondent registers */
2073:FWLIB/src/stm32f4xx_rtc.c ****   return (uint32_t)(RTC->TSSSR);
2074:FWLIB/src/stm32f4xx_rtc.c **** }
2075:FWLIB/src/stm32f4xx_rtc.c **** 
2076:FWLIB/src/stm32f4xx_rtc.c **** /**
2077:FWLIB/src/stm32f4xx_rtc.c ****   * @}
2078:FWLIB/src/stm32f4xx_rtc.c ****   */
2079:FWLIB/src/stm32f4xx_rtc.c **** 
2080:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group9 Tampers configuration functions
2081:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Tampers configuration functions 
2082:FWLIB/src/stm32f4xx_rtc.c ****  *
ARM GAS  /tmp/cc7uya1D.s 			page 38


2083:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
2084:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
2085:FWLIB/src/stm32f4xx_rtc.c ****                  ##### Tampers configuration functions #####
2086:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
2087:FWLIB/src/stm32f4xx_rtc.c **** 
2088:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
2089:FWLIB/src/stm32f4xx_rtc.c ****   * @{
2090:FWLIB/src/stm32f4xx_rtc.c ****   */
2091:FWLIB/src/stm32f4xx_rtc.c **** 
2092:FWLIB/src/stm32f4xx_rtc.c **** /**
2093:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the select Tamper pin edge.
2094:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2095:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1 or RTC_Tamper 2
2096:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperTrigger: Specifies the trigger on the tamper pin that 
2097:FWLIB/src/stm32f4xx_rtc.c ****   *         stimulates tamper event. 
2098:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2099:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_RisingEdge: Rising Edge of the tamper pin causes tamper event.
2100:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_FallingEdge: Falling Edge of the tamper pin causes tamper event.
2101:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
2102:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
2103:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2104:FWLIB/src/stm32f4xx_rtc.c ****   */
2105:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
2106:FWLIB/src/stm32f4xx_rtc.c **** {
2107:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2108:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
2109:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
2110:FWLIB/src/stm32f4xx_rtc.c ****  
2111:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
2112:FWLIB/src/stm32f4xx_rtc.c ****   {  
2113:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2114:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
2115:FWLIB/src/stm32f4xx_rtc.c ****   }
2116:FWLIB/src/stm32f4xx_rtc.c ****   else
2117:FWLIB/src/stm32f4xx_rtc.c ****   { 
2118:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2119:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
2120:FWLIB/src/stm32f4xx_rtc.c ****   }  
2121:FWLIB/src/stm32f4xx_rtc.c **** }
2122:FWLIB/src/stm32f4xx_rtc.c **** 
2123:FWLIB/src/stm32f4xx_rtc.c **** /**
2124:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Tamper detection.
2125:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2126:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1 or RTC_Tamper_2
2127:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the tamper pin.
2128:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.                   
2129:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2130:FWLIB/src/stm32f4xx_rtc.c ****   */
2131:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
2132:FWLIB/src/stm32f4xx_rtc.c **** {
2133:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2134:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper));  
2135:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2136:FWLIB/src/stm32f4xx_rtc.c ****   
2137:FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
2138:FWLIB/src/stm32f4xx_rtc.c ****   {
2139:FWLIB/src/stm32f4xx_rtc.c ****     /* Enable the selected Tamper pin */
ARM GAS  /tmp/cc7uya1D.s 			page 39


2140:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
2141:FWLIB/src/stm32f4xx_rtc.c ****   }
2142:FWLIB/src/stm32f4xx_rtc.c ****   else
2143:FWLIB/src/stm32f4xx_rtc.c ****   {
2144:FWLIB/src/stm32f4xx_rtc.c ****     /* Disable the selected Tamper pin */
2145:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
2146:FWLIB/src/stm32f4xx_rtc.c ****   }  
2147:FWLIB/src/stm32f4xx_rtc.c **** }
2148:FWLIB/src/stm32f4xx_rtc.c **** 
2149:FWLIB/src/stm32f4xx_rtc.c **** /**
2150:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Filter.
2151:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperFilter: Specifies the tampers filter.
2152:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2153:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_Disable: Tamper filter is disabled.
2154:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_2Sample: Tamper is activated after 2 consecutive 
2155:FWLIB/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2156:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_4Sample: Tamper is activated after 4 consecutive 
2157:FWLIB/src/stm32f4xx_rtc.c ****   *                                    samples at the active level
2158:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
2159:FWLIB/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2160:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2161:FWLIB/src/stm32f4xx_rtc.c ****   */
2162:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
2163:FWLIB/src/stm32f4xx_rtc.c **** {
2164:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2165:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
2166:FWLIB/src/stm32f4xx_rtc.c ****    
2167:FWLIB/src/stm32f4xx_rtc.c ****   /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
2168:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
2169:FWLIB/src/stm32f4xx_rtc.c **** 
2170:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2171:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
2172:FWLIB/src/stm32f4xx_rtc.c **** }
2173:FWLIB/src/stm32f4xx_rtc.c **** 
2174:FWLIB/src/stm32f4xx_rtc.c **** /**
2175:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Sampling Frequency.
2176:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperSamplingFreq: Specifies the tampers Sampling Frequency.
2177:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2178:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div32768: Each of the tamper inputs are sampled
2179:FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 32768
2180:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div16384: Each of the tamper inputs are sampled
2181:FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 16384
2182:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div8192: Each of the tamper inputs are sampled
2183:FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 8192
2184:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div4096: Each of the tamper inputs are sampled
2185:FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 4096
2186:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div2048: Each of the tamper inputs are sampled
2187:FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 2048
2188:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div1024: Each of the tamper inputs are sampled
2189:FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 1024
2190:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div512: Each of the tamper inputs are sampled
2191:FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 512  
2192:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
2193:FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 256  
2194:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2195:FWLIB/src/stm32f4xx_rtc.c ****   */
2196:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
ARM GAS  /tmp/cc7uya1D.s 			page 40


2197:FWLIB/src/stm32f4xx_rtc.c **** {
2198:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2199:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
2200:FWLIB/src/stm32f4xx_rtc.c ****  
2201:FWLIB/src/stm32f4xx_rtc.c ****   /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
2202:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
2203:FWLIB/src/stm32f4xx_rtc.c **** 
2204:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2205:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
2206:FWLIB/src/stm32f4xx_rtc.c **** }
2207:FWLIB/src/stm32f4xx_rtc.c **** 
2208:FWLIB/src/stm32f4xx_rtc.c **** /**
2209:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Pins input Precharge Duration.
2210:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPrechargeDuration: Specifies the Tampers Pins input
2211:FWLIB/src/stm32f4xx_rtc.c ****   *         Precharge Duration.
2212:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2213:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_1RTCCLK: Tamper pins are precharged before sampling during
2214:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_2RTCCLK: Tamper pins are precharged before sampling during
2215:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are precharged before sampling during
2216:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are precharged before sampling during
2217:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2218:FWLIB/src/stm32f4xx_rtc.c ****   */
2219:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
2220:FWLIB/src/stm32f4xx_rtc.c **** {
2221:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2222:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
2223:FWLIB/src/stm32f4xx_rtc.c ****    
2224:FWLIB/src/stm32f4xx_rtc.c ****   /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
2225:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
2226:FWLIB/src/stm32f4xx_rtc.c **** 
2227:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2228:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
2229:FWLIB/src/stm32f4xx_rtc.c **** }
2230:FWLIB/src/stm32f4xx_rtc.c **** 
2231:FWLIB/src/stm32f4xx_rtc.c **** /**
2232:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the TimeStamp on Tamper Detection Event.
2233:FWLIB/src/stm32f4xx_rtc.c ****   * @note   The timestamp is valid even the TSE bit in tamper control register 
2234:FWLIB/src/stm32f4xx_rtc.c ****   *         is reset.   
2235:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the timestamp on tamper event.
2236:FWLIB/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
2237:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2238:FWLIB/src/stm32f4xx_rtc.c ****   */
2239:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
2240:FWLIB/src/stm32f4xx_rtc.c **** {
2241:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2242:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2243:FWLIB/src/stm32f4xx_rtc.c ****    
2244:FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
2245:FWLIB/src/stm32f4xx_rtc.c ****   {
2246:FWLIB/src/stm32f4xx_rtc.c ****     /* Save timestamp on tamper detection event */
2247:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
2248:FWLIB/src/stm32f4xx_rtc.c ****   }
2249:FWLIB/src/stm32f4xx_rtc.c ****   else
2250:FWLIB/src/stm32f4xx_rtc.c ****   {
2251:FWLIB/src/stm32f4xx_rtc.c ****     /* Tamper detection does not cause a timestamp to be saved */
2252:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
2253:FWLIB/src/stm32f4xx_rtc.c ****   }
ARM GAS  /tmp/cc7uya1D.s 			page 41


2254:FWLIB/src/stm32f4xx_rtc.c **** }
2255:FWLIB/src/stm32f4xx_rtc.c **** 
2256:FWLIB/src/stm32f4xx_rtc.c **** /**
2257:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Precharge of Tamper pin.
2258:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of tamper pull up.
2259:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be: ENABLE or DISABLE.                   
2260:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2261:FWLIB/src/stm32f4xx_rtc.c ****   */
2262:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TamperPullUpCmd(FunctionalState NewState)
2263:FWLIB/src/stm32f4xx_rtc.c **** {
2264:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2265:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2266:FWLIB/src/stm32f4xx_rtc.c ****   
2267:FWLIB/src/stm32f4xx_rtc.c ****  if (NewState != DISABLE)
2268:FWLIB/src/stm32f4xx_rtc.c ****   {
2269:FWLIB/src/stm32f4xx_rtc.c ****     /* Enable precharge of the selected Tamper pin */
2270:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
2271:FWLIB/src/stm32f4xx_rtc.c ****   }
2272:FWLIB/src/stm32f4xx_rtc.c ****   else
2273:FWLIB/src/stm32f4xx_rtc.c ****   {
2274:FWLIB/src/stm32f4xx_rtc.c ****     /* Disable precharge of the selected Tamper pin */
2275:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
2276:FWLIB/src/stm32f4xx_rtc.c ****   } 
2277:FWLIB/src/stm32f4xx_rtc.c **** }
2278:FWLIB/src/stm32f4xx_rtc.c **** 
2279:FWLIB/src/stm32f4xx_rtc.c **** /**
2280:FWLIB/src/stm32f4xx_rtc.c ****   * @}
2281:FWLIB/src/stm32f4xx_rtc.c ****   */
2282:FWLIB/src/stm32f4xx_rtc.c **** 
2283:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group10 Backup Data Registers configuration functions
2284:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Backup Data Registers configuration functions  
2285:FWLIB/src/stm32f4xx_rtc.c ****  *
2286:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
2287:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
2288:FWLIB/src/stm32f4xx_rtc.c ****              ##### Backup Data Registers configuration functions ##### 
2289:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
2290:FWLIB/src/stm32f4xx_rtc.c **** 
2291:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
2292:FWLIB/src/stm32f4xx_rtc.c ****   * @{
2293:FWLIB/src/stm32f4xx_rtc.c ****   */
2294:FWLIB/src/stm32f4xx_rtc.c **** 
2295:FWLIB/src/stm32f4xx_rtc.c **** /**
2296:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Writes a data in a specified RTC Backup data register.
2297:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2298:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2299:FWLIB/src/stm32f4xx_rtc.c ****   *                          specify the register.
2300:FWLIB/src/stm32f4xx_rtc.c ****   * @param  Data: Data to be written in the specified RTC Backup data register.                    
2301:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2302:FWLIB/src/stm32f4xx_rtc.c ****   */
2303:FWLIB/src/stm32f4xx_rtc.c **** void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
2304:FWLIB/src/stm32f4xx_rtc.c **** {
2305:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
2306:FWLIB/src/stm32f4xx_rtc.c ****   
2307:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2308:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2309:FWLIB/src/stm32f4xx_rtc.c **** 
2310:FWLIB/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
ARM GAS  /tmp/cc7uya1D.s 			page 42


2311:FWLIB/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
2312:FWLIB/src/stm32f4xx_rtc.c **** 
2313:FWLIB/src/stm32f4xx_rtc.c ****   /* Write the specified register */
2314:FWLIB/src/stm32f4xx_rtc.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
2315:FWLIB/src/stm32f4xx_rtc.c **** }
2316:FWLIB/src/stm32f4xx_rtc.c **** 
2317:FWLIB/src/stm32f4xx_rtc.c **** /**
2318:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Reads data from the specified RTC Backup data Register.
2319:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2320:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2321:FWLIB/src/stm32f4xx_rtc.c ****   *                          specify the register.                   
2322:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2323:FWLIB/src/stm32f4xx_rtc.c ****   */
2324:FWLIB/src/stm32f4xx_rtc.c **** uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
2325:FWLIB/src/stm32f4xx_rtc.c **** {
2326:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
2327:FWLIB/src/stm32f4xx_rtc.c ****   
2328:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2329:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2330:FWLIB/src/stm32f4xx_rtc.c **** 
2331:FWLIB/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
2332:FWLIB/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
2333:FWLIB/src/stm32f4xx_rtc.c ****   
2334:FWLIB/src/stm32f4xx_rtc.c ****   /* Read the specified register */
2335:FWLIB/src/stm32f4xx_rtc.c ****   return (*(__IO uint32_t *)tmp);
2336:FWLIB/src/stm32f4xx_rtc.c **** }
2337:FWLIB/src/stm32f4xx_rtc.c **** 
2338:FWLIB/src/stm32f4xx_rtc.c **** /**
2339:FWLIB/src/stm32f4xx_rtc.c ****   * @}
2340:FWLIB/src/stm32f4xx_rtc.c ****   */
2341:FWLIB/src/stm32f4xx_rtc.c **** 
2342:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group11 RTC Tamper and TimeStamp Pins Selection and Output Type Config configurat
2343:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   RTC Tamper and TimeStamp Pins Selection and Output Type Config 
2344:FWLIB/src/stm32f4xx_rtc.c ****  *           configuration functions  
2345:FWLIB/src/stm32f4xx_rtc.c ****  *
2346:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
2347:FWLIB/src/stm32f4xx_rtc.c ****  ==================================================================================================
2348:FWLIB/src/stm32f4xx_rtc.c ****  ##### RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration functions #####
2349:FWLIB/src/stm32f4xx_rtc.c ****  ==================================================================================================
2350:FWLIB/src/stm32f4xx_rtc.c **** 
2351:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
2352:FWLIB/src/stm32f4xx_rtc.c ****   * @{
2353:FWLIB/src/stm32f4xx_rtc.c ****   */
2354:FWLIB/src/stm32f4xx_rtc.c **** 
2355:FWLIB/src/stm32f4xx_rtc.c **** /**
2356:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC Tamper Pin.
2357:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPin: specifies the RTC Tamper Pin.
2358:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2359:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_Default: RTC_AF1 is used as RTC Tamper Pin.
2360:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_Pos1: RTC_AF2 is selected as RTC Tamper Pin.    
2361:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2362:FWLIB/src/stm32f4xx_rtc.c ****   */
2363:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
2364:FWLIB/src/stm32f4xx_rtc.c **** {
2365:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2366:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
2367:FWLIB/src/stm32f4xx_rtc.c ****   
ARM GAS  /tmp/cc7uya1D.s 			page 43


2368:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
2369:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
2370:FWLIB/src/stm32f4xx_rtc.c **** }
2371:FWLIB/src/stm32f4xx_rtc.c **** 
2372:FWLIB/src/stm32f4xx_rtc.c **** /**
2373:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC TimeStamp Pin.
2374:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampPin: specifies the RTC TimeStamp Pin.
2375:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2376:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
2377:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
2378:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2379:FWLIB/src/stm32f4xx_rtc.c ****   */
2380:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
2381:FWLIB/src/stm32f4xx_rtc.c **** {
2382:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2383:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
2384:FWLIB/src/stm32f4xx_rtc.c ****   
2385:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
2386:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
2387:FWLIB/src/stm32f4xx_rtc.c **** }
2388:FWLIB/src/stm32f4xx_rtc.c **** 
2389:FWLIB/src/stm32f4xx_rtc.c **** /**
2390:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Output Pin mode. 
2391:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputType: specifies the RTC Output (PC13) pin mode.
2392:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2393:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_OpenDrain: RTC Output (PC13) is configured in 
2394:FWLIB/src/stm32f4xx_rtc.c ****   *                                    Open Drain mode.
2395:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
2396:FWLIB/src/stm32f4xx_rtc.c ****   *                                    Push Pull mode.    
2397:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2398:FWLIB/src/stm32f4xx_rtc.c ****   */
2399:FWLIB/src/stm32f4xx_rtc.c **** void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
2400:FWLIB/src/stm32f4xx_rtc.c **** {
2401:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2402:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
2403:FWLIB/src/stm32f4xx_rtc.c ****   
2404:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
2405:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
2406:FWLIB/src/stm32f4xx_rtc.c **** }
2407:FWLIB/src/stm32f4xx_rtc.c **** 
2408:FWLIB/src/stm32f4xx_rtc.c **** /**
2409:FWLIB/src/stm32f4xx_rtc.c ****   * @}
2410:FWLIB/src/stm32f4xx_rtc.c ****   */
2411:FWLIB/src/stm32f4xx_rtc.c **** 
2412:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group12 Shift control synchronisation functions
2413:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Shift control synchronisation functions 
2414:FWLIB/src/stm32f4xx_rtc.c ****  *
2415:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
2416:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
2417:FWLIB/src/stm32f4xx_rtc.c ****               ##### Shift control synchronisation functions #####
2418:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
2419:FWLIB/src/stm32f4xx_rtc.c **** 
2420:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
2421:FWLIB/src/stm32f4xx_rtc.c ****   * @{
2422:FWLIB/src/stm32f4xx_rtc.c ****   */
2423:FWLIB/src/stm32f4xx_rtc.c **** 
2424:FWLIB/src/stm32f4xx_rtc.c **** /**
ARM GAS  /tmp/cc7uya1D.s 			page 44


2425:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the Synchronization Shift Control Settings.
2426:FWLIB/src/stm32f4xx_rtc.c ****   * @note   When REFCKON is set, firmware must not write to Shift control register 
2427:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftAdd1S : Select to add or not 1 second to the time Calendar.
2428:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values :
2429:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Set  : Add one second to the clock calendar. 
2430:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Reset: No effect.
2431:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftSubFS: Select the number of Second Fractions to Substitute.
2432:FWLIB/src/stm32f4xx_rtc.c ****   *         This parameter can be one any value from 0 to 0x7FFF.
2433:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
2434:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Shift registers are configured
2435:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Shift registers are not configured
2436:FWLIB/src/stm32f4xx_rtc.c **** */
2437:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
2438:FWLIB/src/stm32f4xx_rtc.c **** {
2439:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
2440:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t shpfcount = 0;
2441:FWLIB/src/stm32f4xx_rtc.c **** 
2442:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2443:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
2444:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));
2445:FWLIB/src/stm32f4xx_rtc.c **** 
2446:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2447:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
2448:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
2449:FWLIB/src/stm32f4xx_rtc.c ****   
2450:FWLIB/src/stm32f4xx_rtc.c ****   /* Check if a Shift is pending*/
2451:FWLIB/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
2452:FWLIB/src/stm32f4xx_rtc.c ****   {
2453:FWLIB/src/stm32f4xx_rtc.c ****     /* Wait until the shift is completed*/
2454:FWLIB/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
2455:FWLIB/src/stm32f4xx_rtc.c ****     {
2456:FWLIB/src/stm32f4xx_rtc.c ****       shpfcount++;
2457:FWLIB/src/stm32f4xx_rtc.c ****     }
2458:FWLIB/src/stm32f4xx_rtc.c ****   }
2459:FWLIB/src/stm32f4xx_rtc.c **** 
2460:FWLIB/src/stm32f4xx_rtc.c ****   /* Check if the Shift pending is completed or if there is no Shift operation at all*/
2461:FWLIB/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
2462:FWLIB/src/stm32f4xx_rtc.c ****   {
2463:FWLIB/src/stm32f4xx_rtc.c ****     /* check if the reference clock detection is disabled */
2464:FWLIB/src/stm32f4xx_rtc.c ****     if((RTC->CR & RTC_CR_REFCKON) == RESET)
2465:FWLIB/src/stm32f4xx_rtc.c ****     {
2466:FWLIB/src/stm32f4xx_rtc.c ****       /* Configure the Shift settings */
2467:FWLIB/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
2468:FWLIB/src/stm32f4xx_rtc.c ****     
2469:FWLIB/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
2470:FWLIB/src/stm32f4xx_rtc.c ****       {
2471:FWLIB/src/stm32f4xx_rtc.c ****         status = ERROR;
2472:FWLIB/src/stm32f4xx_rtc.c ****       }
2473:FWLIB/src/stm32f4xx_rtc.c ****       else
2474:FWLIB/src/stm32f4xx_rtc.c ****       {
2475:FWLIB/src/stm32f4xx_rtc.c ****         status = SUCCESS;
2476:FWLIB/src/stm32f4xx_rtc.c ****       }
2477:FWLIB/src/stm32f4xx_rtc.c ****     }
2478:FWLIB/src/stm32f4xx_rtc.c ****     else
2479:FWLIB/src/stm32f4xx_rtc.c ****     {
2480:FWLIB/src/stm32f4xx_rtc.c ****       status = ERROR;
2481:FWLIB/src/stm32f4xx_rtc.c ****     }
ARM GAS  /tmp/cc7uya1D.s 			page 45


2482:FWLIB/src/stm32f4xx_rtc.c ****   }
2483:FWLIB/src/stm32f4xx_rtc.c ****   else
2484:FWLIB/src/stm32f4xx_rtc.c ****   {
2485:FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
2486:FWLIB/src/stm32f4xx_rtc.c ****   }
2487:FWLIB/src/stm32f4xx_rtc.c **** 
2488:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2489:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
2490:FWLIB/src/stm32f4xx_rtc.c ****   
2491:FWLIB/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
2492:FWLIB/src/stm32f4xx_rtc.c **** }
2493:FWLIB/src/stm32f4xx_rtc.c **** 
2494:FWLIB/src/stm32f4xx_rtc.c **** /**
2495:FWLIB/src/stm32f4xx_rtc.c ****   * @}
2496:FWLIB/src/stm32f4xx_rtc.c ****   */
2497:FWLIB/src/stm32f4xx_rtc.c **** 
2498:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group13 Interrupts and flags management functions
2499:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Interrupts and flags management functions  
2500:FWLIB/src/stm32f4xx_rtc.c ****  *
2501:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
2502:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
2503:FWLIB/src/stm32f4xx_rtc.c ****               ##### Interrupts and flags management functions #####
2504:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
2505:FWLIB/src/stm32f4xx_rtc.c ****  [..] All RTC interrupts are connected to the EXTI controller.
2506:FWLIB/src/stm32f4xx_rtc.c ****  
2507:FWLIB/src/stm32f4xx_rtc.c ****    (+) To enable the RTC Alarm interrupt, the following sequence is required:
2508:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the EXTI Line 17 in interrupt mode and select 
2509:FWLIB/src/stm32f4xx_rtc.c ****             the rising edge sensitivity using the EXTI_Init() function.
2510:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the RTC_Alarm IRQ channel in the NVIC using the 
2511:FWLIB/src/stm32f4xx_rtc.c ****             NVIC_Init() function.
2512:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure the RTC to generate RTC alarms (Alarm A and/or Alarm B) using
2513:FWLIB/src/stm32f4xx_rtc.c ****             the RTC_SetAlarm() and RTC_AlarmCmd() functions.
2514:FWLIB/src/stm32f4xx_rtc.c **** 
2515:FWLIB/src/stm32f4xx_rtc.c ****    (+) To enable the RTC Wakeup interrupt, the following sequence is required:
2516:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the EXTI Line 22 in interrupt mode and select the
2517:FWLIB/src/stm32f4xx_rtc.c ****             rising edge sensitivity using the EXTI_Init() function.
2518:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the RTC_WKUP IRQ channel in the NVIC using the 
2519:FWLIB/src/stm32f4xx_rtc.c ****             NVIC_Init() function.
2520:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure the RTC to generate the RTC wakeup timer event using the 
2521:FWLIB/src/stm32f4xx_rtc.c ****             RTC_WakeUpClockConfig(), RTC_SetWakeUpCounter() and RTC_WakeUpCmd() 
2522:FWLIB/src/stm32f4xx_rtc.c ****             functions.
2523:FWLIB/src/stm32f4xx_rtc.c **** 
2524:FWLIB/src/stm32f4xx_rtc.c ****    (+) To enable the RTC Tamper interrupt, the following sequence is required:
2525:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the EXTI Line 21 in interrupt mode and select 
2526:FWLIB/src/stm32f4xx_rtc.c ****             the rising edge sensitivity using the EXTI_Init() function.
2527:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the
2528:FWLIB/src/stm32f4xx_rtc.c ****             NVIC_Init() function.
2529:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure the RTC to detect the RTC tamper event using the 
2530:FWLIB/src/stm32f4xx_rtc.c ****             RTC_TamperTriggerConfig() and RTC_TamperCmd() functions.
2531:FWLIB/src/stm32f4xx_rtc.c **** 
2532:FWLIB/src/stm32f4xx_rtc.c ****    (+) To enable the RTC TimeStamp interrupt, the following sequence is required:
2533:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the EXTI Line 21 in interrupt mode and select the
2534:FWLIB/src/stm32f4xx_rtc.c ****             rising edge sensitivity using the EXTI_Init() function.
2535:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the 
2536:FWLIB/src/stm32f4xx_rtc.c ****             NVIC_Init() function.
2537:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure the RTC to detect the RTC time stamp event using the 
2538:FWLIB/src/stm32f4xx_rtc.c ****             RTC_TimeStampCmd() functions.
ARM GAS  /tmp/cc7uya1D.s 			page 46


2539:FWLIB/src/stm32f4xx_rtc.c **** 
2540:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
2541:FWLIB/src/stm32f4xx_rtc.c ****   * @{
2542:FWLIB/src/stm32f4xx_rtc.c ****   */
2543:FWLIB/src/stm32f4xx_rtc.c **** 
2544:FWLIB/src/stm32f4xx_rtc.c **** /**
2545:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC interrupts.
2546:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt sources to be enabled or disabled. 
2547:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2548:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS:  Time Stamp interrupt mask
2549:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT:  WakeUp Timer interrupt mask
2550:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB:  Alarm B interrupt mask
2551:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA:  Alarm A interrupt mask
2552:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP: Tamper event interrupt mask
2553:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified RTC interrupts.
2554:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
2555:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2556:FWLIB/src/stm32f4xx_rtc.c ****   */
2557:FWLIB/src/stm32f4xx_rtc.c **** void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
2558:FWLIB/src/stm32f4xx_rtc.c **** {
2559:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2560:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CONFIG_IT(RTC_IT));
2561:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2562:FWLIB/src/stm32f4xx_rtc.c **** 
2563:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2564:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
2565:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
2566:FWLIB/src/stm32f4xx_rtc.c **** 
2567:FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
2568:FWLIB/src/stm32f4xx_rtc.c ****   {
2569:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2570:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
2571:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2572:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
2573:FWLIB/src/stm32f4xx_rtc.c ****   }
2574:FWLIB/src/stm32f4xx_rtc.c ****   else
2575:FWLIB/src/stm32f4xx_rtc.c ****   {
2576:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2577:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
2578:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2579:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
2580:FWLIB/src/stm32f4xx_rtc.c ****   }
2581:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2582:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
2583:FWLIB/src/stm32f4xx_rtc.c **** }
2584:FWLIB/src/stm32f4xx_rtc.c **** 
2585:FWLIB/src/stm32f4xx_rtc.c **** /**
2586:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC flag is set or not.
2587:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the flag to check.
2588:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2589:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RECALPF: RECALPF event flag.
2590:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2591:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP2F: Tamper 2 event flag
2592:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp OverFlow flag
2593:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2594:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2595:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
ARM GAS  /tmp/cc7uya1D.s 			page 47


2596:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2597:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITF: Initialization mode flag
2598:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2599:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITS: Registers Configured flag
2600:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_SHPF: Shift operation pending flag.
2601:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTWF: WakeUp Timer Write flag
2602:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
2603:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
2604:FWLIB/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_FLAG (SET or RESET).
2605:FWLIB/src/stm32f4xx_rtc.c ****   */
2606:FWLIB/src/stm32f4xx_rtc.c **** FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
2607:FWLIB/src/stm32f4xx_rtc.c **** {
2608:FWLIB/src/stm32f4xx_rtc.c ****   FlagStatus bitstatus = RESET;
2609:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
2610:FWLIB/src/stm32f4xx_rtc.c ****   
2611:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2612:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
2613:FWLIB/src/stm32f4xx_rtc.c ****   
2614:FWLIB/src/stm32f4xx_rtc.c ****   /* Get all the flags */
2615:FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
2616:FWLIB/src/stm32f4xx_rtc.c ****   
2617:FWLIB/src/stm32f4xx_rtc.c ****   /* Return the status of the flag */
2618:FWLIB/src/stm32f4xx_rtc.c ****   if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
2619:FWLIB/src/stm32f4xx_rtc.c ****   {
2620:FWLIB/src/stm32f4xx_rtc.c ****     bitstatus = SET;
2621:FWLIB/src/stm32f4xx_rtc.c ****   }
2622:FWLIB/src/stm32f4xx_rtc.c ****   else
2623:FWLIB/src/stm32f4xx_rtc.c ****   {
2624:FWLIB/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
2625:FWLIB/src/stm32f4xx_rtc.c ****   }
2626:FWLIB/src/stm32f4xx_rtc.c ****   return bitstatus;
2627:FWLIB/src/stm32f4xx_rtc.c **** }
2628:FWLIB/src/stm32f4xx_rtc.c **** 
2629:FWLIB/src/stm32f4xx_rtc.c **** /**
2630:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's pending flags.
2631:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the RTC flag to clear.
2632:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2633:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2634:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP2F: Tamper 2 event flag
2635:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp Overflow flag 
2636:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2637:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2638:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2639:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2640:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2641:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2642:FWLIB/src/stm32f4xx_rtc.c ****   */
2643:FWLIB/src/stm32f4xx_rtc.c **** void RTC_ClearFlag(uint32_t RTC_FLAG)
2644:FWLIB/src/stm32f4xx_rtc.c **** {
2645:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2646:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));
2647:FWLIB/src/stm32f4xx_rtc.c **** 
2648:FWLIB/src/stm32f4xx_rtc.c ****   /* Clear the Flags in the RTC_ISR register */
2649:FWLIB/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR &
2650:FWLIB/src/stm32f4xx_rtc.c **** }
2651:FWLIB/src/stm32f4xx_rtc.c **** 
2652:FWLIB/src/stm32f4xx_rtc.c **** /**
ARM GAS  /tmp/cc7uya1D.s 			page 48


2653:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC interrupt has occurred or not.
2654:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt source to check.
2655:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2656:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2657:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2658:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2659:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2660:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt
2661:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP2: Tamper 2 event interrupt
2662:FWLIB/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_IT (SET or RESET).
2663:FWLIB/src/stm32f4xx_rtc.c ****   */
2664:FWLIB/src/stm32f4xx_rtc.c **** ITStatus RTC_GetITStatus(uint32_t RTC_IT)
2665:FWLIB/src/stm32f4xx_rtc.c **** {
2666:FWLIB/src/stm32f4xx_rtc.c ****   ITStatus bitstatus = RESET;
2667:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0, enablestatus = 0;
2668:FWLIB/src/stm32f4xx_rtc.c ****  
2669:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2670:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_IT(RTC_IT));
2671:FWLIB/src/stm32f4xx_rtc.c ****   
2672:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the TAMPER Interrupt enable bit and pending bit */
2673:FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
2674:FWLIB/src/stm32f4xx_rtc.c ****  
2675:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the Interrupt enable Status */
2676:FWLIB/src/stm32f4xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)) | (tmpreg & (RTC_IT >> 1
2677:FWLIB/src/stm32f4xx_rtc.c ****   
2678:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the Interrupt pending bit */
2679:FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
2680:FWLIB/src/stm32f4xx_rtc.c ****   
2681:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the status of the Interrupt */
2682:FWLIB/src/stm32f4xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
2683:FWLIB/src/stm32f4xx_rtc.c ****   {
2684:FWLIB/src/stm32f4xx_rtc.c ****     bitstatus = SET;
2685:FWLIB/src/stm32f4xx_rtc.c ****   }
2686:FWLIB/src/stm32f4xx_rtc.c ****   else
2687:FWLIB/src/stm32f4xx_rtc.c ****   {
2688:FWLIB/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
2689:FWLIB/src/stm32f4xx_rtc.c ****   }
2690:FWLIB/src/stm32f4xx_rtc.c ****   return bitstatus;
2691:FWLIB/src/stm32f4xx_rtc.c **** }
2692:FWLIB/src/stm32f4xx_rtc.c **** 
2693:FWLIB/src/stm32f4xx_rtc.c **** /**
2694:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's interrupt pending bits.
2695:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt pending bit to clear.
2696:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2697:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2698:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2699:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2700:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2701:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt
2702:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP2: Tamper 2 event interrupt 
2703:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2704:FWLIB/src/stm32f4xx_rtc.c ****   */
2705:FWLIB/src/stm32f4xx_rtc.c **** void RTC_ClearITPendingBit(uint32_t RTC_IT)
2706:FWLIB/src/stm32f4xx_rtc.c **** {
2707:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
2708:FWLIB/src/stm32f4xx_rtc.c **** 
2709:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
ARM GAS  /tmp/cc7uya1D.s 			page 49


2710:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_IT(RTC_IT));
2711:FWLIB/src/stm32f4xx_rtc.c **** 
2712:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the RTC_ISR Interrupt pending bits mask */
2713:FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC_IT >> 4);
2714:FWLIB/src/stm32f4xx_rtc.c **** 
2715:FWLIB/src/stm32f4xx_rtc.c ****   /* Clear the interrupt pending bits in the RTC_ISR register */
2716:FWLIB/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
2717:FWLIB/src/stm32f4xx_rtc.c **** }
2718:FWLIB/src/stm32f4xx_rtc.c **** 
2719:FWLIB/src/stm32f4xx_rtc.c **** /**
2720:FWLIB/src/stm32f4xx_rtc.c ****   * @}
2721:FWLIB/src/stm32f4xx_rtc.c ****   */
2722:FWLIB/src/stm32f4xx_rtc.c **** 
2723:FWLIB/src/stm32f4xx_rtc.c **** /**
2724:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
2725:FWLIB/src/stm32f4xx_rtc.c ****   * @param  Value: Byte to be converted.
2726:FWLIB/src/stm32f4xx_rtc.c ****   * @retval Converted byte
2727:FWLIB/src/stm32f4xx_rtc.c ****   */
2728:FWLIB/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value)
2729:FWLIB/src/stm32f4xx_rtc.c **** {
  29              		.loc 1 2729 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
2730:FWLIB/src/stm32f4xx_rtc.c ****   uint8_t bcdhigh = 0;
  34              		.loc 1 2730 3 view .LVU1
2731:FWLIB/src/stm32f4xx_rtc.c ****   
2732:FWLIB/src/stm32f4xx_rtc.c ****   while (Value >= 10)
  35              		.loc 1 2732 3 view .LVU2
2730:FWLIB/src/stm32f4xx_rtc.c ****   uint8_t bcdhigh = 0;
  36              		.loc 1 2730 11 is_stmt 0 view .LVU3
  37 0000 0023     		movs	r3, #0
  38              	.LVL1:
  39              	.L2:
  40              		.loc 1 2732 9 view .LVU4
  41 0002 0928     		cmp	r0, #9
  42 0004 04D9     		bls	.L4
2733:FWLIB/src/stm32f4xx_rtc.c ****   {
2734:FWLIB/src/stm32f4xx_rtc.c ****     bcdhigh++;
  43              		.loc 1 2734 5 is_stmt 1 view .LVU5
  44              		.loc 1 2734 12 is_stmt 0 view .LVU6
  45 0006 0133     		adds	r3, r3, #1
  46              	.LVL2:
  47              		.loc 1 2734 12 view .LVU7
  48 0008 DBB2     		uxtb	r3, r3
  49              	.LVL3:
2735:FWLIB/src/stm32f4xx_rtc.c ****     Value -= 10;
  50              		.loc 1 2735 5 is_stmt 1 view .LVU8
  51              		.loc 1 2735 11 is_stmt 0 view .LVU9
  52 000a 0A38     		subs	r0, r0, #10
  53              	.LVL4:
  54              		.loc 1 2735 11 view .LVU10
  55 000c C0B2     		uxtb	r0, r0
  56              	.LVL5:
  57              		.loc 1 2735 11 view .LVU11
  58 000e F8E7     		b	.L2
ARM GAS  /tmp/cc7uya1D.s 			page 50


  59              	.L4:
2736:FWLIB/src/stm32f4xx_rtc.c ****   }
2737:FWLIB/src/stm32f4xx_rtc.c ****   
2738:FWLIB/src/stm32f4xx_rtc.c ****   return  ((uint8_t)(bcdhigh << 4) | Value);
  60              		.loc 1 2738 3 is_stmt 1 view .LVU12
  61              		.loc 1 2738 12 is_stmt 0 view .LVU13
  62 0010 1B01     		lsls	r3, r3, #4
  63              	.LVL6:
  64              		.loc 1 2738 12 view .LVU14
  65 0012 DBB2     		uxtb	r3, r3
2739:FWLIB/src/stm32f4xx_rtc.c **** }
  66              		.loc 1 2739 1 view .LVU15
  67 0014 1843     		orrs	r0, r0, r3
  68              	.LVL7:
  69              		.loc 1 2739 1 view .LVU16
  70 0016 7047     		bx	lr
  71              		.cfi_endproc
  72              	.LFE178:
  74              		.section	.text.RTC_Bcd2ToByte,"ax",%progbits
  75              		.align	1
  76              		.syntax unified
  77              		.thumb
  78              		.thumb_func
  79              		.fpu fpv4-sp-d16
  81              	RTC_Bcd2ToByte:
  82              	.LVL8:
  83              	.LFB179:
2740:FWLIB/src/stm32f4xx_rtc.c **** 
2741:FWLIB/src/stm32f4xx_rtc.c **** /**
2742:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Convert from 2 digit BCD to Binary.
2743:FWLIB/src/stm32f4xx_rtc.c ****   * @param  Value: BCD value to be converted.
2744:FWLIB/src/stm32f4xx_rtc.c ****   * @retval Converted word
2745:FWLIB/src/stm32f4xx_rtc.c ****   */
2746:FWLIB/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value)
2747:FWLIB/src/stm32f4xx_rtc.c **** {
  84              		.loc 1 2747 1 is_stmt 1 view -0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88              		@ link register save eliminated.
2748:FWLIB/src/stm32f4xx_rtc.c ****   uint8_t tmp = 0;
  89              		.loc 1 2748 3 view .LVU18
2749:FWLIB/src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
  90              		.loc 1 2749 3 view .LVU19
  91              		.loc 1 2749 43 is_stmt 0 view .LVU20
  92 0000 0309     		lsrs	r3, r0, #4
  93              		.loc 1 2749 7 view .LVU21
  94 0002 03EB8303 		add	r3, r3, r3, lsl #2
  95 0006 5A00     		lsls	r2, r3, #1
  96              	.LVL9:
2750:FWLIB/src/stm32f4xx_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
  97              		.loc 1 2750 3 is_stmt 1 view .LVU22
  98              		.loc 1 2750 24 is_stmt 0 view .LVU23
  99 0008 00F00F00 		and	r0, r0, #15
 100              	.LVL10:
 101              		.loc 1 2750 15 view .LVU24
 102 000c 1044     		add	r0, r0, r2
ARM GAS  /tmp/cc7uya1D.s 			page 51


2751:FWLIB/src/stm32f4xx_rtc.c **** }
 103              		.loc 1 2751 1 view .LVU25
 104 000e C0B2     		uxtb	r0, r0
 105 0010 7047     		bx	lr
 106              		.cfi_endproc
 107              	.LFE179:
 109              		.section	.text.RTC_StructInit,"ax",%progbits
 110              		.align	1
 111              		.global	RTC_StructInit
 112              		.syntax unified
 113              		.thumb
 114              		.thumb_func
 115              		.fpu fpv4-sp-d16
 117              	RTC_StructInit:
 118              	.LVL11:
 119              	.LFB125:
 504:FWLIB/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_HourFormat member */
 120              		.loc 1 504 1 is_stmt 1 view -0
 121              		.cfi_startproc
 122              		@ args = 0, pretend = 0, frame = 0
 123              		@ frame_needed = 0, uses_anonymous_args = 0
 124              		@ link register save eliminated.
 506:FWLIB/src/stm32f4xx_rtc.c ****     
 125              		.loc 1 506 3 view .LVU27
 506:FWLIB/src/stm32f4xx_rtc.c ****     
 126              		.loc 1 506 34 is_stmt 0 view .LVU28
 127 0000 0023     		movs	r3, #0
 128 0002 0360     		str	r3, [r0]
 509:FWLIB/src/stm32f4xx_rtc.c **** 
 129              		.loc 1 509 3 is_stmt 1 view .LVU29
 509:FWLIB/src/stm32f4xx_rtc.c **** 
 130              		.loc 1 509 36 is_stmt 0 view .LVU30
 131 0004 7F23     		movs	r3, #127
 132 0006 4360     		str	r3, [r0, #4]
 512:FWLIB/src/stm32f4xx_rtc.c **** }
 133              		.loc 1 512 3 is_stmt 1 view .LVU31
 512:FWLIB/src/stm32f4xx_rtc.c **** }
 134              		.loc 1 512 35 is_stmt 0 view .LVU32
 135 0008 FF23     		movs	r3, #255
 136 000a 8360     		str	r3, [r0, #8]
 513:FWLIB/src/stm32f4xx_rtc.c **** 
 137              		.loc 1 513 1 view .LVU33
 138 000c 7047     		bx	lr
 139              		.cfi_endproc
 140              	.LFE125:
 142              		.section	.text.RTC_WriteProtectionCmd,"ax",%progbits
 143              		.align	1
 144              		.global	RTC_WriteProtectionCmd
 145              		.syntax unified
 146              		.thumb
 147              		.thumb_func
 148              		.fpu fpv4-sp-d16
 150              	RTC_WriteProtectionCmd:
 151              	.LVL12:
 152              	.LFB126:
 526:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 153              		.loc 1 526 1 is_stmt 1 view -0
ARM GAS  /tmp/cc7uya1D.s 			page 52


 154              		.cfi_startproc
 155              		@ args = 0, pretend = 0, frame = 0
 156              		@ frame_needed = 0, uses_anonymous_args = 0
 157              		@ link register save eliminated.
 528:FWLIB/src/stm32f4xx_rtc.c ****     
 158              		.loc 1 528 3 view .LVU35
 530:FWLIB/src/stm32f4xx_rtc.c ****   {
 159              		.loc 1 530 3 view .LVU36
 530:FWLIB/src/stm32f4xx_rtc.c ****   {
 160              		.loc 1 530 6 is_stmt 0 view .LVU37
 161 0000 18B1     		cbz	r0, .L8
 533:FWLIB/src/stm32f4xx_rtc.c ****   }
 162              		.loc 1 533 5 is_stmt 1 view .LVU38
 533:FWLIB/src/stm32f4xx_rtc.c ****   }
 163              		.loc 1 533 14 is_stmt 0 view .LVU39
 164 0002 054B     		ldr	r3, .L10
 165 0004 FF22     		movs	r2, #255
 166 0006 5A62     		str	r2, [r3, #36]
 167 0008 7047     		bx	lr
 168              	.L8:
 538:FWLIB/src/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 169              		.loc 1 538 5 is_stmt 1 view .LVU40
 538:FWLIB/src/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 170              		.loc 1 538 14 is_stmt 0 view .LVU41
 171 000a 034B     		ldr	r3, .L10
 172 000c CA22     		movs	r2, #202
 173 000e 5A62     		str	r2, [r3, #36]
 539:FWLIB/src/stm32f4xx_rtc.c ****   }
 174              		.loc 1 539 5 is_stmt 1 view .LVU42
 539:FWLIB/src/stm32f4xx_rtc.c ****   }
 175              		.loc 1 539 14 is_stmt 0 view .LVU43
 176 0010 5322     		movs	r2, #83
 177 0012 5A62     		str	r2, [r3, #36]
 541:FWLIB/src/stm32f4xx_rtc.c **** 
 178              		.loc 1 541 1 view .LVU44
 179 0014 7047     		bx	lr
 180              	.L11:
 181 0016 00BF     		.align	2
 182              	.L10:
 183 0018 00280040 		.word	1073752064
 184              		.cfi_endproc
 185              	.LFE126:
 187              		.section	.text.RTC_EnterInitMode,"ax",%progbits
 188              		.align	1
 189              		.global	RTC_EnterInitMode
 190              		.syntax unified
 191              		.thumb
 192              		.thumb_func
 193              		.fpu fpv4-sp-d16
 195              	RTC_EnterInitMode:
 196              	.LFB127:
 553:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 197              		.loc 1 553 1 is_stmt 1 view -0
 198              		.cfi_startproc
 199              		@ args = 0, pretend = 0, frame = 8
 200              		@ frame_needed = 0, uses_anonymous_args = 0
 201              		@ link register save eliminated.
ARM GAS  /tmp/cc7uya1D.s 			page 53


 202 0000 82B0     		sub	sp, sp, #8
 203              	.LCFI0:
 204              		.cfi_def_cfa_offset 8
 554:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 205              		.loc 1 554 3 view .LVU46
 554:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 206              		.loc 1 554 17 is_stmt 0 view .LVU47
 207 0002 0023     		movs	r3, #0
 208 0004 0193     		str	r3, [sp, #4]
 555:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t initstatus = 0x00;
 209              		.loc 1 555 3 is_stmt 1 view .LVU48
 210              	.LVL13:
 556:FWLIB/src/stm32f4xx_rtc.c ****      
 211              		.loc 1 556 3 view .LVU49
 559:FWLIB/src/stm32f4xx_rtc.c ****   {
 212              		.loc 1 559 3 view .LVU50
 559:FWLIB/src/stm32f4xx_rtc.c ****   {
 213              		.loc 1 559 11 is_stmt 0 view .LVU51
 214 0006 114B     		ldr	r3, .L19
 215 0008 DB68     		ldr	r3, [r3, #12]
 559:FWLIB/src/stm32f4xx_rtc.c ****   {
 216              		.loc 1 559 6 view .LVU52
 217 000a 13F0400F 		tst	r3, #64
 218 000e 17D1     		bne	.L16
 562:FWLIB/src/stm32f4xx_rtc.c ****     
 219              		.loc 1 562 5 is_stmt 1 view .LVU53
 562:FWLIB/src/stm32f4xx_rtc.c ****     
 220              		.loc 1 562 14 is_stmt 0 view .LVU54
 221 0010 0E4B     		ldr	r3, .L19
 222 0012 4FF0FF32 		mov	r2, #-1
 223 0016 DA60     		str	r2, [r3, #12]
 224              	.LVL14:
 225              	.L15:
 565:FWLIB/src/stm32f4xx_rtc.c ****     {
 226              		.loc 1 565 5 is_stmt 1 discriminator 2 view .LVU55
 567:FWLIB/src/stm32f4xx_rtc.c ****       initcounter++;  
 227              		.loc 1 567 7 discriminator 2 view .LVU56
 567:FWLIB/src/stm32f4xx_rtc.c ****       initcounter++;  
 228              		.loc 1 567 23 is_stmt 0 discriminator 2 view .LVU57
 229 0018 0C4B     		ldr	r3, .L19
 230 001a DA68     		ldr	r2, [r3, #12]
 567:FWLIB/src/stm32f4xx_rtc.c ****       initcounter++;  
 231              		.loc 1 567 18 discriminator 2 view .LVU58
 232 001c 02F04002 		and	r2, r2, #64
 233              	.LVL15:
 568:FWLIB/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 234              		.loc 1 568 7 is_stmt 1 discriminator 2 view .LVU59
 568:FWLIB/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 235              		.loc 1 568 18 is_stmt 0 discriminator 2 view .LVU60
 236 0020 019B     		ldr	r3, [sp, #4]
 237 0022 0133     		adds	r3, r3, #1
 238 0024 0193     		str	r3, [sp, #4]
 569:FWLIB/src/stm32f4xx_rtc.c ****     
 239              		.loc 1 569 26 discriminator 2 view .LVU61
 240 0026 019B     		ldr	r3, [sp, #4]
 569:FWLIB/src/stm32f4xx_rtc.c ****     
 241              		.loc 1 569 5 discriminator 2 view .LVU62
ARM GAS  /tmp/cc7uya1D.s 			page 54


 242 0028 B3F5803F 		cmp	r3, #65536
 243 002c 01D0     		beq	.L14
 569:FWLIB/src/stm32f4xx_rtc.c ****     
 244              		.loc 1 569 47 discriminator 1 view .LVU63
 245 002e 002A     		cmp	r2, #0
 246 0030 F2D0     		beq	.L15
 247              	.L14:
 571:FWLIB/src/stm32f4xx_rtc.c ****     {
 248              		.loc 1 571 5 is_stmt 1 view .LVU64
 571:FWLIB/src/stm32f4xx_rtc.c ****     {
 249              		.loc 1 571 13 is_stmt 0 view .LVU65
 250 0032 064B     		ldr	r3, .L19
 251 0034 DB68     		ldr	r3, [r3, #12]
 571:FWLIB/src/stm32f4xx_rtc.c ****     {
 252              		.loc 1 571 8 view .LVU66
 253 0036 13F0400F 		tst	r3, #64
 254 003a 04D0     		beq	.L17
 573:FWLIB/src/stm32f4xx_rtc.c ****     }
 255              		.loc 1 573 14 view .LVU67
 256 003c 0120     		movs	r0, #1
 257 003e 00E0     		b	.L13
 258              	.LVL16:
 259              	.L16:
 582:FWLIB/src/stm32f4xx_rtc.c ****   } 
 260              		.loc 1 582 12 view .LVU68
 261 0040 0120     		movs	r0, #1
 262              	.LVL17:
 263              	.L13:
 585:FWLIB/src/stm32f4xx_rtc.c **** }
 264              		.loc 1 585 3 is_stmt 1 view .LVU69
 586:FWLIB/src/stm32f4xx_rtc.c **** 
 265              		.loc 1 586 1 is_stmt 0 view .LVU70
 266 0042 02B0     		add	sp, sp, #8
 267              	.LCFI1:
 268              		.cfi_remember_state
 269              		.cfi_def_cfa_offset 0
 270              		@ sp needed
 271 0044 7047     		bx	lr
 272              	.LVL18:
 273              	.L17:
 274              	.LCFI2:
 275              		.cfi_restore_state
 577:FWLIB/src/stm32f4xx_rtc.c ****     }        
 276              		.loc 1 577 14 view .LVU71
 277 0046 0020     		movs	r0, #0
 278 0048 FBE7     		b	.L13
 279              	.L20:
 280 004a 00BF     		.align	2
 281              	.L19:
 282 004c 00280040 		.word	1073752064
 283              		.cfi_endproc
 284              	.LFE127:
 286              		.section	.text.RTC_ExitInitMode,"ax",%progbits
 287              		.align	1
 288              		.global	RTC_ExitInitMode
 289              		.syntax unified
 290              		.thumb
ARM GAS  /tmp/cc7uya1D.s 			page 55


 291              		.thumb_func
 292              		.fpu fpv4-sp-d16
 294              	RTC_ExitInitMode:
 295              	.LFB128:
 598:FWLIB/src/stm32f4xx_rtc.c ****   /* Exit Initialization mode */
 296              		.loc 1 598 1 is_stmt 1 view -0
 297              		.cfi_startproc
 298              		@ args = 0, pretend = 0, frame = 0
 299              		@ frame_needed = 0, uses_anonymous_args = 0
 300              		@ link register save eliminated.
 600:FWLIB/src/stm32f4xx_rtc.c **** }
 301              		.loc 1 600 3 view .LVU73
 600:FWLIB/src/stm32f4xx_rtc.c **** }
 302              		.loc 1 600 12 is_stmt 0 view .LVU74
 303 0000 024A     		ldr	r2, .L22
 304 0002 D368     		ldr	r3, [r2, #12]
 305 0004 23F08003 		bic	r3, r3, #128
 306 0008 D360     		str	r3, [r2, #12]
 601:FWLIB/src/stm32f4xx_rtc.c **** 
 307              		.loc 1 601 1 view .LVU75
 308 000a 7047     		bx	lr
 309              	.L23:
 310              		.align	2
 311              	.L22:
 312 000c 00280040 		.word	1073752064
 313              		.cfi_endproc
 314              	.LFE128:
 316              		.section	.text.RTC_Init,"ax",%progbits
 317              		.align	1
 318              		.global	RTC_Init
 319              		.syntax unified
 320              		.thumb
 321              		.thumb_func
 322              		.fpu fpv4-sp-d16
 324              	RTC_Init:
 325              	.LVL19:
 326              	.LFB124:
 458:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 327              		.loc 1 458 1 is_stmt 1 view -0
 328              		.cfi_startproc
 329              		@ args = 0, pretend = 0, frame = 0
 330              		@ frame_needed = 0, uses_anonymous_args = 0
 458:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 331              		.loc 1 458 1 is_stmt 0 view .LVU77
 332 0000 10B5     		push	{r4, lr}
 333              	.LCFI3:
 334              		.cfi_def_cfa_offset 8
 335              		.cfi_offset 4, -8
 336              		.cfi_offset 14, -4
 337 0002 0446     		mov	r4, r0
 459:FWLIB/src/stm32f4xx_rtc.c ****   
 338              		.loc 1 459 3 is_stmt 1 view .LVU78
 339              	.LVL20:
 462:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
 340              		.loc 1 462 3 view .LVU79
 463:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));
 341              		.loc 1 463 3 view .LVU80
ARM GAS  /tmp/cc7uya1D.s 			page 56


 464:FWLIB/src/stm32f4xx_rtc.c **** 
 342              		.loc 1 464 3 view .LVU81
 467:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 343              		.loc 1 467 3 view .LVU82
 467:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 344              		.loc 1 467 12 is_stmt 0 view .LVU83
 345 0004 104B     		ldr	r3, .L28
 346 0006 CA22     		movs	r2, #202
 347 0008 5A62     		str	r2, [r3, #36]
 468:FWLIB/src/stm32f4xx_rtc.c **** 
 348              		.loc 1 468 3 is_stmt 1 view .LVU84
 468:FWLIB/src/stm32f4xx_rtc.c **** 
 349              		.loc 1 468 12 is_stmt 0 view .LVU85
 350 000a 5322     		movs	r2, #83
 351 000c 5A62     		str	r2, [r3, #36]
 471:FWLIB/src/stm32f4xx_rtc.c ****   {
 352              		.loc 1 471 3 is_stmt 1 view .LVU86
 471:FWLIB/src/stm32f4xx_rtc.c ****   {
 353              		.loc 1 471 7 is_stmt 0 view .LVU87
 354 000e FFF7FEFF 		bl	RTC_EnterInitMode
 355              	.LVL21:
 471:FWLIB/src/stm32f4xx_rtc.c ****   {
 356              		.loc 1 471 6 view .LVU88
 357 0012 0346     		mov	r3, r0
 358 0014 20B9     		cbnz	r0, .L27
 359              	.LVL22:
 360              	.L25:
 492:FWLIB/src/stm32f4xx_rtc.c ****   
 361              		.loc 1 492 3 is_stmt 1 view .LVU89
 492:FWLIB/src/stm32f4xx_rtc.c ****   
 362              		.loc 1 492 12 is_stmt 0 view .LVU90
 363 0016 0C4A     		ldr	r2, .L28
 364 0018 FF21     		movs	r1, #255
 365 001a 5162     		str	r1, [r2, #36]
 494:FWLIB/src/stm32f4xx_rtc.c **** }
 366              		.loc 1 494 3 is_stmt 1 view .LVU91
 495:FWLIB/src/stm32f4xx_rtc.c **** 
 367              		.loc 1 495 1 is_stmt 0 view .LVU92
 368 001c 1846     		mov	r0, r3
 369 001e 10BD     		pop	{r4, pc}
 370              	.LVL23:
 371              	.L27:
 478:FWLIB/src/stm32f4xx_rtc.c ****     /* Set RTC_CR register */
 372              		.loc 1 478 5 is_stmt 1 view .LVU93
 478:FWLIB/src/stm32f4xx_rtc.c ****     /* Set RTC_CR register */
 373              		.loc 1 478 13 is_stmt 0 view .LVU94
 374 0020 094B     		ldr	r3, .L28
 375 0022 9A68     		ldr	r2, [r3, #8]
 376 0024 22F04002 		bic	r2, r2, #64
 377 0028 9A60     		str	r2, [r3, #8]
 480:FWLIB/src/stm32f4xx_rtc.c ****   
 378              		.loc 1 480 5 is_stmt 1 view .LVU95
 480:FWLIB/src/stm32f4xx_rtc.c ****   
 379              		.loc 1 480 13 is_stmt 0 view .LVU96
 380 002a 9A68     		ldr	r2, [r3, #8]
 480:FWLIB/src/stm32f4xx_rtc.c ****   
 381              		.loc 1 480 43 view .LVU97
ARM GAS  /tmp/cc7uya1D.s 			page 57


 382 002c 2168     		ldr	r1, [r4]
 480:FWLIB/src/stm32f4xx_rtc.c ****   
 383              		.loc 1 480 13 view .LVU98
 384 002e 0A43     		orrs	r2, r2, r1
 385 0030 9A60     		str	r2, [r3, #8]
 483:FWLIB/src/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 386              		.loc 1 483 5 is_stmt 1 view .LVU99
 483:FWLIB/src/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 387              		.loc 1 483 42 is_stmt 0 view .LVU100
 388 0032 A268     		ldr	r2, [r4, #8]
 483:FWLIB/src/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 389              		.loc 1 483 15 view .LVU101
 390 0034 1A61     		str	r2, [r3, #16]
 484:FWLIB/src/stm32f4xx_rtc.c **** 
 391              		.loc 1 484 5 is_stmt 1 view .LVU102
 484:FWLIB/src/stm32f4xx_rtc.c **** 
 392              		.loc 1 484 15 is_stmt 0 view .LVU103
 393 0036 1A69     		ldr	r2, [r3, #16]
 484:FWLIB/src/stm32f4xx_rtc.c **** 
 394              		.loc 1 484 43 view .LVU104
 395 0038 6168     		ldr	r1, [r4, #4]
 484:FWLIB/src/stm32f4xx_rtc.c **** 
 396              		.loc 1 484 15 view .LVU105
 397 003a 42EA0142 		orr	r2, r2, r1, lsl #16
 398 003e 1A61     		str	r2, [r3, #16]
 487:FWLIB/src/stm32f4xx_rtc.c **** 
 399              		.loc 1 487 5 is_stmt 1 view .LVU106
 400 0040 FFF7FEFF 		bl	RTC_ExitInitMode
 401              	.LVL24:
 489:FWLIB/src/stm32f4xx_rtc.c ****   }
 402              		.loc 1 489 5 view .LVU107
 489:FWLIB/src/stm32f4xx_rtc.c ****   }
 403              		.loc 1 489 12 is_stmt 0 view .LVU108
 404 0044 0123     		movs	r3, #1
 405 0046 E6E7     		b	.L25
 406              	.L29:
 407              		.align	2
 408              	.L28:
 409 0048 00280040 		.word	1073752064
 410              		.cfi_endproc
 411              	.LFE124:
 413              		.section	.text.RTC_WaitForSynchro,"ax",%progbits
 414              		.align	1
 415              		.global	RTC_WaitForSynchro
 416              		.syntax unified
 417              		.thumb
 418              		.thumb_func
 419              		.fpu fpv4-sp-d16
 421              	RTC_WaitForSynchro:
 422              	.LFB129:
 620:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 423              		.loc 1 620 1 is_stmt 1 view -0
 424              		.cfi_startproc
 425              		@ args = 0, pretend = 0, frame = 8
 426              		@ frame_needed = 0, uses_anonymous_args = 0
 427              		@ link register save eliminated.
 428 0000 82B0     		sub	sp, sp, #8
ARM GAS  /tmp/cc7uya1D.s 			page 58


 429              	.LCFI4:
 430              		.cfi_def_cfa_offset 8
 621:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 431              		.loc 1 621 3 view .LVU110
 621:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 432              		.loc 1 621 17 is_stmt 0 view .LVU111
 433 0002 0023     		movs	r3, #0
 434 0004 0193     		str	r3, [sp, #4]
 622:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t synchrostatus = 0x00;
 435              		.loc 1 622 3 is_stmt 1 view .LVU112
 436              	.LVL25:
 623:FWLIB/src/stm32f4xx_rtc.c **** 
 437              		.loc 1 623 3 view .LVU113
 626:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 438              		.loc 1 626 3 view .LVU114
 626:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 439              		.loc 1 626 12 is_stmt 0 view .LVU115
 440 0006 114B     		ldr	r3, .L36
 441 0008 CA22     		movs	r2, #202
 442 000a 5A62     		str	r2, [r3, #36]
 627:FWLIB/src/stm32f4xx_rtc.c ****     
 443              		.loc 1 627 3 is_stmt 1 view .LVU116
 627:FWLIB/src/stm32f4xx_rtc.c ****     
 444              		.loc 1 627 12 is_stmt 0 view .LVU117
 445 000c 5322     		movs	r2, #83
 446 000e 5A62     		str	r2, [r3, #36]
 630:FWLIB/src/stm32f4xx_rtc.c ****     
 447              		.loc 1 630 3 is_stmt 1 view .LVU118
 630:FWLIB/src/stm32f4xx_rtc.c ****     
 448              		.loc 1 630 12 is_stmt 0 view .LVU119
 449 0010 DA68     		ldr	r2, [r3, #12]
 450 0012 22F0A002 		bic	r2, r2, #160
 451 0016 DA60     		str	r2, [r3, #12]
 452              	.LVL26:
 453              	.L32:
 633:FWLIB/src/stm32f4xx_rtc.c ****   {
 454              		.loc 1 633 3 is_stmt 1 discriminator 2 view .LVU120
 635:FWLIB/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 455              		.loc 1 635 5 discriminator 2 view .LVU121
 635:FWLIB/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 456              		.loc 1 635 24 is_stmt 0 discriminator 2 view .LVU122
 457 0018 0C4B     		ldr	r3, .L36
 458 001a DA68     		ldr	r2, [r3, #12]
 635:FWLIB/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 459              		.loc 1 635 19 discriminator 2 view .LVU123
 460 001c 02F02002 		and	r2, r2, #32
 461              	.LVL27:
 636:FWLIB/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 462              		.loc 1 636 5 is_stmt 1 discriminator 2 view .LVU124
 636:FWLIB/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 463              		.loc 1 636 19 is_stmt 0 discriminator 2 view .LVU125
 464 0020 019B     		ldr	r3, [sp, #4]
 465 0022 0133     		adds	r3, r3, #1
 466 0024 0193     		str	r3, [sp, #4]
 637:FWLIB/src/stm32f4xx_rtc.c ****     
 467              		.loc 1 637 27 discriminator 2 view .LVU126
 468 0026 019B     		ldr	r3, [sp, #4]
ARM GAS  /tmp/cc7uya1D.s 			page 59


 637:FWLIB/src/stm32f4xx_rtc.c ****     
 469              		.loc 1 637 3 discriminator 2 view .LVU127
 470 0028 B3F5003F 		cmp	r3, #131072
 471 002c 01D0     		beq	.L31
 637:FWLIB/src/stm32f4xx_rtc.c ****     
 472              		.loc 1 637 47 discriminator 1 view .LVU128
 473 002e 002A     		cmp	r2, #0
 474 0030 F2D0     		beq	.L32
 475              	.L31:
 639:FWLIB/src/stm32f4xx_rtc.c ****   {
 476              		.loc 1 639 3 is_stmt 1 view .LVU129
 639:FWLIB/src/stm32f4xx_rtc.c ****   {
 477              		.loc 1 639 11 is_stmt 0 view .LVU130
 478 0032 064B     		ldr	r3, .L36
 479 0034 DB68     		ldr	r3, [r3, #12]
 639:FWLIB/src/stm32f4xx_rtc.c ****   {
 480              		.loc 1 639 6 view .LVU131
 481 0036 13F0200F 		tst	r3, #32
 482 003a 05D0     		beq	.L34
 641:FWLIB/src/stm32f4xx_rtc.c ****   }
 483              		.loc 1 641 12 view .LVU132
 484 003c 0120     		movs	r0, #1
 485              	.L33:
 486              	.LVL28:
 649:FWLIB/src/stm32f4xx_rtc.c ****     
 487              		.loc 1 649 3 is_stmt 1 view .LVU133
 649:FWLIB/src/stm32f4xx_rtc.c ****     
 488              		.loc 1 649 12 is_stmt 0 view .LVU134
 489 003e 034B     		ldr	r3, .L36
 490 0040 FF22     		movs	r2, #255
 491              	.LVL29:
 649:FWLIB/src/stm32f4xx_rtc.c ****     
 492              		.loc 1 649 12 view .LVU135
 493 0042 5A62     		str	r2, [r3, #36]
 651:FWLIB/src/stm32f4xx_rtc.c **** }
 494              		.loc 1 651 3 is_stmt 1 view .LVU136
 652:FWLIB/src/stm32f4xx_rtc.c **** 
 495              		.loc 1 652 1 is_stmt 0 view .LVU137
 496 0044 02B0     		add	sp, sp, #8
 497              	.LCFI5:
 498              		.cfi_remember_state
 499              		.cfi_def_cfa_offset 0
 500              		@ sp needed
 501 0046 7047     		bx	lr
 502              	.LVL30:
 503              	.L34:
 504              	.LCFI6:
 505              		.cfi_restore_state
 645:FWLIB/src/stm32f4xx_rtc.c ****   }        
 506              		.loc 1 645 12 view .LVU138
 507 0048 0020     		movs	r0, #0
 508 004a F8E7     		b	.L33
 509              	.L37:
 510              		.align	2
 511              	.L36:
 512 004c 00280040 		.word	1073752064
 513              		.cfi_endproc
ARM GAS  /tmp/cc7uya1D.s 			page 60


 514              	.LFE129:
 516              		.section	.text.RTC_DeInit,"ax",%progbits
 517              		.align	1
 518              		.global	RTC_DeInit
 519              		.syntax unified
 520              		.thumb
 521              		.thumb_func
 522              		.fpu fpv4-sp-d16
 524              	RTC_DeInit:
 525              	.LFB123:
 376:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 526              		.loc 1 376 1 is_stmt 1 view -0
 527              		.cfi_startproc
 528              		@ args = 0, pretend = 0, frame = 8
 529              		@ frame_needed = 0, uses_anonymous_args = 0
 530 0000 00B5     		push	{lr}
 531              	.LCFI7:
 532              		.cfi_def_cfa_offset 4
 533              		.cfi_offset 14, -4
 534 0002 83B0     		sub	sp, sp, #12
 535              	.LCFI8:
 536              		.cfi_def_cfa_offset 16
 377:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 537              		.loc 1 377 3 view .LVU140
 377:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 538              		.loc 1 377 17 is_stmt 0 view .LVU141
 539 0004 0023     		movs	r3, #0
 540 0006 0193     		str	r3, [sp, #4]
 378:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 541              		.loc 1 378 3 is_stmt 1 view .LVU142
 542              	.LVL31:
 379:FWLIB/src/stm32f4xx_rtc.c ****   
 543              		.loc 1 379 3 view .LVU143
 382:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 544              		.loc 1 382 3 view .LVU144
 382:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 545              		.loc 1 382 12 is_stmt 0 view .LVU145
 546 0008 224B     		ldr	r3, .L46
 547 000a CA22     		movs	r2, #202
 548 000c 5A62     		str	r2, [r3, #36]
 383:FWLIB/src/stm32f4xx_rtc.c **** 
 549              		.loc 1 383 3 is_stmt 1 view .LVU146
 383:FWLIB/src/stm32f4xx_rtc.c **** 
 550              		.loc 1 383 12 is_stmt 0 view .LVU147
 551 000e 5322     		movs	r2, #83
 552 0010 5A62     		str	r2, [r3, #36]
 386:FWLIB/src/stm32f4xx_rtc.c ****   {
 553              		.loc 1 386 3 is_stmt 1 view .LVU148
 386:FWLIB/src/stm32f4xx_rtc.c ****   {
 554              		.loc 1 386 7 is_stmt 0 view .LVU149
 555 0012 FFF7FEFF 		bl	RTC_EnterInitMode
 556              	.LVL32:
 386:FWLIB/src/stm32f4xx_rtc.c ****   {
 557              		.loc 1 386 6 view .LVU150
 558 0016 0346     		mov	r3, r0
 559 0018 E0B1     		cbz	r0, .L39
 393:FWLIB/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
ARM GAS  /tmp/cc7uya1D.s 			page 61


 560              		.loc 1 393 5 is_stmt 1 view .LVU151
 393:FWLIB/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
 561              		.loc 1 393 13 is_stmt 0 view .LVU152
 562 001a 1E4B     		ldr	r3, .L46
 563 001c 0022     		movs	r2, #0
 564 001e 1A60     		str	r2, [r3]
 394:FWLIB/src/stm32f4xx_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 565              		.loc 1 394 5 is_stmt 1 view .LVU153
 394:FWLIB/src/stm32f4xx_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 566              		.loc 1 394 13 is_stmt 0 view .LVU154
 567 0020 42F20112 		movw	r2, #8449
 568 0024 5A60     		str	r2, [r3, #4]
 396:FWLIB/src/stm32f4xx_rtc.c ****   
 569              		.loc 1 396 5 is_stmt 1 view .LVU155
 396:FWLIB/src/stm32f4xx_rtc.c ****   
 570              		.loc 1 396 13 is_stmt 0 view .LVU156
 571 0026 9A68     		ldr	r2, [r3, #8]
 572 0028 02F00702 		and	r2, r2, #7
 573 002c 9A60     		str	r2, [r3, #8]
 574              	.LVL33:
 575              	.L41:
 399:FWLIB/src/stm32f4xx_rtc.c ****     {
 576              		.loc 1 399 5 is_stmt 1 discriminator 2 view .LVU157
 401:FWLIB/src/stm32f4xx_rtc.c ****       wutcounter++;  
 577              		.loc 1 401 7 discriminator 2 view .LVU158
 401:FWLIB/src/stm32f4xx_rtc.c ****       wutcounter++;  
 578              		.loc 1 401 24 is_stmt 0 discriminator 2 view .LVU159
 579 002e 194B     		ldr	r3, .L46
 580 0030 DA68     		ldr	r2, [r3, #12]
 401:FWLIB/src/stm32f4xx_rtc.c ****       wutcounter++;  
 581              		.loc 1 401 19 discriminator 2 view .LVU160
 582 0032 02F00402 		and	r2, r2, #4
 583              	.LVL34:
 402:FWLIB/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 584              		.loc 1 402 7 is_stmt 1 discriminator 2 view .LVU161
 402:FWLIB/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 585              		.loc 1 402 17 is_stmt 0 discriminator 2 view .LVU162
 586 0036 019B     		ldr	r3, [sp, #4]
 587 0038 0133     		adds	r3, r3, #1
 588 003a 0193     		str	r3, [sp, #4]
 403:FWLIB/src/stm32f4xx_rtc.c ****     
 589              		.loc 1 403 25 discriminator 2 view .LVU163
 590 003c 019B     		ldr	r3, [sp, #4]
 403:FWLIB/src/stm32f4xx_rtc.c ****     
 591              		.loc 1 403 5 discriminator 2 view .LVU164
 592 003e B3F5803F 		cmp	r3, #65536
 593 0042 01D0     		beq	.L40
 403:FWLIB/src/stm32f4xx_rtc.c ****     
 594              		.loc 1 403 46 discriminator 1 view .LVU165
 595 0044 002A     		cmp	r2, #0
 596 0046 F2D0     		beq	.L41
 597              	.L40:
 405:FWLIB/src/stm32f4xx_rtc.c ****     {
 598              		.loc 1 405 5 is_stmt 1 view .LVU166
 405:FWLIB/src/stm32f4xx_rtc.c ****     {
 599              		.loc 1 405 13 is_stmt 0 view .LVU167
 600 0048 124B     		ldr	r3, .L46
ARM GAS  /tmp/cc7uya1D.s 			page 62


 601 004a DB68     		ldr	r3, [r3, #12]
 405:FWLIB/src/stm32f4xx_rtc.c ****     {
 602              		.loc 1 405 8 view .LVU168
 603 004c 13F0040F 		tst	r3, #4
 604 0050 07D1     		bne	.L45
 407:FWLIB/src/stm32f4xx_rtc.c ****     }
 605              		.loc 1 407 14 view .LVU169
 606 0052 0023     		movs	r3, #0
 607              	.LVL35:
 608              	.L39:
 441:FWLIB/src/stm32f4xx_rtc.c ****   
 609              		.loc 1 441 3 is_stmt 1 view .LVU170
 441:FWLIB/src/stm32f4xx_rtc.c ****   
 610              		.loc 1 441 12 is_stmt 0 view .LVU171
 611 0054 0F4A     		ldr	r2, .L46
 612 0056 FF21     		movs	r1, #255
 613 0058 5162     		str	r1, [r2, #36]
 443:FWLIB/src/stm32f4xx_rtc.c **** }
 614              		.loc 1 443 3 is_stmt 1 view .LVU172
 444:FWLIB/src/stm32f4xx_rtc.c **** 
 615              		.loc 1 444 1 is_stmt 0 view .LVU173
 616 005a 1846     		mov	r0, r3
 617 005c 03B0     		add	sp, sp, #12
 618              	.LCFI9:
 619              		.cfi_remember_state
 620              		.cfi_def_cfa_offset 4
 621              		@ sp needed
 622 005e 5DF804FB 		ldr	pc, [sp], #4
 623              	.LVL36:
 624              	.L45:
 625              	.LCFI10:
 626              		.cfi_restore_state
 412:FWLIB/src/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 627              		.loc 1 412 7 is_stmt 1 view .LVU174
 412:FWLIB/src/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 628              		.loc 1 412 15 is_stmt 0 view .LVU175
 629 0062 0C4B     		ldr	r3, .L46
 630 0064 9A68     		ldr	r2, [r3, #8]
 631              	.LVL37:
 412:FWLIB/src/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 632              		.loc 1 412 15 view .LVU176
 633 0066 0022     		movs	r2, #0
 634 0068 9A60     		str	r2, [r3, #8]
 413:FWLIB/src/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 635              		.loc 1 413 7 is_stmt 1 view .LVU177
 413:FWLIB/src/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 636              		.loc 1 413 17 is_stmt 0 view .LVU178
 637 006a 4FF6FF71 		movw	r1, #65535
 638 006e 5961     		str	r1, [r3, #20]
 414:FWLIB/src/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 639              		.loc 1 414 7 is_stmt 1 view .LVU179
 414:FWLIB/src/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 640              		.loc 1 414 17 is_stmt 0 view .LVU180
 641 0070 0949     		ldr	r1, .L46+4
 642 0072 1961     		str	r1, [r3, #16]
 415:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 643              		.loc 1 415 7 is_stmt 1 view .LVU181
ARM GAS  /tmp/cc7uya1D.s 			page 63


 415:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 644              		.loc 1 415 19 is_stmt 0 view .LVU182
 645 0074 9A61     		str	r2, [r3, #24]
 416:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 646              		.loc 1 416 7 is_stmt 1 view .LVU183
 416:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 647              		.loc 1 416 19 is_stmt 0 view .LVU184
 648 0076 DA61     		str	r2, [r3, #28]
 417:FWLIB/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)0x00000000;
 649              		.loc 1 417 7 is_stmt 1 view .LVU185
 417:FWLIB/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)0x00000000;
 650              		.loc 1 417 19 is_stmt 0 view .LVU186
 651 0078 1A62     		str	r2, [r3, #32]
 418:FWLIB/src/stm32f4xx_rtc.c ****       RTC->CALR = (uint32_t)0x00000000;
 652              		.loc 1 418 7 is_stmt 1 view .LVU187
 418:FWLIB/src/stm32f4xx_rtc.c ****       RTC->CALR = (uint32_t)0x00000000;
 653              		.loc 1 418 19 is_stmt 0 view .LVU188
 654 007a DA62     		str	r2, [r3, #44]
 419:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMASSR = (uint32_t)0x00000000;
 655              		.loc 1 419 7 is_stmt 1 view .LVU189
 419:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMASSR = (uint32_t)0x00000000;
 656              		.loc 1 419 17 is_stmt 0 view .LVU190
 657 007c DA63     		str	r2, [r3, #60]
 420:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMBSSR = (uint32_t)0x00000000;
 658              		.loc 1 420 7 is_stmt 1 view .LVU191
 420:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMBSSR = (uint32_t)0x00000000;
 659              		.loc 1 420 21 is_stmt 0 view .LVU192
 660 007e 5A64     		str	r2, [r3, #68]
 421:FWLIB/src/stm32f4xx_rtc.c ****       
 661              		.loc 1 421 7 is_stmt 1 view .LVU193
 421:FWLIB/src/stm32f4xx_rtc.c ****       
 662              		.loc 1 421 21 is_stmt 0 view .LVU194
 663 0080 9A64     		str	r2, [r3, #72]
 424:FWLIB/src/stm32f4xx_rtc.c ****       
 664              		.loc 1 424 7 is_stmt 1 view .LVU195
 424:FWLIB/src/stm32f4xx_rtc.c ****       
 665              		.loc 1 424 16 is_stmt 0 view .LVU196
 666 0082 DA60     		str	r2, [r3, #12]
 427:FWLIB/src/stm32f4xx_rtc.c ****   
 667              		.loc 1 427 7 is_stmt 1 view .LVU197
 427:FWLIB/src/stm32f4xx_rtc.c ****   
 668              		.loc 1 427 18 is_stmt 0 view .LVU198
 669 0084 1A64     		str	r2, [r3, #64]
 429:FWLIB/src/stm32f4xx_rtc.c ****       {
 670              		.loc 1 429 7 is_stmt 1 view .LVU199
 429:FWLIB/src/stm32f4xx_rtc.c ****       {
 671              		.loc 1 429 10 is_stmt 0 view .LVU200
 672 0086 FFF7FEFF 		bl	RTC_WaitForSynchro
 673              	.LVL38:
 429:FWLIB/src/stm32f4xx_rtc.c ****       {
 674              		.loc 1 429 9 view .LVU201
 675 008a 0346     		mov	r3, r0
 676 008c 0028     		cmp	r0, #0
 677 008e E1D0     		beq	.L39
 435:FWLIB/src/stm32f4xx_rtc.c ****       }
 678              		.loc 1 435 16 view .LVU202
 679 0090 0123     		movs	r3, #1
ARM GAS  /tmp/cc7uya1D.s 			page 64


 680 0092 DFE7     		b	.L39
 681              	.L47:
 682              		.align	2
 683              	.L46:
 684 0094 00280040 		.word	1073752064
 685 0098 FF007F00 		.word	8323327
 686              		.cfi_endproc
 687              	.LFE123:
 689              		.section	.text.RTC_RefClockCmd,"ax",%progbits
 690              		.align	1
 691              		.global	RTC_RefClockCmd
 692              		.syntax unified
 693              		.thumb
 694              		.thumb_func
 695              		.fpu fpv4-sp-d16
 697              	RTC_RefClockCmd:
 698              	.LVL39:
 699              	.LFB130:
 663:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 700              		.loc 1 663 1 is_stmt 1 view -0
 701              		.cfi_startproc
 702              		@ args = 0, pretend = 0, frame = 0
 703              		@ frame_needed = 0, uses_anonymous_args = 0
 663:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 704              		.loc 1 663 1 is_stmt 0 view .LVU204
 705 0000 10B5     		push	{r4, lr}
 706              	.LCFI11:
 707              		.cfi_def_cfa_offset 8
 708              		.cfi_offset 4, -8
 709              		.cfi_offset 14, -4
 710 0002 0446     		mov	r4, r0
 664:FWLIB/src/stm32f4xx_rtc.c ****   
 711              		.loc 1 664 3 is_stmt 1 view .LVU205
 712              	.LVL40:
 667:FWLIB/src/stm32f4xx_rtc.c ****   
 713              		.loc 1 667 3 view .LVU206
 670:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 714              		.loc 1 670 3 view .LVU207
 670:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 715              		.loc 1 670 12 is_stmt 0 view .LVU208
 716 0004 0E4B     		ldr	r3, .L53
 717 0006 CA22     		movs	r2, #202
 718 0008 5A62     		str	r2, [r3, #36]
 671:FWLIB/src/stm32f4xx_rtc.c ****     
 719              		.loc 1 671 3 is_stmt 1 view .LVU209
 671:FWLIB/src/stm32f4xx_rtc.c ****     
 720              		.loc 1 671 12 is_stmt 0 view .LVU210
 721 000a 5322     		movs	r2, #83
 722 000c 5A62     		str	r2, [r3, #36]
 674:FWLIB/src/stm32f4xx_rtc.c ****   {
 723              		.loc 1 674 3 is_stmt 1 view .LVU211
 674:FWLIB/src/stm32f4xx_rtc.c ****   {
 724              		.loc 1 674 7 is_stmt 0 view .LVU212
 725 000e FFF7FEFF 		bl	RTC_EnterInitMode
 726              	.LVL41:
 674:FWLIB/src/stm32f4xx_rtc.c ****   {
 727              		.loc 1 674 6 view .LVU213
ARM GAS  /tmp/cc7uya1D.s 			page 65


 728 0012 0346     		mov	r3, r0
 729 0014 40B1     		cbz	r0, .L49
 680:FWLIB/src/stm32f4xx_rtc.c ****     {
 730              		.loc 1 680 5 is_stmt 1 view .LVU214
 680:FWLIB/src/stm32f4xx_rtc.c ****     {
 731              		.loc 1 680 8 is_stmt 0 view .LVU215
 732 0016 64B1     		cbz	r4, .L50
 683:FWLIB/src/stm32f4xx_rtc.c ****     }
 733              		.loc 1 683 7 is_stmt 1 view .LVU216
 683:FWLIB/src/stm32f4xx_rtc.c ****     }
 734              		.loc 1 683 15 is_stmt 0 view .LVU217
 735 0018 094A     		ldr	r2, .L53
 736 001a 9368     		ldr	r3, [r2, #8]
 737 001c 43F01003 		orr	r3, r3, #16
 738 0020 9360     		str	r3, [r2, #8]
 739              	.L51:
 691:FWLIB/src/stm32f4xx_rtc.c ****     
 740              		.loc 1 691 5 is_stmt 1 view .LVU218
 741 0022 FFF7FEFF 		bl	RTC_ExitInitMode
 742              	.LVL42:
 693:FWLIB/src/stm32f4xx_rtc.c ****   }
 743              		.loc 1 693 5 view .LVU219
 693:FWLIB/src/stm32f4xx_rtc.c ****   }
 744              		.loc 1 693 12 is_stmt 0 view .LVU220
 745 0026 0123     		movs	r3, #1
 746              	.LVL43:
 747              	.L49:
 697:FWLIB/src/stm32f4xx_rtc.c ****   
 748              		.loc 1 697 3 is_stmt 1 view .LVU221
 697:FWLIB/src/stm32f4xx_rtc.c ****   
 749              		.loc 1 697 12 is_stmt 0 view .LVU222
 750 0028 054A     		ldr	r2, .L53
 751 002a FF21     		movs	r1, #255
 752 002c 5162     		str	r1, [r2, #36]
 699:FWLIB/src/stm32f4xx_rtc.c **** }
 753              		.loc 1 699 3 is_stmt 1 view .LVU223
 700:FWLIB/src/stm32f4xx_rtc.c **** 
 754              		.loc 1 700 1 is_stmt 0 view .LVU224
 755 002e 1846     		mov	r0, r3
 756 0030 10BD     		pop	{r4, pc}
 757              	.LVL44:
 758              	.L50:
 688:FWLIB/src/stm32f4xx_rtc.c ****     }
 759              		.loc 1 688 7 is_stmt 1 view .LVU225
 688:FWLIB/src/stm32f4xx_rtc.c ****     }
 760              		.loc 1 688 15 is_stmt 0 view .LVU226
 761 0032 034A     		ldr	r2, .L53
 762 0034 9368     		ldr	r3, [r2, #8]
 763 0036 23F01003 		bic	r3, r3, #16
 764 003a 9360     		str	r3, [r2, #8]
 765 003c F1E7     		b	.L51
 766              	.L54:
 767 003e 00BF     		.align	2
 768              	.L53:
 769 0040 00280040 		.word	1073752064
 770              		.cfi_endproc
 771              	.LFE130:
ARM GAS  /tmp/cc7uya1D.s 			page 66


 773              		.section	.text.RTC_BypassShadowCmd,"ax",%progbits
 774              		.align	1
 775              		.global	RTC_BypassShadowCmd
 776              		.syntax unified
 777              		.thumb
 778              		.thumb_func
 779              		.fpu fpv4-sp-d16
 781              	RTC_BypassShadowCmd:
 782              	.LVL45:
 783              	.LFB131:
 711:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 784              		.loc 1 711 1 is_stmt 1 view -0
 785              		.cfi_startproc
 786              		@ args = 0, pretend = 0, frame = 0
 787              		@ frame_needed = 0, uses_anonymous_args = 0
 788              		@ link register save eliminated.
 713:FWLIB/src/stm32f4xx_rtc.c **** 
 789              		.loc 1 713 3 view .LVU228
 716:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 790              		.loc 1 716 3 view .LVU229
 716:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 791              		.loc 1 716 12 is_stmt 0 view .LVU230
 792 0000 0A4B     		ldr	r3, .L58
 793 0002 CA22     		movs	r2, #202
 794 0004 5A62     		str	r2, [r3, #36]
 717:FWLIB/src/stm32f4xx_rtc.c ****   
 795              		.loc 1 717 3 is_stmt 1 view .LVU231
 717:FWLIB/src/stm32f4xx_rtc.c ****   
 796              		.loc 1 717 12 is_stmt 0 view .LVU232
 797 0006 5322     		movs	r2, #83
 798 0008 5A62     		str	r2, [r3, #36]
 719:FWLIB/src/stm32f4xx_rtc.c ****   {
 799              		.loc 1 719 3 is_stmt 1 view .LVU233
 719:FWLIB/src/stm32f4xx_rtc.c ****   {
 800              		.loc 1 719 6 is_stmt 0 view .LVU234
 801 000a 40B1     		cbz	r0, .L56
 722:FWLIB/src/stm32f4xx_rtc.c ****   }
 802              		.loc 1 722 5 is_stmt 1 view .LVU235
 722:FWLIB/src/stm32f4xx_rtc.c ****   }
 803              		.loc 1 722 13 is_stmt 0 view .LVU236
 804 000c 1A46     		mov	r2, r3
 805 000e 9B68     		ldr	r3, [r3, #8]
 806 0010 43F02003 		orr	r3, r3, #32
 807 0014 9360     		str	r3, [r2, #8]
 808              	.L57:
 731:FWLIB/src/stm32f4xx_rtc.c **** }
 809              		.loc 1 731 3 is_stmt 1 view .LVU237
 731:FWLIB/src/stm32f4xx_rtc.c **** }
 810              		.loc 1 731 12 is_stmt 0 view .LVU238
 811 0016 054B     		ldr	r3, .L58
 812 0018 FF22     		movs	r2, #255
 813 001a 5A62     		str	r2, [r3, #36]
 732:FWLIB/src/stm32f4xx_rtc.c **** 
 814              		.loc 1 732 1 view .LVU239
 815 001c 7047     		bx	lr
 816              	.L56:
 727:FWLIB/src/stm32f4xx_rtc.c ****   }
ARM GAS  /tmp/cc7uya1D.s 			page 67


 817              		.loc 1 727 5 is_stmt 1 view .LVU240
 727:FWLIB/src/stm32f4xx_rtc.c ****   }
 818              		.loc 1 727 13 is_stmt 0 view .LVU241
 819 001e 034A     		ldr	r2, .L58
 820 0020 9368     		ldr	r3, [r2, #8]
 821 0022 03F0DF03 		and	r3, r3, #223
 822 0026 9360     		str	r3, [r2, #8]
 823 0028 F5E7     		b	.L57
 824              	.L59:
 825 002a 00BF     		.align	2
 826              	.L58:
 827 002c 00280040 		.word	1073752064
 828              		.cfi_endproc
 829              	.LFE131:
 831              		.section	.text.RTC_SetTime,"ax",%progbits
 832              		.align	1
 833              		.global	RTC_SetTime
 834              		.syntax unified
 835              		.thumb
 836              		.thumb_func
 837              		.fpu fpv4-sp-d16
 839              	RTC_SetTime:
 840              	.LVL46:
 841              	.LFB132:
 766:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 842              		.loc 1 766 1 is_stmt 1 view -0
 843              		.cfi_startproc
 844              		@ args = 0, pretend = 0, frame = 0
 845              		@ frame_needed = 0, uses_anonymous_args = 0
 766:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 846              		.loc 1 766 1 is_stmt 0 view .LVU243
 847 0000 38B5     		push	{r3, r4, r5, lr}
 848              	.LCFI12:
 849              		.cfi_def_cfa_offset 16
 850              		.cfi_offset 3, -16
 851              		.cfi_offset 4, -12
 852              		.cfi_offset 5, -8
 853              		.cfi_offset 14, -4
 854 0002 0D46     		mov	r5, r1
 767:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 855              		.loc 1 767 3 is_stmt 1 view .LVU244
 856              	.LVL47:
 768:FWLIB/src/stm32f4xx_rtc.c ****     
 857              		.loc 1 768 3 view .LVU245
 771:FWLIB/src/stm32f4xx_rtc.c ****   
 858              		.loc 1 771 3 view .LVU246
 773:FWLIB/src/stm32f4xx_rtc.c ****   {
 859              		.loc 1 773 3 view .LVU247
 773:FWLIB/src/stm32f4xx_rtc.c ****   {
 860              		.loc 1 773 6 is_stmt 0 view .LVU248
 861 0004 0346     		mov	r3, r0
 862 0006 F8B9     		cbnz	r0, .L61
 775:FWLIB/src/stm32f4xx_rtc.c ****     {
 863              		.loc 1 775 5 is_stmt 1 view .LVU249
 775:FWLIB/src/stm32f4xx_rtc.c ****     {
 864              		.loc 1 775 13 is_stmt 0 view .LVU250
 865 0008 264A     		ldr	r2, .L71
ARM GAS  /tmp/cc7uya1D.s 			page 68


 866 000a 9268     		ldr	r2, [r2, #8]
 775:FWLIB/src/stm32f4xx_rtc.c ****     {
 867              		.loc 1 775 8 view .LVU251
 868 000c 12F0400F 		tst	r2, #64
 869 0010 01D1     		bne	.L62
 782:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 870              		.loc 1 782 7 is_stmt 1 view .LVU252
 782:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 871              		.loc 1 782 31 is_stmt 0 view .LVU253
 872 0012 0022     		movs	r2, #0
 873 0014 CA70     		strb	r2, [r1, #3]
 874              	.L62:
 799:FWLIB/src/stm32f4xx_rtc.c ****     }
 875              		.loc 1 799 7 is_stmt 1 view .LVU254
 801:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
 876              		.loc 1 801 5 view .LVU255
 802:FWLIB/src/stm32f4xx_rtc.c ****   }
 877              		.loc 1 802 5 view .LVU256
 806:FWLIB/src/stm32f4xx_rtc.c ****   {
 878              		.loc 1 806 3 view .LVU257
 806:FWLIB/src/stm32f4xx_rtc.c ****   {
 879              		.loc 1 806 6 is_stmt 0 view .LVU258
 880 0016 FBB1     		cbz	r3, .L63
 808:FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 881              		.loc 1 808 5 is_stmt 1 view .LVU259
 808:FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 882              		.loc 1 808 41 is_stmt 0 view .LVU260
 883 0018 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 884              	.LVL48:
 809:FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 885              		.loc 1 809 40 view .LVU261
 886 001a 6C78     		ldrb	r4, [r5, #1]	@ zero_extendqisi2
 809:FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 887              		.loc 1 809 55 view .LVU262
 888 001c 2402     		lsls	r4, r4, #8
 808:FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 889              		.loc 1 808 61 view .LVU263
 890 001e 44EA0044 		orr	r4, r4, r0, lsl #16
 810:FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 891              		.loc 1 810 39 view .LVU264
 892 0022 A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 809:FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 893              		.loc 1 809 61 view .LVU265
 894 0024 0443     		orrs	r4, r4, r0
 811:FWLIB/src/stm32f4xx_rtc.c ****   }  
 895              		.loc 1 811 40 view .LVU266
 896 0026 E878     		ldrb	r0, [r5, #3]	@ zero_extendqisi2
 808:FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 897              		.loc 1 808 12 view .LVU267
 898 0028 44EA0044 		orr	r4, r4, r0, lsl #16
 899              	.LVL49:
 900              	.L64:
 822:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 901              		.loc 1 822 3 is_stmt 1 view .LVU268
 822:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 902              		.loc 1 822 12 is_stmt 0 view .LVU269
 903 002c 1D4B     		ldr	r3, .L71
ARM GAS  /tmp/cc7uya1D.s 			page 69


 904 002e CA22     		movs	r2, #202
 905 0030 5A62     		str	r2, [r3, #36]
 823:FWLIB/src/stm32f4xx_rtc.c **** 
 906              		.loc 1 823 3 is_stmt 1 view .LVU270
 823:FWLIB/src/stm32f4xx_rtc.c **** 
 907              		.loc 1 823 12 is_stmt 0 view .LVU271
 908 0032 5322     		movs	r2, #83
 909 0034 5A62     		str	r2, [r3, #36]
 826:FWLIB/src/stm32f4xx_rtc.c ****   {
 910              		.loc 1 826 3 is_stmt 1 view .LVU272
 826:FWLIB/src/stm32f4xx_rtc.c ****   {
 911              		.loc 1 826 7 is_stmt 0 view .LVU273
 912 0036 FFF7FEFF 		bl	RTC_EnterInitMode
 913              	.LVL50:
 826:FWLIB/src/stm32f4xx_rtc.c ****   {
 914              		.loc 1 826 6 view .LVU274
 915 003a 0346     		mov	r3, r0
 916 003c E8B9     		cbnz	r0, .L69
 917              	.LVL51:
 918              	.L65:
 856:FWLIB/src/stm32f4xx_rtc.c ****     
 919              		.loc 1 856 3 is_stmt 1 view .LVU275
 856:FWLIB/src/stm32f4xx_rtc.c ****     
 920              		.loc 1 856 12 is_stmt 0 view .LVU276
 921 003e 194A     		ldr	r2, .L71
 922 0040 FF21     		movs	r1, #255
 923 0042 5162     		str	r1, [r2, #36]
 858:FWLIB/src/stm32f4xx_rtc.c **** }
 924              		.loc 1 858 3 is_stmt 1 view .LVU277
 859:FWLIB/src/stm32f4xx_rtc.c **** 
 925              		.loc 1 859 1 is_stmt 0 view .LVU278
 926 0044 1846     		mov	r0, r3
 927 0046 38BD     		pop	{r3, r4, r5, pc}
 928              	.LVL52:
 929              	.L61:
 790:FWLIB/src/stm32f4xx_rtc.c ****     {
 930              		.loc 1 790 5 is_stmt 1 view .LVU279
 790:FWLIB/src/stm32f4xx_rtc.c ****     {
 931              		.loc 1 790 13 is_stmt 0 view .LVU280
 932 0048 164A     		ldr	r2, .L71
 933 004a 9268     		ldr	r2, [r2, #8]
 790:FWLIB/src/stm32f4xx_rtc.c ****     {
 934              		.loc 1 790 8 view .LVU281
 935 004c 12F0400F 		tst	r2, #64
 936 0050 E1D1     		bne	.L62
 798:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 937              		.loc 1 798 7 is_stmt 1 view .LVU282
 798:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 938              		.loc 1 798 31 is_stmt 0 view .LVU283
 939 0052 0022     		movs	r2, #0
 940 0054 CA70     		strb	r2, [r1, #3]
 941 0056 DEE7     		b	.L62
 942              	.L63:
 815:FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 943              		.loc 1 815 5 is_stmt 1 view .LVU284
 815:FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 944              		.loc 1 815 36 is_stmt 0 view .LVU285
ARM GAS  /tmp/cc7uya1D.s 			page 70


 945 0058 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 946              	.LVL53:
 815:FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 947              		.loc 1 815 36 view .LVU286
 948 005a FFF7FEFF 		bl	RTC_ByteToBcd2
 949              	.LVL54:
 815:FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 950              		.loc 1 815 78 view .LVU287
 951 005e 0404     		lsls	r4, r0, #16
 816:FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 952              		.loc 1 816 31 view .LVU288
 953 0060 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 954 0062 FFF7FEFF 		bl	RTC_ByteToBcd2
 955              	.LVL55:
 815:FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 956              		.loc 1 815 85 view .LVU289
 957 0066 44EA0024 		orr	r4, r4, r0, lsl #8
 817:FWLIB/src/stm32f4xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 958              		.loc 1 817 31 view .LVU290
 959 006a A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 960 006c FFF7FEFF 		bl	RTC_ByteToBcd2
 961              	.LVL56:
 816:FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 962              		.loc 1 816 81 view .LVU291
 963 0070 0443     		orrs	r4, r4, r0
 818:FWLIB/src/stm32f4xx_rtc.c ****   }  
 964              		.loc 1 818 46 view .LVU292
 965 0072 E878     		ldrb	r0, [r5, #3]	@ zero_extendqisi2
 815:FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 966              		.loc 1 815 12 view .LVU293
 967 0074 44EA0044 		orr	r4, r4, r0, lsl #16
 968              	.LVL57:
 815:FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 969              		.loc 1 815 12 view .LVU294
 970 0078 D8E7     		b	.L64
 971              	.L69:
 833:FWLIB/src/stm32f4xx_rtc.c **** 
 972              		.loc 1 833 5 is_stmt 1 view .LVU295
 833:FWLIB/src/stm32f4xx_rtc.c **** 
 973              		.loc 1 833 15 is_stmt 0 view .LVU296
 974 007a 04F07F34 		and	r4, r4, #2139062143
 975              	.LVL58:
 833:FWLIB/src/stm32f4xx_rtc.c **** 
 976              		.loc 1 833 15 view .LVU297
 977 007e 24F0FE44 		bic	r4, r4, #2130706432
 833:FWLIB/src/stm32f4xx_rtc.c **** 
 978              		.loc 1 833 13 view .LVU298
 979 0082 084D     		ldr	r5, .L71
 980              	.LVL59:
 833:FWLIB/src/stm32f4xx_rtc.c **** 
 981              		.loc 1 833 13 view .LVU299
 982 0084 2C60     		str	r4, [r5]
 836:FWLIB/src/stm32f4xx_rtc.c **** 
 983              		.loc 1 836 5 is_stmt 1 view .LVU300
 984 0086 FFF7FEFF 		bl	RTC_ExitInitMode
 985              	.LVL60:
 839:FWLIB/src/stm32f4xx_rtc.c ****     {
ARM GAS  /tmp/cc7uya1D.s 			page 71


 986              		.loc 1 839 5 view .LVU301
 839:FWLIB/src/stm32f4xx_rtc.c ****     {
 987              		.loc 1 839 13 is_stmt 0 view .LVU302
 988 008a AB68     		ldr	r3, [r5, #8]
 839:FWLIB/src/stm32f4xx_rtc.c ****     {
 989              		.loc 1 839 8 view .LVU303
 990 008c 13F0200F 		tst	r3, #32
 991 0090 01D0     		beq	.L70
 852:FWLIB/src/stm32f4xx_rtc.c ****     }
 992              		.loc 1 852 14 view .LVU304
 993 0092 0123     		movs	r3, #1
 994 0094 D3E7     		b	.L65
 995              	.L70:
 841:FWLIB/src/stm32f4xx_rtc.c ****     {
 996              		.loc 1 841 5 is_stmt 1 view .LVU305
 841:FWLIB/src/stm32f4xx_rtc.c ****     {
 997              		.loc 1 841 8 is_stmt 0 view .LVU306
 998 0096 FFF7FEFF 		bl	RTC_WaitForSynchro
 999              	.LVL61:
 841:FWLIB/src/stm32f4xx_rtc.c ****     {
 1000              		.loc 1 841 7 view .LVU307
 1001 009a 0346     		mov	r3, r0
 1002 009c 0028     		cmp	r0, #0
 1003 009e CED0     		beq	.L65
 847:FWLIB/src/stm32f4xx_rtc.c ****     }
 1004              		.loc 1 847 14 view .LVU308
 1005 00a0 0123     		movs	r3, #1
 1006 00a2 CCE7     		b	.L65
 1007              	.L72:
 1008              		.align	2
 1009              	.L71:
 1010 00a4 00280040 		.word	1073752064
 1011              		.cfi_endproc
 1012              	.LFE132:
 1014              		.section	.text.RTC_TimeStructInit,"ax",%progbits
 1015              		.align	1
 1016              		.global	RTC_TimeStructInit
 1017              		.syntax unified
 1018              		.thumb
 1019              		.thumb_func
 1020              		.fpu fpv4-sp-d16
 1022              	RTC_TimeStructInit:
 1023              	.LVL62:
 1024              	.LFB133:
 869:FWLIB/src/stm32f4xx_rtc.c ****   /* Time = 00h:00min:00sec */
 1025              		.loc 1 869 1 is_stmt 1 view -0
 1026              		.cfi_startproc
 1027              		@ args = 0, pretend = 0, frame = 0
 1028              		@ frame_needed = 0, uses_anonymous_args = 0
 1029              		@ link register save eliminated.
 871:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 1030              		.loc 1 871 3 view .LVU310
 871:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 1031              		.loc 1 871 27 is_stmt 0 view .LVU311
 1032 0000 0023     		movs	r3, #0
 1033 0002 C370     		strb	r3, [r0, #3]
 872:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
ARM GAS  /tmp/cc7uya1D.s 			page 72


 1034              		.loc 1 872 3 is_stmt 1 view .LVU312
 872:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 1035              		.loc 1 872 29 is_stmt 0 view .LVU313
 1036 0004 0370     		strb	r3, [r0]
 873:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 1037              		.loc 1 873 3 is_stmt 1 view .LVU314
 873:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 1038              		.loc 1 873 31 is_stmt 0 view .LVU315
 1039 0006 4370     		strb	r3, [r0, #1]
 874:FWLIB/src/stm32f4xx_rtc.c **** }
 1040              		.loc 1 874 3 is_stmt 1 view .LVU316
 874:FWLIB/src/stm32f4xx_rtc.c **** }
 1041              		.loc 1 874 31 is_stmt 0 view .LVU317
 1042 0008 8370     		strb	r3, [r0, #2]
 875:FWLIB/src/stm32f4xx_rtc.c **** 
 1043              		.loc 1 875 1 view .LVU318
 1044 000a 7047     		bx	lr
 1045              		.cfi_endproc
 1046              	.LFE133:
 1048              		.section	.text.RTC_GetTime,"ax",%progbits
 1049              		.align	1
 1050              		.global	RTC_GetTime
 1051              		.syntax unified
 1052              		.thumb
 1053              		.thumb_func
 1054              		.fpu fpv4-sp-d16
 1056              	RTC_GetTime:
 1057              	.LVL63:
 1058              	.LFB134:
 888:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1059              		.loc 1 888 1 is_stmt 1 view -0
 1060              		.cfi_startproc
 1061              		@ args = 0, pretend = 0, frame = 0
 1062              		@ frame_needed = 0, uses_anonymous_args = 0
 888:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1063              		.loc 1 888 1 is_stmt 0 view .LVU320
 1064 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1065              	.LCFI13:
 1066              		.cfi_def_cfa_offset 24
 1067              		.cfi_offset 3, -24
 1068              		.cfi_offset 4, -20
 1069              		.cfi_offset 5, -16
 1070              		.cfi_offset 6, -12
 1071              		.cfi_offset 7, -8
 1072              		.cfi_offset 14, -4
 889:FWLIB/src/stm32f4xx_rtc.c **** 
 1073              		.loc 1 889 3 is_stmt 1 view .LVU321
 1074              	.LVL64:
 892:FWLIB/src/stm32f4xx_rtc.c **** 
 1075              		.loc 1 892 3 view .LVU322
 895:FWLIB/src/stm32f4xx_rtc.c ****   
 1076              		.loc 1 895 3 view .LVU323
 895:FWLIB/src/stm32f4xx_rtc.c ****   
 1077              		.loc 1 895 26 is_stmt 0 view .LVU324
 1078 0002 114B     		ldr	r3, .L77
 1079 0004 1B68     		ldr	r3, [r3]
 895:FWLIB/src/stm32f4xx_rtc.c ****   
ARM GAS  /tmp/cc7uya1D.s 			page 73


 1080              		.loc 1 895 10 view .LVU325
 1081 0006 03F07F33 		and	r3, r3, #2139062143
 1082 000a 23F0FE43 		bic	r3, r3, #2130706432
 1083              	.LVL65:
 898:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 1084              		.loc 1 898 3 is_stmt 1 view .LVU326
 898:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 1085              		.loc 1 898 31 is_stmt 0 view .LVU327
 1086 000e 1A0C     		lsrs	r2, r3, #16
 1087 0010 02F03F07 		and	r7, r2, #63
 898:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 1088              		.loc 1 898 29 view .LVU328
 1089 0014 0F70     		strb	r7, [r1]
 899:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 1090              		.loc 1 899 3 is_stmt 1 view .LVU329
 899:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 1091              		.loc 1 899 33 is_stmt 0 view .LVU330
 1092 0016 C3F30626 		ubfx	r6, r3, #8, #7
 899:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 1093              		.loc 1 899 31 view .LVU331
 1094 001a 4E70     		strb	r6, [r1, #1]
 900:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 1095              		.loc 1 900 3 is_stmt 1 view .LVU332
 900:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 1096              		.loc 1 900 33 is_stmt 0 view .LVU333
 1097 001c 03F07F04 		and	r4, r3, #127
 900:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 1098              		.loc 1 900 31 view .LVU334
 1099 0020 8C70     		strb	r4, [r1, #2]
 901:FWLIB/src/stm32f4xx_rtc.c **** 
 1100              		.loc 1 901 3 is_stmt 1 view .LVU335
 901:FWLIB/src/stm32f4xx_rtc.c **** 
 1101              		.loc 1 901 29 is_stmt 0 view .LVU336
 1102 0022 02F04002 		and	r2, r2, #64
 901:FWLIB/src/stm32f4xx_rtc.c **** 
 1103              		.loc 1 901 27 view .LVU337
 1104 0026 CA70     		strb	r2, [r1, #3]
 904:FWLIB/src/stm32f4xx_rtc.c ****   {
 1105              		.loc 1 904 3 is_stmt 1 view .LVU338
 904:FWLIB/src/stm32f4xx_rtc.c ****   {
 1106              		.loc 1 904 6 is_stmt 0 view .LVU339
 1107 0028 60B9     		cbnz	r0, .L74
 1108 002a 0D46     		mov	r5, r1
 907:FWLIB/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 1109              		.loc 1 907 5 is_stmt 1 view .LVU340
 907:FWLIB/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 1110              		.loc 1 907 42 is_stmt 0 view .LVU341
 1111 002c 3846     		mov	r0, r7
 1112              	.LVL66:
 907:FWLIB/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 1113              		.loc 1 907 42 view .LVU342
 1114 002e FFF7FEFF 		bl	RTC_Bcd2ToByte
 1115              	.LVL67:
 907:FWLIB/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 1116              		.loc 1 907 31 view .LVU343
 1117 0032 2870     		strb	r0, [r5]
 908:FWLIB/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
ARM GAS  /tmp/cc7uya1D.s 			page 74


 1118              		.loc 1 908 5 is_stmt 1 view .LVU344
 908:FWLIB/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 1119              		.loc 1 908 44 is_stmt 0 view .LVU345
 1120 0034 3046     		mov	r0, r6
 1121 0036 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1122              	.LVL68:
 908:FWLIB/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 1123              		.loc 1 908 33 view .LVU346
 1124 003a 6870     		strb	r0, [r5, #1]
 909:FWLIB/src/stm32f4xx_rtc.c ****   }
 1125              		.loc 1 909 5 is_stmt 1 view .LVU347
 909:FWLIB/src/stm32f4xx_rtc.c ****   }
 1126              		.loc 1 909 44 is_stmt 0 view .LVU348
 1127 003c 2046     		mov	r0, r4
 1128 003e FFF7FEFF 		bl	RTC_Bcd2ToByte
 1129              	.LVL69:
 909:FWLIB/src/stm32f4xx_rtc.c ****   }
 1130              		.loc 1 909 33 view .LVU349
 1131 0042 A870     		strb	r0, [r5, #2]
 1132              	.LVL70:
 1133              	.L74:
 911:FWLIB/src/stm32f4xx_rtc.c **** 
 1134              		.loc 1 911 1 view .LVU350
 1135 0044 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1136              	.L78:
 1137 0046 00BF     		.align	2
 1138              	.L77:
 1139 0048 00280040 		.word	1073752064
 1140              		.cfi_endproc
 1141              	.LFE134:
 1143              		.section	.text.RTC_GetSubSecond,"ax",%progbits
 1144              		.align	1
 1145              		.global	RTC_GetSubSecond
 1146              		.syntax unified
 1147              		.thumb
 1148              		.thumb_func
 1149              		.fpu fpv4-sp-d16
 1151              	RTC_GetSubSecond:
 1152              	.LFB135:
 921:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1153              		.loc 1 921 1 is_stmt 1 view -0
 1154              		.cfi_startproc
 1155              		@ args = 0, pretend = 0, frame = 0
 1156              		@ frame_needed = 0, uses_anonymous_args = 0
 1157              		@ link register save eliminated.
 922:FWLIB/src/stm32f4xx_rtc.c ****   
 1158              		.loc 1 922 3 view .LVU352
 1159              	.LVL71:
 925:FWLIB/src/stm32f4xx_rtc.c ****   
 1160              		.loc 1 925 3 view .LVU353
 925:FWLIB/src/stm32f4xx_rtc.c ****   
 1161              		.loc 1 925 10 is_stmt 0 view .LVU354
 1162 0000 014B     		ldr	r3, .L80
 1163 0002 986A     		ldr	r0, [r3, #40]
 1164              	.LVL72:
 928:FWLIB/src/stm32f4xx_rtc.c ****   
 1165              		.loc 1 928 3 is_stmt 1 view .LVU355
ARM GAS  /tmp/cc7uya1D.s 			page 75


 1166 0004 5B68     		ldr	r3, [r3, #4]
 930:FWLIB/src/stm32f4xx_rtc.c **** }
 1167              		.loc 1 930 3 view .LVU356
 931:FWLIB/src/stm32f4xx_rtc.c **** 
 1168              		.loc 1 931 1 is_stmt 0 view .LVU357
 1169 0006 7047     		bx	lr
 1170              	.L81:
 1171              		.align	2
 1172              	.L80:
 1173 0008 00280040 		.word	1073752064
 1174              		.cfi_endproc
 1175              	.LFE135:
 1177              		.section	.text.RTC_SetDate,"ax",%progbits
 1178              		.align	1
 1179              		.global	RTC_SetDate
 1180              		.syntax unified
 1181              		.thumb
 1182              		.thumb_func
 1183              		.fpu fpv4-sp-d16
 1185              	RTC_SetDate:
 1186              	.LVL73:
 1187              	.LFB136:
 946:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1188              		.loc 1 946 1 is_stmt 1 view -0
 1189              		.cfi_startproc
 1190              		@ args = 0, pretend = 0, frame = 0
 1191              		@ frame_needed = 0, uses_anonymous_args = 0
 946:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1192              		.loc 1 946 1 is_stmt 0 view .LVU359
 1193 0000 38B5     		push	{r3, r4, r5, lr}
 1194              	.LCFI14:
 1195              		.cfi_def_cfa_offset 16
 1196              		.cfi_offset 3, -16
 1197              		.cfi_offset 4, -12
 1198              		.cfi_offset 5, -8
 1199              		.cfi_offset 14, -4
 1200 0002 0D46     		mov	r5, r1
 947:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 1201              		.loc 1 947 3 is_stmt 1 view .LVU360
 1202              	.LVL74:
 948:FWLIB/src/stm32f4xx_rtc.c ****   
 1203              		.loc 1 948 3 view .LVU361
 951:FWLIB/src/stm32f4xx_rtc.c **** 
 1204              		.loc 1 951 3 view .LVU362
 953:FWLIB/src/stm32f4xx_rtc.c ****   {
 1205              		.loc 1 953 3 view .LVU363
 953:FWLIB/src/stm32f4xx_rtc.c ****   {
 1206              		.loc 1 953 6 is_stmt 0 view .LVU364
 1207 0004 0246     		mov	r2, r0
 1208 0006 38B9     		cbnz	r0, .L83
 953:FWLIB/src/stm32f4xx_rtc.c ****   {
 1209              		.loc 1 953 57 discriminator 1 view .LVU365
 1210 0008 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 953:FWLIB/src/stm32f4xx_rtc.c ****   {
 1211              		.loc 1 953 38 discriminator 1 view .LVU366
 1212 000a 13F0100F 		tst	r3, #16
 1213 000e 03D0     		beq	.L83
ARM GAS  /tmp/cc7uya1D.s 			page 76


 955:FWLIB/src/stm32f4xx_rtc.c ****   }  
 1214              		.loc 1 955 5 is_stmt 1 view .LVU367
 955:FWLIB/src/stm32f4xx_rtc.c ****   }  
 1215              		.loc 1 955 60 is_stmt 0 view .LVU368
 1216 0010 03F0EF03 		and	r3, r3, #239
 955:FWLIB/src/stm32f4xx_rtc.c ****   }  
 1217              		.loc 1 955 81 view .LVU369
 1218 0014 0A33     		adds	r3, r3, #10
 955:FWLIB/src/stm32f4xx_rtc.c ****   }  
 1219              		.loc 1 955 31 view .LVU370
 1220 0016 4B70     		strb	r3, [r1, #1]
 1221              	.L83:
 957:FWLIB/src/stm32f4xx_rtc.c ****   {
 1222              		.loc 1 957 3 is_stmt 1 view .LVU371
 969:FWLIB/src/stm32f4xx_rtc.c ****   }
 1223              		.loc 1 969 5 view .LVU372
 971:FWLIB/src/stm32f4xx_rtc.c **** 
 1224              		.loc 1 971 3 view .LVU373
 974:FWLIB/src/stm32f4xx_rtc.c ****   {
 1225              		.loc 1 974 3 view .LVU374
 974:FWLIB/src/stm32f4xx_rtc.c ****   {
 1226              		.loc 1 974 6 is_stmt 0 view .LVU375
 1227 0018 BAB1     		cbz	r2, .L84
 976:FWLIB/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1228              		.loc 1 976 5 is_stmt 1 view .LVU376
 976:FWLIB/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1229              		.loc 1 976 41 is_stmt 0 view .LVU377
 1230 001a E878     		ldrb	r0, [r5, #3]	@ zero_extendqisi2
 1231              	.LVL75:
 977:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 1232              		.loc 1 977 41 view .LVU378
 1233 001c 6C78     		ldrb	r4, [r5, #1]	@ zero_extendqisi2
 977:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 1234              		.loc 1 977 54 view .LVU379
 1235 001e 2402     		lsls	r4, r4, #8
 976:FWLIB/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1236              		.loc 1 976 60 view .LVU380
 1237 0020 44EA0044 		orr	r4, r4, r0, lsl #16
 978:FWLIB/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 1238              		.loc 1 978 40 view .LVU381
 1239 0024 A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 977:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 1240              		.loc 1 977 60 view .LVU382
 1241 0026 0443     		orrs	r4, r4, r0
 979:FWLIB/src/stm32f4xx_rtc.c ****   }  
 1242              		.loc 1 979 41 view .LVU383
 1243 0028 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 976:FWLIB/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1244              		.loc 1 976 12 view .LVU384
 1245 002a 44EA4034 		orr	r4, r4, r0, lsl #13
 1246              	.LVL76:
 1247              	.L85:
 990:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1248              		.loc 1 990 3 is_stmt 1 view .LVU385
 990:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1249              		.loc 1 990 12 is_stmt 0 view .LVU386
 1250 002e 1A4B     		ldr	r3, .L92
ARM GAS  /tmp/cc7uya1D.s 			page 77


 1251 0030 CA22     		movs	r2, #202
 1252 0032 5A62     		str	r2, [r3, #36]
 991:FWLIB/src/stm32f4xx_rtc.c **** 
 1253              		.loc 1 991 3 is_stmt 1 view .LVU387
 991:FWLIB/src/stm32f4xx_rtc.c **** 
 1254              		.loc 1 991 12 is_stmt 0 view .LVU388
 1255 0034 5322     		movs	r2, #83
 1256 0036 5A62     		str	r2, [r3, #36]
 994:FWLIB/src/stm32f4xx_rtc.c ****   {
 1257              		.loc 1 994 3 is_stmt 1 view .LVU389
 994:FWLIB/src/stm32f4xx_rtc.c ****   {
 1258              		.loc 1 994 7 is_stmt 0 view .LVU390
 1259 0038 FFF7FEFF 		bl	RTC_EnterInitMode
 1260              	.LVL77:
 994:FWLIB/src/stm32f4xx_rtc.c ****   {
 1261              		.loc 1 994 6 view .LVU391
 1262 003c 0346     		mov	r3, r0
 1263 003e A8B9     		cbnz	r0, .L90
 1264              	.LVL78:
 1265              	.L86:
1024:FWLIB/src/stm32f4xx_rtc.c ****   
 1266              		.loc 1 1024 3 is_stmt 1 view .LVU392
1024:FWLIB/src/stm32f4xx_rtc.c ****   
 1267              		.loc 1 1024 12 is_stmt 0 view .LVU393
 1268 0040 154A     		ldr	r2, .L92
 1269 0042 FF21     		movs	r1, #255
 1270 0044 5162     		str	r1, [r2, #36]
1026:FWLIB/src/stm32f4xx_rtc.c **** }
 1271              		.loc 1 1026 3 is_stmt 1 view .LVU394
1027:FWLIB/src/stm32f4xx_rtc.c **** 
 1272              		.loc 1 1027 1 is_stmt 0 view .LVU395
 1273 0046 1846     		mov	r0, r3
 1274 0048 38BD     		pop	{r3, r4, r5, pc}
 1275              	.LVL79:
 1276              	.L84:
 983:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1277              		.loc 1 983 5 is_stmt 1 view .LVU396
 983:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1278              		.loc 1 983 26 is_stmt 0 view .LVU397
 1279 004a E878     		ldrb	r0, [r5, #3]	@ zero_extendqisi2
 1280              	.LVL80:
 983:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1281              		.loc 1 983 26 view .LVU398
 1282 004c FFF7FEFF 		bl	RTC_ByteToBcd2
 1283              	.LVL81:
 983:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1284              		.loc 1 983 67 view .LVU399
 1285 0050 0404     		lsls	r4, r0, #16
 984:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 1286              		.loc 1 984 26 view .LVU400
 1287 0052 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 1288 0054 FFF7FEFF 		bl	RTC_ByteToBcd2
 1289              	.LVL82:
 983:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1290              		.loc 1 983 74 view .LVU401
 1291 0058 44EA0024 		orr	r4, r4, r0, lsl #8
 985:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
ARM GAS  /tmp/cc7uya1D.s 			page 78


 1292              		.loc 1 985 26 view .LVU402
 1293 005c A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 1294 005e FFF7FEFF 		bl	RTC_ByteToBcd2
 1295              	.LVL83:
 984:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 1296              		.loc 1 984 74 view .LVU403
 1297 0062 0443     		orrs	r4, r4, r0
 986:FWLIB/src/stm32f4xx_rtc.c ****   }
 1298              		.loc 1 986 40 view .LVU404
 1299 0064 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 983:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1300              		.loc 1 983 12 view .LVU405
 1301 0066 44EA4034 		orr	r4, r4, r0, lsl #13
 1302              	.LVL84:
 983:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1303              		.loc 1 983 12 view .LVU406
 1304 006a E0E7     		b	.L85
 1305              	.L90:
1001:FWLIB/src/stm32f4xx_rtc.c **** 
 1306              		.loc 1 1001 5 is_stmt 1 view .LVU407
1001:FWLIB/src/stm32f4xx_rtc.c **** 
 1307              		.loc 1 1001 15 is_stmt 0 view .LVU408
 1308 006c 24F07F44 		bic	r4, r4, #-16777216
 1309              	.LVL85:
1001:FWLIB/src/stm32f4xx_rtc.c **** 
 1310              		.loc 1 1001 15 view .LVU409
 1311 0070 24F0C004 		bic	r4, r4, #192
1001:FWLIB/src/stm32f4xx_rtc.c **** 
 1312              		.loc 1 1001 13 view .LVU410
 1313 0074 084D     		ldr	r5, .L92
 1314              	.LVL86:
1001:FWLIB/src/stm32f4xx_rtc.c **** 
 1315              		.loc 1 1001 13 view .LVU411
 1316 0076 6C60     		str	r4, [r5, #4]
1004:FWLIB/src/stm32f4xx_rtc.c **** 
 1317              		.loc 1 1004 5 is_stmt 1 view .LVU412
 1318 0078 FFF7FEFF 		bl	RTC_ExitInitMode
 1319              	.LVL87:
1007:FWLIB/src/stm32f4xx_rtc.c ****     {
 1320              		.loc 1 1007 5 view .LVU413
1007:FWLIB/src/stm32f4xx_rtc.c ****     {
 1321              		.loc 1 1007 13 is_stmt 0 view .LVU414
 1322 007c AB68     		ldr	r3, [r5, #8]
1007:FWLIB/src/stm32f4xx_rtc.c ****     {
 1323              		.loc 1 1007 8 view .LVU415
 1324 007e 13F0200F 		tst	r3, #32
 1325 0082 01D0     		beq	.L91
1020:FWLIB/src/stm32f4xx_rtc.c ****     }
 1326              		.loc 1 1020 14 view .LVU416
 1327 0084 0123     		movs	r3, #1
 1328 0086 DBE7     		b	.L86
 1329              	.L91:
1009:FWLIB/src/stm32f4xx_rtc.c ****     {
 1330              		.loc 1 1009 5 is_stmt 1 view .LVU417
1009:FWLIB/src/stm32f4xx_rtc.c ****     {
 1331              		.loc 1 1009 8 is_stmt 0 view .LVU418
 1332 0088 FFF7FEFF 		bl	RTC_WaitForSynchro
ARM GAS  /tmp/cc7uya1D.s 			page 79


 1333              	.LVL88:
1009:FWLIB/src/stm32f4xx_rtc.c ****     {
 1334              		.loc 1 1009 7 view .LVU419
 1335 008c 0346     		mov	r3, r0
 1336 008e 0028     		cmp	r0, #0
 1337 0090 D6D0     		beq	.L86
1015:FWLIB/src/stm32f4xx_rtc.c ****     }
 1338              		.loc 1 1015 14 view .LVU420
 1339 0092 0123     		movs	r3, #1
 1340 0094 D4E7     		b	.L86
 1341              	.L93:
 1342 0096 00BF     		.align	2
 1343              	.L92:
 1344 0098 00280040 		.word	1073752064
 1345              		.cfi_endproc
 1346              	.LFE136:
 1348              		.section	.text.RTC_DateStructInit,"ax",%progbits
 1349              		.align	1
 1350              		.global	RTC_DateStructInit
 1351              		.syntax unified
 1352              		.thumb
 1353              		.thumb_func
 1354              		.fpu fpv4-sp-d16
 1356              	RTC_DateStructInit:
 1357              	.LVL89:
 1358              	.LFB137:
1037:FWLIB/src/stm32f4xx_rtc.c ****   /* Monday, January 01 xx00 */
 1359              		.loc 1 1037 1 is_stmt 1 view -0
 1360              		.cfi_startproc
 1361              		@ args = 0, pretend = 0, frame = 0
 1362              		@ frame_needed = 0, uses_anonymous_args = 0
 1363              		@ link register save eliminated.
1039:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
 1364              		.loc 1 1039 3 view .LVU422
1039:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
 1365              		.loc 1 1039 31 is_stmt 0 view .LVU423
 1366 0000 0123     		movs	r3, #1
 1367 0002 0370     		strb	r3, [r0]
1040:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
 1368              		.loc 1 1040 3 is_stmt 1 view .LVU424
1040:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
 1369              		.loc 1 1040 28 is_stmt 0 view .LVU425
 1370 0004 8370     		strb	r3, [r0, #2]
1041:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
 1371              		.loc 1 1041 3 is_stmt 1 view .LVU426
1041:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
 1372              		.loc 1 1041 29 is_stmt 0 view .LVU427
 1373 0006 4370     		strb	r3, [r0, #1]
1042:FWLIB/src/stm32f4xx_rtc.c **** }
 1374              		.loc 1 1042 3 is_stmt 1 view .LVU428
1042:FWLIB/src/stm32f4xx_rtc.c **** }
 1375              		.loc 1 1042 28 is_stmt 0 view .LVU429
 1376 0008 0023     		movs	r3, #0
 1377 000a C370     		strb	r3, [r0, #3]
1043:FWLIB/src/stm32f4xx_rtc.c **** 
 1378              		.loc 1 1043 1 view .LVU430
 1379 000c 7047     		bx	lr
ARM GAS  /tmp/cc7uya1D.s 			page 80


 1380              		.cfi_endproc
 1381              	.LFE137:
 1383              		.section	.text.RTC_GetDate,"ax",%progbits
 1384              		.align	1
 1385              		.global	RTC_GetDate
 1386              		.syntax unified
 1387              		.thumb
 1388              		.thumb_func
 1389              		.fpu fpv4-sp-d16
 1391              	RTC_GetDate:
 1392              	.LVL90:
 1393              	.LFB138:
1056:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1394              		.loc 1 1056 1 is_stmt 1 view -0
 1395              		.cfi_startproc
 1396              		@ args = 0, pretend = 0, frame = 0
 1397              		@ frame_needed = 0, uses_anonymous_args = 0
1056:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1398              		.loc 1 1056 1 is_stmt 0 view .LVU432
 1399 0000 70B5     		push	{r4, r5, r6, lr}
 1400              	.LCFI15:
 1401              		.cfi_def_cfa_offset 16
 1402              		.cfi_offset 4, -16
 1403              		.cfi_offset 5, -12
 1404              		.cfi_offset 6, -8
 1405              		.cfi_offset 14, -4
1057:FWLIB/src/stm32f4xx_rtc.c **** 
 1406              		.loc 1 1057 3 is_stmt 1 view .LVU433
 1407              	.LVL91:
1060:FWLIB/src/stm32f4xx_rtc.c ****   
 1408              		.loc 1 1060 3 view .LVU434
1063:FWLIB/src/stm32f4xx_rtc.c **** 
 1409              		.loc 1 1063 3 view .LVU435
1063:FWLIB/src/stm32f4xx_rtc.c **** 
 1410              		.loc 1 1063 26 is_stmt 0 view .LVU436
 1411 0002 104B     		ldr	r3, .L98
 1412 0004 5B68     		ldr	r3, [r3, #4]
1063:FWLIB/src/stm32f4xx_rtc.c **** 
 1413              		.loc 1 1063 10 view .LVU437
 1414 0006 23F07F43 		bic	r3, r3, #-16777216
 1415 000a 23F0C003 		bic	r3, r3, #192
 1416              	.LVL92:
1066:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1417              		.loc 1 1066 3 is_stmt 1 view .LVU438
1066:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1418              		.loc 1 1066 30 is_stmt 0 view .LVU439
 1419 000e 1A0C     		lsrs	r2, r3, #16
1066:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1420              		.loc 1 1066 28 view .LVU440
 1421 0010 CA70     		strb	r2, [r1, #3]
1067:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 1422              		.loc 1 1067 3 is_stmt 1 view .LVU441
1067:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 1423              		.loc 1 1067 31 is_stmt 0 view .LVU442
 1424 0012 C3F30426 		ubfx	r6, r3, #8, #5
1067:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 1425              		.loc 1 1067 29 view .LVU443
ARM GAS  /tmp/cc7uya1D.s 			page 81


 1426 0016 4E70     		strb	r6, [r1, #1]
1068:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 1427              		.loc 1 1068 3 is_stmt 1 view .LVU444
1068:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 1428              		.loc 1 1068 30 is_stmt 0 view .LVU445
 1429 0018 03F03F05 		and	r5, r3, #63
1068:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 1430              		.loc 1 1068 28 view .LVU446
 1431 001c 8D70     		strb	r5, [r1, #2]
1069:FWLIB/src/stm32f4xx_rtc.c **** 
 1432              		.loc 1 1069 3 is_stmt 1 view .LVU447
1069:FWLIB/src/stm32f4xx_rtc.c **** 
 1433              		.loc 1 1069 33 is_stmt 0 view .LVU448
 1434 001e C3F34233 		ubfx	r3, r3, #13, #3
 1435              	.LVL93:
1069:FWLIB/src/stm32f4xx_rtc.c **** 
 1436              		.loc 1 1069 31 view .LVU449
 1437 0022 0B70     		strb	r3, [r1]
1072:FWLIB/src/stm32f4xx_rtc.c ****   {
 1438              		.loc 1 1072 3 is_stmt 1 view .LVU450
1072:FWLIB/src/stm32f4xx_rtc.c ****   {
 1439              		.loc 1 1072 6 is_stmt 0 view .LVU451
 1440 0024 60B9     		cbnz	r0, .L95
 1441 0026 0C46     		mov	r4, r1
1075:FWLIB/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1442              		.loc 1 1075 5 is_stmt 1 view .LVU452
1075:FWLIB/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1443              		.loc 1 1075 41 is_stmt 0 view .LVU453
 1444 0028 1046     		mov	r0, r2
 1445              	.LVL94:
1075:FWLIB/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1446              		.loc 1 1075 41 view .LVU454
 1447 002a FFF7FEFF 		bl	RTC_Bcd2ToByte
 1448              	.LVL95:
1075:FWLIB/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1449              		.loc 1 1075 30 view .LVU455
 1450 002e E070     		strb	r0, [r4, #3]
1076:FWLIB/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1451              		.loc 1 1076 5 is_stmt 1 view .LVU456
1076:FWLIB/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1452              		.loc 1 1076 42 is_stmt 0 view .LVU457
 1453 0030 3046     		mov	r0, r6
 1454 0032 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1455              	.LVL96:
1076:FWLIB/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1456              		.loc 1 1076 31 view .LVU458
 1457 0036 6070     		strb	r0, [r4, #1]
1077:FWLIB/src/stm32f4xx_rtc.c ****   }
 1458              		.loc 1 1077 5 is_stmt 1 view .LVU459
1077:FWLIB/src/stm32f4xx_rtc.c ****   }
 1459              		.loc 1 1077 41 is_stmt 0 view .LVU460
 1460 0038 2846     		mov	r0, r5
 1461 003a FFF7FEFF 		bl	RTC_Bcd2ToByte
 1462              	.LVL97:
1077:FWLIB/src/stm32f4xx_rtc.c ****   }
 1463              		.loc 1 1077 30 view .LVU461
 1464 003e A070     		strb	r0, [r4, #2]
ARM GAS  /tmp/cc7uya1D.s 			page 82


 1465              	.LVL98:
 1466              	.L95:
1079:FWLIB/src/stm32f4xx_rtc.c **** 
 1467              		.loc 1 1079 1 view .LVU462
 1468 0040 70BD     		pop	{r4, r5, r6, pc}
 1469              	.L99:
 1470 0042 00BF     		.align	2
 1471              	.L98:
 1472 0044 00280040 		.word	1073752064
 1473              		.cfi_endproc
 1474              	.LFE138:
 1476              		.section	.text.RTC_SetAlarm,"ax",%progbits
 1477              		.align	1
 1478              		.global	RTC_SetAlarm
 1479              		.syntax unified
 1480              		.thumb
 1481              		.thumb_func
 1482              		.fpu fpv4-sp-d16
 1484              	RTC_SetAlarm:
 1485              	.LVL99:
 1486              	.LFB139:
1116:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1487              		.loc 1 1116 1 is_stmt 1 view -0
 1488              		.cfi_startproc
 1489              		@ args = 0, pretend = 0, frame = 0
 1490              		@ frame_needed = 0, uses_anonymous_args = 0
1116:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1491              		.loc 1 1116 1 is_stmt 0 view .LVU464
 1492 0000 70B5     		push	{r4, r5, r6, lr}
 1493              	.LCFI16:
 1494              		.cfi_def_cfa_offset 16
 1495              		.cfi_offset 4, -16
 1496              		.cfi_offset 5, -12
 1497              		.cfi_offset 6, -8
 1498              		.cfi_offset 14, -4
 1499 0002 0D46     		mov	r5, r1
 1500 0004 1646     		mov	r6, r2
1117:FWLIB/src/stm32f4xx_rtc.c ****   
 1501              		.loc 1 1117 3 is_stmt 1 view .LVU465
 1502              	.LVL100:
1120:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
 1503              		.loc 1 1120 3 view .LVU466
1121:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
 1504              		.loc 1 1121 3 view .LVU467
1122:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));
 1505              		.loc 1 1122 3 view .LVU468
1123:FWLIB/src/stm32f4xx_rtc.c **** 
 1506              		.loc 1 1123 3 view .LVU469
1125:FWLIB/src/stm32f4xx_rtc.c ****   {
 1507              		.loc 1 1125 3 view .LVU470
1125:FWLIB/src/stm32f4xx_rtc.c ****   {
 1508              		.loc 1 1125 6 is_stmt 0 view .LVU471
 1509 0006 0346     		mov	r3, r0
 1510 0008 30BB     		cbnz	r0, .L101
1127:FWLIB/src/stm32f4xx_rtc.c ****     {
 1511              		.loc 1 1127 5 is_stmt 1 view .LVU472
1127:FWLIB/src/stm32f4xx_rtc.c ****     {
ARM GAS  /tmp/cc7uya1D.s 			page 83


 1512              		.loc 1 1127 13 is_stmt 0 view .LVU473
 1513 000a 254A     		ldr	r2, .L111
 1514              	.LVL101:
1127:FWLIB/src/stm32f4xx_rtc.c ****     {
 1515              		.loc 1 1127 13 view .LVU474
 1516 000c 9268     		ldr	r2, [r2, #8]
1127:FWLIB/src/stm32f4xx_rtc.c ****     {
 1517              		.loc 1 1127 8 view .LVU475
 1518 000e 12F0400F 		tst	r2, #64
 1519 0012 01D1     		bne	.L103
1134:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
 1520              		.loc 1 1134 7 is_stmt 1 view .LVU476
1134:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
 1521              		.loc 1 1134 46 is_stmt 0 view .LVU477
 1522 0014 0022     		movs	r2, #0
 1523 0016 F270     		strb	r2, [r6, #3]
1135:FWLIB/src/stm32f4xx_rtc.c ****     }
 1524              		.loc 1 1135 7 is_stmt 1 view .LVU478
1137:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds));
 1525              		.loc 1 1137 5 view .LVU479
1138:FWLIB/src/stm32f4xx_rtc.c ****     
 1526              		.loc 1 1138 5 view .LVU480
1140:FWLIB/src/stm32f4xx_rtc.c ****     {
 1527              		.loc 1 1140 5 view .LVU481
 1528              	.L103:
1174:FWLIB/src/stm32f4xx_rtc.c ****     }    
 1529              		.loc 1 1174 7 view .LVU482
1179:FWLIB/src/stm32f4xx_rtc.c ****   {
 1530              		.loc 1 1179 3 view .LVU483
1179:FWLIB/src/stm32f4xx_rtc.c ****   {
 1531              		.loc 1 1179 6 is_stmt 0 view .LVU484
 1532 0018 33B3     		cbz	r3, .L105
1181:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1533              		.loc 1 1181 5 is_stmt 1 view .LVU485
1181:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1534              		.loc 1 1181 57 is_stmt 0 view .LVU486
 1535 001a 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
1182:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1536              		.loc 1 1182 57 view .LVU487
 1537 001c 7078     		ldrb	r0, [r6, #1]	@ zero_extendqisi2
 1538              	.LVL102:
1182:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1539              		.loc 1 1182 71 view .LVU488
 1540 001e 0002     		lsls	r0, r0, #8
1181:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1541              		.loc 1 1181 76 view .LVU489
 1542 0020 40EA0340 		orr	r0, r0, r3, lsl #16
1183:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1543              		.loc 1 1183 56 view .LVU490
 1544 0024 B378     		ldrb	r3, [r6, #2]	@ zero_extendqisi2
1182:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1545              		.loc 1 1182 77 view .LVU491
 1546 0026 1843     		orrs	r0, r0, r3
1184:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1547              		.loc 1 1184 57 view .LVU492
 1548 0028 F378     		ldrb	r3, [r6, #3]	@ zero_extendqisi2
1183:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
ARM GAS  /tmp/cc7uya1D.s 			page 84


 1549              		.loc 1 1183 70 view .LVU493
 1550 002a 40EA0340 		orr	r0, r0, r3, lsl #16
1185:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1551              		.loc 1 1185 42 view .LVU494
 1552 002e 337B     		ldrb	r3, [r6, #12]	@ zero_extendqisi2
1184:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1553              		.loc 1 1184 74 view .LVU495
 1554 0030 40EA0360 		orr	r0, r0, r3, lsl #24
1186:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1555              		.loc 1 1186 41 view .LVU496
 1556 0034 B368     		ldr	r3, [r6, #8]
1185:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1557              		.loc 1 1185 73 view .LVU497
 1558 0036 1843     		orrs	r0, r0, r3
1187:FWLIB/src/stm32f4xx_rtc.c ****   }  
 1559              		.loc 1 1187 41 view .LVU498
 1560 0038 7368     		ldr	r3, [r6, #4]
1181:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1561              		.loc 1 1181 12 view .LVU499
 1562 003a 1843     		orrs	r0, r0, r3
 1563              	.LVL103:
 1564              	.L106:
1201:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1565              		.loc 1 1201 3 is_stmt 1 view .LVU500
1201:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1566              		.loc 1 1201 12 is_stmt 0 view .LVU501
 1567 003c 184B     		ldr	r3, .L111
 1568 003e CA22     		movs	r2, #202
 1569 0040 5A62     		str	r2, [r3, #36]
1202:FWLIB/src/stm32f4xx_rtc.c **** 
 1570              		.loc 1 1202 3 is_stmt 1 view .LVU502
1202:FWLIB/src/stm32f4xx_rtc.c **** 
 1571              		.loc 1 1202 12 is_stmt 0 view .LVU503
 1572 0042 5322     		movs	r2, #83
 1573 0044 5A62     		str	r2, [r3, #36]
1205:FWLIB/src/stm32f4xx_rtc.c ****   {
 1574              		.loc 1 1205 3 is_stmt 1 view .LVU504
1205:FWLIB/src/stm32f4xx_rtc.c ****   {
 1575              		.loc 1 1205 6 is_stmt 0 view .LVU505
 1576 0046 B5F5807F 		cmp	r5, #256
 1577 004a 27D0     		beq	.L110
1211:FWLIB/src/stm32f4xx_rtc.c ****   }
 1578              		.loc 1 1211 5 is_stmt 1 view .LVU506
1211:FWLIB/src/stm32f4xx_rtc.c ****   }
 1579              		.loc 1 1211 17 is_stmt 0 view .LVU507
 1580 004c 144B     		ldr	r3, .L111
 1581 004e 1862     		str	r0, [r3, #32]
 1582              	.L108:
1215:FWLIB/src/stm32f4xx_rtc.c **** }
 1583              		.loc 1 1215 3 is_stmt 1 view .LVU508
1215:FWLIB/src/stm32f4xx_rtc.c **** }
 1584              		.loc 1 1215 12 is_stmt 0 view .LVU509
 1585 0050 134B     		ldr	r3, .L111
 1586 0052 FF22     		movs	r2, #255
 1587 0054 5A62     		str	r2, [r3, #36]
1216:FWLIB/src/stm32f4xx_rtc.c **** 
 1588              		.loc 1 1216 1 view .LVU510
ARM GAS  /tmp/cc7uya1D.s 			page 85


 1589 0056 70BD     		pop	{r4, r5, r6, pc}
 1590              	.LVL104:
 1591              	.L101:
1151:FWLIB/src/stm32f4xx_rtc.c ****     {
 1592              		.loc 1 1151 5 is_stmt 1 view .LVU511
1151:FWLIB/src/stm32f4xx_rtc.c ****     {
 1593              		.loc 1 1151 13 is_stmt 0 view .LVU512
 1594 0058 114A     		ldr	r2, .L111
 1595              	.LVL105:
1151:FWLIB/src/stm32f4xx_rtc.c ****     {
 1596              		.loc 1 1151 13 view .LVU513
 1597 005a 9268     		ldr	r2, [r2, #8]
1151:FWLIB/src/stm32f4xx_rtc.c ****     {
 1598              		.loc 1 1151 8 view .LVU514
 1599 005c 12F0400F 		tst	r2, #64
 1600 0060 DAD1     		bne	.L103
1159:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
 1601              		.loc 1 1159 7 is_stmt 1 view .LVU515
1159:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
 1602              		.loc 1 1159 46 is_stmt 0 view .LVU516
 1603 0062 0022     		movs	r2, #0
 1604 0064 F270     		strb	r2, [r6, #3]
1160:FWLIB/src/stm32f4xx_rtc.c ****     }
 1605              		.loc 1 1160 7 is_stmt 1 view .LVU517
1163:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
 1606              		.loc 1 1163 5 view .LVU518
1164:FWLIB/src/stm32f4xx_rtc.c ****     
 1607              		.loc 1 1164 5 view .LVU519
1166:FWLIB/src/stm32f4xx_rtc.c ****     {
 1608              		.loc 1 1166 5 view .LVU520
 1609 0066 D7E7     		b	.L103
 1610              	.L105:
1191:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1611              		.loc 1 1191 5 view .LVU521
1191:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1612              		.loc 1 1191 26 is_stmt 0 view .LVU522
 1613 0068 3078     		ldrb	r0, [r6]	@ zero_extendqisi2
 1614              	.LVL106:
1191:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1615              		.loc 1 1191 26 view .LVU523
 1616 006a FFF7FEFF 		bl	RTC_ByteToBcd2
 1617              	.LVL107:
1191:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1618              		.loc 1 1191 83 view .LVU524
 1619 006e 0404     		lsls	r4, r0, #16
1192:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1620              		.loc 1 1192 26 view .LVU525
 1621 0070 7078     		ldrb	r0, [r6, #1]	@ zero_extendqisi2
 1622 0072 FFF7FEFF 		bl	RTC_ByteToBcd2
 1623              	.LVL108:
1191:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1624              		.loc 1 1191 90 view .LVU526
 1625 0076 44EA0024 		orr	r4, r4, r0, lsl #8
1193:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1626              		.loc 1 1193 26 view .LVU527
 1627 007a B078     		ldrb	r0, [r6, #2]	@ zero_extendqisi2
 1628 007c FFF7FEFF 		bl	RTC_ByteToBcd2
ARM GAS  /tmp/cc7uya1D.s 			page 86


 1629              	.LVL109:
1192:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1630              		.loc 1 1192 91 view .LVU528
 1631 0080 0443     		orrs	r4, r4, r0
1194:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1632              		.loc 1 1194 57 view .LVU529
 1633 0082 F078     		ldrb	r0, [r6, #3]	@ zero_extendqisi2
1193:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1634              		.loc 1 1193 86 view .LVU530
 1635 0084 44EA0044 		orr	r4, r4, r0, lsl #16
1195:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1636              		.loc 1 1195 26 view .LVU531
 1637 0088 307B     		ldrb	r0, [r6, #12]	@ zero_extendqisi2
 1638 008a FFF7FEFF 		bl	RTC_ByteToBcd2
 1639              	.LVL110:
1194:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1640              		.loc 1 1194 74 view .LVU532
 1641 008e 44EA0060 		orr	r0, r4, r0, lsl #24
1196:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1642              		.loc 1 1196 41 view .LVU533
 1643 0092 B468     		ldr	r4, [r6, #8]
1195:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1644              		.loc 1 1195 87 view .LVU534
 1645 0094 2043     		orrs	r0, r0, r4
1197:FWLIB/src/stm32f4xx_rtc.c ****   } 
 1646              		.loc 1 1197 41 view .LVU535
 1647 0096 7368     		ldr	r3, [r6, #4]
1191:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1648              		.loc 1 1191 12 view .LVU536
 1649 0098 1843     		orrs	r0, r0, r3
 1650              	.LVL111:
1191:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1651              		.loc 1 1191 12 view .LVU537
 1652 009a CFE7     		b	.L106
 1653              	.L110:
1207:FWLIB/src/stm32f4xx_rtc.c ****   }
 1654              		.loc 1 1207 5 is_stmt 1 view .LVU538
1207:FWLIB/src/stm32f4xx_rtc.c ****   }
 1655              		.loc 1 1207 17 is_stmt 0 view .LVU539
 1656 009c D861     		str	r0, [r3, #28]
 1657 009e D7E7     		b	.L108
 1658              	.L112:
 1659              		.align	2
 1660              	.L111:
 1661 00a0 00280040 		.word	1073752064
 1662              		.cfi_endproc
 1663              	.LFE139:
 1665              		.section	.text.RTC_AlarmStructInit,"ax",%progbits
 1666              		.align	1
 1667              		.global	RTC_AlarmStructInit
 1668              		.syntax unified
 1669              		.thumb
 1670              		.thumb_func
 1671              		.fpu fpv4-sp-d16
 1673              	RTC_AlarmStructInit:
 1674              	.LVL112:
 1675              	.LFB140:
ARM GAS  /tmp/cc7uya1D.s 			page 87


1227:FWLIB/src/stm32f4xx_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
 1676              		.loc 1 1227 1 is_stmt 1 view -0
 1677              		.cfi_startproc
 1678              		@ args = 0, pretend = 0, frame = 0
 1679              		@ frame_needed = 0, uses_anonymous_args = 0
 1680              		@ link register save eliminated.
1229:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 1681              		.loc 1 1229 3 view .LVU541
1229:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 1682              		.loc 1 1229 42 is_stmt 0 view .LVU542
 1683 0000 0023     		movs	r3, #0
 1684 0002 C370     		strb	r3, [r0, #3]
1230:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 1685              		.loc 1 1230 3 is_stmt 1 view .LVU543
1230:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 1686              		.loc 1 1230 44 is_stmt 0 view .LVU544
 1687 0004 0370     		strb	r3, [r0]
1231:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 1688              		.loc 1 1231 3 is_stmt 1 view .LVU545
1231:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 1689              		.loc 1 1231 46 is_stmt 0 view .LVU546
 1690 0006 4370     		strb	r3, [r0, #1]
1232:FWLIB/src/stm32f4xx_rtc.c **** 
 1691              		.loc 1 1232 3 is_stmt 1 view .LVU547
1232:FWLIB/src/stm32f4xx_rtc.c **** 
 1692              		.loc 1 1232 46 is_stmt 0 view .LVU548
 1693 0008 8370     		strb	r3, [r0, #2]
1235:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 1694              		.loc 1 1235 3 is_stmt 1 view .LVU549
1235:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 1695              		.loc 1 1235 44 is_stmt 0 view .LVU550
 1696 000a 8360     		str	r3, [r0, #8]
1236:FWLIB/src/stm32f4xx_rtc.c **** 
 1697              		.loc 1 1236 3 is_stmt 1 view .LVU551
1236:FWLIB/src/stm32f4xx_rtc.c **** 
 1698              		.loc 1 1236 41 is_stmt 0 view .LVU552
 1699 000c 0122     		movs	r2, #1
 1700 000e 0273     		strb	r2, [r0, #12]
1239:FWLIB/src/stm32f4xx_rtc.c **** }
 1701              		.loc 1 1239 3 is_stmt 1 view .LVU553
1239:FWLIB/src/stm32f4xx_rtc.c **** }
 1702              		.loc 1 1239 34 is_stmt 0 view .LVU554
 1703 0010 4360     		str	r3, [r0, #4]
1240:FWLIB/src/stm32f4xx_rtc.c **** 
 1704              		.loc 1 1240 1 view .LVU555
 1705 0012 7047     		bx	lr
 1706              		.cfi_endproc
 1707              	.LFE140:
 1709              		.section	.text.RTC_GetAlarm,"ax",%progbits
 1710              		.align	1
 1711              		.global	RTC_GetAlarm
 1712              		.syntax unified
 1713              		.thumb
 1714              		.thumb_func
 1715              		.fpu fpv4-sp-d16
 1717              	RTC_GetAlarm:
 1718              	.LVL113:
ARM GAS  /tmp/cc7uya1D.s 			page 88


 1719              	.LFB141:
1257:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1720              		.loc 1 1257 1 is_stmt 1 view -0
 1721              		.cfi_startproc
 1722              		@ args = 0, pretend = 0, frame = 0
 1723              		@ frame_needed = 0, uses_anonymous_args = 0
1257:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1724              		.loc 1 1257 1 is_stmt 0 view .LVU557
 1725 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1726              	.LCFI17:
 1727              		.cfi_def_cfa_offset 24
 1728              		.cfi_offset 3, -24
 1729              		.cfi_offset 4, -20
 1730              		.cfi_offset 5, -16
 1731              		.cfi_offset 6, -12
 1732              		.cfi_offset 7, -8
 1733              		.cfi_offset 14, -4
1258:FWLIB/src/stm32f4xx_rtc.c **** 
 1734              		.loc 1 1258 3 is_stmt 1 view .LVU558
 1735              	.LVL114:
1261:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm)); 
 1736              		.loc 1 1261 3 view .LVU559
1262:FWLIB/src/stm32f4xx_rtc.c **** 
 1737              		.loc 1 1262 3 view .LVU560
1265:FWLIB/src/stm32f4xx_rtc.c ****   {
 1738              		.loc 1 1265 3 view .LVU561
1265:FWLIB/src/stm32f4xx_rtc.c ****   {
 1739              		.loc 1 1265 6 is_stmt 0 view .LVU562
 1740 0002 B1F5807F 		cmp	r1, #256
 1741 0006 2CD0     		beq	.L119
1271:FWLIB/src/stm32f4xx_rtc.c ****   }
 1742              		.loc 1 1271 5 is_stmt 1 view .LVU563
1271:FWLIB/src/stm32f4xx_rtc.c ****   }
 1743              		.loc 1 1271 12 is_stmt 0 view .LVU564
 1744 0008 174B     		ldr	r3, .L120
 1745 000a 1B6A     		ldr	r3, [r3, #32]
 1746              	.LVL115:
 1747              	.L116:
1275:FWLIB/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
 1748              		.loc 1 1275 3 is_stmt 1 view .LVU565
1275:FWLIB/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
 1749              		.loc 1 1275 46 is_stmt 0 view .LVU566
 1750 000c C3F30741 		ubfx	r1, r3, #16, #8
 1751              	.LVL116:
1275:FWLIB/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
 1752              		.loc 1 1275 46 view .LVU567
 1753 0010 01F03F0C 		and	ip, r1, #63
1275:FWLIB/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
 1754              		.loc 1 1275 44 view .LVU568
 1755 0014 82F800C0 		strb	ip, [r2]
1277:FWLIB/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
 1756              		.loc 1 1277 3 is_stmt 1 view .LVU569
1277:FWLIB/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
 1757              		.loc 1 1277 48 is_stmt 0 view .LVU570
 1758 0018 C3F30626 		ubfx	r6, r3, #8, #7
1277:FWLIB/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
 1759              		.loc 1 1277 46 view .LVU571
ARM GAS  /tmp/cc7uya1D.s 			page 89


 1760 001c 5670     		strb	r6, [r2, #1]
1279:FWLIB/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_SU));
 1761              		.loc 1 1279 3 is_stmt 1 view .LVU572
1279:FWLIB/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_SU));
 1762              		.loc 1 1279 48 is_stmt 0 view .LVU573
 1763 001e 03F07F05 		and	r5, r3, #127
1279:FWLIB/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_SU));
 1764              		.loc 1 1279 46 view .LVU574
 1765 0022 9570     		strb	r5, [r2, #2]
1281:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 1766              		.loc 1 1281 3 is_stmt 1 view .LVU575
1281:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 1767              		.loc 1 1281 44 is_stmt 0 view .LVU576
 1768 0024 01F04001 		and	r1, r1, #64
1281:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 1769              		.loc 1 1281 42 view .LVU577
 1770 0028 D170     		strb	r1, [r2, #3]
1282:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 1771              		.loc 1 1282 3 is_stmt 1 view .LVU578
1282:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 1772              		.loc 1 1282 43 is_stmt 0 view .LVU579
 1773 002a C3F30567 		ubfx	r7, r3, #24, #6
1282:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 1774              		.loc 1 1282 41 view .LVU580
 1775 002e 1773     		strb	r7, [r2, #12]
1283:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 1776              		.loc 1 1283 3 is_stmt 1 view .LVU581
1283:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 1777              		.loc 1 1283 46 is_stmt 0 view .LVU582
 1778 0030 03F08041 		and	r1, r3, #1073741824
1283:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 1779              		.loc 1 1283 44 view .LVU583
 1780 0034 9160     		str	r1, [r2, #8]
1284:FWLIB/src/stm32f4xx_rtc.c **** 
 1781              		.loc 1 1284 3 is_stmt 1 view .LVU584
1284:FWLIB/src/stm32f4xx_rtc.c **** 
 1782              		.loc 1 1284 36 is_stmt 0 view .LVU585
 1783 0036 03F08033 		and	r3, r3, #-2139062144
 1784              	.LVL117:
1284:FWLIB/src/stm32f4xx_rtc.c **** 
 1785              		.loc 1 1284 34 view .LVU586
 1786 003a 5360     		str	r3, [r2, #4]
1286:FWLIB/src/stm32f4xx_rtc.c ****   {
 1787              		.loc 1 1286 3 is_stmt 1 view .LVU587
1286:FWLIB/src/stm32f4xx_rtc.c ****   {
 1788              		.loc 1 1286 6 is_stmt 0 view .LVU588
 1789 003c 80B9     		cbnz	r0, .L114
 1790 003e 1446     		mov	r4, r2
1288:FWLIB/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
 1791              		.loc 1 1288 5 is_stmt 1 view .LVU589
1288:FWLIB/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
 1792              		.loc 1 1288 48 is_stmt 0 view .LVU590
 1793 0040 6046     		mov	r0, ip
 1794              	.LVL118:
1288:FWLIB/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
 1795              		.loc 1 1288 48 view .LVU591
 1796 0042 FFF7FEFF 		bl	RTC_Bcd2ToByte
ARM GAS  /tmp/cc7uya1D.s 			page 90


 1797              	.LVL119:
1288:FWLIB/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
 1798              		.loc 1 1288 46 view .LVU592
 1799 0046 2070     		strb	r0, [r4]
1290:FWLIB/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
 1800              		.loc 1 1290 5 is_stmt 1 view .LVU593
1290:FWLIB/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
 1801              		.loc 1 1290 50 is_stmt 0 view .LVU594
 1802 0048 3046     		mov	r0, r6
 1803 004a FFF7FEFF 		bl	RTC_Bcd2ToByte
 1804              	.LVL120:
1290:FWLIB/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
 1805              		.loc 1 1290 48 view .LVU595
 1806 004e 6070     		strb	r0, [r4, #1]
1292:FWLIB/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
 1807              		.loc 1 1292 5 is_stmt 1 view .LVU596
1292:FWLIB/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
 1808              		.loc 1 1292 50 is_stmt 0 view .LVU597
 1809 0050 2846     		mov	r0, r5
 1810 0052 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1811              	.LVL121:
1292:FWLIB/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
 1812              		.loc 1 1292 48 view .LVU598
 1813 0056 A070     		strb	r0, [r4, #2]
1294:FWLIB/src/stm32f4xx_rtc.c ****   }  
 1814              		.loc 1 1294 5 is_stmt 1 view .LVU599
1294:FWLIB/src/stm32f4xx_rtc.c ****   }  
 1815              		.loc 1 1294 45 is_stmt 0 view .LVU600
 1816 0058 3846     		mov	r0, r7
 1817 005a FFF7FEFF 		bl	RTC_Bcd2ToByte
 1818              	.LVL122:
1294:FWLIB/src/stm32f4xx_rtc.c ****   }  
 1819              		.loc 1 1294 43 view .LVU601
 1820 005e 2073     		strb	r0, [r4, #12]
 1821              	.LVL123:
 1822              	.L114:
1296:FWLIB/src/stm32f4xx_rtc.c **** 
 1823              		.loc 1 1296 1 view .LVU602
 1824 0060 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1825              	.LVL124:
 1826              	.L119:
1267:FWLIB/src/stm32f4xx_rtc.c ****   }
 1827              		.loc 1 1267 5 is_stmt 1 view .LVU603
1267:FWLIB/src/stm32f4xx_rtc.c ****   }
 1828              		.loc 1 1267 12 is_stmt 0 view .LVU604
 1829 0062 014B     		ldr	r3, .L120
 1830 0064 DB69     		ldr	r3, [r3, #28]
 1831              	.LVL125:
1267:FWLIB/src/stm32f4xx_rtc.c ****   }
 1832              		.loc 1 1267 12 view .LVU605
 1833 0066 D1E7     		b	.L116
 1834              	.L121:
 1835              		.align	2
 1836              	.L120:
 1837 0068 00280040 		.word	1073752064
 1838              		.cfi_endproc
 1839              	.LFE141:
ARM GAS  /tmp/cc7uya1D.s 			page 91


 1841              		.section	.text.RTC_AlarmCmd,"ax",%progbits
 1842              		.align	1
 1843              		.global	RTC_AlarmCmd
 1844              		.syntax unified
 1845              		.thumb
 1846              		.thumb_func
 1847              		.fpu fpv4-sp-d16
 1849              	RTC_AlarmCmd:
 1850              	.LVL126:
 1851              	.LFB142:
1311:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
 1852              		.loc 1 1311 1 is_stmt 1 view -0
 1853              		.cfi_startproc
 1854              		@ args = 0, pretend = 0, frame = 8
 1855              		@ frame_needed = 0, uses_anonymous_args = 0
 1856              		@ link register save eliminated.
1311:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
 1857              		.loc 1 1311 1 is_stmt 0 view .LVU607
 1858 0000 82B0     		sub	sp, sp, #8
 1859              	.LCFI18:
 1860              		.cfi_def_cfa_offset 8
1312:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t alarmstatus = 0x00;
 1861              		.loc 1 1312 3 is_stmt 1 view .LVU608
1312:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t alarmstatus = 0x00;
 1862              		.loc 1 1312 17 is_stmt 0 view .LVU609
 1863 0002 0023     		movs	r3, #0
 1864 0004 0193     		str	r3, [sp, #4]
1313:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 1865              		.loc 1 1313 3 is_stmt 1 view .LVU610
 1866              	.LVL127:
1314:FWLIB/src/stm32f4xx_rtc.c ****     
 1867              		.loc 1 1314 3 view .LVU611
1317:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1868              		.loc 1 1317 3 view .LVU612
1318:FWLIB/src/stm32f4xx_rtc.c **** 
 1869              		.loc 1 1318 3 view .LVU613
1321:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1870              		.loc 1 1321 3 view .LVU614
1321:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1871              		.loc 1 1321 12 is_stmt 0 view .LVU615
 1872 0006 154B     		ldr	r3, .L129
 1873 0008 CA22     		movs	r2, #202
 1874 000a 5A62     		str	r2, [r3, #36]
1322:FWLIB/src/stm32f4xx_rtc.c **** 
 1875              		.loc 1 1322 3 is_stmt 1 view .LVU616
1322:FWLIB/src/stm32f4xx_rtc.c **** 
 1876              		.loc 1 1322 12 is_stmt 0 view .LVU617
 1877 000c 5322     		movs	r2, #83
 1878 000e 5A62     		str	r2, [r3, #36]
1325:FWLIB/src/stm32f4xx_rtc.c ****   {
 1879              		.loc 1 1325 3 is_stmt 1 view .LVU618
1325:FWLIB/src/stm32f4xx_rtc.c ****   {
 1880              		.loc 1 1325 6 is_stmt 0 view .LVU619
 1881 0010 49B1     		cbz	r1, .L123
1327:FWLIB/src/stm32f4xx_rtc.c **** 
 1882              		.loc 1 1327 5 is_stmt 1 view .LVU620
1327:FWLIB/src/stm32f4xx_rtc.c **** 
ARM GAS  /tmp/cc7uya1D.s 			page 92


 1883              		.loc 1 1327 13 is_stmt 0 view .LVU621
 1884 0012 1A46     		mov	r2, r3
 1885 0014 9B68     		ldr	r3, [r3, #8]
 1886 0016 1843     		orrs	r0, r0, r3
 1887              	.LVL128:
1327:FWLIB/src/stm32f4xx_rtc.c **** 
 1888              		.loc 1 1327 13 view .LVU622
 1889 0018 9060     		str	r0, [r2, #8]
1329:FWLIB/src/stm32f4xx_rtc.c ****   }
 1890              		.loc 1 1329 5 is_stmt 1 view .LVU623
 1891              	.LVL129:
1329:FWLIB/src/stm32f4xx_rtc.c ****   }
 1892              		.loc 1 1329 12 is_stmt 0 view .LVU624
 1893 001a 0120     		movs	r0, #1
 1894              	.LVL130:
 1895              	.L124:
1354:FWLIB/src/stm32f4xx_rtc.c ****   
 1896              		.loc 1 1354 3 is_stmt 1 view .LVU625
1354:FWLIB/src/stm32f4xx_rtc.c ****   
 1897              		.loc 1 1354 12 is_stmt 0 view .LVU626
 1898 001c 0F4B     		ldr	r3, .L129
 1899 001e FF22     		movs	r2, #255
 1900 0020 5A62     		str	r2, [r3, #36]
1356:FWLIB/src/stm32f4xx_rtc.c **** }
 1901              		.loc 1 1356 3 is_stmt 1 view .LVU627
1357:FWLIB/src/stm32f4xx_rtc.c **** 
 1902              		.loc 1 1357 1 is_stmt 0 view .LVU628
 1903 0022 02B0     		add	sp, sp, #8
 1904              	.LCFI19:
 1905              		.cfi_remember_state
 1906              		.cfi_def_cfa_offset 0
 1907              		@ sp needed
 1908 0024 7047     		bx	lr
 1909              	.LVL131:
 1910              	.L123:
 1911              	.LCFI20:
 1912              		.cfi_restore_state
1334:FWLIB/src/stm32f4xx_rtc.c ****    
 1913              		.loc 1 1334 5 is_stmt 1 view .LVU629
1334:FWLIB/src/stm32f4xx_rtc.c ****    
 1914              		.loc 1 1334 13 is_stmt 0 view .LVU630
 1915 0026 0D4A     		ldr	r2, .L129
 1916 0028 9368     		ldr	r3, [r2, #8]
 1917 002a 23EA0003 		bic	r3, r3, r0
 1918 002e 9360     		str	r3, [r2, #8]
 1919              	.LVL132:
 1920              	.L126:
1337:FWLIB/src/stm32f4xx_rtc.c ****     {
 1921              		.loc 1 1337 5 is_stmt 1 discriminator 2 view .LVU631
1339:FWLIB/src/stm32f4xx_rtc.c ****       alarmcounter++;  
 1922              		.loc 1 1339 7 discriminator 2 view .LVU632
1339:FWLIB/src/stm32f4xx_rtc.c ****       alarmcounter++;  
 1923              		.loc 1 1339 24 is_stmt 0 discriminator 2 view .LVU633
 1924 0030 0A4B     		ldr	r3, .L129
 1925 0032 DA68     		ldr	r2, [r3, #12]
1339:FWLIB/src/stm32f4xx_rtc.c ****       alarmcounter++;  
 1926              		.loc 1 1339 43 discriminator 2 view .LVU634
ARM GAS  /tmp/cc7uya1D.s 			page 93


 1927 0034 010A     		lsrs	r1, r0, #8
1339:FWLIB/src/stm32f4xx_rtc.c ****       alarmcounter++;  
 1928              		.loc 1 1339 19 discriminator 2 view .LVU635
 1929 0036 0A40     		ands	r2, r2, r1
 1930              	.LVL133:
1340:FWLIB/src/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 1931              		.loc 1 1340 7 is_stmt 1 discriminator 2 view .LVU636
1340:FWLIB/src/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 1932              		.loc 1 1340 19 is_stmt 0 discriminator 2 view .LVU637
 1933 0038 019B     		ldr	r3, [sp, #4]
 1934 003a 0133     		adds	r3, r3, #1
 1935 003c 0193     		str	r3, [sp, #4]
1341:FWLIB/src/stm32f4xx_rtc.c ****     
 1936              		.loc 1 1341 27 discriminator 2 view .LVU638
 1937 003e 019B     		ldr	r3, [sp, #4]
1341:FWLIB/src/stm32f4xx_rtc.c ****     
 1938              		.loc 1 1341 5 discriminator 2 view .LVU639
 1939 0040 B3F5803F 		cmp	r3, #65536
 1940 0044 01D0     		beq	.L125
1341:FWLIB/src/stm32f4xx_rtc.c ****     
 1941              		.loc 1 1341 48 discriminator 1 view .LVU640
 1942 0046 002A     		cmp	r2, #0
 1943 0048 F2D0     		beq	.L126
 1944              	.L125:
1343:FWLIB/src/stm32f4xx_rtc.c ****     {
 1945              		.loc 1 1343 5 is_stmt 1 view .LVU641
1343:FWLIB/src/stm32f4xx_rtc.c ****     {
 1946              		.loc 1 1343 13 is_stmt 0 view .LVU642
 1947 004a 044B     		ldr	r3, .L129
 1948 004c DB68     		ldr	r3, [r3, #12]
1343:FWLIB/src/stm32f4xx_rtc.c ****     {
 1949              		.loc 1 1343 8 view .LVU643
 1950 004e 1942     		tst	r1, r3
 1951 0050 01D1     		bne	.L127
1345:FWLIB/src/stm32f4xx_rtc.c ****     } 
 1952              		.loc 1 1345 14 view .LVU644
 1953 0052 0020     		movs	r0, #0
 1954              	.LVL134:
1345:FWLIB/src/stm32f4xx_rtc.c ****     } 
 1955              		.loc 1 1345 14 view .LVU645
 1956 0054 E2E7     		b	.L124
 1957              	.LVL135:
 1958              	.L127:
1349:FWLIB/src/stm32f4xx_rtc.c ****     }        
 1959              		.loc 1 1349 14 view .LVU646
 1960 0056 0120     		movs	r0, #1
 1961              	.LVL136:
1349:FWLIB/src/stm32f4xx_rtc.c ****     }        
 1962              		.loc 1 1349 14 view .LVU647
 1963 0058 E0E7     		b	.L124
 1964              	.L130:
 1965 005a 00BF     		.align	2
 1966              	.L129:
 1967 005c 00280040 		.word	1073752064
 1968              		.cfi_endproc
 1969              	.LFE142:
 1971              		.section	.text.RTC_AlarmSubSecondConfig,"ax",%progbits
ARM GAS  /tmp/cc7uya1D.s 			page 94


 1972              		.align	1
 1973              		.global	RTC_AlarmSubSecondConfig
 1974              		.syntax unified
 1975              		.thumb
 1976              		.thumb_func
 1977              		.fpu fpv4-sp-d16
 1979              	RTC_AlarmSubSecondConfig:
 1980              	.LVL137:
 1981              	.LFB143:
1405:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1982              		.loc 1 1405 1 is_stmt 1 view -0
 1983              		.cfi_startproc
 1984              		@ args = 0, pretend = 0, frame = 0
 1985              		@ frame_needed = 0, uses_anonymous_args = 0
 1986              		@ link register save eliminated.
1405:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1987              		.loc 1 1405 1 is_stmt 0 view .LVU649
 1988 0000 10B4     		push	{r4}
 1989              	.LCFI21:
 1990              		.cfi_def_cfa_offset 4
 1991              		.cfi_offset 4, -4
1406:FWLIB/src/stm32f4xx_rtc.c **** 
 1992              		.loc 1 1406 3 is_stmt 1 view .LVU650
 1993              	.LVL138:
1409:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
 1994              		.loc 1 1409 3 view .LVU651
1410:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
 1995              		.loc 1 1410 3 view .LVU652
1411:FWLIB/src/stm32f4xx_rtc.c ****   
 1996              		.loc 1 1411 3 view .LVU653
1414:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1997              		.loc 1 1414 3 view .LVU654
1414:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1998              		.loc 1 1414 12 is_stmt 0 view .LVU655
 1999 0002 094B     		ldr	r3, .L136
 2000 0004 CA24     		movs	r4, #202
 2001 0006 5C62     		str	r4, [r3, #36]
1415:FWLIB/src/stm32f4xx_rtc.c ****   
 2002              		.loc 1 1415 3 is_stmt 1 view .LVU656
1415:FWLIB/src/stm32f4xx_rtc.c ****   
 2003              		.loc 1 1415 12 is_stmt 0 view .LVU657
 2004 0008 5324     		movs	r4, #83
 2005 000a 5C62     		str	r4, [r3, #36]
1418:FWLIB/src/stm32f4xx_rtc.c ****   
 2006              		.loc 1 1418 3 is_stmt 1 view .LVU658
1418:FWLIB/src/stm32f4xx_rtc.c ****   
 2007              		.loc 1 1418 10 is_stmt 0 view .LVU659
 2008 000c 0A43     		orrs	r2, r2, r1
 2009              	.LVL139:
1420:FWLIB/src/stm32f4xx_rtc.c ****   {
 2010              		.loc 1 1420 3 is_stmt 1 view .LVU660
1420:FWLIB/src/stm32f4xx_rtc.c ****   {
 2011              		.loc 1 1420 6 is_stmt 0 view .LVU661
 2012 000e B0F5807F 		cmp	r0, #256
 2013 0012 07D0     		beq	.L135
1428:FWLIB/src/stm32f4xx_rtc.c ****   }
 2014              		.loc 1 1428 5 is_stmt 1 view .LVU662
ARM GAS  /tmp/cc7uya1D.s 			page 95


1428:FWLIB/src/stm32f4xx_rtc.c ****   }
 2015              		.loc 1 1428 19 is_stmt 0 view .LVU663
 2016 0014 044B     		ldr	r3, .L136
 2017 0016 9A64     		str	r2, [r3, #72]
 2018              	.L133:
1432:FWLIB/src/stm32f4xx_rtc.c **** 
 2019              		.loc 1 1432 3 is_stmt 1 view .LVU664
1432:FWLIB/src/stm32f4xx_rtc.c **** 
 2020              		.loc 1 1432 12 is_stmt 0 view .LVU665
 2021 0018 034B     		ldr	r3, .L136
 2022 001a FF22     		movs	r2, #255
 2023              	.LVL140:
1432:FWLIB/src/stm32f4xx_rtc.c **** 
 2024              		.loc 1 1432 12 view .LVU666
 2025 001c 5A62     		str	r2, [r3, #36]
1434:FWLIB/src/stm32f4xx_rtc.c **** 
 2026              		.loc 1 1434 1 view .LVU667
 2027 001e 5DF8044B 		ldr	r4, [sp], #4
 2028              	.LCFI22:
 2029              		.cfi_remember_state
 2030              		.cfi_restore 4
 2031              		.cfi_def_cfa_offset 0
 2032 0022 7047     		bx	lr
 2033              	.LVL141:
 2034              	.L135:
 2035              	.LCFI23:
 2036              		.cfi_restore_state
1423:FWLIB/src/stm32f4xx_rtc.c ****   }
 2037              		.loc 1 1423 5 is_stmt 1 view .LVU668
1423:FWLIB/src/stm32f4xx_rtc.c ****   }
 2038              		.loc 1 1423 19 is_stmt 0 view .LVU669
 2039 0024 5A64     		str	r2, [r3, #68]
 2040 0026 F7E7     		b	.L133
 2041              	.L137:
 2042              		.align	2
 2043              	.L136:
 2044 0028 00280040 		.word	1073752064
 2045              		.cfi_endproc
 2046              	.LFE143:
 2048              		.section	.text.RTC_GetAlarmSubSecond,"ax",%progbits
 2049              		.align	1
 2050              		.global	RTC_GetAlarmSubSecond
 2051              		.syntax unified
 2052              		.thumb
 2053              		.thumb_func
 2054              		.fpu fpv4-sp-d16
 2056              	RTC_GetAlarmSubSecond:
 2057              	.LVL142:
 2058              	.LFB144:
1446:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2059              		.loc 1 1446 1 is_stmt 1 view -0
 2060              		.cfi_startproc
 2061              		@ args = 0, pretend = 0, frame = 0
 2062              		@ frame_needed = 0, uses_anonymous_args = 0
 2063              		@ link register save eliminated.
1447:FWLIB/src/stm32f4xx_rtc.c ****   
 2064              		.loc 1 1447 3 view .LVU671
ARM GAS  /tmp/cc7uya1D.s 			page 96


1450:FWLIB/src/stm32f4xx_rtc.c ****   {
 2065              		.loc 1 1450 3 view .LVU672
1450:FWLIB/src/stm32f4xx_rtc.c ****   {
 2066              		.loc 1 1450 6 is_stmt 0 view .LVU673
 2067 0000 B0F5807F 		cmp	r0, #256
 2068 0004 04D0     		beq	.L141
1456:FWLIB/src/stm32f4xx_rtc.c ****   } 
 2069              		.loc 1 1456 5 is_stmt 1 view .LVU674
1456:FWLIB/src/stm32f4xx_rtc.c ****   } 
 2070              		.loc 1 1456 29 is_stmt 0 view .LVU675
 2071 0006 054B     		ldr	r3, .L142
 2072 0008 986C     		ldr	r0, [r3, #72]
 2073              	.LVL143:
1456:FWLIB/src/stm32f4xx_rtc.c ****   } 
 2074              		.loc 1 1456 12 view .LVU676
 2075 000a C0F30E00 		ubfx	r0, r0, #0, #15
 2076              	.LVL144:
1459:FWLIB/src/stm32f4xx_rtc.c **** }
 2077              		.loc 1 1459 3 is_stmt 1 view .LVU677
1460:FWLIB/src/stm32f4xx_rtc.c **** 
 2078              		.loc 1 1460 1 is_stmt 0 view .LVU678
 2079 000e 7047     		bx	lr
 2080              	.LVL145:
 2081              	.L141:
1452:FWLIB/src/stm32f4xx_rtc.c ****   }
 2082              		.loc 1 1452 5 is_stmt 1 view .LVU679
1452:FWLIB/src/stm32f4xx_rtc.c ****   }
 2083              		.loc 1 1452 29 is_stmt 0 view .LVU680
 2084 0010 024B     		ldr	r3, .L142
 2085 0012 586C     		ldr	r0, [r3, #68]
 2086              	.LVL146:
1452:FWLIB/src/stm32f4xx_rtc.c ****   }
 2087              		.loc 1 1452 12 view .LVU681
 2088 0014 C0F30E00 		ubfx	r0, r0, #0, #15
 2089              	.LVL147:
1452:FWLIB/src/stm32f4xx_rtc.c ****   }
 2090              		.loc 1 1452 12 view .LVU682
 2091 0018 7047     		bx	lr
 2092              	.L143:
 2093 001a 00BF     		.align	2
 2094              	.L142:
 2095 001c 00280040 		.word	1073752064
 2096              		.cfi_endproc
 2097              	.LFE144:
 2099              		.section	.text.RTC_WakeUpClockConfig,"ax",%progbits
 2100              		.align	1
 2101              		.global	RTC_WakeUpClockConfig
 2102              		.syntax unified
 2103              		.thumb
 2104              		.thumb_func
 2105              		.fpu fpv4-sp-d16
 2107              	RTC_WakeUpClockConfig:
 2108              	.LVL148:
 2109              	.LFB145:
1495:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2110              		.loc 1 1495 1 is_stmt 1 view -0
 2111              		.cfi_startproc
ARM GAS  /tmp/cc7uya1D.s 			page 97


 2112              		@ args = 0, pretend = 0, frame = 0
 2113              		@ frame_needed = 0, uses_anonymous_args = 0
 2114              		@ link register save eliminated.
1497:FWLIB/src/stm32f4xx_rtc.c **** 
 2115              		.loc 1 1497 3 view .LVU684
1500:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2116              		.loc 1 1500 3 view .LVU685
1500:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2117              		.loc 1 1500 12 is_stmt 0 view .LVU686
 2118 0000 074B     		ldr	r3, .L145
 2119 0002 CA22     		movs	r2, #202
 2120 0004 5A62     		str	r2, [r3, #36]
1501:FWLIB/src/stm32f4xx_rtc.c **** 
 2121              		.loc 1 1501 3 is_stmt 1 view .LVU687
1501:FWLIB/src/stm32f4xx_rtc.c **** 
 2122              		.loc 1 1501 12 is_stmt 0 view .LVU688
 2123 0006 5322     		movs	r2, #83
 2124 0008 5A62     		str	r2, [r3, #36]
1504:FWLIB/src/stm32f4xx_rtc.c **** 
 2125              		.loc 1 1504 3 is_stmt 1 view .LVU689
1504:FWLIB/src/stm32f4xx_rtc.c **** 
 2126              		.loc 1 1504 11 is_stmt 0 view .LVU690
 2127 000a 9A68     		ldr	r2, [r3, #8]
 2128 000c 22F00702 		bic	r2, r2, #7
 2129 0010 9A60     		str	r2, [r3, #8]
1507:FWLIB/src/stm32f4xx_rtc.c ****   
 2130              		.loc 1 1507 3 is_stmt 1 view .LVU691
1507:FWLIB/src/stm32f4xx_rtc.c ****   
 2131              		.loc 1 1507 11 is_stmt 0 view .LVU692
 2132 0012 9A68     		ldr	r2, [r3, #8]
 2133 0014 1043     		orrs	r0, r0, r2
 2134              	.LVL149:
1507:FWLIB/src/stm32f4xx_rtc.c ****   
 2135              		.loc 1 1507 11 view .LVU693
 2136 0016 9860     		str	r0, [r3, #8]
1510:FWLIB/src/stm32f4xx_rtc.c **** }
 2137              		.loc 1 1510 3 is_stmt 1 view .LVU694
1510:FWLIB/src/stm32f4xx_rtc.c **** }
 2138              		.loc 1 1510 12 is_stmt 0 view .LVU695
 2139 0018 FF22     		movs	r2, #255
 2140 001a 5A62     		str	r2, [r3, #36]
1511:FWLIB/src/stm32f4xx_rtc.c **** 
 2141              		.loc 1 1511 1 view .LVU696
 2142 001c 7047     		bx	lr
 2143              	.L146:
 2144 001e 00BF     		.align	2
 2145              	.L145:
 2146 0020 00280040 		.word	1073752064
 2147              		.cfi_endproc
 2148              	.LFE145:
 2150              		.section	.text.RTC_SetWakeUpCounter,"ax",%progbits
 2151              		.align	1
 2152              		.global	RTC_SetWakeUpCounter
 2153              		.syntax unified
 2154              		.thumb
 2155              		.thumb_func
 2156              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cc7uya1D.s 			page 98


 2158              	RTC_SetWakeUpCounter:
 2159              	.LVL150:
 2160              	.LFB146:
1522:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2161              		.loc 1 1522 1 is_stmt 1 view -0
 2162              		.cfi_startproc
 2163              		@ args = 0, pretend = 0, frame = 0
 2164              		@ frame_needed = 0, uses_anonymous_args = 0
 2165              		@ link register save eliminated.
1524:FWLIB/src/stm32f4xx_rtc.c ****   
 2166              		.loc 1 1524 3 view .LVU698
1527:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2167              		.loc 1 1527 3 view .LVU699
1527:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2168              		.loc 1 1527 12 is_stmt 0 view .LVU700
 2169 0000 044B     		ldr	r3, .L148
 2170 0002 CA22     		movs	r2, #202
 2171 0004 5A62     		str	r2, [r3, #36]
1528:FWLIB/src/stm32f4xx_rtc.c ****   
 2172              		.loc 1 1528 3 is_stmt 1 view .LVU701
1528:FWLIB/src/stm32f4xx_rtc.c ****   
 2173              		.loc 1 1528 12 is_stmt 0 view .LVU702
 2174 0006 5322     		movs	r2, #83
 2175 0008 5A62     		str	r2, [r3, #36]
1531:FWLIB/src/stm32f4xx_rtc.c ****   
 2176              		.loc 1 1531 3 is_stmt 1 view .LVU703
1531:FWLIB/src/stm32f4xx_rtc.c ****   
 2177              		.loc 1 1531 13 is_stmt 0 view .LVU704
 2178 000a 5861     		str	r0, [r3, #20]
1534:FWLIB/src/stm32f4xx_rtc.c **** }
 2179              		.loc 1 1534 3 is_stmt 1 view .LVU705
1534:FWLIB/src/stm32f4xx_rtc.c **** }
 2180              		.loc 1 1534 12 is_stmt 0 view .LVU706
 2181 000c FF22     		movs	r2, #255
 2182 000e 5A62     		str	r2, [r3, #36]
1535:FWLIB/src/stm32f4xx_rtc.c **** 
 2183              		.loc 1 1535 1 view .LVU707
 2184 0010 7047     		bx	lr
 2185              	.L149:
 2186 0012 00BF     		.align	2
 2187              	.L148:
 2188 0014 00280040 		.word	1073752064
 2189              		.cfi_endproc
 2190              	.LFE146:
 2192              		.section	.text.RTC_GetWakeUpCounter,"ax",%progbits
 2193              		.align	1
 2194              		.global	RTC_GetWakeUpCounter
 2195              		.syntax unified
 2196              		.thumb
 2197              		.thumb_func
 2198              		.fpu fpv4-sp-d16
 2200              	RTC_GetWakeUpCounter:
 2201              	.LFB147:
1543:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the counter value */
 2202              		.loc 1 1543 1 is_stmt 1 view -0
 2203              		.cfi_startproc
 2204              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc7uya1D.s 			page 99


 2205              		@ frame_needed = 0, uses_anonymous_args = 0
 2206              		@ link register save eliminated.
1545:FWLIB/src/stm32f4xx_rtc.c **** }
 2207              		.loc 1 1545 3 view .LVU709
1545:FWLIB/src/stm32f4xx_rtc.c **** }
 2208              		.loc 1 1545 25 is_stmt 0 view .LVU710
 2209 0000 014B     		ldr	r3, .L151
 2210 0002 5869     		ldr	r0, [r3, #20]
1546:FWLIB/src/stm32f4xx_rtc.c **** 
 2211              		.loc 1 1546 1 view .LVU711
 2212 0004 80B2     		uxth	r0, r0
 2213 0006 7047     		bx	lr
 2214              	.L152:
 2215              		.align	2
 2216              	.L151:
 2217 0008 00280040 		.word	1073752064
 2218              		.cfi_endproc
 2219              	.LFE147:
 2221              		.section	.text.RTC_WakeUpCmd,"ax",%progbits
 2222              		.align	1
 2223              		.global	RTC_WakeUpCmd
 2224              		.syntax unified
 2225              		.thumb
 2226              		.thumb_func
 2227              		.fpu fpv4-sp-d16
 2229              	RTC_WakeUpCmd:
 2230              	.LVL151:
 2231              	.LFB148:
1555:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 2232              		.loc 1 1555 1 is_stmt 1 view -0
 2233              		.cfi_startproc
 2234              		@ args = 0, pretend = 0, frame = 8
 2235              		@ frame_needed = 0, uses_anonymous_args = 0
 2236              		@ link register save eliminated.
1555:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 2237              		.loc 1 1555 1 is_stmt 0 view .LVU713
 2238 0000 82B0     		sub	sp, sp, #8
 2239              	.LCFI24:
 2240              		.cfi_def_cfa_offset 8
1556:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 2241              		.loc 1 1556 3 is_stmt 1 view .LVU714
1556:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 2242              		.loc 1 1556 17 is_stmt 0 view .LVU715
 2243 0002 0023     		movs	r3, #0
 2244 0004 0193     		str	r3, [sp, #4]
1557:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2245              		.loc 1 1557 3 is_stmt 1 view .LVU716
 2246              	.LVL152:
1558:FWLIB/src/stm32f4xx_rtc.c ****   
 2247              		.loc 1 1558 3 view .LVU717
1561:FWLIB/src/stm32f4xx_rtc.c **** 
 2248              		.loc 1 1561 3 view .LVU718
1564:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2249              		.loc 1 1564 3 view .LVU719
1564:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2250              		.loc 1 1564 12 is_stmt 0 view .LVU720
 2251 0006 164B     		ldr	r3, .L160
ARM GAS  /tmp/cc7uya1D.s 			page 100


 2252 0008 CA22     		movs	r2, #202
 2253 000a 5A62     		str	r2, [r3, #36]
1565:FWLIB/src/stm32f4xx_rtc.c **** 
 2254              		.loc 1 1565 3 is_stmt 1 view .LVU721
1565:FWLIB/src/stm32f4xx_rtc.c **** 
 2255              		.loc 1 1565 12 is_stmt 0 view .LVU722
 2256 000c 5322     		movs	r2, #83
 2257 000e 5A62     		str	r2, [r3, #36]
1567:FWLIB/src/stm32f4xx_rtc.c ****   {
 2258              		.loc 1 1567 3 is_stmt 1 view .LVU723
1567:FWLIB/src/stm32f4xx_rtc.c ****   {
 2259              		.loc 1 1567 6 is_stmt 0 view .LVU724
 2260 0010 50B1     		cbz	r0, .L154
1570:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 2261              		.loc 1 1570 5 is_stmt 1 view .LVU725
1570:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 2262              		.loc 1 1570 13 is_stmt 0 view .LVU726
 2263 0012 1A46     		mov	r2, r3
 2264 0014 9B68     		ldr	r3, [r3, #8]
 2265 0016 43F48063 		orr	r3, r3, #1024
 2266 001a 9360     		str	r3, [r2, #8]
1571:FWLIB/src/stm32f4xx_rtc.c ****   }
 2267              		.loc 1 1571 5 is_stmt 1 view .LVU727
 2268              	.LVL153:
1571:FWLIB/src/stm32f4xx_rtc.c ****   }
 2269              		.loc 1 1571 12 is_stmt 0 view .LVU728
 2270 001c 0120     		movs	r0, #1
 2271              	.LVL154:
 2272              	.L155:
1595:FWLIB/src/stm32f4xx_rtc.c ****   
 2273              		.loc 1 1595 3 is_stmt 1 view .LVU729
1595:FWLIB/src/stm32f4xx_rtc.c ****   
 2274              		.loc 1 1595 12 is_stmt 0 view .LVU730
 2275 001e 104B     		ldr	r3, .L160
 2276 0020 FF22     		movs	r2, #255
 2277 0022 5A62     		str	r2, [r3, #36]
1597:FWLIB/src/stm32f4xx_rtc.c **** }
 2278              		.loc 1 1597 3 is_stmt 1 view .LVU731
1598:FWLIB/src/stm32f4xx_rtc.c **** 
 2279              		.loc 1 1598 1 is_stmt 0 view .LVU732
 2280 0024 02B0     		add	sp, sp, #8
 2281              	.LCFI25:
 2282              		.cfi_remember_state
 2283              		.cfi_def_cfa_offset 0
 2284              		@ sp needed
 2285 0026 7047     		bx	lr
 2286              	.LVL155:
 2287              	.L154:
 2288              	.LCFI26:
 2289              		.cfi_restore_state
1576:FWLIB/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 2290              		.loc 1 1576 5 is_stmt 1 view .LVU733
1576:FWLIB/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 2291              		.loc 1 1576 13 is_stmt 0 view .LVU734
 2292 0028 0D4A     		ldr	r2, .L160
 2293 002a 9368     		ldr	r3, [r2, #8]
 2294 002c 23F48063 		bic	r3, r3, #1024
ARM GAS  /tmp/cc7uya1D.s 			page 101


 2295 0030 9360     		str	r3, [r2, #8]
 2296              	.LVL156:
 2297              	.L157:
1578:FWLIB/src/stm32f4xx_rtc.c ****     {
 2298              		.loc 1 1578 5 is_stmt 1 discriminator 2 view .LVU735
1580:FWLIB/src/stm32f4xx_rtc.c ****       wutcounter++;  
 2299              		.loc 1 1580 7 discriminator 2 view .LVU736
1580:FWLIB/src/stm32f4xx_rtc.c ****       wutcounter++;  
 2300              		.loc 1 1580 24 is_stmt 0 discriminator 2 view .LVU737
 2301 0032 0B4B     		ldr	r3, .L160
 2302 0034 DA68     		ldr	r2, [r3, #12]
1580:FWLIB/src/stm32f4xx_rtc.c ****       wutcounter++;  
 2303              		.loc 1 1580 19 discriminator 2 view .LVU738
 2304 0036 02F00402 		and	r2, r2, #4
 2305              	.LVL157:
1581:FWLIB/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 2306              		.loc 1 1581 7 is_stmt 1 discriminator 2 view .LVU739
1581:FWLIB/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 2307              		.loc 1 1581 17 is_stmt 0 discriminator 2 view .LVU740
 2308 003a 019B     		ldr	r3, [sp, #4]
 2309 003c 0133     		adds	r3, r3, #1
 2310 003e 0193     		str	r3, [sp, #4]
1582:FWLIB/src/stm32f4xx_rtc.c ****     
 2311              		.loc 1 1582 25 discriminator 2 view .LVU741
 2312 0040 019B     		ldr	r3, [sp, #4]
1582:FWLIB/src/stm32f4xx_rtc.c ****     
 2313              		.loc 1 1582 5 discriminator 2 view .LVU742
 2314 0042 B3F5803F 		cmp	r3, #65536
 2315 0046 01D0     		beq	.L156
1582:FWLIB/src/stm32f4xx_rtc.c ****     
 2316              		.loc 1 1582 46 discriminator 1 view .LVU743
 2317 0048 002A     		cmp	r2, #0
 2318 004a F2D0     		beq	.L157
 2319              	.L156:
1584:FWLIB/src/stm32f4xx_rtc.c ****     {
 2320              		.loc 1 1584 5 is_stmt 1 view .LVU744
1584:FWLIB/src/stm32f4xx_rtc.c ****     {
 2321              		.loc 1 1584 13 is_stmt 0 view .LVU745
 2322 004c 044B     		ldr	r3, .L160
 2323 004e DB68     		ldr	r3, [r3, #12]
1584:FWLIB/src/stm32f4xx_rtc.c ****     {
 2324              		.loc 1 1584 8 view .LVU746
 2325 0050 13F0040F 		tst	r3, #4
 2326 0054 01D1     		bne	.L158
1586:FWLIB/src/stm32f4xx_rtc.c ****     }
 2327              		.loc 1 1586 14 view .LVU747
 2328 0056 0020     		movs	r0, #0
 2329              	.LVL158:
1586:FWLIB/src/stm32f4xx_rtc.c ****     }
 2330              		.loc 1 1586 14 view .LVU748
 2331 0058 E1E7     		b	.L155
 2332              	.LVL159:
 2333              	.L158:
1590:FWLIB/src/stm32f4xx_rtc.c ****     }    
 2334              		.loc 1 1590 14 view .LVU749
 2335 005a 0120     		movs	r0, #1
 2336              	.LVL160:
ARM GAS  /tmp/cc7uya1D.s 			page 102


1590:FWLIB/src/stm32f4xx_rtc.c ****     }    
 2337              		.loc 1 1590 14 view .LVU750
 2338 005c DFE7     		b	.L155
 2339              	.L161:
 2340 005e 00BF     		.align	2
 2341              	.L160:
 2342 0060 00280040 		.word	1073752064
 2343              		.cfi_endproc
 2344              	.LFE148:
 2346              		.section	.text.RTC_DayLightSavingConfig,"ax",%progbits
 2347              		.align	1
 2348              		.global	RTC_DayLightSavingConfig
 2349              		.syntax unified
 2350              		.thumb
 2351              		.thumb_func
 2352              		.fpu fpv4-sp-d16
 2354              	RTC_DayLightSavingConfig:
 2355              	.LVL161:
 2356              	.LFB149:
1632:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2357              		.loc 1 1632 1 is_stmt 1 view -0
 2358              		.cfi_startproc
 2359              		@ args = 0, pretend = 0, frame = 0
 2360              		@ frame_needed = 0, uses_anonymous_args = 0
 2361              		@ link register save eliminated.
1634:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));
 2362              		.loc 1 1634 3 view .LVU752
1635:FWLIB/src/stm32f4xx_rtc.c **** 
 2363              		.loc 1 1635 3 view .LVU753
1638:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2364              		.loc 1 1638 3 view .LVU754
1638:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2365              		.loc 1 1638 12 is_stmt 0 view .LVU755
 2366 0000 074B     		ldr	r3, .L163
 2367 0002 CA22     		movs	r2, #202
 2368 0004 5A62     		str	r2, [r3, #36]
1639:FWLIB/src/stm32f4xx_rtc.c **** 
 2369              		.loc 1 1639 3 is_stmt 1 view .LVU756
1639:FWLIB/src/stm32f4xx_rtc.c **** 
 2370              		.loc 1 1639 12 is_stmt 0 view .LVU757
 2371 0006 5322     		movs	r2, #83
 2372 0008 5A62     		str	r2, [r3, #36]
1642:FWLIB/src/stm32f4xx_rtc.c **** 
 2373              		.loc 1 1642 3 is_stmt 1 view .LVU758
1642:FWLIB/src/stm32f4xx_rtc.c **** 
 2374              		.loc 1 1642 11 is_stmt 0 view .LVU759
 2375 000a 9A68     		ldr	r2, [r3, #8]
 2376 000c 22F48022 		bic	r2, r2, #262144
 2377 0010 9A60     		str	r2, [r3, #8]
1645:FWLIB/src/stm32f4xx_rtc.c **** 
 2378              		.loc 1 1645 3 is_stmt 1 view .LVU760
1645:FWLIB/src/stm32f4xx_rtc.c **** 
 2379              		.loc 1 1645 11 is_stmt 0 view .LVU761
 2380 0012 9A68     		ldr	r2, [r3, #8]
1645:FWLIB/src/stm32f4xx_rtc.c **** 
 2381              		.loc 1 1645 44 view .LVU762
 2382 0014 0143     		orrs	r1, r1, r0
ARM GAS  /tmp/cc7uya1D.s 			page 103


 2383              	.LVL162:
1645:FWLIB/src/stm32f4xx_rtc.c **** 
 2384              		.loc 1 1645 11 view .LVU763
 2385 0016 0A43     		orrs	r2, r2, r1
 2386 0018 9A60     		str	r2, [r3, #8]
1648:FWLIB/src/stm32f4xx_rtc.c **** }
 2387              		.loc 1 1648 3 is_stmt 1 view .LVU764
1648:FWLIB/src/stm32f4xx_rtc.c **** }
 2388              		.loc 1 1648 12 is_stmt 0 view .LVU765
 2389 001a FF22     		movs	r2, #255
 2390 001c 5A62     		str	r2, [r3, #36]
1649:FWLIB/src/stm32f4xx_rtc.c **** 
 2391              		.loc 1 1649 1 view .LVU766
 2392 001e 7047     		bx	lr
 2393              	.L164:
 2394              		.align	2
 2395              	.L163:
 2396 0020 00280040 		.word	1073752064
 2397              		.cfi_endproc
 2398              	.LFE149:
 2400              		.section	.text.RTC_GetStoreOperation,"ax",%progbits
 2401              		.align	1
 2402              		.global	RTC_GetStoreOperation
 2403              		.syntax unified
 2404              		.thumb
 2405              		.thumb_func
 2406              		.fpu fpv4-sp-d16
 2408              	RTC_GetStoreOperation:
 2409              	.LFB150:
1659:FWLIB/src/stm32f4xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
 2410              		.loc 1 1659 1 is_stmt 1 view -0
 2411              		.cfi_startproc
 2412              		@ args = 0, pretend = 0, frame = 0
 2413              		@ frame_needed = 0, uses_anonymous_args = 0
 2414              		@ link register save eliminated.
1660:FWLIB/src/stm32f4xx_rtc.c **** }
 2415              		.loc 1 1660 3 view .LVU768
1660:FWLIB/src/stm32f4xx_rtc.c **** }
 2416              		.loc 1 1660 14 is_stmt 0 view .LVU769
 2417 0000 024B     		ldr	r3, .L166
 2418 0002 9868     		ldr	r0, [r3, #8]
1661:FWLIB/src/stm32f4xx_rtc.c **** 
 2419              		.loc 1 1661 1 view .LVU770
 2420 0004 00F48020 		and	r0, r0, #262144
 2421 0008 7047     		bx	lr
 2422              	.L167:
 2423 000a 00BF     		.align	2
 2424              	.L166:
 2425 000c 00280040 		.word	1073752064
 2426              		.cfi_endproc
 2427              	.LFE150:
 2429              		.section	.text.RTC_OutputConfig,"ax",%progbits
 2430              		.align	1
 2431              		.global	RTC_OutputConfig
 2432              		.syntax unified
 2433              		.thumb
 2434              		.thumb_func
ARM GAS  /tmp/cc7uya1D.s 			page 104


 2435              		.fpu fpv4-sp-d16
 2437              	RTC_OutputConfig:
 2438              	.LVL163:
 2439              	.LFB151:
1698:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2440              		.loc 1 1698 1 is_stmt 1 view -0
 2441              		.cfi_startproc
 2442              		@ args = 0, pretend = 0, frame = 0
 2443              		@ frame_needed = 0, uses_anonymous_args = 0
 2444              		@ link register save eliminated.
1700:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));
 2445              		.loc 1 1700 3 view .LVU772
1701:FWLIB/src/stm32f4xx_rtc.c **** 
 2446              		.loc 1 1701 3 view .LVU773
1704:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2447              		.loc 1 1704 3 view .LVU774
1704:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2448              		.loc 1 1704 12 is_stmt 0 view .LVU775
 2449 0000 074B     		ldr	r3, .L169
 2450 0002 CA22     		movs	r2, #202
 2451 0004 5A62     		str	r2, [r3, #36]
1705:FWLIB/src/stm32f4xx_rtc.c **** 
 2452              		.loc 1 1705 3 is_stmt 1 view .LVU776
1705:FWLIB/src/stm32f4xx_rtc.c **** 
 2453              		.loc 1 1705 12 is_stmt 0 view .LVU777
 2454 0006 5322     		movs	r2, #83
 2455 0008 5A62     		str	r2, [r3, #36]
1708:FWLIB/src/stm32f4xx_rtc.c **** 
 2456              		.loc 1 1708 3 is_stmt 1 view .LVU778
1708:FWLIB/src/stm32f4xx_rtc.c **** 
 2457              		.loc 1 1708 11 is_stmt 0 view .LVU779
 2458 000a 9A68     		ldr	r2, [r3, #8]
 2459 000c 22F4E002 		bic	r2, r2, #7340032
 2460 0010 9A60     		str	r2, [r3, #8]
1711:FWLIB/src/stm32f4xx_rtc.c **** 
 2461              		.loc 1 1711 3 is_stmt 1 view .LVU780
1711:FWLIB/src/stm32f4xx_rtc.c **** 
 2462              		.loc 1 1711 11 is_stmt 0 view .LVU781
 2463 0012 9A68     		ldr	r2, [r3, #8]
1711:FWLIB/src/stm32f4xx_rtc.c **** 
 2464              		.loc 1 1711 36 view .LVU782
 2465 0014 0143     		orrs	r1, r1, r0
 2466              	.LVL164:
1711:FWLIB/src/stm32f4xx_rtc.c **** 
 2467              		.loc 1 1711 11 view .LVU783
 2468 0016 0A43     		orrs	r2, r2, r1
 2469 0018 9A60     		str	r2, [r3, #8]
1714:FWLIB/src/stm32f4xx_rtc.c **** }
 2470              		.loc 1 1714 3 is_stmt 1 view .LVU784
1714:FWLIB/src/stm32f4xx_rtc.c **** }
 2471              		.loc 1 1714 12 is_stmt 0 view .LVU785
 2472 001a FF22     		movs	r2, #255
 2473 001c 5A62     		str	r2, [r3, #36]
1715:FWLIB/src/stm32f4xx_rtc.c **** 
 2474              		.loc 1 1715 1 view .LVU786
 2475 001e 7047     		bx	lr
 2476              	.L170:
ARM GAS  /tmp/cc7uya1D.s 			page 105


 2477              		.align	2
 2478              	.L169:
 2479 0020 00280040 		.word	1073752064
 2480              		.cfi_endproc
 2481              	.LFE151:
 2483              		.section	.text.RTC_CoarseCalibConfig,"ax",%progbits
 2484              		.align	1
 2485              		.global	RTC_CoarseCalibConfig
 2486              		.syntax unified
 2487              		.thumb
 2488              		.thumb_func
 2489              		.fpu fpv4-sp-d16
 2491              	RTC_CoarseCalibConfig:
 2492              	.LVL165:
 2493              	.LFB152:
1752:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2494              		.loc 1 1752 1 is_stmt 1 view -0
 2495              		.cfi_startproc
 2496              		@ args = 0, pretend = 0, frame = 0
 2497              		@ frame_needed = 0, uses_anonymous_args = 0
1752:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2498              		.loc 1 1752 1 is_stmt 0 view .LVU788
 2499 0000 38B5     		push	{r3, r4, r5, lr}
 2500              	.LCFI27:
 2501              		.cfi_def_cfa_offset 16
 2502              		.cfi_offset 3, -16
 2503              		.cfi_offset 4, -12
 2504              		.cfi_offset 5, -8
 2505              		.cfi_offset 14, -4
 2506 0002 0446     		mov	r4, r0
 2507 0004 0D46     		mov	r5, r1
1753:FWLIB/src/stm32f4xx_rtc.c ****    
 2508              		.loc 1 1753 3 is_stmt 1 view .LVU789
 2509              	.LVL166:
1756:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_VALUE(Value)); 
 2510              		.loc 1 1756 3 view .LVU790
1757:FWLIB/src/stm32f4xx_rtc.c **** 
 2511              		.loc 1 1757 3 view .LVU791
1760:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2512              		.loc 1 1760 3 view .LVU792
1760:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2513              		.loc 1 1760 12 is_stmt 0 view .LVU793
 2514 0006 0A4B     		ldr	r3, .L175
 2515 0008 CA22     		movs	r2, #202
 2516 000a 5A62     		str	r2, [r3, #36]
1761:FWLIB/src/stm32f4xx_rtc.c **** 
 2517              		.loc 1 1761 3 is_stmt 1 view .LVU794
1761:FWLIB/src/stm32f4xx_rtc.c **** 
 2518              		.loc 1 1761 12 is_stmt 0 view .LVU795
 2519 000c 5322     		movs	r2, #83
 2520 000e 5A62     		str	r2, [r3, #36]
1764:FWLIB/src/stm32f4xx_rtc.c ****   {
 2521              		.loc 1 1764 3 is_stmt 1 view .LVU796
1764:FWLIB/src/stm32f4xx_rtc.c ****   {
 2522              		.loc 1 1764 7 is_stmt 0 view .LVU797
 2523 0010 FFF7FEFF 		bl	RTC_EnterInitMode
 2524              	.LVL167:
ARM GAS  /tmp/cc7uya1D.s 			page 106


1764:FWLIB/src/stm32f4xx_rtc.c ****   {
 2525              		.loc 1 1764 6 view .LVU798
 2526 0014 0346     		mov	r3, r0
 2527 0016 20B9     		cbnz	r0, .L174
 2528              	.LVL168:
 2529              	.L172:
1779:FWLIB/src/stm32f4xx_rtc.c ****   
 2530              		.loc 1 1779 3 is_stmt 1 view .LVU799
1779:FWLIB/src/stm32f4xx_rtc.c ****   
 2531              		.loc 1 1779 12 is_stmt 0 view .LVU800
 2532 0018 054A     		ldr	r2, .L175
 2533 001a FF21     		movs	r1, #255
 2534 001c 5162     		str	r1, [r2, #36]
1781:FWLIB/src/stm32f4xx_rtc.c **** }
 2535              		.loc 1 1781 3 is_stmt 1 view .LVU801
1782:FWLIB/src/stm32f4xx_rtc.c **** 
 2536              		.loc 1 1782 1 is_stmt 0 view .LVU802
 2537 001e 1846     		mov	r0, r3
 2538 0020 38BD     		pop	{r3, r4, r5, pc}
 2539              	.LVL169:
 2540              	.L174:
1771:FWLIB/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 2541              		.loc 1 1771 5 is_stmt 1 view .LVU803
1771:FWLIB/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 2542              		.loc 1 1771 44 is_stmt 0 view .LVU804
 2543 0022 2C43     		orrs	r4, r4, r5
 2544              	.LVL170:
1771:FWLIB/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 2545              		.loc 1 1771 17 view .LVU805
 2546 0024 024B     		ldr	r3, .L175
 2547 0026 9C61     		str	r4, [r3, #24]
1773:FWLIB/src/stm32f4xx_rtc.c ****     
 2548              		.loc 1 1773 5 is_stmt 1 view .LVU806
 2549 0028 FFF7FEFF 		bl	RTC_ExitInitMode
 2550              	.LVL171:
1775:FWLIB/src/stm32f4xx_rtc.c ****   } 
 2551              		.loc 1 1775 5 view .LVU807
1775:FWLIB/src/stm32f4xx_rtc.c ****   } 
 2552              		.loc 1 1775 12 is_stmt 0 view .LVU808
 2553 002c 0123     		movs	r3, #1
 2554 002e F3E7     		b	.L172
 2555              	.L176:
 2556              		.align	2
 2557              	.L175:
 2558 0030 00280040 		.word	1073752064
 2559              		.cfi_endproc
 2560              	.LFE152:
 2562              		.section	.text.RTC_CoarseCalibCmd,"ax",%progbits
 2563              		.align	1
 2564              		.global	RTC_CoarseCalibCmd
 2565              		.syntax unified
 2566              		.thumb
 2567              		.thumb_func
 2568              		.fpu fpv4-sp-d16
 2570              	RTC_CoarseCalibCmd:
 2571              	.LVL172:
 2572              	.LFB153:
ARM GAS  /tmp/cc7uya1D.s 			page 107


1793:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2573              		.loc 1 1793 1 is_stmt 1 view -0
 2574              		.cfi_startproc
 2575              		@ args = 0, pretend = 0, frame = 0
 2576              		@ frame_needed = 0, uses_anonymous_args = 0
1793:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2577              		.loc 1 1793 1 is_stmt 0 view .LVU810
 2578 0000 10B5     		push	{r4, lr}
 2579              	.LCFI28:
 2580              		.cfi_def_cfa_offset 8
 2581              		.cfi_offset 4, -8
 2582              		.cfi_offset 14, -4
 2583 0002 0446     		mov	r4, r0
1794:FWLIB/src/stm32f4xx_rtc.c ****   
 2584              		.loc 1 1794 3 is_stmt 1 view .LVU811
 2585              	.LVL173:
1797:FWLIB/src/stm32f4xx_rtc.c **** 
 2586              		.loc 1 1797 3 view .LVU812
1800:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2587              		.loc 1 1800 3 view .LVU813
1800:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2588              		.loc 1 1800 12 is_stmt 0 view .LVU814
 2589 0004 0E4B     		ldr	r3, .L182
 2590 0006 CA22     		movs	r2, #202
 2591 0008 5A62     		str	r2, [r3, #36]
1801:FWLIB/src/stm32f4xx_rtc.c ****   
 2592              		.loc 1 1801 3 is_stmt 1 view .LVU815
1801:FWLIB/src/stm32f4xx_rtc.c ****   
 2593              		.loc 1 1801 12 is_stmt 0 view .LVU816
 2594 000a 5322     		movs	r2, #83
 2595 000c 5A62     		str	r2, [r3, #36]
1804:FWLIB/src/stm32f4xx_rtc.c ****   {
 2596              		.loc 1 1804 3 is_stmt 1 view .LVU817
1804:FWLIB/src/stm32f4xx_rtc.c ****   {
 2597              		.loc 1 1804 7 is_stmt 0 view .LVU818
 2598 000e FFF7FEFF 		bl	RTC_EnterInitMode
 2599              	.LVL174:
1804:FWLIB/src/stm32f4xx_rtc.c ****   {
 2600              		.loc 1 1804 6 view .LVU819
 2601 0012 0346     		mov	r3, r0
 2602 0014 40B1     		cbz	r0, .L178
1810:FWLIB/src/stm32f4xx_rtc.c ****     {
 2603              		.loc 1 1810 5 is_stmt 1 view .LVU820
1810:FWLIB/src/stm32f4xx_rtc.c ****     {
 2604              		.loc 1 1810 8 is_stmt 0 view .LVU821
 2605 0016 64B1     		cbz	r4, .L179
1813:FWLIB/src/stm32f4xx_rtc.c ****     }
 2606              		.loc 1 1813 7 is_stmt 1 view .LVU822
1813:FWLIB/src/stm32f4xx_rtc.c ****     }
 2607              		.loc 1 1813 15 is_stmt 0 view .LVU823
 2608 0018 094A     		ldr	r2, .L182
 2609 001a 9368     		ldr	r3, [r2, #8]
 2610 001c 43F08003 		orr	r3, r3, #128
 2611 0020 9360     		str	r3, [r2, #8]
 2612              	.L180:
1821:FWLIB/src/stm32f4xx_rtc.c ****     
 2613              		.loc 1 1821 5 is_stmt 1 view .LVU824
ARM GAS  /tmp/cc7uya1D.s 			page 108


 2614 0022 FFF7FEFF 		bl	RTC_ExitInitMode
 2615              	.LVL175:
1823:FWLIB/src/stm32f4xx_rtc.c ****   } 
 2616              		.loc 1 1823 5 view .LVU825
1823:FWLIB/src/stm32f4xx_rtc.c ****   } 
 2617              		.loc 1 1823 12 is_stmt 0 view .LVU826
 2618 0026 0123     		movs	r3, #1
 2619              	.LVL176:
 2620              	.L178:
1827:FWLIB/src/stm32f4xx_rtc.c ****   
 2621              		.loc 1 1827 3 is_stmt 1 view .LVU827
1827:FWLIB/src/stm32f4xx_rtc.c ****   
 2622              		.loc 1 1827 12 is_stmt 0 view .LVU828
 2623 0028 054A     		ldr	r2, .L182
 2624 002a FF21     		movs	r1, #255
 2625 002c 5162     		str	r1, [r2, #36]
1829:FWLIB/src/stm32f4xx_rtc.c **** }
 2626              		.loc 1 1829 3 is_stmt 1 view .LVU829
1830:FWLIB/src/stm32f4xx_rtc.c **** 
 2627              		.loc 1 1830 1 is_stmt 0 view .LVU830
 2628 002e 1846     		mov	r0, r3
 2629 0030 10BD     		pop	{r4, pc}
 2630              	.LVL177:
 2631              	.L179:
1818:FWLIB/src/stm32f4xx_rtc.c ****     }
 2632              		.loc 1 1818 7 is_stmt 1 view .LVU831
1818:FWLIB/src/stm32f4xx_rtc.c ****     }
 2633              		.loc 1 1818 15 is_stmt 0 view .LVU832
 2634 0032 034A     		ldr	r2, .L182
 2635 0034 9368     		ldr	r3, [r2, #8]
 2636 0036 23F08003 		bic	r3, r3, #128
 2637 003a 9360     		str	r3, [r2, #8]
 2638 003c F1E7     		b	.L180
 2639              	.L183:
 2640 003e 00BF     		.align	2
 2641              	.L182:
 2642 0040 00280040 		.word	1073752064
 2643              		.cfi_endproc
 2644              	.LFE153:
 2646              		.section	.text.RTC_CalibOutputCmd,"ax",%progbits
 2647              		.align	1
 2648              		.global	RTC_CalibOutputCmd
 2649              		.syntax unified
 2650              		.thumb
 2651              		.thumb_func
 2652              		.fpu fpv4-sp-d16
 2654              	RTC_CalibOutputCmd:
 2655              	.LVL178:
 2656              	.LFB154:
1839:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2657              		.loc 1 1839 1 is_stmt 1 view -0
 2658              		.cfi_startproc
 2659              		@ args = 0, pretend = 0, frame = 0
 2660              		@ frame_needed = 0, uses_anonymous_args = 0
 2661              		@ link register save eliminated.
1841:FWLIB/src/stm32f4xx_rtc.c ****   
 2662              		.loc 1 1841 3 view .LVU834
ARM GAS  /tmp/cc7uya1D.s 			page 109


1844:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2663              		.loc 1 1844 3 view .LVU835
1844:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2664              		.loc 1 1844 12 is_stmt 0 view .LVU836
 2665 0000 0A4B     		ldr	r3, .L187
 2666 0002 CA22     		movs	r2, #202
 2667 0004 5A62     		str	r2, [r3, #36]
1845:FWLIB/src/stm32f4xx_rtc.c ****   
 2668              		.loc 1 1845 3 is_stmt 1 view .LVU837
1845:FWLIB/src/stm32f4xx_rtc.c ****   
 2669              		.loc 1 1845 12 is_stmt 0 view .LVU838
 2670 0006 5322     		movs	r2, #83
 2671 0008 5A62     		str	r2, [r3, #36]
1847:FWLIB/src/stm32f4xx_rtc.c ****   {
 2672              		.loc 1 1847 3 is_stmt 1 view .LVU839
1847:FWLIB/src/stm32f4xx_rtc.c ****   {
 2673              		.loc 1 1847 6 is_stmt 0 view .LVU840
 2674 000a 40B1     		cbz	r0, .L185
1850:FWLIB/src/stm32f4xx_rtc.c ****   }
 2675              		.loc 1 1850 5 is_stmt 1 view .LVU841
1850:FWLIB/src/stm32f4xx_rtc.c ****   }
 2676              		.loc 1 1850 13 is_stmt 0 view .LVU842
 2677 000c 1A46     		mov	r2, r3
 2678 000e 9B68     		ldr	r3, [r3, #8]
 2679 0010 43F40003 		orr	r3, r3, #8388608
 2680 0014 9360     		str	r3, [r2, #8]
 2681              	.L186:
1859:FWLIB/src/stm32f4xx_rtc.c **** }
 2682              		.loc 1 1859 3 is_stmt 1 view .LVU843
1859:FWLIB/src/stm32f4xx_rtc.c **** }
 2683              		.loc 1 1859 12 is_stmt 0 view .LVU844
 2684 0016 054B     		ldr	r3, .L187
 2685 0018 FF22     		movs	r2, #255
 2686 001a 5A62     		str	r2, [r3, #36]
1860:FWLIB/src/stm32f4xx_rtc.c **** 
 2687              		.loc 1 1860 1 view .LVU845
 2688 001c 7047     		bx	lr
 2689              	.L185:
1855:FWLIB/src/stm32f4xx_rtc.c ****   }
 2690              		.loc 1 1855 5 is_stmt 1 view .LVU846
1855:FWLIB/src/stm32f4xx_rtc.c ****   }
 2691              		.loc 1 1855 13 is_stmt 0 view .LVU847
 2692 001e 034A     		ldr	r2, .L187
 2693 0020 9368     		ldr	r3, [r2, #8]
 2694 0022 23F40003 		bic	r3, r3, #8388608
 2695 0026 9360     		str	r3, [r2, #8]
 2696 0028 F5E7     		b	.L186
 2697              	.L188:
 2698 002a 00BF     		.align	2
 2699              	.L187:
 2700 002c 00280040 		.word	1073752064
 2701              		.cfi_endproc
 2702              	.LFE154:
 2704              		.section	.text.RTC_CalibOutputConfig,"ax",%progbits
 2705              		.align	1
 2706              		.global	RTC_CalibOutputConfig
 2707              		.syntax unified
ARM GAS  /tmp/cc7uya1D.s 			page 110


 2708              		.thumb
 2709              		.thumb_func
 2710              		.fpu fpv4-sp-d16
 2712              	RTC_CalibOutputConfig:
 2713              	.LVL179:
 2714              	.LFB155:
1871:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2715              		.loc 1 1871 1 is_stmt 1 view -0
 2716              		.cfi_startproc
 2717              		@ args = 0, pretend = 0, frame = 0
 2718              		@ frame_needed = 0, uses_anonymous_args = 0
 2719              		@ link register save eliminated.
1873:FWLIB/src/stm32f4xx_rtc.c **** 
 2720              		.loc 1 1873 3 view .LVU849
1876:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2721              		.loc 1 1876 3 view .LVU850
1876:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2722              		.loc 1 1876 12 is_stmt 0 view .LVU851
 2723 0000 074B     		ldr	r3, .L190
 2724 0002 CA22     		movs	r2, #202
 2725 0004 5A62     		str	r2, [r3, #36]
1877:FWLIB/src/stm32f4xx_rtc.c ****   
 2726              		.loc 1 1877 3 is_stmt 1 view .LVU852
1877:FWLIB/src/stm32f4xx_rtc.c ****   
 2727              		.loc 1 1877 12 is_stmt 0 view .LVU853
 2728 0006 5322     		movs	r2, #83
 2729 0008 5A62     		str	r2, [r3, #36]
1880:FWLIB/src/stm32f4xx_rtc.c **** 
 2730              		.loc 1 1880 3 is_stmt 1 view .LVU854
1880:FWLIB/src/stm32f4xx_rtc.c **** 
 2731              		.loc 1 1880 11 is_stmt 0 view .LVU855
 2732 000a 9A68     		ldr	r2, [r3, #8]
 2733 000c 22F40022 		bic	r2, r2, #524288
 2734 0010 9A60     		str	r2, [r3, #8]
1883:FWLIB/src/stm32f4xx_rtc.c **** 
 2735              		.loc 1 1883 3 is_stmt 1 view .LVU856
1883:FWLIB/src/stm32f4xx_rtc.c **** 
 2736              		.loc 1 1883 11 is_stmt 0 view .LVU857
 2737 0012 9A68     		ldr	r2, [r3, #8]
 2738 0014 1043     		orrs	r0, r0, r2
 2739              	.LVL180:
1883:FWLIB/src/stm32f4xx_rtc.c **** 
 2740              		.loc 1 1883 11 view .LVU858
 2741 0016 9860     		str	r0, [r3, #8]
1886:FWLIB/src/stm32f4xx_rtc.c **** }
 2742              		.loc 1 1886 3 is_stmt 1 view .LVU859
1886:FWLIB/src/stm32f4xx_rtc.c **** }
 2743              		.loc 1 1886 12 is_stmt 0 view .LVU860
 2744 0018 FF22     		movs	r2, #255
 2745 001a 5A62     		str	r2, [r3, #36]
1887:FWLIB/src/stm32f4xx_rtc.c **** 
 2746              		.loc 1 1887 1 view .LVU861
 2747 001c 7047     		bx	lr
 2748              	.L191:
 2749 001e 00BF     		.align	2
 2750              	.L190:
 2751 0020 00280040 		.word	1073752064
ARM GAS  /tmp/cc7uya1D.s 			page 111


 2752              		.cfi_endproc
 2753              	.LFE155:
 2755              		.section	.text.RTC_SmoothCalibConfig,"ax",%progbits
 2756              		.align	1
 2757              		.global	RTC_SmoothCalibConfig
 2758              		.syntax unified
 2759              		.thumb
 2760              		.thumb_func
 2761              		.fpu fpv4-sp-d16
 2763              	RTC_SmoothCalibConfig:
 2764              	.LVL181:
 2765              	.LFB156:
1909:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2766              		.loc 1 1909 1 is_stmt 1 view -0
 2767              		.cfi_startproc
 2768              		@ args = 0, pretend = 0, frame = 0
 2769              		@ frame_needed = 0, uses_anonymous_args = 0
 2770              		@ link register save eliminated.
1909:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2771              		.loc 1 1909 1 is_stmt 0 view .LVU863
 2772 0000 10B4     		push	{r4}
 2773              	.LCFI29:
 2774              		.cfi_def_cfa_offset 4
 2775              		.cfi_offset 4, -4
1910:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t recalpfcount = 0;
 2776              		.loc 1 1910 3 is_stmt 1 view .LVU864
 2777              	.LVL182:
1911:FWLIB/src/stm32f4xx_rtc.c **** 
 2778              		.loc 1 1911 3 view .LVU865
1914:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
 2779              		.loc 1 1914 3 view .LVU866
1915:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));
 2780              		.loc 1 1915 3 view .LVU867
1916:FWLIB/src/stm32f4xx_rtc.c **** 
 2781              		.loc 1 1916 3 view .LVU868
1919:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2782              		.loc 1 1919 3 view .LVU869
1919:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2783              		.loc 1 1919 12 is_stmt 0 view .LVU870
 2784 0002 134B     		ldr	r3, .L200
 2785 0004 CA24     		movs	r4, #202
 2786 0006 5C62     		str	r4, [r3, #36]
1920:FWLIB/src/stm32f4xx_rtc.c ****   
 2787              		.loc 1 1920 3 is_stmt 1 view .LVU871
1920:FWLIB/src/stm32f4xx_rtc.c ****   
 2788              		.loc 1 1920 12 is_stmt 0 view .LVU872
 2789 0008 5324     		movs	r4, #83
 2790 000a 5C62     		str	r4, [r3, #36]
1923:FWLIB/src/stm32f4xx_rtc.c ****   {
 2791              		.loc 1 1923 3 is_stmt 1 view .LVU873
1923:FWLIB/src/stm32f4xx_rtc.c ****   {
 2792              		.loc 1 1923 11 is_stmt 0 view .LVU874
 2793 000c DB68     		ldr	r3, [r3, #12]
1923:FWLIB/src/stm32f4xx_rtc.c ****   {
 2794              		.loc 1 1923 6 view .LVU875
 2795 000e 13F4803F 		tst	r3, #65536
 2796 0012 0FD1     		bne	.L197
ARM GAS  /tmp/cc7uya1D.s 			page 112


 2797              	.LVL183:
 2798              	.L194:
1933:FWLIB/src/stm32f4xx_rtc.c ****   {
 2799              		.loc 1 1933 3 is_stmt 1 view .LVU876
1933:FWLIB/src/stm32f4xx_rtc.c ****   {
 2800              		.loc 1 1933 11 is_stmt 0 view .LVU877
 2801 0014 0E4B     		ldr	r3, .L200
 2802 0016 DB68     		ldr	r3, [r3, #12]
1933:FWLIB/src/stm32f4xx_rtc.c ****   {
 2803              		.loc 1 1933 6 view .LVU878
 2804 0018 13F4803F 		tst	r3, #65536
 2805 001c 15D1     		bne	.L198
1936:FWLIB/src/stm32f4xx_rtc.c **** 
 2806              		.loc 1 1936 5 is_stmt 1 view .LVU879
1936:FWLIB/src/stm32f4xx_rtc.c **** 
 2807              		.loc 1 1936 60 is_stmt 0 view .LVU880
 2808 001e 0843     		orrs	r0, r0, r1
 2809              	.LVL184:
1936:FWLIB/src/stm32f4xx_rtc.c **** 
 2810              		.loc 1 1936 17 view .LVU881
 2811 0020 1043     		orrs	r0, r0, r2
1936:FWLIB/src/stm32f4xx_rtc.c **** 
 2812              		.loc 1 1936 15 view .LVU882
 2813 0022 0B4B     		ldr	r3, .L200
 2814 0024 D863     		str	r0, [r3, #60]
1938:FWLIB/src/stm32f4xx_rtc.c ****   }
 2815              		.loc 1 1938 5 is_stmt 1 view .LVU883
 2816              	.LVL185:
1938:FWLIB/src/stm32f4xx_rtc.c ****   }
 2817              		.loc 1 1938 12 is_stmt 0 view .LVU884
 2818 0026 0120     		movs	r0, #1
 2819              	.LVL186:
 2820              	.L196:
1946:FWLIB/src/stm32f4xx_rtc.c ****   
 2821              		.loc 1 1946 3 is_stmt 1 view .LVU885
1946:FWLIB/src/stm32f4xx_rtc.c ****   
 2822              		.loc 1 1946 12 is_stmt 0 view .LVU886
 2823 0028 094B     		ldr	r3, .L200
 2824 002a FF22     		movs	r2, #255
 2825              	.LVL187:
1946:FWLIB/src/stm32f4xx_rtc.c ****   
 2826              		.loc 1 1946 12 view .LVU887
 2827 002c 5A62     		str	r2, [r3, #36]
1948:FWLIB/src/stm32f4xx_rtc.c **** }
 2828              		.loc 1 1948 3 is_stmt 1 view .LVU888
1949:FWLIB/src/stm32f4xx_rtc.c **** 
 2829              		.loc 1 1949 1 is_stmt 0 view .LVU889
 2830 002e 5DF8044B 		ldr	r4, [sp], #4
 2831              	.LCFI30:
 2832              		.cfi_remember_state
 2833              		.cfi_restore 4
 2834              		.cfi_def_cfa_offset 0
 2835 0032 7047     		bx	lr
 2836              	.LVL188:
 2837              	.L197:
 2838              	.LCFI31:
 2839              		.cfi_restore_state
ARM GAS  /tmp/cc7uya1D.s 			page 113


1911:FWLIB/src/stm32f4xx_rtc.c **** 
 2840              		.loc 1 1911 12 view .LVU890
 2841 0034 0023     		movs	r3, #0
 2842              	.LVL189:
 2843              	.L193:
1926:FWLIB/src/stm32f4xx_rtc.c ****     {
 2844              		.loc 1 1926 17 view .LVU891
 2845 0036 064C     		ldr	r4, .L200
 2846 0038 E468     		ldr	r4, [r4, #12]
1926:FWLIB/src/stm32f4xx_rtc.c ****     {
 2847              		.loc 1 1926 11 view .LVU892
 2848 003a 14F4803F 		tst	r4, #65536
 2849 003e E9D0     		beq	.L194
1926:FWLIB/src/stm32f4xx_rtc.c ****     {
 2850              		.loc 1 1926 52 discriminator 1 view .LVU893
 2851 0040 B3F5003F 		cmp	r3, #131072
 2852 0044 E6D0     		beq	.L194
1928:FWLIB/src/stm32f4xx_rtc.c ****     }
 2853              		.loc 1 1928 7 is_stmt 1 view .LVU894
1928:FWLIB/src/stm32f4xx_rtc.c ****     }
 2854              		.loc 1 1928 19 is_stmt 0 view .LVU895
 2855 0046 0133     		adds	r3, r3, #1
 2856              	.LVL190:
1928:FWLIB/src/stm32f4xx_rtc.c ****     }
 2857              		.loc 1 1928 19 view .LVU896
 2858 0048 F5E7     		b	.L193
 2859              	.LVL191:
 2860              	.L198:
1942:FWLIB/src/stm32f4xx_rtc.c ****   }
 2861              		.loc 1 1942 12 view .LVU897
 2862 004a 0020     		movs	r0, #0
 2863              	.LVL192:
1942:FWLIB/src/stm32f4xx_rtc.c ****   }
 2864              		.loc 1 1942 12 view .LVU898
 2865 004c ECE7     		b	.L196
 2866              	.L201:
 2867 004e 00BF     		.align	2
 2868              	.L200:
 2869 0050 00280040 		.word	1073752064
 2870              		.cfi_endproc
 2871              	.LFE156:
 2873              		.section	.text.RTC_TimeStampCmd,"ax",%progbits
 2874              		.align	1
 2875              		.global	RTC_TimeStampCmd
 2876              		.syntax unified
 2877              		.thumb
 2878              		.thumb_func
 2879              		.fpu fpv4-sp-d16
 2881              	RTC_TimeStampCmd:
 2882              	.LVL193:
 2883              	.LFB157:
1983:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2884              		.loc 1 1983 1 is_stmt 1 view -0
 2885              		.cfi_startproc
 2886              		@ args = 0, pretend = 0, frame = 0
 2887              		@ frame_needed = 0, uses_anonymous_args = 0
 2888              		@ link register save eliminated.
ARM GAS  /tmp/cc7uya1D.s 			page 114


1984:FWLIB/src/stm32f4xx_rtc.c **** 
 2889              		.loc 1 1984 3 view .LVU900
1987:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2890              		.loc 1 1987 3 view .LVU901
1988:FWLIB/src/stm32f4xx_rtc.c **** 
 2891              		.loc 1 1988 3 view .LVU902
1991:FWLIB/src/stm32f4xx_rtc.c **** 
 2892              		.loc 1 1991 3 view .LVU903
1991:FWLIB/src/stm32f4xx_rtc.c **** 
 2893              		.loc 1 1991 26 is_stmt 0 view .LVU904
 2894 0000 0A4B     		ldr	r3, .L205
 2895 0002 9B68     		ldr	r3, [r3, #8]
1991:FWLIB/src/stm32f4xx_rtc.c **** 
 2896              		.loc 1 1991 10 view .LVU905
 2897 0004 23F40063 		bic	r3, r3, #2048
 2898 0008 23F00803 		bic	r3, r3, #8
 2899              	.LVL194:
1994:FWLIB/src/stm32f4xx_rtc.c ****   {
 2900              		.loc 1 1994 3 is_stmt 1 view .LVU906
1994:FWLIB/src/stm32f4xx_rtc.c ****   {
 2901              		.loc 1 1994 6 is_stmt 0 view .LVU907
 2902 000c 59B1     		cbz	r1, .L203
1996:FWLIB/src/stm32f4xx_rtc.c ****   }
 2903              		.loc 1 1996 5 is_stmt 1 view .LVU908
1996:FWLIB/src/stm32f4xx_rtc.c ****   }
 2904              		.loc 1 1996 12 is_stmt 0 view .LVU909
 2905 000e 0343     		orrs	r3, r3, r0
 2906              	.LVL195:
1996:FWLIB/src/stm32f4xx_rtc.c ****   }
 2907              		.loc 1 1996 12 view .LVU910
 2908 0010 43F40063 		orr	r3, r3, #2048
 2909              	.LVL196:
 2910              	.L204:
2004:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2911              		.loc 1 2004 3 is_stmt 1 view .LVU911
2004:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2912              		.loc 1 2004 12 is_stmt 0 view .LVU912
 2913 0014 054A     		ldr	r2, .L205
 2914 0016 CA21     		movs	r1, #202
 2915              	.LVL197:
2004:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2916              		.loc 1 2004 12 view .LVU913
 2917 0018 5162     		str	r1, [r2, #36]
2005:FWLIB/src/stm32f4xx_rtc.c **** 
 2918              		.loc 1 2005 3 is_stmt 1 view .LVU914
2005:FWLIB/src/stm32f4xx_rtc.c **** 
 2919              		.loc 1 2005 12 is_stmt 0 view .LVU915
 2920 001a 5321     		movs	r1, #83
 2921 001c 5162     		str	r1, [r2, #36]
2008:FWLIB/src/stm32f4xx_rtc.c **** 
 2922              		.loc 1 2008 3 is_stmt 1 view .LVU916
2008:FWLIB/src/stm32f4xx_rtc.c **** 
 2923              		.loc 1 2008 11 is_stmt 0 view .LVU917
 2924 001e 9360     		str	r3, [r2, #8]
2011:FWLIB/src/stm32f4xx_rtc.c **** }
 2925              		.loc 1 2011 3 is_stmt 1 view .LVU918
2011:FWLIB/src/stm32f4xx_rtc.c **** }
ARM GAS  /tmp/cc7uya1D.s 			page 115


 2926              		.loc 1 2011 12 is_stmt 0 view .LVU919
 2927 0020 FF23     		movs	r3, #255
 2928              	.LVL198:
2011:FWLIB/src/stm32f4xx_rtc.c **** }
 2929              		.loc 1 2011 12 view .LVU920
 2930 0022 5362     		str	r3, [r2, #36]
 2931              	.LVL199:
2012:FWLIB/src/stm32f4xx_rtc.c **** 
 2932              		.loc 1 2012 1 view .LVU921
 2933 0024 7047     		bx	lr
 2934              	.LVL200:
 2935              	.L203:
2000:FWLIB/src/stm32f4xx_rtc.c ****   }
 2936              		.loc 1 2000 5 is_stmt 1 view .LVU922
2000:FWLIB/src/stm32f4xx_rtc.c ****   }
 2937              		.loc 1 2000 12 is_stmt 0 view .LVU923
 2938 0026 0343     		orrs	r3, r3, r0
 2939              	.LVL201:
2000:FWLIB/src/stm32f4xx_rtc.c ****   }
 2940              		.loc 1 2000 12 view .LVU924
 2941 0028 F4E7     		b	.L204
 2942              	.L206:
 2943 002a 00BF     		.align	2
 2944              	.L205:
 2945 002c 00280040 		.word	1073752064
 2946              		.cfi_endproc
 2947              	.LFE157:
 2949              		.section	.text.RTC_GetTimeStamp,"ax",%progbits
 2950              		.align	1
 2951              		.global	RTC_GetTimeStamp
 2952              		.syntax unified
 2953              		.thumb
 2954              		.thumb_func
 2955              		.fpu fpv4-sp-d16
 2957              	RTC_GetTimeStamp:
 2958              	.LVL202:
 2959              	.LFB158:
2028:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
 2960              		.loc 1 2028 1 is_stmt 1 view -0
 2961              		.cfi_startproc
 2962              		@ args = 0, pretend = 0, frame = 0
 2963              		@ frame_needed = 0, uses_anonymous_args = 0
2028:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
 2964              		.loc 1 2028 1 is_stmt 0 view .LVU926
 2965 0000 70B5     		push	{r4, r5, r6, lr}
 2966              	.LCFI32:
 2967              		.cfi_def_cfa_offset 16
 2968              		.cfi_offset 4, -16
 2969              		.cfi_offset 5, -12
 2970              		.cfi_offset 6, -8
 2971              		.cfi_offset 14, -4
2029:FWLIB/src/stm32f4xx_rtc.c **** 
 2972              		.loc 1 2029 3 is_stmt 1 view .LVU927
 2973              	.LVL203:
2032:FWLIB/src/stm32f4xx_rtc.c **** 
 2974              		.loc 1 2032 3 view .LVU928
2035:FWLIB/src/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
ARM GAS  /tmp/cc7uya1D.s 			page 116


 2975              		.loc 1 2035 3 view .LVU929
2035:FWLIB/src/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 2976              		.loc 1 2035 27 is_stmt 0 view .LVU930
 2977 0002 1D4B     		ldr	r3, .L210
 2978 0004 1C6B     		ldr	r4, [r3, #48]
2035:FWLIB/src/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 2979              		.loc 1 2035 11 view .LVU931
 2980 0006 04F07F34 		and	r4, r4, #2139062143
 2981 000a 24F0FE44 		bic	r4, r4, #2130706432
 2982              	.LVL204:
2036:FWLIB/src/stm32f4xx_rtc.c **** 
 2983              		.loc 1 2036 3 is_stmt 1 view .LVU932
2036:FWLIB/src/stm32f4xx_rtc.c **** 
 2984              		.loc 1 2036 27 is_stmt 0 view .LVU933
 2985 000e 5B6B     		ldr	r3, [r3, #52]
2036:FWLIB/src/stm32f4xx_rtc.c **** 
 2986              		.loc 1 2036 11 view .LVU934
 2987 0010 23F07F43 		bic	r3, r3, #-16777216
 2988 0014 23F0C003 		bic	r3, r3, #192
 2989              	.LVL205:
2039:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 2990              		.loc 1 2039 3 is_stmt 1 view .LVU935
2039:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 2991              		.loc 1 2039 36 is_stmt 0 view .LVU936
 2992 0018 250C     		lsrs	r5, r4, #16
 2993 001a 05F03F06 		and	r6, r5, #63
2039:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 2994              		.loc 1 2039 34 view .LVU937
 2995 001e 0E70     		strb	r6, [r1]
2040:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 2996              		.loc 1 2040 3 is_stmt 1 view .LVU938
2040:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 2997              		.loc 1 2040 38 is_stmt 0 view .LVU939
 2998 0020 C4F30626 		ubfx	r6, r4, #8, #7
2040:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 2999              		.loc 1 2040 36 view .LVU940
 3000 0024 4E70     		strb	r6, [r1, #1]
2041:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 3001              		.loc 1 2041 3 is_stmt 1 view .LVU941
2041:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 3002              		.loc 1 2041 36 is_stmt 0 view .LVU942
 3003 0026 8C70     		strb	r4, [r1, #2]
2042:FWLIB/src/stm32f4xx_rtc.c **** 
 3004              		.loc 1 2042 3 is_stmt 1 view .LVU943
2042:FWLIB/src/stm32f4xx_rtc.c **** 
 3005              		.loc 1 2042 34 is_stmt 0 view .LVU944
 3006 0028 05F04005 		and	r5, r5, #64
2042:FWLIB/src/stm32f4xx_rtc.c **** 
 3007              		.loc 1 2042 32 view .LVU945
 3008 002c CD70     		strb	r5, [r1, #3]
2045:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 3009              		.loc 1 2045 3 is_stmt 1 view .LVU946
2045:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 3010              		.loc 1 2045 33 is_stmt 0 view .LVU947
 3011 002e 0024     		movs	r4, #0
 3012              	.LVL206:
2045:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
ARM GAS  /tmp/cc7uya1D.s 			page 117


 3013              		.loc 1 2045 33 view .LVU948
 3014 0030 D470     		strb	r4, [r2, #3]
2046:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 3015              		.loc 1 2046 3 is_stmt 1 view .LVU949
2046:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 3016              		.loc 1 2046 36 is_stmt 0 view .LVU950
 3017 0032 C3F30424 		ubfx	r4, r3, #8, #5
2046:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 3018              		.loc 1 2046 34 view .LVU951
 3019 0036 5470     		strb	r4, [r2, #1]
2047:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 3020              		.loc 1 2047 3 is_stmt 1 view .LVU952
2047:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 3021              		.loc 1 2047 33 is_stmt 0 view .LVU953
 3022 0038 9370     		strb	r3, [r2, #2]
2048:FWLIB/src/stm32f4xx_rtc.c **** 
 3023              		.loc 1 2048 3 is_stmt 1 view .LVU954
2048:FWLIB/src/stm32f4xx_rtc.c **** 
 3024              		.loc 1 2048 38 is_stmt 0 view .LVU955
 3025 003a C3F34233 		ubfx	r3, r3, #13, #3
 3026              	.LVL207:
2048:FWLIB/src/stm32f4xx_rtc.c **** 
 3027              		.loc 1 2048 36 view .LVU956
 3028 003e 1370     		strb	r3, [r2]
2051:FWLIB/src/stm32f4xx_rtc.c ****   {
 3029              		.loc 1 2051 3 is_stmt 1 view .LVU957
2051:FWLIB/src/stm32f4xx_rtc.c ****   {
 3030              		.loc 1 2051 6 is_stmt 0 view .LVU958
 3031 0040 C8B9     		cbnz	r0, .L207
 3032 0042 1446     		mov	r4, r2
 3033 0044 0D46     		mov	r5, r1
2054:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 3034              		.loc 1 2054 5 is_stmt 1 view .LVU959
2054:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 3035              		.loc 1 2054 47 is_stmt 0 view .LVU960
 3036 0046 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 3037              	.LVL208:
2054:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 3038              		.loc 1 2054 47 view .LVU961
 3039 0048 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3040              	.LVL209:
2054:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 3041              		.loc 1 2054 36 view .LVU962
 3042 004c 2870     		strb	r0, [r5]
2055:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 3043              		.loc 1 2055 5 is_stmt 1 view .LVU963
2055:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 3044              		.loc 1 2055 49 is_stmt 0 view .LVU964
 3045 004e 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 3046 0050 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3047              	.LVL210:
2055:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 3048              		.loc 1 2055 38 view .LVU965
 3049 0054 6870     		strb	r0, [r5, #1]
2056:FWLIB/src/stm32f4xx_rtc.c **** 
 3050              		.loc 1 2056 5 is_stmt 1 view .LVU966
2056:FWLIB/src/stm32f4xx_rtc.c **** 
ARM GAS  /tmp/cc7uya1D.s 			page 118


 3051              		.loc 1 2056 49 is_stmt 0 view .LVU967
 3052 0056 A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 3053 0058 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3054              	.LVL211:
2056:FWLIB/src/stm32f4xx_rtc.c **** 
 3055              		.loc 1 2056 38 view .LVU968
 3056 005c A870     		strb	r0, [r5, #2]
2059:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 3057              		.loc 1 2059 5 is_stmt 1 view .LVU969
2059:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 3058              		.loc 1 2059 47 is_stmt 0 view .LVU970
 3059 005e 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 3060 0060 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3061              	.LVL212:
2059:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 3062              		.loc 1 2059 36 view .LVU971
 3063 0064 6070     		strb	r0, [r4, #1]
2060:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 3064              		.loc 1 2060 5 is_stmt 1 view .LVU972
2060:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 3065              		.loc 1 2060 46 is_stmt 0 view .LVU973
 3066 0066 A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 3067 0068 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3068              	.LVL213:
2060:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 3069              		.loc 1 2060 35 view .LVU974
 3070 006c A070     		strb	r0, [r4, #2]
2061:FWLIB/src/stm32f4xx_rtc.c ****   }
 3071              		.loc 1 2061 5 is_stmt 1 view .LVU975
2061:FWLIB/src/stm32f4xx_rtc.c ****   }
 3072              		.loc 1 2061 49 is_stmt 0 view .LVU976
 3073 006e 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 3074 0070 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3075              	.LVL214:
2061:FWLIB/src/stm32f4xx_rtc.c ****   }
 3076              		.loc 1 2061 38 view .LVU977
 3077 0074 2070     		strb	r0, [r4]
 3078              	.LVL215:
 3079              	.L207:
2063:FWLIB/src/stm32f4xx_rtc.c **** 
 3080              		.loc 1 2063 1 view .LVU978
 3081 0076 70BD     		pop	{r4, r5, r6, pc}
 3082              	.L211:
 3083              		.align	2
 3084              	.L210:
 3085 0078 00280040 		.word	1073752064
 3086              		.cfi_endproc
 3087              	.LFE158:
 3089              		.section	.text.RTC_GetTimeStampSubSecond,"ax",%progbits
 3090              		.align	1
 3091              		.global	RTC_GetTimeStampSubSecond
 3092              		.syntax unified
 3093              		.thumb
 3094              		.thumb_func
 3095              		.fpu fpv4-sp-d16
 3097              	RTC_GetTimeStampSubSecond:
 3098              	.LFB159:
ARM GAS  /tmp/cc7uya1D.s 			page 119


2071:FWLIB/src/stm32f4xx_rtc.c ****   /* Get timestamp sub seconds values from the correspondent registers */
 3099              		.loc 1 2071 1 is_stmt 1 view -0
 3100              		.cfi_startproc
 3101              		@ args = 0, pretend = 0, frame = 0
 3102              		@ frame_needed = 0, uses_anonymous_args = 0
 3103              		@ link register save eliminated.
2073:FWLIB/src/stm32f4xx_rtc.c **** }
 3104              		.loc 1 2073 3 view .LVU980
2073:FWLIB/src/stm32f4xx_rtc.c **** }
 3105              		.loc 1 2073 10 is_stmt 0 view .LVU981
 3106 0000 014B     		ldr	r3, .L213
 3107 0002 986B     		ldr	r0, [r3, #56]
2074:FWLIB/src/stm32f4xx_rtc.c **** 
 3108              		.loc 1 2074 1 view .LVU982
 3109 0004 7047     		bx	lr
 3110              	.L214:
 3111 0006 00BF     		.align	2
 3112              	.L213:
 3113 0008 00280040 		.word	1073752064
 3114              		.cfi_endproc
 3115              	.LFE159:
 3117              		.section	.text.RTC_TamperTriggerConfig,"ax",%progbits
 3118              		.align	1
 3119              		.global	RTC_TamperTriggerConfig
 3120              		.syntax unified
 3121              		.thumb
 3122              		.thumb_func
 3123              		.fpu fpv4-sp-d16
 3125              	RTC_TamperTriggerConfig:
 3126              	.LVL216:
 3127              	.LFB160:
2106:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 3128              		.loc 1 2106 1 is_stmt 1 view -0
 3129              		.cfi_startproc
 3130              		@ args = 0, pretend = 0, frame = 0
 3131              		@ frame_needed = 0, uses_anonymous_args = 0
 3132              		@ link register save eliminated.
2108:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
 3133              		.loc 1 2108 3 view .LVU984
2109:FWLIB/src/stm32f4xx_rtc.c ****  
 3134              		.loc 1 2109 3 view .LVU985
2111:FWLIB/src/stm32f4xx_rtc.c ****   {  
 3135              		.loc 1 2111 3 view .LVU986
2111:FWLIB/src/stm32f4xx_rtc.c ****   {  
 3136              		.loc 1 2111 6 is_stmt 0 view .LVU987
 3137 0000 29B9     		cbnz	r1, .L216
2114:FWLIB/src/stm32f4xx_rtc.c ****   }
 3138              		.loc 1 2114 5 is_stmt 1 view .LVU988
2114:FWLIB/src/stm32f4xx_rtc.c ****   }
 3139              		.loc 1 2114 16 is_stmt 0 view .LVU989
 3140 0002 064A     		ldr	r2, .L218
 3141 0004 136C     		ldr	r3, [r2, #64]
 3142 0006 23EA4003 		bic	r3, r3, r0, lsl #1
 3143 000a 1364     		str	r3, [r2, #64]
 3144 000c 7047     		bx	lr
 3145              	.L216:
2119:FWLIB/src/stm32f4xx_rtc.c ****   }  
ARM GAS  /tmp/cc7uya1D.s 			page 120


 3146              		.loc 1 2119 5 is_stmt 1 view .LVU990
2119:FWLIB/src/stm32f4xx_rtc.c ****   }  
 3147              		.loc 1 2119 16 is_stmt 0 view .LVU991
 3148 000e 034A     		ldr	r2, .L218
 3149 0010 136C     		ldr	r3, [r2, #64]
 3150 0012 43EA4003 		orr	r3, r3, r0, lsl #1
 3151 0016 1364     		str	r3, [r2, #64]
2121:FWLIB/src/stm32f4xx_rtc.c **** 
 3152              		.loc 1 2121 1 view .LVU992
 3153 0018 7047     		bx	lr
 3154              	.L219:
 3155 001a 00BF     		.align	2
 3156              	.L218:
 3157 001c 00280040 		.word	1073752064
 3158              		.cfi_endproc
 3159              	.LFE160:
 3161              		.section	.text.RTC_TamperCmd,"ax",%progbits
 3162              		.align	1
 3163              		.global	RTC_TamperCmd
 3164              		.syntax unified
 3165              		.thumb
 3166              		.thumb_func
 3167              		.fpu fpv4-sp-d16
 3169              	RTC_TamperCmd:
 3170              	.LVL217:
 3171              	.LFB161:
2132:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 3172              		.loc 1 2132 1 is_stmt 1 view -0
 3173              		.cfi_startproc
 3174              		@ args = 0, pretend = 0, frame = 0
 3175              		@ frame_needed = 0, uses_anonymous_args = 0
 3176              		@ link register save eliminated.
2134:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 3177              		.loc 1 2134 3 view .LVU994
2135:FWLIB/src/stm32f4xx_rtc.c ****   
 3178              		.loc 1 2135 3 view .LVU995
2137:FWLIB/src/stm32f4xx_rtc.c ****   {
 3179              		.loc 1 2137 3 view .LVU996
2137:FWLIB/src/stm32f4xx_rtc.c ****   {
 3180              		.loc 1 2137 6 is_stmt 0 view .LVU997
 3181 0000 21B1     		cbz	r1, .L221
2140:FWLIB/src/stm32f4xx_rtc.c ****   }
 3182              		.loc 1 2140 5 is_stmt 1 view .LVU998
2140:FWLIB/src/stm32f4xx_rtc.c ****   }
 3183              		.loc 1 2140 16 is_stmt 0 view .LVU999
 3184 0002 054A     		ldr	r2, .L223
 3185 0004 136C     		ldr	r3, [r2, #64]
 3186 0006 0343     		orrs	r3, r3, r0
 3187 0008 1364     		str	r3, [r2, #64]
 3188 000a 7047     		bx	lr
 3189              	.L221:
2145:FWLIB/src/stm32f4xx_rtc.c ****   }  
 3190              		.loc 1 2145 5 is_stmt 1 view .LVU1000
2145:FWLIB/src/stm32f4xx_rtc.c ****   }  
 3191              		.loc 1 2145 16 is_stmt 0 view .LVU1001
 3192 000c 024A     		ldr	r2, .L223
 3193 000e 136C     		ldr	r3, [r2, #64]
ARM GAS  /tmp/cc7uya1D.s 			page 121


 3194 0010 23EA0003 		bic	r3, r3, r0
 3195 0014 1364     		str	r3, [r2, #64]
2147:FWLIB/src/stm32f4xx_rtc.c **** 
 3196              		.loc 1 2147 1 view .LVU1002
 3197 0016 7047     		bx	lr
 3198              	.L224:
 3199              		.align	2
 3200              	.L223:
 3201 0018 00280040 		.word	1073752064
 3202              		.cfi_endproc
 3203              	.LFE161:
 3205              		.section	.text.RTC_TamperFilterConfig,"ax",%progbits
 3206              		.align	1
 3207              		.global	RTC_TamperFilterConfig
 3208              		.syntax unified
 3209              		.thumb
 3210              		.thumb_func
 3211              		.fpu fpv4-sp-d16
 3213              	RTC_TamperFilterConfig:
 3214              	.LVL218:
 3215              	.LFB162:
2163:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 3216              		.loc 1 2163 1 is_stmt 1 view -0
 3217              		.cfi_startproc
 3218              		@ args = 0, pretend = 0, frame = 0
 3219              		@ frame_needed = 0, uses_anonymous_args = 0
 3220              		@ link register save eliminated.
2165:FWLIB/src/stm32f4xx_rtc.c ****    
 3221              		.loc 1 2165 3 view .LVU1004
2168:FWLIB/src/stm32f4xx_rtc.c **** 
 3222              		.loc 1 2168 3 view .LVU1005
2168:FWLIB/src/stm32f4xx_rtc.c **** 
 3223              		.loc 1 2168 14 is_stmt 0 view .LVU1006
 3224 0000 044B     		ldr	r3, .L226
 3225 0002 1A6C     		ldr	r2, [r3, #64]
 3226 0004 22F4C052 		bic	r2, r2, #6144
 3227 0008 1A64     		str	r2, [r3, #64]
2171:FWLIB/src/stm32f4xx_rtc.c **** }
 3228              		.loc 1 2171 3 is_stmt 1 view .LVU1007
2171:FWLIB/src/stm32f4xx_rtc.c **** }
 3229              		.loc 1 2171 14 is_stmt 0 view .LVU1008
 3230 000a 1A6C     		ldr	r2, [r3, #64]
 3231 000c 1043     		orrs	r0, r0, r2
 3232              	.LVL219:
2171:FWLIB/src/stm32f4xx_rtc.c **** }
 3233              		.loc 1 2171 14 view .LVU1009
 3234 000e 1864     		str	r0, [r3, #64]
2172:FWLIB/src/stm32f4xx_rtc.c **** 
 3235              		.loc 1 2172 1 view .LVU1010
 3236 0010 7047     		bx	lr
 3237              	.L227:
 3238 0012 00BF     		.align	2
 3239              	.L226:
 3240 0014 00280040 		.word	1073752064
 3241              		.cfi_endproc
 3242              	.LFE162:
 3244              		.section	.text.RTC_TamperSamplingFreqConfig,"ax",%progbits
ARM GAS  /tmp/cc7uya1D.s 			page 122


 3245              		.align	1
 3246              		.global	RTC_TamperSamplingFreqConfig
 3247              		.syntax unified
 3248              		.thumb
 3249              		.thumb_func
 3250              		.fpu fpv4-sp-d16
 3252              	RTC_TamperSamplingFreqConfig:
 3253              	.LVL220:
 3254              	.LFB163:
2197:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 3255              		.loc 1 2197 1 is_stmt 1 view -0
 3256              		.cfi_startproc
 3257              		@ args = 0, pretend = 0, frame = 0
 3258              		@ frame_needed = 0, uses_anonymous_args = 0
 3259              		@ link register save eliminated.
2199:FWLIB/src/stm32f4xx_rtc.c ****  
 3260              		.loc 1 2199 3 view .LVU1012
2202:FWLIB/src/stm32f4xx_rtc.c **** 
 3261              		.loc 1 2202 3 view .LVU1013
2202:FWLIB/src/stm32f4xx_rtc.c **** 
 3262              		.loc 1 2202 14 is_stmt 0 view .LVU1014
 3263 0000 044B     		ldr	r3, .L229
 3264 0002 1A6C     		ldr	r2, [r3, #64]
 3265 0004 22F4E062 		bic	r2, r2, #1792
 3266 0008 1A64     		str	r2, [r3, #64]
2205:FWLIB/src/stm32f4xx_rtc.c **** }
 3267              		.loc 1 2205 3 is_stmt 1 view .LVU1015
2205:FWLIB/src/stm32f4xx_rtc.c **** }
 3268              		.loc 1 2205 14 is_stmt 0 view .LVU1016
 3269 000a 1A6C     		ldr	r2, [r3, #64]
 3270 000c 1043     		orrs	r0, r0, r2
 3271              	.LVL221:
2205:FWLIB/src/stm32f4xx_rtc.c **** }
 3272              		.loc 1 2205 14 view .LVU1017
 3273 000e 1864     		str	r0, [r3, #64]
2206:FWLIB/src/stm32f4xx_rtc.c **** 
 3274              		.loc 1 2206 1 view .LVU1018
 3275 0010 7047     		bx	lr
 3276              	.L230:
 3277 0012 00BF     		.align	2
 3278              	.L229:
 3279 0014 00280040 		.word	1073752064
 3280              		.cfi_endproc
 3281              	.LFE163:
 3283              		.section	.text.RTC_TamperPinsPrechargeDuration,"ax",%progbits
 3284              		.align	1
 3285              		.global	RTC_TamperPinsPrechargeDuration
 3286              		.syntax unified
 3287              		.thumb
 3288              		.thumb_func
 3289              		.fpu fpv4-sp-d16
 3291              	RTC_TamperPinsPrechargeDuration:
 3292              	.LVL222:
 3293              	.LFB164:
2220:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 3294              		.loc 1 2220 1 is_stmt 1 view -0
 3295              		.cfi_startproc
ARM GAS  /tmp/cc7uya1D.s 			page 123


 3296              		@ args = 0, pretend = 0, frame = 0
 3297              		@ frame_needed = 0, uses_anonymous_args = 0
 3298              		@ link register save eliminated.
2222:FWLIB/src/stm32f4xx_rtc.c ****    
 3299              		.loc 1 2222 3 view .LVU1020
2225:FWLIB/src/stm32f4xx_rtc.c **** 
 3300              		.loc 1 2225 3 view .LVU1021
2225:FWLIB/src/stm32f4xx_rtc.c **** 
 3301              		.loc 1 2225 14 is_stmt 0 view .LVU1022
 3302 0000 044B     		ldr	r3, .L232
 3303 0002 1A6C     		ldr	r2, [r3, #64]
 3304 0004 22F4C042 		bic	r2, r2, #24576
 3305 0008 1A64     		str	r2, [r3, #64]
2228:FWLIB/src/stm32f4xx_rtc.c **** }
 3306              		.loc 1 2228 3 is_stmt 1 view .LVU1023
2228:FWLIB/src/stm32f4xx_rtc.c **** }
 3307              		.loc 1 2228 14 is_stmt 0 view .LVU1024
 3308 000a 1A6C     		ldr	r2, [r3, #64]
 3309 000c 1043     		orrs	r0, r0, r2
 3310              	.LVL223:
2228:FWLIB/src/stm32f4xx_rtc.c **** }
 3311              		.loc 1 2228 14 view .LVU1025
 3312 000e 1864     		str	r0, [r3, #64]
2229:FWLIB/src/stm32f4xx_rtc.c **** 
 3313              		.loc 1 2229 1 view .LVU1026
 3314 0010 7047     		bx	lr
 3315              	.L233:
 3316 0012 00BF     		.align	2
 3317              	.L232:
 3318 0014 00280040 		.word	1073752064
 3319              		.cfi_endproc
 3320              	.LFE164:
 3322              		.section	.text.RTC_TimeStampOnTamperDetectionCmd,"ax",%progbits
 3323              		.align	1
 3324              		.global	RTC_TimeStampOnTamperDetectionCmd
 3325              		.syntax unified
 3326              		.thumb
 3327              		.thumb_func
 3328              		.fpu fpv4-sp-d16
 3330              	RTC_TimeStampOnTamperDetectionCmd:
 3331              	.LVL224:
 3332              	.LFB165:
2240:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 3333              		.loc 1 2240 1 is_stmt 1 view -0
 3334              		.cfi_startproc
 3335              		@ args = 0, pretend = 0, frame = 0
 3336              		@ frame_needed = 0, uses_anonymous_args = 0
 3337              		@ link register save eliminated.
2242:FWLIB/src/stm32f4xx_rtc.c ****    
 3338              		.loc 1 2242 3 view .LVU1028
2244:FWLIB/src/stm32f4xx_rtc.c ****   {
 3339              		.loc 1 2244 3 view .LVU1029
2244:FWLIB/src/stm32f4xx_rtc.c ****   {
 3340              		.loc 1 2244 6 is_stmt 0 view .LVU1030
 3341 0000 28B1     		cbz	r0, .L235
2247:FWLIB/src/stm32f4xx_rtc.c ****   }
 3342              		.loc 1 2247 5 is_stmt 1 view .LVU1031
ARM GAS  /tmp/cc7uya1D.s 			page 124


2247:FWLIB/src/stm32f4xx_rtc.c ****   }
 3343              		.loc 1 2247 16 is_stmt 0 view .LVU1032
 3344 0002 064A     		ldr	r2, .L237
 3345 0004 136C     		ldr	r3, [r2, #64]
 3346 0006 43F08003 		orr	r3, r3, #128
 3347 000a 1364     		str	r3, [r2, #64]
 3348 000c 7047     		bx	lr
 3349              	.L235:
2252:FWLIB/src/stm32f4xx_rtc.c ****   }
 3350              		.loc 1 2252 5 is_stmt 1 view .LVU1033
2252:FWLIB/src/stm32f4xx_rtc.c ****   }
 3351              		.loc 1 2252 16 is_stmt 0 view .LVU1034
 3352 000e 034A     		ldr	r2, .L237
 3353 0010 136C     		ldr	r3, [r2, #64]
 3354 0012 23F08003 		bic	r3, r3, #128
 3355 0016 1364     		str	r3, [r2, #64]
2254:FWLIB/src/stm32f4xx_rtc.c **** 
 3356              		.loc 1 2254 1 view .LVU1035
 3357 0018 7047     		bx	lr
 3358              	.L238:
 3359 001a 00BF     		.align	2
 3360              	.L237:
 3361 001c 00280040 		.word	1073752064
 3362              		.cfi_endproc
 3363              	.LFE165:
 3365              		.section	.text.RTC_TamperPullUpCmd,"ax",%progbits
 3366              		.align	1
 3367              		.global	RTC_TamperPullUpCmd
 3368              		.syntax unified
 3369              		.thumb
 3370              		.thumb_func
 3371              		.fpu fpv4-sp-d16
 3373              	RTC_TamperPullUpCmd:
 3374              	.LVL225:
 3375              	.LFB166:
2263:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 3376              		.loc 1 2263 1 is_stmt 1 view -0
 3377              		.cfi_startproc
 3378              		@ args = 0, pretend = 0, frame = 0
 3379              		@ frame_needed = 0, uses_anonymous_args = 0
 3380              		@ link register save eliminated.
2265:FWLIB/src/stm32f4xx_rtc.c ****   
 3381              		.loc 1 2265 3 view .LVU1037
2267:FWLIB/src/stm32f4xx_rtc.c ****   {
 3382              		.loc 1 2267 2 view .LVU1038
2267:FWLIB/src/stm32f4xx_rtc.c ****   {
 3383              		.loc 1 2267 5 is_stmt 0 view .LVU1039
 3384 0000 28B1     		cbz	r0, .L240
2270:FWLIB/src/stm32f4xx_rtc.c ****   }
 3385              		.loc 1 2270 5 is_stmt 1 view .LVU1040
2270:FWLIB/src/stm32f4xx_rtc.c ****   }
 3386              		.loc 1 2270 16 is_stmt 0 view .LVU1041
 3387 0002 064A     		ldr	r2, .L242
 3388 0004 136C     		ldr	r3, [r2, #64]
 3389 0006 23F40043 		bic	r3, r3, #32768
 3390 000a 1364     		str	r3, [r2, #64]
 3391 000c 7047     		bx	lr
ARM GAS  /tmp/cc7uya1D.s 			page 125


 3392              	.L240:
2275:FWLIB/src/stm32f4xx_rtc.c ****   } 
 3393              		.loc 1 2275 5 is_stmt 1 view .LVU1042
2275:FWLIB/src/stm32f4xx_rtc.c ****   } 
 3394              		.loc 1 2275 16 is_stmt 0 view .LVU1043
 3395 000e 034A     		ldr	r2, .L242
 3396 0010 136C     		ldr	r3, [r2, #64]
 3397 0012 43F40043 		orr	r3, r3, #32768
 3398 0016 1364     		str	r3, [r2, #64]
2277:FWLIB/src/stm32f4xx_rtc.c **** 
 3399              		.loc 1 2277 1 view .LVU1044
 3400 0018 7047     		bx	lr
 3401              	.L243:
 3402 001a 00BF     		.align	2
 3403              	.L242:
 3404 001c 00280040 		.word	1073752064
 3405              		.cfi_endproc
 3406              	.LFE166:
 3408              		.section	.text.RTC_WriteBackupRegister,"ax",%progbits
 3409              		.align	1
 3410              		.global	RTC_WriteBackupRegister
 3411              		.syntax unified
 3412              		.thumb
 3413              		.thumb_func
 3414              		.fpu fpv4-sp-d16
 3416              	RTC_WriteBackupRegister:
 3417              	.LVL226:
 3418              	.LFB167:
2304:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 3419              		.loc 1 2304 1 is_stmt 1 view -0
 3420              		.cfi_startproc
 3421              		@ args = 0, pretend = 0, frame = 8
 3422              		@ frame_needed = 0, uses_anonymous_args = 0
 3423              		@ link register save eliminated.
2304:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 3424              		.loc 1 2304 1 is_stmt 0 view .LVU1046
 3425 0000 82B0     		sub	sp, sp, #8
 3426              	.LCFI33:
 3427              		.cfi_def_cfa_offset 8
2305:FWLIB/src/stm32f4xx_rtc.c ****   
 3428              		.loc 1 2305 3 is_stmt 1 view .LVU1047
2305:FWLIB/src/stm32f4xx_rtc.c ****   
 3429              		.loc 1 2305 17 is_stmt 0 view .LVU1048
 3430 0002 0023     		movs	r3, #0
 3431 0004 0193     		str	r3, [sp, #4]
2308:FWLIB/src/stm32f4xx_rtc.c **** 
 3432              		.loc 1 2308 3 is_stmt 1 view .LVU1049
2310:FWLIB/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 3433              		.loc 1 2310 3 view .LVU1050
2310:FWLIB/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 3434              		.loc 1 2310 7 is_stmt 0 view .LVU1051
 3435 0006 054B     		ldr	r3, .L246
 3436 0008 0193     		str	r3, [sp, #4]
2311:FWLIB/src/stm32f4xx_rtc.c **** 
 3437              		.loc 1 2311 3 is_stmt 1 view .LVU1052
2311:FWLIB/src/stm32f4xx_rtc.c **** 
 3438              		.loc 1 2311 7 is_stmt 0 view .LVU1053
ARM GAS  /tmp/cc7uya1D.s 			page 126


 3439 000a 019B     		ldr	r3, [sp, #4]
 3440 000c 03EB8000 		add	r0, r3, r0, lsl #2
 3441              	.LVL227:
2311:FWLIB/src/stm32f4xx_rtc.c **** 
 3442              		.loc 1 2311 7 view .LVU1054
 3443 0010 0190     		str	r0, [sp, #4]
2314:FWLIB/src/stm32f4xx_rtc.c **** }
 3444              		.loc 1 2314 3 is_stmt 1 view .LVU1055
2314:FWLIB/src/stm32f4xx_rtc.c **** }
 3445              		.loc 1 2314 4 is_stmt 0 view .LVU1056
 3446 0012 019B     		ldr	r3, [sp, #4]
2314:FWLIB/src/stm32f4xx_rtc.c **** }
 3447              		.loc 1 2314 25 view .LVU1057
 3448 0014 1960     		str	r1, [r3]
2315:FWLIB/src/stm32f4xx_rtc.c **** 
 3449              		.loc 1 2315 1 view .LVU1058
 3450 0016 02B0     		add	sp, sp, #8
 3451              	.LCFI34:
 3452              		.cfi_def_cfa_offset 0
 3453              		@ sp needed
 3454 0018 7047     		bx	lr
 3455              	.L247:
 3456 001a 00BF     		.align	2
 3457              	.L246:
 3458 001c 50280040 		.word	1073752144
 3459              		.cfi_endproc
 3460              	.LFE167:
 3462              		.section	.text.RTC_ReadBackupRegister,"ax",%progbits
 3463              		.align	1
 3464              		.global	RTC_ReadBackupRegister
 3465              		.syntax unified
 3466              		.thumb
 3467              		.thumb_func
 3468              		.fpu fpv4-sp-d16
 3470              	RTC_ReadBackupRegister:
 3471              	.LVL228:
 3472              	.LFB168:
2325:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 3473              		.loc 1 2325 1 is_stmt 1 view -0
 3474              		.cfi_startproc
 3475              		@ args = 0, pretend = 0, frame = 8
 3476              		@ frame_needed = 0, uses_anonymous_args = 0
 3477              		@ link register save eliminated.
2325:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 3478              		.loc 1 2325 1 is_stmt 0 view .LVU1060
 3479 0000 82B0     		sub	sp, sp, #8
 3480              	.LCFI35:
 3481              		.cfi_def_cfa_offset 8
2326:FWLIB/src/stm32f4xx_rtc.c ****   
 3482              		.loc 1 2326 3 is_stmt 1 view .LVU1061
2326:FWLIB/src/stm32f4xx_rtc.c ****   
 3483              		.loc 1 2326 17 is_stmt 0 view .LVU1062
 3484 0002 0023     		movs	r3, #0
 3485 0004 0193     		str	r3, [sp, #4]
2329:FWLIB/src/stm32f4xx_rtc.c **** 
 3486              		.loc 1 2329 3 is_stmt 1 view .LVU1063
2331:FWLIB/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
ARM GAS  /tmp/cc7uya1D.s 			page 127


 3487              		.loc 1 2331 3 view .LVU1064
2331:FWLIB/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 3488              		.loc 1 2331 7 is_stmt 0 view .LVU1065
 3489 0006 054B     		ldr	r3, .L250
 3490 0008 0193     		str	r3, [sp, #4]
2332:FWLIB/src/stm32f4xx_rtc.c ****   
 3491              		.loc 1 2332 3 is_stmt 1 view .LVU1066
2332:FWLIB/src/stm32f4xx_rtc.c ****   
 3492              		.loc 1 2332 7 is_stmt 0 view .LVU1067
 3493 000a 019B     		ldr	r3, [sp, #4]
 3494 000c 03EB8000 		add	r0, r3, r0, lsl #2
 3495              	.LVL229:
2332:FWLIB/src/stm32f4xx_rtc.c ****   
 3496              		.loc 1 2332 7 view .LVU1068
 3497 0010 0190     		str	r0, [sp, #4]
2335:FWLIB/src/stm32f4xx_rtc.c **** }
 3498              		.loc 1 2335 3 is_stmt 1 view .LVU1069
2335:FWLIB/src/stm32f4xx_rtc.c **** }
 3499              		.loc 1 2335 12 is_stmt 0 view .LVU1070
 3500 0012 019B     		ldr	r3, [sp, #4]
2335:FWLIB/src/stm32f4xx_rtc.c **** }
 3501              		.loc 1 2335 11 view .LVU1071
 3502 0014 1868     		ldr	r0, [r3]
2336:FWLIB/src/stm32f4xx_rtc.c **** 
 3503              		.loc 1 2336 1 view .LVU1072
 3504 0016 02B0     		add	sp, sp, #8
 3505              	.LCFI36:
 3506              		.cfi_def_cfa_offset 0
 3507              		@ sp needed
 3508 0018 7047     		bx	lr
 3509              	.L251:
 3510 001a 00BF     		.align	2
 3511              	.L250:
 3512 001c 50280040 		.word	1073752144
 3513              		.cfi_endproc
 3514              	.LFE168:
 3516              		.section	.text.RTC_TamperPinSelection,"ax",%progbits
 3517              		.align	1
 3518              		.global	RTC_TamperPinSelection
 3519              		.syntax unified
 3520              		.thumb
 3521              		.thumb_func
 3522              		.fpu fpv4-sp-d16
 3524              	RTC_TamperPinSelection:
 3525              	.LVL230:
 3526              	.LFB169:
2364:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 3527              		.loc 1 2364 1 is_stmt 1 view -0
 3528              		.cfi_startproc
 3529              		@ args = 0, pretend = 0, frame = 0
 3530              		@ frame_needed = 0, uses_anonymous_args = 0
 3531              		@ link register save eliminated.
2366:FWLIB/src/stm32f4xx_rtc.c ****   
 3532              		.loc 1 2366 3 view .LVU1074
2368:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 3533              		.loc 1 2368 3 view .LVU1075
2368:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
ARM GAS  /tmp/cc7uya1D.s 			page 128


 3534              		.loc 1 2368 14 is_stmt 0 view .LVU1076
 3535 0000 044B     		ldr	r3, .L253
 3536 0002 1A6C     		ldr	r2, [r3, #64]
 3537 0004 22F48032 		bic	r2, r2, #65536
 3538 0008 1A64     		str	r2, [r3, #64]
2369:FWLIB/src/stm32f4xx_rtc.c **** }
 3539              		.loc 1 2369 3 is_stmt 1 view .LVU1077
2369:FWLIB/src/stm32f4xx_rtc.c **** }
 3540              		.loc 1 2369 14 is_stmt 0 view .LVU1078
 3541 000a 1A6C     		ldr	r2, [r3, #64]
 3542 000c 1043     		orrs	r0, r0, r2
 3543              	.LVL231:
2369:FWLIB/src/stm32f4xx_rtc.c **** }
 3544              		.loc 1 2369 14 view .LVU1079
 3545 000e 1864     		str	r0, [r3, #64]
2370:FWLIB/src/stm32f4xx_rtc.c **** 
 3546              		.loc 1 2370 1 view .LVU1080
 3547 0010 7047     		bx	lr
 3548              	.L254:
 3549 0012 00BF     		.align	2
 3550              	.L253:
 3551 0014 00280040 		.word	1073752064
 3552              		.cfi_endproc
 3553              	.LFE169:
 3555              		.section	.text.RTC_TimeStampPinSelection,"ax",%progbits
 3556              		.align	1
 3557              		.global	RTC_TimeStampPinSelection
 3558              		.syntax unified
 3559              		.thumb
 3560              		.thumb_func
 3561              		.fpu fpv4-sp-d16
 3563              	RTC_TimeStampPinSelection:
 3564              	.LVL232:
 3565              	.LFB170:
2381:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 3566              		.loc 1 2381 1 is_stmt 1 view -0
 3567              		.cfi_startproc
 3568              		@ args = 0, pretend = 0, frame = 0
 3569              		@ frame_needed = 0, uses_anonymous_args = 0
 3570              		@ link register save eliminated.
2383:FWLIB/src/stm32f4xx_rtc.c ****   
 3571              		.loc 1 2383 3 view .LVU1082
2385:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 3572              		.loc 1 2385 3 view .LVU1083
2385:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 3573              		.loc 1 2385 14 is_stmt 0 view .LVU1084
 3574 0000 044B     		ldr	r3, .L256
 3575 0002 1A6C     		ldr	r2, [r3, #64]
 3576 0004 22F40032 		bic	r2, r2, #131072
 3577 0008 1A64     		str	r2, [r3, #64]
2386:FWLIB/src/stm32f4xx_rtc.c **** }
 3578              		.loc 1 2386 3 is_stmt 1 view .LVU1085
2386:FWLIB/src/stm32f4xx_rtc.c **** }
 3579              		.loc 1 2386 14 is_stmt 0 view .LVU1086
 3580 000a 1A6C     		ldr	r2, [r3, #64]
 3581 000c 1043     		orrs	r0, r0, r2
 3582              	.LVL233:
ARM GAS  /tmp/cc7uya1D.s 			page 129


2386:FWLIB/src/stm32f4xx_rtc.c **** }
 3583              		.loc 1 2386 14 view .LVU1087
 3584 000e 1864     		str	r0, [r3, #64]
2387:FWLIB/src/stm32f4xx_rtc.c **** 
 3585              		.loc 1 2387 1 view .LVU1088
 3586 0010 7047     		bx	lr
 3587              	.L257:
 3588 0012 00BF     		.align	2
 3589              	.L256:
 3590 0014 00280040 		.word	1073752064
 3591              		.cfi_endproc
 3592              	.LFE170:
 3594              		.section	.text.RTC_OutputTypeConfig,"ax",%progbits
 3595              		.align	1
 3596              		.global	RTC_OutputTypeConfig
 3597              		.syntax unified
 3598              		.thumb
 3599              		.thumb_func
 3600              		.fpu fpv4-sp-d16
 3602              	RTC_OutputTypeConfig:
 3603              	.LVL234:
 3604              	.LFB171:
2400:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 3605              		.loc 1 2400 1 is_stmt 1 view -0
 3606              		.cfi_startproc
 3607              		@ args = 0, pretend = 0, frame = 0
 3608              		@ frame_needed = 0, uses_anonymous_args = 0
 3609              		@ link register save eliminated.
2402:FWLIB/src/stm32f4xx_rtc.c ****   
 3610              		.loc 1 2402 3 view .LVU1090
2404:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 3611              		.loc 1 2404 3 view .LVU1091
2404:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 3612              		.loc 1 2404 14 is_stmt 0 view .LVU1092
 3613 0000 044B     		ldr	r3, .L259
 3614 0002 1A6C     		ldr	r2, [r3, #64]
 3615 0004 22F48022 		bic	r2, r2, #262144
 3616 0008 1A64     		str	r2, [r3, #64]
2405:FWLIB/src/stm32f4xx_rtc.c **** }
 3617              		.loc 1 2405 3 is_stmt 1 view .LVU1093
2405:FWLIB/src/stm32f4xx_rtc.c **** }
 3618              		.loc 1 2405 14 is_stmt 0 view .LVU1094
 3619 000a 1A6C     		ldr	r2, [r3, #64]
 3620 000c 1043     		orrs	r0, r0, r2
 3621              	.LVL235:
2405:FWLIB/src/stm32f4xx_rtc.c **** }
 3622              		.loc 1 2405 14 view .LVU1095
 3623 000e 1864     		str	r0, [r3, #64]
2406:FWLIB/src/stm32f4xx_rtc.c **** 
 3624              		.loc 1 2406 1 view .LVU1096
 3625 0010 7047     		bx	lr
 3626              	.L260:
 3627 0012 00BF     		.align	2
 3628              	.L259:
 3629 0014 00280040 		.word	1073752064
 3630              		.cfi_endproc
 3631              	.LFE171:
ARM GAS  /tmp/cc7uya1D.s 			page 130


 3633              		.section	.text.RTC_SynchroShiftConfig,"ax",%progbits
 3634              		.align	1
 3635              		.global	RTC_SynchroShiftConfig
 3636              		.syntax unified
 3637              		.thumb
 3638              		.thumb_func
 3639              		.fpu fpv4-sp-d16
 3641              	RTC_SynchroShiftConfig:
 3642              	.LVL236:
 3643              	.LFB172:
2438:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 3644              		.loc 1 2438 1 is_stmt 1 view -0
 3645              		.cfi_startproc
 3646              		@ args = 0, pretend = 0, frame = 0
 3647              		@ frame_needed = 0, uses_anonymous_args = 0
2438:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 3648              		.loc 1 2438 1 is_stmt 0 view .LVU1098
 3649 0000 08B5     		push	{r3, lr}
 3650              	.LCFI37:
 3651              		.cfi_def_cfa_offset 8
 3652              		.cfi_offset 3, -8
 3653              		.cfi_offset 14, -4
2439:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t shpfcount = 0;
 3654              		.loc 1 2439 3 is_stmt 1 view .LVU1099
 3655              	.LVL237:
2440:FWLIB/src/stm32f4xx_rtc.c **** 
 3656              		.loc 1 2440 3 view .LVU1100
2443:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));
 3657              		.loc 1 2443 3 view .LVU1101
2444:FWLIB/src/stm32f4xx_rtc.c **** 
 3658              		.loc 1 2444 3 view .LVU1102
2447:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3659              		.loc 1 2447 3 view .LVU1103
2447:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3660              		.loc 1 2447 12 is_stmt 0 view .LVU1104
 3661 0002 174B     		ldr	r3, .L272
 3662 0004 CA22     		movs	r2, #202
 3663 0006 5A62     		str	r2, [r3, #36]
2448:FWLIB/src/stm32f4xx_rtc.c ****   
 3664              		.loc 1 2448 3 is_stmt 1 view .LVU1105
2448:FWLIB/src/stm32f4xx_rtc.c ****   
 3665              		.loc 1 2448 12 is_stmt 0 view .LVU1106
 3666 0008 5322     		movs	r2, #83
 3667 000a 5A62     		str	r2, [r3, #36]
2451:FWLIB/src/stm32f4xx_rtc.c ****   {
 3668              		.loc 1 2451 3 is_stmt 1 view .LVU1107
2451:FWLIB/src/stm32f4xx_rtc.c ****   {
 3669              		.loc 1 2451 11 is_stmt 0 view .LVU1108
 3670 000c DB68     		ldr	r3, [r3, #12]
2451:FWLIB/src/stm32f4xx_rtc.c ****   {
 3671              		.loc 1 2451 6 view .LVU1109
 3672 000e 13F0080F 		tst	r3, #8
 3673 0012 0BD1     		bne	.L266
 3674              	.LVL238:
 3675              	.L263:
2461:FWLIB/src/stm32f4xx_rtc.c ****   {
 3676              		.loc 1 2461 3 is_stmt 1 view .LVU1110
ARM GAS  /tmp/cc7uya1D.s 			page 131


2461:FWLIB/src/stm32f4xx_rtc.c ****   {
 3677              		.loc 1 2461 11 is_stmt 0 view .LVU1111
 3678 0014 124B     		ldr	r3, .L272
 3679 0016 DB68     		ldr	r3, [r3, #12]
2461:FWLIB/src/stm32f4xx_rtc.c ****   {
 3680              		.loc 1 2461 6 view .LVU1112
 3681 0018 13F0080F 		tst	r3, #8
 3682 001c 1AD1     		bne	.L267
2464:FWLIB/src/stm32f4xx_rtc.c ****     {
 3683              		.loc 1 2464 5 is_stmt 1 view .LVU1113
2464:FWLIB/src/stm32f4xx_rtc.c ****     {
 3684              		.loc 1 2464 12 is_stmt 0 view .LVU1114
 3685 001e 104B     		ldr	r3, .L272
 3686 0020 9B68     		ldr	r3, [r3, #8]
2464:FWLIB/src/stm32f4xx_rtc.c ****     {
 3687              		.loc 1 2464 7 view .LVU1115
 3688 0022 13F0100F 		tst	r3, #16
 3689 0026 0CD0     		beq	.L271
2480:FWLIB/src/stm32f4xx_rtc.c ****     }
 3690              		.loc 1 2480 14 view .LVU1116
 3691 0028 0023     		movs	r3, #0
 3692 002a 14E0     		b	.L265
 3693              	.LVL239:
 3694              	.L266:
2440:FWLIB/src/stm32f4xx_rtc.c **** 
 3695              		.loc 1 2440 12 view .LVU1117
 3696 002c 0023     		movs	r3, #0
 3697              	.LVL240:
 3698              	.L262:
2454:FWLIB/src/stm32f4xx_rtc.c ****     {
 3699              		.loc 1 2454 17 view .LVU1118
 3700 002e 0C4A     		ldr	r2, .L272
 3701 0030 D268     		ldr	r2, [r2, #12]
2454:FWLIB/src/stm32f4xx_rtc.c ****     {
 3702              		.loc 1 2454 11 view .LVU1119
 3703 0032 12F0080F 		tst	r2, #8
 3704 0036 EDD0     		beq	.L263
2454:FWLIB/src/stm32f4xx_rtc.c ****     {
 3705              		.loc 1 2454 49 discriminator 1 view .LVU1120
 3706 0038 B3F5805F 		cmp	r3, #4096
 3707 003c EAD0     		beq	.L263
2456:FWLIB/src/stm32f4xx_rtc.c ****     }
 3708              		.loc 1 2456 7 is_stmt 1 view .LVU1121
2456:FWLIB/src/stm32f4xx_rtc.c ****     }
 3709              		.loc 1 2456 16 is_stmt 0 view .LVU1122
 3710 003e 0133     		adds	r3, r3, #1
 3711              	.LVL241:
2456:FWLIB/src/stm32f4xx_rtc.c ****     }
 3712              		.loc 1 2456 16 view .LVU1123
 3713 0040 F5E7     		b	.L262
 3714              	.LVL242:
 3715              	.L271:
2467:FWLIB/src/stm32f4xx_rtc.c ****     
 3716              		.loc 1 2467 7 is_stmt 1 view .LVU1124
2467:FWLIB/src/stm32f4xx_rtc.c ****     
 3717              		.loc 1 2467 58 is_stmt 0 view .LVU1125
 3718 0042 0143     		orrs	r1, r1, r0
ARM GAS  /tmp/cc7uya1D.s 			page 132


 3719              	.LVL243:
2467:FWLIB/src/stm32f4xx_rtc.c ****     
 3720              		.loc 1 2467 19 view .LVU1126
 3721 0044 064B     		ldr	r3, .L272
 3722 0046 D962     		str	r1, [r3, #44]
2469:FWLIB/src/stm32f4xx_rtc.c ****       {
 3723              		.loc 1 2469 7 is_stmt 1 view .LVU1127
2469:FWLIB/src/stm32f4xx_rtc.c ****       {
 3724              		.loc 1 2469 10 is_stmt 0 view .LVU1128
 3725 0048 FFF7FEFF 		bl	RTC_WaitForSynchro
 3726              	.LVL244:
2469:FWLIB/src/stm32f4xx_rtc.c ****       {
 3727              		.loc 1 2469 9 view .LVU1129
 3728 004c 0346     		mov	r3, r0
 3729 004e 10B1     		cbz	r0, .L265
2475:FWLIB/src/stm32f4xx_rtc.c ****       }
 3730              		.loc 1 2475 16 view .LVU1130
 3731 0050 0123     		movs	r3, #1
 3732 0052 00E0     		b	.L265
 3733              	.LVL245:
 3734              	.L267:
2485:FWLIB/src/stm32f4xx_rtc.c ****   }
 3735              		.loc 1 2485 12 view .LVU1131
 3736 0054 0023     		movs	r3, #0
 3737              	.LVL246:
 3738              	.L265:
2489:FWLIB/src/stm32f4xx_rtc.c ****   
 3739              		.loc 1 2489 3 is_stmt 1 view .LVU1132
2489:FWLIB/src/stm32f4xx_rtc.c ****   
 3740              		.loc 1 2489 12 is_stmt 0 view .LVU1133
 3741 0056 024A     		ldr	r2, .L272
 3742 0058 FF21     		movs	r1, #255
 3743 005a 5162     		str	r1, [r2, #36]
2491:FWLIB/src/stm32f4xx_rtc.c **** }
 3744              		.loc 1 2491 3 is_stmt 1 view .LVU1134
2492:FWLIB/src/stm32f4xx_rtc.c **** 
 3745              		.loc 1 2492 1 is_stmt 0 view .LVU1135
 3746 005c 1846     		mov	r0, r3
 3747 005e 08BD     		pop	{r3, pc}
 3748              	.LVL247:
 3749              	.L273:
2492:FWLIB/src/stm32f4xx_rtc.c **** 
 3750              		.loc 1 2492 1 view .LVU1136
 3751              		.align	2
 3752              	.L272:
 3753 0060 00280040 		.word	1073752064
 3754              		.cfi_endproc
 3755              	.LFE172:
 3757              		.section	.text.RTC_ITConfig,"ax",%progbits
 3758              		.align	1
 3759              		.global	RTC_ITConfig
 3760              		.syntax unified
 3761              		.thumb
 3762              		.thumb_func
 3763              		.fpu fpv4-sp-d16
 3765              	RTC_ITConfig:
 3766              	.LVL248:
ARM GAS  /tmp/cc7uya1D.s 			page 133


 3767              	.LFB173:
2558:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 3768              		.loc 1 2558 1 is_stmt 1 view -0
 3769              		.cfi_startproc
 3770              		@ args = 0, pretend = 0, frame = 0
 3771              		@ frame_needed = 0, uses_anonymous_args = 0
 3772              		@ link register save eliminated.
2560:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 3773              		.loc 1 2560 3 view .LVU1138
2561:FWLIB/src/stm32f4xx_rtc.c **** 
 3774              		.loc 1 2561 3 view .LVU1139
2564:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3775              		.loc 1 2564 3 view .LVU1140
2564:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3776              		.loc 1 2564 12 is_stmt 0 view .LVU1141
 3777 0000 104B     		ldr	r3, .L277
 3778 0002 CA22     		movs	r2, #202
 3779 0004 5A62     		str	r2, [r3, #36]
2565:FWLIB/src/stm32f4xx_rtc.c **** 
 3780              		.loc 1 2565 3 is_stmt 1 view .LVU1142
2565:FWLIB/src/stm32f4xx_rtc.c **** 
 3781              		.loc 1 2565 12 is_stmt 0 view .LVU1143
 3782 0006 5322     		movs	r2, #83
 3783 0008 5A62     		str	r2, [r3, #36]
2567:FWLIB/src/stm32f4xx_rtc.c ****   {
 3784              		.loc 1 2567 3 is_stmt 1 view .LVU1144
2567:FWLIB/src/stm32f4xx_rtc.c ****   {
 3785              		.loc 1 2567 6 is_stmt 0 view .LVU1145
 3786 000a 69B1     		cbz	r1, .L275
2570:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
 3787              		.loc 1 2570 5 is_stmt 1 view .LVU1146
2570:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
 3788              		.loc 1 2570 13 is_stmt 0 view .LVU1147
 3789 000c 9A68     		ldr	r2, [r3, #8]
2570:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
 3790              		.loc 1 2570 16 view .LVU1148
 3791 000e 20F00401 		bic	r1, r0, #4
 3792              	.LVL249:
2570:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
 3793              		.loc 1 2570 13 view .LVU1149
 3794 0012 0A43     		orrs	r2, r2, r1
 3795 0014 9A60     		str	r2, [r3, #8]
2572:FWLIB/src/stm32f4xx_rtc.c ****   }
 3796              		.loc 1 2572 5 is_stmt 1 view .LVU1150
2572:FWLIB/src/stm32f4xx_rtc.c ****   }
 3797              		.loc 1 2572 16 is_stmt 0 view .LVU1151
 3798 0016 1A6C     		ldr	r2, [r3, #64]
2572:FWLIB/src/stm32f4xx_rtc.c ****   }
 3799              		.loc 1 2572 19 view .LVU1152
 3800 0018 00F00400 		and	r0, r0, #4
 3801              	.LVL250:
2572:FWLIB/src/stm32f4xx_rtc.c ****   }
 3802              		.loc 1 2572 16 view .LVU1153
 3803 001c 0243     		orrs	r2, r2, r0
 3804 001e 1A64     		str	r2, [r3, #64]
 3805              	.L276:
2582:FWLIB/src/stm32f4xx_rtc.c **** }
ARM GAS  /tmp/cc7uya1D.s 			page 134


 3806              		.loc 1 2582 3 is_stmt 1 view .LVU1154
2582:FWLIB/src/stm32f4xx_rtc.c **** }
 3807              		.loc 1 2582 12 is_stmt 0 view .LVU1155
 3808 0020 084B     		ldr	r3, .L277
 3809 0022 FF22     		movs	r2, #255
 3810 0024 5A62     		str	r2, [r3, #36]
2583:FWLIB/src/stm32f4xx_rtc.c **** 
 3811              		.loc 1 2583 1 view .LVU1156
 3812 0026 7047     		bx	lr
 3813              	.LVL251:
 3814              	.L275:
2577:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
 3815              		.loc 1 2577 5 is_stmt 1 view .LVU1157
2577:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
 3816              		.loc 1 2577 13 is_stmt 0 view .LVU1158
 3817 0028 064B     		ldr	r3, .L277
 3818 002a 9A68     		ldr	r2, [r3, #8]
2577:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
 3819              		.loc 1 2577 35 view .LVU1159
 3820 002c 20F00401 		bic	r1, r0, #4
 3821              	.LVL252:
2577:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
 3822              		.loc 1 2577 13 view .LVU1160
 3823 0030 22EA0102 		bic	r2, r2, r1
 3824 0034 9A60     		str	r2, [r3, #8]
2579:FWLIB/src/stm32f4xx_rtc.c ****   }
 3825              		.loc 1 2579 5 is_stmt 1 view .LVU1161
2579:FWLIB/src/stm32f4xx_rtc.c ****   }
 3826              		.loc 1 2579 16 is_stmt 0 view .LVU1162
 3827 0036 1A6C     		ldr	r2, [r3, #64]
2579:FWLIB/src/stm32f4xx_rtc.c ****   }
 3828              		.loc 1 2579 38 view .LVU1163
 3829 0038 00F00400 		and	r0, r0, #4
 3830              	.LVL253:
2579:FWLIB/src/stm32f4xx_rtc.c ****   }
 3831              		.loc 1 2579 16 view .LVU1164
 3832 003c 22EA0000 		bic	r0, r2, r0
 3833 0040 1864     		str	r0, [r3, #64]
 3834 0042 EDE7     		b	.L276
 3835              	.L278:
 3836              		.align	2
 3837              	.L277:
 3838 0044 00280040 		.word	1073752064
 3839              		.cfi_endproc
 3840              	.LFE173:
 3842              		.section	.text.RTC_GetFlagStatus,"ax",%progbits
 3843              		.align	1
 3844              		.global	RTC_GetFlagStatus
 3845              		.syntax unified
 3846              		.thumb
 3847              		.thumb_func
 3848              		.fpu fpv4-sp-d16
 3850              	RTC_GetFlagStatus:
 3851              	.LVL254:
 3852              	.LFB174:
2607:FWLIB/src/stm32f4xx_rtc.c ****   FlagStatus bitstatus = RESET;
 3853              		.loc 1 2607 1 is_stmt 1 view -0
ARM GAS  /tmp/cc7uya1D.s 			page 135


 3854              		.cfi_startproc
 3855              		@ args = 0, pretend = 0, frame = 0
 3856              		@ frame_needed = 0, uses_anonymous_args = 0
 3857              		@ link register save eliminated.
2608:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 3858              		.loc 1 2608 3 view .LVU1166
2609:FWLIB/src/stm32f4xx_rtc.c ****   
 3859              		.loc 1 2609 3 view .LVU1167
2612:FWLIB/src/stm32f4xx_rtc.c ****   
 3860              		.loc 1 2612 3 view .LVU1168
2615:FWLIB/src/stm32f4xx_rtc.c ****   
 3861              		.loc 1 2615 3 view .LVU1169
2615:FWLIB/src/stm32f4xx_rtc.c ****   
 3862              		.loc 1 2615 26 is_stmt 0 view .LVU1170
 3863 0000 074B     		ldr	r3, .L282
 3864 0002 DB68     		ldr	r3, [r3, #12]
2615:FWLIB/src/stm32f4xx_rtc.c ****   
 3865              		.loc 1 2615 10 view .LVU1171
 3866 0004 23F07F43 		bic	r3, r3, #-16777216
 3867 0008 23F47E03 		bic	r3, r3, #16646144
 3868 000c 23F40043 		bic	r3, r3, #32768
 3869 0010 23F08003 		bic	r3, r3, #128
 3870              	.LVL255:
2618:FWLIB/src/stm32f4xx_rtc.c ****   {
 3871              		.loc 1 2618 3 is_stmt 1 view .LVU1172
2618:FWLIB/src/stm32f4xx_rtc.c ****   {
 3872              		.loc 1 2618 6 is_stmt 0 view .LVU1173
 3873 0014 0342     		tst	r3, r0
 3874 0016 01D0     		beq	.L281
2620:FWLIB/src/stm32f4xx_rtc.c ****   }
 3875              		.loc 1 2620 15 view .LVU1174
 3876 0018 0120     		movs	r0, #1
 3877              	.LVL256:
2620:FWLIB/src/stm32f4xx_rtc.c ****   }
 3878              		.loc 1 2620 15 view .LVU1175
 3879 001a 7047     		bx	lr
 3880              	.LVL257:
 3881              	.L281:
2624:FWLIB/src/stm32f4xx_rtc.c ****   }
 3882              		.loc 1 2624 15 view .LVU1176
 3883 001c 0020     		movs	r0, #0
 3884              	.LVL258:
2626:FWLIB/src/stm32f4xx_rtc.c **** }
 3885              		.loc 1 2626 3 is_stmt 1 view .LVU1177
2627:FWLIB/src/stm32f4xx_rtc.c **** 
 3886              		.loc 1 2627 1 is_stmt 0 view .LVU1178
 3887 001e 7047     		bx	lr
 3888              	.L283:
 3889              		.align	2
 3890              	.L282:
 3891 0020 00280040 		.word	1073752064
 3892              		.cfi_endproc
 3893              	.LFE174:
 3895              		.section	.text.RTC_ClearFlag,"ax",%progbits
 3896              		.align	1
 3897              		.global	RTC_ClearFlag
 3898              		.syntax unified
ARM GAS  /tmp/cc7uya1D.s 			page 136


 3899              		.thumb
 3900              		.thumb_func
 3901              		.fpu fpv4-sp-d16
 3903              	RTC_ClearFlag:
 3904              	.LVL259:
 3905              	.LFB175:
2644:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 3906              		.loc 1 2644 1 is_stmt 1 view -0
 3907              		.cfi_startproc
 3908              		@ args = 0, pretend = 0, frame = 0
 3909              		@ frame_needed = 0, uses_anonymous_args = 0
 3910              		@ link register save eliminated.
2646:FWLIB/src/stm32f4xx_rtc.c **** 
 3911              		.loc 1 2646 3 view .LVU1180
2649:FWLIB/src/stm32f4xx_rtc.c **** }
 3912              		.loc 1 2649 3 view .LVU1181
2649:FWLIB/src/stm32f4xx_rtc.c **** }
 3913              		.loc 1 2649 63 is_stmt 0 view .LVU1182
 3914 0000 80B2     		uxth	r0, r0
 3915              	.LVL260:
2649:FWLIB/src/stm32f4xx_rtc.c **** }
 3916              		.loc 1 2649 63 view .LVU1183
 3917 0002 40F08003 		orr	r3, r0, #128
2649:FWLIB/src/stm32f4xx_rtc.c **** }
 3918              		.loc 1 2649 93 view .LVU1184
 3919 0006 044A     		ldr	r2, .L285
 3920 0008 D068     		ldr	r0, [r2, #12]
2649:FWLIB/src/stm32f4xx_rtc.c **** }
 3921              		.loc 1 2649 79 view .LVU1185
 3922 000a 00F08000 		and	r0, r0, #128
2649:FWLIB/src/stm32f4xx_rtc.c **** }
 3923              		.loc 1 2649 14 view .LVU1186
 3924 000e 60EA0300 		orn	r0, r0, r3
2649:FWLIB/src/stm32f4xx_rtc.c **** }
 3925              		.loc 1 2649 12 view .LVU1187
 3926 0012 D060     		str	r0, [r2, #12]
2650:FWLIB/src/stm32f4xx_rtc.c **** 
 3927              		.loc 1 2650 1 view .LVU1188
 3928 0014 7047     		bx	lr
 3929              	.L286:
 3930 0016 00BF     		.align	2
 3931              	.L285:
 3932 0018 00280040 		.word	1073752064
 3933              		.cfi_endproc
 3934              	.LFE175:
 3936              		.section	.text.RTC_GetITStatus,"ax",%progbits
 3937              		.align	1
 3938              		.global	RTC_GetITStatus
 3939              		.syntax unified
 3940              		.thumb
 3941              		.thumb_func
 3942              		.fpu fpv4-sp-d16
 3944              	RTC_GetITStatus:
 3945              	.LVL261:
 3946              	.LFB176:
2665:FWLIB/src/stm32f4xx_rtc.c ****   ITStatus bitstatus = RESET;
 3947              		.loc 1 2665 1 is_stmt 1 view -0
ARM GAS  /tmp/cc7uya1D.s 			page 137


 3948              		.cfi_startproc
 3949              		@ args = 0, pretend = 0, frame = 0
 3950              		@ frame_needed = 0, uses_anonymous_args = 0
 3951              		@ link register save eliminated.
2665:FWLIB/src/stm32f4xx_rtc.c ****   ITStatus bitstatus = RESET;
 3952              		.loc 1 2665 1 is_stmt 0 view .LVU1190
 3953 0000 10B4     		push	{r4}
 3954              	.LCFI38:
 3955              		.cfi_def_cfa_offset 4
 3956              		.cfi_offset 4, -4
2666:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0, enablestatus = 0;
 3957              		.loc 1 2666 3 is_stmt 1 view .LVU1191
 3958              	.LVL262:
2667:FWLIB/src/stm32f4xx_rtc.c ****  
 3959              		.loc 1 2667 3 view .LVU1192
2670:FWLIB/src/stm32f4xx_rtc.c ****   
 3960              		.loc 1 2670 3 view .LVU1193
2673:FWLIB/src/stm32f4xx_rtc.c ****  
 3961              		.loc 1 2673 3 view .LVU1194
2673:FWLIB/src/stm32f4xx_rtc.c ****  
 3962              		.loc 1 2673 26 is_stmt 0 view .LVU1195
 3963 0002 0C49     		ldr	r1, .L292
 3964 0004 0B6C     		ldr	r3, [r1, #64]
2673:FWLIB/src/stm32f4xx_rtc.c ****  
 3965              		.loc 1 2673 10 view .LVU1196
 3966 0006 03F00403 		and	r3, r3, #4
 3967              	.LVL263:
2676:FWLIB/src/stm32f4xx_rtc.c ****   
 3968              		.loc 1 2676 3 is_stmt 1 view .LVU1197
2676:FWLIB/src/stm32f4xx_rtc.c ****   
 3969              		.loc 1 2676 33 is_stmt 0 view .LVU1198
 3970 000a 8A68     		ldr	r2, [r1, #8]
2676:FWLIB/src/stm32f4xx_rtc.c ****   
 3971              		.loc 1 2676 38 view .LVU1199
 3972 000c 0240     		ands	r2, r2, r0
2676:FWLIB/src/stm32f4xx_rtc.c ****   
 3973              		.loc 1 2676 58 view .LVU1200
 3974 000e 03EAD034 		and	r4, r3, r0, lsr #15
2676:FWLIB/src/stm32f4xx_rtc.c ****   
 3975              		.loc 1 2676 48 view .LVU1201
 3976 0012 2243     		orrs	r2, r2, r4
2676:FWLIB/src/stm32f4xx_rtc.c ****   
 3977              		.loc 1 2676 86 view .LVU1202
 3978 0014 03EA1043 		and	r3, r3, r0, lsr #16
 3979              	.LVL264:
2679:FWLIB/src/stm32f4xx_rtc.c ****   
 3980              		.loc 1 2679 3 is_stmt 1 view .LVU1203
2679:FWLIB/src/stm32f4xx_rtc.c ****   
 3981              		.loc 1 2679 27 is_stmt 0 view .LVU1204
 3982 0018 C968     		ldr	r1, [r1, #12]
2679:FWLIB/src/stm32f4xx_rtc.c ****   
 3983              		.loc 1 2679 10 view .LVU1205
 3984 001a 01EA1010 		and	r0, r1, r0, lsr #4
 3985              	.LVL265:
2682:FWLIB/src/stm32f4xx_rtc.c ****   {
 3986              		.loc 1 2682 3 is_stmt 1 view .LVU1206
2682:FWLIB/src/stm32f4xx_rtc.c ****   {
ARM GAS  /tmp/cc7uya1D.s 			page 138


 3987              		.loc 1 2682 6 is_stmt 0 view .LVU1207
 3988 001e 1343     		orrs	r3, r2, r3
 3989              	.LVL266:
2682:FWLIB/src/stm32f4xx_rtc.c ****   {
 3990              		.loc 1 2682 6 view .LVU1208
 3991 0020 03D0     		beq	.L289
2682:FWLIB/src/stm32f4xx_rtc.c ****   {
 3992              		.loc 1 2682 53 discriminator 1 view .LVU1209
 3993 0022 80B2     		uxth	r0, r0
 3994              	.LVL267:
2682:FWLIB/src/stm32f4xx_rtc.c ****   {
 3995              		.loc 1 2682 41 discriminator 1 view .LVU1210
 3996 0024 10B1     		cbz	r0, .L288
2684:FWLIB/src/stm32f4xx_rtc.c ****   }
 3997              		.loc 1 2684 15 view .LVU1211
 3998 0026 0120     		movs	r0, #1
 3999 0028 00E0     		b	.L288
 4000              	.LVL268:
 4001              	.L289:
2688:FWLIB/src/stm32f4xx_rtc.c ****   }
 4002              		.loc 1 2688 15 view .LVU1212
 4003 002a 0020     		movs	r0, #0
 4004              	.LVL269:
 4005              	.L288:
2690:FWLIB/src/stm32f4xx_rtc.c **** }
 4006              		.loc 1 2690 3 is_stmt 1 view .LVU1213
2691:FWLIB/src/stm32f4xx_rtc.c **** 
 4007              		.loc 1 2691 1 is_stmt 0 view .LVU1214
 4008 002c 5DF8044B 		ldr	r4, [sp], #4
 4009              	.LCFI39:
 4010              		.cfi_restore 4
 4011              		.cfi_def_cfa_offset 0
 4012 0030 7047     		bx	lr
 4013              	.L293:
 4014 0032 00BF     		.align	2
 4015              	.L292:
 4016 0034 00280040 		.word	1073752064
 4017              		.cfi_endproc
 4018              	.LFE176:
 4020              		.section	.text.RTC_ClearITPendingBit,"ax",%progbits
 4021              		.align	1
 4022              		.global	RTC_ClearITPendingBit
 4023              		.syntax unified
 4024              		.thumb
 4025              		.thumb_func
 4026              		.fpu fpv4-sp-d16
 4028              	RTC_ClearITPendingBit:
 4029              	.LVL270:
 4030              	.LFB177:
2706:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 4031              		.loc 1 2706 1 is_stmt 1 view -0
 4032              		.cfi_startproc
 4033              		@ args = 0, pretend = 0, frame = 0
 4034              		@ frame_needed = 0, uses_anonymous_args = 0
 4035              		@ link register save eliminated.
2707:FWLIB/src/stm32f4xx_rtc.c **** 
 4036              		.loc 1 2707 3 view .LVU1216
ARM GAS  /tmp/cc7uya1D.s 			page 139


2710:FWLIB/src/stm32f4xx_rtc.c **** 
 4037              		.loc 1 2710 3 view .LVU1217
2713:FWLIB/src/stm32f4xx_rtc.c **** 
 4038              		.loc 1 2713 3 view .LVU1218
2716:FWLIB/src/stm32f4xx_rtc.c **** }
 4039              		.loc 1 2716 3 view .LVU1219
2716:FWLIB/src/stm32f4xx_rtc.c **** }
 4040              		.loc 1 2716 61 is_stmt 0 view .LVU1220
 4041 0000 C0F30F10 		ubfx	r0, r0, #4, #16
 4042              	.LVL271:
2716:FWLIB/src/stm32f4xx_rtc.c **** }
 4043              		.loc 1 2716 61 view .LVU1221
 4044 0004 40F08003 		orr	r3, r0, #128
2716:FWLIB/src/stm32f4xx_rtc.c **** }
 4045              		.loc 1 2716 91 view .LVU1222
 4046 0008 034A     		ldr	r2, .L295
 4047 000a D068     		ldr	r0, [r2, #12]
2716:FWLIB/src/stm32f4xx_rtc.c **** }
 4048              		.loc 1 2716 77 view .LVU1223
 4049 000c 00F08000 		and	r0, r0, #128
2716:FWLIB/src/stm32f4xx_rtc.c **** }
 4050              		.loc 1 2716 14 view .LVU1224
 4051 0010 60EA0300 		orn	r0, r0, r3
2716:FWLIB/src/stm32f4xx_rtc.c **** }
 4052              		.loc 1 2716 12 view .LVU1225
 4053 0014 D060     		str	r0, [r2, #12]
2717:FWLIB/src/stm32f4xx_rtc.c **** 
 4054              		.loc 1 2717 1 view .LVU1226
 4055 0016 7047     		bx	lr
 4056              	.L296:
 4057              		.align	2
 4058              	.L295:
 4059 0018 00280040 		.word	1073752064
 4060              		.cfi_endproc
 4061              	.LFE177:
 4063              		.text
 4064              	.Letext0:
 4065              		.file 2 "/home/bt0/stm32/compile-tool/gcc-arm-none-eabi-8-2018-q4-major-linux/gcc-arm-none-eabi-8-
 4066              		.file 3 "/home/bt0/stm32/compile-tool/gcc-arm-none-eabi-8-2018-q4-major-linux/gcc-arm-none-eabi-8-
 4067              		.file 4 "F4_CORE/core_cm4.h"
 4068              		.file 5 "USER/system_stm32f4xx.h"
 4069              		.file 6 "USER/stm32f4xx.h"
 4070              		.file 7 "FWLIB/inc/stm32f4xx_rtc.h"
ARM GAS  /tmp/cc7uya1D.s 			page 140


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_rtc.c
     /tmp/cc7uya1D.s:18     .text.RTC_ByteToBcd2:0000000000000000 $t
     /tmp/cc7uya1D.s:25     .text.RTC_ByteToBcd2:0000000000000000 RTC_ByteToBcd2
     /tmp/cc7uya1D.s:75     .text.RTC_Bcd2ToByte:0000000000000000 $t
     /tmp/cc7uya1D.s:81     .text.RTC_Bcd2ToByte:0000000000000000 RTC_Bcd2ToByte
     /tmp/cc7uya1D.s:110    .text.RTC_StructInit:0000000000000000 $t
     /tmp/cc7uya1D.s:117    .text.RTC_StructInit:0000000000000000 RTC_StructInit
     /tmp/cc7uya1D.s:143    .text.RTC_WriteProtectionCmd:0000000000000000 $t
     /tmp/cc7uya1D.s:150    .text.RTC_WriteProtectionCmd:0000000000000000 RTC_WriteProtectionCmd
     /tmp/cc7uya1D.s:183    .text.RTC_WriteProtectionCmd:0000000000000018 $d
     /tmp/cc7uya1D.s:188    .text.RTC_EnterInitMode:0000000000000000 $t
     /tmp/cc7uya1D.s:195    .text.RTC_EnterInitMode:0000000000000000 RTC_EnterInitMode
     /tmp/cc7uya1D.s:282    .text.RTC_EnterInitMode:000000000000004c $d
     /tmp/cc7uya1D.s:287    .text.RTC_ExitInitMode:0000000000000000 $t
     /tmp/cc7uya1D.s:294    .text.RTC_ExitInitMode:0000000000000000 RTC_ExitInitMode
     /tmp/cc7uya1D.s:312    .text.RTC_ExitInitMode:000000000000000c $d
     /tmp/cc7uya1D.s:317    .text.RTC_Init:0000000000000000 $t
     /tmp/cc7uya1D.s:324    .text.RTC_Init:0000000000000000 RTC_Init
     /tmp/cc7uya1D.s:409    .text.RTC_Init:0000000000000048 $d
     /tmp/cc7uya1D.s:414    .text.RTC_WaitForSynchro:0000000000000000 $t
     /tmp/cc7uya1D.s:421    .text.RTC_WaitForSynchro:0000000000000000 RTC_WaitForSynchro
     /tmp/cc7uya1D.s:512    .text.RTC_WaitForSynchro:000000000000004c $d
     /tmp/cc7uya1D.s:517    .text.RTC_DeInit:0000000000000000 $t
     /tmp/cc7uya1D.s:524    .text.RTC_DeInit:0000000000000000 RTC_DeInit
     /tmp/cc7uya1D.s:684    .text.RTC_DeInit:0000000000000094 $d
     /tmp/cc7uya1D.s:690    .text.RTC_RefClockCmd:0000000000000000 $t
     /tmp/cc7uya1D.s:697    .text.RTC_RefClockCmd:0000000000000000 RTC_RefClockCmd
     /tmp/cc7uya1D.s:769    .text.RTC_RefClockCmd:0000000000000040 $d
     /tmp/cc7uya1D.s:774    .text.RTC_BypassShadowCmd:0000000000000000 $t
     /tmp/cc7uya1D.s:781    .text.RTC_BypassShadowCmd:0000000000000000 RTC_BypassShadowCmd
     /tmp/cc7uya1D.s:827    .text.RTC_BypassShadowCmd:000000000000002c $d
     /tmp/cc7uya1D.s:832    .text.RTC_SetTime:0000000000000000 $t
     /tmp/cc7uya1D.s:839    .text.RTC_SetTime:0000000000000000 RTC_SetTime
     /tmp/cc7uya1D.s:1010   .text.RTC_SetTime:00000000000000a4 $d
     /tmp/cc7uya1D.s:1015   .text.RTC_TimeStructInit:0000000000000000 $t
     /tmp/cc7uya1D.s:1022   .text.RTC_TimeStructInit:0000000000000000 RTC_TimeStructInit
     /tmp/cc7uya1D.s:1049   .text.RTC_GetTime:0000000000000000 $t
     /tmp/cc7uya1D.s:1056   .text.RTC_GetTime:0000000000000000 RTC_GetTime
     /tmp/cc7uya1D.s:1139   .text.RTC_GetTime:0000000000000048 $d
     /tmp/cc7uya1D.s:1144   .text.RTC_GetSubSecond:0000000000000000 $t
     /tmp/cc7uya1D.s:1151   .text.RTC_GetSubSecond:0000000000000000 RTC_GetSubSecond
     /tmp/cc7uya1D.s:1173   .text.RTC_GetSubSecond:0000000000000008 $d
     /tmp/cc7uya1D.s:1178   .text.RTC_SetDate:0000000000000000 $t
     /tmp/cc7uya1D.s:1185   .text.RTC_SetDate:0000000000000000 RTC_SetDate
     /tmp/cc7uya1D.s:1344   .text.RTC_SetDate:0000000000000098 $d
     /tmp/cc7uya1D.s:1349   .text.RTC_DateStructInit:0000000000000000 $t
     /tmp/cc7uya1D.s:1356   .text.RTC_DateStructInit:0000000000000000 RTC_DateStructInit
     /tmp/cc7uya1D.s:1384   .text.RTC_GetDate:0000000000000000 $t
     /tmp/cc7uya1D.s:1391   .text.RTC_GetDate:0000000000000000 RTC_GetDate
     /tmp/cc7uya1D.s:1472   .text.RTC_GetDate:0000000000000044 $d
     /tmp/cc7uya1D.s:1477   .text.RTC_SetAlarm:0000000000000000 $t
     /tmp/cc7uya1D.s:1484   .text.RTC_SetAlarm:0000000000000000 RTC_SetAlarm
     /tmp/cc7uya1D.s:1661   .text.RTC_SetAlarm:00000000000000a0 $d
     /tmp/cc7uya1D.s:1666   .text.RTC_AlarmStructInit:0000000000000000 $t
     /tmp/cc7uya1D.s:1673   .text.RTC_AlarmStructInit:0000000000000000 RTC_AlarmStructInit
     /tmp/cc7uya1D.s:1710   .text.RTC_GetAlarm:0000000000000000 $t
ARM GAS  /tmp/cc7uya1D.s 			page 141


     /tmp/cc7uya1D.s:1717   .text.RTC_GetAlarm:0000000000000000 RTC_GetAlarm
     /tmp/cc7uya1D.s:1837   .text.RTC_GetAlarm:0000000000000068 $d
     /tmp/cc7uya1D.s:1842   .text.RTC_AlarmCmd:0000000000000000 $t
     /tmp/cc7uya1D.s:1849   .text.RTC_AlarmCmd:0000000000000000 RTC_AlarmCmd
     /tmp/cc7uya1D.s:1967   .text.RTC_AlarmCmd:000000000000005c $d
     /tmp/cc7uya1D.s:1972   .text.RTC_AlarmSubSecondConfig:0000000000000000 $t
     /tmp/cc7uya1D.s:1979   .text.RTC_AlarmSubSecondConfig:0000000000000000 RTC_AlarmSubSecondConfig
     /tmp/cc7uya1D.s:2044   .text.RTC_AlarmSubSecondConfig:0000000000000028 $d
     /tmp/cc7uya1D.s:2049   .text.RTC_GetAlarmSubSecond:0000000000000000 $t
     /tmp/cc7uya1D.s:2056   .text.RTC_GetAlarmSubSecond:0000000000000000 RTC_GetAlarmSubSecond
     /tmp/cc7uya1D.s:2095   .text.RTC_GetAlarmSubSecond:000000000000001c $d
     /tmp/cc7uya1D.s:2100   .text.RTC_WakeUpClockConfig:0000000000000000 $t
     /tmp/cc7uya1D.s:2107   .text.RTC_WakeUpClockConfig:0000000000000000 RTC_WakeUpClockConfig
     /tmp/cc7uya1D.s:2146   .text.RTC_WakeUpClockConfig:0000000000000020 $d
     /tmp/cc7uya1D.s:2151   .text.RTC_SetWakeUpCounter:0000000000000000 $t
     /tmp/cc7uya1D.s:2158   .text.RTC_SetWakeUpCounter:0000000000000000 RTC_SetWakeUpCounter
     /tmp/cc7uya1D.s:2188   .text.RTC_SetWakeUpCounter:0000000000000014 $d
     /tmp/cc7uya1D.s:2193   .text.RTC_GetWakeUpCounter:0000000000000000 $t
     /tmp/cc7uya1D.s:2200   .text.RTC_GetWakeUpCounter:0000000000000000 RTC_GetWakeUpCounter
     /tmp/cc7uya1D.s:2217   .text.RTC_GetWakeUpCounter:0000000000000008 $d
     /tmp/cc7uya1D.s:2222   .text.RTC_WakeUpCmd:0000000000000000 $t
     /tmp/cc7uya1D.s:2229   .text.RTC_WakeUpCmd:0000000000000000 RTC_WakeUpCmd
     /tmp/cc7uya1D.s:2342   .text.RTC_WakeUpCmd:0000000000000060 $d
     /tmp/cc7uya1D.s:2347   .text.RTC_DayLightSavingConfig:0000000000000000 $t
     /tmp/cc7uya1D.s:2354   .text.RTC_DayLightSavingConfig:0000000000000000 RTC_DayLightSavingConfig
     /tmp/cc7uya1D.s:2396   .text.RTC_DayLightSavingConfig:0000000000000020 $d
     /tmp/cc7uya1D.s:2401   .text.RTC_GetStoreOperation:0000000000000000 $t
     /tmp/cc7uya1D.s:2408   .text.RTC_GetStoreOperation:0000000000000000 RTC_GetStoreOperation
     /tmp/cc7uya1D.s:2425   .text.RTC_GetStoreOperation:000000000000000c $d
     /tmp/cc7uya1D.s:2430   .text.RTC_OutputConfig:0000000000000000 $t
     /tmp/cc7uya1D.s:2437   .text.RTC_OutputConfig:0000000000000000 RTC_OutputConfig
     /tmp/cc7uya1D.s:2479   .text.RTC_OutputConfig:0000000000000020 $d
     /tmp/cc7uya1D.s:2484   .text.RTC_CoarseCalibConfig:0000000000000000 $t
     /tmp/cc7uya1D.s:2491   .text.RTC_CoarseCalibConfig:0000000000000000 RTC_CoarseCalibConfig
     /tmp/cc7uya1D.s:2558   .text.RTC_CoarseCalibConfig:0000000000000030 $d
     /tmp/cc7uya1D.s:2563   .text.RTC_CoarseCalibCmd:0000000000000000 $t
     /tmp/cc7uya1D.s:2570   .text.RTC_CoarseCalibCmd:0000000000000000 RTC_CoarseCalibCmd
     /tmp/cc7uya1D.s:2642   .text.RTC_CoarseCalibCmd:0000000000000040 $d
     /tmp/cc7uya1D.s:2647   .text.RTC_CalibOutputCmd:0000000000000000 $t
     /tmp/cc7uya1D.s:2654   .text.RTC_CalibOutputCmd:0000000000000000 RTC_CalibOutputCmd
     /tmp/cc7uya1D.s:2700   .text.RTC_CalibOutputCmd:000000000000002c $d
     /tmp/cc7uya1D.s:2705   .text.RTC_CalibOutputConfig:0000000000000000 $t
     /tmp/cc7uya1D.s:2712   .text.RTC_CalibOutputConfig:0000000000000000 RTC_CalibOutputConfig
     /tmp/cc7uya1D.s:2751   .text.RTC_CalibOutputConfig:0000000000000020 $d
     /tmp/cc7uya1D.s:2756   .text.RTC_SmoothCalibConfig:0000000000000000 $t
     /tmp/cc7uya1D.s:2763   .text.RTC_SmoothCalibConfig:0000000000000000 RTC_SmoothCalibConfig
     /tmp/cc7uya1D.s:2869   .text.RTC_SmoothCalibConfig:0000000000000050 $d
     /tmp/cc7uya1D.s:2874   .text.RTC_TimeStampCmd:0000000000000000 $t
     /tmp/cc7uya1D.s:2881   .text.RTC_TimeStampCmd:0000000000000000 RTC_TimeStampCmd
     /tmp/cc7uya1D.s:2945   .text.RTC_TimeStampCmd:000000000000002c $d
     /tmp/cc7uya1D.s:2950   .text.RTC_GetTimeStamp:0000000000000000 $t
     /tmp/cc7uya1D.s:2957   .text.RTC_GetTimeStamp:0000000000000000 RTC_GetTimeStamp
     /tmp/cc7uya1D.s:3085   .text.RTC_GetTimeStamp:0000000000000078 $d
     /tmp/cc7uya1D.s:3090   .text.RTC_GetTimeStampSubSecond:0000000000000000 $t
     /tmp/cc7uya1D.s:3097   .text.RTC_GetTimeStampSubSecond:0000000000000000 RTC_GetTimeStampSubSecond
     /tmp/cc7uya1D.s:3113   .text.RTC_GetTimeStampSubSecond:0000000000000008 $d
     /tmp/cc7uya1D.s:3118   .text.RTC_TamperTriggerConfig:0000000000000000 $t
ARM GAS  /tmp/cc7uya1D.s 			page 142


     /tmp/cc7uya1D.s:3125   .text.RTC_TamperTriggerConfig:0000000000000000 RTC_TamperTriggerConfig
     /tmp/cc7uya1D.s:3157   .text.RTC_TamperTriggerConfig:000000000000001c $d
     /tmp/cc7uya1D.s:3162   .text.RTC_TamperCmd:0000000000000000 $t
     /tmp/cc7uya1D.s:3169   .text.RTC_TamperCmd:0000000000000000 RTC_TamperCmd
     /tmp/cc7uya1D.s:3201   .text.RTC_TamperCmd:0000000000000018 $d
     /tmp/cc7uya1D.s:3206   .text.RTC_TamperFilterConfig:0000000000000000 $t
     /tmp/cc7uya1D.s:3213   .text.RTC_TamperFilterConfig:0000000000000000 RTC_TamperFilterConfig
     /tmp/cc7uya1D.s:3240   .text.RTC_TamperFilterConfig:0000000000000014 $d
     /tmp/cc7uya1D.s:3245   .text.RTC_TamperSamplingFreqConfig:0000000000000000 $t
     /tmp/cc7uya1D.s:3252   .text.RTC_TamperSamplingFreqConfig:0000000000000000 RTC_TamperSamplingFreqConfig
     /tmp/cc7uya1D.s:3279   .text.RTC_TamperSamplingFreqConfig:0000000000000014 $d
     /tmp/cc7uya1D.s:3284   .text.RTC_TamperPinsPrechargeDuration:0000000000000000 $t
     /tmp/cc7uya1D.s:3291   .text.RTC_TamperPinsPrechargeDuration:0000000000000000 RTC_TamperPinsPrechargeDuration
     /tmp/cc7uya1D.s:3318   .text.RTC_TamperPinsPrechargeDuration:0000000000000014 $d
     /tmp/cc7uya1D.s:3323   .text.RTC_TimeStampOnTamperDetectionCmd:0000000000000000 $t
     /tmp/cc7uya1D.s:3330   .text.RTC_TimeStampOnTamperDetectionCmd:0000000000000000 RTC_TimeStampOnTamperDetectionCmd
     /tmp/cc7uya1D.s:3361   .text.RTC_TimeStampOnTamperDetectionCmd:000000000000001c $d
     /tmp/cc7uya1D.s:3366   .text.RTC_TamperPullUpCmd:0000000000000000 $t
     /tmp/cc7uya1D.s:3373   .text.RTC_TamperPullUpCmd:0000000000000000 RTC_TamperPullUpCmd
     /tmp/cc7uya1D.s:3404   .text.RTC_TamperPullUpCmd:000000000000001c $d
     /tmp/cc7uya1D.s:3409   .text.RTC_WriteBackupRegister:0000000000000000 $t
     /tmp/cc7uya1D.s:3416   .text.RTC_WriteBackupRegister:0000000000000000 RTC_WriteBackupRegister
     /tmp/cc7uya1D.s:3458   .text.RTC_WriteBackupRegister:000000000000001c $d
     /tmp/cc7uya1D.s:3463   .text.RTC_ReadBackupRegister:0000000000000000 $t
     /tmp/cc7uya1D.s:3470   .text.RTC_ReadBackupRegister:0000000000000000 RTC_ReadBackupRegister
     /tmp/cc7uya1D.s:3512   .text.RTC_ReadBackupRegister:000000000000001c $d
     /tmp/cc7uya1D.s:3517   .text.RTC_TamperPinSelection:0000000000000000 $t
     /tmp/cc7uya1D.s:3524   .text.RTC_TamperPinSelection:0000000000000000 RTC_TamperPinSelection
     /tmp/cc7uya1D.s:3551   .text.RTC_TamperPinSelection:0000000000000014 $d
     /tmp/cc7uya1D.s:3556   .text.RTC_TimeStampPinSelection:0000000000000000 $t
     /tmp/cc7uya1D.s:3563   .text.RTC_TimeStampPinSelection:0000000000000000 RTC_TimeStampPinSelection
     /tmp/cc7uya1D.s:3590   .text.RTC_TimeStampPinSelection:0000000000000014 $d
     /tmp/cc7uya1D.s:3595   .text.RTC_OutputTypeConfig:0000000000000000 $t
     /tmp/cc7uya1D.s:3602   .text.RTC_OutputTypeConfig:0000000000000000 RTC_OutputTypeConfig
     /tmp/cc7uya1D.s:3629   .text.RTC_OutputTypeConfig:0000000000000014 $d
     /tmp/cc7uya1D.s:3634   .text.RTC_SynchroShiftConfig:0000000000000000 $t
     /tmp/cc7uya1D.s:3641   .text.RTC_SynchroShiftConfig:0000000000000000 RTC_SynchroShiftConfig
     /tmp/cc7uya1D.s:3753   .text.RTC_SynchroShiftConfig:0000000000000060 $d
     /tmp/cc7uya1D.s:3758   .text.RTC_ITConfig:0000000000000000 $t
     /tmp/cc7uya1D.s:3765   .text.RTC_ITConfig:0000000000000000 RTC_ITConfig
     /tmp/cc7uya1D.s:3838   .text.RTC_ITConfig:0000000000000044 $d
     /tmp/cc7uya1D.s:3843   .text.RTC_GetFlagStatus:0000000000000000 $t
     /tmp/cc7uya1D.s:3850   .text.RTC_GetFlagStatus:0000000000000000 RTC_GetFlagStatus
     /tmp/cc7uya1D.s:3891   .text.RTC_GetFlagStatus:0000000000000020 $d
     /tmp/cc7uya1D.s:3896   .text.RTC_ClearFlag:0000000000000000 $t
     /tmp/cc7uya1D.s:3903   .text.RTC_ClearFlag:0000000000000000 RTC_ClearFlag
     /tmp/cc7uya1D.s:3932   .text.RTC_ClearFlag:0000000000000018 $d
     /tmp/cc7uya1D.s:3937   .text.RTC_GetITStatus:0000000000000000 $t
     /tmp/cc7uya1D.s:3944   .text.RTC_GetITStatus:0000000000000000 RTC_GetITStatus
     /tmp/cc7uya1D.s:4016   .text.RTC_GetITStatus:0000000000000034 $d
     /tmp/cc7uya1D.s:4021   .text.RTC_ClearITPendingBit:0000000000000000 $t
     /tmp/cc7uya1D.s:4028   .text.RTC_ClearITPendingBit:0000000000000000 RTC_ClearITPendingBit
     /tmp/cc7uya1D.s:4059   .text.RTC_ClearITPendingBit:0000000000000018 $d

NO UNDEFINED SYMBOLS
