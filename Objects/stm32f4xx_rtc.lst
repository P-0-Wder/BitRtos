ARM GAS  /tmp/cczQSXyD.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_rtc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.RTC_ByteToBcd2,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	RTC_ByteToBcd2:
  25              	.LFB178:
  26              		.file 1 "FWLIB/src/stm32f4xx_rtc.c"
   1:FWLIB/src/stm32f4xx_rtc.c **** /**
   2:FWLIB/src/stm32f4xx_rtc.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_rtc.c ****   * @file    stm32f4xx_rtc.c
   4:FWLIB/src/stm32f4xx_rtc.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_rtc.c ****   * @version V1.8.0
   6:FWLIB/src/stm32f4xx_rtc.c ****   * @date    04-November-2016
   7:FWLIB/src/stm32f4xx_rtc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:FWLIB/src/stm32f4xx_rtc.c ****   *          functionalities of the Real-Time Clock (RTC) peripheral:
   9:FWLIB/src/stm32f4xx_rtc.c ****   *           + Initialization
  10:FWLIB/src/stm32f4xx_rtc.c ****   *           + Calendar (Time and Date) configuration
  11:FWLIB/src/stm32f4xx_rtc.c ****   *           + Alarms (Alarm A and Alarm B) configuration
  12:FWLIB/src/stm32f4xx_rtc.c ****   *           + WakeUp Timer configuration
  13:FWLIB/src/stm32f4xx_rtc.c ****   *           + Daylight Saving configuration
  14:FWLIB/src/stm32f4xx_rtc.c ****   *           + Output pin Configuration
  15:FWLIB/src/stm32f4xx_rtc.c ****   *           + Coarse digital Calibration configuration
  16:FWLIB/src/stm32f4xx_rtc.c ****   *           + Smooth digital Calibration configuration
  17:FWLIB/src/stm32f4xx_rtc.c ****   *           + TimeStamp configuration
  18:FWLIB/src/stm32f4xx_rtc.c ****   *           + Tampers configuration
  19:FWLIB/src/stm32f4xx_rtc.c ****   *           + Backup Data Registers configuration
  20:FWLIB/src/stm32f4xx_rtc.c ****   *           + Shift control synchronisation    
  21:FWLIB/src/stm32f4xx_rtc.c ****   *           + RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration
  22:FWLIB/src/stm32f4xx_rtc.c ****   *           + Interrupts and flags management
  23:FWLIB/src/stm32f4xx_rtc.c ****   *
  24:FWLIB/src/stm32f4xx_rtc.c **** @verbatim
  25:FWLIB/src/stm32f4xx_rtc.c **** 
  26:FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
  27:FWLIB/src/stm32f4xx_rtc.c ****               ##### Backup Domain Operating Condition #####
  28:FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
  29:FWLIB/src/stm32f4xx_rtc.c ****  [..] The real-time clock (RTC), the RTC backup registers, and the backup 
  30:FWLIB/src/stm32f4xx_rtc.c ****       SRAM (BKP SRAM) can be powered from the VBAT voltage when the main 
  31:FWLIB/src/stm32f4xx_rtc.c ****       VDD supply is powered off.
  32:FWLIB/src/stm32f4xx_rtc.c ****       To retain the content of the RTC backup registers, backup SRAM, and supply 
ARM GAS  /tmp/cczQSXyD.s 			page 2


  33:FWLIB/src/stm32f4xx_rtc.c ****       the RTC when VDD is turned off, VBAT pin can be connected to an optional 
  34:FWLIB/src/stm32f4xx_rtc.c ****       standby voltage supplied by a battery or by another source.
  35:FWLIB/src/stm32f4xx_rtc.c **** 
  36:FWLIB/src/stm32f4xx_rtc.c ****  [..] To allow the RTC to operate even when the main digital supply (VDD) is turned
  37:FWLIB/src/stm32f4xx_rtc.c ****       off, the VBAT pin powers the following blocks:
  38:FWLIB/src/stm32f4xx_rtc.c ****    (#) The RTC
  39:FWLIB/src/stm32f4xx_rtc.c ****    (#) The LSE oscillator
  40:FWLIB/src/stm32f4xx_rtc.c ****    (#) The backup SRAM when the low power backup regulator is enabled
  41:FWLIB/src/stm32f4xx_rtc.c ****    (#) PC13 to PC15 I/Os, plus PI8 I/O (when available)
  42:FWLIB/src/stm32f4xx_rtc.c ****   
  43:FWLIB/src/stm32f4xx_rtc.c ****  [..] When the backup domain is supplied by VDD (analog switch connected to VDD),
  44:FWLIB/src/stm32f4xx_rtc.c ****       the following functions are available:
  45:FWLIB/src/stm32f4xx_rtc.c ****    (#) PC14 and PC15 can be used as either GPIO or LSE pins
  46:FWLIB/src/stm32f4xx_rtc.c ****    (#) PC13 can be used as a GPIO or as the RTC_AF1 pin
  47:FWLIB/src/stm32f4xx_rtc.c ****    (#) PI8 can be used as a GPIO or as the RTC_AF2 pin
  48:FWLIB/src/stm32f4xx_rtc.c ****   
  49:FWLIB/src/stm32f4xx_rtc.c ****  [..] When the backup domain is supplied by VBAT (analog switch connected to VBAT 
  50:FWLIB/src/stm32f4xx_rtc.c ****       because VDD is not present), the following functions are available:
  51:FWLIB/src/stm32f4xx_rtc.c ****    (#) PC14 and PC15 can be used as LSE pins only
  52:FWLIB/src/stm32f4xx_rtc.c ****    (#) PC13 can be used as the RTC_AF1 pin 
  53:FWLIB/src/stm32f4xx_rtc.c ****    (#) PI8 can be used as the RTC_AF2 pin
  54:FWLIB/src/stm32f4xx_rtc.c ****   
  55:FWLIB/src/stm32f4xx_rtc.c ****             
  56:FWLIB/src/stm32f4xx_rtc.c ****                    ##### Backup Domain Reset #####
  57:FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
  58:FWLIB/src/stm32f4xx_rtc.c ****  [..] The backup domain reset sets all RTC registers and the RCC_BDCR register 
  59:FWLIB/src/stm32f4xx_rtc.c ****       to their reset values. The BKPSRAM is not affected by this reset. The only
  60:FWLIB/src/stm32f4xx_rtc.c ****       way of resetting the BKPSRAM is through the Flash interface by requesting 
  61:FWLIB/src/stm32f4xx_rtc.c ****       a protection level change from 1 to 0.
  62:FWLIB/src/stm32f4xx_rtc.c ****  [..] A backup domain reset is generated when one of the following events occurs:
  63:FWLIB/src/stm32f4xx_rtc.c ****    (#) Software reset, triggered by setting the BDRST bit in the 
  64:FWLIB/src/stm32f4xx_rtc.c ****        RCC Backup domain control register (RCC_BDCR). You can use the
  65:FWLIB/src/stm32f4xx_rtc.c ****        RCC_BackupResetCmd().
  66:FWLIB/src/stm32f4xx_rtc.c ****    (#) VDD or VBAT power on, if both supplies have previously been powered off.
  67:FWLIB/src/stm32f4xx_rtc.c ****   
  68:FWLIB/src/stm32f4xx_rtc.c **** 
  69:FWLIB/src/stm32f4xx_rtc.c ****                    ##### Backup Domain Access #####
  70:FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
  71:FWLIB/src/stm32f4xx_rtc.c ****  [..] After reset, the backup domain (RTC registers, RTC backup data 
  72:FWLIB/src/stm32f4xx_rtc.c ****       registers and backup SRAM) is protected against possible unwanted write 
  73:FWLIB/src/stm32f4xx_rtc.c ****       accesses. 
  74:FWLIB/src/stm32f4xx_rtc.c ****  [..] To enable access to the RTC Domain and RTC registers, proceed as follows:
  75:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the Power Controller (PWR) APB1 interface clock using the
  76:FWLIB/src/stm32f4xx_rtc.c ****        RCC_APB1PeriphClockCmd() function.
  77:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable access to RTC domain using the PWR_BackupAccessCmd() function.
  78:FWLIB/src/stm32f4xx_rtc.c ****    (+) Select the RTC clock source using the RCC_RTCCLKConfig() function.
  79:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable RTC Clock using the RCC_RTCCLKCmd() function.
  80:FWLIB/src/stm32f4xx_rtc.c ****   
  81:FWLIB/src/stm32f4xx_rtc.c ****   
  82:FWLIB/src/stm32f4xx_rtc.c ****                   ##### How to use RTC Driver #####
  83:FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
  84:FWLIB/src/stm32f4xx_rtc.c ****  [..] 
  85:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the RTC domain access (see description in the section above)
  86:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the RTC Prescaler (Asynchronous and Synchronous) and RTC hour 
  87:FWLIB/src/stm32f4xx_rtc.c ****        format using the RTC_Init() function.
  88:FWLIB/src/stm32f4xx_rtc.c ****   
  89:FWLIB/src/stm32f4xx_rtc.c ****  *** Time and Date configuration ***
ARM GAS  /tmp/cczQSXyD.s 			page 3


  90:FWLIB/src/stm32f4xx_rtc.c ****  ===================================
  91:FWLIB/src/stm32f4xx_rtc.c ****  [..] 
  92:FWLIB/src/stm32f4xx_rtc.c ****    (+) To configure the RTC Calendar (Time and Date) use the RTC_SetTime()
  93:FWLIB/src/stm32f4xx_rtc.c ****        and RTC_SetDate() functions.
  94:FWLIB/src/stm32f4xx_rtc.c ****    (+) To read the RTC Calendar, use the RTC_GetTime() and RTC_GetDate() functions.
  95:FWLIB/src/stm32f4xx_rtc.c ****    (+) Use the RTC_DayLightSavingConfig() function to add or sub one
  96:FWLIB/src/stm32f4xx_rtc.c ****        hour to the RTC Calendar.    
  97:FWLIB/src/stm32f4xx_rtc.c ****   
  98:FWLIB/src/stm32f4xx_rtc.c ****  *** Alarm configuration ***
  99:FWLIB/src/stm32f4xx_rtc.c ****  ===========================
 100:FWLIB/src/stm32f4xx_rtc.c ****  [..]
 101:FWLIB/src/stm32f4xx_rtc.c ****    (+) To configure the RTC Alarm use the RTC_SetAlarm() function.
 102:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the selected RTC Alarm using the RTC_AlarmCmd() function
 103:FWLIB/src/stm32f4xx_rtc.c ****    (+) To read the RTC Alarm, use the RTC_GetAlarm() function.
 104:FWLIB/src/stm32f4xx_rtc.c ****    (+) To read the RTC alarm SubSecond, use the RTC_GetAlarmSubSecond() function.
 105:FWLIB/src/stm32f4xx_rtc.c ****   
 106:FWLIB/src/stm32f4xx_rtc.c ****  *** RTC Wakeup configuration ***
 107:FWLIB/src/stm32f4xx_rtc.c ****  ================================
 108:FWLIB/src/stm32f4xx_rtc.c ****  [..] 
 109:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the RTC Wakeup Clock source use the RTC_WakeUpClockConfig()
 110:FWLIB/src/stm32f4xx_rtc.c ****        function.
 111:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the RTC WakeUp Counter using the RTC_SetWakeUpCounter() function  
 112:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the RTC WakeUp using the RTC_WakeUpCmd() function  
 113:FWLIB/src/stm32f4xx_rtc.c ****    (+) To read the RTC WakeUp Counter register, use the RTC_GetWakeUpCounter() 
 114:FWLIB/src/stm32f4xx_rtc.c ****        function.
 115:FWLIB/src/stm32f4xx_rtc.c ****   
 116:FWLIB/src/stm32f4xx_rtc.c ****  *** Outputs configuration ***
 117:FWLIB/src/stm32f4xx_rtc.c ****  =============================
 118:FWLIB/src/stm32f4xx_rtc.c ****  [..] The RTC has 2 different outputs:
 119:FWLIB/src/stm32f4xx_rtc.c ****    (+) AFO_ALARM: this output is used to manage the RTC Alarm A, Alarm B
 120:FWLIB/src/stm32f4xx_rtc.c ****        and WaKeUp signals. To output the selected RTC signal on RTC_AF1 pin, use the 
 121:FWLIB/src/stm32f4xx_rtc.c ****        RTC_OutputConfig() function.                
 122:FWLIB/src/stm32f4xx_rtc.c ****    (+) AFO_CALIB: this output is 512Hz signal or 1Hz. To output the RTC Clock on 
 123:FWLIB/src/stm32f4xx_rtc.c ****        RTC_AF1 pin, use the RTC_CalibOutputCmd() function.
 124:FWLIB/src/stm32f4xx_rtc.c ****   
 125:FWLIB/src/stm32f4xx_rtc.c ****  *** Smooth digital Calibration configuration ***
 126:FWLIB/src/stm32f4xx_rtc.c ****  ================================================    
 127:FWLIB/src/stm32f4xx_rtc.c ****  [..]
 128:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the RTC Original Digital Calibration Value and the corresponding
 129:FWLIB/src/stm32f4xx_rtc.c ****        calibration cycle period (32s,16s and 8s) using the RTC_SmoothCalibConfig() 
 130:FWLIB/src/stm32f4xx_rtc.c ****        function.
 131:FWLIB/src/stm32f4xx_rtc.c ****   
 132:FWLIB/src/stm32f4xx_rtc.c ****  *** Coarse digital Calibration configuration ***
 133:FWLIB/src/stm32f4xx_rtc.c ****  ================================================
 134:FWLIB/src/stm32f4xx_rtc.c ****  [..]
 135:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the RTC Coarse Calibration Value and the corresponding
 136:FWLIB/src/stm32f4xx_rtc.c ****        sign using the RTC_CoarseCalibConfig() function.
 137:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the RTC Coarse Calibration using the RTC_CoarseCalibCmd() function  
 138:FWLIB/src/stm32f4xx_rtc.c ****   
 139:FWLIB/src/stm32f4xx_rtc.c ****  *** TimeStamp configuration ***
 140:FWLIB/src/stm32f4xx_rtc.c ****  ===============================
 141:FWLIB/src/stm32f4xx_rtc.c ****  [..]
 142:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the RTC_AF1 trigger and enables the RTC TimeStamp using the RTC
 143:FWLIB/src/stm32f4xx_rtc.c ****       _TimeStampCmd() function.
 144:FWLIB/src/stm32f4xx_rtc.c ****    (+) To read the RTC TimeStamp Time and Date register, use the RTC_GetTimeStamp()
 145:FWLIB/src/stm32f4xx_rtc.c ****        function.
 146:FWLIB/src/stm32f4xx_rtc.c ****    (+) To read the RTC TimeStamp SubSecond register, use the 
ARM GAS  /tmp/cczQSXyD.s 			page 4


 147:FWLIB/src/stm32f4xx_rtc.c ****        RTC_GetTimeStampSubSecond() function.
 148:FWLIB/src/stm32f4xx_rtc.c ****    (+) The TAMPER1 alternate function can be mapped either to RTC_AF1(PC13)
 149:FWLIB/src/stm32f4xx_rtc.c ****        or RTC_AF2 (PI8) depending on the value of TAMP1INSEL bit in 
 150:FWLIB/src/stm32f4xx_rtc.c ****        RTC_TAFCR register. You can use the  RTC_TamperPinSelection() function to
 151:FWLIB/src/stm32f4xx_rtc.c ****        select the corresponding pin.     
 152:FWLIB/src/stm32f4xx_rtc.c ****   
 153:FWLIB/src/stm32f4xx_rtc.c ****  *** Tamper configuration ***
 154:FWLIB/src/stm32f4xx_rtc.c ****  ============================
 155:FWLIB/src/stm32f4xx_rtc.c ****  [..]
 156:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the RTC Tamper using the RTC_TamperCmd() function.
 157:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the Tamper filter count using RTC_TamperFilterConfig()
 158:FWLIB/src/stm32f4xx_rtc.c ****        function. 
 159:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the RTC Tamper trigger Edge or Level according to the Tamper 
 160:FWLIB/src/stm32f4xx_rtc.c ****        filter (if equal to 0 Edge else Level) value using the RTC_TamperConfig() 
 161:FWLIB/src/stm32f4xx_rtc.c ****        function.
 162:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the Tamper sampling frequency using RTC_TamperSamplingFreqConfig()
 163:FWLIB/src/stm32f4xx_rtc.c ****        function.
 164:FWLIB/src/stm32f4xx_rtc.c ****    (+) Configure the Tamper precharge or discharge duration using 
 165:FWLIB/src/stm32f4xx_rtc.c ****        RTC_TamperPinsPrechargeDuration() function.
 166:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the Tamper Pull-UP using RTC_TamperPullUpDisableCmd() function.
 167:FWLIB/src/stm32f4xx_rtc.c ****    (+) Enable the Time stamp on Tamper detection event using  
 168:FWLIB/src/stm32f4xx_rtc.c ****        TC_TSOnTamperDetecCmd() function.
 169:FWLIB/src/stm32f4xx_rtc.c ****    (+) The TIMESTAMP alternate function can be mapped to either RTC_AF1 
 170:FWLIB/src/stm32f4xx_rtc.c ****        or RTC_AF2 depending on the value of the TSINSEL bit in the RTC_TAFCR 
 171:FWLIB/src/stm32f4xx_rtc.c ****        register. You can use the  RTC_TimeStampPinSelection() function to select 
 172:FWLIB/src/stm32f4xx_rtc.c ****        the corresponding pin. 
 173:FWLIB/src/stm32f4xx_rtc.c ****   
 174:FWLIB/src/stm32f4xx_rtc.c ****  *** Backup Data Registers configuration ***
 175:FWLIB/src/stm32f4xx_rtc.c ****  ===========================================
 176:FWLIB/src/stm32f4xx_rtc.c ****  [..]
 177:FWLIB/src/stm32f4xx_rtc.c ****    (+) To write to the RTC Backup Data registers, use the RTC_WriteBackupRegister()
 178:FWLIB/src/stm32f4xx_rtc.c ****        function.  
 179:FWLIB/src/stm32f4xx_rtc.c ****    (+) To read the RTC Backup Data registers, use the RTC_ReadBackupRegister()
 180:FWLIB/src/stm32f4xx_rtc.c ****        function.
 181:FWLIB/src/stm32f4xx_rtc.c ****    
 182:FWLIB/src/stm32f4xx_rtc.c **** 
 183:FWLIB/src/stm32f4xx_rtc.c ****                   ##### RTC and low power modes #####
 184:FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
 185:FWLIB/src/stm32f4xx_rtc.c ****  [..] The MCU can be woken up from a low power mode by an RTC alternate 
 186:FWLIB/src/stm32f4xx_rtc.c ****       function.
 187:FWLIB/src/stm32f4xx_rtc.c ****  [..] The RTC alternate functions are the RTC alarms (Alarm A and Alarm B), 
 188:FWLIB/src/stm32f4xx_rtc.c ****       RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
 189:FWLIB/src/stm32f4xx_rtc.c ****       These RTC alternate functions can wake up the system from the Stop and 
 190:FWLIB/src/stm32f4xx_rtc.c ****       Standby lowpower modes.
 191:FWLIB/src/stm32f4xx_rtc.c ****  [..] The system can also wake up from low power modes without depending 
 192:FWLIB/src/stm32f4xx_rtc.c ****       on an external interrupt (Auto-wakeup mode), by using the RTC alarm 
 193:FWLIB/src/stm32f4xx_rtc.c ****       or the RTC wakeup events.
 194:FWLIB/src/stm32f4xx_rtc.c ****  [..] The RTC provides a programmable time base for waking up from the 
 195:FWLIB/src/stm32f4xx_rtc.c ****       Stop or Standby mode at regular intervals.
 196:FWLIB/src/stm32f4xx_rtc.c ****       Wakeup from STOP and Standby modes is possible only when the RTC clock source
 197:FWLIB/src/stm32f4xx_rtc.c ****       is LSE or LSI.
 198:FWLIB/src/stm32f4xx_rtc.c ****   
 199:FWLIB/src/stm32f4xx_rtc.c **** 
 200:FWLIB/src/stm32f4xx_rtc.c ****           ##### Selection of RTC_AF1 alternate functions #####
 201:FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
 202:FWLIB/src/stm32f4xx_rtc.c ****  [..] The RTC_AF1 pin (PC13) can be used for the following purposes:
 203:FWLIB/src/stm32f4xx_rtc.c ****    (+) AFO_ALARM output
ARM GAS  /tmp/cczQSXyD.s 			page 5


 204:FWLIB/src/stm32f4xx_rtc.c ****    (+) AFO_CALIB output
 205:FWLIB/src/stm32f4xx_rtc.c ****    (+) AFI_TAMPER
 206:FWLIB/src/stm32f4xx_rtc.c ****    (+) AFI_TIMESTAMP
 207:FWLIB/src/stm32f4xx_rtc.c ****  
 208:FWLIB/src/stm32f4xx_rtc.c ****  [..]   
 209:FWLIB/src/stm32f4xx_rtc.c ****    +-----------------------------------------------------------------------------------------------
 210:FWLIB/src/stm32f4xx_rtc.c ****    |     Pin         |AFO_ALARM |AFO_CALIB |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    |
 211:FWLIB/src/stm32f4xx_rtc.c ****    |  configuration  | ENABLED  | ENABLED  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin |
 212:FWLIB/src/stm32f4xx_rtc.c ****    |  and function   |          |          |           |              | selection  |  selection   |
 213:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 214:FWLIB/src/stm32f4xx_rtc.c ****    |   Alarm out     |          |          |           |              |    Don't   |     Don't    |
 215:FWLIB/src/stm32f4xx_rtc.c ****    |   output OD     |     1    |Don't care|Don't care | Don't care   |    care    |     care     |
 216:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 217:FWLIB/src/stm32f4xx_rtc.c ****    |   Alarm out     |          |          |           |              |    Don't   |     Don't    |
 218:FWLIB/src/stm32f4xx_rtc.c ****    |   output PP     |     1    |Don't care|Don't care | Don't care   |    care    |     care     |
 219:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 220:FWLIB/src/stm32f4xx_rtc.c ****    | Calibration out |          |          |           |              |    Don't   |     Don't    |
 221:FWLIB/src/stm32f4xx_rtc.c ****    |   output PP     |     0    |    1     |Don't care | Don't care   |    care    |     care     |
 222:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 223:FWLIB/src/stm32f4xx_rtc.c ****    |  TAMPER input   |          |          |           |              |            |     Don't    |
 224:FWLIB/src/stm32f4xx_rtc.c ****    |   floating      |     0    |    0     |     1     |      0       |      0     |     care     |
 225:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 226:FWLIB/src/stm32f4xx_rtc.c ****    |  TIMESTAMP and  |          |          |           |              |            |              |
 227:FWLIB/src/stm32f4xx_rtc.c ****    |  TAMPER input   |     0    |    0     |     1     |      1       |      0     |      0       |
 228:FWLIB/src/stm32f4xx_rtc.c ****    |   floating      |          |          |           |              |            |              |
 229:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 230:FWLIB/src/stm32f4xx_rtc.c ****    | TIMESTAMP input |          |          |           |              |    Don't   |              |
 231:FWLIB/src/stm32f4xx_rtc.c ****    |    floating     |     0    |    0     |     0     |      1       |    care    |      0       |
 232:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 233:FWLIB/src/stm32f4xx_rtc.c ****    |  Standard GPIO  |     0    |    0     |     0     |      0       | Don't care |  Don't care  |
 234:FWLIB/src/stm32f4xx_rtc.c ****    +-----------------------------------------------------------------------------------------------
 235:FWLIB/src/stm32f4xx_rtc.c **** 
 236:FWLIB/src/stm32f4xx_rtc.c ****             
 237:FWLIB/src/stm32f4xx_rtc.c ****         #####  Selection of RTC_AF2 alternate functions #####
 238:FWLIB/src/stm32f4xx_rtc.c ****  ===================================================================
 239:FWLIB/src/stm32f4xx_rtc.c ****  [..] The RTC_AF2 pin (PI8) can be used for the following purposes:
 240:FWLIB/src/stm32f4xx_rtc.c ****    (+) AFI_TAMPER
 241:FWLIB/src/stm32f4xx_rtc.c ****    (+) AFI_TIMESTAMP
 242:FWLIB/src/stm32f4xx_rtc.c ****  [..]
 243:FWLIB/src/stm32f4xx_rtc.c ****    +---------------------------------------------------------------------------------------+
 244:FWLIB/src/stm32f4xx_rtc.c ****    |     Pin         |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    |ALARMOUTTYPE  |
 245:FWLIB/src/stm32f4xx_rtc.c ****    |  configuration  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin |  AFO_ALARM   |
 246:FWLIB/src/stm32f4xx_rtc.c ****    |  and function   |           |              | selection  |  selection   |Configuration |
 247:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|-----------|--------------|------------|--------------|--------------|
 248:FWLIB/src/stm32f4xx_rtc.c ****    |  TAMPER input   |           |              |            |     Don't    |              |
 249:FWLIB/src/stm32f4xx_rtc.c ****    |   floating      |     1     |      0       |      1     |     care     |  Don't care  |
 250:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|-----------|--------------|------------|--------------|--------------|
 251:FWLIB/src/stm32f4xx_rtc.c ****    |  TIMESTAMP and  |           |              |            |              |              |
 252:FWLIB/src/stm32f4xx_rtc.c ****    |  TAMPER input   |     1     |      1       |      1     |      1       |  Don't care  |
 253:FWLIB/src/stm32f4xx_rtc.c ****    |   floating      |           |              |            |              |              |
 254:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|-----------|--------------|------------|--------------|--------------|
 255:FWLIB/src/stm32f4xx_rtc.c ****    | TIMESTAMP input |           |              |    Don't   |              |              |
 256:FWLIB/src/stm32f4xx_rtc.c ****    |    floating     |     0     |      1       |    care    |      1       |  Don't care  |
 257:FWLIB/src/stm32f4xx_rtc.c ****    |-----------------|-----------|--------------|------------|--------------|--------------|
 258:FWLIB/src/stm32f4xx_rtc.c ****    |  Standard GPIO  |     0     |      0       | Don't care |  Don't care  |  Don't care  |
 259:FWLIB/src/stm32f4xx_rtc.c ****    +---------------------------------------------------------------------------------------+   
 260:FWLIB/src/stm32f4xx_rtc.c ****  
ARM GAS  /tmp/cczQSXyD.s 			page 6


 261:FWLIB/src/stm32f4xx_rtc.c ****      
 262:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
 263:FWLIB/src/stm32f4xx_rtc.c ****   
 264:FWLIB/src/stm32f4xx_rtc.c ****   ******************************************************************************
 265:FWLIB/src/stm32f4xx_rtc.c ****   * @attention
 266:FWLIB/src/stm32f4xx_rtc.c ****   *
 267:FWLIB/src/stm32f4xx_rtc.c ****   * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
 268:FWLIB/src/stm32f4xx_rtc.c ****   *
 269:FWLIB/src/stm32f4xx_rtc.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
 270:FWLIB/src/stm32f4xx_rtc.c ****   * You may not use this file except in compliance with the License.
 271:FWLIB/src/stm32f4xx_rtc.c ****   * You may obtain a copy of the License at:
 272:FWLIB/src/stm32f4xx_rtc.c ****   *
 273:FWLIB/src/stm32f4xx_rtc.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
 274:FWLIB/src/stm32f4xx_rtc.c ****   *
 275:FWLIB/src/stm32f4xx_rtc.c ****   * Unless required by applicable law or agreed to in writing, software 
 276:FWLIB/src/stm32f4xx_rtc.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
 277:FWLIB/src/stm32f4xx_rtc.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 278:FWLIB/src/stm32f4xx_rtc.c ****   * See the License for the specific language governing permissions and
 279:FWLIB/src/stm32f4xx_rtc.c ****   * limitations under the License.
 280:FWLIB/src/stm32f4xx_rtc.c ****   *
 281:FWLIB/src/stm32f4xx_rtc.c ****   ******************************************************************************
 282:FWLIB/src/stm32f4xx_rtc.c ****   */ 
 283:FWLIB/src/stm32f4xx_rtc.c **** 
 284:FWLIB/src/stm32f4xx_rtc.c **** /* Includes ------------------------------------------------------------------*/
 285:FWLIB/src/stm32f4xx_rtc.c **** #include "stm32f4xx_rtc.h"
 286:FWLIB/src/stm32f4xx_rtc.c **** 
 287:FWLIB/src/stm32f4xx_rtc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 288:FWLIB/src/stm32f4xx_rtc.c ****   * @{
 289:FWLIB/src/stm32f4xx_rtc.c ****   */
 290:FWLIB/src/stm32f4xx_rtc.c **** 
 291:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC 
 292:FWLIB/src/stm32f4xx_rtc.c ****   * @brief RTC driver modules
 293:FWLIB/src/stm32f4xx_rtc.c ****   * @{
 294:FWLIB/src/stm32f4xx_rtc.c ****   */
 295:FWLIB/src/stm32f4xx_rtc.c **** 
 296:FWLIB/src/stm32f4xx_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 297:FWLIB/src/stm32f4xx_rtc.c **** /* Private define ------------------------------------------------------------*/
 298:FWLIB/src/stm32f4xx_rtc.c **** 
 299:FWLIB/src/stm32f4xx_rtc.c **** /* Masks Definition */
 300:FWLIB/src/stm32f4xx_rtc.c **** #define RTC_TR_RESERVED_MASK    ((uint32_t)0x007F7F7F)
 301:FWLIB/src/stm32f4xx_rtc.c **** #define RTC_DR_RESERVED_MASK    ((uint32_t)0x00FFFF3F) 
 302:FWLIB/src/stm32f4xx_rtc.c **** #define RTC_INIT_MASK           ((uint32_t)0xFFFFFFFF)  
 303:FWLIB/src/stm32f4xx_rtc.c **** #define RTC_RSF_MASK            ((uint32_t)0xFFFFFF5F)
 304:FWLIB/src/stm32f4xx_rtc.c **** #define RTC_FLAGS_MASK          ((uint32_t)(RTC_FLAG_TSOVF | RTC_FLAG_TSF | RTC_FLAG_WUTF | \
 305:FWLIB/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBF | RTC_FLAG_ALRAF | RTC_FLAG_INITF | \
 306:FWLIB/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_RSF | RTC_FLAG_INITS | RTC_FLAG_WUTWF | \
 307:FWLIB/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBWF | RTC_FLAG_ALRAWF | RTC_FLAG_TAMP1F | \
 308:FWLIB/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_TAMP2F | RTC_FLAG_RECALPF | RTC_FLAG_SHPF))
 309:FWLIB/src/stm32f4xx_rtc.c **** 
 310:FWLIB/src/stm32f4xx_rtc.c **** #define INITMODE_TIMEOUT         ((uint32_t) 0x00010000)
 311:FWLIB/src/stm32f4xx_rtc.c **** #define SYNCHRO_TIMEOUT          ((uint32_t) 0x00020000)
 312:FWLIB/src/stm32f4xx_rtc.c **** #define RECALPF_TIMEOUT          ((uint32_t) 0x00020000)
 313:FWLIB/src/stm32f4xx_rtc.c **** #define SHPF_TIMEOUT             ((uint32_t) 0x00001000)
 314:FWLIB/src/stm32f4xx_rtc.c **** 
 315:FWLIB/src/stm32f4xx_rtc.c **** /* Private macro -------------------------------------------------------------*/
 316:FWLIB/src/stm32f4xx_rtc.c **** /* Private variables ---------------------------------------------------------*/
 317:FWLIB/src/stm32f4xx_rtc.c **** /* Private function prototypes -----------------------------------------------*/
ARM GAS  /tmp/cczQSXyD.s 			page 7


 318:FWLIB/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value);
 319:FWLIB/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value);
 320:FWLIB/src/stm32f4xx_rtc.c **** 
 321:FWLIB/src/stm32f4xx_rtc.c **** /* Private functions ---------------------------------------------------------*/
 322:FWLIB/src/stm32f4xx_rtc.c **** 
 323:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Private_Functions
 324:FWLIB/src/stm32f4xx_rtc.c ****   * @{
 325:FWLIB/src/stm32f4xx_rtc.c ****   */ 
 326:FWLIB/src/stm32f4xx_rtc.c **** 
 327:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group1 Initialization and Configuration functions
 328:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Initialization and Configuration functions 
 329:FWLIB/src/stm32f4xx_rtc.c ****  *
 330:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
 331:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
 332:FWLIB/src/stm32f4xx_rtc.c ****              ##### Initialization and Configuration functions #####
 333:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
 334:FWLIB/src/stm32f4xx_rtc.c ****  
 335:FWLIB/src/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to initialize and configure the RTC
 336:FWLIB/src/stm32f4xx_rtc.c ****       Prescaler (Synchronous and Asynchronous), RTC Hour format, disable RTC registers
 337:FWLIB/src/stm32f4xx_rtc.c ****       Write protection, enter and exit the RTC initialization mode, RTC registers
 338:FWLIB/src/stm32f4xx_rtc.c ****       synchronization check and reference clock detection enable.
 339:FWLIB/src/stm32f4xx_rtc.c ****   
 340:FWLIB/src/stm32f4xx_rtc.c ****    (#) The RTC Prescaler is programmed to generate the RTC 1Hz time base. It is
 341:FWLIB/src/stm32f4xx_rtc.c ****        split into 2 programmable prescalers to minimize power consumption.
 342:FWLIB/src/stm32f4xx_rtc.c ****        (++) A 7-bit asynchronous prescaler and A 13-bit synchronous prescaler.
 343:FWLIB/src/stm32f4xx_rtc.c ****        (++) When both prescalers are used, it is recommended to configure the 
 344:FWLIB/src/stm32f4xx_rtc.c ****             asynchronous prescaler to a high value to minimize consumption.
 345:FWLIB/src/stm32f4xx_rtc.c **** 
 346:FWLIB/src/stm32f4xx_rtc.c ****    (#) All RTC registers are Write protected. Writing to the RTC registers
 347:FWLIB/src/stm32f4xx_rtc.c ****        is enabled by writing a key into the Write Protection register, RTC_WPR.
 348:FWLIB/src/stm32f4xx_rtc.c **** 
 349:FWLIB/src/stm32f4xx_rtc.c ****    (#) To Configure the RTC Calendar, user application should enter initialization
 350:FWLIB/src/stm32f4xx_rtc.c ****        mode. In this mode, the calendar counter is stopped and its value can be 
 351:FWLIB/src/stm32f4xx_rtc.c ****        updated. When the initialization sequence is complete, the calendar restarts 
 352:FWLIB/src/stm32f4xx_rtc.c ****        counting after 4 RTCCLK cycles.
 353:FWLIB/src/stm32f4xx_rtc.c **** 
 354:FWLIB/src/stm32f4xx_rtc.c ****    (#) To read the calendar through the shadow registers after Calendar initialization,
 355:FWLIB/src/stm32f4xx_rtc.c ****        calendar update or after wakeup from low power modes the software must first 
 356:FWLIB/src/stm32f4xx_rtc.c ****        clear the RSF flag. The software must then wait until it is set again before 
 357:FWLIB/src/stm32f4xx_rtc.c ****        reading the calendar, which means that the calendar registers have been 
 358:FWLIB/src/stm32f4xx_rtc.c ****        correctly copied into the RTC_TR and RTC_DR shadow registers.
 359:FWLIB/src/stm32f4xx_rtc.c ****        The RTC_WaitForSynchro() function implements the above software sequence 
 360:FWLIB/src/stm32f4xx_rtc.c ****        (RSF clear and RSF check).
 361:FWLIB/src/stm32f4xx_rtc.c **** 
 362:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
 363:FWLIB/src/stm32f4xx_rtc.c ****   * @{
 364:FWLIB/src/stm32f4xx_rtc.c ****   */
 365:FWLIB/src/stm32f4xx_rtc.c **** 
 366:FWLIB/src/stm32f4xx_rtc.c **** /**
 367:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Deinitializes the RTC registers to their default reset values.
 368:FWLIB/src/stm32f4xx_rtc.c ****   * @note   This function doesn't reset the RTC Clock source and RTC Backup Data
 369:FWLIB/src/stm32f4xx_rtc.c ****   *         registers.       
 370:FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
 371:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 372:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are deinitialized
 373:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not deinitialized
 374:FWLIB/src/stm32f4xx_rtc.c ****   */
ARM GAS  /tmp/cczQSXyD.s 			page 8


 375:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_DeInit(void)
 376:FWLIB/src/stm32f4xx_rtc.c **** {
 377:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 378:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 379:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 380:FWLIB/src/stm32f4xx_rtc.c ****   
 381:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 382:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 383:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 384:FWLIB/src/stm32f4xx_rtc.c **** 
 385:FWLIB/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 386:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 387:FWLIB/src/stm32f4xx_rtc.c ****   {
 388:FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
 389:FWLIB/src/stm32f4xx_rtc.c ****   }  
 390:FWLIB/src/stm32f4xx_rtc.c ****   else
 391:FWLIB/src/stm32f4xx_rtc.c ****   {
 392:FWLIB/src/stm32f4xx_rtc.c ****     /* Reset TR, DR and CR registers */
 393:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)0x00000000;
 394:FWLIB/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
 395:FWLIB/src/stm32f4xx_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 396:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)0x00000007;
 397:FWLIB/src/stm32f4xx_rtc.c ****   
 398:FWLIB/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 399:FWLIB/src/stm32f4xx_rtc.c ****     do
 400:FWLIB/src/stm32f4xx_rtc.c ****     {
 401:FWLIB/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 402:FWLIB/src/stm32f4xx_rtc.c ****       wutcounter++;  
 403:FWLIB/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 404:FWLIB/src/stm32f4xx_rtc.c ****     
 405:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 406:FWLIB/src/stm32f4xx_rtc.c ****     {
 407:FWLIB/src/stm32f4xx_rtc.c ****       status = ERROR;
 408:FWLIB/src/stm32f4xx_rtc.c ****     }
 409:FWLIB/src/stm32f4xx_rtc.c ****     else
 410:FWLIB/src/stm32f4xx_rtc.c ****     {
 411:FWLIB/src/stm32f4xx_rtc.c ****       /* Reset all RTC CR register bits */
 412:FWLIB/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)0x00000000;
 413:FWLIB/src/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 414:FWLIB/src/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 415:FWLIB/src/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 416:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 417:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 418:FWLIB/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)0x00000000;
 419:FWLIB/src/stm32f4xx_rtc.c ****       RTC->CALR = (uint32_t)0x00000000;
 420:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMASSR = (uint32_t)0x00000000;
 421:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMBSSR = (uint32_t)0x00000000;
 422:FWLIB/src/stm32f4xx_rtc.c ****       
 423:FWLIB/src/stm32f4xx_rtc.c ****       /* Reset ISR register and exit initialization mode */
 424:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ISR = (uint32_t)0x00000000;
 425:FWLIB/src/stm32f4xx_rtc.c ****       
 426:FWLIB/src/stm32f4xx_rtc.c ****       /* Reset Tamper and alternate functions configuration register */
 427:FWLIB/src/stm32f4xx_rtc.c ****       RTC->TAFCR = 0x00000000;
 428:FWLIB/src/stm32f4xx_rtc.c ****   
 429:FWLIB/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 430:FWLIB/src/stm32f4xx_rtc.c ****       {
 431:FWLIB/src/stm32f4xx_rtc.c ****         status = ERROR;
ARM GAS  /tmp/cczQSXyD.s 			page 9


 432:FWLIB/src/stm32f4xx_rtc.c ****       }
 433:FWLIB/src/stm32f4xx_rtc.c ****       else
 434:FWLIB/src/stm32f4xx_rtc.c ****       {
 435:FWLIB/src/stm32f4xx_rtc.c ****         status = SUCCESS;      
 436:FWLIB/src/stm32f4xx_rtc.c ****       }
 437:FWLIB/src/stm32f4xx_rtc.c ****     }
 438:FWLIB/src/stm32f4xx_rtc.c ****   }
 439:FWLIB/src/stm32f4xx_rtc.c ****   
 440:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 441:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 442:FWLIB/src/stm32f4xx_rtc.c ****   
 443:FWLIB/src/stm32f4xx_rtc.c ****   return status;
 444:FWLIB/src/stm32f4xx_rtc.c **** }
 445:FWLIB/src/stm32f4xx_rtc.c **** 
 446:FWLIB/src/stm32f4xx_rtc.c **** /**
 447:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Initializes the RTC registers according to the specified parameters 
 448:FWLIB/src/stm32f4xx_rtc.c ****   *         in RTC_InitStruct.
 449:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure that contains 
 450:FWLIB/src/stm32f4xx_rtc.c ****   *         the configuration information for the RTC peripheral.
 451:FWLIB/src/stm32f4xx_rtc.c ****   * @note   The RTC Prescaler register is write protected and can be written in 
 452:FWLIB/src/stm32f4xx_rtc.c ****   *         initialization mode only.  
 453:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 454:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are initialized
 455:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not initialized  
 456:FWLIB/src/stm32f4xx_rtc.c ****   */
 457:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
 458:FWLIB/src/stm32f4xx_rtc.c **** {
 459:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 460:FWLIB/src/stm32f4xx_rtc.c ****   
 461:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 462:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
 463:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
 464:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));
 465:FWLIB/src/stm32f4xx_rtc.c **** 
 466:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 467:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 468:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 469:FWLIB/src/stm32f4xx_rtc.c **** 
 470:FWLIB/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 471:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 472:FWLIB/src/stm32f4xx_rtc.c ****   {
 473:FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
 474:FWLIB/src/stm32f4xx_rtc.c ****   } 
 475:FWLIB/src/stm32f4xx_rtc.c ****   else
 476:FWLIB/src/stm32f4xx_rtc.c ****   {
 477:FWLIB/src/stm32f4xx_rtc.c ****     /* Clear RTC CR FMT Bit */
 478:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 479:FWLIB/src/stm32f4xx_rtc.c ****     /* Set RTC_CR register */
 480:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 481:FWLIB/src/stm32f4xx_rtc.c ****   
 482:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the RTC PRER */
 483:FWLIB/src/stm32f4xx_rtc.c ****     RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 484:FWLIB/src/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 485:FWLIB/src/stm32f4xx_rtc.c **** 
 486:FWLIB/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 487:FWLIB/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 488:FWLIB/src/stm32f4xx_rtc.c **** 
ARM GAS  /tmp/cczQSXyD.s 			page 10


 489:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 490:FWLIB/src/stm32f4xx_rtc.c ****   }
 491:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 492:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 493:FWLIB/src/stm32f4xx_rtc.c ****   
 494:FWLIB/src/stm32f4xx_rtc.c ****   return status;
 495:FWLIB/src/stm32f4xx_rtc.c **** }
 496:FWLIB/src/stm32f4xx_rtc.c **** 
 497:FWLIB/src/stm32f4xx_rtc.c **** /**
 498:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_InitStruct member with its default value.
 499:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
 500:FWLIB/src/stm32f4xx_rtc.c ****   *         initialized.
 501:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
 502:FWLIB/src/stm32f4xx_rtc.c ****   */
 503:FWLIB/src/stm32f4xx_rtc.c **** void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
 504:FWLIB/src/stm32f4xx_rtc.c **** {
 505:FWLIB/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_HourFormat member */
 506:FWLIB/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 507:FWLIB/src/stm32f4xx_rtc.c ****     
 508:FWLIB/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_AsynchPrediv member */
 509:FWLIB/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 510:FWLIB/src/stm32f4xx_rtc.c **** 
 511:FWLIB/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_SynchPrediv member */
 512:FWLIB/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 513:FWLIB/src/stm32f4xx_rtc.c **** }
 514:FWLIB/src/stm32f4xx_rtc.c **** 
 515:FWLIB/src/stm32f4xx_rtc.c **** /**
 516:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC registers write protection.
 517:FWLIB/src/stm32f4xx_rtc.c ****   * @note   All the RTC registers are write protected except for RTC_ISR[13:8], 
 518:FWLIB/src/stm32f4xx_rtc.c ****   *         RTC_TAFCR and RTC_BKPxR.
 519:FWLIB/src/stm32f4xx_rtc.c ****   * @note   Writing a wrong key reactivates the write protection.
 520:FWLIB/src/stm32f4xx_rtc.c ****   * @note   The protection mechanism is not affected by system reset.  
 521:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the write protection.
 522:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 523:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
 524:FWLIB/src/stm32f4xx_rtc.c ****   */
 525:FWLIB/src/stm32f4xx_rtc.c **** void RTC_WriteProtectionCmd(FunctionalState NewState)
 526:FWLIB/src/stm32f4xx_rtc.c **** {
 527:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 528:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 529:FWLIB/src/stm32f4xx_rtc.c ****     
 530:FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 531:FWLIB/src/stm32f4xx_rtc.c ****   {
 532:FWLIB/src/stm32f4xx_rtc.c ****     /* Enable the write protection for RTC registers */
 533:FWLIB/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xFF;   
 534:FWLIB/src/stm32f4xx_rtc.c ****   }
 535:FWLIB/src/stm32f4xx_rtc.c ****   else
 536:FWLIB/src/stm32f4xx_rtc.c ****   {
 537:FWLIB/src/stm32f4xx_rtc.c ****     /* Disable the write protection for RTC registers */
 538:FWLIB/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xCA;
 539:FWLIB/src/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 540:FWLIB/src/stm32f4xx_rtc.c ****   }
 541:FWLIB/src/stm32f4xx_rtc.c **** }
 542:FWLIB/src/stm32f4xx_rtc.c **** 
 543:FWLIB/src/stm32f4xx_rtc.c **** /**
 544:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enters the RTC Initialization mode.
 545:FWLIB/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
ARM GAS  /tmp/cczQSXyD.s 			page 11


 546:FWLIB/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.    
 547:FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
 548:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 549:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC is in Init mode
 550:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC is not in Init mode  
 551:FWLIB/src/stm32f4xx_rtc.c ****   */
 552:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_EnterInitMode(void)
 553:FWLIB/src/stm32f4xx_rtc.c **** {
 554:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 555:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 556:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t initstatus = 0x00;
 557:FWLIB/src/stm32f4xx_rtc.c ****      
 558:FWLIB/src/stm32f4xx_rtc.c ****   /* Check if the Initialization mode is set */
 559:FWLIB/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 560:FWLIB/src/stm32f4xx_rtc.c ****   {
 561:FWLIB/src/stm32f4xx_rtc.c ****     /* Set the Initialization mode */
 562:FWLIB/src/stm32f4xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 563:FWLIB/src/stm32f4xx_rtc.c ****     
 564:FWLIB/src/stm32f4xx_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
 565:FWLIB/src/stm32f4xx_rtc.c ****     do
 566:FWLIB/src/stm32f4xx_rtc.c ****     {
 567:FWLIB/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 568:FWLIB/src/stm32f4xx_rtc.c ****       initcounter++;  
 569:FWLIB/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 570:FWLIB/src/stm32f4xx_rtc.c ****     
 571:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 572:FWLIB/src/stm32f4xx_rtc.c ****     {
 573:FWLIB/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 574:FWLIB/src/stm32f4xx_rtc.c ****     }
 575:FWLIB/src/stm32f4xx_rtc.c ****     else
 576:FWLIB/src/stm32f4xx_rtc.c ****     {
 577:FWLIB/src/stm32f4xx_rtc.c ****       status = ERROR;
 578:FWLIB/src/stm32f4xx_rtc.c ****     }        
 579:FWLIB/src/stm32f4xx_rtc.c ****   }
 580:FWLIB/src/stm32f4xx_rtc.c ****   else
 581:FWLIB/src/stm32f4xx_rtc.c ****   {
 582:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;  
 583:FWLIB/src/stm32f4xx_rtc.c ****   } 
 584:FWLIB/src/stm32f4xx_rtc.c ****     
 585:FWLIB/src/stm32f4xx_rtc.c ****   return (status);  
 586:FWLIB/src/stm32f4xx_rtc.c **** }
 587:FWLIB/src/stm32f4xx_rtc.c **** 
 588:FWLIB/src/stm32f4xx_rtc.c **** /**
 589:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Exits the RTC Initialization mode.
 590:FWLIB/src/stm32f4xx_rtc.c ****   * @note   When the initialization sequence is complete, the calendar restarts 
 591:FWLIB/src/stm32f4xx_rtc.c ****   *         counting after 4 RTCCLK cycles.  
 592:FWLIB/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 593:FWLIB/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
 594:FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
 595:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
 596:FWLIB/src/stm32f4xx_rtc.c ****   */
 597:FWLIB/src/stm32f4xx_rtc.c **** void RTC_ExitInitMode(void)
 598:FWLIB/src/stm32f4xx_rtc.c **** { 
 599:FWLIB/src/stm32f4xx_rtc.c ****   /* Exit Initialization mode */
 600:FWLIB/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 601:FWLIB/src/stm32f4xx_rtc.c **** }
 602:FWLIB/src/stm32f4xx_rtc.c **** 
ARM GAS  /tmp/cczQSXyD.s 			page 12


 603:FWLIB/src/stm32f4xx_rtc.c **** /**
 604:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are 
 605:FWLIB/src/stm32f4xx_rtc.c ****   *         synchronized with RTC APB clock.
 606:FWLIB/src/stm32f4xx_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the 
 607:FWLIB/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function. 
 608:FWLIB/src/stm32f4xx_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar 
 609:FWLIB/src/stm32f4xx_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes 
 610:FWLIB/src/stm32f4xx_rtc.c ****   *         the software must first clear the RSF flag. 
 611:FWLIB/src/stm32f4xx_rtc.c ****   *         The software must then wait until it is set again before reading 
 612:FWLIB/src/stm32f4xx_rtc.c ****   *         the calendar, which means that the calendar registers have been 
 613:FWLIB/src/stm32f4xx_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
 614:FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
 615:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 616:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are synchronised
 617:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not synchronised
 618:FWLIB/src/stm32f4xx_rtc.c ****   */
 619:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WaitForSynchro(void)
 620:FWLIB/src/stm32f4xx_rtc.c **** {
 621:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 622:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 623:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t synchrostatus = 0x00;
 624:FWLIB/src/stm32f4xx_rtc.c **** 
 625:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 626:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 627:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 628:FWLIB/src/stm32f4xx_rtc.c ****     
 629:FWLIB/src/stm32f4xx_rtc.c ****   /* Clear RSF flag */
 630:FWLIB/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 631:FWLIB/src/stm32f4xx_rtc.c ****     
 632:FWLIB/src/stm32f4xx_rtc.c ****   /* Wait the registers to be synchronised */
 633:FWLIB/src/stm32f4xx_rtc.c ****   do
 634:FWLIB/src/stm32f4xx_rtc.c ****   {
 635:FWLIB/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 636:FWLIB/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 637:FWLIB/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 638:FWLIB/src/stm32f4xx_rtc.c ****     
 639:FWLIB/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 640:FWLIB/src/stm32f4xx_rtc.c ****   {
 641:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 642:FWLIB/src/stm32f4xx_rtc.c ****   }
 643:FWLIB/src/stm32f4xx_rtc.c ****   else
 644:FWLIB/src/stm32f4xx_rtc.c ****   {
 645:FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
 646:FWLIB/src/stm32f4xx_rtc.c ****   }        
 647:FWLIB/src/stm32f4xx_rtc.c **** 
 648:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 649:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 650:FWLIB/src/stm32f4xx_rtc.c ****     
 651:FWLIB/src/stm32f4xx_rtc.c ****   return (status); 
 652:FWLIB/src/stm32f4xx_rtc.c **** }
 653:FWLIB/src/stm32f4xx_rtc.c **** 
 654:FWLIB/src/stm32f4xx_rtc.c **** /**
 655:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC reference clock detection.
 656:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the RTC reference clock.
 657:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 658:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 659:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC reference clock detection is enabled
ARM GAS  /tmp/cczQSXyD.s 			page 13


 660:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC reference clock detection is disabled  
 661:FWLIB/src/stm32f4xx_rtc.c ****   */
 662:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
 663:FWLIB/src/stm32f4xx_rtc.c **** { 
 664:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 665:FWLIB/src/stm32f4xx_rtc.c ****   
 666:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 667:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 668:FWLIB/src/stm32f4xx_rtc.c ****   
 669:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 670:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 671:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 672:FWLIB/src/stm32f4xx_rtc.c ****     
 673:FWLIB/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 674:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 675:FWLIB/src/stm32f4xx_rtc.c ****   {
 676:FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
 677:FWLIB/src/stm32f4xx_rtc.c ****   } 
 678:FWLIB/src/stm32f4xx_rtc.c ****   else
 679:FWLIB/src/stm32f4xx_rtc.c ****   {  
 680:FWLIB/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 681:FWLIB/src/stm32f4xx_rtc.c ****     {
 682:FWLIB/src/stm32f4xx_rtc.c ****       /* Enable the RTC reference clock detection */
 683:FWLIB/src/stm32f4xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;   
 684:FWLIB/src/stm32f4xx_rtc.c ****     }
 685:FWLIB/src/stm32f4xx_rtc.c ****     else
 686:FWLIB/src/stm32f4xx_rtc.c ****     {
 687:FWLIB/src/stm32f4xx_rtc.c ****       /* Disable the RTC reference clock detection */
 688:FWLIB/src/stm32f4xx_rtc.c ****       RTC->CR &= ~RTC_CR_REFCKON;    
 689:FWLIB/src/stm32f4xx_rtc.c ****     }
 690:FWLIB/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 691:FWLIB/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 692:FWLIB/src/stm32f4xx_rtc.c ****     
 693:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 694:FWLIB/src/stm32f4xx_rtc.c ****   }
 695:FWLIB/src/stm32f4xx_rtc.c ****   
 696:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 697:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 698:FWLIB/src/stm32f4xx_rtc.c ****   
 699:FWLIB/src/stm32f4xx_rtc.c ****   return status; 
 700:FWLIB/src/stm32f4xx_rtc.c **** }
 701:FWLIB/src/stm32f4xx_rtc.c **** 
 702:FWLIB/src/stm32f4xx_rtc.c **** /**
 703:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Bypass Shadow feature.
 704:FWLIB/src/stm32f4xx_rtc.c ****   * @note   When the Bypass Shadow is enabled the calendar value are taken 
 705:FWLIB/src/stm32f4xx_rtc.c ****   *         directly from the Calendar counter.
 706:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Bypass Shadow feature.
 707:FWLIB/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
 708:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
 709:FWLIB/src/stm32f4xx_rtc.c **** */
 710:FWLIB/src/stm32f4xx_rtc.c **** void RTC_BypassShadowCmd(FunctionalState NewState)
 711:FWLIB/src/stm32f4xx_rtc.c **** {
 712:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 713:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 714:FWLIB/src/stm32f4xx_rtc.c **** 
 715:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 716:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
ARM GAS  /tmp/cczQSXyD.s 			page 14


 717:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 718:FWLIB/src/stm32f4xx_rtc.c ****   
 719:FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 720:FWLIB/src/stm32f4xx_rtc.c ****   {
 721:FWLIB/src/stm32f4xx_rtc.c ****     /* Set the BYPSHAD bit */
 722:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 723:FWLIB/src/stm32f4xx_rtc.c ****   }
 724:FWLIB/src/stm32f4xx_rtc.c ****   else
 725:FWLIB/src/stm32f4xx_rtc.c ****   {
 726:FWLIB/src/stm32f4xx_rtc.c ****     /* Reset the BYPSHAD bit */
 727:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 728:FWLIB/src/stm32f4xx_rtc.c ****   }
 729:FWLIB/src/stm32f4xx_rtc.c **** 
 730:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 731:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 732:FWLIB/src/stm32f4xx_rtc.c **** }
 733:FWLIB/src/stm32f4xx_rtc.c **** 
 734:FWLIB/src/stm32f4xx_rtc.c **** /**
 735:FWLIB/src/stm32f4xx_rtc.c ****   * @}
 736:FWLIB/src/stm32f4xx_rtc.c ****   */
 737:FWLIB/src/stm32f4xx_rtc.c **** 
 738:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group2 Time and Date configuration functions
 739:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Time and Date configuration functions 
 740:FWLIB/src/stm32f4xx_rtc.c ****  *
 741:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
 742:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
 743:FWLIB/src/stm32f4xx_rtc.c ****                  ##### Time and Date configuration functions #####
 744:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
 745:FWLIB/src/stm32f4xx_rtc.c ****  
 746:FWLIB/src/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to program and read the RTC Calendar
 747:FWLIB/src/stm32f4xx_rtc.c ****       (Time and Date).
 748:FWLIB/src/stm32f4xx_rtc.c **** 
 749:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
 750:FWLIB/src/stm32f4xx_rtc.c ****   * @{
 751:FWLIB/src/stm32f4xx_rtc.c ****   */
 752:FWLIB/src/stm32f4xx_rtc.c **** 
 753:FWLIB/src/stm32f4xx_rtc.c **** /**
 754:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current time.
 755:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 756:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 757:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 758:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 759:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that contains 
 760:FWLIB/src/stm32f4xx_rtc.c ****   *                        the time configuration information for the RTC.     
 761:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 762:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Time register is configured
 763:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Time register is not configured
 764:FWLIB/src/stm32f4xx_rtc.c ****   */
 765:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 766:FWLIB/src/stm32f4xx_rtc.c **** {
 767:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 768:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 769:FWLIB/src/stm32f4xx_rtc.c ****     
 770:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 771:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 772:FWLIB/src/stm32f4xx_rtc.c ****   
 773:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
ARM GAS  /tmp/cczQSXyD.s 			page 15


 774:FWLIB/src/stm32f4xx_rtc.c ****   {
 775:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 776:FWLIB/src/stm32f4xx_rtc.c ****     {
 777:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
 778:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
 779:FWLIB/src/stm32f4xx_rtc.c ****     } 
 780:FWLIB/src/stm32f4xx_rtc.c ****     else
 781:FWLIB/src/stm32f4xx_rtc.c ****     {
 782:FWLIB/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 783:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 784:FWLIB/src/stm32f4xx_rtc.c ****     }
 785:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
 786:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
 787:FWLIB/src/stm32f4xx_rtc.c ****   }
 788:FWLIB/src/stm32f4xx_rtc.c ****   else
 789:FWLIB/src/stm32f4xx_rtc.c ****   {
 790:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 791:FWLIB/src/stm32f4xx_rtc.c ****     {
 792:FWLIB/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 793:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 794:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
 795:FWLIB/src/stm32f4xx_rtc.c ****     } 
 796:FWLIB/src/stm32f4xx_rtc.c ****     else
 797:FWLIB/src/stm32f4xx_rtc.c ****     {
 798:FWLIB/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 799:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 800:FWLIB/src/stm32f4xx_rtc.c ****     }
 801:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
 802:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
 803:FWLIB/src/stm32f4xx_rtc.c ****   }
 804:FWLIB/src/stm32f4xx_rtc.c ****   
 805:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 806:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 807:FWLIB/src/stm32f4xx_rtc.c ****   {
 808:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 809:FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 810:FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 811:FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 812:FWLIB/src/stm32f4xx_rtc.c ****   }  
 813:FWLIB/src/stm32f4xx_rtc.c ****   else
 814:FWLIB/src/stm32f4xx_rtc.c ****   {
 815:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 816:FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 817:FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 818:FWLIB/src/stm32f4xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 819:FWLIB/src/stm32f4xx_rtc.c ****   }  
 820:FWLIB/src/stm32f4xx_rtc.c **** 
 821:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 822:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 823:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 824:FWLIB/src/stm32f4xx_rtc.c **** 
 825:FWLIB/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 826:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 827:FWLIB/src/stm32f4xx_rtc.c ****   {
 828:FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
 829:FWLIB/src/stm32f4xx_rtc.c ****   } 
 830:FWLIB/src/stm32f4xx_rtc.c ****   else
ARM GAS  /tmp/cczQSXyD.s 			page 16


 831:FWLIB/src/stm32f4xx_rtc.c ****   {
 832:FWLIB/src/stm32f4xx_rtc.c ****     /* Set the RTC_TR register */
 833:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 834:FWLIB/src/stm32f4xx_rtc.c **** 
 835:FWLIB/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 836:FWLIB/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 837:FWLIB/src/stm32f4xx_rtc.c **** 
 838:FWLIB/src/stm32f4xx_rtc.c ****     /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 839:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 840:FWLIB/src/stm32f4xx_rtc.c ****     {
 841:FWLIB/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 842:FWLIB/src/stm32f4xx_rtc.c ****     {
 843:FWLIB/src/stm32f4xx_rtc.c ****       status = ERROR;
 844:FWLIB/src/stm32f4xx_rtc.c ****     }
 845:FWLIB/src/stm32f4xx_rtc.c ****     else
 846:FWLIB/src/stm32f4xx_rtc.c ****     {
 847:FWLIB/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 848:FWLIB/src/stm32f4xx_rtc.c ****     }
 849:FWLIB/src/stm32f4xx_rtc.c ****   }
 850:FWLIB/src/stm32f4xx_rtc.c ****     else
 851:FWLIB/src/stm32f4xx_rtc.c ****     {
 852:FWLIB/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 853:FWLIB/src/stm32f4xx_rtc.c ****     }
 854:FWLIB/src/stm32f4xx_rtc.c ****   }
 855:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 856:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 857:FWLIB/src/stm32f4xx_rtc.c ****     
 858:FWLIB/src/stm32f4xx_rtc.c ****   return status;
 859:FWLIB/src/stm32f4xx_rtc.c **** }
 860:FWLIB/src/stm32f4xx_rtc.c **** 
 861:FWLIB/src/stm32f4xx_rtc.c **** /**
 862:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_TimeStruct member with its default value
 863:FWLIB/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00min:00sec).
 864:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
 865:FWLIB/src/stm32f4xx_rtc.c ****   *         initialized.
 866:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
 867:FWLIB/src/stm32f4xx_rtc.c ****   */
 868:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
 869:FWLIB/src/stm32f4xx_rtc.c **** {
 870:FWLIB/src/stm32f4xx_rtc.c ****   /* Time = 00h:00min:00sec */
 871:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 872:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 873:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 874:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 875:FWLIB/src/stm32f4xx_rtc.c **** }
 876:FWLIB/src/stm32f4xx_rtc.c **** 
 877:FWLIB/src/stm32f4xx_rtc.c **** /**
 878:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current Time.
 879:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
 880:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 881:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 882:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 883:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
 884:FWLIB/src/stm32f4xx_rtc.c ****   *                        contain the returned current time configuration.     
 885:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
 886:FWLIB/src/stm32f4xx_rtc.c ****   */
 887:FWLIB/src/stm32f4xx_rtc.c **** void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
ARM GAS  /tmp/cczQSXyD.s 			page 17


 888:FWLIB/src/stm32f4xx_rtc.c **** {
 889:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 890:FWLIB/src/stm32f4xx_rtc.c **** 
 891:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 892:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 893:FWLIB/src/stm32f4xx_rtc.c **** 
 894:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
 895:FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 896:FWLIB/src/stm32f4xx_rtc.c ****   
 897:FWLIB/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
 898:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 899:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 900:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 901:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 902:FWLIB/src/stm32f4xx_rtc.c **** 
 903:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 904:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 905:FWLIB/src/stm32f4xx_rtc.c ****   {
 906:FWLIB/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
 907:FWLIB/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 908:FWLIB/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 909:FWLIB/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 910:FWLIB/src/stm32f4xx_rtc.c ****   }
 911:FWLIB/src/stm32f4xx_rtc.c **** }
 912:FWLIB/src/stm32f4xx_rtc.c **** 
 913:FWLIB/src/stm32f4xx_rtc.c **** /**
 914:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC current Calendar Sub seconds value.
 915:FWLIB/src/stm32f4xx_rtc.c ****   * @note   This function freeze the Time and Date registers after reading the 
 916:FWLIB/src/stm32f4xx_rtc.c ****   *         SSR register.
 917:FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
 918:FWLIB/src/stm32f4xx_rtc.c ****   * @retval RTC current Calendar Sub seconds value.
 919:FWLIB/src/stm32f4xx_rtc.c ****   */
 920:FWLIB/src/stm32f4xx_rtc.c **** uint32_t RTC_GetSubSecond(void)
 921:FWLIB/src/stm32f4xx_rtc.c **** {
 922:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 923:FWLIB/src/stm32f4xx_rtc.c ****   
 924:FWLIB/src/stm32f4xx_rtc.c ****   /* Get sub seconds values from the correspondent registers*/
 925:FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->SSR);
 926:FWLIB/src/stm32f4xx_rtc.c ****   
 927:FWLIB/src/stm32f4xx_rtc.c ****   /* Read DR register to unfroze calendar registers */
 928:FWLIB/src/stm32f4xx_rtc.c ****   (void) (RTC->DR);
 929:FWLIB/src/stm32f4xx_rtc.c ****   
 930:FWLIB/src/stm32f4xx_rtc.c ****   return (tmpreg);
 931:FWLIB/src/stm32f4xx_rtc.c **** }
 932:FWLIB/src/stm32f4xx_rtc.c **** 
 933:FWLIB/src/stm32f4xx_rtc.c **** /**
 934:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current date.
 935:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 936:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 937:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 938:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 939:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure that contains 
 940:FWLIB/src/stm32f4xx_rtc.c ****   *                         the date configuration information for the RTC.
 941:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 942:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Date register is configured
 943:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Date register is not configured
 944:FWLIB/src/stm32f4xx_rtc.c ****   */
ARM GAS  /tmp/cczQSXyD.s 			page 18


 945:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
 946:FWLIB/src/stm32f4xx_rtc.c **** {
 947:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 948:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 949:FWLIB/src/stm32f4xx_rtc.c ****   
 950:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 951:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 952:FWLIB/src/stm32f4xx_rtc.c **** 
 953:FWLIB/src/stm32f4xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 954:FWLIB/src/stm32f4xx_rtc.c ****   {
 955:FWLIB/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 956:FWLIB/src/stm32f4xx_rtc.c ****   }  
 957:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 958:FWLIB/src/stm32f4xx_rtc.c ****   {
 959:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_DateStruct->RTC_Year));
 960:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_DateStruct->RTC_Month));
 961:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
 962:FWLIB/src/stm32f4xx_rtc.c ****   }
 963:FWLIB/src/stm32f4xx_rtc.c ****   else
 964:FWLIB/src/stm32f4xx_rtc.c ****   {
 965:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
 966:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 967:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(tmpreg));
 968:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 969:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(tmpreg));
 970:FWLIB/src/stm32f4xx_rtc.c ****   }
 971:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));
 972:FWLIB/src/stm32f4xx_rtc.c **** 
 973:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 974:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 975:FWLIB/src/stm32f4xx_rtc.c ****   {
 976:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 977:FWLIB/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 978:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 979:FWLIB/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 980:FWLIB/src/stm32f4xx_rtc.c ****   }  
 981:FWLIB/src/stm32f4xx_rtc.c ****   else
 982:FWLIB/src/stm32f4xx_rtc.c ****   {
 983:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 984:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 985:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 986:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 987:FWLIB/src/stm32f4xx_rtc.c ****   }
 988:FWLIB/src/stm32f4xx_rtc.c **** 
 989:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 990:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 991:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 992:FWLIB/src/stm32f4xx_rtc.c **** 
 993:FWLIB/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 994:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 995:FWLIB/src/stm32f4xx_rtc.c ****   {
 996:FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
 997:FWLIB/src/stm32f4xx_rtc.c ****   } 
 998:FWLIB/src/stm32f4xx_rtc.c ****   else
 999:FWLIB/src/stm32f4xx_rtc.c ****   {
1000:FWLIB/src/stm32f4xx_rtc.c ****     /* Set the RTC_DR register */
1001:FWLIB/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
ARM GAS  /tmp/cczQSXyD.s 			page 19


1002:FWLIB/src/stm32f4xx_rtc.c **** 
1003:FWLIB/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1004:FWLIB/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
1005:FWLIB/src/stm32f4xx_rtc.c **** 
1006:FWLIB/src/stm32f4xx_rtc.c ****     /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
1007:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
1008:FWLIB/src/stm32f4xx_rtc.c ****     {
1009:FWLIB/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
1010:FWLIB/src/stm32f4xx_rtc.c ****     {
1011:FWLIB/src/stm32f4xx_rtc.c ****       status = ERROR;
1012:FWLIB/src/stm32f4xx_rtc.c ****     }
1013:FWLIB/src/stm32f4xx_rtc.c ****     else
1014:FWLIB/src/stm32f4xx_rtc.c ****     {
1015:FWLIB/src/stm32f4xx_rtc.c ****       status = SUCCESS;
1016:FWLIB/src/stm32f4xx_rtc.c ****     }
1017:FWLIB/src/stm32f4xx_rtc.c ****   }
1018:FWLIB/src/stm32f4xx_rtc.c ****     else
1019:FWLIB/src/stm32f4xx_rtc.c ****     {
1020:FWLIB/src/stm32f4xx_rtc.c ****       status = SUCCESS;
1021:FWLIB/src/stm32f4xx_rtc.c ****     }
1022:FWLIB/src/stm32f4xx_rtc.c ****   }
1023:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1024:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
1025:FWLIB/src/stm32f4xx_rtc.c ****   
1026:FWLIB/src/stm32f4xx_rtc.c ****   return status;
1027:FWLIB/src/stm32f4xx_rtc.c **** }
1028:FWLIB/src/stm32f4xx_rtc.c **** 
1029:FWLIB/src/stm32f4xx_rtc.c **** /**
1030:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_DateStruct member with its default value
1031:FWLIB/src/stm32f4xx_rtc.c ****   *         (Monday, January 01 xx00).
1032:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
1033:FWLIB/src/stm32f4xx_rtc.c ****   *         initialized.
1034:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1035:FWLIB/src/stm32f4xx_rtc.c ****   */
1036:FWLIB/src/stm32f4xx_rtc.c **** void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
1037:FWLIB/src/stm32f4xx_rtc.c **** {
1038:FWLIB/src/stm32f4xx_rtc.c ****   /* Monday, January 01 xx00 */
1039:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
1040:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
1041:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
1042:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
1043:FWLIB/src/stm32f4xx_rtc.c **** }
1044:FWLIB/src/stm32f4xx_rtc.c **** 
1045:FWLIB/src/stm32f4xx_rtc.c **** /**
1046:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current date. 
1047:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1048:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1049:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1050:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1051:FWLIB/src/stm32f4xx_rtc.c ****   * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
1052:FWLIB/src/stm32f4xx_rtc.c ****   *                        contain the returned current date configuration.     
1053:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1054:FWLIB/src/stm32f4xx_rtc.c ****   */
1055:FWLIB/src/stm32f4xx_rtc.c **** void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
1056:FWLIB/src/stm32f4xx_rtc.c **** {
1057:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1058:FWLIB/src/stm32f4xx_rtc.c **** 
ARM GAS  /tmp/cczQSXyD.s 			page 20


1059:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1060:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1061:FWLIB/src/stm32f4xx_rtc.c ****   
1062:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
1063:FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
1064:FWLIB/src/stm32f4xx_rtc.c **** 
1065:FWLIB/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
1066:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
1067:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
1068:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
1069:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
1070:FWLIB/src/stm32f4xx_rtc.c **** 
1071:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1072:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1073:FWLIB/src/stm32f4xx_rtc.c ****   {
1074:FWLIB/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
1075:FWLIB/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
1076:FWLIB/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
1077:FWLIB/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
1078:FWLIB/src/stm32f4xx_rtc.c ****   }
1079:FWLIB/src/stm32f4xx_rtc.c **** }
1080:FWLIB/src/stm32f4xx_rtc.c **** 
1081:FWLIB/src/stm32f4xx_rtc.c **** /**
1082:FWLIB/src/stm32f4xx_rtc.c ****   * @}
1083:FWLIB/src/stm32f4xx_rtc.c ****   */
1084:FWLIB/src/stm32f4xx_rtc.c **** 
1085:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group3 Alarms configuration functions
1086:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Alarms (Alarm A and Alarm B) configuration functions 
1087:FWLIB/src/stm32f4xx_rtc.c ****  *
1088:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
1089:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
1090:FWLIB/src/stm32f4xx_rtc.c ****          ##### Alarms A and B configuration functions #####
1091:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
1092:FWLIB/src/stm32f4xx_rtc.c ****  
1093:FWLIB/src/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to program and read the RTC Alarms.
1094:FWLIB/src/stm32f4xx_rtc.c **** 
1095:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
1096:FWLIB/src/stm32f4xx_rtc.c ****   * @{
1097:FWLIB/src/stm32f4xx_rtc.c ****   */
1098:FWLIB/src/stm32f4xx_rtc.c **** 
1099:FWLIB/src/stm32f4xx_rtc.c **** /**
1100:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Set the specified RTC Alarm.
1101:FWLIB/src/stm32f4xx_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1102:FWLIB/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_AlarmCmd(DISABLE)).    
1103:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1104:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1105:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1106:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1107:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1108:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1109:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1110:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1111:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
1112:FWLIB/src/stm32f4xx_rtc.c ****   *                          contains the alarm configuration parameters.     
1113:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1114:FWLIB/src/stm32f4xx_rtc.c ****   */
1115:FWLIB/src/stm32f4xx_rtc.c **** void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
ARM GAS  /tmp/cczQSXyD.s 			page 21


1116:FWLIB/src/stm32f4xx_rtc.c **** {
1117:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1118:FWLIB/src/stm32f4xx_rtc.c ****   
1119:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1120:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1121:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1122:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
1123:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));
1124:FWLIB/src/stm32f4xx_rtc.c **** 
1125:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1126:FWLIB/src/stm32f4xx_rtc.c ****   {
1127:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
1128:FWLIB/src/stm32f4xx_rtc.c ****     {
1129:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1130:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1131:FWLIB/src/stm32f4xx_rtc.c ****     } 
1132:FWLIB/src/stm32f4xx_rtc.c ****     else
1133:FWLIB/src/stm32f4xx_rtc.c ****     {
1134:FWLIB/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
1135:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1136:FWLIB/src/stm32f4xx_rtc.c ****     }
1137:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes));
1138:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds));
1139:FWLIB/src/stm32f4xx_rtc.c ****     
1140:FWLIB/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1141:FWLIB/src/stm32f4xx_rtc.c ****     {
1142:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1143:FWLIB/src/stm32f4xx_rtc.c ****     }
1144:FWLIB/src/stm32f4xx_rtc.c ****     else
1145:FWLIB/src/stm32f4xx_rtc.c ****     {
1146:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1147:FWLIB/src/stm32f4xx_rtc.c ****     }
1148:FWLIB/src/stm32f4xx_rtc.c ****   }
1149:FWLIB/src/stm32f4xx_rtc.c ****   else
1150:FWLIB/src/stm32f4xx_rtc.c ****   {
1151:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
1152:FWLIB/src/stm32f4xx_rtc.c ****     {
1153:FWLIB/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
1154:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
1155:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1156:FWLIB/src/stm32f4xx_rtc.c ****     } 
1157:FWLIB/src/stm32f4xx_rtc.c ****     else
1158:FWLIB/src/stm32f4xx_rtc.c ****     {
1159:FWLIB/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
1160:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
1161:FWLIB/src/stm32f4xx_rtc.c ****     }
1162:FWLIB/src/stm32f4xx_rtc.c ****     
1163:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
1164:FWLIB/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
1165:FWLIB/src/stm32f4xx_rtc.c ****     
1166:FWLIB/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1167:FWLIB/src/stm32f4xx_rtc.c ****     {
1168:FWLIB/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1169:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
1170:FWLIB/src/stm32f4xx_rtc.c ****     }
1171:FWLIB/src/stm32f4xx_rtc.c ****     else
1172:FWLIB/src/stm32f4xx_rtc.c ****     {
ARM GAS  /tmp/cczQSXyD.s 			page 22


1173:FWLIB/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1174:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
1175:FWLIB/src/stm32f4xx_rtc.c ****     }    
1176:FWLIB/src/stm32f4xx_rtc.c ****   }
1177:FWLIB/src/stm32f4xx_rtc.c **** 
1178:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1179:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
1180:FWLIB/src/stm32f4xx_rtc.c ****   {
1181:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
1182:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
1183:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
1184:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
1185:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
1186:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
1187:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
1188:FWLIB/src/stm32f4xx_rtc.c ****   }  
1189:FWLIB/src/stm32f4xx_rtc.c ****   else
1190:FWLIB/src/stm32f4xx_rtc.c ****   {
1191:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
1192:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
1193:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
1194:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
1195:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
1196:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
1197:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
1198:FWLIB/src/stm32f4xx_rtc.c ****   } 
1199:FWLIB/src/stm32f4xx_rtc.c **** 
1200:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1201:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1202:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1203:FWLIB/src/stm32f4xx_rtc.c **** 
1204:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the Alarm register */
1205:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1206:FWLIB/src/stm32f4xx_rtc.c ****   {
1207:FWLIB/src/stm32f4xx_rtc.c ****     RTC->ALRMAR = (uint32_t)tmpreg;
1208:FWLIB/src/stm32f4xx_rtc.c ****   }
1209:FWLIB/src/stm32f4xx_rtc.c ****   else
1210:FWLIB/src/stm32f4xx_rtc.c ****   {
1211:FWLIB/src/stm32f4xx_rtc.c ****     RTC->ALRMBR = (uint32_t)tmpreg;
1212:FWLIB/src/stm32f4xx_rtc.c ****   }
1213:FWLIB/src/stm32f4xx_rtc.c **** 
1214:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1215:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
1216:FWLIB/src/stm32f4xx_rtc.c **** }
1217:FWLIB/src/stm32f4xx_rtc.c **** 
1218:FWLIB/src/stm32f4xx_rtc.c **** /**
1219:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_AlarmStruct member with its default value
1220:FWLIB/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00mn:00sec / Date = 1st day of the month/Mask =
1221:FWLIB/src/stm32f4xx_rtc.c ****   *         all fields are masked).
1222:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
1223:FWLIB/src/stm32f4xx_rtc.c ****   *         will be initialized.
1224:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1225:FWLIB/src/stm32f4xx_rtc.c ****   */
1226:FWLIB/src/stm32f4xx_rtc.c **** void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
1227:FWLIB/src/stm32f4xx_rtc.c **** {
1228:FWLIB/src/stm32f4xx_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
1229:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
ARM GAS  /tmp/cczQSXyD.s 			page 23


1230:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
1231:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
1232:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
1233:FWLIB/src/stm32f4xx_rtc.c **** 
1234:FWLIB/src/stm32f4xx_rtc.c ****   /* Alarm Date Settings : Date = 1st day of the month */
1235:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
1236:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
1237:FWLIB/src/stm32f4xx_rtc.c **** 
1238:FWLIB/src/stm32f4xx_rtc.c ****   /* Alarm Masks Settings : Mask =  all fields are not masked */
1239:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
1240:FWLIB/src/stm32f4xx_rtc.c **** }
1241:FWLIB/src/stm32f4xx_rtc.c **** 
1242:FWLIB/src/stm32f4xx_rtc.c **** /**
1243:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC Alarm value and masks.
1244:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1245:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1246:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1247:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1248:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1249:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1250:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1251:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1252:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
1253:FWLIB/src/stm32f4xx_rtc.c ****   *                          contains the output alarm configuration values.     
1254:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1255:FWLIB/src/stm32f4xx_rtc.c ****   */
1256:FWLIB/src/stm32f4xx_rtc.c **** void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1257:FWLIB/src/stm32f4xx_rtc.c **** {
1258:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1259:FWLIB/src/stm32f4xx_rtc.c **** 
1260:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1261:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1262:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm)); 
1263:FWLIB/src/stm32f4xx_rtc.c **** 
1264:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1265:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1266:FWLIB/src/stm32f4xx_rtc.c ****   {
1267:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMAR);
1268:FWLIB/src/stm32f4xx_rtc.c ****   }
1269:FWLIB/src/stm32f4xx_rtc.c ****   else
1270:FWLIB/src/stm32f4xx_rtc.c ****   {
1271:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMBR);
1272:FWLIB/src/stm32f4xx_rtc.c ****   }
1273:FWLIB/src/stm32f4xx_rtc.c **** 
1274:FWLIB/src/stm32f4xx_rtc.c ****   /* Fill the structure with the read parameters */
1275:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
1276:FWLIB/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
1277:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
1278:FWLIB/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
1279:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
1280:FWLIB/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_SU));
1281:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
1282:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
1283:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
1284:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
1285:FWLIB/src/stm32f4xx_rtc.c **** 
1286:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
ARM GAS  /tmp/cczQSXyD.s 			page 24


1287:FWLIB/src/stm32f4xx_rtc.c ****   {
1288:FWLIB/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1289:FWLIB/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
1290:FWLIB/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1291:FWLIB/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
1292:FWLIB/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1293:FWLIB/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
1294:FWLIB/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1295:FWLIB/src/stm32f4xx_rtc.c ****   }  
1296:FWLIB/src/stm32f4xx_rtc.c **** }
1297:FWLIB/src/stm32f4xx_rtc.c **** 
1298:FWLIB/src/stm32f4xx_rtc.c **** /**
1299:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC Alarm.
1300:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1301:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
1302:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1303:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1304:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified alarm.
1305:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1306:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1307:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Alarm is enabled/disabled
1308:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Alarm is not enabled/disabled  
1309:FWLIB/src/stm32f4xx_rtc.c ****   */
1310:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
1311:FWLIB/src/stm32f4xx_rtc.c **** {
1312:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
1313:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t alarmstatus = 0x00;
1314:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1315:FWLIB/src/stm32f4xx_rtc.c ****     
1316:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1317:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
1318:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1319:FWLIB/src/stm32f4xx_rtc.c **** 
1320:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1321:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1322:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1323:FWLIB/src/stm32f4xx_rtc.c **** 
1324:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the Alarm state */
1325:FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1326:FWLIB/src/stm32f4xx_rtc.c ****   {
1327:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
1328:FWLIB/src/stm32f4xx_rtc.c **** 
1329:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
1330:FWLIB/src/stm32f4xx_rtc.c ****   }
1331:FWLIB/src/stm32f4xx_rtc.c ****   else
1332:FWLIB/src/stm32f4xx_rtc.c ****   { 
1333:FWLIB/src/stm32f4xx_rtc.c ****     /* Disable the Alarm in RTC_CR register */
1334:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_Alarm;
1335:FWLIB/src/stm32f4xx_rtc.c ****    
1336:FWLIB/src/stm32f4xx_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1337:FWLIB/src/stm32f4xx_rtc.c ****     do
1338:FWLIB/src/stm32f4xx_rtc.c ****     {
1339:FWLIB/src/stm32f4xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
1340:FWLIB/src/stm32f4xx_rtc.c ****       alarmcounter++;  
1341:FWLIB/src/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
1342:FWLIB/src/stm32f4xx_rtc.c ****     
1343:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
ARM GAS  /tmp/cczQSXyD.s 			page 25


1344:FWLIB/src/stm32f4xx_rtc.c ****     {
1345:FWLIB/src/stm32f4xx_rtc.c ****       status = ERROR;
1346:FWLIB/src/stm32f4xx_rtc.c ****     } 
1347:FWLIB/src/stm32f4xx_rtc.c ****     else
1348:FWLIB/src/stm32f4xx_rtc.c ****     {
1349:FWLIB/src/stm32f4xx_rtc.c ****       status = SUCCESS;
1350:FWLIB/src/stm32f4xx_rtc.c ****     }        
1351:FWLIB/src/stm32f4xx_rtc.c ****   } 
1352:FWLIB/src/stm32f4xx_rtc.c **** 
1353:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1354:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1355:FWLIB/src/stm32f4xx_rtc.c ****   
1356:FWLIB/src/stm32f4xx_rtc.c ****   return status;
1357:FWLIB/src/stm32f4xx_rtc.c **** }
1358:FWLIB/src/stm32f4xx_rtc.c **** 
1359:FWLIB/src/stm32f4xx_rtc.c **** /**
1360:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configure the RTC AlarmA/B Sub seconds value and mask.*
1361:FWLIB/src/stm32f4xx_rtc.c ****   * @note   This function is performed only when the Alarm is disabled. 
1362:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1363:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1364:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1365:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1366:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondValue: specifies the Sub seconds value.
1367:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be a value from 0 to 0x00007FFF.
1368:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondMask:  specifies the Sub seconds Mask.
1369:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be any combination of the following values:
1370:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_All    : All Alarm SS fields are masked.
1371:FWLIB/src/stm32f4xx_rtc.c ****   *                                          There is no comparison on sub seconds for Alarm.
1372:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_1 : SS[14:1] are don't care in Alarm comparison.
1373:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[0] is compared
1374:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_2 : SS[14:2] are don't care in Alarm comparison.
1375:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[1:0] are compared
1376:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_3 : SS[14:3] are don't care in Alarm comparison.
1377:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[2:0] are compared
1378:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_4 : SS[14:4] are don't care in Alarm comparison.
1379:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[3:0] are compared
1380:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_5 : SS[14:5] are don't care in Alarm comparison.
1381:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[4:0] are compared
1382:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_6 : SS[14:6] are don't care in Alarm comparison.
1383:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[5:0] are compared
1384:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_7 : SS[14:7] are don't care in Alarm comparison.
1385:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[6:0] are compared
1386:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_8 : SS[14:8] are don't care in Alarm comparison.
1387:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[7:0] are compared
1388:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_9 : SS[14:9] are don't care in Alarm comparison.
1389:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[8:0] are compared
1390:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_10: SS[14:10] are don't care in Alarm comparison.
1391:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[9:0] are compared
1392:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_11: SS[14:11] are don't care in Alarm comparison.
1393:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[10:0] are compared
1394:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_12: SS[14:12] are don't care in Alarm comparison.
1395:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[11:0] are compared
1396:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_13: SS[14:13] are don't care in Alarm comparison.
1397:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[12:0] are compared
1398:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14   : SS[14] is don't care in Alarm comparison.
1399:FWLIB/src/stm32f4xx_rtc.c ****   *                                          Only SS[13:0] are compared
1400:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
ARM GAS  /tmp/cczQSXyD.s 			page 26


1401:FWLIB/src/stm32f4xx_rtc.c ****   *                                          to activate alarm
1402:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1403:FWLIB/src/stm32f4xx_rtc.c ****   */
1404:FWLIB/src/stm32f4xx_rtc.c **** void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_Al
1405:FWLIB/src/stm32f4xx_rtc.c **** {
1406:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1407:FWLIB/src/stm32f4xx_rtc.c **** 
1408:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1409:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1410:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
1411:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
1412:FWLIB/src/stm32f4xx_rtc.c ****   
1413:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1414:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1415:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1416:FWLIB/src/stm32f4xx_rtc.c ****   
1417:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the Alarm A or Alarm B Sub Second registers */
1418:FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
1419:FWLIB/src/stm32f4xx_rtc.c ****   
1420:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1421:FWLIB/src/stm32f4xx_rtc.c ****   {
1422:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Alarm A Sub Second register */
1423:FWLIB/src/stm32f4xx_rtc.c ****     RTC->ALRMASSR = tmpreg;
1424:FWLIB/src/stm32f4xx_rtc.c ****   }
1425:FWLIB/src/stm32f4xx_rtc.c ****   else
1426:FWLIB/src/stm32f4xx_rtc.c ****   {
1427:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Alarm B Sub Second register */
1428:FWLIB/src/stm32f4xx_rtc.c ****     RTC->ALRMBSSR = tmpreg;
1429:FWLIB/src/stm32f4xx_rtc.c ****   }
1430:FWLIB/src/stm32f4xx_rtc.c **** 
1431:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1432:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
1433:FWLIB/src/stm32f4xx_rtc.c **** 
1434:FWLIB/src/stm32f4xx_rtc.c **** }
1435:FWLIB/src/stm32f4xx_rtc.c **** 
1436:FWLIB/src/stm32f4xx_rtc.c **** /**
1437:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC Alarm Sub seconds value.
1438:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1439:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1440:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1441:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1442:FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
1443:FWLIB/src/stm32f4xx_rtc.c ****   * @retval RTC Alarm Sub seconds value.
1444:FWLIB/src/stm32f4xx_rtc.c ****   */
1445:FWLIB/src/stm32f4xx_rtc.c **** uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
1446:FWLIB/src/stm32f4xx_rtc.c **** {
1447:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1448:FWLIB/src/stm32f4xx_rtc.c ****   
1449:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1450:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1451:FWLIB/src/stm32f4xx_rtc.c ****   {
1452:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
1453:FWLIB/src/stm32f4xx_rtc.c ****   }
1454:FWLIB/src/stm32f4xx_rtc.c ****   else
1455:FWLIB/src/stm32f4xx_rtc.c ****   {
1456:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
1457:FWLIB/src/stm32f4xx_rtc.c ****   } 
ARM GAS  /tmp/cczQSXyD.s 			page 27


1458:FWLIB/src/stm32f4xx_rtc.c ****   
1459:FWLIB/src/stm32f4xx_rtc.c ****   return (tmpreg);
1460:FWLIB/src/stm32f4xx_rtc.c **** }
1461:FWLIB/src/stm32f4xx_rtc.c **** 
1462:FWLIB/src/stm32f4xx_rtc.c **** /**
1463:FWLIB/src/stm32f4xx_rtc.c ****   * @}
1464:FWLIB/src/stm32f4xx_rtc.c ****   */
1465:FWLIB/src/stm32f4xx_rtc.c **** 
1466:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group4 WakeUp Timer configuration functions
1467:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   WakeUp Timer configuration functions 
1468:FWLIB/src/stm32f4xx_rtc.c ****  *
1469:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
1470:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
1471:FWLIB/src/stm32f4xx_rtc.c ****                  ##### WakeUp Timer configuration functions #####
1472:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
1473:FWLIB/src/stm32f4xx_rtc.c **** 
1474:FWLIB/src/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to program and read the RTC WakeUp.
1475:FWLIB/src/stm32f4xx_rtc.c **** 
1476:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
1477:FWLIB/src/stm32f4xx_rtc.c ****   * @{
1478:FWLIB/src/stm32f4xx_rtc.c ****   */
1479:FWLIB/src/stm32f4xx_rtc.c **** 
1480:FWLIB/src/stm32f4xx_rtc.c **** /**
1481:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup clock source.
1482:FWLIB/src/stm32f4xx_rtc.c ****   * @note   The WakeUp Clock source can only be changed when the RTC WakeUp
1483:FWLIB/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).      
1484:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpClock: Wakeup Clock source.
1485:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1486:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div16: RTC Wakeup Counter Clock = RTCCLK/16
1487:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div8: RTC Wakeup Counter Clock = RTCCLK/8
1488:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div4: RTC Wakeup Counter Clock = RTCCLK/4
1489:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div2: RTC Wakeup Counter Clock = RTCCLK/2
1490:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
1491:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
1492:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1493:FWLIB/src/stm32f4xx_rtc.c ****   */
1494:FWLIB/src/stm32f4xx_rtc.c **** void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
1495:FWLIB/src/stm32f4xx_rtc.c **** {
1496:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1497:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));
1498:FWLIB/src/stm32f4xx_rtc.c **** 
1499:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1500:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1501:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1502:FWLIB/src/stm32f4xx_rtc.c **** 
1503:FWLIB/src/stm32f4xx_rtc.c ****   /* Clear the Wakeup Timer clock source bits in CR register */
1504:FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
1505:FWLIB/src/stm32f4xx_rtc.c **** 
1506:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the clock source */
1507:FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
1508:FWLIB/src/stm32f4xx_rtc.c ****   
1509:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1510:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1511:FWLIB/src/stm32f4xx_rtc.c **** }
1512:FWLIB/src/stm32f4xx_rtc.c **** 
1513:FWLIB/src/stm32f4xx_rtc.c **** /**
1514:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup counter.
ARM GAS  /tmp/cczQSXyD.s 			page 28


1515:FWLIB/src/stm32f4xx_rtc.c ****   * @note   The RTC WakeUp counter can only be written when the RTC WakeUp
1516:FWLIB/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).        
1517:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
1518:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be a value from 0x0000 to 0xFFFF. 
1519:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1520:FWLIB/src/stm32f4xx_rtc.c ****   */
1521:FWLIB/src/stm32f4xx_rtc.c **** void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
1522:FWLIB/src/stm32f4xx_rtc.c **** {
1523:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1524:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
1525:FWLIB/src/stm32f4xx_rtc.c ****   
1526:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1527:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1528:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1529:FWLIB/src/stm32f4xx_rtc.c ****   
1530:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the Wakeup Timer counter */
1531:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
1532:FWLIB/src/stm32f4xx_rtc.c ****   
1533:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1534:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1535:FWLIB/src/stm32f4xx_rtc.c **** }
1536:FWLIB/src/stm32f4xx_rtc.c **** 
1537:FWLIB/src/stm32f4xx_rtc.c **** /**
1538:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC WakeUp timer counter value.
1539:FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
1540:FWLIB/src/stm32f4xx_rtc.c ****   * @retval The RTC WakeUp Counter value.
1541:FWLIB/src/stm32f4xx_rtc.c ****   */
1542:FWLIB/src/stm32f4xx_rtc.c **** uint32_t RTC_GetWakeUpCounter(void)
1543:FWLIB/src/stm32f4xx_rtc.c **** {
1544:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the counter value */
1545:FWLIB/src/stm32f4xx_rtc.c ****   return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
1546:FWLIB/src/stm32f4xx_rtc.c **** }
1547:FWLIB/src/stm32f4xx_rtc.c **** 
1548:FWLIB/src/stm32f4xx_rtc.c **** /**
1549:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC WakeUp timer.
1550:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the WakeUp timer.
1551:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1552:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1553:FWLIB/src/stm32f4xx_rtc.c ****   */
1554:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
1555:FWLIB/src/stm32f4xx_rtc.c **** {
1556:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
1557:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
1558:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1559:FWLIB/src/stm32f4xx_rtc.c ****   
1560:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1561:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1562:FWLIB/src/stm32f4xx_rtc.c **** 
1563:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1564:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1565:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1566:FWLIB/src/stm32f4xx_rtc.c **** 
1567:FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1568:FWLIB/src/stm32f4xx_rtc.c ****   {
1569:FWLIB/src/stm32f4xx_rtc.c ****     /* Enable the Wakeup Timer */
1570:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
1571:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
ARM GAS  /tmp/cczQSXyD.s 			page 29


1572:FWLIB/src/stm32f4xx_rtc.c ****   }
1573:FWLIB/src/stm32f4xx_rtc.c ****   else
1574:FWLIB/src/stm32f4xx_rtc.c ****   {
1575:FWLIB/src/stm32f4xx_rtc.c ****     /* Disable the Wakeup Timer */
1576:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_WUTE;
1577:FWLIB/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
1578:FWLIB/src/stm32f4xx_rtc.c ****     do
1579:FWLIB/src/stm32f4xx_rtc.c ****     {
1580:FWLIB/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
1581:FWLIB/src/stm32f4xx_rtc.c ****       wutcounter++;  
1582:FWLIB/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
1583:FWLIB/src/stm32f4xx_rtc.c ****     
1584:FWLIB/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
1585:FWLIB/src/stm32f4xx_rtc.c ****     {
1586:FWLIB/src/stm32f4xx_rtc.c ****       status = ERROR;
1587:FWLIB/src/stm32f4xx_rtc.c ****     }
1588:FWLIB/src/stm32f4xx_rtc.c ****     else
1589:FWLIB/src/stm32f4xx_rtc.c ****     {
1590:FWLIB/src/stm32f4xx_rtc.c ****       status = SUCCESS;
1591:FWLIB/src/stm32f4xx_rtc.c ****     }    
1592:FWLIB/src/stm32f4xx_rtc.c ****   }
1593:FWLIB/src/stm32f4xx_rtc.c **** 
1594:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1595:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1596:FWLIB/src/stm32f4xx_rtc.c ****   
1597:FWLIB/src/stm32f4xx_rtc.c ****   return status;
1598:FWLIB/src/stm32f4xx_rtc.c **** }
1599:FWLIB/src/stm32f4xx_rtc.c **** 
1600:FWLIB/src/stm32f4xx_rtc.c **** /**
1601:FWLIB/src/stm32f4xx_rtc.c ****   * @}
1602:FWLIB/src/stm32f4xx_rtc.c ****   */
1603:FWLIB/src/stm32f4xx_rtc.c **** 
1604:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group5 Daylight Saving configuration functions
1605:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Daylight Saving configuration functions 
1606:FWLIB/src/stm32f4xx_rtc.c ****  *
1607:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
1608:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
1609:FWLIB/src/stm32f4xx_rtc.c ****               ##### Daylight Saving configuration functions #####
1610:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
1611:FWLIB/src/stm32f4xx_rtc.c **** 
1612:FWLIB/src/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to configure the RTC DayLight Saving.
1613:FWLIB/src/stm32f4xx_rtc.c **** 
1614:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
1615:FWLIB/src/stm32f4xx_rtc.c ****   * @{
1616:FWLIB/src/stm32f4xx_rtc.c ****   */
1617:FWLIB/src/stm32f4xx_rtc.c **** 
1618:FWLIB/src/stm32f4xx_rtc.c **** /**
1619:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Adds or substract one hour from the current time.
1620:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_DayLightSaveOperation: the value of hour adjustment. 
1621:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1622:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_SUB1H: Substract one hour (winter time)
1623:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_ADD1H: Add one hour (summer time)
1624:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_StoreOperation: Specifies the value to be written in the BCK bit 
1625:FWLIB/src/stm32f4xx_rtc.c ****   *                            in CR register to store the operation.
1626:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1627:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
1628:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Set: BCK Bit Set
ARM GAS  /tmp/cczQSXyD.s 			page 30


1629:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1630:FWLIB/src/stm32f4xx_rtc.c ****   */
1631:FWLIB/src/stm32f4xx_rtc.c **** void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
1632:FWLIB/src/stm32f4xx_rtc.c **** {
1633:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1634:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
1635:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));
1636:FWLIB/src/stm32f4xx_rtc.c **** 
1637:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1638:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1639:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1640:FWLIB/src/stm32f4xx_rtc.c **** 
1641:FWLIB/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1642:FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_BCK);
1643:FWLIB/src/stm32f4xx_rtc.c **** 
1644:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1645:FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
1646:FWLIB/src/stm32f4xx_rtc.c **** 
1647:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1648:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1649:FWLIB/src/stm32f4xx_rtc.c **** }
1650:FWLIB/src/stm32f4xx_rtc.c **** 
1651:FWLIB/src/stm32f4xx_rtc.c **** /**
1652:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC Day Light Saving stored operation.
1653:FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
1654:FWLIB/src/stm32f4xx_rtc.c ****   * @retval RTC Day Light Saving stored operation.
1655:FWLIB/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Reset
1656:FWLIB/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Set       
1657:FWLIB/src/stm32f4xx_rtc.c ****   */
1658:FWLIB/src/stm32f4xx_rtc.c **** uint32_t RTC_GetStoreOperation(void)
1659:FWLIB/src/stm32f4xx_rtc.c **** {
1660:FWLIB/src/stm32f4xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
1661:FWLIB/src/stm32f4xx_rtc.c **** }
1662:FWLIB/src/stm32f4xx_rtc.c **** 
1663:FWLIB/src/stm32f4xx_rtc.c **** /**
1664:FWLIB/src/stm32f4xx_rtc.c ****   * @}
1665:FWLIB/src/stm32f4xx_rtc.c ****   */
1666:FWLIB/src/stm32f4xx_rtc.c **** 
1667:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group6 Output pin Configuration function
1668:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Output pin Configuration function 
1669:FWLIB/src/stm32f4xx_rtc.c ****  *
1670:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
1671:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
1672:FWLIB/src/stm32f4xx_rtc.c ****                  ##### Output pin Configuration function #####
1673:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
1674:FWLIB/src/stm32f4xx_rtc.c **** 
1675:FWLIB/src/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to configure the RTC Output source.
1676:FWLIB/src/stm32f4xx_rtc.c **** 
1677:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
1678:FWLIB/src/stm32f4xx_rtc.c ****   * @{
1679:FWLIB/src/stm32f4xx_rtc.c ****   */
1680:FWLIB/src/stm32f4xx_rtc.c **** 
1681:FWLIB/src/stm32f4xx_rtc.c **** /**
1682:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC output source (AFO_ALARM).
1683:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Output: Specifies which signal will be routed to the RTC output. 
1684:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1685:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_Disable: No output selected
ARM GAS  /tmp/cczQSXyD.s 			page 31


1686:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmA: signal of AlarmA mapped to output
1687:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmB: signal of AlarmB mapped to output
1688:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_WakeUp: signal of WakeUp mapped to output
1689:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputPolarity: Specifies the polarity of the output signal. 
1690:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1691:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_High: The output pin is high when the 
1692:FWLIB/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1693:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
1694:FWLIB/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1695:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1696:FWLIB/src/stm32f4xx_rtc.c ****   */
1697:FWLIB/src/stm32f4xx_rtc.c **** void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
1698:FWLIB/src/stm32f4xx_rtc.c **** {
1699:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1700:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT(RTC_Output));
1701:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));
1702:FWLIB/src/stm32f4xx_rtc.c **** 
1703:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1704:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1705:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1706:FWLIB/src/stm32f4xx_rtc.c **** 
1707:FWLIB/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1708:FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
1709:FWLIB/src/stm32f4xx_rtc.c **** 
1710:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the output selection and polarity */
1711:FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
1712:FWLIB/src/stm32f4xx_rtc.c **** 
1713:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1714:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1715:FWLIB/src/stm32f4xx_rtc.c **** }
1716:FWLIB/src/stm32f4xx_rtc.c **** 
1717:FWLIB/src/stm32f4xx_rtc.c **** /**
1718:FWLIB/src/stm32f4xx_rtc.c ****   * @}
1719:FWLIB/src/stm32f4xx_rtc.c ****   */
1720:FWLIB/src/stm32f4xx_rtc.c **** 
1721:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group7 Digital Calibration configuration functions
1722:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Coarse Calibration configuration functions 
1723:FWLIB/src/stm32f4xx_rtc.c ****  *
1724:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
1725:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
1726:FWLIB/src/stm32f4xx_rtc.c ****               ##### Digital Calibration configuration functions #####
1727:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
1728:FWLIB/src/stm32f4xx_rtc.c **** 
1729:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
1730:FWLIB/src/stm32f4xx_rtc.c ****   * @{
1731:FWLIB/src/stm32f4xx_rtc.c ****   */
1732:FWLIB/src/stm32f4xx_rtc.c **** 
1733:FWLIB/src/stm32f4xx_rtc.c **** /**
1734:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the Coarse calibration parameters.
1735:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibSign: specifies the sign of the coarse calibration value.
1736:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
1737:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Positive: The value sign is positive 
1738:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Negative: The value sign is negative
1739:FWLIB/src/stm32f4xx_rtc.c ****   * @param  Value: value of coarse calibration expressed in ppm (coded on 5 bits).
1740:FWLIB/src/stm32f4xx_rtc.c ****   *    
1741:FWLIB/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 63 when using negative
1742:FWLIB/src/stm32f4xx_rtc.c ****   *         sign with a 2-ppm step.
ARM GAS  /tmp/cczQSXyD.s 			page 32


1743:FWLIB/src/stm32f4xx_rtc.c ****   *           
1744:FWLIB/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 126 when using positive
1745:FWLIB/src/stm32f4xx_rtc.c ****   *         sign with a 4-ppm step.
1746:FWLIB/src/stm32f4xx_rtc.c ****   *           
1747:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1748:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are initialized
1749:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not initialized     
1750:FWLIB/src/stm32f4xx_rtc.c ****   */
1751:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
1752:FWLIB/src/stm32f4xx_rtc.c **** {
1753:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1754:FWLIB/src/stm32f4xx_rtc.c ****    
1755:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1756:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
1757:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_VALUE(Value)); 
1758:FWLIB/src/stm32f4xx_rtc.c **** 
1759:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1760:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1761:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1762:FWLIB/src/stm32f4xx_rtc.c **** 
1763:FWLIB/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1764:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
1765:FWLIB/src/stm32f4xx_rtc.c ****   {
1766:FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
1767:FWLIB/src/stm32f4xx_rtc.c ****   } 
1768:FWLIB/src/stm32f4xx_rtc.c ****   else
1769:FWLIB/src/stm32f4xx_rtc.c ****   {
1770:FWLIB/src/stm32f4xx_rtc.c ****     /* Set the coarse calibration value */
1771:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
1772:FWLIB/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1773:FWLIB/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
1774:FWLIB/src/stm32f4xx_rtc.c ****     
1775:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;
1776:FWLIB/src/stm32f4xx_rtc.c ****   } 
1777:FWLIB/src/stm32f4xx_rtc.c **** 
1778:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1779:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1780:FWLIB/src/stm32f4xx_rtc.c ****   
1781:FWLIB/src/stm32f4xx_rtc.c ****   return status;
1782:FWLIB/src/stm32f4xx_rtc.c **** }
1783:FWLIB/src/stm32f4xx_rtc.c **** 
1784:FWLIB/src/stm32f4xx_rtc.c **** /**
1785:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the Coarse calibration process.
1786:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Coarse calibration.
1787:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1788:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1789:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are enabled/disabled
1790:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not enabled/disabled    
1791:FWLIB/src/stm32f4xx_rtc.c ****   */
1792:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
1793:FWLIB/src/stm32f4xx_rtc.c **** {
1794:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1795:FWLIB/src/stm32f4xx_rtc.c ****   
1796:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1797:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1798:FWLIB/src/stm32f4xx_rtc.c **** 
1799:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
ARM GAS  /tmp/cczQSXyD.s 			page 33


1800:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1801:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1802:FWLIB/src/stm32f4xx_rtc.c ****   
1803:FWLIB/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1804:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
1805:FWLIB/src/stm32f4xx_rtc.c ****   {
1806:FWLIB/src/stm32f4xx_rtc.c ****     status =  ERROR;
1807:FWLIB/src/stm32f4xx_rtc.c ****   }
1808:FWLIB/src/stm32f4xx_rtc.c ****   else
1809:FWLIB/src/stm32f4xx_rtc.c ****   {
1810:FWLIB/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
1811:FWLIB/src/stm32f4xx_rtc.c ****     {
1812:FWLIB/src/stm32f4xx_rtc.c ****       /* Enable the Coarse Calibration */
1813:FWLIB/src/stm32f4xx_rtc.c ****       RTC->CR |= (uint32_t)RTC_CR_DCE;
1814:FWLIB/src/stm32f4xx_rtc.c ****     }
1815:FWLIB/src/stm32f4xx_rtc.c ****     else
1816:FWLIB/src/stm32f4xx_rtc.c ****     { 
1817:FWLIB/src/stm32f4xx_rtc.c ****       /* Disable the Coarse Calibration */
1818:FWLIB/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)~RTC_CR_DCE;
1819:FWLIB/src/stm32f4xx_rtc.c ****     }
1820:FWLIB/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1821:FWLIB/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
1822:FWLIB/src/stm32f4xx_rtc.c ****     
1823:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;
1824:FWLIB/src/stm32f4xx_rtc.c ****   } 
1825:FWLIB/src/stm32f4xx_rtc.c ****   
1826:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1827:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1828:FWLIB/src/stm32f4xx_rtc.c ****   
1829:FWLIB/src/stm32f4xx_rtc.c ****   return status;
1830:FWLIB/src/stm32f4xx_rtc.c **** }
1831:FWLIB/src/stm32f4xx_rtc.c **** 
1832:FWLIB/src/stm32f4xx_rtc.c **** /**
1833:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC clock to be output through the relative pin.
1834:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the digital calibration Output.
1835:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1836:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1837:FWLIB/src/stm32f4xx_rtc.c ****   */
1838:FWLIB/src/stm32f4xx_rtc.c **** void RTC_CalibOutputCmd(FunctionalState NewState)
1839:FWLIB/src/stm32f4xx_rtc.c **** {
1840:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1841:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1842:FWLIB/src/stm32f4xx_rtc.c ****   
1843:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1844:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1845:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1846:FWLIB/src/stm32f4xx_rtc.c ****   
1847:FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1848:FWLIB/src/stm32f4xx_rtc.c ****   {
1849:FWLIB/src/stm32f4xx_rtc.c ****     /* Enable the RTC clock output */
1850:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
1851:FWLIB/src/stm32f4xx_rtc.c ****   }
1852:FWLIB/src/stm32f4xx_rtc.c ****   else
1853:FWLIB/src/stm32f4xx_rtc.c ****   { 
1854:FWLIB/src/stm32f4xx_rtc.c ****     /* Disable the RTC clock output */
1855:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_COE;
1856:FWLIB/src/stm32f4xx_rtc.c ****   }
ARM GAS  /tmp/cczQSXyD.s 			page 34


1857:FWLIB/src/stm32f4xx_rtc.c ****   
1858:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1859:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1860:FWLIB/src/stm32f4xx_rtc.c **** }
1861:FWLIB/src/stm32f4xx_rtc.c **** 
1862:FWLIB/src/stm32f4xx_rtc.c **** /**
1863:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configure the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
1864:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibOutput : Select the Calibration output Selection .
1865:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1866:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
1867:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
1868:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1869:FWLIB/src/stm32f4xx_rtc.c **** */
1870:FWLIB/src/stm32f4xx_rtc.c **** void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
1871:FWLIB/src/stm32f4xx_rtc.c **** {
1872:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1873:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));
1874:FWLIB/src/stm32f4xx_rtc.c **** 
1875:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1876:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1877:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1878:FWLIB/src/stm32f4xx_rtc.c ****   
1879:FWLIB/src/stm32f4xx_rtc.c ****   /*clear flags before configuration */
1880:FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
1881:FWLIB/src/stm32f4xx_rtc.c **** 
1882:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1883:FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_CalibOutput;
1884:FWLIB/src/stm32f4xx_rtc.c **** 
1885:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1886:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
1887:FWLIB/src/stm32f4xx_rtc.c **** }
1888:FWLIB/src/stm32f4xx_rtc.c **** 
1889:FWLIB/src/stm32f4xx_rtc.c **** /**
1890:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the Smooth Calibration Settings.
1891:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPeriod : Select the Smooth Calibration Period.
1892:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be can be one of the following values:
1893:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_32sec : The smooth calibration period is 32s.
1894:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_16sec : The smooth calibration period is 16s.
1895:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_8sec  : The smooth calibration period is 8s.
1896:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPlusPulses : Select to Set or reset the CALP bit.
1897:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1898:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Set  : Add one RTCCLK pulse every 2**11 pulses.
1899:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Reset: No RTCCLK pulses are added.
1900:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_SmouthCalibMinusPulsesValue: Select the value of CALM[8:0] bits.
1901:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one any value from 0 to 0x000001FF.
1902:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1903:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Calib registers are configured
1904:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Calib registers are not configured
1905:FWLIB/src/stm32f4xx_rtc.c **** */
1906:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
1907:FWLIB/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmoothCalibPlusPulses,
1908:FWLIB/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmouthCalibMinusPulsesValue)
1909:FWLIB/src/stm32f4xx_rtc.c **** {
1910:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1911:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t recalpfcount = 0;
1912:FWLIB/src/stm32f4xx_rtc.c **** 
1913:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
ARM GAS  /tmp/cczQSXyD.s 			page 35


1914:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
1915:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
1916:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));
1917:FWLIB/src/stm32f4xx_rtc.c **** 
1918:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1919:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1920:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1921:FWLIB/src/stm32f4xx_rtc.c ****   
1922:FWLIB/src/stm32f4xx_rtc.c ****   /* check if a calibration is pending*/
1923:FWLIB/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
1924:FWLIB/src/stm32f4xx_rtc.c ****   {
1925:FWLIB/src/stm32f4xx_rtc.c ****     /* wait until the Calibration is completed*/
1926:FWLIB/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
1927:FWLIB/src/stm32f4xx_rtc.c ****     {
1928:FWLIB/src/stm32f4xx_rtc.c ****       recalpfcount++;
1929:FWLIB/src/stm32f4xx_rtc.c ****     }
1930:FWLIB/src/stm32f4xx_rtc.c ****   }
1931:FWLIB/src/stm32f4xx_rtc.c **** 
1932:FWLIB/src/stm32f4xx_rtc.c ****   /* check if the calibration pending is completed or if there is no calibration operation at all*/
1933:FWLIB/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
1934:FWLIB/src/stm32f4xx_rtc.c ****   {
1935:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Smooth calibration settings */
1936:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | 
1937:FWLIB/src/stm32f4xx_rtc.c **** 
1938:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;
1939:FWLIB/src/stm32f4xx_rtc.c ****   }
1940:FWLIB/src/stm32f4xx_rtc.c ****   else
1941:FWLIB/src/stm32f4xx_rtc.c ****   {
1942:FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
1943:FWLIB/src/stm32f4xx_rtc.c ****   }
1944:FWLIB/src/stm32f4xx_rtc.c **** 
1945:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1946:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
1947:FWLIB/src/stm32f4xx_rtc.c ****   
1948:FWLIB/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
1949:FWLIB/src/stm32f4xx_rtc.c **** }
1950:FWLIB/src/stm32f4xx_rtc.c **** 
1951:FWLIB/src/stm32f4xx_rtc.c **** /**
1952:FWLIB/src/stm32f4xx_rtc.c ****   * @}
1953:FWLIB/src/stm32f4xx_rtc.c ****   */
1954:FWLIB/src/stm32f4xx_rtc.c **** 
1955:FWLIB/src/stm32f4xx_rtc.c **** 
1956:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group8 TimeStamp configuration functions
1957:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   TimeStamp configuration functions 
1958:FWLIB/src/stm32f4xx_rtc.c ****  *
1959:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
1960:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
1961:FWLIB/src/stm32f4xx_rtc.c ****                  ##### TimeStamp configuration functions #####
1962:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
1963:FWLIB/src/stm32f4xx_rtc.c **** 
1964:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
1965:FWLIB/src/stm32f4xx_rtc.c ****   * @{
1966:FWLIB/src/stm32f4xx_rtc.c ****   */
1967:FWLIB/src/stm32f4xx_rtc.c **** 
1968:FWLIB/src/stm32f4xx_rtc.c **** /**
1969:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC TimeStamp functionality with the 
1970:FWLIB/src/stm32f4xx_rtc.c ****   *         specified time stamp pin stimulating edge.
ARM GAS  /tmp/cczQSXyD.s 			page 36


1971:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampEdge: Specifies the pin edge on which the TimeStamp is 
1972:FWLIB/src/stm32f4xx_rtc.c ****   *         activated.
1973:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1974:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Rising: the Time stamp event occurs on the rising 
1975:FWLIB/src/stm32f4xx_rtc.c ****   *                                    edge of the related pin.
1976:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Falling: the Time stamp event occurs on the 
1977:FWLIB/src/stm32f4xx_rtc.c ****   *                                     falling edge of the related pin.
1978:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the TimeStamp.
1979:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1980:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
1981:FWLIB/src/stm32f4xx_rtc.c ****   */
1982:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
1983:FWLIB/src/stm32f4xx_rtc.c **** {
1984:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1985:FWLIB/src/stm32f4xx_rtc.c **** 
1986:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1987:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
1988:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1989:FWLIB/src/stm32f4xx_rtc.c **** 
1990:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the RTC_CR register and clear the bits to be configured */
1991:FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
1992:FWLIB/src/stm32f4xx_rtc.c **** 
1993:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the new configuration */
1994:FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1995:FWLIB/src/stm32f4xx_rtc.c ****   {
1996:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
1997:FWLIB/src/stm32f4xx_rtc.c ****   }
1998:FWLIB/src/stm32f4xx_rtc.c ****   else
1999:FWLIB/src/stm32f4xx_rtc.c ****   {
2000:FWLIB/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge);
2001:FWLIB/src/stm32f4xx_rtc.c ****   }
2002:FWLIB/src/stm32f4xx_rtc.c **** 
2003:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2004:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
2005:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
2006:FWLIB/src/stm32f4xx_rtc.c **** 
2007:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the Time Stamp TSEDGE and Enable bits */
2008:FWLIB/src/stm32f4xx_rtc.c ****   RTC->CR = (uint32_t)tmpreg;
2009:FWLIB/src/stm32f4xx_rtc.c **** 
2010:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2011:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
2012:FWLIB/src/stm32f4xx_rtc.c **** }
2013:FWLIB/src/stm32f4xx_rtc.c **** 
2014:FWLIB/src/stm32f4xx_rtc.c **** /**
2015:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC TimeStamp value and masks.
2016:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
2017:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2018:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
2019:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
2020:FWLIB/src/stm32f4xx_rtc.c ****   * @param RTC_StampTimeStruct: pointer to a RTC_TimeTypeDef structure that will 
2021:FWLIB/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp time values. 
2022:FWLIB/src/stm32f4xx_rtc.c ****   * @param RTC_StampDateStruct: pointer to a RTC_DateTypeDef structure that will 
2023:FWLIB/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp date values.     
2024:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2025:FWLIB/src/stm32f4xx_rtc.c ****   */
2026:FWLIB/src/stm32f4xx_rtc.c **** void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
2027:FWLIB/src/stm32f4xx_rtc.c ****                                       RTC_DateTypeDef* RTC_StampDateStruct)
ARM GAS  /tmp/cczQSXyD.s 			page 37


2028:FWLIB/src/stm32f4xx_rtc.c **** {
2029:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
2030:FWLIB/src/stm32f4xx_rtc.c **** 
2031:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2032:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
2033:FWLIB/src/stm32f4xx_rtc.c **** 
2034:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the TimeStamp time and date registers values */
2035:FWLIB/src/stm32f4xx_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
2036:FWLIB/src/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
2037:FWLIB/src/stm32f4xx_rtc.c **** 
2038:FWLIB/src/stm32f4xx_rtc.c ****   /* Fill the Time structure fields with the read parameters */
2039:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
2040:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
2041:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
2042:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
2043:FWLIB/src/stm32f4xx_rtc.c **** 
2044:FWLIB/src/stm32f4xx_rtc.c ****   /* Fill the Date structure fields with the read parameters */
2045:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
2046:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
2047:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
2048:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
2049:FWLIB/src/stm32f4xx_rtc.c **** 
2050:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
2051:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
2052:FWLIB/src/stm32f4xx_rtc.c ****   {
2053:FWLIB/src/stm32f4xx_rtc.c ****     /* Convert the Time structure parameters to Binary format */
2054:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
2055:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
2056:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
2057:FWLIB/src/stm32f4xx_rtc.c **** 
2058:FWLIB/src/stm32f4xx_rtc.c ****     /* Convert the Date structure parameters to Binary format */
2059:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
2060:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
2061:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
2062:FWLIB/src/stm32f4xx_rtc.c ****   }
2063:FWLIB/src/stm32f4xx_rtc.c **** }
2064:FWLIB/src/stm32f4xx_rtc.c **** 
2065:FWLIB/src/stm32f4xx_rtc.c **** /**
2066:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC timestamp Sub seconds value.
2067:FWLIB/src/stm32f4xx_rtc.c ****   * @param  None
2068:FWLIB/src/stm32f4xx_rtc.c ****   * @retval RTC current timestamp Sub seconds value.
2069:FWLIB/src/stm32f4xx_rtc.c ****   */
2070:FWLIB/src/stm32f4xx_rtc.c **** uint32_t RTC_GetTimeStampSubSecond(void)
2071:FWLIB/src/stm32f4xx_rtc.c **** {
2072:FWLIB/src/stm32f4xx_rtc.c ****   /* Get timestamp sub seconds values from the correspondent registers */
2073:FWLIB/src/stm32f4xx_rtc.c ****   return (uint32_t)(RTC->TSSSR);
2074:FWLIB/src/stm32f4xx_rtc.c **** }
2075:FWLIB/src/stm32f4xx_rtc.c **** 
2076:FWLIB/src/stm32f4xx_rtc.c **** /**
2077:FWLIB/src/stm32f4xx_rtc.c ****   * @}
2078:FWLIB/src/stm32f4xx_rtc.c ****   */
2079:FWLIB/src/stm32f4xx_rtc.c **** 
2080:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group9 Tampers configuration functions
2081:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Tampers configuration functions 
2082:FWLIB/src/stm32f4xx_rtc.c ****  *
2083:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
2084:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
ARM GAS  /tmp/cczQSXyD.s 			page 38


2085:FWLIB/src/stm32f4xx_rtc.c ****                  ##### Tampers configuration functions #####
2086:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
2087:FWLIB/src/stm32f4xx_rtc.c **** 
2088:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
2089:FWLIB/src/stm32f4xx_rtc.c ****   * @{
2090:FWLIB/src/stm32f4xx_rtc.c ****   */
2091:FWLIB/src/stm32f4xx_rtc.c **** 
2092:FWLIB/src/stm32f4xx_rtc.c **** /**
2093:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the select Tamper pin edge.
2094:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2095:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1 or RTC_Tamper 2
2096:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperTrigger: Specifies the trigger on the tamper pin that 
2097:FWLIB/src/stm32f4xx_rtc.c ****   *         stimulates tamper event. 
2098:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2099:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_RisingEdge: Rising Edge of the tamper pin causes tamper event.
2100:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_FallingEdge: Falling Edge of the tamper pin causes tamper event.
2101:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
2102:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
2103:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2104:FWLIB/src/stm32f4xx_rtc.c ****   */
2105:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
2106:FWLIB/src/stm32f4xx_rtc.c **** {
2107:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2108:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
2109:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
2110:FWLIB/src/stm32f4xx_rtc.c ****  
2111:FWLIB/src/stm32f4xx_rtc.c ****   if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
2112:FWLIB/src/stm32f4xx_rtc.c ****   {  
2113:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2114:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
2115:FWLIB/src/stm32f4xx_rtc.c ****   }
2116:FWLIB/src/stm32f4xx_rtc.c ****   else
2117:FWLIB/src/stm32f4xx_rtc.c ****   { 
2118:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2119:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
2120:FWLIB/src/stm32f4xx_rtc.c ****   }  
2121:FWLIB/src/stm32f4xx_rtc.c **** }
2122:FWLIB/src/stm32f4xx_rtc.c **** 
2123:FWLIB/src/stm32f4xx_rtc.c **** /**
2124:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Tamper detection.
2125:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2126:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1 or RTC_Tamper_2
2127:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the tamper pin.
2128:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.                   
2129:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2130:FWLIB/src/stm32f4xx_rtc.c ****   */
2131:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
2132:FWLIB/src/stm32f4xx_rtc.c **** {
2133:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2134:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper));  
2135:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2136:FWLIB/src/stm32f4xx_rtc.c ****   
2137:FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
2138:FWLIB/src/stm32f4xx_rtc.c ****   {
2139:FWLIB/src/stm32f4xx_rtc.c ****     /* Enable the selected Tamper pin */
2140:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
2141:FWLIB/src/stm32f4xx_rtc.c ****   }
ARM GAS  /tmp/cczQSXyD.s 			page 39


2142:FWLIB/src/stm32f4xx_rtc.c ****   else
2143:FWLIB/src/stm32f4xx_rtc.c ****   {
2144:FWLIB/src/stm32f4xx_rtc.c ****     /* Disable the selected Tamper pin */
2145:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
2146:FWLIB/src/stm32f4xx_rtc.c ****   }  
2147:FWLIB/src/stm32f4xx_rtc.c **** }
2148:FWLIB/src/stm32f4xx_rtc.c **** 
2149:FWLIB/src/stm32f4xx_rtc.c **** /**
2150:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Filter.
2151:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperFilter: Specifies the tampers filter.
2152:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2153:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_Disable: Tamper filter is disabled.
2154:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_2Sample: Tamper is activated after 2 consecutive 
2155:FWLIB/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2156:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_4Sample: Tamper is activated after 4 consecutive 
2157:FWLIB/src/stm32f4xx_rtc.c ****   *                                    samples at the active level
2158:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
2159:FWLIB/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2160:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2161:FWLIB/src/stm32f4xx_rtc.c ****   */
2162:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
2163:FWLIB/src/stm32f4xx_rtc.c **** {
2164:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2165:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
2166:FWLIB/src/stm32f4xx_rtc.c ****    
2167:FWLIB/src/stm32f4xx_rtc.c ****   /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
2168:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
2169:FWLIB/src/stm32f4xx_rtc.c **** 
2170:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2171:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
2172:FWLIB/src/stm32f4xx_rtc.c **** }
2173:FWLIB/src/stm32f4xx_rtc.c **** 
2174:FWLIB/src/stm32f4xx_rtc.c **** /**
2175:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Sampling Frequency.
2176:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperSamplingFreq: Specifies the tampers Sampling Frequency.
2177:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2178:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div32768: Each of the tamper inputs are sampled
2179:FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 32768
2180:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div16384: Each of the tamper inputs are sampled
2181:FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 16384
2182:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div8192: Each of the tamper inputs are sampled
2183:FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 8192
2184:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div4096: Each of the tamper inputs are sampled
2185:FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 4096
2186:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div2048: Each of the tamper inputs are sampled
2187:FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 2048
2188:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div1024: Each of the tamper inputs are sampled
2189:FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 1024
2190:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div512: Each of the tamper inputs are sampled
2191:FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 512  
2192:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
2193:FWLIB/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 256  
2194:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2195:FWLIB/src/stm32f4xx_rtc.c ****   */
2196:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
2197:FWLIB/src/stm32f4xx_rtc.c **** {
2198:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
ARM GAS  /tmp/cczQSXyD.s 			page 40


2199:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
2200:FWLIB/src/stm32f4xx_rtc.c ****  
2201:FWLIB/src/stm32f4xx_rtc.c ****   /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
2202:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
2203:FWLIB/src/stm32f4xx_rtc.c **** 
2204:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2205:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
2206:FWLIB/src/stm32f4xx_rtc.c **** }
2207:FWLIB/src/stm32f4xx_rtc.c **** 
2208:FWLIB/src/stm32f4xx_rtc.c **** /**
2209:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Pins input Precharge Duration.
2210:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPrechargeDuration: Specifies the Tampers Pins input
2211:FWLIB/src/stm32f4xx_rtc.c ****   *         Precharge Duration.
2212:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2213:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_1RTCCLK: Tamper pins are precharged before sampling during
2214:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_2RTCCLK: Tamper pins are precharged before sampling during
2215:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are precharged before sampling during
2216:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are precharged before sampling during
2217:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2218:FWLIB/src/stm32f4xx_rtc.c ****   */
2219:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
2220:FWLIB/src/stm32f4xx_rtc.c **** {
2221:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2222:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
2223:FWLIB/src/stm32f4xx_rtc.c ****    
2224:FWLIB/src/stm32f4xx_rtc.c ****   /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
2225:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
2226:FWLIB/src/stm32f4xx_rtc.c **** 
2227:FWLIB/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2228:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
2229:FWLIB/src/stm32f4xx_rtc.c **** }
2230:FWLIB/src/stm32f4xx_rtc.c **** 
2231:FWLIB/src/stm32f4xx_rtc.c **** /**
2232:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the TimeStamp on Tamper Detection Event.
2233:FWLIB/src/stm32f4xx_rtc.c ****   * @note   The timestamp is valid even the TSE bit in tamper control register 
2234:FWLIB/src/stm32f4xx_rtc.c ****   *         is reset.   
2235:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the timestamp on tamper event.
2236:FWLIB/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
2237:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2238:FWLIB/src/stm32f4xx_rtc.c ****   */
2239:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
2240:FWLIB/src/stm32f4xx_rtc.c **** {
2241:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2242:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2243:FWLIB/src/stm32f4xx_rtc.c ****    
2244:FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
2245:FWLIB/src/stm32f4xx_rtc.c ****   {
2246:FWLIB/src/stm32f4xx_rtc.c ****     /* Save timestamp on tamper detection event */
2247:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
2248:FWLIB/src/stm32f4xx_rtc.c ****   }
2249:FWLIB/src/stm32f4xx_rtc.c ****   else
2250:FWLIB/src/stm32f4xx_rtc.c ****   {
2251:FWLIB/src/stm32f4xx_rtc.c ****     /* Tamper detection does not cause a timestamp to be saved */
2252:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
2253:FWLIB/src/stm32f4xx_rtc.c ****   }
2254:FWLIB/src/stm32f4xx_rtc.c **** }
2255:FWLIB/src/stm32f4xx_rtc.c **** 
ARM GAS  /tmp/cczQSXyD.s 			page 41


2256:FWLIB/src/stm32f4xx_rtc.c **** /**
2257:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Precharge of Tamper pin.
2258:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of tamper pull up.
2259:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be: ENABLE or DISABLE.                   
2260:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2261:FWLIB/src/stm32f4xx_rtc.c ****   */
2262:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TamperPullUpCmd(FunctionalState NewState)
2263:FWLIB/src/stm32f4xx_rtc.c **** {
2264:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2265:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2266:FWLIB/src/stm32f4xx_rtc.c ****   
2267:FWLIB/src/stm32f4xx_rtc.c ****  if (NewState != DISABLE)
2268:FWLIB/src/stm32f4xx_rtc.c ****   {
2269:FWLIB/src/stm32f4xx_rtc.c ****     /* Enable precharge of the selected Tamper pin */
2270:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
2271:FWLIB/src/stm32f4xx_rtc.c ****   }
2272:FWLIB/src/stm32f4xx_rtc.c ****   else
2273:FWLIB/src/stm32f4xx_rtc.c ****   {
2274:FWLIB/src/stm32f4xx_rtc.c ****     /* Disable precharge of the selected Tamper pin */
2275:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
2276:FWLIB/src/stm32f4xx_rtc.c ****   } 
2277:FWLIB/src/stm32f4xx_rtc.c **** }
2278:FWLIB/src/stm32f4xx_rtc.c **** 
2279:FWLIB/src/stm32f4xx_rtc.c **** /**
2280:FWLIB/src/stm32f4xx_rtc.c ****   * @}
2281:FWLIB/src/stm32f4xx_rtc.c ****   */
2282:FWLIB/src/stm32f4xx_rtc.c **** 
2283:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group10 Backup Data Registers configuration functions
2284:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Backup Data Registers configuration functions  
2285:FWLIB/src/stm32f4xx_rtc.c ****  *
2286:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
2287:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
2288:FWLIB/src/stm32f4xx_rtc.c ****              ##### Backup Data Registers configuration functions ##### 
2289:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
2290:FWLIB/src/stm32f4xx_rtc.c **** 
2291:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
2292:FWLIB/src/stm32f4xx_rtc.c ****   * @{
2293:FWLIB/src/stm32f4xx_rtc.c ****   */
2294:FWLIB/src/stm32f4xx_rtc.c **** 
2295:FWLIB/src/stm32f4xx_rtc.c **** /**
2296:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Writes a data in a specified RTC Backup data register.
2297:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2298:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2299:FWLIB/src/stm32f4xx_rtc.c ****   *                          specify the register.
2300:FWLIB/src/stm32f4xx_rtc.c ****   * @param  Data: Data to be written in the specified RTC Backup data register.                    
2301:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2302:FWLIB/src/stm32f4xx_rtc.c ****   */
2303:FWLIB/src/stm32f4xx_rtc.c **** void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
2304:FWLIB/src/stm32f4xx_rtc.c **** {
2305:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
2306:FWLIB/src/stm32f4xx_rtc.c ****   
2307:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2308:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2309:FWLIB/src/stm32f4xx_rtc.c **** 
2310:FWLIB/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
2311:FWLIB/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
2312:FWLIB/src/stm32f4xx_rtc.c **** 
ARM GAS  /tmp/cczQSXyD.s 			page 42


2313:FWLIB/src/stm32f4xx_rtc.c ****   /* Write the specified register */
2314:FWLIB/src/stm32f4xx_rtc.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
2315:FWLIB/src/stm32f4xx_rtc.c **** }
2316:FWLIB/src/stm32f4xx_rtc.c **** 
2317:FWLIB/src/stm32f4xx_rtc.c **** /**
2318:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Reads data from the specified RTC Backup data Register.
2319:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2320:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2321:FWLIB/src/stm32f4xx_rtc.c ****   *                          specify the register.                   
2322:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2323:FWLIB/src/stm32f4xx_rtc.c ****   */
2324:FWLIB/src/stm32f4xx_rtc.c **** uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
2325:FWLIB/src/stm32f4xx_rtc.c **** {
2326:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
2327:FWLIB/src/stm32f4xx_rtc.c ****   
2328:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2329:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2330:FWLIB/src/stm32f4xx_rtc.c **** 
2331:FWLIB/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
2332:FWLIB/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
2333:FWLIB/src/stm32f4xx_rtc.c ****   
2334:FWLIB/src/stm32f4xx_rtc.c ****   /* Read the specified register */
2335:FWLIB/src/stm32f4xx_rtc.c ****   return (*(__IO uint32_t *)tmp);
2336:FWLIB/src/stm32f4xx_rtc.c **** }
2337:FWLIB/src/stm32f4xx_rtc.c **** 
2338:FWLIB/src/stm32f4xx_rtc.c **** /**
2339:FWLIB/src/stm32f4xx_rtc.c ****   * @}
2340:FWLIB/src/stm32f4xx_rtc.c ****   */
2341:FWLIB/src/stm32f4xx_rtc.c **** 
2342:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group11 RTC Tamper and TimeStamp Pins Selection and Output Type Config configurat
2343:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   RTC Tamper and TimeStamp Pins Selection and Output Type Config 
2344:FWLIB/src/stm32f4xx_rtc.c ****  *           configuration functions  
2345:FWLIB/src/stm32f4xx_rtc.c ****  *
2346:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
2347:FWLIB/src/stm32f4xx_rtc.c ****  ==================================================================================================
2348:FWLIB/src/stm32f4xx_rtc.c ****  ##### RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration functions #####
2349:FWLIB/src/stm32f4xx_rtc.c ****  ==================================================================================================
2350:FWLIB/src/stm32f4xx_rtc.c **** 
2351:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
2352:FWLIB/src/stm32f4xx_rtc.c ****   * @{
2353:FWLIB/src/stm32f4xx_rtc.c ****   */
2354:FWLIB/src/stm32f4xx_rtc.c **** 
2355:FWLIB/src/stm32f4xx_rtc.c **** /**
2356:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC Tamper Pin.
2357:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPin: specifies the RTC Tamper Pin.
2358:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2359:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_Default: RTC_AF1 is used as RTC Tamper Pin.
2360:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_Pos1: RTC_AF2 is selected as RTC Tamper Pin.    
2361:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2362:FWLIB/src/stm32f4xx_rtc.c ****   */
2363:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
2364:FWLIB/src/stm32f4xx_rtc.c **** {
2365:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2366:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
2367:FWLIB/src/stm32f4xx_rtc.c ****   
2368:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
2369:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
ARM GAS  /tmp/cczQSXyD.s 			page 43


2370:FWLIB/src/stm32f4xx_rtc.c **** }
2371:FWLIB/src/stm32f4xx_rtc.c **** 
2372:FWLIB/src/stm32f4xx_rtc.c **** /**
2373:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC TimeStamp Pin.
2374:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampPin: specifies the RTC TimeStamp Pin.
2375:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2376:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
2377:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
2378:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2379:FWLIB/src/stm32f4xx_rtc.c ****   */
2380:FWLIB/src/stm32f4xx_rtc.c **** void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
2381:FWLIB/src/stm32f4xx_rtc.c **** {
2382:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2383:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
2384:FWLIB/src/stm32f4xx_rtc.c ****   
2385:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
2386:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
2387:FWLIB/src/stm32f4xx_rtc.c **** }
2388:FWLIB/src/stm32f4xx_rtc.c **** 
2389:FWLIB/src/stm32f4xx_rtc.c **** /**
2390:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Output Pin mode. 
2391:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputType: specifies the RTC Output (PC13) pin mode.
2392:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2393:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_OpenDrain: RTC Output (PC13) is configured in 
2394:FWLIB/src/stm32f4xx_rtc.c ****   *                                    Open Drain mode.
2395:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
2396:FWLIB/src/stm32f4xx_rtc.c ****   *                                    Push Pull mode.    
2397:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2398:FWLIB/src/stm32f4xx_rtc.c ****   */
2399:FWLIB/src/stm32f4xx_rtc.c **** void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
2400:FWLIB/src/stm32f4xx_rtc.c **** {
2401:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2402:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
2403:FWLIB/src/stm32f4xx_rtc.c ****   
2404:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
2405:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
2406:FWLIB/src/stm32f4xx_rtc.c **** }
2407:FWLIB/src/stm32f4xx_rtc.c **** 
2408:FWLIB/src/stm32f4xx_rtc.c **** /**
2409:FWLIB/src/stm32f4xx_rtc.c ****   * @}
2410:FWLIB/src/stm32f4xx_rtc.c ****   */
2411:FWLIB/src/stm32f4xx_rtc.c **** 
2412:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group12 Shift control synchronisation functions
2413:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Shift control synchronisation functions 
2414:FWLIB/src/stm32f4xx_rtc.c ****  *
2415:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
2416:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
2417:FWLIB/src/stm32f4xx_rtc.c ****               ##### Shift control synchronisation functions #####
2418:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
2419:FWLIB/src/stm32f4xx_rtc.c **** 
2420:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
2421:FWLIB/src/stm32f4xx_rtc.c ****   * @{
2422:FWLIB/src/stm32f4xx_rtc.c ****   */
2423:FWLIB/src/stm32f4xx_rtc.c **** 
2424:FWLIB/src/stm32f4xx_rtc.c **** /**
2425:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Configures the Synchronization Shift Control Settings.
2426:FWLIB/src/stm32f4xx_rtc.c ****   * @note   When REFCKON is set, firmware must not write to Shift control register 
ARM GAS  /tmp/cczQSXyD.s 			page 44


2427:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftAdd1S : Select to add or not 1 second to the time Calendar.
2428:FWLIB/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values :
2429:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Set  : Add one second to the clock calendar. 
2430:FWLIB/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Reset: No effect.
2431:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftSubFS: Select the number of Second Fractions to Substitute.
2432:FWLIB/src/stm32f4xx_rtc.c ****   *         This parameter can be one any value from 0 to 0x7FFF.
2433:FWLIB/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
2434:FWLIB/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Shift registers are configured
2435:FWLIB/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Shift registers are not configured
2436:FWLIB/src/stm32f4xx_rtc.c **** */
2437:FWLIB/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
2438:FWLIB/src/stm32f4xx_rtc.c **** {
2439:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
2440:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t shpfcount = 0;
2441:FWLIB/src/stm32f4xx_rtc.c **** 
2442:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2443:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
2444:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));
2445:FWLIB/src/stm32f4xx_rtc.c **** 
2446:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2447:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
2448:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
2449:FWLIB/src/stm32f4xx_rtc.c ****   
2450:FWLIB/src/stm32f4xx_rtc.c ****   /* Check if a Shift is pending*/
2451:FWLIB/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
2452:FWLIB/src/stm32f4xx_rtc.c ****   {
2453:FWLIB/src/stm32f4xx_rtc.c ****     /* Wait until the shift is completed*/
2454:FWLIB/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
2455:FWLIB/src/stm32f4xx_rtc.c ****     {
2456:FWLIB/src/stm32f4xx_rtc.c ****       shpfcount++;
2457:FWLIB/src/stm32f4xx_rtc.c ****     }
2458:FWLIB/src/stm32f4xx_rtc.c ****   }
2459:FWLIB/src/stm32f4xx_rtc.c **** 
2460:FWLIB/src/stm32f4xx_rtc.c ****   /* Check if the Shift pending is completed or if there is no Shift operation at all*/
2461:FWLIB/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
2462:FWLIB/src/stm32f4xx_rtc.c ****   {
2463:FWLIB/src/stm32f4xx_rtc.c ****     /* check if the reference clock detection is disabled */
2464:FWLIB/src/stm32f4xx_rtc.c ****     if((RTC->CR & RTC_CR_REFCKON) == RESET)
2465:FWLIB/src/stm32f4xx_rtc.c ****     {
2466:FWLIB/src/stm32f4xx_rtc.c ****       /* Configure the Shift settings */
2467:FWLIB/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
2468:FWLIB/src/stm32f4xx_rtc.c ****     
2469:FWLIB/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
2470:FWLIB/src/stm32f4xx_rtc.c ****       {
2471:FWLIB/src/stm32f4xx_rtc.c ****         status = ERROR;
2472:FWLIB/src/stm32f4xx_rtc.c ****       }
2473:FWLIB/src/stm32f4xx_rtc.c ****       else
2474:FWLIB/src/stm32f4xx_rtc.c ****       {
2475:FWLIB/src/stm32f4xx_rtc.c ****         status = SUCCESS;
2476:FWLIB/src/stm32f4xx_rtc.c ****       }
2477:FWLIB/src/stm32f4xx_rtc.c ****     }
2478:FWLIB/src/stm32f4xx_rtc.c ****     else
2479:FWLIB/src/stm32f4xx_rtc.c ****     {
2480:FWLIB/src/stm32f4xx_rtc.c ****       status = ERROR;
2481:FWLIB/src/stm32f4xx_rtc.c ****     }
2482:FWLIB/src/stm32f4xx_rtc.c ****   }
2483:FWLIB/src/stm32f4xx_rtc.c ****   else
ARM GAS  /tmp/cczQSXyD.s 			page 45


2484:FWLIB/src/stm32f4xx_rtc.c ****   {
2485:FWLIB/src/stm32f4xx_rtc.c ****     status = ERROR;
2486:FWLIB/src/stm32f4xx_rtc.c ****   }
2487:FWLIB/src/stm32f4xx_rtc.c **** 
2488:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2489:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
2490:FWLIB/src/stm32f4xx_rtc.c ****   
2491:FWLIB/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
2492:FWLIB/src/stm32f4xx_rtc.c **** }
2493:FWLIB/src/stm32f4xx_rtc.c **** 
2494:FWLIB/src/stm32f4xx_rtc.c **** /**
2495:FWLIB/src/stm32f4xx_rtc.c ****   * @}
2496:FWLIB/src/stm32f4xx_rtc.c ****   */
2497:FWLIB/src/stm32f4xx_rtc.c **** 
2498:FWLIB/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group13 Interrupts and flags management functions
2499:FWLIB/src/stm32f4xx_rtc.c ****  *  @brief   Interrupts and flags management functions  
2500:FWLIB/src/stm32f4xx_rtc.c ****  *
2501:FWLIB/src/stm32f4xx_rtc.c **** @verbatim   
2502:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================
2503:FWLIB/src/stm32f4xx_rtc.c ****               ##### Interrupts and flags management functions #####
2504:FWLIB/src/stm32f4xx_rtc.c ****  ===============================================================================  
2505:FWLIB/src/stm32f4xx_rtc.c ****  [..] All RTC interrupts are connected to the EXTI controller.
2506:FWLIB/src/stm32f4xx_rtc.c ****  
2507:FWLIB/src/stm32f4xx_rtc.c ****    (+) To enable the RTC Alarm interrupt, the following sequence is required:
2508:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the EXTI Line 17 in interrupt mode and select 
2509:FWLIB/src/stm32f4xx_rtc.c ****             the rising edge sensitivity using the EXTI_Init() function.
2510:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the RTC_Alarm IRQ channel in the NVIC using the 
2511:FWLIB/src/stm32f4xx_rtc.c ****             NVIC_Init() function.
2512:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure the RTC to generate RTC alarms (Alarm A and/or Alarm B) using
2513:FWLIB/src/stm32f4xx_rtc.c ****             the RTC_SetAlarm() and RTC_AlarmCmd() functions.
2514:FWLIB/src/stm32f4xx_rtc.c **** 
2515:FWLIB/src/stm32f4xx_rtc.c ****    (+) To enable the RTC Wakeup interrupt, the following sequence is required:
2516:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the EXTI Line 22 in interrupt mode and select the
2517:FWLIB/src/stm32f4xx_rtc.c ****             rising edge sensitivity using the EXTI_Init() function.
2518:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the RTC_WKUP IRQ channel in the NVIC using the 
2519:FWLIB/src/stm32f4xx_rtc.c ****             NVIC_Init() function.
2520:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure the RTC to generate the RTC wakeup timer event using the 
2521:FWLIB/src/stm32f4xx_rtc.c ****             RTC_WakeUpClockConfig(), RTC_SetWakeUpCounter() and RTC_WakeUpCmd() 
2522:FWLIB/src/stm32f4xx_rtc.c ****             functions.
2523:FWLIB/src/stm32f4xx_rtc.c **** 
2524:FWLIB/src/stm32f4xx_rtc.c ****    (+) To enable the RTC Tamper interrupt, the following sequence is required:
2525:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the EXTI Line 21 in interrupt mode and select 
2526:FWLIB/src/stm32f4xx_rtc.c ****             the rising edge sensitivity using the EXTI_Init() function.
2527:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the
2528:FWLIB/src/stm32f4xx_rtc.c ****             NVIC_Init() function.
2529:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure the RTC to detect the RTC tamper event using the 
2530:FWLIB/src/stm32f4xx_rtc.c ****             RTC_TamperTriggerConfig() and RTC_TamperCmd() functions.
2531:FWLIB/src/stm32f4xx_rtc.c **** 
2532:FWLIB/src/stm32f4xx_rtc.c ****    (+) To enable the RTC TimeStamp interrupt, the following sequence is required:
2533:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the EXTI Line 21 in interrupt mode and select the
2534:FWLIB/src/stm32f4xx_rtc.c ****             rising edge sensitivity using the EXTI_Init() function.
2535:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the 
2536:FWLIB/src/stm32f4xx_rtc.c ****             NVIC_Init() function.
2537:FWLIB/src/stm32f4xx_rtc.c ****        (++) Configure the RTC to detect the RTC time stamp event using the 
2538:FWLIB/src/stm32f4xx_rtc.c ****             RTC_TimeStampCmd() functions.
2539:FWLIB/src/stm32f4xx_rtc.c **** 
2540:FWLIB/src/stm32f4xx_rtc.c **** @endverbatim
ARM GAS  /tmp/cczQSXyD.s 			page 46


2541:FWLIB/src/stm32f4xx_rtc.c ****   * @{
2542:FWLIB/src/stm32f4xx_rtc.c ****   */
2543:FWLIB/src/stm32f4xx_rtc.c **** 
2544:FWLIB/src/stm32f4xx_rtc.c **** /**
2545:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC interrupts.
2546:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt sources to be enabled or disabled. 
2547:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2548:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS:  Time Stamp interrupt mask
2549:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT:  WakeUp Timer interrupt mask
2550:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB:  Alarm B interrupt mask
2551:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA:  Alarm A interrupt mask
2552:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP: Tamper event interrupt mask
2553:FWLIB/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified RTC interrupts.
2554:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
2555:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2556:FWLIB/src/stm32f4xx_rtc.c ****   */
2557:FWLIB/src/stm32f4xx_rtc.c **** void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
2558:FWLIB/src/stm32f4xx_rtc.c **** {
2559:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2560:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CONFIG_IT(RTC_IT));
2561:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2562:FWLIB/src/stm32f4xx_rtc.c **** 
2563:FWLIB/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2564:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
2565:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
2566:FWLIB/src/stm32f4xx_rtc.c **** 
2567:FWLIB/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
2568:FWLIB/src/stm32f4xx_rtc.c ****   {
2569:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2570:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
2571:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2572:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
2573:FWLIB/src/stm32f4xx_rtc.c ****   }
2574:FWLIB/src/stm32f4xx_rtc.c ****   else
2575:FWLIB/src/stm32f4xx_rtc.c ****   {
2576:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2577:FWLIB/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
2578:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2579:FWLIB/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
2580:FWLIB/src/stm32f4xx_rtc.c ****   }
2581:FWLIB/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2582:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
2583:FWLIB/src/stm32f4xx_rtc.c **** }
2584:FWLIB/src/stm32f4xx_rtc.c **** 
2585:FWLIB/src/stm32f4xx_rtc.c **** /**
2586:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC flag is set or not.
2587:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the flag to check.
2588:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2589:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RECALPF: RECALPF event flag.
2590:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2591:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP2F: Tamper 2 event flag
2592:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp OverFlow flag
2593:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2594:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2595:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2596:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2597:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITF: Initialization mode flag
ARM GAS  /tmp/cczQSXyD.s 			page 47


2598:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2599:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITS: Registers Configured flag
2600:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_SHPF: Shift operation pending flag.
2601:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTWF: WakeUp Timer Write flag
2602:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
2603:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
2604:FWLIB/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_FLAG (SET or RESET).
2605:FWLIB/src/stm32f4xx_rtc.c ****   */
2606:FWLIB/src/stm32f4xx_rtc.c **** FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
2607:FWLIB/src/stm32f4xx_rtc.c **** {
2608:FWLIB/src/stm32f4xx_rtc.c ****   FlagStatus bitstatus = RESET;
2609:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
2610:FWLIB/src/stm32f4xx_rtc.c ****   
2611:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2612:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
2613:FWLIB/src/stm32f4xx_rtc.c ****   
2614:FWLIB/src/stm32f4xx_rtc.c ****   /* Get all the flags */
2615:FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
2616:FWLIB/src/stm32f4xx_rtc.c ****   
2617:FWLIB/src/stm32f4xx_rtc.c ****   /* Return the status of the flag */
2618:FWLIB/src/stm32f4xx_rtc.c ****   if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
2619:FWLIB/src/stm32f4xx_rtc.c ****   {
2620:FWLIB/src/stm32f4xx_rtc.c ****     bitstatus = SET;
2621:FWLIB/src/stm32f4xx_rtc.c ****   }
2622:FWLIB/src/stm32f4xx_rtc.c ****   else
2623:FWLIB/src/stm32f4xx_rtc.c ****   {
2624:FWLIB/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
2625:FWLIB/src/stm32f4xx_rtc.c ****   }
2626:FWLIB/src/stm32f4xx_rtc.c ****   return bitstatus;
2627:FWLIB/src/stm32f4xx_rtc.c **** }
2628:FWLIB/src/stm32f4xx_rtc.c **** 
2629:FWLIB/src/stm32f4xx_rtc.c **** /**
2630:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's pending flags.
2631:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the RTC flag to clear.
2632:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2633:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2634:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP2F: Tamper 2 event flag
2635:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp Overflow flag 
2636:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2637:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2638:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2639:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2640:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2641:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2642:FWLIB/src/stm32f4xx_rtc.c ****   */
2643:FWLIB/src/stm32f4xx_rtc.c **** void RTC_ClearFlag(uint32_t RTC_FLAG)
2644:FWLIB/src/stm32f4xx_rtc.c **** {
2645:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2646:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));
2647:FWLIB/src/stm32f4xx_rtc.c **** 
2648:FWLIB/src/stm32f4xx_rtc.c ****   /* Clear the Flags in the RTC_ISR register */
2649:FWLIB/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR &
2650:FWLIB/src/stm32f4xx_rtc.c **** }
2651:FWLIB/src/stm32f4xx_rtc.c **** 
2652:FWLIB/src/stm32f4xx_rtc.c **** /**
2653:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC interrupt has occurred or not.
2654:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt source to check.
ARM GAS  /tmp/cczQSXyD.s 			page 48


2655:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2656:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2657:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2658:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2659:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2660:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt
2661:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP2: Tamper 2 event interrupt
2662:FWLIB/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_IT (SET or RESET).
2663:FWLIB/src/stm32f4xx_rtc.c ****   */
2664:FWLIB/src/stm32f4xx_rtc.c **** ITStatus RTC_GetITStatus(uint32_t RTC_IT)
2665:FWLIB/src/stm32f4xx_rtc.c **** {
2666:FWLIB/src/stm32f4xx_rtc.c ****   ITStatus bitstatus = RESET;
2667:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0, enablestatus = 0;
2668:FWLIB/src/stm32f4xx_rtc.c ****  
2669:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2670:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_IT(RTC_IT));
2671:FWLIB/src/stm32f4xx_rtc.c ****   
2672:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the TAMPER Interrupt enable bit and pending bit */
2673:FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
2674:FWLIB/src/stm32f4xx_rtc.c ****  
2675:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the Interrupt enable Status */
2676:FWLIB/src/stm32f4xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)) | (tmpreg & (RTC_IT >> 1
2677:FWLIB/src/stm32f4xx_rtc.c ****   
2678:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the Interrupt pending bit */
2679:FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
2680:FWLIB/src/stm32f4xx_rtc.c ****   
2681:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the status of the Interrupt */
2682:FWLIB/src/stm32f4xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
2683:FWLIB/src/stm32f4xx_rtc.c ****   {
2684:FWLIB/src/stm32f4xx_rtc.c ****     bitstatus = SET;
2685:FWLIB/src/stm32f4xx_rtc.c ****   }
2686:FWLIB/src/stm32f4xx_rtc.c ****   else
2687:FWLIB/src/stm32f4xx_rtc.c ****   {
2688:FWLIB/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
2689:FWLIB/src/stm32f4xx_rtc.c ****   }
2690:FWLIB/src/stm32f4xx_rtc.c ****   return bitstatus;
2691:FWLIB/src/stm32f4xx_rtc.c **** }
2692:FWLIB/src/stm32f4xx_rtc.c **** 
2693:FWLIB/src/stm32f4xx_rtc.c **** /**
2694:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's interrupt pending bits.
2695:FWLIB/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt pending bit to clear.
2696:FWLIB/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2697:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2698:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2699:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2700:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2701:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt
2702:FWLIB/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP2: Tamper 2 event interrupt 
2703:FWLIB/src/stm32f4xx_rtc.c ****   * @retval None
2704:FWLIB/src/stm32f4xx_rtc.c ****   */
2705:FWLIB/src/stm32f4xx_rtc.c **** void RTC_ClearITPendingBit(uint32_t RTC_IT)
2706:FWLIB/src/stm32f4xx_rtc.c **** {
2707:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
2708:FWLIB/src/stm32f4xx_rtc.c **** 
2709:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2710:FWLIB/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_IT(RTC_IT));
2711:FWLIB/src/stm32f4xx_rtc.c **** 
ARM GAS  /tmp/cczQSXyD.s 			page 49


2712:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the RTC_ISR Interrupt pending bits mask */
2713:FWLIB/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC_IT >> 4);
2714:FWLIB/src/stm32f4xx_rtc.c **** 
2715:FWLIB/src/stm32f4xx_rtc.c ****   /* Clear the interrupt pending bits in the RTC_ISR register */
2716:FWLIB/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
2717:FWLIB/src/stm32f4xx_rtc.c **** }
2718:FWLIB/src/stm32f4xx_rtc.c **** 
2719:FWLIB/src/stm32f4xx_rtc.c **** /**
2720:FWLIB/src/stm32f4xx_rtc.c ****   * @}
2721:FWLIB/src/stm32f4xx_rtc.c ****   */
2722:FWLIB/src/stm32f4xx_rtc.c **** 
2723:FWLIB/src/stm32f4xx_rtc.c **** /**
2724:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
2725:FWLIB/src/stm32f4xx_rtc.c ****   * @param  Value: Byte to be converted.
2726:FWLIB/src/stm32f4xx_rtc.c ****   * @retval Converted byte
2727:FWLIB/src/stm32f4xx_rtc.c ****   */
2728:FWLIB/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value)
2729:FWLIB/src/stm32f4xx_rtc.c **** {
  27              		.loc 1 2729 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
2730:FWLIB/src/stm32f4xx_rtc.c ****   uint8_t bcdhigh = 0;
  33              		.loc 1 2730 0
  34 0000 0023     		movs	r3, #0
2731:FWLIB/src/stm32f4xx_rtc.c ****   
2732:FWLIB/src/stm32f4xx_rtc.c ****   while (Value >= 10)
  35              		.loc 1 2732 0
  36 0002 03E0     		b	.L2
  37              	.LVL1:
  38              	.L3:
2733:FWLIB/src/stm32f4xx_rtc.c ****   {
2734:FWLIB/src/stm32f4xx_rtc.c ****     bcdhigh++;
  39              		.loc 1 2734 0
  40 0004 0133     		adds	r3, r3, #1
  41              	.LVL2:
  42 0006 DBB2     		uxtb	r3, r3
  43              	.LVL3:
2735:FWLIB/src/stm32f4xx_rtc.c ****     Value -= 10;
  44              		.loc 1 2735 0
  45 0008 0A38     		subs	r0, r0, #10
  46              	.LVL4:
  47 000a C0B2     		uxtb	r0, r0
  48              	.LVL5:
  49              	.L2:
2732:FWLIB/src/stm32f4xx_rtc.c ****   {
  50              		.loc 1 2732 0
  51 000c 0928     		cmp	r0, #9
  52 000e F9D8     		bhi	.L3
2736:FWLIB/src/stm32f4xx_rtc.c ****   }
2737:FWLIB/src/stm32f4xx_rtc.c ****   
2738:FWLIB/src/stm32f4xx_rtc.c ****   return  ((uint8_t)(bcdhigh << 4) | Value);
  53              		.loc 1 2738 0
  54 0010 1B01     		lsls	r3, r3, #4
  55              	.LVL6:
ARM GAS  /tmp/cczQSXyD.s 			page 50


  56 0012 DBB2     		uxtb	r3, r3
2739:FWLIB/src/stm32f4xx_rtc.c **** }
  57              		.loc 1 2739 0
  58 0014 1843     		orrs	r0, r0, r3
  59              	.LVL7:
  60 0016 7047     		bx	lr
  61              		.cfi_endproc
  62              	.LFE178:
  64              		.section	.text.RTC_Bcd2ToByte,"ax",%progbits
  65              		.align	1
  66              		.syntax unified
  67              		.thumb
  68              		.thumb_func
  69              		.fpu fpv4-sp-d16
  71              	RTC_Bcd2ToByte:
  72              	.LFB179:
2740:FWLIB/src/stm32f4xx_rtc.c **** 
2741:FWLIB/src/stm32f4xx_rtc.c **** /**
2742:FWLIB/src/stm32f4xx_rtc.c ****   * @brief  Convert from 2 digit BCD to Binary.
2743:FWLIB/src/stm32f4xx_rtc.c ****   * @param  Value: BCD value to be converted.
2744:FWLIB/src/stm32f4xx_rtc.c ****   * @retval Converted word
2745:FWLIB/src/stm32f4xx_rtc.c ****   */
2746:FWLIB/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value)
2747:FWLIB/src/stm32f4xx_rtc.c **** {
  73              		.loc 1 2747 0
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 0
  76              		@ frame_needed = 0, uses_anonymous_args = 0
  77              		@ link register save eliminated.
  78              	.LVL8:
2748:FWLIB/src/stm32f4xx_rtc.c ****   uint8_t tmp = 0;
2749:FWLIB/src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
  79              		.loc 1 2749 0
  80 0000 0209     		lsrs	r2, r0, #4
  81 0002 02EB8202 		add	r2, r2, r2, lsl #2
  82 0006 5300     		lsls	r3, r2, #1
  83 0008 DBB2     		uxtb	r3, r3
  84              	.LVL9:
2750:FWLIB/src/stm32f4xx_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
  85              		.loc 1 2750 0
  86 000a 00F00F00 		and	r0, r0, #15
  87              	.LVL10:
  88 000e 1844     		add	r0, r0, r3
2751:FWLIB/src/stm32f4xx_rtc.c **** }
  89              		.loc 1 2751 0
  90 0010 C0B2     		uxtb	r0, r0
  91 0012 7047     		bx	lr
  92              		.cfi_endproc
  93              	.LFE179:
  95              		.section	.text.RTC_StructInit,"ax",%progbits
  96              		.align	1
  97              		.global	RTC_StructInit
  98              		.syntax unified
  99              		.thumb
 100              		.thumb_func
 101              		.fpu fpv4-sp-d16
 103              	RTC_StructInit:
ARM GAS  /tmp/cczQSXyD.s 			page 51


 104              	.LFB125:
 504:FWLIB/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_HourFormat member */
 105              		.loc 1 504 0
 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 0
 108              		@ frame_needed = 0, uses_anonymous_args = 0
 109              		@ link register save eliminated.
 110              	.LVL11:
 506:FWLIB/src/stm32f4xx_rtc.c ****     
 111              		.loc 1 506 0
 112 0000 0023     		movs	r3, #0
 113 0002 0360     		str	r3, [r0]
 509:FWLIB/src/stm32f4xx_rtc.c **** 
 114              		.loc 1 509 0
 115 0004 7F23     		movs	r3, #127
 116 0006 4360     		str	r3, [r0, #4]
 512:FWLIB/src/stm32f4xx_rtc.c **** }
 117              		.loc 1 512 0
 118 0008 FF23     		movs	r3, #255
 119 000a 8360     		str	r3, [r0, #8]
 120 000c 7047     		bx	lr
 121              		.cfi_endproc
 122              	.LFE125:
 124              		.section	.text.RTC_WriteProtectionCmd,"ax",%progbits
 125              		.align	1
 126              		.global	RTC_WriteProtectionCmd
 127              		.syntax unified
 128              		.thumb
 129              		.thumb_func
 130              		.fpu fpv4-sp-d16
 132              	RTC_WriteProtectionCmd:
 133              	.LFB126:
 526:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 134              		.loc 1 526 0
 135              		.cfi_startproc
 136              		@ args = 0, pretend = 0, frame = 0
 137              		@ frame_needed = 0, uses_anonymous_args = 0
 138              		@ link register save eliminated.
 139              	.LVL12:
 530:FWLIB/src/stm32f4xx_rtc.c ****   {
 140              		.loc 1 530 0
 141 0000 28B9     		cbnz	r0, .L9
 538:FWLIB/src/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 142              		.loc 1 538 0
 143 0002 054B     		ldr	r3, .L10
 144 0004 CA22     		movs	r2, #202
 145 0006 5A62     		str	r2, [r3, #36]
 539:FWLIB/src/stm32f4xx_rtc.c ****   }
 146              		.loc 1 539 0
 147 0008 5322     		movs	r2, #83
 148 000a 5A62     		str	r2, [r3, #36]
 149 000c 7047     		bx	lr
 150              	.L9:
 533:FWLIB/src/stm32f4xx_rtc.c ****   }
 151              		.loc 1 533 0
 152 000e FF22     		movs	r2, #255
 153 0010 014B     		ldr	r3, .L10
ARM GAS  /tmp/cczQSXyD.s 			page 52


 154 0012 5A62     		str	r2, [r3, #36]
 155 0014 7047     		bx	lr
 156              	.L11:
 157 0016 00BF     		.align	2
 158              	.L10:
 159 0018 00280040 		.word	1073752064
 160              		.cfi_endproc
 161              	.LFE126:
 163              		.section	.text.RTC_EnterInitMode,"ax",%progbits
 164              		.align	1
 165              		.global	RTC_EnterInitMode
 166              		.syntax unified
 167              		.thumb
 168              		.thumb_func
 169              		.fpu fpv4-sp-d16
 171              	RTC_EnterInitMode:
 172              	.LFB127:
 553:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 173              		.loc 1 553 0
 174              		.cfi_startproc
 175              		@ args = 0, pretend = 0, frame = 8
 176              		@ frame_needed = 0, uses_anonymous_args = 0
 177              		@ link register save eliminated.
 178 0000 82B0     		sub	sp, sp, #8
 179              	.LCFI0:
 180              		.cfi_def_cfa_offset 8
 554:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 181              		.loc 1 554 0
 182 0002 0023     		movs	r3, #0
 183 0004 0193     		str	r3, [sp, #4]
 184              	.LVL13:
 559:FWLIB/src/stm32f4xx_rtc.c ****   {
 185              		.loc 1 559 0
 186 0006 114B     		ldr	r3, .L20
 187 0008 DB68     		ldr	r3, [r3, #12]
 188 000a 13F0400F 		tst	r3, #64
 189 000e 19D1     		bne	.L16
 562:FWLIB/src/stm32f4xx_rtc.c ****     
 190              		.loc 1 562 0
 191 0010 4FF0FF32 		mov	r2, #-1
 192 0014 0D4B     		ldr	r3, .L20
 193 0016 DA60     		str	r2, [r3, #12]
 194              	.LVL14:
 195              	.L15:
 567:FWLIB/src/stm32f4xx_rtc.c ****       initcounter++;  
 196              		.loc 1 567 0 discriminator 2
 197 0018 0C4B     		ldr	r3, .L20
 198 001a DA68     		ldr	r2, [r3, #12]
 199 001c 02F04002 		and	r2, r2, #64
 200              	.LVL15:
 568:FWLIB/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 201              		.loc 1 568 0 discriminator 2
 202 0020 019B     		ldr	r3, [sp, #4]
 203 0022 0133     		adds	r3, r3, #1
 204 0024 0193     		str	r3, [sp, #4]
 569:FWLIB/src/stm32f4xx_rtc.c ****     
 205              		.loc 1 569 0 discriminator 2
ARM GAS  /tmp/cczQSXyD.s 			page 53


 206 0026 019B     		ldr	r3, [sp, #4]
 207 0028 B3F5803F 		cmp	r3, #65536
 208 002c 01D0     		beq	.L14
 569:FWLIB/src/stm32f4xx_rtc.c ****     
 209              		.loc 1 569 0 is_stmt 0 discriminator 1
 210 002e 002A     		cmp	r2, #0
 211 0030 F2D0     		beq	.L15
 212              	.L14:
 571:FWLIB/src/stm32f4xx_rtc.c ****     {
 213              		.loc 1 571 0 is_stmt 1
 214 0032 064B     		ldr	r3, .L20
 215 0034 DB68     		ldr	r3, [r3, #12]
 216 0036 13F0400F 		tst	r3, #64
 217 003a 01D1     		bne	.L19
 577:FWLIB/src/stm32f4xx_rtc.c ****     }        
 218              		.loc 1 577 0
 219 003c 0020     		movs	r0, #0
 220 003e 02E0     		b	.L13
 221              	.L19:
 573:FWLIB/src/stm32f4xx_rtc.c ****     }
 222              		.loc 1 573 0
 223 0040 0120     		movs	r0, #1
 224 0042 00E0     		b	.L13
 225              	.LVL16:
 226              	.L16:
 582:FWLIB/src/stm32f4xx_rtc.c ****   } 
 227              		.loc 1 582 0
 228 0044 0120     		movs	r0, #1
 229              	.LVL17:
 230              	.L13:
 586:FWLIB/src/stm32f4xx_rtc.c **** 
 231              		.loc 1 586 0
 232 0046 02B0     		add	sp, sp, #8
 233              	.LCFI1:
 234              		.cfi_def_cfa_offset 0
 235              		@ sp needed
 236 0048 7047     		bx	lr
 237              	.L21:
 238 004a 00BF     		.align	2
 239              	.L20:
 240 004c 00280040 		.word	1073752064
 241              		.cfi_endproc
 242              	.LFE127:
 244              		.section	.text.RTC_ExitInitMode,"ax",%progbits
 245              		.align	1
 246              		.global	RTC_ExitInitMode
 247              		.syntax unified
 248              		.thumb
 249              		.thumb_func
 250              		.fpu fpv4-sp-d16
 252              	RTC_ExitInitMode:
 253              	.LFB128:
 598:FWLIB/src/stm32f4xx_rtc.c ****   /* Exit Initialization mode */
 254              		.loc 1 598 0
 255              		.cfi_startproc
 256              		@ args = 0, pretend = 0, frame = 0
 257              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cczQSXyD.s 			page 54


 258              		@ link register save eliminated.
 600:FWLIB/src/stm32f4xx_rtc.c **** }
 259              		.loc 1 600 0
 260 0000 024A     		ldr	r2, .L23
 261 0002 D368     		ldr	r3, [r2, #12]
 262 0004 23F08003 		bic	r3, r3, #128
 263 0008 D360     		str	r3, [r2, #12]
 264 000a 7047     		bx	lr
 265              	.L24:
 266              		.align	2
 267              	.L23:
 268 000c 00280040 		.word	1073752064
 269              		.cfi_endproc
 270              	.LFE128:
 272              		.section	.text.RTC_Init,"ax",%progbits
 273              		.align	1
 274              		.global	RTC_Init
 275              		.syntax unified
 276              		.thumb
 277              		.thumb_func
 278              		.fpu fpv4-sp-d16
 280              	RTC_Init:
 281              	.LFB124:
 458:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 282              		.loc 1 458 0
 283              		.cfi_startproc
 284              		@ args = 0, pretend = 0, frame = 0
 285              		@ frame_needed = 0, uses_anonymous_args = 0
 286              	.LVL18:
 287 0000 10B5     		push	{r4, lr}
 288              	.LCFI2:
 289              		.cfi_def_cfa_offset 8
 290              		.cfi_offset 4, -8
 291              		.cfi_offset 14, -4
 292 0002 0446     		mov	r4, r0
 293              	.LVL19:
 467:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 294              		.loc 1 467 0
 295 0004 104B     		ldr	r3, .L29
 296 0006 CA22     		movs	r2, #202
 297 0008 5A62     		str	r2, [r3, #36]
 468:FWLIB/src/stm32f4xx_rtc.c **** 
 298              		.loc 1 468 0
 299 000a 5322     		movs	r2, #83
 300 000c 5A62     		str	r2, [r3, #36]
 471:FWLIB/src/stm32f4xx_rtc.c ****   {
 301              		.loc 1 471 0
 302 000e FFF7FEFF 		bl	RTC_EnterInitMode
 303              	.LVL20:
 304 0012 0346     		mov	r3, r0
 305 0014 20B9     		cbnz	r0, .L28
 306              	.LVL21:
 307              	.L26:
 492:FWLIB/src/stm32f4xx_rtc.c ****   
 308              		.loc 1 492 0
 309 0016 FF21     		movs	r1, #255
 310 0018 0B4A     		ldr	r2, .L29
ARM GAS  /tmp/cczQSXyD.s 			page 55


 311 001a 5162     		str	r1, [r2, #36]
 495:FWLIB/src/stm32f4xx_rtc.c **** 
 312              		.loc 1 495 0
 313 001c 1846     		mov	r0, r3
 314 001e 10BD     		pop	{r4, pc}
 315              	.LVL22:
 316              	.L28:
 478:FWLIB/src/stm32f4xx_rtc.c ****     /* Set RTC_CR register */
 317              		.loc 1 478 0
 318 0020 094B     		ldr	r3, .L29
 319 0022 9A68     		ldr	r2, [r3, #8]
 320 0024 22F04002 		bic	r2, r2, #64
 321 0028 9A60     		str	r2, [r3, #8]
 480:FWLIB/src/stm32f4xx_rtc.c ****   
 322              		.loc 1 480 0
 323 002a 9A68     		ldr	r2, [r3, #8]
 324 002c 2168     		ldr	r1, [r4]
 325 002e 0A43     		orrs	r2, r2, r1
 326 0030 9A60     		str	r2, [r3, #8]
 483:FWLIB/src/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 327              		.loc 1 483 0
 328 0032 A268     		ldr	r2, [r4, #8]
 329 0034 1A61     		str	r2, [r3, #16]
 484:FWLIB/src/stm32f4xx_rtc.c **** 
 330              		.loc 1 484 0
 331 0036 1A69     		ldr	r2, [r3, #16]
 332 0038 6168     		ldr	r1, [r4, #4]
 333 003a 42EA0142 		orr	r2, r2, r1, lsl #16
 334 003e 1A61     		str	r2, [r3, #16]
 487:FWLIB/src/stm32f4xx_rtc.c **** 
 335              		.loc 1 487 0
 336 0040 FFF7FEFF 		bl	RTC_ExitInitMode
 337              	.LVL23:
 489:FWLIB/src/stm32f4xx_rtc.c ****   }
 338              		.loc 1 489 0
 339 0044 0123     		movs	r3, #1
 340 0046 E6E7     		b	.L26
 341              	.L30:
 342              		.align	2
 343              	.L29:
 344 0048 00280040 		.word	1073752064
 345              		.cfi_endproc
 346              	.LFE124:
 348              		.section	.text.RTC_WaitForSynchro,"ax",%progbits
 349              		.align	1
 350              		.global	RTC_WaitForSynchro
 351              		.syntax unified
 352              		.thumb
 353              		.thumb_func
 354              		.fpu fpv4-sp-d16
 356              	RTC_WaitForSynchro:
 357              	.LFB129:
 620:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 358              		.loc 1 620 0
 359              		.cfi_startproc
 360              		@ args = 0, pretend = 0, frame = 8
 361              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cczQSXyD.s 			page 56


 362              		@ link register save eliminated.
 363 0000 82B0     		sub	sp, sp, #8
 364              	.LCFI3:
 365              		.cfi_def_cfa_offset 8
 621:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 366              		.loc 1 621 0
 367 0002 0023     		movs	r3, #0
 368 0004 0193     		str	r3, [sp, #4]
 369              	.LVL24:
 626:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 370              		.loc 1 626 0
 371 0006 114B     		ldr	r3, .L38
 372 0008 CA22     		movs	r2, #202
 373 000a 5A62     		str	r2, [r3, #36]
 627:FWLIB/src/stm32f4xx_rtc.c ****     
 374              		.loc 1 627 0
 375 000c 5322     		movs	r2, #83
 376 000e 5A62     		str	r2, [r3, #36]
 630:FWLIB/src/stm32f4xx_rtc.c ****     
 377              		.loc 1 630 0
 378 0010 DA68     		ldr	r2, [r3, #12]
 379 0012 22F0A002 		bic	r2, r2, #160
 380 0016 DA60     		str	r2, [r3, #12]
 381              	.LVL25:
 382              	.L33:
 635:FWLIB/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 383              		.loc 1 635 0 discriminator 2
 384 0018 0C4B     		ldr	r3, .L38
 385 001a DA68     		ldr	r2, [r3, #12]
 386 001c 02F02002 		and	r2, r2, #32
 387              	.LVL26:
 636:FWLIB/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 388              		.loc 1 636 0 discriminator 2
 389 0020 019B     		ldr	r3, [sp, #4]
 390 0022 0133     		adds	r3, r3, #1
 391 0024 0193     		str	r3, [sp, #4]
 637:FWLIB/src/stm32f4xx_rtc.c ****     
 392              		.loc 1 637 0 discriminator 2
 393 0026 019B     		ldr	r3, [sp, #4]
 394 0028 B3F5003F 		cmp	r3, #131072
 395 002c 01D0     		beq	.L32
 637:FWLIB/src/stm32f4xx_rtc.c ****     
 396              		.loc 1 637 0 is_stmt 0 discriminator 1
 397 002e 002A     		cmp	r2, #0
 398 0030 F2D0     		beq	.L33
 399              	.L32:
 639:FWLIB/src/stm32f4xx_rtc.c ****   {
 400              		.loc 1 639 0 is_stmt 1
 401 0032 064B     		ldr	r3, .L38
 402 0034 DB68     		ldr	r3, [r3, #12]
 403 0036 13F0200F 		tst	r3, #32
 404 003a 05D1     		bne	.L37
 645:FWLIB/src/stm32f4xx_rtc.c ****   }        
 405              		.loc 1 645 0
 406 003c 0020     		movs	r0, #0
 407              	.L34:
 408              	.LVL27:
ARM GAS  /tmp/cczQSXyD.s 			page 57


 649:FWLIB/src/stm32f4xx_rtc.c ****     
 409              		.loc 1 649 0
 410 003e FF22     		movs	r2, #255
 411              	.LVL28:
 412 0040 024B     		ldr	r3, .L38
 413 0042 5A62     		str	r2, [r3, #36]
 652:FWLIB/src/stm32f4xx_rtc.c **** 
 414              		.loc 1 652 0
 415 0044 02B0     		add	sp, sp, #8
 416              	.LCFI4:
 417              		.cfi_remember_state
 418              		.cfi_def_cfa_offset 0
 419              		@ sp needed
 420 0046 7047     		bx	lr
 421              	.LVL29:
 422              	.L37:
 423              	.LCFI5:
 424              		.cfi_restore_state
 641:FWLIB/src/stm32f4xx_rtc.c ****   }
 425              		.loc 1 641 0
 426 0048 0120     		movs	r0, #1
 427 004a F8E7     		b	.L34
 428              	.L39:
 429              		.align	2
 430              	.L38:
 431 004c 00280040 		.word	1073752064
 432              		.cfi_endproc
 433              	.LFE129:
 435              		.section	.text.RTC_DeInit,"ax",%progbits
 436              		.align	1
 437              		.global	RTC_DeInit
 438              		.syntax unified
 439              		.thumb
 440              		.thumb_func
 441              		.fpu fpv4-sp-d16
 443              	RTC_DeInit:
 444              	.LFB123:
 376:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 445              		.loc 1 376 0
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 8
 448              		@ frame_needed = 0, uses_anonymous_args = 0
 449 0000 00B5     		push	{lr}
 450              	.LCFI6:
 451              		.cfi_def_cfa_offset 4
 452              		.cfi_offset 14, -4
 453 0002 83B0     		sub	sp, sp, #12
 454              	.LCFI7:
 455              		.cfi_def_cfa_offset 16
 377:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 456              		.loc 1 377 0
 457 0004 0023     		movs	r3, #0
 458 0006 0193     		str	r3, [sp, #4]
 459              	.LVL30:
 382:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 460              		.loc 1 382 0
 461 0008 224B     		ldr	r3, .L48
ARM GAS  /tmp/cczQSXyD.s 			page 58


 462 000a CA22     		movs	r2, #202
 463 000c 5A62     		str	r2, [r3, #36]
 383:FWLIB/src/stm32f4xx_rtc.c **** 
 464              		.loc 1 383 0
 465 000e 5322     		movs	r2, #83
 466 0010 5A62     		str	r2, [r3, #36]
 386:FWLIB/src/stm32f4xx_rtc.c ****   {
 467              		.loc 1 386 0
 468 0012 FFF7FEFF 		bl	RTC_EnterInitMode
 469              	.LVL31:
 470 0016 0346     		mov	r3, r0
 471 0018 E0B1     		cbz	r0, .L41
 393:FWLIB/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
 472              		.loc 1 393 0
 473 001a 1E4B     		ldr	r3, .L48
 474 001c 0022     		movs	r2, #0
 475 001e 1A60     		str	r2, [r3]
 394:FWLIB/src/stm32f4xx_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 476              		.loc 1 394 0
 477 0020 42F20112 		movw	r2, #8449
 478 0024 5A60     		str	r2, [r3, #4]
 396:FWLIB/src/stm32f4xx_rtc.c ****   
 479              		.loc 1 396 0
 480 0026 9A68     		ldr	r2, [r3, #8]
 481 0028 02F00702 		and	r2, r2, #7
 482 002c 9A60     		str	r2, [r3, #8]
 483              	.LVL32:
 484              	.L43:
 401:FWLIB/src/stm32f4xx_rtc.c ****       wutcounter++;  
 485              		.loc 1 401 0 discriminator 2
 486 002e 194B     		ldr	r3, .L48
 487 0030 DA68     		ldr	r2, [r3, #12]
 488 0032 02F00402 		and	r2, r2, #4
 489              	.LVL33:
 402:FWLIB/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 490              		.loc 1 402 0 discriminator 2
 491 0036 019B     		ldr	r3, [sp, #4]
 492 0038 0133     		adds	r3, r3, #1
 493 003a 0193     		str	r3, [sp, #4]
 403:FWLIB/src/stm32f4xx_rtc.c ****     
 494              		.loc 1 403 0 discriminator 2
 495 003c 019B     		ldr	r3, [sp, #4]
 496 003e B3F5803F 		cmp	r3, #65536
 497 0042 01D0     		beq	.L42
 403:FWLIB/src/stm32f4xx_rtc.c ****     
 498              		.loc 1 403 0 is_stmt 0 discriminator 1
 499 0044 002A     		cmp	r2, #0
 500 0046 F2D0     		beq	.L43
 501              	.L42:
 405:FWLIB/src/stm32f4xx_rtc.c ****     {
 502              		.loc 1 405 0 is_stmt 1
 503 0048 124B     		ldr	r3, .L48
 504 004a DB68     		ldr	r3, [r3, #12]
 505 004c 13F0040F 		tst	r3, #4
 506 0050 07D1     		bne	.L47
 407:FWLIB/src/stm32f4xx_rtc.c ****     }
 507              		.loc 1 407 0
ARM GAS  /tmp/cczQSXyD.s 			page 59


 508 0052 0023     		movs	r3, #0
 509              	.LVL34:
 510              	.L41:
 441:FWLIB/src/stm32f4xx_rtc.c ****   
 511              		.loc 1 441 0
 512 0054 FF21     		movs	r1, #255
 513 0056 0F4A     		ldr	r2, .L48
 514 0058 5162     		str	r1, [r2, #36]
 444:FWLIB/src/stm32f4xx_rtc.c **** 
 515              		.loc 1 444 0
 516 005a 1846     		mov	r0, r3
 517 005c 03B0     		add	sp, sp, #12
 518              	.LCFI8:
 519              		.cfi_remember_state
 520              		.cfi_def_cfa_offset 4
 521              		@ sp needed
 522 005e 5DF804FB 		ldr	pc, [sp], #4
 523              	.LVL35:
 524              	.L47:
 525              	.LCFI9:
 526              		.cfi_restore_state
 412:FWLIB/src/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 527              		.loc 1 412 0
 528 0062 0C4B     		ldr	r3, .L48
 529 0064 9A68     		ldr	r2, [r3, #8]
 530              	.LVL36:
 531 0066 0022     		movs	r2, #0
 532 0068 9A60     		str	r2, [r3, #8]
 413:FWLIB/src/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 533              		.loc 1 413 0
 534 006a 4FF6FF71 		movw	r1, #65535
 535 006e 5961     		str	r1, [r3, #20]
 414:FWLIB/src/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 536              		.loc 1 414 0
 537 0070 0949     		ldr	r1, .L48+4
 538 0072 1961     		str	r1, [r3, #16]
 415:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 539              		.loc 1 415 0
 540 0074 9A61     		str	r2, [r3, #24]
 416:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 541              		.loc 1 416 0
 542 0076 DA61     		str	r2, [r3, #28]
 417:FWLIB/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)0x00000000;
 543              		.loc 1 417 0
 544 0078 1A62     		str	r2, [r3, #32]
 418:FWLIB/src/stm32f4xx_rtc.c ****       RTC->CALR = (uint32_t)0x00000000;
 545              		.loc 1 418 0
 546 007a DA62     		str	r2, [r3, #44]
 419:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMASSR = (uint32_t)0x00000000;
 547              		.loc 1 419 0
 548 007c DA63     		str	r2, [r3, #60]
 420:FWLIB/src/stm32f4xx_rtc.c ****       RTC->ALRMBSSR = (uint32_t)0x00000000;
 549              		.loc 1 420 0
 550 007e 5A64     		str	r2, [r3, #68]
 421:FWLIB/src/stm32f4xx_rtc.c ****       
 551              		.loc 1 421 0
 552 0080 9A64     		str	r2, [r3, #72]
ARM GAS  /tmp/cczQSXyD.s 			page 60


 424:FWLIB/src/stm32f4xx_rtc.c ****       
 553              		.loc 1 424 0
 554 0082 DA60     		str	r2, [r3, #12]
 427:FWLIB/src/stm32f4xx_rtc.c ****   
 555              		.loc 1 427 0
 556 0084 1A64     		str	r2, [r3, #64]
 429:FWLIB/src/stm32f4xx_rtc.c ****       {
 557              		.loc 1 429 0
 558 0086 FFF7FEFF 		bl	RTC_WaitForSynchro
 559              	.LVL37:
 560 008a 0346     		mov	r3, r0
 561 008c 0028     		cmp	r0, #0
 562 008e E1D0     		beq	.L41
 435:FWLIB/src/stm32f4xx_rtc.c ****       }
 563              		.loc 1 435 0
 564 0090 0123     		movs	r3, #1
 565 0092 DFE7     		b	.L41
 566              	.L49:
 567              		.align	2
 568              	.L48:
 569 0094 00280040 		.word	1073752064
 570 0098 FF007F00 		.word	8323327
 571              		.cfi_endproc
 572              	.LFE123:
 574              		.section	.text.RTC_RefClockCmd,"ax",%progbits
 575              		.align	1
 576              		.global	RTC_RefClockCmd
 577              		.syntax unified
 578              		.thumb
 579              		.thumb_func
 580              		.fpu fpv4-sp-d16
 582              	RTC_RefClockCmd:
 583              	.LFB130:
 663:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 584              		.loc 1 663 0
 585              		.cfi_startproc
 586              		@ args = 0, pretend = 0, frame = 0
 587              		@ frame_needed = 0, uses_anonymous_args = 0
 588              	.LVL38:
 589 0000 10B5     		push	{r4, lr}
 590              	.LCFI10:
 591              		.cfi_def_cfa_offset 8
 592              		.cfi_offset 4, -8
 593              		.cfi_offset 14, -4
 594 0002 0446     		mov	r4, r0
 595              	.LVL39:
 670:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 596              		.loc 1 670 0
 597 0004 0E4B     		ldr	r3, .L55
 598 0006 CA22     		movs	r2, #202
 599 0008 5A62     		str	r2, [r3, #36]
 671:FWLIB/src/stm32f4xx_rtc.c ****     
 600              		.loc 1 671 0
 601 000a 5322     		movs	r2, #83
 602 000c 5A62     		str	r2, [r3, #36]
 674:FWLIB/src/stm32f4xx_rtc.c ****   {
 603              		.loc 1 674 0
ARM GAS  /tmp/cczQSXyD.s 			page 61


 604 000e FFF7FEFF 		bl	RTC_EnterInitMode
 605              	.LVL40:
 606 0012 0346     		mov	r3, r0
 607 0014 40B1     		cbz	r0, .L51
 680:FWLIB/src/stm32f4xx_rtc.c ****     {
 608              		.loc 1 680 0
 609 0016 64B1     		cbz	r4, .L52
 683:FWLIB/src/stm32f4xx_rtc.c ****     }
 610              		.loc 1 683 0
 611 0018 094A     		ldr	r2, .L55
 612 001a 9368     		ldr	r3, [r2, #8]
 613 001c 43F01003 		orr	r3, r3, #16
 614 0020 9360     		str	r3, [r2, #8]
 615              	.L53:
 691:FWLIB/src/stm32f4xx_rtc.c ****     
 616              		.loc 1 691 0
 617 0022 FFF7FEFF 		bl	RTC_ExitInitMode
 618              	.LVL41:
 693:FWLIB/src/stm32f4xx_rtc.c ****   }
 619              		.loc 1 693 0
 620 0026 0123     		movs	r3, #1
 621              	.LVL42:
 622              	.L51:
 697:FWLIB/src/stm32f4xx_rtc.c ****   
 623              		.loc 1 697 0
 624 0028 FF21     		movs	r1, #255
 625 002a 054A     		ldr	r2, .L55
 626 002c 5162     		str	r1, [r2, #36]
 700:FWLIB/src/stm32f4xx_rtc.c **** 
 627              		.loc 1 700 0
 628 002e 1846     		mov	r0, r3
 629 0030 10BD     		pop	{r4, pc}
 630              	.LVL43:
 631              	.L52:
 688:FWLIB/src/stm32f4xx_rtc.c ****     }
 632              		.loc 1 688 0
 633 0032 034A     		ldr	r2, .L55
 634 0034 9368     		ldr	r3, [r2, #8]
 635 0036 23F01003 		bic	r3, r3, #16
 636 003a 9360     		str	r3, [r2, #8]
 637 003c F1E7     		b	.L53
 638              	.L56:
 639 003e 00BF     		.align	2
 640              	.L55:
 641 0040 00280040 		.word	1073752064
 642              		.cfi_endproc
 643              	.LFE130:
 645              		.section	.text.RTC_BypassShadowCmd,"ax",%progbits
 646              		.align	1
 647              		.global	RTC_BypassShadowCmd
 648              		.syntax unified
 649              		.thumb
 650              		.thumb_func
 651              		.fpu fpv4-sp-d16
 653              	RTC_BypassShadowCmd:
 654              	.LFB131:
 711:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
ARM GAS  /tmp/cczQSXyD.s 			page 62


 655              		.loc 1 711 0
 656              		.cfi_startproc
 657              		@ args = 0, pretend = 0, frame = 0
 658              		@ frame_needed = 0, uses_anonymous_args = 0
 659              		@ link register save eliminated.
 660              	.LVL44:
 716:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 661              		.loc 1 716 0
 662 0000 0A4B     		ldr	r3, .L61
 663 0002 CA22     		movs	r2, #202
 664 0004 5A62     		str	r2, [r3, #36]
 717:FWLIB/src/stm32f4xx_rtc.c ****   
 665              		.loc 1 717 0
 666 0006 5322     		movs	r2, #83
 667 0008 5A62     		str	r2, [r3, #36]
 719:FWLIB/src/stm32f4xx_rtc.c ****   {
 668              		.loc 1 719 0
 669 000a 40B9     		cbnz	r0, .L60
 727:FWLIB/src/stm32f4xx_rtc.c ****   }
 670              		.loc 1 727 0
 671 000c 074A     		ldr	r2, .L61
 672 000e 9368     		ldr	r3, [r2, #8]
 673 0010 03F0DF03 		and	r3, r3, #223
 674 0014 9360     		str	r3, [r2, #8]
 675              	.L59:
 731:FWLIB/src/stm32f4xx_rtc.c **** }
 676              		.loc 1 731 0
 677 0016 FF22     		movs	r2, #255
 678 0018 044B     		ldr	r3, .L61
 679 001a 5A62     		str	r2, [r3, #36]
 680 001c 7047     		bx	lr
 681              	.L60:
 722:FWLIB/src/stm32f4xx_rtc.c ****   }
 682              		.loc 1 722 0
 683 001e 1A46     		mov	r2, r3
 684 0020 9B68     		ldr	r3, [r3, #8]
 685 0022 43F02003 		orr	r3, r3, #32
 686 0026 9360     		str	r3, [r2, #8]
 687 0028 F5E7     		b	.L59
 688              	.L62:
 689 002a 00BF     		.align	2
 690              	.L61:
 691 002c 00280040 		.word	1073752064
 692              		.cfi_endproc
 693              	.LFE131:
 695              		.section	.text.RTC_SetTime,"ax",%progbits
 696              		.align	1
 697              		.global	RTC_SetTime
 698              		.syntax unified
 699              		.thumb
 700              		.thumb_func
 701              		.fpu fpv4-sp-d16
 703              	RTC_SetTime:
 704              	.LFB132:
 766:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 705              		.loc 1 766 0
 706              		.cfi_startproc
ARM GAS  /tmp/cczQSXyD.s 			page 63


 707              		@ args = 0, pretend = 0, frame = 0
 708              		@ frame_needed = 0, uses_anonymous_args = 0
 709              	.LVL45:
 710 0000 38B5     		push	{r3, r4, r5, lr}
 711              	.LCFI11:
 712              		.cfi_def_cfa_offset 16
 713              		.cfi_offset 3, -16
 714              		.cfi_offset 4, -12
 715              		.cfi_offset 5, -8
 716              		.cfi_offset 14, -4
 717 0002 0D46     		mov	r5, r1
 718              	.LVL46:
 773:FWLIB/src/stm32f4xx_rtc.c ****   {
 719              		.loc 1 773 0
 720 0004 0346     		mov	r3, r0
 721 0006 F8B9     		cbnz	r0, .L64
 775:FWLIB/src/stm32f4xx_rtc.c ****     {
 722              		.loc 1 775 0
 723 0008 264A     		ldr	r2, .L74
 724 000a 9268     		ldr	r2, [r2, #8]
 725 000c 12F0400F 		tst	r2, #64
 726 0010 01D1     		bne	.L65
 782:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 727              		.loc 1 782 0
 728 0012 0022     		movs	r2, #0
 729 0014 CA70     		strb	r2, [r1, #3]
 730              	.L65:
 806:FWLIB/src/stm32f4xx_rtc.c ****   {
 731              		.loc 1 806 0
 732 0016 FBB1     		cbz	r3, .L66
 808:FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 733              		.loc 1 808 0
 734 0018 2C78     		ldrb	r4, [r5]	@ zero_extendqisi2
 809:FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 735              		.loc 1 809 0
 736 001a 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 737              	.LVL47:
 738 001c 0002     		lsls	r0, r0, #8
 808:FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 739              		.loc 1 808 0
 740 001e 40EA0440 		orr	r0, r0, r4, lsl #16
 810:FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 741              		.loc 1 810 0
 742 0022 AC78     		ldrb	r4, [r5, #2]	@ zero_extendqisi2
 809:FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 743              		.loc 1 809 0
 744 0024 2043     		orrs	r0, r0, r4
 811:FWLIB/src/stm32f4xx_rtc.c ****   }  
 745              		.loc 1 811 0
 746 0026 EC78     		ldrb	r4, [r5, #3]	@ zero_extendqisi2
 808:FWLIB/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 747              		.loc 1 808 0
 748 0028 40EA0444 		orr	r4, r0, r4, lsl #16
 749              	.LVL48:
 750              	.L67:
 822:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 751              		.loc 1 822 0
ARM GAS  /tmp/cczQSXyD.s 			page 64


 752 002c 1D4B     		ldr	r3, .L74
 753 002e CA22     		movs	r2, #202
 754 0030 5A62     		str	r2, [r3, #36]
 823:FWLIB/src/stm32f4xx_rtc.c **** 
 755              		.loc 1 823 0
 756 0032 5322     		movs	r2, #83
 757 0034 5A62     		str	r2, [r3, #36]
 826:FWLIB/src/stm32f4xx_rtc.c ****   {
 758              		.loc 1 826 0
 759 0036 FFF7FEFF 		bl	RTC_EnterInitMode
 760              	.LVL49:
 761 003a 0346     		mov	r3, r0
 762 003c E8B9     		cbnz	r0, .L72
 763              	.LVL50:
 764              	.L68:
 856:FWLIB/src/stm32f4xx_rtc.c ****     
 765              		.loc 1 856 0
 766 003e FF21     		movs	r1, #255
 767 0040 184A     		ldr	r2, .L74
 768 0042 5162     		str	r1, [r2, #36]
 859:FWLIB/src/stm32f4xx_rtc.c **** 
 769              		.loc 1 859 0
 770 0044 1846     		mov	r0, r3
 771 0046 38BD     		pop	{r3, r4, r5, pc}
 772              	.LVL51:
 773              	.L64:
 790:FWLIB/src/stm32f4xx_rtc.c ****     {
 774              		.loc 1 790 0
 775 0048 164A     		ldr	r2, .L74
 776 004a 9268     		ldr	r2, [r2, #8]
 777 004c 12F0400F 		tst	r2, #64
 778 0050 E1D1     		bne	.L65
 798:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 779              		.loc 1 798 0
 780 0052 0022     		movs	r2, #0
 781 0054 CA70     		strb	r2, [r1, #3]
 782 0056 DEE7     		b	.L65
 783              	.L66:
 815:FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 784              		.loc 1 815 0
 785 0058 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 786              	.LVL52:
 787 005a FFF7FEFF 		bl	RTC_ByteToBcd2
 788              	.LVL53:
 789 005e 0404     		lsls	r4, r0, #16
 816:FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 790              		.loc 1 816 0
 791 0060 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 792 0062 FFF7FEFF 		bl	RTC_ByteToBcd2
 793              	.LVL54:
 815:FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 794              		.loc 1 815 0
 795 0066 44EA0024 		orr	r4, r4, r0, lsl #8
 817:FWLIB/src/stm32f4xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 796              		.loc 1 817 0
 797 006a A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 798 006c FFF7FEFF 		bl	RTC_ByteToBcd2
ARM GAS  /tmp/cczQSXyD.s 			page 65


 799              	.LVL55:
 816:FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 800              		.loc 1 816 0
 801 0070 2043     		orrs	r0, r0, r4
 818:FWLIB/src/stm32f4xx_rtc.c ****   }  
 802              		.loc 1 818 0
 803 0072 EC78     		ldrb	r4, [r5, #3]	@ zero_extendqisi2
 815:FWLIB/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 804              		.loc 1 815 0
 805 0074 40EA0444 		orr	r4, r0, r4, lsl #16
 806              	.LVL56:
 807 0078 D8E7     		b	.L67
 808              	.L72:
 833:FWLIB/src/stm32f4xx_rtc.c **** 
 809              		.loc 1 833 0
 810 007a 04F07F30 		and	r0, r4, #2139062143
 811 007e 20F0FE40 		bic	r0, r0, #2130706432
 812 0082 084C     		ldr	r4, .L74
 813              	.LVL57:
 814 0084 2060     		str	r0, [r4]
 836:FWLIB/src/stm32f4xx_rtc.c **** 
 815              		.loc 1 836 0
 816 0086 FFF7FEFF 		bl	RTC_ExitInitMode
 817              	.LVL58:
 839:FWLIB/src/stm32f4xx_rtc.c ****     {
 818              		.loc 1 839 0
 819 008a A368     		ldr	r3, [r4, #8]
 820 008c 13F0200F 		tst	r3, #32
 821 0090 01D0     		beq	.L73
 852:FWLIB/src/stm32f4xx_rtc.c ****     }
 822              		.loc 1 852 0
 823 0092 0123     		movs	r3, #1
 824 0094 D3E7     		b	.L68
 825              	.L73:
 841:FWLIB/src/stm32f4xx_rtc.c ****     {
 826              		.loc 1 841 0
 827 0096 FFF7FEFF 		bl	RTC_WaitForSynchro
 828              	.LVL59:
 829 009a 0346     		mov	r3, r0
 830 009c 0028     		cmp	r0, #0
 831 009e CED0     		beq	.L68
 847:FWLIB/src/stm32f4xx_rtc.c ****     }
 832              		.loc 1 847 0
 833 00a0 0123     		movs	r3, #1
 834 00a2 CCE7     		b	.L68
 835              	.L75:
 836              		.align	2
 837              	.L74:
 838 00a4 00280040 		.word	1073752064
 839              		.cfi_endproc
 840              	.LFE132:
 842              		.section	.text.RTC_TimeStructInit,"ax",%progbits
 843              		.align	1
 844              		.global	RTC_TimeStructInit
 845              		.syntax unified
 846              		.thumb
 847              		.thumb_func
ARM GAS  /tmp/cczQSXyD.s 			page 66


 848              		.fpu fpv4-sp-d16
 850              	RTC_TimeStructInit:
 851              	.LFB133:
 869:FWLIB/src/stm32f4xx_rtc.c ****   /* Time = 00h:00min:00sec */
 852              		.loc 1 869 0
 853              		.cfi_startproc
 854              		@ args = 0, pretend = 0, frame = 0
 855              		@ frame_needed = 0, uses_anonymous_args = 0
 856              		@ link register save eliminated.
 857              	.LVL60:
 871:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 858              		.loc 1 871 0
 859 0000 0023     		movs	r3, #0
 860 0002 C370     		strb	r3, [r0, #3]
 872:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 861              		.loc 1 872 0
 862 0004 0370     		strb	r3, [r0]
 873:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 863              		.loc 1 873 0
 864 0006 4370     		strb	r3, [r0, #1]
 874:FWLIB/src/stm32f4xx_rtc.c **** }
 865              		.loc 1 874 0
 866 0008 8370     		strb	r3, [r0, #2]
 867 000a 7047     		bx	lr
 868              		.cfi_endproc
 869              	.LFE133:
 871              		.section	.text.RTC_GetTime,"ax",%progbits
 872              		.align	1
 873              		.global	RTC_GetTime
 874              		.syntax unified
 875              		.thumb
 876              		.thumb_func
 877              		.fpu fpv4-sp-d16
 879              	RTC_GetTime:
 880              	.LFB134:
 888:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 881              		.loc 1 888 0
 882              		.cfi_startproc
 883              		@ args = 0, pretend = 0, frame = 0
 884              		@ frame_needed = 0, uses_anonymous_args = 0
 885              	.LVL61:
 886 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 887              	.LCFI12:
 888              		.cfi_def_cfa_offset 24
 889              		.cfi_offset 3, -24
 890              		.cfi_offset 4, -20
 891              		.cfi_offset 5, -16
 892              		.cfi_offset 6, -12
 893              		.cfi_offset 7, -8
 894              		.cfi_offset 14, -4
 895              	.LVL62:
 895:FWLIB/src/stm32f4xx_rtc.c ****   
 896              		.loc 1 895 0
 897 0002 114B     		ldr	r3, .L80
 898 0004 1B68     		ldr	r3, [r3]
 899 0006 03F07F33 		and	r3, r3, #2139062143
 900 000a 23F0FE43 		bic	r3, r3, #2130706432
ARM GAS  /tmp/cczQSXyD.s 			page 67


 901              	.LVL63:
 898:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 902              		.loc 1 898 0
 903 000e 1A0C     		lsrs	r2, r3, #16
 904 0010 02F03F07 		and	r7, r2, #63
 905 0014 0F70     		strb	r7, [r1]
 899:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 906              		.loc 1 899 0
 907 0016 C3F30626 		ubfx	r6, r3, #8, #7
 908 001a 4E70     		strb	r6, [r1, #1]
 900:FWLIB/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 909              		.loc 1 900 0
 910 001c 03F07F04 		and	r4, r3, #127
 911 0020 8C70     		strb	r4, [r1, #2]
 901:FWLIB/src/stm32f4xx_rtc.c **** 
 912              		.loc 1 901 0
 913 0022 02F04002 		and	r2, r2, #64
 914 0026 CA70     		strb	r2, [r1, #3]
 904:FWLIB/src/stm32f4xx_rtc.c ****   {
 915              		.loc 1 904 0
 916 0028 60B9     		cbnz	r0, .L77
 917 002a 0D46     		mov	r5, r1
 907:FWLIB/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 918              		.loc 1 907 0
 919 002c 3846     		mov	r0, r7
 920              	.LVL64:
 921 002e FFF7FEFF 		bl	RTC_Bcd2ToByte
 922              	.LVL65:
 923 0032 2870     		strb	r0, [r5]
 908:FWLIB/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 924              		.loc 1 908 0
 925 0034 3046     		mov	r0, r6
 926 0036 FFF7FEFF 		bl	RTC_Bcd2ToByte
 927              	.LVL66:
 928 003a 6870     		strb	r0, [r5, #1]
 909:FWLIB/src/stm32f4xx_rtc.c ****   }
 929              		.loc 1 909 0
 930 003c 2046     		mov	r0, r4
 931 003e FFF7FEFF 		bl	RTC_Bcd2ToByte
 932              	.LVL67:
 933 0042 A870     		strb	r0, [r5, #2]
 934              	.LVL68:
 935              	.L77:
 936 0044 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 937              	.L81:
 938 0046 00BF     		.align	2
 939              	.L80:
 940 0048 00280040 		.word	1073752064
 941              		.cfi_endproc
 942              	.LFE134:
 944              		.section	.text.RTC_GetSubSecond,"ax",%progbits
 945              		.align	1
 946              		.global	RTC_GetSubSecond
 947              		.syntax unified
 948              		.thumb
 949              		.thumb_func
 950              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cczQSXyD.s 			page 68


 952              	RTC_GetSubSecond:
 953              	.LFB135:
 921:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 954              		.loc 1 921 0
 955              		.cfi_startproc
 956              		@ args = 0, pretend = 0, frame = 0
 957              		@ frame_needed = 0, uses_anonymous_args = 0
 958              		@ link register save eliminated.
 959              	.LVL69:
 925:FWLIB/src/stm32f4xx_rtc.c ****   
 960              		.loc 1 925 0
 961 0000 014B     		ldr	r3, .L83
 962 0002 986A     		ldr	r0, [r3, #40]
 963              	.LVL70:
 928:FWLIB/src/stm32f4xx_rtc.c ****   
 964              		.loc 1 928 0
 965 0004 5B68     		ldr	r3, [r3, #4]
 931:FWLIB/src/stm32f4xx_rtc.c **** 
 966              		.loc 1 931 0
 967 0006 7047     		bx	lr
 968              	.L84:
 969              		.align	2
 970              	.L83:
 971 0008 00280040 		.word	1073752064
 972              		.cfi_endproc
 973              	.LFE135:
 975              		.section	.text.RTC_SetDate,"ax",%progbits
 976              		.align	1
 977              		.global	RTC_SetDate
 978              		.syntax unified
 979              		.thumb
 980              		.thumb_func
 981              		.fpu fpv4-sp-d16
 983              	RTC_SetDate:
 984              	.LFB136:
 946:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 985              		.loc 1 946 0
 986              		.cfi_startproc
 987              		@ args = 0, pretend = 0, frame = 0
 988              		@ frame_needed = 0, uses_anonymous_args = 0
 989              	.LVL71:
 990 0000 38B5     		push	{r3, r4, r5, lr}
 991              	.LCFI13:
 992              		.cfi_def_cfa_offset 16
 993              		.cfi_offset 3, -16
 994              		.cfi_offset 4, -12
 995              		.cfi_offset 5, -8
 996              		.cfi_offset 14, -4
 997 0002 0D46     		mov	r5, r1
 998              	.LVL72:
 953:FWLIB/src/stm32f4xx_rtc.c ****   {
 999              		.loc 1 953 0
 1000 0004 0246     		mov	r2, r0
 1001 0006 38B9     		cbnz	r0, .L86
 953:FWLIB/src/stm32f4xx_rtc.c ****   {
 1002              		.loc 1 953 0 is_stmt 0 discriminator 1
 1003 0008 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
ARM GAS  /tmp/cczQSXyD.s 			page 69


 1004 000a 13F0100F 		tst	r3, #16
 1005 000e 03D0     		beq	.L86
 955:FWLIB/src/stm32f4xx_rtc.c ****   }  
 1006              		.loc 1 955 0 is_stmt 1
 1007 0010 03F0EF03 		and	r3, r3, #239
 1008 0014 0A33     		adds	r3, r3, #10
 1009 0016 4B70     		strb	r3, [r1, #1]
 1010              	.L86:
 974:FWLIB/src/stm32f4xx_rtc.c ****   {
 1011              		.loc 1 974 0
 1012 0018 BAB1     		cbz	r2, .L87
 976:FWLIB/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1013              		.loc 1 976 0
 1014 001a EC78     		ldrb	r4, [r5, #3]	@ zero_extendqisi2
 977:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 1015              		.loc 1 977 0
 1016 001c 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 1017              	.LVL73:
 1018 001e 0002     		lsls	r0, r0, #8
 976:FWLIB/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1019              		.loc 1 976 0
 1020 0020 40EA0440 		orr	r0, r0, r4, lsl #16
 978:FWLIB/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 1021              		.loc 1 978 0
 1022 0024 AC78     		ldrb	r4, [r5, #2]	@ zero_extendqisi2
 977:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 1023              		.loc 1 977 0
 1024 0026 2043     		orrs	r0, r0, r4
 979:FWLIB/src/stm32f4xx_rtc.c ****   }  
 1025              		.loc 1 979 0
 1026 0028 2C78     		ldrb	r4, [r5]	@ zero_extendqisi2
 976:FWLIB/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1027              		.loc 1 976 0
 1028 002a 40EA4434 		orr	r4, r0, r4, lsl #13
 1029              	.LVL74:
 1030              	.L88:
 990:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1031              		.loc 1 990 0
 1032 002e 1A4B     		ldr	r3, .L95
 1033 0030 CA22     		movs	r2, #202
 1034 0032 5A62     		str	r2, [r3, #36]
 991:FWLIB/src/stm32f4xx_rtc.c **** 
 1035              		.loc 1 991 0
 1036 0034 5322     		movs	r2, #83
 1037 0036 5A62     		str	r2, [r3, #36]
 994:FWLIB/src/stm32f4xx_rtc.c ****   {
 1038              		.loc 1 994 0
 1039 0038 FFF7FEFF 		bl	RTC_EnterInitMode
 1040              	.LVL75:
 1041 003c 0346     		mov	r3, r0
 1042 003e A8B9     		cbnz	r0, .L93
 1043              	.LVL76:
 1044              	.L89:
1024:FWLIB/src/stm32f4xx_rtc.c ****   
 1045              		.loc 1 1024 0
 1046 0040 FF21     		movs	r1, #255
 1047 0042 154A     		ldr	r2, .L95
ARM GAS  /tmp/cczQSXyD.s 			page 70


 1048 0044 5162     		str	r1, [r2, #36]
1027:FWLIB/src/stm32f4xx_rtc.c **** 
 1049              		.loc 1 1027 0
 1050 0046 1846     		mov	r0, r3
 1051 0048 38BD     		pop	{r3, r4, r5, pc}
 1052              	.LVL77:
 1053              	.L87:
 983:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1054              		.loc 1 983 0
 1055 004a E878     		ldrb	r0, [r5, #3]	@ zero_extendqisi2
 1056              	.LVL78:
 1057 004c FFF7FEFF 		bl	RTC_ByteToBcd2
 1058              	.LVL79:
 1059 0050 0404     		lsls	r4, r0, #16
 984:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 1060              		.loc 1 984 0
 1061 0052 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 1062 0054 FFF7FEFF 		bl	RTC_ByteToBcd2
 1063              	.LVL80:
 983:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1064              		.loc 1 983 0
 1065 0058 44EA0024 		orr	r4, r4, r0, lsl #8
 985:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 1066              		.loc 1 985 0
 1067 005c A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 1068 005e FFF7FEFF 		bl	RTC_ByteToBcd2
 1069              	.LVL81:
 984:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 1070              		.loc 1 984 0
 1071 0062 2043     		orrs	r0, r0, r4
 986:FWLIB/src/stm32f4xx_rtc.c ****   }
 1072              		.loc 1 986 0
 1073 0064 2C78     		ldrb	r4, [r5]	@ zero_extendqisi2
 983:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1074              		.loc 1 983 0
 1075 0066 40EA4434 		orr	r4, r0, r4, lsl #13
 1076              	.LVL82:
 1077 006a E0E7     		b	.L88
 1078              	.L93:
1001:FWLIB/src/stm32f4xx_rtc.c **** 
 1079              		.loc 1 1001 0
 1080 006c 24F07F40 		bic	r0, r4, #-16777216
 1081 0070 20F0C000 		bic	r0, r0, #192
 1082 0074 084C     		ldr	r4, .L95
 1083              	.LVL83:
 1084 0076 6060     		str	r0, [r4, #4]
1004:FWLIB/src/stm32f4xx_rtc.c **** 
 1085              		.loc 1 1004 0
 1086 0078 FFF7FEFF 		bl	RTC_ExitInitMode
 1087              	.LVL84:
1007:FWLIB/src/stm32f4xx_rtc.c ****     {
 1088              		.loc 1 1007 0
 1089 007c A368     		ldr	r3, [r4, #8]
 1090 007e 13F0200F 		tst	r3, #32
 1091 0082 01D0     		beq	.L94
1020:FWLIB/src/stm32f4xx_rtc.c ****     }
 1092              		.loc 1 1020 0
ARM GAS  /tmp/cczQSXyD.s 			page 71


 1093 0084 0123     		movs	r3, #1
 1094 0086 DBE7     		b	.L89
 1095              	.L94:
1009:FWLIB/src/stm32f4xx_rtc.c ****     {
 1096              		.loc 1 1009 0
 1097 0088 FFF7FEFF 		bl	RTC_WaitForSynchro
 1098              	.LVL85:
 1099 008c 0346     		mov	r3, r0
 1100 008e 0028     		cmp	r0, #0
 1101 0090 D6D0     		beq	.L89
1015:FWLIB/src/stm32f4xx_rtc.c ****     }
 1102              		.loc 1 1015 0
 1103 0092 0123     		movs	r3, #1
 1104 0094 D4E7     		b	.L89
 1105              	.L96:
 1106 0096 00BF     		.align	2
 1107              	.L95:
 1108 0098 00280040 		.word	1073752064
 1109              		.cfi_endproc
 1110              	.LFE136:
 1112              		.section	.text.RTC_DateStructInit,"ax",%progbits
 1113              		.align	1
 1114              		.global	RTC_DateStructInit
 1115              		.syntax unified
 1116              		.thumb
 1117              		.thumb_func
 1118              		.fpu fpv4-sp-d16
 1120              	RTC_DateStructInit:
 1121              	.LFB137:
1037:FWLIB/src/stm32f4xx_rtc.c ****   /* Monday, January 01 xx00 */
 1122              		.loc 1 1037 0
 1123              		.cfi_startproc
 1124              		@ args = 0, pretend = 0, frame = 0
 1125              		@ frame_needed = 0, uses_anonymous_args = 0
 1126              		@ link register save eliminated.
 1127              	.LVL86:
1039:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
 1128              		.loc 1 1039 0
 1129 0000 0123     		movs	r3, #1
 1130 0002 0370     		strb	r3, [r0]
1040:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
 1131              		.loc 1 1040 0
 1132 0004 8370     		strb	r3, [r0, #2]
1041:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
 1133              		.loc 1 1041 0
 1134 0006 4370     		strb	r3, [r0, #1]
1042:FWLIB/src/stm32f4xx_rtc.c **** }
 1135              		.loc 1 1042 0
 1136 0008 0023     		movs	r3, #0
 1137 000a C370     		strb	r3, [r0, #3]
 1138 000c 7047     		bx	lr
 1139              		.cfi_endproc
 1140              	.LFE137:
 1142              		.section	.text.RTC_GetDate,"ax",%progbits
 1143              		.align	1
 1144              		.global	RTC_GetDate
 1145              		.syntax unified
ARM GAS  /tmp/cczQSXyD.s 			page 72


 1146              		.thumb
 1147              		.thumb_func
 1148              		.fpu fpv4-sp-d16
 1150              	RTC_GetDate:
 1151              	.LFB138:
1056:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1152              		.loc 1 1056 0
 1153              		.cfi_startproc
 1154              		@ args = 0, pretend = 0, frame = 0
 1155              		@ frame_needed = 0, uses_anonymous_args = 0
 1156              	.LVL87:
 1157 0000 70B5     		push	{r4, r5, r6, lr}
 1158              	.LCFI14:
 1159              		.cfi_def_cfa_offset 16
 1160              		.cfi_offset 4, -16
 1161              		.cfi_offset 5, -12
 1162              		.cfi_offset 6, -8
 1163              		.cfi_offset 14, -4
 1164              	.LVL88:
1063:FWLIB/src/stm32f4xx_rtc.c **** 
 1165              		.loc 1 1063 0
 1166 0002 104B     		ldr	r3, .L101
 1167 0004 5B68     		ldr	r3, [r3, #4]
 1168 0006 23F07F43 		bic	r3, r3, #-16777216
 1169 000a 23F0C003 		bic	r3, r3, #192
 1170              	.LVL89:
1066:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1171              		.loc 1 1066 0
 1172 000e 1A0C     		lsrs	r2, r3, #16
 1173 0010 CA70     		strb	r2, [r1, #3]
1067:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 1174              		.loc 1 1067 0
 1175 0012 C3F30426 		ubfx	r6, r3, #8, #5
 1176 0016 4E70     		strb	r6, [r1, #1]
1068:FWLIB/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 1177              		.loc 1 1068 0
 1178 0018 03F03F05 		and	r5, r3, #63
 1179 001c 8D70     		strb	r5, [r1, #2]
1069:FWLIB/src/stm32f4xx_rtc.c **** 
 1180              		.loc 1 1069 0
 1181 001e C3F34233 		ubfx	r3, r3, #13, #3
 1182              	.LVL90:
 1183 0022 0B70     		strb	r3, [r1]
1072:FWLIB/src/stm32f4xx_rtc.c ****   {
 1184              		.loc 1 1072 0
 1185 0024 60B9     		cbnz	r0, .L98
 1186 0026 0C46     		mov	r4, r1
1075:FWLIB/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1187              		.loc 1 1075 0
 1188 0028 1046     		mov	r0, r2
 1189              	.LVL91:
 1190 002a FFF7FEFF 		bl	RTC_Bcd2ToByte
 1191              	.LVL92:
 1192 002e E070     		strb	r0, [r4, #3]
1076:FWLIB/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1193              		.loc 1 1076 0
 1194 0030 3046     		mov	r0, r6
ARM GAS  /tmp/cczQSXyD.s 			page 73


 1195 0032 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1196              	.LVL93:
 1197 0036 6070     		strb	r0, [r4, #1]
1077:FWLIB/src/stm32f4xx_rtc.c ****   }
 1198              		.loc 1 1077 0
 1199 0038 2846     		mov	r0, r5
 1200 003a FFF7FEFF 		bl	RTC_Bcd2ToByte
 1201              	.LVL94:
 1202 003e A070     		strb	r0, [r4, #2]
 1203              	.LVL95:
 1204              	.L98:
 1205 0040 70BD     		pop	{r4, r5, r6, pc}
 1206              	.L102:
 1207 0042 00BF     		.align	2
 1208              	.L101:
 1209 0044 00280040 		.word	1073752064
 1210              		.cfi_endproc
 1211              	.LFE138:
 1213              		.section	.text.RTC_SetAlarm,"ax",%progbits
 1214              		.align	1
 1215              		.global	RTC_SetAlarm
 1216              		.syntax unified
 1217              		.thumb
 1218              		.thumb_func
 1219              		.fpu fpv4-sp-d16
 1221              	RTC_SetAlarm:
 1222              	.LFB139:
1116:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1223              		.loc 1 1116 0
 1224              		.cfi_startproc
 1225              		@ args = 0, pretend = 0, frame = 0
 1226              		@ frame_needed = 0, uses_anonymous_args = 0
 1227              	.LVL96:
 1228 0000 70B5     		push	{r4, r5, r6, lr}
 1229              	.LCFI15:
 1230              		.cfi_def_cfa_offset 16
 1231              		.cfi_offset 4, -16
 1232              		.cfi_offset 5, -12
 1233              		.cfi_offset 6, -8
 1234              		.cfi_offset 14, -4
 1235 0002 0D46     		mov	r5, r1
 1236 0004 1646     		mov	r6, r2
 1237              	.LVL97:
1125:FWLIB/src/stm32f4xx_rtc.c ****   {
 1238              		.loc 1 1125 0
 1239 0006 0346     		mov	r3, r0
 1240 0008 30BB     		cbnz	r0, .L104
1127:FWLIB/src/stm32f4xx_rtc.c ****     {
 1241              		.loc 1 1127 0
 1242 000a 254A     		ldr	r2, .L114
 1243              	.LVL98:
 1244 000c 9268     		ldr	r2, [r2, #8]
 1245 000e 12F0400F 		tst	r2, #64
 1246 0012 01D1     		bne	.L106
1134:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
 1247              		.loc 1 1134 0
 1248 0014 0022     		movs	r2, #0
ARM GAS  /tmp/cczQSXyD.s 			page 74


 1249 0016 F270     		strb	r2, [r6, #3]
 1250              	.L106:
1179:FWLIB/src/stm32f4xx_rtc.c ****   {
 1251              		.loc 1 1179 0
 1252 0018 33B3     		cbz	r3, .L108
1181:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1253              		.loc 1 1181 0
 1254 001a 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
1182:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1255              		.loc 1 1182 0
 1256 001c 7078     		ldrb	r0, [r6, #1]	@ zero_extendqisi2
 1257              	.LVL99:
 1258 001e 0002     		lsls	r0, r0, #8
1181:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1259              		.loc 1 1181 0
 1260 0020 40EA0340 		orr	r0, r0, r3, lsl #16
1183:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1261              		.loc 1 1183 0
 1262 0024 B378     		ldrb	r3, [r6, #2]	@ zero_extendqisi2
1182:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1263              		.loc 1 1182 0
 1264 0026 1843     		orrs	r0, r0, r3
1184:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1265              		.loc 1 1184 0
 1266 0028 F378     		ldrb	r3, [r6, #3]	@ zero_extendqisi2
1183:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1267              		.loc 1 1183 0
 1268 002a 40EA0340 		orr	r0, r0, r3, lsl #16
1185:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1269              		.loc 1 1185 0
 1270 002e 337B     		ldrb	r3, [r6, #12]	@ zero_extendqisi2
1184:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1271              		.loc 1 1184 0
 1272 0030 40EA0360 		orr	r0, r0, r3, lsl #24
1186:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1273              		.loc 1 1186 0
 1274 0034 B368     		ldr	r3, [r6, #8]
1185:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1275              		.loc 1 1185 0
 1276 0036 1843     		orrs	r0, r0, r3
1187:FWLIB/src/stm32f4xx_rtc.c ****   }  
 1277              		.loc 1 1187 0
 1278 0038 7368     		ldr	r3, [r6, #4]
1181:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1279              		.loc 1 1181 0
 1280 003a 1843     		orrs	r0, r0, r3
 1281              	.LVL100:
 1282              	.L109:
1201:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1283              		.loc 1 1201 0
 1284 003c 184B     		ldr	r3, .L114
 1285 003e CA22     		movs	r2, #202
 1286 0040 5A62     		str	r2, [r3, #36]
1202:FWLIB/src/stm32f4xx_rtc.c **** 
 1287              		.loc 1 1202 0
 1288 0042 5322     		movs	r2, #83
 1289 0044 5A62     		str	r2, [r3, #36]
ARM GAS  /tmp/cczQSXyD.s 			page 75


1205:FWLIB/src/stm32f4xx_rtc.c ****   {
 1290              		.loc 1 1205 0
 1291 0046 B5F5807F 		cmp	r5, #256
 1292 004a 27D0     		beq	.L113
1211:FWLIB/src/stm32f4xx_rtc.c ****   }
 1293              		.loc 1 1211 0
 1294 004c 144B     		ldr	r3, .L114
 1295 004e 1862     		str	r0, [r3, #32]
 1296              	.L111:
1215:FWLIB/src/stm32f4xx_rtc.c **** }
 1297              		.loc 1 1215 0
 1298 0050 FF22     		movs	r2, #255
 1299 0052 134B     		ldr	r3, .L114
 1300 0054 5A62     		str	r2, [r3, #36]
 1301 0056 70BD     		pop	{r4, r5, r6, pc}
 1302              	.LVL101:
 1303              	.L104:
1151:FWLIB/src/stm32f4xx_rtc.c ****     {
 1304              		.loc 1 1151 0
 1305 0058 114A     		ldr	r2, .L114
 1306              	.LVL102:
 1307 005a 9268     		ldr	r2, [r2, #8]
 1308 005c 12F0400F 		tst	r2, #64
 1309 0060 DAD1     		bne	.L106
1159:FWLIB/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
 1310              		.loc 1 1159 0
 1311 0062 0022     		movs	r2, #0
 1312 0064 F270     		strb	r2, [r6, #3]
 1313 0066 D7E7     		b	.L106
 1314              	.L108:
1191:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1315              		.loc 1 1191 0
 1316 0068 3078     		ldrb	r0, [r6]	@ zero_extendqisi2
 1317              	.LVL103:
 1318 006a FFF7FEFF 		bl	RTC_ByteToBcd2
 1319              	.LVL104:
 1320 006e 0404     		lsls	r4, r0, #16
1192:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1321              		.loc 1 1192 0
 1322 0070 7078     		ldrb	r0, [r6, #1]	@ zero_extendqisi2
 1323 0072 FFF7FEFF 		bl	RTC_ByteToBcd2
 1324              	.LVL105:
1191:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1325              		.loc 1 1191 0
 1326 0076 44EA0024 		orr	r4, r4, r0, lsl #8
1193:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1327              		.loc 1 1193 0
 1328 007a B078     		ldrb	r0, [r6, #2]	@ zero_extendqisi2
 1329 007c FFF7FEFF 		bl	RTC_ByteToBcd2
 1330              	.LVL106:
1192:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1331              		.loc 1 1192 0
 1332 0080 0443     		orrs	r4, r4, r0
1194:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1333              		.loc 1 1194 0
 1334 0082 F078     		ldrb	r0, [r6, #3]	@ zero_extendqisi2
1193:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
ARM GAS  /tmp/cczQSXyD.s 			page 76


 1335              		.loc 1 1193 0
 1336 0084 44EA0044 		orr	r4, r4, r0, lsl #16
1195:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1337              		.loc 1 1195 0
 1338 0088 307B     		ldrb	r0, [r6, #12]	@ zero_extendqisi2
 1339 008a FFF7FEFF 		bl	RTC_ByteToBcd2
 1340              	.LVL107:
1194:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1341              		.loc 1 1194 0
 1342 008e 44EA0060 		orr	r0, r4, r0, lsl #24
1196:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1343              		.loc 1 1196 0
 1344 0092 B468     		ldr	r4, [r6, #8]
1195:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1345              		.loc 1 1195 0
 1346 0094 2043     		orrs	r0, r0, r4
1197:FWLIB/src/stm32f4xx_rtc.c ****   } 
 1347              		.loc 1 1197 0
 1348 0096 7368     		ldr	r3, [r6, #4]
1191:FWLIB/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1349              		.loc 1 1191 0
 1350 0098 1843     		orrs	r0, r0, r3
 1351              	.LVL108:
 1352 009a CFE7     		b	.L109
 1353              	.L113:
1207:FWLIB/src/stm32f4xx_rtc.c ****   }
 1354              		.loc 1 1207 0
 1355 009c D861     		str	r0, [r3, #28]
 1356 009e D7E7     		b	.L111
 1357              	.L115:
 1358              		.align	2
 1359              	.L114:
 1360 00a0 00280040 		.word	1073752064
 1361              		.cfi_endproc
 1362              	.LFE139:
 1364              		.section	.text.RTC_AlarmStructInit,"ax",%progbits
 1365              		.align	1
 1366              		.global	RTC_AlarmStructInit
 1367              		.syntax unified
 1368              		.thumb
 1369              		.thumb_func
 1370              		.fpu fpv4-sp-d16
 1372              	RTC_AlarmStructInit:
 1373              	.LFB140:
1227:FWLIB/src/stm32f4xx_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
 1374              		.loc 1 1227 0
 1375              		.cfi_startproc
 1376              		@ args = 0, pretend = 0, frame = 0
 1377              		@ frame_needed = 0, uses_anonymous_args = 0
 1378              		@ link register save eliminated.
 1379              	.LVL109:
1229:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 1380              		.loc 1 1229 0
 1381 0000 0023     		movs	r3, #0
 1382 0002 C370     		strb	r3, [r0, #3]
1230:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 1383              		.loc 1 1230 0
ARM GAS  /tmp/cczQSXyD.s 			page 77


 1384 0004 0370     		strb	r3, [r0]
1231:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 1385              		.loc 1 1231 0
 1386 0006 4370     		strb	r3, [r0, #1]
1232:FWLIB/src/stm32f4xx_rtc.c **** 
 1387              		.loc 1 1232 0
 1388 0008 8370     		strb	r3, [r0, #2]
1235:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 1389              		.loc 1 1235 0
 1390 000a 8360     		str	r3, [r0, #8]
1236:FWLIB/src/stm32f4xx_rtc.c **** 
 1391              		.loc 1 1236 0
 1392 000c 0122     		movs	r2, #1
 1393 000e 0273     		strb	r2, [r0, #12]
1239:FWLIB/src/stm32f4xx_rtc.c **** }
 1394              		.loc 1 1239 0
 1395 0010 4360     		str	r3, [r0, #4]
 1396 0012 7047     		bx	lr
 1397              		.cfi_endproc
 1398              	.LFE140:
 1400              		.section	.text.RTC_GetAlarm,"ax",%progbits
 1401              		.align	1
 1402              		.global	RTC_GetAlarm
 1403              		.syntax unified
 1404              		.thumb
 1405              		.thumb_func
 1406              		.fpu fpv4-sp-d16
 1408              	RTC_GetAlarm:
 1409              	.LFB141:
1257:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1410              		.loc 1 1257 0
 1411              		.cfi_startproc
 1412              		@ args = 0, pretend = 0, frame = 0
 1413              		@ frame_needed = 0, uses_anonymous_args = 0
 1414              	.LVL110:
 1415 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1416              	.LCFI16:
 1417              		.cfi_def_cfa_offset 24
 1418              		.cfi_offset 3, -24
 1419              		.cfi_offset 4, -20
 1420              		.cfi_offset 5, -16
 1421              		.cfi_offset 6, -12
 1422              		.cfi_offset 7, -8
 1423              		.cfi_offset 14, -4
 1424              	.LVL111:
1265:FWLIB/src/stm32f4xx_rtc.c ****   {
 1425              		.loc 1 1265 0
 1426 0002 B1F5807F 		cmp	r1, #256
 1427 0006 2CD0     		beq	.L122
1271:FWLIB/src/stm32f4xx_rtc.c ****   }
 1428              		.loc 1 1271 0
 1429 0008 174B     		ldr	r3, .L123
 1430 000a 1B6A     		ldr	r3, [r3, #32]
 1431              	.LVL112:
 1432              	.L119:
1275:FWLIB/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
 1433              		.loc 1 1275 0
ARM GAS  /tmp/cczQSXyD.s 			page 78


 1434 000c C3F30741 		ubfx	r1, r3, #16, #8
 1435              	.LVL113:
 1436 0010 01F03F0E 		and	lr, r1, #63
 1437 0014 82F800E0 		strb	lr, [r2]
1277:FWLIB/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
 1438              		.loc 1 1277 0
 1439 0018 C3F30626 		ubfx	r6, r3, #8, #7
 1440 001c 5670     		strb	r6, [r2, #1]
1279:FWLIB/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_SU));
 1441              		.loc 1 1279 0
 1442 001e 03F07F05 		and	r5, r3, #127
 1443 0022 9570     		strb	r5, [r2, #2]
1281:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 1444              		.loc 1 1281 0
 1445 0024 01F04001 		and	r1, r1, #64
 1446 0028 D170     		strb	r1, [r2, #3]
1282:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 1447              		.loc 1 1282 0
 1448 002a C3F30567 		ubfx	r7, r3, #24, #6
 1449 002e 1773     		strb	r7, [r2, #12]
1283:FWLIB/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 1450              		.loc 1 1283 0
 1451 0030 03F08041 		and	r1, r3, #1073741824
 1452 0034 9160     		str	r1, [r2, #8]
1284:FWLIB/src/stm32f4xx_rtc.c **** 
 1453              		.loc 1 1284 0
 1454 0036 03F08033 		and	r3, r3, #-2139062144
 1455              	.LVL114:
 1456 003a 5360     		str	r3, [r2, #4]
1286:FWLIB/src/stm32f4xx_rtc.c ****   {
 1457              		.loc 1 1286 0
 1458 003c 80B9     		cbnz	r0, .L117
 1459 003e 1446     		mov	r4, r2
1288:FWLIB/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
 1460              		.loc 1 1288 0
 1461 0040 7046     		mov	r0, lr
 1462              	.LVL115:
 1463 0042 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1464              	.LVL116:
 1465 0046 2070     		strb	r0, [r4]
1290:FWLIB/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
 1466              		.loc 1 1290 0
 1467 0048 3046     		mov	r0, r6
 1468 004a FFF7FEFF 		bl	RTC_Bcd2ToByte
 1469              	.LVL117:
 1470 004e 6070     		strb	r0, [r4, #1]
1292:FWLIB/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
 1471              		.loc 1 1292 0
 1472 0050 2846     		mov	r0, r5
 1473 0052 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1474              	.LVL118:
 1475 0056 A070     		strb	r0, [r4, #2]
1294:FWLIB/src/stm32f4xx_rtc.c ****   }  
 1476              		.loc 1 1294 0
 1477 0058 3846     		mov	r0, r7
 1478 005a FFF7FEFF 		bl	RTC_Bcd2ToByte
 1479              	.LVL119:
ARM GAS  /tmp/cczQSXyD.s 			page 79


 1480 005e 2073     		strb	r0, [r4, #12]
 1481              	.LVL120:
 1482              	.L117:
 1483 0060 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1484              	.LVL121:
 1485              	.L122:
1267:FWLIB/src/stm32f4xx_rtc.c ****   }
 1486              		.loc 1 1267 0
 1487 0062 014B     		ldr	r3, .L123
 1488 0064 DB69     		ldr	r3, [r3, #28]
 1489              	.LVL122:
 1490 0066 D1E7     		b	.L119
 1491              	.L124:
 1492              		.align	2
 1493              	.L123:
 1494 0068 00280040 		.word	1073752064
 1495              		.cfi_endproc
 1496              	.LFE141:
 1498              		.section	.text.RTC_AlarmCmd,"ax",%progbits
 1499              		.align	1
 1500              		.global	RTC_AlarmCmd
 1501              		.syntax unified
 1502              		.thumb
 1503              		.thumb_func
 1504              		.fpu fpv4-sp-d16
 1506              	RTC_AlarmCmd:
 1507              	.LFB142:
1311:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
 1508              		.loc 1 1311 0
 1509              		.cfi_startproc
 1510              		@ args = 0, pretend = 0, frame = 8
 1511              		@ frame_needed = 0, uses_anonymous_args = 0
 1512              		@ link register save eliminated.
 1513              	.LVL123:
 1514 0000 82B0     		sub	sp, sp, #8
 1515              	.LCFI17:
 1516              		.cfi_def_cfa_offset 8
1312:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t alarmstatus = 0x00;
 1517              		.loc 1 1312 0
 1518 0002 0023     		movs	r3, #0
 1519 0004 0193     		str	r3, [sp, #4]
 1520              	.LVL124:
1321:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1521              		.loc 1 1321 0
 1522 0006 154B     		ldr	r3, .L134
 1523 0008 CA22     		movs	r2, #202
 1524 000a 5A62     		str	r2, [r3, #36]
1322:FWLIB/src/stm32f4xx_rtc.c **** 
 1525              		.loc 1 1322 0
 1526 000c 5322     		movs	r2, #83
 1527 000e 5A62     		str	r2, [r3, #36]
1325:FWLIB/src/stm32f4xx_rtc.c ****   {
 1528              		.loc 1 1325 0
 1529 0010 B9B9     		cbnz	r1, .L132
1334:FWLIB/src/stm32f4xx_rtc.c ****    
 1530              		.loc 1 1334 0
 1531 0012 124A     		ldr	r2, .L134
ARM GAS  /tmp/cczQSXyD.s 			page 80


 1532 0014 9368     		ldr	r3, [r2, #8]
 1533 0016 23EA0003 		bic	r3, r3, r0
 1534 001a 9360     		str	r3, [r2, #8]
 1535              	.LVL125:
 1536              	.L129:
1339:FWLIB/src/stm32f4xx_rtc.c ****       alarmcounter++;  
 1537              		.loc 1 1339 0 discriminator 2
 1538 001c 0F4B     		ldr	r3, .L134
 1539 001e DA68     		ldr	r2, [r3, #12]
 1540 0020 010A     		lsrs	r1, r0, #8
 1541 0022 0A40     		ands	r2, r2, r1
 1542              	.LVL126:
1340:FWLIB/src/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 1543              		.loc 1 1340 0 discriminator 2
 1544 0024 019B     		ldr	r3, [sp, #4]
 1545 0026 0133     		adds	r3, r3, #1
 1546 0028 0193     		str	r3, [sp, #4]
1341:FWLIB/src/stm32f4xx_rtc.c ****     
 1547              		.loc 1 1341 0 discriminator 2
 1548 002a 019B     		ldr	r3, [sp, #4]
 1549 002c B3F5803F 		cmp	r3, #65536
 1550 0030 01D0     		beq	.L128
1341:FWLIB/src/stm32f4xx_rtc.c ****     
 1551              		.loc 1 1341 0 is_stmt 0 discriminator 1
 1552 0032 002A     		cmp	r2, #0
 1553 0034 F2D0     		beq	.L129
 1554              	.L128:
1343:FWLIB/src/stm32f4xx_rtc.c ****     {
 1555              		.loc 1 1343 0 is_stmt 1
 1556 0036 094B     		ldr	r3, .L134
 1557 0038 DB68     		ldr	r3, [r3, #12]
 1558 003a 1942     		tst	r1, r3
 1559 003c 0BD0     		beq	.L133
1349:FWLIB/src/stm32f4xx_rtc.c ****     }        
 1560              		.loc 1 1349 0
 1561 003e 0120     		movs	r0, #1
 1562              	.LVL127:
 1563 0040 04E0     		b	.L127
 1564              	.LVL128:
 1565              	.L132:
1327:FWLIB/src/stm32f4xx_rtc.c **** 
 1566              		.loc 1 1327 0
 1567 0042 1A46     		mov	r2, r3
 1568 0044 9B68     		ldr	r3, [r3, #8]
 1569 0046 1843     		orrs	r0, r0, r3
 1570              	.LVL129:
 1571 0048 9060     		str	r0, [r2, #8]
 1572              	.LVL130:
1329:FWLIB/src/stm32f4xx_rtc.c ****   }
 1573              		.loc 1 1329 0
 1574 004a 0120     		movs	r0, #1
 1575              	.LVL131:
 1576              	.L127:
1354:FWLIB/src/stm32f4xx_rtc.c ****   
 1577              		.loc 1 1354 0
 1578 004c FF22     		movs	r2, #255
 1579 004e 034B     		ldr	r3, .L134
ARM GAS  /tmp/cczQSXyD.s 			page 81


 1580 0050 5A62     		str	r2, [r3, #36]
1357:FWLIB/src/stm32f4xx_rtc.c **** 
 1581              		.loc 1 1357 0
 1582 0052 02B0     		add	sp, sp, #8
 1583              	.LCFI18:
 1584              		.cfi_remember_state
 1585              		.cfi_def_cfa_offset 0
 1586              		@ sp needed
 1587 0054 7047     		bx	lr
 1588              	.LVL132:
 1589              	.L133:
 1590              	.LCFI19:
 1591              		.cfi_restore_state
1345:FWLIB/src/stm32f4xx_rtc.c ****     } 
 1592              		.loc 1 1345 0
 1593 0056 0020     		movs	r0, #0
 1594              	.LVL133:
 1595 0058 F8E7     		b	.L127
 1596              	.L135:
 1597 005a 00BF     		.align	2
 1598              	.L134:
 1599 005c 00280040 		.word	1073752064
 1600              		.cfi_endproc
 1601              	.LFE142:
 1603              		.section	.text.RTC_AlarmSubSecondConfig,"ax",%progbits
 1604              		.align	1
 1605              		.global	RTC_AlarmSubSecondConfig
 1606              		.syntax unified
 1607              		.thumb
 1608              		.thumb_func
 1609              		.fpu fpv4-sp-d16
 1611              	RTC_AlarmSubSecondConfig:
 1612              	.LFB143:
1405:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1613              		.loc 1 1405 0
 1614              		.cfi_startproc
 1615              		@ args = 0, pretend = 0, frame = 0
 1616              		@ frame_needed = 0, uses_anonymous_args = 0
 1617              		@ link register save eliminated.
 1618              	.LVL134:
 1619 0000 10B4     		push	{r4}
 1620              	.LCFI20:
 1621              		.cfi_def_cfa_offset 4
 1622              		.cfi_offset 4, -4
 1623              	.LVL135:
1414:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1624              		.loc 1 1414 0
 1625 0002 094B     		ldr	r3, .L141
 1626 0004 CA24     		movs	r4, #202
 1627 0006 5C62     		str	r4, [r3, #36]
1415:FWLIB/src/stm32f4xx_rtc.c ****   
 1628              		.loc 1 1415 0
 1629 0008 5324     		movs	r4, #83
 1630 000a 5C62     		str	r4, [r3, #36]
1418:FWLIB/src/stm32f4xx_rtc.c ****   
 1631              		.loc 1 1418 0
 1632 000c 0A43     		orrs	r2, r2, r1
ARM GAS  /tmp/cczQSXyD.s 			page 82


 1633              	.LVL136:
1420:FWLIB/src/stm32f4xx_rtc.c ****   {
 1634              		.loc 1 1420 0
 1635 000e B0F5807F 		cmp	r0, #256
 1636 0012 07D0     		beq	.L140
1428:FWLIB/src/stm32f4xx_rtc.c ****   }
 1637              		.loc 1 1428 0
 1638 0014 044B     		ldr	r3, .L141
 1639 0016 9A64     		str	r2, [r3, #72]
 1640              	.L138:
1432:FWLIB/src/stm32f4xx_rtc.c **** 
 1641              		.loc 1 1432 0
 1642 0018 FF22     		movs	r2, #255
 1643              	.LVL137:
 1644 001a 034B     		ldr	r3, .L141
 1645 001c 5A62     		str	r2, [r3, #36]
1434:FWLIB/src/stm32f4xx_rtc.c **** 
 1646              		.loc 1 1434 0
 1647 001e 5DF8044B 		ldr	r4, [sp], #4
 1648              	.LCFI21:
 1649              		.cfi_remember_state
 1650              		.cfi_restore 4
 1651              		.cfi_def_cfa_offset 0
 1652 0022 7047     		bx	lr
 1653              	.LVL138:
 1654              	.L140:
 1655              	.LCFI22:
 1656              		.cfi_restore_state
1423:FWLIB/src/stm32f4xx_rtc.c ****   }
 1657              		.loc 1 1423 0
 1658 0024 5A64     		str	r2, [r3, #68]
 1659 0026 F7E7     		b	.L138
 1660              	.L142:
 1661              		.align	2
 1662              	.L141:
 1663 0028 00280040 		.word	1073752064
 1664              		.cfi_endproc
 1665              	.LFE143:
 1667              		.section	.text.RTC_GetAlarmSubSecond,"ax",%progbits
 1668              		.align	1
 1669              		.global	RTC_GetAlarmSubSecond
 1670              		.syntax unified
 1671              		.thumb
 1672              		.thumb_func
 1673              		.fpu fpv4-sp-d16
 1675              	RTC_GetAlarmSubSecond:
 1676              	.LFB144:
1446:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1677              		.loc 1 1446 0
 1678              		.cfi_startproc
 1679              		@ args = 0, pretend = 0, frame = 0
 1680              		@ frame_needed = 0, uses_anonymous_args = 0
 1681              		@ link register save eliminated.
 1682              	.LVL139:
1450:FWLIB/src/stm32f4xx_rtc.c ****   {
 1683              		.loc 1 1450 0
 1684 0000 B0F5807F 		cmp	r0, #256
ARM GAS  /tmp/cczQSXyD.s 			page 83


 1685 0004 04D0     		beq	.L146
1456:FWLIB/src/stm32f4xx_rtc.c ****   } 
 1686              		.loc 1 1456 0
 1687 0006 054B     		ldr	r3, .L147
 1688 0008 986C     		ldr	r0, [r3, #72]
 1689              	.LVL140:
 1690 000a C0F30E00 		ubfx	r0, r0, #0, #15
 1691              	.LVL141:
1460:FWLIB/src/stm32f4xx_rtc.c **** 
 1692              		.loc 1 1460 0
 1693 000e 7047     		bx	lr
 1694              	.LVL142:
 1695              	.L146:
1452:FWLIB/src/stm32f4xx_rtc.c ****   }
 1696              		.loc 1 1452 0
 1697 0010 024B     		ldr	r3, .L147
 1698 0012 586C     		ldr	r0, [r3, #68]
 1699              	.LVL143:
 1700 0014 C0F30E00 		ubfx	r0, r0, #0, #15
 1701              	.LVL144:
 1702 0018 7047     		bx	lr
 1703              	.L148:
 1704 001a 00BF     		.align	2
 1705              	.L147:
 1706 001c 00280040 		.word	1073752064
 1707              		.cfi_endproc
 1708              	.LFE144:
 1710              		.section	.text.RTC_WakeUpClockConfig,"ax",%progbits
 1711              		.align	1
 1712              		.global	RTC_WakeUpClockConfig
 1713              		.syntax unified
 1714              		.thumb
 1715              		.thumb_func
 1716              		.fpu fpv4-sp-d16
 1718              	RTC_WakeUpClockConfig:
 1719              	.LFB145:
1495:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 1720              		.loc 1 1495 0
 1721              		.cfi_startproc
 1722              		@ args = 0, pretend = 0, frame = 0
 1723              		@ frame_needed = 0, uses_anonymous_args = 0
 1724              		@ link register save eliminated.
 1725              	.LVL145:
1500:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1726              		.loc 1 1500 0
 1727 0000 074B     		ldr	r3, .L150
 1728 0002 CA22     		movs	r2, #202
 1729 0004 5A62     		str	r2, [r3, #36]
1501:FWLIB/src/stm32f4xx_rtc.c **** 
 1730              		.loc 1 1501 0
 1731 0006 5322     		movs	r2, #83
 1732 0008 5A62     		str	r2, [r3, #36]
1504:FWLIB/src/stm32f4xx_rtc.c **** 
 1733              		.loc 1 1504 0
 1734 000a 9A68     		ldr	r2, [r3, #8]
 1735 000c 22F00702 		bic	r2, r2, #7
 1736 0010 9A60     		str	r2, [r3, #8]
ARM GAS  /tmp/cczQSXyD.s 			page 84


1507:FWLIB/src/stm32f4xx_rtc.c ****   
 1737              		.loc 1 1507 0
 1738 0012 9A68     		ldr	r2, [r3, #8]
 1739 0014 1043     		orrs	r0, r0, r2
 1740              	.LVL146:
 1741 0016 9860     		str	r0, [r3, #8]
1510:FWLIB/src/stm32f4xx_rtc.c **** }
 1742              		.loc 1 1510 0
 1743 0018 FF22     		movs	r2, #255
 1744 001a 5A62     		str	r2, [r3, #36]
 1745 001c 7047     		bx	lr
 1746              	.L151:
 1747 001e 00BF     		.align	2
 1748              	.L150:
 1749 0020 00280040 		.word	1073752064
 1750              		.cfi_endproc
 1751              	.LFE145:
 1753              		.section	.text.RTC_SetWakeUpCounter,"ax",%progbits
 1754              		.align	1
 1755              		.global	RTC_SetWakeUpCounter
 1756              		.syntax unified
 1757              		.thumb
 1758              		.thumb_func
 1759              		.fpu fpv4-sp-d16
 1761              	RTC_SetWakeUpCounter:
 1762              	.LFB146:
1522:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 1763              		.loc 1 1522 0
 1764              		.cfi_startproc
 1765              		@ args = 0, pretend = 0, frame = 0
 1766              		@ frame_needed = 0, uses_anonymous_args = 0
 1767              		@ link register save eliminated.
 1768              	.LVL147:
1527:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1769              		.loc 1 1527 0
 1770 0000 044B     		ldr	r3, .L153
 1771 0002 CA22     		movs	r2, #202
 1772 0004 5A62     		str	r2, [r3, #36]
1528:FWLIB/src/stm32f4xx_rtc.c ****   
 1773              		.loc 1 1528 0
 1774 0006 5322     		movs	r2, #83
 1775 0008 5A62     		str	r2, [r3, #36]
1531:FWLIB/src/stm32f4xx_rtc.c ****   
 1776              		.loc 1 1531 0
 1777 000a 5861     		str	r0, [r3, #20]
1534:FWLIB/src/stm32f4xx_rtc.c **** }
 1778              		.loc 1 1534 0
 1779 000c FF22     		movs	r2, #255
 1780 000e 5A62     		str	r2, [r3, #36]
 1781 0010 7047     		bx	lr
 1782              	.L154:
 1783 0012 00BF     		.align	2
 1784              	.L153:
 1785 0014 00280040 		.word	1073752064
 1786              		.cfi_endproc
 1787              	.LFE146:
 1789              		.section	.text.RTC_GetWakeUpCounter,"ax",%progbits
ARM GAS  /tmp/cczQSXyD.s 			page 85


 1790              		.align	1
 1791              		.global	RTC_GetWakeUpCounter
 1792              		.syntax unified
 1793              		.thumb
 1794              		.thumb_func
 1795              		.fpu fpv4-sp-d16
 1797              	RTC_GetWakeUpCounter:
 1798              	.LFB147:
1543:FWLIB/src/stm32f4xx_rtc.c ****   /* Get the counter value */
 1799              		.loc 1 1543 0
 1800              		.cfi_startproc
 1801              		@ args = 0, pretend = 0, frame = 0
 1802              		@ frame_needed = 0, uses_anonymous_args = 0
 1803              		@ link register save eliminated.
1545:FWLIB/src/stm32f4xx_rtc.c **** }
 1804              		.loc 1 1545 0
 1805 0000 014B     		ldr	r3, .L156
 1806 0002 5869     		ldr	r0, [r3, #20]
1546:FWLIB/src/stm32f4xx_rtc.c **** 
 1807              		.loc 1 1546 0
 1808 0004 80B2     		uxth	r0, r0
 1809 0006 7047     		bx	lr
 1810              	.L157:
 1811              		.align	2
 1812              	.L156:
 1813 0008 00280040 		.word	1073752064
 1814              		.cfi_endproc
 1815              	.LFE147:
 1817              		.section	.text.RTC_WakeUpCmd,"ax",%progbits
 1818              		.align	1
 1819              		.global	RTC_WakeUpCmd
 1820              		.syntax unified
 1821              		.thumb
 1822              		.thumb_func
 1823              		.fpu fpv4-sp-d16
 1825              	RTC_WakeUpCmd:
 1826              	.LFB148:
1555:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 1827              		.loc 1 1555 0
 1828              		.cfi_startproc
 1829              		@ args = 0, pretend = 0, frame = 8
 1830              		@ frame_needed = 0, uses_anonymous_args = 0
 1831              		@ link register save eliminated.
 1832              	.LVL148:
 1833 0000 82B0     		sub	sp, sp, #8
 1834              	.LCFI23:
 1835              		.cfi_def_cfa_offset 8
1556:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 1836              		.loc 1 1556 0
 1837 0002 0023     		movs	r3, #0
 1838 0004 0193     		str	r3, [sp, #4]
 1839              	.LVL149:
1564:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1840              		.loc 1 1564 0
 1841 0006 164B     		ldr	r3, .L167
 1842 0008 CA22     		movs	r2, #202
 1843 000a 5A62     		str	r2, [r3, #36]
ARM GAS  /tmp/cczQSXyD.s 			page 86


1565:FWLIB/src/stm32f4xx_rtc.c **** 
 1844              		.loc 1 1565 0
 1845 000c 5322     		movs	r2, #83
 1846 000e 5A62     		str	r2, [r3, #36]
1567:FWLIB/src/stm32f4xx_rtc.c ****   {
 1847              		.loc 1 1567 0
 1848 0010 C0B9     		cbnz	r0, .L165
1576:FWLIB/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 1849              		.loc 1 1576 0
 1850 0012 134A     		ldr	r2, .L167
 1851 0014 9368     		ldr	r3, [r2, #8]
 1852 0016 23F48063 		bic	r3, r3, #1024
 1853 001a 9360     		str	r3, [r2, #8]
 1854              	.LVL150:
 1855              	.L162:
1580:FWLIB/src/stm32f4xx_rtc.c ****       wutcounter++;  
 1856              		.loc 1 1580 0 discriminator 2
 1857 001c 104B     		ldr	r3, .L167
 1858 001e DA68     		ldr	r2, [r3, #12]
 1859 0020 02F00402 		and	r2, r2, #4
 1860              	.LVL151:
1581:FWLIB/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 1861              		.loc 1 1581 0 discriminator 2
 1862 0024 019B     		ldr	r3, [sp, #4]
 1863 0026 0133     		adds	r3, r3, #1
 1864 0028 0193     		str	r3, [sp, #4]
1582:FWLIB/src/stm32f4xx_rtc.c ****     
 1865              		.loc 1 1582 0 discriminator 2
 1866 002a 019B     		ldr	r3, [sp, #4]
 1867 002c B3F5803F 		cmp	r3, #65536
 1868 0030 01D0     		beq	.L161
1582:FWLIB/src/stm32f4xx_rtc.c ****     
 1869              		.loc 1 1582 0 is_stmt 0 discriminator 1
 1870 0032 002A     		cmp	r2, #0
 1871 0034 F2D0     		beq	.L162
 1872              	.L161:
1584:FWLIB/src/stm32f4xx_rtc.c ****     {
 1873              		.loc 1 1584 0 is_stmt 1
 1874 0036 0A4B     		ldr	r3, .L167
 1875 0038 DB68     		ldr	r3, [r3, #12]
 1876 003a 13F0040F 		tst	r3, #4
 1877 003e 0CD0     		beq	.L166
1590:FWLIB/src/stm32f4xx_rtc.c ****     }    
 1878              		.loc 1 1590 0
 1879 0040 0120     		movs	r0, #1
 1880              	.LVL152:
 1881 0042 05E0     		b	.L160
 1882              	.LVL153:
 1883              	.L165:
1570:FWLIB/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 1884              		.loc 1 1570 0
 1885 0044 1A46     		mov	r2, r3
 1886 0046 9B68     		ldr	r3, [r3, #8]
 1887 0048 43F48063 		orr	r3, r3, #1024
 1888 004c 9360     		str	r3, [r2, #8]
 1889              	.LVL154:
1571:FWLIB/src/stm32f4xx_rtc.c ****   }
ARM GAS  /tmp/cczQSXyD.s 			page 87


 1890              		.loc 1 1571 0
 1891 004e 0120     		movs	r0, #1
 1892              	.LVL155:
 1893              	.L160:
1595:FWLIB/src/stm32f4xx_rtc.c ****   
 1894              		.loc 1 1595 0
 1895 0050 FF22     		movs	r2, #255
 1896 0052 034B     		ldr	r3, .L167
 1897 0054 5A62     		str	r2, [r3, #36]
1598:FWLIB/src/stm32f4xx_rtc.c **** 
 1898              		.loc 1 1598 0
 1899 0056 02B0     		add	sp, sp, #8
 1900              	.LCFI24:
 1901              		.cfi_remember_state
 1902              		.cfi_def_cfa_offset 0
 1903              		@ sp needed
 1904 0058 7047     		bx	lr
 1905              	.LVL156:
 1906              	.L166:
 1907              	.LCFI25:
 1908              		.cfi_restore_state
1586:FWLIB/src/stm32f4xx_rtc.c ****     }
 1909              		.loc 1 1586 0
 1910 005a 0020     		movs	r0, #0
 1911              	.LVL157:
 1912 005c F8E7     		b	.L160
 1913              	.L168:
 1914 005e 00BF     		.align	2
 1915              	.L167:
 1916 0060 00280040 		.word	1073752064
 1917              		.cfi_endproc
 1918              	.LFE148:
 1920              		.section	.text.RTC_DayLightSavingConfig,"ax",%progbits
 1921              		.align	1
 1922              		.global	RTC_DayLightSavingConfig
 1923              		.syntax unified
 1924              		.thumb
 1925              		.thumb_func
 1926              		.fpu fpv4-sp-d16
 1928              	RTC_DayLightSavingConfig:
 1929              	.LFB149:
1632:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 1930              		.loc 1 1632 0
 1931              		.cfi_startproc
 1932              		@ args = 0, pretend = 0, frame = 0
 1933              		@ frame_needed = 0, uses_anonymous_args = 0
 1934              		@ link register save eliminated.
 1935              	.LVL158:
1638:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1936              		.loc 1 1638 0
 1937 0000 074B     		ldr	r3, .L170
 1938 0002 CA22     		movs	r2, #202
 1939 0004 5A62     		str	r2, [r3, #36]
1639:FWLIB/src/stm32f4xx_rtc.c **** 
 1940              		.loc 1 1639 0
 1941 0006 5322     		movs	r2, #83
 1942 0008 5A62     		str	r2, [r3, #36]
ARM GAS  /tmp/cczQSXyD.s 			page 88


1642:FWLIB/src/stm32f4xx_rtc.c **** 
 1943              		.loc 1 1642 0
 1944 000a 9A68     		ldr	r2, [r3, #8]
 1945 000c 22F48022 		bic	r2, r2, #262144
 1946 0010 9A60     		str	r2, [r3, #8]
1645:FWLIB/src/stm32f4xx_rtc.c **** 
 1947              		.loc 1 1645 0
 1948 0012 9A68     		ldr	r2, [r3, #8]
 1949 0014 0143     		orrs	r1, r1, r0
 1950              	.LVL159:
 1951 0016 0A43     		orrs	r2, r2, r1
 1952 0018 9A60     		str	r2, [r3, #8]
1648:FWLIB/src/stm32f4xx_rtc.c **** }
 1953              		.loc 1 1648 0
 1954 001a FF22     		movs	r2, #255
 1955 001c 5A62     		str	r2, [r3, #36]
 1956 001e 7047     		bx	lr
 1957              	.L171:
 1958              		.align	2
 1959              	.L170:
 1960 0020 00280040 		.word	1073752064
 1961              		.cfi_endproc
 1962              	.LFE149:
 1964              		.section	.text.RTC_GetStoreOperation,"ax",%progbits
 1965              		.align	1
 1966              		.global	RTC_GetStoreOperation
 1967              		.syntax unified
 1968              		.thumb
 1969              		.thumb_func
 1970              		.fpu fpv4-sp-d16
 1972              	RTC_GetStoreOperation:
 1973              	.LFB150:
1659:FWLIB/src/stm32f4xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
 1974              		.loc 1 1659 0
 1975              		.cfi_startproc
 1976              		@ args = 0, pretend = 0, frame = 0
 1977              		@ frame_needed = 0, uses_anonymous_args = 0
 1978              		@ link register save eliminated.
1660:FWLIB/src/stm32f4xx_rtc.c **** }
 1979              		.loc 1 1660 0
 1980 0000 024B     		ldr	r3, .L173
 1981 0002 9868     		ldr	r0, [r3, #8]
1661:FWLIB/src/stm32f4xx_rtc.c **** 
 1982              		.loc 1 1661 0
 1983 0004 00F48020 		and	r0, r0, #262144
 1984 0008 7047     		bx	lr
 1985              	.L174:
 1986 000a 00BF     		.align	2
 1987              	.L173:
 1988 000c 00280040 		.word	1073752064
 1989              		.cfi_endproc
 1990              	.LFE150:
 1992              		.section	.text.RTC_OutputConfig,"ax",%progbits
 1993              		.align	1
 1994              		.global	RTC_OutputConfig
 1995              		.syntax unified
 1996              		.thumb
ARM GAS  /tmp/cczQSXyD.s 			page 89


 1997              		.thumb_func
 1998              		.fpu fpv4-sp-d16
 2000              	RTC_OutputConfig:
 2001              	.LFB151:
1698:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2002              		.loc 1 1698 0
 2003              		.cfi_startproc
 2004              		@ args = 0, pretend = 0, frame = 0
 2005              		@ frame_needed = 0, uses_anonymous_args = 0
 2006              		@ link register save eliminated.
 2007              	.LVL160:
1704:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2008              		.loc 1 1704 0
 2009 0000 074B     		ldr	r3, .L176
 2010 0002 CA22     		movs	r2, #202
 2011 0004 5A62     		str	r2, [r3, #36]
1705:FWLIB/src/stm32f4xx_rtc.c **** 
 2012              		.loc 1 1705 0
 2013 0006 5322     		movs	r2, #83
 2014 0008 5A62     		str	r2, [r3, #36]
1708:FWLIB/src/stm32f4xx_rtc.c **** 
 2015              		.loc 1 1708 0
 2016 000a 9A68     		ldr	r2, [r3, #8]
 2017 000c 22F4E002 		bic	r2, r2, #7340032
 2018 0010 9A60     		str	r2, [r3, #8]
1711:FWLIB/src/stm32f4xx_rtc.c **** 
 2019              		.loc 1 1711 0
 2020 0012 9A68     		ldr	r2, [r3, #8]
 2021 0014 0143     		orrs	r1, r1, r0
 2022              	.LVL161:
 2023 0016 0A43     		orrs	r2, r2, r1
 2024 0018 9A60     		str	r2, [r3, #8]
1714:FWLIB/src/stm32f4xx_rtc.c **** }
 2025              		.loc 1 1714 0
 2026 001a FF22     		movs	r2, #255
 2027 001c 5A62     		str	r2, [r3, #36]
 2028 001e 7047     		bx	lr
 2029              	.L177:
 2030              		.align	2
 2031              	.L176:
 2032 0020 00280040 		.word	1073752064
 2033              		.cfi_endproc
 2034              	.LFE151:
 2036              		.section	.text.RTC_CoarseCalibConfig,"ax",%progbits
 2037              		.align	1
 2038              		.global	RTC_CoarseCalibConfig
 2039              		.syntax unified
 2040              		.thumb
 2041              		.thumb_func
 2042              		.fpu fpv4-sp-d16
 2044              	RTC_CoarseCalibConfig:
 2045              	.LFB152:
1752:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2046              		.loc 1 1752 0
 2047              		.cfi_startproc
 2048              		@ args = 0, pretend = 0, frame = 0
 2049              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cczQSXyD.s 			page 90


 2050              	.LVL162:
 2051 0000 38B5     		push	{r3, r4, r5, lr}
 2052              	.LCFI26:
 2053              		.cfi_def_cfa_offset 16
 2054              		.cfi_offset 3, -16
 2055              		.cfi_offset 4, -12
 2056              		.cfi_offset 5, -8
 2057              		.cfi_offset 14, -4
 2058 0002 0446     		mov	r4, r0
 2059 0004 0D46     		mov	r5, r1
 2060              	.LVL163:
1760:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2061              		.loc 1 1760 0
 2062 0006 0A4B     		ldr	r3, .L182
 2063 0008 CA22     		movs	r2, #202
 2064 000a 5A62     		str	r2, [r3, #36]
1761:FWLIB/src/stm32f4xx_rtc.c **** 
 2065              		.loc 1 1761 0
 2066 000c 5322     		movs	r2, #83
 2067 000e 5A62     		str	r2, [r3, #36]
1764:FWLIB/src/stm32f4xx_rtc.c ****   {
 2068              		.loc 1 1764 0
 2069 0010 FFF7FEFF 		bl	RTC_EnterInitMode
 2070              	.LVL164:
 2071 0014 0346     		mov	r3, r0
 2072 0016 20B9     		cbnz	r0, .L181
 2073              	.LVL165:
 2074              	.L179:
1779:FWLIB/src/stm32f4xx_rtc.c ****   
 2075              		.loc 1 1779 0
 2076 0018 FF21     		movs	r1, #255
 2077 001a 054A     		ldr	r2, .L182
 2078 001c 5162     		str	r1, [r2, #36]
1782:FWLIB/src/stm32f4xx_rtc.c **** 
 2079              		.loc 1 1782 0
 2080 001e 1846     		mov	r0, r3
 2081 0020 38BD     		pop	{r3, r4, r5, pc}
 2082              	.LVL166:
 2083              	.L181:
1771:FWLIB/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 2084              		.loc 1 1771 0
 2085 0022 2C43     		orrs	r4, r4, r5
 2086              	.LVL167:
 2087 0024 024B     		ldr	r3, .L182
 2088 0026 9C61     		str	r4, [r3, #24]
1773:FWLIB/src/stm32f4xx_rtc.c ****     
 2089              		.loc 1 1773 0
 2090 0028 FFF7FEFF 		bl	RTC_ExitInitMode
 2091              	.LVL168:
1775:FWLIB/src/stm32f4xx_rtc.c ****   } 
 2092              		.loc 1 1775 0
 2093 002c 0123     		movs	r3, #1
 2094 002e F3E7     		b	.L179
 2095              	.L183:
 2096              		.align	2
 2097              	.L182:
 2098 0030 00280040 		.word	1073752064
ARM GAS  /tmp/cczQSXyD.s 			page 91


 2099              		.cfi_endproc
 2100              	.LFE152:
 2102              		.section	.text.RTC_CoarseCalibCmd,"ax",%progbits
 2103              		.align	1
 2104              		.global	RTC_CoarseCalibCmd
 2105              		.syntax unified
 2106              		.thumb
 2107              		.thumb_func
 2108              		.fpu fpv4-sp-d16
 2110              	RTC_CoarseCalibCmd:
 2111              	.LFB153:
1793:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2112              		.loc 1 1793 0
 2113              		.cfi_startproc
 2114              		@ args = 0, pretend = 0, frame = 0
 2115              		@ frame_needed = 0, uses_anonymous_args = 0
 2116              	.LVL169:
 2117 0000 10B5     		push	{r4, lr}
 2118              	.LCFI27:
 2119              		.cfi_def_cfa_offset 8
 2120              		.cfi_offset 4, -8
 2121              		.cfi_offset 14, -4
 2122 0002 0446     		mov	r4, r0
 2123              	.LVL170:
1800:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2124              		.loc 1 1800 0
 2125 0004 0E4B     		ldr	r3, .L189
 2126 0006 CA22     		movs	r2, #202
 2127 0008 5A62     		str	r2, [r3, #36]
1801:FWLIB/src/stm32f4xx_rtc.c ****   
 2128              		.loc 1 1801 0
 2129 000a 5322     		movs	r2, #83
 2130 000c 5A62     		str	r2, [r3, #36]
1804:FWLIB/src/stm32f4xx_rtc.c ****   {
 2131              		.loc 1 1804 0
 2132 000e FFF7FEFF 		bl	RTC_EnterInitMode
 2133              	.LVL171:
 2134 0012 0346     		mov	r3, r0
 2135 0014 40B1     		cbz	r0, .L185
1810:FWLIB/src/stm32f4xx_rtc.c ****     {
 2136              		.loc 1 1810 0
 2137 0016 64B1     		cbz	r4, .L186
1813:FWLIB/src/stm32f4xx_rtc.c ****     }
 2138              		.loc 1 1813 0
 2139 0018 094A     		ldr	r2, .L189
 2140 001a 9368     		ldr	r3, [r2, #8]
 2141 001c 43F08003 		orr	r3, r3, #128
 2142 0020 9360     		str	r3, [r2, #8]
 2143              	.L187:
1821:FWLIB/src/stm32f4xx_rtc.c ****     
 2144              		.loc 1 1821 0
 2145 0022 FFF7FEFF 		bl	RTC_ExitInitMode
 2146              	.LVL172:
1823:FWLIB/src/stm32f4xx_rtc.c ****   } 
 2147              		.loc 1 1823 0
 2148 0026 0123     		movs	r3, #1
 2149              	.LVL173:
ARM GAS  /tmp/cczQSXyD.s 			page 92


 2150              	.L185:
1827:FWLIB/src/stm32f4xx_rtc.c ****   
 2151              		.loc 1 1827 0
 2152 0028 FF21     		movs	r1, #255
 2153 002a 054A     		ldr	r2, .L189
 2154 002c 5162     		str	r1, [r2, #36]
1830:FWLIB/src/stm32f4xx_rtc.c **** 
 2155              		.loc 1 1830 0
 2156 002e 1846     		mov	r0, r3
 2157 0030 10BD     		pop	{r4, pc}
 2158              	.LVL174:
 2159              	.L186:
1818:FWLIB/src/stm32f4xx_rtc.c ****     }
 2160              		.loc 1 1818 0
 2161 0032 034A     		ldr	r2, .L189
 2162 0034 9368     		ldr	r3, [r2, #8]
 2163 0036 23F08003 		bic	r3, r3, #128
 2164 003a 9360     		str	r3, [r2, #8]
 2165 003c F1E7     		b	.L187
 2166              	.L190:
 2167 003e 00BF     		.align	2
 2168              	.L189:
 2169 0040 00280040 		.word	1073752064
 2170              		.cfi_endproc
 2171              	.LFE153:
 2173              		.section	.text.RTC_CalibOutputCmd,"ax",%progbits
 2174              		.align	1
 2175              		.global	RTC_CalibOutputCmd
 2176              		.syntax unified
 2177              		.thumb
 2178              		.thumb_func
 2179              		.fpu fpv4-sp-d16
 2181              	RTC_CalibOutputCmd:
 2182              	.LFB154:
1839:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2183              		.loc 1 1839 0
 2184              		.cfi_startproc
 2185              		@ args = 0, pretend = 0, frame = 0
 2186              		@ frame_needed = 0, uses_anonymous_args = 0
 2187              		@ link register save eliminated.
 2188              	.LVL175:
1844:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2189              		.loc 1 1844 0
 2190 0000 0A4B     		ldr	r3, .L195
 2191 0002 CA22     		movs	r2, #202
 2192 0004 5A62     		str	r2, [r3, #36]
1845:FWLIB/src/stm32f4xx_rtc.c ****   
 2193              		.loc 1 1845 0
 2194 0006 5322     		movs	r2, #83
 2195 0008 5A62     		str	r2, [r3, #36]
1847:FWLIB/src/stm32f4xx_rtc.c ****   {
 2196              		.loc 1 1847 0
 2197 000a 40B9     		cbnz	r0, .L194
1855:FWLIB/src/stm32f4xx_rtc.c ****   }
 2198              		.loc 1 1855 0
 2199 000c 074A     		ldr	r2, .L195
 2200 000e 9368     		ldr	r3, [r2, #8]
ARM GAS  /tmp/cczQSXyD.s 			page 93


 2201 0010 23F40003 		bic	r3, r3, #8388608
 2202 0014 9360     		str	r3, [r2, #8]
 2203              	.L193:
1859:FWLIB/src/stm32f4xx_rtc.c **** }
 2204              		.loc 1 1859 0
 2205 0016 FF22     		movs	r2, #255
 2206 0018 044B     		ldr	r3, .L195
 2207 001a 5A62     		str	r2, [r3, #36]
 2208 001c 7047     		bx	lr
 2209              	.L194:
1850:FWLIB/src/stm32f4xx_rtc.c ****   }
 2210              		.loc 1 1850 0
 2211 001e 1A46     		mov	r2, r3
 2212 0020 9B68     		ldr	r3, [r3, #8]
 2213 0022 43F40003 		orr	r3, r3, #8388608
 2214 0026 9360     		str	r3, [r2, #8]
 2215 0028 F5E7     		b	.L193
 2216              	.L196:
 2217 002a 00BF     		.align	2
 2218              	.L195:
 2219 002c 00280040 		.word	1073752064
 2220              		.cfi_endproc
 2221              	.LFE154:
 2223              		.section	.text.RTC_CalibOutputConfig,"ax",%progbits
 2224              		.align	1
 2225              		.global	RTC_CalibOutputConfig
 2226              		.syntax unified
 2227              		.thumb
 2228              		.thumb_func
 2229              		.fpu fpv4-sp-d16
 2231              	RTC_CalibOutputConfig:
 2232              	.LFB155:
1871:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2233              		.loc 1 1871 0
 2234              		.cfi_startproc
 2235              		@ args = 0, pretend = 0, frame = 0
 2236              		@ frame_needed = 0, uses_anonymous_args = 0
 2237              		@ link register save eliminated.
 2238              	.LVL176:
1876:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2239              		.loc 1 1876 0
 2240 0000 074B     		ldr	r3, .L198
 2241 0002 CA22     		movs	r2, #202
 2242 0004 5A62     		str	r2, [r3, #36]
1877:FWLIB/src/stm32f4xx_rtc.c ****   
 2243              		.loc 1 1877 0
 2244 0006 5322     		movs	r2, #83
 2245 0008 5A62     		str	r2, [r3, #36]
1880:FWLIB/src/stm32f4xx_rtc.c **** 
 2246              		.loc 1 1880 0
 2247 000a 9A68     		ldr	r2, [r3, #8]
 2248 000c 22F40022 		bic	r2, r2, #524288
 2249 0010 9A60     		str	r2, [r3, #8]
1883:FWLIB/src/stm32f4xx_rtc.c **** 
 2250              		.loc 1 1883 0
 2251 0012 9A68     		ldr	r2, [r3, #8]
 2252 0014 1043     		orrs	r0, r0, r2
ARM GAS  /tmp/cczQSXyD.s 			page 94


 2253              	.LVL177:
 2254 0016 9860     		str	r0, [r3, #8]
1886:FWLIB/src/stm32f4xx_rtc.c **** }
 2255              		.loc 1 1886 0
 2256 0018 FF22     		movs	r2, #255
 2257 001a 5A62     		str	r2, [r3, #36]
 2258 001c 7047     		bx	lr
 2259              	.L199:
 2260 001e 00BF     		.align	2
 2261              	.L198:
 2262 0020 00280040 		.word	1073752064
 2263              		.cfi_endproc
 2264              	.LFE155:
 2266              		.section	.text.RTC_SmoothCalibConfig,"ax",%progbits
 2267              		.align	1
 2268              		.global	RTC_SmoothCalibConfig
 2269              		.syntax unified
 2270              		.thumb
 2271              		.thumb_func
 2272              		.fpu fpv4-sp-d16
 2274              	RTC_SmoothCalibConfig:
 2275              	.LFB156:
1909:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2276              		.loc 1 1909 0
 2277              		.cfi_startproc
 2278              		@ args = 0, pretend = 0, frame = 0
 2279              		@ frame_needed = 0, uses_anonymous_args = 0
 2280              		@ link register save eliminated.
 2281              	.LVL178:
 2282 0000 10B4     		push	{r4}
 2283              	.LCFI28:
 2284              		.cfi_def_cfa_offset 4
 2285              		.cfi_offset 4, -4
 2286              	.LVL179:
1919:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2287              		.loc 1 1919 0
 2288 0002 134B     		ldr	r3, .L208
 2289 0004 CA24     		movs	r4, #202
 2290 0006 5C62     		str	r4, [r3, #36]
1920:FWLIB/src/stm32f4xx_rtc.c ****   
 2291              		.loc 1 1920 0
 2292 0008 5324     		movs	r4, #83
 2293 000a 5C62     		str	r4, [r3, #36]
1923:FWLIB/src/stm32f4xx_rtc.c ****   {
 2294              		.loc 1 1923 0
 2295 000c DB68     		ldr	r3, [r3, #12]
 2296 000e 13F4803F 		tst	r3, #65536
 2297 0012 19D1     		bne	.L205
 2298              	.LVL180:
 2299              	.L202:
1933:FWLIB/src/stm32f4xx_rtc.c ****   {
 2300              		.loc 1 1933 0
 2301 0014 0E4B     		ldr	r3, .L208
 2302 0016 DB68     		ldr	r3, [r3, #12]
 2303 0018 13F4803F 		tst	r3, #65536
 2304 001c 16D1     		bne	.L206
1936:FWLIB/src/stm32f4xx_rtc.c **** 
ARM GAS  /tmp/cczQSXyD.s 			page 95


 2305              		.loc 1 1936 0
 2306 001e 0843     		orrs	r0, r0, r1
 2307              	.LVL181:
 2308 0020 0243     		orrs	r2, r2, r0
 2309              	.LVL182:
 2310 0022 0B4B     		ldr	r3, .L208
 2311 0024 DA63     		str	r2, [r3, #60]
 2312              	.LVL183:
1938:FWLIB/src/stm32f4xx_rtc.c ****   }
 2313              		.loc 1 1938 0
 2314 0026 0120     		movs	r0, #1
 2315              	.LVL184:
 2316              	.L204:
1946:FWLIB/src/stm32f4xx_rtc.c ****   
 2317              		.loc 1 1946 0
 2318 0028 FF22     		movs	r2, #255
 2319 002a 094B     		ldr	r3, .L208
 2320 002c 5A62     		str	r2, [r3, #36]
1949:FWLIB/src/stm32f4xx_rtc.c **** 
 2321              		.loc 1 1949 0
 2322 002e 5DF8044B 		ldr	r4, [sp], #4
 2323              	.LCFI29:
 2324              		.cfi_remember_state
 2325              		.cfi_restore 4
 2326              		.cfi_def_cfa_offset 0
 2327 0032 7047     		bx	lr
 2328              	.LVL185:
 2329              	.L203:
 2330              	.LCFI30:
 2331              		.cfi_restore_state
1928:FWLIB/src/stm32f4xx_rtc.c ****     }
 2332              		.loc 1 1928 0
 2333 0034 0133     		adds	r3, r3, #1
 2334              	.LVL186:
 2335              	.L201:
1926:FWLIB/src/stm32f4xx_rtc.c ****     {
 2336              		.loc 1 1926 0
 2337 0036 064C     		ldr	r4, .L208
 2338 0038 E468     		ldr	r4, [r4, #12]
 2339 003a 14F4803F 		tst	r4, #65536
 2340 003e E9D0     		beq	.L202
1926:FWLIB/src/stm32f4xx_rtc.c ****     {
 2341              		.loc 1 1926 0 is_stmt 0 discriminator 1
 2342 0040 B3F5003F 		cmp	r3, #131072
 2343 0044 F6D1     		bne	.L203
 2344 0046 E5E7     		b	.L202
 2345              	.LVL187:
 2346              	.L205:
 2347 0048 0023     		movs	r3, #0
 2348 004a F4E7     		b	.L201
 2349              	.LVL188:
 2350              	.L206:
1942:FWLIB/src/stm32f4xx_rtc.c ****   }
 2351              		.loc 1 1942 0 is_stmt 1
 2352 004c 0020     		movs	r0, #0
 2353              	.LVL189:
 2354 004e EBE7     		b	.L204
ARM GAS  /tmp/cczQSXyD.s 			page 96


 2355              	.L209:
 2356              		.align	2
 2357              	.L208:
 2358 0050 00280040 		.word	1073752064
 2359              		.cfi_endproc
 2360              	.LFE156:
 2362              		.section	.text.RTC_TimeStampCmd,"ax",%progbits
 2363              		.align	1
 2364              		.global	RTC_TimeStampCmd
 2365              		.syntax unified
 2366              		.thumb
 2367              		.thumb_func
 2368              		.fpu fpv4-sp-d16
 2370              	RTC_TimeStampCmd:
 2371              	.LFB157:
1983:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2372              		.loc 1 1983 0
 2373              		.cfi_startproc
 2374              		@ args = 0, pretend = 0, frame = 0
 2375              		@ frame_needed = 0, uses_anonymous_args = 0
 2376              		@ link register save eliminated.
 2377              	.LVL190:
1991:FWLIB/src/stm32f4xx_rtc.c **** 
 2378              		.loc 1 1991 0
 2379 0000 0A4B     		ldr	r3, .L214
 2380 0002 9B68     		ldr	r3, [r3, #8]
 2381 0004 23F40063 		bic	r3, r3, #2048
 2382 0008 23F00803 		bic	r3, r3, #8
 2383              	.LVL191:
1994:FWLIB/src/stm32f4xx_rtc.c ****   {
 2384              		.loc 1 1994 0
 2385 000c 49B9     		cbnz	r1, .L213
2000:FWLIB/src/stm32f4xx_rtc.c ****   }
 2386              		.loc 1 2000 0
 2387 000e 0343     		orrs	r3, r3, r0
 2388              	.LVL192:
 2389              	.L212:
2004:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2390              		.loc 1 2004 0
 2391 0010 064A     		ldr	r2, .L214
 2392 0012 CA21     		movs	r1, #202
 2393              	.LVL193:
 2394 0014 5162     		str	r1, [r2, #36]
2005:FWLIB/src/stm32f4xx_rtc.c **** 
 2395              		.loc 1 2005 0
 2396 0016 5321     		movs	r1, #83
 2397 0018 5162     		str	r1, [r2, #36]
2008:FWLIB/src/stm32f4xx_rtc.c **** 
 2398              		.loc 1 2008 0
 2399 001a 9360     		str	r3, [r2, #8]
2011:FWLIB/src/stm32f4xx_rtc.c **** }
 2400              		.loc 1 2011 0
 2401 001c FF23     		movs	r3, #255
 2402              	.LVL194:
 2403 001e 5362     		str	r3, [r2, #36]
 2404              	.LVL195:
 2405 0020 7047     		bx	lr
ARM GAS  /tmp/cczQSXyD.s 			page 97


 2406              	.LVL196:
 2407              	.L213:
1996:FWLIB/src/stm32f4xx_rtc.c ****   }
 2408              		.loc 1 1996 0
 2409 0022 0343     		orrs	r3, r3, r0
 2410              	.LVL197:
 2411 0024 43F40063 		orr	r3, r3, #2048
 2412              	.LVL198:
 2413 0028 F2E7     		b	.L212
 2414              	.L215:
 2415 002a 00BF     		.align	2
 2416              	.L214:
 2417 002c 00280040 		.word	1073752064
 2418              		.cfi_endproc
 2419              	.LFE157:
 2421              		.section	.text.RTC_GetTimeStamp,"ax",%progbits
 2422              		.align	1
 2423              		.global	RTC_GetTimeStamp
 2424              		.syntax unified
 2425              		.thumb
 2426              		.thumb_func
 2427              		.fpu fpv4-sp-d16
 2429              	RTC_GetTimeStamp:
 2430              	.LFB158:
2028:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
 2431              		.loc 1 2028 0
 2432              		.cfi_startproc
 2433              		@ args = 0, pretend = 0, frame = 0
 2434              		@ frame_needed = 0, uses_anonymous_args = 0
 2435              	.LVL199:
 2436 0000 70B5     		push	{r4, r5, r6, lr}
 2437              	.LCFI31:
 2438              		.cfi_def_cfa_offset 16
 2439              		.cfi_offset 4, -16
 2440              		.cfi_offset 5, -12
 2441              		.cfi_offset 6, -8
 2442              		.cfi_offset 14, -4
 2443              	.LVL200:
2035:FWLIB/src/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 2444              		.loc 1 2035 0
 2445 0002 1D4B     		ldr	r3, .L219
 2446 0004 1C6B     		ldr	r4, [r3, #48]
 2447 0006 04F07F34 		and	r4, r4, #2139062143
 2448 000a 24F0FE44 		bic	r4, r4, #2130706432
 2449              	.LVL201:
2036:FWLIB/src/stm32f4xx_rtc.c **** 
 2450              		.loc 1 2036 0
 2451 000e 5B6B     		ldr	r3, [r3, #52]
 2452 0010 23F07F43 		bic	r3, r3, #-16777216
 2453 0014 23F0C003 		bic	r3, r3, #192
 2454              	.LVL202:
2039:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 2455              		.loc 1 2039 0
 2456 0018 250C     		lsrs	r5, r4, #16
 2457 001a 05F03F06 		and	r6, r5, #63
 2458 001e 0E70     		strb	r6, [r1]
2040:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
ARM GAS  /tmp/cczQSXyD.s 			page 98


 2459              		.loc 1 2040 0
 2460 0020 C4F30626 		ubfx	r6, r4, #8, #7
 2461 0024 4E70     		strb	r6, [r1, #1]
2041:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 2462              		.loc 1 2041 0
 2463 0026 8C70     		strb	r4, [r1, #2]
2042:FWLIB/src/stm32f4xx_rtc.c **** 
 2464              		.loc 1 2042 0
 2465 0028 05F04005 		and	r5, r5, #64
 2466 002c CD70     		strb	r5, [r1, #3]
2045:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 2467              		.loc 1 2045 0
 2468 002e 0024     		movs	r4, #0
 2469              	.LVL203:
 2470 0030 D470     		strb	r4, [r2, #3]
2046:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 2471              		.loc 1 2046 0
 2472 0032 C3F30424 		ubfx	r4, r3, #8, #5
 2473 0036 5470     		strb	r4, [r2, #1]
2047:FWLIB/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 2474              		.loc 1 2047 0
 2475 0038 9370     		strb	r3, [r2, #2]
2048:FWLIB/src/stm32f4xx_rtc.c **** 
 2476              		.loc 1 2048 0
 2477 003a C3F34233 		ubfx	r3, r3, #13, #3
 2478              	.LVL204:
 2479 003e 1370     		strb	r3, [r2]
2051:FWLIB/src/stm32f4xx_rtc.c ****   {
 2480              		.loc 1 2051 0
 2481 0040 C8B9     		cbnz	r0, .L216
 2482 0042 1446     		mov	r4, r2
 2483 0044 0D46     		mov	r5, r1
2054:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 2484              		.loc 1 2054 0
 2485 0046 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 2486              	.LVL205:
 2487 0048 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2488              	.LVL206:
 2489 004c 2870     		strb	r0, [r5]
2055:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 2490              		.loc 1 2055 0
 2491 004e 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 2492 0050 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2493              	.LVL207:
 2494 0054 6870     		strb	r0, [r5, #1]
2056:FWLIB/src/stm32f4xx_rtc.c **** 
 2495              		.loc 1 2056 0
 2496 0056 A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 2497 0058 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2498              	.LVL208:
 2499 005c A870     		strb	r0, [r5, #2]
2059:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 2500              		.loc 1 2059 0
 2501 005e 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2502 0060 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2503              	.LVL209:
 2504 0064 6070     		strb	r0, [r4, #1]
ARM GAS  /tmp/cczQSXyD.s 			page 99


2060:FWLIB/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 2505              		.loc 1 2060 0
 2506 0066 A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 2507 0068 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2508              	.LVL210:
 2509 006c A070     		strb	r0, [r4, #2]
2061:FWLIB/src/stm32f4xx_rtc.c ****   }
 2510              		.loc 1 2061 0
 2511 006e 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 2512 0070 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2513              	.LVL211:
 2514 0074 2070     		strb	r0, [r4]
 2515              	.LVL212:
 2516              	.L216:
 2517 0076 70BD     		pop	{r4, r5, r6, pc}
 2518              	.L220:
 2519              		.align	2
 2520              	.L219:
 2521 0078 00280040 		.word	1073752064
 2522              		.cfi_endproc
 2523              	.LFE158:
 2525              		.section	.text.RTC_GetTimeStampSubSecond,"ax",%progbits
 2526              		.align	1
 2527              		.global	RTC_GetTimeStampSubSecond
 2528              		.syntax unified
 2529              		.thumb
 2530              		.thumb_func
 2531              		.fpu fpv4-sp-d16
 2533              	RTC_GetTimeStampSubSecond:
 2534              	.LFB159:
2071:FWLIB/src/stm32f4xx_rtc.c ****   /* Get timestamp sub seconds values from the correspondent registers */
 2535              		.loc 1 2071 0
 2536              		.cfi_startproc
 2537              		@ args = 0, pretend = 0, frame = 0
 2538              		@ frame_needed = 0, uses_anonymous_args = 0
 2539              		@ link register save eliminated.
2073:FWLIB/src/stm32f4xx_rtc.c **** }
 2540              		.loc 1 2073 0
 2541 0000 014B     		ldr	r3, .L222
 2542 0002 986B     		ldr	r0, [r3, #56]
2074:FWLIB/src/stm32f4xx_rtc.c **** 
 2543              		.loc 1 2074 0
 2544 0004 7047     		bx	lr
 2545              	.L223:
 2546 0006 00BF     		.align	2
 2547              	.L222:
 2548 0008 00280040 		.word	1073752064
 2549              		.cfi_endproc
 2550              	.LFE159:
 2552              		.section	.text.RTC_TamperTriggerConfig,"ax",%progbits
 2553              		.align	1
 2554              		.global	RTC_TamperTriggerConfig
 2555              		.syntax unified
 2556              		.thumb
 2557              		.thumb_func
 2558              		.fpu fpv4-sp-d16
 2560              	RTC_TamperTriggerConfig:
ARM GAS  /tmp/cczQSXyD.s 			page 100


 2561              	.LFB160:
2106:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2562              		.loc 1 2106 0
 2563              		.cfi_startproc
 2564              		@ args = 0, pretend = 0, frame = 0
 2565              		@ frame_needed = 0, uses_anonymous_args = 0
 2566              		@ link register save eliminated.
 2567              	.LVL213:
2111:FWLIB/src/stm32f4xx_rtc.c ****   {  
 2568              		.loc 1 2111 0
 2569 0000 29B1     		cbz	r1, .L227
2119:FWLIB/src/stm32f4xx_rtc.c ****   }  
 2570              		.loc 1 2119 0
 2571 0002 064A     		ldr	r2, .L228
 2572 0004 136C     		ldr	r3, [r2, #64]
 2573 0006 43EA4000 		orr	r0, r3, r0, lsl #1
 2574              	.LVL214:
 2575 000a 1064     		str	r0, [r2, #64]
 2576 000c 7047     		bx	lr
 2577              	.LVL215:
 2578              	.L227:
2114:FWLIB/src/stm32f4xx_rtc.c ****   }
 2579              		.loc 1 2114 0
 2580 000e 034A     		ldr	r2, .L228
 2581 0010 136C     		ldr	r3, [r2, #64]
 2582 0012 23EA4000 		bic	r0, r3, r0, lsl #1
 2583              	.LVL216:
 2584 0016 1064     		str	r0, [r2, #64]
 2585 0018 7047     		bx	lr
 2586              	.L229:
 2587 001a 00BF     		.align	2
 2588              	.L228:
 2589 001c 00280040 		.word	1073752064
 2590              		.cfi_endproc
 2591              	.LFE160:
 2593              		.section	.text.RTC_TamperCmd,"ax",%progbits
 2594              		.align	1
 2595              		.global	RTC_TamperCmd
 2596              		.syntax unified
 2597              		.thumb
 2598              		.thumb_func
 2599              		.fpu fpv4-sp-d16
 2601              	RTC_TamperCmd:
 2602              	.LFB161:
2132:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2603              		.loc 1 2132 0
 2604              		.cfi_startproc
 2605              		@ args = 0, pretend = 0, frame = 0
 2606              		@ frame_needed = 0, uses_anonymous_args = 0
 2607              		@ link register save eliminated.
 2608              	.LVL217:
2137:FWLIB/src/stm32f4xx_rtc.c ****   {
 2609              		.loc 1 2137 0
 2610 0000 29B9     		cbnz	r1, .L233
2145:FWLIB/src/stm32f4xx_rtc.c ****   }  
 2611              		.loc 1 2145 0
 2612 0002 054A     		ldr	r2, .L234
ARM GAS  /tmp/cczQSXyD.s 			page 101


 2613 0004 136C     		ldr	r3, [r2, #64]
 2614 0006 23EA0000 		bic	r0, r3, r0
 2615              	.LVL218:
 2616 000a 1064     		str	r0, [r2, #64]
 2617 000c 7047     		bx	lr
 2618              	.LVL219:
 2619              	.L233:
2140:FWLIB/src/stm32f4xx_rtc.c ****   }
 2620              		.loc 1 2140 0
 2621 000e 024A     		ldr	r2, .L234
 2622 0010 136C     		ldr	r3, [r2, #64]
 2623 0012 1843     		orrs	r0, r0, r3
 2624              	.LVL220:
 2625 0014 1064     		str	r0, [r2, #64]
 2626 0016 7047     		bx	lr
 2627              	.L235:
 2628              		.align	2
 2629              	.L234:
 2630 0018 00280040 		.word	1073752064
 2631              		.cfi_endproc
 2632              	.LFE161:
 2634              		.section	.text.RTC_TamperFilterConfig,"ax",%progbits
 2635              		.align	1
 2636              		.global	RTC_TamperFilterConfig
 2637              		.syntax unified
 2638              		.thumb
 2639              		.thumb_func
 2640              		.fpu fpv4-sp-d16
 2642              	RTC_TamperFilterConfig:
 2643              	.LFB162:
2163:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2644              		.loc 1 2163 0
 2645              		.cfi_startproc
 2646              		@ args = 0, pretend = 0, frame = 0
 2647              		@ frame_needed = 0, uses_anonymous_args = 0
 2648              		@ link register save eliminated.
 2649              	.LVL221:
2168:FWLIB/src/stm32f4xx_rtc.c **** 
 2650              		.loc 1 2168 0
 2651 0000 044B     		ldr	r3, .L237
 2652 0002 1A6C     		ldr	r2, [r3, #64]
 2653 0004 22F4C052 		bic	r2, r2, #6144
 2654 0008 1A64     		str	r2, [r3, #64]
2171:FWLIB/src/stm32f4xx_rtc.c **** }
 2655              		.loc 1 2171 0
 2656 000a 1A6C     		ldr	r2, [r3, #64]
 2657 000c 1043     		orrs	r0, r0, r2
 2658              	.LVL222:
 2659 000e 1864     		str	r0, [r3, #64]
 2660 0010 7047     		bx	lr
 2661              	.L238:
 2662 0012 00BF     		.align	2
 2663              	.L237:
 2664 0014 00280040 		.word	1073752064
 2665              		.cfi_endproc
 2666              	.LFE162:
 2668              		.section	.text.RTC_TamperSamplingFreqConfig,"ax",%progbits
ARM GAS  /tmp/cczQSXyD.s 			page 102


 2669              		.align	1
 2670              		.global	RTC_TamperSamplingFreqConfig
 2671              		.syntax unified
 2672              		.thumb
 2673              		.thumb_func
 2674              		.fpu fpv4-sp-d16
 2676              	RTC_TamperSamplingFreqConfig:
 2677              	.LFB163:
2197:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2678              		.loc 1 2197 0
 2679              		.cfi_startproc
 2680              		@ args = 0, pretend = 0, frame = 0
 2681              		@ frame_needed = 0, uses_anonymous_args = 0
 2682              		@ link register save eliminated.
 2683              	.LVL223:
2202:FWLIB/src/stm32f4xx_rtc.c **** 
 2684              		.loc 1 2202 0
 2685 0000 044B     		ldr	r3, .L240
 2686 0002 1A6C     		ldr	r2, [r3, #64]
 2687 0004 22F4E062 		bic	r2, r2, #1792
 2688 0008 1A64     		str	r2, [r3, #64]
2205:FWLIB/src/stm32f4xx_rtc.c **** }
 2689              		.loc 1 2205 0
 2690 000a 1A6C     		ldr	r2, [r3, #64]
 2691 000c 1043     		orrs	r0, r0, r2
 2692              	.LVL224:
 2693 000e 1864     		str	r0, [r3, #64]
 2694 0010 7047     		bx	lr
 2695              	.L241:
 2696 0012 00BF     		.align	2
 2697              	.L240:
 2698 0014 00280040 		.word	1073752064
 2699              		.cfi_endproc
 2700              	.LFE163:
 2702              		.section	.text.RTC_TamperPinsPrechargeDuration,"ax",%progbits
 2703              		.align	1
 2704              		.global	RTC_TamperPinsPrechargeDuration
 2705              		.syntax unified
 2706              		.thumb
 2707              		.thumb_func
 2708              		.fpu fpv4-sp-d16
 2710              	RTC_TamperPinsPrechargeDuration:
 2711              	.LFB164:
2220:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2712              		.loc 1 2220 0
 2713              		.cfi_startproc
 2714              		@ args = 0, pretend = 0, frame = 0
 2715              		@ frame_needed = 0, uses_anonymous_args = 0
 2716              		@ link register save eliminated.
 2717              	.LVL225:
2225:FWLIB/src/stm32f4xx_rtc.c **** 
 2718              		.loc 1 2225 0
 2719 0000 044B     		ldr	r3, .L243
 2720 0002 1A6C     		ldr	r2, [r3, #64]
 2721 0004 22F4C042 		bic	r2, r2, #24576
 2722 0008 1A64     		str	r2, [r3, #64]
2228:FWLIB/src/stm32f4xx_rtc.c **** }
ARM GAS  /tmp/cczQSXyD.s 			page 103


 2723              		.loc 1 2228 0
 2724 000a 1A6C     		ldr	r2, [r3, #64]
 2725 000c 1043     		orrs	r0, r0, r2
 2726              	.LVL226:
 2727 000e 1864     		str	r0, [r3, #64]
 2728 0010 7047     		bx	lr
 2729              	.L244:
 2730 0012 00BF     		.align	2
 2731              	.L243:
 2732 0014 00280040 		.word	1073752064
 2733              		.cfi_endproc
 2734              	.LFE164:
 2736              		.section	.text.RTC_TimeStampOnTamperDetectionCmd,"ax",%progbits
 2737              		.align	1
 2738              		.global	RTC_TimeStampOnTamperDetectionCmd
 2739              		.syntax unified
 2740              		.thumb
 2741              		.thumb_func
 2742              		.fpu fpv4-sp-d16
 2744              	RTC_TimeStampOnTamperDetectionCmd:
 2745              	.LFB165:
2240:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2746              		.loc 1 2240 0
 2747              		.cfi_startproc
 2748              		@ args = 0, pretend = 0, frame = 0
 2749              		@ frame_needed = 0, uses_anonymous_args = 0
 2750              		@ link register save eliminated.
 2751              	.LVL227:
2244:FWLIB/src/stm32f4xx_rtc.c ****   {
 2752              		.loc 1 2244 0
 2753 0000 28B9     		cbnz	r0, .L248
2252:FWLIB/src/stm32f4xx_rtc.c ****   }
 2754              		.loc 1 2252 0
 2755 0002 064A     		ldr	r2, .L249
 2756 0004 136C     		ldr	r3, [r2, #64]
 2757 0006 23F08003 		bic	r3, r3, #128
 2758 000a 1364     		str	r3, [r2, #64]
 2759 000c 7047     		bx	lr
 2760              	.L248:
2247:FWLIB/src/stm32f4xx_rtc.c ****   }
 2761              		.loc 1 2247 0
 2762 000e 034A     		ldr	r2, .L249
 2763 0010 136C     		ldr	r3, [r2, #64]
 2764 0012 43F08003 		orr	r3, r3, #128
 2765 0016 1364     		str	r3, [r2, #64]
 2766 0018 7047     		bx	lr
 2767              	.L250:
 2768 001a 00BF     		.align	2
 2769              	.L249:
 2770 001c 00280040 		.word	1073752064
 2771              		.cfi_endproc
 2772              	.LFE165:
 2774              		.section	.text.RTC_TamperPullUpCmd,"ax",%progbits
 2775              		.align	1
 2776              		.global	RTC_TamperPullUpCmd
 2777              		.syntax unified
 2778              		.thumb
ARM GAS  /tmp/cczQSXyD.s 			page 104


 2779              		.thumb_func
 2780              		.fpu fpv4-sp-d16
 2782              	RTC_TamperPullUpCmd:
 2783              	.LFB166:
2263:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2784              		.loc 1 2263 0
 2785              		.cfi_startproc
 2786              		@ args = 0, pretend = 0, frame = 0
 2787              		@ frame_needed = 0, uses_anonymous_args = 0
 2788              		@ link register save eliminated.
 2789              	.LVL228:
2267:FWLIB/src/stm32f4xx_rtc.c ****   {
 2790              		.loc 1 2267 0
 2791 0000 28B9     		cbnz	r0, .L254
2275:FWLIB/src/stm32f4xx_rtc.c ****   } 
 2792              		.loc 1 2275 0
 2793 0002 064A     		ldr	r2, .L255
 2794 0004 136C     		ldr	r3, [r2, #64]
 2795 0006 43F40043 		orr	r3, r3, #32768
 2796 000a 1364     		str	r3, [r2, #64]
 2797 000c 7047     		bx	lr
 2798              	.L254:
2270:FWLIB/src/stm32f4xx_rtc.c ****   }
 2799              		.loc 1 2270 0
 2800 000e 034A     		ldr	r2, .L255
 2801 0010 136C     		ldr	r3, [r2, #64]
 2802 0012 23F40043 		bic	r3, r3, #32768
 2803 0016 1364     		str	r3, [r2, #64]
 2804 0018 7047     		bx	lr
 2805              	.L256:
 2806 001a 00BF     		.align	2
 2807              	.L255:
 2808 001c 00280040 		.word	1073752064
 2809              		.cfi_endproc
 2810              	.LFE166:
 2812              		.section	.text.RTC_WriteBackupRegister,"ax",%progbits
 2813              		.align	1
 2814              		.global	RTC_WriteBackupRegister
 2815              		.syntax unified
 2816              		.thumb
 2817              		.thumb_func
 2818              		.fpu fpv4-sp-d16
 2820              	RTC_WriteBackupRegister:
 2821              	.LFB167:
2304:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 2822              		.loc 1 2304 0
 2823              		.cfi_startproc
 2824              		@ args = 0, pretend = 0, frame = 8
 2825              		@ frame_needed = 0, uses_anonymous_args = 0
 2826              		@ link register save eliminated.
 2827              	.LVL229:
 2828 0000 82B0     		sub	sp, sp, #8
 2829              	.LCFI32:
 2830              		.cfi_def_cfa_offset 8
2305:FWLIB/src/stm32f4xx_rtc.c ****   
 2831              		.loc 1 2305 0
 2832 0002 0023     		movs	r3, #0
ARM GAS  /tmp/cczQSXyD.s 			page 105


 2833 0004 0193     		str	r3, [sp, #4]
2310:FWLIB/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 2834              		.loc 1 2310 0
 2835 0006 054B     		ldr	r3, .L259
 2836 0008 0193     		str	r3, [sp, #4]
2311:FWLIB/src/stm32f4xx_rtc.c **** 
 2837              		.loc 1 2311 0
 2838 000a 019B     		ldr	r3, [sp, #4]
 2839 000c 03EB8000 		add	r0, r3, r0, lsl #2
 2840              	.LVL230:
 2841 0010 0190     		str	r0, [sp, #4]
2314:FWLIB/src/stm32f4xx_rtc.c **** }
 2842              		.loc 1 2314 0
 2843 0012 019B     		ldr	r3, [sp, #4]
 2844 0014 1960     		str	r1, [r3]
2315:FWLIB/src/stm32f4xx_rtc.c **** 
 2845              		.loc 1 2315 0
 2846 0016 02B0     		add	sp, sp, #8
 2847              	.LCFI33:
 2848              		.cfi_def_cfa_offset 0
 2849              		@ sp needed
 2850 0018 7047     		bx	lr
 2851              	.L260:
 2852 001a 00BF     		.align	2
 2853              	.L259:
 2854 001c 50280040 		.word	1073752144
 2855              		.cfi_endproc
 2856              	.LFE167:
 2858              		.section	.text.RTC_ReadBackupRegister,"ax",%progbits
 2859              		.align	1
 2860              		.global	RTC_ReadBackupRegister
 2861              		.syntax unified
 2862              		.thumb
 2863              		.thumb_func
 2864              		.fpu fpv4-sp-d16
 2866              	RTC_ReadBackupRegister:
 2867              	.LFB168:
2325:FWLIB/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 2868              		.loc 1 2325 0
 2869              		.cfi_startproc
 2870              		@ args = 0, pretend = 0, frame = 8
 2871              		@ frame_needed = 0, uses_anonymous_args = 0
 2872              		@ link register save eliminated.
 2873              	.LVL231:
 2874 0000 82B0     		sub	sp, sp, #8
 2875              	.LCFI34:
 2876              		.cfi_def_cfa_offset 8
2326:FWLIB/src/stm32f4xx_rtc.c ****   
 2877              		.loc 1 2326 0
 2878 0002 0023     		movs	r3, #0
 2879 0004 0193     		str	r3, [sp, #4]
2331:FWLIB/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 2880              		.loc 1 2331 0
 2881 0006 054B     		ldr	r3, .L263
 2882 0008 0193     		str	r3, [sp, #4]
2332:FWLIB/src/stm32f4xx_rtc.c ****   
 2883              		.loc 1 2332 0
ARM GAS  /tmp/cczQSXyD.s 			page 106


 2884 000a 019B     		ldr	r3, [sp, #4]
 2885 000c 03EB8000 		add	r0, r3, r0, lsl #2
 2886              	.LVL232:
 2887 0010 0190     		str	r0, [sp, #4]
2335:FWLIB/src/stm32f4xx_rtc.c **** }
 2888              		.loc 1 2335 0
 2889 0012 019B     		ldr	r3, [sp, #4]
 2890 0014 1868     		ldr	r0, [r3]
2336:FWLIB/src/stm32f4xx_rtc.c **** 
 2891              		.loc 1 2336 0
 2892 0016 02B0     		add	sp, sp, #8
 2893              	.LCFI35:
 2894              		.cfi_def_cfa_offset 0
 2895              		@ sp needed
 2896 0018 7047     		bx	lr
 2897              	.L264:
 2898 001a 00BF     		.align	2
 2899              	.L263:
 2900 001c 50280040 		.word	1073752144
 2901              		.cfi_endproc
 2902              	.LFE168:
 2904              		.section	.text.RTC_TamperPinSelection,"ax",%progbits
 2905              		.align	1
 2906              		.global	RTC_TamperPinSelection
 2907              		.syntax unified
 2908              		.thumb
 2909              		.thumb_func
 2910              		.fpu fpv4-sp-d16
 2912              	RTC_TamperPinSelection:
 2913              	.LFB169:
2364:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2914              		.loc 1 2364 0
 2915              		.cfi_startproc
 2916              		@ args = 0, pretend = 0, frame = 0
 2917              		@ frame_needed = 0, uses_anonymous_args = 0
 2918              		@ link register save eliminated.
 2919              	.LVL233:
2368:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 2920              		.loc 1 2368 0
 2921 0000 044B     		ldr	r3, .L266
 2922 0002 1A6C     		ldr	r2, [r3, #64]
 2923 0004 22F48032 		bic	r2, r2, #65536
 2924 0008 1A64     		str	r2, [r3, #64]
2369:FWLIB/src/stm32f4xx_rtc.c **** }
 2925              		.loc 1 2369 0
 2926 000a 1A6C     		ldr	r2, [r3, #64]
 2927 000c 1043     		orrs	r0, r0, r2
 2928              	.LVL234:
 2929 000e 1864     		str	r0, [r3, #64]
 2930 0010 7047     		bx	lr
 2931              	.L267:
 2932 0012 00BF     		.align	2
 2933              	.L266:
 2934 0014 00280040 		.word	1073752064
 2935              		.cfi_endproc
 2936              	.LFE169:
 2938              		.section	.text.RTC_TimeStampPinSelection,"ax",%progbits
ARM GAS  /tmp/cczQSXyD.s 			page 107


 2939              		.align	1
 2940              		.global	RTC_TimeStampPinSelection
 2941              		.syntax unified
 2942              		.thumb
 2943              		.thumb_func
 2944              		.fpu fpv4-sp-d16
 2946              	RTC_TimeStampPinSelection:
 2947              	.LFB170:
2381:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2948              		.loc 1 2381 0
 2949              		.cfi_startproc
 2950              		@ args = 0, pretend = 0, frame = 0
 2951              		@ frame_needed = 0, uses_anonymous_args = 0
 2952              		@ link register save eliminated.
 2953              	.LVL235:
2385:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 2954              		.loc 1 2385 0
 2955 0000 044B     		ldr	r3, .L269
 2956 0002 1A6C     		ldr	r2, [r3, #64]
 2957 0004 22F40032 		bic	r2, r2, #131072
 2958 0008 1A64     		str	r2, [r3, #64]
2386:FWLIB/src/stm32f4xx_rtc.c **** }
 2959              		.loc 1 2386 0
 2960 000a 1A6C     		ldr	r2, [r3, #64]
 2961 000c 1043     		orrs	r0, r0, r2
 2962              	.LVL236:
 2963 000e 1864     		str	r0, [r3, #64]
 2964 0010 7047     		bx	lr
 2965              	.L270:
 2966 0012 00BF     		.align	2
 2967              	.L269:
 2968 0014 00280040 		.word	1073752064
 2969              		.cfi_endproc
 2970              	.LFE170:
 2972              		.section	.text.RTC_OutputTypeConfig,"ax",%progbits
 2973              		.align	1
 2974              		.global	RTC_OutputTypeConfig
 2975              		.syntax unified
 2976              		.thumb
 2977              		.thumb_func
 2978              		.fpu fpv4-sp-d16
 2980              	RTC_OutputTypeConfig:
 2981              	.LFB171:
2400:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2982              		.loc 1 2400 0
 2983              		.cfi_startproc
 2984              		@ args = 0, pretend = 0, frame = 0
 2985              		@ frame_needed = 0, uses_anonymous_args = 0
 2986              		@ link register save eliminated.
 2987              	.LVL237:
2404:FWLIB/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 2988              		.loc 1 2404 0
 2989 0000 044B     		ldr	r3, .L272
 2990 0002 1A6C     		ldr	r2, [r3, #64]
 2991 0004 22F48022 		bic	r2, r2, #262144
 2992 0008 1A64     		str	r2, [r3, #64]
2405:FWLIB/src/stm32f4xx_rtc.c **** }
ARM GAS  /tmp/cczQSXyD.s 			page 108


 2993              		.loc 1 2405 0
 2994 000a 1A6C     		ldr	r2, [r3, #64]
 2995 000c 1043     		orrs	r0, r0, r2
 2996              	.LVL238:
 2997 000e 1864     		str	r0, [r3, #64]
 2998 0010 7047     		bx	lr
 2999              	.L273:
 3000 0012 00BF     		.align	2
 3001              	.L272:
 3002 0014 00280040 		.word	1073752064
 3003              		.cfi_endproc
 3004              	.LFE171:
 3006              		.section	.text.RTC_SynchroShiftConfig,"ax",%progbits
 3007              		.align	1
 3008              		.global	RTC_SynchroShiftConfig
 3009              		.syntax unified
 3010              		.thumb
 3011              		.thumb_func
 3012              		.fpu fpv4-sp-d16
 3014              	RTC_SynchroShiftConfig:
 3015              	.LFB172:
2438:FWLIB/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 3016              		.loc 1 2438 0
 3017              		.cfi_startproc
 3018              		@ args = 0, pretend = 0, frame = 0
 3019              		@ frame_needed = 0, uses_anonymous_args = 0
 3020              	.LVL239:
 3021 0000 08B5     		push	{r3, lr}
 3022              	.LCFI36:
 3023              		.cfi_def_cfa_offset 8
 3024              		.cfi_offset 3, -8
 3025              		.cfi_offset 14, -4
 3026              	.LVL240:
2447:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3027              		.loc 1 2447 0
 3028 0002 184B     		ldr	r3, .L285
 3029 0004 CA22     		movs	r2, #202
 3030 0006 5A62     		str	r2, [r3, #36]
2448:FWLIB/src/stm32f4xx_rtc.c ****   
 3031              		.loc 1 2448 0
 3032 0008 5322     		movs	r2, #83
 3033 000a 5A62     		str	r2, [r3, #36]
2451:FWLIB/src/stm32f4xx_rtc.c ****   {
 3034              		.loc 1 2451 0
 3035 000c DB68     		ldr	r3, [r3, #12]
 3036 000e 13F0080F 		tst	r3, #8
 3037 0012 15D1     		bne	.L279
 3038              	.LVL241:
 3039              	.L276:
2461:FWLIB/src/stm32f4xx_rtc.c ****   {
 3040              		.loc 1 2461 0
 3041 0014 134B     		ldr	r3, .L285
 3042 0016 DB68     		ldr	r3, [r3, #12]
 3043 0018 13F0080F 		tst	r3, #8
 3044 001c 1BD1     		bne	.L280
2464:FWLIB/src/stm32f4xx_rtc.c ****     {
 3045              		.loc 1 2464 0
ARM GAS  /tmp/cczQSXyD.s 			page 109


 3046 001e 114B     		ldr	r3, .L285
 3047 0020 9B68     		ldr	r3, [r3, #8]
 3048 0022 13F0100F 		tst	r3, #16
 3049 0026 0DD0     		beq	.L284
2480:FWLIB/src/stm32f4xx_rtc.c ****     }
 3050              		.loc 1 2480 0
 3051 0028 0023     		movs	r3, #0
 3052 002a 15E0     		b	.L278
 3053              	.LVL242:
 3054              	.L277:
2456:FWLIB/src/stm32f4xx_rtc.c ****     }
 3055              		.loc 1 2456 0
 3056 002c 0133     		adds	r3, r3, #1
 3057              	.LVL243:
 3058              	.L275:
2454:FWLIB/src/stm32f4xx_rtc.c ****     {
 3059              		.loc 1 2454 0
 3060 002e 0D4A     		ldr	r2, .L285
 3061 0030 D268     		ldr	r2, [r2, #12]
 3062 0032 12F0080F 		tst	r2, #8
 3063 0036 EDD0     		beq	.L276
2454:FWLIB/src/stm32f4xx_rtc.c ****     {
 3064              		.loc 1 2454 0 is_stmt 0 discriminator 1
 3065 0038 B3F5805F 		cmp	r3, #4096
 3066 003c F6D1     		bne	.L277
 3067 003e E9E7     		b	.L276
 3068              	.LVL244:
 3069              	.L279:
 3070 0040 0023     		movs	r3, #0
 3071 0042 F4E7     		b	.L275
 3072              	.LVL245:
 3073              	.L284:
2467:FWLIB/src/stm32f4xx_rtc.c ****     
 3074              		.loc 1 2467 0 is_stmt 1
 3075 0044 0143     		orrs	r1, r1, r0
 3076              	.LVL246:
 3077 0046 074B     		ldr	r3, .L285
 3078 0048 D962     		str	r1, [r3, #44]
2469:FWLIB/src/stm32f4xx_rtc.c ****       {
 3079              		.loc 1 2469 0
 3080 004a FFF7FEFF 		bl	RTC_WaitForSynchro
 3081              	.LVL247:
 3082 004e 0346     		mov	r3, r0
 3083 0050 10B1     		cbz	r0, .L278
2475:FWLIB/src/stm32f4xx_rtc.c ****       }
 3084              		.loc 1 2475 0
 3085 0052 0123     		movs	r3, #1
 3086 0054 00E0     		b	.L278
 3087              	.LVL248:
 3088              	.L280:
2485:FWLIB/src/stm32f4xx_rtc.c ****   }
 3089              		.loc 1 2485 0
 3090 0056 0023     		movs	r3, #0
 3091              	.LVL249:
 3092              	.L278:
2489:FWLIB/src/stm32f4xx_rtc.c ****   
 3093              		.loc 1 2489 0
ARM GAS  /tmp/cczQSXyD.s 			page 110


 3094 0058 FF21     		movs	r1, #255
 3095 005a 024A     		ldr	r2, .L285
 3096 005c 5162     		str	r1, [r2, #36]
2492:FWLIB/src/stm32f4xx_rtc.c **** 
 3097              		.loc 1 2492 0
 3098 005e 1846     		mov	r0, r3
 3099 0060 08BD     		pop	{r3, pc}
 3100              	.LVL250:
 3101              	.L286:
 3102 0062 00BF     		.align	2
 3103              	.L285:
 3104 0064 00280040 		.word	1073752064
 3105              		.cfi_endproc
 3106              	.LFE172:
 3108              		.section	.text.RTC_ITConfig,"ax",%progbits
 3109              		.align	1
 3110              		.global	RTC_ITConfig
 3111              		.syntax unified
 3112              		.thumb
 3113              		.thumb_func
 3114              		.fpu fpv4-sp-d16
 3116              	RTC_ITConfig:
 3117              	.LFB173:
2558:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 3118              		.loc 1 2558 0
 3119              		.cfi_startproc
 3120              		@ args = 0, pretend = 0, frame = 0
 3121              		@ frame_needed = 0, uses_anonymous_args = 0
 3122              		@ link register save eliminated.
 3123              	.LVL251:
2564:FWLIB/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3124              		.loc 1 2564 0
 3125 0000 104B     		ldr	r3, .L291
 3126 0002 CA22     		movs	r2, #202
 3127 0004 5A62     		str	r2, [r3, #36]
2565:FWLIB/src/stm32f4xx_rtc.c **** 
 3128              		.loc 1 2565 0
 3129 0006 5322     		movs	r2, #83
 3130 0008 5A62     		str	r2, [r3, #36]
2567:FWLIB/src/stm32f4xx_rtc.c ****   {
 3131              		.loc 1 2567 0
 3132 000a 81B9     		cbnz	r1, .L290
2577:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
 3133              		.loc 1 2577 0
 3134 000c 0D4B     		ldr	r3, .L291
 3135 000e 9A68     		ldr	r2, [r3, #8]
 3136 0010 20F00401 		bic	r1, r0, #4
 3137              	.LVL252:
 3138 0014 22EA0102 		bic	r2, r2, r1
 3139 0018 9A60     		str	r2, [r3, #8]
2579:FWLIB/src/stm32f4xx_rtc.c ****   }
 3140              		.loc 1 2579 0
 3141 001a 1A6C     		ldr	r2, [r3, #64]
 3142 001c 00F00400 		and	r0, r0, #4
 3143              	.LVL253:
 3144 0020 22EA0000 		bic	r0, r2, r0
 3145 0024 1864     		str	r0, [r3, #64]
ARM GAS  /tmp/cczQSXyD.s 			page 111


 3146              	.L289:
2582:FWLIB/src/stm32f4xx_rtc.c **** }
 3147              		.loc 1 2582 0
 3148 0026 FF22     		movs	r2, #255
 3149 0028 064B     		ldr	r3, .L291
 3150 002a 5A62     		str	r2, [r3, #36]
 3151 002c 7047     		bx	lr
 3152              	.LVL254:
 3153              	.L290:
2570:FWLIB/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
 3154              		.loc 1 2570 0
 3155 002e 9A68     		ldr	r2, [r3, #8]
 3156 0030 20F00401 		bic	r1, r0, #4
 3157              	.LVL255:
 3158 0034 0A43     		orrs	r2, r2, r1
 3159 0036 9A60     		str	r2, [r3, #8]
2572:FWLIB/src/stm32f4xx_rtc.c ****   }
 3160              		.loc 1 2572 0
 3161 0038 1A6C     		ldr	r2, [r3, #64]
 3162 003a 00F00400 		and	r0, r0, #4
 3163              	.LVL256:
 3164 003e 1043     		orrs	r0, r0, r2
 3165 0040 1864     		str	r0, [r3, #64]
 3166 0042 F0E7     		b	.L289
 3167              	.L292:
 3168              		.align	2
 3169              	.L291:
 3170 0044 00280040 		.word	1073752064
 3171              		.cfi_endproc
 3172              	.LFE173:
 3174              		.section	.text.RTC_GetFlagStatus,"ax",%progbits
 3175              		.align	1
 3176              		.global	RTC_GetFlagStatus
 3177              		.syntax unified
 3178              		.thumb
 3179              		.thumb_func
 3180              		.fpu fpv4-sp-d16
 3182              	RTC_GetFlagStatus:
 3183              	.LFB174:
2607:FWLIB/src/stm32f4xx_rtc.c ****   FlagStatus bitstatus = RESET;
 3184              		.loc 1 2607 0
 3185              		.cfi_startproc
 3186              		@ args = 0, pretend = 0, frame = 0
 3187              		@ frame_needed = 0, uses_anonymous_args = 0
 3188              		@ link register save eliminated.
 3189              	.LVL257:
2615:FWLIB/src/stm32f4xx_rtc.c ****   
 3190              		.loc 1 2615 0
 3191 0000 074B     		ldr	r3, .L297
 3192 0002 DB68     		ldr	r3, [r3, #12]
 3193 0004 23F07F43 		bic	r3, r3, #-16777216
 3194 0008 23F47E03 		bic	r3, r3, #16646144
 3195 000c 23F40043 		bic	r3, r3, #32768
 3196 0010 23F08003 		bic	r3, r3, #128
 3197              	.LVL258:
2618:FWLIB/src/stm32f4xx_rtc.c ****   {
 3198              		.loc 1 2618 0
ARM GAS  /tmp/cczQSXyD.s 			page 112


 3199 0014 0342     		tst	r3, r0
 3200 0016 01D1     		bne	.L296
2624:FWLIB/src/stm32f4xx_rtc.c ****   }
 3201              		.loc 1 2624 0
 3202 0018 0020     		movs	r0, #0
 3203              	.LVL259:
2627:FWLIB/src/stm32f4xx_rtc.c **** 
 3204              		.loc 1 2627 0
 3205 001a 7047     		bx	lr
 3206              	.LVL260:
 3207              	.L296:
2620:FWLIB/src/stm32f4xx_rtc.c ****   }
 3208              		.loc 1 2620 0
 3209 001c 0120     		movs	r0, #1
 3210              	.LVL261:
 3211 001e 7047     		bx	lr
 3212              	.L298:
 3213              		.align	2
 3214              	.L297:
 3215 0020 00280040 		.word	1073752064
 3216              		.cfi_endproc
 3217              	.LFE174:
 3219              		.section	.text.RTC_ClearFlag,"ax",%progbits
 3220              		.align	1
 3221              		.global	RTC_ClearFlag
 3222              		.syntax unified
 3223              		.thumb
 3224              		.thumb_func
 3225              		.fpu fpv4-sp-d16
 3227              	RTC_ClearFlag:
 3228              	.LFB175:
2644:FWLIB/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 3229              		.loc 1 2644 0
 3230              		.cfi_startproc
 3231              		@ args = 0, pretend = 0, frame = 0
 3232              		@ frame_needed = 0, uses_anonymous_args = 0
 3233              		@ link register save eliminated.
 3234              	.LVL262:
2649:FWLIB/src/stm32f4xx_rtc.c **** }
 3235              		.loc 1 2649 0
 3236 0000 80B2     		uxth	r0, r0
 3237              	.LVL263:
 3238 0002 40F08003 		orr	r3, r0, #128
 3239 0006 044A     		ldr	r2, .L300
 3240 0008 D068     		ldr	r0, [r2, #12]
 3241 000a 00F08000 		and	r0, r0, #128
 3242 000e 60EA0300 		orn	r0, r0, r3
 3243 0012 D060     		str	r0, [r2, #12]
 3244 0014 7047     		bx	lr
 3245              	.L301:
 3246 0016 00BF     		.align	2
 3247              	.L300:
 3248 0018 00280040 		.word	1073752064
 3249              		.cfi_endproc
 3250              	.LFE175:
 3252              		.section	.text.RTC_GetITStatus,"ax",%progbits
 3253              		.align	1
ARM GAS  /tmp/cczQSXyD.s 			page 113


 3254              		.global	RTC_GetITStatus
 3255              		.syntax unified
 3256              		.thumb
 3257              		.thumb_func
 3258              		.fpu fpv4-sp-d16
 3260              	RTC_GetITStatus:
 3261              	.LFB176:
2665:FWLIB/src/stm32f4xx_rtc.c ****   ITStatus bitstatus = RESET;
 3262              		.loc 1 2665 0
 3263              		.cfi_startproc
 3264              		@ args = 0, pretend = 0, frame = 0
 3265              		@ frame_needed = 0, uses_anonymous_args = 0
 3266              		@ link register save eliminated.
 3267              	.LVL264:
 3268 0000 10B4     		push	{r4}
 3269              	.LCFI37:
 3270              		.cfi_def_cfa_offset 4
 3271              		.cfi_offset 4, -4
 3272              	.LVL265:
2673:FWLIB/src/stm32f4xx_rtc.c ****  
 3273              		.loc 1 2673 0
 3274 0002 0C49     		ldr	r1, .L307
 3275 0004 0B6C     		ldr	r3, [r1, #64]
 3276 0006 03F00403 		and	r3, r3, #4
 3277              	.LVL266:
2676:FWLIB/src/stm32f4xx_rtc.c ****   
 3278              		.loc 1 2676 0
 3279 000a 8A68     		ldr	r2, [r1, #8]
 3280 000c 0240     		ands	r2, r2, r0
 3281 000e 03EAD034 		and	r4, r3, r0, lsr #15
 3282 0012 2243     		orrs	r2, r2, r4
 3283 0014 03EA1043 		and	r3, r3, r0, lsr #16
 3284              	.LVL267:
2679:FWLIB/src/stm32f4xx_rtc.c ****   
 3285              		.loc 1 2679 0
 3286 0018 C968     		ldr	r1, [r1, #12]
 3287 001a 01EA1010 		and	r0, r1, r0, lsr #4
 3288              	.LVL268:
2682:FWLIB/src/stm32f4xx_rtc.c ****   {
 3289              		.loc 1 2682 0
 3290 001e 1343     		orrs	r3, r2, r3
 3291              	.LVL269:
 3292 0020 03D0     		beq	.L304
2682:FWLIB/src/stm32f4xx_rtc.c ****   {
 3293              		.loc 1 2682 0 is_stmt 0 discriminator 1
 3294 0022 80B2     		uxth	r0, r0
 3295              	.LVL270:
 3296 0024 10B1     		cbz	r0, .L303
2684:FWLIB/src/stm32f4xx_rtc.c ****   }
 3297              		.loc 1 2684 0 is_stmt 1
 3298 0026 0120     		movs	r0, #1
 3299 0028 00E0     		b	.L303
 3300              	.LVL271:
 3301              	.L304:
2688:FWLIB/src/stm32f4xx_rtc.c ****   }
 3302              		.loc 1 2688 0
 3303 002a 0020     		movs	r0, #0
ARM GAS  /tmp/cczQSXyD.s 			page 114


 3304              	.LVL272:
 3305              	.L303:
2691:FWLIB/src/stm32f4xx_rtc.c **** 
 3306              		.loc 1 2691 0
 3307 002c 5DF8044B 		ldr	r4, [sp], #4
 3308              	.LCFI38:
 3309              		.cfi_restore 4
 3310              		.cfi_def_cfa_offset 0
 3311 0030 7047     		bx	lr
 3312              	.L308:
 3313 0032 00BF     		.align	2
 3314              	.L307:
 3315 0034 00280040 		.word	1073752064
 3316              		.cfi_endproc
 3317              	.LFE176:
 3319              		.section	.text.RTC_ClearITPendingBit,"ax",%progbits
 3320              		.align	1
 3321              		.global	RTC_ClearITPendingBit
 3322              		.syntax unified
 3323              		.thumb
 3324              		.thumb_func
 3325              		.fpu fpv4-sp-d16
 3327              	RTC_ClearITPendingBit:
 3328              	.LFB177:
2706:FWLIB/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 3329              		.loc 1 2706 0
 3330              		.cfi_startproc
 3331              		@ args = 0, pretend = 0, frame = 0
 3332              		@ frame_needed = 0, uses_anonymous_args = 0
 3333              		@ link register save eliminated.
 3334              	.LVL273:
2716:FWLIB/src/stm32f4xx_rtc.c **** }
 3335              		.loc 1 2716 0
 3336 0000 C0F30F10 		ubfx	r0, r0, #4, #16
 3337              	.LVL274:
 3338 0004 40F08003 		orr	r3, r0, #128
 3339 0008 034A     		ldr	r2, .L310
 3340 000a D068     		ldr	r0, [r2, #12]
 3341 000c 00F08000 		and	r0, r0, #128
 3342 0010 60EA0300 		orn	r0, r0, r3
 3343 0014 D060     		str	r0, [r2, #12]
 3344 0016 7047     		bx	lr
 3345              	.L311:
 3346              		.align	2
 3347              	.L310:
 3348 0018 00280040 		.word	1073752064
 3349              		.cfi_endproc
 3350              	.LFE177:
 3352              		.text
 3353              	.Letext0:
 3354              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 3355              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 3356              		.file 4 "F4_CORE/core_cm4.h"
 3357              		.file 5 "USER/system_stm32f4xx.h"
 3358              		.file 6 "USER/stm32f4xx.h"
 3359              		.file 7 "FWLIB/inc/stm32f4xx_rtc.h"
ARM GAS  /tmp/cczQSXyD.s 			page 115


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_rtc.c
     /tmp/cczQSXyD.s:18     .text.RTC_ByteToBcd2:0000000000000000 $t
     /tmp/cczQSXyD.s:24     .text.RTC_ByteToBcd2:0000000000000000 RTC_ByteToBcd2
     /tmp/cczQSXyD.s:65     .text.RTC_Bcd2ToByte:0000000000000000 $t
     /tmp/cczQSXyD.s:71     .text.RTC_Bcd2ToByte:0000000000000000 RTC_Bcd2ToByte
     /tmp/cczQSXyD.s:96     .text.RTC_StructInit:0000000000000000 $t
     /tmp/cczQSXyD.s:103    .text.RTC_StructInit:0000000000000000 RTC_StructInit
     /tmp/cczQSXyD.s:125    .text.RTC_WriteProtectionCmd:0000000000000000 $t
     /tmp/cczQSXyD.s:132    .text.RTC_WriteProtectionCmd:0000000000000000 RTC_WriteProtectionCmd
     /tmp/cczQSXyD.s:159    .text.RTC_WriteProtectionCmd:0000000000000018 $d
     /tmp/cczQSXyD.s:164    .text.RTC_EnterInitMode:0000000000000000 $t
     /tmp/cczQSXyD.s:171    .text.RTC_EnterInitMode:0000000000000000 RTC_EnterInitMode
     /tmp/cczQSXyD.s:240    .text.RTC_EnterInitMode:000000000000004c $d
     /tmp/cczQSXyD.s:245    .text.RTC_ExitInitMode:0000000000000000 $t
     /tmp/cczQSXyD.s:252    .text.RTC_ExitInitMode:0000000000000000 RTC_ExitInitMode
     /tmp/cczQSXyD.s:268    .text.RTC_ExitInitMode:000000000000000c $d
     /tmp/cczQSXyD.s:273    .text.RTC_Init:0000000000000000 $t
     /tmp/cczQSXyD.s:280    .text.RTC_Init:0000000000000000 RTC_Init
     /tmp/cczQSXyD.s:344    .text.RTC_Init:0000000000000048 $d
     /tmp/cczQSXyD.s:349    .text.RTC_WaitForSynchro:0000000000000000 $t
     /tmp/cczQSXyD.s:356    .text.RTC_WaitForSynchro:0000000000000000 RTC_WaitForSynchro
     /tmp/cczQSXyD.s:431    .text.RTC_WaitForSynchro:000000000000004c $d
     /tmp/cczQSXyD.s:436    .text.RTC_DeInit:0000000000000000 $t
     /tmp/cczQSXyD.s:443    .text.RTC_DeInit:0000000000000000 RTC_DeInit
     /tmp/cczQSXyD.s:569    .text.RTC_DeInit:0000000000000094 $d
     /tmp/cczQSXyD.s:575    .text.RTC_RefClockCmd:0000000000000000 $t
     /tmp/cczQSXyD.s:582    .text.RTC_RefClockCmd:0000000000000000 RTC_RefClockCmd
     /tmp/cczQSXyD.s:641    .text.RTC_RefClockCmd:0000000000000040 $d
     /tmp/cczQSXyD.s:646    .text.RTC_BypassShadowCmd:0000000000000000 $t
     /tmp/cczQSXyD.s:653    .text.RTC_BypassShadowCmd:0000000000000000 RTC_BypassShadowCmd
     /tmp/cczQSXyD.s:691    .text.RTC_BypassShadowCmd:000000000000002c $d
     /tmp/cczQSXyD.s:696    .text.RTC_SetTime:0000000000000000 $t
     /tmp/cczQSXyD.s:703    .text.RTC_SetTime:0000000000000000 RTC_SetTime
     /tmp/cczQSXyD.s:838    .text.RTC_SetTime:00000000000000a4 $d
     /tmp/cczQSXyD.s:843    .text.RTC_TimeStructInit:0000000000000000 $t
     /tmp/cczQSXyD.s:850    .text.RTC_TimeStructInit:0000000000000000 RTC_TimeStructInit
     /tmp/cczQSXyD.s:872    .text.RTC_GetTime:0000000000000000 $t
     /tmp/cczQSXyD.s:879    .text.RTC_GetTime:0000000000000000 RTC_GetTime
     /tmp/cczQSXyD.s:940    .text.RTC_GetTime:0000000000000048 $d
     /tmp/cczQSXyD.s:945    .text.RTC_GetSubSecond:0000000000000000 $t
     /tmp/cczQSXyD.s:952    .text.RTC_GetSubSecond:0000000000000000 RTC_GetSubSecond
     /tmp/cczQSXyD.s:971    .text.RTC_GetSubSecond:0000000000000008 $d
     /tmp/cczQSXyD.s:976    .text.RTC_SetDate:0000000000000000 $t
     /tmp/cczQSXyD.s:983    .text.RTC_SetDate:0000000000000000 RTC_SetDate
     /tmp/cczQSXyD.s:1108   .text.RTC_SetDate:0000000000000098 $d
     /tmp/cczQSXyD.s:1113   .text.RTC_DateStructInit:0000000000000000 $t
     /tmp/cczQSXyD.s:1120   .text.RTC_DateStructInit:0000000000000000 RTC_DateStructInit
     /tmp/cczQSXyD.s:1143   .text.RTC_GetDate:0000000000000000 $t
     /tmp/cczQSXyD.s:1150   .text.RTC_GetDate:0000000000000000 RTC_GetDate
     /tmp/cczQSXyD.s:1209   .text.RTC_GetDate:0000000000000044 $d
     /tmp/cczQSXyD.s:1214   .text.RTC_SetAlarm:0000000000000000 $t
     /tmp/cczQSXyD.s:1221   .text.RTC_SetAlarm:0000000000000000 RTC_SetAlarm
     /tmp/cczQSXyD.s:1360   .text.RTC_SetAlarm:00000000000000a0 $d
     /tmp/cczQSXyD.s:1365   .text.RTC_AlarmStructInit:0000000000000000 $t
     /tmp/cczQSXyD.s:1372   .text.RTC_AlarmStructInit:0000000000000000 RTC_AlarmStructInit
     /tmp/cczQSXyD.s:1401   .text.RTC_GetAlarm:0000000000000000 $t
ARM GAS  /tmp/cczQSXyD.s 			page 116


     /tmp/cczQSXyD.s:1408   .text.RTC_GetAlarm:0000000000000000 RTC_GetAlarm
     /tmp/cczQSXyD.s:1494   .text.RTC_GetAlarm:0000000000000068 $d
     /tmp/cczQSXyD.s:1499   .text.RTC_AlarmCmd:0000000000000000 $t
     /tmp/cczQSXyD.s:1506   .text.RTC_AlarmCmd:0000000000000000 RTC_AlarmCmd
     /tmp/cczQSXyD.s:1599   .text.RTC_AlarmCmd:000000000000005c $d
     /tmp/cczQSXyD.s:1604   .text.RTC_AlarmSubSecondConfig:0000000000000000 $t
     /tmp/cczQSXyD.s:1611   .text.RTC_AlarmSubSecondConfig:0000000000000000 RTC_AlarmSubSecondConfig
     /tmp/cczQSXyD.s:1663   .text.RTC_AlarmSubSecondConfig:0000000000000028 $d
     /tmp/cczQSXyD.s:1668   .text.RTC_GetAlarmSubSecond:0000000000000000 $t
     /tmp/cczQSXyD.s:1675   .text.RTC_GetAlarmSubSecond:0000000000000000 RTC_GetAlarmSubSecond
     /tmp/cczQSXyD.s:1706   .text.RTC_GetAlarmSubSecond:000000000000001c $d
     /tmp/cczQSXyD.s:1711   .text.RTC_WakeUpClockConfig:0000000000000000 $t
     /tmp/cczQSXyD.s:1718   .text.RTC_WakeUpClockConfig:0000000000000000 RTC_WakeUpClockConfig
     /tmp/cczQSXyD.s:1749   .text.RTC_WakeUpClockConfig:0000000000000020 $d
     /tmp/cczQSXyD.s:1754   .text.RTC_SetWakeUpCounter:0000000000000000 $t
     /tmp/cczQSXyD.s:1761   .text.RTC_SetWakeUpCounter:0000000000000000 RTC_SetWakeUpCounter
     /tmp/cczQSXyD.s:1785   .text.RTC_SetWakeUpCounter:0000000000000014 $d
     /tmp/cczQSXyD.s:1790   .text.RTC_GetWakeUpCounter:0000000000000000 $t
     /tmp/cczQSXyD.s:1797   .text.RTC_GetWakeUpCounter:0000000000000000 RTC_GetWakeUpCounter
     /tmp/cczQSXyD.s:1813   .text.RTC_GetWakeUpCounter:0000000000000008 $d
     /tmp/cczQSXyD.s:1818   .text.RTC_WakeUpCmd:0000000000000000 $t
     /tmp/cczQSXyD.s:1825   .text.RTC_WakeUpCmd:0000000000000000 RTC_WakeUpCmd
     /tmp/cczQSXyD.s:1916   .text.RTC_WakeUpCmd:0000000000000060 $d
     /tmp/cczQSXyD.s:1921   .text.RTC_DayLightSavingConfig:0000000000000000 $t
     /tmp/cczQSXyD.s:1928   .text.RTC_DayLightSavingConfig:0000000000000000 RTC_DayLightSavingConfig
     /tmp/cczQSXyD.s:1960   .text.RTC_DayLightSavingConfig:0000000000000020 $d
     /tmp/cczQSXyD.s:1965   .text.RTC_GetStoreOperation:0000000000000000 $t
     /tmp/cczQSXyD.s:1972   .text.RTC_GetStoreOperation:0000000000000000 RTC_GetStoreOperation
     /tmp/cczQSXyD.s:1988   .text.RTC_GetStoreOperation:000000000000000c $d
     /tmp/cczQSXyD.s:1993   .text.RTC_OutputConfig:0000000000000000 $t
     /tmp/cczQSXyD.s:2000   .text.RTC_OutputConfig:0000000000000000 RTC_OutputConfig
     /tmp/cczQSXyD.s:2032   .text.RTC_OutputConfig:0000000000000020 $d
     /tmp/cczQSXyD.s:2037   .text.RTC_CoarseCalibConfig:0000000000000000 $t
     /tmp/cczQSXyD.s:2044   .text.RTC_CoarseCalibConfig:0000000000000000 RTC_CoarseCalibConfig
     /tmp/cczQSXyD.s:2098   .text.RTC_CoarseCalibConfig:0000000000000030 $d
     /tmp/cczQSXyD.s:2103   .text.RTC_CoarseCalibCmd:0000000000000000 $t
     /tmp/cczQSXyD.s:2110   .text.RTC_CoarseCalibCmd:0000000000000000 RTC_CoarseCalibCmd
     /tmp/cczQSXyD.s:2169   .text.RTC_CoarseCalibCmd:0000000000000040 $d
     /tmp/cczQSXyD.s:2174   .text.RTC_CalibOutputCmd:0000000000000000 $t
     /tmp/cczQSXyD.s:2181   .text.RTC_CalibOutputCmd:0000000000000000 RTC_CalibOutputCmd
     /tmp/cczQSXyD.s:2219   .text.RTC_CalibOutputCmd:000000000000002c $d
     /tmp/cczQSXyD.s:2224   .text.RTC_CalibOutputConfig:0000000000000000 $t
     /tmp/cczQSXyD.s:2231   .text.RTC_CalibOutputConfig:0000000000000000 RTC_CalibOutputConfig
     /tmp/cczQSXyD.s:2262   .text.RTC_CalibOutputConfig:0000000000000020 $d
     /tmp/cczQSXyD.s:2267   .text.RTC_SmoothCalibConfig:0000000000000000 $t
     /tmp/cczQSXyD.s:2274   .text.RTC_SmoothCalibConfig:0000000000000000 RTC_SmoothCalibConfig
     /tmp/cczQSXyD.s:2358   .text.RTC_SmoothCalibConfig:0000000000000050 $d
     /tmp/cczQSXyD.s:2363   .text.RTC_TimeStampCmd:0000000000000000 $t
     /tmp/cczQSXyD.s:2370   .text.RTC_TimeStampCmd:0000000000000000 RTC_TimeStampCmd
     /tmp/cczQSXyD.s:2417   .text.RTC_TimeStampCmd:000000000000002c $d
     /tmp/cczQSXyD.s:2422   .text.RTC_GetTimeStamp:0000000000000000 $t
     /tmp/cczQSXyD.s:2429   .text.RTC_GetTimeStamp:0000000000000000 RTC_GetTimeStamp
     /tmp/cczQSXyD.s:2521   .text.RTC_GetTimeStamp:0000000000000078 $d
     /tmp/cczQSXyD.s:2526   .text.RTC_GetTimeStampSubSecond:0000000000000000 $t
     /tmp/cczQSXyD.s:2533   .text.RTC_GetTimeStampSubSecond:0000000000000000 RTC_GetTimeStampSubSecond
     /tmp/cczQSXyD.s:2548   .text.RTC_GetTimeStampSubSecond:0000000000000008 $d
     /tmp/cczQSXyD.s:2553   .text.RTC_TamperTriggerConfig:0000000000000000 $t
ARM GAS  /tmp/cczQSXyD.s 			page 117


     /tmp/cczQSXyD.s:2560   .text.RTC_TamperTriggerConfig:0000000000000000 RTC_TamperTriggerConfig
     /tmp/cczQSXyD.s:2589   .text.RTC_TamperTriggerConfig:000000000000001c $d
     /tmp/cczQSXyD.s:2594   .text.RTC_TamperCmd:0000000000000000 $t
     /tmp/cczQSXyD.s:2601   .text.RTC_TamperCmd:0000000000000000 RTC_TamperCmd
     /tmp/cczQSXyD.s:2630   .text.RTC_TamperCmd:0000000000000018 $d
     /tmp/cczQSXyD.s:2635   .text.RTC_TamperFilterConfig:0000000000000000 $t
     /tmp/cczQSXyD.s:2642   .text.RTC_TamperFilterConfig:0000000000000000 RTC_TamperFilterConfig
     /tmp/cczQSXyD.s:2664   .text.RTC_TamperFilterConfig:0000000000000014 $d
     /tmp/cczQSXyD.s:2669   .text.RTC_TamperSamplingFreqConfig:0000000000000000 $t
     /tmp/cczQSXyD.s:2676   .text.RTC_TamperSamplingFreqConfig:0000000000000000 RTC_TamperSamplingFreqConfig
     /tmp/cczQSXyD.s:2698   .text.RTC_TamperSamplingFreqConfig:0000000000000014 $d
     /tmp/cczQSXyD.s:2703   .text.RTC_TamperPinsPrechargeDuration:0000000000000000 $t
     /tmp/cczQSXyD.s:2710   .text.RTC_TamperPinsPrechargeDuration:0000000000000000 RTC_TamperPinsPrechargeDuration
     /tmp/cczQSXyD.s:2732   .text.RTC_TamperPinsPrechargeDuration:0000000000000014 $d
     /tmp/cczQSXyD.s:2737   .text.RTC_TimeStampOnTamperDetectionCmd:0000000000000000 $t
     /tmp/cczQSXyD.s:2744   .text.RTC_TimeStampOnTamperDetectionCmd:0000000000000000 RTC_TimeStampOnTamperDetectionCmd
     /tmp/cczQSXyD.s:2770   .text.RTC_TimeStampOnTamperDetectionCmd:000000000000001c $d
     /tmp/cczQSXyD.s:2775   .text.RTC_TamperPullUpCmd:0000000000000000 $t
     /tmp/cczQSXyD.s:2782   .text.RTC_TamperPullUpCmd:0000000000000000 RTC_TamperPullUpCmd
     /tmp/cczQSXyD.s:2808   .text.RTC_TamperPullUpCmd:000000000000001c $d
     /tmp/cczQSXyD.s:2813   .text.RTC_WriteBackupRegister:0000000000000000 $t
     /tmp/cczQSXyD.s:2820   .text.RTC_WriteBackupRegister:0000000000000000 RTC_WriteBackupRegister
     /tmp/cczQSXyD.s:2854   .text.RTC_WriteBackupRegister:000000000000001c $d
     /tmp/cczQSXyD.s:2859   .text.RTC_ReadBackupRegister:0000000000000000 $t
     /tmp/cczQSXyD.s:2866   .text.RTC_ReadBackupRegister:0000000000000000 RTC_ReadBackupRegister
     /tmp/cczQSXyD.s:2900   .text.RTC_ReadBackupRegister:000000000000001c $d
     /tmp/cczQSXyD.s:2905   .text.RTC_TamperPinSelection:0000000000000000 $t
     /tmp/cczQSXyD.s:2912   .text.RTC_TamperPinSelection:0000000000000000 RTC_TamperPinSelection
     /tmp/cczQSXyD.s:2934   .text.RTC_TamperPinSelection:0000000000000014 $d
     /tmp/cczQSXyD.s:2939   .text.RTC_TimeStampPinSelection:0000000000000000 $t
     /tmp/cczQSXyD.s:2946   .text.RTC_TimeStampPinSelection:0000000000000000 RTC_TimeStampPinSelection
     /tmp/cczQSXyD.s:2968   .text.RTC_TimeStampPinSelection:0000000000000014 $d
     /tmp/cczQSXyD.s:2973   .text.RTC_OutputTypeConfig:0000000000000000 $t
     /tmp/cczQSXyD.s:2980   .text.RTC_OutputTypeConfig:0000000000000000 RTC_OutputTypeConfig
     /tmp/cczQSXyD.s:3002   .text.RTC_OutputTypeConfig:0000000000000014 $d
     /tmp/cczQSXyD.s:3007   .text.RTC_SynchroShiftConfig:0000000000000000 $t
     /tmp/cczQSXyD.s:3014   .text.RTC_SynchroShiftConfig:0000000000000000 RTC_SynchroShiftConfig
     /tmp/cczQSXyD.s:3104   .text.RTC_SynchroShiftConfig:0000000000000064 $d
     /tmp/cczQSXyD.s:3109   .text.RTC_ITConfig:0000000000000000 $t
     /tmp/cczQSXyD.s:3116   .text.RTC_ITConfig:0000000000000000 RTC_ITConfig
     /tmp/cczQSXyD.s:3170   .text.RTC_ITConfig:0000000000000044 $d
     /tmp/cczQSXyD.s:3175   .text.RTC_GetFlagStatus:0000000000000000 $t
     /tmp/cczQSXyD.s:3182   .text.RTC_GetFlagStatus:0000000000000000 RTC_GetFlagStatus
     /tmp/cczQSXyD.s:3215   .text.RTC_GetFlagStatus:0000000000000020 $d
     /tmp/cczQSXyD.s:3220   .text.RTC_ClearFlag:0000000000000000 $t
     /tmp/cczQSXyD.s:3227   .text.RTC_ClearFlag:0000000000000000 RTC_ClearFlag
     /tmp/cczQSXyD.s:3248   .text.RTC_ClearFlag:0000000000000018 $d
     /tmp/cczQSXyD.s:3253   .text.RTC_GetITStatus:0000000000000000 $t
     /tmp/cczQSXyD.s:3260   .text.RTC_GetITStatus:0000000000000000 RTC_GetITStatus
     /tmp/cczQSXyD.s:3315   .text.RTC_GetITStatus:0000000000000034 $d
     /tmp/cczQSXyD.s:3320   .text.RTC_ClearITPendingBit:0000000000000000 $t
     /tmp/cczQSXyD.s:3327   .text.RTC_ClearITPendingBit:0000000000000000 RTC_ClearITPendingBit
     /tmp/cczQSXyD.s:3348   .text.RTC_ClearITPendingBit:0000000000000018 $d
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
