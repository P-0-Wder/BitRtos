ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"stm32f4xx_can.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.CheckITStatus,"ax",%progbits
  22              		.align	2
  23              		.thumb
  24              		.thumb_func
  26              	CheckITStatus:
  27              	.LFB147:
  28              		.file 1 "FWLIB/src/stm32f4xx_can.c"
   1:FWLIB/src/stm32f4xx_can.c **** /**
   2:FWLIB/src/stm32f4xx_can.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_can.c ****   * @file    stm32f4xx_can.c
   4:FWLIB/src/stm32f4xx_can.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_can.c ****   * @version V1.8.0
   6:FWLIB/src/stm32f4xx_can.c ****   * @date    04-November-2016
   7:FWLIB/src/stm32f4xx_can.c ****   * @brief   This file provides firmware functions to manage the following 
   8:FWLIB/src/stm32f4xx_can.c ****   *          functionalities of the Controller area network (CAN) peripheral:
   9:FWLIB/src/stm32f4xx_can.c ****   *           + Initialization and Configuration 
  10:FWLIB/src/stm32f4xx_can.c ****   *           + CAN Frames Transmission
  11:FWLIB/src/stm32f4xx_can.c ****   *           + CAN Frames Reception
  12:FWLIB/src/stm32f4xx_can.c ****   *           + Operation modes switch
  13:FWLIB/src/stm32f4xx_can.c ****   *           + Error management
  14:FWLIB/src/stm32f4xx_can.c ****   *           + Interrupts and flags
  15:FWLIB/src/stm32f4xx_can.c ****   *
  16:FWLIB/src/stm32f4xx_can.c **** @verbatim
  17:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
  18:FWLIB/src/stm32f4xx_can.c ****                         ##### How to use this driver #####
  19:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
  20:FWLIB/src/stm32f4xx_can.c ****     [..]
  21:FWLIB/src/stm32f4xx_can.c ****       (#) Enable the CAN controller interface clock using 
  22:FWLIB/src/stm32f4xx_can.c ****           RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1, ENABLE); for CAN1 
  23:FWLIB/src/stm32f4xx_can.c ****           and RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN2, ENABLE); for CAN2
  24:FWLIB/src/stm32f4xx_can.c ****       -@- In case you are using CAN2 only, you have to enable the CAN1 clock.
  25:FWLIB/src/stm32f4xx_can.c ****        
  26:FWLIB/src/stm32f4xx_can.c ****       (#) CAN pins configuration
  27:FWLIB/src/stm32f4xx_can.c ****         (++) Enable the clock for the CAN GPIOs using the following function:
  28:FWLIB/src/stm32f4xx_can.c ****              RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);   
  29:FWLIB/src/stm32f4xx_can.c ****         (++) Connect the involved CAN pins to AF9 using the following function 
  30:FWLIB/src/stm32f4xx_can.c ****              GPIO_PinAFConfig(GPIOx, GPIO_PinSourcex, GPIO_AF_CANx); 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 2


  31:FWLIB/src/stm32f4xx_can.c ****         (++) Configure these CAN pins in alternate function mode by calling
  32:FWLIB/src/stm32f4xx_can.c ****              the function  GPIO_Init();
  33:FWLIB/src/stm32f4xx_can.c ****       
  34:FWLIB/src/stm32f4xx_can.c ****       (#) Initialize and configure the CAN using CAN_Init() and 
  35:FWLIB/src/stm32f4xx_can.c ****           CAN_FilterInit() functions.   
  36:FWLIB/src/stm32f4xx_can.c ****                  
  37:FWLIB/src/stm32f4xx_can.c ****       (#) Transmit the desired CAN frame using CAN_Transmit() function.
  38:FWLIB/src/stm32f4xx_can.c ****            
  39:FWLIB/src/stm32f4xx_can.c ****       (#) Check the transmission of a CAN frame using CAN_TransmitStatus()
  40:FWLIB/src/stm32f4xx_can.c ****           function.
  41:FWLIB/src/stm32f4xx_can.c ****                  
  42:FWLIB/src/stm32f4xx_can.c ****       (#) Cancel the transmission of a CAN frame using CAN_CancelTransmit()
  43:FWLIB/src/stm32f4xx_can.c ****           function.  
  44:FWLIB/src/stm32f4xx_can.c ****               
  45:FWLIB/src/stm32f4xx_can.c ****       (#) Receive a CAN frame using CAN_Receive() function.
  46:FWLIB/src/stm32f4xx_can.c ****            
  47:FWLIB/src/stm32f4xx_can.c ****       (#) Release the receive FIFOs using CAN_FIFORelease() function.
  48:FWLIB/src/stm32f4xx_can.c ****                  
  49:FWLIB/src/stm32f4xx_can.c ****       (#) Return the number of pending received frames using 
  50:FWLIB/src/stm32f4xx_can.c ****           CAN_MessagePending() function.            
  51:FWLIB/src/stm32f4xx_can.c ****                      
  52:FWLIB/src/stm32f4xx_can.c ****       (#) To control CAN events you can use one of the following two methods:
  53:FWLIB/src/stm32f4xx_can.c ****         (++) Check on CAN flags using the CAN_GetFlagStatus() function.  
  54:FWLIB/src/stm32f4xx_can.c ****         (++) Use CAN interrupts through the function CAN_ITConfig() at 
  55:FWLIB/src/stm32f4xx_can.c ****              initialization phase and CAN_GetITStatus() function into 
  56:FWLIB/src/stm32f4xx_can.c ****              interrupt routines to check if the event has occurred or not.
  57:FWLIB/src/stm32f4xx_can.c ****              After checking on a flag you should clear it using CAN_ClearFlag()
  58:FWLIB/src/stm32f4xx_can.c ****              function. And after checking on an interrupt event you should 
  59:FWLIB/src/stm32f4xx_can.c ****              clear it using CAN_ClearITPendingBit() function.            
  60:FWLIB/src/stm32f4xx_can.c **** 
  61:FWLIB/src/stm32f4xx_can.c **** @endverbatim
  62:FWLIB/src/stm32f4xx_can.c ****            
  63:FWLIB/src/stm32f4xx_can.c ****   ******************************************************************************
  64:FWLIB/src/stm32f4xx_can.c ****   * @attention
  65:FWLIB/src/stm32f4xx_can.c ****   *
  66:FWLIB/src/stm32f4xx_can.c ****   * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
  67:FWLIB/src/stm32f4xx_can.c ****   *
  68:FWLIB/src/stm32f4xx_can.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  69:FWLIB/src/stm32f4xx_can.c ****   * You may not use this file except in compliance with the License.
  70:FWLIB/src/stm32f4xx_can.c ****   * You may obtain a copy of the License at:
  71:FWLIB/src/stm32f4xx_can.c ****   *
  72:FWLIB/src/stm32f4xx_can.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  73:FWLIB/src/stm32f4xx_can.c ****   *
  74:FWLIB/src/stm32f4xx_can.c ****   * Unless required by applicable law or agreed to in writing, software 
  75:FWLIB/src/stm32f4xx_can.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  76:FWLIB/src/stm32f4xx_can.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  77:FWLIB/src/stm32f4xx_can.c ****   * See the License for the specific language governing permissions and
  78:FWLIB/src/stm32f4xx_can.c ****   * limitations under the License.
  79:FWLIB/src/stm32f4xx_can.c ****   *
  80:FWLIB/src/stm32f4xx_can.c ****   ******************************************************************************  
  81:FWLIB/src/stm32f4xx_can.c ****   */
  82:FWLIB/src/stm32f4xx_can.c **** 
  83:FWLIB/src/stm32f4xx_can.c **** /* Includes ------------------------------------------------------------------*/
  84:FWLIB/src/stm32f4xx_can.c **** #include "stm32f4xx_can.h"
  85:FWLIB/src/stm32f4xx_can.c **** #include "stm32f4xx_rcc.h"
  86:FWLIB/src/stm32f4xx_can.c **** 
  87:FWLIB/src/stm32f4xx_can.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 3


  88:FWLIB/src/stm32f4xx_can.c ****   * @{
  89:FWLIB/src/stm32f4xx_can.c ****   */
  90:FWLIB/src/stm32f4xx_can.c **** 
  91:FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN 
  92:FWLIB/src/stm32f4xx_can.c ****   * @brief CAN driver modules
  93:FWLIB/src/stm32f4xx_can.c ****   * @{
  94:FWLIB/src/stm32f4xx_can.c ****   */ 
  95:FWLIB/src/stm32f4xx_can.c **** /* Private typedef -----------------------------------------------------------*/
  96:FWLIB/src/stm32f4xx_can.c **** /* Private define ------------------------------------------------------------*/
  97:FWLIB/src/stm32f4xx_can.c **** 
  98:FWLIB/src/stm32f4xx_can.c **** /* CAN Master Control Register bits */
  99:FWLIB/src/stm32f4xx_can.c **** #define MCR_DBF           ((uint32_t)0x00010000) /* software master reset */
 100:FWLIB/src/stm32f4xx_can.c **** 
 101:FWLIB/src/stm32f4xx_can.c **** /* CAN Mailbox Transmit Request */
 102:FWLIB/src/stm32f4xx_can.c **** #define TMIDxR_TXRQ       ((uint32_t)0x00000001) /* Transmit mailbox request */
 103:FWLIB/src/stm32f4xx_can.c **** 
 104:FWLIB/src/stm32f4xx_can.c **** /* CAN Filter Master Register bits */
 105:FWLIB/src/stm32f4xx_can.c **** #define FMR_FINIT         ((uint32_t)0x00000001) /* Filter init mode */
 106:FWLIB/src/stm32f4xx_can.c **** 
 107:FWLIB/src/stm32f4xx_can.c **** /* Time out for INAK bit */
 108:FWLIB/src/stm32f4xx_can.c **** #define INAK_TIMEOUT      ((uint32_t)0x0000FFFF)
 109:FWLIB/src/stm32f4xx_can.c **** /* Time out for SLAK bit */
 110:FWLIB/src/stm32f4xx_can.c **** #define SLAK_TIMEOUT      ((uint32_t)0x0000FFFF)
 111:FWLIB/src/stm32f4xx_can.c **** 
 112:FWLIB/src/stm32f4xx_can.c **** /* Flags in TSR register */
 113:FWLIB/src/stm32f4xx_can.c **** #define CAN_FLAGS_TSR     ((uint32_t)0x08000000) 
 114:FWLIB/src/stm32f4xx_can.c **** /* Flags in RF1R register */
 115:FWLIB/src/stm32f4xx_can.c **** #define CAN_FLAGS_RF1R    ((uint32_t)0x04000000) 
 116:FWLIB/src/stm32f4xx_can.c **** /* Flags in RF0R register */
 117:FWLIB/src/stm32f4xx_can.c **** #define CAN_FLAGS_RF0R    ((uint32_t)0x02000000) 
 118:FWLIB/src/stm32f4xx_can.c **** /* Flags in MSR register */
 119:FWLIB/src/stm32f4xx_can.c **** #define CAN_FLAGS_MSR     ((uint32_t)0x01000000) 
 120:FWLIB/src/stm32f4xx_can.c **** /* Flags in ESR register */
 121:FWLIB/src/stm32f4xx_can.c **** #define CAN_FLAGS_ESR     ((uint32_t)0x00F00000) 
 122:FWLIB/src/stm32f4xx_can.c **** 
 123:FWLIB/src/stm32f4xx_can.c **** /* Mailboxes definition */
 124:FWLIB/src/stm32f4xx_can.c **** #define CAN_TXMAILBOX_0   ((uint8_t)0x00)
 125:FWLIB/src/stm32f4xx_can.c **** #define CAN_TXMAILBOX_1   ((uint8_t)0x01)
 126:FWLIB/src/stm32f4xx_can.c **** #define CAN_TXMAILBOX_2   ((uint8_t)0x02) 
 127:FWLIB/src/stm32f4xx_can.c **** 
 128:FWLIB/src/stm32f4xx_can.c **** #define CAN_MODE_MASK     ((uint32_t) 0x00000003)
 129:FWLIB/src/stm32f4xx_can.c **** 
 130:FWLIB/src/stm32f4xx_can.c **** /* Private macro -------------------------------------------------------------*/
 131:FWLIB/src/stm32f4xx_can.c **** /* Private variables ---------------------------------------------------------*/
 132:FWLIB/src/stm32f4xx_can.c **** /* Private function prototypes -----------------------------------------------*/
 133:FWLIB/src/stm32f4xx_can.c **** /* Private functions ---------------------------------------------------------*/
 134:FWLIB/src/stm32f4xx_can.c **** static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit);
 135:FWLIB/src/stm32f4xx_can.c **** 
 136:FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Private_Functions
 137:FWLIB/src/stm32f4xx_can.c ****   * @{
 138:FWLIB/src/stm32f4xx_can.c ****   */
 139:FWLIB/src/stm32f4xx_can.c **** 
 140:FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Group1 Initialization and Configuration functions
 141:FWLIB/src/stm32f4xx_can.c ****  *  @brief    Initialization and Configuration functions 
 142:FWLIB/src/stm32f4xx_can.c ****  *
 143:FWLIB/src/stm32f4xx_can.c **** @verbatim    
 144:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 4


 145:FWLIB/src/stm32f4xx_can.c ****               ##### Initialization and Configuration functions #####
 146:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================  
 147:FWLIB/src/stm32f4xx_can.c ****     [..] This section provides functions allowing to 
 148:FWLIB/src/stm32f4xx_can.c ****       (+) Initialize the CAN peripherals : Prescaler, operating mode, the maximum 
 149:FWLIB/src/stm32f4xx_can.c ****           number of time quanta to perform resynchronization, the number of time 
 150:FWLIB/src/stm32f4xx_can.c ****           quanta in Bit Segment 1 and 2 and many other modes. 
 151:FWLIB/src/stm32f4xx_can.c ****           Refer to  @ref CAN_InitTypeDef  for more details.
 152:FWLIB/src/stm32f4xx_can.c ****       (+) Configures the CAN reception filter.                                      
 153:FWLIB/src/stm32f4xx_can.c ****       (+) Select the start bank filter for slave CAN.
 154:FWLIB/src/stm32f4xx_can.c ****       (+) Enables or disables the Debug Freeze mode for CAN
 155:FWLIB/src/stm32f4xx_can.c ****       (+)Enables or disables the CAN Time Trigger Operation communication mode
 156:FWLIB/src/stm32f4xx_can.c ****    
 157:FWLIB/src/stm32f4xx_can.c **** @endverbatim
 158:FWLIB/src/stm32f4xx_can.c ****   * @{
 159:FWLIB/src/stm32f4xx_can.c ****   */
 160:FWLIB/src/stm32f4xx_can.c ****   
 161:FWLIB/src/stm32f4xx_can.c **** /**
 162:FWLIB/src/stm32f4xx_can.c ****   * @brief  Deinitializes the CAN peripheral registers to their default reset values.
 163:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 164:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
 165:FWLIB/src/stm32f4xx_can.c ****   * @retval None.
 166:FWLIB/src/stm32f4xx_can.c ****   */
 167:FWLIB/src/stm32f4xx_can.c **** void CAN_DeInit(CAN_TypeDef* CANx)
 168:FWLIB/src/stm32f4xx_can.c **** {
 169:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 170:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 171:FWLIB/src/stm32f4xx_can.c ****  
 172:FWLIB/src/stm32f4xx_can.c ****   if (CANx == CAN1)
 173:FWLIB/src/stm32f4xx_can.c ****   {
 174:FWLIB/src/stm32f4xx_can.c ****     /* Enable CAN1 reset state */
 175:FWLIB/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 176:FWLIB/src/stm32f4xx_can.c ****     /* Release CAN1 from reset state */
 177:FWLIB/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 178:FWLIB/src/stm32f4xx_can.c ****   }
 179:FWLIB/src/stm32f4xx_can.c **** #if defined(STM32F413_423xx)
 180:FWLIB/src/stm32f4xx_can.c ****   else if(CANx == CAN2)
 181:FWLIB/src/stm32f4xx_can.c ****   {  
 182:FWLIB/src/stm32f4xx_can.c ****     /* Enable CAN2 reset state */
 183:FWLIB/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 184:FWLIB/src/stm32f4xx_can.c ****     /* Release CAN2 from reset state */
 185:FWLIB/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 186:FWLIB/src/stm32f4xx_can.c ****   }
 187:FWLIB/src/stm32f4xx_can.c ****   
 188:FWLIB/src/stm32f4xx_can.c ****   else /* CAN3 available only for STM32F413_423xx */
 189:FWLIB/src/stm32f4xx_can.c ****   {
 190:FWLIB/src/stm32f4xx_can.c ****     /* Enable CAN3 reset state */
 191:FWLIB/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN3, ENABLE);
 192:FWLIB/src/stm32f4xx_can.c ****     /* Release CAN3 from reset state */
 193:FWLIB/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN3, DISABLE); 
 194:FWLIB/src/stm32f4xx_can.c ****   }
 195:FWLIB/src/stm32f4xx_can.c **** #else
 196:FWLIB/src/stm32f4xx_can.c ****   else
 197:FWLIB/src/stm32f4xx_can.c ****   {
 198:FWLIB/src/stm32f4xx_can.c ****     /* Enable CAN2 reset state */
 199:FWLIB/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 200:FWLIB/src/stm32f4xx_can.c ****     /* Release CAN2 from reset state */
 201:FWLIB/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 5


 202:FWLIB/src/stm32f4xx_can.c ****   }
 203:FWLIB/src/stm32f4xx_can.c **** #endif /* STM32F413_423xx */
 204:FWLIB/src/stm32f4xx_can.c **** }
 205:FWLIB/src/stm32f4xx_can.c **** 
 206:FWLIB/src/stm32f4xx_can.c **** /**
 207:FWLIB/src/stm32f4xx_can.c ****   * @brief  Initializes the CAN peripheral according to the specified
 208:FWLIB/src/stm32f4xx_can.c ****   *         parameters in the CAN_InitStruct.
 209:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 210:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure that contains
 211:FWLIB/src/stm32f4xx_can.c ****   *         the configuration information for the CAN peripheral.
 212:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
 213:FWLIB/src/stm32f4xx_can.c ****   * @retval Constant indicates initialization succeed which will be 
 214:FWLIB/src/stm32f4xx_can.c ****   *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
 215:FWLIB/src/stm32f4xx_can.c ****   */
 216:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
 217:FWLIB/src/stm32f4xx_can.c **** {
 218:FWLIB/src/stm32f4xx_can.c ****   uint8_t InitStatus = CAN_InitStatus_Failed;
 219:FWLIB/src/stm32f4xx_can.c ****   uint32_t wait_ack = 0x00000000;
 220:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 221:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 222:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TTCM));
 223:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_ABOM));
 224:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_AWUM));
 225:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_NART));
 226:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_RFLM));
 227:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TXFP));
 228:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_MODE(CAN_InitStruct->CAN_Mode));
 229:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_SJW(CAN_InitStruct->CAN_SJW));
 230:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
 231:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
 232:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));
 233:FWLIB/src/stm32f4xx_can.c **** 
 234:FWLIB/src/stm32f4xx_can.c ****   /* Exit from sleep mode */
 235:FWLIB/src/stm32f4xx_can.c ****   CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 236:FWLIB/src/stm32f4xx_can.c **** 
 237:FWLIB/src/stm32f4xx_can.c ****   /* Request initialisation */
 238:FWLIB/src/stm32f4xx_can.c ****   CANx->MCR |= CAN_MCR_INRQ ;
 239:FWLIB/src/stm32f4xx_can.c **** 
 240:FWLIB/src/stm32f4xx_can.c ****   /* Wait the acknowledge */
 241:FWLIB/src/stm32f4xx_can.c ****   while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 242:FWLIB/src/stm32f4xx_can.c ****   {
 243:FWLIB/src/stm32f4xx_can.c ****     wait_ack++;
 244:FWLIB/src/stm32f4xx_can.c ****   }
 245:FWLIB/src/stm32f4xx_can.c **** 
 246:FWLIB/src/stm32f4xx_can.c ****   /* Check acknowledge */
 247:FWLIB/src/stm32f4xx_can.c ****   if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 248:FWLIB/src/stm32f4xx_can.c ****   {
 249:FWLIB/src/stm32f4xx_can.c ****     InitStatus = CAN_InitStatus_Failed;
 250:FWLIB/src/stm32f4xx_can.c ****   }
 251:FWLIB/src/stm32f4xx_can.c ****   else 
 252:FWLIB/src/stm32f4xx_can.c ****   {
 253:FWLIB/src/stm32f4xx_can.c ****     /* Set the time triggered communication mode */
 254:FWLIB/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_TTCM == ENABLE)
 255:FWLIB/src/stm32f4xx_can.c ****     {
 256:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_TTCM;
 257:FWLIB/src/stm32f4xx_can.c ****     }
 258:FWLIB/src/stm32f4xx_can.c ****     else
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 6


 259:FWLIB/src/stm32f4xx_can.c ****     {
 260:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 261:FWLIB/src/stm32f4xx_can.c ****     }
 262:FWLIB/src/stm32f4xx_can.c **** 
 263:FWLIB/src/stm32f4xx_can.c ****     /* Set the automatic bus-off management */
 264:FWLIB/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_ABOM == ENABLE)
 265:FWLIB/src/stm32f4xx_can.c ****     {
 266:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_ABOM;
 267:FWLIB/src/stm32f4xx_can.c ****     }
 268:FWLIB/src/stm32f4xx_can.c ****     else
 269:FWLIB/src/stm32f4xx_can.c ****     {
 270:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 271:FWLIB/src/stm32f4xx_can.c ****     }
 272:FWLIB/src/stm32f4xx_can.c **** 
 273:FWLIB/src/stm32f4xx_can.c ****     /* Set the automatic wake-up mode */
 274:FWLIB/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_AWUM == ENABLE)
 275:FWLIB/src/stm32f4xx_can.c ****     {
 276:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_AWUM;
 277:FWLIB/src/stm32f4xx_can.c ****     }
 278:FWLIB/src/stm32f4xx_can.c ****     else
 279:FWLIB/src/stm32f4xx_can.c ****     {
 280:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 281:FWLIB/src/stm32f4xx_can.c ****     }
 282:FWLIB/src/stm32f4xx_can.c **** 
 283:FWLIB/src/stm32f4xx_can.c ****     /* Set the no automatic retransmission */
 284:FWLIB/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_NART == ENABLE)
 285:FWLIB/src/stm32f4xx_can.c ****     {
 286:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_NART;
 287:FWLIB/src/stm32f4xx_can.c ****     }
 288:FWLIB/src/stm32f4xx_can.c ****     else
 289:FWLIB/src/stm32f4xx_can.c ****     {
 290:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 291:FWLIB/src/stm32f4xx_can.c ****     }
 292:FWLIB/src/stm32f4xx_can.c **** 
 293:FWLIB/src/stm32f4xx_can.c ****     /* Set the receive FIFO locked mode */
 294:FWLIB/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_RFLM == ENABLE)
 295:FWLIB/src/stm32f4xx_can.c ****     {
 296:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_RFLM;
 297:FWLIB/src/stm32f4xx_can.c ****     }
 298:FWLIB/src/stm32f4xx_can.c ****     else
 299:FWLIB/src/stm32f4xx_can.c ****     {
 300:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 301:FWLIB/src/stm32f4xx_can.c ****     }
 302:FWLIB/src/stm32f4xx_can.c **** 
 303:FWLIB/src/stm32f4xx_can.c ****     /* Set the transmit FIFO priority */
 304:FWLIB/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_TXFP == ENABLE)
 305:FWLIB/src/stm32f4xx_can.c ****     {
 306:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_TXFP;
 307:FWLIB/src/stm32f4xx_can.c ****     }
 308:FWLIB/src/stm32f4xx_can.c ****     else
 309:FWLIB/src/stm32f4xx_can.c ****     {
 310:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 311:FWLIB/src/stm32f4xx_can.c ****     }
 312:FWLIB/src/stm32f4xx_can.c **** 
 313:FWLIB/src/stm32f4xx_can.c ****     /* Set the bit timing register */
 314:FWLIB/src/stm32f4xx_can.c ****     CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 315:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 7


 316:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 317:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 318:FWLIB/src/stm32f4xx_can.c ****                ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 319:FWLIB/src/stm32f4xx_can.c **** 
 320:FWLIB/src/stm32f4xx_can.c ****     /* Request leave initialisation */
 321:FWLIB/src/stm32f4xx_can.c ****     CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 322:FWLIB/src/stm32f4xx_can.c **** 
 323:FWLIB/src/stm32f4xx_can.c ****    /* Wait the acknowledge */
 324:FWLIB/src/stm32f4xx_can.c ****    wait_ack = 0;
 325:FWLIB/src/stm32f4xx_can.c **** 
 326:FWLIB/src/stm32f4xx_can.c ****    while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 327:FWLIB/src/stm32f4xx_can.c ****    {
 328:FWLIB/src/stm32f4xx_can.c ****      wait_ack++;
 329:FWLIB/src/stm32f4xx_can.c ****    }
 330:FWLIB/src/stm32f4xx_can.c **** 
 331:FWLIB/src/stm32f4xx_can.c ****     /* ...and check acknowledged */
 332:FWLIB/src/stm32f4xx_can.c ****     if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 333:FWLIB/src/stm32f4xx_can.c ****     {
 334:FWLIB/src/stm32f4xx_can.c ****       InitStatus = CAN_InitStatus_Failed;
 335:FWLIB/src/stm32f4xx_can.c ****     }
 336:FWLIB/src/stm32f4xx_can.c ****     else
 337:FWLIB/src/stm32f4xx_can.c ****     {
 338:FWLIB/src/stm32f4xx_can.c ****       InitStatus = CAN_InitStatus_Success ;
 339:FWLIB/src/stm32f4xx_can.c ****     }
 340:FWLIB/src/stm32f4xx_can.c ****   }
 341:FWLIB/src/stm32f4xx_can.c **** 
 342:FWLIB/src/stm32f4xx_can.c ****   /* At this step, return the status of initialization */
 343:FWLIB/src/stm32f4xx_can.c ****   return InitStatus;
 344:FWLIB/src/stm32f4xx_can.c **** }
 345:FWLIB/src/stm32f4xx_can.c **** 
 346:FWLIB/src/stm32f4xx_can.c **** #if defined(STM32F413_423xx)
 347:FWLIB/src/stm32f4xx_can.c **** /**
 348:FWLIB/src/stm32f4xx_can.c ****   * @brief  Configures the CAN reception filter according to the specified
 349:FWLIB/src/stm32f4xx_can.c ****   *         parameters in the CAN_FilterInitStruct.
 350:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 3 to select the CAN peripheral.
 351:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
 352:FWLIB/src/stm32f4xx_can.c ****   *         contains the configuration information.
 353:FWLIB/src/stm32f4xx_can.c ****   * @retval None
 354:FWLIB/src/stm32f4xx_can.c ****   */
 355:FWLIB/src/stm32f4xx_can.c **** void CAN_FilterInit(CAN_TypeDef* CANx, CAN_FilterInitTypeDef* CAN_FilterInitStruct)
 356:FWLIB/src/stm32f4xx_can.c **** {
 357:FWLIB/src/stm32f4xx_can.c ****   uint32_t filter_number_bit_pos = 0;
 358:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 359:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_NUMBER(CAN_FilterInitStruct->CAN_FilterNumber));
 360:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
 361:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
 362:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
 363:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));
 364:FWLIB/src/stm32f4xx_can.c ****   
 365:FWLIB/src/stm32f4xx_can.c ****   filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 366:FWLIB/src/stm32f4xx_can.c **** 
 367:FWLIB/src/stm32f4xx_can.c ****   /* Initialisation mode for the filter */
 368:FWLIB/src/stm32f4xx_can.c ****   CANx->FMR |= FMR_FINIT;
 369:FWLIB/src/stm32f4xx_can.c **** 
 370:FWLIB/src/stm32f4xx_can.c ****   /* Filter Deactivation */
 371:FWLIB/src/stm32f4xx_can.c ****   CANx->FA1R &= ~(uint32_t)filter_number_bit_pos;
 372:FWLIB/src/stm32f4xx_can.c **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 8


 373:FWLIB/src/stm32f4xx_can.c ****   /* Filter Scale */
 374:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 375:FWLIB/src/stm32f4xx_can.c ****   {
 376:FWLIB/src/stm32f4xx_can.c ****     /* 16-bit scale for the filter */
 377:FWLIB/src/stm32f4xx_can.c ****     CANx->FS1R &= ~(uint32_t)filter_number_bit_pos;
 378:FWLIB/src/stm32f4xx_can.c **** 
 379:FWLIB/src/stm32f4xx_can.c ****     /* First 16-bit identifier and First 16-bit mask */
 380:FWLIB/src/stm32f4xx_can.c ****     /* Or First 16-bit identifier and Second 16-bit identifier */
 381:FWLIB/src/stm32f4xx_can.c ****     CANx->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 382:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 383:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 384:FWLIB/src/stm32f4xx_can.c **** 
 385:FWLIB/src/stm32f4xx_can.c ****     /* Second 16-bit identifier and Second 16-bit mask */
 386:FWLIB/src/stm32f4xx_can.c ****     /* Or Third 16-bit identifier and Fourth 16-bit identifier */
 387:FWLIB/src/stm32f4xx_can.c ****     CANx->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 388:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 389:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 390:FWLIB/src/stm32f4xx_can.c ****   }
 391:FWLIB/src/stm32f4xx_can.c **** 
 392:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 393:FWLIB/src/stm32f4xx_can.c ****   {
 394:FWLIB/src/stm32f4xx_can.c ****     /* 32-bit scale for the filter */
 395:FWLIB/src/stm32f4xx_can.c ****     CANx->FS1R |= filter_number_bit_pos;
 396:FWLIB/src/stm32f4xx_can.c ****     /* 32-bit identifier or First 32-bit identifier */
 397:FWLIB/src/stm32f4xx_can.c ****     CANx->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 398:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 399:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 400:FWLIB/src/stm32f4xx_can.c ****     /* 32-bit mask or Second 32-bit identifier */
 401:FWLIB/src/stm32f4xx_can.c ****     CANx->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 402:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 403:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 404:FWLIB/src/stm32f4xx_can.c ****   }
 405:FWLIB/src/stm32f4xx_can.c **** 
 406:FWLIB/src/stm32f4xx_can.c ****   /* Filter Mode */
 407:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 408:FWLIB/src/stm32f4xx_can.c ****   {
 409:FWLIB/src/stm32f4xx_can.c ****     /*Id/Mask mode for the filter*/
 410:FWLIB/src/stm32f4xx_can.c ****     CANx->FM1R &= ~(uint32_t)filter_number_bit_pos;
 411:FWLIB/src/stm32f4xx_can.c ****   }
 412:FWLIB/src/stm32f4xx_can.c ****   else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
 413:FWLIB/src/stm32f4xx_can.c ****   {
 414:FWLIB/src/stm32f4xx_can.c ****     /*Identifier list mode for the filter*/
 415:FWLIB/src/stm32f4xx_can.c ****     CANx->FM1R |= (uint32_t)filter_number_bit_pos;
 416:FWLIB/src/stm32f4xx_can.c ****   }
 417:FWLIB/src/stm32f4xx_can.c **** 
 418:FWLIB/src/stm32f4xx_can.c ****   /* Filter FIFO assignment */
 419:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 420:FWLIB/src/stm32f4xx_can.c ****   {
 421:FWLIB/src/stm32f4xx_can.c ****     /* FIFO 0 assignation for the filter */
 422:FWLIB/src/stm32f4xx_can.c ****     CANx->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 423:FWLIB/src/stm32f4xx_can.c ****   }
 424:FWLIB/src/stm32f4xx_can.c **** 
 425:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 426:FWLIB/src/stm32f4xx_can.c ****   {
 427:FWLIB/src/stm32f4xx_can.c ****     /* FIFO 1 assignation for the filter */
 428:FWLIB/src/stm32f4xx_can.c ****     CANx->FFA1R |= (uint32_t)filter_number_bit_pos;
 429:FWLIB/src/stm32f4xx_can.c ****   }
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 9


 430:FWLIB/src/stm32f4xx_can.c ****   
 431:FWLIB/src/stm32f4xx_can.c ****   /* Filter activation */
 432:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 433:FWLIB/src/stm32f4xx_can.c ****   {
 434:FWLIB/src/stm32f4xx_can.c ****     CANx->FA1R |= filter_number_bit_pos;
 435:FWLIB/src/stm32f4xx_can.c ****   }
 436:FWLIB/src/stm32f4xx_can.c **** 
 437:FWLIB/src/stm32f4xx_can.c ****   /* Leave the initialisation mode for the filter */
 438:FWLIB/src/stm32f4xx_can.c ****   CANx->FMR &= ~FMR_FINIT;
 439:FWLIB/src/stm32f4xx_can.c **** }
 440:FWLIB/src/stm32f4xx_can.c **** #else
 441:FWLIB/src/stm32f4xx_can.c **** /**
 442:FWLIB/src/stm32f4xx_can.c ****   * @brief  Configures the CAN reception filter according to the specified
 443:FWLIB/src/stm32f4xx_can.c ****   *         parameters in the CAN_FilterInitStruct.
 444:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
 445:FWLIB/src/stm32f4xx_can.c ****   *         contains the configuration information.
 446:FWLIB/src/stm32f4xx_can.c ****   * @retval None
 447:FWLIB/src/stm32f4xx_can.c ****   */
 448:FWLIB/src/stm32f4xx_can.c **** void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
 449:FWLIB/src/stm32f4xx_can.c **** {
 450:FWLIB/src/stm32f4xx_can.c ****   uint32_t filter_number_bit_pos = 0;
 451:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 452:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_NUMBER(CAN_FilterInitStruct->CAN_FilterNumber));
 453:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
 454:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
 455:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
 456:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));
 457:FWLIB/src/stm32f4xx_can.c **** 
 458:FWLIB/src/stm32f4xx_can.c ****   filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 459:FWLIB/src/stm32f4xx_can.c **** 
 460:FWLIB/src/stm32f4xx_can.c ****   /* Initialisation mode for the filter */
 461:FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR |= FMR_FINIT;
 462:FWLIB/src/stm32f4xx_can.c **** 
 463:FWLIB/src/stm32f4xx_can.c ****   /* Filter Deactivation */
 464:FWLIB/src/stm32f4xx_can.c ****   CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 465:FWLIB/src/stm32f4xx_can.c **** 
 466:FWLIB/src/stm32f4xx_can.c ****   /* Filter Scale */
 467:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 468:FWLIB/src/stm32f4xx_can.c ****   {
 469:FWLIB/src/stm32f4xx_can.c ****     /* 16-bit scale for the filter */
 470:FWLIB/src/stm32f4xx_can.c ****     CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 471:FWLIB/src/stm32f4xx_can.c **** 
 472:FWLIB/src/stm32f4xx_can.c ****     /* First 16-bit identifier and First 16-bit mask */
 473:FWLIB/src/stm32f4xx_can.c ****     /* Or First 16-bit identifier and Second 16-bit identifier */
 474:FWLIB/src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 475:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 476:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 477:FWLIB/src/stm32f4xx_can.c **** 
 478:FWLIB/src/stm32f4xx_can.c ****     /* Second 16-bit identifier and Second 16-bit mask */
 479:FWLIB/src/stm32f4xx_can.c ****     /* Or Third 16-bit identifier and Fourth 16-bit identifier */
 480:FWLIB/src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 481:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 482:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 483:FWLIB/src/stm32f4xx_can.c ****   }
 484:FWLIB/src/stm32f4xx_can.c **** 
 485:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 486:FWLIB/src/stm32f4xx_can.c ****   {
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 10


 487:FWLIB/src/stm32f4xx_can.c ****     /* 32-bit scale for the filter */
 488:FWLIB/src/stm32f4xx_can.c ****     CAN1->FS1R |= filter_number_bit_pos;
 489:FWLIB/src/stm32f4xx_can.c ****     /* 32-bit identifier or First 32-bit identifier */
 490:FWLIB/src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 491:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 492:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 493:FWLIB/src/stm32f4xx_can.c ****     /* 32-bit mask or Second 32-bit identifier */
 494:FWLIB/src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 495:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 496:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 497:FWLIB/src/stm32f4xx_can.c ****   }
 498:FWLIB/src/stm32f4xx_can.c **** 
 499:FWLIB/src/stm32f4xx_can.c ****   /* Filter Mode */
 500:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 501:FWLIB/src/stm32f4xx_can.c ****   {
 502:FWLIB/src/stm32f4xx_can.c ****     /*Id/Mask mode for the filter*/
 503:FWLIB/src/stm32f4xx_can.c ****     CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 504:FWLIB/src/stm32f4xx_can.c ****   }
 505:FWLIB/src/stm32f4xx_can.c ****   else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
 506:FWLIB/src/stm32f4xx_can.c ****   {
 507:FWLIB/src/stm32f4xx_can.c ****     /*Identifier list mode for the filter*/
 508:FWLIB/src/stm32f4xx_can.c ****     CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 509:FWLIB/src/stm32f4xx_can.c ****   }
 510:FWLIB/src/stm32f4xx_can.c **** 
 511:FWLIB/src/stm32f4xx_can.c ****   /* Filter FIFO assignment */
 512:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 513:FWLIB/src/stm32f4xx_can.c ****   {
 514:FWLIB/src/stm32f4xx_can.c ****     /* FIFO 0 assignation for the filter */
 515:FWLIB/src/stm32f4xx_can.c ****     CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 516:FWLIB/src/stm32f4xx_can.c ****   }
 517:FWLIB/src/stm32f4xx_can.c **** 
 518:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 519:FWLIB/src/stm32f4xx_can.c ****   {
 520:FWLIB/src/stm32f4xx_can.c ****     /* FIFO 1 assignation for the filter */
 521:FWLIB/src/stm32f4xx_can.c ****     CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 522:FWLIB/src/stm32f4xx_can.c ****   }
 523:FWLIB/src/stm32f4xx_can.c ****   
 524:FWLIB/src/stm32f4xx_can.c ****   /* Filter activation */
 525:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 526:FWLIB/src/stm32f4xx_can.c ****   {
 527:FWLIB/src/stm32f4xx_can.c ****     CAN1->FA1R |= filter_number_bit_pos;
 528:FWLIB/src/stm32f4xx_can.c ****   }
 529:FWLIB/src/stm32f4xx_can.c **** 
 530:FWLIB/src/stm32f4xx_can.c ****   /* Leave the initialisation mode for the filter */
 531:FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR &= ~FMR_FINIT;
 532:FWLIB/src/stm32f4xx_can.c **** }
 533:FWLIB/src/stm32f4xx_can.c **** #endif /* STM32F413_423xx */
 534:FWLIB/src/stm32f4xx_can.c **** 
 535:FWLIB/src/stm32f4xx_can.c **** /**
 536:FWLIB/src/stm32f4xx_can.c ****   * @brief  Fills each CAN_InitStruct member with its default value.
 537:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which ill be initialized.
 538:FWLIB/src/stm32f4xx_can.c ****   * @retval None
 539:FWLIB/src/stm32f4xx_can.c ****   */
 540:FWLIB/src/stm32f4xx_can.c **** void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
 541:FWLIB/src/stm32f4xx_can.c **** {
 542:FWLIB/src/stm32f4xx_can.c ****   /* Reset CAN init structure parameters values */
 543:FWLIB/src/stm32f4xx_can.c ****   
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 11


 544:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the time triggered communication mode */
 545:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_TTCM = DISABLE;
 546:FWLIB/src/stm32f4xx_can.c ****   
 547:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the automatic bus-off management */
 548:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_ABOM = DISABLE;
 549:FWLIB/src/stm32f4xx_can.c ****   
 550:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the automatic wake-up mode */
 551:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_AWUM = DISABLE;
 552:FWLIB/src/stm32f4xx_can.c ****   
 553:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the no automatic retransmission */
 554:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_NART = DISABLE;
 555:FWLIB/src/stm32f4xx_can.c ****   
 556:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the receive FIFO locked mode */
 557:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_RFLM = DISABLE;
 558:FWLIB/src/stm32f4xx_can.c ****   
 559:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the transmit FIFO priority */
 560:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_TXFP = DISABLE;
 561:FWLIB/src/stm32f4xx_can.c ****   
 562:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the CAN_Mode member */
 563:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 564:FWLIB/src/stm32f4xx_can.c ****   
 565:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the CAN_SJW member */
 566:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 567:FWLIB/src/stm32f4xx_can.c ****   
 568:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the CAN_BS1 member */
 569:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 570:FWLIB/src/stm32f4xx_can.c ****   
 571:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the CAN_BS2 member */
 572:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 573:FWLIB/src/stm32f4xx_can.c ****   
 574:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the CAN_Prescaler member */
 575:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_Prescaler = 1;
 576:FWLIB/src/stm32f4xx_can.c **** }
 577:FWLIB/src/stm32f4xx_can.c **** 
 578:FWLIB/src/stm32f4xx_can.c **** #if defined(STM32F413_423xx)
 579:FWLIB/src/stm32f4xx_can.c **** /**
 580:FWLIB/src/stm32f4xx_can.c ****   * @brief  Select the start bank filter for slave CAN.
 581:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 3 to select the CAN peripheral.
 582:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
 583:FWLIB/src/stm32f4xx_can.c ****   * @retval None
 584:FWLIB/src/stm32f4xx_can.c ****   */
 585:FWLIB/src/stm32f4xx_can.c **** void CAN_SlaveStartBank(CAN_TypeDef* CANx, uint8_t CAN_BankNumber) 
 586:FWLIB/src/stm32f4xx_can.c **** {
 587:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 588:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
 589:FWLIB/src/stm32f4xx_can.c ****   
 590:FWLIB/src/stm32f4xx_can.c ****   /* Enter Initialisation mode for the filter */
 591:FWLIB/src/stm32f4xx_can.c ****   CANx->FMR |= FMR_FINIT;
 592:FWLIB/src/stm32f4xx_can.c ****   
 593:FWLIB/src/stm32f4xx_can.c ****   /* Select the start slave bank */
 594:FWLIB/src/stm32f4xx_can.c ****   CANx->FMR &= (uint32_t)0xFFFFC0F1 ;
 595:FWLIB/src/stm32f4xx_can.c ****   CANx->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 596:FWLIB/src/stm32f4xx_can.c ****   
 597:FWLIB/src/stm32f4xx_can.c ****   /* Leave Initialisation mode for the filter */
 598:FWLIB/src/stm32f4xx_can.c ****   CANx->FMR &= ~FMR_FINIT;
 599:FWLIB/src/stm32f4xx_can.c **** }
 600:FWLIB/src/stm32f4xx_can.c **** #else
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 12


 601:FWLIB/src/stm32f4xx_can.c **** /**
 602:FWLIB/src/stm32f4xx_can.c ****   * @brief  Select the start bank filter for slave CAN.
 603:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
 604:FWLIB/src/stm32f4xx_can.c ****   * @retval None
 605:FWLIB/src/stm32f4xx_can.c ****   */
 606:FWLIB/src/stm32f4xx_can.c **** void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
 607:FWLIB/src/stm32f4xx_can.c **** {
 608:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 609:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
 610:FWLIB/src/stm32f4xx_can.c ****   
 611:FWLIB/src/stm32f4xx_can.c ****   /* Enter Initialisation mode for the filter */
 612:FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR |= FMR_FINIT;
 613:FWLIB/src/stm32f4xx_can.c ****   
 614:FWLIB/src/stm32f4xx_can.c ****   /* Select the start slave bank */
 615:FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 616:FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 617:FWLIB/src/stm32f4xx_can.c ****   
 618:FWLIB/src/stm32f4xx_can.c ****   /* Leave Initialisation mode for the filter */
 619:FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR &= ~FMR_FINIT;
 620:FWLIB/src/stm32f4xx_can.c **** }
 621:FWLIB/src/stm32f4xx_can.c **** #endif /* STM32F413_423xx */
 622:FWLIB/src/stm32f4xx_can.c **** /**
 623:FWLIB/src/stm32f4xx_can.c ****   * @brief  Enables or disables the DBG Freeze for CAN.
 624:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 625:FWLIB/src/stm32f4xx_can.c ****   * @param  NewState: new state of the CAN peripheral. 
 626:FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be: ENABLE (CAN reception/transmission is frozen
 627:FWLIB/src/stm32f4xx_can.c ****   *          during debug. Reception FIFOs can still be accessed/controlled normally) 
 628:FWLIB/src/stm32f4xx_can.c ****   *          or DISABLE (CAN is working during debug).
 629:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
 630:FWLIB/src/stm32f4xx_can.c ****   * @retval None
 631:FWLIB/src/stm32f4xx_can.c ****   */
 632:FWLIB/src/stm32f4xx_can.c **** void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
 633:FWLIB/src/stm32f4xx_can.c **** {
 634:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 635:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 636:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 637:FWLIB/src/stm32f4xx_can.c ****   
 638:FWLIB/src/stm32f4xx_can.c ****   if (NewState != DISABLE)
 639:FWLIB/src/stm32f4xx_can.c ****   {
 640:FWLIB/src/stm32f4xx_can.c ****     /* Enable Debug Freeze  */
 641:FWLIB/src/stm32f4xx_can.c ****     CANx->MCR |= MCR_DBF;
 642:FWLIB/src/stm32f4xx_can.c ****   }
 643:FWLIB/src/stm32f4xx_can.c ****   else
 644:FWLIB/src/stm32f4xx_can.c ****   {
 645:FWLIB/src/stm32f4xx_can.c ****     /* Disable Debug Freeze */
 646:FWLIB/src/stm32f4xx_can.c ****     CANx->MCR &= ~MCR_DBF;
 647:FWLIB/src/stm32f4xx_can.c ****   }
 648:FWLIB/src/stm32f4xx_can.c **** }
 649:FWLIB/src/stm32f4xx_can.c **** 
 650:FWLIB/src/stm32f4xx_can.c **** 
 651:FWLIB/src/stm32f4xx_can.c **** /**
 652:FWLIB/src/stm32f4xx_can.c ****   * @brief  Enables or disables the CAN Time TriggerOperation communication mode.
 653:FWLIB/src/stm32f4xx_can.c ****   * @note   DLC must be programmed as 8 in order Time Stamp (2 bytes) to be 
 654:FWLIB/src/stm32f4xx_can.c ****   *         sent over the CAN bus.  
 655:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 656:FWLIB/src/stm32f4xx_can.c ****   * @param  NewState: Mode new state. This parameter can be: ENABLE or DISABLE.
 657:FWLIB/src/stm32f4xx_can.c ****   *         When enabled, Time stamp (TIME[15:0]) value is  sent in the last two
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 13


 658:FWLIB/src/stm32f4xx_can.c ****   *         data bytes of the 8-byte message: TIME[7:0] in data byte 6 and TIME[15:8] 
 659:FWLIB/src/stm32f4xx_can.c ****   *         in data byte 7.
 660:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
 661:FWLIB/src/stm32f4xx_can.c ****   * @retval None
 662:FWLIB/src/stm32f4xx_can.c ****   */
 663:FWLIB/src/stm32f4xx_can.c **** void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
 664:FWLIB/src/stm32f4xx_can.c **** {
 665:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 666:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 667:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 668:FWLIB/src/stm32f4xx_can.c ****   if (NewState != DISABLE)
 669:FWLIB/src/stm32f4xx_can.c ****   {
 670:FWLIB/src/stm32f4xx_can.c ****     /* Enable the TTCM mode */
 671:FWLIB/src/stm32f4xx_can.c ****     CANx->MCR |= CAN_MCR_TTCM;
 672:FWLIB/src/stm32f4xx_can.c **** 
 673:FWLIB/src/stm32f4xx_can.c ****     /* Set TGT bits */
 674:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 675:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 676:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 677:FWLIB/src/stm32f4xx_can.c ****   }
 678:FWLIB/src/stm32f4xx_can.c ****   else
 679:FWLIB/src/stm32f4xx_can.c ****   {
 680:FWLIB/src/stm32f4xx_can.c ****     /* Disable the TTCM mode */
 681:FWLIB/src/stm32f4xx_can.c ****     CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 682:FWLIB/src/stm32f4xx_can.c **** 
 683:FWLIB/src/stm32f4xx_can.c ****     /* Reset TGT bits */
 684:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 685:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 686:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 687:FWLIB/src/stm32f4xx_can.c ****   }
 688:FWLIB/src/stm32f4xx_can.c **** }
 689:FWLIB/src/stm32f4xx_can.c **** /**
 690:FWLIB/src/stm32f4xx_can.c ****   * @}
 691:FWLIB/src/stm32f4xx_can.c ****   */
 692:FWLIB/src/stm32f4xx_can.c **** 
 693:FWLIB/src/stm32f4xx_can.c **** 
 694:FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Group2 CAN Frames Transmission functions
 695:FWLIB/src/stm32f4xx_can.c ****  *  @brief    CAN Frames Transmission functions 
 696:FWLIB/src/stm32f4xx_can.c ****  *
 697:FWLIB/src/stm32f4xx_can.c **** @verbatim    
 698:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
 699:FWLIB/src/stm32f4xx_can.c ****                 ##### CAN Frames Transmission functions #####
 700:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================  
 701:FWLIB/src/stm32f4xx_can.c ****     [..] This section provides functions allowing to 
 702:FWLIB/src/stm32f4xx_can.c ****       (+) Initiate and transmit a CAN frame message (if there is an empty mailbox).
 703:FWLIB/src/stm32f4xx_can.c ****       (+) Check the transmission status of a CAN Frame
 704:FWLIB/src/stm32f4xx_can.c ****       (+) Cancel a transmit request
 705:FWLIB/src/stm32f4xx_can.c ****    
 706:FWLIB/src/stm32f4xx_can.c **** @endverbatim
 707:FWLIB/src/stm32f4xx_can.c ****   * @{
 708:FWLIB/src/stm32f4xx_can.c ****   */
 709:FWLIB/src/stm32f4xx_can.c **** 
 710:FWLIB/src/stm32f4xx_can.c **** /**
 711:FWLIB/src/stm32f4xx_can.c ****   * @brief  Initiates and transmits a CAN frame message.
 712:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 713:FWLIB/src/stm32f4xx_can.c ****   * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
 714:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 14


 715:FWLIB/src/stm32f4xx_can.c ****   * @retval The number of the mailbox that is used for transmission or
 716:FWLIB/src/stm32f4xx_can.c ****   *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
 717:FWLIB/src/stm32f4xx_can.c ****   */
 718:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
 719:FWLIB/src/stm32f4xx_can.c **** {
 720:FWLIB/src/stm32f4xx_can.c ****   uint8_t transmit_mailbox = 0;
 721:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 722:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 723:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
 724:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_RTR(TxMessage->RTR));
 725:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_DLC(TxMessage->DLC));
 726:FWLIB/src/stm32f4xx_can.c **** 
 727:FWLIB/src/stm32f4xx_can.c ****   /* Select one empty transmit mailbox */
 728:FWLIB/src/stm32f4xx_can.c ****   if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 729:FWLIB/src/stm32f4xx_can.c ****   {
 730:FWLIB/src/stm32f4xx_can.c ****     transmit_mailbox = 0;
 731:FWLIB/src/stm32f4xx_can.c ****   }
 732:FWLIB/src/stm32f4xx_can.c ****   else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 733:FWLIB/src/stm32f4xx_can.c ****   {
 734:FWLIB/src/stm32f4xx_can.c ****     transmit_mailbox = 1;
 735:FWLIB/src/stm32f4xx_can.c ****   }
 736:FWLIB/src/stm32f4xx_can.c ****   else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 737:FWLIB/src/stm32f4xx_can.c ****   {
 738:FWLIB/src/stm32f4xx_can.c ****     transmit_mailbox = 2;
 739:FWLIB/src/stm32f4xx_can.c ****   }
 740:FWLIB/src/stm32f4xx_can.c ****   else
 741:FWLIB/src/stm32f4xx_can.c ****   {
 742:FWLIB/src/stm32f4xx_can.c ****     transmit_mailbox = CAN_TxStatus_NoMailBox;
 743:FWLIB/src/stm32f4xx_can.c ****   }
 744:FWLIB/src/stm32f4xx_can.c **** 
 745:FWLIB/src/stm32f4xx_can.c ****   if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 746:FWLIB/src/stm32f4xx_can.c ****   {
 747:FWLIB/src/stm32f4xx_can.c ****     /* Set up the Id */
 748:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 749:FWLIB/src/stm32f4xx_can.c ****     if (TxMessage->IDE == CAN_Id_Standard)
 750:FWLIB/src/stm32f4xx_can.c ****     {
 751:FWLIB/src/stm32f4xx_can.c ****       assert_param(IS_CAN_STDID(TxMessage->StdId));  
 752:FWLIB/src/stm32f4xx_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 753:FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 754:FWLIB/src/stm32f4xx_can.c ****     }
 755:FWLIB/src/stm32f4xx_can.c ****     else
 756:FWLIB/src/stm32f4xx_can.c ****     {
 757:FWLIB/src/stm32f4xx_can.c ****       assert_param(IS_CAN_EXTID(TxMessage->ExtId));
 758:FWLIB/src/stm32f4xx_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 759:FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->IDE | \
 760:FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 761:FWLIB/src/stm32f4xx_can.c ****     }
 762:FWLIB/src/stm32f4xx_can.c ****     
 763:FWLIB/src/stm32f4xx_can.c ****     /* Set up the DLC */
 764:FWLIB/src/stm32f4xx_can.c ****     TxMessage->DLC &= (uint8_t)0x0000000F;
 765:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 766:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 767:FWLIB/src/stm32f4xx_can.c **** 
 768:FWLIB/src/stm32f4xx_can.c ****     /* Set up the data field */
 769:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 770:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 771:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 15


 772:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[0]));
 773:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 774:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 775:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 776:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[4]));
 777:FWLIB/src/stm32f4xx_can.c ****     /* Request transmission */
 778:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 779:FWLIB/src/stm32f4xx_can.c ****   }
 780:FWLIB/src/stm32f4xx_can.c ****   return transmit_mailbox;
 781:FWLIB/src/stm32f4xx_can.c **** }
 782:FWLIB/src/stm32f4xx_can.c **** 
 783:FWLIB/src/stm32f4xx_can.c **** /**
 784:FWLIB/src/stm32f4xx_can.c ****   * @brief  Checks the transmission status of a CAN Frame.
 785:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 786:FWLIB/src/stm32f4xx_can.c ****   * @param  TransmitMailbox: the number of the mailbox that is used for transmission.
 787:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
 788:FWLIB/src/stm32f4xx_can.c ****   * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, 
 789:FWLIB/src/stm32f4xx_can.c ****   *         CAN_TxStatus_Failed in an other case.
 790:FWLIB/src/stm32f4xx_can.c ****   */
 791:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
 792:FWLIB/src/stm32f4xx_can.c **** {
 793:FWLIB/src/stm32f4xx_can.c ****   uint32_t state = 0;
 794:FWLIB/src/stm32f4xx_can.c **** 
 795:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 796:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 797:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 798:FWLIB/src/stm32f4xx_can.c ****  
 799:FWLIB/src/stm32f4xx_can.c ****   switch (TransmitMailbox)
 800:FWLIB/src/stm32f4xx_can.c ****   {
 801:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_0): 
 802:FWLIB/src/stm32f4xx_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 803:FWLIB/src/stm32f4xx_can.c ****       break;
 804:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_1): 
 805:FWLIB/src/stm32f4xx_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 806:FWLIB/src/stm32f4xx_can.c ****       break;
 807:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_2): 
 808:FWLIB/src/stm32f4xx_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 809:FWLIB/src/stm32f4xx_can.c ****       break;
 810:FWLIB/src/stm32f4xx_can.c ****     default:
 811:FWLIB/src/stm32f4xx_can.c ****       state = CAN_TxStatus_Failed;
 812:FWLIB/src/stm32f4xx_can.c ****       break;
 813:FWLIB/src/stm32f4xx_can.c ****   }
 814:FWLIB/src/stm32f4xx_can.c ****   switch (state)
 815:FWLIB/src/stm32f4xx_can.c ****   {
 816:FWLIB/src/stm32f4xx_can.c ****       /* transmit pending  */
 817:FWLIB/src/stm32f4xx_can.c ****     case (0x0): state = CAN_TxStatus_Pending;
 818:FWLIB/src/stm32f4xx_can.c ****       break;
 819:FWLIB/src/stm32f4xx_can.c ****       /* transmit failed  */
 820:FWLIB/src/stm32f4xx_can.c ****      case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 821:FWLIB/src/stm32f4xx_can.c ****       break;
 822:FWLIB/src/stm32f4xx_can.c ****      case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
 823:FWLIB/src/stm32f4xx_can.c ****       break;
 824:FWLIB/src/stm32f4xx_can.c ****      case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
 825:FWLIB/src/stm32f4xx_can.c ****       break;
 826:FWLIB/src/stm32f4xx_can.c ****       /* transmit succeeded  */
 827:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
 828:FWLIB/src/stm32f4xx_can.c ****       break;
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 16


 829:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 830:FWLIB/src/stm32f4xx_can.c ****       break;
 831:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 832:FWLIB/src/stm32f4xx_can.c ****       break;
 833:FWLIB/src/stm32f4xx_can.c ****     default: state = CAN_TxStatus_Failed;
 834:FWLIB/src/stm32f4xx_can.c ****       break;
 835:FWLIB/src/stm32f4xx_can.c ****   }
 836:FWLIB/src/stm32f4xx_can.c ****   return (uint8_t) state;
 837:FWLIB/src/stm32f4xx_can.c **** }
 838:FWLIB/src/stm32f4xx_can.c **** 
 839:FWLIB/src/stm32f4xx_can.c **** /**
 840:FWLIB/src/stm32f4xx_can.c ****   * @brief  Cancels a transmit request.
 841:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 842:FWLIB/src/stm32f4xx_can.c ****   * @param  Mailbox: Mailbox number.
 843:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
 844:FWLIB/src/stm32f4xx_can.c ****   * @retval None
 845:FWLIB/src/stm32f4xx_can.c ****   */
 846:FWLIB/src/stm32f4xx_can.c **** void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
 847:FWLIB/src/stm32f4xx_can.c **** {
 848:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 849:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 850:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
 851:FWLIB/src/stm32f4xx_can.c ****   /* abort transmission */
 852:FWLIB/src/stm32f4xx_can.c ****   switch (Mailbox)
 853:FWLIB/src/stm32f4xx_can.c ****   {
 854:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 855:FWLIB/src/stm32f4xx_can.c ****       break;
 856:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 857:FWLIB/src/stm32f4xx_can.c ****       break;
 858:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 859:FWLIB/src/stm32f4xx_can.c ****       break;
 860:FWLIB/src/stm32f4xx_can.c ****     default:
 861:FWLIB/src/stm32f4xx_can.c ****       break;
 862:FWLIB/src/stm32f4xx_can.c ****   }
 863:FWLIB/src/stm32f4xx_can.c **** }
 864:FWLIB/src/stm32f4xx_can.c **** /**
 865:FWLIB/src/stm32f4xx_can.c ****   * @}
 866:FWLIB/src/stm32f4xx_can.c ****   */
 867:FWLIB/src/stm32f4xx_can.c **** 
 868:FWLIB/src/stm32f4xx_can.c **** 
 869:FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Group3 CAN Frames Reception functions
 870:FWLIB/src/stm32f4xx_can.c ****  *  @brief    CAN Frames Reception functions 
 871:FWLIB/src/stm32f4xx_can.c ****  *
 872:FWLIB/src/stm32f4xx_can.c **** @verbatim    
 873:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
 874:FWLIB/src/stm32f4xx_can.c ****                 ##### CAN Frames Reception functions #####
 875:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================  
 876:FWLIB/src/stm32f4xx_can.c ****     [..] This section provides functions allowing to 
 877:FWLIB/src/stm32f4xx_can.c ****       (+) Receive a correct CAN frame
 878:FWLIB/src/stm32f4xx_can.c ****       (+) Release a specified receive FIFO (2 FIFOs are available)
 879:FWLIB/src/stm32f4xx_can.c ****       (+) Return the number of the pending received CAN frames
 880:FWLIB/src/stm32f4xx_can.c ****    
 881:FWLIB/src/stm32f4xx_can.c **** @endverbatim
 882:FWLIB/src/stm32f4xx_can.c ****   * @{
 883:FWLIB/src/stm32f4xx_can.c ****   */
 884:FWLIB/src/stm32f4xx_can.c **** 
 885:FWLIB/src/stm32f4xx_can.c **** /**
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 17


 886:FWLIB/src/stm32f4xx_can.c ****   * @brief  Receives a correct CAN frame.
 887:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 888:FWLIB/src/stm32f4xx_can.c ****   * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
 889:FWLIB/src/stm32f4xx_can.c ****   * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
 890:FWLIB/src/stm32f4xx_can.c ****   *         CAN DLC, CAN data and FMI number.
 891:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
 892:FWLIB/src/stm32f4xx_can.c ****   * @retval None
 893:FWLIB/src/stm32f4xx_can.c ****   */
 894:FWLIB/src/stm32f4xx_can.c **** void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
 895:FWLIB/src/stm32f4xx_can.c **** {
 896:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 897:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 898:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 899:FWLIB/src/stm32f4xx_can.c ****   /* Get the Id */
 900:FWLIB/src/stm32f4xx_can.c ****   RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 901:FWLIB/src/stm32f4xx_can.c ****   if (RxMessage->IDE == CAN_Id_Standard)
 902:FWLIB/src/stm32f4xx_can.c ****   {
 903:FWLIB/src/stm32f4xx_can.c ****     RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 904:FWLIB/src/stm32f4xx_can.c ****   }
 905:FWLIB/src/stm32f4xx_can.c ****   else
 906:FWLIB/src/stm32f4xx_can.c ****   {
 907:FWLIB/src/stm32f4xx_can.c ****     RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 908:FWLIB/src/stm32f4xx_can.c ****   }
 909:FWLIB/src/stm32f4xx_can.c ****   
 910:FWLIB/src/stm32f4xx_can.c ****   RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 911:FWLIB/src/stm32f4xx_can.c ****   /* Get the DLC */
 912:FWLIB/src/stm32f4xx_can.c ****   RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 913:FWLIB/src/stm32f4xx_can.c ****   /* Get the FMI */
 914:FWLIB/src/stm32f4xx_can.c ****   RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 915:FWLIB/src/stm32f4xx_can.c ****   /* Get the data field */
 916:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 917:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 918:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 919:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 920:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 921:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 922:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 923:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 924:FWLIB/src/stm32f4xx_can.c ****   /* Release the FIFO */
 925:FWLIB/src/stm32f4xx_can.c ****   /* Release FIFO0 */
 926:FWLIB/src/stm32f4xx_can.c ****   if (FIFONumber == CAN_FIFO0)
 927:FWLIB/src/stm32f4xx_can.c ****   {
 928:FWLIB/src/stm32f4xx_can.c ****     CANx->RF0R |= CAN_RF0R_RFOM0;
 929:FWLIB/src/stm32f4xx_can.c ****   }
 930:FWLIB/src/stm32f4xx_can.c ****   /* Release FIFO1 */
 931:FWLIB/src/stm32f4xx_can.c ****   else /* FIFONumber == CAN_FIFO1 */
 932:FWLIB/src/stm32f4xx_can.c ****   {
 933:FWLIB/src/stm32f4xx_can.c ****     CANx->RF1R |= CAN_RF1R_RFOM1;
 934:FWLIB/src/stm32f4xx_can.c ****   }
 935:FWLIB/src/stm32f4xx_can.c **** }
 936:FWLIB/src/stm32f4xx_can.c **** 
 937:FWLIB/src/stm32f4xx_can.c **** /**
 938:FWLIB/src/stm32f4xx_can.c ****   * @brief  Releases the specified receive FIFO.
 939:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 940:FWLIB/src/stm32f4xx_can.c ****   * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
 941:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
 942:FWLIB/src/stm32f4xx_can.c ****   * @retval None
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 18


 943:FWLIB/src/stm32f4xx_can.c ****   */
 944:FWLIB/src/stm32f4xx_can.c **** void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
 945:FWLIB/src/stm32f4xx_can.c **** {
 946:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 947:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 948:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 949:FWLIB/src/stm32f4xx_can.c ****   /* Release FIFO0 */
 950:FWLIB/src/stm32f4xx_can.c ****   if (FIFONumber == CAN_FIFO0)
 951:FWLIB/src/stm32f4xx_can.c ****   {
 952:FWLIB/src/stm32f4xx_can.c ****     CANx->RF0R |= CAN_RF0R_RFOM0;
 953:FWLIB/src/stm32f4xx_can.c ****   }
 954:FWLIB/src/stm32f4xx_can.c ****   /* Release FIFO1 */
 955:FWLIB/src/stm32f4xx_can.c ****   else /* FIFONumber == CAN_FIFO1 */
 956:FWLIB/src/stm32f4xx_can.c ****   {
 957:FWLIB/src/stm32f4xx_can.c ****     CANx->RF1R |= CAN_RF1R_RFOM1;
 958:FWLIB/src/stm32f4xx_can.c ****   }
 959:FWLIB/src/stm32f4xx_can.c **** }
 960:FWLIB/src/stm32f4xx_can.c **** 
 961:FWLIB/src/stm32f4xx_can.c **** /**
 962:FWLIB/src/stm32f4xx_can.c ****   * @brief  Returns the number of pending received messages.
 963:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 964:FWLIB/src/stm32f4xx_can.c ****   * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
 965:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
 966:FWLIB/src/stm32f4xx_can.c ****   * @retval NbMessage : which is the number of pending message.
 967:FWLIB/src/stm32f4xx_can.c ****   */
 968:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
 969:FWLIB/src/stm32f4xx_can.c **** {
 970:FWLIB/src/stm32f4xx_can.c ****   uint8_t message_pending=0;
 971:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 972:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 973:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 974:FWLIB/src/stm32f4xx_can.c ****   if (FIFONumber == CAN_FIFO0)
 975:FWLIB/src/stm32f4xx_can.c ****   {
 976:FWLIB/src/stm32f4xx_can.c ****     message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 977:FWLIB/src/stm32f4xx_can.c ****   }
 978:FWLIB/src/stm32f4xx_can.c ****   else if (FIFONumber == CAN_FIFO1)
 979:FWLIB/src/stm32f4xx_can.c ****   {
 980:FWLIB/src/stm32f4xx_can.c ****     message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 981:FWLIB/src/stm32f4xx_can.c ****   }
 982:FWLIB/src/stm32f4xx_can.c ****   else
 983:FWLIB/src/stm32f4xx_can.c ****   {
 984:FWLIB/src/stm32f4xx_can.c ****     message_pending = 0;
 985:FWLIB/src/stm32f4xx_can.c ****   }
 986:FWLIB/src/stm32f4xx_can.c ****   return message_pending;
 987:FWLIB/src/stm32f4xx_can.c **** }
 988:FWLIB/src/stm32f4xx_can.c **** /**
 989:FWLIB/src/stm32f4xx_can.c ****   * @}
 990:FWLIB/src/stm32f4xx_can.c ****   */
 991:FWLIB/src/stm32f4xx_can.c **** 
 992:FWLIB/src/stm32f4xx_can.c **** 
 993:FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Group4 CAN Operation modes functions
 994:FWLIB/src/stm32f4xx_can.c ****  *  @brief    CAN Operation modes functions 
 995:FWLIB/src/stm32f4xx_can.c ****  *
 996:FWLIB/src/stm32f4xx_can.c **** @verbatim    
 997:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
 998:FWLIB/src/stm32f4xx_can.c ****                     ##### CAN Operation modes functions #####
 999:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================  
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 19


1000:FWLIB/src/stm32f4xx_can.c ****     [..] This section provides functions allowing to select the CAN Operation modes
1001:FWLIB/src/stm32f4xx_can.c ****       (+) sleep mode
1002:FWLIB/src/stm32f4xx_can.c ****       (+) normal mode 
1003:FWLIB/src/stm32f4xx_can.c ****       (+) initialization mode
1004:FWLIB/src/stm32f4xx_can.c ****    
1005:FWLIB/src/stm32f4xx_can.c **** @endverbatim
1006:FWLIB/src/stm32f4xx_can.c ****   * @{
1007:FWLIB/src/stm32f4xx_can.c ****   */
1008:FWLIB/src/stm32f4xx_can.c ****   
1009:FWLIB/src/stm32f4xx_can.c ****   
1010:FWLIB/src/stm32f4xx_can.c **** /**
1011:FWLIB/src/stm32f4xx_can.c ****   * @brief  Selects the CAN Operation mode.
1012:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_OperatingMode: CAN Operating Mode.
1013:FWLIB/src/stm32f4xx_can.c ****   *         This parameter can be one of @ref CAN_OperatingMode_TypeDef enumeration.
1014:FWLIB/src/stm32f4xx_can.c ****   * @retval status of the requested mode which can be 
1015:FWLIB/src/stm32f4xx_can.c ****   *         - CAN_ModeStatus_Failed:  CAN failed entering the specific mode 
1016:FWLIB/src/stm32f4xx_can.c ****   *         - CAN_ModeStatus_Success: CAN Succeed entering the specific mode 
1017:FWLIB/src/stm32f4xx_can.c ****   */
1018:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
1019:FWLIB/src/stm32f4xx_can.c **** {
1020:FWLIB/src/stm32f4xx_can.c ****   uint8_t status = CAN_ModeStatus_Failed;
1021:FWLIB/src/stm32f4xx_can.c ****   
1022:FWLIB/src/stm32f4xx_can.c ****   /* Timeout for INAK or also for SLAK bits*/
1023:FWLIB/src/stm32f4xx_can.c ****   uint32_t timeout = INAK_TIMEOUT; 
1024:FWLIB/src/stm32f4xx_can.c **** 
1025:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1026:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1027:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));
1028:FWLIB/src/stm32f4xx_can.c **** 
1029:FWLIB/src/stm32f4xx_can.c ****   if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
1030:FWLIB/src/stm32f4xx_can.c ****   {
1031:FWLIB/src/stm32f4xx_can.c ****     /* Request initialisation */
1032:FWLIB/src/stm32f4xx_can.c ****     CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
1033:FWLIB/src/stm32f4xx_can.c **** 
1034:FWLIB/src/stm32f4xx_can.c ****     /* Wait the acknowledge */
1035:FWLIB/src/stm32f4xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
1036:FWLIB/src/stm32f4xx_can.c ****     {
1037:FWLIB/src/stm32f4xx_can.c ****       timeout--;
1038:FWLIB/src/stm32f4xx_can.c ****     }
1039:FWLIB/src/stm32f4xx_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
1040:FWLIB/src/stm32f4xx_can.c ****     {
1041:FWLIB/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Failed;
1042:FWLIB/src/stm32f4xx_can.c ****     }
1043:FWLIB/src/stm32f4xx_can.c ****     else
1044:FWLIB/src/stm32f4xx_can.c ****     {
1045:FWLIB/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Success;
1046:FWLIB/src/stm32f4xx_can.c ****     }
1047:FWLIB/src/stm32f4xx_can.c ****   }
1048:FWLIB/src/stm32f4xx_can.c ****   else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
1049:FWLIB/src/stm32f4xx_can.c ****   {
1050:FWLIB/src/stm32f4xx_can.c ****     /* Request leave initialisation and sleep mode  and enter Normal mode */
1051:FWLIB/src/stm32f4xx_can.c ****     CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
1052:FWLIB/src/stm32f4xx_can.c **** 
1053:FWLIB/src/stm32f4xx_can.c ****     /* Wait the acknowledge */
1054:FWLIB/src/stm32f4xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
1055:FWLIB/src/stm32f4xx_can.c ****     {
1056:FWLIB/src/stm32f4xx_can.c ****       timeout--;
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 20


1057:FWLIB/src/stm32f4xx_can.c ****     }
1058:FWLIB/src/stm32f4xx_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != 0)
1059:FWLIB/src/stm32f4xx_can.c ****     {
1060:FWLIB/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Failed;
1061:FWLIB/src/stm32f4xx_can.c ****     }
1062:FWLIB/src/stm32f4xx_can.c ****     else
1063:FWLIB/src/stm32f4xx_can.c ****     {
1064:FWLIB/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Success;
1065:FWLIB/src/stm32f4xx_can.c ****     }
1066:FWLIB/src/stm32f4xx_can.c ****   }
1067:FWLIB/src/stm32f4xx_can.c ****   else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
1068:FWLIB/src/stm32f4xx_can.c ****   {
1069:FWLIB/src/stm32f4xx_can.c ****     /* Request Sleep mode */
1070:FWLIB/src/stm32f4xx_can.c ****     CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
1071:FWLIB/src/stm32f4xx_can.c **** 
1072:FWLIB/src/stm32f4xx_can.c ****     /* Wait the acknowledge */
1073:FWLIB/src/stm32f4xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
1074:FWLIB/src/stm32f4xx_can.c ****     {
1075:FWLIB/src/stm32f4xx_can.c ****       timeout--;
1076:FWLIB/src/stm32f4xx_can.c ****     }
1077:FWLIB/src/stm32f4xx_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
1078:FWLIB/src/stm32f4xx_can.c ****     {
1079:FWLIB/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Failed;
1080:FWLIB/src/stm32f4xx_can.c ****     }
1081:FWLIB/src/stm32f4xx_can.c ****     else
1082:FWLIB/src/stm32f4xx_can.c ****     {
1083:FWLIB/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Success;
1084:FWLIB/src/stm32f4xx_can.c ****     }
1085:FWLIB/src/stm32f4xx_can.c ****   }
1086:FWLIB/src/stm32f4xx_can.c ****   else
1087:FWLIB/src/stm32f4xx_can.c ****   {
1088:FWLIB/src/stm32f4xx_can.c ****     status = CAN_ModeStatus_Failed;
1089:FWLIB/src/stm32f4xx_can.c ****   }
1090:FWLIB/src/stm32f4xx_can.c **** 
1091:FWLIB/src/stm32f4xx_can.c ****   return  (uint8_t) status;
1092:FWLIB/src/stm32f4xx_can.c **** }
1093:FWLIB/src/stm32f4xx_can.c **** 
1094:FWLIB/src/stm32f4xx_can.c **** /**
1095:FWLIB/src/stm32f4xx_can.c ****   * @brief  Enters the Sleep (low power) mode.
1096:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1097:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
1098:FWLIB/src/stm32f4xx_can.c ****   * @retval CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed otherwise.
1099:FWLIB/src/stm32f4xx_can.c ****   */
1100:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_Sleep(CAN_TypeDef* CANx)
1101:FWLIB/src/stm32f4xx_can.c **** {
1102:FWLIB/src/stm32f4xx_can.c ****   uint8_t sleepstatus = CAN_Sleep_Failed;
1103:FWLIB/src/stm32f4xx_can.c ****   
1104:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1105:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1106:FWLIB/src/stm32f4xx_can.c ****     
1107:FWLIB/src/stm32f4xx_can.c ****   /* Request Sleep mode */
1108:FWLIB/src/stm32f4xx_can.c ****    CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
1109:FWLIB/src/stm32f4xx_can.c ****    
1110:FWLIB/src/stm32f4xx_can.c ****   /* Sleep mode status */
1111:FWLIB/src/stm32f4xx_can.c ****   if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
1112:FWLIB/src/stm32f4xx_can.c ****   {
1113:FWLIB/src/stm32f4xx_can.c ****     /* Sleep mode not entered */
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 21


1114:FWLIB/src/stm32f4xx_can.c ****     sleepstatus =  CAN_Sleep_Ok;
1115:FWLIB/src/stm32f4xx_can.c ****   }
1116:FWLIB/src/stm32f4xx_can.c ****   /* return sleep mode status */
1117:FWLIB/src/stm32f4xx_can.c ****    return (uint8_t)sleepstatus;
1118:FWLIB/src/stm32f4xx_can.c **** }
1119:FWLIB/src/stm32f4xx_can.c **** 
1120:FWLIB/src/stm32f4xx_can.c **** /**
1121:FWLIB/src/stm32f4xx_can.c ****   * @brief  Wakes up the CAN peripheral from sleep mode .
1122:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1123:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
1124:FWLIB/src/stm32f4xx_can.c ****   * @retval CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed otherwise.
1125:FWLIB/src/stm32f4xx_can.c ****   */
1126:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
1127:FWLIB/src/stm32f4xx_can.c **** {
1128:FWLIB/src/stm32f4xx_can.c ****   uint32_t wait_slak = SLAK_TIMEOUT;
1129:FWLIB/src/stm32f4xx_can.c ****   uint8_t wakeupstatus = CAN_WakeUp_Failed;
1130:FWLIB/src/stm32f4xx_can.c ****   
1131:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1132:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1133:FWLIB/src/stm32f4xx_can.c ****     
1134:FWLIB/src/stm32f4xx_can.c ****   /* Wake up request */
1135:FWLIB/src/stm32f4xx_can.c ****   CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
1136:FWLIB/src/stm32f4xx_can.c ****     
1137:FWLIB/src/stm32f4xx_can.c ****   /* Sleep mode status */
1138:FWLIB/src/stm32f4xx_can.c ****   while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
1139:FWLIB/src/stm32f4xx_can.c ****   {
1140:FWLIB/src/stm32f4xx_can.c ****    wait_slak--;
1141:FWLIB/src/stm32f4xx_can.c ****   }
1142:FWLIB/src/stm32f4xx_can.c ****   if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
1143:FWLIB/src/stm32f4xx_can.c ****   {
1144:FWLIB/src/stm32f4xx_can.c ****    /* wake up done : Sleep mode exited */
1145:FWLIB/src/stm32f4xx_can.c ****     wakeupstatus = CAN_WakeUp_Ok;
1146:FWLIB/src/stm32f4xx_can.c ****   }
1147:FWLIB/src/stm32f4xx_can.c ****   /* return wakeup status */
1148:FWLIB/src/stm32f4xx_can.c ****   return (uint8_t)wakeupstatus;
1149:FWLIB/src/stm32f4xx_can.c **** }
1150:FWLIB/src/stm32f4xx_can.c **** /**
1151:FWLIB/src/stm32f4xx_can.c ****   * @}
1152:FWLIB/src/stm32f4xx_can.c ****   */
1153:FWLIB/src/stm32f4xx_can.c **** 
1154:FWLIB/src/stm32f4xx_can.c **** 
1155:FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Group5 CAN Bus Error management functions
1156:FWLIB/src/stm32f4xx_can.c ****  *  @brief    CAN Bus Error management functions 
1157:FWLIB/src/stm32f4xx_can.c ****  *
1158:FWLIB/src/stm32f4xx_can.c **** @verbatim    
1159:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
1160:FWLIB/src/stm32f4xx_can.c ****                 ##### CAN Bus Error management functions #####
1161:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================  
1162:FWLIB/src/stm32f4xx_can.c ****     [..] This section provides functions allowing to 
1163:FWLIB/src/stm32f4xx_can.c ****       (+) Return the CANx's last error code (LEC)
1164:FWLIB/src/stm32f4xx_can.c ****       (+) Return the CANx Receive Error Counter (REC)
1165:FWLIB/src/stm32f4xx_can.c ****       (+) Return the LSB of the 9-bit CANx Transmit Error Counter(TEC).
1166:FWLIB/src/stm32f4xx_can.c ****    
1167:FWLIB/src/stm32f4xx_can.c ****       -@- If TEC is greater than 255, The CAN is in bus-off state.
1168:FWLIB/src/stm32f4xx_can.c ****       -@- if REC or TEC are greater than 96, an Error warning flag occurs.
1169:FWLIB/src/stm32f4xx_can.c ****       -@- if REC or TEC are greater than 127, an Error Passive Flag occurs.
1170:FWLIB/src/stm32f4xx_can.c ****                         
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 22


1171:FWLIB/src/stm32f4xx_can.c **** @endverbatim
1172:FWLIB/src/stm32f4xx_can.c ****   * @{
1173:FWLIB/src/stm32f4xx_can.c ****   */
1174:FWLIB/src/stm32f4xx_can.c ****   
1175:FWLIB/src/stm32f4xx_can.c **** /**
1176:FWLIB/src/stm32f4xx_can.c ****   * @brief  Returns the CANx's last error code (LEC).
1177:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1178:FWLIB/src/stm32f4xx_can.c ****   * @retval Error code: 
1179:FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_NoErr: No Error  
1180:FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_StuffErr: Stuff Error
1181:FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_FormErr: Form Error
1182:FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_ACKErr : Acknowledgment Error
1183:FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_BitRecessiveErr: Bit Recessive Error
1184:FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_BitDominantErr: Bit Dominant Error
1185:FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_CRCErr: CRC Error
1186:FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_SoftwareSetErr: Software Set Error  
1187:FWLIB/src/stm32f4xx_can.c ****   */
1188:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
1189:FWLIB/src/stm32f4xx_can.c **** {
1190:FWLIB/src/stm32f4xx_can.c ****   uint8_t errorcode=0;
1191:FWLIB/src/stm32f4xx_can.c ****   
1192:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1193:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1194:FWLIB/src/stm32f4xx_can.c ****   
1195:FWLIB/src/stm32f4xx_can.c ****   /* Get the error code*/
1196:FWLIB/src/stm32f4xx_can.c ****   errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
1197:FWLIB/src/stm32f4xx_can.c ****   
1198:FWLIB/src/stm32f4xx_can.c ****   /* Return the error code*/
1199:FWLIB/src/stm32f4xx_can.c ****   return errorcode;
1200:FWLIB/src/stm32f4xx_can.c **** }
1201:FWLIB/src/stm32f4xx_can.c **** 
1202:FWLIB/src/stm32f4xx_can.c **** /**
1203:FWLIB/src/stm32f4xx_can.c ****   * @brief  Returns the CANx Receive Error Counter (REC).
1204:FWLIB/src/stm32f4xx_can.c ****   * @note   In case of an error during reception, this counter is incremented 
1205:FWLIB/src/stm32f4xx_can.c ****   *         by 1 or by 8 depending on the error condition as defined by the CAN 
1206:FWLIB/src/stm32f4xx_can.c ****   *         standard. After every successful reception, the counter is 
1207:FWLIB/src/stm32f4xx_can.c ****   *         decremented by 1 or reset to 120 if its value was higher than 128. 
1208:FWLIB/src/stm32f4xx_can.c ****   *         When the counter value exceeds 127, the CAN controller enters the 
1209:FWLIB/src/stm32f4xx_can.c ****   *         error passive state.  
1210:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1211:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
1212:FWLIB/src/stm32f4xx_can.c ****   * @retval CAN Receive Error Counter. 
1213:FWLIB/src/stm32f4xx_can.c ****   */
1214:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
1215:FWLIB/src/stm32f4xx_can.c **** {
1216:FWLIB/src/stm32f4xx_can.c ****   uint8_t counter=0;
1217:FWLIB/src/stm32f4xx_can.c ****   
1218:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1219:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1220:FWLIB/src/stm32f4xx_can.c ****   
1221:FWLIB/src/stm32f4xx_can.c ****   /* Get the Receive Error Counter*/
1222:FWLIB/src/stm32f4xx_can.c ****   counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
1223:FWLIB/src/stm32f4xx_can.c ****   
1224:FWLIB/src/stm32f4xx_can.c ****   /* Return the Receive Error Counter*/
1225:FWLIB/src/stm32f4xx_can.c ****   return counter;
1226:FWLIB/src/stm32f4xx_can.c **** }
1227:FWLIB/src/stm32f4xx_can.c **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 23


1228:FWLIB/src/stm32f4xx_can.c **** 
1229:FWLIB/src/stm32f4xx_can.c **** /**
1230:FWLIB/src/stm32f4xx_can.c ****   * @brief  Returns the LSB of the 9-bit CANx Transmit Error Counter(TEC).
1231:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1232:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
1233:FWLIB/src/stm32f4xx_can.c ****   * @retval LSB of the 9-bit CAN Transmit Error Counter. 
1234:FWLIB/src/stm32f4xx_can.c ****   */
1235:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
1236:FWLIB/src/stm32f4xx_can.c **** {
1237:FWLIB/src/stm32f4xx_can.c ****   uint8_t counter=0;
1238:FWLIB/src/stm32f4xx_can.c ****   
1239:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1240:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1241:FWLIB/src/stm32f4xx_can.c ****   
1242:FWLIB/src/stm32f4xx_can.c ****   /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
1243:FWLIB/src/stm32f4xx_can.c ****   counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
1244:FWLIB/src/stm32f4xx_can.c ****   
1245:FWLIB/src/stm32f4xx_can.c ****   /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
1246:FWLIB/src/stm32f4xx_can.c ****   return counter;
1247:FWLIB/src/stm32f4xx_can.c **** }
1248:FWLIB/src/stm32f4xx_can.c **** /**
1249:FWLIB/src/stm32f4xx_can.c ****   * @}
1250:FWLIB/src/stm32f4xx_can.c ****   */
1251:FWLIB/src/stm32f4xx_can.c **** 
1252:FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Group6 Interrupts and flags management functions
1253:FWLIB/src/stm32f4xx_can.c ****  *  @brief   Interrupts and flags management functions
1254:FWLIB/src/stm32f4xx_can.c ****  *
1255:FWLIB/src/stm32f4xx_can.c **** @verbatim   
1256:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
1257:FWLIB/src/stm32f4xx_can.c ****               ##### Interrupts and flags management functions #####
1258:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================  
1259:FWLIB/src/stm32f4xx_can.c **** 
1260:FWLIB/src/stm32f4xx_can.c ****      [..] This section provides functions allowing to configure the CAN Interrupts 
1261:FWLIB/src/stm32f4xx_can.c ****           and to get the status and clear flags and Interrupts pending bits.
1262:FWLIB/src/stm32f4xx_can.c ****   
1263:FWLIB/src/stm32f4xx_can.c ****           The CAN provides 14 Interrupts sources and 15 Flags:
1264:FWLIB/src/stm32f4xx_can.c **** 
1265:FWLIB/src/stm32f4xx_can.c ****    
1266:FWLIB/src/stm32f4xx_can.c ****   *** Flags ***
1267:FWLIB/src/stm32f4xx_can.c ****   =============
1268:FWLIB/src/stm32f4xx_can.c ****     [..] The 15 flags can be divided on 4 groups: 
1269:FWLIB/src/stm32f4xx_can.c **** 
1270:FWLIB/src/stm32f4xx_can.c ****       (+) Transmit Flags
1271:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_RQCP0, 
1272:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_RQCP1, 
1273:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_RQCP2  : Request completed MailBoxes 0, 1 and 2  Flags
1274:FWLIB/src/stm32f4xx_can.c ****                                Set when the last request (transmit or abort)
1275:FWLIB/src/stm32f4xx_can.c ****                                has been performed. 
1276:FWLIB/src/stm32f4xx_can.c **** 
1277:FWLIB/src/stm32f4xx_can.c ****       (+) Receive Flags
1278:FWLIB/src/stm32f4xx_can.c **** 
1279:FWLIB/src/stm32f4xx_can.c **** 
1280:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_FMP0,
1281:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_FMP1   : FIFO 0 and 1 Message Pending Flags 
1282:FWLIB/src/stm32f4xx_can.c ****                                set to signal that messages are pending in the receive 
1283:FWLIB/src/stm32f4xx_can.c ****                                FIFO.
1284:FWLIB/src/stm32f4xx_can.c ****                                These Flags are cleared only by hardware. 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 24


1285:FWLIB/src/stm32f4xx_can.c **** 
1286:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_FF0,
1287:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_FF1    : FIFO 0 and 1 Full Flags
1288:FWLIB/src/stm32f4xx_can.c ****                                set when three messages are stored in the selected 
1289:FWLIB/src/stm32f4xx_can.c ****                                FIFO.                        
1290:FWLIB/src/stm32f4xx_can.c **** 
1291:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_FOV0              
1292:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_FOV1   : FIFO 0 and 1 Overrun Flags
1293:FWLIB/src/stm32f4xx_can.c ****                                set when a new message has been received and passed 
1294:FWLIB/src/stm32f4xx_can.c ****                                the filter while the FIFO was full.         
1295:FWLIB/src/stm32f4xx_can.c **** 
1296:FWLIB/src/stm32f4xx_can.c ****       (+) Operating Mode Flags
1297:FWLIB/src/stm32f4xx_can.c **** 
1298:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_WKU    : Wake up Flag
1299:FWLIB/src/stm32f4xx_can.c ****                                set to signal that a SOF bit has been detected while 
1300:FWLIB/src/stm32f4xx_can.c ****                                the CAN hardware was in Sleep mode. 
1301:FWLIB/src/stm32f4xx_can.c ****         
1302:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_SLAK   : Sleep acknowledge Flag
1303:FWLIB/src/stm32f4xx_can.c ****                                Set to signal that the CAN has entered Sleep Mode. 
1304:FWLIB/src/stm32f4xx_can.c ****     
1305:FWLIB/src/stm32f4xx_can.c ****       (+) Error Flags
1306:FWLIB/src/stm32f4xx_can.c **** 
1307:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_EWG    : Error Warning Flag
1308:FWLIB/src/stm32f4xx_can.c ****                                Set when the warning limit has been reached (Receive 
1309:FWLIB/src/stm32f4xx_can.c ****                                Error Counter or Transmit Error Counter greater than 96). 
1310:FWLIB/src/stm32f4xx_can.c ****                                This Flag is cleared only by hardware.
1311:FWLIB/src/stm32f4xx_can.c ****                             
1312:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_EPV    : Error Passive Flag
1313:FWLIB/src/stm32f4xx_can.c ****                                Set when the Error Passive limit has been reached 
1314:FWLIB/src/stm32f4xx_can.c ****                                (Receive Error Counter or Transmit Error Counter 
1315:FWLIB/src/stm32f4xx_can.c ****                                greater than 127).
1316:FWLIB/src/stm32f4xx_can.c ****                                This Flag is cleared only by hardware.
1317:FWLIB/src/stm32f4xx_can.c ****                              
1318:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_BOF    : Bus-Off Flag
1319:FWLIB/src/stm32f4xx_can.c ****                                set when CAN enters the bus-off state. The bus-off 
1320:FWLIB/src/stm32f4xx_can.c ****                                state is entered on TEC overflow, greater than 255.
1321:FWLIB/src/stm32f4xx_can.c ****                                This Flag is cleared only by hardware.
1322:FWLIB/src/stm32f4xx_can.c ****                                    
1323:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_LEC    : Last error code Flag
1324:FWLIB/src/stm32f4xx_can.c ****                                set If a message has been transferred (reception or
1325:FWLIB/src/stm32f4xx_can.c ****                                transmission) with error, and the error code is hold.              
1326:FWLIB/src/stm32f4xx_can.c ****                            
1327:FWLIB/src/stm32f4xx_can.c ****   *** Interrupts ***
1328:FWLIB/src/stm32f4xx_can.c ****   ==================
1329:FWLIB/src/stm32f4xx_can.c ****     [..] The 14 interrupts can be divided on 4 groups: 
1330:FWLIB/src/stm32f4xx_can.c ****   
1331:FWLIB/src/stm32f4xx_can.c ****       (+) Transmit interrupt
1332:FWLIB/src/stm32f4xx_can.c ****   
1333:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_TME   :  Transmit mailbox empty Interrupt
1334:FWLIB/src/stm32f4xx_can.c ****                              if enabled, this interrupt source is pending when 
1335:FWLIB/src/stm32f4xx_can.c ****                              no transmit request are pending for Tx mailboxes.      
1336:FWLIB/src/stm32f4xx_can.c **** 
1337:FWLIB/src/stm32f4xx_can.c ****       (+) Receive Interrupts
1338:FWLIB/src/stm32f4xx_can.c ****          
1339:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_FMP0,
1340:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_FMP1    :  FIFO 0 and FIFO1 message pending Interrupts
1341:FWLIB/src/stm32f4xx_can.c ****                                if enabled, these interrupt sources are pending 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 25


1342:FWLIB/src/stm32f4xx_can.c ****                                when messages are pending in the receive FIFO.
1343:FWLIB/src/stm32f4xx_can.c ****                                The corresponding interrupt pending bits are cleared 
1344:FWLIB/src/stm32f4xx_can.c ****                                only by hardware.
1345:FWLIB/src/stm32f4xx_can.c ****                 
1346:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_FF0,              
1347:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_FF1     :  FIFO 0 and FIFO1 full Interrupts
1348:FWLIB/src/stm32f4xx_can.c ****                                if enabled, these interrupt sources are pending 
1349:FWLIB/src/stm32f4xx_can.c ****                                when three messages are stored in the selected FIFO.
1350:FWLIB/src/stm32f4xx_can.c ****         
1351:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_FOV0,        
1352:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_FOV1    :  FIFO 0 and FIFO1 overrun Interrupts        
1353:FWLIB/src/stm32f4xx_can.c ****                                if enabled, these interrupt sources are pending 
1354:FWLIB/src/stm32f4xx_can.c ****                                when a new message has been received and passed 
1355:FWLIB/src/stm32f4xx_can.c ****                                the filter while the FIFO was full.
1356:FWLIB/src/stm32f4xx_can.c **** 
1357:FWLIB/src/stm32f4xx_can.c ****       (+) Operating Mode Interrupts
1358:FWLIB/src/stm32f4xx_can.c ****          
1359:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_WKU     :  Wake-up Interrupt
1360:FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when 
1361:FWLIB/src/stm32f4xx_can.c ****                                a SOF bit has been detected while the CAN hardware 
1362:FWLIB/src/stm32f4xx_can.c ****                                was in Sleep mode.
1363:FWLIB/src/stm32f4xx_can.c ****                                   
1364:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_SLK     :  Sleep acknowledge Interrupt
1365:FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when 
1366:FWLIB/src/stm32f4xx_can.c ****                                the CAN has entered Sleep Mode.       
1367:FWLIB/src/stm32f4xx_can.c **** 
1368:FWLIB/src/stm32f4xx_can.c ****       (+) Error Interrupts 
1369:FWLIB/src/stm32f4xx_can.c ****         
1370:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_EWG     :  Error warning Interrupt 
1371:FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when
1372:FWLIB/src/stm32f4xx_can.c ****                                the warning limit has been reached (Receive Error 
1373:FWLIB/src/stm32f4xx_can.c ****                                Counter or Transmit Error Counter=96). 
1374:FWLIB/src/stm32f4xx_can.c ****                                
1375:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_EPV     :  Error passive Interrupt        
1376:FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when
1377:FWLIB/src/stm32f4xx_can.c ****                                the Error Passive limit has been reached (Receive 
1378:FWLIB/src/stm32f4xx_can.c ****                                Error Counter or Transmit Error Counter>127).
1379:FWLIB/src/stm32f4xx_can.c ****                           
1380:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_BOF     :  Bus-off Interrupt
1381:FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when
1382:FWLIB/src/stm32f4xx_can.c ****                                CAN enters the bus-off state. The bus-off state is 
1383:FWLIB/src/stm32f4xx_can.c ****                                entered on TEC overflow, greater than 255.
1384:FWLIB/src/stm32f4xx_can.c ****                                This Flag is cleared only by hardware.
1385:FWLIB/src/stm32f4xx_can.c ****                                   
1386:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_LEC     :  Last error code Interrupt        
1387:FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending  when
1388:FWLIB/src/stm32f4xx_can.c ****                                a message has been transferred (reception or
1389:FWLIB/src/stm32f4xx_can.c ****                                transmission) with error, and the error code is hold.
1390:FWLIB/src/stm32f4xx_can.c ****                           
1391:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_ERR     :  Error Interrupt
1392:FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when 
1393:FWLIB/src/stm32f4xx_can.c ****                                an error condition is pending.      
1394:FWLIB/src/stm32f4xx_can.c ****                       
1395:FWLIB/src/stm32f4xx_can.c ****     [..] Managing the CAN controller events :
1396:FWLIB/src/stm32f4xx_can.c ****  
1397:FWLIB/src/stm32f4xx_can.c ****          The user should identify which mode will be used in his application to 
1398:FWLIB/src/stm32f4xx_can.c ****          manage the CAN controller events: Polling mode or Interrupt mode.
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 26


1399:FWLIB/src/stm32f4xx_can.c ****   
1400:FWLIB/src/stm32f4xx_can.c ****       (#) In the Polling Mode it is advised to use the following functions:
1401:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_GetFlagStatus() : to check if flags events occur. 
1402:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_ClearFlag()     : to clear the flags events.
1403:FWLIB/src/stm32f4xx_can.c ****   
1404:FWLIB/src/stm32f4xx_can.c **** 
1405:FWLIB/src/stm32f4xx_can.c ****   
1406:FWLIB/src/stm32f4xx_can.c ****       (#) In the Interrupt Mode it is advised to use the following functions:
1407:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_ITConfig()       : to enable or disable the interrupt source.
1408:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_GetITStatus()    : to check if Interrupt occurs.
1409:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_ClearITPendingBit() : to clear the Interrupt pending Bit 
1410:FWLIB/src/stm32f4xx_can.c ****             (corresponding Flag).
1411:FWLIB/src/stm32f4xx_can.c ****         -@@-  This function has no impact on CAN_IT_FMP0 and CAN_IT_FMP1 Interrupts 
1412:FWLIB/src/stm32f4xx_can.c ****              pending bits since there are cleared only by hardware. 
1413:FWLIB/src/stm32f4xx_can.c ****   
1414:FWLIB/src/stm32f4xx_can.c **** @endverbatim
1415:FWLIB/src/stm32f4xx_can.c ****   * @{
1416:FWLIB/src/stm32f4xx_can.c ****   */ 
1417:FWLIB/src/stm32f4xx_can.c **** /**
1418:FWLIB/src/stm32f4xx_can.c ****   * @brief  Enables or disables the specified CANx interrupts.
1419:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1420:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_IT: specifies the CAN interrupt sources to be enabled or disabled.
1421:FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be: 
1422:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_TME: Transmit mailbox empty Interrupt 
1423:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FMP0: FIFO 0 message pending Interrupt 
1424:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF0: FIFO 0 full Interrupt
1425:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV0: FIFO 0 overrun Interrupt
1426:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FMP1: FIFO 1 message pending Interrupt 
1427:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF1: FIFO 1 full Interrupt
1428:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV1: FIFO 1 overrun Interrupt
1429:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_WKU: Wake-up Interrupt
1430:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_SLK: Sleep acknowledge Interrupt  
1431:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EWG: Error warning Interrupt
1432:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EPV: Error passive Interrupt
1433:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_BOF: Bus-off Interrupt  
1434:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_LEC: Last error code Interrupt
1435:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_ERR: Error Interrupt
1436:FWLIB/src/stm32f4xx_can.c ****   * @param  NewState: new state of the CAN interrupts.
1437:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
1438:FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be: ENABLE or DISABLE.
1439:FWLIB/src/stm32f4xx_can.c ****   * @retval None
1440:FWLIB/src/stm32f4xx_can.c ****   */
1441:FWLIB/src/stm32f4xx_can.c **** void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
1442:FWLIB/src/stm32f4xx_can.c **** {
1443:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1444:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1445:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_IT(CAN_IT));
1446:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1447:FWLIB/src/stm32f4xx_can.c **** 
1448:FWLIB/src/stm32f4xx_can.c ****   if (NewState != DISABLE)
1449:FWLIB/src/stm32f4xx_can.c ****   {
1450:FWLIB/src/stm32f4xx_can.c ****     /* Enable the selected CANx interrupt */
1451:FWLIB/src/stm32f4xx_can.c ****     CANx->IER |= CAN_IT;
1452:FWLIB/src/stm32f4xx_can.c ****   }
1453:FWLIB/src/stm32f4xx_can.c ****   else
1454:FWLIB/src/stm32f4xx_can.c ****   {
1455:FWLIB/src/stm32f4xx_can.c ****     /* Disable the selected CANx interrupt */
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 27


1456:FWLIB/src/stm32f4xx_can.c ****     CANx->IER &= ~CAN_IT;
1457:FWLIB/src/stm32f4xx_can.c ****   }
1458:FWLIB/src/stm32f4xx_can.c **** }
1459:FWLIB/src/stm32f4xx_can.c **** /**
1460:FWLIB/src/stm32f4xx_can.c ****   * @brief  Checks whether the specified CAN flag is set or not.
1461:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1462:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_FLAG: specifies the flag to check.
1463:FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be one of the following values:
1464:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP0: Request MailBox0 Flag
1465:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP1: Request MailBox1 Flag
1466:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP2: Request MailBox2 Flag
1467:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FMP0: FIFO 0 Message Pending Flag   
1468:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FF0: FIFO 0 Full Flag       
1469:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FOV0: FIFO 0 Overrun Flag 
1470:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FMP1: FIFO 1 Message Pending Flag   
1471:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FF1: FIFO 1 Full Flag        
1472:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FOV1: FIFO 1 Overrun Flag     
1473:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_WKU: Wake up Flag
1474:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag 
1475:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_EWG: Error Warning Flag
1476:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_EPV: Error Passive Flag  
1477:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_BOF: Bus-Off Flag    
1478:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_LEC: Last error code Flag
1479:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
1480:FWLIB/src/stm32f4xx_can.c ****   * @retval The new state of CAN_FLAG (SET or RESET).
1481:FWLIB/src/stm32f4xx_can.c ****   */
1482:FWLIB/src/stm32f4xx_can.c **** FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
1483:FWLIB/src/stm32f4xx_can.c **** {
1484:FWLIB/src/stm32f4xx_can.c ****   FlagStatus bitstatus = RESET;
1485:FWLIB/src/stm32f4xx_can.c ****   
1486:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1487:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1488:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
1489:FWLIB/src/stm32f4xx_can.c ****   
1490:FWLIB/src/stm32f4xx_can.c **** 
1491:FWLIB/src/stm32f4xx_can.c ****   if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
1492:FWLIB/src/stm32f4xx_can.c ****   { 
1493:FWLIB/src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1494:FWLIB/src/stm32f4xx_can.c ****     if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1495:FWLIB/src/stm32f4xx_can.c ****     { 
1496:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1497:FWLIB/src/stm32f4xx_can.c ****       bitstatus = SET;
1498:FWLIB/src/stm32f4xx_can.c ****     }
1499:FWLIB/src/stm32f4xx_can.c ****     else
1500:FWLIB/src/stm32f4xx_can.c ****     { 
1501:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1502:FWLIB/src/stm32f4xx_can.c ****       bitstatus = RESET;
1503:FWLIB/src/stm32f4xx_can.c ****     }
1504:FWLIB/src/stm32f4xx_can.c ****   }
1505:FWLIB/src/stm32f4xx_can.c ****   else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
1506:FWLIB/src/stm32f4xx_can.c ****   { 
1507:FWLIB/src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1508:FWLIB/src/stm32f4xx_can.c ****     if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1509:FWLIB/src/stm32f4xx_can.c ****     { 
1510:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1511:FWLIB/src/stm32f4xx_can.c ****       bitstatus = SET;
1512:FWLIB/src/stm32f4xx_can.c ****     }
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 28


1513:FWLIB/src/stm32f4xx_can.c ****     else
1514:FWLIB/src/stm32f4xx_can.c ****     { 
1515:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1516:FWLIB/src/stm32f4xx_can.c ****       bitstatus = RESET;
1517:FWLIB/src/stm32f4xx_can.c ****     }
1518:FWLIB/src/stm32f4xx_can.c ****   }
1519:FWLIB/src/stm32f4xx_can.c ****   else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
1520:FWLIB/src/stm32f4xx_can.c ****   { 
1521:FWLIB/src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1522:FWLIB/src/stm32f4xx_can.c ****     if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1523:FWLIB/src/stm32f4xx_can.c ****     { 
1524:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1525:FWLIB/src/stm32f4xx_can.c ****       bitstatus = SET;
1526:FWLIB/src/stm32f4xx_can.c ****     }
1527:FWLIB/src/stm32f4xx_can.c ****     else
1528:FWLIB/src/stm32f4xx_can.c ****     { 
1529:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1530:FWLIB/src/stm32f4xx_can.c ****       bitstatus = RESET;
1531:FWLIB/src/stm32f4xx_can.c ****     }
1532:FWLIB/src/stm32f4xx_can.c ****   }
1533:FWLIB/src/stm32f4xx_can.c ****   else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
1534:FWLIB/src/stm32f4xx_can.c ****   { 
1535:FWLIB/src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1536:FWLIB/src/stm32f4xx_can.c ****     if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1537:FWLIB/src/stm32f4xx_can.c ****     { 
1538:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1539:FWLIB/src/stm32f4xx_can.c ****       bitstatus = SET;
1540:FWLIB/src/stm32f4xx_can.c ****     }
1541:FWLIB/src/stm32f4xx_can.c ****     else
1542:FWLIB/src/stm32f4xx_can.c ****     { 
1543:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1544:FWLIB/src/stm32f4xx_can.c ****       bitstatus = RESET;
1545:FWLIB/src/stm32f4xx_can.c ****     }
1546:FWLIB/src/stm32f4xx_can.c ****   }
1547:FWLIB/src/stm32f4xx_can.c ****   else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
1548:FWLIB/src/stm32f4xx_can.c ****   { 
1549:FWLIB/src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1550:FWLIB/src/stm32f4xx_can.c ****     if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1551:FWLIB/src/stm32f4xx_can.c ****     { 
1552:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1553:FWLIB/src/stm32f4xx_can.c ****       bitstatus = SET;
1554:FWLIB/src/stm32f4xx_can.c ****     }
1555:FWLIB/src/stm32f4xx_can.c ****     else
1556:FWLIB/src/stm32f4xx_can.c ****     { 
1557:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1558:FWLIB/src/stm32f4xx_can.c ****       bitstatus = RESET;
1559:FWLIB/src/stm32f4xx_can.c ****     }
1560:FWLIB/src/stm32f4xx_can.c ****   }
1561:FWLIB/src/stm32f4xx_can.c ****   /* Return the CAN_FLAG status */
1562:FWLIB/src/stm32f4xx_can.c ****   return  bitstatus;
1563:FWLIB/src/stm32f4xx_can.c **** }
1564:FWLIB/src/stm32f4xx_can.c **** 
1565:FWLIB/src/stm32f4xx_can.c **** /**
1566:FWLIB/src/stm32f4xx_can.c ****   * @brief  Clears the CAN's pending flags.
1567:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1568:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_FLAG: specifies the flag to clear.
1569:FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be one of the following values:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 29


1570:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP0: Request MailBox0 Flag
1571:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP1: Request MailBox1 Flag
1572:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP2: Request MailBox2 Flag 
1573:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FF0: FIFO 0 Full Flag       
1574:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FOV0: FIFO 0 Overrun Flag  
1575:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FF1: FIFO 1 Full Flag        
1576:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FOV1: FIFO 1 Overrun Flag     
1577:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_WKU: Wake up Flag
1578:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag    
1579:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_LEC: Last error code Flag
1580:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
1581:FWLIB/src/stm32f4xx_can.c ****   * @retval None
1582:FWLIB/src/stm32f4xx_can.c ****   */
1583:FWLIB/src/stm32f4xx_can.c **** void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
1584:FWLIB/src/stm32f4xx_can.c **** {
1585:FWLIB/src/stm32f4xx_can.c ****   uint32_t flagtmp=0;
1586:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1587:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1588:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
1589:FWLIB/src/stm32f4xx_can.c ****   
1590:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
1591:FWLIB/src/stm32f4xx_can.c ****   {
1592:FWLIB/src/stm32f4xx_can.c ****     /* Clear the selected CAN flags */
1593:FWLIB/src/stm32f4xx_can.c ****     CANx->ESR = (uint32_t)RESET;
1594:FWLIB/src/stm32f4xx_can.c ****   }
1595:FWLIB/src/stm32f4xx_can.c ****   else /* MSR or TSR or RF0R or RF1R */
1596:FWLIB/src/stm32f4xx_can.c ****   {
1597:FWLIB/src/stm32f4xx_can.c ****     flagtmp = CAN_FLAG & 0x000FFFFF;
1598:FWLIB/src/stm32f4xx_can.c **** 
1599:FWLIB/src/stm32f4xx_can.c ****     if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
1600:FWLIB/src/stm32f4xx_can.c ****     {
1601:FWLIB/src/stm32f4xx_can.c ****       /* Receive Flags */
1602:FWLIB/src/stm32f4xx_can.c ****       CANx->RF0R = (uint32_t)(flagtmp);
1603:FWLIB/src/stm32f4xx_can.c ****     }
1604:FWLIB/src/stm32f4xx_can.c ****     else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
1605:FWLIB/src/stm32f4xx_can.c ****     {
1606:FWLIB/src/stm32f4xx_can.c ****       /* Receive Flags */
1607:FWLIB/src/stm32f4xx_can.c ****       CANx->RF1R = (uint32_t)(flagtmp);
1608:FWLIB/src/stm32f4xx_can.c ****     }
1609:FWLIB/src/stm32f4xx_can.c ****     else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
1610:FWLIB/src/stm32f4xx_can.c ****     {
1611:FWLIB/src/stm32f4xx_can.c ****       /* Transmit Flags */
1612:FWLIB/src/stm32f4xx_can.c ****       CANx->TSR = (uint32_t)(flagtmp);
1613:FWLIB/src/stm32f4xx_can.c ****     }
1614:FWLIB/src/stm32f4xx_can.c ****     else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
1615:FWLIB/src/stm32f4xx_can.c ****     {
1616:FWLIB/src/stm32f4xx_can.c ****       /* Operating mode Flags */
1617:FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = (uint32_t)(flagtmp);
1618:FWLIB/src/stm32f4xx_can.c ****     }
1619:FWLIB/src/stm32f4xx_can.c ****   }
1620:FWLIB/src/stm32f4xx_can.c **** }
1621:FWLIB/src/stm32f4xx_can.c **** 
1622:FWLIB/src/stm32f4xx_can.c **** /**
1623:FWLIB/src/stm32f4xx_can.c ****   * @brief  Checks whether the specified CANx interrupt has occurred or not.
1624:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1625:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_IT: specifies the CAN interrupt source to check.
1626:FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be one of the following values:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 30


1627:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_TME: Transmit mailbox empty Interrupt 
1628:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FMP0: FIFO 0 message pending Interrupt 
1629:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF0: FIFO 0 full Interrupt
1630:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV0: FIFO 0 overrun Interrupt
1631:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FMP1: FIFO 1 message pending Interrupt 
1632:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF1: FIFO 1 full Interrupt
1633:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV1: FIFO 1 overrun Interrupt
1634:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_WKU: Wake-up Interrupt
1635:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_SLK: Sleep acknowledge Interrupt  
1636:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EWG: Error warning Interrupt
1637:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EPV: Error passive Interrupt
1638:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_BOF: Bus-off Interrupt  
1639:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_LEC: Last error code Interrupt
1640:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_ERR: Error Interrupt
1641:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
1642:FWLIB/src/stm32f4xx_can.c ****   * @retval The current state of CAN_IT (SET or RESET).
1643:FWLIB/src/stm32f4xx_can.c ****   */
1644:FWLIB/src/stm32f4xx_can.c **** ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
1645:FWLIB/src/stm32f4xx_can.c **** {
1646:FWLIB/src/stm32f4xx_can.c ****   ITStatus itstatus = RESET;
1647:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1648:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1649:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_IT(CAN_IT));
1650:FWLIB/src/stm32f4xx_can.c ****   
1651:FWLIB/src/stm32f4xx_can.c ****   /* check the interrupt enable bit */
1652:FWLIB/src/stm32f4xx_can.c ****  if((CANx->IER & CAN_IT) != RESET)
1653:FWLIB/src/stm32f4xx_can.c ****  {
1654:FWLIB/src/stm32f4xx_can.c ****    /* in case the Interrupt is enabled, .... */
1655:FWLIB/src/stm32f4xx_can.c ****     switch (CAN_IT)
1656:FWLIB/src/stm32f4xx_can.c ****     {
1657:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_TME:
1658:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_TSR_RQCPx bits */
1659:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
1660:FWLIB/src/stm32f4xx_can.c ****         break;
1661:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FMP0:
1662:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_RF0R_FMP0 bit */
1663:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
1664:FWLIB/src/stm32f4xx_can.c ****         break;
1665:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FF0:
1666:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_RF0R_FULL0 bit */
1667:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
1668:FWLIB/src/stm32f4xx_can.c ****         break;
1669:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FOV0:
1670:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_RF0R_FOVR0 bit */
1671:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
1672:FWLIB/src/stm32f4xx_can.c ****         break;
1673:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FMP1:
1674:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_RF1R_FMP1 bit */
1675:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
1676:FWLIB/src/stm32f4xx_can.c ****         break;
1677:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FF1:
1678:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_RF1R_FULL1 bit */
1679:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
1680:FWLIB/src/stm32f4xx_can.c ****         break;
1681:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FOV1:
1682:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_RF1R_FOVR1 bit */
1683:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 31


1684:FWLIB/src/stm32f4xx_can.c ****         break;
1685:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_WKU:
1686:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_MSR_WKUI bit */
1687:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
1688:FWLIB/src/stm32f4xx_can.c ****         break;
1689:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_SLK:
1690:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_MSR_SLAKI bit */
1691:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
1692:FWLIB/src/stm32f4xx_can.c ****         break;
1693:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_EWG:
1694:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_ESR_EWGF bit */
1695:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
1696:FWLIB/src/stm32f4xx_can.c ****         break;
1697:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_EPV:
1698:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_ESR_EPVF bit */
1699:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
1700:FWLIB/src/stm32f4xx_can.c ****         break;
1701:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_BOF:
1702:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_ESR_BOFF bit */
1703:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
1704:FWLIB/src/stm32f4xx_can.c ****         break;
1705:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_LEC:
1706:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_ESR_LEC bit */
1707:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
1708:FWLIB/src/stm32f4xx_can.c ****         break;
1709:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_ERR:
1710:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_MSR_ERRI bit */ 
1711:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
1712:FWLIB/src/stm32f4xx_can.c ****         break;
1713:FWLIB/src/stm32f4xx_can.c ****       default:
1714:FWLIB/src/stm32f4xx_can.c ****         /* in case of error, return RESET */
1715:FWLIB/src/stm32f4xx_can.c ****         itstatus = RESET;
1716:FWLIB/src/stm32f4xx_can.c ****         break;
1717:FWLIB/src/stm32f4xx_can.c ****     }
1718:FWLIB/src/stm32f4xx_can.c ****   }
1719:FWLIB/src/stm32f4xx_can.c ****   else
1720:FWLIB/src/stm32f4xx_can.c ****   {
1721:FWLIB/src/stm32f4xx_can.c ****    /* in case the Interrupt is not enabled, return RESET */
1722:FWLIB/src/stm32f4xx_can.c ****     itstatus  = RESET;
1723:FWLIB/src/stm32f4xx_can.c ****   }
1724:FWLIB/src/stm32f4xx_can.c ****   
1725:FWLIB/src/stm32f4xx_can.c ****   /* Return the CAN_IT status */
1726:FWLIB/src/stm32f4xx_can.c ****   return  itstatus;
1727:FWLIB/src/stm32f4xx_can.c **** }
1728:FWLIB/src/stm32f4xx_can.c **** 
1729:FWLIB/src/stm32f4xx_can.c **** /**
1730:FWLIB/src/stm32f4xx_can.c ****   * @brief  Clears the CANx's interrupt pending bits.
1731:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1732:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_IT: specifies the interrupt pending bit to clear.
1733:FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be one of the following values:
1734:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_TME: Transmit mailbox empty Interrupt
1735:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF0: FIFO 0 full Interrupt
1736:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV0: FIFO 0 overrun Interrupt
1737:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF1: FIFO 1 full Interrupt
1738:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV1: FIFO 1 overrun Interrupt
1739:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_WKU: Wake-up Interrupt
1740:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_SLK: Sleep acknowledge Interrupt  
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 32


1741:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EWG: Error warning Interrupt
1742:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EPV: Error passive Interrupt
1743:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_BOF: Bus-off Interrupt  
1744:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_LEC: Last error code Interrupt
1745:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_ERR: Error Interrupt
1746:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
1747:FWLIB/src/stm32f4xx_can.c ****   * @retval None
1748:FWLIB/src/stm32f4xx_can.c ****   */
1749:FWLIB/src/stm32f4xx_can.c **** void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
1750:FWLIB/src/stm32f4xx_can.c **** {
1751:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1752:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1753:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_CLEAR_IT(CAN_IT));
1754:FWLIB/src/stm32f4xx_can.c **** 
1755:FWLIB/src/stm32f4xx_can.c ****   switch (CAN_IT)
1756:FWLIB/src/stm32f4xx_can.c ****   {
1757:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_TME:
1758:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_TSR_RQCPx (rc_w1)*/
1759:FWLIB/src/stm32f4xx_can.c ****       CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
1760:FWLIB/src/stm32f4xx_can.c ****       break;
1761:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FF0:
1762:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_RF0R_FULL0 (rc_w1)*/
1763:FWLIB/src/stm32f4xx_can.c ****       CANx->RF0R = CAN_RF0R_FULL0; 
1764:FWLIB/src/stm32f4xx_can.c ****       break;
1765:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FOV0:
1766:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
1767:FWLIB/src/stm32f4xx_can.c ****       CANx->RF0R = CAN_RF0R_FOVR0; 
1768:FWLIB/src/stm32f4xx_can.c ****       break;
1769:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FF1:
1770:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_RF1R_FULL1 (rc_w1)*/
1771:FWLIB/src/stm32f4xx_can.c ****       CANx->RF1R = CAN_RF1R_FULL1;  
1772:FWLIB/src/stm32f4xx_can.c ****       break;
1773:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FOV1:
1774:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
1775:FWLIB/src/stm32f4xx_can.c ****       CANx->RF1R = CAN_RF1R_FOVR1; 
1776:FWLIB/src/stm32f4xx_can.c ****       break;
1777:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_WKU:
1778:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_WKUI (rc_w1)*/
1779:FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_WKUI;  
1780:FWLIB/src/stm32f4xx_can.c ****       break;
1781:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_SLK:
1782:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
1783:FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_SLAKI;   
1784:FWLIB/src/stm32f4xx_can.c ****       break;
1785:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_EWG:
1786:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1787:FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI;
1788:FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/ 
1789:FWLIB/src/stm32f4xx_can.c ****       break;
1790:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_EPV:
1791:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1792:FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1793:FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
1794:FWLIB/src/stm32f4xx_can.c ****       break;
1795:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_BOF:
1796:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */ 
1797:FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 33


1798:FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
1799:FWLIB/src/stm32f4xx_can.c ****        break;
1800:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_LEC:
1801:FWLIB/src/stm32f4xx_can.c ****       /*  Clear LEC bits */
1802:FWLIB/src/stm32f4xx_can.c ****       CANx->ESR = RESET; 
1803:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1804:FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1805:FWLIB/src/stm32f4xx_can.c ****       break;
1806:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_ERR:
1807:FWLIB/src/stm32f4xx_can.c ****       /*Clear LEC bits */
1808:FWLIB/src/stm32f4xx_can.c ****       CANx->ESR = RESET; 
1809:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1810:FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1811:FWLIB/src/stm32f4xx_can.c ****        /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
1812:FWLIB/src/stm32f4xx_can.c ****        break;
1813:FWLIB/src/stm32f4xx_can.c ****     default:
1814:FWLIB/src/stm32f4xx_can.c ****        break;
1815:FWLIB/src/stm32f4xx_can.c ****    }
1816:FWLIB/src/stm32f4xx_can.c **** }
1817:FWLIB/src/stm32f4xx_can.c ****  /**
1818:FWLIB/src/stm32f4xx_can.c ****   * @}
1819:FWLIB/src/stm32f4xx_can.c ****   */
1820:FWLIB/src/stm32f4xx_can.c **** 
1821:FWLIB/src/stm32f4xx_can.c **** /**
1822:FWLIB/src/stm32f4xx_can.c ****   * @brief  Checks whether the CAN interrupt has occurred or not.
1823:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_Reg: specifies the CAN interrupt register to check.
1824:FWLIB/src/stm32f4xx_can.c ****   * @param  It_Bit: specifies the interrupt source bit to check.
1825:FWLIB/src/stm32f4xx_can.c ****   * @retval The new state of the CAN Interrupt (SET or RESET).
1826:FWLIB/src/stm32f4xx_can.c ****   */
1827:FWLIB/src/stm32f4xx_can.c **** static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
1828:FWLIB/src/stm32f4xx_can.c **** {
  29              		.loc 1 1828 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
1829:FWLIB/src/stm32f4xx_can.c ****   ITStatus pendingbitstatus = RESET;
1830:FWLIB/src/stm32f4xx_can.c ****   
1831:FWLIB/src/stm32f4xx_can.c ****   if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
  35              		.loc 1 1831 0
  36 0000 0842     		tst	r0, r1
  37 0002 01D0     		beq	.L3
1832:FWLIB/src/stm32f4xx_can.c ****   {
1833:FWLIB/src/stm32f4xx_can.c ****     /* CAN_IT is set */
1834:FWLIB/src/stm32f4xx_can.c ****     pendingbitstatus = SET;
  38              		.loc 1 1834 0
  39 0004 0120     		movs	r0, #1
  40              	.LVL1:
  41 0006 7047     		bx	lr
  42              	.LVL2:
  43              	.L3:
1835:FWLIB/src/stm32f4xx_can.c ****   }
1836:FWLIB/src/stm32f4xx_can.c ****   else
1837:FWLIB/src/stm32f4xx_can.c ****   {
1838:FWLIB/src/stm32f4xx_can.c ****     /* CAN_IT is reset */
1839:FWLIB/src/stm32f4xx_can.c ****     pendingbitstatus = RESET;
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 34


  44              		.loc 1 1839 0
  45 0008 0020     		movs	r0, #0
  46              	.LVL3:
1840:FWLIB/src/stm32f4xx_can.c ****   }
1841:FWLIB/src/stm32f4xx_can.c ****   return pendingbitstatus;
1842:FWLIB/src/stm32f4xx_can.c **** }
  47              		.loc 1 1842 0
  48 000a 7047     		bx	lr
  49              		.cfi_endproc
  50              	.LFE147:
  52              		.section	.text.CAN_DeInit,"ax",%progbits
  53              		.align	2
  54              		.global	CAN_DeInit
  55              		.thumb
  56              		.thumb_func
  58              	CAN_DeInit:
  59              	.LFB123:
 168:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
  60              		.loc 1 168 0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 0
  63              		@ frame_needed = 0, uses_anonymous_args = 0
  64              	.LVL4:
  65 0000 08B5     		push	{r3, lr}
  66              	.LCFI0:
  67              		.cfi_def_cfa_offset 8
  68              		.cfi_offset 3, -8
  69              		.cfi_offset 14, -4
 172:FWLIB/src/stm32f4xx_can.c ****   {
  70              		.loc 1 172 0
  71 0002 0C4B     		ldr	r3, .L8
  72 0004 9842     		cmp	r0, r3
  73 0006 0AD1     		bne	.L5
 175:FWLIB/src/stm32f4xx_can.c ****     /* Release CAN1 from reset state */
  74              		.loc 1 175 0
  75 0008 0121     		movs	r1, #1
  76 000a 4FF00070 		mov	r0, #33554432
  77              	.LVL5:
  78 000e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  79              	.LVL6:
 177:FWLIB/src/stm32f4xx_can.c ****   }
  80              		.loc 1 177 0
  81 0012 0021     		movs	r1, #0
  82 0014 4FF00070 		mov	r0, #33554432
  83 0018 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  84              	.LVL7:
  85 001c 08BD     		pop	{r3, pc}
  86              	.LVL8:
  87              	.L5:
 199:FWLIB/src/stm32f4xx_can.c ****     /* Release CAN2 from reset state */
  88              		.loc 1 199 0
  89 001e 0121     		movs	r1, #1
  90 0020 4FF08060 		mov	r0, #67108864
  91              	.LVL9:
  92 0024 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  93              	.LVL10:
 201:FWLIB/src/stm32f4xx_can.c ****   }
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 35


  94              		.loc 1 201 0
  95 0028 0021     		movs	r1, #0
  96 002a 4FF08060 		mov	r0, #67108864
  97 002e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  98              	.LVL11:
  99 0032 08BD     		pop	{r3, pc}
 100              	.L9:
 101              		.align	2
 102              	.L8:
 103 0034 00640040 		.word	1073767424
 104              		.cfi_endproc
 105              	.LFE123:
 107              		.section	.text.CAN_Init,"ax",%progbits
 108              		.align	2
 109              		.global	CAN_Init
 110              		.thumb
 111              		.thumb_func
 113              	CAN_Init:
 114              	.LFB124:
 217:FWLIB/src/stm32f4xx_can.c ****   uint8_t InitStatus = CAN_InitStatus_Failed;
 115              		.loc 1 217 0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 0
 118              		@ frame_needed = 0, uses_anonymous_args = 0
 119              		@ link register save eliminated.
 120              	.LVL12:
 235:FWLIB/src/stm32f4xx_can.c **** 
 121              		.loc 1 235 0
 122 0000 0368     		ldr	r3, [r0]
 123 0002 23F00203 		bic	r3, r3, #2
 124 0006 0360     		str	r3, [r0]
 238:FWLIB/src/stm32f4xx_can.c **** 
 125              		.loc 1 238 0
 126 0008 0368     		ldr	r3, [r0]
 127 000a 43F00103 		orr	r3, r3, #1
 128 000e 0360     		str	r3, [r0]
 219:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 129              		.loc 1 219 0
 130 0010 0023     		movs	r3, #0
 241:FWLIB/src/stm32f4xx_can.c ****   {
 131              		.loc 1 241 0
 132 0012 00E0     		b	.L11
 133              	.LVL13:
 134              	.L13:
 243:FWLIB/src/stm32f4xx_can.c ****   }
 135              		.loc 1 243 0
 136 0014 0133     		adds	r3, r3, #1
 137              	.LVL14:
 138              	.L11:
 241:FWLIB/src/stm32f4xx_can.c ****   {
 139              		.loc 1 241 0
 140 0016 4268     		ldr	r2, [r0, #4]
 141 0018 12F0010F 		tst	r2, #1
 142 001c 03D1     		bne	.L12
 241:FWLIB/src/stm32f4xx_can.c ****   {
 143              		.loc 1 241 0 is_stmt 0 discriminator 1
 144 001e 4FF6FF72 		movw	r2, #65535
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 36


 145 0022 9342     		cmp	r3, r2
 146 0024 F6D1     		bne	.L13
 147              	.L12:
 247:FWLIB/src/stm32f4xx_can.c ****   {
 148              		.loc 1 247 0 is_stmt 1
 149 0026 4368     		ldr	r3, [r0, #4]
 150              	.LVL15:
 151 0028 13F0010F 		tst	r3, #1
 152 002c 6BD0     		beq	.L30
 254:FWLIB/src/stm32f4xx_can.c ****     {
 153              		.loc 1 254 0
 154 002e 8B79     		ldrb	r3, [r1, #6]	@ zero_extendqisi2
 155 0030 012B     		cmp	r3, #1
 156 0032 04D1     		bne	.L15
 256:FWLIB/src/stm32f4xx_can.c ****     }
 157              		.loc 1 256 0
 158 0034 0368     		ldr	r3, [r0]
 159 0036 43F08003 		orr	r3, r3, #128
 160 003a 0360     		str	r3, [r0]
 161 003c 03E0     		b	.L16
 162              	.L15:
 260:FWLIB/src/stm32f4xx_can.c ****     }
 163              		.loc 1 260 0
 164 003e 0368     		ldr	r3, [r0]
 165 0040 23F08003 		bic	r3, r3, #128
 166 0044 0360     		str	r3, [r0]
 167              	.L16:
 264:FWLIB/src/stm32f4xx_can.c ****     {
 168              		.loc 1 264 0
 169 0046 CB79     		ldrb	r3, [r1, #7]	@ zero_extendqisi2
 170 0048 012B     		cmp	r3, #1
 171 004a 04D1     		bne	.L17
 266:FWLIB/src/stm32f4xx_can.c ****     }
 172              		.loc 1 266 0
 173 004c 0368     		ldr	r3, [r0]
 174 004e 43F04003 		orr	r3, r3, #64
 175 0052 0360     		str	r3, [r0]
 176 0054 03E0     		b	.L18
 177              	.L17:
 270:FWLIB/src/stm32f4xx_can.c ****     }
 178              		.loc 1 270 0
 179 0056 0368     		ldr	r3, [r0]
 180 0058 23F04003 		bic	r3, r3, #64
 181 005c 0360     		str	r3, [r0]
 182              	.L18:
 274:FWLIB/src/stm32f4xx_can.c ****     {
 183              		.loc 1 274 0
 184 005e 0B7A     		ldrb	r3, [r1, #8]	@ zero_extendqisi2
 185 0060 012B     		cmp	r3, #1
 186 0062 04D1     		bne	.L19
 276:FWLIB/src/stm32f4xx_can.c ****     }
 187              		.loc 1 276 0
 188 0064 0368     		ldr	r3, [r0]
 189 0066 43F02003 		orr	r3, r3, #32
 190 006a 0360     		str	r3, [r0]
 191 006c 03E0     		b	.L20
 192              	.L19:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 37


 280:FWLIB/src/stm32f4xx_can.c ****     }
 193              		.loc 1 280 0
 194 006e 0368     		ldr	r3, [r0]
 195 0070 23F02003 		bic	r3, r3, #32
 196 0074 0360     		str	r3, [r0]
 197              	.L20:
 284:FWLIB/src/stm32f4xx_can.c ****     {
 198              		.loc 1 284 0
 199 0076 4B7A     		ldrb	r3, [r1, #9]	@ zero_extendqisi2
 200 0078 012B     		cmp	r3, #1
 201 007a 04D1     		bne	.L21
 286:FWLIB/src/stm32f4xx_can.c ****     }
 202              		.loc 1 286 0
 203 007c 0368     		ldr	r3, [r0]
 204 007e 43F01003 		orr	r3, r3, #16
 205 0082 0360     		str	r3, [r0]
 206 0084 03E0     		b	.L22
 207              	.L21:
 290:FWLIB/src/stm32f4xx_can.c ****     }
 208              		.loc 1 290 0
 209 0086 0368     		ldr	r3, [r0]
 210 0088 23F01003 		bic	r3, r3, #16
 211 008c 0360     		str	r3, [r0]
 212              	.L22:
 294:FWLIB/src/stm32f4xx_can.c ****     {
 213              		.loc 1 294 0
 214 008e 8B7A     		ldrb	r3, [r1, #10]	@ zero_extendqisi2
 215 0090 012B     		cmp	r3, #1
 216 0092 04D1     		bne	.L23
 296:FWLIB/src/stm32f4xx_can.c ****     }
 217              		.loc 1 296 0
 218 0094 0368     		ldr	r3, [r0]
 219 0096 43F00803 		orr	r3, r3, #8
 220 009a 0360     		str	r3, [r0]
 221 009c 03E0     		b	.L24
 222              	.L23:
 300:FWLIB/src/stm32f4xx_can.c ****     }
 223              		.loc 1 300 0
 224 009e 0368     		ldr	r3, [r0]
 225 00a0 23F00803 		bic	r3, r3, #8
 226 00a4 0360     		str	r3, [r0]
 227              	.L24:
 304:FWLIB/src/stm32f4xx_can.c ****     {
 228              		.loc 1 304 0
 229 00a6 CB7A     		ldrb	r3, [r1, #11]	@ zero_extendqisi2
 230 00a8 012B     		cmp	r3, #1
 231 00aa 04D1     		bne	.L25
 306:FWLIB/src/stm32f4xx_can.c ****     }
 232              		.loc 1 306 0
 233 00ac 0368     		ldr	r3, [r0]
 234 00ae 43F00403 		orr	r3, r3, #4
 235 00b2 0360     		str	r3, [r0]
 236 00b4 03E0     		b	.L26
 237              	.L25:
 310:FWLIB/src/stm32f4xx_can.c ****     }
 238              		.loc 1 310 0
 239 00b6 0368     		ldr	r3, [r0]
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 38


 240 00b8 23F00403 		bic	r3, r3, #4
 241 00bc 0360     		str	r3, [r0]
 242              	.L26:
 314:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 243              		.loc 1 314 0
 244 00be 8A78     		ldrb	r2, [r1, #2]	@ zero_extendqisi2
 315:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 245              		.loc 1 315 0
 246 00c0 CB78     		ldrb	r3, [r1, #3]	@ zero_extendqisi2
 247 00c2 1B06     		lsls	r3, r3, #24
 314:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 248              		.loc 1 314 0
 249 00c4 43EA8273 		orr	r3, r3, r2, lsl #30
 316:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 250              		.loc 1 316 0
 251 00c8 0A79     		ldrb	r2, [r1, #4]	@ zero_extendqisi2
 315:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 252              		.loc 1 315 0
 253 00ca 43EA0243 		orr	r3, r3, r2, lsl #16
 317:FWLIB/src/stm32f4xx_can.c ****                ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 254              		.loc 1 317 0
 255 00ce 4A79     		ldrb	r2, [r1, #5]	@ zero_extendqisi2
 316:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 256              		.loc 1 316 0
 257 00d0 43EA0253 		orr	r3, r3, r2, lsl #20
 318:FWLIB/src/stm32f4xx_can.c **** 
 258              		.loc 1 318 0
 259 00d4 0A88     		ldrh	r2, [r1]
 260 00d6 013A     		subs	r2, r2, #1
 317:FWLIB/src/stm32f4xx_can.c ****                ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 261              		.loc 1 317 0
 262 00d8 1343     		orrs	r3, r3, r2
 314:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 263              		.loc 1 314 0
 264 00da C361     		str	r3, [r0, #28]
 321:FWLIB/src/stm32f4xx_can.c **** 
 265              		.loc 1 321 0
 266 00dc 0368     		ldr	r3, [r0]
 267 00de 23F00103 		bic	r3, r3, #1
 268 00e2 0360     		str	r3, [r0]
 269              	.LVL16:
 324:FWLIB/src/stm32f4xx_can.c **** 
 270              		.loc 1 324 0
 271 00e4 0023     		movs	r3, #0
 326:FWLIB/src/stm32f4xx_can.c ****    {
 272              		.loc 1 326 0
 273 00e6 00E0     		b	.L27
 274              	.LVL17:
 275              	.L29:
 328:FWLIB/src/stm32f4xx_can.c ****    }
 276              		.loc 1 328 0
 277 00e8 0133     		adds	r3, r3, #1
 278              	.LVL18:
 279              	.L27:
 326:FWLIB/src/stm32f4xx_can.c ****    {
 280              		.loc 1 326 0
 281 00ea 4268     		ldr	r2, [r0, #4]
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 39


 282 00ec 12F0010F 		tst	r2, #1
 283 00f0 03D0     		beq	.L28
 326:FWLIB/src/stm32f4xx_can.c ****    {
 284              		.loc 1 326 0 is_stmt 0 discriminator 1
 285 00f2 4FF6FF72 		movw	r2, #65535
 286 00f6 9342     		cmp	r3, r2
 287 00f8 F6D1     		bne	.L29
 288              	.L28:
 332:FWLIB/src/stm32f4xx_can.c ****     {
 289              		.loc 1 332 0 is_stmt 1
 290 00fa 4368     		ldr	r3, [r0, #4]
 291              	.LVL19:
 292 00fc 13F0010F 		tst	r3, #1
 293 0100 03D0     		beq	.L31
 334:FWLIB/src/stm32f4xx_can.c ****     }
 294              		.loc 1 334 0
 295 0102 0020     		movs	r0, #0
 296              	.LVL20:
 297 0104 7047     		bx	lr
 298              	.LVL21:
 299              	.L30:
 249:FWLIB/src/stm32f4xx_can.c ****   }
 300              		.loc 1 249 0
 301 0106 0020     		movs	r0, #0
 302              	.LVL22:
 303 0108 7047     		bx	lr
 304              	.LVL23:
 305              	.L31:
 338:FWLIB/src/stm32f4xx_can.c ****     }
 306              		.loc 1 338 0
 307 010a 0120     		movs	r0, #1
 308              	.LVL24:
 344:FWLIB/src/stm32f4xx_can.c **** 
 309              		.loc 1 344 0
 310 010c 7047     		bx	lr
 311              		.cfi_endproc
 312              	.LFE124:
 314 010e 00BF     		.section	.text.CAN_FilterInit,"ax",%progbits
 315              		.align	2
 316              		.global	CAN_FilterInit
 317              		.thumb
 318              		.thumb_func
 320              	CAN_FilterInit:
 321              	.LFB125:
 449:FWLIB/src/stm32f4xx_can.c ****   uint32_t filter_number_bit_pos = 0;
 322              		.loc 1 449 0
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 0
 325              		@ frame_needed = 0, uses_anonymous_args = 0
 326              		@ link register save eliminated.
 327              	.LVL25:
 328 0000 70B4     		push	{r4, r5, r6}
 329              	.LCFI1:
 330              		.cfi_def_cfa_offset 12
 331              		.cfi_offset 4, -12
 332              		.cfi_offset 5, -8
 333              		.cfi_offset 6, -4
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 40


 334              	.LVL26:
 458:FWLIB/src/stm32f4xx_can.c **** 
 335              		.loc 1 458 0
 336 0002 837A     		ldrb	r3, [r0, #10]	@ zero_extendqisi2
 337 0004 0122     		movs	r2, #1
 338 0006 02FA03F3 		lsl	r3, r2, r3
 339              	.LVL27:
 461:FWLIB/src/stm32f4xx_can.c **** 
 340              		.loc 1 461 0
 341 000a 394A     		ldr	r2, .L41
 342 000c D2F80012 		ldr	r1, [r2, #512]
 343 0010 41F00101 		orr	r1, r1, #1
 344 0014 C2F80012 		str	r1, [r2, #512]
 464:FWLIB/src/stm32f4xx_can.c **** 
 345              		.loc 1 464 0
 346 0018 D2F81C12 		ldr	r1, [r2, #540]
 347 001c DC43     		mvns	r4, r3
 348 001e 2140     		ands	r1, r1, r4
 349 0020 C2F81C12 		str	r1, [r2, #540]
 467:FWLIB/src/stm32f4xx_can.c ****   {
 350              		.loc 1 467 0
 351 0024 027B     		ldrb	r2, [r0, #12]	@ zero_extendqisi2
 352 0026 B2B9     		cbnz	r2, .L33
 470:FWLIB/src/stm32f4xx_can.c **** 
 353              		.loc 1 470 0
 354 0028 314A     		ldr	r2, .L41
 355 002a D2F80C12 		ldr	r1, [r2, #524]
 356 002e 2140     		ands	r1, r1, r4
 357 0030 C2F80C12 		str	r1, [r2, #524]
 474:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 358              		.loc 1 474 0
 359 0034 817A     		ldrb	r1, [r0, #10]	@ zero_extendqisi2
 475:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 360              		.loc 1 475 0
 361 0036 C688     		ldrh	r6, [r0, #6]
 476:FWLIB/src/stm32f4xx_can.c **** 
 362              		.loc 1 476 0
 363 0038 4588     		ldrh	r5, [r0, #2]
 475:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 364              		.loc 1 475 0
 365 003a 45EA0645 		orr	r5, r5, r6, lsl #16
 474:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 366              		.loc 1 474 0
 367 003e 4831     		adds	r1, r1, #72
 368 0040 42F83150 		str	r5, [r2, r1, lsl #3]
 480:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 369              		.loc 1 480 0
 370 0044 857A     		ldrb	r5, [r0, #10]	@ zero_extendqisi2
 481:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 371              		.loc 1 481 0
 372 0046 8688     		ldrh	r6, [r0, #4]
 482:FWLIB/src/stm32f4xx_can.c ****   }
 373              		.loc 1 482 0
 374 0048 0188     		ldrh	r1, [r0]
 481:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 375              		.loc 1 481 0
 376 004a 41EA0641 		orr	r1, r1, r6, lsl #16
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 41


 480:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 377              		.loc 1 480 0
 378 004e 4835     		adds	r5, r5, #72
 379 0050 02EBC502 		add	r2, r2, r5, lsl #3
 380 0054 5160     		str	r1, [r2, #4]
 381              	.L33:
 485:FWLIB/src/stm32f4xx_can.c ****   {
 382              		.loc 1 485 0
 383 0056 027B     		ldrb	r2, [r0, #12]	@ zero_extendqisi2
 384 0058 012A     		cmp	r2, #1
 385 005a 16D1     		bne	.L34
 488:FWLIB/src/stm32f4xx_can.c ****     /* 32-bit identifier or First 32-bit identifier */
 386              		.loc 1 488 0
 387 005c 244A     		ldr	r2, .L41
 388 005e D2F80C12 		ldr	r1, [r2, #524]
 389 0062 1943     		orrs	r1, r1, r3
 390 0064 C2F80C12 		str	r1, [r2, #524]
 490:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 391              		.loc 1 490 0
 392 0068 817A     		ldrb	r1, [r0, #10]	@ zero_extendqisi2
 491:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 393              		.loc 1 491 0
 394 006a 0688     		ldrh	r6, [r0]
 492:FWLIB/src/stm32f4xx_can.c ****     /* 32-bit mask or Second 32-bit identifier */
 395              		.loc 1 492 0
 396 006c 4588     		ldrh	r5, [r0, #2]
 491:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 397              		.loc 1 491 0
 398 006e 45EA0645 		orr	r5, r5, r6, lsl #16
 490:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 399              		.loc 1 490 0
 400 0072 4831     		adds	r1, r1, #72
 401 0074 42F83150 		str	r5, [r2, r1, lsl #3]
 494:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 402              		.loc 1 494 0
 403 0078 857A     		ldrb	r5, [r0, #10]	@ zero_extendqisi2
 495:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 404              		.loc 1 495 0
 405 007a 8688     		ldrh	r6, [r0, #4]
 496:FWLIB/src/stm32f4xx_can.c ****   }
 406              		.loc 1 496 0
 407 007c C188     		ldrh	r1, [r0, #6]
 495:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 408              		.loc 1 495 0
 409 007e 41EA0641 		orr	r1, r1, r6, lsl #16
 494:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 410              		.loc 1 494 0
 411 0082 4835     		adds	r5, r5, #72
 412 0084 02EBC502 		add	r2, r2, r5, lsl #3
 413 0088 5160     		str	r1, [r2, #4]
 414              	.L34:
 500:FWLIB/src/stm32f4xx_can.c ****   {
 415              		.loc 1 500 0
 416 008a C27A     		ldrb	r2, [r0, #11]	@ zero_extendqisi2
 417 008c 32B9     		cbnz	r2, .L35
 503:FWLIB/src/stm32f4xx_can.c ****   }
 418              		.loc 1 503 0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 42


 419 008e 1849     		ldr	r1, .L41
 420 0090 D1F80422 		ldr	r2, [r1, #516]
 421 0094 2240     		ands	r2, r2, r4
 422 0096 C1F80422 		str	r2, [r1, #516]
 423 009a 05E0     		b	.L36
 424              	.L35:
 508:FWLIB/src/stm32f4xx_can.c ****   }
 425              		.loc 1 508 0
 426 009c 1449     		ldr	r1, .L41
 427 009e D1F80422 		ldr	r2, [r1, #516]
 428 00a2 1A43     		orrs	r2, r2, r3
 429 00a4 C1F80422 		str	r2, [r1, #516]
 430              	.L36:
 512:FWLIB/src/stm32f4xx_can.c ****   {
 431              		.loc 1 512 0
 432 00a8 0289     		ldrh	r2, [r0, #8]
 433 00aa 2AB9     		cbnz	r2, .L37
 515:FWLIB/src/stm32f4xx_can.c ****   }
 434              		.loc 1 515 0
 435 00ac 1049     		ldr	r1, .L41
 436 00ae D1F81422 		ldr	r2, [r1, #532]
 437 00b2 1440     		ands	r4, r4, r2
 438 00b4 C1F81442 		str	r4, [r1, #532]
 439              	.L37:
 518:FWLIB/src/stm32f4xx_can.c ****   {
 440              		.loc 1 518 0
 441 00b8 0289     		ldrh	r2, [r0, #8]
 442 00ba 012A     		cmp	r2, #1
 443 00bc 05D1     		bne	.L38
 521:FWLIB/src/stm32f4xx_can.c ****   }
 444              		.loc 1 521 0
 445 00be 0C49     		ldr	r1, .L41
 446 00c0 D1F81422 		ldr	r2, [r1, #532]
 447 00c4 1A43     		orrs	r2, r2, r3
 448 00c6 C1F81422 		str	r2, [r1, #532]
 449              	.L38:
 525:FWLIB/src/stm32f4xx_can.c ****   {
 450              		.loc 1 525 0
 451 00ca 427B     		ldrb	r2, [r0, #13]	@ zero_extendqisi2
 452 00cc 012A     		cmp	r2, #1
 453 00ce 05D1     		bne	.L39
 527:FWLIB/src/stm32f4xx_can.c ****   }
 454              		.loc 1 527 0
 455 00d0 0749     		ldr	r1, .L41
 456 00d2 D1F81C22 		ldr	r2, [r1, #540]
 457 00d6 1343     		orrs	r3, r3, r2
 458              	.LVL28:
 459 00d8 C1F81C32 		str	r3, [r1, #540]
 460              	.L39:
 531:FWLIB/src/stm32f4xx_can.c **** }
 461              		.loc 1 531 0
 462 00dc 044A     		ldr	r2, .L41
 463 00de D2F80032 		ldr	r3, [r2, #512]
 464 00e2 23F00103 		bic	r3, r3, #1
 465 00e6 C2F80032 		str	r3, [r2, #512]
 532:FWLIB/src/stm32f4xx_can.c **** #endif /* STM32F413_423xx */
 466              		.loc 1 532 0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 43


 467 00ea 70BC     		pop	{r4, r5, r6}
 468              	.LCFI2:
 469              		.cfi_restore 6
 470              		.cfi_restore 5
 471              		.cfi_restore 4
 472              		.cfi_def_cfa_offset 0
 473 00ec 7047     		bx	lr
 474              	.L42:
 475 00ee 00BF     		.align	2
 476              	.L41:
 477 00f0 00640040 		.word	1073767424
 478              		.cfi_endproc
 479              	.LFE125:
 481              		.section	.text.CAN_StructInit,"ax",%progbits
 482              		.align	2
 483              		.global	CAN_StructInit
 484              		.thumb
 485              		.thumb_func
 487              	CAN_StructInit:
 488              	.LFB126:
 541:FWLIB/src/stm32f4xx_can.c ****   /* Reset CAN init structure parameters values */
 489              		.loc 1 541 0
 490              		.cfi_startproc
 491              		@ args = 0, pretend = 0, frame = 0
 492              		@ frame_needed = 0, uses_anonymous_args = 0
 493              		@ link register save eliminated.
 494              	.LVL29:
 545:FWLIB/src/stm32f4xx_can.c ****   
 495              		.loc 1 545 0
 496 0000 0023     		movs	r3, #0
 497 0002 8371     		strb	r3, [r0, #6]
 548:FWLIB/src/stm32f4xx_can.c ****   
 498              		.loc 1 548 0
 499 0004 C371     		strb	r3, [r0, #7]
 551:FWLIB/src/stm32f4xx_can.c ****   
 500              		.loc 1 551 0
 501 0006 0372     		strb	r3, [r0, #8]
 554:FWLIB/src/stm32f4xx_can.c ****   
 502              		.loc 1 554 0
 503 0008 4372     		strb	r3, [r0, #9]
 557:FWLIB/src/stm32f4xx_can.c ****   
 504              		.loc 1 557 0
 505 000a 8372     		strb	r3, [r0, #10]
 560:FWLIB/src/stm32f4xx_can.c ****   
 506              		.loc 1 560 0
 507 000c C372     		strb	r3, [r0, #11]
 563:FWLIB/src/stm32f4xx_can.c ****   
 508              		.loc 1 563 0
 509 000e 8370     		strb	r3, [r0, #2]
 566:FWLIB/src/stm32f4xx_can.c ****   
 510              		.loc 1 566 0
 511 0010 C370     		strb	r3, [r0, #3]
 569:FWLIB/src/stm32f4xx_can.c ****   
 512              		.loc 1 569 0
 513 0012 0323     		movs	r3, #3
 514 0014 0371     		strb	r3, [r0, #4]
 572:FWLIB/src/stm32f4xx_can.c ****   
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 44


 515              		.loc 1 572 0
 516 0016 0223     		movs	r3, #2
 517 0018 4371     		strb	r3, [r0, #5]
 575:FWLIB/src/stm32f4xx_can.c **** }
 518              		.loc 1 575 0
 519 001a 0123     		movs	r3, #1
 520 001c 0380     		strh	r3, [r0]	@ movhi
 521 001e 7047     		bx	lr
 522              		.cfi_endproc
 523              	.LFE126:
 525              		.section	.text.CAN_SlaveStartBank,"ax",%progbits
 526              		.align	2
 527              		.global	CAN_SlaveStartBank
 528              		.thumb
 529              		.thumb_func
 531              	CAN_SlaveStartBank:
 532              	.LFB127:
 607:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 533              		.loc 1 607 0
 534              		.cfi_startproc
 535              		@ args = 0, pretend = 0, frame = 0
 536              		@ frame_needed = 0, uses_anonymous_args = 0
 537              		@ link register save eliminated.
 538              	.LVL30:
 612:FWLIB/src/stm32f4xx_can.c ****   
 539              		.loc 1 612 0
 540 0000 0D4B     		ldr	r3, .L45
 541 0002 D3F80022 		ldr	r2, [r3, #512]
 542 0006 42F00102 		orr	r2, r2, #1
 543 000a C3F80022 		str	r2, [r3, #512]
 615:FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 544              		.loc 1 615 0
 545 000e D3F80022 		ldr	r2, [r3, #512]
 546 0012 22F47C52 		bic	r2, r2, #16128
 547 0016 22F00E02 		bic	r2, r2, #14
 548 001a C3F80022 		str	r2, [r3, #512]
 616:FWLIB/src/stm32f4xx_can.c ****   
 549              		.loc 1 616 0
 550 001e D3F80022 		ldr	r2, [r3, #512]
 551 0022 42EA0020 		orr	r0, r2, r0, lsl #8
 552              	.LVL31:
 553 0026 C3F80002 		str	r0, [r3, #512]
 619:FWLIB/src/stm32f4xx_can.c **** }
 554              		.loc 1 619 0
 555 002a D3F80022 		ldr	r2, [r3, #512]
 556 002e 22F00102 		bic	r2, r2, #1
 557 0032 C3F80022 		str	r2, [r3, #512]
 558 0036 7047     		bx	lr
 559              	.L46:
 560              		.align	2
 561              	.L45:
 562 0038 00640040 		.word	1073767424
 563              		.cfi_endproc
 564              	.LFE127:
 566              		.section	.text.CAN_DBGFreeze,"ax",%progbits
 567              		.align	2
 568              		.global	CAN_DBGFreeze
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 45


 569              		.thumb
 570              		.thumb_func
 572              	CAN_DBGFreeze:
 573              	.LFB128:
 633:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 574              		.loc 1 633 0
 575              		.cfi_startproc
 576              		@ args = 0, pretend = 0, frame = 0
 577              		@ frame_needed = 0, uses_anonymous_args = 0
 578              		@ link register save eliminated.
 579              	.LVL32:
 638:FWLIB/src/stm32f4xx_can.c ****   {
 580              		.loc 1 638 0
 581 0000 21B1     		cbz	r1, .L48
 641:FWLIB/src/stm32f4xx_can.c ****   }
 582              		.loc 1 641 0
 583 0002 0368     		ldr	r3, [r0]
 584 0004 43F48033 		orr	r3, r3, #65536
 585 0008 0360     		str	r3, [r0]
 586 000a 7047     		bx	lr
 587              	.L48:
 646:FWLIB/src/stm32f4xx_can.c ****   }
 588              		.loc 1 646 0
 589 000c 0368     		ldr	r3, [r0]
 590 000e 23F48033 		bic	r3, r3, #65536
 591 0012 0360     		str	r3, [r0]
 592 0014 7047     		bx	lr
 593              		.cfi_endproc
 594              	.LFE128:
 596 0016 00BF     		.section	.text.CAN_TTComModeCmd,"ax",%progbits
 597              		.align	2
 598              		.global	CAN_TTComModeCmd
 599              		.thumb
 600              		.thumb_func
 602              	CAN_TTComModeCmd:
 603              	.LFB129:
 664:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 604              		.loc 1 664 0
 605              		.cfi_startproc
 606              		@ args = 0, pretend = 0, frame = 0
 607              		@ frame_needed = 0, uses_anonymous_args = 0
 608              		@ link register save eliminated.
 609              	.LVL33:
 668:FWLIB/src/stm32f4xx_can.c ****   {
 610              		.loc 1 668 0
 611 0000 B1B1     		cbz	r1, .L51
 671:FWLIB/src/stm32f4xx_can.c **** 
 612              		.loc 1 671 0
 613 0002 0368     		ldr	r3, [r0]
 614 0004 43F08003 		orr	r3, r3, #128
 615 0008 0360     		str	r3, [r0]
 674:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 616              		.loc 1 674 0
 617 000a D0F88431 		ldr	r3, [r0, #388]
 618 000e 43F48073 		orr	r3, r3, #256
 619 0012 C0F88431 		str	r3, [r0, #388]
 675:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 46


 620              		.loc 1 675 0
 621 0016 D0F89431 		ldr	r3, [r0, #404]
 622 001a 43F48073 		orr	r3, r3, #256
 623 001e C0F89431 		str	r3, [r0, #404]
 676:FWLIB/src/stm32f4xx_can.c ****   }
 624              		.loc 1 676 0
 625 0022 D0F8A431 		ldr	r3, [r0, #420]
 626 0026 43F48073 		orr	r3, r3, #256
 627 002a C0F8A431 		str	r3, [r0, #420]
 628 002e 7047     		bx	lr
 629              	.L51:
 681:FWLIB/src/stm32f4xx_can.c **** 
 630              		.loc 1 681 0
 631 0030 0368     		ldr	r3, [r0]
 632 0032 23F08003 		bic	r3, r3, #128
 633 0036 0360     		str	r3, [r0]
 684:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 634              		.loc 1 684 0
 635 0038 D0F88431 		ldr	r3, [r0, #388]
 636 003c 23F48073 		bic	r3, r3, #256
 637 0040 C0F88431 		str	r3, [r0, #388]
 685:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 638              		.loc 1 685 0
 639 0044 D0F89431 		ldr	r3, [r0, #404]
 640 0048 23F48073 		bic	r3, r3, #256
 641 004c C0F89431 		str	r3, [r0, #404]
 686:FWLIB/src/stm32f4xx_can.c ****   }
 642              		.loc 1 686 0
 643 0050 D0F8A431 		ldr	r3, [r0, #420]
 644 0054 23F48073 		bic	r3, r3, #256
 645 0058 C0F8A431 		str	r3, [r0, #420]
 646 005c 7047     		bx	lr
 647              		.cfi_endproc
 648              	.LFE129:
 650 005e 00BF     		.section	.text.CAN_Transmit,"ax",%progbits
 651              		.align	2
 652              		.global	CAN_Transmit
 653              		.thumb
 654              		.thumb_func
 656              	CAN_Transmit:
 657              	.LFB130:
 719:FWLIB/src/stm32f4xx_can.c ****   uint8_t transmit_mailbox = 0;
 658              		.loc 1 719 0
 659              		.cfi_startproc
 660              		@ args = 0, pretend = 0, frame = 0
 661              		@ frame_needed = 0, uses_anonymous_args = 0
 662              		@ link register save eliminated.
 663              	.LVL34:
 664 0000 0346     		mov	r3, r0
 665              	.LVL35:
 728:FWLIB/src/stm32f4xx_can.c ****   {
 666              		.loc 1 728 0
 667 0002 8268     		ldr	r2, [r0, #8]
 668 0004 12F0806F 		tst	r2, #67108864
 669 0008 09D1     		bne	.L58
 732:FWLIB/src/stm32f4xx_can.c ****   {
 670              		.loc 1 732 0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 47


 671 000a 8268     		ldr	r2, [r0, #8]
 672 000c 12F0006F 		tst	r2, #134217728
 673 0010 07D1     		bne	.L59
 736:FWLIB/src/stm32f4xx_can.c ****   {
 674              		.loc 1 736 0
 675 0012 8268     		ldr	r2, [r0, #8]
 676 0014 12F0805F 		tst	r2, #268435456
 677 0018 05D0     		beq	.L60
 738:FWLIB/src/stm32f4xx_can.c ****   }
 678              		.loc 1 738 0
 679 001a 0220     		movs	r0, #2
 680              	.LVL36:
 681 001c 04E0     		b	.L54
 682              	.LVL37:
 683              	.L58:
 730:FWLIB/src/stm32f4xx_can.c ****   }
 684              		.loc 1 730 0
 685 001e 0020     		movs	r0, #0
 686              	.LVL38:
 687 0020 02E0     		b	.L54
 688              	.LVL39:
 689              	.L59:
 734:FWLIB/src/stm32f4xx_can.c ****   }
 690              		.loc 1 734 0
 691 0022 0120     		movs	r0, #1
 692              	.LVL40:
 693 0024 00E0     		b	.L54
 694              	.LVL41:
 695              	.L60:
 742:FWLIB/src/stm32f4xx_can.c ****   }
 696              		.loc 1 742 0
 697 0026 0420     		movs	r0, #4
 698              	.LVL42:
 699              	.L54:
 745:FWLIB/src/stm32f4xx_can.c ****   {
 700              		.loc 1 745 0
 701 0028 0428     		cmp	r0, #4
 702 002a 4FD0     		beq	.L63
 719:FWLIB/src/stm32f4xx_can.c ****   uint8_t transmit_mailbox = 0;
 703              		.loc 1 719 0
 704 002c F0B4     		push	{r4, r5, r6, r7}
 705              	.LCFI3:
 706              		.cfi_def_cfa_offset 16
 707              		.cfi_offset 4, -16
 708              		.cfi_offset 5, -12
 709              		.cfi_offset 6, -8
 710              		.cfi_offset 7, -4
 748:FWLIB/src/stm32f4xx_can.c ****     if (TxMessage->IDE == CAN_Id_Standard)
 711              		.loc 1 748 0
 712 002e 0546     		mov	r5, r0
 713 0030 00F11802 		add	r2, r0, #24
 714 0034 1201     		lsls	r2, r2, #4
 715 0036 9C58     		ldr	r4, [r3, r2]
 716 0038 04F00104 		and	r4, r4, #1
 717 003c 9C50     		str	r4, [r3, r2]
 749:FWLIB/src/stm32f4xx_can.c ****     {
 718              		.loc 1 749 0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 48


 719 003e 0A7A     		ldrb	r2, [r1, #8]	@ zero_extendqisi2
 720 0040 52B9     		cbnz	r2, .L56
 752:FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 721              		.loc 1 752 0
 722 0042 00F11806 		add	r6, r0, #24
 723 0046 3601     		lsls	r6, r6, #4
 724 0048 9F59     		ldr	r7, [r3, r6]
 725 004a 0A68     		ldr	r2, [r1]
 753:FWLIB/src/stm32f4xx_can.c ****     }
 726              		.loc 1 753 0
 727 004c 4C7A     		ldrb	r4, [r1, #9]	@ zero_extendqisi2
 752:FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 728              		.loc 1 752 0
 729 004e 44EA4252 		orr	r2, r4, r2, lsl #21
 730 0052 3A43     		orrs	r2, r2, r7
 731 0054 9A51     		str	r2, [r3, r6]
 732 0056 0AE0     		b	.L57
 733              	.L56:
 758:FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->IDE | \
 734              		.loc 1 758 0
 735 0058 00F11806 		add	r6, r0, #24
 736 005c 3601     		lsls	r6, r6, #4
 737 005e 9F59     		ldr	r7, [r3, r6]
 738 0060 4C68     		ldr	r4, [r1, #4]
 739 0062 42EAC404 		orr	r4, r2, r4, lsl #3
 760:FWLIB/src/stm32f4xx_can.c ****     }
 740              		.loc 1 760 0
 741 0066 4A7A     		ldrb	r2, [r1, #9]	@ zero_extendqisi2
 759:FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 742              		.loc 1 759 0
 743 0068 2243     		orrs	r2, r2, r4
 758:FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->IDE | \
 744              		.loc 1 758 0
 745 006a 3A43     		orrs	r2, r2, r7
 746 006c 9A51     		str	r2, [r3, r6]
 747              	.L57:
 764:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 748              		.loc 1 764 0
 749 006e 8A7A     		ldrb	r2, [r1, #10]	@ zero_extendqisi2
 750 0070 02F00F02 		and	r2, r2, #15
 751 0074 8A72     		strb	r2, [r1, #10]
 765:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 752              		.loc 1 765 0
 753 0076 05F11804 		add	r4, r5, #24
 754 007a 2401     		lsls	r4, r4, #4
 755 007c 1A19     		adds	r2, r3, r4
 756 007e 5668     		ldr	r6, [r2, #4]
 757 0080 26F00F06 		bic	r6, r6, #15
 758 0084 5660     		str	r6, [r2, #4]
 766:FWLIB/src/stm32f4xx_can.c **** 
 759              		.loc 1 766 0
 760 0086 5668     		ldr	r6, [r2, #4]
 761 0088 8F7A     		ldrb	r7, [r1, #10]	@ zero_extendqisi2
 762 008a 3E43     		orrs	r6, r6, r7
 763 008c 5660     		str	r6, [r2, #4]
 769:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 764              		.loc 1 769 0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 49


 765 008e 8E7B     		ldrb	r6, [r1, #14]	@ zero_extendqisi2
 770:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 766              		.loc 1 770 0
 767 0090 4A7B     		ldrb	r2, [r1, #13]	@ zero_extendqisi2
 768 0092 1204     		lsls	r2, r2, #16
 769:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 769              		.loc 1 769 0
 770 0094 42EA0662 		orr	r2, r2, r6, lsl #24
 771:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[0]));
 771              		.loc 1 771 0
 772 0098 0E7B     		ldrb	r6, [r1, #12]	@ zero_extendqisi2
 770:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 773              		.loc 1 770 0
 774 009a 42EA0622 		orr	r2, r2, r6, lsl #8
 772:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 775              		.loc 1 772 0
 776 009e CE7A     		ldrb	r6, [r1, #11]	@ zero_extendqisi2
 771:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[0]));
 777              		.loc 1 771 0
 778 00a0 3243     		orrs	r2, r2, r6
 769:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 779              		.loc 1 769 0
 780 00a2 03EB0515 		add	r5, r3, r5, lsl #4
 781 00a6 C5F88821 		str	r2, [r5, #392]
 773:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 782              		.loc 1 773 0
 783 00aa 8E7C     		ldrb	r6, [r1, #18]	@ zero_extendqisi2
 774:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 784              		.loc 1 774 0
 785 00ac 4A7C     		ldrb	r2, [r1, #17]	@ zero_extendqisi2
 786 00ae 1204     		lsls	r2, r2, #16
 773:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 787              		.loc 1 773 0
 788 00b0 42EA0662 		orr	r2, r2, r6, lsl #24
 775:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[4]));
 789              		.loc 1 775 0
 790 00b4 0E7C     		ldrb	r6, [r1, #16]	@ zero_extendqisi2
 774:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 791              		.loc 1 774 0
 792 00b6 42EA0622 		orr	r2, r2, r6, lsl #8
 776:FWLIB/src/stm32f4xx_can.c ****     /* Request transmission */
 793              		.loc 1 776 0
 794 00ba C97B     		ldrb	r1, [r1, #15]	@ zero_extendqisi2
 795              	.LVL43:
 775:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[4]));
 796              		.loc 1 775 0
 797 00bc 0A43     		orrs	r2, r2, r1
 773:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 798              		.loc 1 773 0
 799 00be C5F88C21 		str	r2, [r5, #396]
 778:FWLIB/src/stm32f4xx_can.c ****   }
 800              		.loc 1 778 0
 801 00c2 1A59     		ldr	r2, [r3, r4]
 802 00c4 42F00102 		orr	r2, r2, #1
 803 00c8 1A51     		str	r2, [r3, r4]
 781:FWLIB/src/stm32f4xx_can.c **** 
 804              		.loc 1 781 0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 50


 805 00ca F0BC     		pop	{r4, r5, r6, r7}
 806              	.LCFI4:
 807              		.cfi_restore 7
 808              		.cfi_restore 6
 809              		.cfi_restore 5
 810              		.cfi_restore 4
 811              		.cfi_def_cfa_offset 0
 812              	.L63:
 813 00cc 7047     		bx	lr
 814              		.cfi_endproc
 815              	.LFE130:
 817 00ce 00BF     		.section	.text.CAN_TransmitStatus,"ax",%progbits
 818              		.align	2
 819              		.global	CAN_TransmitStatus
 820              		.thumb
 821              		.thumb_func
 823              	CAN_TransmitStatus:
 824              	.LFB131:
 792:FWLIB/src/stm32f4xx_can.c ****   uint32_t state = 0;
 825              		.loc 1 792 0
 826              		.cfi_startproc
 827              		@ args = 0, pretend = 0, frame = 0
 828              		@ frame_needed = 0, uses_anonymous_args = 0
 829              		@ link register save eliminated.
 830              	.LVL44:
 799:FWLIB/src/stm32f4xx_can.c ****   {
 831              		.loc 1 799 0
 832 0000 0129     		cmp	r1, #1
 833 0002 0DD0     		beq	.L66
 834 0004 11B1     		cbz	r1, .L67
 835 0006 0229     		cmp	r1, #2
 836 0008 0ED0     		beq	.L68
 837 000a 15E0     		b	.L77
 838              	.L67:
 802:FWLIB/src/stm32f4xx_can.c ****       break;
 839              		.loc 1 802 0
 840 000c 8368     		ldr	r3, [r0, #8]
 841 000e 23F07B43 		bic	r3, r3, #-83886080
 842 0012 23F47F03 		bic	r3, r3, #16711680
 843 0016 23F47F43 		bic	r3, r3, #65280
 844 001a 23F0FC03 		bic	r3, r3, #252
 845              	.LVL45:
 803:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_1): 
 846              		.loc 1 803 0
 847 001e 0CE0     		b	.L65
 848              	.LVL46:
 849              	.L66:
 805:FWLIB/src/stm32f4xx_can.c ****       break;
 850              		.loc 1 805 0
 851 0020 8268     		ldr	r2, [r0, #8]
 852 0022 114B     		ldr	r3, .L78
 853 0024 1340     		ands	r3, r3, r2
 854              	.LVL47:
 806:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_2): 
 855              		.loc 1 806 0
 856 0026 08E0     		b	.L65
 857              	.LVL48:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 51


 858              	.L68:
 808:FWLIB/src/stm32f4xx_can.c ****       break;
 859              		.loc 1 808 0
 860 0028 8368     		ldr	r3, [r0, #8]
 861 002a 23F06F43 		bic	r3, r3, #-285212672
 862 002e 23F47C03 		bic	r3, r3, #16515072
 863 0032 1B0C     		lsrs	r3, r3, #16
 864 0034 1B04     		lsls	r3, r3, #16
 865              	.LVL49:
 809:FWLIB/src/stm32f4xx_can.c ****     default:
 866              		.loc 1 809 0
 867 0036 00E0     		b	.L65
 868              	.LVL50:
 869              	.L77:
 811:FWLIB/src/stm32f4xx_can.c ****       break;
 870              		.loc 1 811 0
 871 0038 0023     		movs	r3, #0
 872              	.LVL51:
 873              	.L65:
 814:FWLIB/src/stm32f4xx_can.c ****   {
 874              		.loc 1 814 0
 875 003a 0C4A     		ldr	r2, .L78+4
 876 003c 9342     		cmp	r3, r2
 877 003e 0BD0     		beq	.L70
 878 0040 01D8     		bhi	.L71
 879 0042 3BB1     		cbz	r3, .L72
 880 0044 0EE0     		b	.L76
 881              	.L71:
 882 0046 084A     		ldr	r2, .L78
 883 0048 9342     		cmp	r3, r2
 884 004a 07D0     		beq	.L73
 885 004c 084A     		ldr	r2, .L78+8
 886 004e 9342     		cmp	r3, r2
 887 0050 06D0     		beq	.L74
 888 0052 07E0     		b	.L76
 889              	.L72:
 817:FWLIB/src/stm32f4xx_can.c ****       break;
 890              		.loc 1 817 0
 891 0054 0220     		movs	r0, #2
 892              	.LVL52:
 893 0056 7047     		bx	lr
 894              	.LVL53:
 895              	.L70:
 827:FWLIB/src/stm32f4xx_can.c ****       break;
 896              		.loc 1 827 0
 897 0058 0120     		movs	r0, #1
 898              	.LVL54:
 828:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 899              		.loc 1 828 0
 900 005a 7047     		bx	lr
 901              	.LVL55:
 902              	.L73:
 829:FWLIB/src/stm32f4xx_can.c ****       break;
 903              		.loc 1 829 0
 904 005c 0120     		movs	r0, #1
 905              	.LVL56:
 830:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 52


 906              		.loc 1 830 0
 907 005e 7047     		bx	lr
 908              	.LVL57:
 909              	.L74:
 831:FWLIB/src/stm32f4xx_can.c ****       break;
 910              		.loc 1 831 0
 911 0060 0120     		movs	r0, #1
 912              	.LVL58:
 832:FWLIB/src/stm32f4xx_can.c ****     default: state = CAN_TxStatus_Failed;
 913              		.loc 1 832 0
 914 0062 7047     		bx	lr
 915              	.LVL59:
 916              	.L76:
 820:FWLIB/src/stm32f4xx_can.c ****       break;
 917              		.loc 1 820 0
 918 0064 0020     		movs	r0, #0
 919              	.LVL60:
 837:FWLIB/src/stm32f4xx_can.c **** 
 920              		.loc 1 837 0
 921 0066 7047     		bx	lr
 922              	.L79:
 923              		.align	2
 924              	.L78:
 925 0068 00030008 		.word	134218496
 926 006c 03000004 		.word	67108867
 927 0070 00000310 		.word	268632064
 928              		.cfi_endproc
 929              	.LFE131:
 931              		.section	.text.CAN_CancelTransmit,"ax",%progbits
 932              		.align	2
 933              		.global	CAN_CancelTransmit
 934              		.thumb
 935              		.thumb_func
 937              	CAN_CancelTransmit:
 938              	.LFB132:
 847:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 939              		.loc 1 847 0
 940              		.cfi_startproc
 941              		@ args = 0, pretend = 0, frame = 0
 942              		@ frame_needed = 0, uses_anonymous_args = 0
 943              		@ link register save eliminated.
 944              	.LVL61:
 852:FWLIB/src/stm32f4xx_can.c ****   {
 945              		.loc 1 852 0
 946 0000 0129     		cmp	r1, #1
 947 0002 08D0     		beq	.L82
 948 0004 11B1     		cbz	r1, .L83
 949 0006 0229     		cmp	r1, #2
 950 0008 0AD0     		beq	.L84
 951 000a 7047     		bx	lr
 952              	.L83:
 854:FWLIB/src/stm32f4xx_can.c ****       break;
 953              		.loc 1 854 0
 954 000c 8368     		ldr	r3, [r0, #8]
 955 000e 43F08003 		orr	r3, r3, #128
 956 0012 8360     		str	r3, [r0, #8]
 855:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 53


 957              		.loc 1 855 0
 958 0014 7047     		bx	lr
 959              	.L82:
 856:FWLIB/src/stm32f4xx_can.c ****       break;
 960              		.loc 1 856 0
 961 0016 8368     		ldr	r3, [r0, #8]
 962 0018 43F40043 		orr	r3, r3, #32768
 963 001c 8360     		str	r3, [r0, #8]
 857:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 964              		.loc 1 857 0
 965 001e 7047     		bx	lr
 966              	.L84:
 858:FWLIB/src/stm32f4xx_can.c ****       break;
 967              		.loc 1 858 0
 968 0020 8368     		ldr	r3, [r0, #8]
 969 0022 43F40003 		orr	r3, r3, #8388608
 970 0026 8360     		str	r3, [r0, #8]
 971 0028 7047     		bx	lr
 972              		.cfi_endproc
 973              	.LFE132:
 975 002a 00BF     		.section	.text.CAN_Receive,"ax",%progbits
 976              		.align	2
 977              		.global	CAN_Receive
 978              		.thumb
 979              		.thumb_func
 981              	CAN_Receive:
 982              	.LFB133:
 895:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 983              		.loc 1 895 0
 984              		.cfi_startproc
 985              		@ args = 0, pretend = 0, frame = 0
 986              		@ frame_needed = 0, uses_anonymous_args = 0
 987              		@ link register save eliminated.
 988              	.LVL62:
 989 0000 10B4     		push	{r4}
 990              	.LCFI5:
 991              		.cfi_def_cfa_offset 4
 992              		.cfi_offset 4, -4
 900:FWLIB/src/stm32f4xx_can.c ****   if (RxMessage->IDE == CAN_Id_Standard)
 993              		.loc 1 900 0
 994 0002 01F11B03 		add	r3, r1, #27
 995 0006 1B01     		lsls	r3, r3, #4
 996 0008 C358     		ldr	r3, [r0, r3]
 997 000a 03F00403 		and	r3, r3, #4
 998 000e DBB2     		uxtb	r3, r3
 999 0010 1372     		strb	r3, [r2, #8]
 901:FWLIB/src/stm32f4xx_can.c ****   {
 1000              		.loc 1 901 0
 1001 0012 33B9     		cbnz	r3, .L86
 903:FWLIB/src/stm32f4xx_can.c ****   }
 1002              		.loc 1 903 0
 1003 0014 01F11B03 		add	r3, r1, #27
 1004 0018 1B01     		lsls	r3, r3, #4
 1005 001a C358     		ldr	r3, [r0, r3]
 1006 001c 5B0D     		lsrs	r3, r3, #21
 1007 001e 1360     		str	r3, [r2]
 1008 0020 05E0     		b	.L87
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 54


 1009              	.L86:
 907:FWLIB/src/stm32f4xx_can.c ****   }
 1010              		.loc 1 907 0
 1011 0022 01F11B03 		add	r3, r1, #27
 1012 0026 1B01     		lsls	r3, r3, #4
 1013 0028 C358     		ldr	r3, [r0, r3]
 1014 002a DB08     		lsrs	r3, r3, #3
 1015 002c 5360     		str	r3, [r2, #4]
 1016              	.L87:
 910:FWLIB/src/stm32f4xx_can.c ****   /* Get the DLC */
 1017              		.loc 1 910 0
 1018 002e 01F11B03 		add	r3, r1, #27
 1019 0032 1B01     		lsls	r3, r3, #4
 1020 0034 C418     		adds	r4, r0, r3
 1021 0036 C358     		ldr	r3, [r0, r3]
 1022 0038 03F00203 		and	r3, r3, #2
 1023 003c 5372     		strb	r3, [r2, #9]
 912:FWLIB/src/stm32f4xx_can.c ****   /* Get the FMI */
 1024              		.loc 1 912 0
 1025 003e 6368     		ldr	r3, [r4, #4]
 1026 0040 03F00F03 		and	r3, r3, #15
 1027 0044 9372     		strb	r3, [r2, #10]
 914:FWLIB/src/stm32f4xx_can.c ****   /* Get the data field */
 1028              		.loc 1 914 0
 1029 0046 6368     		ldr	r3, [r4, #4]
 1030 0048 1B0A     		lsrs	r3, r3, #8
 1031 004a D374     		strb	r3, [r2, #19]
 916:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 1032              		.loc 1 916 0
 1033 004c 00EB0113 		add	r3, r0, r1, lsl #4
 1034 0050 D3F8B841 		ldr	r4, [r3, #440]
 1035 0054 D472     		strb	r4, [r2, #11]
 917:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 1036              		.loc 1 917 0
 1037 0056 D3F8B841 		ldr	r4, [r3, #440]
 1038 005a 240A     		lsrs	r4, r4, #8
 1039 005c 1473     		strb	r4, [r2, #12]
 918:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 1040              		.loc 1 918 0
 1041 005e D3F8B841 		ldr	r4, [r3, #440]
 1042 0062 240C     		lsrs	r4, r4, #16
 1043 0064 5473     		strb	r4, [r2, #13]
 919:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 1044              		.loc 1 919 0
 1045 0066 D3F8B841 		ldr	r4, [r3, #440]
 1046 006a 240E     		lsrs	r4, r4, #24
 1047 006c 9473     		strb	r4, [r2, #14]
 920:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 1048              		.loc 1 920 0
 1049 006e D3F8BC41 		ldr	r4, [r3, #444]
 1050 0072 D473     		strb	r4, [r2, #15]
 921:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 1051              		.loc 1 921 0
 1052 0074 D3F8BC41 		ldr	r4, [r3, #444]
 1053 0078 240A     		lsrs	r4, r4, #8
 1054 007a 1474     		strb	r4, [r2, #16]
 922:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 55


 1055              		.loc 1 922 0
 1056 007c D3F8BC41 		ldr	r4, [r3, #444]
 1057 0080 240C     		lsrs	r4, r4, #16
 1058 0082 5474     		strb	r4, [r2, #17]
 923:FWLIB/src/stm32f4xx_can.c ****   /* Release the FIFO */
 1059              		.loc 1 923 0
 1060 0084 D3F8BC31 		ldr	r3, [r3, #444]
 1061 0088 1B0E     		lsrs	r3, r3, #24
 1062 008a 9374     		strb	r3, [r2, #18]
 926:FWLIB/src/stm32f4xx_can.c ****   {
 1063              		.loc 1 926 0
 1064 008c 21B9     		cbnz	r1, .L88
 928:FWLIB/src/stm32f4xx_can.c ****   }
 1065              		.loc 1 928 0
 1066 008e C368     		ldr	r3, [r0, #12]
 1067 0090 43F02003 		orr	r3, r3, #32
 1068 0094 C360     		str	r3, [r0, #12]
 1069 0096 03E0     		b	.L85
 1070              	.L88:
 933:FWLIB/src/stm32f4xx_can.c ****   }
 1071              		.loc 1 933 0
 1072 0098 0369     		ldr	r3, [r0, #16]
 1073 009a 43F02003 		orr	r3, r3, #32
 1074 009e 0361     		str	r3, [r0, #16]
 1075              	.L85:
 935:FWLIB/src/stm32f4xx_can.c **** 
 1076              		.loc 1 935 0
 1077 00a0 5DF8044B 		ldr	r4, [sp], #4
 1078              	.LCFI6:
 1079              		.cfi_restore 4
 1080              		.cfi_def_cfa_offset 0
 1081 00a4 7047     		bx	lr
 1082              		.cfi_endproc
 1083              	.LFE133:
 1085 00a6 00BF     		.section	.text.CAN_FIFORelease,"ax",%progbits
 1086              		.align	2
 1087              		.global	CAN_FIFORelease
 1088              		.thumb
 1089              		.thumb_func
 1091              	CAN_FIFORelease:
 1092              	.LFB134:
 945:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 1093              		.loc 1 945 0
 1094              		.cfi_startproc
 1095              		@ args = 0, pretend = 0, frame = 0
 1096              		@ frame_needed = 0, uses_anonymous_args = 0
 1097              		@ link register save eliminated.
 1098              	.LVL63:
 950:FWLIB/src/stm32f4xx_can.c ****   {
 1099              		.loc 1 950 0
 1100 0000 21B9     		cbnz	r1, .L92
 952:FWLIB/src/stm32f4xx_can.c ****   }
 1101              		.loc 1 952 0
 1102 0002 C368     		ldr	r3, [r0, #12]
 1103 0004 43F02003 		orr	r3, r3, #32
 1104 0008 C360     		str	r3, [r0, #12]
 1105 000a 7047     		bx	lr
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 56


 1106              	.L92:
 957:FWLIB/src/stm32f4xx_can.c ****   }
 1107              		.loc 1 957 0
 1108 000c 0369     		ldr	r3, [r0, #16]
 1109 000e 43F02003 		orr	r3, r3, #32
 1110 0012 0361     		str	r3, [r0, #16]
 1111 0014 7047     		bx	lr
 1112              		.cfi_endproc
 1113              	.LFE134:
 1115 0016 00BF     		.section	.text.CAN_MessagePending,"ax",%progbits
 1116              		.align	2
 1117              		.global	CAN_MessagePending
 1118              		.thumb
 1119              		.thumb_func
 1121              	CAN_MessagePending:
 1122              	.LFB135:
 969:FWLIB/src/stm32f4xx_can.c ****   uint8_t message_pending=0;
 1123              		.loc 1 969 0
 1124              		.cfi_startproc
 1125              		@ args = 0, pretend = 0, frame = 0
 1126              		@ frame_needed = 0, uses_anonymous_args = 0
 1127              		@ link register save eliminated.
 1128              	.LVL64:
 974:FWLIB/src/stm32f4xx_can.c ****   {
 1129              		.loc 1 974 0
 1130 0000 19B9     		cbnz	r1, .L95
 976:FWLIB/src/stm32f4xx_can.c ****   }
 1131              		.loc 1 976 0
 1132 0002 C068     		ldr	r0, [r0, #12]
 1133              	.LVL65:
 1134 0004 00F00300 		and	r0, r0, #3
 1135              	.LVL66:
 1136 0008 7047     		bx	lr
 1137              	.LVL67:
 1138              	.L95:
 978:FWLIB/src/stm32f4xx_can.c ****   {
 1139              		.loc 1 978 0
 1140 000a 0129     		cmp	r1, #1
 1141 000c 03D1     		bne	.L97
 980:FWLIB/src/stm32f4xx_can.c ****   }
 1142              		.loc 1 980 0
 1143 000e 0069     		ldr	r0, [r0, #16]
 1144              	.LVL68:
 1145 0010 00F00300 		and	r0, r0, #3
 1146              	.LVL69:
 1147 0014 7047     		bx	lr
 1148              	.LVL70:
 1149              	.L97:
 984:FWLIB/src/stm32f4xx_can.c ****   }
 1150              		.loc 1 984 0
 1151 0016 0020     		movs	r0, #0
 1152              	.LVL71:
 987:FWLIB/src/stm32f4xx_can.c **** /**
 1153              		.loc 1 987 0
 1154 0018 7047     		bx	lr
 1155              		.cfi_endproc
 1156              	.LFE135:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 57


 1158 001a 00BF     		.section	.text.CAN_OperatingModeRequest,"ax",%progbits
 1159              		.align	2
 1160              		.global	CAN_OperatingModeRequest
 1161              		.thumb
 1162              		.thumb_func
 1164              	CAN_OperatingModeRequest:
 1165              	.LFB136:
1019:FWLIB/src/stm32f4xx_can.c ****   uint8_t status = CAN_ModeStatus_Failed;
 1166              		.loc 1 1019 0
 1167              		.cfi_startproc
 1168              		@ args = 0, pretend = 0, frame = 0
 1169              		@ frame_needed = 0, uses_anonymous_args = 0
 1170              		@ link register save eliminated.
 1171              	.LVL72:
1029:FWLIB/src/stm32f4xx_can.c ****   {
 1172              		.loc 1 1029 0
 1173 0000 B9B9     		cbnz	r1, .L99
1032:FWLIB/src/stm32f4xx_can.c **** 
 1174              		.loc 1 1032 0
 1175 0002 0368     		ldr	r3, [r0]
 1176 0004 23F00303 		bic	r3, r3, #3
 1177 0008 43F00103 		orr	r3, r3, #1
 1178 000c 0360     		str	r3, [r0]
1023:FWLIB/src/stm32f4xx_can.c **** 
 1179              		.loc 1 1023 0
 1180 000e 4FF6FF72 		movw	r2, #65535
1035:FWLIB/src/stm32f4xx_can.c ****     {
 1181              		.loc 1 1035 0
 1182 0012 00E0     		b	.L100
 1183              	.LVL73:
 1184              	.L102:
1037:FWLIB/src/stm32f4xx_can.c ****     }
 1185              		.loc 1 1037 0
 1186 0014 013A     		subs	r2, r2, #1
 1187              	.LVL74:
 1188              	.L100:
1035:FWLIB/src/stm32f4xx_can.c ****     {
 1189              		.loc 1 1035 0
 1190 0016 4368     		ldr	r3, [r0, #4]
 1191 0018 03F00303 		and	r3, r3, #3
 1192 001c 012B     		cmp	r3, #1
 1193 001e 01D0     		beq	.L101
1035:FWLIB/src/stm32f4xx_can.c ****     {
 1194              		.loc 1 1035 0 is_stmt 0 discriminator 1
 1195 0020 002A     		cmp	r2, #0
 1196 0022 F7D1     		bne	.L102
 1197              	.L101:
1039:FWLIB/src/stm32f4xx_can.c ****     {
 1198              		.loc 1 1039 0 is_stmt 1
 1199 0024 4368     		ldr	r3, [r0, #4]
 1200 0026 03F00303 		and	r3, r3, #3
 1201 002a 012B     		cmp	r3, #1
 1202 002c 31D0     		beq	.L111
1041:FWLIB/src/stm32f4xx_can.c ****     }
 1203              		.loc 1 1041 0
 1204 002e 0020     		movs	r0, #0
 1205              	.LVL75:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 58


 1206 0030 7047     		bx	lr
 1207              	.LVL76:
 1208              	.L99:
1048:FWLIB/src/stm32f4xx_can.c ****   {
 1209              		.loc 1 1048 0
 1210 0032 0129     		cmp	r1, #1
 1211 0034 13D1     		bne	.L104
1051:FWLIB/src/stm32f4xx_can.c **** 
 1212              		.loc 1 1051 0
 1213 0036 0368     		ldr	r3, [r0]
 1214 0038 23F00303 		bic	r3, r3, #3
 1215 003c 0360     		str	r3, [r0]
1023:FWLIB/src/stm32f4xx_can.c **** 
 1216              		.loc 1 1023 0
 1217 003e 4FF6FF73 		movw	r3, #65535
1054:FWLIB/src/stm32f4xx_can.c ****     {
 1218              		.loc 1 1054 0
 1219 0042 00E0     		b	.L105
 1220              	.LVL77:
 1221              	.L107:
1056:FWLIB/src/stm32f4xx_can.c ****     }
 1222              		.loc 1 1056 0
 1223 0044 013B     		subs	r3, r3, #1
 1224              	.LVL78:
 1225              	.L105:
1054:FWLIB/src/stm32f4xx_can.c ****     {
 1226              		.loc 1 1054 0
 1227 0046 4268     		ldr	r2, [r0, #4]
 1228 0048 12F0030F 		tst	r2, #3
 1229 004c 01D0     		beq	.L106
1054:FWLIB/src/stm32f4xx_can.c ****     {
 1230              		.loc 1 1054 0 is_stmt 0 discriminator 1
 1231 004e 002B     		cmp	r3, #0
 1232 0050 F8D1     		bne	.L107
 1233              	.L106:
1058:FWLIB/src/stm32f4xx_can.c ****     {
 1234              		.loc 1 1058 0 is_stmt 1
 1235 0052 4368     		ldr	r3, [r0, #4]
 1236              	.LVL79:
 1237 0054 13F0030F 		tst	r3, #3
 1238 0058 1DD0     		beq	.L112
1060:FWLIB/src/stm32f4xx_can.c ****     }
 1239              		.loc 1 1060 0
 1240 005a 0020     		movs	r0, #0
 1241              	.LVL80:
 1242 005c 7047     		bx	lr
 1243              	.LVL81:
 1244              	.L104:
1067:FWLIB/src/stm32f4xx_can.c ****   {
 1245              		.loc 1 1067 0
 1246 005e 0229     		cmp	r1, #2
 1247 0060 1BD1     		bne	.L113
1070:FWLIB/src/stm32f4xx_can.c **** 
 1248              		.loc 1 1070 0
 1249 0062 0368     		ldr	r3, [r0]
 1250 0064 23F00303 		bic	r3, r3, #3
 1251 0068 43F00203 		orr	r3, r3, #2
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 59


 1252 006c 0360     		str	r3, [r0]
1023:FWLIB/src/stm32f4xx_can.c **** 
 1253              		.loc 1 1023 0
 1254 006e 4FF6FF72 		movw	r2, #65535
1073:FWLIB/src/stm32f4xx_can.c ****     {
 1255              		.loc 1 1073 0
 1256 0072 00E0     		b	.L108
 1257              	.LVL82:
 1258              	.L110:
1075:FWLIB/src/stm32f4xx_can.c ****     }
 1259              		.loc 1 1075 0
 1260 0074 013A     		subs	r2, r2, #1
 1261              	.LVL83:
 1262              	.L108:
1073:FWLIB/src/stm32f4xx_can.c ****     {
 1263              		.loc 1 1073 0
 1264 0076 4368     		ldr	r3, [r0, #4]
 1265 0078 03F00303 		and	r3, r3, #3
 1266 007c 022B     		cmp	r3, #2
 1267 007e 01D0     		beq	.L109
1073:FWLIB/src/stm32f4xx_can.c ****     {
 1268              		.loc 1 1073 0 is_stmt 0 discriminator 1
 1269 0080 002A     		cmp	r2, #0
 1270 0082 F7D1     		bne	.L110
 1271              	.L109:
1077:FWLIB/src/stm32f4xx_can.c ****     {
 1272              		.loc 1 1077 0 is_stmt 1
 1273 0084 4368     		ldr	r3, [r0, #4]
 1274 0086 03F00303 		and	r3, r3, #3
 1275 008a 022B     		cmp	r3, #2
 1276 008c 07D0     		beq	.L114
1079:FWLIB/src/stm32f4xx_can.c ****     }
 1277              		.loc 1 1079 0
 1278 008e 0020     		movs	r0, #0
 1279              	.LVL84:
 1280 0090 7047     		bx	lr
 1281              	.LVL85:
 1282              	.L111:
1045:FWLIB/src/stm32f4xx_can.c ****     }
 1283              		.loc 1 1045 0
 1284 0092 0120     		movs	r0, #1
 1285              	.LVL86:
 1286 0094 7047     		bx	lr
 1287              	.LVL87:
 1288              	.L112:
1064:FWLIB/src/stm32f4xx_can.c ****     }
 1289              		.loc 1 1064 0
 1290 0096 0120     		movs	r0, #1
 1291              	.LVL88:
 1292 0098 7047     		bx	lr
 1293              	.LVL89:
 1294              	.L113:
1088:FWLIB/src/stm32f4xx_can.c ****   }
 1295              		.loc 1 1088 0
 1296 009a 0020     		movs	r0, #0
 1297              	.LVL90:
 1298 009c 7047     		bx	lr
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 60


 1299              	.LVL91:
 1300              	.L114:
1083:FWLIB/src/stm32f4xx_can.c ****     }
 1301              		.loc 1 1083 0
 1302 009e 0120     		movs	r0, #1
 1303              	.LVL92:
1092:FWLIB/src/stm32f4xx_can.c **** 
 1304              		.loc 1 1092 0
 1305 00a0 7047     		bx	lr
 1306              		.cfi_endproc
 1307              	.LFE136:
 1309 00a2 00BF     		.section	.text.CAN_Sleep,"ax",%progbits
 1310              		.align	2
 1311              		.global	CAN_Sleep
 1312              		.thumb
 1313              		.thumb_func
 1315              	CAN_Sleep:
 1316              	.LFB137:
1101:FWLIB/src/stm32f4xx_can.c ****   uint8_t sleepstatus = CAN_Sleep_Failed;
 1317              		.loc 1 1101 0
 1318              		.cfi_startproc
 1319              		@ args = 0, pretend = 0, frame = 0
 1320              		@ frame_needed = 0, uses_anonymous_args = 0
 1321              		@ link register save eliminated.
 1322              	.LVL93:
1108:FWLIB/src/stm32f4xx_can.c ****    
 1323              		.loc 1 1108 0
 1324 0000 0368     		ldr	r3, [r0]
 1325 0002 23F00303 		bic	r3, r3, #3
 1326 0006 43F00203 		orr	r3, r3, #2
 1327 000a 0360     		str	r3, [r0]
1111:FWLIB/src/stm32f4xx_can.c ****   {
 1328              		.loc 1 1111 0
 1329 000c 4368     		ldr	r3, [r0, #4]
 1330 000e 03F00303 		and	r3, r3, #3
 1331 0012 022B     		cmp	r3, #2
 1332 0014 01D0     		beq	.L117
1102:FWLIB/src/stm32f4xx_can.c ****   
 1333              		.loc 1 1102 0
 1334 0016 0020     		movs	r0, #0
 1335              	.LVL94:
 1336 0018 7047     		bx	lr
 1337              	.LVL95:
 1338              	.L117:
1114:FWLIB/src/stm32f4xx_can.c ****   }
 1339              		.loc 1 1114 0
 1340 001a 0120     		movs	r0, #1
 1341              	.LVL96:
1118:FWLIB/src/stm32f4xx_can.c **** 
 1342              		.loc 1 1118 0
 1343 001c 7047     		bx	lr
 1344              		.cfi_endproc
 1345              	.LFE137:
 1347 001e 00BF     		.section	.text.CAN_WakeUp,"ax",%progbits
 1348              		.align	2
 1349              		.global	CAN_WakeUp
 1350              		.thumb
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 61


 1351              		.thumb_func
 1353              	CAN_WakeUp:
 1354              	.LFB138:
1127:FWLIB/src/stm32f4xx_can.c ****   uint32_t wait_slak = SLAK_TIMEOUT;
 1355              		.loc 1 1127 0
 1356              		.cfi_startproc
 1357              		@ args = 0, pretend = 0, frame = 0
 1358              		@ frame_needed = 0, uses_anonymous_args = 0
 1359              		@ link register save eliminated.
 1360              	.LVL97:
1135:FWLIB/src/stm32f4xx_can.c ****     
 1361              		.loc 1 1135 0
 1362 0000 0368     		ldr	r3, [r0]
 1363 0002 23F00203 		bic	r3, r3, #2
 1364 0006 0360     		str	r3, [r0]
1128:FWLIB/src/stm32f4xx_can.c ****   uint8_t wakeupstatus = CAN_WakeUp_Failed;
 1365              		.loc 1 1128 0
 1366 0008 4FF6FF73 		movw	r3, #65535
1138:FWLIB/src/stm32f4xx_can.c ****   {
 1367              		.loc 1 1138 0
 1368 000c 00E0     		b	.L119
 1369              	.LVL98:
 1370              	.L121:
1140:FWLIB/src/stm32f4xx_can.c ****   }
 1371              		.loc 1 1140 0
 1372 000e 013B     		subs	r3, r3, #1
 1373              	.LVL99:
 1374              	.L119:
1138:FWLIB/src/stm32f4xx_can.c ****   {
 1375              		.loc 1 1138 0
 1376 0010 4268     		ldr	r2, [r0, #4]
 1377 0012 12F0020F 		tst	r2, #2
 1378 0016 01D0     		beq	.L120
1138:FWLIB/src/stm32f4xx_can.c ****   {
 1379              		.loc 1 1138 0 is_stmt 0 discriminator 1
 1380 0018 002B     		cmp	r3, #0
 1381 001a F8D1     		bne	.L121
 1382              	.L120:
1142:FWLIB/src/stm32f4xx_can.c ****   {
 1383              		.loc 1 1142 0 is_stmt 1
 1384 001c 4368     		ldr	r3, [r0, #4]
 1385              	.LVL100:
 1386 001e 13F0020F 		tst	r3, #2
 1387 0022 01D0     		beq	.L123
1129:FWLIB/src/stm32f4xx_can.c ****   
 1388              		.loc 1 1129 0
 1389 0024 0020     		movs	r0, #0
 1390              	.LVL101:
 1391 0026 7047     		bx	lr
 1392              	.LVL102:
 1393              	.L123:
1145:FWLIB/src/stm32f4xx_can.c ****   }
 1394              		.loc 1 1145 0
 1395 0028 0120     		movs	r0, #1
 1396              	.LVL103:
1149:FWLIB/src/stm32f4xx_can.c **** /**
 1397              		.loc 1 1149 0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 62


 1398 002a 7047     		bx	lr
 1399              		.cfi_endproc
 1400              	.LFE138:
 1402              		.section	.text.CAN_GetLastErrorCode,"ax",%progbits
 1403              		.align	2
 1404              		.global	CAN_GetLastErrorCode
 1405              		.thumb
 1406              		.thumb_func
 1408              	CAN_GetLastErrorCode:
 1409              	.LFB139:
1189:FWLIB/src/stm32f4xx_can.c ****   uint8_t errorcode=0;
 1410              		.loc 1 1189 0
 1411              		.cfi_startproc
 1412              		@ args = 0, pretend = 0, frame = 0
 1413              		@ frame_needed = 0, uses_anonymous_args = 0
 1414              		@ link register save eliminated.
 1415              	.LVL104:
1196:FWLIB/src/stm32f4xx_can.c ****   
 1416              		.loc 1 1196 0
 1417 0000 8069     		ldr	r0, [r0, #24]
 1418              	.LVL105:
1200:FWLIB/src/stm32f4xx_can.c **** 
 1419              		.loc 1 1200 0
 1420 0002 00F07000 		and	r0, r0, #112
 1421              	.LVL106:
 1422 0006 7047     		bx	lr
 1423              		.cfi_endproc
 1424              	.LFE139:
 1426              		.section	.text.CAN_GetReceiveErrorCounter,"ax",%progbits
 1427              		.align	2
 1428              		.global	CAN_GetReceiveErrorCounter
 1429              		.thumb
 1430              		.thumb_func
 1432              	CAN_GetReceiveErrorCounter:
 1433              	.LFB140:
1215:FWLIB/src/stm32f4xx_can.c ****   uint8_t counter=0;
 1434              		.loc 1 1215 0
 1435              		.cfi_startproc
 1436              		@ args = 0, pretend = 0, frame = 0
 1437              		@ frame_needed = 0, uses_anonymous_args = 0
 1438              		@ link register save eliminated.
 1439              	.LVL107:
1222:FWLIB/src/stm32f4xx_can.c ****   
 1440              		.loc 1 1222 0
 1441 0000 8069     		ldr	r0, [r0, #24]
 1442              	.LVL108:
1226:FWLIB/src/stm32f4xx_can.c **** 
 1443              		.loc 1 1226 0
 1444 0002 000E     		lsrs	r0, r0, #24
 1445              	.LVL109:
 1446 0004 7047     		bx	lr
 1447              		.cfi_endproc
 1448              	.LFE140:
 1450 0006 00BF     		.section	.text.CAN_GetLSBTransmitErrorCounter,"ax",%progbits
 1451              		.align	2
 1452              		.global	CAN_GetLSBTransmitErrorCounter
 1453              		.thumb
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 63


 1454              		.thumb_func
 1456              	CAN_GetLSBTransmitErrorCounter:
 1457              	.LFB141:
1236:FWLIB/src/stm32f4xx_can.c ****   uint8_t counter=0;
 1458              		.loc 1 1236 0
 1459              		.cfi_startproc
 1460              		@ args = 0, pretend = 0, frame = 0
 1461              		@ frame_needed = 0, uses_anonymous_args = 0
 1462              		@ link register save eliminated.
 1463              	.LVL110:
1243:FWLIB/src/stm32f4xx_can.c ****   
 1464              		.loc 1 1243 0
 1465 0000 8069     		ldr	r0, [r0, #24]
 1466              	.LVL111:
1247:FWLIB/src/stm32f4xx_can.c **** /**
 1467              		.loc 1 1247 0
 1468 0002 C0F30740 		ubfx	r0, r0, #16, #8
 1469              	.LVL112:
 1470 0006 7047     		bx	lr
 1471              		.cfi_endproc
 1472              	.LFE141:
 1474              		.section	.text.CAN_ITConfig,"ax",%progbits
 1475              		.align	2
 1476              		.global	CAN_ITConfig
 1477              		.thumb
 1478              		.thumb_func
 1480              	CAN_ITConfig:
 1481              	.LFB142:
1442:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 1482              		.loc 1 1442 0
 1483              		.cfi_startproc
 1484              		@ args = 0, pretend = 0, frame = 0
 1485              		@ frame_needed = 0, uses_anonymous_args = 0
 1486              		@ link register save eliminated.
 1487              	.LVL113:
1448:FWLIB/src/stm32f4xx_can.c ****   {
 1488              		.loc 1 1448 0
 1489 0000 1AB1     		cbz	r2, .L128
1451:FWLIB/src/stm32f4xx_can.c ****   }
 1490              		.loc 1 1451 0
 1491 0002 4369     		ldr	r3, [r0, #20]
 1492 0004 1943     		orrs	r1, r1, r3
 1493              	.LVL114:
 1494 0006 4161     		str	r1, [r0, #20]
 1495 0008 7047     		bx	lr
 1496              	.LVL115:
 1497              	.L128:
1456:FWLIB/src/stm32f4xx_can.c ****   }
 1498              		.loc 1 1456 0
 1499 000a 4369     		ldr	r3, [r0, #20]
 1500 000c 23EA0101 		bic	r1, r3, r1
 1501              	.LVL116:
 1502 0010 4161     		str	r1, [r0, #20]
 1503 0012 7047     		bx	lr
 1504              		.cfi_endproc
 1505              	.LFE142:
 1507              		.section	.text.CAN_GetFlagStatus,"ax",%progbits
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 64


 1508              		.align	2
 1509              		.global	CAN_GetFlagStatus
 1510              		.thumb
 1511              		.thumb_func
 1513              	CAN_GetFlagStatus:
 1514              	.LFB143:
1483:FWLIB/src/stm32f4xx_can.c ****   FlagStatus bitstatus = RESET;
 1515              		.loc 1 1483 0
 1516              		.cfi_startproc
 1517              		@ args = 0, pretend = 0, frame = 0
 1518              		@ frame_needed = 0, uses_anonymous_args = 0
 1519              		@ link register save eliminated.
 1520              	.LVL117:
1491:FWLIB/src/stm32f4xx_can.c ****   { 
 1521              		.loc 1 1491 0
 1522 0000 11F4700F 		tst	r1, #15728640
 1523 0004 06D0     		beq	.L131
1494:FWLIB/src/stm32f4xx_can.c ****     { 
 1524              		.loc 1 1494 0
 1525 0006 8369     		ldr	r3, [r0, #24]
 1526 0008 1940     		ands	r1, r1, r3
 1527              	.LVL118:
 1528 000a C1F31301 		ubfx	r1, r1, #0, #20
 1529 000e 31B3     		cbz	r1, .L136
1497:FWLIB/src/stm32f4xx_can.c ****     }
 1530              		.loc 1 1497 0
 1531 0010 0120     		movs	r0, #1
 1532              	.LVL119:
 1533 0012 7047     		bx	lr
 1534              	.LVL120:
 1535              	.L131:
1505:FWLIB/src/stm32f4xx_can.c ****   { 
 1536              		.loc 1 1505 0
 1537 0014 11F0807F 		tst	r1, #16777216
 1538 0018 06D0     		beq	.L133
1508:FWLIB/src/stm32f4xx_can.c ****     { 
 1539              		.loc 1 1508 0
 1540 001a 4368     		ldr	r3, [r0, #4]
 1541 001c 1940     		ands	r1, r1, r3
 1542              	.LVL121:
 1543 001e C1F31301 		ubfx	r1, r1, #0, #20
 1544 0022 F1B1     		cbz	r1, .L137
1511:FWLIB/src/stm32f4xx_can.c ****     }
 1545              		.loc 1 1511 0
 1546 0024 0120     		movs	r0, #1
 1547              	.LVL122:
 1548 0026 7047     		bx	lr
 1549              	.LVL123:
 1550              	.L133:
1519:FWLIB/src/stm32f4xx_can.c ****   { 
 1551              		.loc 1 1519 0
 1552 0028 11F0006F 		tst	r1, #134217728
 1553 002c 06D0     		beq	.L134
1522:FWLIB/src/stm32f4xx_can.c ****     { 
 1554              		.loc 1 1522 0
 1555 002e 8368     		ldr	r3, [r0, #8]
 1556 0030 1940     		ands	r1, r1, r3
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 65


 1557              	.LVL124:
 1558 0032 C1F31301 		ubfx	r1, r1, #0, #20
 1559 0036 B1B1     		cbz	r1, .L138
1525:FWLIB/src/stm32f4xx_can.c ****     }
 1560              		.loc 1 1525 0
 1561 0038 0120     		movs	r0, #1
 1562              	.LVL125:
 1563 003a 7047     		bx	lr
 1564              	.LVL126:
 1565              	.L134:
1533:FWLIB/src/stm32f4xx_can.c ****   { 
 1566              		.loc 1 1533 0
 1567 003c 11F0007F 		tst	r1, #33554432
 1568 0040 06D0     		beq	.L135
1536:FWLIB/src/stm32f4xx_can.c ****     { 
 1569              		.loc 1 1536 0
 1570 0042 C368     		ldr	r3, [r0, #12]
 1571 0044 1940     		ands	r1, r1, r3
 1572              	.LVL127:
 1573 0046 C1F31301 		ubfx	r1, r1, #0, #20
 1574 004a 71B1     		cbz	r1, .L139
1539:FWLIB/src/stm32f4xx_can.c ****     }
 1575              		.loc 1 1539 0
 1576 004c 0120     		movs	r0, #1
 1577              	.LVL128:
 1578 004e 7047     		bx	lr
 1579              	.LVL129:
 1580              	.L135:
1550:FWLIB/src/stm32f4xx_can.c ****     { 
 1581              		.loc 1 1550 0
 1582 0050 0369     		ldr	r3, [r0, #16]
 1583 0052 1940     		ands	r1, r1, r3
 1584              	.LVL130:
 1585 0054 C1F31301 		ubfx	r1, r1, #0, #20
 1586 0058 49B1     		cbz	r1, .L140
1553:FWLIB/src/stm32f4xx_can.c ****     }
 1587              		.loc 1 1553 0
 1588 005a 0120     		movs	r0, #1
 1589              	.LVL131:
 1590 005c 7047     		bx	lr
 1591              	.LVL132:
 1592              	.L136:
1502:FWLIB/src/stm32f4xx_can.c ****     }
 1593              		.loc 1 1502 0
 1594 005e 0020     		movs	r0, #0
 1595              	.LVL133:
 1596 0060 7047     		bx	lr
 1597              	.LVL134:
 1598              	.L137:
1516:FWLIB/src/stm32f4xx_can.c ****     }
 1599              		.loc 1 1516 0
 1600 0062 0020     		movs	r0, #0
 1601              	.LVL135:
 1602 0064 7047     		bx	lr
 1603              	.LVL136:
 1604              	.L138:
1530:FWLIB/src/stm32f4xx_can.c ****     }
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 66


 1605              		.loc 1 1530 0
 1606 0066 0020     		movs	r0, #0
 1607              	.LVL137:
 1608 0068 7047     		bx	lr
 1609              	.LVL138:
 1610              	.L139:
1544:FWLIB/src/stm32f4xx_can.c ****     }
 1611              		.loc 1 1544 0
 1612 006a 0020     		movs	r0, #0
 1613              	.LVL139:
 1614 006c 7047     		bx	lr
 1615              	.LVL140:
 1616              	.L140:
1558:FWLIB/src/stm32f4xx_can.c ****     }
 1617              		.loc 1 1558 0
 1618 006e 0020     		movs	r0, #0
 1619              	.LVL141:
1563:FWLIB/src/stm32f4xx_can.c **** 
 1620              		.loc 1 1563 0
 1621 0070 7047     		bx	lr
 1622              		.cfi_endproc
 1623              	.LFE143:
 1625 0072 00BF     		.section	.text.CAN_ClearFlag,"ax",%progbits
 1626              		.align	2
 1627              		.global	CAN_ClearFlag
 1628              		.thumb
 1629              		.thumb_func
 1631              	CAN_ClearFlag:
 1632              	.LFB144:
1584:FWLIB/src/stm32f4xx_can.c ****   uint32_t flagtmp=0;
 1633              		.loc 1 1584 0
 1634              		.cfi_startproc
 1635              		@ args = 0, pretend = 0, frame = 0
 1636              		@ frame_needed = 0, uses_anonymous_args = 0
 1637              		@ link register save eliminated.
 1638              	.LVL142:
1590:FWLIB/src/stm32f4xx_can.c ****   {
 1639              		.loc 1 1590 0
 1640 0000 0C4B     		ldr	r3, .L147
 1641 0002 9942     		cmp	r1, r3
 1642 0004 02D1     		bne	.L142
1593:FWLIB/src/stm32f4xx_can.c ****   }
 1643              		.loc 1 1593 0
 1644 0006 0023     		movs	r3, #0
 1645 0008 8361     		str	r3, [r0, #24]
 1646 000a 7047     		bx	lr
 1647              	.L142:
1597:FWLIB/src/stm32f4xx_can.c **** 
 1648              		.loc 1 1597 0
 1649 000c C1F31303 		ubfx	r3, r1, #0, #20
 1650              	.LVL143:
1599:FWLIB/src/stm32f4xx_can.c ****     {
 1651              		.loc 1 1599 0
 1652 0010 11F0007F 		tst	r1, #33554432
 1653 0014 01D0     		beq	.L144
1602:FWLIB/src/stm32f4xx_can.c ****     }
 1654              		.loc 1 1602 0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 67


 1655 0016 C360     		str	r3, [r0, #12]
 1656 0018 7047     		bx	lr
 1657              	.L144:
1604:FWLIB/src/stm32f4xx_can.c ****     {
 1658              		.loc 1 1604 0
 1659 001a 11F0806F 		tst	r1, #67108864
 1660 001e 01D0     		beq	.L145
1607:FWLIB/src/stm32f4xx_can.c ****     }
 1661              		.loc 1 1607 0
 1662 0020 0361     		str	r3, [r0, #16]
 1663 0022 7047     		bx	lr
 1664              	.L145:
1609:FWLIB/src/stm32f4xx_can.c ****     {
 1665              		.loc 1 1609 0
 1666 0024 11F0006F 		tst	r1, #134217728
 1667 0028 01D0     		beq	.L146
1612:FWLIB/src/stm32f4xx_can.c ****     }
 1668              		.loc 1 1612 0
 1669 002a 8360     		str	r3, [r0, #8]
 1670 002c 7047     		bx	lr
 1671              	.L146:
1617:FWLIB/src/stm32f4xx_can.c ****     }
 1672              		.loc 1 1617 0
 1673 002e 4360     		str	r3, [r0, #4]
 1674 0030 7047     		bx	lr
 1675              	.L148:
 1676 0032 00BF     		.align	2
 1677              	.L147:
 1678 0034 7000F030 		.word	821035120
 1679              		.cfi_endproc
 1680              	.LFE144:
 1682              		.section	.text.CAN_GetITStatus,"ax",%progbits
 1683              		.align	2
 1684              		.global	CAN_GetITStatus
 1685              		.thumb
 1686              		.thumb_func
 1688              	CAN_GetITStatus:
 1689              	.LFB145:
1645:FWLIB/src/stm32f4xx_can.c ****   ITStatus itstatus = RESET;
 1690              		.loc 1 1645 0
 1691              		.cfi_startproc
 1692              		@ args = 0, pretend = 0, frame = 0
 1693              		@ frame_needed = 0, uses_anonymous_args = 0
 1694              	.LVL144:
 1695 0000 08B5     		push	{r3, lr}
 1696              	.LCFI7:
 1697              		.cfi_def_cfa_offset 8
 1698              		.cfi_offset 3, -8
 1699              		.cfi_offset 14, -4
 1700              	.LVL145:
1652:FWLIB/src/stm32f4xx_can.c ****  {
 1701              		.loc 1 1652 0
 1702 0002 4369     		ldr	r3, [r0, #20]
 1703 0004 0B42     		tst	r3, r1
 1704 0006 6FD0     		beq	.L168
1655:FWLIB/src/stm32f4xx_can.c ****     {
 1705              		.loc 1 1655 0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 68


 1706 0008 4029     		cmp	r1, #64
 1707 000a 45D0     		beq	.L151
 1708 000c 0ED8     		bhi	.L152
 1709 000e 0429     		cmp	r1, #4
 1710 0010 2ED0     		beq	.L153
 1711 0012 04D8     		bhi	.L154
 1712 0014 0129     		cmp	r1, #1
 1713 0016 21D0     		beq	.L155
 1714 0018 0229     		cmp	r1, #2
 1715 001a 24D0     		beq	.L156
 1716 001c 66E0     		b	.L169
 1717              	.L154:
 1718 001e 1029     		cmp	r1, #16
 1719 0020 30D0     		beq	.L157
 1720 0022 2029     		cmp	r1, #32
 1721 0024 33D0     		beq	.L158
 1722 0026 0829     		cmp	r1, #8
 1723 0028 60D1     		bne	.L169
 1724 002a 26E0     		b	.L159
 1725              	.L152:
 1726 002c B1F5006F 		cmp	r1, #2048
 1727 0030 50D0     		beq	.L160
 1728 0032 09D8     		bhi	.L161
 1729 0034 B1F5007F 		cmp	r1, #512
 1730 0038 42D0     		beq	.L162
 1731 003a B1F5806F 		cmp	r1, #1024
 1732 003e 44D0     		beq	.L163
 1733 0040 B1F5807F 		cmp	r1, #256
 1734 0044 52D1     		bne	.L169
 1735 0046 36E0     		b	.L164
 1736              	.L161:
 1737 0048 B1F5803F 		cmp	r1, #65536
 1738 004c 29D0     		beq	.L165
 1739 004e B1F5003F 		cmp	r1, #131072
 1740 0052 2BD0     		beq	.L166
 1741 0054 B1F5004F 		cmp	r1, #32768
 1742 0058 48D1     		bne	.L169
 1743 005a 40E0     		b	.L167
 1744              	.L155:
1659:FWLIB/src/stm32f4xx_can.c ****         break;
 1745              		.loc 1 1659 0
 1746 005c 8068     		ldr	r0, [r0, #8]
 1747              	.LVL146:
 1748 005e 2449     		ldr	r1, .L171
 1749              	.LVL147:
 1750 0060 FFF7FEFF 		bl	CheckITStatus
 1751              	.LVL148:
1660:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FMP0:
 1752              		.loc 1 1660 0
 1753 0064 08BD     		pop	{r3, pc}
 1754              	.LVL149:
 1755              	.L156:
1663:FWLIB/src/stm32f4xx_can.c ****         break;
 1756              		.loc 1 1663 0
 1757 0066 C068     		ldr	r0, [r0, #12]
 1758              	.LVL150:
 1759 0068 0321     		movs	r1, #3
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 69


 1760              	.LVL151:
 1761 006a FFF7FEFF 		bl	CheckITStatus
 1762              	.LVL152:
1664:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FF0:
 1763              		.loc 1 1664 0
 1764 006e 08BD     		pop	{r3, pc}
 1765              	.LVL153:
 1766              	.L153:
1667:FWLIB/src/stm32f4xx_can.c ****         break;
 1767              		.loc 1 1667 0
 1768 0070 C068     		ldr	r0, [r0, #12]
 1769              	.LVL154:
 1770 0072 0821     		movs	r1, #8
 1771              	.LVL155:
 1772 0074 FFF7FEFF 		bl	CheckITStatus
 1773              	.LVL156:
1668:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FOV0:
 1774              		.loc 1 1668 0
 1775 0078 08BD     		pop	{r3, pc}
 1776              	.LVL157:
 1777              	.L159:
1671:FWLIB/src/stm32f4xx_can.c ****         break;
 1778              		.loc 1 1671 0
 1779 007a C068     		ldr	r0, [r0, #12]
 1780              	.LVL158:
 1781 007c 1021     		movs	r1, #16
 1782              	.LVL159:
 1783 007e FFF7FEFF 		bl	CheckITStatus
 1784              	.LVL160:
1672:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FMP1:
 1785              		.loc 1 1672 0
 1786 0082 08BD     		pop	{r3, pc}
 1787              	.LVL161:
 1788              	.L157:
1675:FWLIB/src/stm32f4xx_can.c ****         break;
 1789              		.loc 1 1675 0
 1790 0084 0069     		ldr	r0, [r0, #16]
 1791              	.LVL162:
 1792 0086 0321     		movs	r1, #3
 1793              	.LVL163:
 1794 0088 FFF7FEFF 		bl	CheckITStatus
 1795              	.LVL164:
1676:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FF1:
 1796              		.loc 1 1676 0
 1797 008c 08BD     		pop	{r3, pc}
 1798              	.LVL165:
 1799              	.L158:
1679:FWLIB/src/stm32f4xx_can.c ****         break;
 1800              		.loc 1 1679 0
 1801 008e 0069     		ldr	r0, [r0, #16]
 1802              	.LVL166:
 1803 0090 0821     		movs	r1, #8
 1804              	.LVL167:
 1805 0092 FFF7FEFF 		bl	CheckITStatus
 1806              	.LVL168:
1680:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FOV1:
 1807              		.loc 1 1680 0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 70


 1808 0096 08BD     		pop	{r3, pc}
 1809              	.LVL169:
 1810              	.L151:
1683:FWLIB/src/stm32f4xx_can.c ****         break;
 1811              		.loc 1 1683 0
 1812 0098 0069     		ldr	r0, [r0, #16]
 1813              	.LVL170:
 1814 009a 1021     		movs	r1, #16
 1815              	.LVL171:
 1816 009c FFF7FEFF 		bl	CheckITStatus
 1817              	.LVL172:
1684:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_WKU:
 1818              		.loc 1 1684 0
 1819 00a0 08BD     		pop	{r3, pc}
 1820              	.LVL173:
 1821              	.L165:
1687:FWLIB/src/stm32f4xx_can.c ****         break;
 1822              		.loc 1 1687 0
 1823 00a2 4068     		ldr	r0, [r0, #4]
 1824              	.LVL174:
 1825 00a4 0821     		movs	r1, #8
 1826              	.LVL175:
 1827 00a6 FFF7FEFF 		bl	CheckITStatus
 1828              	.LVL176:
1688:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_SLK:
 1829              		.loc 1 1688 0
 1830 00aa 08BD     		pop	{r3, pc}
 1831              	.LVL177:
 1832              	.L166:
1691:FWLIB/src/stm32f4xx_can.c ****         break;
 1833              		.loc 1 1691 0
 1834 00ac 4068     		ldr	r0, [r0, #4]
 1835              	.LVL178:
 1836 00ae 1021     		movs	r1, #16
 1837              	.LVL179:
 1838 00b0 FFF7FEFF 		bl	CheckITStatus
 1839              	.LVL180:
1692:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_EWG:
 1840              		.loc 1 1692 0
 1841 00b4 08BD     		pop	{r3, pc}
 1842              	.LVL181:
 1843              	.L164:
1695:FWLIB/src/stm32f4xx_can.c ****         break;
 1844              		.loc 1 1695 0
 1845 00b6 8069     		ldr	r0, [r0, #24]
 1846              	.LVL182:
 1847 00b8 0121     		movs	r1, #1
 1848              	.LVL183:
 1849 00ba FFF7FEFF 		bl	CheckITStatus
 1850              	.LVL184:
1696:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_EPV:
 1851              		.loc 1 1696 0
 1852 00be 08BD     		pop	{r3, pc}
 1853              	.LVL185:
 1854              	.L162:
1699:FWLIB/src/stm32f4xx_can.c ****         break;
 1855              		.loc 1 1699 0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 71


 1856 00c0 8069     		ldr	r0, [r0, #24]
 1857              	.LVL186:
 1858 00c2 0221     		movs	r1, #2
 1859              	.LVL187:
 1860 00c4 FFF7FEFF 		bl	CheckITStatus
 1861              	.LVL188:
1700:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_BOF:
 1862              		.loc 1 1700 0
 1863 00c8 08BD     		pop	{r3, pc}
 1864              	.LVL189:
 1865              	.L163:
1703:FWLIB/src/stm32f4xx_can.c ****         break;
 1866              		.loc 1 1703 0
 1867 00ca 8069     		ldr	r0, [r0, #24]
 1868              	.LVL190:
 1869 00cc 0421     		movs	r1, #4
 1870              	.LVL191:
 1871 00ce FFF7FEFF 		bl	CheckITStatus
 1872              	.LVL192:
1704:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_LEC:
 1873              		.loc 1 1704 0
 1874 00d2 08BD     		pop	{r3, pc}
 1875              	.LVL193:
 1876              	.L160:
1707:FWLIB/src/stm32f4xx_can.c ****         break;
 1877              		.loc 1 1707 0
 1878 00d4 8069     		ldr	r0, [r0, #24]
 1879              	.LVL194:
 1880 00d6 7021     		movs	r1, #112
 1881              	.LVL195:
 1882 00d8 FFF7FEFF 		bl	CheckITStatus
 1883              	.LVL196:
1708:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_ERR:
 1884              		.loc 1 1708 0
 1885 00dc 08BD     		pop	{r3, pc}
 1886              	.LVL197:
 1887              	.L167:
1711:FWLIB/src/stm32f4xx_can.c ****         break;
 1888              		.loc 1 1711 0
 1889 00de 4068     		ldr	r0, [r0, #4]
 1890              	.LVL198:
 1891 00e0 0421     		movs	r1, #4
 1892              	.LVL199:
 1893 00e2 FFF7FEFF 		bl	CheckITStatus
 1894              	.LVL200:
1712:FWLIB/src/stm32f4xx_can.c ****       default:
 1895              		.loc 1 1712 0
 1896 00e6 08BD     		pop	{r3, pc}
 1897              	.LVL201:
 1898              	.L168:
1722:FWLIB/src/stm32f4xx_can.c ****   }
 1899              		.loc 1 1722 0
 1900 00e8 0020     		movs	r0, #0
 1901              	.LVL202:
 1902 00ea 08BD     		pop	{r3, pc}
 1903              	.LVL203:
 1904              	.L169:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 72


1715:FWLIB/src/stm32f4xx_can.c ****         break;
 1905              		.loc 1 1715 0
 1906 00ec 0020     		movs	r0, #0
 1907              	.LVL204:
1727:FWLIB/src/stm32f4xx_can.c **** 
 1908              		.loc 1 1727 0
 1909 00ee 08BD     		pop	{r3, pc}
 1910              	.L172:
 1911              		.align	2
 1912              	.L171:
 1913 00f0 01010100 		.word	65793
 1914              		.cfi_endproc
 1915              	.LFE145:
 1917              		.section	.text.CAN_ClearITPendingBit,"ax",%progbits
 1918              		.align	2
 1919              		.global	CAN_ClearITPendingBit
 1920              		.thumb
 1921              		.thumb_func
 1923              	CAN_ClearITPendingBit:
 1924              	.LFB146:
1750:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 1925              		.loc 1 1750 0
 1926              		.cfi_startproc
 1927              		@ args = 0, pretend = 0, frame = 0
 1928              		@ frame_needed = 0, uses_anonymous_args = 0
 1929              		@ link register save eliminated.
 1930              	.LVL205:
1755:FWLIB/src/stm32f4xx_can.c ****   {
 1931              		.loc 1 1755 0
 1932 0000 B1F5807F 		cmp	r1, #256
 1933 0004 37D0     		beq	.L175
 1934 0006 0CD8     		bhi	.L176
 1935 0008 0829     		cmp	r1, #8
 1936 000a 25D0     		beq	.L177
 1937 000c 04D8     		bhi	.L178
 1938 000e 0129     		cmp	r1, #1
 1939 0010 1CD0     		beq	.L179
 1940 0012 0429     		cmp	r1, #4
 1941 0014 1DD0     		beq	.L180
 1942 0016 7047     		bx	lr
 1943              	.L178:
 1944 0018 2029     		cmp	r1, #32
 1945 001a 20D0     		beq	.L181
 1946 001c 4029     		cmp	r1, #64
 1947 001e 21D0     		beq	.L182
 1948 0020 7047     		bx	lr
 1949              	.L176:
 1950 0022 B1F5006F 		cmp	r1, #2048
 1951 0026 2FD0     		beq	.L183
 1952 0028 06D8     		bhi	.L184
 1953 002a B1F5007F 		cmp	r1, #512
 1954 002e 25D0     		beq	.L185
 1955 0030 B1F5806F 		cmp	r1, #1024
 1956 0034 25D0     		beq	.L186
 1957 0036 7047     		bx	lr
 1958              	.L184:
 1959 0038 B1F5803F 		cmp	r1, #65536
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 73


 1960 003c 15D0     		beq	.L187
 1961 003e B1F5003F 		cmp	r1, #131072
 1962 0042 15D0     		beq	.L188
 1963 0044 B1F5004F 		cmp	r1, #32768
 1964 0048 27D1     		bne	.L173
 1965 004a 22E0     		b	.L189
 1966              	.L179:
1759:FWLIB/src/stm32f4xx_can.c ****       break;
 1967              		.loc 1 1759 0
 1968 004c 134B     		ldr	r3, .L190
 1969 004e 8360     		str	r3, [r0, #8]
1760:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FF0:
 1970              		.loc 1 1760 0
 1971 0050 7047     		bx	lr
 1972              	.L180:
1763:FWLIB/src/stm32f4xx_can.c ****       break;
 1973              		.loc 1 1763 0
 1974 0052 0823     		movs	r3, #8
 1975 0054 C360     		str	r3, [r0, #12]
1764:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FOV0:
 1976              		.loc 1 1764 0
 1977 0056 7047     		bx	lr
 1978              	.L177:
1767:FWLIB/src/stm32f4xx_can.c ****       break;
 1979              		.loc 1 1767 0
 1980 0058 1023     		movs	r3, #16
 1981 005a C360     		str	r3, [r0, #12]
1768:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FF1:
 1982              		.loc 1 1768 0
 1983 005c 7047     		bx	lr
 1984              	.L181:
1771:FWLIB/src/stm32f4xx_can.c ****       break;
 1985              		.loc 1 1771 0
 1986 005e 0823     		movs	r3, #8
 1987 0060 0361     		str	r3, [r0, #16]
1772:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FOV1:
 1988              		.loc 1 1772 0
 1989 0062 7047     		bx	lr
 1990              	.L182:
1775:FWLIB/src/stm32f4xx_can.c ****       break;
 1991              		.loc 1 1775 0
 1992 0064 1023     		movs	r3, #16
 1993 0066 0361     		str	r3, [r0, #16]
1776:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_WKU:
 1994              		.loc 1 1776 0
 1995 0068 7047     		bx	lr
 1996              	.L187:
1779:FWLIB/src/stm32f4xx_can.c ****       break;
 1997              		.loc 1 1779 0
 1998 006a 0823     		movs	r3, #8
 1999 006c 4360     		str	r3, [r0, #4]
1780:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_SLK:
 2000              		.loc 1 1780 0
 2001 006e 7047     		bx	lr
 2002              	.L188:
1783:FWLIB/src/stm32f4xx_can.c ****       break;
 2003              		.loc 1 1783 0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 74


 2004 0070 1023     		movs	r3, #16
 2005 0072 4360     		str	r3, [r0, #4]
1784:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_EWG:
 2006              		.loc 1 1784 0
 2007 0074 7047     		bx	lr
 2008              	.L175:
1787:FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/ 
 2009              		.loc 1 1787 0
 2010 0076 0423     		movs	r3, #4
 2011 0078 4360     		str	r3, [r0, #4]
1789:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_EPV:
 2012              		.loc 1 1789 0
 2013 007a 7047     		bx	lr
 2014              	.L185:
1792:FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
 2015              		.loc 1 1792 0
 2016 007c 0423     		movs	r3, #4
 2017 007e 4360     		str	r3, [r0, #4]
1794:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_BOF:
 2018              		.loc 1 1794 0
 2019 0080 7047     		bx	lr
 2020              	.L186:
1797:FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
 2021              		.loc 1 1797 0
 2022 0082 0423     		movs	r3, #4
 2023 0084 4360     		str	r3, [r0, #4]
1799:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_LEC:
 2024              		.loc 1 1799 0
 2025 0086 7047     		bx	lr
 2026              	.L183:
1802:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
 2027              		.loc 1 1802 0
 2028 0088 0023     		movs	r3, #0
 2029 008a 8361     		str	r3, [r0, #24]
1804:FWLIB/src/stm32f4xx_can.c ****       break;
 2030              		.loc 1 1804 0
 2031 008c 0423     		movs	r3, #4
 2032 008e 4360     		str	r3, [r0, #4]
1805:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_ERR:
 2033              		.loc 1 1805 0
 2034 0090 7047     		bx	lr
 2035              	.L189:
1808:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
 2036              		.loc 1 1808 0
 2037 0092 0023     		movs	r3, #0
 2038 0094 8361     		str	r3, [r0, #24]
1810:FWLIB/src/stm32f4xx_can.c ****        /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
 2039              		.loc 1 1810 0
 2040 0096 0423     		movs	r3, #4
 2041 0098 4360     		str	r3, [r0, #4]
 2042              	.L173:
 2043 009a 7047     		bx	lr
 2044              	.L191:
 2045              		.align	2
 2046              	.L190:
 2047 009c 01010100 		.word	65793
 2048              		.cfi_endproc
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 75


 2049              	.LFE146:
 2051              		.text
 2052              	.Letext0:
 2053              		.file 2 "d:\\gcc_arm\\5.4 2016q3\\arm-none-eabi\\include\\machine\\_default_types.h"
 2054              		.file 3 "d:\\gcc_arm\\5.4 2016q3\\arm-none-eabi\\include\\sys\\_stdint.h"
 2055              		.file 4 "USER/stm32f4xx.h"
 2056              		.file 5 "FWLIB/inc/stm32f4xx_can.h"
 2057              		.file 6 "F4_CORE/core_cm4.h"
 2058              		.file 7 "FWLIB/inc/stm32f4xx_rcc.h"
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 76


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_can.c
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:22     .text.CheckITStatus:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:26     .text.CheckITStatus:00000000 CheckITStatus
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:53     .text.CAN_DeInit:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:58     .text.CAN_DeInit:00000000 CAN_DeInit
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:103    .text.CAN_DeInit:00000034 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:108    .text.CAN_Init:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:113    .text.CAN_Init:00000000 CAN_Init
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:315    .text.CAN_FilterInit:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:320    .text.CAN_FilterInit:00000000 CAN_FilterInit
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:477    .text.CAN_FilterInit:000000f0 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:482    .text.CAN_StructInit:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:487    .text.CAN_StructInit:00000000 CAN_StructInit
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:526    .text.CAN_SlaveStartBank:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:531    .text.CAN_SlaveStartBank:00000000 CAN_SlaveStartBank
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:562    .text.CAN_SlaveStartBank:00000038 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:567    .text.CAN_DBGFreeze:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:572    .text.CAN_DBGFreeze:00000000 CAN_DBGFreeze
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:597    .text.CAN_TTComModeCmd:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:602    .text.CAN_TTComModeCmd:00000000 CAN_TTComModeCmd
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:651    .text.CAN_Transmit:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:656    .text.CAN_Transmit:00000000 CAN_Transmit
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:818    .text.CAN_TransmitStatus:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:823    .text.CAN_TransmitStatus:00000000 CAN_TransmitStatus
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:925    .text.CAN_TransmitStatus:00000068 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:932    .text.CAN_CancelTransmit:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:937    .text.CAN_CancelTransmit:00000000 CAN_CancelTransmit
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:976    .text.CAN_Receive:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:981    .text.CAN_Receive:00000000 CAN_Receive
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:1086   .text.CAN_FIFORelease:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:1091   .text.CAN_FIFORelease:00000000 CAN_FIFORelease
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:1116   .text.CAN_MessagePending:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:1121   .text.CAN_MessagePending:00000000 CAN_MessagePending
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:1159   .text.CAN_OperatingModeRequest:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:1164   .text.CAN_OperatingModeRequest:00000000 CAN_OperatingModeRequest
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:1310   .text.CAN_Sleep:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:1315   .text.CAN_Sleep:00000000 CAN_Sleep
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:1348   .text.CAN_WakeUp:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:1353   .text.CAN_WakeUp:00000000 CAN_WakeUp
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:1403   .text.CAN_GetLastErrorCode:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:1408   .text.CAN_GetLastErrorCode:00000000 CAN_GetLastErrorCode
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:1427   .text.CAN_GetReceiveErrorCounter:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:1432   .text.CAN_GetReceiveErrorCounter:00000000 CAN_GetReceiveErrorCounter
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:1451   .text.CAN_GetLSBTransmitErrorCounter:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:1456   .text.CAN_GetLSBTransmitErrorCounter:00000000 CAN_GetLSBTransmitErrorCounter
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:1475   .text.CAN_ITConfig:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:1480   .text.CAN_ITConfig:00000000 CAN_ITConfig
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:1508   .text.CAN_GetFlagStatus:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:1513   .text.CAN_GetFlagStatus:00000000 CAN_GetFlagStatus
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:1626   .text.CAN_ClearFlag:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:1631   .text.CAN_ClearFlag:00000000 CAN_ClearFlag
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:1678   .text.CAN_ClearFlag:00000034 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:1683   .text.CAN_GetITStatus:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:1688   .text.CAN_GetITStatus:00000000 CAN_GetITStatus
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:1913   .text.CAN_GetITStatus:000000f0 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:1918   .text.CAN_ClearITPendingBit:00000000 $t
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s 			page 77


C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:1923   .text.CAN_ClearITPendingBit:00000000 CAN_ClearITPendingBit
C:\Users\ADMINI~1\AppData\Local\Temp\ccPJgMUG.s:2047   .text.CAN_ClearITPendingBit:0000009c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
