ARM GAS  /tmp/ccOHJlyF.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_can.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.CheckITStatus,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	CheckITStatus:
  26              	.LVL0:
  27              	.LFB147:
  28              		.file 1 "FWLIB/src/stm32f4xx_can.c"
   1:FWLIB/src/stm32f4xx_can.c **** /**
   2:FWLIB/src/stm32f4xx_can.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_can.c ****   * @file    stm32f4xx_can.c
   4:FWLIB/src/stm32f4xx_can.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_can.c ****   * @version V1.8.0
   6:FWLIB/src/stm32f4xx_can.c ****   * @date    04-November-2016
   7:FWLIB/src/stm32f4xx_can.c ****   * @brief   This file provides firmware functions to manage the following 
   8:FWLIB/src/stm32f4xx_can.c ****   *          functionalities of the Controller area network (CAN) peripheral:
   9:FWLIB/src/stm32f4xx_can.c ****   *           + Initialization and Configuration 
  10:FWLIB/src/stm32f4xx_can.c ****   *           + CAN Frames Transmission
  11:FWLIB/src/stm32f4xx_can.c ****   *           + CAN Frames Reception
  12:FWLIB/src/stm32f4xx_can.c ****   *           + Operation modes switch
  13:FWLIB/src/stm32f4xx_can.c ****   *           + Error management
  14:FWLIB/src/stm32f4xx_can.c ****   *           + Interrupts and flags
  15:FWLIB/src/stm32f4xx_can.c ****   *
  16:FWLIB/src/stm32f4xx_can.c **** @verbatim
  17:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
  18:FWLIB/src/stm32f4xx_can.c ****                         ##### How to use this driver #####
  19:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
  20:FWLIB/src/stm32f4xx_can.c ****     [..]
  21:FWLIB/src/stm32f4xx_can.c ****       (#) Enable the CAN controller interface clock using 
  22:FWLIB/src/stm32f4xx_can.c ****           RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1, ENABLE); for CAN1 
  23:FWLIB/src/stm32f4xx_can.c ****           and RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN2, ENABLE); for CAN2
  24:FWLIB/src/stm32f4xx_can.c ****       -@- In case you are using CAN2 only, you have to enable the CAN1 clock.
  25:FWLIB/src/stm32f4xx_can.c ****        
  26:FWLIB/src/stm32f4xx_can.c ****       (#) CAN pins configuration
  27:FWLIB/src/stm32f4xx_can.c ****         (++) Enable the clock for the CAN GPIOs using the following function:
  28:FWLIB/src/stm32f4xx_can.c ****              RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);   
  29:FWLIB/src/stm32f4xx_can.c ****         (++) Connect the involved CAN pins to AF9 using the following function 
  30:FWLIB/src/stm32f4xx_can.c ****              GPIO_PinAFConfig(GPIOx, GPIO_PinSourcex, GPIO_AF_CANx); 
ARM GAS  /tmp/ccOHJlyF.s 			page 2


  31:FWLIB/src/stm32f4xx_can.c ****         (++) Configure these CAN pins in alternate function mode by calling
  32:FWLIB/src/stm32f4xx_can.c ****              the function  GPIO_Init();
  33:FWLIB/src/stm32f4xx_can.c ****       
  34:FWLIB/src/stm32f4xx_can.c ****       (#) Initialize and configure the CAN using CAN_Init() and 
  35:FWLIB/src/stm32f4xx_can.c ****           CAN_FilterInit() functions.   
  36:FWLIB/src/stm32f4xx_can.c ****                  
  37:FWLIB/src/stm32f4xx_can.c ****       (#) Transmit the desired CAN frame using CAN_Transmit() function.
  38:FWLIB/src/stm32f4xx_can.c ****            
  39:FWLIB/src/stm32f4xx_can.c ****       (#) Check the transmission of a CAN frame using CAN_TransmitStatus()
  40:FWLIB/src/stm32f4xx_can.c ****           function.
  41:FWLIB/src/stm32f4xx_can.c ****                  
  42:FWLIB/src/stm32f4xx_can.c ****       (#) Cancel the transmission of a CAN frame using CAN_CancelTransmit()
  43:FWLIB/src/stm32f4xx_can.c ****           function.  
  44:FWLIB/src/stm32f4xx_can.c ****               
  45:FWLIB/src/stm32f4xx_can.c ****       (#) Receive a CAN frame using CAN_Receive() function.
  46:FWLIB/src/stm32f4xx_can.c ****            
  47:FWLIB/src/stm32f4xx_can.c ****       (#) Release the receive FIFOs using CAN_FIFORelease() function.
  48:FWLIB/src/stm32f4xx_can.c ****                  
  49:FWLIB/src/stm32f4xx_can.c ****       (#) Return the number of pending received frames using 
  50:FWLIB/src/stm32f4xx_can.c ****           CAN_MessagePending() function.            
  51:FWLIB/src/stm32f4xx_can.c ****                      
  52:FWLIB/src/stm32f4xx_can.c ****       (#) To control CAN events you can use one of the following two methods:
  53:FWLIB/src/stm32f4xx_can.c ****         (++) Check on CAN flags using the CAN_GetFlagStatus() function.  
  54:FWLIB/src/stm32f4xx_can.c ****         (++) Use CAN interrupts through the function CAN_ITConfig() at 
  55:FWLIB/src/stm32f4xx_can.c ****              initialization phase and CAN_GetITStatus() function into 
  56:FWLIB/src/stm32f4xx_can.c ****              interrupt routines to check if the event has occurred or not.
  57:FWLIB/src/stm32f4xx_can.c ****              After checking on a flag you should clear it using CAN_ClearFlag()
  58:FWLIB/src/stm32f4xx_can.c ****              function. And after checking on an interrupt event you should 
  59:FWLIB/src/stm32f4xx_can.c ****              clear it using CAN_ClearITPendingBit() function.            
  60:FWLIB/src/stm32f4xx_can.c **** 
  61:FWLIB/src/stm32f4xx_can.c **** @endverbatim
  62:FWLIB/src/stm32f4xx_can.c ****            
  63:FWLIB/src/stm32f4xx_can.c ****   ******************************************************************************
  64:FWLIB/src/stm32f4xx_can.c ****   * @attention
  65:FWLIB/src/stm32f4xx_can.c ****   *
  66:FWLIB/src/stm32f4xx_can.c ****   * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
  67:FWLIB/src/stm32f4xx_can.c ****   *
  68:FWLIB/src/stm32f4xx_can.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  69:FWLIB/src/stm32f4xx_can.c ****   * You may not use this file except in compliance with the License.
  70:FWLIB/src/stm32f4xx_can.c ****   * You may obtain a copy of the License at:
  71:FWLIB/src/stm32f4xx_can.c ****   *
  72:FWLIB/src/stm32f4xx_can.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  73:FWLIB/src/stm32f4xx_can.c ****   *
  74:FWLIB/src/stm32f4xx_can.c ****   * Unless required by applicable law or agreed to in writing, software 
  75:FWLIB/src/stm32f4xx_can.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  76:FWLIB/src/stm32f4xx_can.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  77:FWLIB/src/stm32f4xx_can.c ****   * See the License for the specific language governing permissions and
  78:FWLIB/src/stm32f4xx_can.c ****   * limitations under the License.
  79:FWLIB/src/stm32f4xx_can.c ****   *
  80:FWLIB/src/stm32f4xx_can.c ****   ******************************************************************************  
  81:FWLIB/src/stm32f4xx_can.c ****   */
  82:FWLIB/src/stm32f4xx_can.c **** 
  83:FWLIB/src/stm32f4xx_can.c **** /* Includes ------------------------------------------------------------------*/
  84:FWLIB/src/stm32f4xx_can.c **** #include "stm32f4xx_can.h"
  85:FWLIB/src/stm32f4xx_can.c **** #include "stm32f4xx_rcc.h"
  86:FWLIB/src/stm32f4xx_can.c **** 
  87:FWLIB/src/stm32f4xx_can.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
ARM GAS  /tmp/ccOHJlyF.s 			page 3


  88:FWLIB/src/stm32f4xx_can.c ****   * @{
  89:FWLIB/src/stm32f4xx_can.c ****   */
  90:FWLIB/src/stm32f4xx_can.c **** 
  91:FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN 
  92:FWLIB/src/stm32f4xx_can.c ****   * @brief CAN driver modules
  93:FWLIB/src/stm32f4xx_can.c ****   * @{
  94:FWLIB/src/stm32f4xx_can.c ****   */ 
  95:FWLIB/src/stm32f4xx_can.c **** /* Private typedef -----------------------------------------------------------*/
  96:FWLIB/src/stm32f4xx_can.c **** /* Private define ------------------------------------------------------------*/
  97:FWLIB/src/stm32f4xx_can.c **** 
  98:FWLIB/src/stm32f4xx_can.c **** /* CAN Master Control Register bits */
  99:FWLIB/src/stm32f4xx_can.c **** #define MCR_DBF           ((uint32_t)0x00010000) /* software master reset */
 100:FWLIB/src/stm32f4xx_can.c **** 
 101:FWLIB/src/stm32f4xx_can.c **** /* CAN Mailbox Transmit Request */
 102:FWLIB/src/stm32f4xx_can.c **** #define TMIDxR_TXRQ       ((uint32_t)0x00000001) /* Transmit mailbox request */
 103:FWLIB/src/stm32f4xx_can.c **** 
 104:FWLIB/src/stm32f4xx_can.c **** /* CAN Filter Master Register bits */
 105:FWLIB/src/stm32f4xx_can.c **** #define FMR_FINIT         ((uint32_t)0x00000001) /* Filter init mode */
 106:FWLIB/src/stm32f4xx_can.c **** 
 107:FWLIB/src/stm32f4xx_can.c **** /* Time out for INAK bit */
 108:FWLIB/src/stm32f4xx_can.c **** #define INAK_TIMEOUT      ((uint32_t)0x0000FFFF)
 109:FWLIB/src/stm32f4xx_can.c **** /* Time out for SLAK bit */
 110:FWLIB/src/stm32f4xx_can.c **** #define SLAK_TIMEOUT      ((uint32_t)0x0000FFFF)
 111:FWLIB/src/stm32f4xx_can.c **** 
 112:FWLIB/src/stm32f4xx_can.c **** /* Flags in TSR register */
 113:FWLIB/src/stm32f4xx_can.c **** #define CAN_FLAGS_TSR     ((uint32_t)0x08000000) 
 114:FWLIB/src/stm32f4xx_can.c **** /* Flags in RF1R register */
 115:FWLIB/src/stm32f4xx_can.c **** #define CAN_FLAGS_RF1R    ((uint32_t)0x04000000) 
 116:FWLIB/src/stm32f4xx_can.c **** /* Flags in RF0R register */
 117:FWLIB/src/stm32f4xx_can.c **** #define CAN_FLAGS_RF0R    ((uint32_t)0x02000000) 
 118:FWLIB/src/stm32f4xx_can.c **** /* Flags in MSR register */
 119:FWLIB/src/stm32f4xx_can.c **** #define CAN_FLAGS_MSR     ((uint32_t)0x01000000) 
 120:FWLIB/src/stm32f4xx_can.c **** /* Flags in ESR register */
 121:FWLIB/src/stm32f4xx_can.c **** #define CAN_FLAGS_ESR     ((uint32_t)0x00F00000) 
 122:FWLIB/src/stm32f4xx_can.c **** 
 123:FWLIB/src/stm32f4xx_can.c **** /* Mailboxes definition */
 124:FWLIB/src/stm32f4xx_can.c **** #define CAN_TXMAILBOX_0   ((uint8_t)0x00)
 125:FWLIB/src/stm32f4xx_can.c **** #define CAN_TXMAILBOX_1   ((uint8_t)0x01)
 126:FWLIB/src/stm32f4xx_can.c **** #define CAN_TXMAILBOX_2   ((uint8_t)0x02) 
 127:FWLIB/src/stm32f4xx_can.c **** 
 128:FWLIB/src/stm32f4xx_can.c **** #define CAN_MODE_MASK     ((uint32_t) 0x00000003)
 129:FWLIB/src/stm32f4xx_can.c **** 
 130:FWLIB/src/stm32f4xx_can.c **** /* Private macro -------------------------------------------------------------*/
 131:FWLIB/src/stm32f4xx_can.c **** /* Private variables ---------------------------------------------------------*/
 132:FWLIB/src/stm32f4xx_can.c **** /* Private function prototypes -----------------------------------------------*/
 133:FWLIB/src/stm32f4xx_can.c **** /* Private functions ---------------------------------------------------------*/
 134:FWLIB/src/stm32f4xx_can.c **** static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit);
 135:FWLIB/src/stm32f4xx_can.c **** 
 136:FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Private_Functions
 137:FWLIB/src/stm32f4xx_can.c ****   * @{
 138:FWLIB/src/stm32f4xx_can.c ****   */
 139:FWLIB/src/stm32f4xx_can.c **** 
 140:FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Group1 Initialization and Configuration functions
 141:FWLIB/src/stm32f4xx_can.c ****  *  @brief    Initialization and Configuration functions 
 142:FWLIB/src/stm32f4xx_can.c ****  *
 143:FWLIB/src/stm32f4xx_can.c **** @verbatim    
 144:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
ARM GAS  /tmp/ccOHJlyF.s 			page 4


 145:FWLIB/src/stm32f4xx_can.c ****               ##### Initialization and Configuration functions #####
 146:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================  
 147:FWLIB/src/stm32f4xx_can.c ****     [..] This section provides functions allowing to 
 148:FWLIB/src/stm32f4xx_can.c ****       (+) Initialize the CAN peripherals : Prescaler, operating mode, the maximum 
 149:FWLIB/src/stm32f4xx_can.c ****           number of time quanta to perform resynchronization, the number of time 
 150:FWLIB/src/stm32f4xx_can.c ****           quanta in Bit Segment 1 and 2 and many other modes. 
 151:FWLIB/src/stm32f4xx_can.c ****           Refer to  @ref CAN_InitTypeDef  for more details.
 152:FWLIB/src/stm32f4xx_can.c ****       (+) Configures the CAN reception filter.                                      
 153:FWLIB/src/stm32f4xx_can.c ****       (+) Select the start bank filter for slave CAN.
 154:FWLIB/src/stm32f4xx_can.c ****       (+) Enables or disables the Debug Freeze mode for CAN
 155:FWLIB/src/stm32f4xx_can.c ****       (+)Enables or disables the CAN Time Trigger Operation communication mode
 156:FWLIB/src/stm32f4xx_can.c ****    
 157:FWLIB/src/stm32f4xx_can.c **** @endverbatim
 158:FWLIB/src/stm32f4xx_can.c ****   * @{
 159:FWLIB/src/stm32f4xx_can.c ****   */
 160:FWLIB/src/stm32f4xx_can.c ****   
 161:FWLIB/src/stm32f4xx_can.c **** /**
 162:FWLIB/src/stm32f4xx_can.c ****   * @brief  Deinitializes the CAN peripheral registers to their default reset values.
 163:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 164:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
 165:FWLIB/src/stm32f4xx_can.c ****   * @retval None.
 166:FWLIB/src/stm32f4xx_can.c ****   */
 167:FWLIB/src/stm32f4xx_can.c **** void CAN_DeInit(CAN_TypeDef* CANx)
 168:FWLIB/src/stm32f4xx_can.c **** {
 169:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 170:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 171:FWLIB/src/stm32f4xx_can.c ****  
 172:FWLIB/src/stm32f4xx_can.c ****   if (CANx == CAN1)
 173:FWLIB/src/stm32f4xx_can.c ****   {
 174:FWLIB/src/stm32f4xx_can.c ****     /* Enable CAN1 reset state */
 175:FWLIB/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 176:FWLIB/src/stm32f4xx_can.c ****     /* Release CAN1 from reset state */
 177:FWLIB/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 178:FWLIB/src/stm32f4xx_can.c ****   }
 179:FWLIB/src/stm32f4xx_can.c **** #if defined(STM32F413_423xx)
 180:FWLIB/src/stm32f4xx_can.c ****   else if(CANx == CAN2)
 181:FWLIB/src/stm32f4xx_can.c ****   {  
 182:FWLIB/src/stm32f4xx_can.c ****     /* Enable CAN2 reset state */
 183:FWLIB/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 184:FWLIB/src/stm32f4xx_can.c ****     /* Release CAN2 from reset state */
 185:FWLIB/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 186:FWLIB/src/stm32f4xx_can.c ****   }
 187:FWLIB/src/stm32f4xx_can.c ****   
 188:FWLIB/src/stm32f4xx_can.c ****   else /* CAN3 available only for STM32F413_423xx */
 189:FWLIB/src/stm32f4xx_can.c ****   {
 190:FWLIB/src/stm32f4xx_can.c ****     /* Enable CAN3 reset state */
 191:FWLIB/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN3, ENABLE);
 192:FWLIB/src/stm32f4xx_can.c ****     /* Release CAN3 from reset state */
 193:FWLIB/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN3, DISABLE); 
 194:FWLIB/src/stm32f4xx_can.c ****   }
 195:FWLIB/src/stm32f4xx_can.c **** #else
 196:FWLIB/src/stm32f4xx_can.c ****   else
 197:FWLIB/src/stm32f4xx_can.c ****   {
 198:FWLIB/src/stm32f4xx_can.c ****     /* Enable CAN2 reset state */
 199:FWLIB/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 200:FWLIB/src/stm32f4xx_can.c ****     /* Release CAN2 from reset state */
 201:FWLIB/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
ARM GAS  /tmp/ccOHJlyF.s 			page 5


 202:FWLIB/src/stm32f4xx_can.c ****   }
 203:FWLIB/src/stm32f4xx_can.c **** #endif /* STM32F413_423xx */
 204:FWLIB/src/stm32f4xx_can.c **** }
 205:FWLIB/src/stm32f4xx_can.c **** 
 206:FWLIB/src/stm32f4xx_can.c **** /**
 207:FWLIB/src/stm32f4xx_can.c ****   * @brief  Initializes the CAN peripheral according to the specified
 208:FWLIB/src/stm32f4xx_can.c ****   *         parameters in the CAN_InitStruct.
 209:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 210:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure that contains
 211:FWLIB/src/stm32f4xx_can.c ****   *         the configuration information for the CAN peripheral.
 212:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
 213:FWLIB/src/stm32f4xx_can.c ****   * @retval Constant indicates initialization succeed which will be 
 214:FWLIB/src/stm32f4xx_can.c ****   *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
 215:FWLIB/src/stm32f4xx_can.c ****   */
 216:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
 217:FWLIB/src/stm32f4xx_can.c **** {
 218:FWLIB/src/stm32f4xx_can.c ****   uint8_t InitStatus = CAN_InitStatus_Failed;
 219:FWLIB/src/stm32f4xx_can.c ****   uint32_t wait_ack = 0x00000000;
 220:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 221:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 222:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TTCM));
 223:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_ABOM));
 224:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_AWUM));
 225:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_NART));
 226:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_RFLM));
 227:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TXFP));
 228:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_MODE(CAN_InitStruct->CAN_Mode));
 229:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_SJW(CAN_InitStruct->CAN_SJW));
 230:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
 231:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
 232:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));
 233:FWLIB/src/stm32f4xx_can.c **** 
 234:FWLIB/src/stm32f4xx_can.c ****   /* Exit from sleep mode */
 235:FWLIB/src/stm32f4xx_can.c ****   CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 236:FWLIB/src/stm32f4xx_can.c **** 
 237:FWLIB/src/stm32f4xx_can.c ****   /* Request initialisation */
 238:FWLIB/src/stm32f4xx_can.c ****   CANx->MCR |= CAN_MCR_INRQ ;
 239:FWLIB/src/stm32f4xx_can.c **** 
 240:FWLIB/src/stm32f4xx_can.c ****   /* Wait the acknowledge */
 241:FWLIB/src/stm32f4xx_can.c ****   while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 242:FWLIB/src/stm32f4xx_can.c ****   {
 243:FWLIB/src/stm32f4xx_can.c ****     wait_ack++;
 244:FWLIB/src/stm32f4xx_can.c ****   }
 245:FWLIB/src/stm32f4xx_can.c **** 
 246:FWLIB/src/stm32f4xx_can.c ****   /* Check acknowledge */
 247:FWLIB/src/stm32f4xx_can.c ****   if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 248:FWLIB/src/stm32f4xx_can.c ****   {
 249:FWLIB/src/stm32f4xx_can.c ****     InitStatus = CAN_InitStatus_Failed;
 250:FWLIB/src/stm32f4xx_can.c ****   }
 251:FWLIB/src/stm32f4xx_can.c ****   else 
 252:FWLIB/src/stm32f4xx_can.c ****   {
 253:FWLIB/src/stm32f4xx_can.c ****     /* Set the time triggered communication mode */
 254:FWLIB/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_TTCM == ENABLE)
 255:FWLIB/src/stm32f4xx_can.c ****     {
 256:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_TTCM;
 257:FWLIB/src/stm32f4xx_can.c ****     }
 258:FWLIB/src/stm32f4xx_can.c ****     else
ARM GAS  /tmp/ccOHJlyF.s 			page 6


 259:FWLIB/src/stm32f4xx_can.c ****     {
 260:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 261:FWLIB/src/stm32f4xx_can.c ****     }
 262:FWLIB/src/stm32f4xx_can.c **** 
 263:FWLIB/src/stm32f4xx_can.c ****     /* Set the automatic bus-off management */
 264:FWLIB/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_ABOM == ENABLE)
 265:FWLIB/src/stm32f4xx_can.c ****     {
 266:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_ABOM;
 267:FWLIB/src/stm32f4xx_can.c ****     }
 268:FWLIB/src/stm32f4xx_can.c ****     else
 269:FWLIB/src/stm32f4xx_can.c ****     {
 270:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 271:FWLIB/src/stm32f4xx_can.c ****     }
 272:FWLIB/src/stm32f4xx_can.c **** 
 273:FWLIB/src/stm32f4xx_can.c ****     /* Set the automatic wake-up mode */
 274:FWLIB/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_AWUM == ENABLE)
 275:FWLIB/src/stm32f4xx_can.c ****     {
 276:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_AWUM;
 277:FWLIB/src/stm32f4xx_can.c ****     }
 278:FWLIB/src/stm32f4xx_can.c ****     else
 279:FWLIB/src/stm32f4xx_can.c ****     {
 280:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 281:FWLIB/src/stm32f4xx_can.c ****     }
 282:FWLIB/src/stm32f4xx_can.c **** 
 283:FWLIB/src/stm32f4xx_can.c ****     /* Set the no automatic retransmission */
 284:FWLIB/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_NART == ENABLE)
 285:FWLIB/src/stm32f4xx_can.c ****     {
 286:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_NART;
 287:FWLIB/src/stm32f4xx_can.c ****     }
 288:FWLIB/src/stm32f4xx_can.c ****     else
 289:FWLIB/src/stm32f4xx_can.c ****     {
 290:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 291:FWLIB/src/stm32f4xx_can.c ****     }
 292:FWLIB/src/stm32f4xx_can.c **** 
 293:FWLIB/src/stm32f4xx_can.c ****     /* Set the receive FIFO locked mode */
 294:FWLIB/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_RFLM == ENABLE)
 295:FWLIB/src/stm32f4xx_can.c ****     {
 296:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_RFLM;
 297:FWLIB/src/stm32f4xx_can.c ****     }
 298:FWLIB/src/stm32f4xx_can.c ****     else
 299:FWLIB/src/stm32f4xx_can.c ****     {
 300:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 301:FWLIB/src/stm32f4xx_can.c ****     }
 302:FWLIB/src/stm32f4xx_can.c **** 
 303:FWLIB/src/stm32f4xx_can.c ****     /* Set the transmit FIFO priority */
 304:FWLIB/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_TXFP == ENABLE)
 305:FWLIB/src/stm32f4xx_can.c ****     {
 306:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_TXFP;
 307:FWLIB/src/stm32f4xx_can.c ****     }
 308:FWLIB/src/stm32f4xx_can.c ****     else
 309:FWLIB/src/stm32f4xx_can.c ****     {
 310:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 311:FWLIB/src/stm32f4xx_can.c ****     }
 312:FWLIB/src/stm32f4xx_can.c **** 
 313:FWLIB/src/stm32f4xx_can.c ****     /* Set the bit timing register */
 314:FWLIB/src/stm32f4xx_can.c ****     CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 315:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
ARM GAS  /tmp/ccOHJlyF.s 			page 7


 316:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 317:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 318:FWLIB/src/stm32f4xx_can.c ****                ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 319:FWLIB/src/stm32f4xx_can.c **** 
 320:FWLIB/src/stm32f4xx_can.c ****     /* Request leave initialisation */
 321:FWLIB/src/stm32f4xx_can.c ****     CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 322:FWLIB/src/stm32f4xx_can.c **** 
 323:FWLIB/src/stm32f4xx_can.c ****    /* Wait the acknowledge */
 324:FWLIB/src/stm32f4xx_can.c ****    wait_ack = 0;
 325:FWLIB/src/stm32f4xx_can.c **** 
 326:FWLIB/src/stm32f4xx_can.c ****    while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 327:FWLIB/src/stm32f4xx_can.c ****    {
 328:FWLIB/src/stm32f4xx_can.c ****      wait_ack++;
 329:FWLIB/src/stm32f4xx_can.c ****    }
 330:FWLIB/src/stm32f4xx_can.c **** 
 331:FWLIB/src/stm32f4xx_can.c ****     /* ...and check acknowledged */
 332:FWLIB/src/stm32f4xx_can.c ****     if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 333:FWLIB/src/stm32f4xx_can.c ****     {
 334:FWLIB/src/stm32f4xx_can.c ****       InitStatus = CAN_InitStatus_Failed;
 335:FWLIB/src/stm32f4xx_can.c ****     }
 336:FWLIB/src/stm32f4xx_can.c ****     else
 337:FWLIB/src/stm32f4xx_can.c ****     {
 338:FWLIB/src/stm32f4xx_can.c ****       InitStatus = CAN_InitStatus_Success ;
 339:FWLIB/src/stm32f4xx_can.c ****     }
 340:FWLIB/src/stm32f4xx_can.c ****   }
 341:FWLIB/src/stm32f4xx_can.c **** 
 342:FWLIB/src/stm32f4xx_can.c ****   /* At this step, return the status of initialization */
 343:FWLIB/src/stm32f4xx_can.c ****   return InitStatus;
 344:FWLIB/src/stm32f4xx_can.c **** }
 345:FWLIB/src/stm32f4xx_can.c **** 
 346:FWLIB/src/stm32f4xx_can.c **** #if defined(STM32F413_423xx)
 347:FWLIB/src/stm32f4xx_can.c **** /**
 348:FWLIB/src/stm32f4xx_can.c ****   * @brief  Configures the CAN reception filter according to the specified
 349:FWLIB/src/stm32f4xx_can.c ****   *         parameters in the CAN_FilterInitStruct.
 350:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 3 to select the CAN peripheral.
 351:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
 352:FWLIB/src/stm32f4xx_can.c ****   *         contains the configuration information.
 353:FWLIB/src/stm32f4xx_can.c ****   * @retval None
 354:FWLIB/src/stm32f4xx_can.c ****   */
 355:FWLIB/src/stm32f4xx_can.c **** void CAN_FilterInit(CAN_TypeDef* CANx, CAN_FilterInitTypeDef* CAN_FilterInitStruct)
 356:FWLIB/src/stm32f4xx_can.c **** {
 357:FWLIB/src/stm32f4xx_can.c ****   uint32_t filter_number_bit_pos = 0;
 358:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 359:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_NUMBER(CAN_FilterInitStruct->CAN_FilterNumber));
 360:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
 361:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
 362:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
 363:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));
 364:FWLIB/src/stm32f4xx_can.c ****   
 365:FWLIB/src/stm32f4xx_can.c ****   filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 366:FWLIB/src/stm32f4xx_can.c **** 
 367:FWLIB/src/stm32f4xx_can.c ****   /* Initialisation mode for the filter */
 368:FWLIB/src/stm32f4xx_can.c ****   CANx->FMR |= FMR_FINIT;
 369:FWLIB/src/stm32f4xx_can.c **** 
 370:FWLIB/src/stm32f4xx_can.c ****   /* Filter Deactivation */
 371:FWLIB/src/stm32f4xx_can.c ****   CANx->FA1R &= ~(uint32_t)filter_number_bit_pos;
 372:FWLIB/src/stm32f4xx_can.c **** 
ARM GAS  /tmp/ccOHJlyF.s 			page 8


 373:FWLIB/src/stm32f4xx_can.c ****   /* Filter Scale */
 374:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 375:FWLIB/src/stm32f4xx_can.c ****   {
 376:FWLIB/src/stm32f4xx_can.c ****     /* 16-bit scale for the filter */
 377:FWLIB/src/stm32f4xx_can.c ****     CANx->FS1R &= ~(uint32_t)filter_number_bit_pos;
 378:FWLIB/src/stm32f4xx_can.c **** 
 379:FWLIB/src/stm32f4xx_can.c ****     /* First 16-bit identifier and First 16-bit mask */
 380:FWLIB/src/stm32f4xx_can.c ****     /* Or First 16-bit identifier and Second 16-bit identifier */
 381:FWLIB/src/stm32f4xx_can.c ****     CANx->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 382:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 383:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 384:FWLIB/src/stm32f4xx_can.c **** 
 385:FWLIB/src/stm32f4xx_can.c ****     /* Second 16-bit identifier and Second 16-bit mask */
 386:FWLIB/src/stm32f4xx_can.c ****     /* Or Third 16-bit identifier and Fourth 16-bit identifier */
 387:FWLIB/src/stm32f4xx_can.c ****     CANx->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 388:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 389:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 390:FWLIB/src/stm32f4xx_can.c ****   }
 391:FWLIB/src/stm32f4xx_can.c **** 
 392:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 393:FWLIB/src/stm32f4xx_can.c ****   {
 394:FWLIB/src/stm32f4xx_can.c ****     /* 32-bit scale for the filter */
 395:FWLIB/src/stm32f4xx_can.c ****     CANx->FS1R |= filter_number_bit_pos;
 396:FWLIB/src/stm32f4xx_can.c ****     /* 32-bit identifier or First 32-bit identifier */
 397:FWLIB/src/stm32f4xx_can.c ****     CANx->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 398:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 399:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 400:FWLIB/src/stm32f4xx_can.c ****     /* 32-bit mask or Second 32-bit identifier */
 401:FWLIB/src/stm32f4xx_can.c ****     CANx->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 402:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 403:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 404:FWLIB/src/stm32f4xx_can.c ****   }
 405:FWLIB/src/stm32f4xx_can.c **** 
 406:FWLIB/src/stm32f4xx_can.c ****   /* Filter Mode */
 407:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 408:FWLIB/src/stm32f4xx_can.c ****   {
 409:FWLIB/src/stm32f4xx_can.c ****     /*Id/Mask mode for the filter*/
 410:FWLIB/src/stm32f4xx_can.c ****     CANx->FM1R &= ~(uint32_t)filter_number_bit_pos;
 411:FWLIB/src/stm32f4xx_can.c ****   }
 412:FWLIB/src/stm32f4xx_can.c ****   else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
 413:FWLIB/src/stm32f4xx_can.c ****   {
 414:FWLIB/src/stm32f4xx_can.c ****     /*Identifier list mode for the filter*/
 415:FWLIB/src/stm32f4xx_can.c ****     CANx->FM1R |= (uint32_t)filter_number_bit_pos;
 416:FWLIB/src/stm32f4xx_can.c ****   }
 417:FWLIB/src/stm32f4xx_can.c **** 
 418:FWLIB/src/stm32f4xx_can.c ****   /* Filter FIFO assignment */
 419:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 420:FWLIB/src/stm32f4xx_can.c ****   {
 421:FWLIB/src/stm32f4xx_can.c ****     /* FIFO 0 assignation for the filter */
 422:FWLIB/src/stm32f4xx_can.c ****     CANx->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 423:FWLIB/src/stm32f4xx_can.c ****   }
 424:FWLIB/src/stm32f4xx_can.c **** 
 425:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 426:FWLIB/src/stm32f4xx_can.c ****   {
 427:FWLIB/src/stm32f4xx_can.c ****     /* FIFO 1 assignation for the filter */
 428:FWLIB/src/stm32f4xx_can.c ****     CANx->FFA1R |= (uint32_t)filter_number_bit_pos;
 429:FWLIB/src/stm32f4xx_can.c ****   }
ARM GAS  /tmp/ccOHJlyF.s 			page 9


 430:FWLIB/src/stm32f4xx_can.c ****   
 431:FWLIB/src/stm32f4xx_can.c ****   /* Filter activation */
 432:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 433:FWLIB/src/stm32f4xx_can.c ****   {
 434:FWLIB/src/stm32f4xx_can.c ****     CANx->FA1R |= filter_number_bit_pos;
 435:FWLIB/src/stm32f4xx_can.c ****   }
 436:FWLIB/src/stm32f4xx_can.c **** 
 437:FWLIB/src/stm32f4xx_can.c ****   /* Leave the initialisation mode for the filter */
 438:FWLIB/src/stm32f4xx_can.c ****   CANx->FMR &= ~FMR_FINIT;
 439:FWLIB/src/stm32f4xx_can.c **** }
 440:FWLIB/src/stm32f4xx_can.c **** #else
 441:FWLIB/src/stm32f4xx_can.c **** /**
 442:FWLIB/src/stm32f4xx_can.c ****   * @brief  Configures the CAN reception filter according to the specified
 443:FWLIB/src/stm32f4xx_can.c ****   *         parameters in the CAN_FilterInitStruct.
 444:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
 445:FWLIB/src/stm32f4xx_can.c ****   *         contains the configuration information.
 446:FWLIB/src/stm32f4xx_can.c ****   * @retval None
 447:FWLIB/src/stm32f4xx_can.c ****   */
 448:FWLIB/src/stm32f4xx_can.c **** void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
 449:FWLIB/src/stm32f4xx_can.c **** {
 450:FWLIB/src/stm32f4xx_can.c ****   uint32_t filter_number_bit_pos = 0;
 451:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 452:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_NUMBER(CAN_FilterInitStruct->CAN_FilterNumber));
 453:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
 454:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
 455:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
 456:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));
 457:FWLIB/src/stm32f4xx_can.c **** 
 458:FWLIB/src/stm32f4xx_can.c ****   filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 459:FWLIB/src/stm32f4xx_can.c **** 
 460:FWLIB/src/stm32f4xx_can.c ****   /* Initialisation mode for the filter */
 461:FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR |= FMR_FINIT;
 462:FWLIB/src/stm32f4xx_can.c **** 
 463:FWLIB/src/stm32f4xx_can.c ****   /* Filter Deactivation */
 464:FWLIB/src/stm32f4xx_can.c ****   CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 465:FWLIB/src/stm32f4xx_can.c **** 
 466:FWLIB/src/stm32f4xx_can.c ****   /* Filter Scale */
 467:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 468:FWLIB/src/stm32f4xx_can.c ****   {
 469:FWLIB/src/stm32f4xx_can.c ****     /* 16-bit scale for the filter */
 470:FWLIB/src/stm32f4xx_can.c ****     CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 471:FWLIB/src/stm32f4xx_can.c **** 
 472:FWLIB/src/stm32f4xx_can.c ****     /* First 16-bit identifier and First 16-bit mask */
 473:FWLIB/src/stm32f4xx_can.c ****     /* Or First 16-bit identifier and Second 16-bit identifier */
 474:FWLIB/src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 475:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 476:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 477:FWLIB/src/stm32f4xx_can.c **** 
 478:FWLIB/src/stm32f4xx_can.c ****     /* Second 16-bit identifier and Second 16-bit mask */
 479:FWLIB/src/stm32f4xx_can.c ****     /* Or Third 16-bit identifier and Fourth 16-bit identifier */
 480:FWLIB/src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 481:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 482:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 483:FWLIB/src/stm32f4xx_can.c ****   }
 484:FWLIB/src/stm32f4xx_can.c **** 
 485:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 486:FWLIB/src/stm32f4xx_can.c ****   {
ARM GAS  /tmp/ccOHJlyF.s 			page 10


 487:FWLIB/src/stm32f4xx_can.c ****     /* 32-bit scale for the filter */
 488:FWLIB/src/stm32f4xx_can.c ****     CAN1->FS1R |= filter_number_bit_pos;
 489:FWLIB/src/stm32f4xx_can.c ****     /* 32-bit identifier or First 32-bit identifier */
 490:FWLIB/src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 491:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 492:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 493:FWLIB/src/stm32f4xx_can.c ****     /* 32-bit mask or Second 32-bit identifier */
 494:FWLIB/src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 495:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 496:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 497:FWLIB/src/stm32f4xx_can.c ****   }
 498:FWLIB/src/stm32f4xx_can.c **** 
 499:FWLIB/src/stm32f4xx_can.c ****   /* Filter Mode */
 500:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 501:FWLIB/src/stm32f4xx_can.c ****   {
 502:FWLIB/src/stm32f4xx_can.c ****     /*Id/Mask mode for the filter*/
 503:FWLIB/src/stm32f4xx_can.c ****     CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 504:FWLIB/src/stm32f4xx_can.c ****   }
 505:FWLIB/src/stm32f4xx_can.c ****   else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
 506:FWLIB/src/stm32f4xx_can.c ****   {
 507:FWLIB/src/stm32f4xx_can.c ****     /*Identifier list mode for the filter*/
 508:FWLIB/src/stm32f4xx_can.c ****     CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 509:FWLIB/src/stm32f4xx_can.c ****   }
 510:FWLIB/src/stm32f4xx_can.c **** 
 511:FWLIB/src/stm32f4xx_can.c ****   /* Filter FIFO assignment */
 512:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 513:FWLIB/src/stm32f4xx_can.c ****   {
 514:FWLIB/src/stm32f4xx_can.c ****     /* FIFO 0 assignation for the filter */
 515:FWLIB/src/stm32f4xx_can.c ****     CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 516:FWLIB/src/stm32f4xx_can.c ****   }
 517:FWLIB/src/stm32f4xx_can.c **** 
 518:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 519:FWLIB/src/stm32f4xx_can.c ****   {
 520:FWLIB/src/stm32f4xx_can.c ****     /* FIFO 1 assignation for the filter */
 521:FWLIB/src/stm32f4xx_can.c ****     CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 522:FWLIB/src/stm32f4xx_can.c ****   }
 523:FWLIB/src/stm32f4xx_can.c ****   
 524:FWLIB/src/stm32f4xx_can.c ****   /* Filter activation */
 525:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 526:FWLIB/src/stm32f4xx_can.c ****   {
 527:FWLIB/src/stm32f4xx_can.c ****     CAN1->FA1R |= filter_number_bit_pos;
 528:FWLIB/src/stm32f4xx_can.c ****   }
 529:FWLIB/src/stm32f4xx_can.c **** 
 530:FWLIB/src/stm32f4xx_can.c ****   /* Leave the initialisation mode for the filter */
 531:FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR &= ~FMR_FINIT;
 532:FWLIB/src/stm32f4xx_can.c **** }
 533:FWLIB/src/stm32f4xx_can.c **** #endif /* STM32F413_423xx */
 534:FWLIB/src/stm32f4xx_can.c **** 
 535:FWLIB/src/stm32f4xx_can.c **** /**
 536:FWLIB/src/stm32f4xx_can.c ****   * @brief  Fills each CAN_InitStruct member with its default value.
 537:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which ill be initialized.
 538:FWLIB/src/stm32f4xx_can.c ****   * @retval None
 539:FWLIB/src/stm32f4xx_can.c ****   */
 540:FWLIB/src/stm32f4xx_can.c **** void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
 541:FWLIB/src/stm32f4xx_can.c **** {
 542:FWLIB/src/stm32f4xx_can.c ****   /* Reset CAN init structure parameters values */
 543:FWLIB/src/stm32f4xx_can.c ****   
ARM GAS  /tmp/ccOHJlyF.s 			page 11


 544:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the time triggered communication mode */
 545:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_TTCM = DISABLE;
 546:FWLIB/src/stm32f4xx_can.c ****   
 547:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the automatic bus-off management */
 548:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_ABOM = DISABLE;
 549:FWLIB/src/stm32f4xx_can.c ****   
 550:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the automatic wake-up mode */
 551:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_AWUM = DISABLE;
 552:FWLIB/src/stm32f4xx_can.c ****   
 553:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the no automatic retransmission */
 554:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_NART = DISABLE;
 555:FWLIB/src/stm32f4xx_can.c ****   
 556:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the receive FIFO locked mode */
 557:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_RFLM = DISABLE;
 558:FWLIB/src/stm32f4xx_can.c ****   
 559:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the transmit FIFO priority */
 560:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_TXFP = DISABLE;
 561:FWLIB/src/stm32f4xx_can.c ****   
 562:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the CAN_Mode member */
 563:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 564:FWLIB/src/stm32f4xx_can.c ****   
 565:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the CAN_SJW member */
 566:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 567:FWLIB/src/stm32f4xx_can.c ****   
 568:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the CAN_BS1 member */
 569:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 570:FWLIB/src/stm32f4xx_can.c ****   
 571:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the CAN_BS2 member */
 572:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 573:FWLIB/src/stm32f4xx_can.c ****   
 574:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the CAN_Prescaler member */
 575:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_Prescaler = 1;
 576:FWLIB/src/stm32f4xx_can.c **** }
 577:FWLIB/src/stm32f4xx_can.c **** 
 578:FWLIB/src/stm32f4xx_can.c **** #if defined(STM32F413_423xx)
 579:FWLIB/src/stm32f4xx_can.c **** /**
 580:FWLIB/src/stm32f4xx_can.c ****   * @brief  Select the start bank filter for slave CAN.
 581:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 3 to select the CAN peripheral.
 582:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
 583:FWLIB/src/stm32f4xx_can.c ****   * @retval None
 584:FWLIB/src/stm32f4xx_can.c ****   */
 585:FWLIB/src/stm32f4xx_can.c **** void CAN_SlaveStartBank(CAN_TypeDef* CANx, uint8_t CAN_BankNumber) 
 586:FWLIB/src/stm32f4xx_can.c **** {
 587:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 588:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
 589:FWLIB/src/stm32f4xx_can.c ****   
 590:FWLIB/src/stm32f4xx_can.c ****   /* Enter Initialisation mode for the filter */
 591:FWLIB/src/stm32f4xx_can.c ****   CANx->FMR |= FMR_FINIT;
 592:FWLIB/src/stm32f4xx_can.c ****   
 593:FWLIB/src/stm32f4xx_can.c ****   /* Select the start slave bank */
 594:FWLIB/src/stm32f4xx_can.c ****   CANx->FMR &= (uint32_t)0xFFFFC0F1 ;
 595:FWLIB/src/stm32f4xx_can.c ****   CANx->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 596:FWLIB/src/stm32f4xx_can.c ****   
 597:FWLIB/src/stm32f4xx_can.c ****   /* Leave Initialisation mode for the filter */
 598:FWLIB/src/stm32f4xx_can.c ****   CANx->FMR &= ~FMR_FINIT;
 599:FWLIB/src/stm32f4xx_can.c **** }
 600:FWLIB/src/stm32f4xx_can.c **** #else
ARM GAS  /tmp/ccOHJlyF.s 			page 12


 601:FWLIB/src/stm32f4xx_can.c **** /**
 602:FWLIB/src/stm32f4xx_can.c ****   * @brief  Select the start bank filter for slave CAN.
 603:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
 604:FWLIB/src/stm32f4xx_can.c ****   * @retval None
 605:FWLIB/src/stm32f4xx_can.c ****   */
 606:FWLIB/src/stm32f4xx_can.c **** void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
 607:FWLIB/src/stm32f4xx_can.c **** {
 608:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 609:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
 610:FWLIB/src/stm32f4xx_can.c ****   
 611:FWLIB/src/stm32f4xx_can.c ****   /* Enter Initialisation mode for the filter */
 612:FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR |= FMR_FINIT;
 613:FWLIB/src/stm32f4xx_can.c ****   
 614:FWLIB/src/stm32f4xx_can.c ****   /* Select the start slave bank */
 615:FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 616:FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 617:FWLIB/src/stm32f4xx_can.c ****   
 618:FWLIB/src/stm32f4xx_can.c ****   /* Leave Initialisation mode for the filter */
 619:FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR &= ~FMR_FINIT;
 620:FWLIB/src/stm32f4xx_can.c **** }
 621:FWLIB/src/stm32f4xx_can.c **** #endif /* STM32F413_423xx */
 622:FWLIB/src/stm32f4xx_can.c **** /**
 623:FWLIB/src/stm32f4xx_can.c ****   * @brief  Enables or disables the DBG Freeze for CAN.
 624:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 625:FWLIB/src/stm32f4xx_can.c ****   * @param  NewState: new state of the CAN peripheral. 
 626:FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be: ENABLE (CAN reception/transmission is frozen
 627:FWLIB/src/stm32f4xx_can.c ****   *          during debug. Reception FIFOs can still be accessed/controlled normally) 
 628:FWLIB/src/stm32f4xx_can.c ****   *          or DISABLE (CAN is working during debug).
 629:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
 630:FWLIB/src/stm32f4xx_can.c ****   * @retval None
 631:FWLIB/src/stm32f4xx_can.c ****   */
 632:FWLIB/src/stm32f4xx_can.c **** void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
 633:FWLIB/src/stm32f4xx_can.c **** {
 634:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 635:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 636:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 637:FWLIB/src/stm32f4xx_can.c ****   
 638:FWLIB/src/stm32f4xx_can.c ****   if (NewState != DISABLE)
 639:FWLIB/src/stm32f4xx_can.c ****   {
 640:FWLIB/src/stm32f4xx_can.c ****     /* Enable Debug Freeze  */
 641:FWLIB/src/stm32f4xx_can.c ****     CANx->MCR |= MCR_DBF;
 642:FWLIB/src/stm32f4xx_can.c ****   }
 643:FWLIB/src/stm32f4xx_can.c ****   else
 644:FWLIB/src/stm32f4xx_can.c ****   {
 645:FWLIB/src/stm32f4xx_can.c ****     /* Disable Debug Freeze */
 646:FWLIB/src/stm32f4xx_can.c ****     CANx->MCR &= ~MCR_DBF;
 647:FWLIB/src/stm32f4xx_can.c ****   }
 648:FWLIB/src/stm32f4xx_can.c **** }
 649:FWLIB/src/stm32f4xx_can.c **** 
 650:FWLIB/src/stm32f4xx_can.c **** 
 651:FWLIB/src/stm32f4xx_can.c **** /**
 652:FWLIB/src/stm32f4xx_can.c ****   * @brief  Enables or disables the CAN Time TriggerOperation communication mode.
 653:FWLIB/src/stm32f4xx_can.c ****   * @note   DLC must be programmed as 8 in order Time Stamp (2 bytes) to be 
 654:FWLIB/src/stm32f4xx_can.c ****   *         sent over the CAN bus.  
 655:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 656:FWLIB/src/stm32f4xx_can.c ****   * @param  NewState: Mode new state. This parameter can be: ENABLE or DISABLE.
 657:FWLIB/src/stm32f4xx_can.c ****   *         When enabled, Time stamp (TIME[15:0]) value is  sent in the last two
ARM GAS  /tmp/ccOHJlyF.s 			page 13


 658:FWLIB/src/stm32f4xx_can.c ****   *         data bytes of the 8-byte message: TIME[7:0] in data byte 6 and TIME[15:8] 
 659:FWLIB/src/stm32f4xx_can.c ****   *         in data byte 7.
 660:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
 661:FWLIB/src/stm32f4xx_can.c ****   * @retval None
 662:FWLIB/src/stm32f4xx_can.c ****   */
 663:FWLIB/src/stm32f4xx_can.c **** void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
 664:FWLIB/src/stm32f4xx_can.c **** {
 665:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 666:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 667:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 668:FWLIB/src/stm32f4xx_can.c ****   if (NewState != DISABLE)
 669:FWLIB/src/stm32f4xx_can.c ****   {
 670:FWLIB/src/stm32f4xx_can.c ****     /* Enable the TTCM mode */
 671:FWLIB/src/stm32f4xx_can.c ****     CANx->MCR |= CAN_MCR_TTCM;
 672:FWLIB/src/stm32f4xx_can.c **** 
 673:FWLIB/src/stm32f4xx_can.c ****     /* Set TGT bits */
 674:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 675:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 676:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 677:FWLIB/src/stm32f4xx_can.c ****   }
 678:FWLIB/src/stm32f4xx_can.c ****   else
 679:FWLIB/src/stm32f4xx_can.c ****   {
 680:FWLIB/src/stm32f4xx_can.c ****     /* Disable the TTCM mode */
 681:FWLIB/src/stm32f4xx_can.c ****     CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 682:FWLIB/src/stm32f4xx_can.c **** 
 683:FWLIB/src/stm32f4xx_can.c ****     /* Reset TGT bits */
 684:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 685:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 686:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 687:FWLIB/src/stm32f4xx_can.c ****   }
 688:FWLIB/src/stm32f4xx_can.c **** }
 689:FWLIB/src/stm32f4xx_can.c **** /**
 690:FWLIB/src/stm32f4xx_can.c ****   * @}
 691:FWLIB/src/stm32f4xx_can.c ****   */
 692:FWLIB/src/stm32f4xx_can.c **** 
 693:FWLIB/src/stm32f4xx_can.c **** 
 694:FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Group2 CAN Frames Transmission functions
 695:FWLIB/src/stm32f4xx_can.c ****  *  @brief    CAN Frames Transmission functions 
 696:FWLIB/src/stm32f4xx_can.c ****  *
 697:FWLIB/src/stm32f4xx_can.c **** @verbatim    
 698:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
 699:FWLIB/src/stm32f4xx_can.c ****                 ##### CAN Frames Transmission functions #####
 700:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================  
 701:FWLIB/src/stm32f4xx_can.c ****     [..] This section provides functions allowing to 
 702:FWLIB/src/stm32f4xx_can.c ****       (+) Initiate and transmit a CAN frame message (if there is an empty mailbox).
 703:FWLIB/src/stm32f4xx_can.c ****       (+) Check the transmission status of a CAN Frame
 704:FWLIB/src/stm32f4xx_can.c ****       (+) Cancel a transmit request
 705:FWLIB/src/stm32f4xx_can.c ****    
 706:FWLIB/src/stm32f4xx_can.c **** @endverbatim
 707:FWLIB/src/stm32f4xx_can.c ****   * @{
 708:FWLIB/src/stm32f4xx_can.c ****   */
 709:FWLIB/src/stm32f4xx_can.c **** 
 710:FWLIB/src/stm32f4xx_can.c **** /**
 711:FWLIB/src/stm32f4xx_can.c ****   * @brief  Initiates and transmits a CAN frame message.
 712:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 713:FWLIB/src/stm32f4xx_can.c ****   * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
 714:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
ARM GAS  /tmp/ccOHJlyF.s 			page 14


 715:FWLIB/src/stm32f4xx_can.c ****   * @retval The number of the mailbox that is used for transmission or
 716:FWLIB/src/stm32f4xx_can.c ****   *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
 717:FWLIB/src/stm32f4xx_can.c ****   */
 718:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
 719:FWLIB/src/stm32f4xx_can.c **** {
 720:FWLIB/src/stm32f4xx_can.c ****   uint8_t transmit_mailbox = 0;
 721:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 722:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 723:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
 724:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_RTR(TxMessage->RTR));
 725:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_DLC(TxMessage->DLC));
 726:FWLIB/src/stm32f4xx_can.c **** 
 727:FWLIB/src/stm32f4xx_can.c ****   /* Select one empty transmit mailbox */
 728:FWLIB/src/stm32f4xx_can.c ****   if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 729:FWLIB/src/stm32f4xx_can.c ****   {
 730:FWLIB/src/stm32f4xx_can.c ****     transmit_mailbox = 0;
 731:FWLIB/src/stm32f4xx_can.c ****   }
 732:FWLIB/src/stm32f4xx_can.c ****   else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 733:FWLIB/src/stm32f4xx_can.c ****   {
 734:FWLIB/src/stm32f4xx_can.c ****     transmit_mailbox = 1;
 735:FWLIB/src/stm32f4xx_can.c ****   }
 736:FWLIB/src/stm32f4xx_can.c ****   else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 737:FWLIB/src/stm32f4xx_can.c ****   {
 738:FWLIB/src/stm32f4xx_can.c ****     transmit_mailbox = 2;
 739:FWLIB/src/stm32f4xx_can.c ****   }
 740:FWLIB/src/stm32f4xx_can.c ****   else
 741:FWLIB/src/stm32f4xx_can.c ****   {
 742:FWLIB/src/stm32f4xx_can.c ****     transmit_mailbox = CAN_TxStatus_NoMailBox;
 743:FWLIB/src/stm32f4xx_can.c ****   }
 744:FWLIB/src/stm32f4xx_can.c **** 
 745:FWLIB/src/stm32f4xx_can.c ****   if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 746:FWLIB/src/stm32f4xx_can.c ****   {
 747:FWLIB/src/stm32f4xx_can.c ****     /* Set up the Id */
 748:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 749:FWLIB/src/stm32f4xx_can.c ****     if (TxMessage->IDE == CAN_Id_Standard)
 750:FWLIB/src/stm32f4xx_can.c ****     {
 751:FWLIB/src/stm32f4xx_can.c ****       assert_param(IS_CAN_STDID(TxMessage->StdId));  
 752:FWLIB/src/stm32f4xx_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 753:FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 754:FWLIB/src/stm32f4xx_can.c ****     }
 755:FWLIB/src/stm32f4xx_can.c ****     else
 756:FWLIB/src/stm32f4xx_can.c ****     {
 757:FWLIB/src/stm32f4xx_can.c ****       assert_param(IS_CAN_EXTID(TxMessage->ExtId));
 758:FWLIB/src/stm32f4xx_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 759:FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->IDE | \
 760:FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 761:FWLIB/src/stm32f4xx_can.c ****     }
 762:FWLIB/src/stm32f4xx_can.c ****     
 763:FWLIB/src/stm32f4xx_can.c ****     /* Set up the DLC */
 764:FWLIB/src/stm32f4xx_can.c ****     TxMessage->DLC &= (uint8_t)0x0000000F;
 765:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 766:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 767:FWLIB/src/stm32f4xx_can.c **** 
 768:FWLIB/src/stm32f4xx_can.c ****     /* Set up the data field */
 769:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 770:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 771:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
ARM GAS  /tmp/ccOHJlyF.s 			page 15


 772:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[0]));
 773:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 774:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 775:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 776:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[4]));
 777:FWLIB/src/stm32f4xx_can.c ****     /* Request transmission */
 778:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 779:FWLIB/src/stm32f4xx_can.c ****   }
 780:FWLIB/src/stm32f4xx_can.c ****   return transmit_mailbox;
 781:FWLIB/src/stm32f4xx_can.c **** }
 782:FWLIB/src/stm32f4xx_can.c **** 
 783:FWLIB/src/stm32f4xx_can.c **** /**
 784:FWLIB/src/stm32f4xx_can.c ****   * @brief  Checks the transmission status of a CAN Frame.
 785:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 786:FWLIB/src/stm32f4xx_can.c ****   * @param  TransmitMailbox: the number of the mailbox that is used for transmission.
 787:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
 788:FWLIB/src/stm32f4xx_can.c ****   * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, 
 789:FWLIB/src/stm32f4xx_can.c ****   *         CAN_TxStatus_Failed in an other case.
 790:FWLIB/src/stm32f4xx_can.c ****   */
 791:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
 792:FWLIB/src/stm32f4xx_can.c **** {
 793:FWLIB/src/stm32f4xx_can.c ****   uint32_t state = 0;
 794:FWLIB/src/stm32f4xx_can.c **** 
 795:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 796:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 797:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 798:FWLIB/src/stm32f4xx_can.c ****  
 799:FWLIB/src/stm32f4xx_can.c ****   switch (TransmitMailbox)
 800:FWLIB/src/stm32f4xx_can.c ****   {
 801:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_0): 
 802:FWLIB/src/stm32f4xx_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 803:FWLIB/src/stm32f4xx_can.c ****       break;
 804:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_1): 
 805:FWLIB/src/stm32f4xx_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 806:FWLIB/src/stm32f4xx_can.c ****       break;
 807:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_2): 
 808:FWLIB/src/stm32f4xx_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 809:FWLIB/src/stm32f4xx_can.c ****       break;
 810:FWLIB/src/stm32f4xx_can.c ****     default:
 811:FWLIB/src/stm32f4xx_can.c ****       state = CAN_TxStatus_Failed;
 812:FWLIB/src/stm32f4xx_can.c ****       break;
 813:FWLIB/src/stm32f4xx_can.c ****   }
 814:FWLIB/src/stm32f4xx_can.c ****   switch (state)
 815:FWLIB/src/stm32f4xx_can.c ****   {
 816:FWLIB/src/stm32f4xx_can.c ****       /* transmit pending  */
 817:FWLIB/src/stm32f4xx_can.c ****     case (0x0): state = CAN_TxStatus_Pending;
 818:FWLIB/src/stm32f4xx_can.c ****       break;
 819:FWLIB/src/stm32f4xx_can.c ****       /* transmit failed  */
 820:FWLIB/src/stm32f4xx_can.c ****      case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 821:FWLIB/src/stm32f4xx_can.c ****       break;
 822:FWLIB/src/stm32f4xx_can.c ****      case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
 823:FWLIB/src/stm32f4xx_can.c ****       break;
 824:FWLIB/src/stm32f4xx_can.c ****      case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
 825:FWLIB/src/stm32f4xx_can.c ****       break;
 826:FWLIB/src/stm32f4xx_can.c ****       /* transmit succeeded  */
 827:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
 828:FWLIB/src/stm32f4xx_can.c ****       break;
ARM GAS  /tmp/ccOHJlyF.s 			page 16


 829:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 830:FWLIB/src/stm32f4xx_can.c ****       break;
 831:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 832:FWLIB/src/stm32f4xx_can.c ****       break;
 833:FWLIB/src/stm32f4xx_can.c ****     default: state = CAN_TxStatus_Failed;
 834:FWLIB/src/stm32f4xx_can.c ****       break;
 835:FWLIB/src/stm32f4xx_can.c ****   }
 836:FWLIB/src/stm32f4xx_can.c ****   return (uint8_t) state;
 837:FWLIB/src/stm32f4xx_can.c **** }
 838:FWLIB/src/stm32f4xx_can.c **** 
 839:FWLIB/src/stm32f4xx_can.c **** /**
 840:FWLIB/src/stm32f4xx_can.c ****   * @brief  Cancels a transmit request.
 841:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 842:FWLIB/src/stm32f4xx_can.c ****   * @param  Mailbox: Mailbox number.
 843:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
 844:FWLIB/src/stm32f4xx_can.c ****   * @retval None
 845:FWLIB/src/stm32f4xx_can.c ****   */
 846:FWLIB/src/stm32f4xx_can.c **** void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
 847:FWLIB/src/stm32f4xx_can.c **** {
 848:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 849:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 850:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
 851:FWLIB/src/stm32f4xx_can.c ****   /* abort transmission */
 852:FWLIB/src/stm32f4xx_can.c ****   switch (Mailbox)
 853:FWLIB/src/stm32f4xx_can.c ****   {
 854:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 855:FWLIB/src/stm32f4xx_can.c ****       break;
 856:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 857:FWLIB/src/stm32f4xx_can.c ****       break;
 858:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 859:FWLIB/src/stm32f4xx_can.c ****       break;
 860:FWLIB/src/stm32f4xx_can.c ****     default:
 861:FWLIB/src/stm32f4xx_can.c ****       break;
 862:FWLIB/src/stm32f4xx_can.c ****   }
 863:FWLIB/src/stm32f4xx_can.c **** }
 864:FWLIB/src/stm32f4xx_can.c **** /**
 865:FWLIB/src/stm32f4xx_can.c ****   * @}
 866:FWLIB/src/stm32f4xx_can.c ****   */
 867:FWLIB/src/stm32f4xx_can.c **** 
 868:FWLIB/src/stm32f4xx_can.c **** 
 869:FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Group3 CAN Frames Reception functions
 870:FWLIB/src/stm32f4xx_can.c ****  *  @brief    CAN Frames Reception functions 
 871:FWLIB/src/stm32f4xx_can.c ****  *
 872:FWLIB/src/stm32f4xx_can.c **** @verbatim    
 873:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
 874:FWLIB/src/stm32f4xx_can.c ****                 ##### CAN Frames Reception functions #####
 875:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================  
 876:FWLIB/src/stm32f4xx_can.c ****     [..] This section provides functions allowing to 
 877:FWLIB/src/stm32f4xx_can.c ****       (+) Receive a correct CAN frame
 878:FWLIB/src/stm32f4xx_can.c ****       (+) Release a specified receive FIFO (2 FIFOs are available)
 879:FWLIB/src/stm32f4xx_can.c ****       (+) Return the number of the pending received CAN frames
 880:FWLIB/src/stm32f4xx_can.c ****    
 881:FWLIB/src/stm32f4xx_can.c **** @endverbatim
 882:FWLIB/src/stm32f4xx_can.c ****   * @{
 883:FWLIB/src/stm32f4xx_can.c ****   */
 884:FWLIB/src/stm32f4xx_can.c **** 
 885:FWLIB/src/stm32f4xx_can.c **** /**
ARM GAS  /tmp/ccOHJlyF.s 			page 17


 886:FWLIB/src/stm32f4xx_can.c ****   * @brief  Receives a correct CAN frame.
 887:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 888:FWLIB/src/stm32f4xx_can.c ****   * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
 889:FWLIB/src/stm32f4xx_can.c ****   * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
 890:FWLIB/src/stm32f4xx_can.c ****   *         CAN DLC, CAN data and FMI number.
 891:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
 892:FWLIB/src/stm32f4xx_can.c ****   * @retval None
 893:FWLIB/src/stm32f4xx_can.c ****   */
 894:FWLIB/src/stm32f4xx_can.c **** void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
 895:FWLIB/src/stm32f4xx_can.c **** {
 896:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 897:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 898:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 899:FWLIB/src/stm32f4xx_can.c ****   /* Get the Id */
 900:FWLIB/src/stm32f4xx_can.c ****   RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 901:FWLIB/src/stm32f4xx_can.c ****   if (RxMessage->IDE == CAN_Id_Standard)
 902:FWLIB/src/stm32f4xx_can.c ****   {
 903:FWLIB/src/stm32f4xx_can.c ****     RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 904:FWLIB/src/stm32f4xx_can.c ****   }
 905:FWLIB/src/stm32f4xx_can.c ****   else
 906:FWLIB/src/stm32f4xx_can.c ****   {
 907:FWLIB/src/stm32f4xx_can.c ****     RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 908:FWLIB/src/stm32f4xx_can.c ****   }
 909:FWLIB/src/stm32f4xx_can.c ****   
 910:FWLIB/src/stm32f4xx_can.c ****   RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 911:FWLIB/src/stm32f4xx_can.c ****   /* Get the DLC */
 912:FWLIB/src/stm32f4xx_can.c ****   RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 913:FWLIB/src/stm32f4xx_can.c ****   /* Get the FMI */
 914:FWLIB/src/stm32f4xx_can.c ****   RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 915:FWLIB/src/stm32f4xx_can.c ****   /* Get the data field */
 916:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 917:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 918:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 919:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 920:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 921:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 922:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 923:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 924:FWLIB/src/stm32f4xx_can.c ****   /* Release the FIFO */
 925:FWLIB/src/stm32f4xx_can.c ****   /* Release FIFO0 */
 926:FWLIB/src/stm32f4xx_can.c ****   if (FIFONumber == CAN_FIFO0)
 927:FWLIB/src/stm32f4xx_can.c ****   {
 928:FWLIB/src/stm32f4xx_can.c ****     CANx->RF0R |= CAN_RF0R_RFOM0;
 929:FWLIB/src/stm32f4xx_can.c ****   }
 930:FWLIB/src/stm32f4xx_can.c ****   /* Release FIFO1 */
 931:FWLIB/src/stm32f4xx_can.c ****   else /* FIFONumber == CAN_FIFO1 */
 932:FWLIB/src/stm32f4xx_can.c ****   {
 933:FWLIB/src/stm32f4xx_can.c ****     CANx->RF1R |= CAN_RF1R_RFOM1;
 934:FWLIB/src/stm32f4xx_can.c ****   }
 935:FWLIB/src/stm32f4xx_can.c **** }
 936:FWLIB/src/stm32f4xx_can.c **** 
 937:FWLIB/src/stm32f4xx_can.c **** /**
 938:FWLIB/src/stm32f4xx_can.c ****   * @brief  Releases the specified receive FIFO.
 939:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 940:FWLIB/src/stm32f4xx_can.c ****   * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
 941:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
 942:FWLIB/src/stm32f4xx_can.c ****   * @retval None
ARM GAS  /tmp/ccOHJlyF.s 			page 18


 943:FWLIB/src/stm32f4xx_can.c ****   */
 944:FWLIB/src/stm32f4xx_can.c **** void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
 945:FWLIB/src/stm32f4xx_can.c **** {
 946:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 947:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 948:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 949:FWLIB/src/stm32f4xx_can.c ****   /* Release FIFO0 */
 950:FWLIB/src/stm32f4xx_can.c ****   if (FIFONumber == CAN_FIFO0)
 951:FWLIB/src/stm32f4xx_can.c ****   {
 952:FWLIB/src/stm32f4xx_can.c ****     CANx->RF0R |= CAN_RF0R_RFOM0;
 953:FWLIB/src/stm32f4xx_can.c ****   }
 954:FWLIB/src/stm32f4xx_can.c ****   /* Release FIFO1 */
 955:FWLIB/src/stm32f4xx_can.c ****   else /* FIFONumber == CAN_FIFO1 */
 956:FWLIB/src/stm32f4xx_can.c ****   {
 957:FWLIB/src/stm32f4xx_can.c ****     CANx->RF1R |= CAN_RF1R_RFOM1;
 958:FWLIB/src/stm32f4xx_can.c ****   }
 959:FWLIB/src/stm32f4xx_can.c **** }
 960:FWLIB/src/stm32f4xx_can.c **** 
 961:FWLIB/src/stm32f4xx_can.c **** /**
 962:FWLIB/src/stm32f4xx_can.c ****   * @brief  Returns the number of pending received messages.
 963:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 964:FWLIB/src/stm32f4xx_can.c ****   * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
 965:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
 966:FWLIB/src/stm32f4xx_can.c ****   * @retval NbMessage : which is the number of pending message.
 967:FWLIB/src/stm32f4xx_can.c ****   */
 968:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
 969:FWLIB/src/stm32f4xx_can.c **** {
 970:FWLIB/src/stm32f4xx_can.c ****   uint8_t message_pending=0;
 971:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 972:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 973:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 974:FWLIB/src/stm32f4xx_can.c ****   if (FIFONumber == CAN_FIFO0)
 975:FWLIB/src/stm32f4xx_can.c ****   {
 976:FWLIB/src/stm32f4xx_can.c ****     message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 977:FWLIB/src/stm32f4xx_can.c ****   }
 978:FWLIB/src/stm32f4xx_can.c ****   else if (FIFONumber == CAN_FIFO1)
 979:FWLIB/src/stm32f4xx_can.c ****   {
 980:FWLIB/src/stm32f4xx_can.c ****     message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 981:FWLIB/src/stm32f4xx_can.c ****   }
 982:FWLIB/src/stm32f4xx_can.c ****   else
 983:FWLIB/src/stm32f4xx_can.c ****   {
 984:FWLIB/src/stm32f4xx_can.c ****     message_pending = 0;
 985:FWLIB/src/stm32f4xx_can.c ****   }
 986:FWLIB/src/stm32f4xx_can.c ****   return message_pending;
 987:FWLIB/src/stm32f4xx_can.c **** }
 988:FWLIB/src/stm32f4xx_can.c **** /**
 989:FWLIB/src/stm32f4xx_can.c ****   * @}
 990:FWLIB/src/stm32f4xx_can.c ****   */
 991:FWLIB/src/stm32f4xx_can.c **** 
 992:FWLIB/src/stm32f4xx_can.c **** 
 993:FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Group4 CAN Operation modes functions
 994:FWLIB/src/stm32f4xx_can.c ****  *  @brief    CAN Operation modes functions 
 995:FWLIB/src/stm32f4xx_can.c ****  *
 996:FWLIB/src/stm32f4xx_can.c **** @verbatim    
 997:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
 998:FWLIB/src/stm32f4xx_can.c ****                     ##### CAN Operation modes functions #####
 999:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================  
ARM GAS  /tmp/ccOHJlyF.s 			page 19


1000:FWLIB/src/stm32f4xx_can.c ****     [..] This section provides functions allowing to select the CAN Operation modes
1001:FWLIB/src/stm32f4xx_can.c ****       (+) sleep mode
1002:FWLIB/src/stm32f4xx_can.c ****       (+) normal mode 
1003:FWLIB/src/stm32f4xx_can.c ****       (+) initialization mode
1004:FWLIB/src/stm32f4xx_can.c ****    
1005:FWLIB/src/stm32f4xx_can.c **** @endverbatim
1006:FWLIB/src/stm32f4xx_can.c ****   * @{
1007:FWLIB/src/stm32f4xx_can.c ****   */
1008:FWLIB/src/stm32f4xx_can.c ****   
1009:FWLIB/src/stm32f4xx_can.c ****   
1010:FWLIB/src/stm32f4xx_can.c **** /**
1011:FWLIB/src/stm32f4xx_can.c ****   * @brief  Selects the CAN Operation mode.
1012:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_OperatingMode: CAN Operating Mode.
1013:FWLIB/src/stm32f4xx_can.c ****   *         This parameter can be one of @ref CAN_OperatingMode_TypeDef enumeration.
1014:FWLIB/src/stm32f4xx_can.c ****   * @retval status of the requested mode which can be 
1015:FWLIB/src/stm32f4xx_can.c ****   *         - CAN_ModeStatus_Failed:  CAN failed entering the specific mode 
1016:FWLIB/src/stm32f4xx_can.c ****   *         - CAN_ModeStatus_Success: CAN Succeed entering the specific mode 
1017:FWLIB/src/stm32f4xx_can.c ****   */
1018:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
1019:FWLIB/src/stm32f4xx_can.c **** {
1020:FWLIB/src/stm32f4xx_can.c ****   uint8_t status = CAN_ModeStatus_Failed;
1021:FWLIB/src/stm32f4xx_can.c ****   
1022:FWLIB/src/stm32f4xx_can.c ****   /* Timeout for INAK or also for SLAK bits*/
1023:FWLIB/src/stm32f4xx_can.c ****   uint32_t timeout = INAK_TIMEOUT; 
1024:FWLIB/src/stm32f4xx_can.c **** 
1025:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1026:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1027:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));
1028:FWLIB/src/stm32f4xx_can.c **** 
1029:FWLIB/src/stm32f4xx_can.c ****   if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
1030:FWLIB/src/stm32f4xx_can.c ****   {
1031:FWLIB/src/stm32f4xx_can.c ****     /* Request initialisation */
1032:FWLIB/src/stm32f4xx_can.c ****     CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
1033:FWLIB/src/stm32f4xx_can.c **** 
1034:FWLIB/src/stm32f4xx_can.c ****     /* Wait the acknowledge */
1035:FWLIB/src/stm32f4xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
1036:FWLIB/src/stm32f4xx_can.c ****     {
1037:FWLIB/src/stm32f4xx_can.c ****       timeout--;
1038:FWLIB/src/stm32f4xx_can.c ****     }
1039:FWLIB/src/stm32f4xx_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
1040:FWLIB/src/stm32f4xx_can.c ****     {
1041:FWLIB/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Failed;
1042:FWLIB/src/stm32f4xx_can.c ****     }
1043:FWLIB/src/stm32f4xx_can.c ****     else
1044:FWLIB/src/stm32f4xx_can.c ****     {
1045:FWLIB/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Success;
1046:FWLIB/src/stm32f4xx_can.c ****     }
1047:FWLIB/src/stm32f4xx_can.c ****   }
1048:FWLIB/src/stm32f4xx_can.c ****   else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
1049:FWLIB/src/stm32f4xx_can.c ****   {
1050:FWLIB/src/stm32f4xx_can.c ****     /* Request leave initialisation and sleep mode  and enter Normal mode */
1051:FWLIB/src/stm32f4xx_can.c ****     CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
1052:FWLIB/src/stm32f4xx_can.c **** 
1053:FWLIB/src/stm32f4xx_can.c ****     /* Wait the acknowledge */
1054:FWLIB/src/stm32f4xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
1055:FWLIB/src/stm32f4xx_can.c ****     {
1056:FWLIB/src/stm32f4xx_can.c ****       timeout--;
ARM GAS  /tmp/ccOHJlyF.s 			page 20


1057:FWLIB/src/stm32f4xx_can.c ****     }
1058:FWLIB/src/stm32f4xx_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != 0)
1059:FWLIB/src/stm32f4xx_can.c ****     {
1060:FWLIB/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Failed;
1061:FWLIB/src/stm32f4xx_can.c ****     }
1062:FWLIB/src/stm32f4xx_can.c ****     else
1063:FWLIB/src/stm32f4xx_can.c ****     {
1064:FWLIB/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Success;
1065:FWLIB/src/stm32f4xx_can.c ****     }
1066:FWLIB/src/stm32f4xx_can.c ****   }
1067:FWLIB/src/stm32f4xx_can.c ****   else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
1068:FWLIB/src/stm32f4xx_can.c ****   {
1069:FWLIB/src/stm32f4xx_can.c ****     /* Request Sleep mode */
1070:FWLIB/src/stm32f4xx_can.c ****     CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
1071:FWLIB/src/stm32f4xx_can.c **** 
1072:FWLIB/src/stm32f4xx_can.c ****     /* Wait the acknowledge */
1073:FWLIB/src/stm32f4xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
1074:FWLIB/src/stm32f4xx_can.c ****     {
1075:FWLIB/src/stm32f4xx_can.c ****       timeout--;
1076:FWLIB/src/stm32f4xx_can.c ****     }
1077:FWLIB/src/stm32f4xx_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
1078:FWLIB/src/stm32f4xx_can.c ****     {
1079:FWLIB/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Failed;
1080:FWLIB/src/stm32f4xx_can.c ****     }
1081:FWLIB/src/stm32f4xx_can.c ****     else
1082:FWLIB/src/stm32f4xx_can.c ****     {
1083:FWLIB/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Success;
1084:FWLIB/src/stm32f4xx_can.c ****     }
1085:FWLIB/src/stm32f4xx_can.c ****   }
1086:FWLIB/src/stm32f4xx_can.c ****   else
1087:FWLIB/src/stm32f4xx_can.c ****   {
1088:FWLIB/src/stm32f4xx_can.c ****     status = CAN_ModeStatus_Failed;
1089:FWLIB/src/stm32f4xx_can.c ****   }
1090:FWLIB/src/stm32f4xx_can.c **** 
1091:FWLIB/src/stm32f4xx_can.c ****   return  (uint8_t) status;
1092:FWLIB/src/stm32f4xx_can.c **** }
1093:FWLIB/src/stm32f4xx_can.c **** 
1094:FWLIB/src/stm32f4xx_can.c **** /**
1095:FWLIB/src/stm32f4xx_can.c ****   * @brief  Enters the Sleep (low power) mode.
1096:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1097:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
1098:FWLIB/src/stm32f4xx_can.c ****   * @retval CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed otherwise.
1099:FWLIB/src/stm32f4xx_can.c ****   */
1100:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_Sleep(CAN_TypeDef* CANx)
1101:FWLIB/src/stm32f4xx_can.c **** {
1102:FWLIB/src/stm32f4xx_can.c ****   uint8_t sleepstatus = CAN_Sleep_Failed;
1103:FWLIB/src/stm32f4xx_can.c ****   
1104:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1105:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1106:FWLIB/src/stm32f4xx_can.c ****     
1107:FWLIB/src/stm32f4xx_can.c ****   /* Request Sleep mode */
1108:FWLIB/src/stm32f4xx_can.c ****    CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
1109:FWLIB/src/stm32f4xx_can.c ****    
1110:FWLIB/src/stm32f4xx_can.c ****   /* Sleep mode status */
1111:FWLIB/src/stm32f4xx_can.c ****   if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
1112:FWLIB/src/stm32f4xx_can.c ****   {
1113:FWLIB/src/stm32f4xx_can.c ****     /* Sleep mode not entered */
ARM GAS  /tmp/ccOHJlyF.s 			page 21


1114:FWLIB/src/stm32f4xx_can.c ****     sleepstatus =  CAN_Sleep_Ok;
1115:FWLIB/src/stm32f4xx_can.c ****   }
1116:FWLIB/src/stm32f4xx_can.c ****   /* return sleep mode status */
1117:FWLIB/src/stm32f4xx_can.c ****    return (uint8_t)sleepstatus;
1118:FWLIB/src/stm32f4xx_can.c **** }
1119:FWLIB/src/stm32f4xx_can.c **** 
1120:FWLIB/src/stm32f4xx_can.c **** /**
1121:FWLIB/src/stm32f4xx_can.c ****   * @brief  Wakes up the CAN peripheral from sleep mode .
1122:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1123:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
1124:FWLIB/src/stm32f4xx_can.c ****   * @retval CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed otherwise.
1125:FWLIB/src/stm32f4xx_can.c ****   */
1126:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
1127:FWLIB/src/stm32f4xx_can.c **** {
1128:FWLIB/src/stm32f4xx_can.c ****   uint32_t wait_slak = SLAK_TIMEOUT;
1129:FWLIB/src/stm32f4xx_can.c ****   uint8_t wakeupstatus = CAN_WakeUp_Failed;
1130:FWLIB/src/stm32f4xx_can.c ****   
1131:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1132:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1133:FWLIB/src/stm32f4xx_can.c ****     
1134:FWLIB/src/stm32f4xx_can.c ****   /* Wake up request */
1135:FWLIB/src/stm32f4xx_can.c ****   CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
1136:FWLIB/src/stm32f4xx_can.c ****     
1137:FWLIB/src/stm32f4xx_can.c ****   /* Sleep mode status */
1138:FWLIB/src/stm32f4xx_can.c ****   while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
1139:FWLIB/src/stm32f4xx_can.c ****   {
1140:FWLIB/src/stm32f4xx_can.c ****    wait_slak--;
1141:FWLIB/src/stm32f4xx_can.c ****   }
1142:FWLIB/src/stm32f4xx_can.c ****   if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
1143:FWLIB/src/stm32f4xx_can.c ****   {
1144:FWLIB/src/stm32f4xx_can.c ****    /* wake up done : Sleep mode exited */
1145:FWLIB/src/stm32f4xx_can.c ****     wakeupstatus = CAN_WakeUp_Ok;
1146:FWLIB/src/stm32f4xx_can.c ****   }
1147:FWLIB/src/stm32f4xx_can.c ****   /* return wakeup status */
1148:FWLIB/src/stm32f4xx_can.c ****   return (uint8_t)wakeupstatus;
1149:FWLIB/src/stm32f4xx_can.c **** }
1150:FWLIB/src/stm32f4xx_can.c **** /**
1151:FWLIB/src/stm32f4xx_can.c ****   * @}
1152:FWLIB/src/stm32f4xx_can.c ****   */
1153:FWLIB/src/stm32f4xx_can.c **** 
1154:FWLIB/src/stm32f4xx_can.c **** 
1155:FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Group5 CAN Bus Error management functions
1156:FWLIB/src/stm32f4xx_can.c ****  *  @brief    CAN Bus Error management functions 
1157:FWLIB/src/stm32f4xx_can.c ****  *
1158:FWLIB/src/stm32f4xx_can.c **** @verbatim    
1159:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
1160:FWLIB/src/stm32f4xx_can.c ****                 ##### CAN Bus Error management functions #####
1161:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================  
1162:FWLIB/src/stm32f4xx_can.c ****     [..] This section provides functions allowing to 
1163:FWLIB/src/stm32f4xx_can.c ****       (+) Return the CANx's last error code (LEC)
1164:FWLIB/src/stm32f4xx_can.c ****       (+) Return the CANx Receive Error Counter (REC)
1165:FWLIB/src/stm32f4xx_can.c ****       (+) Return the LSB of the 9-bit CANx Transmit Error Counter(TEC).
1166:FWLIB/src/stm32f4xx_can.c ****    
1167:FWLIB/src/stm32f4xx_can.c ****       -@- If TEC is greater than 255, The CAN is in bus-off state.
1168:FWLIB/src/stm32f4xx_can.c ****       -@- if REC or TEC are greater than 96, an Error warning flag occurs.
1169:FWLIB/src/stm32f4xx_can.c ****       -@- if REC or TEC are greater than 127, an Error Passive Flag occurs.
1170:FWLIB/src/stm32f4xx_can.c ****                         
ARM GAS  /tmp/ccOHJlyF.s 			page 22


1171:FWLIB/src/stm32f4xx_can.c **** @endverbatim
1172:FWLIB/src/stm32f4xx_can.c ****   * @{
1173:FWLIB/src/stm32f4xx_can.c ****   */
1174:FWLIB/src/stm32f4xx_can.c ****   
1175:FWLIB/src/stm32f4xx_can.c **** /**
1176:FWLIB/src/stm32f4xx_can.c ****   * @brief  Returns the CANx's last error code (LEC).
1177:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1178:FWLIB/src/stm32f4xx_can.c ****   * @retval Error code: 
1179:FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_NoErr: No Error  
1180:FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_StuffErr: Stuff Error
1181:FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_FormErr: Form Error
1182:FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_ACKErr : Acknowledgment Error
1183:FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_BitRecessiveErr: Bit Recessive Error
1184:FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_BitDominantErr: Bit Dominant Error
1185:FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_CRCErr: CRC Error
1186:FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_SoftwareSetErr: Software Set Error  
1187:FWLIB/src/stm32f4xx_can.c ****   */
1188:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
1189:FWLIB/src/stm32f4xx_can.c **** {
1190:FWLIB/src/stm32f4xx_can.c ****   uint8_t errorcode=0;
1191:FWLIB/src/stm32f4xx_can.c ****   
1192:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1193:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1194:FWLIB/src/stm32f4xx_can.c ****   
1195:FWLIB/src/stm32f4xx_can.c ****   /* Get the error code*/
1196:FWLIB/src/stm32f4xx_can.c ****   errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
1197:FWLIB/src/stm32f4xx_can.c ****   
1198:FWLIB/src/stm32f4xx_can.c ****   /* Return the error code*/
1199:FWLIB/src/stm32f4xx_can.c ****   return errorcode;
1200:FWLIB/src/stm32f4xx_can.c **** }
1201:FWLIB/src/stm32f4xx_can.c **** 
1202:FWLIB/src/stm32f4xx_can.c **** /**
1203:FWLIB/src/stm32f4xx_can.c ****   * @brief  Returns the CANx Receive Error Counter (REC).
1204:FWLIB/src/stm32f4xx_can.c ****   * @note   In case of an error during reception, this counter is incremented 
1205:FWLIB/src/stm32f4xx_can.c ****   *         by 1 or by 8 depending on the error condition as defined by the CAN 
1206:FWLIB/src/stm32f4xx_can.c ****   *         standard. After every successful reception, the counter is 
1207:FWLIB/src/stm32f4xx_can.c ****   *         decremented by 1 or reset to 120 if its value was higher than 128. 
1208:FWLIB/src/stm32f4xx_can.c ****   *         When the counter value exceeds 127, the CAN controller enters the 
1209:FWLIB/src/stm32f4xx_can.c ****   *         error passive state.  
1210:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1211:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
1212:FWLIB/src/stm32f4xx_can.c ****   * @retval CAN Receive Error Counter. 
1213:FWLIB/src/stm32f4xx_can.c ****   */
1214:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
1215:FWLIB/src/stm32f4xx_can.c **** {
1216:FWLIB/src/stm32f4xx_can.c ****   uint8_t counter=0;
1217:FWLIB/src/stm32f4xx_can.c ****   
1218:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1219:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1220:FWLIB/src/stm32f4xx_can.c ****   
1221:FWLIB/src/stm32f4xx_can.c ****   /* Get the Receive Error Counter*/
1222:FWLIB/src/stm32f4xx_can.c ****   counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
1223:FWLIB/src/stm32f4xx_can.c ****   
1224:FWLIB/src/stm32f4xx_can.c ****   /* Return the Receive Error Counter*/
1225:FWLIB/src/stm32f4xx_can.c ****   return counter;
1226:FWLIB/src/stm32f4xx_can.c **** }
1227:FWLIB/src/stm32f4xx_can.c **** 
ARM GAS  /tmp/ccOHJlyF.s 			page 23


1228:FWLIB/src/stm32f4xx_can.c **** 
1229:FWLIB/src/stm32f4xx_can.c **** /**
1230:FWLIB/src/stm32f4xx_can.c ****   * @brief  Returns the LSB of the 9-bit CANx Transmit Error Counter(TEC).
1231:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1232:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
1233:FWLIB/src/stm32f4xx_can.c ****   * @retval LSB of the 9-bit CAN Transmit Error Counter. 
1234:FWLIB/src/stm32f4xx_can.c ****   */
1235:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
1236:FWLIB/src/stm32f4xx_can.c **** {
1237:FWLIB/src/stm32f4xx_can.c ****   uint8_t counter=0;
1238:FWLIB/src/stm32f4xx_can.c ****   
1239:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1240:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1241:FWLIB/src/stm32f4xx_can.c ****   
1242:FWLIB/src/stm32f4xx_can.c ****   /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
1243:FWLIB/src/stm32f4xx_can.c ****   counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
1244:FWLIB/src/stm32f4xx_can.c ****   
1245:FWLIB/src/stm32f4xx_can.c ****   /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
1246:FWLIB/src/stm32f4xx_can.c ****   return counter;
1247:FWLIB/src/stm32f4xx_can.c **** }
1248:FWLIB/src/stm32f4xx_can.c **** /**
1249:FWLIB/src/stm32f4xx_can.c ****   * @}
1250:FWLIB/src/stm32f4xx_can.c ****   */
1251:FWLIB/src/stm32f4xx_can.c **** 
1252:FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Group6 Interrupts and flags management functions
1253:FWLIB/src/stm32f4xx_can.c ****  *  @brief   Interrupts and flags management functions
1254:FWLIB/src/stm32f4xx_can.c ****  *
1255:FWLIB/src/stm32f4xx_can.c **** @verbatim   
1256:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
1257:FWLIB/src/stm32f4xx_can.c ****               ##### Interrupts and flags management functions #####
1258:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================  
1259:FWLIB/src/stm32f4xx_can.c **** 
1260:FWLIB/src/stm32f4xx_can.c ****      [..] This section provides functions allowing to configure the CAN Interrupts 
1261:FWLIB/src/stm32f4xx_can.c ****           and to get the status and clear flags and Interrupts pending bits.
1262:FWLIB/src/stm32f4xx_can.c ****   
1263:FWLIB/src/stm32f4xx_can.c ****           The CAN provides 14 Interrupts sources and 15 Flags:
1264:FWLIB/src/stm32f4xx_can.c **** 
1265:FWLIB/src/stm32f4xx_can.c ****    
1266:FWLIB/src/stm32f4xx_can.c ****   *** Flags ***
1267:FWLIB/src/stm32f4xx_can.c ****   =============
1268:FWLIB/src/stm32f4xx_can.c ****     [..] The 15 flags can be divided on 4 groups: 
1269:FWLIB/src/stm32f4xx_can.c **** 
1270:FWLIB/src/stm32f4xx_can.c ****       (+) Transmit Flags
1271:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_RQCP0, 
1272:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_RQCP1, 
1273:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_RQCP2  : Request completed MailBoxes 0, 1 and 2  Flags
1274:FWLIB/src/stm32f4xx_can.c ****                                Set when the last request (transmit or abort)
1275:FWLIB/src/stm32f4xx_can.c ****                                has been performed. 
1276:FWLIB/src/stm32f4xx_can.c **** 
1277:FWLIB/src/stm32f4xx_can.c ****       (+) Receive Flags
1278:FWLIB/src/stm32f4xx_can.c **** 
1279:FWLIB/src/stm32f4xx_can.c **** 
1280:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_FMP0,
1281:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_FMP1   : FIFO 0 and 1 Message Pending Flags 
1282:FWLIB/src/stm32f4xx_can.c ****                                set to signal that messages are pending in the receive 
1283:FWLIB/src/stm32f4xx_can.c ****                                FIFO.
1284:FWLIB/src/stm32f4xx_can.c ****                                These Flags are cleared only by hardware. 
ARM GAS  /tmp/ccOHJlyF.s 			page 24


1285:FWLIB/src/stm32f4xx_can.c **** 
1286:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_FF0,
1287:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_FF1    : FIFO 0 and 1 Full Flags
1288:FWLIB/src/stm32f4xx_can.c ****                                set when three messages are stored in the selected 
1289:FWLIB/src/stm32f4xx_can.c ****                                FIFO.                        
1290:FWLIB/src/stm32f4xx_can.c **** 
1291:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_FOV0              
1292:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_FOV1   : FIFO 0 and 1 Overrun Flags
1293:FWLIB/src/stm32f4xx_can.c ****                                set when a new message has been received and passed 
1294:FWLIB/src/stm32f4xx_can.c ****                                the filter while the FIFO was full.         
1295:FWLIB/src/stm32f4xx_can.c **** 
1296:FWLIB/src/stm32f4xx_can.c ****       (+) Operating Mode Flags
1297:FWLIB/src/stm32f4xx_can.c **** 
1298:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_WKU    : Wake up Flag
1299:FWLIB/src/stm32f4xx_can.c ****                                set to signal that a SOF bit has been detected while 
1300:FWLIB/src/stm32f4xx_can.c ****                                the CAN hardware was in Sleep mode. 
1301:FWLIB/src/stm32f4xx_can.c ****         
1302:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_SLAK   : Sleep acknowledge Flag
1303:FWLIB/src/stm32f4xx_can.c ****                                Set to signal that the CAN has entered Sleep Mode. 
1304:FWLIB/src/stm32f4xx_can.c ****     
1305:FWLIB/src/stm32f4xx_can.c ****       (+) Error Flags
1306:FWLIB/src/stm32f4xx_can.c **** 
1307:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_EWG    : Error Warning Flag
1308:FWLIB/src/stm32f4xx_can.c ****                                Set when the warning limit has been reached (Receive 
1309:FWLIB/src/stm32f4xx_can.c ****                                Error Counter or Transmit Error Counter greater than 96). 
1310:FWLIB/src/stm32f4xx_can.c ****                                This Flag is cleared only by hardware.
1311:FWLIB/src/stm32f4xx_can.c ****                             
1312:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_EPV    : Error Passive Flag
1313:FWLIB/src/stm32f4xx_can.c ****                                Set when the Error Passive limit has been reached 
1314:FWLIB/src/stm32f4xx_can.c ****                                (Receive Error Counter or Transmit Error Counter 
1315:FWLIB/src/stm32f4xx_can.c ****                                greater than 127).
1316:FWLIB/src/stm32f4xx_can.c ****                                This Flag is cleared only by hardware.
1317:FWLIB/src/stm32f4xx_can.c ****                              
1318:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_BOF    : Bus-Off Flag
1319:FWLIB/src/stm32f4xx_can.c ****                                set when CAN enters the bus-off state. The bus-off 
1320:FWLIB/src/stm32f4xx_can.c ****                                state is entered on TEC overflow, greater than 255.
1321:FWLIB/src/stm32f4xx_can.c ****                                This Flag is cleared only by hardware.
1322:FWLIB/src/stm32f4xx_can.c ****                                    
1323:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_LEC    : Last error code Flag
1324:FWLIB/src/stm32f4xx_can.c ****                                set If a message has been transferred (reception or
1325:FWLIB/src/stm32f4xx_can.c ****                                transmission) with error, and the error code is hold.              
1326:FWLIB/src/stm32f4xx_can.c ****                            
1327:FWLIB/src/stm32f4xx_can.c ****   *** Interrupts ***
1328:FWLIB/src/stm32f4xx_can.c ****   ==================
1329:FWLIB/src/stm32f4xx_can.c ****     [..] The 14 interrupts can be divided on 4 groups: 
1330:FWLIB/src/stm32f4xx_can.c ****   
1331:FWLIB/src/stm32f4xx_can.c ****       (+) Transmit interrupt
1332:FWLIB/src/stm32f4xx_can.c ****   
1333:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_TME   :  Transmit mailbox empty Interrupt
1334:FWLIB/src/stm32f4xx_can.c ****                              if enabled, this interrupt source is pending when 
1335:FWLIB/src/stm32f4xx_can.c ****                              no transmit request are pending for Tx mailboxes.      
1336:FWLIB/src/stm32f4xx_can.c **** 
1337:FWLIB/src/stm32f4xx_can.c ****       (+) Receive Interrupts
1338:FWLIB/src/stm32f4xx_can.c ****          
1339:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_FMP0,
1340:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_FMP1    :  FIFO 0 and FIFO1 message pending Interrupts
1341:FWLIB/src/stm32f4xx_can.c ****                                if enabled, these interrupt sources are pending 
ARM GAS  /tmp/ccOHJlyF.s 			page 25


1342:FWLIB/src/stm32f4xx_can.c ****                                when messages are pending in the receive FIFO.
1343:FWLIB/src/stm32f4xx_can.c ****                                The corresponding interrupt pending bits are cleared 
1344:FWLIB/src/stm32f4xx_can.c ****                                only by hardware.
1345:FWLIB/src/stm32f4xx_can.c ****                 
1346:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_FF0,              
1347:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_FF1     :  FIFO 0 and FIFO1 full Interrupts
1348:FWLIB/src/stm32f4xx_can.c ****                                if enabled, these interrupt sources are pending 
1349:FWLIB/src/stm32f4xx_can.c ****                                when three messages are stored in the selected FIFO.
1350:FWLIB/src/stm32f4xx_can.c ****         
1351:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_FOV0,        
1352:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_FOV1    :  FIFO 0 and FIFO1 overrun Interrupts        
1353:FWLIB/src/stm32f4xx_can.c ****                                if enabled, these interrupt sources are pending 
1354:FWLIB/src/stm32f4xx_can.c ****                                when a new message has been received and passed 
1355:FWLIB/src/stm32f4xx_can.c ****                                the filter while the FIFO was full.
1356:FWLIB/src/stm32f4xx_can.c **** 
1357:FWLIB/src/stm32f4xx_can.c ****       (+) Operating Mode Interrupts
1358:FWLIB/src/stm32f4xx_can.c ****          
1359:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_WKU     :  Wake-up Interrupt
1360:FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when 
1361:FWLIB/src/stm32f4xx_can.c ****                                a SOF bit has been detected while the CAN hardware 
1362:FWLIB/src/stm32f4xx_can.c ****                                was in Sleep mode.
1363:FWLIB/src/stm32f4xx_can.c ****                                   
1364:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_SLK     :  Sleep acknowledge Interrupt
1365:FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when 
1366:FWLIB/src/stm32f4xx_can.c ****                                the CAN has entered Sleep Mode.       
1367:FWLIB/src/stm32f4xx_can.c **** 
1368:FWLIB/src/stm32f4xx_can.c ****       (+) Error Interrupts 
1369:FWLIB/src/stm32f4xx_can.c ****         
1370:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_EWG     :  Error warning Interrupt 
1371:FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when
1372:FWLIB/src/stm32f4xx_can.c ****                                the warning limit has been reached (Receive Error 
1373:FWLIB/src/stm32f4xx_can.c ****                                Counter or Transmit Error Counter=96). 
1374:FWLIB/src/stm32f4xx_can.c ****                                
1375:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_EPV     :  Error passive Interrupt        
1376:FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when
1377:FWLIB/src/stm32f4xx_can.c ****                                the Error Passive limit has been reached (Receive 
1378:FWLIB/src/stm32f4xx_can.c ****                                Error Counter or Transmit Error Counter>127).
1379:FWLIB/src/stm32f4xx_can.c ****                           
1380:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_BOF     :  Bus-off Interrupt
1381:FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when
1382:FWLIB/src/stm32f4xx_can.c ****                                CAN enters the bus-off state. The bus-off state is 
1383:FWLIB/src/stm32f4xx_can.c ****                                entered on TEC overflow, greater than 255.
1384:FWLIB/src/stm32f4xx_can.c ****                                This Flag is cleared only by hardware.
1385:FWLIB/src/stm32f4xx_can.c ****                                   
1386:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_LEC     :  Last error code Interrupt        
1387:FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending  when
1388:FWLIB/src/stm32f4xx_can.c ****                                a message has been transferred (reception or
1389:FWLIB/src/stm32f4xx_can.c ****                                transmission) with error, and the error code is hold.
1390:FWLIB/src/stm32f4xx_can.c ****                           
1391:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_ERR     :  Error Interrupt
1392:FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when 
1393:FWLIB/src/stm32f4xx_can.c ****                                an error condition is pending.      
1394:FWLIB/src/stm32f4xx_can.c ****                       
1395:FWLIB/src/stm32f4xx_can.c ****     [..] Managing the CAN controller events :
1396:FWLIB/src/stm32f4xx_can.c ****  
1397:FWLIB/src/stm32f4xx_can.c ****          The user should identify which mode will be used in his application to 
1398:FWLIB/src/stm32f4xx_can.c ****          manage the CAN controller events: Polling mode or Interrupt mode.
ARM GAS  /tmp/ccOHJlyF.s 			page 26


1399:FWLIB/src/stm32f4xx_can.c ****   
1400:FWLIB/src/stm32f4xx_can.c ****       (#) In the Polling Mode it is advised to use the following functions:
1401:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_GetFlagStatus() : to check if flags events occur. 
1402:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_ClearFlag()     : to clear the flags events.
1403:FWLIB/src/stm32f4xx_can.c ****   
1404:FWLIB/src/stm32f4xx_can.c **** 
1405:FWLIB/src/stm32f4xx_can.c ****   
1406:FWLIB/src/stm32f4xx_can.c ****       (#) In the Interrupt Mode it is advised to use the following functions:
1407:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_ITConfig()       : to enable or disable the interrupt source.
1408:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_GetITStatus()    : to check if Interrupt occurs.
1409:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_ClearITPendingBit() : to clear the Interrupt pending Bit 
1410:FWLIB/src/stm32f4xx_can.c ****             (corresponding Flag).
1411:FWLIB/src/stm32f4xx_can.c ****         -@@-  This function has no impact on CAN_IT_FMP0 and CAN_IT_FMP1 Interrupts 
1412:FWLIB/src/stm32f4xx_can.c ****              pending bits since there are cleared only by hardware. 
1413:FWLIB/src/stm32f4xx_can.c ****   
1414:FWLIB/src/stm32f4xx_can.c **** @endverbatim
1415:FWLIB/src/stm32f4xx_can.c ****   * @{
1416:FWLIB/src/stm32f4xx_can.c ****   */ 
1417:FWLIB/src/stm32f4xx_can.c **** /**
1418:FWLIB/src/stm32f4xx_can.c ****   * @brief  Enables or disables the specified CANx interrupts.
1419:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1420:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_IT: specifies the CAN interrupt sources to be enabled or disabled.
1421:FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be: 
1422:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_TME: Transmit mailbox empty Interrupt 
1423:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FMP0: FIFO 0 message pending Interrupt 
1424:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF0: FIFO 0 full Interrupt
1425:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV0: FIFO 0 overrun Interrupt
1426:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FMP1: FIFO 1 message pending Interrupt 
1427:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF1: FIFO 1 full Interrupt
1428:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV1: FIFO 1 overrun Interrupt
1429:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_WKU: Wake-up Interrupt
1430:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_SLK: Sleep acknowledge Interrupt  
1431:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EWG: Error warning Interrupt
1432:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EPV: Error passive Interrupt
1433:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_BOF: Bus-off Interrupt  
1434:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_LEC: Last error code Interrupt
1435:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_ERR: Error Interrupt
1436:FWLIB/src/stm32f4xx_can.c ****   * @param  NewState: new state of the CAN interrupts.
1437:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
1438:FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be: ENABLE or DISABLE.
1439:FWLIB/src/stm32f4xx_can.c ****   * @retval None
1440:FWLIB/src/stm32f4xx_can.c ****   */
1441:FWLIB/src/stm32f4xx_can.c **** void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
1442:FWLIB/src/stm32f4xx_can.c **** {
1443:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1444:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1445:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_IT(CAN_IT));
1446:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1447:FWLIB/src/stm32f4xx_can.c **** 
1448:FWLIB/src/stm32f4xx_can.c ****   if (NewState != DISABLE)
1449:FWLIB/src/stm32f4xx_can.c ****   {
1450:FWLIB/src/stm32f4xx_can.c ****     /* Enable the selected CANx interrupt */
1451:FWLIB/src/stm32f4xx_can.c ****     CANx->IER |= CAN_IT;
1452:FWLIB/src/stm32f4xx_can.c ****   }
1453:FWLIB/src/stm32f4xx_can.c ****   else
1454:FWLIB/src/stm32f4xx_can.c ****   {
1455:FWLIB/src/stm32f4xx_can.c ****     /* Disable the selected CANx interrupt */
ARM GAS  /tmp/ccOHJlyF.s 			page 27


1456:FWLIB/src/stm32f4xx_can.c ****     CANx->IER &= ~CAN_IT;
1457:FWLIB/src/stm32f4xx_can.c ****   }
1458:FWLIB/src/stm32f4xx_can.c **** }
1459:FWLIB/src/stm32f4xx_can.c **** /**
1460:FWLIB/src/stm32f4xx_can.c ****   * @brief  Checks whether the specified CAN flag is set or not.
1461:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1462:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_FLAG: specifies the flag to check.
1463:FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be one of the following values:
1464:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP0: Request MailBox0 Flag
1465:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP1: Request MailBox1 Flag
1466:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP2: Request MailBox2 Flag
1467:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FMP0: FIFO 0 Message Pending Flag   
1468:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FF0: FIFO 0 Full Flag       
1469:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FOV0: FIFO 0 Overrun Flag 
1470:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FMP1: FIFO 1 Message Pending Flag   
1471:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FF1: FIFO 1 Full Flag        
1472:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FOV1: FIFO 1 Overrun Flag     
1473:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_WKU: Wake up Flag
1474:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag 
1475:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_EWG: Error Warning Flag
1476:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_EPV: Error Passive Flag  
1477:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_BOF: Bus-Off Flag    
1478:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_LEC: Last error code Flag
1479:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
1480:FWLIB/src/stm32f4xx_can.c ****   * @retval The new state of CAN_FLAG (SET or RESET).
1481:FWLIB/src/stm32f4xx_can.c ****   */
1482:FWLIB/src/stm32f4xx_can.c **** FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
1483:FWLIB/src/stm32f4xx_can.c **** {
1484:FWLIB/src/stm32f4xx_can.c ****   FlagStatus bitstatus = RESET;
1485:FWLIB/src/stm32f4xx_can.c ****   
1486:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1487:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1488:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
1489:FWLIB/src/stm32f4xx_can.c ****   
1490:FWLIB/src/stm32f4xx_can.c **** 
1491:FWLIB/src/stm32f4xx_can.c ****   if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
1492:FWLIB/src/stm32f4xx_can.c ****   { 
1493:FWLIB/src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1494:FWLIB/src/stm32f4xx_can.c ****     if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1495:FWLIB/src/stm32f4xx_can.c ****     { 
1496:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1497:FWLIB/src/stm32f4xx_can.c ****       bitstatus = SET;
1498:FWLIB/src/stm32f4xx_can.c ****     }
1499:FWLIB/src/stm32f4xx_can.c ****     else
1500:FWLIB/src/stm32f4xx_can.c ****     { 
1501:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1502:FWLIB/src/stm32f4xx_can.c ****       bitstatus = RESET;
1503:FWLIB/src/stm32f4xx_can.c ****     }
1504:FWLIB/src/stm32f4xx_can.c ****   }
1505:FWLIB/src/stm32f4xx_can.c ****   else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
1506:FWLIB/src/stm32f4xx_can.c ****   { 
1507:FWLIB/src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1508:FWLIB/src/stm32f4xx_can.c ****     if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1509:FWLIB/src/stm32f4xx_can.c ****     { 
1510:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1511:FWLIB/src/stm32f4xx_can.c ****       bitstatus = SET;
1512:FWLIB/src/stm32f4xx_can.c ****     }
ARM GAS  /tmp/ccOHJlyF.s 			page 28


1513:FWLIB/src/stm32f4xx_can.c ****     else
1514:FWLIB/src/stm32f4xx_can.c ****     { 
1515:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1516:FWLIB/src/stm32f4xx_can.c ****       bitstatus = RESET;
1517:FWLIB/src/stm32f4xx_can.c ****     }
1518:FWLIB/src/stm32f4xx_can.c ****   }
1519:FWLIB/src/stm32f4xx_can.c ****   else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
1520:FWLIB/src/stm32f4xx_can.c ****   { 
1521:FWLIB/src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1522:FWLIB/src/stm32f4xx_can.c ****     if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1523:FWLIB/src/stm32f4xx_can.c ****     { 
1524:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1525:FWLIB/src/stm32f4xx_can.c ****       bitstatus = SET;
1526:FWLIB/src/stm32f4xx_can.c ****     }
1527:FWLIB/src/stm32f4xx_can.c ****     else
1528:FWLIB/src/stm32f4xx_can.c ****     { 
1529:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1530:FWLIB/src/stm32f4xx_can.c ****       bitstatus = RESET;
1531:FWLIB/src/stm32f4xx_can.c ****     }
1532:FWLIB/src/stm32f4xx_can.c ****   }
1533:FWLIB/src/stm32f4xx_can.c ****   else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
1534:FWLIB/src/stm32f4xx_can.c ****   { 
1535:FWLIB/src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1536:FWLIB/src/stm32f4xx_can.c ****     if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1537:FWLIB/src/stm32f4xx_can.c ****     { 
1538:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1539:FWLIB/src/stm32f4xx_can.c ****       bitstatus = SET;
1540:FWLIB/src/stm32f4xx_can.c ****     }
1541:FWLIB/src/stm32f4xx_can.c ****     else
1542:FWLIB/src/stm32f4xx_can.c ****     { 
1543:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1544:FWLIB/src/stm32f4xx_can.c ****       bitstatus = RESET;
1545:FWLIB/src/stm32f4xx_can.c ****     }
1546:FWLIB/src/stm32f4xx_can.c ****   }
1547:FWLIB/src/stm32f4xx_can.c ****   else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
1548:FWLIB/src/stm32f4xx_can.c ****   { 
1549:FWLIB/src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1550:FWLIB/src/stm32f4xx_can.c ****     if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1551:FWLIB/src/stm32f4xx_can.c ****     { 
1552:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1553:FWLIB/src/stm32f4xx_can.c ****       bitstatus = SET;
1554:FWLIB/src/stm32f4xx_can.c ****     }
1555:FWLIB/src/stm32f4xx_can.c ****     else
1556:FWLIB/src/stm32f4xx_can.c ****     { 
1557:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1558:FWLIB/src/stm32f4xx_can.c ****       bitstatus = RESET;
1559:FWLIB/src/stm32f4xx_can.c ****     }
1560:FWLIB/src/stm32f4xx_can.c ****   }
1561:FWLIB/src/stm32f4xx_can.c ****   /* Return the CAN_FLAG status */
1562:FWLIB/src/stm32f4xx_can.c ****   return  bitstatus;
1563:FWLIB/src/stm32f4xx_can.c **** }
1564:FWLIB/src/stm32f4xx_can.c **** 
1565:FWLIB/src/stm32f4xx_can.c **** /**
1566:FWLIB/src/stm32f4xx_can.c ****   * @brief  Clears the CAN's pending flags.
1567:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1568:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_FLAG: specifies the flag to clear.
1569:FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be one of the following values:
ARM GAS  /tmp/ccOHJlyF.s 			page 29


1570:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP0: Request MailBox0 Flag
1571:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP1: Request MailBox1 Flag
1572:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP2: Request MailBox2 Flag 
1573:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FF0: FIFO 0 Full Flag       
1574:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FOV0: FIFO 0 Overrun Flag  
1575:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FF1: FIFO 1 Full Flag        
1576:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FOV1: FIFO 1 Overrun Flag     
1577:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_WKU: Wake up Flag
1578:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag    
1579:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_LEC: Last error code Flag
1580:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
1581:FWLIB/src/stm32f4xx_can.c ****   * @retval None
1582:FWLIB/src/stm32f4xx_can.c ****   */
1583:FWLIB/src/stm32f4xx_can.c **** void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
1584:FWLIB/src/stm32f4xx_can.c **** {
1585:FWLIB/src/stm32f4xx_can.c ****   uint32_t flagtmp=0;
1586:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1587:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1588:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
1589:FWLIB/src/stm32f4xx_can.c ****   
1590:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
1591:FWLIB/src/stm32f4xx_can.c ****   {
1592:FWLIB/src/stm32f4xx_can.c ****     /* Clear the selected CAN flags */
1593:FWLIB/src/stm32f4xx_can.c ****     CANx->ESR = (uint32_t)RESET;
1594:FWLIB/src/stm32f4xx_can.c ****   }
1595:FWLIB/src/stm32f4xx_can.c ****   else /* MSR or TSR or RF0R or RF1R */
1596:FWLIB/src/stm32f4xx_can.c ****   {
1597:FWLIB/src/stm32f4xx_can.c ****     flagtmp = CAN_FLAG & 0x000FFFFF;
1598:FWLIB/src/stm32f4xx_can.c **** 
1599:FWLIB/src/stm32f4xx_can.c ****     if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
1600:FWLIB/src/stm32f4xx_can.c ****     {
1601:FWLIB/src/stm32f4xx_can.c ****       /* Receive Flags */
1602:FWLIB/src/stm32f4xx_can.c ****       CANx->RF0R = (uint32_t)(flagtmp);
1603:FWLIB/src/stm32f4xx_can.c ****     }
1604:FWLIB/src/stm32f4xx_can.c ****     else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
1605:FWLIB/src/stm32f4xx_can.c ****     {
1606:FWLIB/src/stm32f4xx_can.c ****       /* Receive Flags */
1607:FWLIB/src/stm32f4xx_can.c ****       CANx->RF1R = (uint32_t)(flagtmp);
1608:FWLIB/src/stm32f4xx_can.c ****     }
1609:FWLIB/src/stm32f4xx_can.c ****     else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
1610:FWLIB/src/stm32f4xx_can.c ****     {
1611:FWLIB/src/stm32f4xx_can.c ****       /* Transmit Flags */
1612:FWLIB/src/stm32f4xx_can.c ****       CANx->TSR = (uint32_t)(flagtmp);
1613:FWLIB/src/stm32f4xx_can.c ****     }
1614:FWLIB/src/stm32f4xx_can.c ****     else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
1615:FWLIB/src/stm32f4xx_can.c ****     {
1616:FWLIB/src/stm32f4xx_can.c ****       /* Operating mode Flags */
1617:FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = (uint32_t)(flagtmp);
1618:FWLIB/src/stm32f4xx_can.c ****     }
1619:FWLIB/src/stm32f4xx_can.c ****   }
1620:FWLIB/src/stm32f4xx_can.c **** }
1621:FWLIB/src/stm32f4xx_can.c **** 
1622:FWLIB/src/stm32f4xx_can.c **** /**
1623:FWLIB/src/stm32f4xx_can.c ****   * @brief  Checks whether the specified CANx interrupt has occurred or not.
1624:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1625:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_IT: specifies the CAN interrupt source to check.
1626:FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be one of the following values:
ARM GAS  /tmp/ccOHJlyF.s 			page 30


1627:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_TME: Transmit mailbox empty Interrupt 
1628:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FMP0: FIFO 0 message pending Interrupt 
1629:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF0: FIFO 0 full Interrupt
1630:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV0: FIFO 0 overrun Interrupt
1631:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FMP1: FIFO 1 message pending Interrupt 
1632:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF1: FIFO 1 full Interrupt
1633:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV1: FIFO 1 overrun Interrupt
1634:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_WKU: Wake-up Interrupt
1635:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_SLK: Sleep acknowledge Interrupt  
1636:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EWG: Error warning Interrupt
1637:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EPV: Error passive Interrupt
1638:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_BOF: Bus-off Interrupt  
1639:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_LEC: Last error code Interrupt
1640:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_ERR: Error Interrupt
1641:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
1642:FWLIB/src/stm32f4xx_can.c ****   * @retval The current state of CAN_IT (SET or RESET).
1643:FWLIB/src/stm32f4xx_can.c ****   */
1644:FWLIB/src/stm32f4xx_can.c **** ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
1645:FWLIB/src/stm32f4xx_can.c **** {
1646:FWLIB/src/stm32f4xx_can.c ****   ITStatus itstatus = RESET;
1647:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1648:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1649:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_IT(CAN_IT));
1650:FWLIB/src/stm32f4xx_can.c ****   
1651:FWLIB/src/stm32f4xx_can.c ****   /* check the interrupt enable bit */
1652:FWLIB/src/stm32f4xx_can.c ****  if((CANx->IER & CAN_IT) != RESET)
1653:FWLIB/src/stm32f4xx_can.c ****  {
1654:FWLIB/src/stm32f4xx_can.c ****    /* in case the Interrupt is enabled, .... */
1655:FWLIB/src/stm32f4xx_can.c ****     switch (CAN_IT)
1656:FWLIB/src/stm32f4xx_can.c ****     {
1657:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_TME:
1658:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_TSR_RQCPx bits */
1659:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
1660:FWLIB/src/stm32f4xx_can.c ****         break;
1661:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FMP0:
1662:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_RF0R_FMP0 bit */
1663:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
1664:FWLIB/src/stm32f4xx_can.c ****         break;
1665:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FF0:
1666:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_RF0R_FULL0 bit */
1667:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
1668:FWLIB/src/stm32f4xx_can.c ****         break;
1669:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FOV0:
1670:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_RF0R_FOVR0 bit */
1671:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
1672:FWLIB/src/stm32f4xx_can.c ****         break;
1673:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FMP1:
1674:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_RF1R_FMP1 bit */
1675:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
1676:FWLIB/src/stm32f4xx_can.c ****         break;
1677:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FF1:
1678:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_RF1R_FULL1 bit */
1679:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
1680:FWLIB/src/stm32f4xx_can.c ****         break;
1681:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FOV1:
1682:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_RF1R_FOVR1 bit */
1683:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
ARM GAS  /tmp/ccOHJlyF.s 			page 31


1684:FWLIB/src/stm32f4xx_can.c ****         break;
1685:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_WKU:
1686:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_MSR_WKUI bit */
1687:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
1688:FWLIB/src/stm32f4xx_can.c ****         break;
1689:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_SLK:
1690:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_MSR_SLAKI bit */
1691:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
1692:FWLIB/src/stm32f4xx_can.c ****         break;
1693:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_EWG:
1694:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_ESR_EWGF bit */
1695:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
1696:FWLIB/src/stm32f4xx_can.c ****         break;
1697:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_EPV:
1698:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_ESR_EPVF bit */
1699:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
1700:FWLIB/src/stm32f4xx_can.c ****         break;
1701:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_BOF:
1702:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_ESR_BOFF bit */
1703:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
1704:FWLIB/src/stm32f4xx_can.c ****         break;
1705:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_LEC:
1706:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_ESR_LEC bit */
1707:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
1708:FWLIB/src/stm32f4xx_can.c ****         break;
1709:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_ERR:
1710:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_MSR_ERRI bit */ 
1711:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
1712:FWLIB/src/stm32f4xx_can.c ****         break;
1713:FWLIB/src/stm32f4xx_can.c ****       default:
1714:FWLIB/src/stm32f4xx_can.c ****         /* in case of error, return RESET */
1715:FWLIB/src/stm32f4xx_can.c ****         itstatus = RESET;
1716:FWLIB/src/stm32f4xx_can.c ****         break;
1717:FWLIB/src/stm32f4xx_can.c ****     }
1718:FWLIB/src/stm32f4xx_can.c ****   }
1719:FWLIB/src/stm32f4xx_can.c ****   else
1720:FWLIB/src/stm32f4xx_can.c ****   {
1721:FWLIB/src/stm32f4xx_can.c ****    /* in case the Interrupt is not enabled, return RESET */
1722:FWLIB/src/stm32f4xx_can.c ****     itstatus  = RESET;
1723:FWLIB/src/stm32f4xx_can.c ****   }
1724:FWLIB/src/stm32f4xx_can.c ****   
1725:FWLIB/src/stm32f4xx_can.c ****   /* Return the CAN_IT status */
1726:FWLIB/src/stm32f4xx_can.c ****   return  itstatus;
1727:FWLIB/src/stm32f4xx_can.c **** }
1728:FWLIB/src/stm32f4xx_can.c **** 
1729:FWLIB/src/stm32f4xx_can.c **** /**
1730:FWLIB/src/stm32f4xx_can.c ****   * @brief  Clears the CANx's interrupt pending bits.
1731:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1732:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_IT: specifies the interrupt pending bit to clear.
1733:FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be one of the following values:
1734:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_TME: Transmit mailbox empty Interrupt
1735:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF0: FIFO 0 full Interrupt
1736:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV0: FIFO 0 overrun Interrupt
1737:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF1: FIFO 1 full Interrupt
1738:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV1: FIFO 1 overrun Interrupt
1739:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_WKU: Wake-up Interrupt
1740:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_SLK: Sleep acknowledge Interrupt  
ARM GAS  /tmp/ccOHJlyF.s 			page 32


1741:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EWG: Error warning Interrupt
1742:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EPV: Error passive Interrupt
1743:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_BOF: Bus-off Interrupt  
1744:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_LEC: Last error code Interrupt
1745:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_ERR: Error Interrupt
1746:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
1747:FWLIB/src/stm32f4xx_can.c ****   * @retval None
1748:FWLIB/src/stm32f4xx_can.c ****   */
1749:FWLIB/src/stm32f4xx_can.c **** void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
1750:FWLIB/src/stm32f4xx_can.c **** {
1751:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1752:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1753:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_CLEAR_IT(CAN_IT));
1754:FWLIB/src/stm32f4xx_can.c **** 
1755:FWLIB/src/stm32f4xx_can.c ****   switch (CAN_IT)
1756:FWLIB/src/stm32f4xx_can.c ****   {
1757:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_TME:
1758:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_TSR_RQCPx (rc_w1)*/
1759:FWLIB/src/stm32f4xx_can.c ****       CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
1760:FWLIB/src/stm32f4xx_can.c ****       break;
1761:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FF0:
1762:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_RF0R_FULL0 (rc_w1)*/
1763:FWLIB/src/stm32f4xx_can.c ****       CANx->RF0R = CAN_RF0R_FULL0; 
1764:FWLIB/src/stm32f4xx_can.c ****       break;
1765:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FOV0:
1766:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
1767:FWLIB/src/stm32f4xx_can.c ****       CANx->RF0R = CAN_RF0R_FOVR0; 
1768:FWLIB/src/stm32f4xx_can.c ****       break;
1769:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FF1:
1770:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_RF1R_FULL1 (rc_w1)*/
1771:FWLIB/src/stm32f4xx_can.c ****       CANx->RF1R = CAN_RF1R_FULL1;  
1772:FWLIB/src/stm32f4xx_can.c ****       break;
1773:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FOV1:
1774:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
1775:FWLIB/src/stm32f4xx_can.c ****       CANx->RF1R = CAN_RF1R_FOVR1; 
1776:FWLIB/src/stm32f4xx_can.c ****       break;
1777:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_WKU:
1778:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_WKUI (rc_w1)*/
1779:FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_WKUI;  
1780:FWLIB/src/stm32f4xx_can.c ****       break;
1781:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_SLK:
1782:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
1783:FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_SLAKI;   
1784:FWLIB/src/stm32f4xx_can.c ****       break;
1785:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_EWG:
1786:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1787:FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI;
1788:FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/ 
1789:FWLIB/src/stm32f4xx_can.c ****       break;
1790:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_EPV:
1791:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1792:FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1793:FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
1794:FWLIB/src/stm32f4xx_can.c ****       break;
1795:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_BOF:
1796:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */ 
1797:FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
ARM GAS  /tmp/ccOHJlyF.s 			page 33


1798:FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
1799:FWLIB/src/stm32f4xx_can.c ****        break;
1800:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_LEC:
1801:FWLIB/src/stm32f4xx_can.c ****       /*  Clear LEC bits */
1802:FWLIB/src/stm32f4xx_can.c ****       CANx->ESR = RESET; 
1803:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1804:FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1805:FWLIB/src/stm32f4xx_can.c ****       break;
1806:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_ERR:
1807:FWLIB/src/stm32f4xx_can.c ****       /*Clear LEC bits */
1808:FWLIB/src/stm32f4xx_can.c ****       CANx->ESR = RESET; 
1809:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1810:FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1811:FWLIB/src/stm32f4xx_can.c ****        /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
1812:FWLIB/src/stm32f4xx_can.c ****        break;
1813:FWLIB/src/stm32f4xx_can.c ****     default:
1814:FWLIB/src/stm32f4xx_can.c ****        break;
1815:FWLIB/src/stm32f4xx_can.c ****    }
1816:FWLIB/src/stm32f4xx_can.c **** }
1817:FWLIB/src/stm32f4xx_can.c ****  /**
1818:FWLIB/src/stm32f4xx_can.c ****   * @}
1819:FWLIB/src/stm32f4xx_can.c ****   */
1820:FWLIB/src/stm32f4xx_can.c **** 
1821:FWLIB/src/stm32f4xx_can.c **** /**
1822:FWLIB/src/stm32f4xx_can.c ****   * @brief  Checks whether the CAN interrupt has occurred or not.
1823:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_Reg: specifies the CAN interrupt register to check.
1824:FWLIB/src/stm32f4xx_can.c ****   * @param  It_Bit: specifies the interrupt source bit to check.
1825:FWLIB/src/stm32f4xx_can.c ****   * @retval The new state of the CAN Interrupt (SET or RESET).
1826:FWLIB/src/stm32f4xx_can.c ****   */
1827:FWLIB/src/stm32f4xx_can.c **** static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
1828:FWLIB/src/stm32f4xx_can.c **** {
  29              		.loc 1 1828 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
1829:FWLIB/src/stm32f4xx_can.c ****   ITStatus pendingbitstatus = RESET;
  34              		.loc 1 1829 3 view .LVU1
1830:FWLIB/src/stm32f4xx_can.c ****   
1831:FWLIB/src/stm32f4xx_can.c ****   if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
  35              		.loc 1 1831 3 view .LVU2
  36              		.loc 1 1831 6 is_stmt 0 view .LVU3
  37 0000 0842     		tst	r0, r1
  38 0002 01D0     		beq	.L3
1832:FWLIB/src/stm32f4xx_can.c ****   {
1833:FWLIB/src/stm32f4xx_can.c ****     /* CAN_IT is set */
1834:FWLIB/src/stm32f4xx_can.c ****     pendingbitstatus = SET;
  39              		.loc 1 1834 22 view .LVU4
  40 0004 0120     		movs	r0, #1
  41              	.LVL1:
  42              		.loc 1 1834 22 view .LVU5
  43 0006 7047     		bx	lr
  44              	.LVL2:
  45              	.L3:
1835:FWLIB/src/stm32f4xx_can.c ****   }
1836:FWLIB/src/stm32f4xx_can.c ****   else
1837:FWLIB/src/stm32f4xx_can.c ****   {
ARM GAS  /tmp/ccOHJlyF.s 			page 34


1838:FWLIB/src/stm32f4xx_can.c ****     /* CAN_IT is reset */
1839:FWLIB/src/stm32f4xx_can.c ****     pendingbitstatus = RESET;
  46              		.loc 1 1839 22 view .LVU6
  47 0008 0020     		movs	r0, #0
  48              	.LVL3:
1840:FWLIB/src/stm32f4xx_can.c ****   }
1841:FWLIB/src/stm32f4xx_can.c ****   return pendingbitstatus;
  49              		.loc 1 1841 3 is_stmt 1 view .LVU7
1842:FWLIB/src/stm32f4xx_can.c **** }
  50              		.loc 1 1842 1 is_stmt 0 view .LVU8
  51 000a 7047     		bx	lr
  52              		.cfi_endproc
  53              	.LFE147:
  55              		.section	.text.CAN_DeInit,"ax",%progbits
  56              		.align	1
  57              		.global	CAN_DeInit
  58              		.syntax unified
  59              		.thumb
  60              		.thumb_func
  61              		.fpu fpv4-sp-d16
  63              	CAN_DeInit:
  64              	.LVL4:
  65              	.LFB123:
 168:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
  66              		.loc 1 168 1 is_stmt 1 view -0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 0
  69              		@ frame_needed = 0, uses_anonymous_args = 0
 168:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
  70              		.loc 1 168 1 is_stmt 0 view .LVU10
  71 0000 08B5     		push	{r3, lr}
  72              	.LCFI0:
  73              		.cfi_def_cfa_offset 8
  74              		.cfi_offset 3, -8
  75              		.cfi_offset 14, -4
 170:FWLIB/src/stm32f4xx_can.c ****  
  76              		.loc 1 170 3 is_stmt 1 view .LVU11
 172:FWLIB/src/stm32f4xx_can.c ****   {
  77              		.loc 1 172 3 view .LVU12
 172:FWLIB/src/stm32f4xx_can.c ****   {
  78              		.loc 1 172 6 is_stmt 0 view .LVU13
  79 0002 0C4B     		ldr	r3, .L9
  80 0004 9842     		cmp	r0, r3
  81 0006 0AD0     		beq	.L8
 199:FWLIB/src/stm32f4xx_can.c ****     /* Release CAN2 from reset state */
  82              		.loc 1 199 5 is_stmt 1 view .LVU14
  83 0008 0121     		movs	r1, #1
  84 000a 4FF08060 		mov	r0, #67108864
  85              	.LVL5:
 199:FWLIB/src/stm32f4xx_can.c ****     /* Release CAN2 from reset state */
  86              		.loc 1 199 5 is_stmt 0 view .LVU15
  87 000e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  88              	.LVL6:
 201:FWLIB/src/stm32f4xx_can.c ****   }
  89              		.loc 1 201 5 is_stmt 1 view .LVU16
  90 0012 0021     		movs	r1, #0
  91 0014 4FF08060 		mov	r0, #67108864
ARM GAS  /tmp/ccOHJlyF.s 			page 35


  92 0018 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  93              	.LVL7:
  94              	.L4:
 204:FWLIB/src/stm32f4xx_can.c **** 
  95              		.loc 1 204 1 is_stmt 0 view .LVU17
  96 001c 08BD     		pop	{r3, pc}
  97              	.LVL8:
  98              	.L8:
 175:FWLIB/src/stm32f4xx_can.c ****     /* Release CAN1 from reset state */
  99              		.loc 1 175 5 is_stmt 1 view .LVU18
 100 001e 0121     		movs	r1, #1
 101 0020 4FF00070 		mov	r0, #33554432
 102              	.LVL9:
 175:FWLIB/src/stm32f4xx_can.c ****     /* Release CAN1 from reset state */
 103              		.loc 1 175 5 is_stmt 0 view .LVU19
 104 0024 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 105              	.LVL10:
 177:FWLIB/src/stm32f4xx_can.c ****   }
 106              		.loc 1 177 5 is_stmt 1 view .LVU20
 107 0028 0021     		movs	r1, #0
 108 002a 4FF00070 		mov	r0, #33554432
 109 002e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 110              	.LVL11:
 111 0032 F3E7     		b	.L4
 112              	.L10:
 113              		.align	2
 114              	.L9:
 115 0034 00640040 		.word	1073767424
 116              		.cfi_endproc
 117              	.LFE123:
 119              		.section	.text.CAN_Init,"ax",%progbits
 120              		.align	1
 121              		.global	CAN_Init
 122              		.syntax unified
 123              		.thumb
 124              		.thumb_func
 125              		.fpu fpv4-sp-d16
 127              	CAN_Init:
 128              	.LVL12:
 129              	.LFB124:
 217:FWLIB/src/stm32f4xx_can.c ****   uint8_t InitStatus = CAN_InitStatus_Failed;
 130              		.loc 1 217 1 view -0
 131              		.cfi_startproc
 132              		@ args = 0, pretend = 0, frame = 0
 133              		@ frame_needed = 0, uses_anonymous_args = 0
 134              		@ link register save eliminated.
 218:FWLIB/src/stm32f4xx_can.c ****   uint32_t wait_ack = 0x00000000;
 135              		.loc 1 218 3 view .LVU22
 219:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 136              		.loc 1 219 3 view .LVU23
 221:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TTCM));
 137              		.loc 1 221 3 view .LVU24
 222:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_ABOM));
 138              		.loc 1 222 3 view .LVU25
 223:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_AWUM));
 139              		.loc 1 223 3 view .LVU26
 224:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_NART));
ARM GAS  /tmp/ccOHJlyF.s 			page 36


 140              		.loc 1 224 3 view .LVU27
 225:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_RFLM));
 141              		.loc 1 225 3 view .LVU28
 226:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TXFP));
 142              		.loc 1 226 3 view .LVU29
 227:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_MODE(CAN_InitStruct->CAN_Mode));
 143              		.loc 1 227 3 view .LVU30
 228:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_SJW(CAN_InitStruct->CAN_SJW));
 144              		.loc 1 228 3 view .LVU31
 229:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
 145              		.loc 1 229 3 view .LVU32
 230:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
 146              		.loc 1 230 3 view .LVU33
 231:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));
 147              		.loc 1 231 3 view .LVU34
 232:FWLIB/src/stm32f4xx_can.c **** 
 148              		.loc 1 232 3 view .LVU35
 235:FWLIB/src/stm32f4xx_can.c **** 
 149              		.loc 1 235 3 view .LVU36
 235:FWLIB/src/stm32f4xx_can.c **** 
 150              		.loc 1 235 13 is_stmt 0 view .LVU37
 151 0000 0368     		ldr	r3, [r0]
 152 0002 23F00203 		bic	r3, r3, #2
 153 0006 0360     		str	r3, [r0]
 238:FWLIB/src/stm32f4xx_can.c **** 
 154              		.loc 1 238 3 is_stmt 1 view .LVU38
 238:FWLIB/src/stm32f4xx_can.c **** 
 155              		.loc 1 238 13 is_stmt 0 view .LVU39
 156 0008 0368     		ldr	r3, [r0]
 157 000a 43F00103 		orr	r3, r3, #1
 158 000e 0360     		str	r3, [r0]
 241:FWLIB/src/stm32f4xx_can.c ****   {
 159              		.loc 1 241 3 is_stmt 1 view .LVU40
 219:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 160              		.loc 1 219 12 is_stmt 0 view .LVU41
 161 0010 0023     		movs	r3, #0
 162              	.LVL13:
 163              	.L12:
 241:FWLIB/src/stm32f4xx_can.c ****   {
 164              		.loc 1 241 16 view .LVU42
 165 0012 4268     		ldr	r2, [r0, #4]
 241:FWLIB/src/stm32f4xx_can.c ****   {
 166              		.loc 1 241 9 view .LVU43
 167 0014 12F0010F 		tst	r2, #1
 168 0018 05D1     		bne	.L13
 241:FWLIB/src/stm32f4xx_can.c ****   {
 169              		.loc 1 241 55 discriminator 1 view .LVU44
 170 001a 4FF6FF72 		movw	r2, #65535
 171 001e 9342     		cmp	r3, r2
 172 0020 01D0     		beq	.L13
 243:FWLIB/src/stm32f4xx_can.c ****   }
 173              		.loc 1 243 5 is_stmt 1 view .LVU45
 243:FWLIB/src/stm32f4xx_can.c ****   }
 174              		.loc 1 243 13 is_stmt 0 view .LVU46
 175 0022 0133     		adds	r3, r3, #1
 176              	.LVL14:
 243:FWLIB/src/stm32f4xx_can.c ****   }
ARM GAS  /tmp/ccOHJlyF.s 			page 37


 177              		.loc 1 243 13 view .LVU47
 178 0024 F5E7     		b	.L12
 179              	.L13:
 247:FWLIB/src/stm32f4xx_can.c ****   {
 180              		.loc 1 247 3 is_stmt 1 view .LVU48
 247:FWLIB/src/stm32f4xx_can.c ****   {
 181              		.loc 1 247 12 is_stmt 0 view .LVU49
 182 0026 4368     		ldr	r3, [r0, #4]
 183              	.LVL15:
 247:FWLIB/src/stm32f4xx_can.c ****   {
 184              		.loc 1 247 6 view .LVU50
 185 0028 13F0010F 		tst	r3, #1
 186 002c 6BD0     		beq	.L31
 254:FWLIB/src/stm32f4xx_can.c ****     {
 187              		.loc 1 254 5 is_stmt 1 view .LVU51
 254:FWLIB/src/stm32f4xx_can.c ****     {
 188              		.loc 1 254 23 is_stmt 0 view .LVU52
 189 002e 8B79     		ldrb	r3, [r1, #6]	@ zero_extendqisi2
 254:FWLIB/src/stm32f4xx_can.c ****     {
 190              		.loc 1 254 8 view .LVU53
 191 0030 012B     		cmp	r3, #1
 192 0032 44D0     		beq	.L33
 260:FWLIB/src/stm32f4xx_can.c ****     }
 193              		.loc 1 260 7 is_stmt 1 view .LVU54
 260:FWLIB/src/stm32f4xx_can.c ****     }
 194              		.loc 1 260 17 is_stmt 0 view .LVU55
 195 0034 0368     		ldr	r3, [r0]
 196 0036 23F08003 		bic	r3, r3, #128
 197 003a 0360     		str	r3, [r0]
 198              	.L17:
 264:FWLIB/src/stm32f4xx_can.c ****     {
 199              		.loc 1 264 5 is_stmt 1 view .LVU56
 264:FWLIB/src/stm32f4xx_can.c ****     {
 200              		.loc 1 264 23 is_stmt 0 view .LVU57
 201 003c CB79     		ldrb	r3, [r1, #7]	@ zero_extendqisi2
 264:FWLIB/src/stm32f4xx_can.c ****     {
 202              		.loc 1 264 8 view .LVU58
 203 003e 012B     		cmp	r3, #1
 204 0040 42D0     		beq	.L34
 270:FWLIB/src/stm32f4xx_can.c ****     }
 205              		.loc 1 270 7 is_stmt 1 view .LVU59
 270:FWLIB/src/stm32f4xx_can.c ****     }
 206              		.loc 1 270 17 is_stmt 0 view .LVU60
 207 0042 0368     		ldr	r3, [r0]
 208 0044 23F04003 		bic	r3, r3, #64
 209 0048 0360     		str	r3, [r0]
 210              	.L19:
 274:FWLIB/src/stm32f4xx_can.c ****     {
 211              		.loc 1 274 5 is_stmt 1 view .LVU61
 274:FWLIB/src/stm32f4xx_can.c ****     {
 212              		.loc 1 274 23 is_stmt 0 view .LVU62
 213 004a 0B7A     		ldrb	r3, [r1, #8]	@ zero_extendqisi2
 274:FWLIB/src/stm32f4xx_can.c ****     {
 214              		.loc 1 274 8 view .LVU63
 215 004c 012B     		cmp	r3, #1
 216 004e 40D0     		beq	.L35
 280:FWLIB/src/stm32f4xx_can.c ****     }
ARM GAS  /tmp/ccOHJlyF.s 			page 38


 217              		.loc 1 280 7 is_stmt 1 view .LVU64
 280:FWLIB/src/stm32f4xx_can.c ****     }
 218              		.loc 1 280 17 is_stmt 0 view .LVU65
 219 0050 0368     		ldr	r3, [r0]
 220 0052 23F02003 		bic	r3, r3, #32
 221 0056 0360     		str	r3, [r0]
 222              	.L21:
 284:FWLIB/src/stm32f4xx_can.c ****     {
 223              		.loc 1 284 5 is_stmt 1 view .LVU66
 284:FWLIB/src/stm32f4xx_can.c ****     {
 224              		.loc 1 284 23 is_stmt 0 view .LVU67
 225 0058 4B7A     		ldrb	r3, [r1, #9]	@ zero_extendqisi2
 284:FWLIB/src/stm32f4xx_can.c ****     {
 226              		.loc 1 284 8 view .LVU68
 227 005a 012B     		cmp	r3, #1
 228 005c 3ED0     		beq	.L36
 290:FWLIB/src/stm32f4xx_can.c ****     }
 229              		.loc 1 290 7 is_stmt 1 view .LVU69
 290:FWLIB/src/stm32f4xx_can.c ****     }
 230              		.loc 1 290 17 is_stmt 0 view .LVU70
 231 005e 0368     		ldr	r3, [r0]
 232 0060 23F01003 		bic	r3, r3, #16
 233 0064 0360     		str	r3, [r0]
 234              	.L23:
 294:FWLIB/src/stm32f4xx_can.c ****     {
 235              		.loc 1 294 5 is_stmt 1 view .LVU71
 294:FWLIB/src/stm32f4xx_can.c ****     {
 236              		.loc 1 294 23 is_stmt 0 view .LVU72
 237 0066 8B7A     		ldrb	r3, [r1, #10]	@ zero_extendqisi2
 294:FWLIB/src/stm32f4xx_can.c ****     {
 238              		.loc 1 294 8 view .LVU73
 239 0068 012B     		cmp	r3, #1
 240 006a 3CD0     		beq	.L37
 300:FWLIB/src/stm32f4xx_can.c ****     }
 241              		.loc 1 300 7 is_stmt 1 view .LVU74
 300:FWLIB/src/stm32f4xx_can.c ****     }
 242              		.loc 1 300 17 is_stmt 0 view .LVU75
 243 006c 0368     		ldr	r3, [r0]
 244 006e 23F00803 		bic	r3, r3, #8
 245 0072 0360     		str	r3, [r0]
 246              	.L25:
 304:FWLIB/src/stm32f4xx_can.c ****     {
 247              		.loc 1 304 5 is_stmt 1 view .LVU76
 304:FWLIB/src/stm32f4xx_can.c ****     {
 248              		.loc 1 304 23 is_stmt 0 view .LVU77
 249 0074 CB7A     		ldrb	r3, [r1, #11]	@ zero_extendqisi2
 304:FWLIB/src/stm32f4xx_can.c ****     {
 250              		.loc 1 304 8 view .LVU78
 251 0076 012B     		cmp	r3, #1
 252 0078 3AD0     		beq	.L38
 310:FWLIB/src/stm32f4xx_can.c ****     }
 253              		.loc 1 310 7 is_stmt 1 view .LVU79
 310:FWLIB/src/stm32f4xx_can.c ****     }
 254              		.loc 1 310 17 is_stmt 0 view .LVU80
 255 007a 0368     		ldr	r3, [r0]
 256 007c 23F00403 		bic	r3, r3, #4
 257 0080 0360     		str	r3, [r0]
ARM GAS  /tmp/ccOHJlyF.s 			page 39


 258              	.L27:
 314:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 259              		.loc 1 314 5 is_stmt 1 view .LVU81
 314:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 260              		.loc 1 314 52 is_stmt 0 view .LVU82
 261 0082 8A78     		ldrb	r2, [r1, #2]	@ zero_extendqisi2
 315:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 262              		.loc 1 315 42 view .LVU83
 263 0084 CB78     		ldrb	r3, [r1, #3]	@ zero_extendqisi2
 315:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 264              		.loc 1 315 52 view .LVU84
 265 0086 1B06     		lsls	r3, r3, #24
 314:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 266              		.loc 1 314 70 view .LVU85
 267 0088 43EA8273 		orr	r3, r3, r2, lsl #30
 316:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 268              		.loc 1 316 42 view .LVU86
 269 008c 0A79     		ldrb	r2, [r1, #4]	@ zero_extendqisi2
 315:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 270              		.loc 1 315 59 view .LVU87
 271 008e 43EA0243 		orr	r3, r3, r2, lsl #16
 317:FWLIB/src/stm32f4xx_can.c ****                ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 272              		.loc 1 317 42 view .LVU88
 273 0092 4A79     		ldrb	r2, [r1, #5]	@ zero_extendqisi2
 316:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 274              		.loc 1 316 59 view .LVU89
 275 0094 43EA0253 		orr	r3, r3, r2, lsl #20
 318:FWLIB/src/stm32f4xx_can.c **** 
 276              		.loc 1 318 41 view .LVU90
 277 0098 0A88     		ldrh	r2, [r1]
 318:FWLIB/src/stm32f4xx_can.c **** 
 278              		.loc 1 318 57 view .LVU91
 279 009a 013A     		subs	r2, r2, #1
 317:FWLIB/src/stm32f4xx_can.c ****                ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 280              		.loc 1 317 59 view .LVU92
 281 009c 1343     		orrs	r3, r3, r2
 314:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 282              		.loc 1 314 15 view .LVU93
 283 009e C361     		str	r3, [r0, #28]
 321:FWLIB/src/stm32f4xx_can.c **** 
 284              		.loc 1 321 5 is_stmt 1 view .LVU94
 321:FWLIB/src/stm32f4xx_can.c **** 
 285              		.loc 1 321 15 is_stmt 0 view .LVU95
 286 00a0 0368     		ldr	r3, [r0]
 287 00a2 23F00103 		bic	r3, r3, #1
 288 00a6 0360     		str	r3, [r0]
 324:FWLIB/src/stm32f4xx_can.c **** 
 289              		.loc 1 324 4 is_stmt 1 view .LVU96
 290              	.LVL16:
 326:FWLIB/src/stm32f4xx_can.c ****    {
 291              		.loc 1 326 4 view .LVU97
 324:FWLIB/src/stm32f4xx_can.c **** 
 292              		.loc 1 324 13 is_stmt 0 view .LVU98
 293 00a8 0023     		movs	r3, #0
 294              	.LVL17:
 295              	.L28:
 326:FWLIB/src/stm32f4xx_can.c ****    {
ARM GAS  /tmp/ccOHJlyF.s 			page 40


 296              		.loc 1 326 17 view .LVU99
 297 00aa 4268     		ldr	r2, [r0, #4]
 326:FWLIB/src/stm32f4xx_can.c ****    {
 298              		.loc 1 326 10 view .LVU100
 299 00ac 12F0010F 		tst	r2, #1
 300 00b0 23D0     		beq	.L29
 326:FWLIB/src/stm32f4xx_can.c ****    {
 301              		.loc 1 326 56 discriminator 1 view .LVU101
 302 00b2 4FF6FF72 		movw	r2, #65535
 303 00b6 9342     		cmp	r3, r2
 304 00b8 1FD0     		beq	.L29
 328:FWLIB/src/stm32f4xx_can.c ****    }
 305              		.loc 1 328 6 is_stmt 1 view .LVU102
 328:FWLIB/src/stm32f4xx_can.c ****    }
 306              		.loc 1 328 14 is_stmt 0 view .LVU103
 307 00ba 0133     		adds	r3, r3, #1
 308              	.LVL18:
 328:FWLIB/src/stm32f4xx_can.c ****    }
 309              		.loc 1 328 14 view .LVU104
 310 00bc F5E7     		b	.L28
 311              	.LVL19:
 312              	.L33:
 256:FWLIB/src/stm32f4xx_can.c ****     }
 313              		.loc 1 256 7 is_stmt 1 view .LVU105
 256:FWLIB/src/stm32f4xx_can.c ****     }
 314              		.loc 1 256 17 is_stmt 0 view .LVU106
 315 00be 0368     		ldr	r3, [r0]
 316 00c0 43F08003 		orr	r3, r3, #128
 317 00c4 0360     		str	r3, [r0]
 318 00c6 B9E7     		b	.L17
 319              	.L34:
 266:FWLIB/src/stm32f4xx_can.c ****     }
 320              		.loc 1 266 7 is_stmt 1 view .LVU107
 266:FWLIB/src/stm32f4xx_can.c ****     }
 321              		.loc 1 266 17 is_stmt 0 view .LVU108
 322 00c8 0368     		ldr	r3, [r0]
 323 00ca 43F04003 		orr	r3, r3, #64
 324 00ce 0360     		str	r3, [r0]
 325 00d0 BBE7     		b	.L19
 326              	.L35:
 276:FWLIB/src/stm32f4xx_can.c ****     }
 327              		.loc 1 276 7 is_stmt 1 view .LVU109
 276:FWLIB/src/stm32f4xx_can.c ****     }
 328              		.loc 1 276 17 is_stmt 0 view .LVU110
 329 00d2 0368     		ldr	r3, [r0]
 330 00d4 43F02003 		orr	r3, r3, #32
 331 00d8 0360     		str	r3, [r0]
 332 00da BDE7     		b	.L21
 333              	.L36:
 286:FWLIB/src/stm32f4xx_can.c ****     }
 334              		.loc 1 286 7 is_stmt 1 view .LVU111
 286:FWLIB/src/stm32f4xx_can.c ****     }
 335              		.loc 1 286 17 is_stmt 0 view .LVU112
 336 00dc 0368     		ldr	r3, [r0]
 337 00de 43F01003 		orr	r3, r3, #16
 338 00e2 0360     		str	r3, [r0]
 339 00e4 BFE7     		b	.L23
ARM GAS  /tmp/ccOHJlyF.s 			page 41


 340              	.L37:
 296:FWLIB/src/stm32f4xx_can.c ****     }
 341              		.loc 1 296 7 is_stmt 1 view .LVU113
 296:FWLIB/src/stm32f4xx_can.c ****     }
 342              		.loc 1 296 17 is_stmt 0 view .LVU114
 343 00e6 0368     		ldr	r3, [r0]
 344 00e8 43F00803 		orr	r3, r3, #8
 345 00ec 0360     		str	r3, [r0]
 346 00ee C1E7     		b	.L25
 347              	.L38:
 306:FWLIB/src/stm32f4xx_can.c ****     }
 348              		.loc 1 306 7 is_stmt 1 view .LVU115
 306:FWLIB/src/stm32f4xx_can.c ****     }
 349              		.loc 1 306 17 is_stmt 0 view .LVU116
 350 00f0 0368     		ldr	r3, [r0]
 351 00f2 43F00403 		orr	r3, r3, #4
 352 00f6 0360     		str	r3, [r0]
 353 00f8 C3E7     		b	.L27
 354              	.LVL20:
 355              	.L29:
 332:FWLIB/src/stm32f4xx_can.c ****     {
 356              		.loc 1 332 5 is_stmt 1 view .LVU117
 332:FWLIB/src/stm32f4xx_can.c ****     {
 357              		.loc 1 332 14 is_stmt 0 view .LVU118
 358 00fa 4368     		ldr	r3, [r0, #4]
 359              	.LVL21:
 332:FWLIB/src/stm32f4xx_can.c ****     {
 360              		.loc 1 332 8 view .LVU119
 361 00fc 13F0010F 		tst	r3, #1
 362 0100 03D0     		beq	.L32
 334:FWLIB/src/stm32f4xx_can.c ****     }
 363              		.loc 1 334 18 view .LVU120
 364 0102 0020     		movs	r0, #0
 365              	.LVL22:
 334:FWLIB/src/stm32f4xx_can.c ****     }
 366              		.loc 1 334 18 view .LVU121
 367 0104 7047     		bx	lr
 368              	.LVL23:
 369              	.L31:
 249:FWLIB/src/stm32f4xx_can.c ****   }
 370              		.loc 1 249 16 view .LVU122
 371 0106 0020     		movs	r0, #0
 372              	.LVL24:
 249:FWLIB/src/stm32f4xx_can.c ****   }
 373              		.loc 1 249 16 view .LVU123
 374 0108 7047     		bx	lr
 375              	.LVL25:
 376              	.L32:
 338:FWLIB/src/stm32f4xx_can.c ****     }
 377              		.loc 1 338 18 view .LVU124
 378 010a 0120     		movs	r0, #1
 379              	.LVL26:
 343:FWLIB/src/stm32f4xx_can.c **** }
 380              		.loc 1 343 3 is_stmt 1 view .LVU125
 344:FWLIB/src/stm32f4xx_can.c **** 
 381              		.loc 1 344 1 is_stmt 0 view .LVU126
 382 010c 7047     		bx	lr
ARM GAS  /tmp/ccOHJlyF.s 			page 42


 383              		.cfi_endproc
 384              	.LFE124:
 386              		.section	.text.CAN_FilterInit,"ax",%progbits
 387              		.align	1
 388              		.global	CAN_FilterInit
 389              		.syntax unified
 390              		.thumb
 391              		.thumb_func
 392              		.fpu fpv4-sp-d16
 394              	CAN_FilterInit:
 395              	.LVL27:
 396              	.LFB125:
 449:FWLIB/src/stm32f4xx_can.c ****   uint32_t filter_number_bit_pos = 0;
 397              		.loc 1 449 1 is_stmt 1 view -0
 398              		.cfi_startproc
 399              		@ args = 0, pretend = 0, frame = 0
 400              		@ frame_needed = 0, uses_anonymous_args = 0
 401              		@ link register save eliminated.
 449:FWLIB/src/stm32f4xx_can.c ****   uint32_t filter_number_bit_pos = 0;
 402              		.loc 1 449 1 is_stmt 0 view .LVU128
 403 0000 70B4     		push	{r4, r5, r6}
 404              	.LCFI1:
 405              		.cfi_def_cfa_offset 12
 406              		.cfi_offset 4, -12
 407              		.cfi_offset 5, -8
 408              		.cfi_offset 6, -4
 450:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 409              		.loc 1 450 3 is_stmt 1 view .LVU129
 410              	.LVL28:
 452:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
 411              		.loc 1 452 3 view .LVU130
 453:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
 412              		.loc 1 453 3 view .LVU131
 454:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
 413              		.loc 1 454 3 view .LVU132
 455:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));
 414              		.loc 1 455 3 view .LVU133
 456:FWLIB/src/stm32f4xx_can.c **** 
 415              		.loc 1 456 3 view .LVU134
 458:FWLIB/src/stm32f4xx_can.c **** 
 416              		.loc 1 458 3 view .LVU135
 458:FWLIB/src/stm32f4xx_can.c **** 
 417              		.loc 1 458 64 is_stmt 0 view .LVU136
 418 0002 837A     		ldrb	r3, [r0, #10]	@ zero_extendqisi2
 458:FWLIB/src/stm32f4xx_can.c **** 
 419              		.loc 1 458 25 view .LVU137
 420 0004 0122     		movs	r2, #1
 421 0006 02FA03F3 		lsl	r3, r2, r3
 422              	.LVL29:
 461:FWLIB/src/stm32f4xx_can.c **** 
 423              		.loc 1 461 3 is_stmt 1 view .LVU138
 461:FWLIB/src/stm32f4xx_can.c **** 
 424              		.loc 1 461 13 is_stmt 0 view .LVU139
 425 000a 3B4A     		ldr	r2, .L51
 426 000c D2F80012 		ldr	r1, [r2, #512]
 427 0010 41F00101 		orr	r1, r1, #1
 428 0014 C2F80012 		str	r1, [r2, #512]
ARM GAS  /tmp/ccOHJlyF.s 			page 43


 464:FWLIB/src/stm32f4xx_can.c **** 
 429              		.loc 1 464 3 is_stmt 1 view .LVU140
 464:FWLIB/src/stm32f4xx_can.c **** 
 430              		.loc 1 464 14 is_stmt 0 view .LVU141
 431 0018 D2F81C42 		ldr	r4, [r2, #540]
 464:FWLIB/src/stm32f4xx_can.c **** 
 432              		.loc 1 464 17 view .LVU142
 433 001c D943     		mvns	r1, r3
 464:FWLIB/src/stm32f4xx_can.c **** 
 434              		.loc 1 464 14 view .LVU143
 435 001e 0C40     		ands	r4, r4, r1
 436 0020 C2F81C42 		str	r4, [r2, #540]
 467:FWLIB/src/stm32f4xx_can.c ****   {
 437              		.loc 1 467 3 is_stmt 1 view .LVU144
 467:FWLIB/src/stm32f4xx_can.c ****   {
 438              		.loc 1 467 27 is_stmt 0 view .LVU145
 439 0024 027B     		ldrb	r2, [r0, #12]	@ zero_extendqisi2
 467:FWLIB/src/stm32f4xx_can.c ****   {
 440              		.loc 1 467 6 view .LVU146
 441 0026 B2B9     		cbnz	r2, .L40
 470:FWLIB/src/stm32f4xx_can.c **** 
 442              		.loc 1 470 5 is_stmt 1 view .LVU147
 470:FWLIB/src/stm32f4xx_can.c **** 
 443              		.loc 1 470 16 is_stmt 0 view .LVU148
 444 0028 334A     		ldr	r2, .L51
 445 002a D2F80C42 		ldr	r4, [r2, #524]
 446 002e 0C40     		ands	r4, r4, r1
 447 0030 C2F80C42 		str	r4, [r2, #524]
 474:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 448              		.loc 1 474 5 is_stmt 1 view .LVU149
 475:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 449              		.loc 1 475 53 is_stmt 0 view .LVU150
 450 0034 C688     		ldrh	r6, [r0, #6]
 476:FWLIB/src/stm32f4xx_can.c **** 
 451              		.loc 1 476 53 view .LVU151
 452 0036 4588     		ldrh	r5, [r0, #2]
 474:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 453              		.loc 1 474 47 view .LVU152
 454 0038 847A     		ldrb	r4, [r0, #10]	@ zero_extendqisi2
 475:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 455              		.loc 1 475 83 view .LVU153
 456 003a 45EA0645 		orr	r5, r5, r6, lsl #16
 474:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 457              		.loc 1 474 71 view .LVU154
 458 003e 4834     		adds	r4, r4, #72
 459 0040 42F83450 		str	r5, [r2, r4, lsl #3]
 480:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 460              		.loc 1 480 5 is_stmt 1 view .LVU155
 481:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 461              		.loc 1 481 53 is_stmt 0 view .LVU156
 462 0044 8688     		ldrh	r6, [r0, #4]
 482:FWLIB/src/stm32f4xx_can.c ****   }
 463              		.loc 1 482 53 view .LVU157
 464 0046 0488     		ldrh	r4, [r0]
 480:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 465              		.loc 1 480 47 view .LVU158
 466 0048 857A     		ldrb	r5, [r0, #10]	@ zero_extendqisi2
ARM GAS  /tmp/ccOHJlyF.s 			page 44


 481:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 467              		.loc 1 481 84 view .LVU159
 468 004a 44EA0644 		orr	r4, r4, r6, lsl #16
 480:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 469              		.loc 1 480 71 view .LVU160
 470 004e 4835     		adds	r5, r5, #72
 471 0050 02EBC502 		add	r2, r2, r5, lsl #3
 472 0054 5460     		str	r4, [r2, #4]
 473              	.L40:
 485:FWLIB/src/stm32f4xx_can.c ****   {
 474              		.loc 1 485 3 is_stmt 1 view .LVU161
 485:FWLIB/src/stm32f4xx_can.c ****   {
 475              		.loc 1 485 27 is_stmt 0 view .LVU162
 476 0056 027B     		ldrb	r2, [r0, #12]	@ zero_extendqisi2
 485:FWLIB/src/stm32f4xx_can.c ****   {
 477              		.loc 1 485 6 view .LVU163
 478 0058 012A     		cmp	r2, #1
 479 005a 1FD0     		beq	.L48
 480              	.L41:
 500:FWLIB/src/stm32f4xx_can.c ****   {
 481              		.loc 1 500 3 is_stmt 1 view .LVU164
 500:FWLIB/src/stm32f4xx_can.c ****   {
 482              		.loc 1 500 27 is_stmt 0 view .LVU165
 483 005c C27A     		ldrb	r2, [r0, #11]	@ zero_extendqisi2
 500:FWLIB/src/stm32f4xx_can.c ****   {
 484              		.loc 1 500 6 view .LVU166
 485 005e 002A     		cmp	r2, #0
 486 0060 34D1     		bne	.L42
 503:FWLIB/src/stm32f4xx_can.c ****   }
 487              		.loc 1 503 5 is_stmt 1 view .LVU167
 503:FWLIB/src/stm32f4xx_can.c ****   }
 488              		.loc 1 503 16 is_stmt 0 view .LVU168
 489 0062 254C     		ldr	r4, .L51
 490 0064 D4F80422 		ldr	r2, [r4, #516]
 491 0068 0A40     		ands	r2, r2, r1
 492 006a C4F80422 		str	r2, [r4, #516]
 493              	.L43:
 512:FWLIB/src/stm32f4xx_can.c ****   {
 494              		.loc 1 512 3 is_stmt 1 view .LVU169
 512:FWLIB/src/stm32f4xx_can.c ****   {
 495              		.loc 1 512 27 is_stmt 0 view .LVU170
 496 006e 0289     		ldrh	r2, [r0, #8]
 512:FWLIB/src/stm32f4xx_can.c ****   {
 497              		.loc 1 512 6 view .LVU171
 498 0070 2AB9     		cbnz	r2, .L44
 515:FWLIB/src/stm32f4xx_can.c ****   }
 499              		.loc 1 515 5 is_stmt 1 view .LVU172
 515:FWLIB/src/stm32f4xx_can.c ****   }
 500              		.loc 1 515 17 is_stmt 0 view .LVU173
 501 0072 214A     		ldr	r2, .L51
 502 0074 D2F81442 		ldr	r4, [r2, #532]
 503 0078 2140     		ands	r1, r1, r4
 504 007a C2F81412 		str	r1, [r2, #532]
 505              	.L44:
 518:FWLIB/src/stm32f4xx_can.c ****   {
 506              		.loc 1 518 3 is_stmt 1 view .LVU174
 518:FWLIB/src/stm32f4xx_can.c ****   {
ARM GAS  /tmp/ccOHJlyF.s 			page 45


 507              		.loc 1 518 27 is_stmt 0 view .LVU175
 508 007e 0289     		ldrh	r2, [r0, #8]
 518:FWLIB/src/stm32f4xx_can.c ****   {
 509              		.loc 1 518 6 view .LVU176
 510 0080 012A     		cmp	r2, #1
 511 0082 2AD0     		beq	.L49
 512              	.L45:
 525:FWLIB/src/stm32f4xx_can.c ****   {
 513              		.loc 1 525 3 is_stmt 1 view .LVU177
 525:FWLIB/src/stm32f4xx_can.c ****   {
 514              		.loc 1 525 27 is_stmt 0 view .LVU178
 515 0084 427B     		ldrb	r2, [r0, #13]	@ zero_extendqisi2
 525:FWLIB/src/stm32f4xx_can.c ****   {
 516              		.loc 1 525 6 view .LVU179
 517 0086 012A     		cmp	r2, #1
 518 0088 2ED0     		beq	.L50
 519              	.LVL30:
 520              	.L46:
 531:FWLIB/src/stm32f4xx_can.c **** }
 521              		.loc 1 531 3 is_stmt 1 view .LVU180
 531:FWLIB/src/stm32f4xx_can.c **** }
 522              		.loc 1 531 13 is_stmt 0 view .LVU181
 523 008a 1B4A     		ldr	r2, .L51
 524 008c D2F80032 		ldr	r3, [r2, #512]
 525 0090 23F00103 		bic	r3, r3, #1
 526 0094 C2F80032 		str	r3, [r2, #512]
 532:FWLIB/src/stm32f4xx_can.c **** #endif /* STM32F413_423xx */
 527              		.loc 1 532 1 view .LVU182
 528 0098 70BC     		pop	{r4, r5, r6}
 529              	.LCFI2:
 530              		.cfi_remember_state
 531              		.cfi_restore 6
 532              		.cfi_restore 5
 533              		.cfi_restore 4
 534              		.cfi_def_cfa_offset 0
 535 009a 7047     		bx	lr
 536              	.LVL31:
 537              	.L48:
 538              	.LCFI3:
 539              		.cfi_restore_state
 488:FWLIB/src/stm32f4xx_can.c ****     /* 32-bit identifier or First 32-bit identifier */
 540              		.loc 1 488 5 is_stmt 1 view .LVU183
 488:FWLIB/src/stm32f4xx_can.c ****     /* 32-bit identifier or First 32-bit identifier */
 541              		.loc 1 488 16 is_stmt 0 view .LVU184
 542 009c 164A     		ldr	r2, .L51
 543 009e D2F80C42 		ldr	r4, [r2, #524]
 544 00a2 1C43     		orrs	r4, r4, r3
 545 00a4 C2F80C42 		str	r4, [r2, #524]
 490:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 546              		.loc 1 490 5 is_stmt 1 view .LVU185
 491:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 547              		.loc 1 491 53 is_stmt 0 view .LVU186
 548 00a8 0688     		ldrh	r6, [r0]
 492:FWLIB/src/stm32f4xx_can.c ****     /* 32-bit mask or Second 32-bit identifier */
 549              		.loc 1 492 53 view .LVU187
 550 00aa 4588     		ldrh	r5, [r0, #2]
 490:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
ARM GAS  /tmp/ccOHJlyF.s 			page 46


 551              		.loc 1 490 47 view .LVU188
 552 00ac 847A     		ldrb	r4, [r0, #10]	@ zero_extendqisi2
 491:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 553              		.loc 1 491 80 view .LVU189
 554 00ae 45EA0645 		orr	r5, r5, r6, lsl #16
 490:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 555              		.loc 1 490 71 view .LVU190
 556 00b2 4834     		adds	r4, r4, #72
 557 00b4 42F83450 		str	r5, [r2, r4, lsl #3]
 494:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 558              		.loc 1 494 5 is_stmt 1 view .LVU191
 495:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 559              		.loc 1 495 53 is_stmt 0 view .LVU192
 560 00b8 8688     		ldrh	r6, [r0, #4]
 496:FWLIB/src/stm32f4xx_can.c ****   }
 561              		.loc 1 496 53 view .LVU193
 562 00ba C488     		ldrh	r4, [r0, #6]
 494:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 563              		.loc 1 494 47 view .LVU194
 564 00bc 857A     		ldrb	r5, [r0, #10]	@ zero_extendqisi2
 495:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 565              		.loc 1 495 84 view .LVU195
 566 00be 44EA0644 		orr	r4, r4, r6, lsl #16
 494:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 567              		.loc 1 494 71 view .LVU196
 568 00c2 4835     		adds	r5, r5, #72
 569 00c4 02EBC502 		add	r2, r2, r5, lsl #3
 570 00c8 5460     		str	r4, [r2, #4]
 571 00ca C7E7     		b	.L41
 572              	.L42:
 508:FWLIB/src/stm32f4xx_can.c ****   }
 573              		.loc 1 508 5 is_stmt 1 view .LVU197
 508:FWLIB/src/stm32f4xx_can.c ****   }
 574              		.loc 1 508 16 is_stmt 0 view .LVU198
 575 00cc 0A4C     		ldr	r4, .L51
 576 00ce D4F80422 		ldr	r2, [r4, #516]
 577 00d2 1A43     		orrs	r2, r2, r3
 578 00d4 C4F80422 		str	r2, [r4, #516]
 579 00d8 C9E7     		b	.L43
 580              	.L49:
 521:FWLIB/src/stm32f4xx_can.c ****   }
 581              		.loc 1 521 5 is_stmt 1 view .LVU199
 521:FWLIB/src/stm32f4xx_can.c ****   }
 582              		.loc 1 521 17 is_stmt 0 view .LVU200
 583 00da 0749     		ldr	r1, .L51
 584 00dc D1F81422 		ldr	r2, [r1, #532]
 585 00e0 1A43     		orrs	r2, r2, r3
 586 00e2 C1F81422 		str	r2, [r1, #532]
 587 00e6 CDE7     		b	.L45
 588              	.L50:
 527:FWLIB/src/stm32f4xx_can.c ****   }
 589              		.loc 1 527 5 is_stmt 1 view .LVU201
 527:FWLIB/src/stm32f4xx_can.c ****   }
 590              		.loc 1 527 16 is_stmt 0 view .LVU202
 591 00e8 0349     		ldr	r1, .L51
 592 00ea D1F81C22 		ldr	r2, [r1, #540]
 593 00ee 1343     		orrs	r3, r3, r2
ARM GAS  /tmp/ccOHJlyF.s 			page 47


 594              	.LVL32:
 527:FWLIB/src/stm32f4xx_can.c ****   }
 595              		.loc 1 527 16 view .LVU203
 596 00f0 C1F81C32 		str	r3, [r1, #540]
 597 00f4 C9E7     		b	.L46
 598              	.L52:
 599 00f6 00BF     		.align	2
 600              	.L51:
 601 00f8 00640040 		.word	1073767424
 602              		.cfi_endproc
 603              	.LFE125:
 605              		.section	.text.CAN_StructInit,"ax",%progbits
 606              		.align	1
 607              		.global	CAN_StructInit
 608              		.syntax unified
 609              		.thumb
 610              		.thumb_func
 611              		.fpu fpv4-sp-d16
 613              	CAN_StructInit:
 614              	.LVL33:
 615              	.LFB126:
 541:FWLIB/src/stm32f4xx_can.c ****   /* Reset CAN init structure parameters values */
 616              		.loc 1 541 1 is_stmt 1 view -0
 617              		.cfi_startproc
 618              		@ args = 0, pretend = 0, frame = 0
 619              		@ frame_needed = 0, uses_anonymous_args = 0
 620              		@ link register save eliminated.
 545:FWLIB/src/stm32f4xx_can.c ****   
 621              		.loc 1 545 3 view .LVU205
 545:FWLIB/src/stm32f4xx_can.c ****   
 622              		.loc 1 545 28 is_stmt 0 view .LVU206
 623 0000 0023     		movs	r3, #0
 624 0002 8371     		strb	r3, [r0, #6]
 548:FWLIB/src/stm32f4xx_can.c ****   
 625              		.loc 1 548 3 is_stmt 1 view .LVU207
 548:FWLIB/src/stm32f4xx_can.c ****   
 626              		.loc 1 548 28 is_stmt 0 view .LVU208
 627 0004 C371     		strb	r3, [r0, #7]
 551:FWLIB/src/stm32f4xx_can.c ****   
 628              		.loc 1 551 3 is_stmt 1 view .LVU209
 551:FWLIB/src/stm32f4xx_can.c ****   
 629              		.loc 1 551 28 is_stmt 0 view .LVU210
 630 0006 0372     		strb	r3, [r0, #8]
 554:FWLIB/src/stm32f4xx_can.c ****   
 631              		.loc 1 554 3 is_stmt 1 view .LVU211
 554:FWLIB/src/stm32f4xx_can.c ****   
 632              		.loc 1 554 28 is_stmt 0 view .LVU212
 633 0008 4372     		strb	r3, [r0, #9]
 557:FWLIB/src/stm32f4xx_can.c ****   
 634              		.loc 1 557 3 is_stmt 1 view .LVU213
 557:FWLIB/src/stm32f4xx_can.c ****   
 635              		.loc 1 557 28 is_stmt 0 view .LVU214
 636 000a 8372     		strb	r3, [r0, #10]
 560:FWLIB/src/stm32f4xx_can.c ****   
 637              		.loc 1 560 3 is_stmt 1 view .LVU215
 560:FWLIB/src/stm32f4xx_can.c ****   
 638              		.loc 1 560 28 is_stmt 0 view .LVU216
ARM GAS  /tmp/ccOHJlyF.s 			page 48


 639 000c C372     		strb	r3, [r0, #11]
 563:FWLIB/src/stm32f4xx_can.c ****   
 640              		.loc 1 563 3 is_stmt 1 view .LVU217
 563:FWLIB/src/stm32f4xx_can.c ****   
 641              		.loc 1 563 28 is_stmt 0 view .LVU218
 642 000e 8370     		strb	r3, [r0, #2]
 566:FWLIB/src/stm32f4xx_can.c ****   
 643              		.loc 1 566 3 is_stmt 1 view .LVU219
 566:FWLIB/src/stm32f4xx_can.c ****   
 644              		.loc 1 566 27 is_stmt 0 view .LVU220
 645 0010 C370     		strb	r3, [r0, #3]
 569:FWLIB/src/stm32f4xx_can.c ****   
 646              		.loc 1 569 3 is_stmt 1 view .LVU221
 569:FWLIB/src/stm32f4xx_can.c ****   
 647              		.loc 1 569 27 is_stmt 0 view .LVU222
 648 0012 0323     		movs	r3, #3
 649 0014 0371     		strb	r3, [r0, #4]
 572:FWLIB/src/stm32f4xx_can.c ****   
 650              		.loc 1 572 3 is_stmt 1 view .LVU223
 572:FWLIB/src/stm32f4xx_can.c ****   
 651              		.loc 1 572 27 is_stmt 0 view .LVU224
 652 0016 0223     		movs	r3, #2
 653 0018 4371     		strb	r3, [r0, #5]
 575:FWLIB/src/stm32f4xx_can.c **** }
 654              		.loc 1 575 3 is_stmt 1 view .LVU225
 575:FWLIB/src/stm32f4xx_can.c **** }
 655              		.loc 1 575 33 is_stmt 0 view .LVU226
 656 001a 0123     		movs	r3, #1
 657 001c 0380     		strh	r3, [r0]	@ movhi
 576:FWLIB/src/stm32f4xx_can.c **** 
 658              		.loc 1 576 1 view .LVU227
 659 001e 7047     		bx	lr
 660              		.cfi_endproc
 661              	.LFE126:
 663              		.section	.text.CAN_SlaveStartBank,"ax",%progbits
 664              		.align	1
 665              		.global	CAN_SlaveStartBank
 666              		.syntax unified
 667              		.thumb
 668              		.thumb_func
 669              		.fpu fpv4-sp-d16
 671              	CAN_SlaveStartBank:
 672              	.LVL34:
 673              	.LFB127:
 607:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 674              		.loc 1 607 1 is_stmt 1 view -0
 675              		.cfi_startproc
 676              		@ args = 0, pretend = 0, frame = 0
 677              		@ frame_needed = 0, uses_anonymous_args = 0
 678              		@ link register save eliminated.
 609:FWLIB/src/stm32f4xx_can.c ****   
 679              		.loc 1 609 3 view .LVU229
 612:FWLIB/src/stm32f4xx_can.c ****   
 680              		.loc 1 612 3 view .LVU230
 612:FWLIB/src/stm32f4xx_can.c ****   
 681              		.loc 1 612 13 is_stmt 0 view .LVU231
 682 0000 0D4B     		ldr	r3, .L55
ARM GAS  /tmp/ccOHJlyF.s 			page 49


 683 0002 D3F80022 		ldr	r2, [r3, #512]
 684 0006 42F00102 		orr	r2, r2, #1
 685 000a C3F80022 		str	r2, [r3, #512]
 615:FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 686              		.loc 1 615 3 is_stmt 1 view .LVU232
 615:FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 687              		.loc 1 615 13 is_stmt 0 view .LVU233
 688 000e D3F80022 		ldr	r2, [r3, #512]
 689 0012 22F47C52 		bic	r2, r2, #16128
 690 0016 22F00E02 		bic	r2, r2, #14
 691 001a C3F80022 		str	r2, [r3, #512]
 616:FWLIB/src/stm32f4xx_can.c ****   
 692              		.loc 1 616 3 is_stmt 1 view .LVU234
 616:FWLIB/src/stm32f4xx_can.c ****   
 693              		.loc 1 616 13 is_stmt 0 view .LVU235
 694 001e D3F80022 		ldr	r2, [r3, #512]
 695 0022 42EA0020 		orr	r0, r2, r0, lsl #8
 696              	.LVL35:
 616:FWLIB/src/stm32f4xx_can.c ****   
 697              		.loc 1 616 13 view .LVU236
 698 0026 C3F80002 		str	r0, [r3, #512]
 619:FWLIB/src/stm32f4xx_can.c **** }
 699              		.loc 1 619 3 is_stmt 1 view .LVU237
 619:FWLIB/src/stm32f4xx_can.c **** }
 700              		.loc 1 619 13 is_stmt 0 view .LVU238
 701 002a D3F80022 		ldr	r2, [r3, #512]
 702 002e 22F00102 		bic	r2, r2, #1
 703 0032 C3F80022 		str	r2, [r3, #512]
 620:FWLIB/src/stm32f4xx_can.c **** #endif /* STM32F413_423xx */
 704              		.loc 1 620 1 view .LVU239
 705 0036 7047     		bx	lr
 706              	.L56:
 707              		.align	2
 708              	.L55:
 709 0038 00640040 		.word	1073767424
 710              		.cfi_endproc
 711              	.LFE127:
 713              		.section	.text.CAN_DBGFreeze,"ax",%progbits
 714              		.align	1
 715              		.global	CAN_DBGFreeze
 716              		.syntax unified
 717              		.thumb
 718              		.thumb_func
 719              		.fpu fpv4-sp-d16
 721              	CAN_DBGFreeze:
 722              	.LVL36:
 723              	.LFB128:
 633:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 724              		.loc 1 633 1 is_stmt 1 view -0
 725              		.cfi_startproc
 726              		@ args = 0, pretend = 0, frame = 0
 727              		@ frame_needed = 0, uses_anonymous_args = 0
 728              		@ link register save eliminated.
 635:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 729              		.loc 1 635 3 view .LVU241
 636:FWLIB/src/stm32f4xx_can.c ****   
 730              		.loc 1 636 3 view .LVU242
ARM GAS  /tmp/ccOHJlyF.s 			page 50


 638:FWLIB/src/stm32f4xx_can.c ****   {
 731              		.loc 1 638 3 view .LVU243
 638:FWLIB/src/stm32f4xx_can.c ****   {
 732              		.loc 1 638 6 is_stmt 0 view .LVU244
 733 0000 21B1     		cbz	r1, .L58
 641:FWLIB/src/stm32f4xx_can.c ****   }
 734              		.loc 1 641 5 is_stmt 1 view .LVU245
 641:FWLIB/src/stm32f4xx_can.c ****   }
 735              		.loc 1 641 15 is_stmt 0 view .LVU246
 736 0002 0368     		ldr	r3, [r0]
 737 0004 43F48033 		orr	r3, r3, #65536
 738 0008 0360     		str	r3, [r0]
 739 000a 7047     		bx	lr
 740              	.L58:
 646:FWLIB/src/stm32f4xx_can.c ****   }
 741              		.loc 1 646 5 is_stmt 1 view .LVU247
 646:FWLIB/src/stm32f4xx_can.c ****   }
 742              		.loc 1 646 15 is_stmt 0 view .LVU248
 743 000c 0368     		ldr	r3, [r0]
 744 000e 23F48033 		bic	r3, r3, #65536
 745 0012 0360     		str	r3, [r0]
 648:FWLIB/src/stm32f4xx_can.c **** 
 746              		.loc 1 648 1 view .LVU249
 747 0014 7047     		bx	lr
 748              		.cfi_endproc
 749              	.LFE128:
 751              		.section	.text.CAN_TTComModeCmd,"ax",%progbits
 752              		.align	1
 753              		.global	CAN_TTComModeCmd
 754              		.syntax unified
 755              		.thumb
 756              		.thumb_func
 757              		.fpu fpv4-sp-d16
 759              	CAN_TTComModeCmd:
 760              	.LVL37:
 761              	.LFB129:
 664:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 762              		.loc 1 664 1 is_stmt 1 view -0
 763              		.cfi_startproc
 764              		@ args = 0, pretend = 0, frame = 0
 765              		@ frame_needed = 0, uses_anonymous_args = 0
 766              		@ link register save eliminated.
 666:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 767              		.loc 1 666 3 view .LVU251
 667:FWLIB/src/stm32f4xx_can.c ****   if (NewState != DISABLE)
 768              		.loc 1 667 3 view .LVU252
 668:FWLIB/src/stm32f4xx_can.c ****   {
 769              		.loc 1 668 3 view .LVU253
 668:FWLIB/src/stm32f4xx_can.c ****   {
 770              		.loc 1 668 6 is_stmt 0 view .LVU254
 771 0000 B1B1     		cbz	r1, .L61
 671:FWLIB/src/stm32f4xx_can.c **** 
 772              		.loc 1 671 5 is_stmt 1 view .LVU255
 671:FWLIB/src/stm32f4xx_can.c **** 
 773              		.loc 1 671 15 is_stmt 0 view .LVU256
 774 0002 0368     		ldr	r3, [r0]
 775 0004 43F08003 		orr	r3, r3, #128
ARM GAS  /tmp/ccOHJlyF.s 			page 51


 776 0008 0360     		str	r3, [r0]
 674:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 777              		.loc 1 674 5 is_stmt 1 view .LVU257
 674:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 778              		.loc 1 674 30 is_stmt 0 view .LVU258
 779 000a D0F88431 		ldr	r3, [r0, #388]
 780 000e 43F48073 		orr	r3, r3, #256
 781 0012 C0F88431 		str	r3, [r0, #388]
 675:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 782              		.loc 1 675 5 is_stmt 1 view .LVU259
 675:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 783              		.loc 1 675 30 is_stmt 0 view .LVU260
 784 0016 D0F89431 		ldr	r3, [r0, #404]
 785 001a 43F48073 		orr	r3, r3, #256
 786 001e C0F89431 		str	r3, [r0, #404]
 676:FWLIB/src/stm32f4xx_can.c ****   }
 787              		.loc 1 676 5 is_stmt 1 view .LVU261
 676:FWLIB/src/stm32f4xx_can.c ****   }
 788              		.loc 1 676 30 is_stmt 0 view .LVU262
 789 0022 D0F8A431 		ldr	r3, [r0, #420]
 790 0026 43F48073 		orr	r3, r3, #256
 791 002a C0F8A431 		str	r3, [r0, #420]
 792 002e 7047     		bx	lr
 793              	.L61:
 681:FWLIB/src/stm32f4xx_can.c **** 
 794              		.loc 1 681 5 is_stmt 1 view .LVU263
 681:FWLIB/src/stm32f4xx_can.c **** 
 795              		.loc 1 681 15 is_stmt 0 view .LVU264
 796 0030 0368     		ldr	r3, [r0]
 797 0032 23F08003 		bic	r3, r3, #128
 798 0036 0360     		str	r3, [r0]
 684:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 799              		.loc 1 684 5 is_stmt 1 view .LVU265
 684:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 800              		.loc 1 684 30 is_stmt 0 view .LVU266
 801 0038 D0F88431 		ldr	r3, [r0, #388]
 802 003c 23F48073 		bic	r3, r3, #256
 803 0040 C0F88431 		str	r3, [r0, #388]
 685:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 804              		.loc 1 685 5 is_stmt 1 view .LVU267
 685:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 805              		.loc 1 685 30 is_stmt 0 view .LVU268
 806 0044 D0F89431 		ldr	r3, [r0, #404]
 807 0048 23F48073 		bic	r3, r3, #256
 808 004c C0F89431 		str	r3, [r0, #404]
 686:FWLIB/src/stm32f4xx_can.c ****   }
 809              		.loc 1 686 5 is_stmt 1 view .LVU269
 686:FWLIB/src/stm32f4xx_can.c ****   }
 810              		.loc 1 686 30 is_stmt 0 view .LVU270
 811 0050 D0F8A431 		ldr	r3, [r0, #420]
 812 0054 23F48073 		bic	r3, r3, #256
 813 0058 C0F8A431 		str	r3, [r0, #420]
 688:FWLIB/src/stm32f4xx_can.c **** /**
 814              		.loc 1 688 1 view .LVU271
 815 005c 7047     		bx	lr
 816              		.cfi_endproc
 817              	.LFE129:
ARM GAS  /tmp/ccOHJlyF.s 			page 52


 819              		.section	.text.CAN_Transmit,"ax",%progbits
 820              		.align	1
 821              		.global	CAN_Transmit
 822              		.syntax unified
 823              		.thumb
 824              		.thumb_func
 825              		.fpu fpv4-sp-d16
 827              	CAN_Transmit:
 828              	.LVL38:
 829              	.LFB130:
 719:FWLIB/src/stm32f4xx_can.c ****   uint8_t transmit_mailbox = 0;
 830              		.loc 1 719 1 is_stmt 1 view -0
 831              		.cfi_startproc
 832              		@ args = 0, pretend = 0, frame = 0
 833              		@ frame_needed = 0, uses_anonymous_args = 0
 834              		@ link register save eliminated.
 719:FWLIB/src/stm32f4xx_can.c ****   uint8_t transmit_mailbox = 0;
 835              		.loc 1 719 1 is_stmt 0 view .LVU273
 836 0000 0346     		mov	r3, r0
 720:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 837              		.loc 1 720 3 is_stmt 1 view .LVU274
 838              	.LVL39:
 722:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
 839              		.loc 1 722 3 view .LVU275
 723:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_RTR(TxMessage->RTR));
 840              		.loc 1 723 3 view .LVU276
 724:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_DLC(TxMessage->DLC));
 841              		.loc 1 724 3 view .LVU277
 725:FWLIB/src/stm32f4xx_can.c **** 
 842              		.loc 1 725 3 view .LVU278
 728:FWLIB/src/stm32f4xx_can.c ****   {
 843              		.loc 1 728 3 view .LVU279
 728:FWLIB/src/stm32f4xx_can.c ****   {
 844              		.loc 1 728 12 is_stmt 0 view .LVU280
 845 0002 8268     		ldr	r2, [r0, #8]
 728:FWLIB/src/stm32f4xx_can.c ****   {
 846              		.loc 1 728 6 view .LVU281
 847 0004 12F0806F 		tst	r2, #67108864
 848 0008 09D1     		bne	.L68
 732:FWLIB/src/stm32f4xx_can.c ****   {
 849              		.loc 1 732 8 is_stmt 1 view .LVU282
 732:FWLIB/src/stm32f4xx_can.c ****   {
 850              		.loc 1 732 17 is_stmt 0 view .LVU283
 851 000a 8268     		ldr	r2, [r0, #8]
 732:FWLIB/src/stm32f4xx_can.c ****   {
 852              		.loc 1 732 11 view .LVU284
 853 000c 12F0006F 		tst	r2, #134217728
 854 0010 4CD1     		bne	.L69
 736:FWLIB/src/stm32f4xx_can.c ****   {
 855              		.loc 1 736 8 is_stmt 1 view .LVU285
 736:FWLIB/src/stm32f4xx_can.c ****   {
 856              		.loc 1 736 17 is_stmt 0 view .LVU286
 857 0012 8268     		ldr	r2, [r0, #8]
 736:FWLIB/src/stm32f4xx_can.c ****   {
 858              		.loc 1 736 11 view .LVU287
 859 0014 12F0805F 		tst	r2, #268435456
 860 0018 56D0     		beq	.L70
ARM GAS  /tmp/ccOHJlyF.s 			page 53


 738:FWLIB/src/stm32f4xx_can.c ****   }
 861              		.loc 1 738 22 view .LVU288
 862 001a 0220     		movs	r0, #2
 863              	.LVL40:
 738:FWLIB/src/stm32f4xx_can.c ****   }
 864              		.loc 1 738 22 view .LVU289
 865 001c 00E0     		b	.L64
 866              	.LVL41:
 867              	.L68:
 730:FWLIB/src/stm32f4xx_can.c ****   }
 868              		.loc 1 730 22 view .LVU290
 869 001e 0020     		movs	r0, #0
 870              	.LVL42:
 871              	.L64:
 719:FWLIB/src/stm32f4xx_can.c ****   uint8_t transmit_mailbox = 0;
 872              		.loc 1 719 1 view .LVU291
 873 0020 F0B4     		push	{r4, r5, r6, r7}
 874              	.LCFI4:
 875              		.cfi_def_cfa_offset 16
 876              		.cfi_offset 4, -16
 877              		.cfi_offset 5, -12
 878              		.cfi_offset 6, -8
 879              		.cfi_offset 7, -4
 748:FWLIB/src/stm32f4xx_can.c ****     if (TxMessage->IDE == CAN_Id_Standard)
 880              		.loc 1 748 5 is_stmt 1 view .LVU292
 748:FWLIB/src/stm32f4xx_can.c ****     if (TxMessage->IDE == CAN_Id_Standard)
 881              		.loc 1 748 44 is_stmt 0 view .LVU293
 882 0022 0546     		mov	r5, r0
 883 0024 00F11802 		add	r2, r0, #24
 884 0028 1201     		lsls	r2, r2, #4
 885 002a 9C58     		ldr	r4, [r3, r2]
 886 002c 04F00104 		and	r4, r4, #1
 887 0030 9C50     		str	r4, [r3, r2]
 749:FWLIB/src/stm32f4xx_can.c ****     {
 888              		.loc 1 749 5 is_stmt 1 view .LVU294
 749:FWLIB/src/stm32f4xx_can.c ****     {
 889              		.loc 1 749 18 is_stmt 0 view .LVU295
 890 0032 0A7A     		ldrb	r2, [r1, #8]	@ zero_extendqisi2
 749:FWLIB/src/stm32f4xx_can.c ****     {
 891              		.loc 1 749 8 view .LVU296
 892 0034 002A     		cmp	r2, #0
 893 0036 3BD1     		bne	.L66
 751:FWLIB/src/stm32f4xx_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 894              		.loc 1 751 7 is_stmt 1 view .LVU297
 752:FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 895              		.loc 1 752 7 view .LVU298
 752:FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 896              		.loc 1 752 46 is_stmt 0 view .LVU299
 897 0038 00F11802 		add	r2, r0, #24
 898 003c 1201     		lsls	r2, r2, #4
 899 003e 9C58     		ldr	r4, [r3, r2]
 752:FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 900              		.loc 1 752 60 view .LVU300
 901 0040 0F68     		ldr	r7, [r1]
 753:FWLIB/src/stm32f4xx_can.c ****     }
 902              		.loc 1 753 60 view .LVU301
 903 0042 4E7A     		ldrb	r6, [r1, #9]	@ zero_extendqisi2
ARM GAS  /tmp/ccOHJlyF.s 			page 54


 752:FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 904              		.loc 1 752 75 view .LVU302
 905 0044 46EA4756 		orr	r6, r6, r7, lsl #21
 752:FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 906              		.loc 1 752 46 view .LVU303
 907 0048 3443     		orrs	r4, r4, r6
 908 004a 9C50     		str	r4, [r3, r2]
 909              	.L67:
 764:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 910              		.loc 1 764 5 is_stmt 1 view .LVU304
 764:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 911              		.loc 1 764 20 is_stmt 0 view .LVU305
 912 004c 8A7A     		ldrb	r2, [r1, #10]	@ zero_extendqisi2
 913 004e 02F00F02 		and	r2, r2, #15
 914 0052 8A72     		strb	r2, [r1, #10]
 765:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 915              		.loc 1 765 5 is_stmt 1 view .LVU306
 765:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 916              		.loc 1 765 45 is_stmt 0 view .LVU307
 917 0054 05F11804 		add	r4, r5, #24
 918 0058 2401     		lsls	r4, r4, #4
 919 005a 1A19     		adds	r2, r3, r4
 920 005c 5668     		ldr	r6, [r2, #4]
 921 005e 26F00F06 		bic	r6, r6, #15
 922 0062 5660     		str	r6, [r2, #4]
 766:FWLIB/src/stm32f4xx_can.c **** 
 923              		.loc 1 766 5 is_stmt 1 view .LVU308
 766:FWLIB/src/stm32f4xx_can.c **** 
 924              		.loc 1 766 45 is_stmt 0 view .LVU309
 925 0064 5668     		ldr	r6, [r2, #4]
 766:FWLIB/src/stm32f4xx_can.c **** 
 926              		.loc 1 766 57 view .LVU310
 927 0066 8F7A     		ldrb	r7, [r1, #10]	@ zero_extendqisi2
 766:FWLIB/src/stm32f4xx_can.c **** 
 928              		.loc 1 766 45 view .LVU311
 929 0068 3E43     		orrs	r6, r6, r7
 930 006a 5660     		str	r6, [r2, #4]
 769:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 931              		.loc 1 769 5 is_stmt 1 view .LVU312
 769:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 932              		.loc 1 769 74 is_stmt 0 view .LVU313
 933 006c 8E7B     		ldrb	r6, [r1, #14]	@ zero_extendqisi2
 770:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 934              		.loc 1 770 72 view .LVU314
 935 006e 4A7B     		ldrb	r2, [r1, #13]	@ zero_extendqisi2
 770:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 936              		.loc 1 770 76 view .LVU315
 937 0070 1204     		lsls	r2, r2, #16
 769:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 938              		.loc 1 769 85 view .LVU316
 939 0072 42EA0662 		orr	r2, r2, r6, lsl #24
 771:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[0]));
 940              		.loc 1 771 72 view .LVU317
 941 0076 0E7B     		ldrb	r6, [r1, #12]	@ zero_extendqisi2
 770:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 942              		.loc 1 770 83 view .LVU318
 943 0078 42EA0622 		orr	r2, r2, r6, lsl #8
ARM GAS  /tmp/ccOHJlyF.s 			page 55


 772:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 944              		.loc 1 772 72 view .LVU319
 945 007c CE7A     		ldrb	r6, [r1, #11]	@ zero_extendqisi2
 771:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[0]));
 946              		.loc 1 771 82 view .LVU320
 947 007e 3243     		orrs	r2, r2, r6
 769:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 948              		.loc 1 769 45 view .LVU321
 949 0080 03EB0515 		add	r5, r3, r5, lsl #4
 950 0084 C5F88821 		str	r2, [r5, #392]
 773:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 951              		.loc 1 773 5 is_stmt 1 view .LVU322
 773:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 952              		.loc 1 773 74 is_stmt 0 view .LVU323
 953 0088 8E7C     		ldrb	r6, [r1, #18]	@ zero_extendqisi2
 774:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 954              		.loc 1 774 72 view .LVU324
 955 008a 4A7C     		ldrb	r2, [r1, #17]	@ zero_extendqisi2
 774:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 956              		.loc 1 774 76 view .LVU325
 957 008c 1204     		lsls	r2, r2, #16
 773:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 958              		.loc 1 773 85 view .LVU326
 959 008e 42EA0662 		orr	r2, r2, r6, lsl #24
 775:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[4]));
 960              		.loc 1 775 72 view .LVU327
 961 0092 0E7C     		ldrb	r6, [r1, #16]	@ zero_extendqisi2
 774:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 962              		.loc 1 774 83 view .LVU328
 963 0094 42EA0622 		orr	r2, r2, r6, lsl #8
 776:FWLIB/src/stm32f4xx_can.c ****     /* Request transmission */
 964              		.loc 1 776 72 view .LVU329
 965 0098 C97B     		ldrb	r1, [r1, #15]	@ zero_extendqisi2
 966              	.LVL43:
 775:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[4]));
 967              		.loc 1 775 82 view .LVU330
 968 009a 0A43     		orrs	r2, r2, r1
 773:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 969              		.loc 1 773 45 view .LVU331
 970 009c C5F88C21 		str	r2, [r5, #396]
 778:FWLIB/src/stm32f4xx_can.c ****   }
 971              		.loc 1 778 5 is_stmt 1 view .LVU332
 778:FWLIB/src/stm32f4xx_can.c ****   }
 972              		.loc 1 778 44 is_stmt 0 view .LVU333
 973 00a0 1A59     		ldr	r2, [r3, r4]
 974 00a2 42F00102 		orr	r2, r2, #1
 975 00a6 1A51     		str	r2, [r3, r4]
 780:FWLIB/src/stm32f4xx_can.c **** }
 976              		.loc 1 780 3 is_stmt 1 view .LVU334
 781:FWLIB/src/stm32f4xx_can.c **** 
 977              		.loc 1 781 1 is_stmt 0 view .LVU335
 978 00a8 F0BC     		pop	{r4, r5, r6, r7}
 979              	.LCFI5:
 980              		.cfi_restore 7
 981              		.cfi_restore 6
 982              		.cfi_restore 5
 983              		.cfi_restore 4
ARM GAS  /tmp/ccOHJlyF.s 			page 56


 984              		.cfi_def_cfa_offset 0
 985 00aa 7047     		bx	lr
 986              	.LVL44:
 987              	.L69:
 734:FWLIB/src/stm32f4xx_can.c ****   }
 988              		.loc 1 734 22 view .LVU336
 989 00ac 0120     		movs	r0, #1
 990              	.LVL45:
 734:FWLIB/src/stm32f4xx_can.c ****   }
 991              		.loc 1 734 22 view .LVU337
 992 00ae B7E7     		b	.L64
 993              	.L66:
 994              	.LCFI6:
 995              		.cfi_def_cfa_offset 16
 996              		.cfi_offset 4, -16
 997              		.cfi_offset 5, -12
 998              		.cfi_offset 6, -8
 999              		.cfi_offset 7, -4
 757:FWLIB/src/stm32f4xx_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 1000              		.loc 1 757 7 is_stmt 1 view .LVU338
 758:FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->IDE | \
 1001              		.loc 1 758 7 view .LVU339
 758:FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->IDE | \
 1002              		.loc 1 758 46 is_stmt 0 view .LVU340
 1003 00b0 00F11804 		add	r4, r0, #24
 1004 00b4 2401     		lsls	r4, r4, #4
 1005 00b6 1E59     		ldr	r6, [r3, r4]
 758:FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->IDE | \
 1006              		.loc 1 758 60 view .LVU341
 1007 00b8 4F68     		ldr	r7, [r1, #4]
 758:FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->IDE | \
 1008              		.loc 1 758 74 view .LVU342
 1009 00ba 42EAC702 		orr	r2, r2, r7, lsl #3
 760:FWLIB/src/stm32f4xx_can.c ****     }
 1010              		.loc 1 760 60 view .LVU343
 1011 00be 4F7A     		ldrb	r7, [r1, #9]	@ zero_extendqisi2
 759:FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 1012              		.loc 1 759 66 view .LVU344
 1013 00c0 3A43     		orrs	r2, r2, r7
 758:FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->IDE | \
 1014              		.loc 1 758 46 view .LVU345
 1015 00c2 3243     		orrs	r2, r2, r6
 1016 00c4 1A51     		str	r2, [r3, r4]
 1017 00c6 C1E7     		b	.L67
 1018              	.LVL46:
 1019              	.L70:
 1020              	.LCFI7:
 1021              		.cfi_def_cfa_offset 0
 1022              		.cfi_restore 4
 1023              		.cfi_restore 5
 1024              		.cfi_restore 6
 1025              		.cfi_restore 7
 742:FWLIB/src/stm32f4xx_can.c ****   }
 1026              		.loc 1 742 22 view .LVU346
 1027 00c8 0420     		movs	r0, #4
 1028              	.LVL47:
 780:FWLIB/src/stm32f4xx_can.c **** }
ARM GAS  /tmp/ccOHJlyF.s 			page 57


 1029              		.loc 1 780 3 is_stmt 1 view .LVU347
 781:FWLIB/src/stm32f4xx_can.c **** 
 1030              		.loc 1 781 1 is_stmt 0 view .LVU348
 1031 00ca 7047     		bx	lr
 1032              		.cfi_endproc
 1033              	.LFE130:
 1035              		.section	.text.CAN_TransmitStatus,"ax",%progbits
 1036              		.align	1
 1037              		.global	CAN_TransmitStatus
 1038              		.syntax unified
 1039              		.thumb
 1040              		.thumb_func
 1041              		.fpu fpv4-sp-d16
 1043              	CAN_TransmitStatus:
 1044              	.LVL48:
 1045              	.LFB131:
 792:FWLIB/src/stm32f4xx_can.c ****   uint32_t state = 0;
 1046              		.loc 1 792 1 is_stmt 1 view -0
 1047              		.cfi_startproc
 1048              		@ args = 0, pretend = 0, frame = 0
 1049              		@ frame_needed = 0, uses_anonymous_args = 0
 1050              		@ link register save eliminated.
 793:FWLIB/src/stm32f4xx_can.c **** 
 1051              		.loc 1 793 3 view .LVU350
 796:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 1052              		.loc 1 796 3 view .LVU351
 797:FWLIB/src/stm32f4xx_can.c ****  
 1053              		.loc 1 797 3 view .LVU352
 799:FWLIB/src/stm32f4xx_can.c ****   {
 1054              		.loc 1 799 3 view .LVU353
 1055 0000 0129     		cmp	r1, #1
 1056 0002 1BD0     		beq	.L75
 1057 0004 4BB2     		sxtb	r3, r1
 1058 0006 1BB1     		cbz	r3, .L76
 1059 0008 0229     		cmp	r1, #2
 1060 000a 1BD0     		beq	.L77
 817:FWLIB/src/stm32f4xx_can.c ****       break;
 1061              		.loc 1 817 23 is_stmt 0 view .LVU354
 1062 000c 0220     		movs	r0, #2
 1063              	.LVL49:
 817:FWLIB/src/stm32f4xx_can.c ****       break;
 1064              		.loc 1 817 23 view .LVU355
 1065 000e 7047     		bx	lr
 1066              	.LVL50:
 1067              	.L76:
 802:FWLIB/src/stm32f4xx_can.c ****       break;
 1068              		.loc 1 802 7 is_stmt 1 view .LVU356
 802:FWLIB/src/stm32f4xx_can.c ****       break;
 1069              		.loc 1 802 21 is_stmt 0 view .LVU357
 1070 0010 8368     		ldr	r3, [r0, #8]
 802:FWLIB/src/stm32f4xx_can.c ****       break;
 1071              		.loc 1 802 13 view .LVU358
 1072 0012 23F07B43 		bic	r3, r3, #-83886080
 1073 0016 23F47F03 		bic	r3, r3, #16711680
 1074 001a 23F47F43 		bic	r3, r3, #65280
 1075 001e 23F0FC03 		bic	r3, r3, #252
 1076              	.LVL51:
ARM GAS  /tmp/ccOHJlyF.s 			page 58


 803:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_1): 
 1077              		.loc 1 803 7 is_stmt 1 view .LVU359
 1078              	.L79:
 814:FWLIB/src/stm32f4xx_can.c ****   {
 1079              		.loc 1 814 3 view .LVU360
 1080 0022 194A     		ldr	r2, .L88
 1081 0024 9342     		cmp	r3, r2
 1082 0026 21D0     		beq	.L81
 814:FWLIB/src/stm32f4xx_can.c ****   {
 1083              		.loc 1 814 3 is_stmt 0 view .LVU361
 1084 0028 14D8     		bhi	.L80
 1085 002a 184A     		ldr	r2, .L88+4
 1086 002c 9342     		cmp	r3, r2
 1087 002e 1FD0     		beq	.L82
 1088 0030 0232     		adds	r2, r2, #2
 1089 0032 9342     		cmp	r3, r2
 1090 0034 1ED0     		beq	.L83
 1091 0036 FBB1     		cbz	r3, .L84
 833:FWLIB/src/stm32f4xx_can.c ****       break;
 1092              		.loc 1 833 20 view .LVU362
 1093 0038 0020     		movs	r0, #0
 1094              	.LVL52:
 833:FWLIB/src/stm32f4xx_can.c ****       break;
 1095              		.loc 1 833 20 view .LVU363
 1096 003a 7047     		bx	lr
 1097              	.LVL53:
 1098              	.L75:
 805:FWLIB/src/stm32f4xx_can.c ****       break;
 1099              		.loc 1 805 7 is_stmt 1 view .LVU364
 805:FWLIB/src/stm32f4xx_can.c ****       break;
 1100              		.loc 1 805 21 is_stmt 0 view .LVU365
 1101 003c 8268     		ldr	r2, [r0, #8]
 805:FWLIB/src/stm32f4xx_can.c ****       break;
 1102              		.loc 1 805 13 view .LVU366
 1103 003e 144B     		ldr	r3, .L88+8
 1104 0040 1340     		ands	r3, r3, r2
 1105              	.LVL54:
 806:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_2): 
 1106              		.loc 1 806 7 is_stmt 1 view .LVU367
 1107 0042 EEE7     		b	.L79
 1108              	.LVL55:
 1109              	.L77:
 808:FWLIB/src/stm32f4xx_can.c ****       break;
 1110              		.loc 1 808 7 view .LVU368
 808:FWLIB/src/stm32f4xx_can.c ****       break;
 1111              		.loc 1 808 21 is_stmt 0 view .LVU369
 1112 0044 8368     		ldr	r3, [r0, #8]
 808:FWLIB/src/stm32f4xx_can.c ****       break;
 1113              		.loc 1 808 13 view .LVU370
 1114 0046 23F06F43 		bic	r3, r3, #-285212672
 1115 004a 23F47C03 		bic	r3, r3, #16515072
 1116 004e 1B0C     		lsrs	r3, r3, #16
 1117 0050 1B04     		lsls	r3, r3, #16
 1118              	.LVL56:
 809:FWLIB/src/stm32f4xx_can.c ****     default:
 1119              		.loc 1 809 7 is_stmt 1 view .LVU371
 1120 0052 E6E7     		b	.L79
ARM GAS  /tmp/ccOHJlyF.s 			page 59


 1121              	.L80:
 814:FWLIB/src/stm32f4xx_can.c ****   {
 1122              		.loc 1 814 3 is_stmt 0 view .LVU372
 1123 0054 0F4A     		ldr	r2, .L88+12
 1124 0056 9342     		cmp	r3, r2
 1125 0058 10D0     		beq	.L85
 1126 005a 02F50032 		add	r2, r2, #131072
 1127 005e 9342     		cmp	r3, r2
 1128 0060 0ED0     		beq	.L86
 1129 0062 0B4A     		ldr	r2, .L88+8
 1130 0064 9342     		cmp	r3, r2
 1131 0066 0DD0     		beq	.L87
 833:FWLIB/src/stm32f4xx_can.c ****       break;
 1132              		.loc 1 833 20 view .LVU373
 1133 0068 0020     		movs	r0, #0
 1134              	.LVL57:
 833:FWLIB/src/stm32f4xx_can.c ****       break;
 1135              		.loc 1 833 20 view .LVU374
 1136 006a 7047     		bx	lr
 1137              	.LVL58:
 1138              	.L81:
 822:FWLIB/src/stm32f4xx_can.c ****       break;
 1139              		.loc 1 822 49 view .LVU375
 1140 006c 0020     		movs	r0, #0
 1141              	.LVL59:
 822:FWLIB/src/stm32f4xx_can.c ****       break;
 1142              		.loc 1 822 49 view .LVU376
 1143 006e 7047     		bx	lr
 1144              	.LVL60:
 1145              	.L82:
 820:FWLIB/src/stm32f4xx_can.c ****       break;
 1146              		.loc 1 820 49 view .LVU377
 1147 0070 0020     		movs	r0, #0
 1148              	.LVL61:
 820:FWLIB/src/stm32f4xx_can.c ****       break;
 1149              		.loc 1 820 49 view .LVU378
 1150 0072 7047     		bx	lr
 1151              	.LVL62:
 1152              	.L83:
 827:FWLIB/src/stm32f4xx_can.c ****       break;
 1153              		.loc 1 827 63 view .LVU379
 1154 0074 0120     		movs	r0, #1
 1155              	.LVL63:
 827:FWLIB/src/stm32f4xx_can.c ****       break;
 1156              		.loc 1 827 63 view .LVU380
 1157 0076 7047     		bx	lr
 1158              	.LVL64:
 1159              	.L84:
 817:FWLIB/src/stm32f4xx_can.c ****       break;
 1160              		.loc 1 817 23 view .LVU381
 1161 0078 0220     		movs	r0, #2
 1162              	.LVL65:
 817:FWLIB/src/stm32f4xx_can.c ****       break;
 1163              		.loc 1 817 23 view .LVU382
 1164 007a 7047     		bx	lr
 1165              	.LVL66:
 1166              	.L85:
ARM GAS  /tmp/ccOHJlyF.s 			page 60


 824:FWLIB/src/stm32f4xx_can.c ****       break;
 1167              		.loc 1 824 49 view .LVU383
 1168 007c 0020     		movs	r0, #0
 1169              	.LVL67:
 824:FWLIB/src/stm32f4xx_can.c ****       break;
 1170              		.loc 1 824 49 view .LVU384
 1171 007e 7047     		bx	lr
 1172              	.LVL68:
 1173              	.L86:
 831:FWLIB/src/stm32f4xx_can.c ****       break;
 1174              		.loc 1 831 63 view .LVU385
 1175 0080 0120     		movs	r0, #1
 1176              	.LVL69:
 831:FWLIB/src/stm32f4xx_can.c ****       break;
 1177              		.loc 1 831 63 view .LVU386
 1178 0082 7047     		bx	lr
 1179              	.LVL70:
 1180              	.L87:
 829:FWLIB/src/stm32f4xx_can.c ****       break;
 1181              		.loc 1 829 63 view .LVU387
 1182 0084 0120     		movs	r0, #1
 1183              	.LVL71:
 836:FWLIB/src/stm32f4xx_can.c **** }
 1184              		.loc 1 836 3 is_stmt 1 view .LVU388
 837:FWLIB/src/stm32f4xx_can.c **** 
 1185              		.loc 1 837 1 is_stmt 0 view .LVU389
 1186 0086 7047     		bx	lr
 1187              	.L89:
 1188              		.align	2
 1189              	.L88:
 1190 0088 00010008 		.word	134217984
 1191 008c 01000004 		.word	67108865
 1192 0090 00030008 		.word	134218496
 1193 0094 00000110 		.word	268500992
 1194              		.cfi_endproc
 1195              	.LFE131:
 1197              		.section	.text.CAN_CancelTransmit,"ax",%progbits
 1198              		.align	1
 1199              		.global	CAN_CancelTransmit
 1200              		.syntax unified
 1201              		.thumb
 1202              		.thumb_func
 1203              		.fpu fpv4-sp-d16
 1205              	CAN_CancelTransmit:
 1206              	.LVL72:
 1207              	.LFB132:
 847:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 1208              		.loc 1 847 1 is_stmt 1 view -0
 1209              		.cfi_startproc
 1210              		@ args = 0, pretend = 0, frame = 0
 1211              		@ frame_needed = 0, uses_anonymous_args = 0
 1212              		@ link register save eliminated.
 849:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
 1213              		.loc 1 849 3 view .LVU391
 850:FWLIB/src/stm32f4xx_can.c ****   /* abort transmission */
 1214              		.loc 1 850 3 view .LVU392
 852:FWLIB/src/stm32f4xx_can.c ****   {
ARM GAS  /tmp/ccOHJlyF.s 			page 61


 1215              		.loc 1 852 3 view .LVU393
 1216 0000 0129     		cmp	r1, #1
 1217 0002 09D0     		beq	.L91
 1218 0004 4BB2     		sxtb	r3, r1
 1219 0006 13B1     		cbz	r3, .L92
 1220 0008 0229     		cmp	r1, #2
 1221 000a 0AD0     		beq	.L93
 1222 000c 7047     		bx	lr
 1223              	.L92:
 854:FWLIB/src/stm32f4xx_can.c ****       break;
 1224              		.loc 1 854 29 view .LVU394
 854:FWLIB/src/stm32f4xx_can.c ****       break;
 1225              		.loc 1 854 39 is_stmt 0 view .LVU395
 1226 000e 8368     		ldr	r3, [r0, #8]
 1227 0010 43F08003 		orr	r3, r3, #128
 1228 0014 8360     		str	r3, [r0, #8]
 855:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 1229              		.loc 1 855 7 is_stmt 1 view .LVU396
 1230 0016 7047     		bx	lr
 1231              	.L91:
 856:FWLIB/src/stm32f4xx_can.c ****       break;
 1232              		.loc 1 856 29 view .LVU397
 856:FWLIB/src/stm32f4xx_can.c ****       break;
 1233              		.loc 1 856 39 is_stmt 0 view .LVU398
 1234 0018 8368     		ldr	r3, [r0, #8]
 1235 001a 43F40043 		orr	r3, r3, #32768
 1236 001e 8360     		str	r3, [r0, #8]
 857:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 1237              		.loc 1 857 7 is_stmt 1 view .LVU399
 1238 0020 7047     		bx	lr
 1239              	.L93:
 858:FWLIB/src/stm32f4xx_can.c ****       break;
 1240              		.loc 1 858 29 view .LVU400
 858:FWLIB/src/stm32f4xx_can.c ****       break;
 1241              		.loc 1 858 39 is_stmt 0 view .LVU401
 1242 0022 8368     		ldr	r3, [r0, #8]
 1243 0024 43F40003 		orr	r3, r3, #8388608
 1244 0028 8360     		str	r3, [r0, #8]
 859:FWLIB/src/stm32f4xx_can.c ****     default:
 1245              		.loc 1 859 7 is_stmt 1 view .LVU402
 863:FWLIB/src/stm32f4xx_can.c **** /**
 1246              		.loc 1 863 1 is_stmt 0 view .LVU403
 1247 002a 7047     		bx	lr
 1248              		.cfi_endproc
 1249              	.LFE132:
 1251              		.section	.text.CAN_Receive,"ax",%progbits
 1252              		.align	1
 1253              		.global	CAN_Receive
 1254              		.syntax unified
 1255              		.thumb
 1256              		.thumb_func
 1257              		.fpu fpv4-sp-d16
 1259              	CAN_Receive:
 1260              	.LVL73:
 1261              	.LFB133:
 895:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 1262              		.loc 1 895 1 is_stmt 1 view -0
ARM GAS  /tmp/ccOHJlyF.s 			page 62


 1263              		.cfi_startproc
 1264              		@ args = 0, pretend = 0, frame = 0
 1265              		@ frame_needed = 0, uses_anonymous_args = 0
 1266              		@ link register save eliminated.
 895:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 1267              		.loc 1 895 1 is_stmt 0 view .LVU405
 1268 0000 10B4     		push	{r4}
 1269              	.LCFI8:
 1270              		.cfi_def_cfa_offset 4
 1271              		.cfi_offset 4, -4
 897:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 1272              		.loc 1 897 3 is_stmt 1 view .LVU406
 898:FWLIB/src/stm32f4xx_can.c ****   /* Get the Id */
 1273              		.loc 1 898 3 view .LVU407
 900:FWLIB/src/stm32f4xx_can.c ****   if (RxMessage->IDE == CAN_Id_Standard)
 1274              		.loc 1 900 3 view .LVU408
 900:FWLIB/src/stm32f4xx_can.c ****   if (RxMessage->IDE == CAN_Id_Standard)
 1275              		.loc 1 900 66 is_stmt 0 view .LVU409
 1276 0002 01F11B03 		add	r3, r1, #27
 1277 0006 1B01     		lsls	r3, r3, #4
 1278 0008 C358     		ldr	r3, [r0, r3]
 900:FWLIB/src/stm32f4xx_can.c ****   if (RxMessage->IDE == CAN_Id_Standard)
 1279              		.loc 1 900 34 view .LVU410
 1280 000a 03F00403 		and	r3, r3, #4
 900:FWLIB/src/stm32f4xx_can.c ****   if (RxMessage->IDE == CAN_Id_Standard)
 1281              		.loc 1 900 18 view .LVU411
 1282 000e 1372     		strb	r3, [r2, #8]
 901:FWLIB/src/stm32f4xx_can.c ****   {
 1283              		.loc 1 901 3 is_stmt 1 view .LVU412
 901:FWLIB/src/stm32f4xx_can.c ****   {
 1284              		.loc 1 901 6 is_stmt 0 view .LVU413
 1285 0010 002B     		cmp	r3, #0
 1286 0012 3CD1     		bne	.L96
 903:FWLIB/src/stm32f4xx_can.c ****   }
 1287              		.loc 1 903 5 is_stmt 1 view .LVU414
 903:FWLIB/src/stm32f4xx_can.c ****   }
 1288              		.loc 1 903 78 is_stmt 0 view .LVU415
 1289 0014 01F11B03 		add	r3, r1, #27
 1290 0018 1B01     		lsls	r3, r3, #4
 1291 001a C358     		ldr	r3, [r0, r3]
 903:FWLIB/src/stm32f4xx_can.c ****   }
 1292              		.loc 1 903 83 view .LVU416
 1293 001c 5B0D     		lsrs	r3, r3, #21
 903:FWLIB/src/stm32f4xx_can.c ****   }
 1294              		.loc 1 903 22 view .LVU417
 1295 001e 1360     		str	r3, [r2]
 1296              	.L97:
 910:FWLIB/src/stm32f4xx_can.c ****   /* Get the DLC */
 1297              		.loc 1 910 3 is_stmt 1 view .LVU418
 910:FWLIB/src/stm32f4xx_can.c ****   /* Get the DLC */
 1298              		.loc 1 910 66 is_stmt 0 view .LVU419
 1299 0020 01F11B03 		add	r3, r1, #27
 1300 0024 1B01     		lsls	r3, r3, #4
 1301 0026 C418     		adds	r4, r0, r3
 1302 0028 C358     		ldr	r3, [r0, r3]
 910:FWLIB/src/stm32f4xx_can.c ****   /* Get the DLC */
 1303              		.loc 1 910 34 view .LVU420
ARM GAS  /tmp/ccOHJlyF.s 			page 63


 1304 002a 03F00203 		and	r3, r3, #2
 910:FWLIB/src/stm32f4xx_can.c ****   /* Get the DLC */
 1305              		.loc 1 910 18 view .LVU421
 1306 002e 5372     		strb	r3, [r2, #9]
 912:FWLIB/src/stm32f4xx_can.c ****   /* Get the FMI */
 1307              		.loc 1 912 3 is_stmt 1 view .LVU422
 912:FWLIB/src/stm32f4xx_can.c ****   /* Get the FMI */
 1308              		.loc 1 912 66 is_stmt 0 view .LVU423
 1309 0030 6368     		ldr	r3, [r4, #4]
 912:FWLIB/src/stm32f4xx_can.c ****   /* Get the FMI */
 1310              		.loc 1 912 34 view .LVU424
 1311 0032 03F00F03 		and	r3, r3, #15
 912:FWLIB/src/stm32f4xx_can.c ****   /* Get the FMI */
 1312              		.loc 1 912 18 view .LVU425
 1313 0036 9372     		strb	r3, [r2, #10]
 914:FWLIB/src/stm32f4xx_can.c ****   /* Get the data field */
 1314              		.loc 1 914 3 is_stmt 1 view .LVU426
 914:FWLIB/src/stm32f4xx_can.c ****   /* Get the data field */
 1315              		.loc 1 914 67 is_stmt 0 view .LVU427
 1316 0038 6368     		ldr	r3, [r4, #4]
 914:FWLIB/src/stm32f4xx_can.c ****   /* Get the data field */
 1317              		.loc 1 914 73 view .LVU428
 1318 003a 1B0A     		lsrs	r3, r3, #8
 914:FWLIB/src/stm32f4xx_can.c ****   /* Get the data field */
 1319              		.loc 1 914 18 view .LVU429
 1320 003c D374     		strb	r3, [r2, #19]
 916:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 1321              		.loc 1 916 3 is_stmt 1 view .LVU430
 916:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 1322              		.loc 1 916 70 is_stmt 0 view .LVU431
 1323 003e 00EB0113 		add	r3, r0, r1, lsl #4
 1324 0042 D3F8B841 		ldr	r4, [r3, #440]
 916:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 1325              		.loc 1 916 22 view .LVU432
 1326 0046 D472     		strb	r4, [r2, #11]
 917:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 1327              		.loc 1 917 3 is_stmt 1 view .LVU433
 917:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 1328              		.loc 1 917 71 is_stmt 0 view .LVU434
 1329 0048 D3F8B841 		ldr	r4, [r3, #440]
 917:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 1330              		.loc 1 917 77 view .LVU435
 1331 004c 240A     		lsrs	r4, r4, #8
 917:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 1332              		.loc 1 917 22 view .LVU436
 1333 004e 1473     		strb	r4, [r2, #12]
 918:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 1334              		.loc 1 918 3 is_stmt 1 view .LVU437
 918:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 1335              		.loc 1 918 71 is_stmt 0 view .LVU438
 1336 0050 D3F8B841 		ldr	r4, [r3, #440]
 918:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 1337              		.loc 1 918 77 view .LVU439
 1338 0054 240C     		lsrs	r4, r4, #16
 918:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 1339              		.loc 1 918 22 view .LVU440
 1340 0056 5473     		strb	r4, [r2, #13]
ARM GAS  /tmp/ccOHJlyF.s 			page 64


 919:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 1341              		.loc 1 919 3 is_stmt 1 view .LVU441
 919:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 1342              		.loc 1 919 71 is_stmt 0 view .LVU442
 1343 0058 D3F8B841 		ldr	r4, [r3, #440]
 919:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 1344              		.loc 1 919 77 view .LVU443
 1345 005c 240E     		lsrs	r4, r4, #24
 919:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 1346              		.loc 1 919 22 view .LVU444
 1347 005e 9473     		strb	r4, [r2, #14]
 920:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 1348              		.loc 1 920 3 is_stmt 1 view .LVU445
 920:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 1349              		.loc 1 920 70 is_stmt 0 view .LVU446
 1350 0060 D3F8BC41 		ldr	r4, [r3, #444]
 920:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 1351              		.loc 1 920 22 view .LVU447
 1352 0064 D473     		strb	r4, [r2, #15]
 921:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 1353              		.loc 1 921 3 is_stmt 1 view .LVU448
 921:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 1354              		.loc 1 921 71 is_stmt 0 view .LVU449
 1355 0066 D3F8BC41 		ldr	r4, [r3, #444]
 921:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 1356              		.loc 1 921 77 view .LVU450
 1357 006a 240A     		lsrs	r4, r4, #8
 921:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 1358              		.loc 1 921 22 view .LVU451
 1359 006c 1474     		strb	r4, [r2, #16]
 922:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 1360              		.loc 1 922 3 is_stmt 1 view .LVU452
 922:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 1361              		.loc 1 922 71 is_stmt 0 view .LVU453
 1362 006e D3F8BC41 		ldr	r4, [r3, #444]
 922:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 1363              		.loc 1 922 77 view .LVU454
 1364 0072 240C     		lsrs	r4, r4, #16
 922:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 1365              		.loc 1 922 22 view .LVU455
 1366 0074 5474     		strb	r4, [r2, #17]
 923:FWLIB/src/stm32f4xx_can.c ****   /* Release the FIFO */
 1367              		.loc 1 923 3 is_stmt 1 view .LVU456
 923:FWLIB/src/stm32f4xx_can.c ****   /* Release the FIFO */
 1368              		.loc 1 923 71 is_stmt 0 view .LVU457
 1369 0076 D3F8BC31 		ldr	r3, [r3, #444]
 923:FWLIB/src/stm32f4xx_can.c ****   /* Release the FIFO */
 1370              		.loc 1 923 77 view .LVU458
 1371 007a 1B0E     		lsrs	r3, r3, #24
 923:FWLIB/src/stm32f4xx_can.c ****   /* Release the FIFO */
 1372              		.loc 1 923 22 view .LVU459
 1373 007c 9374     		strb	r3, [r2, #18]
 926:FWLIB/src/stm32f4xx_can.c ****   {
 1374              		.loc 1 926 3 is_stmt 1 view .LVU460
 926:FWLIB/src/stm32f4xx_can.c ****   {
 1375              		.loc 1 926 6 is_stmt 0 view .LVU461
 1376 007e 69B9     		cbnz	r1, .L98
ARM GAS  /tmp/ccOHJlyF.s 			page 65


 928:FWLIB/src/stm32f4xx_can.c ****   }
 1377              		.loc 1 928 5 is_stmt 1 view .LVU462
 928:FWLIB/src/stm32f4xx_can.c ****   }
 1378              		.loc 1 928 16 is_stmt 0 view .LVU463
 1379 0080 C368     		ldr	r3, [r0, #12]
 1380 0082 43F02003 		orr	r3, r3, #32
 1381 0086 C360     		str	r3, [r0, #12]
 1382              	.L95:
 935:FWLIB/src/stm32f4xx_can.c **** 
 1383              		.loc 1 935 1 view .LVU464
 1384 0088 5DF8044B 		ldr	r4, [sp], #4
 1385              	.LCFI9:
 1386              		.cfi_remember_state
 1387              		.cfi_restore 4
 1388              		.cfi_def_cfa_offset 0
 1389 008c 7047     		bx	lr
 1390              	.L96:
 1391              	.LCFI10:
 1392              		.cfi_restore_state
 907:FWLIB/src/stm32f4xx_can.c ****   }
 1393              		.loc 1 907 5 is_stmt 1 view .LVU465
 907:FWLIB/src/stm32f4xx_can.c ****   }
 1394              		.loc 1 907 78 is_stmt 0 view .LVU466
 1395 008e 01F11B03 		add	r3, r1, #27
 1396 0092 1B01     		lsls	r3, r3, #4
 1397 0094 C358     		ldr	r3, [r0, r3]
 907:FWLIB/src/stm32f4xx_can.c ****   }
 1398              		.loc 1 907 83 view .LVU467
 1399 0096 DB08     		lsrs	r3, r3, #3
 907:FWLIB/src/stm32f4xx_can.c ****   }
 1400              		.loc 1 907 22 view .LVU468
 1401 0098 5360     		str	r3, [r2, #4]
 1402 009a C1E7     		b	.L97
 1403              	.L98:
 933:FWLIB/src/stm32f4xx_can.c ****   }
 1404              		.loc 1 933 5 is_stmt 1 view .LVU469
 933:FWLIB/src/stm32f4xx_can.c ****   }
 1405              		.loc 1 933 16 is_stmt 0 view .LVU470
 1406 009c 0369     		ldr	r3, [r0, #16]
 1407 009e 43F02003 		orr	r3, r3, #32
 1408 00a2 0361     		str	r3, [r0, #16]
 935:FWLIB/src/stm32f4xx_can.c **** 
 1409              		.loc 1 935 1 view .LVU471
 1410 00a4 F0E7     		b	.L95
 1411              		.cfi_endproc
 1412              	.LFE133:
 1414              		.section	.text.CAN_FIFORelease,"ax",%progbits
 1415              		.align	1
 1416              		.global	CAN_FIFORelease
 1417              		.syntax unified
 1418              		.thumb
 1419              		.thumb_func
 1420              		.fpu fpv4-sp-d16
 1422              	CAN_FIFORelease:
 1423              	.LVL74:
 1424              	.LFB134:
 945:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
ARM GAS  /tmp/ccOHJlyF.s 			page 66


 1425              		.loc 1 945 1 is_stmt 1 view -0
 1426              		.cfi_startproc
 1427              		@ args = 0, pretend = 0, frame = 0
 1428              		@ frame_needed = 0, uses_anonymous_args = 0
 1429              		@ link register save eliminated.
 947:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 1430              		.loc 1 947 3 view .LVU473
 948:FWLIB/src/stm32f4xx_can.c ****   /* Release FIFO0 */
 1431              		.loc 1 948 3 view .LVU474
 950:FWLIB/src/stm32f4xx_can.c ****   {
 1432              		.loc 1 950 3 view .LVU475
 950:FWLIB/src/stm32f4xx_can.c ****   {
 1433              		.loc 1 950 6 is_stmt 0 view .LVU476
 1434 0000 21B9     		cbnz	r1, .L102
 952:FWLIB/src/stm32f4xx_can.c ****   }
 1435              		.loc 1 952 5 is_stmt 1 view .LVU477
 952:FWLIB/src/stm32f4xx_can.c ****   }
 1436              		.loc 1 952 16 is_stmt 0 view .LVU478
 1437 0002 C368     		ldr	r3, [r0, #12]
 1438 0004 43F02003 		orr	r3, r3, #32
 1439 0008 C360     		str	r3, [r0, #12]
 1440 000a 7047     		bx	lr
 1441              	.L102:
 957:FWLIB/src/stm32f4xx_can.c ****   }
 1442              		.loc 1 957 5 is_stmt 1 view .LVU479
 957:FWLIB/src/stm32f4xx_can.c ****   }
 1443              		.loc 1 957 16 is_stmt 0 view .LVU480
 1444 000c 0369     		ldr	r3, [r0, #16]
 1445 000e 43F02003 		orr	r3, r3, #32
 1446 0012 0361     		str	r3, [r0, #16]
 959:FWLIB/src/stm32f4xx_can.c **** 
 1447              		.loc 1 959 1 view .LVU481
 1448 0014 7047     		bx	lr
 1449              		.cfi_endproc
 1450              	.LFE134:
 1452              		.section	.text.CAN_MessagePending,"ax",%progbits
 1453              		.align	1
 1454              		.global	CAN_MessagePending
 1455              		.syntax unified
 1456              		.thumb
 1457              		.thumb_func
 1458              		.fpu fpv4-sp-d16
 1460              	CAN_MessagePending:
 1461              	.LVL75:
 1462              	.LFB135:
 969:FWLIB/src/stm32f4xx_can.c ****   uint8_t message_pending=0;
 1463              		.loc 1 969 1 is_stmt 1 view -0
 1464              		.cfi_startproc
 1465              		@ args = 0, pretend = 0, frame = 0
 1466              		@ frame_needed = 0, uses_anonymous_args = 0
 1467              		@ link register save eliminated.
 970:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 1468              		.loc 1 970 3 view .LVU483
 972:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 1469              		.loc 1 972 3 view .LVU484
 973:FWLIB/src/stm32f4xx_can.c ****   if (FIFONumber == CAN_FIFO0)
 1470              		.loc 1 973 3 view .LVU485
ARM GAS  /tmp/ccOHJlyF.s 			page 67


 974:FWLIB/src/stm32f4xx_can.c ****   {
 1471              		.loc 1 974 3 view .LVU486
 974:FWLIB/src/stm32f4xx_can.c ****   {
 1472              		.loc 1 974 6 is_stmt 0 view .LVU487
 1473 0000 19B9     		cbnz	r1, .L105
 976:FWLIB/src/stm32f4xx_can.c ****   }
 1474              		.loc 1 976 5 is_stmt 1 view .LVU488
 976:FWLIB/src/stm32f4xx_can.c ****   }
 1475              		.loc 1 976 37 is_stmt 0 view .LVU489
 1476 0002 C068     		ldr	r0, [r0, #12]
 1477              	.LVL76:
 976:FWLIB/src/stm32f4xx_can.c ****   }
 1478              		.loc 1 976 21 view .LVU490
 1479 0004 00F00300 		and	r0, r0, #3
 1480              	.LVL77:
 976:FWLIB/src/stm32f4xx_can.c ****   }
 1481              		.loc 1 976 21 view .LVU491
 1482 0008 7047     		bx	lr
 1483              	.LVL78:
 1484              	.L105:
 978:FWLIB/src/stm32f4xx_can.c ****   {
 1485              		.loc 1 978 8 is_stmt 1 view .LVU492
 978:FWLIB/src/stm32f4xx_can.c ****   {
 1486              		.loc 1 978 11 is_stmt 0 view .LVU493
 1487 000a 0129     		cmp	r1, #1
 1488 000c 01D0     		beq	.L108
 984:FWLIB/src/stm32f4xx_can.c ****   }
 1489              		.loc 1 984 21 view .LVU494
 1490 000e 0020     		movs	r0, #0
 1491              	.LVL79:
 986:FWLIB/src/stm32f4xx_can.c **** }
 1492              		.loc 1 986 3 is_stmt 1 view .LVU495
 987:FWLIB/src/stm32f4xx_can.c **** /**
 1493              		.loc 1 987 1 is_stmt 0 view .LVU496
 1494 0010 7047     		bx	lr
 1495              	.LVL80:
 1496              	.L108:
 980:FWLIB/src/stm32f4xx_can.c ****   }
 1497              		.loc 1 980 5 is_stmt 1 view .LVU497
 980:FWLIB/src/stm32f4xx_can.c ****   }
 1498              		.loc 1 980 37 is_stmt 0 view .LVU498
 1499 0012 0069     		ldr	r0, [r0, #16]
 1500              	.LVL81:
 980:FWLIB/src/stm32f4xx_can.c ****   }
 1501              		.loc 1 980 21 view .LVU499
 1502 0014 00F00300 		and	r0, r0, #3
 1503              	.LVL82:
 980:FWLIB/src/stm32f4xx_can.c ****   }
 1504              		.loc 1 980 21 view .LVU500
 1505 0018 7047     		bx	lr
 1506              		.cfi_endproc
 1507              	.LFE135:
 1509              		.section	.text.CAN_OperatingModeRequest,"ax",%progbits
 1510              		.align	1
 1511              		.global	CAN_OperatingModeRequest
 1512              		.syntax unified
 1513              		.thumb
ARM GAS  /tmp/ccOHJlyF.s 			page 68


 1514              		.thumb_func
 1515              		.fpu fpv4-sp-d16
 1517              	CAN_OperatingModeRequest:
 1518              	.LVL83:
 1519              	.LFB136:
1019:FWLIB/src/stm32f4xx_can.c ****   uint8_t status = CAN_ModeStatus_Failed;
 1520              		.loc 1 1019 1 is_stmt 1 view -0
 1521              		.cfi_startproc
 1522              		@ args = 0, pretend = 0, frame = 0
 1523              		@ frame_needed = 0, uses_anonymous_args = 0
 1524              		@ link register save eliminated.
1020:FWLIB/src/stm32f4xx_can.c ****   
 1525              		.loc 1 1020 3 view .LVU502
1023:FWLIB/src/stm32f4xx_can.c **** 
 1526              		.loc 1 1023 3 view .LVU503
1026:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));
 1527              		.loc 1 1026 3 view .LVU504
1027:FWLIB/src/stm32f4xx_can.c **** 
 1528              		.loc 1 1027 3 view .LVU505
1029:FWLIB/src/stm32f4xx_can.c ****   {
 1529              		.loc 1 1029 3 view .LVU506
1029:FWLIB/src/stm32f4xx_can.c ****   {
 1530              		.loc 1 1029 6 is_stmt 0 view .LVU507
 1531 0000 B1B9     		cbnz	r1, .L110
1032:FWLIB/src/stm32f4xx_can.c **** 
 1532              		.loc 1 1032 5 is_stmt 1 view .LVU508
1032:FWLIB/src/stm32f4xx_can.c **** 
 1533              		.loc 1 1032 33 is_stmt 0 view .LVU509
 1534 0002 0368     		ldr	r3, [r0]
1032:FWLIB/src/stm32f4xx_can.c **** 
 1535              		.loc 1 1032 17 view .LVU510
 1536 0004 23F00303 		bic	r3, r3, #3
 1537 0008 43F00103 		orr	r3, r3, #1
1032:FWLIB/src/stm32f4xx_can.c **** 
 1538              		.loc 1 1032 15 view .LVU511
 1539 000c 0360     		str	r3, [r0]
1035:FWLIB/src/stm32f4xx_can.c ****     {
 1540              		.loc 1 1035 5 is_stmt 1 view .LVU512
1023:FWLIB/src/stm32f4xx_can.c **** 
 1541              		.loc 1 1023 12 is_stmt 0 view .LVU513
 1542 000e 4FF6FF72 		movw	r2, #65535
 1543              	.LVL84:
 1544              	.L111:
1035:FWLIB/src/stm32f4xx_can.c ****     {
 1545              		.loc 1 1035 18 view .LVU514
 1546 0012 4368     		ldr	r3, [r0, #4]
1035:FWLIB/src/stm32f4xx_can.c ****     {
 1547              		.loc 1 1035 24 view .LVU515
 1548 0014 03F00303 		and	r3, r3, #3
1035:FWLIB/src/stm32f4xx_can.c ****     {
 1549              		.loc 1 1035 11 view .LVU516
 1550 0018 012B     		cmp	r3, #1
 1551 001a 02D0     		beq	.L112
1035:FWLIB/src/stm32f4xx_can.c ****     {
 1552              		.loc 1 1035 58 discriminator 1 view .LVU517
 1553 001c 0AB1     		cbz	r2, .L112
1037:FWLIB/src/stm32f4xx_can.c ****     }
ARM GAS  /tmp/ccOHJlyF.s 			page 69


 1554              		.loc 1 1037 7 is_stmt 1 view .LVU518
1037:FWLIB/src/stm32f4xx_can.c ****     }
 1555              		.loc 1 1037 14 is_stmt 0 view .LVU519
 1556 001e 013A     		subs	r2, r2, #1
 1557              	.LVL85:
1037:FWLIB/src/stm32f4xx_can.c ****     }
 1558              		.loc 1 1037 14 view .LVU520
 1559 0020 F7E7     		b	.L111
 1560              	.L112:
1039:FWLIB/src/stm32f4xx_can.c ****     {
 1561              		.loc 1 1039 5 is_stmt 1 view .LVU521
1039:FWLIB/src/stm32f4xx_can.c ****     {
 1562              		.loc 1 1039 14 is_stmt 0 view .LVU522
 1563 0022 4368     		ldr	r3, [r0, #4]
1039:FWLIB/src/stm32f4xx_can.c ****     {
 1564              		.loc 1 1039 20 view .LVU523
 1565 0024 03F00303 		and	r3, r3, #3
1039:FWLIB/src/stm32f4xx_can.c ****     {
 1566              		.loc 1 1039 8 view .LVU524
 1567 0028 012B     		cmp	r3, #1
 1568 002a 31D0     		beq	.L122
1041:FWLIB/src/stm32f4xx_can.c ****     }
 1569              		.loc 1 1041 14 view .LVU525
 1570 002c 0020     		movs	r0, #0
 1571              	.LVL86:
1041:FWLIB/src/stm32f4xx_can.c ****     }
 1572              		.loc 1 1041 14 view .LVU526
 1573 002e 7047     		bx	lr
 1574              	.LVL87:
 1575              	.L110:
1048:FWLIB/src/stm32f4xx_can.c ****   {
 1576              		.loc 1 1048 9 is_stmt 1 view .LVU527
1048:FWLIB/src/stm32f4xx_can.c ****   {
 1577              		.loc 1 1048 12 is_stmt 0 view .LVU528
 1578 0030 0129     		cmp	r1, #1
 1579 0032 03D0     		beq	.L126
1067:FWLIB/src/stm32f4xx_can.c ****   {
 1580              		.loc 1 1067 9 is_stmt 1 view .LVU529
1067:FWLIB/src/stm32f4xx_can.c ****   {
 1581              		.loc 1 1067 12 is_stmt 0 view .LVU530
 1582 0034 0229     		cmp	r1, #2
 1583 0036 14D0     		beq	.L127
1088:FWLIB/src/stm32f4xx_can.c ****   }
 1584              		.loc 1 1088 12 view .LVU531
 1585 0038 0020     		movs	r0, #0
 1586              	.LVL88:
1088:FWLIB/src/stm32f4xx_can.c ****   }
 1587              		.loc 1 1088 12 view .LVU532
 1588 003a 7047     		bx	lr
 1589              	.LVL89:
 1590              	.L126:
1051:FWLIB/src/stm32f4xx_can.c **** 
 1591              		.loc 1 1051 5 is_stmt 1 view .LVU533
1051:FWLIB/src/stm32f4xx_can.c **** 
 1592              		.loc 1 1051 15 is_stmt 0 view .LVU534
 1593 003c 0368     		ldr	r3, [r0]
 1594 003e 23F00303 		bic	r3, r3, #3
ARM GAS  /tmp/ccOHJlyF.s 			page 70


 1595 0042 0360     		str	r3, [r0]
1054:FWLIB/src/stm32f4xx_can.c ****     {
 1596              		.loc 1 1054 5 is_stmt 1 view .LVU535
1023:FWLIB/src/stm32f4xx_can.c **** 
 1597              		.loc 1 1023 12 is_stmt 0 view .LVU536
 1598 0044 4FF6FF73 		movw	r3, #65535
 1599              	.LVL90:
 1600              	.L116:
1054:FWLIB/src/stm32f4xx_can.c ****     {
 1601              		.loc 1 1054 18 view .LVU537
 1602 0048 4268     		ldr	r2, [r0, #4]
1054:FWLIB/src/stm32f4xx_can.c ****     {
 1603              		.loc 1 1054 11 view .LVU538
 1604 004a 12F0030F 		tst	r2, #3
 1605 004e 02D0     		beq	.L117
1054:FWLIB/src/stm32f4xx_can.c ****     {
 1606              		.loc 1 1054 47 discriminator 1 view .LVU539
 1607 0050 0BB1     		cbz	r3, .L117
1056:FWLIB/src/stm32f4xx_can.c ****     }
 1608              		.loc 1 1056 7 is_stmt 1 view .LVU540
1056:FWLIB/src/stm32f4xx_can.c ****     }
 1609              		.loc 1 1056 14 is_stmt 0 view .LVU541
 1610 0052 013B     		subs	r3, r3, #1
 1611              	.LVL91:
1056:FWLIB/src/stm32f4xx_can.c ****     }
 1612              		.loc 1 1056 14 view .LVU542
 1613 0054 F8E7     		b	.L116
 1614              	.L117:
1058:FWLIB/src/stm32f4xx_can.c ****     {
 1615              		.loc 1 1058 5 is_stmt 1 view .LVU543
1058:FWLIB/src/stm32f4xx_can.c ****     {
 1616              		.loc 1 1058 14 is_stmt 0 view .LVU544
 1617 0056 4368     		ldr	r3, [r0, #4]
 1618              	.LVL92:
1058:FWLIB/src/stm32f4xx_can.c ****     {
 1619              		.loc 1 1058 8 view .LVU545
 1620 0058 13F0030F 		tst	r3, #3
 1621 005c 1AD0     		beq	.L123
1060:FWLIB/src/stm32f4xx_can.c ****     }
 1622              		.loc 1 1060 14 view .LVU546
 1623 005e 0020     		movs	r0, #0
 1624              	.LVL93:
1060:FWLIB/src/stm32f4xx_can.c ****     }
 1625              		.loc 1 1060 14 view .LVU547
 1626 0060 7047     		bx	lr
 1627              	.LVL94:
 1628              	.L127:
1070:FWLIB/src/stm32f4xx_can.c **** 
 1629              		.loc 1 1070 5 is_stmt 1 view .LVU548
1070:FWLIB/src/stm32f4xx_can.c **** 
 1630              		.loc 1 1070 33 is_stmt 0 view .LVU549
 1631 0062 0368     		ldr	r3, [r0]
1070:FWLIB/src/stm32f4xx_can.c **** 
 1632              		.loc 1 1070 17 view .LVU550
 1633 0064 23F00303 		bic	r3, r3, #3
 1634 0068 43F00203 		orr	r3, r3, #2
1070:FWLIB/src/stm32f4xx_can.c **** 
ARM GAS  /tmp/ccOHJlyF.s 			page 71


 1635              		.loc 1 1070 15 view .LVU551
 1636 006c 0360     		str	r3, [r0]
1073:FWLIB/src/stm32f4xx_can.c ****     {
 1637              		.loc 1 1073 5 is_stmt 1 view .LVU552
1023:FWLIB/src/stm32f4xx_can.c **** 
 1638              		.loc 1 1023 12 is_stmt 0 view .LVU553
 1639 006e 4FF6FF72 		movw	r2, #65535
 1640              	.LVL95:
 1641              	.L119:
1073:FWLIB/src/stm32f4xx_can.c ****     {
 1642              		.loc 1 1073 18 view .LVU554
 1643 0072 4368     		ldr	r3, [r0, #4]
1073:FWLIB/src/stm32f4xx_can.c ****     {
 1644              		.loc 1 1073 24 view .LVU555
 1645 0074 03F00303 		and	r3, r3, #3
1073:FWLIB/src/stm32f4xx_can.c ****     {
 1646              		.loc 1 1073 11 view .LVU556
 1647 0078 022B     		cmp	r3, #2
 1648 007a 02D0     		beq	.L120
1073:FWLIB/src/stm32f4xx_can.c ****     {
 1649              		.loc 1 1073 58 discriminator 1 view .LVU557
 1650 007c 0AB1     		cbz	r2, .L120
1075:FWLIB/src/stm32f4xx_can.c ****     }
 1651              		.loc 1 1075 7 is_stmt 1 view .LVU558
1075:FWLIB/src/stm32f4xx_can.c ****     }
 1652              		.loc 1 1075 14 is_stmt 0 view .LVU559
 1653 007e 013A     		subs	r2, r2, #1
 1654              	.LVL96:
1075:FWLIB/src/stm32f4xx_can.c ****     }
 1655              		.loc 1 1075 14 view .LVU560
 1656 0080 F7E7     		b	.L119
 1657              	.L120:
1077:FWLIB/src/stm32f4xx_can.c ****     {
 1658              		.loc 1 1077 5 is_stmt 1 view .LVU561
1077:FWLIB/src/stm32f4xx_can.c ****     {
 1659              		.loc 1 1077 14 is_stmt 0 view .LVU562
 1660 0082 4368     		ldr	r3, [r0, #4]
1077:FWLIB/src/stm32f4xx_can.c ****     {
 1661              		.loc 1 1077 20 view .LVU563
 1662 0084 03F00303 		and	r3, r3, #3
1077:FWLIB/src/stm32f4xx_can.c ****     {
 1663              		.loc 1 1077 8 view .LVU564
 1664 0088 022B     		cmp	r3, #2
 1665 008a 05D0     		beq	.L125
1079:FWLIB/src/stm32f4xx_can.c ****     }
 1666              		.loc 1 1079 14 view .LVU565
 1667 008c 0020     		movs	r0, #0
 1668              	.LVL97:
1079:FWLIB/src/stm32f4xx_can.c ****     }
 1669              		.loc 1 1079 14 view .LVU566
 1670 008e 7047     		bx	lr
 1671              	.LVL98:
 1672              	.L122:
1045:FWLIB/src/stm32f4xx_can.c ****     }
 1673              		.loc 1 1045 14 view .LVU567
 1674 0090 0120     		movs	r0, #1
 1675              	.LVL99:
ARM GAS  /tmp/ccOHJlyF.s 			page 72


1045:FWLIB/src/stm32f4xx_can.c ****     }
 1676              		.loc 1 1045 14 view .LVU568
 1677 0092 7047     		bx	lr
 1678              	.LVL100:
 1679              	.L123:
1064:FWLIB/src/stm32f4xx_can.c ****     }
 1680              		.loc 1 1064 14 view .LVU569
 1681 0094 0120     		movs	r0, #1
 1682              	.LVL101:
1064:FWLIB/src/stm32f4xx_can.c ****     }
 1683              		.loc 1 1064 14 view .LVU570
 1684 0096 7047     		bx	lr
 1685              	.LVL102:
 1686              	.L125:
1083:FWLIB/src/stm32f4xx_can.c ****     }
 1687              		.loc 1 1083 14 view .LVU571
 1688 0098 0120     		movs	r0, #1
 1689              	.LVL103:
1091:FWLIB/src/stm32f4xx_can.c **** }
 1690              		.loc 1 1091 3 is_stmt 1 view .LVU572
1092:FWLIB/src/stm32f4xx_can.c **** 
 1691              		.loc 1 1092 1 is_stmt 0 view .LVU573
 1692 009a 7047     		bx	lr
 1693              		.cfi_endproc
 1694              	.LFE136:
 1696              		.section	.text.CAN_Sleep,"ax",%progbits
 1697              		.align	1
 1698              		.global	CAN_Sleep
 1699              		.syntax unified
 1700              		.thumb
 1701              		.thumb_func
 1702              		.fpu fpv4-sp-d16
 1704              	CAN_Sleep:
 1705              	.LVL104:
 1706              	.LFB137:
1101:FWLIB/src/stm32f4xx_can.c ****   uint8_t sleepstatus = CAN_Sleep_Failed;
 1707              		.loc 1 1101 1 is_stmt 1 view -0
 1708              		.cfi_startproc
 1709              		@ args = 0, pretend = 0, frame = 0
 1710              		@ frame_needed = 0, uses_anonymous_args = 0
 1711              		@ link register save eliminated.
1102:FWLIB/src/stm32f4xx_can.c ****   
 1712              		.loc 1 1102 3 view .LVU575
1105:FWLIB/src/stm32f4xx_can.c ****     
 1713              		.loc 1 1105 3 view .LVU576
1108:FWLIB/src/stm32f4xx_can.c ****    
 1714              		.loc 1 1108 4 view .LVU577
1108:FWLIB/src/stm32f4xx_can.c ****    
 1715              		.loc 1 1108 23 is_stmt 0 view .LVU578
 1716 0000 0368     		ldr	r3, [r0]
1108:FWLIB/src/stm32f4xx_can.c ****    
 1717              		.loc 1 1108 69 view .LVU579
 1718 0002 23F00303 		bic	r3, r3, #3
 1719 0006 43F00203 		orr	r3, r3, #2
1108:FWLIB/src/stm32f4xx_can.c ****    
 1720              		.loc 1 1108 14 view .LVU580
 1721 000a 0360     		str	r3, [r0]
ARM GAS  /tmp/ccOHJlyF.s 			page 73


1111:FWLIB/src/stm32f4xx_can.c ****   {
 1722              		.loc 1 1111 3 is_stmt 1 view .LVU581
1111:FWLIB/src/stm32f4xx_can.c ****   {
 1723              		.loc 1 1111 12 is_stmt 0 view .LVU582
 1724 000c 4368     		ldr	r3, [r0, #4]
1111:FWLIB/src/stm32f4xx_can.c ****   {
 1725              		.loc 1 1111 18 view .LVU583
 1726 000e 03F00303 		and	r3, r3, #3
1111:FWLIB/src/stm32f4xx_can.c ****   {
 1727              		.loc 1 1111 6 view .LVU584
 1728 0012 022B     		cmp	r3, #2
 1729 0014 01D0     		beq	.L130
1102:FWLIB/src/stm32f4xx_can.c ****   
 1730              		.loc 1 1102 11 view .LVU585
 1731 0016 0020     		movs	r0, #0
 1732              	.LVL105:
1102:FWLIB/src/stm32f4xx_can.c ****   
 1733              		.loc 1 1102 11 view .LVU586
 1734 0018 7047     		bx	lr
 1735              	.LVL106:
 1736              	.L130:
1114:FWLIB/src/stm32f4xx_can.c ****   }
 1737              		.loc 1 1114 17 view .LVU587
 1738 001a 0120     		movs	r0, #1
 1739              	.LVL107:
1117:FWLIB/src/stm32f4xx_can.c **** }
 1740              		.loc 1 1117 4 is_stmt 1 view .LVU588
1118:FWLIB/src/stm32f4xx_can.c **** 
 1741              		.loc 1 1118 1 is_stmt 0 view .LVU589
 1742 001c 7047     		bx	lr
 1743              		.cfi_endproc
 1744              	.LFE137:
 1746              		.section	.text.CAN_WakeUp,"ax",%progbits
 1747              		.align	1
 1748              		.global	CAN_WakeUp
 1749              		.syntax unified
 1750              		.thumb
 1751              		.thumb_func
 1752              		.fpu fpv4-sp-d16
 1754              	CAN_WakeUp:
 1755              	.LVL108:
 1756              	.LFB138:
1127:FWLIB/src/stm32f4xx_can.c ****   uint32_t wait_slak = SLAK_TIMEOUT;
 1757              		.loc 1 1127 1 is_stmt 1 view -0
 1758              		.cfi_startproc
 1759              		@ args = 0, pretend = 0, frame = 0
 1760              		@ frame_needed = 0, uses_anonymous_args = 0
 1761              		@ link register save eliminated.
1128:FWLIB/src/stm32f4xx_can.c ****   uint8_t wakeupstatus = CAN_WakeUp_Failed;
 1762              		.loc 1 1128 3 view .LVU591
1129:FWLIB/src/stm32f4xx_can.c ****   
 1763              		.loc 1 1129 3 view .LVU592
1132:FWLIB/src/stm32f4xx_can.c ****     
 1764              		.loc 1 1132 3 view .LVU593
1135:FWLIB/src/stm32f4xx_can.c ****     
 1765              		.loc 1 1135 3 view .LVU594
1135:FWLIB/src/stm32f4xx_can.c ****     
ARM GAS  /tmp/ccOHJlyF.s 			page 74


 1766              		.loc 1 1135 13 is_stmt 0 view .LVU595
 1767 0000 0368     		ldr	r3, [r0]
 1768 0002 23F00203 		bic	r3, r3, #2
 1769 0006 0360     		str	r3, [r0]
1138:FWLIB/src/stm32f4xx_can.c ****   {
 1770              		.loc 1 1138 3 is_stmt 1 view .LVU596
1128:FWLIB/src/stm32f4xx_can.c ****   uint8_t wakeupstatus = CAN_WakeUp_Failed;
 1771              		.loc 1 1128 12 is_stmt 0 view .LVU597
 1772 0008 4FF6FF73 		movw	r3, #65535
 1773              	.LVL109:
 1774              	.L132:
1138:FWLIB/src/stm32f4xx_can.c ****   {
 1775              		.loc 1 1138 15 view .LVU598
 1776 000c 4268     		ldr	r2, [r0, #4]
1138:FWLIB/src/stm32f4xx_can.c ****   {
 1777              		.loc 1 1138 8 view .LVU599
 1778 000e 12F0020F 		tst	r2, #2
 1779 0012 02D0     		beq	.L133
1138:FWLIB/src/stm32f4xx_can.c ****   {
 1780              		.loc 1 1138 53 discriminator 1 view .LVU600
 1781 0014 0BB1     		cbz	r3, .L133
1140:FWLIB/src/stm32f4xx_can.c ****   }
 1782              		.loc 1 1140 4 is_stmt 1 view .LVU601
1140:FWLIB/src/stm32f4xx_can.c ****   }
 1783              		.loc 1 1140 13 is_stmt 0 view .LVU602
 1784 0016 013B     		subs	r3, r3, #1
 1785              	.LVL110:
1140:FWLIB/src/stm32f4xx_can.c ****   }
 1786              		.loc 1 1140 13 view .LVU603
 1787 0018 F8E7     		b	.L132
 1788              	.L133:
1142:FWLIB/src/stm32f4xx_can.c ****   {
 1789              		.loc 1 1142 3 is_stmt 1 view .LVU604
1142:FWLIB/src/stm32f4xx_can.c ****   {
 1790              		.loc 1 1142 11 is_stmt 0 view .LVU605
 1791 001a 4368     		ldr	r3, [r0, #4]
 1792              	.LVL111:
1142:FWLIB/src/stm32f4xx_can.c ****   {
 1793              		.loc 1 1142 5 view .LVU606
 1794 001c 13F0020F 		tst	r3, #2
 1795 0020 01D0     		beq	.L136
1129:FWLIB/src/stm32f4xx_can.c ****   
 1796              		.loc 1 1129 11 view .LVU607
 1797 0022 0020     		movs	r0, #0
 1798              	.LVL112:
1129:FWLIB/src/stm32f4xx_can.c ****   
 1799              		.loc 1 1129 11 view .LVU608
 1800 0024 7047     		bx	lr
 1801              	.LVL113:
 1802              	.L136:
1145:FWLIB/src/stm32f4xx_can.c ****   }
 1803              		.loc 1 1145 18 view .LVU609
 1804 0026 0120     		movs	r0, #1
 1805              	.LVL114:
1148:FWLIB/src/stm32f4xx_can.c **** }
 1806              		.loc 1 1148 3 is_stmt 1 view .LVU610
1149:FWLIB/src/stm32f4xx_can.c **** /**
ARM GAS  /tmp/ccOHJlyF.s 			page 75


 1807              		.loc 1 1149 1 is_stmt 0 view .LVU611
 1808 0028 7047     		bx	lr
 1809              		.cfi_endproc
 1810              	.LFE138:
 1812              		.section	.text.CAN_GetLastErrorCode,"ax",%progbits
 1813              		.align	1
 1814              		.global	CAN_GetLastErrorCode
 1815              		.syntax unified
 1816              		.thumb
 1817              		.thumb_func
 1818              		.fpu fpv4-sp-d16
 1820              	CAN_GetLastErrorCode:
 1821              	.LVL115:
 1822              	.LFB139:
1189:FWLIB/src/stm32f4xx_can.c ****   uint8_t errorcode=0;
 1823              		.loc 1 1189 1 is_stmt 1 view -0
 1824              		.cfi_startproc
 1825              		@ args = 0, pretend = 0, frame = 0
 1826              		@ frame_needed = 0, uses_anonymous_args = 0
 1827              		@ link register save eliminated.
1190:FWLIB/src/stm32f4xx_can.c ****   
 1828              		.loc 1 1190 3 view .LVU613
1193:FWLIB/src/stm32f4xx_can.c ****   
 1829              		.loc 1 1193 3 view .LVU614
1196:FWLIB/src/stm32f4xx_can.c ****   
 1830              		.loc 1 1196 3 view .LVU615
1196:FWLIB/src/stm32f4xx_can.c ****   
 1831              		.loc 1 1196 30 is_stmt 0 view .LVU616
 1832 0000 8069     		ldr	r0, [r0, #24]
 1833              	.LVL116:
1199:FWLIB/src/stm32f4xx_can.c **** }
 1834              		.loc 1 1199 3 is_stmt 1 view .LVU617
1200:FWLIB/src/stm32f4xx_can.c **** 
 1835              		.loc 1 1200 1 is_stmt 0 view .LVU618
 1836 0002 00F07000 		and	r0, r0, #112
 1837              	.LVL117:
1200:FWLIB/src/stm32f4xx_can.c **** 
 1838              		.loc 1 1200 1 view .LVU619
 1839 0006 7047     		bx	lr
 1840              		.cfi_endproc
 1841              	.LFE139:
 1843              		.section	.text.CAN_GetReceiveErrorCounter,"ax",%progbits
 1844              		.align	1
 1845              		.global	CAN_GetReceiveErrorCounter
 1846              		.syntax unified
 1847              		.thumb
 1848              		.thumb_func
 1849              		.fpu fpv4-sp-d16
 1851              	CAN_GetReceiveErrorCounter:
 1852              	.LVL118:
 1853              	.LFB140:
1215:FWLIB/src/stm32f4xx_can.c ****   uint8_t counter=0;
 1854              		.loc 1 1215 1 is_stmt 1 view -0
 1855              		.cfi_startproc
 1856              		@ args = 0, pretend = 0, frame = 0
 1857              		@ frame_needed = 0, uses_anonymous_args = 0
 1858              		@ link register save eliminated.
ARM GAS  /tmp/ccOHJlyF.s 			page 76


1216:FWLIB/src/stm32f4xx_can.c ****   
 1859              		.loc 1 1216 3 view .LVU621
1219:FWLIB/src/stm32f4xx_can.c ****   
 1860              		.loc 1 1219 3 view .LVU622
1222:FWLIB/src/stm32f4xx_can.c ****   
 1861              		.loc 1 1222 3 view .LVU623
1222:FWLIB/src/stm32f4xx_can.c ****   
 1862              		.loc 1 1222 28 is_stmt 0 view .LVU624
 1863 0000 8069     		ldr	r0, [r0, #24]
 1864              	.LVL119:
1225:FWLIB/src/stm32f4xx_can.c **** }
 1865              		.loc 1 1225 3 is_stmt 1 view .LVU625
1226:FWLIB/src/stm32f4xx_can.c **** 
 1866              		.loc 1 1226 1 is_stmt 0 view .LVU626
 1867 0002 000E     		lsrs	r0, r0, #24
 1868              	.LVL120:
1226:FWLIB/src/stm32f4xx_can.c **** 
 1869              		.loc 1 1226 1 view .LVU627
 1870 0004 7047     		bx	lr
 1871              		.cfi_endproc
 1872              	.LFE140:
 1874              		.section	.text.CAN_GetLSBTransmitErrorCounter,"ax",%progbits
 1875              		.align	1
 1876              		.global	CAN_GetLSBTransmitErrorCounter
 1877              		.syntax unified
 1878              		.thumb
 1879              		.thumb_func
 1880              		.fpu fpv4-sp-d16
 1882              	CAN_GetLSBTransmitErrorCounter:
 1883              	.LVL121:
 1884              	.LFB141:
1236:FWLIB/src/stm32f4xx_can.c ****   uint8_t counter=0;
 1885              		.loc 1 1236 1 is_stmt 1 view -0
 1886              		.cfi_startproc
 1887              		@ args = 0, pretend = 0, frame = 0
 1888              		@ frame_needed = 0, uses_anonymous_args = 0
 1889              		@ link register save eliminated.
1237:FWLIB/src/stm32f4xx_can.c ****   
 1890              		.loc 1 1237 3 view .LVU629
1240:FWLIB/src/stm32f4xx_can.c ****   
 1891              		.loc 1 1240 3 view .LVU630
1243:FWLIB/src/stm32f4xx_can.c ****   
 1892              		.loc 1 1243 3 view .LVU631
1243:FWLIB/src/stm32f4xx_can.c ****   
 1893              		.loc 1 1243 28 is_stmt 0 view .LVU632
 1894 0000 8069     		ldr	r0, [r0, #24]
 1895              	.LVL122:
1246:FWLIB/src/stm32f4xx_can.c **** }
 1896              		.loc 1 1246 3 is_stmt 1 view .LVU633
1247:FWLIB/src/stm32f4xx_can.c **** /**
 1897              		.loc 1 1247 1 is_stmt 0 view .LVU634
 1898 0002 C0F30740 		ubfx	r0, r0, #16, #8
 1899              	.LVL123:
1247:FWLIB/src/stm32f4xx_can.c **** /**
 1900              		.loc 1 1247 1 view .LVU635
 1901 0006 7047     		bx	lr
 1902              		.cfi_endproc
ARM GAS  /tmp/ccOHJlyF.s 			page 77


 1903              	.LFE141:
 1905              		.section	.text.CAN_ITConfig,"ax",%progbits
 1906              		.align	1
 1907              		.global	CAN_ITConfig
 1908              		.syntax unified
 1909              		.thumb
 1910              		.thumb_func
 1911              		.fpu fpv4-sp-d16
 1913              	CAN_ITConfig:
 1914              	.LVL124:
 1915              	.LFB142:
1442:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 1916              		.loc 1 1442 1 is_stmt 1 view -0
 1917              		.cfi_startproc
 1918              		@ args = 0, pretend = 0, frame = 0
 1919              		@ frame_needed = 0, uses_anonymous_args = 0
 1920              		@ link register save eliminated.
1444:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_IT(CAN_IT));
 1921              		.loc 1 1444 3 view .LVU637
1445:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1922              		.loc 1 1445 3 view .LVU638
1446:FWLIB/src/stm32f4xx_can.c **** 
 1923              		.loc 1 1446 3 view .LVU639
1448:FWLIB/src/stm32f4xx_can.c ****   {
 1924              		.loc 1 1448 3 view .LVU640
1448:FWLIB/src/stm32f4xx_can.c ****   {
 1925              		.loc 1 1448 6 is_stmt 0 view .LVU641
 1926 0000 1AB1     		cbz	r2, .L141
1451:FWLIB/src/stm32f4xx_can.c ****   }
 1927              		.loc 1 1451 5 is_stmt 1 view .LVU642
1451:FWLIB/src/stm32f4xx_can.c ****   }
 1928              		.loc 1 1451 15 is_stmt 0 view .LVU643
 1929 0002 4369     		ldr	r3, [r0, #20]
 1930 0004 0B43     		orrs	r3, r3, r1
 1931 0006 4361     		str	r3, [r0, #20]
 1932 0008 7047     		bx	lr
 1933              	.L141:
1456:FWLIB/src/stm32f4xx_can.c ****   }
 1934              		.loc 1 1456 5 is_stmt 1 view .LVU644
1456:FWLIB/src/stm32f4xx_can.c ****   }
 1935              		.loc 1 1456 15 is_stmt 0 view .LVU645
 1936 000a 4369     		ldr	r3, [r0, #20]
 1937 000c 23EA0103 		bic	r3, r3, r1
 1938 0010 4361     		str	r3, [r0, #20]
1458:FWLIB/src/stm32f4xx_can.c **** /**
 1939              		.loc 1 1458 1 view .LVU646
 1940 0012 7047     		bx	lr
 1941              		.cfi_endproc
 1942              	.LFE142:
 1944              		.section	.text.CAN_GetFlagStatus,"ax",%progbits
 1945              		.align	1
 1946              		.global	CAN_GetFlagStatus
 1947              		.syntax unified
 1948              		.thumb
 1949              		.thumb_func
 1950              		.fpu fpv4-sp-d16
 1952              	CAN_GetFlagStatus:
ARM GAS  /tmp/ccOHJlyF.s 			page 78


 1953              	.LVL125:
 1954              	.LFB143:
1483:FWLIB/src/stm32f4xx_can.c ****   FlagStatus bitstatus = RESET;
 1955              		.loc 1 1483 1 is_stmt 1 view -0
 1956              		.cfi_startproc
 1957              		@ args = 0, pretend = 0, frame = 0
 1958              		@ frame_needed = 0, uses_anonymous_args = 0
 1959              		@ link register save eliminated.
1484:FWLIB/src/stm32f4xx_can.c ****   
 1960              		.loc 1 1484 3 view .LVU648
1487:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
 1961              		.loc 1 1487 3 view .LVU649
1488:FWLIB/src/stm32f4xx_can.c ****   
 1962              		.loc 1 1488 3 view .LVU650
1491:FWLIB/src/stm32f4xx_can.c ****   { 
 1963              		.loc 1 1491 3 view .LVU651
1491:FWLIB/src/stm32f4xx_can.c ****   { 
 1964              		.loc 1 1491 5 is_stmt 0 view .LVU652
 1965 0000 11F4700F 		tst	r1, #15728640
 1966 0004 06D0     		beq	.L144
1494:FWLIB/src/stm32f4xx_can.c ****     { 
 1967              		.loc 1 1494 5 is_stmt 1 view .LVU653
1494:FWLIB/src/stm32f4xx_can.c ****     { 
 1968              		.loc 1 1494 14 is_stmt 0 view .LVU654
 1969 0006 8369     		ldr	r3, [r0, #24]
1494:FWLIB/src/stm32f4xx_can.c ****     { 
 1970              		.loc 1 1494 20 view .LVU655
 1971 0008 1940     		ands	r1, r1, r3
 1972              	.LVL126:
1494:FWLIB/src/stm32f4xx_can.c ****     { 
 1973              		.loc 1 1494 20 view .LVU656
 1974 000a C1F31301 		ubfx	r1, r1, #0, #20
1494:FWLIB/src/stm32f4xx_can.c ****     { 
 1975              		.loc 1 1494 8 view .LVU657
 1976 000e 31B3     		cbz	r1, .L149
1497:FWLIB/src/stm32f4xx_can.c ****     }
 1977              		.loc 1 1497 17 view .LVU658
 1978 0010 0120     		movs	r0, #1
 1979              	.LVL127:
1497:FWLIB/src/stm32f4xx_can.c ****     }
 1980              		.loc 1 1497 17 view .LVU659
 1981 0012 7047     		bx	lr
 1982              	.LVL128:
 1983              	.L144:
1505:FWLIB/src/stm32f4xx_can.c ****   { 
 1984              		.loc 1 1505 8 is_stmt 1 view .LVU660
1505:FWLIB/src/stm32f4xx_can.c ****   { 
 1985              		.loc 1 1505 10 is_stmt 0 view .LVU661
 1986 0014 11F0807F 		tst	r1, #16777216
 1987 0018 06D0     		beq	.L146
1508:FWLIB/src/stm32f4xx_can.c ****     { 
 1988              		.loc 1 1508 5 is_stmt 1 view .LVU662
1508:FWLIB/src/stm32f4xx_can.c ****     { 
 1989              		.loc 1 1508 14 is_stmt 0 view .LVU663
 1990 001a 4368     		ldr	r3, [r0, #4]
1508:FWLIB/src/stm32f4xx_can.c ****     { 
 1991              		.loc 1 1508 20 view .LVU664
ARM GAS  /tmp/ccOHJlyF.s 			page 79


 1992 001c 1940     		ands	r1, r1, r3
 1993              	.LVL129:
1508:FWLIB/src/stm32f4xx_can.c ****     { 
 1994              		.loc 1 1508 20 view .LVU665
 1995 001e C1F31301 		ubfx	r1, r1, #0, #20
1508:FWLIB/src/stm32f4xx_can.c ****     { 
 1996              		.loc 1 1508 8 view .LVU666
 1997 0022 F1B1     		cbz	r1, .L150
1511:FWLIB/src/stm32f4xx_can.c ****     }
 1998              		.loc 1 1511 17 view .LVU667
 1999 0024 0120     		movs	r0, #1
 2000              	.LVL130:
1511:FWLIB/src/stm32f4xx_can.c ****     }
 2001              		.loc 1 1511 17 view .LVU668
 2002 0026 7047     		bx	lr
 2003              	.LVL131:
 2004              	.L146:
1519:FWLIB/src/stm32f4xx_can.c ****   { 
 2005              		.loc 1 1519 8 is_stmt 1 view .LVU669
1519:FWLIB/src/stm32f4xx_can.c ****   { 
 2006              		.loc 1 1519 10 is_stmt 0 view .LVU670
 2007 0028 11F0006F 		tst	r1, #134217728
 2008 002c 06D0     		beq	.L147
1522:FWLIB/src/stm32f4xx_can.c ****     { 
 2009              		.loc 1 1522 5 is_stmt 1 view .LVU671
1522:FWLIB/src/stm32f4xx_can.c ****     { 
 2010              		.loc 1 1522 14 is_stmt 0 view .LVU672
 2011 002e 8368     		ldr	r3, [r0, #8]
1522:FWLIB/src/stm32f4xx_can.c ****     { 
 2012              		.loc 1 1522 20 view .LVU673
 2013 0030 1940     		ands	r1, r1, r3
 2014              	.LVL132:
1522:FWLIB/src/stm32f4xx_can.c ****     { 
 2015              		.loc 1 1522 20 view .LVU674
 2016 0032 C1F31301 		ubfx	r1, r1, #0, #20
1522:FWLIB/src/stm32f4xx_can.c ****     { 
 2017              		.loc 1 1522 8 view .LVU675
 2018 0036 B1B1     		cbz	r1, .L151
1525:FWLIB/src/stm32f4xx_can.c ****     }
 2019              		.loc 1 1525 17 view .LVU676
 2020 0038 0120     		movs	r0, #1
 2021              	.LVL133:
1525:FWLIB/src/stm32f4xx_can.c ****     }
 2022              		.loc 1 1525 17 view .LVU677
 2023 003a 7047     		bx	lr
 2024              	.LVL134:
 2025              	.L147:
1533:FWLIB/src/stm32f4xx_can.c ****   { 
 2026              		.loc 1 1533 8 is_stmt 1 view .LVU678
1533:FWLIB/src/stm32f4xx_can.c ****   { 
 2027              		.loc 1 1533 10 is_stmt 0 view .LVU679
 2028 003c 11F0007F 		tst	r1, #33554432
 2029 0040 06D0     		beq	.L148
1536:FWLIB/src/stm32f4xx_can.c ****     { 
 2030              		.loc 1 1536 5 is_stmt 1 view .LVU680
1536:FWLIB/src/stm32f4xx_can.c ****     { 
 2031              		.loc 1 1536 14 is_stmt 0 view .LVU681
ARM GAS  /tmp/ccOHJlyF.s 			page 80


 2032 0042 C368     		ldr	r3, [r0, #12]
1536:FWLIB/src/stm32f4xx_can.c ****     { 
 2033              		.loc 1 1536 21 view .LVU682
 2034 0044 0B40     		ands	r3, r3, r1
 2035 0046 C3F31303 		ubfx	r3, r3, #0, #20
1536:FWLIB/src/stm32f4xx_can.c ****     { 
 2036              		.loc 1 1536 8 view .LVU683
 2037 004a 73B1     		cbz	r3, .L152
1539:FWLIB/src/stm32f4xx_can.c ****     }
 2038              		.loc 1 1539 17 view .LVU684
 2039 004c 0120     		movs	r0, #1
 2040              	.LVL135:
1539:FWLIB/src/stm32f4xx_can.c ****     }
 2041              		.loc 1 1539 17 view .LVU685
 2042 004e 7047     		bx	lr
 2043              	.LVL136:
 2044              	.L148:
1550:FWLIB/src/stm32f4xx_can.c ****     { 
 2045              		.loc 1 1550 5 is_stmt 1 view .LVU686
1550:FWLIB/src/stm32f4xx_can.c ****     { 
 2046              		.loc 1 1550 24 is_stmt 0 view .LVU687
 2047 0050 0369     		ldr	r3, [r0, #16]
1550:FWLIB/src/stm32f4xx_can.c ****     { 
 2048              		.loc 1 1550 9 view .LVU688
 2049 0052 0B40     		ands	r3, r3, r1
 2050 0054 C3F31303 		ubfx	r3, r3, #0, #20
1550:FWLIB/src/stm32f4xx_can.c ****     { 
 2051              		.loc 1 1550 8 view .LVU689
 2052 0058 4BB1     		cbz	r3, .L153
1553:FWLIB/src/stm32f4xx_can.c ****     }
 2053              		.loc 1 1553 17 view .LVU690
 2054 005a 0120     		movs	r0, #1
 2055              	.LVL137:
1553:FWLIB/src/stm32f4xx_can.c ****     }
 2056              		.loc 1 1553 17 view .LVU691
 2057 005c 7047     		bx	lr
 2058              	.LVL138:
 2059              	.L149:
1502:FWLIB/src/stm32f4xx_can.c ****     }
 2060              		.loc 1 1502 17 view .LVU692
 2061 005e 0020     		movs	r0, #0
 2062              	.LVL139:
1502:FWLIB/src/stm32f4xx_can.c ****     }
 2063              		.loc 1 1502 17 view .LVU693
 2064 0060 7047     		bx	lr
 2065              	.LVL140:
 2066              	.L150:
1516:FWLIB/src/stm32f4xx_can.c ****     }
 2067              		.loc 1 1516 17 view .LVU694
 2068 0062 0020     		movs	r0, #0
 2069              	.LVL141:
1516:FWLIB/src/stm32f4xx_can.c ****     }
 2070              		.loc 1 1516 17 view .LVU695
 2071 0064 7047     		bx	lr
 2072              	.LVL142:
 2073              	.L151:
1530:FWLIB/src/stm32f4xx_can.c ****     }
ARM GAS  /tmp/ccOHJlyF.s 			page 81


 2074              		.loc 1 1530 17 view .LVU696
 2075 0066 0020     		movs	r0, #0
 2076              	.LVL143:
1530:FWLIB/src/stm32f4xx_can.c ****     }
 2077              		.loc 1 1530 17 view .LVU697
 2078 0068 7047     		bx	lr
 2079              	.LVL144:
 2080              	.L152:
1544:FWLIB/src/stm32f4xx_can.c ****     }
 2081              		.loc 1 1544 17 view .LVU698
 2082 006a 0020     		movs	r0, #0
 2083              	.LVL145:
1544:FWLIB/src/stm32f4xx_can.c ****     }
 2084              		.loc 1 1544 17 view .LVU699
 2085 006c 7047     		bx	lr
 2086              	.LVL146:
 2087              	.L153:
1558:FWLIB/src/stm32f4xx_can.c ****     }
 2088              		.loc 1 1558 17 view .LVU700
 2089 006e 0020     		movs	r0, #0
 2090              	.LVL147:
1562:FWLIB/src/stm32f4xx_can.c **** }
 2091              		.loc 1 1562 3 is_stmt 1 view .LVU701
1563:FWLIB/src/stm32f4xx_can.c **** 
 2092              		.loc 1 1563 1 is_stmt 0 view .LVU702
 2093 0070 7047     		bx	lr
 2094              		.cfi_endproc
 2095              	.LFE143:
 2097              		.section	.text.CAN_ClearFlag,"ax",%progbits
 2098              		.align	1
 2099              		.global	CAN_ClearFlag
 2100              		.syntax unified
 2101              		.thumb
 2102              		.thumb_func
 2103              		.fpu fpv4-sp-d16
 2105              	CAN_ClearFlag:
 2106              	.LVL148:
 2107              	.LFB144:
1584:FWLIB/src/stm32f4xx_can.c ****   uint32_t flagtmp=0;
 2108              		.loc 1 1584 1 is_stmt 1 view -0
 2109              		.cfi_startproc
 2110              		@ args = 0, pretend = 0, frame = 0
 2111              		@ frame_needed = 0, uses_anonymous_args = 0
 2112              		@ link register save eliminated.
1585:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 2113              		.loc 1 1585 3 view .LVU704
1587:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
 2114              		.loc 1 1587 3 view .LVU705
1588:FWLIB/src/stm32f4xx_can.c ****   
 2115              		.loc 1 1588 3 view .LVU706
1590:FWLIB/src/stm32f4xx_can.c ****   {
 2116              		.loc 1 1590 3 view .LVU707
1590:FWLIB/src/stm32f4xx_can.c ****   {
 2117              		.loc 1 1590 6 is_stmt 0 view .LVU708
 2118 0000 0C4B     		ldr	r3, .L161
 2119 0002 9942     		cmp	r1, r3
 2120 0004 06D0     		beq	.L160
ARM GAS  /tmp/ccOHJlyF.s 			page 82


1597:FWLIB/src/stm32f4xx_can.c **** 
 2121              		.loc 1 1597 5 is_stmt 1 view .LVU709
1597:FWLIB/src/stm32f4xx_can.c **** 
 2122              		.loc 1 1597 13 is_stmt 0 view .LVU710
 2123 0006 C1F31303 		ubfx	r3, r1, #0, #20
 2124              	.LVL149:
1599:FWLIB/src/stm32f4xx_can.c ****     {
 2125              		.loc 1 1599 5 is_stmt 1 view .LVU711
1599:FWLIB/src/stm32f4xx_can.c ****     {
 2126              		.loc 1 1599 8 is_stmt 0 view .LVU712
 2127 000a 11F0007F 		tst	r1, #33554432
 2128 000e 04D0     		beq	.L157
1602:FWLIB/src/stm32f4xx_can.c ****     }
 2129              		.loc 1 1602 7 is_stmt 1 view .LVU713
1602:FWLIB/src/stm32f4xx_can.c ****     }
 2130              		.loc 1 1602 18 is_stmt 0 view .LVU714
 2131 0010 C360     		str	r3, [r0, #12]
 2132 0012 7047     		bx	lr
 2133              	.LVL150:
 2134              	.L160:
1593:FWLIB/src/stm32f4xx_can.c ****   }
 2135              		.loc 1 1593 5 is_stmt 1 view .LVU715
1593:FWLIB/src/stm32f4xx_can.c ****   }
 2136              		.loc 1 1593 15 is_stmt 0 view .LVU716
 2137 0014 0023     		movs	r3, #0
 2138 0016 8361     		str	r3, [r0, #24]
 2139 0018 7047     		bx	lr
 2140              	.LVL151:
 2141              	.L157:
1604:FWLIB/src/stm32f4xx_can.c ****     {
 2142              		.loc 1 1604 10 is_stmt 1 view .LVU717
1604:FWLIB/src/stm32f4xx_can.c ****     {
 2143              		.loc 1 1604 13 is_stmt 0 view .LVU718
 2144 001a 11F0806F 		tst	r1, #67108864
 2145 001e 01D0     		beq	.L158
1607:FWLIB/src/stm32f4xx_can.c ****     }
 2146              		.loc 1 1607 7 is_stmt 1 view .LVU719
1607:FWLIB/src/stm32f4xx_can.c ****     }
 2147              		.loc 1 1607 18 is_stmt 0 view .LVU720
 2148 0020 0361     		str	r3, [r0, #16]
 2149 0022 7047     		bx	lr
 2150              	.L158:
1609:FWLIB/src/stm32f4xx_can.c ****     {
 2151              		.loc 1 1609 10 is_stmt 1 view .LVU721
1609:FWLIB/src/stm32f4xx_can.c ****     {
 2152              		.loc 1 1609 13 is_stmt 0 view .LVU722
 2153 0024 11F0006F 		tst	r1, #134217728
 2154 0028 01D0     		beq	.L159
1612:FWLIB/src/stm32f4xx_can.c ****     }
 2155              		.loc 1 1612 7 is_stmt 1 view .LVU723
1612:FWLIB/src/stm32f4xx_can.c ****     }
 2156              		.loc 1 1612 17 is_stmt 0 view .LVU724
 2157 002a 8360     		str	r3, [r0, #8]
 2158 002c 7047     		bx	lr
 2159              	.L159:
1617:FWLIB/src/stm32f4xx_can.c ****     }
 2160              		.loc 1 1617 7 is_stmt 1 view .LVU725
ARM GAS  /tmp/ccOHJlyF.s 			page 83


1617:FWLIB/src/stm32f4xx_can.c ****     }
 2161              		.loc 1 1617 17 is_stmt 0 view .LVU726
 2162 002e 4360     		str	r3, [r0, #4]
1620:FWLIB/src/stm32f4xx_can.c **** 
 2163              		.loc 1 1620 1 view .LVU727
 2164 0030 7047     		bx	lr
 2165              	.L162:
 2166 0032 00BF     		.align	2
 2167              	.L161:
 2168 0034 7000F030 		.word	821035120
 2169              		.cfi_endproc
 2170              	.LFE144:
 2172              		.section	.text.CAN_GetITStatus,"ax",%progbits
 2173              		.align	1
 2174              		.global	CAN_GetITStatus
 2175              		.syntax unified
 2176              		.thumb
 2177              		.thumb_func
 2178              		.fpu fpv4-sp-d16
 2180              	CAN_GetITStatus:
 2181              	.LVL152:
 2182              	.LFB145:
1645:FWLIB/src/stm32f4xx_can.c ****   ITStatus itstatus = RESET;
 2183              		.loc 1 1645 1 is_stmt 1 view -0
 2184              		.cfi_startproc
 2185              		@ args = 0, pretend = 0, frame = 0
 2186              		@ frame_needed = 0, uses_anonymous_args = 0
1645:FWLIB/src/stm32f4xx_can.c ****   ITStatus itstatus = RESET;
 2187              		.loc 1 1645 1 is_stmt 0 view .LVU729
 2188 0000 08B5     		push	{r3, lr}
 2189              	.LCFI11:
 2190              		.cfi_def_cfa_offset 8
 2191              		.cfi_offset 3, -8
 2192              		.cfi_offset 14, -4
1646:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 2193              		.loc 1 1646 3 is_stmt 1 view .LVU730
 2194              	.LVL153:
1648:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_IT(CAN_IT));
 2195              		.loc 1 1648 3 view .LVU731
1649:FWLIB/src/stm32f4xx_can.c ****   
 2196              		.loc 1 1649 3 view .LVU732
1652:FWLIB/src/stm32f4xx_can.c ****  {
 2197              		.loc 1 1652 2 view .LVU733
1652:FWLIB/src/stm32f4xx_can.c ****  {
 2198              		.loc 1 1652 10 is_stmt 0 view .LVU734
 2199 0002 4369     		ldr	r3, [r0, #20]
1652:FWLIB/src/stm32f4xx_can.c ****  {
 2200              		.loc 1 1652 4 view .LVU735
 2201 0004 0B42     		tst	r3, r1
 2202 0006 73D0     		beq	.L182
1655:FWLIB/src/stm32f4xx_can.c ****     {
 2203              		.loc 1 1655 5 is_stmt 1 view .LVU736
 2204 0008 4029     		cmp	r1, #64
 2205 000a 49D0     		beq	.L165
 2206 000c 0ED9     		bls	.L184
 2207 000e B1F5006F 		cmp	r1, #2048
 2208 0012 63D0     		beq	.L174
ARM GAS  /tmp/ccOHJlyF.s 			page 84


 2209 0014 20D9     		bls	.L185
 2210 0016 B1F5803F 		cmp	r1, #65536
 2211 001a 46D0     		beq	.L179
 2212 001c B1F5003F 		cmp	r1, #131072
 2213 0020 48D0     		beq	.L180
 2214 0022 B1F5004F 		cmp	r1, #32768
 2215 0026 5ED0     		beq	.L181
1715:FWLIB/src/stm32f4xx_can.c ****         break;
 2216              		.loc 1 1715 18 is_stmt 0 view .LVU737
 2217 0028 0020     		movs	r0, #0
 2218              	.LVL154:
1715:FWLIB/src/stm32f4xx_can.c ****         break;
 2219              		.loc 1 1715 18 view .LVU738
 2220 002a 62E0     		b	.L164
 2221              	.LVL155:
 2222              	.L184:
1655:FWLIB/src/stm32f4xx_can.c ****     {
 2223              		.loc 1 1655 5 view .LVU739
 2224 002c 0429     		cmp	r1, #4
 2225 002e 23D0     		beq	.L167
 2226 0030 07D9     		bls	.L186
 2227 0032 1029     		cmp	r1, #16
 2228 0034 2AD0     		beq	.L171
 2229 0036 2029     		cmp	r1, #32
 2230 0038 2DD0     		beq	.L172
 2231 003a 0829     		cmp	r1, #8
 2232 003c 21D0     		beq	.L173
1715:FWLIB/src/stm32f4xx_can.c ****         break;
 2233              		.loc 1 1715 18 view .LVU740
 2234 003e 0020     		movs	r0, #0
 2235              	.LVL156:
1715:FWLIB/src/stm32f4xx_can.c ****         break;
 2236              		.loc 1 1715 18 view .LVU741
 2237 0040 57E0     		b	.L164
 2238              	.LVL157:
 2239              	.L186:
1655:FWLIB/src/stm32f4xx_can.c ****     {
 2240              		.loc 1 1655 5 view .LVU742
 2241 0042 0129     		cmp	r1, #1
 2242 0044 13D0     		beq	.L169
 2243 0046 0229     		cmp	r1, #2
 2244 0048 04D1     		bne	.L187
1663:FWLIB/src/stm32f4xx_can.c ****         break;
 2245              		.loc 1 1663 9 is_stmt 1 view .LVU743
1663:FWLIB/src/stm32f4xx_can.c ****         break;
 2246              		.loc 1 1663 20 is_stmt 0 view .LVU744
 2247 004a C068     		ldr	r0, [r0, #12]
 2248              	.LVL158:
1663:FWLIB/src/stm32f4xx_can.c ****         break;
 2249              		.loc 1 1663 20 view .LVU745
 2250 004c 0321     		movs	r1, #3
 2251              	.LVL159:
1663:FWLIB/src/stm32f4xx_can.c ****         break;
 2252              		.loc 1 1663 20 view .LVU746
 2253 004e FFF7FEFF 		bl	CheckITStatus
 2254              	.LVL160:
1664:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FF0:
ARM GAS  /tmp/ccOHJlyF.s 			page 85


 2255              		.loc 1 1664 9 is_stmt 1 view .LVU747
 2256 0052 4EE0     		b	.L164
 2257              	.LVL161:
 2258              	.L187:
1715:FWLIB/src/stm32f4xx_can.c ****         break;
 2259              		.loc 1 1715 18 is_stmt 0 view .LVU748
 2260 0054 0020     		movs	r0, #0
 2261              	.LVL162:
1715:FWLIB/src/stm32f4xx_can.c ****         break;
 2262              		.loc 1 1715 18 view .LVU749
 2263 0056 4CE0     		b	.L164
 2264              	.LVL163:
 2265              	.L185:
1655:FWLIB/src/stm32f4xx_can.c ****     {
 2266              		.loc 1 1655 5 view .LVU750
 2267 0058 B1F5007F 		cmp	r1, #512
 2268 005c 34D0     		beq	.L176
 2269 005e B1F5806F 		cmp	r1, #1024
 2270 0062 36D0     		beq	.L177
 2271 0064 B1F5807F 		cmp	r1, #256
 2272 0068 29D0     		beq	.L178
1715:FWLIB/src/stm32f4xx_can.c ****         break;
 2273              		.loc 1 1715 18 view .LVU751
 2274 006a 0020     		movs	r0, #0
 2275              	.LVL164:
1715:FWLIB/src/stm32f4xx_can.c ****         break;
 2276              		.loc 1 1715 18 view .LVU752
 2277 006c 41E0     		b	.L164
 2278              	.LVL165:
 2279              	.L169:
1659:FWLIB/src/stm32f4xx_can.c ****         break;
 2280              		.loc 1 1659 9 is_stmt 1 view .LVU753
1659:FWLIB/src/stm32f4xx_can.c ****         break;
 2281              		.loc 1 1659 20 is_stmt 0 view .LVU754
 2282 006e 8068     		ldr	r0, [r0, #8]
 2283              	.LVL166:
1659:FWLIB/src/stm32f4xx_can.c ****         break;
 2284              		.loc 1 1659 20 view .LVU755
 2285 0070 2049     		ldr	r1, .L188
 2286              	.LVL167:
1659:FWLIB/src/stm32f4xx_can.c ****         break;
 2287              		.loc 1 1659 20 view .LVU756
 2288 0072 FFF7FEFF 		bl	CheckITStatus
 2289              	.LVL168:
1660:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FMP0:
 2290              		.loc 1 1660 9 is_stmt 1 view .LVU757
 2291 0076 3CE0     		b	.L164
 2292              	.LVL169:
 2293              	.L167:
1667:FWLIB/src/stm32f4xx_can.c ****         break;
 2294              		.loc 1 1667 9 view .LVU758
1667:FWLIB/src/stm32f4xx_can.c ****         break;
 2295              		.loc 1 1667 20 is_stmt 0 view .LVU759
 2296 0078 C068     		ldr	r0, [r0, #12]
 2297              	.LVL170:
1667:FWLIB/src/stm32f4xx_can.c ****         break;
 2298              		.loc 1 1667 20 view .LVU760
ARM GAS  /tmp/ccOHJlyF.s 			page 86


 2299 007a 0821     		movs	r1, #8
 2300              	.LVL171:
1667:FWLIB/src/stm32f4xx_can.c ****         break;
 2301              		.loc 1 1667 20 view .LVU761
 2302 007c FFF7FEFF 		bl	CheckITStatus
 2303              	.LVL172:
1668:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FOV0:
 2304              		.loc 1 1668 9 is_stmt 1 view .LVU762
 2305 0080 37E0     		b	.L164
 2306              	.LVL173:
 2307              	.L173:
1671:FWLIB/src/stm32f4xx_can.c ****         break;
 2308              		.loc 1 1671 9 view .LVU763
1671:FWLIB/src/stm32f4xx_can.c ****         break;
 2309              		.loc 1 1671 20 is_stmt 0 view .LVU764
 2310 0082 C068     		ldr	r0, [r0, #12]
 2311              	.LVL174:
1671:FWLIB/src/stm32f4xx_can.c ****         break;
 2312              		.loc 1 1671 20 view .LVU765
 2313 0084 1021     		movs	r1, #16
 2314              	.LVL175:
1671:FWLIB/src/stm32f4xx_can.c ****         break;
 2315              		.loc 1 1671 20 view .LVU766
 2316 0086 FFF7FEFF 		bl	CheckITStatus
 2317              	.LVL176:
1672:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FMP1:
 2318              		.loc 1 1672 9 is_stmt 1 view .LVU767
 2319 008a 32E0     		b	.L164
 2320              	.LVL177:
 2321              	.L171:
1675:FWLIB/src/stm32f4xx_can.c ****         break;
 2322              		.loc 1 1675 9 view .LVU768
1675:FWLIB/src/stm32f4xx_can.c ****         break;
 2323              		.loc 1 1675 20 is_stmt 0 view .LVU769
 2324 008c 0069     		ldr	r0, [r0, #16]
 2325              	.LVL178:
1675:FWLIB/src/stm32f4xx_can.c ****         break;
 2326              		.loc 1 1675 20 view .LVU770
 2327 008e 0321     		movs	r1, #3
 2328              	.LVL179:
1675:FWLIB/src/stm32f4xx_can.c ****         break;
 2329              		.loc 1 1675 20 view .LVU771
 2330 0090 FFF7FEFF 		bl	CheckITStatus
 2331              	.LVL180:
1676:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FF1:
 2332              		.loc 1 1676 9 is_stmt 1 view .LVU772
 2333 0094 2DE0     		b	.L164
 2334              	.LVL181:
 2335              	.L172:
1679:FWLIB/src/stm32f4xx_can.c ****         break;
 2336              		.loc 1 1679 9 view .LVU773
1679:FWLIB/src/stm32f4xx_can.c ****         break;
 2337              		.loc 1 1679 20 is_stmt 0 view .LVU774
 2338 0096 0069     		ldr	r0, [r0, #16]
 2339              	.LVL182:
1679:FWLIB/src/stm32f4xx_can.c ****         break;
 2340              		.loc 1 1679 20 view .LVU775
ARM GAS  /tmp/ccOHJlyF.s 			page 87


 2341 0098 0821     		movs	r1, #8
 2342              	.LVL183:
1679:FWLIB/src/stm32f4xx_can.c ****         break;
 2343              		.loc 1 1679 20 view .LVU776
 2344 009a FFF7FEFF 		bl	CheckITStatus
 2345              	.LVL184:
1680:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FOV1:
 2346              		.loc 1 1680 9 is_stmt 1 view .LVU777
 2347 009e 28E0     		b	.L164
 2348              	.LVL185:
 2349              	.L165:
1683:FWLIB/src/stm32f4xx_can.c ****         break;
 2350              		.loc 1 1683 9 view .LVU778
1683:FWLIB/src/stm32f4xx_can.c ****         break;
 2351              		.loc 1 1683 20 is_stmt 0 view .LVU779
 2352 00a0 0069     		ldr	r0, [r0, #16]
 2353              	.LVL186:
1683:FWLIB/src/stm32f4xx_can.c ****         break;
 2354              		.loc 1 1683 20 view .LVU780
 2355 00a2 1021     		movs	r1, #16
 2356              	.LVL187:
1683:FWLIB/src/stm32f4xx_can.c ****         break;
 2357              		.loc 1 1683 20 view .LVU781
 2358 00a4 FFF7FEFF 		bl	CheckITStatus
 2359              	.LVL188:
1684:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_WKU:
 2360              		.loc 1 1684 9 is_stmt 1 view .LVU782
 2361 00a8 23E0     		b	.L164
 2362              	.LVL189:
 2363              	.L179:
1687:FWLIB/src/stm32f4xx_can.c ****         break;
 2364              		.loc 1 1687 9 view .LVU783
1687:FWLIB/src/stm32f4xx_can.c ****         break;
 2365              		.loc 1 1687 20 is_stmt 0 view .LVU784
 2366 00aa 4068     		ldr	r0, [r0, #4]
 2367              	.LVL190:
1687:FWLIB/src/stm32f4xx_can.c ****         break;
 2368              		.loc 1 1687 20 view .LVU785
 2369 00ac 0821     		movs	r1, #8
 2370              	.LVL191:
1687:FWLIB/src/stm32f4xx_can.c ****         break;
 2371              		.loc 1 1687 20 view .LVU786
 2372 00ae FFF7FEFF 		bl	CheckITStatus
 2373              	.LVL192:
1688:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_SLK:
 2374              		.loc 1 1688 9 is_stmt 1 view .LVU787
 2375 00b2 1EE0     		b	.L164
 2376              	.LVL193:
 2377              	.L180:
1691:FWLIB/src/stm32f4xx_can.c ****         break;
 2378              		.loc 1 1691 9 view .LVU788
1691:FWLIB/src/stm32f4xx_can.c ****         break;
 2379              		.loc 1 1691 20 is_stmt 0 view .LVU789
 2380 00b4 4068     		ldr	r0, [r0, #4]
 2381              	.LVL194:
1691:FWLIB/src/stm32f4xx_can.c ****         break;
 2382              		.loc 1 1691 20 view .LVU790
ARM GAS  /tmp/ccOHJlyF.s 			page 88


 2383 00b6 1021     		movs	r1, #16
 2384              	.LVL195:
1691:FWLIB/src/stm32f4xx_can.c ****         break;
 2385              		.loc 1 1691 20 view .LVU791
 2386 00b8 FFF7FEFF 		bl	CheckITStatus
 2387              	.LVL196:
1692:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_EWG:
 2388              		.loc 1 1692 9 is_stmt 1 view .LVU792
 2389 00bc 19E0     		b	.L164
 2390              	.LVL197:
 2391              	.L178:
1695:FWLIB/src/stm32f4xx_can.c ****         break;
 2392              		.loc 1 1695 9 view .LVU793
1695:FWLIB/src/stm32f4xx_can.c ****         break;
 2393              		.loc 1 1695 20 is_stmt 0 view .LVU794
 2394 00be 8069     		ldr	r0, [r0, #24]
 2395              	.LVL198:
1695:FWLIB/src/stm32f4xx_can.c ****         break;
 2396              		.loc 1 1695 20 view .LVU795
 2397 00c0 0121     		movs	r1, #1
 2398              	.LVL199:
1695:FWLIB/src/stm32f4xx_can.c ****         break;
 2399              		.loc 1 1695 20 view .LVU796
 2400 00c2 FFF7FEFF 		bl	CheckITStatus
 2401              	.LVL200:
1696:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_EPV:
 2402              		.loc 1 1696 9 is_stmt 1 view .LVU797
 2403 00c6 14E0     		b	.L164
 2404              	.LVL201:
 2405              	.L176:
1699:FWLIB/src/stm32f4xx_can.c ****         break;
 2406              		.loc 1 1699 9 view .LVU798
1699:FWLIB/src/stm32f4xx_can.c ****         break;
 2407              		.loc 1 1699 20 is_stmt 0 view .LVU799
 2408 00c8 8069     		ldr	r0, [r0, #24]
 2409              	.LVL202:
1699:FWLIB/src/stm32f4xx_can.c ****         break;
 2410              		.loc 1 1699 20 view .LVU800
 2411 00ca 0221     		movs	r1, #2
 2412              	.LVL203:
1699:FWLIB/src/stm32f4xx_can.c ****         break;
 2413              		.loc 1 1699 20 view .LVU801
 2414 00cc FFF7FEFF 		bl	CheckITStatus
 2415              	.LVL204:
1700:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_BOF:
 2416              		.loc 1 1700 9 is_stmt 1 view .LVU802
 2417 00d0 0FE0     		b	.L164
 2418              	.LVL205:
 2419              	.L177:
1703:FWLIB/src/stm32f4xx_can.c ****         break;
 2420              		.loc 1 1703 9 view .LVU803
1703:FWLIB/src/stm32f4xx_can.c ****         break;
 2421              		.loc 1 1703 20 is_stmt 0 view .LVU804
 2422 00d2 8069     		ldr	r0, [r0, #24]
 2423              	.LVL206:
1703:FWLIB/src/stm32f4xx_can.c ****         break;
 2424              		.loc 1 1703 20 view .LVU805
ARM GAS  /tmp/ccOHJlyF.s 			page 89


 2425 00d4 0421     		movs	r1, #4
 2426              	.LVL207:
1703:FWLIB/src/stm32f4xx_can.c ****         break;
 2427              		.loc 1 1703 20 view .LVU806
 2428 00d6 FFF7FEFF 		bl	CheckITStatus
 2429              	.LVL208:
1704:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_LEC:
 2430              		.loc 1 1704 9 is_stmt 1 view .LVU807
 2431 00da 0AE0     		b	.L164
 2432              	.LVL209:
 2433              	.L174:
1707:FWLIB/src/stm32f4xx_can.c ****         break;
 2434              		.loc 1 1707 9 view .LVU808
1707:FWLIB/src/stm32f4xx_can.c ****         break;
 2435              		.loc 1 1707 20 is_stmt 0 view .LVU809
 2436 00dc 8069     		ldr	r0, [r0, #24]
 2437              	.LVL210:
1707:FWLIB/src/stm32f4xx_can.c ****         break;
 2438              		.loc 1 1707 20 view .LVU810
 2439 00de 7021     		movs	r1, #112
 2440              	.LVL211:
1707:FWLIB/src/stm32f4xx_can.c ****         break;
 2441              		.loc 1 1707 20 view .LVU811
 2442 00e0 FFF7FEFF 		bl	CheckITStatus
 2443              	.LVL212:
1708:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_ERR:
 2444              		.loc 1 1708 9 is_stmt 1 view .LVU812
 2445 00e4 05E0     		b	.L164
 2446              	.LVL213:
 2447              	.L181:
1711:FWLIB/src/stm32f4xx_can.c ****         break;
 2448              		.loc 1 1711 9 view .LVU813
1711:FWLIB/src/stm32f4xx_can.c ****         break;
 2449              		.loc 1 1711 20 is_stmt 0 view .LVU814
 2450 00e6 4068     		ldr	r0, [r0, #4]
 2451              	.LVL214:
1711:FWLIB/src/stm32f4xx_can.c ****         break;
 2452              		.loc 1 1711 20 view .LVU815
 2453 00e8 0421     		movs	r1, #4
 2454              	.LVL215:
1711:FWLIB/src/stm32f4xx_can.c ****         break;
 2455              		.loc 1 1711 20 view .LVU816
 2456 00ea FFF7FEFF 		bl	CheckITStatus
 2457              	.LVL216:
1712:FWLIB/src/stm32f4xx_can.c ****       default:
 2458              		.loc 1 1712 9 is_stmt 1 view .LVU817
 2459 00ee 00E0     		b	.L164
 2460              	.LVL217:
 2461              	.L182:
1722:FWLIB/src/stm32f4xx_can.c ****   }
 2462              		.loc 1 1722 15 is_stmt 0 view .LVU818
 2463 00f0 0020     		movs	r0, #0
 2464              	.LVL218:
 2465              	.L164:
1726:FWLIB/src/stm32f4xx_can.c **** }
 2466              		.loc 1 1726 3 is_stmt 1 view .LVU819
1727:FWLIB/src/stm32f4xx_can.c **** 
ARM GAS  /tmp/ccOHJlyF.s 			page 90


 2467              		.loc 1 1727 1 is_stmt 0 view .LVU820
 2468 00f2 08BD     		pop	{r3, pc}
 2469              	.L189:
 2470              		.align	2
 2471              	.L188:
 2472 00f4 01010100 		.word	65793
 2473              		.cfi_endproc
 2474              	.LFE145:
 2476              		.section	.text.CAN_ClearITPendingBit,"ax",%progbits
 2477              		.align	1
 2478              		.global	CAN_ClearITPendingBit
 2479              		.syntax unified
 2480              		.thumb
 2481              		.thumb_func
 2482              		.fpu fpv4-sp-d16
 2484              	CAN_ClearITPendingBit:
 2485              	.LVL219:
 2486              	.LFB146:
1750:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 2487              		.loc 1 1750 1 is_stmt 1 view -0
 2488              		.cfi_startproc
 2489              		@ args = 0, pretend = 0, frame = 0
 2490              		@ frame_needed = 0, uses_anonymous_args = 0
 2491              		@ link register save eliminated.
1752:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_CLEAR_IT(CAN_IT));
 2492              		.loc 1 1752 3 view .LVU822
1753:FWLIB/src/stm32f4xx_can.c **** 
 2493              		.loc 1 1753 3 view .LVU823
1755:FWLIB/src/stm32f4xx_can.c ****   {
 2494              		.loc 1 1755 3 view .LVU824
 2495 0000 B1F5807F 		cmp	r1, #256
 2496 0004 3AD0     		beq	.L191
 2497 0006 0DD9     		bls	.L207
 2498 0008 B1F5006F 		cmp	r1, #2048
 2499 000c 3CD0     		beq	.L200
 2500 000e 1CD9     		bls	.L208
 2501 0010 B1F5803F 		cmp	r1, #65536
 2502 0014 2CD0     		beq	.L204
 2503 0016 B1F5003F 		cmp	r1, #131072
 2504 001a 2CD0     		beq	.L205
 2505 001c B1F5004F 		cmp	r1, #32768
 2506 0020 37D0     		beq	.L209
 2507              	.L190:
1816:FWLIB/src/stm32f4xx_can.c ****  /**
 2508              		.loc 1 1816 1 is_stmt 0 view .LVU825
 2509 0022 7047     		bx	lr
 2510              	.L207:
1755:FWLIB/src/stm32f4xx_can.c ****   {
 2511              		.loc 1 1755 3 view .LVU826
 2512 0024 0829     		cmp	r1, #8
 2513 0026 1DD0     		beq	.L193
 2514 0028 06D9     		bls	.L210
 2515 002a 2029     		cmp	r1, #32
 2516 002c 1DD0     		beq	.L198
 2517 002e 4029     		cmp	r1, #64
 2518 0030 0AD1     		bne	.L211
1775:FWLIB/src/stm32f4xx_can.c ****       break;
ARM GAS  /tmp/ccOHJlyF.s 			page 91


 2519              		.loc 1 1775 7 is_stmt 1 view .LVU827
1775:FWLIB/src/stm32f4xx_can.c ****       break;
 2520              		.loc 1 1775 18 is_stmt 0 view .LVU828
 2521 0032 1023     		movs	r3, #16
 2522 0034 0361     		str	r3, [r0, #16]
1776:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_WKU:
 2523              		.loc 1 1776 7 is_stmt 1 view .LVU829
 2524 0036 7047     		bx	lr
 2525              	.L210:
1755:FWLIB/src/stm32f4xx_can.c ****   {
 2526              		.loc 1 1755 3 is_stmt 0 view .LVU830
 2527 0038 0129     		cmp	r1, #1
 2528 003a 10D0     		beq	.L195
 2529 003c 0429     		cmp	r1, #4
 2530 003e 02D1     		bne	.L212
1763:FWLIB/src/stm32f4xx_can.c ****       break;
 2531              		.loc 1 1763 7 is_stmt 1 view .LVU831
1763:FWLIB/src/stm32f4xx_can.c ****       break;
 2532              		.loc 1 1763 18 is_stmt 0 view .LVU832
 2533 0040 0823     		movs	r3, #8
 2534 0042 C360     		str	r3, [r0, #12]
1764:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FOV0:
 2535              		.loc 1 1764 7 is_stmt 1 view .LVU833
 2536 0044 7047     		bx	lr
 2537              	.L212:
1764:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FOV0:
 2538              		.loc 1 1764 7 is_stmt 0 view .LVU834
 2539 0046 7047     		bx	lr
 2540              	.L211:
1764:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FOV0:
 2541              		.loc 1 1764 7 view .LVU835
 2542 0048 7047     		bx	lr
 2543              	.L208:
1755:FWLIB/src/stm32f4xx_can.c ****   {
 2544              		.loc 1 1755 3 view .LVU836
 2545 004a B1F5007F 		cmp	r1, #512
 2546 004e 18D0     		beq	.L202
 2547 0050 B1F5806F 		cmp	r1, #1024
 2548 0054 02D1     		bne	.L213
1797:FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
 2549              		.loc 1 1797 7 is_stmt 1 view .LVU837
1797:FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
 2550              		.loc 1 1797 17 is_stmt 0 view .LVU838
 2551 0056 0423     		movs	r3, #4
 2552 0058 4360     		str	r3, [r0, #4]
1799:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_LEC:
 2553              		.loc 1 1799 8 is_stmt 1 view .LVU839
 2554 005a 7047     		bx	lr
 2555              	.L213:
1799:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_LEC:
 2556              		.loc 1 1799 8 is_stmt 0 view .LVU840
 2557 005c 7047     		bx	lr
 2558              	.L195:
1759:FWLIB/src/stm32f4xx_can.c ****       break;
 2559              		.loc 1 1759 7 is_stmt 1 view .LVU841
1759:FWLIB/src/stm32f4xx_can.c ****       break;
 2560              		.loc 1 1759 17 is_stmt 0 view .LVU842
ARM GAS  /tmp/ccOHJlyF.s 			page 92


 2561 005e 0F4B     		ldr	r3, .L214
 2562 0060 8360     		str	r3, [r0, #8]
1760:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FF0:
 2563              		.loc 1 1760 7 is_stmt 1 view .LVU843
 2564 0062 7047     		bx	lr
 2565              	.L193:
1767:FWLIB/src/stm32f4xx_can.c ****       break;
 2566              		.loc 1 1767 7 view .LVU844
1767:FWLIB/src/stm32f4xx_can.c ****       break;
 2567              		.loc 1 1767 18 is_stmt 0 view .LVU845
 2568 0064 1023     		movs	r3, #16
 2569 0066 C360     		str	r3, [r0, #12]
1768:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FF1:
 2570              		.loc 1 1768 7 is_stmt 1 view .LVU846
 2571 0068 7047     		bx	lr
 2572              	.L198:
1771:FWLIB/src/stm32f4xx_can.c ****       break;
 2573              		.loc 1 1771 7 view .LVU847
1771:FWLIB/src/stm32f4xx_can.c ****       break;
 2574              		.loc 1 1771 18 is_stmt 0 view .LVU848
 2575 006a 0823     		movs	r3, #8
 2576 006c 0361     		str	r3, [r0, #16]
1772:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FOV1:
 2577              		.loc 1 1772 7 is_stmt 1 view .LVU849
 2578 006e 7047     		bx	lr
 2579              	.L204:
1779:FWLIB/src/stm32f4xx_can.c ****       break;
 2580              		.loc 1 1779 7 view .LVU850
1779:FWLIB/src/stm32f4xx_can.c ****       break;
 2581              		.loc 1 1779 17 is_stmt 0 view .LVU851
 2582 0070 0823     		movs	r3, #8
 2583 0072 4360     		str	r3, [r0, #4]
1780:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_SLK:
 2584              		.loc 1 1780 7 is_stmt 1 view .LVU852
 2585 0074 7047     		bx	lr
 2586              	.L205:
1783:FWLIB/src/stm32f4xx_can.c ****       break;
 2587              		.loc 1 1783 7 view .LVU853
1783:FWLIB/src/stm32f4xx_can.c ****       break;
 2588              		.loc 1 1783 17 is_stmt 0 view .LVU854
 2589 0076 1023     		movs	r3, #16
 2590 0078 4360     		str	r3, [r0, #4]
1784:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_EWG:
 2591              		.loc 1 1784 7 is_stmt 1 view .LVU855
 2592 007a 7047     		bx	lr
 2593              	.L191:
1787:FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/ 
 2594              		.loc 1 1787 7 view .LVU856
1787:FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/ 
 2595              		.loc 1 1787 17 is_stmt 0 view .LVU857
 2596 007c 0423     		movs	r3, #4
 2597 007e 4360     		str	r3, [r0, #4]
1789:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_EPV:
 2598              		.loc 1 1789 7 is_stmt 1 view .LVU858
 2599 0080 7047     		bx	lr
 2600              	.L202:
1792:FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
ARM GAS  /tmp/ccOHJlyF.s 			page 93


 2601              		.loc 1 1792 7 view .LVU859
1792:FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
 2602              		.loc 1 1792 17 is_stmt 0 view .LVU860
 2603 0082 0423     		movs	r3, #4
 2604 0084 4360     		str	r3, [r0, #4]
1794:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_BOF:
 2605              		.loc 1 1794 7 is_stmt 1 view .LVU861
 2606 0086 7047     		bx	lr
 2607              	.L200:
1802:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
 2608              		.loc 1 1802 7 view .LVU862
1802:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
 2609              		.loc 1 1802 17 is_stmt 0 view .LVU863
 2610 0088 0023     		movs	r3, #0
 2611 008a 8361     		str	r3, [r0, #24]
1804:FWLIB/src/stm32f4xx_can.c ****       break;
 2612              		.loc 1 1804 7 is_stmt 1 view .LVU864
1804:FWLIB/src/stm32f4xx_can.c ****       break;
 2613              		.loc 1 1804 17 is_stmt 0 view .LVU865
 2614 008c 0423     		movs	r3, #4
 2615 008e 4360     		str	r3, [r0, #4]
1805:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_ERR:
 2616              		.loc 1 1805 7 is_stmt 1 view .LVU866
 2617 0090 7047     		bx	lr
 2618              	.L209:
1808:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
 2619              		.loc 1 1808 7 view .LVU867
1808:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
 2620              		.loc 1 1808 17 is_stmt 0 view .LVU868
 2621 0092 0023     		movs	r3, #0
 2622 0094 8361     		str	r3, [r0, #24]
1810:FWLIB/src/stm32f4xx_can.c ****        /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
 2623              		.loc 1 1810 7 is_stmt 1 view .LVU869
1810:FWLIB/src/stm32f4xx_can.c ****        /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
 2624              		.loc 1 1810 17 is_stmt 0 view .LVU870
 2625 0096 0423     		movs	r3, #4
 2626 0098 4360     		str	r3, [r0, #4]
1812:FWLIB/src/stm32f4xx_can.c ****     default:
 2627              		.loc 1 1812 8 is_stmt 1 view .LVU871
1816:FWLIB/src/stm32f4xx_can.c ****  /**
 2628              		.loc 1 1816 1 is_stmt 0 view .LVU872
 2629 009a C2E7     		b	.L190
 2630              	.L215:
 2631              		.align	2
 2632              	.L214:
 2633 009c 01010100 		.word	65793
 2634              		.cfi_endproc
 2635              	.LFE146:
 2637              		.text
 2638              	.Letext0:
 2639              		.file 2 "/home/bt0/stm32/compile-tool/gcc-arm-none-eabi-8-2018-q4-major-linux/gcc-arm-none-eabi-8-
 2640              		.file 3 "/home/bt0/stm32/compile-tool/gcc-arm-none-eabi-8-2018-q4-major-linux/gcc-arm-none-eabi-8-
 2641              		.file 4 "F4_CORE/core_cm4.h"
 2642              		.file 5 "USER/system_stm32f4xx.h"
 2643              		.file 6 "USER/stm32f4xx.h"
 2644              		.file 7 "FWLIB/inc/stm32f4xx_can.h"
 2645              		.file 8 "FWLIB/inc/stm32f4xx_rcc.h"
ARM GAS  /tmp/ccOHJlyF.s 			page 94


ARM GAS  /tmp/ccOHJlyF.s 			page 95


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_can.c
     /tmp/ccOHJlyF.s:18     .text.CheckITStatus:0000000000000000 $t
     /tmp/ccOHJlyF.s:25     .text.CheckITStatus:0000000000000000 CheckITStatus
     /tmp/ccOHJlyF.s:56     .text.CAN_DeInit:0000000000000000 $t
     /tmp/ccOHJlyF.s:63     .text.CAN_DeInit:0000000000000000 CAN_DeInit
     /tmp/ccOHJlyF.s:115    .text.CAN_DeInit:0000000000000034 $d
     /tmp/ccOHJlyF.s:120    .text.CAN_Init:0000000000000000 $t
     /tmp/ccOHJlyF.s:127    .text.CAN_Init:0000000000000000 CAN_Init
     /tmp/ccOHJlyF.s:387    .text.CAN_FilterInit:0000000000000000 $t
     /tmp/ccOHJlyF.s:394    .text.CAN_FilterInit:0000000000000000 CAN_FilterInit
     /tmp/ccOHJlyF.s:601    .text.CAN_FilterInit:00000000000000f8 $d
     /tmp/ccOHJlyF.s:606    .text.CAN_StructInit:0000000000000000 $t
     /tmp/ccOHJlyF.s:613    .text.CAN_StructInit:0000000000000000 CAN_StructInit
     /tmp/ccOHJlyF.s:664    .text.CAN_SlaveStartBank:0000000000000000 $t
     /tmp/ccOHJlyF.s:671    .text.CAN_SlaveStartBank:0000000000000000 CAN_SlaveStartBank
     /tmp/ccOHJlyF.s:709    .text.CAN_SlaveStartBank:0000000000000038 $d
     /tmp/ccOHJlyF.s:714    .text.CAN_DBGFreeze:0000000000000000 $t
     /tmp/ccOHJlyF.s:721    .text.CAN_DBGFreeze:0000000000000000 CAN_DBGFreeze
     /tmp/ccOHJlyF.s:752    .text.CAN_TTComModeCmd:0000000000000000 $t
     /tmp/ccOHJlyF.s:759    .text.CAN_TTComModeCmd:0000000000000000 CAN_TTComModeCmd
     /tmp/ccOHJlyF.s:820    .text.CAN_Transmit:0000000000000000 $t
     /tmp/ccOHJlyF.s:827    .text.CAN_Transmit:0000000000000000 CAN_Transmit
     /tmp/ccOHJlyF.s:1036   .text.CAN_TransmitStatus:0000000000000000 $t
     /tmp/ccOHJlyF.s:1043   .text.CAN_TransmitStatus:0000000000000000 CAN_TransmitStatus
     /tmp/ccOHJlyF.s:1190   .text.CAN_TransmitStatus:0000000000000088 $d
     /tmp/ccOHJlyF.s:1198   .text.CAN_CancelTransmit:0000000000000000 $t
     /tmp/ccOHJlyF.s:1205   .text.CAN_CancelTransmit:0000000000000000 CAN_CancelTransmit
     /tmp/ccOHJlyF.s:1252   .text.CAN_Receive:0000000000000000 $t
     /tmp/ccOHJlyF.s:1259   .text.CAN_Receive:0000000000000000 CAN_Receive
     /tmp/ccOHJlyF.s:1415   .text.CAN_FIFORelease:0000000000000000 $t
     /tmp/ccOHJlyF.s:1422   .text.CAN_FIFORelease:0000000000000000 CAN_FIFORelease
     /tmp/ccOHJlyF.s:1453   .text.CAN_MessagePending:0000000000000000 $t
     /tmp/ccOHJlyF.s:1460   .text.CAN_MessagePending:0000000000000000 CAN_MessagePending
     /tmp/ccOHJlyF.s:1510   .text.CAN_OperatingModeRequest:0000000000000000 $t
     /tmp/ccOHJlyF.s:1517   .text.CAN_OperatingModeRequest:0000000000000000 CAN_OperatingModeRequest
     /tmp/ccOHJlyF.s:1697   .text.CAN_Sleep:0000000000000000 $t
     /tmp/ccOHJlyF.s:1704   .text.CAN_Sleep:0000000000000000 CAN_Sleep
     /tmp/ccOHJlyF.s:1747   .text.CAN_WakeUp:0000000000000000 $t
     /tmp/ccOHJlyF.s:1754   .text.CAN_WakeUp:0000000000000000 CAN_WakeUp
     /tmp/ccOHJlyF.s:1813   .text.CAN_GetLastErrorCode:0000000000000000 $t
     /tmp/ccOHJlyF.s:1820   .text.CAN_GetLastErrorCode:0000000000000000 CAN_GetLastErrorCode
     /tmp/ccOHJlyF.s:1844   .text.CAN_GetReceiveErrorCounter:0000000000000000 $t
     /tmp/ccOHJlyF.s:1851   .text.CAN_GetReceiveErrorCounter:0000000000000000 CAN_GetReceiveErrorCounter
     /tmp/ccOHJlyF.s:1875   .text.CAN_GetLSBTransmitErrorCounter:0000000000000000 $t
     /tmp/ccOHJlyF.s:1882   .text.CAN_GetLSBTransmitErrorCounter:0000000000000000 CAN_GetLSBTransmitErrorCounter
     /tmp/ccOHJlyF.s:1906   .text.CAN_ITConfig:0000000000000000 $t
     /tmp/ccOHJlyF.s:1913   .text.CAN_ITConfig:0000000000000000 CAN_ITConfig
     /tmp/ccOHJlyF.s:1945   .text.CAN_GetFlagStatus:0000000000000000 $t
     /tmp/ccOHJlyF.s:1952   .text.CAN_GetFlagStatus:0000000000000000 CAN_GetFlagStatus
     /tmp/ccOHJlyF.s:2098   .text.CAN_ClearFlag:0000000000000000 $t
     /tmp/ccOHJlyF.s:2105   .text.CAN_ClearFlag:0000000000000000 CAN_ClearFlag
     /tmp/ccOHJlyF.s:2168   .text.CAN_ClearFlag:0000000000000034 $d
     /tmp/ccOHJlyF.s:2173   .text.CAN_GetITStatus:0000000000000000 $t
     /tmp/ccOHJlyF.s:2180   .text.CAN_GetITStatus:0000000000000000 CAN_GetITStatus
     /tmp/ccOHJlyF.s:2472   .text.CAN_GetITStatus:00000000000000f4 $d
     /tmp/ccOHJlyF.s:2477   .text.CAN_ClearITPendingBit:0000000000000000 $t
ARM GAS  /tmp/ccOHJlyF.s 			page 96


     /tmp/ccOHJlyF.s:2484   .text.CAN_ClearITPendingBit:0000000000000000 CAN_ClearITPendingBit
     /tmp/ccOHJlyF.s:2633   .text.CAN_ClearITPendingBit:000000000000009c $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
