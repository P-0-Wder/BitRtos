ARM GAS  /tmp/ccweFGY7.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_can.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.CheckITStatus,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	CheckITStatus:
  25              	.LFB147:
  26              		.file 1 "FWLIB/src/stm32f4xx_can.c"
   1:FWLIB/src/stm32f4xx_can.c **** /**
   2:FWLIB/src/stm32f4xx_can.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_can.c ****   * @file    stm32f4xx_can.c
   4:FWLIB/src/stm32f4xx_can.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_can.c ****   * @version V1.8.0
   6:FWLIB/src/stm32f4xx_can.c ****   * @date    04-November-2016
   7:FWLIB/src/stm32f4xx_can.c ****   * @brief   This file provides firmware functions to manage the following 
   8:FWLIB/src/stm32f4xx_can.c ****   *          functionalities of the Controller area network (CAN) peripheral:
   9:FWLIB/src/stm32f4xx_can.c ****   *           + Initialization and Configuration 
  10:FWLIB/src/stm32f4xx_can.c ****   *           + CAN Frames Transmission
  11:FWLIB/src/stm32f4xx_can.c ****   *           + CAN Frames Reception
  12:FWLIB/src/stm32f4xx_can.c ****   *           + Operation modes switch
  13:FWLIB/src/stm32f4xx_can.c ****   *           + Error management
  14:FWLIB/src/stm32f4xx_can.c ****   *           + Interrupts and flags
  15:FWLIB/src/stm32f4xx_can.c ****   *
  16:FWLIB/src/stm32f4xx_can.c **** @verbatim
  17:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
  18:FWLIB/src/stm32f4xx_can.c ****                         ##### How to use this driver #####
  19:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
  20:FWLIB/src/stm32f4xx_can.c ****     [..]
  21:FWLIB/src/stm32f4xx_can.c ****       (#) Enable the CAN controller interface clock using 
  22:FWLIB/src/stm32f4xx_can.c ****           RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1, ENABLE); for CAN1 
  23:FWLIB/src/stm32f4xx_can.c ****           and RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN2, ENABLE); for CAN2
  24:FWLIB/src/stm32f4xx_can.c ****       -@- In case you are using CAN2 only, you have to enable the CAN1 clock.
  25:FWLIB/src/stm32f4xx_can.c ****        
  26:FWLIB/src/stm32f4xx_can.c ****       (#) CAN pins configuration
  27:FWLIB/src/stm32f4xx_can.c ****         (++) Enable the clock for the CAN GPIOs using the following function:
  28:FWLIB/src/stm32f4xx_can.c ****              RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);   
  29:FWLIB/src/stm32f4xx_can.c ****         (++) Connect the involved CAN pins to AF9 using the following function 
  30:FWLIB/src/stm32f4xx_can.c ****              GPIO_PinAFConfig(GPIOx, GPIO_PinSourcex, GPIO_AF_CANx); 
  31:FWLIB/src/stm32f4xx_can.c ****         (++) Configure these CAN pins in alternate function mode by calling
  32:FWLIB/src/stm32f4xx_can.c ****              the function  GPIO_Init();
ARM GAS  /tmp/ccweFGY7.s 			page 2


  33:FWLIB/src/stm32f4xx_can.c ****       
  34:FWLIB/src/stm32f4xx_can.c ****       (#) Initialize and configure the CAN using CAN_Init() and 
  35:FWLIB/src/stm32f4xx_can.c ****           CAN_FilterInit() functions.   
  36:FWLIB/src/stm32f4xx_can.c ****                  
  37:FWLIB/src/stm32f4xx_can.c ****       (#) Transmit the desired CAN frame using CAN_Transmit() function.
  38:FWLIB/src/stm32f4xx_can.c ****            
  39:FWLIB/src/stm32f4xx_can.c ****       (#) Check the transmission of a CAN frame using CAN_TransmitStatus()
  40:FWLIB/src/stm32f4xx_can.c ****           function.
  41:FWLIB/src/stm32f4xx_can.c ****                  
  42:FWLIB/src/stm32f4xx_can.c ****       (#) Cancel the transmission of a CAN frame using CAN_CancelTransmit()
  43:FWLIB/src/stm32f4xx_can.c ****           function.  
  44:FWLIB/src/stm32f4xx_can.c ****               
  45:FWLIB/src/stm32f4xx_can.c ****       (#) Receive a CAN frame using CAN_Receive() function.
  46:FWLIB/src/stm32f4xx_can.c ****            
  47:FWLIB/src/stm32f4xx_can.c ****       (#) Release the receive FIFOs using CAN_FIFORelease() function.
  48:FWLIB/src/stm32f4xx_can.c ****                  
  49:FWLIB/src/stm32f4xx_can.c ****       (#) Return the number of pending received frames using 
  50:FWLIB/src/stm32f4xx_can.c ****           CAN_MessagePending() function.            
  51:FWLIB/src/stm32f4xx_can.c ****                      
  52:FWLIB/src/stm32f4xx_can.c ****       (#) To control CAN events you can use one of the following two methods:
  53:FWLIB/src/stm32f4xx_can.c ****         (++) Check on CAN flags using the CAN_GetFlagStatus() function.  
  54:FWLIB/src/stm32f4xx_can.c ****         (++) Use CAN interrupts through the function CAN_ITConfig() at 
  55:FWLIB/src/stm32f4xx_can.c ****              initialization phase and CAN_GetITStatus() function into 
  56:FWLIB/src/stm32f4xx_can.c ****              interrupt routines to check if the event has occurred or not.
  57:FWLIB/src/stm32f4xx_can.c ****              After checking on a flag you should clear it using CAN_ClearFlag()
  58:FWLIB/src/stm32f4xx_can.c ****              function. And after checking on an interrupt event you should 
  59:FWLIB/src/stm32f4xx_can.c ****              clear it using CAN_ClearITPendingBit() function.            
  60:FWLIB/src/stm32f4xx_can.c **** 
  61:FWLIB/src/stm32f4xx_can.c **** @endverbatim
  62:FWLIB/src/stm32f4xx_can.c ****            
  63:FWLIB/src/stm32f4xx_can.c ****   ******************************************************************************
  64:FWLIB/src/stm32f4xx_can.c ****   * @attention
  65:FWLIB/src/stm32f4xx_can.c ****   *
  66:FWLIB/src/stm32f4xx_can.c ****   * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
  67:FWLIB/src/stm32f4xx_can.c ****   *
  68:FWLIB/src/stm32f4xx_can.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  69:FWLIB/src/stm32f4xx_can.c ****   * You may not use this file except in compliance with the License.
  70:FWLIB/src/stm32f4xx_can.c ****   * You may obtain a copy of the License at:
  71:FWLIB/src/stm32f4xx_can.c ****   *
  72:FWLIB/src/stm32f4xx_can.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  73:FWLIB/src/stm32f4xx_can.c ****   *
  74:FWLIB/src/stm32f4xx_can.c ****   * Unless required by applicable law or agreed to in writing, software 
  75:FWLIB/src/stm32f4xx_can.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  76:FWLIB/src/stm32f4xx_can.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  77:FWLIB/src/stm32f4xx_can.c ****   * See the License for the specific language governing permissions and
  78:FWLIB/src/stm32f4xx_can.c ****   * limitations under the License.
  79:FWLIB/src/stm32f4xx_can.c ****   *
  80:FWLIB/src/stm32f4xx_can.c ****   ******************************************************************************  
  81:FWLIB/src/stm32f4xx_can.c ****   */
  82:FWLIB/src/stm32f4xx_can.c **** 
  83:FWLIB/src/stm32f4xx_can.c **** /* Includes ------------------------------------------------------------------*/
  84:FWLIB/src/stm32f4xx_can.c **** #include "stm32f4xx_can.h"
  85:FWLIB/src/stm32f4xx_can.c **** #include "stm32f4xx_rcc.h"
  86:FWLIB/src/stm32f4xx_can.c **** 
  87:FWLIB/src/stm32f4xx_can.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  88:FWLIB/src/stm32f4xx_can.c ****   * @{
  89:FWLIB/src/stm32f4xx_can.c ****   */
ARM GAS  /tmp/ccweFGY7.s 			page 3


  90:FWLIB/src/stm32f4xx_can.c **** 
  91:FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN 
  92:FWLIB/src/stm32f4xx_can.c ****   * @brief CAN driver modules
  93:FWLIB/src/stm32f4xx_can.c ****   * @{
  94:FWLIB/src/stm32f4xx_can.c ****   */ 
  95:FWLIB/src/stm32f4xx_can.c **** /* Private typedef -----------------------------------------------------------*/
  96:FWLIB/src/stm32f4xx_can.c **** /* Private define ------------------------------------------------------------*/
  97:FWLIB/src/stm32f4xx_can.c **** 
  98:FWLIB/src/stm32f4xx_can.c **** /* CAN Master Control Register bits */
  99:FWLIB/src/stm32f4xx_can.c **** #define MCR_DBF           ((uint32_t)0x00010000) /* software master reset */
 100:FWLIB/src/stm32f4xx_can.c **** 
 101:FWLIB/src/stm32f4xx_can.c **** /* CAN Mailbox Transmit Request */
 102:FWLIB/src/stm32f4xx_can.c **** #define TMIDxR_TXRQ       ((uint32_t)0x00000001) /* Transmit mailbox request */
 103:FWLIB/src/stm32f4xx_can.c **** 
 104:FWLIB/src/stm32f4xx_can.c **** /* CAN Filter Master Register bits */
 105:FWLIB/src/stm32f4xx_can.c **** #define FMR_FINIT         ((uint32_t)0x00000001) /* Filter init mode */
 106:FWLIB/src/stm32f4xx_can.c **** 
 107:FWLIB/src/stm32f4xx_can.c **** /* Time out for INAK bit */
 108:FWLIB/src/stm32f4xx_can.c **** #define INAK_TIMEOUT      ((uint32_t)0x0000FFFF)
 109:FWLIB/src/stm32f4xx_can.c **** /* Time out for SLAK bit */
 110:FWLIB/src/stm32f4xx_can.c **** #define SLAK_TIMEOUT      ((uint32_t)0x0000FFFF)
 111:FWLIB/src/stm32f4xx_can.c **** 
 112:FWLIB/src/stm32f4xx_can.c **** /* Flags in TSR register */
 113:FWLIB/src/stm32f4xx_can.c **** #define CAN_FLAGS_TSR     ((uint32_t)0x08000000) 
 114:FWLIB/src/stm32f4xx_can.c **** /* Flags in RF1R register */
 115:FWLIB/src/stm32f4xx_can.c **** #define CAN_FLAGS_RF1R    ((uint32_t)0x04000000) 
 116:FWLIB/src/stm32f4xx_can.c **** /* Flags in RF0R register */
 117:FWLIB/src/stm32f4xx_can.c **** #define CAN_FLAGS_RF0R    ((uint32_t)0x02000000) 
 118:FWLIB/src/stm32f4xx_can.c **** /* Flags in MSR register */
 119:FWLIB/src/stm32f4xx_can.c **** #define CAN_FLAGS_MSR     ((uint32_t)0x01000000) 
 120:FWLIB/src/stm32f4xx_can.c **** /* Flags in ESR register */
 121:FWLIB/src/stm32f4xx_can.c **** #define CAN_FLAGS_ESR     ((uint32_t)0x00F00000) 
 122:FWLIB/src/stm32f4xx_can.c **** 
 123:FWLIB/src/stm32f4xx_can.c **** /* Mailboxes definition */
 124:FWLIB/src/stm32f4xx_can.c **** #define CAN_TXMAILBOX_0   ((uint8_t)0x00)
 125:FWLIB/src/stm32f4xx_can.c **** #define CAN_TXMAILBOX_1   ((uint8_t)0x01)
 126:FWLIB/src/stm32f4xx_can.c **** #define CAN_TXMAILBOX_2   ((uint8_t)0x02) 
 127:FWLIB/src/stm32f4xx_can.c **** 
 128:FWLIB/src/stm32f4xx_can.c **** #define CAN_MODE_MASK     ((uint32_t) 0x00000003)
 129:FWLIB/src/stm32f4xx_can.c **** 
 130:FWLIB/src/stm32f4xx_can.c **** /* Private macro -------------------------------------------------------------*/
 131:FWLIB/src/stm32f4xx_can.c **** /* Private variables ---------------------------------------------------------*/
 132:FWLIB/src/stm32f4xx_can.c **** /* Private function prototypes -----------------------------------------------*/
 133:FWLIB/src/stm32f4xx_can.c **** /* Private functions ---------------------------------------------------------*/
 134:FWLIB/src/stm32f4xx_can.c **** static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit);
 135:FWLIB/src/stm32f4xx_can.c **** 
 136:FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Private_Functions
 137:FWLIB/src/stm32f4xx_can.c ****   * @{
 138:FWLIB/src/stm32f4xx_can.c ****   */
 139:FWLIB/src/stm32f4xx_can.c **** 
 140:FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Group1 Initialization and Configuration functions
 141:FWLIB/src/stm32f4xx_can.c ****  *  @brief    Initialization and Configuration functions 
 142:FWLIB/src/stm32f4xx_can.c ****  *
 143:FWLIB/src/stm32f4xx_can.c **** @verbatim    
 144:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
 145:FWLIB/src/stm32f4xx_can.c ****               ##### Initialization and Configuration functions #####
 146:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================  
ARM GAS  /tmp/ccweFGY7.s 			page 4


 147:FWLIB/src/stm32f4xx_can.c ****     [..] This section provides functions allowing to 
 148:FWLIB/src/stm32f4xx_can.c ****       (+) Initialize the CAN peripherals : Prescaler, operating mode, the maximum 
 149:FWLIB/src/stm32f4xx_can.c ****           number of time quanta to perform resynchronization, the number of time 
 150:FWLIB/src/stm32f4xx_can.c ****           quanta in Bit Segment 1 and 2 and many other modes. 
 151:FWLIB/src/stm32f4xx_can.c ****           Refer to  @ref CAN_InitTypeDef  for more details.
 152:FWLIB/src/stm32f4xx_can.c ****       (+) Configures the CAN reception filter.                                      
 153:FWLIB/src/stm32f4xx_can.c ****       (+) Select the start bank filter for slave CAN.
 154:FWLIB/src/stm32f4xx_can.c ****       (+) Enables or disables the Debug Freeze mode for CAN
 155:FWLIB/src/stm32f4xx_can.c ****       (+)Enables or disables the CAN Time Trigger Operation communication mode
 156:FWLIB/src/stm32f4xx_can.c ****    
 157:FWLIB/src/stm32f4xx_can.c **** @endverbatim
 158:FWLIB/src/stm32f4xx_can.c ****   * @{
 159:FWLIB/src/stm32f4xx_can.c ****   */
 160:FWLIB/src/stm32f4xx_can.c ****   
 161:FWLIB/src/stm32f4xx_can.c **** /**
 162:FWLIB/src/stm32f4xx_can.c ****   * @brief  Deinitializes the CAN peripheral registers to their default reset values.
 163:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 164:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
 165:FWLIB/src/stm32f4xx_can.c ****   * @retval None.
 166:FWLIB/src/stm32f4xx_can.c ****   */
 167:FWLIB/src/stm32f4xx_can.c **** void CAN_DeInit(CAN_TypeDef* CANx)
 168:FWLIB/src/stm32f4xx_can.c **** {
 169:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 170:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 171:FWLIB/src/stm32f4xx_can.c ****  
 172:FWLIB/src/stm32f4xx_can.c ****   if (CANx == CAN1)
 173:FWLIB/src/stm32f4xx_can.c ****   {
 174:FWLIB/src/stm32f4xx_can.c ****     /* Enable CAN1 reset state */
 175:FWLIB/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 176:FWLIB/src/stm32f4xx_can.c ****     /* Release CAN1 from reset state */
 177:FWLIB/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 178:FWLIB/src/stm32f4xx_can.c ****   }
 179:FWLIB/src/stm32f4xx_can.c **** #if defined(STM32F413_423xx)
 180:FWLIB/src/stm32f4xx_can.c ****   else if(CANx == CAN2)
 181:FWLIB/src/stm32f4xx_can.c ****   {  
 182:FWLIB/src/stm32f4xx_can.c ****     /* Enable CAN2 reset state */
 183:FWLIB/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 184:FWLIB/src/stm32f4xx_can.c ****     /* Release CAN2 from reset state */
 185:FWLIB/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 186:FWLIB/src/stm32f4xx_can.c ****   }
 187:FWLIB/src/stm32f4xx_can.c ****   
 188:FWLIB/src/stm32f4xx_can.c ****   else /* CAN3 available only for STM32F413_423xx */
 189:FWLIB/src/stm32f4xx_can.c ****   {
 190:FWLIB/src/stm32f4xx_can.c ****     /* Enable CAN3 reset state */
 191:FWLIB/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN3, ENABLE);
 192:FWLIB/src/stm32f4xx_can.c ****     /* Release CAN3 from reset state */
 193:FWLIB/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN3, DISABLE); 
 194:FWLIB/src/stm32f4xx_can.c ****   }
 195:FWLIB/src/stm32f4xx_can.c **** #else
 196:FWLIB/src/stm32f4xx_can.c ****   else
 197:FWLIB/src/stm32f4xx_can.c ****   {
 198:FWLIB/src/stm32f4xx_can.c ****     /* Enable CAN2 reset state */
 199:FWLIB/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 200:FWLIB/src/stm32f4xx_can.c ****     /* Release CAN2 from reset state */
 201:FWLIB/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 202:FWLIB/src/stm32f4xx_can.c ****   }
 203:FWLIB/src/stm32f4xx_can.c **** #endif /* STM32F413_423xx */
ARM GAS  /tmp/ccweFGY7.s 			page 5


 204:FWLIB/src/stm32f4xx_can.c **** }
 205:FWLIB/src/stm32f4xx_can.c **** 
 206:FWLIB/src/stm32f4xx_can.c **** /**
 207:FWLIB/src/stm32f4xx_can.c ****   * @brief  Initializes the CAN peripheral according to the specified
 208:FWLIB/src/stm32f4xx_can.c ****   *         parameters in the CAN_InitStruct.
 209:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 210:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure that contains
 211:FWLIB/src/stm32f4xx_can.c ****   *         the configuration information for the CAN peripheral.
 212:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
 213:FWLIB/src/stm32f4xx_can.c ****   * @retval Constant indicates initialization succeed which will be 
 214:FWLIB/src/stm32f4xx_can.c ****   *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
 215:FWLIB/src/stm32f4xx_can.c ****   */
 216:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
 217:FWLIB/src/stm32f4xx_can.c **** {
 218:FWLIB/src/stm32f4xx_can.c ****   uint8_t InitStatus = CAN_InitStatus_Failed;
 219:FWLIB/src/stm32f4xx_can.c ****   uint32_t wait_ack = 0x00000000;
 220:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 221:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 222:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TTCM));
 223:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_ABOM));
 224:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_AWUM));
 225:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_NART));
 226:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_RFLM));
 227:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TXFP));
 228:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_MODE(CAN_InitStruct->CAN_Mode));
 229:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_SJW(CAN_InitStruct->CAN_SJW));
 230:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
 231:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
 232:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));
 233:FWLIB/src/stm32f4xx_can.c **** 
 234:FWLIB/src/stm32f4xx_can.c ****   /* Exit from sleep mode */
 235:FWLIB/src/stm32f4xx_can.c ****   CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 236:FWLIB/src/stm32f4xx_can.c **** 
 237:FWLIB/src/stm32f4xx_can.c ****   /* Request initialisation */
 238:FWLIB/src/stm32f4xx_can.c ****   CANx->MCR |= CAN_MCR_INRQ ;
 239:FWLIB/src/stm32f4xx_can.c **** 
 240:FWLIB/src/stm32f4xx_can.c ****   /* Wait the acknowledge */
 241:FWLIB/src/stm32f4xx_can.c ****   while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 242:FWLIB/src/stm32f4xx_can.c ****   {
 243:FWLIB/src/stm32f4xx_can.c ****     wait_ack++;
 244:FWLIB/src/stm32f4xx_can.c ****   }
 245:FWLIB/src/stm32f4xx_can.c **** 
 246:FWLIB/src/stm32f4xx_can.c ****   /* Check acknowledge */
 247:FWLIB/src/stm32f4xx_can.c ****   if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 248:FWLIB/src/stm32f4xx_can.c ****   {
 249:FWLIB/src/stm32f4xx_can.c ****     InitStatus = CAN_InitStatus_Failed;
 250:FWLIB/src/stm32f4xx_can.c ****   }
 251:FWLIB/src/stm32f4xx_can.c ****   else 
 252:FWLIB/src/stm32f4xx_can.c ****   {
 253:FWLIB/src/stm32f4xx_can.c ****     /* Set the time triggered communication mode */
 254:FWLIB/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_TTCM == ENABLE)
 255:FWLIB/src/stm32f4xx_can.c ****     {
 256:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_TTCM;
 257:FWLIB/src/stm32f4xx_can.c ****     }
 258:FWLIB/src/stm32f4xx_can.c ****     else
 259:FWLIB/src/stm32f4xx_can.c ****     {
 260:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
ARM GAS  /tmp/ccweFGY7.s 			page 6


 261:FWLIB/src/stm32f4xx_can.c ****     }
 262:FWLIB/src/stm32f4xx_can.c **** 
 263:FWLIB/src/stm32f4xx_can.c ****     /* Set the automatic bus-off management */
 264:FWLIB/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_ABOM == ENABLE)
 265:FWLIB/src/stm32f4xx_can.c ****     {
 266:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_ABOM;
 267:FWLIB/src/stm32f4xx_can.c ****     }
 268:FWLIB/src/stm32f4xx_can.c ****     else
 269:FWLIB/src/stm32f4xx_can.c ****     {
 270:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 271:FWLIB/src/stm32f4xx_can.c ****     }
 272:FWLIB/src/stm32f4xx_can.c **** 
 273:FWLIB/src/stm32f4xx_can.c ****     /* Set the automatic wake-up mode */
 274:FWLIB/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_AWUM == ENABLE)
 275:FWLIB/src/stm32f4xx_can.c ****     {
 276:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_AWUM;
 277:FWLIB/src/stm32f4xx_can.c ****     }
 278:FWLIB/src/stm32f4xx_can.c ****     else
 279:FWLIB/src/stm32f4xx_can.c ****     {
 280:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 281:FWLIB/src/stm32f4xx_can.c ****     }
 282:FWLIB/src/stm32f4xx_can.c **** 
 283:FWLIB/src/stm32f4xx_can.c ****     /* Set the no automatic retransmission */
 284:FWLIB/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_NART == ENABLE)
 285:FWLIB/src/stm32f4xx_can.c ****     {
 286:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_NART;
 287:FWLIB/src/stm32f4xx_can.c ****     }
 288:FWLIB/src/stm32f4xx_can.c ****     else
 289:FWLIB/src/stm32f4xx_can.c ****     {
 290:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 291:FWLIB/src/stm32f4xx_can.c ****     }
 292:FWLIB/src/stm32f4xx_can.c **** 
 293:FWLIB/src/stm32f4xx_can.c ****     /* Set the receive FIFO locked mode */
 294:FWLIB/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_RFLM == ENABLE)
 295:FWLIB/src/stm32f4xx_can.c ****     {
 296:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_RFLM;
 297:FWLIB/src/stm32f4xx_can.c ****     }
 298:FWLIB/src/stm32f4xx_can.c ****     else
 299:FWLIB/src/stm32f4xx_can.c ****     {
 300:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 301:FWLIB/src/stm32f4xx_can.c ****     }
 302:FWLIB/src/stm32f4xx_can.c **** 
 303:FWLIB/src/stm32f4xx_can.c ****     /* Set the transmit FIFO priority */
 304:FWLIB/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_TXFP == ENABLE)
 305:FWLIB/src/stm32f4xx_can.c ****     {
 306:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_TXFP;
 307:FWLIB/src/stm32f4xx_can.c ****     }
 308:FWLIB/src/stm32f4xx_can.c ****     else
 309:FWLIB/src/stm32f4xx_can.c ****     {
 310:FWLIB/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 311:FWLIB/src/stm32f4xx_can.c ****     }
 312:FWLIB/src/stm32f4xx_can.c **** 
 313:FWLIB/src/stm32f4xx_can.c ****     /* Set the bit timing register */
 314:FWLIB/src/stm32f4xx_can.c ****     CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 315:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 316:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 317:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
ARM GAS  /tmp/ccweFGY7.s 			page 7


 318:FWLIB/src/stm32f4xx_can.c ****                ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 319:FWLIB/src/stm32f4xx_can.c **** 
 320:FWLIB/src/stm32f4xx_can.c ****     /* Request leave initialisation */
 321:FWLIB/src/stm32f4xx_can.c ****     CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 322:FWLIB/src/stm32f4xx_can.c **** 
 323:FWLIB/src/stm32f4xx_can.c ****    /* Wait the acknowledge */
 324:FWLIB/src/stm32f4xx_can.c ****    wait_ack = 0;
 325:FWLIB/src/stm32f4xx_can.c **** 
 326:FWLIB/src/stm32f4xx_can.c ****    while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 327:FWLIB/src/stm32f4xx_can.c ****    {
 328:FWLIB/src/stm32f4xx_can.c ****      wait_ack++;
 329:FWLIB/src/stm32f4xx_can.c ****    }
 330:FWLIB/src/stm32f4xx_can.c **** 
 331:FWLIB/src/stm32f4xx_can.c ****     /* ...and check acknowledged */
 332:FWLIB/src/stm32f4xx_can.c ****     if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 333:FWLIB/src/stm32f4xx_can.c ****     {
 334:FWLIB/src/stm32f4xx_can.c ****       InitStatus = CAN_InitStatus_Failed;
 335:FWLIB/src/stm32f4xx_can.c ****     }
 336:FWLIB/src/stm32f4xx_can.c ****     else
 337:FWLIB/src/stm32f4xx_can.c ****     {
 338:FWLIB/src/stm32f4xx_can.c ****       InitStatus = CAN_InitStatus_Success ;
 339:FWLIB/src/stm32f4xx_can.c ****     }
 340:FWLIB/src/stm32f4xx_can.c ****   }
 341:FWLIB/src/stm32f4xx_can.c **** 
 342:FWLIB/src/stm32f4xx_can.c ****   /* At this step, return the status of initialization */
 343:FWLIB/src/stm32f4xx_can.c ****   return InitStatus;
 344:FWLIB/src/stm32f4xx_can.c **** }
 345:FWLIB/src/stm32f4xx_can.c **** 
 346:FWLIB/src/stm32f4xx_can.c **** #if defined(STM32F413_423xx)
 347:FWLIB/src/stm32f4xx_can.c **** /**
 348:FWLIB/src/stm32f4xx_can.c ****   * @brief  Configures the CAN reception filter according to the specified
 349:FWLIB/src/stm32f4xx_can.c ****   *         parameters in the CAN_FilterInitStruct.
 350:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 3 to select the CAN peripheral.
 351:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
 352:FWLIB/src/stm32f4xx_can.c ****   *         contains the configuration information.
 353:FWLIB/src/stm32f4xx_can.c ****   * @retval None
 354:FWLIB/src/stm32f4xx_can.c ****   */
 355:FWLIB/src/stm32f4xx_can.c **** void CAN_FilterInit(CAN_TypeDef* CANx, CAN_FilterInitTypeDef* CAN_FilterInitStruct)
 356:FWLIB/src/stm32f4xx_can.c **** {
 357:FWLIB/src/stm32f4xx_can.c ****   uint32_t filter_number_bit_pos = 0;
 358:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 359:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_NUMBER(CAN_FilterInitStruct->CAN_FilterNumber));
 360:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
 361:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
 362:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
 363:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));
 364:FWLIB/src/stm32f4xx_can.c ****   
 365:FWLIB/src/stm32f4xx_can.c ****   filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 366:FWLIB/src/stm32f4xx_can.c **** 
 367:FWLIB/src/stm32f4xx_can.c ****   /* Initialisation mode for the filter */
 368:FWLIB/src/stm32f4xx_can.c ****   CANx->FMR |= FMR_FINIT;
 369:FWLIB/src/stm32f4xx_can.c **** 
 370:FWLIB/src/stm32f4xx_can.c ****   /* Filter Deactivation */
 371:FWLIB/src/stm32f4xx_can.c ****   CANx->FA1R &= ~(uint32_t)filter_number_bit_pos;
 372:FWLIB/src/stm32f4xx_can.c **** 
 373:FWLIB/src/stm32f4xx_can.c ****   /* Filter Scale */
 374:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
ARM GAS  /tmp/ccweFGY7.s 			page 8


 375:FWLIB/src/stm32f4xx_can.c ****   {
 376:FWLIB/src/stm32f4xx_can.c ****     /* 16-bit scale for the filter */
 377:FWLIB/src/stm32f4xx_can.c ****     CANx->FS1R &= ~(uint32_t)filter_number_bit_pos;
 378:FWLIB/src/stm32f4xx_can.c **** 
 379:FWLIB/src/stm32f4xx_can.c ****     /* First 16-bit identifier and First 16-bit mask */
 380:FWLIB/src/stm32f4xx_can.c ****     /* Or First 16-bit identifier and Second 16-bit identifier */
 381:FWLIB/src/stm32f4xx_can.c ****     CANx->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 382:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 383:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 384:FWLIB/src/stm32f4xx_can.c **** 
 385:FWLIB/src/stm32f4xx_can.c ****     /* Second 16-bit identifier and Second 16-bit mask */
 386:FWLIB/src/stm32f4xx_can.c ****     /* Or Third 16-bit identifier and Fourth 16-bit identifier */
 387:FWLIB/src/stm32f4xx_can.c ****     CANx->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 388:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 389:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 390:FWLIB/src/stm32f4xx_can.c ****   }
 391:FWLIB/src/stm32f4xx_can.c **** 
 392:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 393:FWLIB/src/stm32f4xx_can.c ****   {
 394:FWLIB/src/stm32f4xx_can.c ****     /* 32-bit scale for the filter */
 395:FWLIB/src/stm32f4xx_can.c ****     CANx->FS1R |= filter_number_bit_pos;
 396:FWLIB/src/stm32f4xx_can.c ****     /* 32-bit identifier or First 32-bit identifier */
 397:FWLIB/src/stm32f4xx_can.c ****     CANx->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 398:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 399:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 400:FWLIB/src/stm32f4xx_can.c ****     /* 32-bit mask or Second 32-bit identifier */
 401:FWLIB/src/stm32f4xx_can.c ****     CANx->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 402:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 403:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 404:FWLIB/src/stm32f4xx_can.c ****   }
 405:FWLIB/src/stm32f4xx_can.c **** 
 406:FWLIB/src/stm32f4xx_can.c ****   /* Filter Mode */
 407:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 408:FWLIB/src/stm32f4xx_can.c ****   {
 409:FWLIB/src/stm32f4xx_can.c ****     /*Id/Mask mode for the filter*/
 410:FWLIB/src/stm32f4xx_can.c ****     CANx->FM1R &= ~(uint32_t)filter_number_bit_pos;
 411:FWLIB/src/stm32f4xx_can.c ****   }
 412:FWLIB/src/stm32f4xx_can.c ****   else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
 413:FWLIB/src/stm32f4xx_can.c ****   {
 414:FWLIB/src/stm32f4xx_can.c ****     /*Identifier list mode for the filter*/
 415:FWLIB/src/stm32f4xx_can.c ****     CANx->FM1R |= (uint32_t)filter_number_bit_pos;
 416:FWLIB/src/stm32f4xx_can.c ****   }
 417:FWLIB/src/stm32f4xx_can.c **** 
 418:FWLIB/src/stm32f4xx_can.c ****   /* Filter FIFO assignment */
 419:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 420:FWLIB/src/stm32f4xx_can.c ****   {
 421:FWLIB/src/stm32f4xx_can.c ****     /* FIFO 0 assignation for the filter */
 422:FWLIB/src/stm32f4xx_can.c ****     CANx->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 423:FWLIB/src/stm32f4xx_can.c ****   }
 424:FWLIB/src/stm32f4xx_can.c **** 
 425:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 426:FWLIB/src/stm32f4xx_can.c ****   {
 427:FWLIB/src/stm32f4xx_can.c ****     /* FIFO 1 assignation for the filter */
 428:FWLIB/src/stm32f4xx_can.c ****     CANx->FFA1R |= (uint32_t)filter_number_bit_pos;
 429:FWLIB/src/stm32f4xx_can.c ****   }
 430:FWLIB/src/stm32f4xx_can.c ****   
 431:FWLIB/src/stm32f4xx_can.c ****   /* Filter activation */
ARM GAS  /tmp/ccweFGY7.s 			page 9


 432:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 433:FWLIB/src/stm32f4xx_can.c ****   {
 434:FWLIB/src/stm32f4xx_can.c ****     CANx->FA1R |= filter_number_bit_pos;
 435:FWLIB/src/stm32f4xx_can.c ****   }
 436:FWLIB/src/stm32f4xx_can.c **** 
 437:FWLIB/src/stm32f4xx_can.c ****   /* Leave the initialisation mode for the filter */
 438:FWLIB/src/stm32f4xx_can.c ****   CANx->FMR &= ~FMR_FINIT;
 439:FWLIB/src/stm32f4xx_can.c **** }
 440:FWLIB/src/stm32f4xx_can.c **** #else
 441:FWLIB/src/stm32f4xx_can.c **** /**
 442:FWLIB/src/stm32f4xx_can.c ****   * @brief  Configures the CAN reception filter according to the specified
 443:FWLIB/src/stm32f4xx_can.c ****   *         parameters in the CAN_FilterInitStruct.
 444:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
 445:FWLIB/src/stm32f4xx_can.c ****   *         contains the configuration information.
 446:FWLIB/src/stm32f4xx_can.c ****   * @retval None
 447:FWLIB/src/stm32f4xx_can.c ****   */
 448:FWLIB/src/stm32f4xx_can.c **** void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
 449:FWLIB/src/stm32f4xx_can.c **** {
 450:FWLIB/src/stm32f4xx_can.c ****   uint32_t filter_number_bit_pos = 0;
 451:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 452:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_NUMBER(CAN_FilterInitStruct->CAN_FilterNumber));
 453:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
 454:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
 455:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
 456:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));
 457:FWLIB/src/stm32f4xx_can.c **** 
 458:FWLIB/src/stm32f4xx_can.c ****   filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 459:FWLIB/src/stm32f4xx_can.c **** 
 460:FWLIB/src/stm32f4xx_can.c ****   /* Initialisation mode for the filter */
 461:FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR |= FMR_FINIT;
 462:FWLIB/src/stm32f4xx_can.c **** 
 463:FWLIB/src/stm32f4xx_can.c ****   /* Filter Deactivation */
 464:FWLIB/src/stm32f4xx_can.c ****   CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 465:FWLIB/src/stm32f4xx_can.c **** 
 466:FWLIB/src/stm32f4xx_can.c ****   /* Filter Scale */
 467:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 468:FWLIB/src/stm32f4xx_can.c ****   {
 469:FWLIB/src/stm32f4xx_can.c ****     /* 16-bit scale for the filter */
 470:FWLIB/src/stm32f4xx_can.c ****     CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 471:FWLIB/src/stm32f4xx_can.c **** 
 472:FWLIB/src/stm32f4xx_can.c ****     /* First 16-bit identifier and First 16-bit mask */
 473:FWLIB/src/stm32f4xx_can.c ****     /* Or First 16-bit identifier and Second 16-bit identifier */
 474:FWLIB/src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 475:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 476:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 477:FWLIB/src/stm32f4xx_can.c **** 
 478:FWLIB/src/stm32f4xx_can.c ****     /* Second 16-bit identifier and Second 16-bit mask */
 479:FWLIB/src/stm32f4xx_can.c ****     /* Or Third 16-bit identifier and Fourth 16-bit identifier */
 480:FWLIB/src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 481:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 482:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 483:FWLIB/src/stm32f4xx_can.c ****   }
 484:FWLIB/src/stm32f4xx_can.c **** 
 485:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 486:FWLIB/src/stm32f4xx_can.c ****   {
 487:FWLIB/src/stm32f4xx_can.c ****     /* 32-bit scale for the filter */
 488:FWLIB/src/stm32f4xx_can.c ****     CAN1->FS1R |= filter_number_bit_pos;
ARM GAS  /tmp/ccweFGY7.s 			page 10


 489:FWLIB/src/stm32f4xx_can.c ****     /* 32-bit identifier or First 32-bit identifier */
 490:FWLIB/src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 491:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 492:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 493:FWLIB/src/stm32f4xx_can.c ****     /* 32-bit mask or Second 32-bit identifier */
 494:FWLIB/src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 495:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 496:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 497:FWLIB/src/stm32f4xx_can.c ****   }
 498:FWLIB/src/stm32f4xx_can.c **** 
 499:FWLIB/src/stm32f4xx_can.c ****   /* Filter Mode */
 500:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 501:FWLIB/src/stm32f4xx_can.c ****   {
 502:FWLIB/src/stm32f4xx_can.c ****     /*Id/Mask mode for the filter*/
 503:FWLIB/src/stm32f4xx_can.c ****     CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 504:FWLIB/src/stm32f4xx_can.c ****   }
 505:FWLIB/src/stm32f4xx_can.c ****   else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
 506:FWLIB/src/stm32f4xx_can.c ****   {
 507:FWLIB/src/stm32f4xx_can.c ****     /*Identifier list mode for the filter*/
 508:FWLIB/src/stm32f4xx_can.c ****     CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 509:FWLIB/src/stm32f4xx_can.c ****   }
 510:FWLIB/src/stm32f4xx_can.c **** 
 511:FWLIB/src/stm32f4xx_can.c ****   /* Filter FIFO assignment */
 512:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 513:FWLIB/src/stm32f4xx_can.c ****   {
 514:FWLIB/src/stm32f4xx_can.c ****     /* FIFO 0 assignation for the filter */
 515:FWLIB/src/stm32f4xx_can.c ****     CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 516:FWLIB/src/stm32f4xx_can.c ****   }
 517:FWLIB/src/stm32f4xx_can.c **** 
 518:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 519:FWLIB/src/stm32f4xx_can.c ****   {
 520:FWLIB/src/stm32f4xx_can.c ****     /* FIFO 1 assignation for the filter */
 521:FWLIB/src/stm32f4xx_can.c ****     CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 522:FWLIB/src/stm32f4xx_can.c ****   }
 523:FWLIB/src/stm32f4xx_can.c ****   
 524:FWLIB/src/stm32f4xx_can.c ****   /* Filter activation */
 525:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 526:FWLIB/src/stm32f4xx_can.c ****   {
 527:FWLIB/src/stm32f4xx_can.c ****     CAN1->FA1R |= filter_number_bit_pos;
 528:FWLIB/src/stm32f4xx_can.c ****   }
 529:FWLIB/src/stm32f4xx_can.c **** 
 530:FWLIB/src/stm32f4xx_can.c ****   /* Leave the initialisation mode for the filter */
 531:FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR &= ~FMR_FINIT;
 532:FWLIB/src/stm32f4xx_can.c **** }
 533:FWLIB/src/stm32f4xx_can.c **** #endif /* STM32F413_423xx */
 534:FWLIB/src/stm32f4xx_can.c **** 
 535:FWLIB/src/stm32f4xx_can.c **** /**
 536:FWLIB/src/stm32f4xx_can.c ****   * @brief  Fills each CAN_InitStruct member with its default value.
 537:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which ill be initialized.
 538:FWLIB/src/stm32f4xx_can.c ****   * @retval None
 539:FWLIB/src/stm32f4xx_can.c ****   */
 540:FWLIB/src/stm32f4xx_can.c **** void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
 541:FWLIB/src/stm32f4xx_can.c **** {
 542:FWLIB/src/stm32f4xx_can.c ****   /* Reset CAN init structure parameters values */
 543:FWLIB/src/stm32f4xx_can.c ****   
 544:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the time triggered communication mode */
 545:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_TTCM = DISABLE;
ARM GAS  /tmp/ccweFGY7.s 			page 11


 546:FWLIB/src/stm32f4xx_can.c ****   
 547:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the automatic bus-off management */
 548:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_ABOM = DISABLE;
 549:FWLIB/src/stm32f4xx_can.c ****   
 550:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the automatic wake-up mode */
 551:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_AWUM = DISABLE;
 552:FWLIB/src/stm32f4xx_can.c ****   
 553:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the no automatic retransmission */
 554:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_NART = DISABLE;
 555:FWLIB/src/stm32f4xx_can.c ****   
 556:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the receive FIFO locked mode */
 557:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_RFLM = DISABLE;
 558:FWLIB/src/stm32f4xx_can.c ****   
 559:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the transmit FIFO priority */
 560:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_TXFP = DISABLE;
 561:FWLIB/src/stm32f4xx_can.c ****   
 562:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the CAN_Mode member */
 563:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 564:FWLIB/src/stm32f4xx_can.c ****   
 565:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the CAN_SJW member */
 566:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 567:FWLIB/src/stm32f4xx_can.c ****   
 568:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the CAN_BS1 member */
 569:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 570:FWLIB/src/stm32f4xx_can.c ****   
 571:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the CAN_BS2 member */
 572:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 573:FWLIB/src/stm32f4xx_can.c ****   
 574:FWLIB/src/stm32f4xx_can.c ****   /* Initialize the CAN_Prescaler member */
 575:FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_Prescaler = 1;
 576:FWLIB/src/stm32f4xx_can.c **** }
 577:FWLIB/src/stm32f4xx_can.c **** 
 578:FWLIB/src/stm32f4xx_can.c **** #if defined(STM32F413_423xx)
 579:FWLIB/src/stm32f4xx_can.c **** /**
 580:FWLIB/src/stm32f4xx_can.c ****   * @brief  Select the start bank filter for slave CAN.
 581:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 3 to select the CAN peripheral.
 582:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
 583:FWLIB/src/stm32f4xx_can.c ****   * @retval None
 584:FWLIB/src/stm32f4xx_can.c ****   */
 585:FWLIB/src/stm32f4xx_can.c **** void CAN_SlaveStartBank(CAN_TypeDef* CANx, uint8_t CAN_BankNumber) 
 586:FWLIB/src/stm32f4xx_can.c **** {
 587:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 588:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
 589:FWLIB/src/stm32f4xx_can.c ****   
 590:FWLIB/src/stm32f4xx_can.c ****   /* Enter Initialisation mode for the filter */
 591:FWLIB/src/stm32f4xx_can.c ****   CANx->FMR |= FMR_FINIT;
 592:FWLIB/src/stm32f4xx_can.c ****   
 593:FWLIB/src/stm32f4xx_can.c ****   /* Select the start slave bank */
 594:FWLIB/src/stm32f4xx_can.c ****   CANx->FMR &= (uint32_t)0xFFFFC0F1 ;
 595:FWLIB/src/stm32f4xx_can.c ****   CANx->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 596:FWLIB/src/stm32f4xx_can.c ****   
 597:FWLIB/src/stm32f4xx_can.c ****   /* Leave Initialisation mode for the filter */
 598:FWLIB/src/stm32f4xx_can.c ****   CANx->FMR &= ~FMR_FINIT;
 599:FWLIB/src/stm32f4xx_can.c **** }
 600:FWLIB/src/stm32f4xx_can.c **** #else
 601:FWLIB/src/stm32f4xx_can.c **** /**
 602:FWLIB/src/stm32f4xx_can.c ****   * @brief  Select the start bank filter for slave CAN.
ARM GAS  /tmp/ccweFGY7.s 			page 12


 603:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
 604:FWLIB/src/stm32f4xx_can.c ****   * @retval None
 605:FWLIB/src/stm32f4xx_can.c ****   */
 606:FWLIB/src/stm32f4xx_can.c **** void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
 607:FWLIB/src/stm32f4xx_can.c **** {
 608:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 609:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
 610:FWLIB/src/stm32f4xx_can.c ****   
 611:FWLIB/src/stm32f4xx_can.c ****   /* Enter Initialisation mode for the filter */
 612:FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR |= FMR_FINIT;
 613:FWLIB/src/stm32f4xx_can.c ****   
 614:FWLIB/src/stm32f4xx_can.c ****   /* Select the start slave bank */
 615:FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 616:FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 617:FWLIB/src/stm32f4xx_can.c ****   
 618:FWLIB/src/stm32f4xx_can.c ****   /* Leave Initialisation mode for the filter */
 619:FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR &= ~FMR_FINIT;
 620:FWLIB/src/stm32f4xx_can.c **** }
 621:FWLIB/src/stm32f4xx_can.c **** #endif /* STM32F413_423xx */
 622:FWLIB/src/stm32f4xx_can.c **** /**
 623:FWLIB/src/stm32f4xx_can.c ****   * @brief  Enables or disables the DBG Freeze for CAN.
 624:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 625:FWLIB/src/stm32f4xx_can.c ****   * @param  NewState: new state of the CAN peripheral. 
 626:FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be: ENABLE (CAN reception/transmission is frozen
 627:FWLIB/src/stm32f4xx_can.c ****   *          during debug. Reception FIFOs can still be accessed/controlled normally) 
 628:FWLIB/src/stm32f4xx_can.c ****   *          or DISABLE (CAN is working during debug).
 629:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
 630:FWLIB/src/stm32f4xx_can.c ****   * @retval None
 631:FWLIB/src/stm32f4xx_can.c ****   */
 632:FWLIB/src/stm32f4xx_can.c **** void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
 633:FWLIB/src/stm32f4xx_can.c **** {
 634:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 635:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 636:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 637:FWLIB/src/stm32f4xx_can.c ****   
 638:FWLIB/src/stm32f4xx_can.c ****   if (NewState != DISABLE)
 639:FWLIB/src/stm32f4xx_can.c ****   {
 640:FWLIB/src/stm32f4xx_can.c ****     /* Enable Debug Freeze  */
 641:FWLIB/src/stm32f4xx_can.c ****     CANx->MCR |= MCR_DBF;
 642:FWLIB/src/stm32f4xx_can.c ****   }
 643:FWLIB/src/stm32f4xx_can.c ****   else
 644:FWLIB/src/stm32f4xx_can.c ****   {
 645:FWLIB/src/stm32f4xx_can.c ****     /* Disable Debug Freeze */
 646:FWLIB/src/stm32f4xx_can.c ****     CANx->MCR &= ~MCR_DBF;
 647:FWLIB/src/stm32f4xx_can.c ****   }
 648:FWLIB/src/stm32f4xx_can.c **** }
 649:FWLIB/src/stm32f4xx_can.c **** 
 650:FWLIB/src/stm32f4xx_can.c **** 
 651:FWLIB/src/stm32f4xx_can.c **** /**
 652:FWLIB/src/stm32f4xx_can.c ****   * @brief  Enables or disables the CAN Time TriggerOperation communication mode.
 653:FWLIB/src/stm32f4xx_can.c ****   * @note   DLC must be programmed as 8 in order Time Stamp (2 bytes) to be 
 654:FWLIB/src/stm32f4xx_can.c ****   *         sent over the CAN bus.  
 655:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 656:FWLIB/src/stm32f4xx_can.c ****   * @param  NewState: Mode new state. This parameter can be: ENABLE or DISABLE.
 657:FWLIB/src/stm32f4xx_can.c ****   *         When enabled, Time stamp (TIME[15:0]) value is  sent in the last two
 658:FWLIB/src/stm32f4xx_can.c ****   *         data bytes of the 8-byte message: TIME[7:0] in data byte 6 and TIME[15:8] 
 659:FWLIB/src/stm32f4xx_can.c ****   *         in data byte 7.
ARM GAS  /tmp/ccweFGY7.s 			page 13


 660:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
 661:FWLIB/src/stm32f4xx_can.c ****   * @retval None
 662:FWLIB/src/stm32f4xx_can.c ****   */
 663:FWLIB/src/stm32f4xx_can.c **** void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
 664:FWLIB/src/stm32f4xx_can.c **** {
 665:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 666:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 667:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 668:FWLIB/src/stm32f4xx_can.c ****   if (NewState != DISABLE)
 669:FWLIB/src/stm32f4xx_can.c ****   {
 670:FWLIB/src/stm32f4xx_can.c ****     /* Enable the TTCM mode */
 671:FWLIB/src/stm32f4xx_can.c ****     CANx->MCR |= CAN_MCR_TTCM;
 672:FWLIB/src/stm32f4xx_can.c **** 
 673:FWLIB/src/stm32f4xx_can.c ****     /* Set TGT bits */
 674:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 675:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 676:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 677:FWLIB/src/stm32f4xx_can.c ****   }
 678:FWLIB/src/stm32f4xx_can.c ****   else
 679:FWLIB/src/stm32f4xx_can.c ****   {
 680:FWLIB/src/stm32f4xx_can.c ****     /* Disable the TTCM mode */
 681:FWLIB/src/stm32f4xx_can.c ****     CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 682:FWLIB/src/stm32f4xx_can.c **** 
 683:FWLIB/src/stm32f4xx_can.c ****     /* Reset TGT bits */
 684:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 685:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 686:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 687:FWLIB/src/stm32f4xx_can.c ****   }
 688:FWLIB/src/stm32f4xx_can.c **** }
 689:FWLIB/src/stm32f4xx_can.c **** /**
 690:FWLIB/src/stm32f4xx_can.c ****   * @}
 691:FWLIB/src/stm32f4xx_can.c ****   */
 692:FWLIB/src/stm32f4xx_can.c **** 
 693:FWLIB/src/stm32f4xx_can.c **** 
 694:FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Group2 CAN Frames Transmission functions
 695:FWLIB/src/stm32f4xx_can.c ****  *  @brief    CAN Frames Transmission functions 
 696:FWLIB/src/stm32f4xx_can.c ****  *
 697:FWLIB/src/stm32f4xx_can.c **** @verbatim    
 698:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
 699:FWLIB/src/stm32f4xx_can.c ****                 ##### CAN Frames Transmission functions #####
 700:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================  
 701:FWLIB/src/stm32f4xx_can.c ****     [..] This section provides functions allowing to 
 702:FWLIB/src/stm32f4xx_can.c ****       (+) Initiate and transmit a CAN frame message (if there is an empty mailbox).
 703:FWLIB/src/stm32f4xx_can.c ****       (+) Check the transmission status of a CAN Frame
 704:FWLIB/src/stm32f4xx_can.c ****       (+) Cancel a transmit request
 705:FWLIB/src/stm32f4xx_can.c ****    
 706:FWLIB/src/stm32f4xx_can.c **** @endverbatim
 707:FWLIB/src/stm32f4xx_can.c ****   * @{
 708:FWLIB/src/stm32f4xx_can.c ****   */
 709:FWLIB/src/stm32f4xx_can.c **** 
 710:FWLIB/src/stm32f4xx_can.c **** /**
 711:FWLIB/src/stm32f4xx_can.c ****   * @brief  Initiates and transmits a CAN frame message.
 712:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 713:FWLIB/src/stm32f4xx_can.c ****   * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
 714:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
 715:FWLIB/src/stm32f4xx_can.c ****   * @retval The number of the mailbox that is used for transmission or
 716:FWLIB/src/stm32f4xx_can.c ****   *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
ARM GAS  /tmp/ccweFGY7.s 			page 14


 717:FWLIB/src/stm32f4xx_can.c ****   */
 718:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
 719:FWLIB/src/stm32f4xx_can.c **** {
 720:FWLIB/src/stm32f4xx_can.c ****   uint8_t transmit_mailbox = 0;
 721:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 722:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 723:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
 724:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_RTR(TxMessage->RTR));
 725:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_DLC(TxMessage->DLC));
 726:FWLIB/src/stm32f4xx_can.c **** 
 727:FWLIB/src/stm32f4xx_can.c ****   /* Select one empty transmit mailbox */
 728:FWLIB/src/stm32f4xx_can.c ****   if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 729:FWLIB/src/stm32f4xx_can.c ****   {
 730:FWLIB/src/stm32f4xx_can.c ****     transmit_mailbox = 0;
 731:FWLIB/src/stm32f4xx_can.c ****   }
 732:FWLIB/src/stm32f4xx_can.c ****   else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 733:FWLIB/src/stm32f4xx_can.c ****   {
 734:FWLIB/src/stm32f4xx_can.c ****     transmit_mailbox = 1;
 735:FWLIB/src/stm32f4xx_can.c ****   }
 736:FWLIB/src/stm32f4xx_can.c ****   else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 737:FWLIB/src/stm32f4xx_can.c ****   {
 738:FWLIB/src/stm32f4xx_can.c ****     transmit_mailbox = 2;
 739:FWLIB/src/stm32f4xx_can.c ****   }
 740:FWLIB/src/stm32f4xx_can.c ****   else
 741:FWLIB/src/stm32f4xx_can.c ****   {
 742:FWLIB/src/stm32f4xx_can.c ****     transmit_mailbox = CAN_TxStatus_NoMailBox;
 743:FWLIB/src/stm32f4xx_can.c ****   }
 744:FWLIB/src/stm32f4xx_can.c **** 
 745:FWLIB/src/stm32f4xx_can.c ****   if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 746:FWLIB/src/stm32f4xx_can.c ****   {
 747:FWLIB/src/stm32f4xx_can.c ****     /* Set up the Id */
 748:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 749:FWLIB/src/stm32f4xx_can.c ****     if (TxMessage->IDE == CAN_Id_Standard)
 750:FWLIB/src/stm32f4xx_can.c ****     {
 751:FWLIB/src/stm32f4xx_can.c ****       assert_param(IS_CAN_STDID(TxMessage->StdId));  
 752:FWLIB/src/stm32f4xx_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 753:FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 754:FWLIB/src/stm32f4xx_can.c ****     }
 755:FWLIB/src/stm32f4xx_can.c ****     else
 756:FWLIB/src/stm32f4xx_can.c ****     {
 757:FWLIB/src/stm32f4xx_can.c ****       assert_param(IS_CAN_EXTID(TxMessage->ExtId));
 758:FWLIB/src/stm32f4xx_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 759:FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->IDE | \
 760:FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 761:FWLIB/src/stm32f4xx_can.c ****     }
 762:FWLIB/src/stm32f4xx_can.c ****     
 763:FWLIB/src/stm32f4xx_can.c ****     /* Set up the DLC */
 764:FWLIB/src/stm32f4xx_can.c ****     TxMessage->DLC &= (uint8_t)0x0000000F;
 765:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 766:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 767:FWLIB/src/stm32f4xx_can.c **** 
 768:FWLIB/src/stm32f4xx_can.c ****     /* Set up the data field */
 769:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 770:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 771:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 772:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[0]));
 773:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
ARM GAS  /tmp/ccweFGY7.s 			page 15


 774:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 775:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 776:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[4]));
 777:FWLIB/src/stm32f4xx_can.c ****     /* Request transmission */
 778:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 779:FWLIB/src/stm32f4xx_can.c ****   }
 780:FWLIB/src/stm32f4xx_can.c ****   return transmit_mailbox;
 781:FWLIB/src/stm32f4xx_can.c **** }
 782:FWLIB/src/stm32f4xx_can.c **** 
 783:FWLIB/src/stm32f4xx_can.c **** /**
 784:FWLIB/src/stm32f4xx_can.c ****   * @brief  Checks the transmission status of a CAN Frame.
 785:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 786:FWLIB/src/stm32f4xx_can.c ****   * @param  TransmitMailbox: the number of the mailbox that is used for transmission.
 787:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
 788:FWLIB/src/stm32f4xx_can.c ****   * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, 
 789:FWLIB/src/stm32f4xx_can.c ****   *         CAN_TxStatus_Failed in an other case.
 790:FWLIB/src/stm32f4xx_can.c ****   */
 791:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
 792:FWLIB/src/stm32f4xx_can.c **** {
 793:FWLIB/src/stm32f4xx_can.c ****   uint32_t state = 0;
 794:FWLIB/src/stm32f4xx_can.c **** 
 795:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 796:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 797:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 798:FWLIB/src/stm32f4xx_can.c ****  
 799:FWLIB/src/stm32f4xx_can.c ****   switch (TransmitMailbox)
 800:FWLIB/src/stm32f4xx_can.c ****   {
 801:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_0): 
 802:FWLIB/src/stm32f4xx_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 803:FWLIB/src/stm32f4xx_can.c ****       break;
 804:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_1): 
 805:FWLIB/src/stm32f4xx_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 806:FWLIB/src/stm32f4xx_can.c ****       break;
 807:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_2): 
 808:FWLIB/src/stm32f4xx_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 809:FWLIB/src/stm32f4xx_can.c ****       break;
 810:FWLIB/src/stm32f4xx_can.c ****     default:
 811:FWLIB/src/stm32f4xx_can.c ****       state = CAN_TxStatus_Failed;
 812:FWLIB/src/stm32f4xx_can.c ****       break;
 813:FWLIB/src/stm32f4xx_can.c ****   }
 814:FWLIB/src/stm32f4xx_can.c ****   switch (state)
 815:FWLIB/src/stm32f4xx_can.c ****   {
 816:FWLIB/src/stm32f4xx_can.c ****       /* transmit pending  */
 817:FWLIB/src/stm32f4xx_can.c ****     case (0x0): state = CAN_TxStatus_Pending;
 818:FWLIB/src/stm32f4xx_can.c ****       break;
 819:FWLIB/src/stm32f4xx_can.c ****       /* transmit failed  */
 820:FWLIB/src/stm32f4xx_can.c ****      case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 821:FWLIB/src/stm32f4xx_can.c ****       break;
 822:FWLIB/src/stm32f4xx_can.c ****      case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
 823:FWLIB/src/stm32f4xx_can.c ****       break;
 824:FWLIB/src/stm32f4xx_can.c ****      case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
 825:FWLIB/src/stm32f4xx_can.c ****       break;
 826:FWLIB/src/stm32f4xx_can.c ****       /* transmit succeeded  */
 827:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
 828:FWLIB/src/stm32f4xx_can.c ****       break;
 829:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 830:FWLIB/src/stm32f4xx_can.c ****       break;
ARM GAS  /tmp/ccweFGY7.s 			page 16


 831:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 832:FWLIB/src/stm32f4xx_can.c ****       break;
 833:FWLIB/src/stm32f4xx_can.c ****     default: state = CAN_TxStatus_Failed;
 834:FWLIB/src/stm32f4xx_can.c ****       break;
 835:FWLIB/src/stm32f4xx_can.c ****   }
 836:FWLIB/src/stm32f4xx_can.c ****   return (uint8_t) state;
 837:FWLIB/src/stm32f4xx_can.c **** }
 838:FWLIB/src/stm32f4xx_can.c **** 
 839:FWLIB/src/stm32f4xx_can.c **** /**
 840:FWLIB/src/stm32f4xx_can.c ****   * @brief  Cancels a transmit request.
 841:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 842:FWLIB/src/stm32f4xx_can.c ****   * @param  Mailbox: Mailbox number.
 843:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
 844:FWLIB/src/stm32f4xx_can.c ****   * @retval None
 845:FWLIB/src/stm32f4xx_can.c ****   */
 846:FWLIB/src/stm32f4xx_can.c **** void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
 847:FWLIB/src/stm32f4xx_can.c **** {
 848:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 849:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 850:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
 851:FWLIB/src/stm32f4xx_can.c ****   /* abort transmission */
 852:FWLIB/src/stm32f4xx_can.c ****   switch (Mailbox)
 853:FWLIB/src/stm32f4xx_can.c ****   {
 854:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 855:FWLIB/src/stm32f4xx_can.c ****       break;
 856:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 857:FWLIB/src/stm32f4xx_can.c ****       break;
 858:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 859:FWLIB/src/stm32f4xx_can.c ****       break;
 860:FWLIB/src/stm32f4xx_can.c ****     default:
 861:FWLIB/src/stm32f4xx_can.c ****       break;
 862:FWLIB/src/stm32f4xx_can.c ****   }
 863:FWLIB/src/stm32f4xx_can.c **** }
 864:FWLIB/src/stm32f4xx_can.c **** /**
 865:FWLIB/src/stm32f4xx_can.c ****   * @}
 866:FWLIB/src/stm32f4xx_can.c ****   */
 867:FWLIB/src/stm32f4xx_can.c **** 
 868:FWLIB/src/stm32f4xx_can.c **** 
 869:FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Group3 CAN Frames Reception functions
 870:FWLIB/src/stm32f4xx_can.c ****  *  @brief    CAN Frames Reception functions 
 871:FWLIB/src/stm32f4xx_can.c ****  *
 872:FWLIB/src/stm32f4xx_can.c **** @verbatim    
 873:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
 874:FWLIB/src/stm32f4xx_can.c ****                 ##### CAN Frames Reception functions #####
 875:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================  
 876:FWLIB/src/stm32f4xx_can.c ****     [..] This section provides functions allowing to 
 877:FWLIB/src/stm32f4xx_can.c ****       (+) Receive a correct CAN frame
 878:FWLIB/src/stm32f4xx_can.c ****       (+) Release a specified receive FIFO (2 FIFOs are available)
 879:FWLIB/src/stm32f4xx_can.c ****       (+) Return the number of the pending received CAN frames
 880:FWLIB/src/stm32f4xx_can.c ****    
 881:FWLIB/src/stm32f4xx_can.c **** @endverbatim
 882:FWLIB/src/stm32f4xx_can.c ****   * @{
 883:FWLIB/src/stm32f4xx_can.c ****   */
 884:FWLIB/src/stm32f4xx_can.c **** 
 885:FWLIB/src/stm32f4xx_can.c **** /**
 886:FWLIB/src/stm32f4xx_can.c ****   * @brief  Receives a correct CAN frame.
 887:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
ARM GAS  /tmp/ccweFGY7.s 			page 17


 888:FWLIB/src/stm32f4xx_can.c ****   * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
 889:FWLIB/src/stm32f4xx_can.c ****   * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
 890:FWLIB/src/stm32f4xx_can.c ****   *         CAN DLC, CAN data and FMI number.
 891:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
 892:FWLIB/src/stm32f4xx_can.c ****   * @retval None
 893:FWLIB/src/stm32f4xx_can.c ****   */
 894:FWLIB/src/stm32f4xx_can.c **** void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
 895:FWLIB/src/stm32f4xx_can.c **** {
 896:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 897:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 898:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 899:FWLIB/src/stm32f4xx_can.c ****   /* Get the Id */
 900:FWLIB/src/stm32f4xx_can.c ****   RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 901:FWLIB/src/stm32f4xx_can.c ****   if (RxMessage->IDE == CAN_Id_Standard)
 902:FWLIB/src/stm32f4xx_can.c ****   {
 903:FWLIB/src/stm32f4xx_can.c ****     RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 904:FWLIB/src/stm32f4xx_can.c ****   }
 905:FWLIB/src/stm32f4xx_can.c ****   else
 906:FWLIB/src/stm32f4xx_can.c ****   {
 907:FWLIB/src/stm32f4xx_can.c ****     RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 908:FWLIB/src/stm32f4xx_can.c ****   }
 909:FWLIB/src/stm32f4xx_can.c ****   
 910:FWLIB/src/stm32f4xx_can.c ****   RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 911:FWLIB/src/stm32f4xx_can.c ****   /* Get the DLC */
 912:FWLIB/src/stm32f4xx_can.c ****   RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 913:FWLIB/src/stm32f4xx_can.c ****   /* Get the FMI */
 914:FWLIB/src/stm32f4xx_can.c ****   RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 915:FWLIB/src/stm32f4xx_can.c ****   /* Get the data field */
 916:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 917:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 918:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 919:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 920:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 921:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 922:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 923:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 924:FWLIB/src/stm32f4xx_can.c ****   /* Release the FIFO */
 925:FWLIB/src/stm32f4xx_can.c ****   /* Release FIFO0 */
 926:FWLIB/src/stm32f4xx_can.c ****   if (FIFONumber == CAN_FIFO0)
 927:FWLIB/src/stm32f4xx_can.c ****   {
 928:FWLIB/src/stm32f4xx_can.c ****     CANx->RF0R |= CAN_RF0R_RFOM0;
 929:FWLIB/src/stm32f4xx_can.c ****   }
 930:FWLIB/src/stm32f4xx_can.c ****   /* Release FIFO1 */
 931:FWLIB/src/stm32f4xx_can.c ****   else /* FIFONumber == CAN_FIFO1 */
 932:FWLIB/src/stm32f4xx_can.c ****   {
 933:FWLIB/src/stm32f4xx_can.c ****     CANx->RF1R |= CAN_RF1R_RFOM1;
 934:FWLIB/src/stm32f4xx_can.c ****   }
 935:FWLIB/src/stm32f4xx_can.c **** }
 936:FWLIB/src/stm32f4xx_can.c **** 
 937:FWLIB/src/stm32f4xx_can.c **** /**
 938:FWLIB/src/stm32f4xx_can.c ****   * @brief  Releases the specified receive FIFO.
 939:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 940:FWLIB/src/stm32f4xx_can.c ****   * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
 941:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
 942:FWLIB/src/stm32f4xx_can.c ****   * @retval None
 943:FWLIB/src/stm32f4xx_can.c ****   */
 944:FWLIB/src/stm32f4xx_can.c **** void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
ARM GAS  /tmp/ccweFGY7.s 			page 18


 945:FWLIB/src/stm32f4xx_can.c **** {
 946:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 947:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 948:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 949:FWLIB/src/stm32f4xx_can.c ****   /* Release FIFO0 */
 950:FWLIB/src/stm32f4xx_can.c ****   if (FIFONumber == CAN_FIFO0)
 951:FWLIB/src/stm32f4xx_can.c ****   {
 952:FWLIB/src/stm32f4xx_can.c ****     CANx->RF0R |= CAN_RF0R_RFOM0;
 953:FWLIB/src/stm32f4xx_can.c ****   }
 954:FWLIB/src/stm32f4xx_can.c ****   /* Release FIFO1 */
 955:FWLIB/src/stm32f4xx_can.c ****   else /* FIFONumber == CAN_FIFO1 */
 956:FWLIB/src/stm32f4xx_can.c ****   {
 957:FWLIB/src/stm32f4xx_can.c ****     CANx->RF1R |= CAN_RF1R_RFOM1;
 958:FWLIB/src/stm32f4xx_can.c ****   }
 959:FWLIB/src/stm32f4xx_can.c **** }
 960:FWLIB/src/stm32f4xx_can.c **** 
 961:FWLIB/src/stm32f4xx_can.c **** /**
 962:FWLIB/src/stm32f4xx_can.c ****   * @brief  Returns the number of pending received messages.
 963:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 964:FWLIB/src/stm32f4xx_can.c ****   * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
 965:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
 966:FWLIB/src/stm32f4xx_can.c ****   * @retval NbMessage : which is the number of pending message.
 967:FWLIB/src/stm32f4xx_can.c ****   */
 968:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
 969:FWLIB/src/stm32f4xx_can.c **** {
 970:FWLIB/src/stm32f4xx_can.c ****   uint8_t message_pending=0;
 971:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 972:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 973:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 974:FWLIB/src/stm32f4xx_can.c ****   if (FIFONumber == CAN_FIFO0)
 975:FWLIB/src/stm32f4xx_can.c ****   {
 976:FWLIB/src/stm32f4xx_can.c ****     message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 977:FWLIB/src/stm32f4xx_can.c ****   }
 978:FWLIB/src/stm32f4xx_can.c ****   else if (FIFONumber == CAN_FIFO1)
 979:FWLIB/src/stm32f4xx_can.c ****   {
 980:FWLIB/src/stm32f4xx_can.c ****     message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 981:FWLIB/src/stm32f4xx_can.c ****   }
 982:FWLIB/src/stm32f4xx_can.c ****   else
 983:FWLIB/src/stm32f4xx_can.c ****   {
 984:FWLIB/src/stm32f4xx_can.c ****     message_pending = 0;
 985:FWLIB/src/stm32f4xx_can.c ****   }
 986:FWLIB/src/stm32f4xx_can.c ****   return message_pending;
 987:FWLIB/src/stm32f4xx_can.c **** }
 988:FWLIB/src/stm32f4xx_can.c **** /**
 989:FWLIB/src/stm32f4xx_can.c ****   * @}
 990:FWLIB/src/stm32f4xx_can.c ****   */
 991:FWLIB/src/stm32f4xx_can.c **** 
 992:FWLIB/src/stm32f4xx_can.c **** 
 993:FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Group4 CAN Operation modes functions
 994:FWLIB/src/stm32f4xx_can.c ****  *  @brief    CAN Operation modes functions 
 995:FWLIB/src/stm32f4xx_can.c ****  *
 996:FWLIB/src/stm32f4xx_can.c **** @verbatim    
 997:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
 998:FWLIB/src/stm32f4xx_can.c ****                     ##### CAN Operation modes functions #####
 999:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================  
1000:FWLIB/src/stm32f4xx_can.c ****     [..] This section provides functions allowing to select the CAN Operation modes
1001:FWLIB/src/stm32f4xx_can.c ****       (+) sleep mode
ARM GAS  /tmp/ccweFGY7.s 			page 19


1002:FWLIB/src/stm32f4xx_can.c ****       (+) normal mode 
1003:FWLIB/src/stm32f4xx_can.c ****       (+) initialization mode
1004:FWLIB/src/stm32f4xx_can.c ****    
1005:FWLIB/src/stm32f4xx_can.c **** @endverbatim
1006:FWLIB/src/stm32f4xx_can.c ****   * @{
1007:FWLIB/src/stm32f4xx_can.c ****   */
1008:FWLIB/src/stm32f4xx_can.c ****   
1009:FWLIB/src/stm32f4xx_can.c ****   
1010:FWLIB/src/stm32f4xx_can.c **** /**
1011:FWLIB/src/stm32f4xx_can.c ****   * @brief  Selects the CAN Operation mode.
1012:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_OperatingMode: CAN Operating Mode.
1013:FWLIB/src/stm32f4xx_can.c ****   *         This parameter can be one of @ref CAN_OperatingMode_TypeDef enumeration.
1014:FWLIB/src/stm32f4xx_can.c ****   * @retval status of the requested mode which can be 
1015:FWLIB/src/stm32f4xx_can.c ****   *         - CAN_ModeStatus_Failed:  CAN failed entering the specific mode 
1016:FWLIB/src/stm32f4xx_can.c ****   *         - CAN_ModeStatus_Success: CAN Succeed entering the specific mode 
1017:FWLIB/src/stm32f4xx_can.c ****   */
1018:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
1019:FWLIB/src/stm32f4xx_can.c **** {
1020:FWLIB/src/stm32f4xx_can.c ****   uint8_t status = CAN_ModeStatus_Failed;
1021:FWLIB/src/stm32f4xx_can.c ****   
1022:FWLIB/src/stm32f4xx_can.c ****   /* Timeout for INAK or also for SLAK bits*/
1023:FWLIB/src/stm32f4xx_can.c ****   uint32_t timeout = INAK_TIMEOUT; 
1024:FWLIB/src/stm32f4xx_can.c **** 
1025:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1026:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1027:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));
1028:FWLIB/src/stm32f4xx_can.c **** 
1029:FWLIB/src/stm32f4xx_can.c ****   if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
1030:FWLIB/src/stm32f4xx_can.c ****   {
1031:FWLIB/src/stm32f4xx_can.c ****     /* Request initialisation */
1032:FWLIB/src/stm32f4xx_can.c ****     CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
1033:FWLIB/src/stm32f4xx_can.c **** 
1034:FWLIB/src/stm32f4xx_can.c ****     /* Wait the acknowledge */
1035:FWLIB/src/stm32f4xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
1036:FWLIB/src/stm32f4xx_can.c ****     {
1037:FWLIB/src/stm32f4xx_can.c ****       timeout--;
1038:FWLIB/src/stm32f4xx_can.c ****     }
1039:FWLIB/src/stm32f4xx_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
1040:FWLIB/src/stm32f4xx_can.c ****     {
1041:FWLIB/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Failed;
1042:FWLIB/src/stm32f4xx_can.c ****     }
1043:FWLIB/src/stm32f4xx_can.c ****     else
1044:FWLIB/src/stm32f4xx_can.c ****     {
1045:FWLIB/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Success;
1046:FWLIB/src/stm32f4xx_can.c ****     }
1047:FWLIB/src/stm32f4xx_can.c ****   }
1048:FWLIB/src/stm32f4xx_can.c ****   else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
1049:FWLIB/src/stm32f4xx_can.c ****   {
1050:FWLIB/src/stm32f4xx_can.c ****     /* Request leave initialisation and sleep mode  and enter Normal mode */
1051:FWLIB/src/stm32f4xx_can.c ****     CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
1052:FWLIB/src/stm32f4xx_can.c **** 
1053:FWLIB/src/stm32f4xx_can.c ****     /* Wait the acknowledge */
1054:FWLIB/src/stm32f4xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
1055:FWLIB/src/stm32f4xx_can.c ****     {
1056:FWLIB/src/stm32f4xx_can.c ****       timeout--;
1057:FWLIB/src/stm32f4xx_can.c ****     }
1058:FWLIB/src/stm32f4xx_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != 0)
ARM GAS  /tmp/ccweFGY7.s 			page 20


1059:FWLIB/src/stm32f4xx_can.c ****     {
1060:FWLIB/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Failed;
1061:FWLIB/src/stm32f4xx_can.c ****     }
1062:FWLIB/src/stm32f4xx_can.c ****     else
1063:FWLIB/src/stm32f4xx_can.c ****     {
1064:FWLIB/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Success;
1065:FWLIB/src/stm32f4xx_can.c ****     }
1066:FWLIB/src/stm32f4xx_can.c ****   }
1067:FWLIB/src/stm32f4xx_can.c ****   else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
1068:FWLIB/src/stm32f4xx_can.c ****   {
1069:FWLIB/src/stm32f4xx_can.c ****     /* Request Sleep mode */
1070:FWLIB/src/stm32f4xx_can.c ****     CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
1071:FWLIB/src/stm32f4xx_can.c **** 
1072:FWLIB/src/stm32f4xx_can.c ****     /* Wait the acknowledge */
1073:FWLIB/src/stm32f4xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
1074:FWLIB/src/stm32f4xx_can.c ****     {
1075:FWLIB/src/stm32f4xx_can.c ****       timeout--;
1076:FWLIB/src/stm32f4xx_can.c ****     }
1077:FWLIB/src/stm32f4xx_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
1078:FWLIB/src/stm32f4xx_can.c ****     {
1079:FWLIB/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Failed;
1080:FWLIB/src/stm32f4xx_can.c ****     }
1081:FWLIB/src/stm32f4xx_can.c ****     else
1082:FWLIB/src/stm32f4xx_can.c ****     {
1083:FWLIB/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Success;
1084:FWLIB/src/stm32f4xx_can.c ****     }
1085:FWLIB/src/stm32f4xx_can.c ****   }
1086:FWLIB/src/stm32f4xx_can.c ****   else
1087:FWLIB/src/stm32f4xx_can.c ****   {
1088:FWLIB/src/stm32f4xx_can.c ****     status = CAN_ModeStatus_Failed;
1089:FWLIB/src/stm32f4xx_can.c ****   }
1090:FWLIB/src/stm32f4xx_can.c **** 
1091:FWLIB/src/stm32f4xx_can.c ****   return  (uint8_t) status;
1092:FWLIB/src/stm32f4xx_can.c **** }
1093:FWLIB/src/stm32f4xx_can.c **** 
1094:FWLIB/src/stm32f4xx_can.c **** /**
1095:FWLIB/src/stm32f4xx_can.c ****   * @brief  Enters the Sleep (low power) mode.
1096:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1097:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
1098:FWLIB/src/stm32f4xx_can.c ****   * @retval CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed otherwise.
1099:FWLIB/src/stm32f4xx_can.c ****   */
1100:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_Sleep(CAN_TypeDef* CANx)
1101:FWLIB/src/stm32f4xx_can.c **** {
1102:FWLIB/src/stm32f4xx_can.c ****   uint8_t sleepstatus = CAN_Sleep_Failed;
1103:FWLIB/src/stm32f4xx_can.c ****   
1104:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1105:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1106:FWLIB/src/stm32f4xx_can.c ****     
1107:FWLIB/src/stm32f4xx_can.c ****   /* Request Sleep mode */
1108:FWLIB/src/stm32f4xx_can.c ****    CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
1109:FWLIB/src/stm32f4xx_can.c ****    
1110:FWLIB/src/stm32f4xx_can.c ****   /* Sleep mode status */
1111:FWLIB/src/stm32f4xx_can.c ****   if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
1112:FWLIB/src/stm32f4xx_can.c ****   {
1113:FWLIB/src/stm32f4xx_can.c ****     /* Sleep mode not entered */
1114:FWLIB/src/stm32f4xx_can.c ****     sleepstatus =  CAN_Sleep_Ok;
1115:FWLIB/src/stm32f4xx_can.c ****   }
ARM GAS  /tmp/ccweFGY7.s 			page 21


1116:FWLIB/src/stm32f4xx_can.c ****   /* return sleep mode status */
1117:FWLIB/src/stm32f4xx_can.c ****    return (uint8_t)sleepstatus;
1118:FWLIB/src/stm32f4xx_can.c **** }
1119:FWLIB/src/stm32f4xx_can.c **** 
1120:FWLIB/src/stm32f4xx_can.c **** /**
1121:FWLIB/src/stm32f4xx_can.c ****   * @brief  Wakes up the CAN peripheral from sleep mode .
1122:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1123:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
1124:FWLIB/src/stm32f4xx_can.c ****   * @retval CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed otherwise.
1125:FWLIB/src/stm32f4xx_can.c ****   */
1126:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
1127:FWLIB/src/stm32f4xx_can.c **** {
1128:FWLIB/src/stm32f4xx_can.c ****   uint32_t wait_slak = SLAK_TIMEOUT;
1129:FWLIB/src/stm32f4xx_can.c ****   uint8_t wakeupstatus = CAN_WakeUp_Failed;
1130:FWLIB/src/stm32f4xx_can.c ****   
1131:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1132:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1133:FWLIB/src/stm32f4xx_can.c ****     
1134:FWLIB/src/stm32f4xx_can.c ****   /* Wake up request */
1135:FWLIB/src/stm32f4xx_can.c ****   CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
1136:FWLIB/src/stm32f4xx_can.c ****     
1137:FWLIB/src/stm32f4xx_can.c ****   /* Sleep mode status */
1138:FWLIB/src/stm32f4xx_can.c ****   while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
1139:FWLIB/src/stm32f4xx_can.c ****   {
1140:FWLIB/src/stm32f4xx_can.c ****    wait_slak--;
1141:FWLIB/src/stm32f4xx_can.c ****   }
1142:FWLIB/src/stm32f4xx_can.c ****   if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
1143:FWLIB/src/stm32f4xx_can.c ****   {
1144:FWLIB/src/stm32f4xx_can.c ****    /* wake up done : Sleep mode exited */
1145:FWLIB/src/stm32f4xx_can.c ****     wakeupstatus = CAN_WakeUp_Ok;
1146:FWLIB/src/stm32f4xx_can.c ****   }
1147:FWLIB/src/stm32f4xx_can.c ****   /* return wakeup status */
1148:FWLIB/src/stm32f4xx_can.c ****   return (uint8_t)wakeupstatus;
1149:FWLIB/src/stm32f4xx_can.c **** }
1150:FWLIB/src/stm32f4xx_can.c **** /**
1151:FWLIB/src/stm32f4xx_can.c ****   * @}
1152:FWLIB/src/stm32f4xx_can.c ****   */
1153:FWLIB/src/stm32f4xx_can.c **** 
1154:FWLIB/src/stm32f4xx_can.c **** 
1155:FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Group5 CAN Bus Error management functions
1156:FWLIB/src/stm32f4xx_can.c ****  *  @brief    CAN Bus Error management functions 
1157:FWLIB/src/stm32f4xx_can.c ****  *
1158:FWLIB/src/stm32f4xx_can.c **** @verbatim    
1159:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
1160:FWLIB/src/stm32f4xx_can.c ****                 ##### CAN Bus Error management functions #####
1161:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================  
1162:FWLIB/src/stm32f4xx_can.c ****     [..] This section provides functions allowing to 
1163:FWLIB/src/stm32f4xx_can.c ****       (+) Return the CANx's last error code (LEC)
1164:FWLIB/src/stm32f4xx_can.c ****       (+) Return the CANx Receive Error Counter (REC)
1165:FWLIB/src/stm32f4xx_can.c ****       (+) Return the LSB of the 9-bit CANx Transmit Error Counter(TEC).
1166:FWLIB/src/stm32f4xx_can.c ****    
1167:FWLIB/src/stm32f4xx_can.c ****       -@- If TEC is greater than 255, The CAN is in bus-off state.
1168:FWLIB/src/stm32f4xx_can.c ****       -@- if REC or TEC are greater than 96, an Error warning flag occurs.
1169:FWLIB/src/stm32f4xx_can.c ****       -@- if REC or TEC are greater than 127, an Error Passive Flag occurs.
1170:FWLIB/src/stm32f4xx_can.c ****                         
1171:FWLIB/src/stm32f4xx_can.c **** @endverbatim
1172:FWLIB/src/stm32f4xx_can.c ****   * @{
ARM GAS  /tmp/ccweFGY7.s 			page 22


1173:FWLIB/src/stm32f4xx_can.c ****   */
1174:FWLIB/src/stm32f4xx_can.c ****   
1175:FWLIB/src/stm32f4xx_can.c **** /**
1176:FWLIB/src/stm32f4xx_can.c ****   * @brief  Returns the CANx's last error code (LEC).
1177:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1178:FWLIB/src/stm32f4xx_can.c ****   * @retval Error code: 
1179:FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_NoErr: No Error  
1180:FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_StuffErr: Stuff Error
1181:FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_FormErr: Form Error
1182:FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_ACKErr : Acknowledgment Error
1183:FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_BitRecessiveErr: Bit Recessive Error
1184:FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_BitDominantErr: Bit Dominant Error
1185:FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_CRCErr: CRC Error
1186:FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_SoftwareSetErr: Software Set Error  
1187:FWLIB/src/stm32f4xx_can.c ****   */
1188:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
1189:FWLIB/src/stm32f4xx_can.c **** {
1190:FWLIB/src/stm32f4xx_can.c ****   uint8_t errorcode=0;
1191:FWLIB/src/stm32f4xx_can.c ****   
1192:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1193:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1194:FWLIB/src/stm32f4xx_can.c ****   
1195:FWLIB/src/stm32f4xx_can.c ****   /* Get the error code*/
1196:FWLIB/src/stm32f4xx_can.c ****   errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
1197:FWLIB/src/stm32f4xx_can.c ****   
1198:FWLIB/src/stm32f4xx_can.c ****   /* Return the error code*/
1199:FWLIB/src/stm32f4xx_can.c ****   return errorcode;
1200:FWLIB/src/stm32f4xx_can.c **** }
1201:FWLIB/src/stm32f4xx_can.c **** 
1202:FWLIB/src/stm32f4xx_can.c **** /**
1203:FWLIB/src/stm32f4xx_can.c ****   * @brief  Returns the CANx Receive Error Counter (REC).
1204:FWLIB/src/stm32f4xx_can.c ****   * @note   In case of an error during reception, this counter is incremented 
1205:FWLIB/src/stm32f4xx_can.c ****   *         by 1 or by 8 depending on the error condition as defined by the CAN 
1206:FWLIB/src/stm32f4xx_can.c ****   *         standard. After every successful reception, the counter is 
1207:FWLIB/src/stm32f4xx_can.c ****   *         decremented by 1 or reset to 120 if its value was higher than 128. 
1208:FWLIB/src/stm32f4xx_can.c ****   *         When the counter value exceeds 127, the CAN controller enters the 
1209:FWLIB/src/stm32f4xx_can.c ****   *         error passive state.  
1210:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1211:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
1212:FWLIB/src/stm32f4xx_can.c ****   * @retval CAN Receive Error Counter. 
1213:FWLIB/src/stm32f4xx_can.c ****   */
1214:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
1215:FWLIB/src/stm32f4xx_can.c **** {
1216:FWLIB/src/stm32f4xx_can.c ****   uint8_t counter=0;
1217:FWLIB/src/stm32f4xx_can.c ****   
1218:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1219:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1220:FWLIB/src/stm32f4xx_can.c ****   
1221:FWLIB/src/stm32f4xx_can.c ****   /* Get the Receive Error Counter*/
1222:FWLIB/src/stm32f4xx_can.c ****   counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
1223:FWLIB/src/stm32f4xx_can.c ****   
1224:FWLIB/src/stm32f4xx_can.c ****   /* Return the Receive Error Counter*/
1225:FWLIB/src/stm32f4xx_can.c ****   return counter;
1226:FWLIB/src/stm32f4xx_can.c **** }
1227:FWLIB/src/stm32f4xx_can.c **** 
1228:FWLIB/src/stm32f4xx_can.c **** 
1229:FWLIB/src/stm32f4xx_can.c **** /**
ARM GAS  /tmp/ccweFGY7.s 			page 23


1230:FWLIB/src/stm32f4xx_can.c ****   * @brief  Returns the LSB of the 9-bit CANx Transmit Error Counter(TEC).
1231:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1232:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
1233:FWLIB/src/stm32f4xx_can.c ****   * @retval LSB of the 9-bit CAN Transmit Error Counter. 
1234:FWLIB/src/stm32f4xx_can.c ****   */
1235:FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
1236:FWLIB/src/stm32f4xx_can.c **** {
1237:FWLIB/src/stm32f4xx_can.c ****   uint8_t counter=0;
1238:FWLIB/src/stm32f4xx_can.c ****   
1239:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1240:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1241:FWLIB/src/stm32f4xx_can.c ****   
1242:FWLIB/src/stm32f4xx_can.c ****   /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
1243:FWLIB/src/stm32f4xx_can.c ****   counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
1244:FWLIB/src/stm32f4xx_can.c ****   
1245:FWLIB/src/stm32f4xx_can.c ****   /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
1246:FWLIB/src/stm32f4xx_can.c ****   return counter;
1247:FWLIB/src/stm32f4xx_can.c **** }
1248:FWLIB/src/stm32f4xx_can.c **** /**
1249:FWLIB/src/stm32f4xx_can.c ****   * @}
1250:FWLIB/src/stm32f4xx_can.c ****   */
1251:FWLIB/src/stm32f4xx_can.c **** 
1252:FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Group6 Interrupts and flags management functions
1253:FWLIB/src/stm32f4xx_can.c ****  *  @brief   Interrupts and flags management functions
1254:FWLIB/src/stm32f4xx_can.c ****  *
1255:FWLIB/src/stm32f4xx_can.c **** @verbatim   
1256:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
1257:FWLIB/src/stm32f4xx_can.c ****               ##### Interrupts and flags management functions #####
1258:FWLIB/src/stm32f4xx_can.c ****  ===============================================================================  
1259:FWLIB/src/stm32f4xx_can.c **** 
1260:FWLIB/src/stm32f4xx_can.c ****      [..] This section provides functions allowing to configure the CAN Interrupts 
1261:FWLIB/src/stm32f4xx_can.c ****           and to get the status and clear flags and Interrupts pending bits.
1262:FWLIB/src/stm32f4xx_can.c ****   
1263:FWLIB/src/stm32f4xx_can.c ****           The CAN provides 14 Interrupts sources and 15 Flags:
1264:FWLIB/src/stm32f4xx_can.c **** 
1265:FWLIB/src/stm32f4xx_can.c ****    
1266:FWLIB/src/stm32f4xx_can.c ****   *** Flags ***
1267:FWLIB/src/stm32f4xx_can.c ****   =============
1268:FWLIB/src/stm32f4xx_can.c ****     [..] The 15 flags can be divided on 4 groups: 
1269:FWLIB/src/stm32f4xx_can.c **** 
1270:FWLIB/src/stm32f4xx_can.c ****       (+) Transmit Flags
1271:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_RQCP0, 
1272:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_RQCP1, 
1273:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_RQCP2  : Request completed MailBoxes 0, 1 and 2  Flags
1274:FWLIB/src/stm32f4xx_can.c ****                                Set when the last request (transmit or abort)
1275:FWLIB/src/stm32f4xx_can.c ****                                has been performed. 
1276:FWLIB/src/stm32f4xx_can.c **** 
1277:FWLIB/src/stm32f4xx_can.c ****       (+) Receive Flags
1278:FWLIB/src/stm32f4xx_can.c **** 
1279:FWLIB/src/stm32f4xx_can.c **** 
1280:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_FMP0,
1281:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_FMP1   : FIFO 0 and 1 Message Pending Flags 
1282:FWLIB/src/stm32f4xx_can.c ****                                set to signal that messages are pending in the receive 
1283:FWLIB/src/stm32f4xx_can.c ****                                FIFO.
1284:FWLIB/src/stm32f4xx_can.c ****                                These Flags are cleared only by hardware. 
1285:FWLIB/src/stm32f4xx_can.c **** 
1286:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_FF0,
ARM GAS  /tmp/ccweFGY7.s 			page 24


1287:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_FF1    : FIFO 0 and 1 Full Flags
1288:FWLIB/src/stm32f4xx_can.c ****                                set when three messages are stored in the selected 
1289:FWLIB/src/stm32f4xx_can.c ****                                FIFO.                        
1290:FWLIB/src/stm32f4xx_can.c **** 
1291:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_FOV0              
1292:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_FOV1   : FIFO 0 and 1 Overrun Flags
1293:FWLIB/src/stm32f4xx_can.c ****                                set when a new message has been received and passed 
1294:FWLIB/src/stm32f4xx_can.c ****                                the filter while the FIFO was full.         
1295:FWLIB/src/stm32f4xx_can.c **** 
1296:FWLIB/src/stm32f4xx_can.c ****       (+) Operating Mode Flags
1297:FWLIB/src/stm32f4xx_can.c **** 
1298:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_WKU    : Wake up Flag
1299:FWLIB/src/stm32f4xx_can.c ****                                set to signal that a SOF bit has been detected while 
1300:FWLIB/src/stm32f4xx_can.c ****                                the CAN hardware was in Sleep mode. 
1301:FWLIB/src/stm32f4xx_can.c ****         
1302:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_SLAK   : Sleep acknowledge Flag
1303:FWLIB/src/stm32f4xx_can.c ****                                Set to signal that the CAN has entered Sleep Mode. 
1304:FWLIB/src/stm32f4xx_can.c ****     
1305:FWLIB/src/stm32f4xx_can.c ****       (+) Error Flags
1306:FWLIB/src/stm32f4xx_can.c **** 
1307:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_EWG    : Error Warning Flag
1308:FWLIB/src/stm32f4xx_can.c ****                                Set when the warning limit has been reached (Receive 
1309:FWLIB/src/stm32f4xx_can.c ****                                Error Counter or Transmit Error Counter greater than 96). 
1310:FWLIB/src/stm32f4xx_can.c ****                                This Flag is cleared only by hardware.
1311:FWLIB/src/stm32f4xx_can.c ****                             
1312:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_EPV    : Error Passive Flag
1313:FWLIB/src/stm32f4xx_can.c ****                                Set when the Error Passive limit has been reached 
1314:FWLIB/src/stm32f4xx_can.c ****                                (Receive Error Counter or Transmit Error Counter 
1315:FWLIB/src/stm32f4xx_can.c ****                                greater than 127).
1316:FWLIB/src/stm32f4xx_can.c ****                                This Flag is cleared only by hardware.
1317:FWLIB/src/stm32f4xx_can.c ****                              
1318:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_BOF    : Bus-Off Flag
1319:FWLIB/src/stm32f4xx_can.c ****                                set when CAN enters the bus-off state. The bus-off 
1320:FWLIB/src/stm32f4xx_can.c ****                                state is entered on TEC overflow, greater than 255.
1321:FWLIB/src/stm32f4xx_can.c ****                                This Flag is cleared only by hardware.
1322:FWLIB/src/stm32f4xx_can.c ****                                    
1323:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_LEC    : Last error code Flag
1324:FWLIB/src/stm32f4xx_can.c ****                                set If a message has been transferred (reception or
1325:FWLIB/src/stm32f4xx_can.c ****                                transmission) with error, and the error code is hold.              
1326:FWLIB/src/stm32f4xx_can.c ****                            
1327:FWLIB/src/stm32f4xx_can.c ****   *** Interrupts ***
1328:FWLIB/src/stm32f4xx_can.c ****   ==================
1329:FWLIB/src/stm32f4xx_can.c ****     [..] The 14 interrupts can be divided on 4 groups: 
1330:FWLIB/src/stm32f4xx_can.c ****   
1331:FWLIB/src/stm32f4xx_can.c ****       (+) Transmit interrupt
1332:FWLIB/src/stm32f4xx_can.c ****   
1333:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_TME   :  Transmit mailbox empty Interrupt
1334:FWLIB/src/stm32f4xx_can.c ****                              if enabled, this interrupt source is pending when 
1335:FWLIB/src/stm32f4xx_can.c ****                              no transmit request are pending for Tx mailboxes.      
1336:FWLIB/src/stm32f4xx_can.c **** 
1337:FWLIB/src/stm32f4xx_can.c ****       (+) Receive Interrupts
1338:FWLIB/src/stm32f4xx_can.c ****          
1339:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_FMP0,
1340:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_FMP1    :  FIFO 0 and FIFO1 message pending Interrupts
1341:FWLIB/src/stm32f4xx_can.c ****                                if enabled, these interrupt sources are pending 
1342:FWLIB/src/stm32f4xx_can.c ****                                when messages are pending in the receive FIFO.
1343:FWLIB/src/stm32f4xx_can.c ****                                The corresponding interrupt pending bits are cleared 
ARM GAS  /tmp/ccweFGY7.s 			page 25


1344:FWLIB/src/stm32f4xx_can.c ****                                only by hardware.
1345:FWLIB/src/stm32f4xx_can.c ****                 
1346:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_FF0,              
1347:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_FF1     :  FIFO 0 and FIFO1 full Interrupts
1348:FWLIB/src/stm32f4xx_can.c ****                                if enabled, these interrupt sources are pending 
1349:FWLIB/src/stm32f4xx_can.c ****                                when three messages are stored in the selected FIFO.
1350:FWLIB/src/stm32f4xx_can.c ****         
1351:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_FOV0,        
1352:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_FOV1    :  FIFO 0 and FIFO1 overrun Interrupts        
1353:FWLIB/src/stm32f4xx_can.c ****                                if enabled, these interrupt sources are pending 
1354:FWLIB/src/stm32f4xx_can.c ****                                when a new message has been received and passed 
1355:FWLIB/src/stm32f4xx_can.c ****                                the filter while the FIFO was full.
1356:FWLIB/src/stm32f4xx_can.c **** 
1357:FWLIB/src/stm32f4xx_can.c ****       (+) Operating Mode Interrupts
1358:FWLIB/src/stm32f4xx_can.c ****          
1359:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_WKU     :  Wake-up Interrupt
1360:FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when 
1361:FWLIB/src/stm32f4xx_can.c ****                                a SOF bit has been detected while the CAN hardware 
1362:FWLIB/src/stm32f4xx_can.c ****                                was in Sleep mode.
1363:FWLIB/src/stm32f4xx_can.c ****                                   
1364:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_SLK     :  Sleep acknowledge Interrupt
1365:FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when 
1366:FWLIB/src/stm32f4xx_can.c ****                                the CAN has entered Sleep Mode.       
1367:FWLIB/src/stm32f4xx_can.c **** 
1368:FWLIB/src/stm32f4xx_can.c ****       (+) Error Interrupts 
1369:FWLIB/src/stm32f4xx_can.c ****         
1370:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_EWG     :  Error warning Interrupt 
1371:FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when
1372:FWLIB/src/stm32f4xx_can.c ****                                the warning limit has been reached (Receive Error 
1373:FWLIB/src/stm32f4xx_can.c ****                                Counter or Transmit Error Counter=96). 
1374:FWLIB/src/stm32f4xx_can.c ****                                
1375:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_EPV     :  Error passive Interrupt        
1376:FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when
1377:FWLIB/src/stm32f4xx_can.c ****                                the Error Passive limit has been reached (Receive 
1378:FWLIB/src/stm32f4xx_can.c ****                                Error Counter or Transmit Error Counter>127).
1379:FWLIB/src/stm32f4xx_can.c ****                           
1380:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_BOF     :  Bus-off Interrupt
1381:FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when
1382:FWLIB/src/stm32f4xx_can.c ****                                CAN enters the bus-off state. The bus-off state is 
1383:FWLIB/src/stm32f4xx_can.c ****                                entered on TEC overflow, greater than 255.
1384:FWLIB/src/stm32f4xx_can.c ****                                This Flag is cleared only by hardware.
1385:FWLIB/src/stm32f4xx_can.c ****                                   
1386:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_LEC     :  Last error code Interrupt        
1387:FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending  when
1388:FWLIB/src/stm32f4xx_can.c ****                                a message has been transferred (reception or
1389:FWLIB/src/stm32f4xx_can.c ****                                transmission) with error, and the error code is hold.
1390:FWLIB/src/stm32f4xx_can.c ****                           
1391:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_ERR     :  Error Interrupt
1392:FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when 
1393:FWLIB/src/stm32f4xx_can.c ****                                an error condition is pending.      
1394:FWLIB/src/stm32f4xx_can.c ****                       
1395:FWLIB/src/stm32f4xx_can.c ****     [..] Managing the CAN controller events :
1396:FWLIB/src/stm32f4xx_can.c ****  
1397:FWLIB/src/stm32f4xx_can.c ****          The user should identify which mode will be used in his application to 
1398:FWLIB/src/stm32f4xx_can.c ****          manage the CAN controller events: Polling mode or Interrupt mode.
1399:FWLIB/src/stm32f4xx_can.c ****   
1400:FWLIB/src/stm32f4xx_can.c ****       (#) In the Polling Mode it is advised to use the following functions:
ARM GAS  /tmp/ccweFGY7.s 			page 26


1401:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_GetFlagStatus() : to check if flags events occur. 
1402:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_ClearFlag()     : to clear the flags events.
1403:FWLIB/src/stm32f4xx_can.c ****   
1404:FWLIB/src/stm32f4xx_can.c **** 
1405:FWLIB/src/stm32f4xx_can.c ****   
1406:FWLIB/src/stm32f4xx_can.c ****       (#) In the Interrupt Mode it is advised to use the following functions:
1407:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_ITConfig()       : to enable or disable the interrupt source.
1408:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_GetITStatus()    : to check if Interrupt occurs.
1409:FWLIB/src/stm32f4xx_can.c ****         (++) CAN_ClearITPendingBit() : to clear the Interrupt pending Bit 
1410:FWLIB/src/stm32f4xx_can.c ****             (corresponding Flag).
1411:FWLIB/src/stm32f4xx_can.c ****         -@@-  This function has no impact on CAN_IT_FMP0 and CAN_IT_FMP1 Interrupts 
1412:FWLIB/src/stm32f4xx_can.c ****              pending bits since there are cleared only by hardware. 
1413:FWLIB/src/stm32f4xx_can.c ****   
1414:FWLIB/src/stm32f4xx_can.c **** @endverbatim
1415:FWLIB/src/stm32f4xx_can.c ****   * @{
1416:FWLIB/src/stm32f4xx_can.c ****   */ 
1417:FWLIB/src/stm32f4xx_can.c **** /**
1418:FWLIB/src/stm32f4xx_can.c ****   * @brief  Enables or disables the specified CANx interrupts.
1419:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1420:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_IT: specifies the CAN interrupt sources to be enabled or disabled.
1421:FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be: 
1422:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_TME: Transmit mailbox empty Interrupt 
1423:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FMP0: FIFO 0 message pending Interrupt 
1424:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF0: FIFO 0 full Interrupt
1425:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV0: FIFO 0 overrun Interrupt
1426:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FMP1: FIFO 1 message pending Interrupt 
1427:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF1: FIFO 1 full Interrupt
1428:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV1: FIFO 1 overrun Interrupt
1429:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_WKU: Wake-up Interrupt
1430:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_SLK: Sleep acknowledge Interrupt  
1431:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EWG: Error warning Interrupt
1432:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EPV: Error passive Interrupt
1433:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_BOF: Bus-off Interrupt  
1434:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_LEC: Last error code Interrupt
1435:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_ERR: Error Interrupt
1436:FWLIB/src/stm32f4xx_can.c ****   * @param  NewState: new state of the CAN interrupts.
1437:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
1438:FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be: ENABLE or DISABLE.
1439:FWLIB/src/stm32f4xx_can.c ****   * @retval None
1440:FWLIB/src/stm32f4xx_can.c ****   */
1441:FWLIB/src/stm32f4xx_can.c **** void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
1442:FWLIB/src/stm32f4xx_can.c **** {
1443:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1444:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1445:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_IT(CAN_IT));
1446:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1447:FWLIB/src/stm32f4xx_can.c **** 
1448:FWLIB/src/stm32f4xx_can.c ****   if (NewState != DISABLE)
1449:FWLIB/src/stm32f4xx_can.c ****   {
1450:FWLIB/src/stm32f4xx_can.c ****     /* Enable the selected CANx interrupt */
1451:FWLIB/src/stm32f4xx_can.c ****     CANx->IER |= CAN_IT;
1452:FWLIB/src/stm32f4xx_can.c ****   }
1453:FWLIB/src/stm32f4xx_can.c ****   else
1454:FWLIB/src/stm32f4xx_can.c ****   {
1455:FWLIB/src/stm32f4xx_can.c ****     /* Disable the selected CANx interrupt */
1456:FWLIB/src/stm32f4xx_can.c ****     CANx->IER &= ~CAN_IT;
1457:FWLIB/src/stm32f4xx_can.c ****   }
ARM GAS  /tmp/ccweFGY7.s 			page 27


1458:FWLIB/src/stm32f4xx_can.c **** }
1459:FWLIB/src/stm32f4xx_can.c **** /**
1460:FWLIB/src/stm32f4xx_can.c ****   * @brief  Checks whether the specified CAN flag is set or not.
1461:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1462:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_FLAG: specifies the flag to check.
1463:FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be one of the following values:
1464:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP0: Request MailBox0 Flag
1465:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP1: Request MailBox1 Flag
1466:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP2: Request MailBox2 Flag
1467:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FMP0: FIFO 0 Message Pending Flag   
1468:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FF0: FIFO 0 Full Flag       
1469:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FOV0: FIFO 0 Overrun Flag 
1470:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FMP1: FIFO 1 Message Pending Flag   
1471:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FF1: FIFO 1 Full Flag        
1472:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FOV1: FIFO 1 Overrun Flag     
1473:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_WKU: Wake up Flag
1474:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag 
1475:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_EWG: Error Warning Flag
1476:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_EPV: Error Passive Flag  
1477:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_BOF: Bus-Off Flag    
1478:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_LEC: Last error code Flag
1479:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
1480:FWLIB/src/stm32f4xx_can.c ****   * @retval The new state of CAN_FLAG (SET or RESET).
1481:FWLIB/src/stm32f4xx_can.c ****   */
1482:FWLIB/src/stm32f4xx_can.c **** FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
1483:FWLIB/src/stm32f4xx_can.c **** {
1484:FWLIB/src/stm32f4xx_can.c ****   FlagStatus bitstatus = RESET;
1485:FWLIB/src/stm32f4xx_can.c ****   
1486:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1487:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1488:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
1489:FWLIB/src/stm32f4xx_can.c ****   
1490:FWLIB/src/stm32f4xx_can.c **** 
1491:FWLIB/src/stm32f4xx_can.c ****   if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
1492:FWLIB/src/stm32f4xx_can.c ****   { 
1493:FWLIB/src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1494:FWLIB/src/stm32f4xx_can.c ****     if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1495:FWLIB/src/stm32f4xx_can.c ****     { 
1496:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1497:FWLIB/src/stm32f4xx_can.c ****       bitstatus = SET;
1498:FWLIB/src/stm32f4xx_can.c ****     }
1499:FWLIB/src/stm32f4xx_can.c ****     else
1500:FWLIB/src/stm32f4xx_can.c ****     { 
1501:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1502:FWLIB/src/stm32f4xx_can.c ****       bitstatus = RESET;
1503:FWLIB/src/stm32f4xx_can.c ****     }
1504:FWLIB/src/stm32f4xx_can.c ****   }
1505:FWLIB/src/stm32f4xx_can.c ****   else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
1506:FWLIB/src/stm32f4xx_can.c ****   { 
1507:FWLIB/src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1508:FWLIB/src/stm32f4xx_can.c ****     if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1509:FWLIB/src/stm32f4xx_can.c ****     { 
1510:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1511:FWLIB/src/stm32f4xx_can.c ****       bitstatus = SET;
1512:FWLIB/src/stm32f4xx_can.c ****     }
1513:FWLIB/src/stm32f4xx_can.c ****     else
1514:FWLIB/src/stm32f4xx_can.c ****     { 
ARM GAS  /tmp/ccweFGY7.s 			page 28


1515:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1516:FWLIB/src/stm32f4xx_can.c ****       bitstatus = RESET;
1517:FWLIB/src/stm32f4xx_can.c ****     }
1518:FWLIB/src/stm32f4xx_can.c ****   }
1519:FWLIB/src/stm32f4xx_can.c ****   else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
1520:FWLIB/src/stm32f4xx_can.c ****   { 
1521:FWLIB/src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1522:FWLIB/src/stm32f4xx_can.c ****     if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1523:FWLIB/src/stm32f4xx_can.c ****     { 
1524:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1525:FWLIB/src/stm32f4xx_can.c ****       bitstatus = SET;
1526:FWLIB/src/stm32f4xx_can.c ****     }
1527:FWLIB/src/stm32f4xx_can.c ****     else
1528:FWLIB/src/stm32f4xx_can.c ****     { 
1529:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1530:FWLIB/src/stm32f4xx_can.c ****       bitstatus = RESET;
1531:FWLIB/src/stm32f4xx_can.c ****     }
1532:FWLIB/src/stm32f4xx_can.c ****   }
1533:FWLIB/src/stm32f4xx_can.c ****   else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
1534:FWLIB/src/stm32f4xx_can.c ****   { 
1535:FWLIB/src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1536:FWLIB/src/stm32f4xx_can.c ****     if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1537:FWLIB/src/stm32f4xx_can.c ****     { 
1538:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1539:FWLIB/src/stm32f4xx_can.c ****       bitstatus = SET;
1540:FWLIB/src/stm32f4xx_can.c ****     }
1541:FWLIB/src/stm32f4xx_can.c ****     else
1542:FWLIB/src/stm32f4xx_can.c ****     { 
1543:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1544:FWLIB/src/stm32f4xx_can.c ****       bitstatus = RESET;
1545:FWLIB/src/stm32f4xx_can.c ****     }
1546:FWLIB/src/stm32f4xx_can.c ****   }
1547:FWLIB/src/stm32f4xx_can.c ****   else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
1548:FWLIB/src/stm32f4xx_can.c ****   { 
1549:FWLIB/src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1550:FWLIB/src/stm32f4xx_can.c ****     if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1551:FWLIB/src/stm32f4xx_can.c ****     { 
1552:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1553:FWLIB/src/stm32f4xx_can.c ****       bitstatus = SET;
1554:FWLIB/src/stm32f4xx_can.c ****     }
1555:FWLIB/src/stm32f4xx_can.c ****     else
1556:FWLIB/src/stm32f4xx_can.c ****     { 
1557:FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1558:FWLIB/src/stm32f4xx_can.c ****       bitstatus = RESET;
1559:FWLIB/src/stm32f4xx_can.c ****     }
1560:FWLIB/src/stm32f4xx_can.c ****   }
1561:FWLIB/src/stm32f4xx_can.c ****   /* Return the CAN_FLAG status */
1562:FWLIB/src/stm32f4xx_can.c ****   return  bitstatus;
1563:FWLIB/src/stm32f4xx_can.c **** }
1564:FWLIB/src/stm32f4xx_can.c **** 
1565:FWLIB/src/stm32f4xx_can.c **** /**
1566:FWLIB/src/stm32f4xx_can.c ****   * @brief  Clears the CAN's pending flags.
1567:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1568:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_FLAG: specifies the flag to clear.
1569:FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be one of the following values:
1570:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP0: Request MailBox0 Flag
1571:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP1: Request MailBox1 Flag
ARM GAS  /tmp/ccweFGY7.s 			page 29


1572:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP2: Request MailBox2 Flag 
1573:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FF0: FIFO 0 Full Flag       
1574:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FOV0: FIFO 0 Overrun Flag  
1575:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FF1: FIFO 1 Full Flag        
1576:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FOV1: FIFO 1 Overrun Flag     
1577:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_WKU: Wake up Flag
1578:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag    
1579:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_LEC: Last error code Flag
1580:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
1581:FWLIB/src/stm32f4xx_can.c ****   * @retval None
1582:FWLIB/src/stm32f4xx_can.c ****   */
1583:FWLIB/src/stm32f4xx_can.c **** void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
1584:FWLIB/src/stm32f4xx_can.c **** {
1585:FWLIB/src/stm32f4xx_can.c ****   uint32_t flagtmp=0;
1586:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1587:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1588:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
1589:FWLIB/src/stm32f4xx_can.c ****   
1590:FWLIB/src/stm32f4xx_can.c ****   if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
1591:FWLIB/src/stm32f4xx_can.c ****   {
1592:FWLIB/src/stm32f4xx_can.c ****     /* Clear the selected CAN flags */
1593:FWLIB/src/stm32f4xx_can.c ****     CANx->ESR = (uint32_t)RESET;
1594:FWLIB/src/stm32f4xx_can.c ****   }
1595:FWLIB/src/stm32f4xx_can.c ****   else /* MSR or TSR or RF0R or RF1R */
1596:FWLIB/src/stm32f4xx_can.c ****   {
1597:FWLIB/src/stm32f4xx_can.c ****     flagtmp = CAN_FLAG & 0x000FFFFF;
1598:FWLIB/src/stm32f4xx_can.c **** 
1599:FWLIB/src/stm32f4xx_can.c ****     if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
1600:FWLIB/src/stm32f4xx_can.c ****     {
1601:FWLIB/src/stm32f4xx_can.c ****       /* Receive Flags */
1602:FWLIB/src/stm32f4xx_can.c ****       CANx->RF0R = (uint32_t)(flagtmp);
1603:FWLIB/src/stm32f4xx_can.c ****     }
1604:FWLIB/src/stm32f4xx_can.c ****     else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
1605:FWLIB/src/stm32f4xx_can.c ****     {
1606:FWLIB/src/stm32f4xx_can.c ****       /* Receive Flags */
1607:FWLIB/src/stm32f4xx_can.c ****       CANx->RF1R = (uint32_t)(flagtmp);
1608:FWLIB/src/stm32f4xx_can.c ****     }
1609:FWLIB/src/stm32f4xx_can.c ****     else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
1610:FWLIB/src/stm32f4xx_can.c ****     {
1611:FWLIB/src/stm32f4xx_can.c ****       /* Transmit Flags */
1612:FWLIB/src/stm32f4xx_can.c ****       CANx->TSR = (uint32_t)(flagtmp);
1613:FWLIB/src/stm32f4xx_can.c ****     }
1614:FWLIB/src/stm32f4xx_can.c ****     else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
1615:FWLIB/src/stm32f4xx_can.c ****     {
1616:FWLIB/src/stm32f4xx_can.c ****       /* Operating mode Flags */
1617:FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = (uint32_t)(flagtmp);
1618:FWLIB/src/stm32f4xx_can.c ****     }
1619:FWLIB/src/stm32f4xx_can.c ****   }
1620:FWLIB/src/stm32f4xx_can.c **** }
1621:FWLIB/src/stm32f4xx_can.c **** 
1622:FWLIB/src/stm32f4xx_can.c **** /**
1623:FWLIB/src/stm32f4xx_can.c ****   * @brief  Checks whether the specified CANx interrupt has occurred or not.
1624:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1625:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_IT: specifies the CAN interrupt source to check.
1626:FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be one of the following values:
1627:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_TME: Transmit mailbox empty Interrupt 
1628:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FMP0: FIFO 0 message pending Interrupt 
ARM GAS  /tmp/ccweFGY7.s 			page 30


1629:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF0: FIFO 0 full Interrupt
1630:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV0: FIFO 0 overrun Interrupt
1631:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FMP1: FIFO 1 message pending Interrupt 
1632:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF1: FIFO 1 full Interrupt
1633:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV1: FIFO 1 overrun Interrupt
1634:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_WKU: Wake-up Interrupt
1635:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_SLK: Sleep acknowledge Interrupt  
1636:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EWG: Error warning Interrupt
1637:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EPV: Error passive Interrupt
1638:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_BOF: Bus-off Interrupt  
1639:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_LEC: Last error code Interrupt
1640:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_ERR: Error Interrupt
1641:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
1642:FWLIB/src/stm32f4xx_can.c ****   * @retval The current state of CAN_IT (SET or RESET).
1643:FWLIB/src/stm32f4xx_can.c ****   */
1644:FWLIB/src/stm32f4xx_can.c **** ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
1645:FWLIB/src/stm32f4xx_can.c **** {
1646:FWLIB/src/stm32f4xx_can.c ****   ITStatus itstatus = RESET;
1647:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1648:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1649:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_IT(CAN_IT));
1650:FWLIB/src/stm32f4xx_can.c ****   
1651:FWLIB/src/stm32f4xx_can.c ****   /* check the interrupt enable bit */
1652:FWLIB/src/stm32f4xx_can.c ****  if((CANx->IER & CAN_IT) != RESET)
1653:FWLIB/src/stm32f4xx_can.c ****  {
1654:FWLIB/src/stm32f4xx_can.c ****    /* in case the Interrupt is enabled, .... */
1655:FWLIB/src/stm32f4xx_can.c ****     switch (CAN_IT)
1656:FWLIB/src/stm32f4xx_can.c ****     {
1657:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_TME:
1658:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_TSR_RQCPx bits */
1659:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
1660:FWLIB/src/stm32f4xx_can.c ****         break;
1661:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FMP0:
1662:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_RF0R_FMP0 bit */
1663:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
1664:FWLIB/src/stm32f4xx_can.c ****         break;
1665:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FF0:
1666:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_RF0R_FULL0 bit */
1667:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
1668:FWLIB/src/stm32f4xx_can.c ****         break;
1669:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FOV0:
1670:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_RF0R_FOVR0 bit */
1671:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
1672:FWLIB/src/stm32f4xx_can.c ****         break;
1673:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FMP1:
1674:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_RF1R_FMP1 bit */
1675:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
1676:FWLIB/src/stm32f4xx_can.c ****         break;
1677:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FF1:
1678:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_RF1R_FULL1 bit */
1679:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
1680:FWLIB/src/stm32f4xx_can.c ****         break;
1681:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FOV1:
1682:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_RF1R_FOVR1 bit */
1683:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
1684:FWLIB/src/stm32f4xx_can.c ****         break;
1685:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_WKU:
ARM GAS  /tmp/ccweFGY7.s 			page 31


1686:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_MSR_WKUI bit */
1687:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
1688:FWLIB/src/stm32f4xx_can.c ****         break;
1689:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_SLK:
1690:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_MSR_SLAKI bit */
1691:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
1692:FWLIB/src/stm32f4xx_can.c ****         break;
1693:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_EWG:
1694:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_ESR_EWGF bit */
1695:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
1696:FWLIB/src/stm32f4xx_can.c ****         break;
1697:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_EPV:
1698:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_ESR_EPVF bit */
1699:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
1700:FWLIB/src/stm32f4xx_can.c ****         break;
1701:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_BOF:
1702:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_ESR_BOFF bit */
1703:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
1704:FWLIB/src/stm32f4xx_can.c ****         break;
1705:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_LEC:
1706:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_ESR_LEC bit */
1707:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
1708:FWLIB/src/stm32f4xx_can.c ****         break;
1709:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_ERR:
1710:FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_MSR_ERRI bit */ 
1711:FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
1712:FWLIB/src/stm32f4xx_can.c ****         break;
1713:FWLIB/src/stm32f4xx_can.c ****       default:
1714:FWLIB/src/stm32f4xx_can.c ****         /* in case of error, return RESET */
1715:FWLIB/src/stm32f4xx_can.c ****         itstatus = RESET;
1716:FWLIB/src/stm32f4xx_can.c ****         break;
1717:FWLIB/src/stm32f4xx_can.c ****     }
1718:FWLIB/src/stm32f4xx_can.c ****   }
1719:FWLIB/src/stm32f4xx_can.c ****   else
1720:FWLIB/src/stm32f4xx_can.c ****   {
1721:FWLIB/src/stm32f4xx_can.c ****    /* in case the Interrupt is not enabled, return RESET */
1722:FWLIB/src/stm32f4xx_can.c ****     itstatus  = RESET;
1723:FWLIB/src/stm32f4xx_can.c ****   }
1724:FWLIB/src/stm32f4xx_can.c ****   
1725:FWLIB/src/stm32f4xx_can.c ****   /* Return the CAN_IT status */
1726:FWLIB/src/stm32f4xx_can.c ****   return  itstatus;
1727:FWLIB/src/stm32f4xx_can.c **** }
1728:FWLIB/src/stm32f4xx_can.c **** 
1729:FWLIB/src/stm32f4xx_can.c **** /**
1730:FWLIB/src/stm32f4xx_can.c ****   * @brief  Clears the CANx's interrupt pending bits.
1731:FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1732:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_IT: specifies the interrupt pending bit to clear.
1733:FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be one of the following values:
1734:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_TME: Transmit mailbox empty Interrupt
1735:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF0: FIFO 0 full Interrupt
1736:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV0: FIFO 0 overrun Interrupt
1737:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF1: FIFO 1 full Interrupt
1738:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV1: FIFO 1 overrun Interrupt
1739:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_WKU: Wake-up Interrupt
1740:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_SLK: Sleep acknowledge Interrupt  
1741:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EWG: Error warning Interrupt
1742:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EPV: Error passive Interrupt
ARM GAS  /tmp/ccweFGY7.s 			page 32


1743:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_BOF: Bus-off Interrupt  
1744:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_LEC: Last error code Interrupt
1745:FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_ERR: Error Interrupt
1746:FWLIB/src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
1747:FWLIB/src/stm32f4xx_can.c ****   * @retval None
1748:FWLIB/src/stm32f4xx_can.c ****   */
1749:FWLIB/src/stm32f4xx_can.c **** void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
1750:FWLIB/src/stm32f4xx_can.c **** {
1751:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1752:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1753:FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_CLEAR_IT(CAN_IT));
1754:FWLIB/src/stm32f4xx_can.c **** 
1755:FWLIB/src/stm32f4xx_can.c ****   switch (CAN_IT)
1756:FWLIB/src/stm32f4xx_can.c ****   {
1757:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_TME:
1758:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_TSR_RQCPx (rc_w1)*/
1759:FWLIB/src/stm32f4xx_can.c ****       CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
1760:FWLIB/src/stm32f4xx_can.c ****       break;
1761:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FF0:
1762:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_RF0R_FULL0 (rc_w1)*/
1763:FWLIB/src/stm32f4xx_can.c ****       CANx->RF0R = CAN_RF0R_FULL0; 
1764:FWLIB/src/stm32f4xx_can.c ****       break;
1765:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FOV0:
1766:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
1767:FWLIB/src/stm32f4xx_can.c ****       CANx->RF0R = CAN_RF0R_FOVR0; 
1768:FWLIB/src/stm32f4xx_can.c ****       break;
1769:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FF1:
1770:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_RF1R_FULL1 (rc_w1)*/
1771:FWLIB/src/stm32f4xx_can.c ****       CANx->RF1R = CAN_RF1R_FULL1;  
1772:FWLIB/src/stm32f4xx_can.c ****       break;
1773:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FOV1:
1774:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
1775:FWLIB/src/stm32f4xx_can.c ****       CANx->RF1R = CAN_RF1R_FOVR1; 
1776:FWLIB/src/stm32f4xx_can.c ****       break;
1777:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_WKU:
1778:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_WKUI (rc_w1)*/
1779:FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_WKUI;  
1780:FWLIB/src/stm32f4xx_can.c ****       break;
1781:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_SLK:
1782:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
1783:FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_SLAKI;   
1784:FWLIB/src/stm32f4xx_can.c ****       break;
1785:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_EWG:
1786:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1787:FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI;
1788:FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/ 
1789:FWLIB/src/stm32f4xx_can.c ****       break;
1790:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_EPV:
1791:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1792:FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1793:FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
1794:FWLIB/src/stm32f4xx_can.c ****       break;
1795:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_BOF:
1796:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */ 
1797:FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1798:FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
1799:FWLIB/src/stm32f4xx_can.c ****        break;
ARM GAS  /tmp/ccweFGY7.s 			page 33


1800:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_LEC:
1801:FWLIB/src/stm32f4xx_can.c ****       /*  Clear LEC bits */
1802:FWLIB/src/stm32f4xx_can.c ****       CANx->ESR = RESET; 
1803:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1804:FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1805:FWLIB/src/stm32f4xx_can.c ****       break;
1806:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_ERR:
1807:FWLIB/src/stm32f4xx_can.c ****       /*Clear LEC bits */
1808:FWLIB/src/stm32f4xx_can.c ****       CANx->ESR = RESET; 
1809:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1810:FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1811:FWLIB/src/stm32f4xx_can.c ****        /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
1812:FWLIB/src/stm32f4xx_can.c ****        break;
1813:FWLIB/src/stm32f4xx_can.c ****     default:
1814:FWLIB/src/stm32f4xx_can.c ****        break;
1815:FWLIB/src/stm32f4xx_can.c ****    }
1816:FWLIB/src/stm32f4xx_can.c **** }
1817:FWLIB/src/stm32f4xx_can.c ****  /**
1818:FWLIB/src/stm32f4xx_can.c ****   * @}
1819:FWLIB/src/stm32f4xx_can.c ****   */
1820:FWLIB/src/stm32f4xx_can.c **** 
1821:FWLIB/src/stm32f4xx_can.c **** /**
1822:FWLIB/src/stm32f4xx_can.c ****   * @brief  Checks whether the CAN interrupt has occurred or not.
1823:FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_Reg: specifies the CAN interrupt register to check.
1824:FWLIB/src/stm32f4xx_can.c ****   * @param  It_Bit: specifies the interrupt source bit to check.
1825:FWLIB/src/stm32f4xx_can.c ****   * @retval The new state of the CAN Interrupt (SET or RESET).
1826:FWLIB/src/stm32f4xx_can.c ****   */
1827:FWLIB/src/stm32f4xx_can.c **** static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
1828:FWLIB/src/stm32f4xx_can.c **** {
  27              		.loc 1 1828 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1829:FWLIB/src/stm32f4xx_can.c ****   ITStatus pendingbitstatus = RESET;
1830:FWLIB/src/stm32f4xx_can.c ****   
1831:FWLIB/src/stm32f4xx_can.c ****   if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
  33              		.loc 1 1831 0
  34 0000 0842     		tst	r0, r1
  35 0002 01D1     		bne	.L4
1832:FWLIB/src/stm32f4xx_can.c ****   {
1833:FWLIB/src/stm32f4xx_can.c ****     /* CAN_IT is set */
1834:FWLIB/src/stm32f4xx_can.c ****     pendingbitstatus = SET;
1835:FWLIB/src/stm32f4xx_can.c ****   }
1836:FWLIB/src/stm32f4xx_can.c ****   else
1837:FWLIB/src/stm32f4xx_can.c ****   {
1838:FWLIB/src/stm32f4xx_can.c ****     /* CAN_IT is reset */
1839:FWLIB/src/stm32f4xx_can.c ****     pendingbitstatus = RESET;
  36              		.loc 1 1839 0
  37 0004 0020     		movs	r0, #0
  38              	.LVL1:
1840:FWLIB/src/stm32f4xx_can.c ****   }
1841:FWLIB/src/stm32f4xx_can.c ****   return pendingbitstatus;
1842:FWLIB/src/stm32f4xx_can.c **** }
  39              		.loc 1 1842 0
  40 0006 7047     		bx	lr
ARM GAS  /tmp/ccweFGY7.s 			page 34


  41              	.LVL2:
  42              	.L4:
1834:FWLIB/src/stm32f4xx_can.c ****   }
  43              		.loc 1 1834 0
  44 0008 0120     		movs	r0, #1
  45              	.LVL3:
  46 000a 7047     		bx	lr
  47              		.cfi_endproc
  48              	.LFE147:
  50              		.section	.text.CAN_DeInit,"ax",%progbits
  51              		.align	1
  52              		.global	CAN_DeInit
  53              		.syntax unified
  54              		.thumb
  55              		.thumb_func
  56              		.fpu fpv4-sp-d16
  58              	CAN_DeInit:
  59              	.LFB123:
 168:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
  60              		.loc 1 168 0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 0
  63              		@ frame_needed = 0, uses_anonymous_args = 0
  64              	.LVL4:
  65 0000 08B5     		push	{r3, lr}
  66              	.LCFI0:
  67              		.cfi_def_cfa_offset 8
  68              		.cfi_offset 3, -8
  69              		.cfi_offset 14, -4
 172:FWLIB/src/stm32f4xx_can.c ****   {
  70              		.loc 1 172 0
  71 0002 0C4B     		ldr	r3, .L10
  72 0004 9842     		cmp	r0, r3
  73 0006 0AD0     		beq	.L9
 199:FWLIB/src/stm32f4xx_can.c ****     /* Release CAN2 from reset state */
  74              		.loc 1 199 0
  75 0008 0121     		movs	r1, #1
  76 000a 4FF08060 		mov	r0, #67108864
  77              	.LVL5:
  78 000e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  79              	.LVL6:
 201:FWLIB/src/stm32f4xx_can.c ****   }
  80              		.loc 1 201 0
  81 0012 0021     		movs	r1, #0
  82 0014 4FF08060 		mov	r0, #67108864
  83 0018 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  84              	.LVL7:
  85 001c 08BD     		pop	{r3, pc}
  86              	.LVL8:
  87              	.L9:
 175:FWLIB/src/stm32f4xx_can.c ****     /* Release CAN1 from reset state */
  88              		.loc 1 175 0
  89 001e 0121     		movs	r1, #1
  90 0020 4FF00070 		mov	r0, #33554432
  91              	.LVL9:
  92 0024 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  93              	.LVL10:
ARM GAS  /tmp/ccweFGY7.s 			page 35


 177:FWLIB/src/stm32f4xx_can.c ****   }
  94              		.loc 1 177 0
  95 0028 0021     		movs	r1, #0
  96 002a 4FF00070 		mov	r0, #33554432
  97 002e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  98              	.LVL11:
  99 0032 08BD     		pop	{r3, pc}
 100              	.L11:
 101              		.align	2
 102              	.L10:
 103 0034 00640040 		.word	1073767424
 104              		.cfi_endproc
 105              	.LFE123:
 107              		.section	.text.CAN_Init,"ax",%progbits
 108              		.align	1
 109              		.global	CAN_Init
 110              		.syntax unified
 111              		.thumb
 112              		.thumb_func
 113              		.fpu fpv4-sp-d16
 115              	CAN_Init:
 116              	.LFB124:
 217:FWLIB/src/stm32f4xx_can.c ****   uint8_t InitStatus = CAN_InitStatus_Failed;
 117              		.loc 1 217 0
 118              		.cfi_startproc
 119              		@ args = 0, pretend = 0, frame = 0
 120              		@ frame_needed = 0, uses_anonymous_args = 0
 121              		@ link register save eliminated.
 122              	.LVL12:
 235:FWLIB/src/stm32f4xx_can.c **** 
 123              		.loc 1 235 0
 124 0000 0368     		ldr	r3, [r0]
 125 0002 23F00203 		bic	r3, r3, #2
 126 0006 0360     		str	r3, [r0]
 238:FWLIB/src/stm32f4xx_can.c **** 
 127              		.loc 1 238 0
 128 0008 0368     		ldr	r3, [r0]
 129 000a 43F00103 		orr	r3, r3, #1
 130 000e 0360     		str	r3, [r0]
 219:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 131              		.loc 1 219 0
 132 0010 0023     		movs	r3, #0
 241:FWLIB/src/stm32f4xx_can.c ****   {
 133              		.loc 1 241 0
 134 0012 00E0     		b	.L13
 135              	.LVL13:
 136              	.L15:
 243:FWLIB/src/stm32f4xx_can.c ****   }
 137              		.loc 1 243 0
 138 0014 0133     		adds	r3, r3, #1
 139              	.LVL14:
 140              	.L13:
 241:FWLIB/src/stm32f4xx_can.c ****   {
 141              		.loc 1 241 0
 142 0016 4268     		ldr	r2, [r0, #4]
 143 0018 12F0010F 		tst	r2, #1
 144 001c 03D1     		bne	.L14
ARM GAS  /tmp/ccweFGY7.s 			page 36


 241:FWLIB/src/stm32f4xx_can.c ****   {
 145              		.loc 1 241 0 is_stmt 0 discriminator 1
 146 001e 4FF6FF72 		movw	r2, #65535
 147 0022 9342     		cmp	r3, r2
 148 0024 F6D1     		bne	.L15
 149              	.L14:
 247:FWLIB/src/stm32f4xx_can.c ****   {
 150              		.loc 1 247 0 is_stmt 1
 151 0026 4368     		ldr	r3, [r0, #4]
 152              	.LVL15:
 153 0028 13F0010F 		tst	r3, #1
 154 002c 6DD0     		beq	.L32
 254:FWLIB/src/stm32f4xx_can.c ****     {
 155              		.loc 1 254 0
 156 002e 8B79     		ldrb	r3, [r1, #6]	@ zero_extendqisi2
 157 0030 012B     		cmp	r3, #1
 158 0032 3BD0     		beq	.L34
 260:FWLIB/src/stm32f4xx_can.c ****     }
 159              		.loc 1 260 0
 160 0034 0368     		ldr	r3, [r0]
 161 0036 23F08003 		bic	r3, r3, #128
 162 003a 0360     		str	r3, [r0]
 163              	.L18:
 264:FWLIB/src/stm32f4xx_can.c ****     {
 164              		.loc 1 264 0
 165 003c CB79     		ldrb	r3, [r1, #7]	@ zero_extendqisi2
 166 003e 012B     		cmp	r3, #1
 167 0040 39D0     		beq	.L35
 270:FWLIB/src/stm32f4xx_can.c ****     }
 168              		.loc 1 270 0
 169 0042 0368     		ldr	r3, [r0]
 170 0044 23F04003 		bic	r3, r3, #64
 171 0048 0360     		str	r3, [r0]
 172              	.L20:
 274:FWLIB/src/stm32f4xx_can.c ****     {
 173              		.loc 1 274 0
 174 004a 0B7A     		ldrb	r3, [r1, #8]	@ zero_extendqisi2
 175 004c 012B     		cmp	r3, #1
 176 004e 37D0     		beq	.L36
 280:FWLIB/src/stm32f4xx_can.c ****     }
 177              		.loc 1 280 0
 178 0050 0368     		ldr	r3, [r0]
 179 0052 23F02003 		bic	r3, r3, #32
 180 0056 0360     		str	r3, [r0]
 181              	.L22:
 284:FWLIB/src/stm32f4xx_can.c ****     {
 182              		.loc 1 284 0
 183 0058 4B7A     		ldrb	r3, [r1, #9]	@ zero_extendqisi2
 184 005a 012B     		cmp	r3, #1
 185 005c 35D0     		beq	.L37
 290:FWLIB/src/stm32f4xx_can.c ****     }
 186              		.loc 1 290 0
 187 005e 0368     		ldr	r3, [r0]
 188 0060 23F01003 		bic	r3, r3, #16
 189 0064 0360     		str	r3, [r0]
 190              	.L24:
 294:FWLIB/src/stm32f4xx_can.c ****     {
ARM GAS  /tmp/ccweFGY7.s 			page 37


 191              		.loc 1 294 0
 192 0066 8B7A     		ldrb	r3, [r1, #10]	@ zero_extendqisi2
 193 0068 012B     		cmp	r3, #1
 194 006a 33D0     		beq	.L38
 300:FWLIB/src/stm32f4xx_can.c ****     }
 195              		.loc 1 300 0
 196 006c 0368     		ldr	r3, [r0]
 197 006e 23F00803 		bic	r3, r3, #8
 198 0072 0360     		str	r3, [r0]
 199              	.L26:
 304:FWLIB/src/stm32f4xx_can.c ****     {
 200              		.loc 1 304 0
 201 0074 CB7A     		ldrb	r3, [r1, #11]	@ zero_extendqisi2
 202 0076 012B     		cmp	r3, #1
 203 0078 31D0     		beq	.L39
 310:FWLIB/src/stm32f4xx_can.c ****     }
 204              		.loc 1 310 0
 205 007a 0368     		ldr	r3, [r0]
 206 007c 23F00403 		bic	r3, r3, #4
 207 0080 0360     		str	r3, [r0]
 208              	.L28:
 314:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 209              		.loc 1 314 0
 210 0082 8A78     		ldrb	r2, [r1, #2]	@ zero_extendqisi2
 315:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 211              		.loc 1 315 0
 212 0084 CB78     		ldrb	r3, [r1, #3]	@ zero_extendqisi2
 213 0086 1B06     		lsls	r3, r3, #24
 314:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 214              		.loc 1 314 0
 215 0088 43EA8273 		orr	r3, r3, r2, lsl #30
 316:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 216              		.loc 1 316 0
 217 008c 0A79     		ldrb	r2, [r1, #4]	@ zero_extendqisi2
 315:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 218              		.loc 1 315 0
 219 008e 43EA0243 		orr	r3, r3, r2, lsl #16
 317:FWLIB/src/stm32f4xx_can.c ****                ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 220              		.loc 1 317 0
 221 0092 4A79     		ldrb	r2, [r1, #5]	@ zero_extendqisi2
 316:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 222              		.loc 1 316 0
 223 0094 43EA0253 		orr	r3, r3, r2, lsl #20
 318:FWLIB/src/stm32f4xx_can.c **** 
 224              		.loc 1 318 0
 225 0098 0A88     		ldrh	r2, [r1]
 226 009a 013A     		subs	r2, r2, #1
 317:FWLIB/src/stm32f4xx_can.c ****                ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 227              		.loc 1 317 0
 228 009c 1343     		orrs	r3, r3, r2
 314:FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 229              		.loc 1 314 0
 230 009e C361     		str	r3, [r0, #28]
 321:FWLIB/src/stm32f4xx_can.c **** 
 231              		.loc 1 321 0
 232 00a0 0368     		ldr	r3, [r0]
 233 00a2 23F00103 		bic	r3, r3, #1
ARM GAS  /tmp/ccweFGY7.s 			page 38


 234 00a6 0360     		str	r3, [r0]
 235              	.LVL16:
 324:FWLIB/src/stm32f4xx_can.c **** 
 236              		.loc 1 324 0
 237 00a8 0023     		movs	r3, #0
 326:FWLIB/src/stm32f4xx_can.c ****    {
 238              		.loc 1 326 0
 239 00aa 1EE0     		b	.L29
 240              	.LVL17:
 241              	.L34:
 256:FWLIB/src/stm32f4xx_can.c ****     }
 242              		.loc 1 256 0
 243 00ac 0368     		ldr	r3, [r0]
 244 00ae 43F08003 		orr	r3, r3, #128
 245 00b2 0360     		str	r3, [r0]
 246 00b4 C2E7     		b	.L18
 247              	.L35:
 266:FWLIB/src/stm32f4xx_can.c ****     }
 248              		.loc 1 266 0
 249 00b6 0368     		ldr	r3, [r0]
 250 00b8 43F04003 		orr	r3, r3, #64
 251 00bc 0360     		str	r3, [r0]
 252 00be C4E7     		b	.L20
 253              	.L36:
 276:FWLIB/src/stm32f4xx_can.c ****     }
 254              		.loc 1 276 0
 255 00c0 0368     		ldr	r3, [r0]
 256 00c2 43F02003 		orr	r3, r3, #32
 257 00c6 0360     		str	r3, [r0]
 258 00c8 C6E7     		b	.L22
 259              	.L37:
 286:FWLIB/src/stm32f4xx_can.c ****     }
 260              		.loc 1 286 0
 261 00ca 0368     		ldr	r3, [r0]
 262 00cc 43F01003 		orr	r3, r3, #16
 263 00d0 0360     		str	r3, [r0]
 264 00d2 C8E7     		b	.L24
 265              	.L38:
 296:FWLIB/src/stm32f4xx_can.c ****     }
 266              		.loc 1 296 0
 267 00d4 0368     		ldr	r3, [r0]
 268 00d6 43F00803 		orr	r3, r3, #8
 269 00da 0360     		str	r3, [r0]
 270 00dc CAE7     		b	.L26
 271              	.L39:
 306:FWLIB/src/stm32f4xx_can.c ****     }
 272              		.loc 1 306 0
 273 00de 0368     		ldr	r3, [r0]
 274 00e0 43F00403 		orr	r3, r3, #4
 275 00e4 0360     		str	r3, [r0]
 276 00e6 CCE7     		b	.L28
 277              	.LVL18:
 278              	.L31:
 328:FWLIB/src/stm32f4xx_can.c ****    }
 279              		.loc 1 328 0
 280 00e8 0133     		adds	r3, r3, #1
 281              	.LVL19:
ARM GAS  /tmp/ccweFGY7.s 			page 39


 282              	.L29:
 326:FWLIB/src/stm32f4xx_can.c ****    {
 283              		.loc 1 326 0
 284 00ea 4268     		ldr	r2, [r0, #4]
 285 00ec 12F0010F 		tst	r2, #1
 286 00f0 03D0     		beq	.L30
 326:FWLIB/src/stm32f4xx_can.c ****    {
 287              		.loc 1 326 0 is_stmt 0 discriminator 1
 288 00f2 4FF6FF72 		movw	r2, #65535
 289 00f6 9342     		cmp	r3, r2
 290 00f8 F6D1     		bne	.L31
 291              	.L30:
 332:FWLIB/src/stm32f4xx_can.c ****     {
 292              		.loc 1 332 0 is_stmt 1
 293 00fa 4368     		ldr	r3, [r0, #4]
 294              	.LVL20:
 295 00fc 13F0010F 		tst	r3, #1
 296 0100 01D1     		bne	.L40
 338:FWLIB/src/stm32f4xx_can.c ****     }
 297              		.loc 1 338 0
 298 0102 0120     		movs	r0, #1
 299              	.LVL21:
 344:FWLIB/src/stm32f4xx_can.c **** 
 300              		.loc 1 344 0
 301 0104 7047     		bx	lr
 302              	.LVL22:
 303              	.L40:
 334:FWLIB/src/stm32f4xx_can.c ****     }
 304              		.loc 1 334 0
 305 0106 0020     		movs	r0, #0
 306              	.LVL23:
 307 0108 7047     		bx	lr
 308              	.LVL24:
 309              	.L32:
 249:FWLIB/src/stm32f4xx_can.c ****   }
 310              		.loc 1 249 0
 311 010a 0020     		movs	r0, #0
 312              	.LVL25:
 313 010c 7047     		bx	lr
 314              		.cfi_endproc
 315              	.LFE124:
 317              		.section	.text.CAN_FilterInit,"ax",%progbits
 318              		.align	1
 319              		.global	CAN_FilterInit
 320              		.syntax unified
 321              		.thumb
 322              		.thumb_func
 323              		.fpu fpv4-sp-d16
 325              	CAN_FilterInit:
 326              	.LFB125:
 449:FWLIB/src/stm32f4xx_can.c ****   uint32_t filter_number_bit_pos = 0;
 327              		.loc 1 449 0
 328              		.cfi_startproc
 329              		@ args = 0, pretend = 0, frame = 0
 330              		@ frame_needed = 0, uses_anonymous_args = 0
 331              		@ link register save eliminated.
 332              	.LVL26:
ARM GAS  /tmp/ccweFGY7.s 			page 40


 333 0000 70B4     		push	{r4, r5, r6}
 334              	.LCFI1:
 335              		.cfi_def_cfa_offset 12
 336              		.cfi_offset 4, -12
 337              		.cfi_offset 5, -8
 338              		.cfi_offset 6, -4
 339              	.LVL27:
 458:FWLIB/src/stm32f4xx_can.c **** 
 340              		.loc 1 458 0
 341 0002 837A     		ldrb	r3, [r0, #10]	@ zero_extendqisi2
 342 0004 0122     		movs	r2, #1
 343 0006 02FA03F3 		lsl	r3, r2, r3
 344              	.LVL28:
 461:FWLIB/src/stm32f4xx_can.c **** 
 345              		.loc 1 461 0
 346 000a 3B4A     		ldr	r2, .L53
 347 000c D2F80012 		ldr	r1, [r2, #512]
 348 0010 41F00101 		orr	r1, r1, #1
 349 0014 C2F80012 		str	r1, [r2, #512]
 464:FWLIB/src/stm32f4xx_can.c **** 
 350              		.loc 1 464 0
 351 0018 D2F81C42 		ldr	r4, [r2, #540]
 352 001c D943     		mvns	r1, r3
 353 001e 0C40     		ands	r4, r4, r1
 354 0020 C2F81C42 		str	r4, [r2, #540]
 467:FWLIB/src/stm32f4xx_can.c ****   {
 355              		.loc 1 467 0
 356 0024 027B     		ldrb	r2, [r0, #12]	@ zero_extendqisi2
 357 0026 B2B9     		cbnz	r2, .L42
 470:FWLIB/src/stm32f4xx_can.c **** 
 358              		.loc 1 470 0
 359 0028 334A     		ldr	r2, .L53
 360 002a D2F80C42 		ldr	r4, [r2, #524]
 361 002e 0C40     		ands	r4, r4, r1
 362 0030 C2F80C42 		str	r4, [r2, #524]
 474:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 363              		.loc 1 474 0
 364 0034 847A     		ldrb	r4, [r0, #10]	@ zero_extendqisi2
 475:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 365              		.loc 1 475 0
 366 0036 C688     		ldrh	r6, [r0, #6]
 476:FWLIB/src/stm32f4xx_can.c **** 
 367              		.loc 1 476 0
 368 0038 4588     		ldrh	r5, [r0, #2]
 475:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 369              		.loc 1 475 0
 370 003a 45EA0645 		orr	r5, r5, r6, lsl #16
 474:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 371              		.loc 1 474 0
 372 003e 4834     		adds	r4, r4, #72
 373 0040 42F83450 		str	r5, [r2, r4, lsl #3]
 480:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 374              		.loc 1 480 0
 375 0044 857A     		ldrb	r5, [r0, #10]	@ zero_extendqisi2
 481:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 376              		.loc 1 481 0
 377 0046 8688     		ldrh	r6, [r0, #4]
ARM GAS  /tmp/ccweFGY7.s 			page 41


 482:FWLIB/src/stm32f4xx_can.c ****   }
 378              		.loc 1 482 0
 379 0048 0488     		ldrh	r4, [r0]
 481:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 380              		.loc 1 481 0
 381 004a 44EA0644 		orr	r4, r4, r6, lsl #16
 480:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 382              		.loc 1 480 0
 383 004e 4835     		adds	r5, r5, #72
 384 0050 02EBC502 		add	r2, r2, r5, lsl #3
 385 0054 5460     		str	r4, [r2, #4]
 386              	.L42:
 485:FWLIB/src/stm32f4xx_can.c ****   {
 387              		.loc 1 485 0
 388 0056 027B     		ldrb	r2, [r0, #12]	@ zero_extendqisi2
 389 0058 012A     		cmp	r2, #1
 390 005a 1FD0     		beq	.L50
 391              	.L43:
 500:FWLIB/src/stm32f4xx_can.c ****   {
 392              		.loc 1 500 0
 393 005c C27A     		ldrb	r2, [r0, #11]	@ zero_extendqisi2
 394 005e 002A     		cmp	r2, #0
 395 0060 34D1     		bne	.L44
 503:FWLIB/src/stm32f4xx_can.c ****   }
 396              		.loc 1 503 0
 397 0062 254C     		ldr	r4, .L53
 398 0064 D4F80422 		ldr	r2, [r4, #516]
 399 0068 0A40     		ands	r2, r2, r1
 400 006a C4F80422 		str	r2, [r4, #516]
 401              	.L45:
 512:FWLIB/src/stm32f4xx_can.c ****   {
 402              		.loc 1 512 0
 403 006e 0289     		ldrh	r2, [r0, #8]
 404 0070 2AB9     		cbnz	r2, .L46
 515:FWLIB/src/stm32f4xx_can.c ****   }
 405              		.loc 1 515 0
 406 0072 214A     		ldr	r2, .L53
 407 0074 D2F81442 		ldr	r4, [r2, #532]
 408 0078 2140     		ands	r1, r1, r4
 409 007a C2F81412 		str	r1, [r2, #532]
 410              	.L46:
 518:FWLIB/src/stm32f4xx_can.c ****   {
 411              		.loc 1 518 0
 412 007e 0289     		ldrh	r2, [r0, #8]
 413 0080 012A     		cmp	r2, #1
 414 0082 2AD0     		beq	.L51
 415              	.L47:
 525:FWLIB/src/stm32f4xx_can.c ****   {
 416              		.loc 1 525 0
 417 0084 427B     		ldrb	r2, [r0, #13]	@ zero_extendqisi2
 418 0086 012A     		cmp	r2, #1
 419 0088 2ED0     		beq	.L52
 420              	.LVL29:
 421              	.L48:
 531:FWLIB/src/stm32f4xx_can.c **** }
 422              		.loc 1 531 0
 423 008a 1B4A     		ldr	r2, .L53
ARM GAS  /tmp/ccweFGY7.s 			page 42


 424 008c D2F80032 		ldr	r3, [r2, #512]
 425 0090 23F00103 		bic	r3, r3, #1
 426 0094 C2F80032 		str	r3, [r2, #512]
 532:FWLIB/src/stm32f4xx_can.c **** #endif /* STM32F413_423xx */
 427              		.loc 1 532 0
 428 0098 70BC     		pop	{r4, r5, r6}
 429              	.LCFI2:
 430              		.cfi_remember_state
 431              		.cfi_restore 6
 432              		.cfi_restore 5
 433              		.cfi_restore 4
 434              		.cfi_def_cfa_offset 0
 435 009a 7047     		bx	lr
 436              	.LVL30:
 437              	.L50:
 438              	.LCFI3:
 439              		.cfi_restore_state
 488:FWLIB/src/stm32f4xx_can.c ****     /* 32-bit identifier or First 32-bit identifier */
 440              		.loc 1 488 0
 441 009c 164A     		ldr	r2, .L53
 442 009e D2F80C42 		ldr	r4, [r2, #524]
 443 00a2 1C43     		orrs	r4, r4, r3
 444 00a4 C2F80C42 		str	r4, [r2, #524]
 490:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 445              		.loc 1 490 0
 446 00a8 847A     		ldrb	r4, [r0, #10]	@ zero_extendqisi2
 491:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 447              		.loc 1 491 0
 448 00aa 0688     		ldrh	r6, [r0]
 492:FWLIB/src/stm32f4xx_can.c ****     /* 32-bit mask or Second 32-bit identifier */
 449              		.loc 1 492 0
 450 00ac 4588     		ldrh	r5, [r0, #2]
 491:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 451              		.loc 1 491 0
 452 00ae 45EA0645 		orr	r5, r5, r6, lsl #16
 490:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 453              		.loc 1 490 0
 454 00b2 4834     		adds	r4, r4, #72
 455 00b4 42F83450 		str	r5, [r2, r4, lsl #3]
 494:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 456              		.loc 1 494 0
 457 00b8 857A     		ldrb	r5, [r0, #10]	@ zero_extendqisi2
 495:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 458              		.loc 1 495 0
 459 00ba 8688     		ldrh	r6, [r0, #4]
 496:FWLIB/src/stm32f4xx_can.c ****   }
 460              		.loc 1 496 0
 461 00bc C488     		ldrh	r4, [r0, #6]
 495:FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 462              		.loc 1 495 0
 463 00be 44EA0644 		orr	r4, r4, r6, lsl #16
 494:FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 464              		.loc 1 494 0
 465 00c2 4835     		adds	r5, r5, #72
 466 00c4 02EBC502 		add	r2, r2, r5, lsl #3
 467 00c8 5460     		str	r4, [r2, #4]
 468 00ca C7E7     		b	.L43
ARM GAS  /tmp/ccweFGY7.s 			page 43


 469              	.L44:
 508:FWLIB/src/stm32f4xx_can.c ****   }
 470              		.loc 1 508 0
 471 00cc 0A4C     		ldr	r4, .L53
 472 00ce D4F80422 		ldr	r2, [r4, #516]
 473 00d2 1A43     		orrs	r2, r2, r3
 474 00d4 C4F80422 		str	r2, [r4, #516]
 475 00d8 C9E7     		b	.L45
 476              	.L51:
 521:FWLIB/src/stm32f4xx_can.c ****   }
 477              		.loc 1 521 0
 478 00da 0749     		ldr	r1, .L53
 479 00dc D1F81422 		ldr	r2, [r1, #532]
 480 00e0 1A43     		orrs	r2, r2, r3
 481 00e2 C1F81422 		str	r2, [r1, #532]
 482 00e6 CDE7     		b	.L47
 483              	.L52:
 527:FWLIB/src/stm32f4xx_can.c ****   }
 484              		.loc 1 527 0
 485 00e8 034A     		ldr	r2, .L53
 486 00ea D2F81C12 		ldr	r1, [r2, #540]
 487 00ee 0B43     		orrs	r3, r3, r1
 488              	.LVL31:
 489 00f0 C2F81C32 		str	r3, [r2, #540]
 490 00f4 C9E7     		b	.L48
 491              	.L54:
 492 00f6 00BF     		.align	2
 493              	.L53:
 494 00f8 00640040 		.word	1073767424
 495              		.cfi_endproc
 496              	.LFE125:
 498              		.section	.text.CAN_StructInit,"ax",%progbits
 499              		.align	1
 500              		.global	CAN_StructInit
 501              		.syntax unified
 502              		.thumb
 503              		.thumb_func
 504              		.fpu fpv4-sp-d16
 506              	CAN_StructInit:
 507              	.LFB126:
 541:FWLIB/src/stm32f4xx_can.c ****   /* Reset CAN init structure parameters values */
 508              		.loc 1 541 0
 509              		.cfi_startproc
 510              		@ args = 0, pretend = 0, frame = 0
 511              		@ frame_needed = 0, uses_anonymous_args = 0
 512              		@ link register save eliminated.
 513              	.LVL32:
 545:FWLIB/src/stm32f4xx_can.c ****   
 514              		.loc 1 545 0
 515 0000 0023     		movs	r3, #0
 516 0002 8371     		strb	r3, [r0, #6]
 548:FWLIB/src/stm32f4xx_can.c ****   
 517              		.loc 1 548 0
 518 0004 C371     		strb	r3, [r0, #7]
 551:FWLIB/src/stm32f4xx_can.c ****   
 519              		.loc 1 551 0
 520 0006 0372     		strb	r3, [r0, #8]
ARM GAS  /tmp/ccweFGY7.s 			page 44


 554:FWLIB/src/stm32f4xx_can.c ****   
 521              		.loc 1 554 0
 522 0008 4372     		strb	r3, [r0, #9]
 557:FWLIB/src/stm32f4xx_can.c ****   
 523              		.loc 1 557 0
 524 000a 8372     		strb	r3, [r0, #10]
 560:FWLIB/src/stm32f4xx_can.c ****   
 525              		.loc 1 560 0
 526 000c C372     		strb	r3, [r0, #11]
 563:FWLIB/src/stm32f4xx_can.c ****   
 527              		.loc 1 563 0
 528 000e 8370     		strb	r3, [r0, #2]
 566:FWLIB/src/stm32f4xx_can.c ****   
 529              		.loc 1 566 0
 530 0010 C370     		strb	r3, [r0, #3]
 569:FWLIB/src/stm32f4xx_can.c ****   
 531              		.loc 1 569 0
 532 0012 0323     		movs	r3, #3
 533 0014 0371     		strb	r3, [r0, #4]
 572:FWLIB/src/stm32f4xx_can.c ****   
 534              		.loc 1 572 0
 535 0016 0223     		movs	r3, #2
 536 0018 4371     		strb	r3, [r0, #5]
 575:FWLIB/src/stm32f4xx_can.c **** }
 537              		.loc 1 575 0
 538 001a 0123     		movs	r3, #1
 539 001c 0380     		strh	r3, [r0]	@ movhi
 540 001e 7047     		bx	lr
 541              		.cfi_endproc
 542              	.LFE126:
 544              		.section	.text.CAN_SlaveStartBank,"ax",%progbits
 545              		.align	1
 546              		.global	CAN_SlaveStartBank
 547              		.syntax unified
 548              		.thumb
 549              		.thumb_func
 550              		.fpu fpv4-sp-d16
 552              	CAN_SlaveStartBank:
 553              	.LFB127:
 607:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 554              		.loc 1 607 0
 555              		.cfi_startproc
 556              		@ args = 0, pretend = 0, frame = 0
 557              		@ frame_needed = 0, uses_anonymous_args = 0
 558              		@ link register save eliminated.
 559              	.LVL33:
 612:FWLIB/src/stm32f4xx_can.c ****   
 560              		.loc 1 612 0
 561 0000 0D4B     		ldr	r3, .L57
 562 0002 D3F80022 		ldr	r2, [r3, #512]
 563 0006 42F00102 		orr	r2, r2, #1
 564 000a C3F80022 		str	r2, [r3, #512]
 615:FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 565              		.loc 1 615 0
 566 000e D3F80022 		ldr	r2, [r3, #512]
 567 0012 22F47C52 		bic	r2, r2, #16128
 568 0016 22F00E02 		bic	r2, r2, #14
ARM GAS  /tmp/ccweFGY7.s 			page 45


 569 001a C3F80022 		str	r2, [r3, #512]
 616:FWLIB/src/stm32f4xx_can.c ****   
 570              		.loc 1 616 0
 571 001e D3F80022 		ldr	r2, [r3, #512]
 572 0022 42EA0020 		orr	r0, r2, r0, lsl #8
 573              	.LVL34:
 574 0026 C3F80002 		str	r0, [r3, #512]
 619:FWLIB/src/stm32f4xx_can.c **** }
 575              		.loc 1 619 0
 576 002a D3F80022 		ldr	r2, [r3, #512]
 577 002e 22F00102 		bic	r2, r2, #1
 578 0032 C3F80022 		str	r2, [r3, #512]
 579 0036 7047     		bx	lr
 580              	.L58:
 581              		.align	2
 582              	.L57:
 583 0038 00640040 		.word	1073767424
 584              		.cfi_endproc
 585              	.LFE127:
 587              		.section	.text.CAN_DBGFreeze,"ax",%progbits
 588              		.align	1
 589              		.global	CAN_DBGFreeze
 590              		.syntax unified
 591              		.thumb
 592              		.thumb_func
 593              		.fpu fpv4-sp-d16
 595              	CAN_DBGFreeze:
 596              	.LFB128:
 633:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 597              		.loc 1 633 0
 598              		.cfi_startproc
 599              		@ args = 0, pretend = 0, frame = 0
 600              		@ frame_needed = 0, uses_anonymous_args = 0
 601              		@ link register save eliminated.
 602              	.LVL35:
 638:FWLIB/src/stm32f4xx_can.c ****   {
 603              		.loc 1 638 0
 604 0000 21B9     		cbnz	r1, .L62
 646:FWLIB/src/stm32f4xx_can.c ****   }
 605              		.loc 1 646 0
 606 0002 0368     		ldr	r3, [r0]
 607 0004 23F48033 		bic	r3, r3, #65536
 608 0008 0360     		str	r3, [r0]
 609 000a 7047     		bx	lr
 610              	.L62:
 641:FWLIB/src/stm32f4xx_can.c ****   }
 611              		.loc 1 641 0
 612 000c 0368     		ldr	r3, [r0]
 613 000e 43F48033 		orr	r3, r3, #65536
 614 0012 0360     		str	r3, [r0]
 615 0014 7047     		bx	lr
 616              		.cfi_endproc
 617              	.LFE128:
 619              		.section	.text.CAN_TTComModeCmd,"ax",%progbits
 620              		.align	1
 621              		.global	CAN_TTComModeCmd
 622              		.syntax unified
ARM GAS  /tmp/ccweFGY7.s 			page 46


 623              		.thumb
 624              		.thumb_func
 625              		.fpu fpv4-sp-d16
 627              	CAN_TTComModeCmd:
 628              	.LFB129:
 664:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 629              		.loc 1 664 0
 630              		.cfi_startproc
 631              		@ args = 0, pretend = 0, frame = 0
 632              		@ frame_needed = 0, uses_anonymous_args = 0
 633              		@ link register save eliminated.
 634              	.LVL36:
 668:FWLIB/src/stm32f4xx_can.c ****   {
 635              		.loc 1 668 0
 636 0000 B1B9     		cbnz	r1, .L66
 681:FWLIB/src/stm32f4xx_can.c **** 
 637              		.loc 1 681 0
 638 0002 0368     		ldr	r3, [r0]
 639 0004 23F08003 		bic	r3, r3, #128
 640 0008 0360     		str	r3, [r0]
 684:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 641              		.loc 1 684 0
 642 000a D0F88431 		ldr	r3, [r0, #388]
 643 000e 23F48073 		bic	r3, r3, #256
 644 0012 C0F88431 		str	r3, [r0, #388]
 685:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 645              		.loc 1 685 0
 646 0016 D0F89431 		ldr	r3, [r0, #404]
 647 001a 23F48073 		bic	r3, r3, #256
 648 001e C0F89431 		str	r3, [r0, #404]
 686:FWLIB/src/stm32f4xx_can.c ****   }
 649              		.loc 1 686 0
 650 0022 D0F8A431 		ldr	r3, [r0, #420]
 651 0026 23F48073 		bic	r3, r3, #256
 652 002a C0F8A431 		str	r3, [r0, #420]
 653 002e 7047     		bx	lr
 654              	.L66:
 671:FWLIB/src/stm32f4xx_can.c **** 
 655              		.loc 1 671 0
 656 0030 0368     		ldr	r3, [r0]
 657 0032 43F08003 		orr	r3, r3, #128
 658 0036 0360     		str	r3, [r0]
 674:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 659              		.loc 1 674 0
 660 0038 D0F88431 		ldr	r3, [r0, #388]
 661 003c 43F48073 		orr	r3, r3, #256
 662 0040 C0F88431 		str	r3, [r0, #388]
 675:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 663              		.loc 1 675 0
 664 0044 D0F89431 		ldr	r3, [r0, #404]
 665 0048 43F48073 		orr	r3, r3, #256
 666 004c C0F89431 		str	r3, [r0, #404]
 676:FWLIB/src/stm32f4xx_can.c ****   }
 667              		.loc 1 676 0
 668 0050 D0F8A431 		ldr	r3, [r0, #420]
 669 0054 43F48073 		orr	r3, r3, #256
 670 0058 C0F8A431 		str	r3, [r0, #420]
ARM GAS  /tmp/ccweFGY7.s 			page 47


 671 005c 7047     		bx	lr
 672              		.cfi_endproc
 673              	.LFE129:
 675              		.section	.text.CAN_Transmit,"ax",%progbits
 676              		.align	1
 677              		.global	CAN_Transmit
 678              		.syntax unified
 679              		.thumb
 680              		.thumb_func
 681              		.fpu fpv4-sp-d16
 683              	CAN_Transmit:
 684              	.LFB130:
 719:FWLIB/src/stm32f4xx_can.c ****   uint8_t transmit_mailbox = 0;
 685              		.loc 1 719 0
 686              		.cfi_startproc
 687              		@ args = 0, pretend = 0, frame = 0
 688              		@ frame_needed = 0, uses_anonymous_args = 0
 689              		@ link register save eliminated.
 690              	.LVL37:
 691 0000 0346     		mov	r3, r0
 692              	.LVL38:
 728:FWLIB/src/stm32f4xx_can.c ****   {
 693              		.loc 1 728 0
 694 0002 8268     		ldr	r2, [r0, #8]
 695 0004 12F0806F 		tst	r2, #67108864
 696 0008 09D1     		bne	.L72
 732:FWLIB/src/stm32f4xx_can.c ****   {
 697              		.loc 1 732 0
 698 000a 8268     		ldr	r2, [r0, #8]
 699 000c 12F0006F 		tst	r2, #134217728
 700 0010 4ED1     		bne	.L73
 736:FWLIB/src/stm32f4xx_can.c ****   {
 701              		.loc 1 736 0
 702 0012 8268     		ldr	r2, [r0, #8]
 703 0014 12F0805F 		tst	r2, #268435456
 704 0018 4CD0     		beq	.L74
 738:FWLIB/src/stm32f4xx_can.c ****   }
 705              		.loc 1 738 0
 706 001a 0220     		movs	r0, #2
 707              	.LVL39:
 708 001c 00E0     		b	.L68
 709              	.LVL40:
 710              	.L72:
 730:FWLIB/src/stm32f4xx_can.c ****   }
 711              		.loc 1 730 0
 712 001e 0020     		movs	r0, #0
 713              	.LVL41:
 714              	.L68:
 745:FWLIB/src/stm32f4xx_can.c ****   {
 715              		.loc 1 745 0
 716 0020 0428     		cmp	r0, #4
 717 0022 44D0     		beq	.L79
 719:FWLIB/src/stm32f4xx_can.c ****   uint8_t transmit_mailbox = 0;
 718              		.loc 1 719 0
 719 0024 F0B4     		push	{r4, r5, r6, r7}
 720              	.LCFI4:
 721              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccweFGY7.s 			page 48


 722              		.cfi_offset 4, -16
 723              		.cfi_offset 5, -12
 724              		.cfi_offset 6, -8
 725              		.cfi_offset 7, -4
 748:FWLIB/src/stm32f4xx_can.c ****     if (TxMessage->IDE == CAN_Id_Standard)
 726              		.loc 1 748 0
 727 0026 0546     		mov	r5, r0
 728 0028 00F11802 		add	r2, r0, #24
 729 002c 1201     		lsls	r2, r2, #4
 730 002e 9C58     		ldr	r4, [r3, r2]
 731 0030 04F00104 		and	r4, r4, #1
 732 0034 9C50     		str	r4, [r3, r2]
 749:FWLIB/src/stm32f4xx_can.c ****     {
 733              		.loc 1 749 0
 734 0036 0A7A     		ldrb	r2, [r1, #8]	@ zero_extendqisi2
 735 0038 002A     		cmp	r2, #0
 736 003a 3DD1     		bne	.L70
 752:FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 737              		.loc 1 752 0
 738 003c 00F11802 		add	r2, r0, #24
 739 0040 1201     		lsls	r2, r2, #4
 740 0042 9C58     		ldr	r4, [r3, r2]
 741 0044 0F68     		ldr	r7, [r1]
 753:FWLIB/src/stm32f4xx_can.c ****     }
 742              		.loc 1 753 0
 743 0046 4E7A     		ldrb	r6, [r1, #9]	@ zero_extendqisi2
 752:FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 744              		.loc 1 752 0
 745 0048 46EA4756 		orr	r6, r6, r7, lsl #21
 746 004c 3443     		orrs	r4, r4, r6
 747 004e 9C50     		str	r4, [r3, r2]
 748              	.L71:
 764:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 749              		.loc 1 764 0
 750 0050 8A7A     		ldrb	r2, [r1, #10]	@ zero_extendqisi2
 751 0052 02F00F02 		and	r2, r2, #15
 752 0056 8A72     		strb	r2, [r1, #10]
 765:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 753              		.loc 1 765 0
 754 0058 05F11804 		add	r4, r5, #24
 755 005c 2401     		lsls	r4, r4, #4
 756 005e 1A19     		adds	r2, r3, r4
 757 0060 5668     		ldr	r6, [r2, #4]
 758 0062 26F00F06 		bic	r6, r6, #15
 759 0066 5660     		str	r6, [r2, #4]
 766:FWLIB/src/stm32f4xx_can.c **** 
 760              		.loc 1 766 0
 761 0068 5668     		ldr	r6, [r2, #4]
 762 006a 8F7A     		ldrb	r7, [r1, #10]	@ zero_extendqisi2
 763 006c 3E43     		orrs	r6, r6, r7
 764 006e 5660     		str	r6, [r2, #4]
 769:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 765              		.loc 1 769 0
 766 0070 8E7B     		ldrb	r6, [r1, #14]	@ zero_extendqisi2
 770:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 767              		.loc 1 770 0
 768 0072 4A7B     		ldrb	r2, [r1, #13]	@ zero_extendqisi2
ARM GAS  /tmp/ccweFGY7.s 			page 49


 769 0074 1204     		lsls	r2, r2, #16
 769:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 770              		.loc 1 769 0
 771 0076 42EA0662 		orr	r2, r2, r6, lsl #24
 771:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[0]));
 772              		.loc 1 771 0
 773 007a 0E7B     		ldrb	r6, [r1, #12]	@ zero_extendqisi2
 770:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 774              		.loc 1 770 0
 775 007c 42EA0622 		orr	r2, r2, r6, lsl #8
 772:FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 776              		.loc 1 772 0
 777 0080 CE7A     		ldrb	r6, [r1, #11]	@ zero_extendqisi2
 771:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[0]));
 778              		.loc 1 771 0
 779 0082 3243     		orrs	r2, r2, r6
 769:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 780              		.loc 1 769 0
 781 0084 03EB0515 		add	r5, r3, r5, lsl #4
 782 0088 C5F88821 		str	r2, [r5, #392]
 773:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 783              		.loc 1 773 0
 784 008c 8E7C     		ldrb	r6, [r1, #18]	@ zero_extendqisi2
 774:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 785              		.loc 1 774 0
 786 008e 4A7C     		ldrb	r2, [r1, #17]	@ zero_extendqisi2
 787 0090 1204     		lsls	r2, r2, #16
 773:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 788              		.loc 1 773 0
 789 0092 42EA0662 		orr	r2, r2, r6, lsl #24
 775:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[4]));
 790              		.loc 1 775 0
 791 0096 0E7C     		ldrb	r6, [r1, #16]	@ zero_extendqisi2
 774:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 792              		.loc 1 774 0
 793 0098 42EA0622 		orr	r2, r2, r6, lsl #8
 776:FWLIB/src/stm32f4xx_can.c ****     /* Request transmission */
 794              		.loc 1 776 0
 795 009c C97B     		ldrb	r1, [r1, #15]	@ zero_extendqisi2
 796              	.LVL42:
 775:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[4]));
 797              		.loc 1 775 0
 798 009e 0A43     		orrs	r2, r2, r1
 773:FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 799              		.loc 1 773 0
 800 00a0 C5F88C21 		str	r2, [r5, #396]
 778:FWLIB/src/stm32f4xx_can.c ****   }
 801              		.loc 1 778 0
 802 00a4 1A59     		ldr	r2, [r3, r4]
 803 00a6 42F00102 		orr	r2, r2, #1
 804 00aa 1A51     		str	r2, [r3, r4]
 781:FWLIB/src/stm32f4xx_can.c **** 
 805              		.loc 1 781 0
 806 00ac F0BC     		pop	{r4, r5, r6, r7}
 807              	.LCFI5:
 808              		.cfi_restore 7
 809              		.cfi_restore 6
ARM GAS  /tmp/ccweFGY7.s 			page 50


 810              		.cfi_restore 5
 811              		.cfi_restore 4
 812              		.cfi_def_cfa_offset 0
 813              	.L79:
 814 00ae 7047     		bx	lr
 815              	.LVL43:
 816              	.L73:
 734:FWLIB/src/stm32f4xx_can.c ****   }
 817              		.loc 1 734 0
 818 00b0 0120     		movs	r0, #1
 819              	.LVL44:
 820 00b2 B5E7     		b	.L68
 821              	.LVL45:
 822              	.L74:
 742:FWLIB/src/stm32f4xx_can.c ****   }
 823              		.loc 1 742 0
 824 00b4 0420     		movs	r0, #4
 825              	.LVL46:
 826 00b6 B3E7     		b	.L68
 827              	.LVL47:
 828              	.L70:
 829              	.LCFI6:
 830              		.cfi_def_cfa_offset 16
 831              		.cfi_offset 4, -16
 832              		.cfi_offset 5, -12
 833              		.cfi_offset 6, -8
 834              		.cfi_offset 7, -4
 758:FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->IDE | \
 835              		.loc 1 758 0
 836 00b8 00F11804 		add	r4, r0, #24
 837 00bc 2401     		lsls	r4, r4, #4
 838 00be 1E59     		ldr	r6, [r3, r4]
 839 00c0 4F68     		ldr	r7, [r1, #4]
 840 00c2 42EAC702 		orr	r2, r2, r7, lsl #3
 760:FWLIB/src/stm32f4xx_can.c ****     }
 841              		.loc 1 760 0
 842 00c6 4F7A     		ldrb	r7, [r1, #9]	@ zero_extendqisi2
 759:FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 843              		.loc 1 759 0
 844 00c8 3A43     		orrs	r2, r2, r7
 758:FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->IDE | \
 845              		.loc 1 758 0
 846 00ca 3243     		orrs	r2, r2, r6
 847 00cc 1A51     		str	r2, [r3, r4]
 848 00ce BFE7     		b	.L71
 849              		.cfi_endproc
 850              	.LFE130:
 852              		.section	.text.CAN_TransmitStatus,"ax",%progbits
 853              		.align	1
 854              		.global	CAN_TransmitStatus
 855              		.syntax unified
 856              		.thumb
 857              		.thumb_func
 858              		.fpu fpv4-sp-d16
 860              	CAN_TransmitStatus:
 861              	.LFB131:
 792:FWLIB/src/stm32f4xx_can.c ****   uint32_t state = 0;
ARM GAS  /tmp/ccweFGY7.s 			page 51


 862              		.loc 1 792 0
 863              		.cfi_startproc
 864              		@ args = 0, pretend = 0, frame = 0
 865              		@ frame_needed = 0, uses_anonymous_args = 0
 866              		@ link register save eliminated.
 867              	.LVL48:
 799:FWLIB/src/stm32f4xx_can.c ****   {
 868              		.loc 1 799 0
 869 0000 0129     		cmp	r1, #1
 870 0002 19D0     		beq	.L82
 871 0004 19B1     		cbz	r1, .L83
 872 0006 0229     		cmp	r1, #2
 873 0008 1AD0     		beq	.L84
 811:FWLIB/src/stm32f4xx_can.c ****       break;
 874              		.loc 1 811 0
 875 000a 0023     		movs	r3, #0
 876 000c 08E0     		b	.L81
 877              	.L83:
 802:FWLIB/src/stm32f4xx_can.c ****       break;
 878              		.loc 1 802 0
 879 000e 8368     		ldr	r3, [r0, #8]
 880 0010 23F07B43 		bic	r3, r3, #-83886080
 881 0014 23F47F03 		bic	r3, r3, #16711680
 882 0018 23F47F43 		bic	r3, r3, #65280
 883 001c 23F0FC03 		bic	r3, r3, #252
 884              	.LVL49:
 885              	.L81:
 814:FWLIB/src/stm32f4xx_can.c ****   {
 886              		.loc 1 814 0
 887 0020 104A     		ldr	r2, .L95
 888 0022 9342     		cmp	r3, r2
 889 0024 17D0     		beq	.L86
 890 0026 13D9     		bls	.L94
 891 0028 0F4A     		ldr	r2, .L95+4
 892 002a 9342     		cmp	r3, r2
 893 002c 15D0     		beq	.L89
 894 002e 0F4A     		ldr	r2, .L95+8
 895 0030 9342     		cmp	r3, r2
 896 0032 14D1     		bne	.L92
 897              	.LVL50:
 831:FWLIB/src/stm32f4xx_can.c ****       break;
 898              		.loc 1 831 0
 899 0034 0120     		movs	r0, #1
 900              	.LVL51:
 832:FWLIB/src/stm32f4xx_can.c ****     default: state = CAN_TxStatus_Failed;
 901              		.loc 1 832 0
 902 0036 7047     		bx	lr
 903              	.LVL52:
 904              	.L82:
 805:FWLIB/src/stm32f4xx_can.c ****       break;
 905              		.loc 1 805 0
 906 0038 8268     		ldr	r2, [r0, #8]
 907 003a 0B4B     		ldr	r3, .L95+4
 908 003c 1340     		ands	r3, r3, r2
 909              	.LVL53:
 806:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_2): 
 910              		.loc 1 806 0
ARM GAS  /tmp/ccweFGY7.s 			page 52


 911 003e EFE7     		b	.L81
 912              	.LVL54:
 913              	.L84:
 808:FWLIB/src/stm32f4xx_can.c ****       break;
 914              		.loc 1 808 0
 915 0040 8368     		ldr	r3, [r0, #8]
 916 0042 23F06F43 		bic	r3, r3, #-285212672
 917 0046 23F47C03 		bic	r3, r3, #16515072
 918 004a 1B0C     		lsrs	r3, r3, #16
 919 004c 1B04     		lsls	r3, r3, #16
 920              	.LVL55:
 809:FWLIB/src/stm32f4xx_can.c ****     default:
 921              		.loc 1 809 0
 922 004e E7E7     		b	.L81
 923              	.L94:
 814:FWLIB/src/stm32f4xx_can.c ****   {
 924              		.loc 1 814 0
 925 0050 2BB9     		cbnz	r3, .L92
 817:FWLIB/src/stm32f4xx_can.c ****       break;
 926              		.loc 1 817 0
 927 0052 0220     		movs	r0, #2
 928              	.LVL56:
 929 0054 7047     		bx	lr
 930              	.LVL57:
 931              	.L86:
 827:FWLIB/src/stm32f4xx_can.c ****       break;
 932              		.loc 1 827 0
 933 0056 0120     		movs	r0, #1
 934              	.LVL58:
 828:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 935              		.loc 1 828 0
 936 0058 7047     		bx	lr
 937              	.LVL59:
 938              	.L89:
 829:FWLIB/src/stm32f4xx_can.c ****       break;
 939              		.loc 1 829 0
 940 005a 0120     		movs	r0, #1
 941              	.LVL60:
 830:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 942              		.loc 1 830 0
 943 005c 7047     		bx	lr
 944              	.LVL61:
 945              	.L92:
 820:FWLIB/src/stm32f4xx_can.c ****       break;
 946              		.loc 1 820 0
 947 005e 0020     		movs	r0, #0
 948              	.LVL62:
 837:FWLIB/src/stm32f4xx_can.c **** 
 949              		.loc 1 837 0
 950 0060 7047     		bx	lr
 951              	.L96:
 952 0062 00BF     		.align	2
 953              	.L95:
 954 0064 03000004 		.word	67108867
 955 0068 00030008 		.word	134218496
 956 006c 00000310 		.word	268632064
 957              		.cfi_endproc
ARM GAS  /tmp/ccweFGY7.s 			page 53


 958              	.LFE131:
 960              		.section	.text.CAN_CancelTransmit,"ax",%progbits
 961              		.align	1
 962              		.global	CAN_CancelTransmit
 963              		.syntax unified
 964              		.thumb
 965              		.thumb_func
 966              		.fpu fpv4-sp-d16
 968              	CAN_CancelTransmit:
 969              	.LFB132:
 847:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 970              		.loc 1 847 0
 971              		.cfi_startproc
 972              		@ args = 0, pretend = 0, frame = 0
 973              		@ frame_needed = 0, uses_anonymous_args = 0
 974              		@ link register save eliminated.
 975              	.LVL63:
 852:FWLIB/src/stm32f4xx_can.c ****   {
 976              		.loc 1 852 0
 977 0000 0129     		cmp	r1, #1
 978 0002 08D0     		beq	.L99
 979 0004 11B1     		cbz	r1, .L100
 980 0006 0229     		cmp	r1, #2
 981 0008 0AD0     		beq	.L101
 982 000a 7047     		bx	lr
 983              	.L100:
 854:FWLIB/src/stm32f4xx_can.c ****       break;
 984              		.loc 1 854 0
 985 000c 8368     		ldr	r3, [r0, #8]
 986 000e 43F08003 		orr	r3, r3, #128
 987 0012 8360     		str	r3, [r0, #8]
 855:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 988              		.loc 1 855 0
 989 0014 7047     		bx	lr
 990              	.L99:
 856:FWLIB/src/stm32f4xx_can.c ****       break;
 991              		.loc 1 856 0
 992 0016 8368     		ldr	r3, [r0, #8]
 993 0018 43F40043 		orr	r3, r3, #32768
 994 001c 8360     		str	r3, [r0, #8]
 857:FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 995              		.loc 1 857 0
 996 001e 7047     		bx	lr
 997              	.L101:
 858:FWLIB/src/stm32f4xx_can.c ****       break;
 998              		.loc 1 858 0
 999 0020 8368     		ldr	r3, [r0, #8]
 1000 0022 43F40003 		orr	r3, r3, #8388608
 1001 0026 8360     		str	r3, [r0, #8]
 1002 0028 7047     		bx	lr
 1003              		.cfi_endproc
 1004              	.LFE132:
 1006              		.section	.text.CAN_Receive,"ax",%progbits
 1007              		.align	1
 1008              		.global	CAN_Receive
 1009              		.syntax unified
 1010              		.thumb
ARM GAS  /tmp/ccweFGY7.s 			page 54


 1011              		.thumb_func
 1012              		.fpu fpv4-sp-d16
 1014              	CAN_Receive:
 1015              	.LFB133:
 895:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 1016              		.loc 1 895 0
 1017              		.cfi_startproc
 1018              		@ args = 0, pretend = 0, frame = 0
 1019              		@ frame_needed = 0, uses_anonymous_args = 0
 1020              		@ link register save eliminated.
 1021              	.LVL64:
 1022 0000 10B4     		push	{r4}
 1023              	.LCFI7:
 1024              		.cfi_def_cfa_offset 4
 1025              		.cfi_offset 4, -4
 900:FWLIB/src/stm32f4xx_can.c ****   if (RxMessage->IDE == CAN_Id_Standard)
 1026              		.loc 1 900 0
 1027 0002 01F11B03 		add	r3, r1, #27
 1028 0006 1B01     		lsls	r3, r3, #4
 1029 0008 C358     		ldr	r3, [r0, r3]
 1030 000a 03F00403 		and	r3, r3, #4
 1031 000e 1372     		strb	r3, [r2, #8]
 901:FWLIB/src/stm32f4xx_can.c ****   {
 1032              		.loc 1 901 0
 1033 0010 002B     		cmp	r3, #0
 1034 0012 3CD1     		bne	.L103
 903:FWLIB/src/stm32f4xx_can.c ****   }
 1035              		.loc 1 903 0
 1036 0014 01F11B03 		add	r3, r1, #27
 1037 0018 1B01     		lsls	r3, r3, #4
 1038 001a C358     		ldr	r3, [r0, r3]
 1039 001c 5B0D     		lsrs	r3, r3, #21
 1040 001e 1360     		str	r3, [r2]
 1041              	.L104:
 910:FWLIB/src/stm32f4xx_can.c ****   /* Get the DLC */
 1042              		.loc 1 910 0
 1043 0020 01F11B03 		add	r3, r1, #27
 1044 0024 1B01     		lsls	r3, r3, #4
 1045 0026 C418     		adds	r4, r0, r3
 1046 0028 C358     		ldr	r3, [r0, r3]
 1047 002a 03F00203 		and	r3, r3, #2
 1048 002e 5372     		strb	r3, [r2, #9]
 912:FWLIB/src/stm32f4xx_can.c ****   /* Get the FMI */
 1049              		.loc 1 912 0
 1050 0030 6368     		ldr	r3, [r4, #4]
 1051 0032 03F00F03 		and	r3, r3, #15
 1052 0036 9372     		strb	r3, [r2, #10]
 914:FWLIB/src/stm32f4xx_can.c ****   /* Get the data field */
 1053              		.loc 1 914 0
 1054 0038 6368     		ldr	r3, [r4, #4]
 1055 003a 1B0A     		lsrs	r3, r3, #8
 1056 003c D374     		strb	r3, [r2, #19]
 916:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 1057              		.loc 1 916 0
 1058 003e 00EB0113 		add	r3, r0, r1, lsl #4
 1059 0042 D3F8B841 		ldr	r4, [r3, #440]
 1060 0046 D472     		strb	r4, [r2, #11]
ARM GAS  /tmp/ccweFGY7.s 			page 55


 917:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 1061              		.loc 1 917 0
 1062 0048 D3F8B841 		ldr	r4, [r3, #440]
 1063 004c 240A     		lsrs	r4, r4, #8
 1064 004e 1473     		strb	r4, [r2, #12]
 918:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 1065              		.loc 1 918 0
 1066 0050 D3F8B841 		ldr	r4, [r3, #440]
 1067 0054 240C     		lsrs	r4, r4, #16
 1068 0056 5473     		strb	r4, [r2, #13]
 919:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 1069              		.loc 1 919 0
 1070 0058 D3F8B841 		ldr	r4, [r3, #440]
 1071 005c 240E     		lsrs	r4, r4, #24
 1072 005e 9473     		strb	r4, [r2, #14]
 920:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 1073              		.loc 1 920 0
 1074 0060 D3F8BC41 		ldr	r4, [r3, #444]
 1075 0064 D473     		strb	r4, [r2, #15]
 921:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 1076              		.loc 1 921 0
 1077 0066 D3F8BC41 		ldr	r4, [r3, #444]
 1078 006a 240A     		lsrs	r4, r4, #8
 1079 006c 1474     		strb	r4, [r2, #16]
 922:FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 1080              		.loc 1 922 0
 1081 006e D3F8BC41 		ldr	r4, [r3, #444]
 1082 0072 240C     		lsrs	r4, r4, #16
 1083 0074 5474     		strb	r4, [r2, #17]
 923:FWLIB/src/stm32f4xx_can.c ****   /* Release the FIFO */
 1084              		.loc 1 923 0
 1085 0076 D3F8BC31 		ldr	r3, [r3, #444]
 1086 007a 1B0E     		lsrs	r3, r3, #24
 1087 007c 9374     		strb	r3, [r2, #18]
 926:FWLIB/src/stm32f4xx_can.c ****   {
 1088              		.loc 1 926 0
 1089 007e 69B1     		cbz	r1, .L108
 933:FWLIB/src/stm32f4xx_can.c ****   }
 1090              		.loc 1 933 0
 1091 0080 0369     		ldr	r3, [r0, #16]
 1092 0082 43F02003 		orr	r3, r3, #32
 1093 0086 0361     		str	r3, [r0, #16]
 1094              	.L102:
 935:FWLIB/src/stm32f4xx_can.c **** 
 1095              		.loc 1 935 0
 1096 0088 5DF8044B 		ldr	r4, [sp], #4
 1097              	.LCFI8:
 1098              		.cfi_remember_state
 1099              		.cfi_restore 4
 1100              		.cfi_def_cfa_offset 0
 1101 008c 7047     		bx	lr
 1102              	.L103:
 1103              	.LCFI9:
 1104              		.cfi_restore_state
 907:FWLIB/src/stm32f4xx_can.c ****   }
 1105              		.loc 1 907 0
 1106 008e 01F11B03 		add	r3, r1, #27
ARM GAS  /tmp/ccweFGY7.s 			page 56


 1107 0092 1B01     		lsls	r3, r3, #4
 1108 0094 C358     		ldr	r3, [r0, r3]
 1109 0096 DB08     		lsrs	r3, r3, #3
 1110 0098 5360     		str	r3, [r2, #4]
 1111 009a C1E7     		b	.L104
 1112              	.L108:
 928:FWLIB/src/stm32f4xx_can.c ****   }
 1113              		.loc 1 928 0
 1114 009c C368     		ldr	r3, [r0, #12]
 1115 009e 43F02003 		orr	r3, r3, #32
 1116 00a2 C360     		str	r3, [r0, #12]
 1117 00a4 F0E7     		b	.L102
 1118              		.cfi_endproc
 1119              	.LFE133:
 1121              		.section	.text.CAN_FIFORelease,"ax",%progbits
 1122              		.align	1
 1123              		.global	CAN_FIFORelease
 1124              		.syntax unified
 1125              		.thumb
 1126              		.thumb_func
 1127              		.fpu fpv4-sp-d16
 1129              	CAN_FIFORelease:
 1130              	.LFB134:
 945:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 1131              		.loc 1 945 0
 1132              		.cfi_startproc
 1133              		@ args = 0, pretend = 0, frame = 0
 1134              		@ frame_needed = 0, uses_anonymous_args = 0
 1135              		@ link register save eliminated.
 1136              	.LVL65:
 950:FWLIB/src/stm32f4xx_can.c ****   {
 1137              		.loc 1 950 0
 1138 0000 21B1     		cbz	r1, .L112
 957:FWLIB/src/stm32f4xx_can.c ****   }
 1139              		.loc 1 957 0
 1140 0002 0369     		ldr	r3, [r0, #16]
 1141 0004 43F02003 		orr	r3, r3, #32
 1142 0008 0361     		str	r3, [r0, #16]
 1143 000a 7047     		bx	lr
 1144              	.L112:
 952:FWLIB/src/stm32f4xx_can.c ****   }
 1145              		.loc 1 952 0
 1146 000c C368     		ldr	r3, [r0, #12]
 1147 000e 43F02003 		orr	r3, r3, #32
 1148 0012 C360     		str	r3, [r0, #12]
 1149 0014 7047     		bx	lr
 1150              		.cfi_endproc
 1151              	.LFE134:
 1153              		.section	.text.CAN_MessagePending,"ax",%progbits
 1154              		.align	1
 1155              		.global	CAN_MessagePending
 1156              		.syntax unified
 1157              		.thumb
 1158              		.thumb_func
 1159              		.fpu fpv4-sp-d16
 1161              	CAN_MessagePending:
 1162              	.LFB135:
ARM GAS  /tmp/ccweFGY7.s 			page 57


 969:FWLIB/src/stm32f4xx_can.c ****   uint8_t message_pending=0;
 1163              		.loc 1 969 0
 1164              		.cfi_startproc
 1165              		@ args = 0, pretend = 0, frame = 0
 1166              		@ frame_needed = 0, uses_anonymous_args = 0
 1167              		@ link register save eliminated.
 1168              	.LVL66:
 974:FWLIB/src/stm32f4xx_can.c ****   {
 1169              		.loc 1 974 0
 1170 0000 19B1     		cbz	r1, .L117
 978:FWLIB/src/stm32f4xx_can.c ****   {
 1171              		.loc 1 978 0
 1172 0002 0129     		cmp	r1, #1
 1173 0004 05D0     		beq	.L118
 984:FWLIB/src/stm32f4xx_can.c ****   }
 1174              		.loc 1 984 0
 1175 0006 0020     		movs	r0, #0
 1176              	.LVL67:
 987:FWLIB/src/stm32f4xx_can.c **** /**
 1177              		.loc 1 987 0
 1178 0008 7047     		bx	lr
 1179              	.LVL68:
 1180              	.L117:
 976:FWLIB/src/stm32f4xx_can.c ****   }
 1181              		.loc 1 976 0
 1182 000a C068     		ldr	r0, [r0, #12]
 1183              	.LVL69:
 1184 000c 00F00300 		and	r0, r0, #3
 1185              	.LVL70:
 1186 0010 7047     		bx	lr
 1187              	.LVL71:
 1188              	.L118:
 980:FWLIB/src/stm32f4xx_can.c ****   }
 1189              		.loc 1 980 0
 1190 0012 0069     		ldr	r0, [r0, #16]
 1191              	.LVL72:
 1192 0014 00F00300 		and	r0, r0, #3
 1193              	.LVL73:
 1194 0018 7047     		bx	lr
 1195              		.cfi_endproc
 1196              	.LFE135:
 1198              		.section	.text.CAN_OperatingModeRequest,"ax",%progbits
 1199              		.align	1
 1200              		.global	CAN_OperatingModeRequest
 1201              		.syntax unified
 1202              		.thumb
 1203              		.thumb_func
 1204              		.fpu fpv4-sp-d16
 1206              	CAN_OperatingModeRequest:
 1207              	.LFB136:
1019:FWLIB/src/stm32f4xx_can.c ****   uint8_t status = CAN_ModeStatus_Failed;
 1208              		.loc 1 1019 0
 1209              		.cfi_startproc
 1210              		@ args = 0, pretend = 0, frame = 0
 1211              		@ frame_needed = 0, uses_anonymous_args = 0
 1212              		@ link register save eliminated.
 1213              	.LVL74:
ARM GAS  /tmp/ccweFGY7.s 			page 58


1029:FWLIB/src/stm32f4xx_can.c ****   {
 1214              		.loc 1 1029 0
 1215 0000 B9B9     		cbnz	r1, .L120
1032:FWLIB/src/stm32f4xx_can.c **** 
 1216              		.loc 1 1032 0
 1217 0002 0368     		ldr	r3, [r0]
 1218 0004 23F00303 		bic	r3, r3, #3
 1219 0008 43F00103 		orr	r3, r3, #1
 1220 000c 0360     		str	r3, [r0]
1023:FWLIB/src/stm32f4xx_can.c **** 
 1221              		.loc 1 1023 0
 1222 000e 4FF6FF72 		movw	r2, #65535
1035:FWLIB/src/stm32f4xx_can.c ****     {
 1223              		.loc 1 1035 0
 1224 0012 00E0     		b	.L121
 1225              	.LVL75:
 1226              	.L123:
1037:FWLIB/src/stm32f4xx_can.c ****     }
 1227              		.loc 1 1037 0
 1228 0014 013A     		subs	r2, r2, #1
 1229              	.LVL76:
 1230              	.L121:
1035:FWLIB/src/stm32f4xx_can.c ****     {
 1231              		.loc 1 1035 0
 1232 0016 4368     		ldr	r3, [r0, #4]
 1233 0018 03F00303 		and	r3, r3, #3
 1234 001c 012B     		cmp	r3, #1
 1235 001e 01D0     		beq	.L122
1035:FWLIB/src/stm32f4xx_can.c ****     {
 1236              		.loc 1 1035 0 is_stmt 0 discriminator 1
 1237 0020 002A     		cmp	r2, #0
 1238 0022 F7D1     		bne	.L123
 1239              	.L122:
1039:FWLIB/src/stm32f4xx_can.c ****     {
 1240              		.loc 1 1039 0 is_stmt 1
 1241 0024 4368     		ldr	r3, [r0, #4]
 1242 0026 03F00303 		and	r3, r3, #3
 1243 002a 012B     		cmp	r3, #1
 1244 002c 32D0     		beq	.L132
1041:FWLIB/src/stm32f4xx_can.c ****     }
 1245              		.loc 1 1041 0
 1246 002e 0020     		movs	r0, #0
 1247              	.LVL77:
 1248 0030 7047     		bx	lr
 1249              	.LVL78:
 1250              	.L120:
1048:FWLIB/src/stm32f4xx_can.c ****   {
 1251              		.loc 1 1048 0
 1252 0032 0129     		cmp	r1, #1
 1253 0034 03D0     		beq	.L136
1067:FWLIB/src/stm32f4xx_can.c ****   {
 1254              		.loc 1 1067 0
 1255 0036 0229     		cmp	r1, #2
 1256 0038 15D0     		beq	.L137
1088:FWLIB/src/stm32f4xx_can.c ****   }
 1257              		.loc 1 1088 0
 1258 003a 0020     		movs	r0, #0
ARM GAS  /tmp/ccweFGY7.s 			page 59


 1259              	.LVL79:
 1260 003c 7047     		bx	lr
 1261              	.LVL80:
 1262              	.L136:
1051:FWLIB/src/stm32f4xx_can.c **** 
 1263              		.loc 1 1051 0
 1264 003e 0368     		ldr	r3, [r0]
 1265 0040 23F00303 		bic	r3, r3, #3
 1266 0044 0360     		str	r3, [r0]
1023:FWLIB/src/stm32f4xx_can.c **** 
 1267              		.loc 1 1023 0
 1268 0046 4FF6FF73 		movw	r3, #65535
1054:FWLIB/src/stm32f4xx_can.c ****     {
 1269              		.loc 1 1054 0
 1270 004a 00E0     		b	.L126
 1271              	.LVL81:
 1272              	.L128:
1056:FWLIB/src/stm32f4xx_can.c ****     }
 1273              		.loc 1 1056 0
 1274 004c 013B     		subs	r3, r3, #1
 1275              	.LVL82:
 1276              	.L126:
1054:FWLIB/src/stm32f4xx_can.c ****     {
 1277              		.loc 1 1054 0
 1278 004e 4268     		ldr	r2, [r0, #4]
 1279 0050 12F0030F 		tst	r2, #3
 1280 0054 01D0     		beq	.L127
1054:FWLIB/src/stm32f4xx_can.c ****     {
 1281              		.loc 1 1054 0 is_stmt 0 discriminator 1
 1282 0056 002B     		cmp	r3, #0
 1283 0058 F8D1     		bne	.L128
 1284              	.L127:
1058:FWLIB/src/stm32f4xx_can.c ****     {
 1285              		.loc 1 1058 0 is_stmt 1
 1286 005a 4368     		ldr	r3, [r0, #4]
 1287              	.LVL83:
 1288 005c 13F0030F 		tst	r3, #3
 1289 0060 1AD0     		beq	.L133
1060:FWLIB/src/stm32f4xx_can.c ****     }
 1290              		.loc 1 1060 0
 1291 0062 0020     		movs	r0, #0
 1292              	.LVL84:
 1293 0064 7047     		bx	lr
 1294              	.LVL85:
 1295              	.L137:
1070:FWLIB/src/stm32f4xx_can.c **** 
 1296              		.loc 1 1070 0
 1297 0066 0368     		ldr	r3, [r0]
 1298 0068 23F00303 		bic	r3, r3, #3
 1299 006c 43F00203 		orr	r3, r3, #2
 1300 0070 0360     		str	r3, [r0]
1023:FWLIB/src/stm32f4xx_can.c **** 
 1301              		.loc 1 1023 0
 1302 0072 4FF6FF72 		movw	r2, #65535
 1303              	.LVL86:
 1304              	.L129:
1073:FWLIB/src/stm32f4xx_can.c ****     {
ARM GAS  /tmp/ccweFGY7.s 			page 60


 1305              		.loc 1 1073 0
 1306 0076 4368     		ldr	r3, [r0, #4]
 1307 0078 03F00303 		and	r3, r3, #3
 1308 007c 022B     		cmp	r3, #2
 1309 007e 02D0     		beq	.L130
1073:FWLIB/src/stm32f4xx_can.c ****     {
 1310              		.loc 1 1073 0 is_stmt 0 discriminator 1
 1311 0080 0AB1     		cbz	r2, .L130
1075:FWLIB/src/stm32f4xx_can.c ****     }
 1312              		.loc 1 1075 0 is_stmt 1
 1313 0082 013A     		subs	r2, r2, #1
 1314              	.LVL87:
 1315 0084 F7E7     		b	.L129
 1316              	.L130:
1077:FWLIB/src/stm32f4xx_can.c ****     {
 1317              		.loc 1 1077 0
 1318 0086 4368     		ldr	r3, [r0, #4]
 1319 0088 03F00303 		and	r3, r3, #3
 1320 008c 022B     		cmp	r3, #2
 1321 008e 05D0     		beq	.L135
1079:FWLIB/src/stm32f4xx_can.c ****     }
 1322              		.loc 1 1079 0
 1323 0090 0020     		movs	r0, #0
 1324              	.LVL88:
 1325 0092 7047     		bx	lr
 1326              	.LVL89:
 1327              	.L132:
1045:FWLIB/src/stm32f4xx_can.c ****     }
 1328              		.loc 1 1045 0
 1329 0094 0120     		movs	r0, #1
 1330              	.LVL90:
 1331 0096 7047     		bx	lr
 1332              	.LVL91:
 1333              	.L133:
1064:FWLIB/src/stm32f4xx_can.c ****     }
 1334              		.loc 1 1064 0
 1335 0098 0120     		movs	r0, #1
 1336              	.LVL92:
 1337 009a 7047     		bx	lr
 1338              	.LVL93:
 1339              	.L135:
1083:FWLIB/src/stm32f4xx_can.c ****     }
 1340              		.loc 1 1083 0
 1341 009c 0120     		movs	r0, #1
 1342              	.LVL94:
1092:FWLIB/src/stm32f4xx_can.c **** 
 1343              		.loc 1 1092 0
 1344 009e 7047     		bx	lr
 1345              		.cfi_endproc
 1346              	.LFE136:
 1348              		.section	.text.CAN_Sleep,"ax",%progbits
 1349              		.align	1
 1350              		.global	CAN_Sleep
 1351              		.syntax unified
 1352              		.thumb
 1353              		.thumb_func
 1354              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccweFGY7.s 			page 61


 1356              	CAN_Sleep:
 1357              	.LFB137:
1101:FWLIB/src/stm32f4xx_can.c ****   uint8_t sleepstatus = CAN_Sleep_Failed;
 1358              		.loc 1 1101 0
 1359              		.cfi_startproc
 1360              		@ args = 0, pretend = 0, frame = 0
 1361              		@ frame_needed = 0, uses_anonymous_args = 0
 1362              		@ link register save eliminated.
 1363              	.LVL95:
1108:FWLIB/src/stm32f4xx_can.c ****    
 1364              		.loc 1 1108 0
 1365 0000 0368     		ldr	r3, [r0]
 1366 0002 23F00303 		bic	r3, r3, #3
 1367 0006 43F00203 		orr	r3, r3, #2
 1368 000a 0360     		str	r3, [r0]
1111:FWLIB/src/stm32f4xx_can.c ****   {
 1369              		.loc 1 1111 0
 1370 000c 4368     		ldr	r3, [r0, #4]
 1371 000e 03F00303 		and	r3, r3, #3
 1372 0012 022B     		cmp	r3, #2
 1373 0014 01D0     		beq	.L140
1102:FWLIB/src/stm32f4xx_can.c ****   
 1374              		.loc 1 1102 0
 1375 0016 0020     		movs	r0, #0
 1376              	.LVL96:
 1377 0018 7047     		bx	lr
 1378              	.LVL97:
 1379              	.L140:
1114:FWLIB/src/stm32f4xx_can.c ****   }
 1380              		.loc 1 1114 0
 1381 001a 0120     		movs	r0, #1
 1382              	.LVL98:
1118:FWLIB/src/stm32f4xx_can.c **** 
 1383              		.loc 1 1118 0
 1384 001c 7047     		bx	lr
 1385              		.cfi_endproc
 1386              	.LFE137:
 1388              		.section	.text.CAN_WakeUp,"ax",%progbits
 1389              		.align	1
 1390              		.global	CAN_WakeUp
 1391              		.syntax unified
 1392              		.thumb
 1393              		.thumb_func
 1394              		.fpu fpv4-sp-d16
 1396              	CAN_WakeUp:
 1397              	.LFB138:
1127:FWLIB/src/stm32f4xx_can.c ****   uint32_t wait_slak = SLAK_TIMEOUT;
 1398              		.loc 1 1127 0
 1399              		.cfi_startproc
 1400              		@ args = 0, pretend = 0, frame = 0
 1401              		@ frame_needed = 0, uses_anonymous_args = 0
 1402              		@ link register save eliminated.
 1403              	.LVL99:
1135:FWLIB/src/stm32f4xx_can.c ****     
 1404              		.loc 1 1135 0
 1405 0000 0368     		ldr	r3, [r0]
 1406 0002 23F00203 		bic	r3, r3, #2
ARM GAS  /tmp/ccweFGY7.s 			page 62


 1407 0006 0360     		str	r3, [r0]
1128:FWLIB/src/stm32f4xx_can.c ****   uint8_t wakeupstatus = CAN_WakeUp_Failed;
 1408              		.loc 1 1128 0
 1409 0008 4FF6FF73 		movw	r3, #65535
1138:FWLIB/src/stm32f4xx_can.c ****   {
 1410              		.loc 1 1138 0
 1411 000c 00E0     		b	.L142
 1412              	.LVL100:
 1413              	.L144:
1140:FWLIB/src/stm32f4xx_can.c ****   }
 1414              		.loc 1 1140 0
 1415 000e 013B     		subs	r3, r3, #1
 1416              	.LVL101:
 1417              	.L142:
1138:FWLIB/src/stm32f4xx_can.c ****   {
 1418              		.loc 1 1138 0
 1419 0010 4268     		ldr	r2, [r0, #4]
 1420 0012 12F0020F 		tst	r2, #2
 1421 0016 01D0     		beq	.L143
1138:FWLIB/src/stm32f4xx_can.c ****   {
 1422              		.loc 1 1138 0 is_stmt 0 discriminator 1
 1423 0018 002B     		cmp	r3, #0
 1424 001a F8D1     		bne	.L144
 1425              	.L143:
1142:FWLIB/src/stm32f4xx_can.c ****   {
 1426              		.loc 1 1142 0 is_stmt 1
 1427 001c 4368     		ldr	r3, [r0, #4]
 1428              	.LVL102:
 1429 001e 13F0020F 		tst	r3, #2
 1430 0022 01D1     		bne	.L147
1145:FWLIB/src/stm32f4xx_can.c ****   }
 1431              		.loc 1 1145 0
 1432 0024 0120     		movs	r0, #1
 1433              	.LVL103:
1149:FWLIB/src/stm32f4xx_can.c **** /**
 1434              		.loc 1 1149 0
 1435 0026 7047     		bx	lr
 1436              	.LVL104:
 1437              	.L147:
1129:FWLIB/src/stm32f4xx_can.c ****   
 1438              		.loc 1 1129 0
 1439 0028 0020     		movs	r0, #0
 1440              	.LVL105:
 1441 002a 7047     		bx	lr
 1442              		.cfi_endproc
 1443              	.LFE138:
 1445              		.section	.text.CAN_GetLastErrorCode,"ax",%progbits
 1446              		.align	1
 1447              		.global	CAN_GetLastErrorCode
 1448              		.syntax unified
 1449              		.thumb
 1450              		.thumb_func
 1451              		.fpu fpv4-sp-d16
 1453              	CAN_GetLastErrorCode:
 1454              	.LFB139:
1189:FWLIB/src/stm32f4xx_can.c ****   uint8_t errorcode=0;
 1455              		.loc 1 1189 0
ARM GAS  /tmp/ccweFGY7.s 			page 63


 1456              		.cfi_startproc
 1457              		@ args = 0, pretend = 0, frame = 0
 1458              		@ frame_needed = 0, uses_anonymous_args = 0
 1459              		@ link register save eliminated.
 1460              	.LVL106:
1196:FWLIB/src/stm32f4xx_can.c ****   
 1461              		.loc 1 1196 0
 1462 0000 8069     		ldr	r0, [r0, #24]
 1463              	.LVL107:
1200:FWLIB/src/stm32f4xx_can.c **** 
 1464              		.loc 1 1200 0
 1465 0002 00F07000 		and	r0, r0, #112
 1466              	.LVL108:
 1467 0006 7047     		bx	lr
 1468              		.cfi_endproc
 1469              	.LFE139:
 1471              		.section	.text.CAN_GetReceiveErrorCounter,"ax",%progbits
 1472              		.align	1
 1473              		.global	CAN_GetReceiveErrorCounter
 1474              		.syntax unified
 1475              		.thumb
 1476              		.thumb_func
 1477              		.fpu fpv4-sp-d16
 1479              	CAN_GetReceiveErrorCounter:
 1480              	.LFB140:
1215:FWLIB/src/stm32f4xx_can.c ****   uint8_t counter=0;
 1481              		.loc 1 1215 0
 1482              		.cfi_startproc
 1483              		@ args = 0, pretend = 0, frame = 0
 1484              		@ frame_needed = 0, uses_anonymous_args = 0
 1485              		@ link register save eliminated.
 1486              	.LVL109:
1222:FWLIB/src/stm32f4xx_can.c ****   
 1487              		.loc 1 1222 0
 1488 0000 8069     		ldr	r0, [r0, #24]
 1489              	.LVL110:
1226:FWLIB/src/stm32f4xx_can.c **** 
 1490              		.loc 1 1226 0
 1491 0002 000E     		lsrs	r0, r0, #24
 1492              	.LVL111:
 1493 0004 7047     		bx	lr
 1494              		.cfi_endproc
 1495              	.LFE140:
 1497              		.section	.text.CAN_GetLSBTransmitErrorCounter,"ax",%progbits
 1498              		.align	1
 1499              		.global	CAN_GetLSBTransmitErrorCounter
 1500              		.syntax unified
 1501              		.thumb
 1502              		.thumb_func
 1503              		.fpu fpv4-sp-d16
 1505              	CAN_GetLSBTransmitErrorCounter:
 1506              	.LFB141:
1236:FWLIB/src/stm32f4xx_can.c ****   uint8_t counter=0;
 1507              		.loc 1 1236 0
 1508              		.cfi_startproc
 1509              		@ args = 0, pretend = 0, frame = 0
 1510              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccweFGY7.s 			page 64


 1511              		@ link register save eliminated.
 1512              	.LVL112:
1243:FWLIB/src/stm32f4xx_can.c ****   
 1513              		.loc 1 1243 0
 1514 0000 8069     		ldr	r0, [r0, #24]
 1515              	.LVL113:
1247:FWLIB/src/stm32f4xx_can.c **** /**
 1516              		.loc 1 1247 0
 1517 0002 C0F30740 		ubfx	r0, r0, #16, #8
 1518              	.LVL114:
 1519 0006 7047     		bx	lr
 1520              		.cfi_endproc
 1521              	.LFE141:
 1523              		.section	.text.CAN_ITConfig,"ax",%progbits
 1524              		.align	1
 1525              		.global	CAN_ITConfig
 1526              		.syntax unified
 1527              		.thumb
 1528              		.thumb_func
 1529              		.fpu fpv4-sp-d16
 1531              	CAN_ITConfig:
 1532              	.LFB142:
1442:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 1533              		.loc 1 1442 0
 1534              		.cfi_startproc
 1535              		@ args = 0, pretend = 0, frame = 0
 1536              		@ frame_needed = 0, uses_anonymous_args = 0
 1537              		@ link register save eliminated.
 1538              	.LVL115:
1448:FWLIB/src/stm32f4xx_can.c ****   {
 1539              		.loc 1 1448 0
 1540 0000 22B9     		cbnz	r2, .L154
1456:FWLIB/src/stm32f4xx_can.c ****   }
 1541              		.loc 1 1456 0
 1542 0002 4369     		ldr	r3, [r0, #20]
 1543 0004 23EA0101 		bic	r1, r3, r1
 1544              	.LVL116:
 1545 0008 4161     		str	r1, [r0, #20]
 1546 000a 7047     		bx	lr
 1547              	.LVL117:
 1548              	.L154:
1451:FWLIB/src/stm32f4xx_can.c ****   }
 1549              		.loc 1 1451 0
 1550 000c 4369     		ldr	r3, [r0, #20]
 1551 000e 1943     		orrs	r1, r1, r3
 1552              	.LVL118:
 1553 0010 4161     		str	r1, [r0, #20]
 1554 0012 7047     		bx	lr
 1555              		.cfi_endproc
 1556              	.LFE142:
 1558              		.section	.text.CAN_GetFlagStatus,"ax",%progbits
 1559              		.align	1
 1560              		.global	CAN_GetFlagStatus
 1561              		.syntax unified
 1562              		.thumb
 1563              		.thumb_func
 1564              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccweFGY7.s 			page 65


 1566              	CAN_GetFlagStatus:
 1567              	.LFB143:
1483:FWLIB/src/stm32f4xx_can.c ****   FlagStatus bitstatus = RESET;
 1568              		.loc 1 1483 0
 1569              		.cfi_startproc
 1570              		@ args = 0, pretend = 0, frame = 0
 1571              		@ frame_needed = 0, uses_anonymous_args = 0
 1572              		@ link register save eliminated.
 1573              	.LVL119:
1491:FWLIB/src/stm32f4xx_can.c ****   { 
 1574              		.loc 1 1491 0
 1575 0000 11F4700F 		tst	r1, #15728640
 1576 0004 06D0     		beq	.L156
1494:FWLIB/src/stm32f4xx_can.c ****     { 
 1577              		.loc 1 1494 0
 1578 0006 8369     		ldr	r3, [r0, #24]
 1579 0008 1940     		ands	r1, r1, r3
 1580              	.LVL120:
 1581 000a C1F31301 		ubfx	r1, r1, #0, #20
 1582 000e 41B3     		cbz	r1, .L161
1497:FWLIB/src/stm32f4xx_can.c ****     }
 1583              		.loc 1 1497 0
 1584 0010 0120     		movs	r0, #1
 1585              	.LVL121:
 1586 0012 7047     		bx	lr
 1587              	.LVL122:
 1588              	.L156:
1505:FWLIB/src/stm32f4xx_can.c ****   { 
 1589              		.loc 1 1505 0
 1590 0014 11F0807F 		tst	r1, #16777216
 1591 0018 06D0     		beq	.L158
1508:FWLIB/src/stm32f4xx_can.c ****     { 
 1592              		.loc 1 1508 0
 1593 001a 4368     		ldr	r3, [r0, #4]
 1594 001c 1940     		ands	r1, r1, r3
 1595              	.LVL123:
 1596 001e C1F31301 		ubfx	r1, r1, #0, #20
 1597 0022 01B3     		cbz	r1, .L162
1511:FWLIB/src/stm32f4xx_can.c ****     }
 1598              		.loc 1 1511 0
 1599 0024 0120     		movs	r0, #1
 1600              	.LVL124:
 1601 0026 7047     		bx	lr
 1602              	.LVL125:
 1603              	.L158:
1519:FWLIB/src/stm32f4xx_can.c ****   { 
 1604              		.loc 1 1519 0
 1605 0028 11F0006F 		tst	r1, #134217728
 1606 002c 06D0     		beq	.L159
1522:FWLIB/src/stm32f4xx_can.c ****     { 
 1607              		.loc 1 1522 0
 1608 002e 8368     		ldr	r3, [r0, #8]
 1609 0030 1940     		ands	r1, r1, r3
 1610              	.LVL126:
 1611 0032 C1F31301 		ubfx	r1, r1, #0, #20
 1612 0036 C1B1     		cbz	r1, .L163
1525:FWLIB/src/stm32f4xx_can.c ****     }
ARM GAS  /tmp/ccweFGY7.s 			page 66


 1613              		.loc 1 1525 0
 1614 0038 0120     		movs	r0, #1
 1615              	.LVL127:
 1616 003a 7047     		bx	lr
 1617              	.LVL128:
 1618              	.L159:
1533:FWLIB/src/stm32f4xx_can.c ****   { 
 1619              		.loc 1 1533 0
 1620 003c 11F0007F 		tst	r1, #33554432
 1621 0040 06D0     		beq	.L160
1536:FWLIB/src/stm32f4xx_can.c ****     { 
 1622              		.loc 1 1536 0
 1623 0042 C368     		ldr	r3, [r0, #12]
 1624 0044 1940     		ands	r1, r1, r3
 1625              	.LVL129:
 1626 0046 C1F31301 		ubfx	r1, r1, #0, #20
 1627 004a 81B1     		cbz	r1, .L164
1539:FWLIB/src/stm32f4xx_can.c ****     }
 1628              		.loc 1 1539 0
 1629 004c 0120     		movs	r0, #1
 1630              	.LVL130:
 1631 004e 7047     		bx	lr
 1632              	.LVL131:
 1633              	.L160:
1550:FWLIB/src/stm32f4xx_can.c ****     { 
 1634              		.loc 1 1550 0
 1635 0050 0369     		ldr	r3, [r0, #16]
 1636 0052 1940     		ands	r1, r1, r3
 1637              	.LVL132:
 1638 0054 C1F31301 		ubfx	r1, r1, #0, #20
 1639 0058 09B9     		cbnz	r1, .L166
1558:FWLIB/src/stm32f4xx_can.c ****     }
 1640              		.loc 1 1558 0
 1641 005a 0020     		movs	r0, #0
 1642              	.LVL133:
1563:FWLIB/src/stm32f4xx_can.c **** 
 1643              		.loc 1 1563 0
 1644 005c 7047     		bx	lr
 1645              	.LVL134:
 1646              	.L166:
1553:FWLIB/src/stm32f4xx_can.c ****     }
 1647              		.loc 1 1553 0
 1648 005e 0120     		movs	r0, #1
 1649              	.LVL135:
 1650 0060 7047     		bx	lr
 1651              	.LVL136:
 1652              	.L161:
1502:FWLIB/src/stm32f4xx_can.c ****     }
 1653              		.loc 1 1502 0
 1654 0062 0020     		movs	r0, #0
 1655              	.LVL137:
 1656 0064 7047     		bx	lr
 1657              	.LVL138:
 1658              	.L162:
1516:FWLIB/src/stm32f4xx_can.c ****     }
 1659              		.loc 1 1516 0
 1660 0066 0020     		movs	r0, #0
ARM GAS  /tmp/ccweFGY7.s 			page 67


 1661              	.LVL139:
 1662 0068 7047     		bx	lr
 1663              	.LVL140:
 1664              	.L163:
1530:FWLIB/src/stm32f4xx_can.c ****     }
 1665              		.loc 1 1530 0
 1666 006a 0020     		movs	r0, #0
 1667              	.LVL141:
 1668 006c 7047     		bx	lr
 1669              	.LVL142:
 1670              	.L164:
1544:FWLIB/src/stm32f4xx_can.c ****     }
 1671              		.loc 1 1544 0
 1672 006e 0020     		movs	r0, #0
 1673              	.LVL143:
 1674 0070 7047     		bx	lr
 1675              		.cfi_endproc
 1676              	.LFE143:
 1678              		.section	.text.CAN_ClearFlag,"ax",%progbits
 1679              		.align	1
 1680              		.global	CAN_ClearFlag
 1681              		.syntax unified
 1682              		.thumb
 1683              		.thumb_func
 1684              		.fpu fpv4-sp-d16
 1686              	CAN_ClearFlag:
 1687              	.LFB144:
1584:FWLIB/src/stm32f4xx_can.c ****   uint32_t flagtmp=0;
 1688              		.loc 1 1584 0
 1689              		.cfi_startproc
 1690              		@ args = 0, pretend = 0, frame = 0
 1691              		@ frame_needed = 0, uses_anonymous_args = 0
 1692              		@ link register save eliminated.
 1693              	.LVL144:
1590:FWLIB/src/stm32f4xx_can.c ****   {
 1694              		.loc 1 1590 0
 1695 0000 0C4B     		ldr	r3, .L177
 1696 0002 9942     		cmp	r1, r3
 1697 0004 0CD0     		beq	.L173
1597:FWLIB/src/stm32f4xx_can.c **** 
 1698              		.loc 1 1597 0
 1699 0006 C1F31303 		ubfx	r3, r1, #0, #20
 1700              	.LVL145:
1599:FWLIB/src/stm32f4xx_can.c ****     {
 1701              		.loc 1 1599 0
 1702 000a 11F0007F 		tst	r1, #33554432
 1703 000e 0AD1     		bne	.L174
1604:FWLIB/src/stm32f4xx_can.c ****     {
 1704              		.loc 1 1604 0
 1705 0010 11F0806F 		tst	r1, #67108864
 1706 0014 09D1     		bne	.L175
1609:FWLIB/src/stm32f4xx_can.c ****     {
 1707              		.loc 1 1609 0
 1708 0016 11F0006F 		tst	r1, #134217728
 1709 001a 08D1     		bne	.L176
1617:FWLIB/src/stm32f4xx_can.c ****     }
 1710              		.loc 1 1617 0
ARM GAS  /tmp/ccweFGY7.s 			page 68


 1711 001c 4360     		str	r3, [r0, #4]
 1712 001e 7047     		bx	lr
 1713              	.LVL146:
 1714              	.L173:
1593:FWLIB/src/stm32f4xx_can.c ****   }
 1715              		.loc 1 1593 0
 1716 0020 0023     		movs	r3, #0
 1717 0022 8361     		str	r3, [r0, #24]
 1718 0024 7047     		bx	lr
 1719              	.LVL147:
 1720              	.L174:
1602:FWLIB/src/stm32f4xx_can.c ****     }
 1721              		.loc 1 1602 0
 1722 0026 C360     		str	r3, [r0, #12]
 1723 0028 7047     		bx	lr
 1724              	.L175:
1607:FWLIB/src/stm32f4xx_can.c ****     }
 1725              		.loc 1 1607 0
 1726 002a 0361     		str	r3, [r0, #16]
 1727 002c 7047     		bx	lr
 1728              	.L176:
1612:FWLIB/src/stm32f4xx_can.c ****     }
 1729              		.loc 1 1612 0
 1730 002e 8360     		str	r3, [r0, #8]
 1731 0030 7047     		bx	lr
 1732              	.L178:
 1733 0032 00BF     		.align	2
 1734              	.L177:
 1735 0034 7000F030 		.word	821035120
 1736              		.cfi_endproc
 1737              	.LFE144:
 1739              		.section	.text.CAN_GetITStatus,"ax",%progbits
 1740              		.align	1
 1741              		.global	CAN_GetITStatus
 1742              		.syntax unified
 1743              		.thumb
 1744              		.thumb_func
 1745              		.fpu fpv4-sp-d16
 1747              	CAN_GetITStatus:
 1748              	.LFB145:
1645:FWLIB/src/stm32f4xx_can.c ****   ITStatus itstatus = RESET;
 1749              		.loc 1 1645 0
 1750              		.cfi_startproc
 1751              		@ args = 0, pretend = 0, frame = 0
 1752              		@ frame_needed = 0, uses_anonymous_args = 0
 1753              	.LVL148:
 1754 0000 08B5     		push	{r3, lr}
 1755              	.LCFI10:
 1756              		.cfi_def_cfa_offset 8
 1757              		.cfi_offset 3, -8
 1758              		.cfi_offset 14, -4
 1759              	.LVL149:
1652:FWLIB/src/stm32f4xx_can.c ****  {
 1760              		.loc 1 1652 0
 1761 0002 4369     		ldr	r3, [r0, #20]
 1762 0004 0B42     		tst	r3, r1
 1763 0006 6DD0     		beq	.L198
ARM GAS  /tmp/ccweFGY7.s 			page 69


1655:FWLIB/src/stm32f4xx_can.c ****     {
 1764              		.loc 1 1655 0
 1765 0008 4029     		cmp	r1, #64
 1766 000a 4DD0     		beq	.L181
 1767 000c 11D9     		bls	.L201
 1768 000e B1F5006F 		cmp	r1, #2048
 1769 0012 62D0     		beq	.L190
 1770 0014 21D8     		bhi	.L191
 1771 0016 B1F5007F 		cmp	r1, #512
 1772 001a 54D0     		beq	.L192
 1773 001c B1F5806F 		cmp	r1, #1024
 1774 0020 56D0     		beq	.L193
 1775 0022 B1F5807F 		cmp	r1, #256
 1776 0026 0DD1     		bne	.L199
1695:FWLIB/src/stm32f4xx_can.c ****         break;
 1777              		.loc 1 1695 0
 1778 0028 8069     		ldr	r0, [r0, #24]
 1779              	.LVL150:
 1780 002a 0121     		movs	r1, #1
 1781              	.LVL151:
 1782 002c FFF7FEFF 		bl	CheckITStatus
 1783              	.LVL152:
1696:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_EPV:
 1784              		.loc 1 1696 0
 1785 0030 08BD     		pop	{r3, pc}
 1786              	.LVL153:
 1787              	.L201:
1655:FWLIB/src/stm32f4xx_can.c ****     {
 1788              		.loc 1 1655 0
 1789 0032 0429     		cmp	r1, #4
 1790 0034 24D0     		beq	.L183
 1791 0036 07D9     		bls	.L202
 1792 0038 1029     		cmp	r1, #16
 1793 003a 2BD0     		beq	.L187
 1794 003c 2029     		cmp	r1, #32
 1795 003e 2ED0     		beq	.L188
 1796 0040 0829     		cmp	r1, #8
 1797 0042 22D0     		beq	.L203
 1798              	.L199:
1715:FWLIB/src/stm32f4xx_can.c ****         break;
 1799              		.loc 1 1715 0
 1800 0044 0020     		movs	r0, #0
 1801              	.LVL154:
1727:FWLIB/src/stm32f4xx_can.c **** 
 1802              		.loc 1 1727 0
 1803 0046 08BD     		pop	{r3, pc}
 1804              	.LVL155:
 1805              	.L202:
1655:FWLIB/src/stm32f4xx_can.c ****     {
 1806              		.loc 1 1655 0
 1807 0048 0129     		cmp	r1, #1
 1808 004a 14D0     		beq	.L185
 1809 004c 0229     		cmp	r1, #2
 1810 004e F9D1     		bne	.L199
1663:FWLIB/src/stm32f4xx_can.c ****         break;
 1811              		.loc 1 1663 0
 1812 0050 C068     		ldr	r0, [r0, #12]
ARM GAS  /tmp/ccweFGY7.s 			page 70


 1813              	.LVL156:
 1814 0052 0321     		movs	r1, #3
 1815              	.LVL157:
 1816 0054 FFF7FEFF 		bl	CheckITStatus
 1817              	.LVL158:
1664:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FF0:
 1818              		.loc 1 1664 0
 1819 0058 08BD     		pop	{r3, pc}
 1820              	.LVL159:
 1821              	.L191:
1655:FWLIB/src/stm32f4xx_can.c ****     {
 1822              		.loc 1 1655 0
 1823 005a B1F5803F 		cmp	r1, #65536
 1824 005e 28D0     		beq	.L195
 1825 0060 B1F5003F 		cmp	r1, #131072
 1826 0064 2AD0     		beq	.L196
 1827 0066 B1F5004F 		cmp	r1, #32768
 1828 006a EBD1     		bne	.L199
1711:FWLIB/src/stm32f4xx_can.c ****         break;
 1829              		.loc 1 1711 0
 1830 006c 4068     		ldr	r0, [r0, #4]
 1831              	.LVL160:
 1832 006e 0421     		movs	r1, #4
 1833              	.LVL161:
 1834 0070 FFF7FEFF 		bl	CheckITStatus
 1835              	.LVL162:
1712:FWLIB/src/stm32f4xx_can.c ****       default:
 1836              		.loc 1 1712 0
 1837 0074 08BD     		pop	{r3, pc}
 1838              	.LVL163:
 1839              	.L185:
1659:FWLIB/src/stm32f4xx_can.c ****         break;
 1840              		.loc 1 1659 0
 1841 0076 8068     		ldr	r0, [r0, #8]
 1842              	.LVL164:
 1843 0078 1B49     		ldr	r1, .L204
 1844              	.LVL165:
 1845 007a FFF7FEFF 		bl	CheckITStatus
 1846              	.LVL166:
1660:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FMP0:
 1847              		.loc 1 1660 0
 1848 007e 08BD     		pop	{r3, pc}
 1849              	.LVL167:
 1850              	.L183:
1667:FWLIB/src/stm32f4xx_can.c ****         break;
 1851              		.loc 1 1667 0
 1852 0080 C068     		ldr	r0, [r0, #12]
 1853              	.LVL168:
 1854 0082 0821     		movs	r1, #8
 1855              	.LVL169:
 1856 0084 FFF7FEFF 		bl	CheckITStatus
 1857              	.LVL170:
1668:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FOV0:
 1858              		.loc 1 1668 0
 1859 0088 08BD     		pop	{r3, pc}
 1860              	.LVL171:
 1861              	.L203:
ARM GAS  /tmp/ccweFGY7.s 			page 71


1671:FWLIB/src/stm32f4xx_can.c ****         break;
 1862              		.loc 1 1671 0
 1863 008a C068     		ldr	r0, [r0, #12]
 1864              	.LVL172:
 1865 008c 1021     		movs	r1, #16
 1866              	.LVL173:
 1867 008e FFF7FEFF 		bl	CheckITStatus
 1868              	.LVL174:
1672:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FMP1:
 1869              		.loc 1 1672 0
 1870 0092 08BD     		pop	{r3, pc}
 1871              	.LVL175:
 1872              	.L187:
1675:FWLIB/src/stm32f4xx_can.c ****         break;
 1873              		.loc 1 1675 0
 1874 0094 0069     		ldr	r0, [r0, #16]
 1875              	.LVL176:
 1876 0096 0321     		movs	r1, #3
 1877              	.LVL177:
 1878 0098 FFF7FEFF 		bl	CheckITStatus
 1879              	.LVL178:
1676:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FF1:
 1880              		.loc 1 1676 0
 1881 009c 08BD     		pop	{r3, pc}
 1882              	.LVL179:
 1883              	.L188:
1679:FWLIB/src/stm32f4xx_can.c ****         break;
 1884              		.loc 1 1679 0
 1885 009e 0069     		ldr	r0, [r0, #16]
 1886              	.LVL180:
 1887 00a0 0821     		movs	r1, #8
 1888              	.LVL181:
 1889 00a2 FFF7FEFF 		bl	CheckITStatus
 1890              	.LVL182:
1680:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FOV1:
 1891              		.loc 1 1680 0
 1892 00a6 08BD     		pop	{r3, pc}
 1893              	.LVL183:
 1894              	.L181:
1683:FWLIB/src/stm32f4xx_can.c ****         break;
 1895              		.loc 1 1683 0
 1896 00a8 0069     		ldr	r0, [r0, #16]
 1897              	.LVL184:
 1898 00aa 1021     		movs	r1, #16
 1899              	.LVL185:
 1900 00ac FFF7FEFF 		bl	CheckITStatus
 1901              	.LVL186:
1684:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_WKU:
 1902              		.loc 1 1684 0
 1903 00b0 08BD     		pop	{r3, pc}
 1904              	.LVL187:
 1905              	.L195:
1687:FWLIB/src/stm32f4xx_can.c ****         break;
 1906              		.loc 1 1687 0
 1907 00b2 4068     		ldr	r0, [r0, #4]
 1908              	.LVL188:
 1909 00b4 0821     		movs	r1, #8
ARM GAS  /tmp/ccweFGY7.s 			page 72


 1910              	.LVL189:
 1911 00b6 FFF7FEFF 		bl	CheckITStatus
 1912              	.LVL190:
1688:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_SLK:
 1913              		.loc 1 1688 0
 1914 00ba 08BD     		pop	{r3, pc}
 1915              	.LVL191:
 1916              	.L196:
1691:FWLIB/src/stm32f4xx_can.c ****         break;
 1917              		.loc 1 1691 0
 1918 00bc 4068     		ldr	r0, [r0, #4]
 1919              	.LVL192:
 1920 00be 1021     		movs	r1, #16
 1921              	.LVL193:
 1922 00c0 FFF7FEFF 		bl	CheckITStatus
 1923              	.LVL194:
1692:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_EWG:
 1924              		.loc 1 1692 0
 1925 00c4 08BD     		pop	{r3, pc}
 1926              	.LVL195:
 1927              	.L192:
1699:FWLIB/src/stm32f4xx_can.c ****         break;
 1928              		.loc 1 1699 0
 1929 00c6 8069     		ldr	r0, [r0, #24]
 1930              	.LVL196:
 1931 00c8 0221     		movs	r1, #2
 1932              	.LVL197:
 1933 00ca FFF7FEFF 		bl	CheckITStatus
 1934              	.LVL198:
1700:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_BOF:
 1935              		.loc 1 1700 0
 1936 00ce 08BD     		pop	{r3, pc}
 1937              	.LVL199:
 1938              	.L193:
1703:FWLIB/src/stm32f4xx_can.c ****         break;
 1939              		.loc 1 1703 0
 1940 00d0 8069     		ldr	r0, [r0, #24]
 1941              	.LVL200:
 1942 00d2 0421     		movs	r1, #4
 1943              	.LVL201:
 1944 00d4 FFF7FEFF 		bl	CheckITStatus
 1945              	.LVL202:
1704:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_LEC:
 1946              		.loc 1 1704 0
 1947 00d8 08BD     		pop	{r3, pc}
 1948              	.LVL203:
 1949              	.L190:
1707:FWLIB/src/stm32f4xx_can.c ****         break;
 1950              		.loc 1 1707 0
 1951 00da 8069     		ldr	r0, [r0, #24]
 1952              	.LVL204:
 1953 00dc 7021     		movs	r1, #112
 1954              	.LVL205:
 1955 00de FFF7FEFF 		bl	CheckITStatus
 1956              	.LVL206:
1708:FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_ERR:
 1957              		.loc 1 1708 0
ARM GAS  /tmp/ccweFGY7.s 			page 73


 1958 00e2 08BD     		pop	{r3, pc}
 1959              	.LVL207:
 1960              	.L198:
1722:FWLIB/src/stm32f4xx_can.c ****   }
 1961              		.loc 1 1722 0
 1962 00e4 0020     		movs	r0, #0
 1963              	.LVL208:
 1964 00e6 08BD     		pop	{r3, pc}
 1965              	.L205:
 1966              		.align	2
 1967              	.L204:
 1968 00e8 01010100 		.word	65793
 1969              		.cfi_endproc
 1970              	.LFE145:
 1972              		.section	.text.CAN_ClearITPendingBit,"ax",%progbits
 1973              		.align	1
 1974              		.global	CAN_ClearITPendingBit
 1975              		.syntax unified
 1976              		.thumb
 1977              		.thumb_func
 1978              		.fpu fpv4-sp-d16
 1980              	CAN_ClearITPendingBit:
 1981              	.LFB146:
1750:FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 1982              		.loc 1 1750 0
 1983              		.cfi_startproc
 1984              		@ args = 0, pretend = 0, frame = 0
 1985              		@ frame_needed = 0, uses_anonymous_args = 0
 1986              		@ link register save eliminated.
 1987              	.LVL209:
1755:FWLIB/src/stm32f4xx_can.c ****   {
 1988              		.loc 1 1755 0
 1989 0000 B1F5807F 		cmp	r1, #256
 1990 0004 3ED0     		beq	.L208
 1991 0006 11D9     		bls	.L223
 1992 0008 B1F5006F 		cmp	r1, #2048
 1993 000c 40D0     		beq	.L216
 1994 000e 20D9     		bls	.L224
 1995 0010 B1F5803F 		cmp	r1, #65536
 1996 0014 30D0     		beq	.L220
 1997 0016 B1F5003F 		cmp	r1, #131072
 1998 001a 30D0     		beq	.L221
 1999 001c B1F5004F 		cmp	r1, #32768
 2000 0020 03D1     		bne	.L206
1808:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
 2001              		.loc 1 1808 0
 2002 0022 0023     		movs	r3, #0
 2003 0024 8361     		str	r3, [r0, #24]
1810:FWLIB/src/stm32f4xx_can.c ****        /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
 2004              		.loc 1 1810 0
 2005 0026 0423     		movs	r3, #4
 2006 0028 4360     		str	r3, [r0, #4]
 2007              	.L206:
 2008 002a 7047     		bx	lr
 2009              	.L223:
1755:FWLIB/src/stm32f4xx_can.c ****   {
 2010              		.loc 1 1755 0
ARM GAS  /tmp/ccweFGY7.s 			page 74


 2011 002c 0829     		cmp	r1, #8
 2012 002e 1DD0     		beq	.L210
 2013 0030 07D8     		bhi	.L211
 2014 0032 0129     		cmp	r1, #1
 2015 0034 17D0     		beq	.L212
 2016 0036 0429     		cmp	r1, #4
 2017 0038 02D1     		bne	.L225
1763:FWLIB/src/stm32f4xx_can.c ****       break;
 2018              		.loc 1 1763 0
 2019 003a 0823     		movs	r3, #8
 2020 003c C360     		str	r3, [r0, #12]
1764:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FOV0:
 2021              		.loc 1 1764 0
 2022 003e 7047     		bx	lr
 2023              	.L225:
 2024 0040 7047     		bx	lr
 2025              	.L211:
1755:FWLIB/src/stm32f4xx_can.c ****   {
 2026              		.loc 1 1755 0
 2027 0042 2029     		cmp	r1, #32
 2028 0044 15D0     		beq	.L214
 2029 0046 4029     		cmp	r1, #64
 2030 0048 02D1     		bne	.L226
1775:FWLIB/src/stm32f4xx_can.c ****       break;
 2031              		.loc 1 1775 0
 2032 004a 1023     		movs	r3, #16
 2033 004c 0361     		str	r3, [r0, #16]
1776:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_WKU:
 2034              		.loc 1 1776 0
 2035 004e 7047     		bx	lr
 2036              	.L226:
 2037 0050 7047     		bx	lr
 2038              	.L224:
1755:FWLIB/src/stm32f4xx_can.c ****   {
 2039              		.loc 1 1755 0
 2040 0052 B1F5007F 		cmp	r1, #512
 2041 0056 18D0     		beq	.L218
 2042 0058 B1F5806F 		cmp	r1, #1024
 2043 005c 02D1     		bne	.L227
1797:FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
 2044              		.loc 1 1797 0
 2045 005e 0423     		movs	r3, #4
 2046 0060 4360     		str	r3, [r0, #4]
1799:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_LEC:
 2047              		.loc 1 1799 0
 2048 0062 7047     		bx	lr
 2049              	.L227:
 2050 0064 7047     		bx	lr
 2051              	.L212:
1759:FWLIB/src/stm32f4xx_can.c ****       break;
 2052              		.loc 1 1759 0
 2053 0066 0D4B     		ldr	r3, .L228
 2054 0068 8360     		str	r3, [r0, #8]
1760:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FF0:
 2055              		.loc 1 1760 0
 2056 006a 7047     		bx	lr
 2057              	.L210:
ARM GAS  /tmp/ccweFGY7.s 			page 75


1767:FWLIB/src/stm32f4xx_can.c ****       break;
 2058              		.loc 1 1767 0
 2059 006c 1023     		movs	r3, #16
 2060 006e C360     		str	r3, [r0, #12]
1768:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FF1:
 2061              		.loc 1 1768 0
 2062 0070 7047     		bx	lr
 2063              	.L214:
1771:FWLIB/src/stm32f4xx_can.c ****       break;
 2064              		.loc 1 1771 0
 2065 0072 0823     		movs	r3, #8
 2066 0074 0361     		str	r3, [r0, #16]
1772:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FOV1:
 2067              		.loc 1 1772 0
 2068 0076 7047     		bx	lr
 2069              	.L220:
1779:FWLIB/src/stm32f4xx_can.c ****       break;
 2070              		.loc 1 1779 0
 2071 0078 0823     		movs	r3, #8
 2072 007a 4360     		str	r3, [r0, #4]
1780:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_SLK:
 2073              		.loc 1 1780 0
 2074 007c 7047     		bx	lr
 2075              	.L221:
1783:FWLIB/src/stm32f4xx_can.c ****       break;
 2076              		.loc 1 1783 0
 2077 007e 1023     		movs	r3, #16
 2078 0080 4360     		str	r3, [r0, #4]
1784:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_EWG:
 2079              		.loc 1 1784 0
 2080 0082 7047     		bx	lr
 2081              	.L208:
1787:FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/ 
 2082              		.loc 1 1787 0
 2083 0084 0423     		movs	r3, #4
 2084 0086 4360     		str	r3, [r0, #4]
1789:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_EPV:
 2085              		.loc 1 1789 0
 2086 0088 7047     		bx	lr
 2087              	.L218:
1792:FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
 2088              		.loc 1 1792 0
 2089 008a 0423     		movs	r3, #4
 2090 008c 4360     		str	r3, [r0, #4]
1794:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_BOF:
 2091              		.loc 1 1794 0
 2092 008e 7047     		bx	lr
 2093              	.L216:
1802:FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
 2094              		.loc 1 1802 0
 2095 0090 0023     		movs	r3, #0
 2096 0092 8361     		str	r3, [r0, #24]
1804:FWLIB/src/stm32f4xx_can.c ****       break;
 2097              		.loc 1 1804 0
 2098 0094 0423     		movs	r3, #4
 2099 0096 4360     		str	r3, [r0, #4]
1805:FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_ERR:
ARM GAS  /tmp/ccweFGY7.s 			page 76


 2100              		.loc 1 1805 0
 2101 0098 7047     		bx	lr
 2102              	.L229:
 2103 009a 00BF     		.align	2
 2104              	.L228:
 2105 009c 01010100 		.word	65793
 2106              		.cfi_endproc
 2107              	.LFE146:
 2109              		.text
 2110              	.Letext0:
 2111              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 2112              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 2113              		.file 4 "F4_CORE/core_cm4.h"
 2114              		.file 5 "USER/system_stm32f4xx.h"
 2115              		.file 6 "USER/stm32f4xx.h"
 2116              		.file 7 "FWLIB/inc/stm32f4xx_can.h"
 2117              		.file 8 "FWLIB/inc/stm32f4xx_rcc.h"
ARM GAS  /tmp/ccweFGY7.s 			page 77


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_can.c
     /tmp/ccweFGY7.s:18     .text.CheckITStatus:0000000000000000 $t
     /tmp/ccweFGY7.s:24     .text.CheckITStatus:0000000000000000 CheckITStatus
     /tmp/ccweFGY7.s:51     .text.CAN_DeInit:0000000000000000 $t
     /tmp/ccweFGY7.s:58     .text.CAN_DeInit:0000000000000000 CAN_DeInit
     /tmp/ccweFGY7.s:103    .text.CAN_DeInit:0000000000000034 $d
     /tmp/ccweFGY7.s:108    .text.CAN_Init:0000000000000000 $t
     /tmp/ccweFGY7.s:115    .text.CAN_Init:0000000000000000 CAN_Init
     /tmp/ccweFGY7.s:318    .text.CAN_FilterInit:0000000000000000 $t
     /tmp/ccweFGY7.s:325    .text.CAN_FilterInit:0000000000000000 CAN_FilterInit
     /tmp/ccweFGY7.s:494    .text.CAN_FilterInit:00000000000000f8 $d
     /tmp/ccweFGY7.s:499    .text.CAN_StructInit:0000000000000000 $t
     /tmp/ccweFGY7.s:506    .text.CAN_StructInit:0000000000000000 CAN_StructInit
     /tmp/ccweFGY7.s:545    .text.CAN_SlaveStartBank:0000000000000000 $t
     /tmp/ccweFGY7.s:552    .text.CAN_SlaveStartBank:0000000000000000 CAN_SlaveStartBank
     /tmp/ccweFGY7.s:583    .text.CAN_SlaveStartBank:0000000000000038 $d
     /tmp/ccweFGY7.s:588    .text.CAN_DBGFreeze:0000000000000000 $t
     /tmp/ccweFGY7.s:595    .text.CAN_DBGFreeze:0000000000000000 CAN_DBGFreeze
     /tmp/ccweFGY7.s:620    .text.CAN_TTComModeCmd:0000000000000000 $t
     /tmp/ccweFGY7.s:627    .text.CAN_TTComModeCmd:0000000000000000 CAN_TTComModeCmd
     /tmp/ccweFGY7.s:676    .text.CAN_Transmit:0000000000000000 $t
     /tmp/ccweFGY7.s:683    .text.CAN_Transmit:0000000000000000 CAN_Transmit
     /tmp/ccweFGY7.s:853    .text.CAN_TransmitStatus:0000000000000000 $t
     /tmp/ccweFGY7.s:860    .text.CAN_TransmitStatus:0000000000000000 CAN_TransmitStatus
     /tmp/ccweFGY7.s:954    .text.CAN_TransmitStatus:0000000000000064 $d
     /tmp/ccweFGY7.s:961    .text.CAN_CancelTransmit:0000000000000000 $t
     /tmp/ccweFGY7.s:968    .text.CAN_CancelTransmit:0000000000000000 CAN_CancelTransmit
     /tmp/ccweFGY7.s:1007   .text.CAN_Receive:0000000000000000 $t
     /tmp/ccweFGY7.s:1014   .text.CAN_Receive:0000000000000000 CAN_Receive
     /tmp/ccweFGY7.s:1122   .text.CAN_FIFORelease:0000000000000000 $t
     /tmp/ccweFGY7.s:1129   .text.CAN_FIFORelease:0000000000000000 CAN_FIFORelease
     /tmp/ccweFGY7.s:1154   .text.CAN_MessagePending:0000000000000000 $t
     /tmp/ccweFGY7.s:1161   .text.CAN_MessagePending:0000000000000000 CAN_MessagePending
     /tmp/ccweFGY7.s:1199   .text.CAN_OperatingModeRequest:0000000000000000 $t
     /tmp/ccweFGY7.s:1206   .text.CAN_OperatingModeRequest:0000000000000000 CAN_OperatingModeRequest
     /tmp/ccweFGY7.s:1349   .text.CAN_Sleep:0000000000000000 $t
     /tmp/ccweFGY7.s:1356   .text.CAN_Sleep:0000000000000000 CAN_Sleep
     /tmp/ccweFGY7.s:1389   .text.CAN_WakeUp:0000000000000000 $t
     /tmp/ccweFGY7.s:1396   .text.CAN_WakeUp:0000000000000000 CAN_WakeUp
     /tmp/ccweFGY7.s:1446   .text.CAN_GetLastErrorCode:0000000000000000 $t
     /tmp/ccweFGY7.s:1453   .text.CAN_GetLastErrorCode:0000000000000000 CAN_GetLastErrorCode
     /tmp/ccweFGY7.s:1472   .text.CAN_GetReceiveErrorCounter:0000000000000000 $t
     /tmp/ccweFGY7.s:1479   .text.CAN_GetReceiveErrorCounter:0000000000000000 CAN_GetReceiveErrorCounter
     /tmp/ccweFGY7.s:1498   .text.CAN_GetLSBTransmitErrorCounter:0000000000000000 $t
     /tmp/ccweFGY7.s:1505   .text.CAN_GetLSBTransmitErrorCounter:0000000000000000 CAN_GetLSBTransmitErrorCounter
     /tmp/ccweFGY7.s:1524   .text.CAN_ITConfig:0000000000000000 $t
     /tmp/ccweFGY7.s:1531   .text.CAN_ITConfig:0000000000000000 CAN_ITConfig
     /tmp/ccweFGY7.s:1559   .text.CAN_GetFlagStatus:0000000000000000 $t
     /tmp/ccweFGY7.s:1566   .text.CAN_GetFlagStatus:0000000000000000 CAN_GetFlagStatus
     /tmp/ccweFGY7.s:1679   .text.CAN_ClearFlag:0000000000000000 $t
     /tmp/ccweFGY7.s:1686   .text.CAN_ClearFlag:0000000000000000 CAN_ClearFlag
     /tmp/ccweFGY7.s:1735   .text.CAN_ClearFlag:0000000000000034 $d
     /tmp/ccweFGY7.s:1740   .text.CAN_GetITStatus:0000000000000000 $t
     /tmp/ccweFGY7.s:1747   .text.CAN_GetITStatus:0000000000000000 CAN_GetITStatus
     /tmp/ccweFGY7.s:1968   .text.CAN_GetITStatus:00000000000000e8 $d
     /tmp/ccweFGY7.s:1973   .text.CAN_ClearITPendingBit:0000000000000000 $t
ARM GAS  /tmp/ccweFGY7.s 			page 78


     /tmp/ccweFGY7.s:1980   .text.CAN_ClearITPendingBit:0000000000000000 CAN_ClearITPendingBit
     /tmp/ccweFGY7.s:2105   .text.CAN_ClearITPendingBit:000000000000009c $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
