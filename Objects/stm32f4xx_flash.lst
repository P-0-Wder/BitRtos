ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"stm32f4xx_flash.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.FLASH_SetLatency,"ax",%progbits
  22              		.align	2
  23              		.global	FLASH_SetLatency
  24              		.thumb
  25              		.thumb_func
  27              	FLASH_SetLatency:
  28              	.LFB123:
  29              		.file 1 "FWLIB/src/stm32f4xx_flash.c"
   1:FWLIB/src/stm32f4xx_flash.c **** /**
   2:FWLIB/src/stm32f4xx_flash.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_flash.c ****   * @file    stm32f4xx_flash.c
   4:FWLIB/src/stm32f4xx_flash.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_flash.c ****   * @version V1.8.0
   6:FWLIB/src/stm32f4xx_flash.c ****   * @date    04-November-2016
   7:FWLIB/src/stm32f4xx_flash.c ****   * @brief   This file provides firmware functions to manage the following 
   8:FWLIB/src/stm32f4xx_flash.c ****   *          functionalities of the FLASH peripheral:
   9:FWLIB/src/stm32f4xx_flash.c ****   *            + FLASH Interface configuration
  10:FWLIB/src/stm32f4xx_flash.c ****   *            + FLASH Memory Programming
  11:FWLIB/src/stm32f4xx_flash.c ****   *            + Option Bytes Programming
  12:FWLIB/src/stm32f4xx_flash.c ****   *            + Interrupts and flags management
  13:FWLIB/src/stm32f4xx_flash.c ****   *  
  14:FWLIB/src/stm32f4xx_flash.c ****  @verbatim    
  15:FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================
  16:FWLIB/src/stm32f4xx_flash.c ****                         ##### How to use this driver #####
  17:FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================
  18:FWLIB/src/stm32f4xx_flash.c ****     [..]                             
  19:FWLIB/src/stm32f4xx_flash.c ****       This driver provides functions to configure and program the FLASH memory 
  20:FWLIB/src/stm32f4xx_flash.c ****       of all STM32F4xx devices. These functions are split in 4 groups:
  21:FWLIB/src/stm32f4xx_flash.c ****    
  22:FWLIB/src/stm32f4xx_flash.c ****       (#) FLASH Interface configuration functions: this group includes the
  23:FWLIB/src/stm32f4xx_flash.c ****           management of the following features:
  24:FWLIB/src/stm32f4xx_flash.c ****         (++) Set the latency
  25:FWLIB/src/stm32f4xx_flash.c ****         (++) Enable/Disable the prefetch buffer
  26:FWLIB/src/stm32f4xx_flash.c ****         (++) Enable/Disable the Instruction cache and the Data cache
  27:FWLIB/src/stm32f4xx_flash.c ****         (++) Reset the Instruction cache and the Data cache
  28:FWLIB/src/stm32f4xx_flash.c ****     
  29:FWLIB/src/stm32f4xx_flash.c ****       (#) FLASH Memory Programming functions: this group includes all needed
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 2


  30:FWLIB/src/stm32f4xx_flash.c ****           functions to erase and program the main memory:
  31:FWLIB/src/stm32f4xx_flash.c ****         (++) Lock and Unlock the FLASH interface
  32:FWLIB/src/stm32f4xx_flash.c ****         (++) Erase function: Erase sector, erase all sectors
  33:FWLIB/src/stm32f4xx_flash.c ****         (++) Program functions: byte, half word, word and double word
  34:FWLIB/src/stm32f4xx_flash.c ****     
  35:FWLIB/src/stm32f4xx_flash.c ****       (#) Option Bytes Programming functions: this group includes all needed
  36:FWLIB/src/stm32f4xx_flash.c ****           functions to manage the Option Bytes:
  37:FWLIB/src/stm32f4xx_flash.c ****         (++) Set/Reset the write protection
  38:FWLIB/src/stm32f4xx_flash.c ****         (++) Set the Read protection Level
  39:FWLIB/src/stm32f4xx_flash.c ****         (++) Set the BOR level
  40:FWLIB/src/stm32f4xx_flash.c ****         (++) Program the user Option Bytes
  41:FWLIB/src/stm32f4xx_flash.c ****         (++) Launch the Option Bytes loader
  42:FWLIB/src/stm32f4xx_flash.c ****     
  43:FWLIB/src/stm32f4xx_flash.c ****       (#) Interrupts and flags management functions: this group 
  44:FWLIB/src/stm32f4xx_flash.c ****           includes all needed functions to:
  45:FWLIB/src/stm32f4xx_flash.c ****         (++) Enable/Disable the FLASH interrupt sources
  46:FWLIB/src/stm32f4xx_flash.c ****         (++) Get flags status
  47:FWLIB/src/stm32f4xx_flash.c ****         (++) Clear flags
  48:FWLIB/src/stm32f4xx_flash.c ****         (++) Get FLASH operation status
  49:FWLIB/src/stm32f4xx_flash.c ****         (++) Wait for last FLASH operation   
  50:FWLIB/src/stm32f4xx_flash.c ****  @endverbatim
  51:FWLIB/src/stm32f4xx_flash.c ****   ******************************************************************************
  52:FWLIB/src/stm32f4xx_flash.c ****   * @attention
  53:FWLIB/src/stm32f4xx_flash.c ****   *
  54:FWLIB/src/stm32f4xx_flash.c ****   * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
  55:FWLIB/src/stm32f4xx_flash.c ****   *
  56:FWLIB/src/stm32f4xx_flash.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  57:FWLIB/src/stm32f4xx_flash.c ****   * You may not use this file except in compliance with the License.
  58:FWLIB/src/stm32f4xx_flash.c ****   * You may obtain a copy of the License at:
  59:FWLIB/src/stm32f4xx_flash.c ****   *
  60:FWLIB/src/stm32f4xx_flash.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  61:FWLIB/src/stm32f4xx_flash.c ****   *
  62:FWLIB/src/stm32f4xx_flash.c ****   * Unless required by applicable law or agreed to in writing, software 
  63:FWLIB/src/stm32f4xx_flash.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  64:FWLIB/src/stm32f4xx_flash.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  65:FWLIB/src/stm32f4xx_flash.c ****   * See the License for the specific language governing permissions and
  66:FWLIB/src/stm32f4xx_flash.c ****   * limitations under the License.
  67:FWLIB/src/stm32f4xx_flash.c ****   *
  68:FWLIB/src/stm32f4xx_flash.c ****   ******************************************************************************
  69:FWLIB/src/stm32f4xx_flash.c ****   */
  70:FWLIB/src/stm32f4xx_flash.c **** 
  71:FWLIB/src/stm32f4xx_flash.c **** /* Includes ------------------------------------------------------------------*/
  72:FWLIB/src/stm32f4xx_flash.c **** #include "stm32f4xx_flash.h"
  73:FWLIB/src/stm32f4xx_flash.c **** 
  74:FWLIB/src/stm32f4xx_flash.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  75:FWLIB/src/stm32f4xx_flash.c ****   * @{
  76:FWLIB/src/stm32f4xx_flash.c ****   */
  77:FWLIB/src/stm32f4xx_flash.c **** 
  78:FWLIB/src/stm32f4xx_flash.c **** /** @defgroup FLASH 
  79:FWLIB/src/stm32f4xx_flash.c ****   * @brief FLASH driver modules
  80:FWLIB/src/stm32f4xx_flash.c ****   * @{
  81:FWLIB/src/stm32f4xx_flash.c ****   */ 
  82:FWLIB/src/stm32f4xx_flash.c **** 
  83:FWLIB/src/stm32f4xx_flash.c **** /* Private typedef -----------------------------------------------------------*/
  84:FWLIB/src/stm32f4xx_flash.c **** /* Private define ------------------------------------------------------------*/ 
  85:FWLIB/src/stm32f4xx_flash.c **** #define SECTOR_MASK               ((uint32_t)0xFFFFFF07)
  86:FWLIB/src/stm32f4xx_flash.c **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 3


  87:FWLIB/src/stm32f4xx_flash.c **** /* Private macro -------------------------------------------------------------*/
  88:FWLIB/src/stm32f4xx_flash.c **** /* Private variables ---------------------------------------------------------*/
  89:FWLIB/src/stm32f4xx_flash.c **** /* Private function prototypes -----------------------------------------------*/
  90:FWLIB/src/stm32f4xx_flash.c **** /* Private functions ---------------------------------------------------------*/
  91:FWLIB/src/stm32f4xx_flash.c **** 
  92:FWLIB/src/stm32f4xx_flash.c **** /** @defgroup FLASH_Private_Functions
  93:FWLIB/src/stm32f4xx_flash.c ****   * @{
  94:FWLIB/src/stm32f4xx_flash.c ****   */ 
  95:FWLIB/src/stm32f4xx_flash.c **** 
  96:FWLIB/src/stm32f4xx_flash.c **** /** @defgroup FLASH_Group1 FLASH Interface configuration functions
  97:FWLIB/src/stm32f4xx_flash.c ****   *  @brief   FLASH Interface configuration functions 
  98:FWLIB/src/stm32f4xx_flash.c ****  *
  99:FWLIB/src/stm32f4xx_flash.c **** 
 100:FWLIB/src/stm32f4xx_flash.c **** @verbatim   
 101:FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================
 102:FWLIB/src/stm32f4xx_flash.c ****               ##### FLASH Interface configuration functions #####
 103:FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================
 104:FWLIB/src/stm32f4xx_flash.c ****     [..]
 105:FWLIB/src/stm32f4xx_flash.c ****       This group includes the following functions:
 106:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_SetLatency(uint32_t FLASH_Latency)
 107:FWLIB/src/stm32f4xx_flash.c ****           To correctly read data from FLASH memory, the number of wait states (LATENCY) 
 108:FWLIB/src/stm32f4xx_flash.c ****           must be correctly programmed according to the frequency of the CPU clock 
 109:FWLIB/src/stm32f4xx_flash.c ****           (HCLK) and the supply voltage of the device.
 110:FWLIB/src/stm32f4xx_flash.c ****     [..]      
 111:FWLIB/src/stm32f4xx_flash.c ****       For STM32F405xx/07xx and STM32F415xx/17xx devices
 112:FWLIB/src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 113:FWLIB/src/stm32f4xx_flash.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 114:FWLIB/src/stm32f4xx_flash.c ****  |               |---------------------------------------------------------------------|
 115:FWLIB/src/stm32f4xx_flash.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 116:FWLIB/src/stm32f4xx_flash.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 117:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 118:FWLIB/src/stm32f4xx_flash.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
 119:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 120:FWLIB/src/stm32f4xx_flash.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
 121:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 122:FWLIB/src/stm32f4xx_flash.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
 123:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 124:FWLIB/src/stm32f4xx_flash.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |66 < HCLK <= 88  |60 < HCLK <= 80  |
 125:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 126:FWLIB/src/stm32f4xx_flash.c ****  |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|88 < HCLK <= 110 |80 < HCLK <= 100 |
 127:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 128:FWLIB/src/stm32f4xx_flash.c ****  |5WS(6CPU cycle)|150< HCLK <= 168|120< HCLK <= 144|110 < HCLK <= 132|100 < HCLK <= 120|
 129:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 130:FWLIB/src/stm32f4xx_flash.c ****  |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|132 < HCLK <= 154|120 < HCLK <= 140|
 131:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 132:FWLIB/src/stm32f4xx_flash.c ****  |7WS(8CPU cycle)|      NA        |      NA        |154 < HCLK <= 168|140 < HCLK <= 160|
 133:FWLIB/src/stm32f4xx_flash.c ****  +---------------|----------------|----------------|-----------------|-----------------+
 134:FWLIB/src/stm32f4xx_flash.c **** 
 135:FWLIB/src/stm32f4xx_flash.c ****     [..]      
 136:FWLIB/src/stm32f4xx_flash.c ****       For STM32F42xxx/43xxx devices
 137:FWLIB/src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 138:FWLIB/src/stm32f4xx_flash.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 139:FWLIB/src/stm32f4xx_flash.c ****  |               |---------------------------------------------------------------------|
 140:FWLIB/src/stm32f4xx_flash.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 141:FWLIB/src/stm32f4xx_flash.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 142:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 143:FWLIB/src/stm32f4xx_flash.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 4


 144:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 145:FWLIB/src/stm32f4xx_flash.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
 146:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 147:FWLIB/src/stm32f4xx_flash.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
 148:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 149:FWLIB/src/stm32f4xx_flash.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |66 < HCLK <= 88  |60 < HCLK <= 80  |
 150:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 151:FWLIB/src/stm32f4xx_flash.c ****  |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|88 < HCLK <= 110 |80 < HCLK <= 100 |
 152:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 153:FWLIB/src/stm32f4xx_flash.c ****  |5WS(6CPU cycle)|120< HCLK <= 180|120< HCLK <= 144|110 < HCLK <= 132|100 < HCLK <= 120|
 154:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 155:FWLIB/src/stm32f4xx_flash.c ****  |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|132 < HCLK <= 154|120 < HCLK <= 140|
 156:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 157:FWLIB/src/stm32f4xx_flash.c ****  |7WS(8CPU cycle)|      NA        |168< HCLK <= 180|154 < HCLK <= 176|140 < HCLK <= 160|
 158:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 159:FWLIB/src/stm32f4xx_flash.c ****  |8WS(9CPU cycle)|      NA        |      NA        |176 < HCLK <= 180|160 < HCLK <= 168|
 160:FWLIB/src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 161:FWLIB/src/stm32f4xx_flash.c ****    
 162:FWLIB/src/stm32f4xx_flash.c ****     [..]
 163:FWLIB/src/stm32f4xx_flash.c ****     For STM32F401x devices
 164:FWLIB/src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 165:FWLIB/src/stm32f4xx_flash.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 166:FWLIB/src/stm32f4xx_flash.c ****  |               |---------------------------------------------------------------------|
 167:FWLIB/src/stm32f4xx_flash.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 168:FWLIB/src/stm32f4xx_flash.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 169:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 170:FWLIB/src/stm32f4xx_flash.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
 171:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 172:FWLIB/src/stm32f4xx_flash.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
 173:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 174:FWLIB/src/stm32f4xx_flash.c ****  |2WS(3CPU cycle)|60 < HCLK <= 84 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
 175:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 176:FWLIB/src/stm32f4xx_flash.c ****  |3WS(4CPU cycle)|      NA        |72 < HCLK <= 84 |66 < HCLK <= 84  |60 < HCLK <= 80  |
 177:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 178:FWLIB/src/stm32f4xx_flash.c ****  |4WS(5CPU cycle)|      NA        |      NA        |      NA         |80 < HCLK <= 84  |
 179:FWLIB/src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 180:FWLIB/src/stm32f4xx_flash.c **** 
 181:FWLIB/src/stm32f4xx_flash.c ****     [..]
 182:FWLIB/src/stm32f4xx_flash.c ****     For STM32F410xx/STM32F411xE devices
 183:FWLIB/src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 184:FWLIB/src/stm32f4xx_flash.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 185:FWLIB/src/stm32f4xx_flash.c ****  |               |---------------------------------------------------------------------|
 186:FWLIB/src/stm32f4xx_flash.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 187:FWLIB/src/stm32f4xx_flash.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 188:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 189:FWLIB/src/stm32f4xx_flash.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 18   |0 < HCLK <= 16   |
 190:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 191:FWLIB/src/stm32f4xx_flash.c ****  |1WS(2CPU cycle)|30 < HCLK <= 64 |24 < HCLK <= 48 |18 < HCLK <= 36  |16 < HCLK <= 32  |
 192:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 193:FWLIB/src/stm32f4xx_flash.c ****  |2WS(3CPU cycle)|64 < HCLK <= 90 |48 < HCLK <= 72 |36 < HCLK <= 54  |32 < HCLK <= 48  |
 194:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 195:FWLIB/src/stm32f4xx_flash.c ****  |3WS(4CPU cycle)|90 < HCLK <= 100|72 < HCLK <= 96 |54 < HCLK <= 72  |48 < HCLK <= 64  |
 196:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 197:FWLIB/src/stm32f4xx_flash.c ****  |4WS(5CPU cycle)|      NA        |96 < HCLK <= 100|72 < HCLK <= 90  |64 < HCLK <= 80  |
 198:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 199:FWLIB/src/stm32f4xx_flash.c ****  |5WS(6CPU cycle)|      NA        |       NA       |90 < HCLK <= 100 |80 < HCLK <= 96  |
 200:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 5


 201:FWLIB/src/stm32f4xx_flash.c ****  |6WS(7CPU cycle)|      NA        |       NA       |        NA       |96 < HCLK <= 100 |
 202:FWLIB/src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 203:FWLIB/src/stm32f4xx_flash.c ****  
 204:FWLIB/src/stm32f4xx_flash.c ****  [..]
 205:FWLIB/src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------------------
 206:FWLIB/src/stm32f4xx_flash.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   | voltage ra
 207:FWLIB/src/stm32f4xx_flash.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   | with Exter
 208:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|-----------
 209:FWLIB/src/stm32f4xx_flash.c ****  |Max Parallelism|      x32       |               x16                |       x8        |          x
 210:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|-----------
 211:FWLIB/src/stm32f4xx_flash.c ****  |PSIZE[1:0]     |      10        |               01                 |       00        |           
 212:FWLIB/src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------------------
 213:FWLIB/src/stm32f4xx_flash.c **** 
 214:FWLIB/src/stm32f4xx_flash.c ****       -@- On STM32F405xx/407xx and STM32F415xx/417xx devices: 
 215:FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS = '0' Scale 2 mode, the maximum value of fHCLK = 144MHz. 
 216:FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS = '1' Scale 1 mode, the maximum value of fHCLK = 168MHz. 
 217:FWLIB/src/stm32f4xx_flash.c ****           [..] 
 218:FWLIB/src/stm32f4xx_flash.c ****           On STM32F42xxx/43xxx devices:
 219:FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x01' Scale 3 mode, the maximum value of fHCLK is 120MHz.
 220:FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x10' Scale 2 mode, the maximum value of fHCLK is 144MHz if OverDr
 221:FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x11' Scale 1 mode, the maximum value of fHCLK is 168MHz if OverDr
 222:FWLIB/src/stm32f4xx_flash.c ****           [..]
 223:FWLIB/src/stm32f4xx_flash.c ****           On STM32F401x devices:
 224:FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x01' Scale 3 mode, the maximum value of fHCLK is 60MHz.
 225:FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x10' Scale 2 mode, the maximum value of fHCLK is 84MHz.
 226:FWLIB/src/stm32f4xx_flash.c ****           [..]  
 227:FWLIB/src/stm32f4xx_flash.c ****           On STM32F410xx/STM32F411xE devices:
 228:FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x01' Scale 3 mode, the maximum value of fHCLK is 64MHz.
 229:FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x10' Scale 2 mode, the maximum value of fHCLK is 84MHz.
 230:FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x11' Scale 1 mode, the maximum value of fHCLK is 100MHz.
 231:FWLIB/src/stm32f4xx_flash.c **** 
 232:FWLIB/src/stm32f4xx_flash.c ****         For more details please refer product DataSheet 
 233:FWLIB/src/stm32f4xx_flash.c ****            You can use PWR_MainRegulatorModeConfig() function to control VOS bits.
 234:FWLIB/src/stm32f4xx_flash.c **** 
 235:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_PrefetchBufferCmd(FunctionalState NewState)
 236:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_InstructionCacheCmd(FunctionalState NewState)
 237:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_DataCacheCmd(FunctionalState NewState)
 238:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_InstructionCacheReset(void)
 239:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_DataCacheReset(void)
 240:FWLIB/src/stm32f4xx_flash.c ****       
 241:FWLIB/src/stm32f4xx_flash.c ****     [..]   
 242:FWLIB/src/stm32f4xx_flash.c ****       The unlock sequence is not needed for these functions.
 243:FWLIB/src/stm32f4xx_flash.c ****  
 244:FWLIB/src/stm32f4xx_flash.c **** @endverbatim
 245:FWLIB/src/stm32f4xx_flash.c ****   * @{
 246:FWLIB/src/stm32f4xx_flash.c ****   */
 247:FWLIB/src/stm32f4xx_flash.c ****  
 248:FWLIB/src/stm32f4xx_flash.c **** /**
 249:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Sets the code latency value.  
 250:FWLIB/src/stm32f4xx_flash.c ****   * @param  FLASH_Latency: specifies the FLASH Latency value.
 251:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
 252:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_0: FLASH Zero Latency cycle
 253:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_1: FLASH One Latency cycle
 254:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_2: FLASH Two Latency cycles
 255:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_3: FLASH Three Latency cycles
 256:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_4: FLASH Four Latency cycles 
 257:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_5: FLASH Five Latency cycles 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 6


 258:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_6: FLASH Six Latency cycles
 259:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_7: FLASH Seven Latency cycles 
 260:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_8: FLASH Eight Latency cycles
 261:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_9: FLASH Nine Latency cycles
 262:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_10: FLASH Teen Latency cycles 
 263:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_11: FLASH Eleven Latency cycles 
 264:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_12: FLASH Twelve Latency cycles
 265:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_13: FLASH Thirteen Latency cycles
 266:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_14: FLASH Fourteen Latency cycles
 267:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_15: FLASH Fifteen Latency cycles 
 268:FWLIB/src/stm32f4xx_flash.c ****   *              
 269:FWLIB/src/stm32f4xx_flash.c ****   * @note For STM32F405xx/407xx, STM32F415xx/417xx, STM32F401xx/411xE/STM32F412xG and STM32F413_423
 270:FWLIB/src/stm32f4xx_flash.c ****   *       this parameter can be a value between FLASH_Latency_0 and FLASH_Latency_7.
 271:FWLIB/src/stm32f4xx_flash.c ****   *
 272:FWLIB/src/stm32f4xx_flash.c ****   * @note For STM32F42xxx/43xxx devices this parameter can be a value between 
 273:FWLIB/src/stm32f4xx_flash.c ****   *       FLASH_Latency_0 and FLASH_Latency_15. 
 274:FWLIB/src/stm32f4xx_flash.c ****   *         
 275:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 276:FWLIB/src/stm32f4xx_flash.c ****   */
 277:FWLIB/src/stm32f4xx_flash.c **** void FLASH_SetLatency(uint32_t FLASH_Latency)
 278:FWLIB/src/stm32f4xx_flash.c **** {
  30              		.loc 1 278 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  35              	.LVL0:
 279:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
 280:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_LATENCY(FLASH_Latency));
 281:FWLIB/src/stm32f4xx_flash.c ****   
 282:FWLIB/src/stm32f4xx_flash.c ****   /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
 283:FWLIB/src/stm32f4xx_flash.c ****   *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
  36              		.loc 1 283 0
  37 0000 C0B2     		uxtb	r0, r0
  38              	.LVL1:
  39 0002 014B     		ldr	r3, .L2
  40 0004 1870     		strb	r0, [r3]
  41 0006 7047     		bx	lr
  42              	.L3:
  43              		.align	2
  44              	.L2:
  45 0008 003C0240 		.word	1073888256
  46              		.cfi_endproc
  47              	.LFE123:
  49              		.section	.text.FLASH_PrefetchBufferCmd,"ax",%progbits
  50              		.align	2
  51              		.global	FLASH_PrefetchBufferCmd
  52              		.thumb
  53              		.thumb_func
  55              	FLASH_PrefetchBufferCmd:
  56              	.LFB124:
 284:FWLIB/src/stm32f4xx_flash.c **** }
 285:FWLIB/src/stm32f4xx_flash.c **** 
 286:FWLIB/src/stm32f4xx_flash.c **** /**
 287:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Enables or disables the Prefetch Buffer.
 288:FWLIB/src/stm32f4xx_flash.c ****   * @param  NewState: new state of the Prefetch Buffer.
 289:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter  can be: ENABLE or DISABLE.
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 7


 290:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 291:FWLIB/src/stm32f4xx_flash.c ****   */
 292:FWLIB/src/stm32f4xx_flash.c **** void FLASH_PrefetchBufferCmd(FunctionalState NewState)
 293:FWLIB/src/stm32f4xx_flash.c **** {
  57              		.loc 1 293 0
  58              		.cfi_startproc
  59              		@ args = 0, pretend = 0, frame = 0
  60              		@ frame_needed = 0, uses_anonymous_args = 0
  61              		@ link register save eliminated.
  62              	.LVL2:
 294:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
 295:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 296:FWLIB/src/stm32f4xx_flash.c ****   
 297:FWLIB/src/stm32f4xx_flash.c ****   /* Enable or disable the Prefetch Buffer */
 298:FWLIB/src/stm32f4xx_flash.c ****   if(NewState != DISABLE)
  63              		.loc 1 298 0
  64 0000 28B1     		cbz	r0, .L5
 299:FWLIB/src/stm32f4xx_flash.c ****   {
 300:FWLIB/src/stm32f4xx_flash.c ****     FLASH->ACR |= FLASH_ACR_PRFTEN;
  65              		.loc 1 300 0
  66 0002 064A     		ldr	r2, .L7
  67 0004 1368     		ldr	r3, [r2]
  68 0006 43F48073 		orr	r3, r3, #256
  69 000a 1360     		str	r3, [r2]
  70 000c 7047     		bx	lr
  71              	.L5:
 301:FWLIB/src/stm32f4xx_flash.c ****   }
 302:FWLIB/src/stm32f4xx_flash.c ****   else
 303:FWLIB/src/stm32f4xx_flash.c ****   {
 304:FWLIB/src/stm32f4xx_flash.c ****     FLASH->ACR &= (~FLASH_ACR_PRFTEN);
  72              		.loc 1 304 0
  73 000e 034A     		ldr	r2, .L7
  74 0010 1368     		ldr	r3, [r2]
  75 0012 23F48073 		bic	r3, r3, #256
  76 0016 1360     		str	r3, [r2]
  77 0018 7047     		bx	lr
  78              	.L8:
  79 001a 00BF     		.align	2
  80              	.L7:
  81 001c 003C0240 		.word	1073888256
  82              		.cfi_endproc
  83              	.LFE124:
  85              		.section	.text.FLASH_InstructionCacheCmd,"ax",%progbits
  86              		.align	2
  87              		.global	FLASH_InstructionCacheCmd
  88              		.thumb
  89              		.thumb_func
  91              	FLASH_InstructionCacheCmd:
  92              	.LFB125:
 305:FWLIB/src/stm32f4xx_flash.c ****   }
 306:FWLIB/src/stm32f4xx_flash.c **** }
 307:FWLIB/src/stm32f4xx_flash.c **** 
 308:FWLIB/src/stm32f4xx_flash.c **** /**
 309:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Enables or disables the Instruction Cache feature.
 310:FWLIB/src/stm32f4xx_flash.c ****   * @param  NewState: new state of the Instruction Cache.
 311:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter  can be: ENABLE or DISABLE.
 312:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 8


 313:FWLIB/src/stm32f4xx_flash.c ****   */
 314:FWLIB/src/stm32f4xx_flash.c **** void FLASH_InstructionCacheCmd(FunctionalState NewState)
 315:FWLIB/src/stm32f4xx_flash.c **** {
  93              		.loc 1 315 0
  94              		.cfi_startproc
  95              		@ args = 0, pretend = 0, frame = 0
  96              		@ frame_needed = 0, uses_anonymous_args = 0
  97              		@ link register save eliminated.
  98              	.LVL3:
 316:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
 317:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 318:FWLIB/src/stm32f4xx_flash.c ****   
 319:FWLIB/src/stm32f4xx_flash.c ****   if(NewState != DISABLE)
  99              		.loc 1 319 0
 100 0000 28B1     		cbz	r0, .L10
 320:FWLIB/src/stm32f4xx_flash.c ****   {
 321:FWLIB/src/stm32f4xx_flash.c ****     FLASH->ACR |= FLASH_ACR_ICEN;
 101              		.loc 1 321 0
 102 0002 064A     		ldr	r2, .L12
 103 0004 1368     		ldr	r3, [r2]
 104 0006 43F40073 		orr	r3, r3, #512
 105 000a 1360     		str	r3, [r2]
 106 000c 7047     		bx	lr
 107              	.L10:
 322:FWLIB/src/stm32f4xx_flash.c ****   }
 323:FWLIB/src/stm32f4xx_flash.c ****   else
 324:FWLIB/src/stm32f4xx_flash.c ****   {
 325:FWLIB/src/stm32f4xx_flash.c ****     FLASH->ACR &= (~FLASH_ACR_ICEN);
 108              		.loc 1 325 0
 109 000e 034A     		ldr	r2, .L12
 110 0010 1368     		ldr	r3, [r2]
 111 0012 23F40073 		bic	r3, r3, #512
 112 0016 1360     		str	r3, [r2]
 113 0018 7047     		bx	lr
 114              	.L13:
 115 001a 00BF     		.align	2
 116              	.L12:
 117 001c 003C0240 		.word	1073888256
 118              		.cfi_endproc
 119              	.LFE125:
 121              		.section	.text.FLASH_DataCacheCmd,"ax",%progbits
 122              		.align	2
 123              		.global	FLASH_DataCacheCmd
 124              		.thumb
 125              		.thumb_func
 127              	FLASH_DataCacheCmd:
 128              	.LFB126:
 326:FWLIB/src/stm32f4xx_flash.c ****   }
 327:FWLIB/src/stm32f4xx_flash.c **** }
 328:FWLIB/src/stm32f4xx_flash.c **** 
 329:FWLIB/src/stm32f4xx_flash.c **** /**
 330:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Enables or disables the Data Cache feature.
 331:FWLIB/src/stm32f4xx_flash.c ****   * @param  NewState: new state of the Data Cache.
 332:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter  can be: ENABLE or DISABLE.
 333:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 334:FWLIB/src/stm32f4xx_flash.c ****   */
 335:FWLIB/src/stm32f4xx_flash.c **** void FLASH_DataCacheCmd(FunctionalState NewState)
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 9


 336:FWLIB/src/stm32f4xx_flash.c **** {
 129              		.loc 1 336 0
 130              		.cfi_startproc
 131              		@ args = 0, pretend = 0, frame = 0
 132              		@ frame_needed = 0, uses_anonymous_args = 0
 133              		@ link register save eliminated.
 134              	.LVL4:
 337:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
 338:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 339:FWLIB/src/stm32f4xx_flash.c ****   
 340:FWLIB/src/stm32f4xx_flash.c ****   if(NewState != DISABLE)
 135              		.loc 1 340 0
 136 0000 28B1     		cbz	r0, .L15
 341:FWLIB/src/stm32f4xx_flash.c ****   {
 342:FWLIB/src/stm32f4xx_flash.c ****     FLASH->ACR |= FLASH_ACR_DCEN;
 137              		.loc 1 342 0
 138 0002 064A     		ldr	r2, .L17
 139 0004 1368     		ldr	r3, [r2]
 140 0006 43F48063 		orr	r3, r3, #1024
 141 000a 1360     		str	r3, [r2]
 142 000c 7047     		bx	lr
 143              	.L15:
 343:FWLIB/src/stm32f4xx_flash.c ****   }
 344:FWLIB/src/stm32f4xx_flash.c ****   else
 345:FWLIB/src/stm32f4xx_flash.c ****   {
 346:FWLIB/src/stm32f4xx_flash.c ****     FLASH->ACR &= (~FLASH_ACR_DCEN);
 144              		.loc 1 346 0
 145 000e 034A     		ldr	r2, .L17
 146 0010 1368     		ldr	r3, [r2]
 147 0012 23F48063 		bic	r3, r3, #1024
 148 0016 1360     		str	r3, [r2]
 149 0018 7047     		bx	lr
 150              	.L18:
 151 001a 00BF     		.align	2
 152              	.L17:
 153 001c 003C0240 		.word	1073888256
 154              		.cfi_endproc
 155              	.LFE126:
 157              		.section	.text.FLASH_InstructionCacheReset,"ax",%progbits
 158              		.align	2
 159              		.global	FLASH_InstructionCacheReset
 160              		.thumb
 161              		.thumb_func
 163              	FLASH_InstructionCacheReset:
 164              	.LFB127:
 347:FWLIB/src/stm32f4xx_flash.c ****   }
 348:FWLIB/src/stm32f4xx_flash.c **** }
 349:FWLIB/src/stm32f4xx_flash.c **** 
 350:FWLIB/src/stm32f4xx_flash.c **** /**
 351:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Resets the Instruction Cache.
 352:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function must be used only when the Instruction Cache is disabled.  
 353:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
 354:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 355:FWLIB/src/stm32f4xx_flash.c ****   */
 356:FWLIB/src/stm32f4xx_flash.c **** void FLASH_InstructionCacheReset(void)
 357:FWLIB/src/stm32f4xx_flash.c **** {
 165              		.loc 1 357 0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 10


 166              		.cfi_startproc
 167              		@ args = 0, pretend = 0, frame = 0
 168              		@ frame_needed = 0, uses_anonymous_args = 0
 169              		@ link register save eliminated.
 358:FWLIB/src/stm32f4xx_flash.c ****   FLASH->ACR |= FLASH_ACR_ICRST;
 170              		.loc 1 358 0
 171 0000 024A     		ldr	r2, .L20
 172 0002 1368     		ldr	r3, [r2]
 173 0004 43F40063 		orr	r3, r3, #2048
 174 0008 1360     		str	r3, [r2]
 175 000a 7047     		bx	lr
 176              	.L21:
 177              		.align	2
 178              	.L20:
 179 000c 003C0240 		.word	1073888256
 180              		.cfi_endproc
 181              	.LFE127:
 183              		.section	.text.FLASH_DataCacheReset,"ax",%progbits
 184              		.align	2
 185              		.global	FLASH_DataCacheReset
 186              		.thumb
 187              		.thumb_func
 189              	FLASH_DataCacheReset:
 190              	.LFB128:
 359:FWLIB/src/stm32f4xx_flash.c **** }
 360:FWLIB/src/stm32f4xx_flash.c **** 
 361:FWLIB/src/stm32f4xx_flash.c **** /**
 362:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Resets the Data Cache.
 363:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function must be used only when the Data Cache is disabled.  
 364:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
 365:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 366:FWLIB/src/stm32f4xx_flash.c ****   */
 367:FWLIB/src/stm32f4xx_flash.c **** void FLASH_DataCacheReset(void)
 368:FWLIB/src/stm32f4xx_flash.c **** {
 191              		.loc 1 368 0
 192              		.cfi_startproc
 193              		@ args = 0, pretend = 0, frame = 0
 194              		@ frame_needed = 0, uses_anonymous_args = 0
 195              		@ link register save eliminated.
 369:FWLIB/src/stm32f4xx_flash.c ****   FLASH->ACR |= FLASH_ACR_DCRST;
 196              		.loc 1 369 0
 197 0000 024A     		ldr	r2, .L23
 198 0002 1368     		ldr	r3, [r2]
 199 0004 43F48053 		orr	r3, r3, #4096
 200 0008 1360     		str	r3, [r2]
 201 000a 7047     		bx	lr
 202              	.L24:
 203              		.align	2
 204              	.L23:
 205 000c 003C0240 		.word	1073888256
 206              		.cfi_endproc
 207              	.LFE128:
 209              		.section	.text.FLASH_Unlock,"ax",%progbits
 210              		.align	2
 211              		.global	FLASH_Unlock
 212              		.thumb
 213              		.thumb_func
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 11


 215              	FLASH_Unlock:
 216              	.LFB129:
 370:FWLIB/src/stm32f4xx_flash.c **** }
 371:FWLIB/src/stm32f4xx_flash.c **** 
 372:FWLIB/src/stm32f4xx_flash.c **** /**
 373:FWLIB/src/stm32f4xx_flash.c ****   * @}
 374:FWLIB/src/stm32f4xx_flash.c ****   */
 375:FWLIB/src/stm32f4xx_flash.c **** 
 376:FWLIB/src/stm32f4xx_flash.c **** /** @defgroup FLASH_Group2 FLASH Memory Programming functions
 377:FWLIB/src/stm32f4xx_flash.c ****  *  @brief   FLASH Memory Programming functions
 378:FWLIB/src/stm32f4xx_flash.c ****  *
 379:FWLIB/src/stm32f4xx_flash.c **** @verbatim   
 380:FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================
 381:FWLIB/src/stm32f4xx_flash.c ****                 ##### FLASH Memory Programming functions #####
 382:FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================   
 383:FWLIB/src/stm32f4xx_flash.c ****     [..]
 384:FWLIB/src/stm32f4xx_flash.c ****       This group includes the following functions:
 385:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_Unlock(void)
 386:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_Lock(void)
 387:FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
 388:FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)       
 389:FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
 390:FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
 391:FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
 392:FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
 393:FWLIB/src/stm32f4xx_flash.c ****           The following functions can be used only for STM32F42xxx/43xxx devices. 
 394:FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_EraseAllBank1Sectors(uint8_t VoltageRange)
 395:FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_EraseAllBank2Sectors(uint8_t VoltageRange)    
 396:FWLIB/src/stm32f4xx_flash.c ****     [..]   
 397:FWLIB/src/stm32f4xx_flash.c ****       Any operation of erase or program should follow these steps:
 398:FWLIB/src/stm32f4xx_flash.c ****       (#) Call the FLASH_Unlock() function to enable the FLASH control register access
 399:FWLIB/src/stm32f4xx_flash.c **** 
 400:FWLIB/src/stm32f4xx_flash.c ****       (#) Call the desired function to erase sector(s) or program data
 401:FWLIB/src/stm32f4xx_flash.c **** 
 402:FWLIB/src/stm32f4xx_flash.c ****       (#) Call the FLASH_Lock() function to disable the FLASH control register access
 403:FWLIB/src/stm32f4xx_flash.c ****           (recommended to protect the FLASH memory against possible unwanted operation)
 404:FWLIB/src/stm32f4xx_flash.c ****     
 405:FWLIB/src/stm32f4xx_flash.c **** @endverbatim
 406:FWLIB/src/stm32f4xx_flash.c ****   * @{
 407:FWLIB/src/stm32f4xx_flash.c ****   */
 408:FWLIB/src/stm32f4xx_flash.c **** 
 409:FWLIB/src/stm32f4xx_flash.c **** /**
 410:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Unlocks the FLASH control register access
 411:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
 412:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 413:FWLIB/src/stm32f4xx_flash.c ****   */
 414:FWLIB/src/stm32f4xx_flash.c **** void FLASH_Unlock(void)
 415:FWLIB/src/stm32f4xx_flash.c **** {
 217              		.loc 1 415 0
 218              		.cfi_startproc
 219              		@ args = 0, pretend = 0, frame = 0
 220              		@ frame_needed = 0, uses_anonymous_args = 0
 221              		@ link register save eliminated.
 416:FWLIB/src/stm32f4xx_flash.c ****   if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 222              		.loc 1 416 0
 223 0000 054B     		ldr	r3, .L27
 224 0002 1B69     		ldr	r3, [r3, #16]
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 12


 225 0004 002B     		cmp	r3, #0
 226 0006 05DA     		bge	.L25
 417:FWLIB/src/stm32f4xx_flash.c ****   {
 418:FWLIB/src/stm32f4xx_flash.c ****     /* Authorize the FLASH Registers access */
 419:FWLIB/src/stm32f4xx_flash.c ****     FLASH->KEYR = FLASH_KEY1;
 227              		.loc 1 419 0
 228 0008 034B     		ldr	r3, .L27
 229 000a 044A     		ldr	r2, .L27+4
 230 000c 5A60     		str	r2, [r3, #4]
 420:FWLIB/src/stm32f4xx_flash.c ****     FLASH->KEYR = FLASH_KEY2;
 231              		.loc 1 420 0
 232 000e 02F18832 		add	r2, r2, #-2004318072
 233 0012 5A60     		str	r2, [r3, #4]
 234              	.L25:
 235 0014 7047     		bx	lr
 236              	.L28:
 237 0016 00BF     		.align	2
 238              	.L27:
 239 0018 003C0240 		.word	1073888256
 240 001c 23016745 		.word	1164378403
 241              		.cfi_endproc
 242              	.LFE129:
 244              		.section	.text.FLASH_Lock,"ax",%progbits
 245              		.align	2
 246              		.global	FLASH_Lock
 247              		.thumb
 248              		.thumb_func
 250              	FLASH_Lock:
 251              	.LFB130:
 421:FWLIB/src/stm32f4xx_flash.c ****   }  
 422:FWLIB/src/stm32f4xx_flash.c **** }
 423:FWLIB/src/stm32f4xx_flash.c **** 
 424:FWLIB/src/stm32f4xx_flash.c **** /**
 425:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Locks the FLASH control register access
 426:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
 427:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 428:FWLIB/src/stm32f4xx_flash.c ****   */
 429:FWLIB/src/stm32f4xx_flash.c **** void FLASH_Lock(void)
 430:FWLIB/src/stm32f4xx_flash.c **** {
 252              		.loc 1 430 0
 253              		.cfi_startproc
 254              		@ args = 0, pretend = 0, frame = 0
 255              		@ frame_needed = 0, uses_anonymous_args = 0
 256              		@ link register save eliminated.
 431:FWLIB/src/stm32f4xx_flash.c ****   /* Set the LOCK Bit to lock the FLASH Registers access */
 432:FWLIB/src/stm32f4xx_flash.c ****   FLASH->CR |= FLASH_CR_LOCK;
 257              		.loc 1 432 0
 258 0000 024A     		ldr	r2, .L30
 259 0002 1369     		ldr	r3, [r2, #16]
 260 0004 43F00043 		orr	r3, r3, #-2147483648
 261 0008 1361     		str	r3, [r2, #16]
 262 000a 7047     		bx	lr
 263              	.L31:
 264              		.align	2
 265              	.L30:
 266 000c 003C0240 		.word	1073888256
 267              		.cfi_endproc
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 13


 268              	.LFE130:
 270              		.section	.text.FLASH_OB_Unlock,"ax",%progbits
 271              		.align	2
 272              		.global	FLASH_OB_Unlock
 273              		.thumb
 274              		.thumb_func
 276              	FLASH_OB_Unlock:
 277              	.LFB139:
 433:FWLIB/src/stm32f4xx_flash.c **** }
 434:FWLIB/src/stm32f4xx_flash.c **** 
 435:FWLIB/src/stm32f4xx_flash.c **** /**
 436:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Erases a specified FLASH Sector.
 437:FWLIB/src/stm32f4xx_flash.c ****   *
 438:FWLIB/src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 439:FWLIB/src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 440:FWLIB/src/stm32f4xx_flash.c ****   *
 441:FWLIB/src/stm32f4xx_flash.c ****   * @param  FLASH_Sector: The Sector number to be erased.
 442:FWLIB/src/stm32f4xx_flash.c ****   *
 443:FWLIB/src/stm32f4xx_flash.c ****   *  @note  For STM32F405xx/407xx and STM32F415xx/417xx devices this parameter can 
 444:FWLIB/src/stm32f4xx_flash.c ****   *         be a value between FLASH_Sector_0 and FLASH_Sector_11.
 445:FWLIB/src/stm32f4xx_flash.c ****   *
 446:FWLIB/src/stm32f4xx_flash.c ****   *         For STM32F42xxx/43xxx devices this parameter can be a value between 
 447:FWLIB/src/stm32f4xx_flash.c ****   *         FLASH_Sector_0 and FLASH_Sector_23.
 448:FWLIB/src/stm32f4xx_flash.c ****   *
 449:FWLIB/src/stm32f4xx_flash.c ****   *         For STM32F401xx devices this parameter can be a value between 
 450:FWLIB/src/stm32f4xx_flash.c ****   *         FLASH_Sector_0 and FLASH_Sector_5.
 451:FWLIB/src/stm32f4xx_flash.c ****   *
 452:FWLIB/src/stm32f4xx_flash.c ****   *         For STM32F411xE and STM32F412xG devices this parameter can be a value between 
 453:FWLIB/src/stm32f4xx_flash.c ****   *         FLASH_Sector_0 and FLASH_Sector_7.
 454:FWLIB/src/stm32f4xx_flash.c ****   *
 455:FWLIB/src/stm32f4xx_flash.c ****   *         For STM32F410xx devices this parameter can be a value between 
 456:FWLIB/src/stm32f4xx_flash.c ****   *         FLASH_Sector_0 and FLASH_Sector_4.
 457:FWLIB/src/stm32f4xx_flash.c ****   *
 458:FWLIB/src/stm32f4xx_flash.c ****   *         For STM32F413_423xx devices this parameter can be a value between 
 459:FWLIB/src/stm32f4xx_flash.c ****   *         FLASH_Sector_0 and FLASH_Sector_15.
 460:FWLIB/src/stm32f4xx_flash.c ****   *
 461:FWLIB/src/stm32f4xx_flash.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
 462:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
 463:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_1: when the device voltage range is 1.8V to 2.1V, 
 464:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by byte (8-bit) 
 465:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_2: when the device voltage range is 2.1V to 2.7V,
 466:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by half word (16-bit)
 467:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_3: when the device voltage range is 2.7V to 3.6V,
 468:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by word (32-bit)
 469:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
 470:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by double word (64-bit)
 471:FWLIB/src/stm32f4xx_flash.c ****   *       
 472:FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 473:FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
 474:FWLIB/src/stm32f4xx_flash.c ****   */
 475:FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
 476:FWLIB/src/stm32f4xx_flash.c **** {
 477:FWLIB/src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 478:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 479:FWLIB/src/stm32f4xx_flash.c **** 
 480:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
 481:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_SECTOR(FLASH_Sector));
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 14


 482:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 483:FWLIB/src/stm32f4xx_flash.c ****   
 484:FWLIB/src/stm32f4xx_flash.c ****   if(VoltageRange == VoltageRange_1)
 485:FWLIB/src/stm32f4xx_flash.c ****   {
 486:FWLIB/src/stm32f4xx_flash.c ****      tmp_psize = FLASH_PSIZE_BYTE;
 487:FWLIB/src/stm32f4xx_flash.c ****   }
 488:FWLIB/src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_2)
 489:FWLIB/src/stm32f4xx_flash.c ****   {
 490:FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_HALF_WORD;
 491:FWLIB/src/stm32f4xx_flash.c ****   }
 492:FWLIB/src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_3)
 493:FWLIB/src/stm32f4xx_flash.c ****   {
 494:FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_WORD;
 495:FWLIB/src/stm32f4xx_flash.c ****   }
 496:FWLIB/src/stm32f4xx_flash.c ****   else
 497:FWLIB/src/stm32f4xx_flash.c ****   {
 498:FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 499:FWLIB/src/stm32f4xx_flash.c ****   }
 500:FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 501:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 502:FWLIB/src/stm32f4xx_flash.c ****   
 503:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 504:FWLIB/src/stm32f4xx_flash.c ****   { 
 505:FWLIB/src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to erase the sector */
 506:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 507:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= tmp_psize;
 508:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= SECTOR_MASK;
 509:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 510:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 511:FWLIB/src/stm32f4xx_flash.c ****     
 512:FWLIB/src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 513:FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 514:FWLIB/src/stm32f4xx_flash.c ****     
 515:FWLIB/src/stm32f4xx_flash.c ****     /* if the erase operation is completed, disable the SER Bit */
 516:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_SER);
 517:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= SECTOR_MASK; 
 518:FWLIB/src/stm32f4xx_flash.c ****   }
 519:FWLIB/src/stm32f4xx_flash.c ****   /* Return the Erase Status */
 520:FWLIB/src/stm32f4xx_flash.c ****   return status;
 521:FWLIB/src/stm32f4xx_flash.c **** }
 522:FWLIB/src/stm32f4xx_flash.c **** 
 523:FWLIB/src/stm32f4xx_flash.c **** /**
 524:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Erases all FLASH Sectors.
 525:FWLIB/src/stm32f4xx_flash.c ****   *
 526:FWLIB/src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 527:FWLIB/src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 528:FWLIB/src/stm32f4xx_flash.c ****   *  
 529:FWLIB/src/stm32f4xx_flash.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
 530:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
 531:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_1: when the device voltage range is 1.8V to 2.1V, 
 532:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by byte (8-bit) 
 533:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_2: when the device voltage range is 2.1V to 2.7V,
 534:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by half word (16-bit)
 535:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_3: when the device voltage range is 2.7V to 3.6V,
 536:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by word (32-bit)
 537:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
 538:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by double word (64-bit)
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 15


 539:FWLIB/src/stm32f4xx_flash.c ****   *       
 540:FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 541:FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
 542:FWLIB/src/stm32f4xx_flash.c ****   */
 543:FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)
 544:FWLIB/src/stm32f4xx_flash.c **** {
 545:FWLIB/src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 546:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 547:FWLIB/src/stm32f4xx_flash.c ****   
 548:FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 549:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 550:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 551:FWLIB/src/stm32f4xx_flash.c ****   
 552:FWLIB/src/stm32f4xx_flash.c ****   if(VoltageRange == VoltageRange_1)
 553:FWLIB/src/stm32f4xx_flash.c ****   {
 554:FWLIB/src/stm32f4xx_flash.c ****      tmp_psize = FLASH_PSIZE_BYTE;
 555:FWLIB/src/stm32f4xx_flash.c ****   }
 556:FWLIB/src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_2)
 557:FWLIB/src/stm32f4xx_flash.c ****   {
 558:FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_HALF_WORD;
 559:FWLIB/src/stm32f4xx_flash.c ****   }
 560:FWLIB/src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_3)
 561:FWLIB/src/stm32f4xx_flash.c ****   {
 562:FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_WORD;
 563:FWLIB/src/stm32f4xx_flash.c ****   }
 564:FWLIB/src/stm32f4xx_flash.c ****   else
 565:FWLIB/src/stm32f4xx_flash.c ****   {
 566:FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 567:FWLIB/src/stm32f4xx_flash.c ****   }  
 568:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 569:FWLIB/src/stm32f4xx_flash.c ****   {
 570:FWLIB/src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to erase all sectors */
 571:FWLIB/src/stm32f4xx_flash.c **** #if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F469_479xx)
 572:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 573:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= tmp_psize;
 574:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= (FLASH_CR_MER1 | FLASH_CR_MER2);
 575:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 576:FWLIB/src/stm32f4xx_flash.c ****     
 577:FWLIB/src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 578:FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 579:FWLIB/src/stm32f4xx_flash.c **** 
 580:FWLIB/src/stm32f4xx_flash.c ****     /* if the erase operation is completed, disable the MER Bit */
 581:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= ~(FLASH_CR_MER1 | FLASH_CR_MER2);
 582:FWLIB/src/stm32f4xx_flash.c **** #endif /* STM32F427_437xx ||  STM32F429_439xx ||  STM32F469_479xx */
 583:FWLIB/src/stm32f4xx_flash.c **** 
 584:FWLIB/src/stm32f4xx_flash.c **** #if defined(STM32F40_41xxx) || defined(STM32F401xx) || defined(STM32F410xx) || defined(STM32F411xE)
 585:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 586:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= tmp_psize;
 587:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_MER;
 588:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 589:FWLIB/src/stm32f4xx_flash.c ****     
 590:FWLIB/src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 591:FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 592:FWLIB/src/stm32f4xx_flash.c **** 
 593:FWLIB/src/stm32f4xx_flash.c ****     /* if the erase operation is completed, disable the MER Bit */
 594:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_MER);
 595:FWLIB/src/stm32f4xx_flash.c **** #endif /* STM32F40_41xxx || STM32F401xx || STM32F410xx || STM32F411xE || STM32F412xG || STM32F413_4
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 16


 596:FWLIB/src/stm32f4xx_flash.c **** 
 597:FWLIB/src/stm32f4xx_flash.c ****   }   
 598:FWLIB/src/stm32f4xx_flash.c ****   /* Return the Erase Status */
 599:FWLIB/src/stm32f4xx_flash.c ****   return status;
 600:FWLIB/src/stm32f4xx_flash.c **** }
 601:FWLIB/src/stm32f4xx_flash.c **** 
 602:FWLIB/src/stm32f4xx_flash.c **** /**
 603:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Erases all FLASH Sectors in Bank 1.
 604:FWLIB/src/stm32f4xx_flash.c ****   *
 605:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
 606:FWLIB/src/stm32f4xx_flash.c ****   *      
 607:FWLIB/src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 608:FWLIB/src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one. 
 609:FWLIB/src/stm32f4xx_flash.c ****   *  
 610:FWLIB/src/stm32f4xx_flash.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
 611:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
 612:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_1: when the device voltage range is 1.8V to 2.1V, 
 613:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by byte (8-bit) 
 614:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_2: when the device voltage range is 2.1V to 2.7V,
 615:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by half word (16-bit)
 616:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_3: when the device voltage range is 2.7V to 3.6V,
 617:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by word (32-bit)
 618:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
 619:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by double word (64-bit)
 620:FWLIB/src/stm32f4xx_flash.c ****   *       
 621:FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 622:FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
 623:FWLIB/src/stm32f4xx_flash.c ****   */
 624:FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_EraseAllBank1Sectors(uint8_t VoltageRange)
 625:FWLIB/src/stm32f4xx_flash.c **** {
 626:FWLIB/src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 627:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 628:FWLIB/src/stm32f4xx_flash.c ****   
 629:FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 630:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 631:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 632:FWLIB/src/stm32f4xx_flash.c ****   
 633:FWLIB/src/stm32f4xx_flash.c ****   if(VoltageRange == VoltageRange_1)
 634:FWLIB/src/stm32f4xx_flash.c ****   {
 635:FWLIB/src/stm32f4xx_flash.c ****      tmp_psize = FLASH_PSIZE_BYTE;
 636:FWLIB/src/stm32f4xx_flash.c ****   }
 637:FWLIB/src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_2)
 638:FWLIB/src/stm32f4xx_flash.c ****   {
 639:FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_HALF_WORD;
 640:FWLIB/src/stm32f4xx_flash.c ****   }
 641:FWLIB/src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_3)
 642:FWLIB/src/stm32f4xx_flash.c ****   {
 643:FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_WORD;
 644:FWLIB/src/stm32f4xx_flash.c ****   }
 645:FWLIB/src/stm32f4xx_flash.c ****   else
 646:FWLIB/src/stm32f4xx_flash.c ****   {
 647:FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 648:FWLIB/src/stm32f4xx_flash.c ****   }  
 649:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 650:FWLIB/src/stm32f4xx_flash.c ****   {
 651:FWLIB/src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to erase all sectors */
 652:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR &= CR_PSIZE_MASK;
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 17


 653:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= tmp_psize;
 654:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_MER1;
 655:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_STRT;
 656:FWLIB/src/stm32f4xx_flash.c ****     
 657:FWLIB/src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 658:FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 659:FWLIB/src/stm32f4xx_flash.c **** 
 660:FWLIB/src/stm32f4xx_flash.c ****     /* if the erase operation is completed, disable the MER Bit */
 661:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_MER1);
 662:FWLIB/src/stm32f4xx_flash.c **** 
 663:FWLIB/src/stm32f4xx_flash.c ****   }   
 664:FWLIB/src/stm32f4xx_flash.c ****   /* Return the Erase Status */
 665:FWLIB/src/stm32f4xx_flash.c ****   return status;
 666:FWLIB/src/stm32f4xx_flash.c **** }
 667:FWLIB/src/stm32f4xx_flash.c **** 
 668:FWLIB/src/stm32f4xx_flash.c **** 
 669:FWLIB/src/stm32f4xx_flash.c **** /**
 670:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Erases all FLASH Sectors in Bank 2.
 671:FWLIB/src/stm32f4xx_flash.c ****   *
 672:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
 673:FWLIB/src/stm32f4xx_flash.c ****   *     
 674:FWLIB/src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 675:FWLIB/src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 676:FWLIB/src/stm32f4xx_flash.c ****   *     
 677:FWLIB/src/stm32f4xx_flash.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
 678:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
 679:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_1: when the device voltage range is 1.8V to 2.1V, 
 680:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by byte (8-bit) 
 681:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_2: when the device voltage range is 2.1V to 2.7V,
 682:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by half word (16-bit)
 683:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_3: when the device voltage range is 2.7V to 3.6V,
 684:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by word (32-bit)
 685:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
 686:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by double word (64-bit)
 687:FWLIB/src/stm32f4xx_flash.c ****   *       
 688:FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 689:FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
 690:FWLIB/src/stm32f4xx_flash.c ****   */
 691:FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_EraseAllBank2Sectors(uint8_t VoltageRange)
 692:FWLIB/src/stm32f4xx_flash.c **** {
 693:FWLIB/src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 694:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 695:FWLIB/src/stm32f4xx_flash.c ****   
 696:FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 697:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 698:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 699:FWLIB/src/stm32f4xx_flash.c ****   
 700:FWLIB/src/stm32f4xx_flash.c ****   if(VoltageRange == VoltageRange_1)
 701:FWLIB/src/stm32f4xx_flash.c ****   {
 702:FWLIB/src/stm32f4xx_flash.c ****      tmp_psize = FLASH_PSIZE_BYTE;
 703:FWLIB/src/stm32f4xx_flash.c ****   }
 704:FWLIB/src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_2)
 705:FWLIB/src/stm32f4xx_flash.c ****   {
 706:FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_HALF_WORD;
 707:FWLIB/src/stm32f4xx_flash.c ****   }
 708:FWLIB/src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_3)
 709:FWLIB/src/stm32f4xx_flash.c ****   {
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 18


 710:FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_WORD;
 711:FWLIB/src/stm32f4xx_flash.c ****   }
 712:FWLIB/src/stm32f4xx_flash.c ****   else
 713:FWLIB/src/stm32f4xx_flash.c ****   {
 714:FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 715:FWLIB/src/stm32f4xx_flash.c ****   }  
 716:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 717:FWLIB/src/stm32f4xx_flash.c ****   {
 718:FWLIB/src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to erase all sectors */
 719:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR &= CR_PSIZE_MASK;
 720:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= tmp_psize;
 721:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_MER2;
 722:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_STRT;
 723:FWLIB/src/stm32f4xx_flash.c ****     
 724:FWLIB/src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 725:FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 726:FWLIB/src/stm32f4xx_flash.c **** 
 727:FWLIB/src/stm32f4xx_flash.c ****     /* if the erase operation is completed, disable the MER Bit */
 728:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_MER2);
 729:FWLIB/src/stm32f4xx_flash.c **** 
 730:FWLIB/src/stm32f4xx_flash.c ****   }   
 731:FWLIB/src/stm32f4xx_flash.c ****   /* Return the Erase Status */
 732:FWLIB/src/stm32f4xx_flash.c ****   return status;
 733:FWLIB/src/stm32f4xx_flash.c **** }
 734:FWLIB/src/stm32f4xx_flash.c **** 
 735:FWLIB/src/stm32f4xx_flash.c **** /**
 736:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Programs a double word (64-bit) at a specified address.
 737:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function must be used when the device voltage range is from
 738:FWLIB/src/stm32f4xx_flash.c ****   *         2.7V to 3.6V and an External Vpp is present.
 739:FWLIB/src/stm32f4xx_flash.c ****   *
 740:FWLIB/src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 741:FWLIB/src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 742:FWLIB/src/stm32f4xx_flash.c ****   *  
 743:FWLIB/src/stm32f4xx_flash.c ****   * @param  Address: specifies the address to be programmed.
 744:FWLIB/src/stm32f4xx_flash.c ****   * @param  Data: specifies the data to be programmed.
 745:FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 746:FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
 747:FWLIB/src/stm32f4xx_flash.c ****   */
 748:FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
 749:FWLIB/src/stm32f4xx_flash.c **** {
 750:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 751:FWLIB/src/stm32f4xx_flash.c **** 
 752:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
 753:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 754:FWLIB/src/stm32f4xx_flash.c **** 
 755:FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 756:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 757:FWLIB/src/stm32f4xx_flash.c ****   
 758:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 759:FWLIB/src/stm32f4xx_flash.c ****   {
 760:FWLIB/src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to program the new data */
 761:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 762:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 763:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 764:FWLIB/src/stm32f4xx_flash.c ****   
 765:FWLIB/src/stm32f4xx_flash.c ****     *(__IO uint64_t*)Address = Data;
 766:FWLIB/src/stm32f4xx_flash.c ****         
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 19


 767:FWLIB/src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 768:FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 769:FWLIB/src/stm32f4xx_flash.c **** 
 770:FWLIB/src/stm32f4xx_flash.c ****     /* if the program operation is completed, disable the PG Bit */
 771:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_PG);
 772:FWLIB/src/stm32f4xx_flash.c ****   } 
 773:FWLIB/src/stm32f4xx_flash.c ****   /* Return the Program Status */
 774:FWLIB/src/stm32f4xx_flash.c ****   return status;
 775:FWLIB/src/stm32f4xx_flash.c **** }
 776:FWLIB/src/stm32f4xx_flash.c **** 
 777:FWLIB/src/stm32f4xx_flash.c **** /**
 778:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Programs a word (32-bit) at a specified address.
 779:FWLIB/src/stm32f4xx_flash.c ****   *
 780:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function must be used when the device voltage range is from 2.7V to 3.6V. 
 781:FWLIB/src/stm32f4xx_flash.c ****   *
 782:FWLIB/src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 783:FWLIB/src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 784:FWLIB/src/stm32f4xx_flash.c ****   *  
 785:FWLIB/src/stm32f4xx_flash.c ****   * @param  Address: specifies the address to be programmed.
 786:FWLIB/src/stm32f4xx_flash.c ****   *         This parameter can be any address in Program memory zone or in OTP zone.  
 787:FWLIB/src/stm32f4xx_flash.c ****   * @param  Data: specifies the data to be programmed.
 788:FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 789:FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
 790:FWLIB/src/stm32f4xx_flash.c ****   */
 791:FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
 792:FWLIB/src/stm32f4xx_flash.c **** {
 793:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 794:FWLIB/src/stm32f4xx_flash.c **** 
 795:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
 796:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 797:FWLIB/src/stm32f4xx_flash.c **** 
 798:FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 799:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 800:FWLIB/src/stm32f4xx_flash.c ****   
 801:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 802:FWLIB/src/stm32f4xx_flash.c ****   {
 803:FWLIB/src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to program the new data */
 804:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 805:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_WORD;
 806:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 807:FWLIB/src/stm32f4xx_flash.c ****   
 808:FWLIB/src/stm32f4xx_flash.c ****     *(__IO uint32_t*)Address = Data;
 809:FWLIB/src/stm32f4xx_flash.c ****         
 810:FWLIB/src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 811:FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 812:FWLIB/src/stm32f4xx_flash.c **** 
 813:FWLIB/src/stm32f4xx_flash.c ****     /* if the program operation is completed, disable the PG Bit */
 814:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_PG);
 815:FWLIB/src/stm32f4xx_flash.c ****   } 
 816:FWLIB/src/stm32f4xx_flash.c ****   /* Return the Program Status */
 817:FWLIB/src/stm32f4xx_flash.c ****   return status;
 818:FWLIB/src/stm32f4xx_flash.c **** }
 819:FWLIB/src/stm32f4xx_flash.c **** 
 820:FWLIB/src/stm32f4xx_flash.c **** /**
 821:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Programs a half word (16-bit) at a specified address. 
 822:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function must be used when the device voltage range is from 2.1V to 3.6V. 
 823:FWLIB/src/stm32f4xx_flash.c ****   *
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 20


 824:FWLIB/src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 825:FWLIB/src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 826:FWLIB/src/stm32f4xx_flash.c ****   * 
 827:FWLIB/src/stm32f4xx_flash.c ****   * @param  Address: specifies the address to be programmed.
 828:FWLIB/src/stm32f4xx_flash.c ****   *         This parameter can be any address in Program memory zone or in OTP zone.  
 829:FWLIB/src/stm32f4xx_flash.c ****   * @param  Data: specifies the data to be programmed.
 830:FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 831:FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
 832:FWLIB/src/stm32f4xx_flash.c ****   */
 833:FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
 834:FWLIB/src/stm32f4xx_flash.c **** {
 835:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 836:FWLIB/src/stm32f4xx_flash.c **** 
 837:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
 838:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 839:FWLIB/src/stm32f4xx_flash.c **** 
 840:FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 841:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 842:FWLIB/src/stm32f4xx_flash.c ****   
 843:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 844:FWLIB/src/stm32f4xx_flash.c ****   {
 845:FWLIB/src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to program the new data */
 846:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 847:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 848:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 849:FWLIB/src/stm32f4xx_flash.c ****   
 850:FWLIB/src/stm32f4xx_flash.c ****     *(__IO uint16_t*)Address = Data;
 851:FWLIB/src/stm32f4xx_flash.c ****         
 852:FWLIB/src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 853:FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 854:FWLIB/src/stm32f4xx_flash.c **** 
 855:FWLIB/src/stm32f4xx_flash.c ****     /* if the program operation is completed, disable the PG Bit */
 856:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_PG);
 857:FWLIB/src/stm32f4xx_flash.c ****   } 
 858:FWLIB/src/stm32f4xx_flash.c ****   /* Return the Program Status */
 859:FWLIB/src/stm32f4xx_flash.c ****   return status;
 860:FWLIB/src/stm32f4xx_flash.c **** }
 861:FWLIB/src/stm32f4xx_flash.c **** 
 862:FWLIB/src/stm32f4xx_flash.c **** /**
 863:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Programs a byte (8-bit) at a specified address.
 864:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used within all the device supply voltage ranges.  
 865:FWLIB/src/stm32f4xx_flash.c ****   *
 866:FWLIB/src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 867:FWLIB/src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 868:FWLIB/src/stm32f4xx_flash.c ****   * 
 869:FWLIB/src/stm32f4xx_flash.c ****   * @param  Address: specifies the address to be programmed.
 870:FWLIB/src/stm32f4xx_flash.c ****   *         This parameter can be any address in Program memory zone or in OTP zone.  
 871:FWLIB/src/stm32f4xx_flash.c ****   * @param  Data: specifies the data to be programmed.
 872:FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 873:FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
 874:FWLIB/src/stm32f4xx_flash.c ****   */
 875:FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
 876:FWLIB/src/stm32f4xx_flash.c **** {
 877:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 878:FWLIB/src/stm32f4xx_flash.c **** 
 879:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
 880:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 21


 881:FWLIB/src/stm32f4xx_flash.c **** 
 882:FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 883:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 884:FWLIB/src/stm32f4xx_flash.c ****   
 885:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 886:FWLIB/src/stm32f4xx_flash.c ****   {
 887:FWLIB/src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to program the new data */
 888:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 889:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_BYTE;
 890:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 891:FWLIB/src/stm32f4xx_flash.c ****   
 892:FWLIB/src/stm32f4xx_flash.c ****     *(__IO uint8_t*)Address = Data;
 893:FWLIB/src/stm32f4xx_flash.c ****         
 894:FWLIB/src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 895:FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 896:FWLIB/src/stm32f4xx_flash.c **** 
 897:FWLIB/src/stm32f4xx_flash.c ****     /* if the program operation is completed, disable the PG Bit */
 898:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_PG);
 899:FWLIB/src/stm32f4xx_flash.c ****   } 
 900:FWLIB/src/stm32f4xx_flash.c **** 
 901:FWLIB/src/stm32f4xx_flash.c ****   /* Return the Program Status */
 902:FWLIB/src/stm32f4xx_flash.c ****   return status;
 903:FWLIB/src/stm32f4xx_flash.c **** }
 904:FWLIB/src/stm32f4xx_flash.c **** 
 905:FWLIB/src/stm32f4xx_flash.c **** /**
 906:FWLIB/src/stm32f4xx_flash.c ****   * @}
 907:FWLIB/src/stm32f4xx_flash.c ****   */
 908:FWLIB/src/stm32f4xx_flash.c **** 
 909:FWLIB/src/stm32f4xx_flash.c **** /** @defgroup FLASH_Group3 Option Bytes Programming functions
 910:FWLIB/src/stm32f4xx_flash.c ****  *  @brief   Option Bytes Programming functions 
 911:FWLIB/src/stm32f4xx_flash.c ****  *
 912:FWLIB/src/stm32f4xx_flash.c **** @verbatim   
 913:FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================
 914:FWLIB/src/stm32f4xx_flash.c ****                 ##### Option Bytes Programming functions #####
 915:FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================  
 916:FWLIB/src/stm32f4xx_flash.c ****     [..]
 917:FWLIB/src/stm32f4xx_flash.c ****       This group includes the following functions:
 918:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_Unlock(void)
 919:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_Lock(void)
 920:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
 921:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_WRP1Config(uint32_t OB_WRP, FunctionalState NewState)  
 922:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_PCROPSelectionConfig(uint8_t OB_PCROPSelect)
 923:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_PCROPConfig(uint32_t OB_PCROP, FunctionalState NewState)
 924:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_PCROP1Config(uint32_t OB_PCROP, FunctionalState NewState) 
 925:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_RDPConfig(uint8_t OB_RDP)
 926:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
 927:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_BORConfig(uint8_t OB_BOR)
 928:FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_ProgramOTP(uint32_t Address, uint32_t Data)
 929:FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_OB_Launch(void)
 930:FWLIB/src/stm32f4xx_flash.c ****       (+) uint32_t FLASH_OB_GetUser(void)
 931:FWLIB/src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetWRP(void)
 932:FWLIB/src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetWRP1(void)
 933:FWLIB/src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetPCROP(void)
 934:FWLIB/src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetPCROP1(void)
 935:FWLIB/src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetRDP(void)
 936:FWLIB/src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetBOR(void)
 937:FWLIB/src/stm32f4xx_flash.c ****     [..]  
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 22


 938:FWLIB/src/stm32f4xx_flash.c ****       The following function can be used only for STM32F42xxx/43xxx devices. 
 939:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_BootConfig(uint8_t OB_BOOT)
 940:FWLIB/src/stm32f4xx_flash.c ****     [..]   
 941:FWLIB/src/stm32f4xx_flash.c ****      Any operation of erase or program should follow these steps:
 942:FWLIB/src/stm32f4xx_flash.c ****       (#) Call the FLASH_OB_Unlock() function to enable the FLASH option control 
 943:FWLIB/src/stm32f4xx_flash.c ****           register access
 944:FWLIB/src/stm32f4xx_flash.c **** 
 945:FWLIB/src/stm32f4xx_flash.c ****       (#) Call one or several functions to program the desired Option Bytes:
 946:FWLIB/src/stm32f4xx_flash.c ****         (++) void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState) 
 947:FWLIB/src/stm32f4xx_flash.c ****              => to Enable/Disable the desired sector write protection
 948:FWLIB/src/stm32f4xx_flash.c ****         (++) void FLASH_OB_RDPConfig(uint8_t OB_RDP) => to set the desired read 
 949:FWLIB/src/stm32f4xx_flash.c ****              Protection Level
 950:FWLIB/src/stm32f4xx_flash.c ****         (++) void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY) 
 951:FWLIB/src/stm32f4xx_flash.c ****              => to configure the user Option Bytes.
 952:FWLIB/src/stm32f4xx_flash.c ****         (++) void FLASH_OB_BORConfig(uint8_t OB_BOR) => to set the BOR Level 			 
 953:FWLIB/src/stm32f4xx_flash.c **** 
 954:FWLIB/src/stm32f4xx_flash.c ****       (#) Once all needed Option Bytes to be programmed are correctly written, 
 955:FWLIB/src/stm32f4xx_flash.c ****           call the FLASH_OB_Launch() function to launch the Option Bytes 
 956:FWLIB/src/stm32f4xx_flash.c ****           programming process.
 957:FWLIB/src/stm32f4xx_flash.c ****      
 958:FWLIB/src/stm32f4xx_flash.c ****       -@- When changing the IWDG mode from HW to SW or from SW to HW, a system 
 959:FWLIB/src/stm32f4xx_flash.c ****           reset is needed to make the change effective.  
 960:FWLIB/src/stm32f4xx_flash.c **** 
 961:FWLIB/src/stm32f4xx_flash.c ****       (#) Call the FLASH_OB_Lock() function to disable the FLASH option control 
 962:FWLIB/src/stm32f4xx_flash.c ****           register access (recommended to protect the Option Bytes against 
 963:FWLIB/src/stm32f4xx_flash.c ****           possible unwanted operations)
 964:FWLIB/src/stm32f4xx_flash.c ****     
 965:FWLIB/src/stm32f4xx_flash.c **** @endverbatim
 966:FWLIB/src/stm32f4xx_flash.c ****   * @{
 967:FWLIB/src/stm32f4xx_flash.c ****   */
 968:FWLIB/src/stm32f4xx_flash.c **** 
 969:FWLIB/src/stm32f4xx_flash.c **** /**
 970:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Unlocks the FLASH Option Control Registers access.
 971:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
 972:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 973:FWLIB/src/stm32f4xx_flash.c ****   */
 974:FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_Unlock(void)
 975:FWLIB/src/stm32f4xx_flash.c **** {
 278              		.loc 1 975 0
 279              		.cfi_startproc
 280              		@ args = 0, pretend = 0, frame = 0
 281              		@ frame_needed = 0, uses_anonymous_args = 0
 282              		@ link register save eliminated.
 976:FWLIB/src/stm32f4xx_flash.c ****   if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 283              		.loc 1 976 0
 284 0000 054B     		ldr	r3, .L34
 285 0002 5B69     		ldr	r3, [r3, #20]
 286 0004 13F0010F 		tst	r3, #1
 287 0008 05D0     		beq	.L32
 977:FWLIB/src/stm32f4xx_flash.c ****   {
 978:FWLIB/src/stm32f4xx_flash.c ****     /* Authorizes the Option Byte register programming */
 979:FWLIB/src/stm32f4xx_flash.c ****     FLASH->OPTKEYR = FLASH_OPT_KEY1;
 288              		.loc 1 979 0
 289 000a 034B     		ldr	r3, .L34
 290 000c 034A     		ldr	r2, .L34+4
 291 000e 9A60     		str	r2, [r3, #8]
 980:FWLIB/src/stm32f4xx_flash.c ****     FLASH->OPTKEYR = FLASH_OPT_KEY2;
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 23


 292              		.loc 1 980 0
 293 0010 02F14432 		add	r2, r2, #1145324612
 294 0014 9A60     		str	r2, [r3, #8]
 295              	.L32:
 296 0016 7047     		bx	lr
 297              	.L35:
 298              		.align	2
 299              	.L34:
 300 0018 003C0240 		.word	1073888256
 301 001c 3B2A1908 		.word	135866939
 302              		.cfi_endproc
 303              	.LFE139:
 305              		.section	.text.FLASH_OB_Lock,"ax",%progbits
 306              		.align	2
 307              		.global	FLASH_OB_Lock
 308              		.thumb
 309              		.thumb_func
 311              	FLASH_OB_Lock:
 312              	.LFB140:
 981:FWLIB/src/stm32f4xx_flash.c ****   }  
 982:FWLIB/src/stm32f4xx_flash.c **** }
 983:FWLIB/src/stm32f4xx_flash.c **** 
 984:FWLIB/src/stm32f4xx_flash.c **** /**
 985:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Locks the FLASH Option Control Registers access.
 986:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
 987:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 988:FWLIB/src/stm32f4xx_flash.c ****   */
 989:FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_Lock(void)
 990:FWLIB/src/stm32f4xx_flash.c **** {
 313              		.loc 1 990 0
 314              		.cfi_startproc
 315              		@ args = 0, pretend = 0, frame = 0
 316              		@ frame_needed = 0, uses_anonymous_args = 0
 317              		@ link register save eliminated.
 991:FWLIB/src/stm32f4xx_flash.c ****   /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
 992:FWLIB/src/stm32f4xx_flash.c ****   FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 318              		.loc 1 992 0
 319 0000 024A     		ldr	r2, .L37
 320 0002 5369     		ldr	r3, [r2, #20]
 321 0004 43F00103 		orr	r3, r3, #1
 322 0008 5361     		str	r3, [r2, #20]
 323 000a 7047     		bx	lr
 324              	.L38:
 325              		.align	2
 326              	.L37:
 327 000c 003C0240 		.word	1073888256
 328              		.cfi_endproc
 329              	.LFE140:
 331              		.section	.text.FLASH_OB_PCROPSelectionConfig,"ax",%progbits
 332              		.align	2
 333              		.global	FLASH_OB_PCROPSelectionConfig
 334              		.thumb
 335              		.thumb_func
 337              	FLASH_OB_PCROPSelectionConfig:
 338              	.LFB143:
 993:FWLIB/src/stm32f4xx_flash.c **** }
 994:FWLIB/src/stm32f4xx_flash.c **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 24


 995:FWLIB/src/stm32f4xx_flash.c **** /**
 996:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Enables or disables the write protection of the desired sectors, for the first
 997:FWLIB/src/stm32f4xx_flash.c ****   *         1 Mb of the Flash  
 998:FWLIB/src/stm32f4xx_flash.c ****   *
 999:FWLIB/src/stm32f4xx_flash.c ****   * @note   When the memory read protection level is selected (RDP level = 1), 
1000:FWLIB/src/stm32f4xx_flash.c ****   *         it is not possible to program or erase the flash sector i if CortexM4  
1001:FWLIB/src/stm32f4xx_flash.c ****   *         debug features are connected or boot code is executed in RAM, even if nWRPi = 1 
1002:FWLIB/src/stm32f4xx_flash.c ****   * @note   Active value of nWRPi bits is inverted when PCROP mode is active (SPRMOD =1).   
1003:FWLIB/src/stm32f4xx_flash.c ****   * 
1004:FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_WRP: specifies the sector(s) to be write protected or unprotected.
1005:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1006:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_WRP: A value between OB_WRP_Sector0 and OB_WRP_Sector11                     
1007:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_WRP_Sector_All
1008:FWLIB/src/stm32f4xx_flash.c ****   * @param  Newstate: new state of the Write Protection.
1009:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be: ENABLE or DISABLE.
1010:FWLIB/src/stm32f4xx_flash.c ****   * @retval None  
1011:FWLIB/src/stm32f4xx_flash.c ****   */
1012:FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
1013:FWLIB/src/stm32f4xx_flash.c **** { 
1014:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
1015:FWLIB/src/stm32f4xx_flash.c ****   
1016:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1017:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_WRP(OB_WRP));
1018:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1019:FWLIB/src/stm32f4xx_flash.c ****     
1020:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
1021:FWLIB/src/stm32f4xx_flash.c **** 
1022:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
1023:FWLIB/src/stm32f4xx_flash.c ****   { 
1024:FWLIB/src/stm32f4xx_flash.c ****     if(NewState != DISABLE)
1025:FWLIB/src/stm32f4xx_flash.c ****     {
1026:FWLIB/src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
1027:FWLIB/src/stm32f4xx_flash.c ****     }
1028:FWLIB/src/stm32f4xx_flash.c ****     else
1029:FWLIB/src/stm32f4xx_flash.c ****     {
1030:FWLIB/src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
1031:FWLIB/src/stm32f4xx_flash.c ****     }
1032:FWLIB/src/stm32f4xx_flash.c ****   }
1033:FWLIB/src/stm32f4xx_flash.c **** }
1034:FWLIB/src/stm32f4xx_flash.c **** 
1035:FWLIB/src/stm32f4xx_flash.c **** /**
1036:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Enables or disables the write protection of the desired sectors, for the second
1037:FWLIB/src/stm32f4xx_flash.c ****   *         1 Mb of the Flash  
1038:FWLIB/src/stm32f4xx_flash.c ****   *           
1039:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1040:FWLIB/src/stm32f4xx_flash.c ****   *   
1041:FWLIB/src/stm32f4xx_flash.c ****   * @note   When the memory read out protection is selected (RDP level = 1), 
1042:FWLIB/src/stm32f4xx_flash.c ****   *         it is not possible to program or erase the flash sector i if CortexM4  
1043:FWLIB/src/stm32f4xx_flash.c ****   *         debug features are connected or boot code is executed in RAM, even if nWRPi = 1 
1044:FWLIB/src/stm32f4xx_flash.c ****   * @note   Active value of nWRPi bits is inverted when PCROP mode is active (SPRMOD =1).      
1045:FWLIB/src/stm32f4xx_flash.c ****   * 
1046:FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_WRP: specifies the sector(s) to be write protected or unprotected.
1047:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1048:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_WRP: A value between OB_WRP_Sector12 and OB_WRP_Sector23
1049:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_WRP_Sector_All                        
1050:FWLIB/src/stm32f4xx_flash.c ****   * @param  Newstate: new state of the Write Protection.
1051:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be: ENABLE or DISABLE.
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 25


1052:FWLIB/src/stm32f4xx_flash.c ****   * @retval None  
1053:FWLIB/src/stm32f4xx_flash.c ****   */
1054:FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_WRP1Config(uint32_t OB_WRP, FunctionalState NewState)
1055:FWLIB/src/stm32f4xx_flash.c **** { 
1056:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
1057:FWLIB/src/stm32f4xx_flash.c ****   
1058:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1059:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_WRP(OB_WRP));
1060:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1061:FWLIB/src/stm32f4xx_flash.c ****     
1062:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
1063:FWLIB/src/stm32f4xx_flash.c **** 
1064:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
1065:FWLIB/src/stm32f4xx_flash.c ****   { 
1066:FWLIB/src/stm32f4xx_flash.c ****     if(NewState != DISABLE)
1067:FWLIB/src/stm32f4xx_flash.c ****     {
1068:FWLIB/src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~OB_WRP);
1069:FWLIB/src/stm32f4xx_flash.c ****     }
1070:FWLIB/src/stm32f4xx_flash.c ****     else
1071:FWLIB/src/stm32f4xx_flash.c ****     {
1072:FWLIB/src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
1073:FWLIB/src/stm32f4xx_flash.c ****     }
1074:FWLIB/src/stm32f4xx_flash.c ****   }
1075:FWLIB/src/stm32f4xx_flash.c **** }
1076:FWLIB/src/stm32f4xx_flash.c **** 
1077:FWLIB/src/stm32f4xx_flash.c **** /**
1078:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Select the Protection Mode (SPRMOD). 
1079:FWLIB/src/stm32f4xx_flash.c ****   * 
1080:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx and STM32F401xx/411xE devices.    
1081:FWLIB/src/stm32f4xx_flash.c ****   * 
1082:FWLIB/src/stm32f4xx_flash.c ****   * @note   After PCROP activation, Option Byte modification is not possible. 
1083:FWLIB/src/stm32f4xx_flash.c ****   *         Exception made for the global Read Out Protection modification level (level1 to level0)
1084:FWLIB/src/stm32f4xx_flash.c ****   * @note   Once SPRMOD bit is active unprotection of a protected sector is not possible 
1085:FWLIB/src/stm32f4xx_flash.c ****   *   
1086:FWLIB/src/stm32f4xx_flash.c ****   * @note   Read a protected sector will set RDERR Flag and write a protected sector will set WRPER
1087:FWLIB/src/stm32f4xx_flash.c ****   *   
1088:FWLIB/src/stm32f4xx_flash.c ****   * @note   Some Precautions should be taken when activating the PCROP feature :
1089:FWLIB/src/stm32f4xx_flash.c ****   *         The active value of nWRPi bits is inverted when PCROP mode is active, this means if SPR
1090:FWLIB/src/stm32f4xx_flash.c ****   *         and WRPi = 1 (default value), then the user sector i is read/write protected.
1091:FWLIB/src/stm32f4xx_flash.c ****   *         In order to avoid activation of PCROP Mode for undesired sectors, please follow the
1092:FWLIB/src/stm32f4xx_flash.c ****   *         below safety sequence :       
1093:FWLIB/src/stm32f4xx_flash.c ****   *         - Disable PCROP for all Sectors using FLASH_OB_PCROPConfig(OB_PCROP_Sector_All, DISABLE
1094:FWLIB/src/stm32f4xx_flash.c ****   *           for Bank1 or FLASH_OB_PCROP1Config(OB_PCROP_Sector_All, DISABLE) function for Bank2  
1095:FWLIB/src/stm32f4xx_flash.c ****   *         - Enable PCROP for the desired Sector i using FLASH_OB_PCROPConfig(Sector i, ENABLE) fu
1096:FWLIB/src/stm32f4xx_flash.c ****   *         - Activate the PCROP Mode FLASH_OB_PCROPSelectionConfig() function. 
1097:FWLIB/src/stm32f4xx_flash.c ****   * 
1098:FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_PCROP:  Select the Protection Mode of nWPRi bits 
1099:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1100:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_PcROP_Disable: nWRPi control the write protection of respective user sectors
1101:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_PcROP_Enable: nWRPi control the  read&write protection (PCROP) of respective
1102:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
1103:FWLIB/src/stm32f4xx_flash.c ****   */
1104:FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_PCROPSelectionConfig(uint8_t OB_PcROP)
1105:FWLIB/src/stm32f4xx_flash.c **** {  
 339              		.loc 1 1105 0
 340              		.cfi_startproc
 341              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 26


 342              		@ frame_needed = 0, uses_anonymous_args = 0
 343              		@ link register save eliminated.
 344              	.LVL5:
1106:FWLIB/src/stm32f4xx_flash.c ****   uint8_t optiontmp = 0xFF;
1107:FWLIB/src/stm32f4xx_flash.c ****       
1108:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1109:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_PCROP_SELECT(OB_PcROP));
1110:FWLIB/src/stm32f4xx_flash.c ****   
1111:FWLIB/src/stm32f4xx_flash.c ****   /* Mask SPRMOD bit */
1112:FWLIB/src/stm32f4xx_flash.c ****   optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE3_ADDRESS) & (uint8_t)0x7F); 
 345              		.loc 1 1112 0
 346 0000 034A     		ldr	r2, .L40
 347 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 348 0004 03F07F03 		and	r3, r3, #127
 349              	.LVL6:
1113:FWLIB/src/stm32f4xx_flash.c ****   /* Update Option Byte */
1114:FWLIB/src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE3_ADDRESS = (uint8_t)(OB_PcROP | optiontmp); 
 350              		.loc 1 1114 0
 351 0008 1843     		orrs	r0, r0, r3
 352              	.LVL7:
 353 000a 1070     		strb	r0, [r2]
 354 000c 7047     		bx	lr
 355              	.L41:
 356 000e 00BF     		.align	2
 357              	.L40:
 358 0010 173C0240 		.word	1073888279
 359              		.cfi_endproc
 360              	.LFE143:
 362              		.section	.text.FLASH_OB_BootConfig,"ax",%progbits
 363              		.align	2
 364              		.global	FLASH_OB_BootConfig
 365              		.thumb
 366              		.thumb_func
 368              	FLASH_OB_BootConfig:
 369              	.LFB148:
1115:FWLIB/src/stm32f4xx_flash.c ****     
1116:FWLIB/src/stm32f4xx_flash.c **** }
1117:FWLIB/src/stm32f4xx_flash.c **** 
1118:FWLIB/src/stm32f4xx_flash.c **** /**
1119:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Enables or disables the read/write protection (PCROP) of the desired 
1120:FWLIB/src/stm32f4xx_flash.c ****   *         sectors, for the first 1 MB of the Flash.
1121:FWLIB/src/stm32f4xx_flash.c ****   *           
1122:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx , STM32F401xx/411xE 
1123:FWLIB/src/stm32f4xx_flash.c ****   *         STM32F412xG and STM32F413_423xx devices.
1124:FWLIB/src/stm32f4xx_flash.c ****   *   
1125:FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_PCROP: specifies the sector(s) to be read/write protected or unprotected.
1126:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1127:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_PCROP: A value between OB_PCROP_Sector0 and OB_PCROP_Sector11 for 
1128:FWLIB/src/stm32f4xx_flash.c ****   *                           STM32F42xxx/43xxx devices and between OB_PCROP_Sector0 and 
1129:FWLIB/src/stm32f4xx_flash.c ****   *                           OB_PCROP_Sector5 for STM32F401xx/411xE devices.
1130:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_PCROP_Sector_All
1131:FWLIB/src/stm32f4xx_flash.c ****   * @param  Newstate: new state of the Write Protection.
1132:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be: ENABLE or DISABLE.
1133:FWLIB/src/stm32f4xx_flash.c ****   * @retval None  
1134:FWLIB/src/stm32f4xx_flash.c ****   */
1135:FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_PCROPConfig(uint32_t OB_PCROP, FunctionalState NewState)
1136:FWLIB/src/stm32f4xx_flash.c **** { 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 27


1137:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
1138:FWLIB/src/stm32f4xx_flash.c ****   
1139:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1140:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_PCROP(OB_PCROP));
1141:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1142:FWLIB/src/stm32f4xx_flash.c ****     
1143:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
1144:FWLIB/src/stm32f4xx_flash.c **** 
1145:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
1146:FWLIB/src/stm32f4xx_flash.c ****   { 
1147:FWLIB/src/stm32f4xx_flash.c ****     if(NewState != DISABLE)
1148:FWLIB/src/stm32f4xx_flash.c ****     {
1149:FWLIB/src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_PCROP;    
1150:FWLIB/src/stm32f4xx_flash.c ****     }
1151:FWLIB/src/stm32f4xx_flash.c ****     else
1152:FWLIB/src/stm32f4xx_flash.c ****     {
1153:FWLIB/src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_PCROP);
1154:FWLIB/src/stm32f4xx_flash.c ****     }
1155:FWLIB/src/stm32f4xx_flash.c ****   }
1156:FWLIB/src/stm32f4xx_flash.c **** }
1157:FWLIB/src/stm32f4xx_flash.c **** 
1158:FWLIB/src/stm32f4xx_flash.c **** /**
1159:FWLIB/src/stm32f4xx_flash.c ****    * @brief Enables or disables the read/write protection (PCROP) of the desired 
1160:FWLIB/src/stm32f4xx_flash.c ****   *         sectors
1161:FWLIB/src/stm32f4xx_flash.c ****   *           
1162:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1163:FWLIB/src/stm32f4xx_flash.c ****   *   
1164:FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_PCROP: specifies the sector(s) to be read/write protected or unprotected.
1165:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1166:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_PCROP: A value between OB_PCROP_Sector12 and OB_PCROP_Sector23 
1167:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_PCROP_Sector_All
1168:FWLIB/src/stm32f4xx_flash.c ****   * @param  Newstate: new state of the Write Protection.
1169:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be: ENABLE or DISABLE.
1170:FWLIB/src/stm32f4xx_flash.c ****   * @retval None  
1171:FWLIB/src/stm32f4xx_flash.c ****   */
1172:FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_PCROP1Config(uint32_t OB_PCROP, FunctionalState NewState)
1173:FWLIB/src/stm32f4xx_flash.c **** { 
1174:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
1175:FWLIB/src/stm32f4xx_flash.c ****   
1176:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1177:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_PCROP(OB_PCROP));
1178:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1179:FWLIB/src/stm32f4xx_flash.c ****     
1180:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
1181:FWLIB/src/stm32f4xx_flash.c **** 
1182:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
1183:FWLIB/src/stm32f4xx_flash.c ****   { 
1184:FWLIB/src/stm32f4xx_flash.c ****     if(NewState != DISABLE)
1185:FWLIB/src/stm32f4xx_flash.c ****     {
1186:FWLIB/src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_PCROP;
1187:FWLIB/src/stm32f4xx_flash.c ****     }
1188:FWLIB/src/stm32f4xx_flash.c ****     else
1189:FWLIB/src/stm32f4xx_flash.c ****     {
1190:FWLIB/src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~OB_PCROP);
1191:FWLIB/src/stm32f4xx_flash.c ****     }
1192:FWLIB/src/stm32f4xx_flash.c ****   }
1193:FWLIB/src/stm32f4xx_flash.c **** }
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 28


1194:FWLIB/src/stm32f4xx_flash.c **** 
1195:FWLIB/src/stm32f4xx_flash.c **** 
1196:FWLIB/src/stm32f4xx_flash.c **** /**
1197:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Sets the read protection level.
1198:FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_RDP: specifies the read protection level.
1199:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1200:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_RDP_Level_0: No protection
1201:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_RDP_Level_1: Read protection of the memory
1202:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_RDP_Level_2: Full chip protection
1203:FWLIB/src/stm32f4xx_flash.c ****   *   
1204:FWLIB/src/stm32f4xx_flash.c ****   * /!\ Warning /!\ When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
1205:FWLIB/src/stm32f4xx_flash.c ****   *    
1206:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
1207:FWLIB/src/stm32f4xx_flash.c ****   */
1208:FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_RDPConfig(uint8_t OB_RDP)
1209:FWLIB/src/stm32f4xx_flash.c **** {
1210:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
1211:FWLIB/src/stm32f4xx_flash.c **** 
1212:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1213:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_RDP(OB_RDP));
1214:FWLIB/src/stm32f4xx_flash.c **** 
1215:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
1216:FWLIB/src/stm32f4xx_flash.c **** 
1217:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
1218:FWLIB/src/stm32f4xx_flash.c ****   {
1219:FWLIB/src/stm32f4xx_flash.c ****     *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = OB_RDP;
1220:FWLIB/src/stm32f4xx_flash.c **** 
1221:FWLIB/src/stm32f4xx_flash.c ****   }
1222:FWLIB/src/stm32f4xx_flash.c **** }
1223:FWLIB/src/stm32f4xx_flash.c **** 
1224:FWLIB/src/stm32f4xx_flash.c **** /**
1225:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Programs the FLASH User Option Byte: IWDG_SW / RST_STOP / RST_STDBY.    
1226:FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_IWDG: Selects the IWDG mode
1227:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1228:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_IWDG_SW: Software IWDG selected
1229:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_IWDG_HW: Hardware IWDG selected
1230:FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_STOP: Reset event when entering STOP mode.
1231:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter  can be one of the following values:
1232:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_STOP_NoRST: No reset generated when entering in STOP
1233:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_STOP_RST: Reset generated when entering in STOP
1234:FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_STDBY: Reset event when entering Standby mode.
1235:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter  can be one of the following values:
1236:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_STDBY_NoRST: No reset generated when entering in STANDBY
1237:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
1238:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
1239:FWLIB/src/stm32f4xx_flash.c ****   */
1240:FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
1241:FWLIB/src/stm32f4xx_flash.c **** {
1242:FWLIB/src/stm32f4xx_flash.c ****   uint8_t optiontmp = 0xFF;
1243:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE; 
1244:FWLIB/src/stm32f4xx_flash.c **** 
1245:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1246:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
1247:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_STOP_SOURCE(OB_STOP));
1248:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));
1249:FWLIB/src/stm32f4xx_flash.c **** 
1250:FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 29


1251:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
1252:FWLIB/src/stm32f4xx_flash.c ****   
1253:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
1254:FWLIB/src/stm32f4xx_flash.c ****   { 
1255:FWLIB/src/stm32f4xx_flash.c **** #if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F469_479xx)
1256:FWLIB/src/stm32f4xx_flash.c ****     /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
1257:FWLIB/src/stm32f4xx_flash.c ****     optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
1258:FWLIB/src/stm32f4xx_flash.c **** #endif /* STM32F427_437xx ||  STM32F429_439xx ||  STM32F469_479xx */
1259:FWLIB/src/stm32f4xx_flash.c **** 
1260:FWLIB/src/stm32f4xx_flash.c **** #if defined(STM32F40_41xxx) || defined(STM32F401xx) || defined(STM32F410xx) || defined(STM32F411xE)
1261:FWLIB/src/stm32f4xx_flash.c ****     /* Mask OPTLOCK, OPTSTRT and BOR_LEV bits */
1262:FWLIB/src/stm32f4xx_flash.c ****     optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0F); 
1263:FWLIB/src/stm32f4xx_flash.c **** #endif /* STM32F40_41xxx || STM32F401xx || STM32F410xx || STM32F411xE || STM32F446xx */ 
1264:FWLIB/src/stm32f4xx_flash.c **** 
1265:FWLIB/src/stm32f4xx_flash.c ****     /* Update User Option Byte */
1266:FWLIB/src/stm32f4xx_flash.c ****     *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = OB_IWDG | (uint8_t)(OB_STDBY | (uint8_t)(OB_STOP | ((uin
1267:FWLIB/src/stm32f4xx_flash.c ****   }  
1268:FWLIB/src/stm32f4xx_flash.c **** }
1269:FWLIB/src/stm32f4xx_flash.c **** 
1270:FWLIB/src/stm32f4xx_flash.c **** /**
1271:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Configure the Dual Bank Boot.
1272:FWLIB/src/stm32f4xx_flash.c ****   *   
1273:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1274:FWLIB/src/stm32f4xx_flash.c ****   *      
1275:FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_BOOT: specifies the Dual Bank Boot Option byte.
1276:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1277:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_Dual_BootEnabled: Dual Bank Boot Enable
1278:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_Dual_BootDisabled: Dual Bank Boot Disabled
1279:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
1280:FWLIB/src/stm32f4xx_flash.c ****   */
1281:FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_BootConfig(uint8_t OB_BOOT)
1282:FWLIB/src/stm32f4xx_flash.c **** {
 370              		.loc 1 1282 0
 371              		.cfi_startproc
 372              		@ args = 0, pretend = 0, frame = 0
 373              		@ frame_needed = 0, uses_anonymous_args = 0
 374              		@ link register save eliminated.
 375              	.LVL8:
1283:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1284:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_BOOT(OB_BOOT));
1285:FWLIB/src/stm32f4xx_flash.c **** 
1286:FWLIB/src/stm32f4xx_flash.c ****   /* Set Dual Bank Boot */
1287:FWLIB/src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BFB2);
 376              		.loc 1 1287 0
 377 0000 044B     		ldr	r3, .L43
 378 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 379 0004 02F0EF02 		and	r2, r2, #239
 380 0008 1A70     		strb	r2, [r3]
1288:FWLIB/src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOOT;
 381              		.loc 1 1288 0
 382 000a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 383 000c 1043     		orrs	r0, r0, r2
 384              	.LVL9:
 385 000e 1870     		strb	r0, [r3]
 386 0010 7047     		bx	lr
 387              	.L44:
 388 0012 00BF     		.align	2
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 30


 389              	.L43:
 390 0014 143C0240 		.word	1073888276
 391              		.cfi_endproc
 392              	.LFE148:
 394              		.section	.text.FLASH_OB_BORConfig,"ax",%progbits
 395              		.align	2
 396              		.global	FLASH_OB_BORConfig
 397              		.thumb
 398              		.thumb_func
 400              	FLASH_OB_BORConfig:
 401              	.LFB149:
1289:FWLIB/src/stm32f4xx_flash.c **** 
1290:FWLIB/src/stm32f4xx_flash.c **** }
1291:FWLIB/src/stm32f4xx_flash.c **** 
1292:FWLIB/src/stm32f4xx_flash.c **** /**
1293:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Sets the BOR Level. 
1294:FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_BOR: specifies the Option Bytes BOR Reset Level.
1295:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1296:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_BOR_LEVEL3: Supply voltage ranges from 2.7 to 3.6 V
1297:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
1298:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
1299:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
1300:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
1301:FWLIB/src/stm32f4xx_flash.c ****   */
1302:FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_BORConfig(uint8_t OB_BOR)
1303:FWLIB/src/stm32f4xx_flash.c **** {
 402              		.loc 1 1303 0
 403              		.cfi_startproc
 404              		@ args = 0, pretend = 0, frame = 0
 405              		@ frame_needed = 0, uses_anonymous_args = 0
 406              		@ link register save eliminated.
 407              	.LVL10:
1304:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1305:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_BOR(OB_BOR));
1306:FWLIB/src/stm32f4xx_flash.c **** 
1307:FWLIB/src/stm32f4xx_flash.c ****   /* Set the BOR Level */
1308:FWLIB/src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 408              		.loc 1 1308 0
 409 0000 044B     		ldr	r3, .L46
 410 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 411 0004 02F0F302 		and	r2, r2, #243
 412 0008 1A70     		strb	r2, [r3]
1309:FWLIB/src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOR;
 413              		.loc 1 1309 0
 414 000a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 415 000c 1043     		orrs	r0, r0, r2
 416              	.LVL11:
 417 000e 1870     		strb	r0, [r3]
 418 0010 7047     		bx	lr
 419              	.L47:
 420 0012 00BF     		.align	2
 421              	.L46:
 422 0014 143C0240 		.word	1073888276
 423              		.cfi_endproc
 424              	.LFE149:
 426              		.section	.text.FLASH_OB_GetUser,"ax",%progbits
 427              		.align	2
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 31


 428              		.global	FLASH_OB_GetUser
 429              		.thumb
 430              		.thumb_func
 432              	FLASH_OB_GetUser:
 433              	.LFB151:
1310:FWLIB/src/stm32f4xx_flash.c **** 
1311:FWLIB/src/stm32f4xx_flash.c **** }
1312:FWLIB/src/stm32f4xx_flash.c **** 
1313:FWLIB/src/stm32f4xx_flash.c **** /**
1314:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Launch the option byte loading.
1315:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1316:FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
1317:FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
1318:FWLIB/src/stm32f4xx_flash.c ****   */
1319:FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_OB_Launch(void)
1320:FWLIB/src/stm32f4xx_flash.c **** {
1321:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
1322:FWLIB/src/stm32f4xx_flash.c **** 
1323:FWLIB/src/stm32f4xx_flash.c ****   /* Set the OPTSTRT bit in OPTCR register */
1324:FWLIB/src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
1325:FWLIB/src/stm32f4xx_flash.c **** 
1326:FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
1327:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
1328:FWLIB/src/stm32f4xx_flash.c **** 
1329:FWLIB/src/stm32f4xx_flash.c ****   return status;
1330:FWLIB/src/stm32f4xx_flash.c **** }
1331:FWLIB/src/stm32f4xx_flash.c **** 
1332:FWLIB/src/stm32f4xx_flash.c **** /**
1333:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH User Option Bytes values.
1334:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1335:FWLIB/src/stm32f4xx_flash.c ****   * @retval The FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
1336:FWLIB/src/stm32f4xx_flash.c ****   *         and RST_STDBY(Bit2).
1337:FWLIB/src/stm32f4xx_flash.c ****   */
1338:FWLIB/src/stm32f4xx_flash.c **** uint8_t FLASH_OB_GetUser(void)
1339:FWLIB/src/stm32f4xx_flash.c **** {
 434              		.loc 1 1339 0
 435              		.cfi_startproc
 436              		@ args = 0, pretend = 0, frame = 0
 437              		@ frame_needed = 0, uses_anonymous_args = 0
 438              		@ link register save eliminated.
1340:FWLIB/src/stm32f4xx_flash.c ****   /* Return the User Option Byte */
1341:FWLIB/src/stm32f4xx_flash.c ****   return (uint8_t)(FLASH->OPTCR >> 5);
 439              		.loc 1 1341 0
 440 0000 024B     		ldr	r3, .L49
 441 0002 5869     		ldr	r0, [r3, #20]
1342:FWLIB/src/stm32f4xx_flash.c **** }
 442              		.loc 1 1342 0
 443 0004 C0F34710 		ubfx	r0, r0, #5, #8
 444 0008 7047     		bx	lr
 445              	.L50:
 446 000a 00BF     		.align	2
 447              	.L49:
 448 000c 003C0240 		.word	1073888256
 449              		.cfi_endproc
 450              	.LFE151:
 452              		.section	.text.FLASH_OB_GetWRP,"ax",%progbits
 453              		.align	2
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 32


 454              		.global	FLASH_OB_GetWRP
 455              		.thumb
 456              		.thumb_func
 458              	FLASH_OB_GetWRP:
 459              	.LFB152:
1343:FWLIB/src/stm32f4xx_flash.c **** 
1344:FWLIB/src/stm32f4xx_flash.c **** /**
1345:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH Write Protection Option Bytes value.
1346:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1347:FWLIB/src/stm32f4xx_flash.c ****   * @retval The FLASH Write Protection  Option Bytes value
1348:FWLIB/src/stm32f4xx_flash.c ****   */
1349:FWLIB/src/stm32f4xx_flash.c **** uint16_t FLASH_OB_GetWRP(void)
1350:FWLIB/src/stm32f4xx_flash.c **** {
 460              		.loc 1 1350 0
 461              		.cfi_startproc
 462              		@ args = 0, pretend = 0, frame = 0
 463              		@ frame_needed = 0, uses_anonymous_args = 0
 464              		@ link register save eliminated.
1351:FWLIB/src/stm32f4xx_flash.c ****   /* Return the FLASH write protection Register value */
1352:FWLIB/src/stm32f4xx_flash.c ****   return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 465              		.loc 1 1352 0
 466 0000 014B     		ldr	r3, .L52
 467 0002 1888     		ldrh	r0, [r3]
1353:FWLIB/src/stm32f4xx_flash.c **** }
 468              		.loc 1 1353 0
 469 0004 80B2     		uxth	r0, r0
 470 0006 7047     		bx	lr
 471              	.L53:
 472              		.align	2
 473              	.L52:
 474 0008 163C0240 		.word	1073888278
 475              		.cfi_endproc
 476              	.LFE152:
 478              		.section	.text.FLASH_OB_GetWRP1,"ax",%progbits
 479              		.align	2
 480              		.global	FLASH_OB_GetWRP1
 481              		.thumb
 482              		.thumb_func
 484              	FLASH_OB_GetWRP1:
 485              	.LFB153:
1354:FWLIB/src/stm32f4xx_flash.c **** 
1355:FWLIB/src/stm32f4xx_flash.c **** /**
1356:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH Write Protection Option Bytes value.
1357:FWLIB/src/stm32f4xx_flash.c ****   *   
1358:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1359:FWLIB/src/stm32f4xx_flash.c ****   *   
1360:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1361:FWLIB/src/stm32f4xx_flash.c ****   * @retval The FLASH Write Protection  Option Bytes value
1362:FWLIB/src/stm32f4xx_flash.c ****   */
1363:FWLIB/src/stm32f4xx_flash.c **** uint16_t FLASH_OB_GetWRP1(void)
1364:FWLIB/src/stm32f4xx_flash.c **** {
 486              		.loc 1 1364 0
 487              		.cfi_startproc
 488              		@ args = 0, pretend = 0, frame = 0
 489              		@ frame_needed = 0, uses_anonymous_args = 0
 490              		@ link register save eliminated.
1365:FWLIB/src/stm32f4xx_flash.c ****   /* Return the FLASH write protection Register value */
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 33


1366:FWLIB/src/stm32f4xx_flash.c ****   return (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
 491              		.loc 1 1366 0
 492 0000 014B     		ldr	r3, .L55
 493 0002 1888     		ldrh	r0, [r3]
1367:FWLIB/src/stm32f4xx_flash.c **** }
 494              		.loc 1 1367 0
 495 0004 80B2     		uxth	r0, r0
 496 0006 7047     		bx	lr
 497              	.L56:
 498              		.align	2
 499              	.L55:
 500 0008 1A3C0240 		.word	1073888282
 501              		.cfi_endproc
 502              	.LFE153:
 504              		.section	.text.FLASH_OB_GetPCROP,"ax",%progbits
 505              		.align	2
 506              		.global	FLASH_OB_GetPCROP
 507              		.thumb
 508              		.thumb_func
 510              	FLASH_OB_GetPCROP:
 511              	.LFB154:
1368:FWLIB/src/stm32f4xx_flash.c **** 
1369:FWLIB/src/stm32f4xx_flash.c **** /**
1370:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH PC Read/Write Protection Option Bytes value.
1371:FWLIB/src/stm32f4xx_flash.c ****   *   
1372:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices and STM32F401xx/411xE devi
1373:FWLIB/src/stm32f4xx_flash.c ****   *   
1374:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1375:FWLIB/src/stm32f4xx_flash.c ****   * @retval The FLASH PC Read/Write Protection Option Bytes value
1376:FWLIB/src/stm32f4xx_flash.c ****   */
1377:FWLIB/src/stm32f4xx_flash.c **** uint16_t FLASH_OB_GetPCROP(void)
1378:FWLIB/src/stm32f4xx_flash.c **** {
 512              		.loc 1 1378 0
 513              		.cfi_startproc
 514              		@ args = 0, pretend = 0, frame = 0
 515              		@ frame_needed = 0, uses_anonymous_args = 0
 516              		@ link register save eliminated.
1379:FWLIB/src/stm32f4xx_flash.c ****   /* Return the FLASH PC Read/write protection Register value */
1380:FWLIB/src/stm32f4xx_flash.c ****   return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 517              		.loc 1 1380 0
 518 0000 014B     		ldr	r3, .L58
 519 0002 1888     		ldrh	r0, [r3]
1381:FWLIB/src/stm32f4xx_flash.c **** }
 520              		.loc 1 1381 0
 521 0004 80B2     		uxth	r0, r0
 522 0006 7047     		bx	lr
 523              	.L59:
 524              		.align	2
 525              	.L58:
 526 0008 163C0240 		.word	1073888278
 527              		.cfi_endproc
 528              	.LFE154:
 530              		.section	.text.FLASH_OB_GetPCROP1,"ax",%progbits
 531              		.align	2
 532              		.global	FLASH_OB_GetPCROP1
 533              		.thumb
 534              		.thumb_func
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 34


 536              	FLASH_OB_GetPCROP1:
 537              	.LFB155:
1382:FWLIB/src/stm32f4xx_flash.c **** 
1383:FWLIB/src/stm32f4xx_flash.c **** /**
1384:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH PC Read/Write Protection Option Bytes value.
1385:FWLIB/src/stm32f4xx_flash.c ****   *   
1386:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices. 
1387:FWLIB/src/stm32f4xx_flash.c ****   *     
1388:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1389:FWLIB/src/stm32f4xx_flash.c ****   * @retval The FLASH PC Read/Write Protection Option Bytes value
1390:FWLIB/src/stm32f4xx_flash.c ****   */
1391:FWLIB/src/stm32f4xx_flash.c **** uint16_t FLASH_OB_GetPCROP1(void)
1392:FWLIB/src/stm32f4xx_flash.c **** {
 538              		.loc 1 1392 0
 539              		.cfi_startproc
 540              		@ args = 0, pretend = 0, frame = 0
 541              		@ frame_needed = 0, uses_anonymous_args = 0
 542              		@ link register save eliminated.
1393:FWLIB/src/stm32f4xx_flash.c ****   /* Return the FLASH write protection Register value */
1394:FWLIB/src/stm32f4xx_flash.c ****   return (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
 543              		.loc 1 1394 0
 544 0000 014B     		ldr	r3, .L61
 545 0002 1888     		ldrh	r0, [r3]
1395:FWLIB/src/stm32f4xx_flash.c **** }
 546              		.loc 1 1395 0
 547 0004 80B2     		uxth	r0, r0
 548 0006 7047     		bx	lr
 549              	.L62:
 550              		.align	2
 551              	.L61:
 552 0008 1A3C0240 		.word	1073888282
 553              		.cfi_endproc
 554              	.LFE155:
 556              		.section	.text.FLASH_OB_GetRDP,"ax",%progbits
 557              		.align	2
 558              		.global	FLASH_OB_GetRDP
 559              		.thumb
 560              		.thumb_func
 562              	FLASH_OB_GetRDP:
 563              	.LFB156:
1396:FWLIB/src/stm32f4xx_flash.c **** 
1397:FWLIB/src/stm32f4xx_flash.c **** /**
1398:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH Read Protection level.
1399:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1400:FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH ReadOut Protection Status:
1401:FWLIB/src/stm32f4xx_flash.c ****   *           - SET, when OB_RDP_Level_1 or OB_RDP_Level_2 is set
1402:FWLIB/src/stm32f4xx_flash.c ****   *           - RESET, when OB_RDP_Level_0 is set
1403:FWLIB/src/stm32f4xx_flash.c ****   */
1404:FWLIB/src/stm32f4xx_flash.c **** FlagStatus FLASH_OB_GetRDP(void)
1405:FWLIB/src/stm32f4xx_flash.c **** {
 564              		.loc 1 1405 0
 565              		.cfi_startproc
 566              		@ args = 0, pretend = 0, frame = 0
 567              		@ frame_needed = 0, uses_anonymous_args = 0
 568              		@ link register save eliminated.
 569              	.LVL12:
1406:FWLIB/src/stm32f4xx_flash.c ****   FlagStatus readstatus = RESET;
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 35


1407:FWLIB/src/stm32f4xx_flash.c **** 
1408:FWLIB/src/stm32f4xx_flash.c ****   if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) != (uint8_t)OB_RDP_Level_0))
 570              		.loc 1 1408 0
 571 0000 044B     		ldr	r3, .L66
 572 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 573 0004 DBB2     		uxtb	r3, r3
 574 0006 AA2B     		cmp	r3, #170
 575 0008 01D0     		beq	.L65
1409:FWLIB/src/stm32f4xx_flash.c ****   {
1410:FWLIB/src/stm32f4xx_flash.c ****     readstatus = SET;
 576              		.loc 1 1410 0
 577 000a 0120     		movs	r0, #1
 578 000c 7047     		bx	lr
 579              	.L65:
1411:FWLIB/src/stm32f4xx_flash.c ****   }
1412:FWLIB/src/stm32f4xx_flash.c ****   else
1413:FWLIB/src/stm32f4xx_flash.c ****   {
1414:FWLIB/src/stm32f4xx_flash.c ****     readstatus = RESET;
 580              		.loc 1 1414 0
 581 000e 0020     		movs	r0, #0
 582              	.LVL13:
1415:FWLIB/src/stm32f4xx_flash.c ****   }
1416:FWLIB/src/stm32f4xx_flash.c ****   return readstatus;
1417:FWLIB/src/stm32f4xx_flash.c **** }
 583              		.loc 1 1417 0
 584 0010 7047     		bx	lr
 585              	.L67:
 586 0012 00BF     		.align	2
 587              	.L66:
 588 0014 153C0240 		.word	1073888277
 589              		.cfi_endproc
 590              	.LFE156:
 592              		.section	.text.FLASH_OB_GetBOR,"ax",%progbits
 593              		.align	2
 594              		.global	FLASH_OB_GetBOR
 595              		.thumb
 596              		.thumb_func
 598              	FLASH_OB_GetBOR:
 599              	.LFB157:
1418:FWLIB/src/stm32f4xx_flash.c **** 
1419:FWLIB/src/stm32f4xx_flash.c **** /**
1420:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH BOR level.
1421:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1422:FWLIB/src/stm32f4xx_flash.c ****   * @retval The FLASH BOR level:
1423:FWLIB/src/stm32f4xx_flash.c ****   *           - OB_BOR_LEVEL3: Supply voltage ranges from 2.7 to 3.6 V
1424:FWLIB/src/stm32f4xx_flash.c ****   *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
1425:FWLIB/src/stm32f4xx_flash.c ****   *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
1426:FWLIB/src/stm32f4xx_flash.c ****   *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
1427:FWLIB/src/stm32f4xx_flash.c ****   */
1428:FWLIB/src/stm32f4xx_flash.c **** uint8_t FLASH_OB_GetBOR(void)
1429:FWLIB/src/stm32f4xx_flash.c **** {
 600              		.loc 1 1429 0
 601              		.cfi_startproc
 602              		@ args = 0, pretend = 0, frame = 0
 603              		@ frame_needed = 0, uses_anonymous_args = 0
 604              		@ link register save eliminated.
1430:FWLIB/src/stm32f4xx_flash.c ****   /* Return the FLASH BOR level */
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 36


1431:FWLIB/src/stm32f4xx_flash.c ****   return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 605              		.loc 1 1431 0
 606 0000 024B     		ldr	r3, .L69
 607 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
1432:FWLIB/src/stm32f4xx_flash.c **** }
 608              		.loc 1 1432 0
 609 0004 00F00C00 		and	r0, r0, #12
 610 0008 7047     		bx	lr
 611              	.L70:
 612 000a 00BF     		.align	2
 613              	.L69:
 614 000c 143C0240 		.word	1073888276
 615              		.cfi_endproc
 616              	.LFE157:
 618              		.section	.text.FLASH_ITConfig,"ax",%progbits
 619              		.align	2
 620              		.global	FLASH_ITConfig
 621              		.thumb
 622              		.thumb_func
 624              	FLASH_ITConfig:
 625              	.LFB158:
1433:FWLIB/src/stm32f4xx_flash.c **** 
1434:FWLIB/src/stm32f4xx_flash.c **** /**
1435:FWLIB/src/stm32f4xx_flash.c ****   * @}
1436:FWLIB/src/stm32f4xx_flash.c ****   */
1437:FWLIB/src/stm32f4xx_flash.c **** 
1438:FWLIB/src/stm32f4xx_flash.c **** /** @defgroup FLASH_Group4 Interrupts and flags management functions
1439:FWLIB/src/stm32f4xx_flash.c ****  *  @brief   Interrupts and flags management functions
1440:FWLIB/src/stm32f4xx_flash.c ****  *
1441:FWLIB/src/stm32f4xx_flash.c **** @verbatim   
1442:FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================
1443:FWLIB/src/stm32f4xx_flash.c ****               ##### Interrupts and flags management functions #####
1444:FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================  
1445:FWLIB/src/stm32f4xx_flash.c **** @endverbatim
1446:FWLIB/src/stm32f4xx_flash.c ****   * @{
1447:FWLIB/src/stm32f4xx_flash.c ****   */
1448:FWLIB/src/stm32f4xx_flash.c **** 
1449:FWLIB/src/stm32f4xx_flash.c **** /**
1450:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Enables or disables the specified FLASH interrupts.
1451:FWLIB/src/stm32f4xx_flash.c ****   * @param  FLASH_IT: specifies the FLASH interrupt sources to be enabled or disabled.
1452:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be any combination of the following values:
1453:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_IT_ERR: FLASH Error Interrupt
1454:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_IT_EOP: FLASH end of operation Interrupt
1455:FWLIB/src/stm32f4xx_flash.c ****   * @retval None 
1456:FWLIB/src/stm32f4xx_flash.c ****   */
1457:FWLIB/src/stm32f4xx_flash.c **** void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
1458:FWLIB/src/stm32f4xx_flash.c **** {
 626              		.loc 1 1458 0
 627              		.cfi_startproc
 628              		@ args = 0, pretend = 0, frame = 0
 629              		@ frame_needed = 0, uses_anonymous_args = 0
 630              		@ link register save eliminated.
 631              	.LVL14:
1459:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1460:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_IT(FLASH_IT)); 
1461:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1462:FWLIB/src/stm32f4xx_flash.c **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 37


1463:FWLIB/src/stm32f4xx_flash.c ****   if(NewState != DISABLE)
 632              		.loc 1 1463 0
 633 0000 21B1     		cbz	r1, .L72
1464:FWLIB/src/stm32f4xx_flash.c ****   {
1465:FWLIB/src/stm32f4xx_flash.c ****     /* Enable the interrupt sources */
1466:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_IT;
 634              		.loc 1 1466 0
 635 0002 054B     		ldr	r3, .L74
 636 0004 1A69     		ldr	r2, [r3, #16]
 637 0006 1043     		orrs	r0, r0, r2
 638              	.LVL15:
 639 0008 1861     		str	r0, [r3, #16]
 640 000a 7047     		bx	lr
 641              	.LVL16:
 642              	.L72:
1467:FWLIB/src/stm32f4xx_flash.c ****   }
1468:FWLIB/src/stm32f4xx_flash.c ****   else
1469:FWLIB/src/stm32f4xx_flash.c ****   {
1470:FWLIB/src/stm32f4xx_flash.c ****     /* Disable the interrupt sources */
1471:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= ~(uint32_t)FLASH_IT;
 643              		.loc 1 1471 0
 644 000c 024A     		ldr	r2, .L74
 645 000e 1369     		ldr	r3, [r2, #16]
 646 0010 23EA0000 		bic	r0, r3, r0
 647              	.LVL17:
 648 0014 1061     		str	r0, [r2, #16]
 649 0016 7047     		bx	lr
 650              	.L75:
 651              		.align	2
 652              	.L74:
 653 0018 003C0240 		.word	1073888256
 654              		.cfi_endproc
 655              	.LFE158:
 657              		.section	.text.FLASH_GetFlagStatus,"ax",%progbits
 658              		.align	2
 659              		.global	FLASH_GetFlagStatus
 660              		.thumb
 661              		.thumb_func
 663              	FLASH_GetFlagStatus:
 664              	.LFB159:
1472:FWLIB/src/stm32f4xx_flash.c ****   }
1473:FWLIB/src/stm32f4xx_flash.c **** }
1474:FWLIB/src/stm32f4xx_flash.c **** 
1475:FWLIB/src/stm32f4xx_flash.c **** /**
1476:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Checks whether the specified FLASH flag is set or not.
1477:FWLIB/src/stm32f4xx_flash.c ****   * @param  FLASH_FLAG: specifies the FLASH flag to check.
1478:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1479:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_EOP: FLASH End of Operation flag 
1480:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_OPERR: FLASH operation Error flag 
1481:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_WRPERR: FLASH Write protected error flag 
1482:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGAERR: FLASH Programming Alignment error flag
1483:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGPERR: FLASH Programming Parallelism error flag
1484:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
1485:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_RDERR: FLASH (PCROP) Read Protection error flag (STM32F42xx/43xxx an
1486:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_BSY: FLASH Busy flag
1487:FWLIB/src/stm32f4xx_flash.c ****   * @retval The new state of FLASH_FLAG (SET or RESET).
1488:FWLIB/src/stm32f4xx_flash.c ****   */
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 38


1489:FWLIB/src/stm32f4xx_flash.c **** FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
1490:FWLIB/src/stm32f4xx_flash.c **** {
 665              		.loc 1 1490 0
 666              		.cfi_startproc
 667              		@ args = 0, pretend = 0, frame = 0
 668              		@ frame_needed = 0, uses_anonymous_args = 0
 669              		@ link register save eliminated.
 670              	.LVL18:
1491:FWLIB/src/stm32f4xx_flash.c ****   FlagStatus bitstatus = RESET;
1492:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1493:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));
1494:FWLIB/src/stm32f4xx_flash.c **** 
1495:FWLIB/src/stm32f4xx_flash.c ****   if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 671              		.loc 1 1495 0
 672 0000 034B     		ldr	r3, .L79
 673 0002 DB68     		ldr	r3, [r3, #12]
 674 0004 0342     		tst	r3, r0
 675 0006 01D0     		beq	.L78
1496:FWLIB/src/stm32f4xx_flash.c ****   {
1497:FWLIB/src/stm32f4xx_flash.c ****     bitstatus = SET;
 676              		.loc 1 1497 0
 677 0008 0120     		movs	r0, #1
 678              	.LVL19:
 679 000a 7047     		bx	lr
 680              	.LVL20:
 681              	.L78:
1498:FWLIB/src/stm32f4xx_flash.c ****   }
1499:FWLIB/src/stm32f4xx_flash.c ****   else
1500:FWLIB/src/stm32f4xx_flash.c ****   {
1501:FWLIB/src/stm32f4xx_flash.c ****     bitstatus = RESET;
 682              		.loc 1 1501 0
 683 000c 0020     		movs	r0, #0
 684              	.LVL21:
1502:FWLIB/src/stm32f4xx_flash.c ****   }
1503:FWLIB/src/stm32f4xx_flash.c ****   /* Return the new state of FLASH_FLAG (SET or RESET) */
1504:FWLIB/src/stm32f4xx_flash.c ****   return bitstatus; 
1505:FWLIB/src/stm32f4xx_flash.c **** }
 685              		.loc 1 1505 0
 686 000e 7047     		bx	lr
 687              	.L80:
 688              		.align	2
 689              	.L79:
 690 0010 003C0240 		.word	1073888256
 691              		.cfi_endproc
 692              	.LFE159:
 694              		.section	.text.FLASH_ClearFlag,"ax",%progbits
 695              		.align	2
 696              		.global	FLASH_ClearFlag
 697              		.thumb
 698              		.thumb_func
 700              	FLASH_ClearFlag:
 701              	.LFB160:
1506:FWLIB/src/stm32f4xx_flash.c **** 
1507:FWLIB/src/stm32f4xx_flash.c **** /**
1508:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Clears the FLASH's pending flags.
1509:FWLIB/src/stm32f4xx_flash.c ****   * @param  FLASH_FLAG: specifies the FLASH flags to clear.
1510:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be any combination of the following values:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 39


1511:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_EOP: FLASH End of Operation flag 
1512:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_OPERR: FLASH operation Error flag 
1513:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_WRPERR: FLASH Write protected error flag 
1514:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGAERR: FLASH Programming Alignment error flag 
1515:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGPERR: FLASH Programming Parallelism error flag
1516:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
1517:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_RDERR: FLASH Read Protection error flag (STM32F42xx/43xxx and STM32F
1518:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
1519:FWLIB/src/stm32f4xx_flash.c ****   */
1520:FWLIB/src/stm32f4xx_flash.c **** void FLASH_ClearFlag(uint32_t FLASH_FLAG)
1521:FWLIB/src/stm32f4xx_flash.c **** {
 702              		.loc 1 1521 0
 703              		.cfi_startproc
 704              		@ args = 0, pretend = 0, frame = 0
 705              		@ frame_needed = 0, uses_anonymous_args = 0
 706              		@ link register save eliminated.
 707              	.LVL22:
1522:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1523:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
1524:FWLIB/src/stm32f4xx_flash.c ****   
1525:FWLIB/src/stm32f4xx_flash.c ****   /* Clear the flags */
1526:FWLIB/src/stm32f4xx_flash.c ****   FLASH->SR = FLASH_FLAG;
 708              		.loc 1 1526 0
 709 0000 014B     		ldr	r3, .L82
 710 0002 D860     		str	r0, [r3, #12]
 711 0004 7047     		bx	lr
 712              	.L83:
 713 0006 00BF     		.align	2
 714              	.L82:
 715 0008 003C0240 		.word	1073888256
 716              		.cfi_endproc
 717              	.LFE160:
 719              		.section	.text.FLASH_GetStatus,"ax",%progbits
 720              		.align	2
 721              		.global	FLASH_GetStatus
 722              		.thumb
 723              		.thumb_func
 725              	FLASH_GetStatus:
 726              	.LFB161:
1527:FWLIB/src/stm32f4xx_flash.c **** }
1528:FWLIB/src/stm32f4xx_flash.c **** 
1529:FWLIB/src/stm32f4xx_flash.c **** /**
1530:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH Status.
1531:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1532:FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
1533:FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_RD, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
1534:FWLIB/src/stm32f4xx_flash.c ****   */
1535:FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_GetStatus(void)
1536:FWLIB/src/stm32f4xx_flash.c **** {
 727              		.loc 1 1536 0
 728              		.cfi_startproc
 729              		@ args = 0, pretend = 0, frame = 0
 730              		@ frame_needed = 0, uses_anonymous_args = 0
 731              		@ link register save eliminated.
 732              	.LVL23:
1537:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status flashstatus = FLASH_COMPLETE;
1538:FWLIB/src/stm32f4xx_flash.c ****   
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 40


1539:FWLIB/src/stm32f4xx_flash.c ****   if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 733              		.loc 1 1539 0
 734 0000 124B     		ldr	r3, .L91
 735 0002 DB68     		ldr	r3, [r3, #12]
 736 0004 13F4803F 		tst	r3, #65536
 737 0008 15D1     		bne	.L86
1540:FWLIB/src/stm32f4xx_flash.c ****   {
1541:FWLIB/src/stm32f4xx_flash.c ****     flashstatus = FLASH_BUSY;
1542:FWLIB/src/stm32f4xx_flash.c ****   }
1543:FWLIB/src/stm32f4xx_flash.c ****   else 
1544:FWLIB/src/stm32f4xx_flash.c ****   {  
1545:FWLIB/src/stm32f4xx_flash.c ****     if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 738              		.loc 1 1545 0
 739 000a 104B     		ldr	r3, .L91
 740 000c DB68     		ldr	r3, [r3, #12]
 741 000e 13F0100F 		tst	r3, #16
 742 0012 12D1     		bne	.L87
1546:FWLIB/src/stm32f4xx_flash.c ****     { 
1547:FWLIB/src/stm32f4xx_flash.c ****       flashstatus = FLASH_ERROR_WRP;
1548:FWLIB/src/stm32f4xx_flash.c ****     }
1549:FWLIB/src/stm32f4xx_flash.c ****     else
1550:FWLIB/src/stm32f4xx_flash.c ****     {
1551:FWLIB/src/stm32f4xx_flash.c ****       if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
 743              		.loc 1 1551 0
 744 0014 0D4B     		ldr	r3, .L91
 745 0016 DB68     		ldr	r3, [r3, #12]
 746 0018 13F4807F 		tst	r3, #256
 747 001c 0FD1     		bne	.L88
1552:FWLIB/src/stm32f4xx_flash.c ****       { 
1553:FWLIB/src/stm32f4xx_flash.c ****         flashstatus = FLASH_ERROR_RD;
1554:FWLIB/src/stm32f4xx_flash.c ****       } 
1555:FWLIB/src/stm32f4xx_flash.c ****       else 
1556:FWLIB/src/stm32f4xx_flash.c ****       {
1557:FWLIB/src/stm32f4xx_flash.c ****         if((FLASH->SR & (uint32_t)0xE0) != (uint32_t)0x00)
 748              		.loc 1 1557 0
 749 001e 0B4B     		ldr	r3, .L91
 750 0020 DB68     		ldr	r3, [r3, #12]
 751 0022 13F0E00F 		tst	r3, #224
 752 0026 0CD1     		bne	.L89
1558:FWLIB/src/stm32f4xx_flash.c ****         {
1559:FWLIB/src/stm32f4xx_flash.c ****           flashstatus = FLASH_ERROR_PROGRAM; 
1560:FWLIB/src/stm32f4xx_flash.c ****         }
1561:FWLIB/src/stm32f4xx_flash.c ****         else
1562:FWLIB/src/stm32f4xx_flash.c ****         {
1563:FWLIB/src/stm32f4xx_flash.c ****           if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 753              		.loc 1 1563 0
 754 0028 084B     		ldr	r3, .L91
 755 002a DB68     		ldr	r3, [r3, #12]
 756 002c 13F0020F 		tst	r3, #2
 757 0030 09D0     		beq	.L90
1564:FWLIB/src/stm32f4xx_flash.c ****           {
1565:FWLIB/src/stm32f4xx_flash.c ****             flashstatus = FLASH_ERROR_OPERATION;
 758              		.loc 1 1565 0
 759 0032 0820     		movs	r0, #8
 760 0034 7047     		bx	lr
 761              	.L86:
1541:FWLIB/src/stm32f4xx_flash.c ****   }
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 41


 762              		.loc 1 1541 0
 763 0036 0120     		movs	r0, #1
 764 0038 7047     		bx	lr
 765              	.L87:
1547:FWLIB/src/stm32f4xx_flash.c ****     }
 766              		.loc 1 1547 0
 767 003a 0620     		movs	r0, #6
 768 003c 7047     		bx	lr
 769              	.L88:
1553:FWLIB/src/stm32f4xx_flash.c ****       } 
 770              		.loc 1 1553 0
 771 003e 0220     		movs	r0, #2
 772 0040 7047     		bx	lr
 773              	.L89:
1559:FWLIB/src/stm32f4xx_flash.c ****         }
 774              		.loc 1 1559 0
 775 0042 0720     		movs	r0, #7
 776 0044 7047     		bx	lr
 777              	.L90:
1566:FWLIB/src/stm32f4xx_flash.c ****           }
1567:FWLIB/src/stm32f4xx_flash.c ****           else
1568:FWLIB/src/stm32f4xx_flash.c ****           {
1569:FWLIB/src/stm32f4xx_flash.c ****             flashstatus = FLASH_COMPLETE;
 778              		.loc 1 1569 0
 779 0046 0920     		movs	r0, #9
 780              	.LVL24:
1570:FWLIB/src/stm32f4xx_flash.c ****           }
1571:FWLIB/src/stm32f4xx_flash.c ****         }
1572:FWLIB/src/stm32f4xx_flash.c ****       }
1573:FWLIB/src/stm32f4xx_flash.c ****     }
1574:FWLIB/src/stm32f4xx_flash.c ****   }
1575:FWLIB/src/stm32f4xx_flash.c ****   /* Return the FLASH Status */
1576:FWLIB/src/stm32f4xx_flash.c ****   return flashstatus;
1577:FWLIB/src/stm32f4xx_flash.c **** }
 781              		.loc 1 1577 0
 782 0048 7047     		bx	lr
 783              	.L92:
 784 004a 00BF     		.align	2
 785              	.L91:
 786 004c 003C0240 		.word	1073888256
 787              		.cfi_endproc
 788              	.LFE161:
 790              		.section	.text.FLASH_WaitForLastOperation,"ax",%progbits
 791              		.align	2
 792              		.global	FLASH_WaitForLastOperation
 793              		.thumb
 794              		.thumb_func
 796              	FLASH_WaitForLastOperation:
 797              	.LFB162:
1578:FWLIB/src/stm32f4xx_flash.c **** 
1579:FWLIB/src/stm32f4xx_flash.c **** /**
1580:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Waits for a FLASH operation to complete.
1581:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1582:FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
1583:FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
1584:FWLIB/src/stm32f4xx_flash.c ****   */
1585:FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_WaitForLastOperation(void)
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 42


1586:FWLIB/src/stm32f4xx_flash.c **** { 
 798              		.loc 1 1586 0
 799              		.cfi_startproc
 800              		@ args = 0, pretend = 0, frame = 8
 801              		@ frame_needed = 0, uses_anonymous_args = 0
 802 0000 00B5     		push	{lr}
 803              	.LCFI0:
 804              		.cfi_def_cfa_offset 4
 805              		.cfi_offset 14, -4
 806 0002 83B0     		sub	sp, sp, #12
 807              	.LCFI1:
 808              		.cfi_def_cfa_offset 16
1587:FWLIB/src/stm32f4xx_flash.c ****   __IO FLASH_Status status = FLASH_COMPLETE;
 809              		.loc 1 1587 0
 810 0004 0923     		movs	r3, #9
 811 0006 8DF80730 		strb	r3, [sp, #7]
1588:FWLIB/src/stm32f4xx_flash.c ****    
1589:FWLIB/src/stm32f4xx_flash.c ****   /* Check for the FLASH Status */
1590:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_GetStatus();
 812              		.loc 1 1590 0
 813 000a FFF7FEFF 		bl	FLASH_GetStatus
 814              	.LVL25:
 815 000e 8DF80700 		strb	r0, [sp, #7]
1591:FWLIB/src/stm32f4xx_flash.c **** 
1592:FWLIB/src/stm32f4xx_flash.c ****   /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
1593:FWLIB/src/stm32f4xx_flash.c ****      Even if the FLASH operation fails, the BUSY flag will be reset and an error
1594:FWLIB/src/stm32f4xx_flash.c ****      flag will be set */
1595:FWLIB/src/stm32f4xx_flash.c ****   while(status == FLASH_BUSY)
 816              		.loc 1 1595 0
 817 0012 03E0     		b	.L94
 818              	.L95:
1596:FWLIB/src/stm32f4xx_flash.c ****   {
1597:FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_GetStatus();
 819              		.loc 1 1597 0
 820 0014 FFF7FEFF 		bl	FLASH_GetStatus
 821              	.LVL26:
 822 0018 8DF80700 		strb	r0, [sp, #7]
 823              	.L94:
1595:FWLIB/src/stm32f4xx_flash.c ****   {
 824              		.loc 1 1595 0
 825 001c 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 826 0020 DBB2     		uxtb	r3, r3
 827 0022 012B     		cmp	r3, #1
 828 0024 F6D0     		beq	.L95
1598:FWLIB/src/stm32f4xx_flash.c ****   }
1599:FWLIB/src/stm32f4xx_flash.c ****   /* Return the operation status */
1600:FWLIB/src/stm32f4xx_flash.c ****   return status;
 829              		.loc 1 1600 0
 830 0026 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
1601:FWLIB/src/stm32f4xx_flash.c **** }
 831              		.loc 1 1601 0
 832 002a 03B0     		add	sp, sp, #12
 833              	.LCFI2:
 834              		.cfi_def_cfa_offset 4
 835              		@ sp needed
 836 002c 5DF804FB 		ldr	pc, [sp], #4
 837              		.cfi_endproc
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 43


 838              	.LFE162:
 840              		.section	.text.FLASH_EraseSector,"ax",%progbits
 841              		.align	2
 842              		.global	FLASH_EraseSector
 843              		.thumb
 844              		.thumb_func
 846              	FLASH_EraseSector:
 847              	.LFB131:
 476:FWLIB/src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 848              		.loc 1 476 0
 849              		.cfi_startproc
 850              		@ args = 0, pretend = 0, frame = 0
 851              		@ frame_needed = 0, uses_anonymous_args = 0
 852              	.LVL27:
 853 0000 70B5     		push	{r4, r5, r6, lr}
 854              	.LCFI3:
 855              		.cfi_def_cfa_offset 16
 856              		.cfi_offset 4, -16
 857              		.cfi_offset 5, -12
 858              		.cfi_offset 6, -8
 859              		.cfi_offset 14, -4
 860 0002 0546     		mov	r5, r0
 861              	.LVL28:
 484:FWLIB/src/stm32f4xx_flash.c ****   {
 862              		.loc 1 484 0
 863 0004 31B1     		cbz	r1, .L100
 488:FWLIB/src/stm32f4xx_flash.c ****   {
 864              		.loc 1 488 0
 865 0006 0129     		cmp	r1, #1
 866 0008 06D0     		beq	.L101
 492:FWLIB/src/stm32f4xx_flash.c ****   {
 867              		.loc 1 492 0
 868 000a 0229     		cmp	r1, #2
 869 000c 07D1     		bne	.L102
 494:FWLIB/src/stm32f4xx_flash.c ****   }
 870              		.loc 1 494 0
 871 000e 4FF40076 		mov	r6, #512
 872 0012 06E0     		b	.L98
 873              	.L100:
 486:FWLIB/src/stm32f4xx_flash.c ****   }
 874              		.loc 1 486 0
 875 0014 0026     		movs	r6, #0
 876 0016 04E0     		b	.L98
 877              	.L101:
 490:FWLIB/src/stm32f4xx_flash.c ****   }
 878              		.loc 1 490 0
 879 0018 4FF48076 		mov	r6, #256
 880 001c 01E0     		b	.L98
 881              	.L102:
 498:FWLIB/src/stm32f4xx_flash.c ****   }
 882              		.loc 1 498 0
 883 001e 4FF44076 		mov	r6, #768
 884              	.L98:
 885              	.LVL29:
 501:FWLIB/src/stm32f4xx_flash.c ****   
 886              		.loc 1 501 0
 887 0022 FFF7FEFF 		bl	FLASH_WaitForLastOperation
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 44


 888              	.LVL30:
 503:FWLIB/src/stm32f4xx_flash.c ****   { 
 889              		.loc 1 503 0
 890 0026 0928     		cmp	r0, #9
 891 0028 1ED1     		bne	.L99
 506:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= tmp_psize;
 892              		.loc 1 506 0
 893 002a 104C     		ldr	r4, .L104
 894 002c 2369     		ldr	r3, [r4, #16]
 895 002e 23F44073 		bic	r3, r3, #768
 896 0032 2361     		str	r3, [r4, #16]
 507:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= SECTOR_MASK;
 897              		.loc 1 507 0
 898 0034 2369     		ldr	r3, [r4, #16]
 899 0036 1E43     		orrs	r6, r6, r3
 900              	.LVL31:
 901 0038 2661     		str	r6, [r4, #16]
 508:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 902              		.loc 1 508 0
 903 003a 2369     		ldr	r3, [r4, #16]
 904 003c 23F0F803 		bic	r3, r3, #248
 905 0040 2361     		str	r3, [r4, #16]
 509:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 906              		.loc 1 509 0
 907 0042 2369     		ldr	r3, [r4, #16]
 908 0044 1D43     		orrs	r5, r5, r3
 909              	.LVL32:
 910 0046 45F00205 		orr	r5, r5, #2
 911 004a 2561     		str	r5, [r4, #16]
 510:FWLIB/src/stm32f4xx_flash.c ****     
 912              		.loc 1 510 0
 913 004c 2369     		ldr	r3, [r4, #16]
 914 004e 43F48033 		orr	r3, r3, #65536
 915 0052 2361     		str	r3, [r4, #16]
 513:FWLIB/src/stm32f4xx_flash.c ****     
 916              		.loc 1 513 0
 917 0054 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 918              	.LVL33:
 516:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= SECTOR_MASK; 
 919              		.loc 1 516 0
 920 0058 2369     		ldr	r3, [r4, #16]
 921 005a 23F00203 		bic	r3, r3, #2
 922 005e 2361     		str	r3, [r4, #16]
 517:FWLIB/src/stm32f4xx_flash.c ****   }
 923              		.loc 1 517 0
 924 0060 2369     		ldr	r3, [r4, #16]
 925 0062 23F0F803 		bic	r3, r3, #248
 926 0066 2361     		str	r3, [r4, #16]
 927              	.L99:
 521:FWLIB/src/stm32f4xx_flash.c **** 
 928              		.loc 1 521 0
 929 0068 70BD     		pop	{r4, r5, r6, pc}
 930              	.L105:
 931 006a 00BF     		.align	2
 932              	.L104:
 933 006c 003C0240 		.word	1073888256
 934              		.cfi_endproc
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 45


 935              	.LFE131:
 937              		.section	.text.FLASH_EraseAllSectors,"ax",%progbits
 938              		.align	2
 939              		.global	FLASH_EraseAllSectors
 940              		.thumb
 941              		.thumb_func
 943              	FLASH_EraseAllSectors:
 944              	.LFB132:
 544:FWLIB/src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 945              		.loc 1 544 0
 946              		.cfi_startproc
 947              		@ args = 0, pretend = 0, frame = 0
 948              		@ frame_needed = 0, uses_anonymous_args = 0
 949              	.LVL34:
 950 0000 10B5     		push	{r4, lr}
 951              	.LCFI4:
 952              		.cfi_def_cfa_offset 8
 953              		.cfi_offset 4, -8
 954              		.cfi_offset 14, -4
 955 0002 0446     		mov	r4, r0
 956              	.LVL35:
 549:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 957              		.loc 1 549 0
 958 0004 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 959              	.LVL36:
 552:FWLIB/src/stm32f4xx_flash.c ****   {
 960              		.loc 1 552 0
 961 0008 34B1     		cbz	r4, .L109
 556:FWLIB/src/stm32f4xx_flash.c ****   {
 962              		.loc 1 556 0
 963 000a 012C     		cmp	r4, #1
 964 000c 06D0     		beq	.L110
 560:FWLIB/src/stm32f4xx_flash.c ****   {
 965              		.loc 1 560 0
 966 000e 022C     		cmp	r4, #2
 967 0010 07D1     		bne	.L111
 562:FWLIB/src/stm32f4xx_flash.c ****   }
 968              		.loc 1 562 0
 969 0012 4FF40073 		mov	r3, #512
 970 0016 06E0     		b	.L107
 971              	.L109:
 554:FWLIB/src/stm32f4xx_flash.c ****   }
 972              		.loc 1 554 0
 973 0018 0023     		movs	r3, #0
 974 001a 04E0     		b	.L107
 975              	.L110:
 558:FWLIB/src/stm32f4xx_flash.c ****   }
 976              		.loc 1 558 0
 977 001c 4FF48073 		mov	r3, #256
 978 0020 01E0     		b	.L107
 979              	.L111:
 566:FWLIB/src/stm32f4xx_flash.c ****   }  
 980              		.loc 1 566 0
 981 0022 4FF44073 		mov	r3, #768
 982              	.L107:
 983              	.LVL37:
 568:FWLIB/src/stm32f4xx_flash.c ****   {
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 46


 984              		.loc 1 568 0
 985 0026 0928     		cmp	r0, #9
 986 0028 15D1     		bne	.L108
 585:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= tmp_psize;
 987              		.loc 1 585 0
 988 002a 0B4C     		ldr	r4, .L113
 989 002c 2269     		ldr	r2, [r4, #16]
 990 002e 22F44072 		bic	r2, r2, #768
 991 0032 2261     		str	r2, [r4, #16]
 586:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_MER;
 992              		.loc 1 586 0
 993 0034 2269     		ldr	r2, [r4, #16]
 994 0036 1343     		orrs	r3, r3, r2
 995              	.LVL38:
 996 0038 2361     		str	r3, [r4, #16]
 587:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 997              		.loc 1 587 0
 998 003a 2369     		ldr	r3, [r4, #16]
 999 003c 43F00403 		orr	r3, r3, #4
 1000 0040 2361     		str	r3, [r4, #16]
 588:FWLIB/src/stm32f4xx_flash.c ****     
 1001              		.loc 1 588 0
 1002 0042 2369     		ldr	r3, [r4, #16]
 1003 0044 43F48033 		orr	r3, r3, #65536
 1004 0048 2361     		str	r3, [r4, #16]
 591:FWLIB/src/stm32f4xx_flash.c **** 
 1005              		.loc 1 591 0
 1006 004a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1007              	.LVL39:
 594:FWLIB/src/stm32f4xx_flash.c **** #endif /* STM32F40_41xxx || STM32F401xx || STM32F410xx || STM32F411xE || STM32F412xG || STM32F413_4
 1008              		.loc 1 594 0
 1009 004e 2369     		ldr	r3, [r4, #16]
 1010 0050 23F00403 		bic	r3, r3, #4
 1011 0054 2361     		str	r3, [r4, #16]
 1012              	.L108:
 600:FWLIB/src/stm32f4xx_flash.c **** 
 1013              		.loc 1 600 0
 1014 0056 10BD     		pop	{r4, pc}
 1015              	.L114:
 1016              		.align	2
 1017              	.L113:
 1018 0058 003C0240 		.word	1073888256
 1019              		.cfi_endproc
 1020              	.LFE132:
 1022              		.section	.text.FLASH_EraseAllBank1Sectors,"ax",%progbits
 1023              		.align	2
 1024              		.global	FLASH_EraseAllBank1Sectors
 1025              		.thumb
 1026              		.thumb_func
 1028              	FLASH_EraseAllBank1Sectors:
 1029              	.LFB133:
 625:FWLIB/src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 1030              		.loc 1 625 0
 1031              		.cfi_startproc
 1032              		@ args = 0, pretend = 0, frame = 0
 1033              		@ frame_needed = 0, uses_anonymous_args = 0
 1034              	.LVL40:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 47


 1035 0000 10B5     		push	{r4, lr}
 1036              	.LCFI5:
 1037              		.cfi_def_cfa_offset 8
 1038              		.cfi_offset 4, -8
 1039              		.cfi_offset 14, -4
 1040 0002 0446     		mov	r4, r0
 1041              	.LVL41:
 630:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 1042              		.loc 1 630 0
 1043 0004 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1044              	.LVL42:
 633:FWLIB/src/stm32f4xx_flash.c ****   {
 1045              		.loc 1 633 0
 1046 0008 34B1     		cbz	r4, .L118
 637:FWLIB/src/stm32f4xx_flash.c ****   {
 1047              		.loc 1 637 0
 1048 000a 012C     		cmp	r4, #1
 1049 000c 06D0     		beq	.L119
 641:FWLIB/src/stm32f4xx_flash.c ****   {
 1050              		.loc 1 641 0
 1051 000e 022C     		cmp	r4, #2
 1052 0010 07D1     		bne	.L120
 643:FWLIB/src/stm32f4xx_flash.c ****   }
 1053              		.loc 1 643 0
 1054 0012 4FF40073 		mov	r3, #512
 1055 0016 06E0     		b	.L116
 1056              	.L118:
 635:FWLIB/src/stm32f4xx_flash.c ****   }
 1057              		.loc 1 635 0
 1058 0018 0023     		movs	r3, #0
 1059 001a 04E0     		b	.L116
 1060              	.L119:
 639:FWLIB/src/stm32f4xx_flash.c ****   }
 1061              		.loc 1 639 0
 1062 001c 4FF48073 		mov	r3, #256
 1063 0020 01E0     		b	.L116
 1064              	.L120:
 647:FWLIB/src/stm32f4xx_flash.c ****   }  
 1065              		.loc 1 647 0
 1066 0022 4FF44073 		mov	r3, #768
 1067              	.L116:
 1068              	.LVL43:
 649:FWLIB/src/stm32f4xx_flash.c ****   {
 1069              		.loc 1 649 0
 1070 0026 0928     		cmp	r0, #9
 1071 0028 15D1     		bne	.L117
 652:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= tmp_psize;
 1072              		.loc 1 652 0
 1073 002a 0B4C     		ldr	r4, .L122
 1074 002c 2269     		ldr	r2, [r4, #16]
 1075 002e 22F44072 		bic	r2, r2, #768
 1076 0032 2261     		str	r2, [r4, #16]
 653:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_MER1;
 1077              		.loc 1 653 0
 1078 0034 2269     		ldr	r2, [r4, #16]
 1079 0036 1343     		orrs	r3, r3, r2
 1080              	.LVL44:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 48


 1081 0038 2361     		str	r3, [r4, #16]
 654:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_STRT;
 1082              		.loc 1 654 0
 1083 003a 2369     		ldr	r3, [r4, #16]
 1084 003c 43F00403 		orr	r3, r3, #4
 1085 0040 2361     		str	r3, [r4, #16]
 655:FWLIB/src/stm32f4xx_flash.c ****     
 1086              		.loc 1 655 0
 1087 0042 2369     		ldr	r3, [r4, #16]
 1088 0044 43F48033 		orr	r3, r3, #65536
 1089 0048 2361     		str	r3, [r4, #16]
 658:FWLIB/src/stm32f4xx_flash.c **** 
 1090              		.loc 1 658 0
 1091 004a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1092              	.LVL45:
 661:FWLIB/src/stm32f4xx_flash.c **** 
 1093              		.loc 1 661 0
 1094 004e 2369     		ldr	r3, [r4, #16]
 1095 0050 23F00403 		bic	r3, r3, #4
 1096 0054 2361     		str	r3, [r4, #16]
 1097              	.L117:
 666:FWLIB/src/stm32f4xx_flash.c **** 
 1098              		.loc 1 666 0
 1099 0056 10BD     		pop	{r4, pc}
 1100              	.L123:
 1101              		.align	2
 1102              	.L122:
 1103 0058 003C0240 		.word	1073888256
 1104              		.cfi_endproc
 1105              	.LFE133:
 1107              		.section	.text.FLASH_EraseAllBank2Sectors,"ax",%progbits
 1108              		.align	2
 1109              		.global	FLASH_EraseAllBank2Sectors
 1110              		.thumb
 1111              		.thumb_func
 1113              	FLASH_EraseAllBank2Sectors:
 1114              	.LFB134:
 692:FWLIB/src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 1115              		.loc 1 692 0
 1116              		.cfi_startproc
 1117              		@ args = 0, pretend = 0, frame = 0
 1118              		@ frame_needed = 0, uses_anonymous_args = 0
 1119              	.LVL46:
 1120 0000 10B5     		push	{r4, lr}
 1121              	.LCFI6:
 1122              		.cfi_def_cfa_offset 8
 1123              		.cfi_offset 4, -8
 1124              		.cfi_offset 14, -4
 1125 0002 0446     		mov	r4, r0
 1126              	.LVL47:
 697:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 1127              		.loc 1 697 0
 1128 0004 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1129              	.LVL48:
 700:FWLIB/src/stm32f4xx_flash.c ****   {
 1130              		.loc 1 700 0
 1131 0008 34B1     		cbz	r4, .L127
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 49


 704:FWLIB/src/stm32f4xx_flash.c ****   {
 1132              		.loc 1 704 0
 1133 000a 012C     		cmp	r4, #1
 1134 000c 06D0     		beq	.L128
 708:FWLIB/src/stm32f4xx_flash.c ****   {
 1135              		.loc 1 708 0
 1136 000e 022C     		cmp	r4, #2
 1137 0010 07D1     		bne	.L129
 710:FWLIB/src/stm32f4xx_flash.c ****   }
 1138              		.loc 1 710 0
 1139 0012 4FF40073 		mov	r3, #512
 1140 0016 06E0     		b	.L125
 1141              	.L127:
 702:FWLIB/src/stm32f4xx_flash.c ****   }
 1142              		.loc 1 702 0
 1143 0018 0023     		movs	r3, #0
 1144 001a 04E0     		b	.L125
 1145              	.L128:
 706:FWLIB/src/stm32f4xx_flash.c ****   }
 1146              		.loc 1 706 0
 1147 001c 4FF48073 		mov	r3, #256
 1148 0020 01E0     		b	.L125
 1149              	.L129:
 714:FWLIB/src/stm32f4xx_flash.c ****   }  
 1150              		.loc 1 714 0
 1151 0022 4FF44073 		mov	r3, #768
 1152              	.L125:
 1153              	.LVL49:
 716:FWLIB/src/stm32f4xx_flash.c ****   {
 1154              		.loc 1 716 0
 1155 0026 0928     		cmp	r0, #9
 1156 0028 15D1     		bne	.L126
 719:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= tmp_psize;
 1157              		.loc 1 719 0
 1158 002a 0B4C     		ldr	r4, .L131
 1159 002c 2269     		ldr	r2, [r4, #16]
 1160 002e 22F44072 		bic	r2, r2, #768
 1161 0032 2261     		str	r2, [r4, #16]
 720:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_MER2;
 1162              		.loc 1 720 0
 1163 0034 2269     		ldr	r2, [r4, #16]
 1164 0036 1343     		orrs	r3, r3, r2
 1165              	.LVL50:
 1166 0038 2361     		str	r3, [r4, #16]
 721:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_STRT;
 1167              		.loc 1 721 0
 1168 003a 2369     		ldr	r3, [r4, #16]
 1169 003c 43F40043 		orr	r3, r3, #32768
 1170 0040 2361     		str	r3, [r4, #16]
 722:FWLIB/src/stm32f4xx_flash.c ****     
 1171              		.loc 1 722 0
 1172 0042 2369     		ldr	r3, [r4, #16]
 1173 0044 43F48033 		orr	r3, r3, #65536
 1174 0048 2361     		str	r3, [r4, #16]
 725:FWLIB/src/stm32f4xx_flash.c **** 
 1175              		.loc 1 725 0
 1176 004a FFF7FEFF 		bl	FLASH_WaitForLastOperation
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 50


 1177              	.LVL51:
 728:FWLIB/src/stm32f4xx_flash.c **** 
 1178              		.loc 1 728 0
 1179 004e 2369     		ldr	r3, [r4, #16]
 1180 0050 23F40043 		bic	r3, r3, #32768
 1181 0054 2361     		str	r3, [r4, #16]
 1182              	.L126:
 733:FWLIB/src/stm32f4xx_flash.c **** 
 1183              		.loc 1 733 0
 1184 0056 10BD     		pop	{r4, pc}
 1185              	.L132:
 1186              		.align	2
 1187              	.L131:
 1188 0058 003C0240 		.word	1073888256
 1189              		.cfi_endproc
 1190              	.LFE134:
 1192              		.section	.text.FLASH_ProgramDoubleWord,"ax",%progbits
 1193              		.align	2
 1194              		.global	FLASH_ProgramDoubleWord
 1195              		.thumb
 1196              		.thumb_func
 1198              	FLASH_ProgramDoubleWord:
 1199              	.LFB135:
 749:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1200              		.loc 1 749 0
 1201              		.cfi_startproc
 1202              		@ args = 0, pretend = 0, frame = 0
 1203              		@ frame_needed = 0, uses_anonymous_args = 0
 1204              	.LVL52:
 1205 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1206              	.LCFI7:
 1207              		.cfi_def_cfa_offset 24
 1208              		.cfi_offset 3, -24
 1209              		.cfi_offset 4, -20
 1210              		.cfi_offset 5, -16
 1211              		.cfi_offset 6, -12
 1212              		.cfi_offset 7, -8
 1213              		.cfi_offset 14, -4
 1214 0002 0546     		mov	r5, r0
 1215 0004 1646     		mov	r6, r2
 1216 0006 1F46     		mov	r7, r3
 1217              	.LVL53:
 756:FWLIB/src/stm32f4xx_flash.c ****   
 1218              		.loc 1 756 0
 1219 0008 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1220              	.LVL54:
 758:FWLIB/src/stm32f4xx_flash.c ****   {
 1221              		.loc 1 758 0
 1222 000c 0928     		cmp	r0, #9
 1223 000e 14D1     		bne	.L134
 761:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 1224              		.loc 1 761 0
 1225 0010 0A4C     		ldr	r4, .L136
 1226 0012 2369     		ldr	r3, [r4, #16]
 1227 0014 23F44073 		bic	r3, r3, #768
 1228 0018 2361     		str	r3, [r4, #16]
 762:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 51


 1229              		.loc 1 762 0
 1230 001a 2369     		ldr	r3, [r4, #16]
 1231 001c 43F44073 		orr	r3, r3, #768
 1232 0020 2361     		str	r3, [r4, #16]
 763:FWLIB/src/stm32f4xx_flash.c ****   
 1233              		.loc 1 763 0
 1234 0022 2369     		ldr	r3, [r4, #16]
 1235 0024 43F00103 		orr	r3, r3, #1
 1236 0028 2361     		str	r3, [r4, #16]
 765:FWLIB/src/stm32f4xx_flash.c ****         
 1237              		.loc 1 765 0
 1238 002a C5E90067 		strd	r6, [r5]
 768:FWLIB/src/stm32f4xx_flash.c **** 
 1239              		.loc 1 768 0
 1240 002e FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1241              	.LVL55:
 771:FWLIB/src/stm32f4xx_flash.c ****   } 
 1242              		.loc 1 771 0
 1243 0032 2369     		ldr	r3, [r4, #16]
 1244 0034 23F00103 		bic	r3, r3, #1
 1245 0038 2361     		str	r3, [r4, #16]
 1246              	.L134:
 775:FWLIB/src/stm32f4xx_flash.c **** 
 1247              		.loc 1 775 0
 1248 003a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1249              	.LVL56:
 1250              	.L137:
 1251              		.align	2
 1252              	.L136:
 1253 003c 003C0240 		.word	1073888256
 1254              		.cfi_endproc
 1255              	.LFE135:
 1257              		.section	.text.FLASH_ProgramWord,"ax",%progbits
 1258              		.align	2
 1259              		.global	FLASH_ProgramWord
 1260              		.thumb
 1261              		.thumb_func
 1263              	FLASH_ProgramWord:
 1264              	.LFB136:
 792:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1265              		.loc 1 792 0
 1266              		.cfi_startproc
 1267              		@ args = 0, pretend = 0, frame = 0
 1268              		@ frame_needed = 0, uses_anonymous_args = 0
 1269              	.LVL57:
 1270 0000 70B5     		push	{r4, r5, r6, lr}
 1271              	.LCFI8:
 1272              		.cfi_def_cfa_offset 16
 1273              		.cfi_offset 4, -16
 1274              		.cfi_offset 5, -12
 1275              		.cfi_offset 6, -8
 1276              		.cfi_offset 14, -4
 1277 0002 0546     		mov	r5, r0
 1278 0004 0E46     		mov	r6, r1
 1279              	.LVL58:
 799:FWLIB/src/stm32f4xx_flash.c ****   
 1280              		.loc 1 799 0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 52


 1281 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1282              	.LVL59:
 801:FWLIB/src/stm32f4xx_flash.c ****   {
 1283              		.loc 1 801 0
 1284 000a 0928     		cmp	r0, #9
 1285 000c 13D1     		bne	.L139
 804:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_WORD;
 1286              		.loc 1 804 0
 1287 000e 0A4C     		ldr	r4, .L141
 1288 0010 2369     		ldr	r3, [r4, #16]
 1289 0012 23F44073 		bic	r3, r3, #768
 1290 0016 2361     		str	r3, [r4, #16]
 805:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 1291              		.loc 1 805 0
 1292 0018 2369     		ldr	r3, [r4, #16]
 1293 001a 43F40073 		orr	r3, r3, #512
 1294 001e 2361     		str	r3, [r4, #16]
 806:FWLIB/src/stm32f4xx_flash.c ****   
 1295              		.loc 1 806 0
 1296 0020 2369     		ldr	r3, [r4, #16]
 1297 0022 43F00103 		orr	r3, r3, #1
 1298 0026 2361     		str	r3, [r4, #16]
 808:FWLIB/src/stm32f4xx_flash.c ****         
 1299              		.loc 1 808 0
 1300 0028 2E60     		str	r6, [r5]
 811:FWLIB/src/stm32f4xx_flash.c **** 
 1301              		.loc 1 811 0
 1302 002a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1303              	.LVL60:
 814:FWLIB/src/stm32f4xx_flash.c ****   } 
 1304              		.loc 1 814 0
 1305 002e 2369     		ldr	r3, [r4, #16]
 1306 0030 23F00103 		bic	r3, r3, #1
 1307 0034 2361     		str	r3, [r4, #16]
 1308              	.L139:
 818:FWLIB/src/stm32f4xx_flash.c **** 
 1309              		.loc 1 818 0
 1310 0036 70BD     		pop	{r4, r5, r6, pc}
 1311              	.LVL61:
 1312              	.L142:
 1313              		.align	2
 1314              	.L141:
 1315 0038 003C0240 		.word	1073888256
 1316              		.cfi_endproc
 1317              	.LFE136:
 1319              		.section	.text.FLASH_ProgramHalfWord,"ax",%progbits
 1320              		.align	2
 1321              		.global	FLASH_ProgramHalfWord
 1322              		.thumb
 1323              		.thumb_func
 1325              	FLASH_ProgramHalfWord:
 1326              	.LFB137:
 834:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1327              		.loc 1 834 0
 1328              		.cfi_startproc
 1329              		@ args = 0, pretend = 0, frame = 0
 1330              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 53


 1331              	.LVL62:
 1332 0000 70B5     		push	{r4, r5, r6, lr}
 1333              	.LCFI9:
 1334              		.cfi_def_cfa_offset 16
 1335              		.cfi_offset 4, -16
 1336              		.cfi_offset 5, -12
 1337              		.cfi_offset 6, -8
 1338              		.cfi_offset 14, -4
 1339 0002 0546     		mov	r5, r0
 1340 0004 0E46     		mov	r6, r1
 1341              	.LVL63:
 841:FWLIB/src/stm32f4xx_flash.c ****   
 1342              		.loc 1 841 0
 1343 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1344              	.LVL64:
 843:FWLIB/src/stm32f4xx_flash.c ****   {
 1345              		.loc 1 843 0
 1346 000a 0928     		cmp	r0, #9
 1347 000c 13D1     		bne	.L144
 846:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 1348              		.loc 1 846 0
 1349 000e 0A4C     		ldr	r4, .L146
 1350 0010 2369     		ldr	r3, [r4, #16]
 1351 0012 23F44073 		bic	r3, r3, #768
 1352 0016 2361     		str	r3, [r4, #16]
 847:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 1353              		.loc 1 847 0
 1354 0018 2369     		ldr	r3, [r4, #16]
 1355 001a 43F48073 		orr	r3, r3, #256
 1356 001e 2361     		str	r3, [r4, #16]
 848:FWLIB/src/stm32f4xx_flash.c ****   
 1357              		.loc 1 848 0
 1358 0020 2369     		ldr	r3, [r4, #16]
 1359 0022 43F00103 		orr	r3, r3, #1
 1360 0026 2361     		str	r3, [r4, #16]
 850:FWLIB/src/stm32f4xx_flash.c ****         
 1361              		.loc 1 850 0
 1362 0028 2E80     		strh	r6, [r5]	@ movhi
 853:FWLIB/src/stm32f4xx_flash.c **** 
 1363              		.loc 1 853 0
 1364 002a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1365              	.LVL65:
 856:FWLIB/src/stm32f4xx_flash.c ****   } 
 1366              		.loc 1 856 0
 1367 002e 2369     		ldr	r3, [r4, #16]
 1368 0030 23F00103 		bic	r3, r3, #1
 1369 0034 2361     		str	r3, [r4, #16]
 1370              	.L144:
 860:FWLIB/src/stm32f4xx_flash.c **** 
 1371              		.loc 1 860 0
 1372 0036 70BD     		pop	{r4, r5, r6, pc}
 1373              	.LVL66:
 1374              	.L147:
 1375              		.align	2
 1376              	.L146:
 1377 0038 003C0240 		.word	1073888256
 1378              		.cfi_endproc
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 54


 1379              	.LFE137:
 1381              		.section	.text.FLASH_ProgramByte,"ax",%progbits
 1382              		.align	2
 1383              		.global	FLASH_ProgramByte
 1384              		.thumb
 1385              		.thumb_func
 1387              	FLASH_ProgramByte:
 1388              	.LFB138:
 876:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1389              		.loc 1 876 0
 1390              		.cfi_startproc
 1391              		@ args = 0, pretend = 0, frame = 0
 1392              		@ frame_needed = 0, uses_anonymous_args = 0
 1393              	.LVL67:
 1394 0000 70B5     		push	{r4, r5, r6, lr}
 1395              	.LCFI10:
 1396              		.cfi_def_cfa_offset 16
 1397              		.cfi_offset 4, -16
 1398              		.cfi_offset 5, -12
 1399              		.cfi_offset 6, -8
 1400              		.cfi_offset 14, -4
 1401 0002 0546     		mov	r5, r0
 1402 0004 0E46     		mov	r6, r1
 1403              	.LVL68:
 883:FWLIB/src/stm32f4xx_flash.c ****   
 1404              		.loc 1 883 0
 1405 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1406              	.LVL69:
 885:FWLIB/src/stm32f4xx_flash.c ****   {
 1407              		.loc 1 885 0
 1408 000a 0928     		cmp	r0, #9
 1409 000c 11D1     		bne	.L149
 888:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_BYTE;
 1410              		.loc 1 888 0
 1411 000e 094C     		ldr	r4, .L151
 1412 0010 2369     		ldr	r3, [r4, #16]
 1413 0012 23F44073 		bic	r3, r3, #768
 1414 0016 2361     		str	r3, [r4, #16]
 889:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 1415              		.loc 1 889 0
 1416 0018 2369     		ldr	r3, [r4, #16]
 1417 001a 2361     		str	r3, [r4, #16]
 890:FWLIB/src/stm32f4xx_flash.c ****   
 1418              		.loc 1 890 0
 1419 001c 2369     		ldr	r3, [r4, #16]
 1420 001e 43F00103 		orr	r3, r3, #1
 1421 0022 2361     		str	r3, [r4, #16]
 892:FWLIB/src/stm32f4xx_flash.c ****         
 1422              		.loc 1 892 0
 1423 0024 2E70     		strb	r6, [r5]
 895:FWLIB/src/stm32f4xx_flash.c **** 
 1424              		.loc 1 895 0
 1425 0026 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1426              	.LVL70:
 898:FWLIB/src/stm32f4xx_flash.c ****   } 
 1427              		.loc 1 898 0
 1428 002a 2369     		ldr	r3, [r4, #16]
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 55


 1429 002c 23F00103 		bic	r3, r3, #1
 1430 0030 2361     		str	r3, [r4, #16]
 1431              	.L149:
 903:FWLIB/src/stm32f4xx_flash.c **** 
 1432              		.loc 1 903 0
 1433 0032 70BD     		pop	{r4, r5, r6, pc}
 1434              	.LVL71:
 1435              	.L152:
 1436              		.align	2
 1437              	.L151:
 1438 0034 003C0240 		.word	1073888256
 1439              		.cfi_endproc
 1440              	.LFE138:
 1442              		.section	.text.FLASH_OB_WRPConfig,"ax",%progbits
 1443              		.align	2
 1444              		.global	FLASH_OB_WRPConfig
 1445              		.thumb
 1446              		.thumb_func
 1448              	FLASH_OB_WRPConfig:
 1449              	.LFB141:
1013:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1450              		.loc 1 1013 0
 1451              		.cfi_startproc
 1452              		@ args = 0, pretend = 0, frame = 0
 1453              		@ frame_needed = 0, uses_anonymous_args = 0
 1454              	.LVL72:
 1455 0000 38B5     		push	{r3, r4, r5, lr}
 1456              	.LCFI11:
 1457              		.cfi_def_cfa_offset 16
 1458              		.cfi_offset 3, -16
 1459              		.cfi_offset 4, -12
 1460              		.cfi_offset 5, -8
 1461              		.cfi_offset 14, -4
 1462 0002 0446     		mov	r4, r0
 1463 0004 0D46     		mov	r5, r1
 1464              	.LVL73:
1020:FWLIB/src/stm32f4xx_flash.c **** 
 1465              		.loc 1 1020 0
 1466 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1467              	.LVL74:
1022:FWLIB/src/stm32f4xx_flash.c ****   { 
 1468              		.loc 1 1022 0
 1469 000a 0928     		cmp	r0, #9
 1470 000c 0DD1     		bne	.L153
1024:FWLIB/src/stm32f4xx_flash.c ****     {
 1471              		.loc 1 1024 0
 1472 000e 35B1     		cbz	r5, .L155
1026:FWLIB/src/stm32f4xx_flash.c ****     }
 1473              		.loc 1 1026 0
 1474 0010 064A     		ldr	r2, .L157
 1475 0012 1388     		ldrh	r3, [r2]
 1476 0014 9BB2     		uxth	r3, r3
 1477 0016 23EA0404 		bic	r4, r3, r4
 1478              	.LVL75:
 1479 001a 1480     		strh	r4, [r2]	@ movhi
 1480 001c 38BD     		pop	{r3, r4, r5, pc}
 1481              	.LVL76:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 56


 1482              	.L155:
1030:FWLIB/src/stm32f4xx_flash.c ****     }
 1483              		.loc 1 1030 0
 1484 001e 034A     		ldr	r2, .L157
 1485 0020 1388     		ldrh	r3, [r2]
 1486 0022 9BB2     		uxth	r3, r3
 1487 0024 A4B2     		uxth	r4, r4
 1488              	.LVL77:
 1489 0026 1C43     		orrs	r4, r4, r3
 1490 0028 1480     		strh	r4, [r2]	@ movhi
 1491              	.L153:
 1492 002a 38BD     		pop	{r3, r4, r5, pc}
 1493              	.L158:
 1494              		.align	2
 1495              	.L157:
 1496 002c 163C0240 		.word	1073888278
 1497              		.cfi_endproc
 1498              	.LFE141:
 1500              		.section	.text.FLASH_OB_WRP1Config,"ax",%progbits
 1501              		.align	2
 1502              		.global	FLASH_OB_WRP1Config
 1503              		.thumb
 1504              		.thumb_func
 1506              	FLASH_OB_WRP1Config:
 1507              	.LFB142:
1055:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1508              		.loc 1 1055 0
 1509              		.cfi_startproc
 1510              		@ args = 0, pretend = 0, frame = 0
 1511              		@ frame_needed = 0, uses_anonymous_args = 0
 1512              	.LVL78:
 1513 0000 38B5     		push	{r3, r4, r5, lr}
 1514              	.LCFI12:
 1515              		.cfi_def_cfa_offset 16
 1516              		.cfi_offset 3, -16
 1517              		.cfi_offset 4, -12
 1518              		.cfi_offset 5, -8
 1519              		.cfi_offset 14, -4
 1520 0002 0446     		mov	r4, r0
 1521 0004 0D46     		mov	r5, r1
 1522              	.LVL79:
1062:FWLIB/src/stm32f4xx_flash.c **** 
 1523              		.loc 1 1062 0
 1524 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1525              	.LVL80:
1064:FWLIB/src/stm32f4xx_flash.c ****   { 
 1526              		.loc 1 1064 0
 1527 000a 0928     		cmp	r0, #9
 1528 000c 0DD1     		bne	.L159
1066:FWLIB/src/stm32f4xx_flash.c ****     {
 1529              		.loc 1 1066 0
 1530 000e 35B1     		cbz	r5, .L161
1068:FWLIB/src/stm32f4xx_flash.c ****     }
 1531              		.loc 1 1068 0
 1532 0010 064A     		ldr	r2, .L163
 1533 0012 1388     		ldrh	r3, [r2]
 1534 0014 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 57


 1535 0016 23EA0404 		bic	r4, r3, r4
 1536              	.LVL81:
 1537 001a 1480     		strh	r4, [r2]	@ movhi
 1538 001c 38BD     		pop	{r3, r4, r5, pc}
 1539              	.LVL82:
 1540              	.L161:
1072:FWLIB/src/stm32f4xx_flash.c ****     }
 1541              		.loc 1 1072 0
 1542 001e 034A     		ldr	r2, .L163
 1543 0020 1388     		ldrh	r3, [r2]
 1544 0022 9BB2     		uxth	r3, r3
 1545 0024 A4B2     		uxth	r4, r4
 1546              	.LVL83:
 1547 0026 1C43     		orrs	r4, r4, r3
 1548 0028 1480     		strh	r4, [r2]	@ movhi
 1549              	.L159:
 1550 002a 38BD     		pop	{r3, r4, r5, pc}
 1551              	.L164:
 1552              		.align	2
 1553              	.L163:
 1554 002c 1A3C0240 		.word	1073888282
 1555              		.cfi_endproc
 1556              	.LFE142:
 1558              		.section	.text.FLASH_OB_PCROPConfig,"ax",%progbits
 1559              		.align	2
 1560              		.global	FLASH_OB_PCROPConfig
 1561              		.thumb
 1562              		.thumb_func
 1564              	FLASH_OB_PCROPConfig:
 1565              	.LFB144:
1136:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1566              		.loc 1 1136 0
 1567              		.cfi_startproc
 1568              		@ args = 0, pretend = 0, frame = 0
 1569              		@ frame_needed = 0, uses_anonymous_args = 0
 1570              	.LVL84:
 1571 0000 38B5     		push	{r3, r4, r5, lr}
 1572              	.LCFI13:
 1573              		.cfi_def_cfa_offset 16
 1574              		.cfi_offset 3, -16
 1575              		.cfi_offset 4, -12
 1576              		.cfi_offset 5, -8
 1577              		.cfi_offset 14, -4
 1578 0002 0446     		mov	r4, r0
 1579 0004 0D46     		mov	r5, r1
 1580              	.LVL85:
1143:FWLIB/src/stm32f4xx_flash.c **** 
 1581              		.loc 1 1143 0
 1582 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1583              	.LVL86:
1145:FWLIB/src/stm32f4xx_flash.c ****   { 
 1584              		.loc 1 1145 0
 1585 000a 0928     		cmp	r0, #9
 1586 000c 0DD1     		bne	.L165
1147:FWLIB/src/stm32f4xx_flash.c ****     {
 1587              		.loc 1 1147 0
 1588 000e 35B1     		cbz	r5, .L167
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 58


1149:FWLIB/src/stm32f4xx_flash.c ****     }
 1589              		.loc 1 1149 0
 1590 0010 064A     		ldr	r2, .L169
 1591 0012 1388     		ldrh	r3, [r2]
 1592 0014 9BB2     		uxth	r3, r3
 1593 0016 A4B2     		uxth	r4, r4
 1594              	.LVL87:
 1595 0018 1C43     		orrs	r4, r4, r3
 1596 001a 1480     		strh	r4, [r2]	@ movhi
 1597 001c 38BD     		pop	{r3, r4, r5, pc}
 1598              	.LVL88:
 1599              	.L167:
1153:FWLIB/src/stm32f4xx_flash.c ****     }
 1600              		.loc 1 1153 0
 1601 001e 034A     		ldr	r2, .L169
 1602 0020 1388     		ldrh	r3, [r2]
 1603 0022 9BB2     		uxth	r3, r3
 1604 0024 23EA0404 		bic	r4, r3, r4
 1605              	.LVL89:
 1606 0028 1480     		strh	r4, [r2]	@ movhi
 1607              	.L165:
 1608 002a 38BD     		pop	{r3, r4, r5, pc}
 1609              	.L170:
 1610              		.align	2
 1611              	.L169:
 1612 002c 163C0240 		.word	1073888278
 1613              		.cfi_endproc
 1614              	.LFE144:
 1616              		.section	.text.FLASH_OB_PCROP1Config,"ax",%progbits
 1617              		.align	2
 1618              		.global	FLASH_OB_PCROP1Config
 1619              		.thumb
 1620              		.thumb_func
 1622              	FLASH_OB_PCROP1Config:
 1623              	.LFB145:
1173:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1624              		.loc 1 1173 0
 1625              		.cfi_startproc
 1626              		@ args = 0, pretend = 0, frame = 0
 1627              		@ frame_needed = 0, uses_anonymous_args = 0
 1628              	.LVL90:
 1629 0000 38B5     		push	{r3, r4, r5, lr}
 1630              	.LCFI14:
 1631              		.cfi_def_cfa_offset 16
 1632              		.cfi_offset 3, -16
 1633              		.cfi_offset 4, -12
 1634              		.cfi_offset 5, -8
 1635              		.cfi_offset 14, -4
 1636 0002 0446     		mov	r4, r0
 1637 0004 0D46     		mov	r5, r1
 1638              	.LVL91:
1180:FWLIB/src/stm32f4xx_flash.c **** 
 1639              		.loc 1 1180 0
 1640 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1641              	.LVL92:
1182:FWLIB/src/stm32f4xx_flash.c ****   { 
 1642              		.loc 1 1182 0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 59


 1643 000a 0928     		cmp	r0, #9
 1644 000c 0DD1     		bne	.L171
1184:FWLIB/src/stm32f4xx_flash.c ****     {
 1645              		.loc 1 1184 0
 1646 000e 35B1     		cbz	r5, .L173
1186:FWLIB/src/stm32f4xx_flash.c ****     }
 1647              		.loc 1 1186 0
 1648 0010 064A     		ldr	r2, .L175
 1649 0012 1388     		ldrh	r3, [r2]
 1650 0014 9BB2     		uxth	r3, r3
 1651 0016 A4B2     		uxth	r4, r4
 1652              	.LVL93:
 1653 0018 1C43     		orrs	r4, r4, r3
 1654 001a 1480     		strh	r4, [r2]	@ movhi
 1655 001c 38BD     		pop	{r3, r4, r5, pc}
 1656              	.LVL94:
 1657              	.L173:
1190:FWLIB/src/stm32f4xx_flash.c ****     }
 1658              		.loc 1 1190 0
 1659 001e 034A     		ldr	r2, .L175
 1660 0020 1388     		ldrh	r3, [r2]
 1661 0022 9BB2     		uxth	r3, r3
 1662 0024 23EA0404 		bic	r4, r3, r4
 1663              	.LVL95:
 1664 0028 1480     		strh	r4, [r2]	@ movhi
 1665              	.L171:
 1666 002a 38BD     		pop	{r3, r4, r5, pc}
 1667              	.L176:
 1668              		.align	2
 1669              	.L175:
 1670 002c 1A3C0240 		.word	1073888282
 1671              		.cfi_endproc
 1672              	.LFE145:
 1674              		.section	.text.FLASH_OB_RDPConfig,"ax",%progbits
 1675              		.align	2
 1676              		.global	FLASH_OB_RDPConfig
 1677              		.thumb
 1678              		.thumb_func
 1680              	FLASH_OB_RDPConfig:
 1681              	.LFB146:
1209:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1682              		.loc 1 1209 0
 1683              		.cfi_startproc
 1684              		@ args = 0, pretend = 0, frame = 0
 1685              		@ frame_needed = 0, uses_anonymous_args = 0
 1686              	.LVL96:
 1687 0000 10B5     		push	{r4, lr}
 1688              	.LCFI15:
 1689              		.cfi_def_cfa_offset 8
 1690              		.cfi_offset 4, -8
 1691              		.cfi_offset 14, -4
 1692 0002 0446     		mov	r4, r0
 1693              	.LVL97:
1215:FWLIB/src/stm32f4xx_flash.c **** 
 1694              		.loc 1 1215 0
 1695 0004 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1696              	.LVL98:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 60


1217:FWLIB/src/stm32f4xx_flash.c ****   {
 1697              		.loc 1 1217 0
 1698 0008 0928     		cmp	r0, #9
 1699 000a 01D1     		bne	.L177
1219:FWLIB/src/stm32f4xx_flash.c **** 
 1700              		.loc 1 1219 0
 1701 000c 014B     		ldr	r3, .L180
 1702 000e 1C70     		strb	r4, [r3]
 1703              	.L177:
 1704 0010 10BD     		pop	{r4, pc}
 1705              	.L181:
 1706 0012 00BF     		.align	2
 1707              	.L180:
 1708 0014 153C0240 		.word	1073888277
 1709              		.cfi_endproc
 1710              	.LFE146:
 1712              		.section	.text.FLASH_OB_UserConfig,"ax",%progbits
 1713              		.align	2
 1714              		.global	FLASH_OB_UserConfig
 1715              		.thumb
 1716              		.thumb_func
 1718              	FLASH_OB_UserConfig:
 1719              	.LFB147:
1241:FWLIB/src/stm32f4xx_flash.c ****   uint8_t optiontmp = 0xFF;
 1720              		.loc 1 1241 0
 1721              		.cfi_startproc
 1722              		@ args = 0, pretend = 0, frame = 0
 1723              		@ frame_needed = 0, uses_anonymous_args = 0
 1724              	.LVL99:
 1725 0000 70B5     		push	{r4, r5, r6, lr}
 1726              	.LCFI16:
 1727              		.cfi_def_cfa_offset 16
 1728              		.cfi_offset 4, -16
 1729              		.cfi_offset 5, -12
 1730              		.cfi_offset 6, -8
 1731              		.cfi_offset 14, -4
 1732 0002 0446     		mov	r4, r0
 1733 0004 0E46     		mov	r6, r1
 1734 0006 1546     		mov	r5, r2
 1735              	.LVL100:
1251:FWLIB/src/stm32f4xx_flash.c ****   
 1736              		.loc 1 1251 0
 1737 0008 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1738              	.LVL101:
1253:FWLIB/src/stm32f4xx_flash.c ****   { 
 1739              		.loc 1 1253 0
 1740 000c 0928     		cmp	r0, #9
 1741 000e 07D1     		bne	.L182
1262:FWLIB/src/stm32f4xx_flash.c **** #endif /* STM32F40_41xxx || STM32F401xx || STM32F410xx || STM32F411xE || STM32F446xx */ 
 1742              		.loc 1 1262 0
 1743 0010 044A     		ldr	r2, .L185
 1744 0012 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1745 0014 03F00F03 		and	r3, r3, #15
 1746              	.LVL102:
1266:FWLIB/src/stm32f4xx_flash.c ****   }  
 1747              		.loc 1 1266 0
 1748 0018 1E43     		orrs	r6, r6, r3
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 61


 1749 001a 3543     		orrs	r5, r5, r6
 1750 001c 2C43     		orrs	r4, r4, r5
 1751 001e 1470     		strb	r4, [r2]
 1752              	.LVL103:
 1753              	.L182:
 1754 0020 70BD     		pop	{r4, r5, r6, pc}
 1755              	.L186:
 1756 0022 00BF     		.align	2
 1757              	.L185:
 1758 0024 143C0240 		.word	1073888276
 1759              		.cfi_endproc
 1760              	.LFE147:
 1762              		.section	.text.FLASH_OB_Launch,"ax",%progbits
 1763              		.align	2
 1764              		.global	FLASH_OB_Launch
 1765              		.thumb
 1766              		.thumb_func
 1768              	FLASH_OB_Launch:
 1769              	.LFB150:
1320:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1770              		.loc 1 1320 0
 1771              		.cfi_startproc
 1772              		@ args = 0, pretend = 0, frame = 0
 1773              		@ frame_needed = 0, uses_anonymous_args = 0
 1774 0000 08B5     		push	{r3, lr}
 1775              	.LCFI17:
 1776              		.cfi_def_cfa_offset 8
 1777              		.cfi_offset 3, -8
 1778              		.cfi_offset 14, -4
 1779              	.LVL104:
1324:FWLIB/src/stm32f4xx_flash.c **** 
 1780              		.loc 1 1324 0
 1781 0002 044A     		ldr	r2, .L189
 1782 0004 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1783 0006 43F00203 		orr	r3, r3, #2
 1784 000a 1370     		strb	r3, [r2]
1327:FWLIB/src/stm32f4xx_flash.c **** 
 1785              		.loc 1 1327 0
 1786 000c FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1787              	.LVL105:
1330:FWLIB/src/stm32f4xx_flash.c **** 
 1788              		.loc 1 1330 0
 1789 0010 08BD     		pop	{r3, pc}
 1790              	.L190:
 1791 0012 00BF     		.align	2
 1792              	.L189:
 1793 0014 143C0240 		.word	1073888276
 1794              		.cfi_endproc
 1795              	.LFE150:
 1797              		.text
 1798              	.Letext0:
 1799              		.file 2 "d:\\gcc_arm\\5.4 2016q3\\arm-none-eabi\\include\\machine\\_default_types.h"
 1800              		.file 3 "d:\\gcc_arm\\5.4 2016q3\\arm-none-eabi\\include\\sys\\_stdint.h"
 1801              		.file 4 "USER/stm32f4xx.h"
 1802              		.file 5 "FWLIB/inc/stm32f4xx_flash.h"
 1803              		.file 6 "F4_CORE/core_cm4.h"
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 62


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_flash.c
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:22     .text.FLASH_SetLatency:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:27     .text.FLASH_SetLatency:00000000 FLASH_SetLatency
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:45     .text.FLASH_SetLatency:00000008 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:50     .text.FLASH_PrefetchBufferCmd:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:55     .text.FLASH_PrefetchBufferCmd:00000000 FLASH_PrefetchBufferCmd
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:81     .text.FLASH_PrefetchBufferCmd:0000001c $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:86     .text.FLASH_InstructionCacheCmd:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:91     .text.FLASH_InstructionCacheCmd:00000000 FLASH_InstructionCacheCmd
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:117    .text.FLASH_InstructionCacheCmd:0000001c $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:122    .text.FLASH_DataCacheCmd:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:127    .text.FLASH_DataCacheCmd:00000000 FLASH_DataCacheCmd
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:153    .text.FLASH_DataCacheCmd:0000001c $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:158    .text.FLASH_InstructionCacheReset:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:163    .text.FLASH_InstructionCacheReset:00000000 FLASH_InstructionCacheReset
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:179    .text.FLASH_InstructionCacheReset:0000000c $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:184    .text.FLASH_DataCacheReset:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:189    .text.FLASH_DataCacheReset:00000000 FLASH_DataCacheReset
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:205    .text.FLASH_DataCacheReset:0000000c $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:210    .text.FLASH_Unlock:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:215    .text.FLASH_Unlock:00000000 FLASH_Unlock
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:239    .text.FLASH_Unlock:00000018 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:245    .text.FLASH_Lock:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:250    .text.FLASH_Lock:00000000 FLASH_Lock
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:266    .text.FLASH_Lock:0000000c $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:271    .text.FLASH_OB_Unlock:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:276    .text.FLASH_OB_Unlock:00000000 FLASH_OB_Unlock
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:300    .text.FLASH_OB_Unlock:00000018 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:306    .text.FLASH_OB_Lock:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:311    .text.FLASH_OB_Lock:00000000 FLASH_OB_Lock
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:327    .text.FLASH_OB_Lock:0000000c $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:332    .text.FLASH_OB_PCROPSelectionConfig:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:337    .text.FLASH_OB_PCROPSelectionConfig:00000000 FLASH_OB_PCROPSelectionConfig
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:358    .text.FLASH_OB_PCROPSelectionConfig:00000010 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:363    .text.FLASH_OB_BootConfig:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:368    .text.FLASH_OB_BootConfig:00000000 FLASH_OB_BootConfig
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:390    .text.FLASH_OB_BootConfig:00000014 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:395    .text.FLASH_OB_BORConfig:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:400    .text.FLASH_OB_BORConfig:00000000 FLASH_OB_BORConfig
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:422    .text.FLASH_OB_BORConfig:00000014 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:427    .text.FLASH_OB_GetUser:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:432    .text.FLASH_OB_GetUser:00000000 FLASH_OB_GetUser
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:448    .text.FLASH_OB_GetUser:0000000c $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:453    .text.FLASH_OB_GetWRP:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:458    .text.FLASH_OB_GetWRP:00000000 FLASH_OB_GetWRP
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:474    .text.FLASH_OB_GetWRP:00000008 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:479    .text.FLASH_OB_GetWRP1:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:484    .text.FLASH_OB_GetWRP1:00000000 FLASH_OB_GetWRP1
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:500    .text.FLASH_OB_GetWRP1:00000008 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:505    .text.FLASH_OB_GetPCROP:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:510    .text.FLASH_OB_GetPCROP:00000000 FLASH_OB_GetPCROP
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:526    .text.FLASH_OB_GetPCROP:00000008 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:531    .text.FLASH_OB_GetPCROP1:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:536    .text.FLASH_OB_GetPCROP1:00000000 FLASH_OB_GetPCROP1
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:552    .text.FLASH_OB_GetPCROP1:00000008 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:557    .text.FLASH_OB_GetRDP:00000000 $t
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 63


C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:562    .text.FLASH_OB_GetRDP:00000000 FLASH_OB_GetRDP
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:588    .text.FLASH_OB_GetRDP:00000014 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:593    .text.FLASH_OB_GetBOR:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:598    .text.FLASH_OB_GetBOR:00000000 FLASH_OB_GetBOR
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:614    .text.FLASH_OB_GetBOR:0000000c $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:619    .text.FLASH_ITConfig:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:624    .text.FLASH_ITConfig:00000000 FLASH_ITConfig
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:653    .text.FLASH_ITConfig:00000018 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:658    .text.FLASH_GetFlagStatus:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:663    .text.FLASH_GetFlagStatus:00000000 FLASH_GetFlagStatus
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:690    .text.FLASH_GetFlagStatus:00000010 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:695    .text.FLASH_ClearFlag:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:700    .text.FLASH_ClearFlag:00000000 FLASH_ClearFlag
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:715    .text.FLASH_ClearFlag:00000008 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:720    .text.FLASH_GetStatus:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:725    .text.FLASH_GetStatus:00000000 FLASH_GetStatus
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:786    .text.FLASH_GetStatus:0000004c $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:791    .text.FLASH_WaitForLastOperation:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:796    .text.FLASH_WaitForLastOperation:00000000 FLASH_WaitForLastOperation
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:841    .text.FLASH_EraseSector:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:846    .text.FLASH_EraseSector:00000000 FLASH_EraseSector
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:933    .text.FLASH_EraseSector:0000006c $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:938    .text.FLASH_EraseAllSectors:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:943    .text.FLASH_EraseAllSectors:00000000 FLASH_EraseAllSectors
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1018   .text.FLASH_EraseAllSectors:00000058 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1023   .text.FLASH_EraseAllBank1Sectors:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1028   .text.FLASH_EraseAllBank1Sectors:00000000 FLASH_EraseAllBank1Sectors
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1103   .text.FLASH_EraseAllBank1Sectors:00000058 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1108   .text.FLASH_EraseAllBank2Sectors:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1113   .text.FLASH_EraseAllBank2Sectors:00000000 FLASH_EraseAllBank2Sectors
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1188   .text.FLASH_EraseAllBank2Sectors:00000058 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1193   .text.FLASH_ProgramDoubleWord:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1198   .text.FLASH_ProgramDoubleWord:00000000 FLASH_ProgramDoubleWord
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1253   .text.FLASH_ProgramDoubleWord:0000003c $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1258   .text.FLASH_ProgramWord:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1263   .text.FLASH_ProgramWord:00000000 FLASH_ProgramWord
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1315   .text.FLASH_ProgramWord:00000038 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1320   .text.FLASH_ProgramHalfWord:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1325   .text.FLASH_ProgramHalfWord:00000000 FLASH_ProgramHalfWord
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1377   .text.FLASH_ProgramHalfWord:00000038 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1382   .text.FLASH_ProgramByte:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1387   .text.FLASH_ProgramByte:00000000 FLASH_ProgramByte
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1438   .text.FLASH_ProgramByte:00000034 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1443   .text.FLASH_OB_WRPConfig:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1448   .text.FLASH_OB_WRPConfig:00000000 FLASH_OB_WRPConfig
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1496   .text.FLASH_OB_WRPConfig:0000002c $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1501   .text.FLASH_OB_WRP1Config:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1506   .text.FLASH_OB_WRP1Config:00000000 FLASH_OB_WRP1Config
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1554   .text.FLASH_OB_WRP1Config:0000002c $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1559   .text.FLASH_OB_PCROPConfig:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1564   .text.FLASH_OB_PCROPConfig:00000000 FLASH_OB_PCROPConfig
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1612   .text.FLASH_OB_PCROPConfig:0000002c $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1617   .text.FLASH_OB_PCROP1Config:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1622   .text.FLASH_OB_PCROP1Config:00000000 FLASH_OB_PCROP1Config
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1670   .text.FLASH_OB_PCROP1Config:0000002c $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1675   .text.FLASH_OB_RDPConfig:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1680   .text.FLASH_OB_RDPConfig:00000000 FLASH_OB_RDPConfig
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s 			page 64


C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1708   .text.FLASH_OB_RDPConfig:00000014 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1713   .text.FLASH_OB_UserConfig:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1718   .text.FLASH_OB_UserConfig:00000000 FLASH_OB_UserConfig
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1758   .text.FLASH_OB_UserConfig:00000024 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1763   .text.FLASH_OB_Launch:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1768   .text.FLASH_OB_Launch:00000000 FLASH_OB_Launch
C:\Users\ADMINI~1\AppData\Local\Temp\ccU9JFnV.s:1793   .text.FLASH_OB_Launch:00000014 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
