ARM GAS  /tmp/ccfgdlY1.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_flash.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.FLASH_SetLatency,"ax",%progbits
  18              		.align	1
  19              		.global	FLASH_SetLatency
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	FLASH_SetLatency:
  26              	.LFB123:
  27              		.file 1 "FWLIB/src/stm32f4xx_flash.c"
   1:FWLIB/src/stm32f4xx_flash.c **** /**
   2:FWLIB/src/stm32f4xx_flash.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_flash.c ****   * @file    stm32f4xx_flash.c
   4:FWLIB/src/stm32f4xx_flash.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_flash.c ****   * @version V1.8.0
   6:FWLIB/src/stm32f4xx_flash.c ****   * @date    04-November-2016
   7:FWLIB/src/stm32f4xx_flash.c ****   * @brief   This file provides firmware functions to manage the following 
   8:FWLIB/src/stm32f4xx_flash.c ****   *          functionalities of the FLASH peripheral:
   9:FWLIB/src/stm32f4xx_flash.c ****   *            + FLASH Interface configuration
  10:FWLIB/src/stm32f4xx_flash.c ****   *            + FLASH Memory Programming
  11:FWLIB/src/stm32f4xx_flash.c ****   *            + Option Bytes Programming
  12:FWLIB/src/stm32f4xx_flash.c ****   *            + Interrupts and flags management
  13:FWLIB/src/stm32f4xx_flash.c ****   *  
  14:FWLIB/src/stm32f4xx_flash.c ****  @verbatim    
  15:FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================
  16:FWLIB/src/stm32f4xx_flash.c ****                         ##### How to use this driver #####
  17:FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================
  18:FWLIB/src/stm32f4xx_flash.c ****     [..]                             
  19:FWLIB/src/stm32f4xx_flash.c ****       This driver provides functions to configure and program the FLASH memory 
  20:FWLIB/src/stm32f4xx_flash.c ****       of all STM32F4xx devices. These functions are split in 4 groups:
  21:FWLIB/src/stm32f4xx_flash.c ****    
  22:FWLIB/src/stm32f4xx_flash.c ****       (#) FLASH Interface configuration functions: this group includes the
  23:FWLIB/src/stm32f4xx_flash.c ****           management of the following features:
  24:FWLIB/src/stm32f4xx_flash.c ****         (++) Set the latency
  25:FWLIB/src/stm32f4xx_flash.c ****         (++) Enable/Disable the prefetch buffer
  26:FWLIB/src/stm32f4xx_flash.c ****         (++) Enable/Disable the Instruction cache and the Data cache
  27:FWLIB/src/stm32f4xx_flash.c ****         (++) Reset the Instruction cache and the Data cache
  28:FWLIB/src/stm32f4xx_flash.c ****     
  29:FWLIB/src/stm32f4xx_flash.c ****       (#) FLASH Memory Programming functions: this group includes all needed
  30:FWLIB/src/stm32f4xx_flash.c ****           functions to erase and program the main memory:
  31:FWLIB/src/stm32f4xx_flash.c ****         (++) Lock and Unlock the FLASH interface
ARM GAS  /tmp/ccfgdlY1.s 			page 2


  32:FWLIB/src/stm32f4xx_flash.c ****         (++) Erase function: Erase sector, erase all sectors
  33:FWLIB/src/stm32f4xx_flash.c ****         (++) Program functions: byte, half word, word and double word
  34:FWLIB/src/stm32f4xx_flash.c ****     
  35:FWLIB/src/stm32f4xx_flash.c ****       (#) Option Bytes Programming functions: this group includes all needed
  36:FWLIB/src/stm32f4xx_flash.c ****           functions to manage the Option Bytes:
  37:FWLIB/src/stm32f4xx_flash.c ****         (++) Set/Reset the write protection
  38:FWLIB/src/stm32f4xx_flash.c ****         (++) Set the Read protection Level
  39:FWLIB/src/stm32f4xx_flash.c ****         (++) Set the BOR level
  40:FWLIB/src/stm32f4xx_flash.c ****         (++) Program the user Option Bytes
  41:FWLIB/src/stm32f4xx_flash.c ****         (++) Launch the Option Bytes loader
  42:FWLIB/src/stm32f4xx_flash.c ****     
  43:FWLIB/src/stm32f4xx_flash.c ****       (#) Interrupts and flags management functions: this group 
  44:FWLIB/src/stm32f4xx_flash.c ****           includes all needed functions to:
  45:FWLIB/src/stm32f4xx_flash.c ****         (++) Enable/Disable the FLASH interrupt sources
  46:FWLIB/src/stm32f4xx_flash.c ****         (++) Get flags status
  47:FWLIB/src/stm32f4xx_flash.c ****         (++) Clear flags
  48:FWLIB/src/stm32f4xx_flash.c ****         (++) Get FLASH operation status
  49:FWLIB/src/stm32f4xx_flash.c ****         (++) Wait for last FLASH operation   
  50:FWLIB/src/stm32f4xx_flash.c ****  @endverbatim
  51:FWLIB/src/stm32f4xx_flash.c ****   ******************************************************************************
  52:FWLIB/src/stm32f4xx_flash.c ****   * @attention
  53:FWLIB/src/stm32f4xx_flash.c ****   *
  54:FWLIB/src/stm32f4xx_flash.c ****   * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
  55:FWLIB/src/stm32f4xx_flash.c ****   *
  56:FWLIB/src/stm32f4xx_flash.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  57:FWLIB/src/stm32f4xx_flash.c ****   * You may not use this file except in compliance with the License.
  58:FWLIB/src/stm32f4xx_flash.c ****   * You may obtain a copy of the License at:
  59:FWLIB/src/stm32f4xx_flash.c ****   *
  60:FWLIB/src/stm32f4xx_flash.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  61:FWLIB/src/stm32f4xx_flash.c ****   *
  62:FWLIB/src/stm32f4xx_flash.c ****   * Unless required by applicable law or agreed to in writing, software 
  63:FWLIB/src/stm32f4xx_flash.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  64:FWLIB/src/stm32f4xx_flash.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  65:FWLIB/src/stm32f4xx_flash.c ****   * See the License for the specific language governing permissions and
  66:FWLIB/src/stm32f4xx_flash.c ****   * limitations under the License.
  67:FWLIB/src/stm32f4xx_flash.c ****   *
  68:FWLIB/src/stm32f4xx_flash.c ****   ******************************************************************************
  69:FWLIB/src/stm32f4xx_flash.c ****   */
  70:FWLIB/src/stm32f4xx_flash.c **** 
  71:FWLIB/src/stm32f4xx_flash.c **** /* Includes ------------------------------------------------------------------*/
  72:FWLIB/src/stm32f4xx_flash.c **** #include "stm32f4xx_flash.h"
  73:FWLIB/src/stm32f4xx_flash.c **** 
  74:FWLIB/src/stm32f4xx_flash.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  75:FWLIB/src/stm32f4xx_flash.c ****   * @{
  76:FWLIB/src/stm32f4xx_flash.c ****   */
  77:FWLIB/src/stm32f4xx_flash.c **** 
  78:FWLIB/src/stm32f4xx_flash.c **** /** @defgroup FLASH 
  79:FWLIB/src/stm32f4xx_flash.c ****   * @brief FLASH driver modules
  80:FWLIB/src/stm32f4xx_flash.c ****   * @{
  81:FWLIB/src/stm32f4xx_flash.c ****   */ 
  82:FWLIB/src/stm32f4xx_flash.c **** 
  83:FWLIB/src/stm32f4xx_flash.c **** /* Private typedef -----------------------------------------------------------*/
  84:FWLIB/src/stm32f4xx_flash.c **** /* Private define ------------------------------------------------------------*/ 
  85:FWLIB/src/stm32f4xx_flash.c **** #define SECTOR_MASK               ((uint32_t)0xFFFFFF07)
  86:FWLIB/src/stm32f4xx_flash.c **** 
  87:FWLIB/src/stm32f4xx_flash.c **** /* Private macro -------------------------------------------------------------*/
  88:FWLIB/src/stm32f4xx_flash.c **** /* Private variables ---------------------------------------------------------*/
ARM GAS  /tmp/ccfgdlY1.s 			page 3


  89:FWLIB/src/stm32f4xx_flash.c **** /* Private function prototypes -----------------------------------------------*/
  90:FWLIB/src/stm32f4xx_flash.c **** /* Private functions ---------------------------------------------------------*/
  91:FWLIB/src/stm32f4xx_flash.c **** 
  92:FWLIB/src/stm32f4xx_flash.c **** /** @defgroup FLASH_Private_Functions
  93:FWLIB/src/stm32f4xx_flash.c ****   * @{
  94:FWLIB/src/stm32f4xx_flash.c ****   */ 
  95:FWLIB/src/stm32f4xx_flash.c **** 
  96:FWLIB/src/stm32f4xx_flash.c **** /** @defgroup FLASH_Group1 FLASH Interface configuration functions
  97:FWLIB/src/stm32f4xx_flash.c ****   *  @brief   FLASH Interface configuration functions 
  98:FWLIB/src/stm32f4xx_flash.c ****  *
  99:FWLIB/src/stm32f4xx_flash.c **** 
 100:FWLIB/src/stm32f4xx_flash.c **** @verbatim   
 101:FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================
 102:FWLIB/src/stm32f4xx_flash.c ****               ##### FLASH Interface configuration functions #####
 103:FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================
 104:FWLIB/src/stm32f4xx_flash.c ****     [..]
 105:FWLIB/src/stm32f4xx_flash.c ****       This group includes the following functions:
 106:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_SetLatency(uint32_t FLASH_Latency)
 107:FWLIB/src/stm32f4xx_flash.c ****           To correctly read data from FLASH memory, the number of wait states (LATENCY) 
 108:FWLIB/src/stm32f4xx_flash.c ****           must be correctly programmed according to the frequency of the CPU clock 
 109:FWLIB/src/stm32f4xx_flash.c ****           (HCLK) and the supply voltage of the device.
 110:FWLIB/src/stm32f4xx_flash.c ****     [..]      
 111:FWLIB/src/stm32f4xx_flash.c ****       For STM32F405xx/07xx and STM32F415xx/17xx devices
 112:FWLIB/src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 113:FWLIB/src/stm32f4xx_flash.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 114:FWLIB/src/stm32f4xx_flash.c ****  |               |---------------------------------------------------------------------|
 115:FWLIB/src/stm32f4xx_flash.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 116:FWLIB/src/stm32f4xx_flash.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 117:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 118:FWLIB/src/stm32f4xx_flash.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
 119:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 120:FWLIB/src/stm32f4xx_flash.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
 121:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 122:FWLIB/src/stm32f4xx_flash.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
 123:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 124:FWLIB/src/stm32f4xx_flash.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |66 < HCLK <= 88  |60 < HCLK <= 80  |
 125:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 126:FWLIB/src/stm32f4xx_flash.c ****  |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|88 < HCLK <= 110 |80 < HCLK <= 100 |
 127:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 128:FWLIB/src/stm32f4xx_flash.c ****  |5WS(6CPU cycle)|150< HCLK <= 168|120< HCLK <= 144|110 < HCLK <= 132|100 < HCLK <= 120|
 129:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 130:FWLIB/src/stm32f4xx_flash.c ****  |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|132 < HCLK <= 154|120 < HCLK <= 140|
 131:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 132:FWLIB/src/stm32f4xx_flash.c ****  |7WS(8CPU cycle)|      NA        |      NA        |154 < HCLK <= 168|140 < HCLK <= 160|
 133:FWLIB/src/stm32f4xx_flash.c ****  +---------------|----------------|----------------|-----------------|-----------------+
 134:FWLIB/src/stm32f4xx_flash.c **** 
 135:FWLIB/src/stm32f4xx_flash.c ****     [..]      
 136:FWLIB/src/stm32f4xx_flash.c ****       For STM32F42xxx/43xxx devices
 137:FWLIB/src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 138:FWLIB/src/stm32f4xx_flash.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 139:FWLIB/src/stm32f4xx_flash.c ****  |               |---------------------------------------------------------------------|
 140:FWLIB/src/stm32f4xx_flash.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 141:FWLIB/src/stm32f4xx_flash.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 142:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 143:FWLIB/src/stm32f4xx_flash.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
 144:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 145:FWLIB/src/stm32f4xx_flash.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
ARM GAS  /tmp/ccfgdlY1.s 			page 4


 146:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 147:FWLIB/src/stm32f4xx_flash.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
 148:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 149:FWLIB/src/stm32f4xx_flash.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |66 < HCLK <= 88  |60 < HCLK <= 80  |
 150:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 151:FWLIB/src/stm32f4xx_flash.c ****  |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|88 < HCLK <= 110 |80 < HCLK <= 100 |
 152:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 153:FWLIB/src/stm32f4xx_flash.c ****  |5WS(6CPU cycle)|120< HCLK <= 180|120< HCLK <= 144|110 < HCLK <= 132|100 < HCLK <= 120|
 154:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 155:FWLIB/src/stm32f4xx_flash.c ****  |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|132 < HCLK <= 154|120 < HCLK <= 140|
 156:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 157:FWLIB/src/stm32f4xx_flash.c ****  |7WS(8CPU cycle)|      NA        |168< HCLK <= 180|154 < HCLK <= 176|140 < HCLK <= 160|
 158:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 159:FWLIB/src/stm32f4xx_flash.c ****  |8WS(9CPU cycle)|      NA        |      NA        |176 < HCLK <= 180|160 < HCLK <= 168|
 160:FWLIB/src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 161:FWLIB/src/stm32f4xx_flash.c ****    
 162:FWLIB/src/stm32f4xx_flash.c ****     [..]
 163:FWLIB/src/stm32f4xx_flash.c ****     For STM32F401x devices
 164:FWLIB/src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 165:FWLIB/src/stm32f4xx_flash.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 166:FWLIB/src/stm32f4xx_flash.c ****  |               |---------------------------------------------------------------------|
 167:FWLIB/src/stm32f4xx_flash.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 168:FWLIB/src/stm32f4xx_flash.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 169:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 170:FWLIB/src/stm32f4xx_flash.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
 171:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 172:FWLIB/src/stm32f4xx_flash.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
 173:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 174:FWLIB/src/stm32f4xx_flash.c ****  |2WS(3CPU cycle)|60 < HCLK <= 84 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
 175:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 176:FWLIB/src/stm32f4xx_flash.c ****  |3WS(4CPU cycle)|      NA        |72 < HCLK <= 84 |66 < HCLK <= 84  |60 < HCLK <= 80  |
 177:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 178:FWLIB/src/stm32f4xx_flash.c ****  |4WS(5CPU cycle)|      NA        |      NA        |      NA         |80 < HCLK <= 84  |
 179:FWLIB/src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 180:FWLIB/src/stm32f4xx_flash.c **** 
 181:FWLIB/src/stm32f4xx_flash.c ****     [..]
 182:FWLIB/src/stm32f4xx_flash.c ****     For STM32F410xx/STM32F411xE devices
 183:FWLIB/src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 184:FWLIB/src/stm32f4xx_flash.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 185:FWLIB/src/stm32f4xx_flash.c ****  |               |---------------------------------------------------------------------|
 186:FWLIB/src/stm32f4xx_flash.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 187:FWLIB/src/stm32f4xx_flash.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 188:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 189:FWLIB/src/stm32f4xx_flash.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 18   |0 < HCLK <= 16   |
 190:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 191:FWLIB/src/stm32f4xx_flash.c ****  |1WS(2CPU cycle)|30 < HCLK <= 64 |24 < HCLK <= 48 |18 < HCLK <= 36  |16 < HCLK <= 32  |
 192:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 193:FWLIB/src/stm32f4xx_flash.c ****  |2WS(3CPU cycle)|64 < HCLK <= 90 |48 < HCLK <= 72 |36 < HCLK <= 54  |32 < HCLK <= 48  |
 194:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 195:FWLIB/src/stm32f4xx_flash.c ****  |3WS(4CPU cycle)|90 < HCLK <= 100|72 < HCLK <= 96 |54 < HCLK <= 72  |48 < HCLK <= 64  |
 196:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 197:FWLIB/src/stm32f4xx_flash.c ****  |4WS(5CPU cycle)|      NA        |96 < HCLK <= 100|72 < HCLK <= 90  |64 < HCLK <= 80  |
 198:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 199:FWLIB/src/stm32f4xx_flash.c ****  |5WS(6CPU cycle)|      NA        |       NA       |90 < HCLK <= 100 |80 < HCLK <= 96  |
 200:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 201:FWLIB/src/stm32f4xx_flash.c ****  |6WS(7CPU cycle)|      NA        |       NA       |        NA       |96 < HCLK <= 100 |
 202:FWLIB/src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
ARM GAS  /tmp/ccfgdlY1.s 			page 5


 203:FWLIB/src/stm32f4xx_flash.c ****  
 204:FWLIB/src/stm32f4xx_flash.c ****  [..]
 205:FWLIB/src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------------------
 206:FWLIB/src/stm32f4xx_flash.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   | voltage ra
 207:FWLIB/src/stm32f4xx_flash.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   | with Exter
 208:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|-----------
 209:FWLIB/src/stm32f4xx_flash.c ****  |Max Parallelism|      x32       |               x16                |       x8        |          x
 210:FWLIB/src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|-----------
 211:FWLIB/src/stm32f4xx_flash.c ****  |PSIZE[1:0]     |      10        |               01                 |       00        |           
 212:FWLIB/src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------------------
 213:FWLIB/src/stm32f4xx_flash.c **** 
 214:FWLIB/src/stm32f4xx_flash.c ****       -@- On STM32F405xx/407xx and STM32F415xx/417xx devices: 
 215:FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS = '0' Scale 2 mode, the maximum value of fHCLK = 144MHz. 
 216:FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS = '1' Scale 1 mode, the maximum value of fHCLK = 168MHz. 
 217:FWLIB/src/stm32f4xx_flash.c ****           [..] 
 218:FWLIB/src/stm32f4xx_flash.c ****           On STM32F42xxx/43xxx devices:
 219:FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x01' Scale 3 mode, the maximum value of fHCLK is 120MHz.
 220:FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x10' Scale 2 mode, the maximum value of fHCLK is 144MHz if OverDr
 221:FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x11' Scale 1 mode, the maximum value of fHCLK is 168MHz if OverDr
 222:FWLIB/src/stm32f4xx_flash.c ****           [..]
 223:FWLIB/src/stm32f4xx_flash.c ****           On STM32F401x devices:
 224:FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x01' Scale 3 mode, the maximum value of fHCLK is 60MHz.
 225:FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x10' Scale 2 mode, the maximum value of fHCLK is 84MHz.
 226:FWLIB/src/stm32f4xx_flash.c ****           [..]  
 227:FWLIB/src/stm32f4xx_flash.c ****           On STM32F410xx/STM32F411xE devices:
 228:FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x01' Scale 3 mode, the maximum value of fHCLK is 64MHz.
 229:FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x10' Scale 2 mode, the maximum value of fHCLK is 84MHz.
 230:FWLIB/src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x11' Scale 1 mode, the maximum value of fHCLK is 100MHz.
 231:FWLIB/src/stm32f4xx_flash.c **** 
 232:FWLIB/src/stm32f4xx_flash.c ****         For more details please refer product DataSheet 
 233:FWLIB/src/stm32f4xx_flash.c ****            You can use PWR_MainRegulatorModeConfig() function to control VOS bits.
 234:FWLIB/src/stm32f4xx_flash.c **** 
 235:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_PrefetchBufferCmd(FunctionalState NewState)
 236:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_InstructionCacheCmd(FunctionalState NewState)
 237:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_DataCacheCmd(FunctionalState NewState)
 238:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_InstructionCacheReset(void)
 239:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_DataCacheReset(void)
 240:FWLIB/src/stm32f4xx_flash.c ****       
 241:FWLIB/src/stm32f4xx_flash.c ****     [..]   
 242:FWLIB/src/stm32f4xx_flash.c ****       The unlock sequence is not needed for these functions.
 243:FWLIB/src/stm32f4xx_flash.c ****  
 244:FWLIB/src/stm32f4xx_flash.c **** @endverbatim
 245:FWLIB/src/stm32f4xx_flash.c ****   * @{
 246:FWLIB/src/stm32f4xx_flash.c ****   */
 247:FWLIB/src/stm32f4xx_flash.c ****  
 248:FWLIB/src/stm32f4xx_flash.c **** /**
 249:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Sets the code latency value.  
 250:FWLIB/src/stm32f4xx_flash.c ****   * @param  FLASH_Latency: specifies the FLASH Latency value.
 251:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
 252:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_0: FLASH Zero Latency cycle
 253:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_1: FLASH One Latency cycle
 254:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_2: FLASH Two Latency cycles
 255:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_3: FLASH Three Latency cycles
 256:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_4: FLASH Four Latency cycles 
 257:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_5: FLASH Five Latency cycles 
 258:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_6: FLASH Six Latency cycles
 259:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_7: FLASH Seven Latency cycles 
ARM GAS  /tmp/ccfgdlY1.s 			page 6


 260:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_8: FLASH Eight Latency cycles
 261:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_9: FLASH Nine Latency cycles
 262:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_10: FLASH Teen Latency cycles 
 263:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_11: FLASH Eleven Latency cycles 
 264:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_12: FLASH Twelve Latency cycles
 265:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_13: FLASH Thirteen Latency cycles
 266:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_14: FLASH Fourteen Latency cycles
 267:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_15: FLASH Fifteen Latency cycles 
 268:FWLIB/src/stm32f4xx_flash.c ****   *              
 269:FWLIB/src/stm32f4xx_flash.c ****   * @note For STM32F405xx/407xx, STM32F415xx/417xx, STM32F401xx/411xE/STM32F412xG and STM32F413_423
 270:FWLIB/src/stm32f4xx_flash.c ****   *       this parameter can be a value between FLASH_Latency_0 and FLASH_Latency_7.
 271:FWLIB/src/stm32f4xx_flash.c ****   *
 272:FWLIB/src/stm32f4xx_flash.c ****   * @note For STM32F42xxx/43xxx devices this parameter can be a value between 
 273:FWLIB/src/stm32f4xx_flash.c ****   *       FLASH_Latency_0 and FLASH_Latency_15. 
 274:FWLIB/src/stm32f4xx_flash.c ****   *         
 275:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 276:FWLIB/src/stm32f4xx_flash.c ****   */
 277:FWLIB/src/stm32f4xx_flash.c **** void FLASH_SetLatency(uint32_t FLASH_Latency)
 278:FWLIB/src/stm32f4xx_flash.c **** {
  28              		.loc 1 278 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
 279:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
 280:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_LATENCY(FLASH_Latency));
 281:FWLIB/src/stm32f4xx_flash.c ****   
 282:FWLIB/src/stm32f4xx_flash.c ****   /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
 283:FWLIB/src/stm32f4xx_flash.c ****   *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
  34              		.loc 1 283 0
  35 0000 C0B2     		uxtb	r0, r0
  36              	.LVL1:
  37 0002 014B     		ldr	r3, .L2
  38 0004 1870     		strb	r0, [r3]
  39 0006 7047     		bx	lr
  40              	.L3:
  41              		.align	2
  42              	.L2:
  43 0008 003C0240 		.word	1073888256
  44              		.cfi_endproc
  45              	.LFE123:
  47              		.section	.text.FLASH_PrefetchBufferCmd,"ax",%progbits
  48              		.align	1
  49              		.global	FLASH_PrefetchBufferCmd
  50              		.syntax unified
  51              		.thumb
  52              		.thumb_func
  53              		.fpu fpv4-sp-d16
  55              	FLASH_PrefetchBufferCmd:
  56              	.LFB124:
 284:FWLIB/src/stm32f4xx_flash.c **** }
 285:FWLIB/src/stm32f4xx_flash.c **** 
 286:FWLIB/src/stm32f4xx_flash.c **** /**
 287:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Enables or disables the Prefetch Buffer.
 288:FWLIB/src/stm32f4xx_flash.c ****   * @param  NewState: new state of the Prefetch Buffer.
 289:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter  can be: ENABLE or DISABLE.
ARM GAS  /tmp/ccfgdlY1.s 			page 7


 290:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 291:FWLIB/src/stm32f4xx_flash.c ****   */
 292:FWLIB/src/stm32f4xx_flash.c **** void FLASH_PrefetchBufferCmd(FunctionalState NewState)
 293:FWLIB/src/stm32f4xx_flash.c **** {
  57              		.loc 1 293 0
  58              		.cfi_startproc
  59              		@ args = 0, pretend = 0, frame = 0
  60              		@ frame_needed = 0, uses_anonymous_args = 0
  61              		@ link register save eliminated.
  62              	.LVL2:
 294:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
 295:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 296:FWLIB/src/stm32f4xx_flash.c ****   
 297:FWLIB/src/stm32f4xx_flash.c ****   /* Enable or disable the Prefetch Buffer */
 298:FWLIB/src/stm32f4xx_flash.c ****   if(NewState != DISABLE)
  63              		.loc 1 298 0
  64 0000 28B9     		cbnz	r0, .L7
 299:FWLIB/src/stm32f4xx_flash.c ****   {
 300:FWLIB/src/stm32f4xx_flash.c ****     FLASH->ACR |= FLASH_ACR_PRFTEN;
 301:FWLIB/src/stm32f4xx_flash.c ****   }
 302:FWLIB/src/stm32f4xx_flash.c ****   else
 303:FWLIB/src/stm32f4xx_flash.c ****   {
 304:FWLIB/src/stm32f4xx_flash.c ****     FLASH->ACR &= (~FLASH_ACR_PRFTEN);
  65              		.loc 1 304 0
  66 0002 064A     		ldr	r2, .L8
  67 0004 1368     		ldr	r3, [r2]
  68 0006 23F48073 		bic	r3, r3, #256
  69 000a 1360     		str	r3, [r2]
  70 000c 7047     		bx	lr
  71              	.L7:
 300:FWLIB/src/stm32f4xx_flash.c ****   }
  72              		.loc 1 300 0
  73 000e 034A     		ldr	r2, .L8
  74 0010 1368     		ldr	r3, [r2]
  75 0012 43F48073 		orr	r3, r3, #256
  76 0016 1360     		str	r3, [r2]
  77 0018 7047     		bx	lr
  78              	.L9:
  79 001a 00BF     		.align	2
  80              	.L8:
  81 001c 003C0240 		.word	1073888256
  82              		.cfi_endproc
  83              	.LFE124:
  85              		.section	.text.FLASH_InstructionCacheCmd,"ax",%progbits
  86              		.align	1
  87              		.global	FLASH_InstructionCacheCmd
  88              		.syntax unified
  89              		.thumb
  90              		.thumb_func
  91              		.fpu fpv4-sp-d16
  93              	FLASH_InstructionCacheCmd:
  94              	.LFB125:
 305:FWLIB/src/stm32f4xx_flash.c ****   }
 306:FWLIB/src/stm32f4xx_flash.c **** }
 307:FWLIB/src/stm32f4xx_flash.c **** 
 308:FWLIB/src/stm32f4xx_flash.c **** /**
 309:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Enables or disables the Instruction Cache feature.
ARM GAS  /tmp/ccfgdlY1.s 			page 8


 310:FWLIB/src/stm32f4xx_flash.c ****   * @param  NewState: new state of the Instruction Cache.
 311:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter  can be: ENABLE or DISABLE.
 312:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 313:FWLIB/src/stm32f4xx_flash.c ****   */
 314:FWLIB/src/stm32f4xx_flash.c **** void FLASH_InstructionCacheCmd(FunctionalState NewState)
 315:FWLIB/src/stm32f4xx_flash.c **** {
  95              		.loc 1 315 0
  96              		.cfi_startproc
  97              		@ args = 0, pretend = 0, frame = 0
  98              		@ frame_needed = 0, uses_anonymous_args = 0
  99              		@ link register save eliminated.
 100              	.LVL3:
 316:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
 317:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 318:FWLIB/src/stm32f4xx_flash.c ****   
 319:FWLIB/src/stm32f4xx_flash.c ****   if(NewState != DISABLE)
 101              		.loc 1 319 0
 102 0000 28B9     		cbnz	r0, .L13
 320:FWLIB/src/stm32f4xx_flash.c ****   {
 321:FWLIB/src/stm32f4xx_flash.c ****     FLASH->ACR |= FLASH_ACR_ICEN;
 322:FWLIB/src/stm32f4xx_flash.c ****   }
 323:FWLIB/src/stm32f4xx_flash.c ****   else
 324:FWLIB/src/stm32f4xx_flash.c ****   {
 325:FWLIB/src/stm32f4xx_flash.c ****     FLASH->ACR &= (~FLASH_ACR_ICEN);
 103              		.loc 1 325 0
 104 0002 064A     		ldr	r2, .L14
 105 0004 1368     		ldr	r3, [r2]
 106 0006 23F40073 		bic	r3, r3, #512
 107 000a 1360     		str	r3, [r2]
 108 000c 7047     		bx	lr
 109              	.L13:
 321:FWLIB/src/stm32f4xx_flash.c ****   }
 110              		.loc 1 321 0
 111 000e 034A     		ldr	r2, .L14
 112 0010 1368     		ldr	r3, [r2]
 113 0012 43F40073 		orr	r3, r3, #512
 114 0016 1360     		str	r3, [r2]
 115 0018 7047     		bx	lr
 116              	.L15:
 117 001a 00BF     		.align	2
 118              	.L14:
 119 001c 003C0240 		.word	1073888256
 120              		.cfi_endproc
 121              	.LFE125:
 123              		.section	.text.FLASH_DataCacheCmd,"ax",%progbits
 124              		.align	1
 125              		.global	FLASH_DataCacheCmd
 126              		.syntax unified
 127              		.thumb
 128              		.thumb_func
 129              		.fpu fpv4-sp-d16
 131              	FLASH_DataCacheCmd:
 132              	.LFB126:
 326:FWLIB/src/stm32f4xx_flash.c ****   }
 327:FWLIB/src/stm32f4xx_flash.c **** }
 328:FWLIB/src/stm32f4xx_flash.c **** 
 329:FWLIB/src/stm32f4xx_flash.c **** /**
ARM GAS  /tmp/ccfgdlY1.s 			page 9


 330:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Enables or disables the Data Cache feature.
 331:FWLIB/src/stm32f4xx_flash.c ****   * @param  NewState: new state of the Data Cache.
 332:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter  can be: ENABLE or DISABLE.
 333:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 334:FWLIB/src/stm32f4xx_flash.c ****   */
 335:FWLIB/src/stm32f4xx_flash.c **** void FLASH_DataCacheCmd(FunctionalState NewState)
 336:FWLIB/src/stm32f4xx_flash.c **** {
 133              		.loc 1 336 0
 134              		.cfi_startproc
 135              		@ args = 0, pretend = 0, frame = 0
 136              		@ frame_needed = 0, uses_anonymous_args = 0
 137              		@ link register save eliminated.
 138              	.LVL4:
 337:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
 338:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 339:FWLIB/src/stm32f4xx_flash.c ****   
 340:FWLIB/src/stm32f4xx_flash.c ****   if(NewState != DISABLE)
 139              		.loc 1 340 0
 140 0000 28B9     		cbnz	r0, .L19
 341:FWLIB/src/stm32f4xx_flash.c ****   {
 342:FWLIB/src/stm32f4xx_flash.c ****     FLASH->ACR |= FLASH_ACR_DCEN;
 343:FWLIB/src/stm32f4xx_flash.c ****   }
 344:FWLIB/src/stm32f4xx_flash.c ****   else
 345:FWLIB/src/stm32f4xx_flash.c ****   {
 346:FWLIB/src/stm32f4xx_flash.c ****     FLASH->ACR &= (~FLASH_ACR_DCEN);
 141              		.loc 1 346 0
 142 0002 064A     		ldr	r2, .L20
 143 0004 1368     		ldr	r3, [r2]
 144 0006 23F48063 		bic	r3, r3, #1024
 145 000a 1360     		str	r3, [r2]
 146 000c 7047     		bx	lr
 147              	.L19:
 342:FWLIB/src/stm32f4xx_flash.c ****   }
 148              		.loc 1 342 0
 149 000e 034A     		ldr	r2, .L20
 150 0010 1368     		ldr	r3, [r2]
 151 0012 43F48063 		orr	r3, r3, #1024
 152 0016 1360     		str	r3, [r2]
 153 0018 7047     		bx	lr
 154              	.L21:
 155 001a 00BF     		.align	2
 156              	.L20:
 157 001c 003C0240 		.word	1073888256
 158              		.cfi_endproc
 159              	.LFE126:
 161              		.section	.text.FLASH_InstructionCacheReset,"ax",%progbits
 162              		.align	1
 163              		.global	FLASH_InstructionCacheReset
 164              		.syntax unified
 165              		.thumb
 166              		.thumb_func
 167              		.fpu fpv4-sp-d16
 169              	FLASH_InstructionCacheReset:
 170              	.LFB127:
 347:FWLIB/src/stm32f4xx_flash.c ****   }
 348:FWLIB/src/stm32f4xx_flash.c **** }
 349:FWLIB/src/stm32f4xx_flash.c **** 
ARM GAS  /tmp/ccfgdlY1.s 			page 10


 350:FWLIB/src/stm32f4xx_flash.c **** /**
 351:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Resets the Instruction Cache.
 352:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function must be used only when the Instruction Cache is disabled.  
 353:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
 354:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 355:FWLIB/src/stm32f4xx_flash.c ****   */
 356:FWLIB/src/stm32f4xx_flash.c **** void FLASH_InstructionCacheReset(void)
 357:FWLIB/src/stm32f4xx_flash.c **** {
 171              		.loc 1 357 0
 172              		.cfi_startproc
 173              		@ args = 0, pretend = 0, frame = 0
 174              		@ frame_needed = 0, uses_anonymous_args = 0
 175              		@ link register save eliminated.
 358:FWLIB/src/stm32f4xx_flash.c ****   FLASH->ACR |= FLASH_ACR_ICRST;
 176              		.loc 1 358 0
 177 0000 024A     		ldr	r2, .L23
 178 0002 1368     		ldr	r3, [r2]
 179 0004 43F40063 		orr	r3, r3, #2048
 180 0008 1360     		str	r3, [r2]
 181 000a 7047     		bx	lr
 182              	.L24:
 183              		.align	2
 184              	.L23:
 185 000c 003C0240 		.word	1073888256
 186              		.cfi_endproc
 187              	.LFE127:
 189              		.section	.text.FLASH_DataCacheReset,"ax",%progbits
 190              		.align	1
 191              		.global	FLASH_DataCacheReset
 192              		.syntax unified
 193              		.thumb
 194              		.thumb_func
 195              		.fpu fpv4-sp-d16
 197              	FLASH_DataCacheReset:
 198              	.LFB128:
 359:FWLIB/src/stm32f4xx_flash.c **** }
 360:FWLIB/src/stm32f4xx_flash.c **** 
 361:FWLIB/src/stm32f4xx_flash.c **** /**
 362:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Resets the Data Cache.
 363:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function must be used only when the Data Cache is disabled.  
 364:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
 365:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 366:FWLIB/src/stm32f4xx_flash.c ****   */
 367:FWLIB/src/stm32f4xx_flash.c **** void FLASH_DataCacheReset(void)
 368:FWLIB/src/stm32f4xx_flash.c **** {
 199              		.loc 1 368 0
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 0
 202              		@ frame_needed = 0, uses_anonymous_args = 0
 203              		@ link register save eliminated.
 369:FWLIB/src/stm32f4xx_flash.c ****   FLASH->ACR |= FLASH_ACR_DCRST;
 204              		.loc 1 369 0
 205 0000 024A     		ldr	r2, .L26
 206 0002 1368     		ldr	r3, [r2]
 207 0004 43F48053 		orr	r3, r3, #4096
 208 0008 1360     		str	r3, [r2]
 209 000a 7047     		bx	lr
ARM GAS  /tmp/ccfgdlY1.s 			page 11


 210              	.L27:
 211              		.align	2
 212              	.L26:
 213 000c 003C0240 		.word	1073888256
 214              		.cfi_endproc
 215              	.LFE128:
 217              		.section	.text.FLASH_Unlock,"ax",%progbits
 218              		.align	1
 219              		.global	FLASH_Unlock
 220              		.syntax unified
 221              		.thumb
 222              		.thumb_func
 223              		.fpu fpv4-sp-d16
 225              	FLASH_Unlock:
 226              	.LFB129:
 370:FWLIB/src/stm32f4xx_flash.c **** }
 371:FWLIB/src/stm32f4xx_flash.c **** 
 372:FWLIB/src/stm32f4xx_flash.c **** /**
 373:FWLIB/src/stm32f4xx_flash.c ****   * @}
 374:FWLIB/src/stm32f4xx_flash.c ****   */
 375:FWLIB/src/stm32f4xx_flash.c **** 
 376:FWLIB/src/stm32f4xx_flash.c **** /** @defgroup FLASH_Group2 FLASH Memory Programming functions
 377:FWLIB/src/stm32f4xx_flash.c ****  *  @brief   FLASH Memory Programming functions
 378:FWLIB/src/stm32f4xx_flash.c ****  *
 379:FWLIB/src/stm32f4xx_flash.c **** @verbatim   
 380:FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================
 381:FWLIB/src/stm32f4xx_flash.c ****                 ##### FLASH Memory Programming functions #####
 382:FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================   
 383:FWLIB/src/stm32f4xx_flash.c ****     [..]
 384:FWLIB/src/stm32f4xx_flash.c ****       This group includes the following functions:
 385:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_Unlock(void)
 386:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_Lock(void)
 387:FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
 388:FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)       
 389:FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
 390:FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
 391:FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
 392:FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
 393:FWLIB/src/stm32f4xx_flash.c ****           The following functions can be used only for STM32F42xxx/43xxx devices. 
 394:FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_EraseAllBank1Sectors(uint8_t VoltageRange)
 395:FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_EraseAllBank2Sectors(uint8_t VoltageRange)    
 396:FWLIB/src/stm32f4xx_flash.c ****     [..]   
 397:FWLIB/src/stm32f4xx_flash.c ****       Any operation of erase or program should follow these steps:
 398:FWLIB/src/stm32f4xx_flash.c ****       (#) Call the FLASH_Unlock() function to enable the FLASH control register access
 399:FWLIB/src/stm32f4xx_flash.c **** 
 400:FWLIB/src/stm32f4xx_flash.c ****       (#) Call the desired function to erase sector(s) or program data
 401:FWLIB/src/stm32f4xx_flash.c **** 
 402:FWLIB/src/stm32f4xx_flash.c ****       (#) Call the FLASH_Lock() function to disable the FLASH control register access
 403:FWLIB/src/stm32f4xx_flash.c ****           (recommended to protect the FLASH memory against possible unwanted operation)
 404:FWLIB/src/stm32f4xx_flash.c ****     
 405:FWLIB/src/stm32f4xx_flash.c **** @endverbatim
 406:FWLIB/src/stm32f4xx_flash.c ****   * @{
 407:FWLIB/src/stm32f4xx_flash.c ****   */
 408:FWLIB/src/stm32f4xx_flash.c **** 
 409:FWLIB/src/stm32f4xx_flash.c **** /**
 410:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Unlocks the FLASH control register access
 411:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
ARM GAS  /tmp/ccfgdlY1.s 			page 12


 412:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 413:FWLIB/src/stm32f4xx_flash.c ****   */
 414:FWLIB/src/stm32f4xx_flash.c **** void FLASH_Unlock(void)
 415:FWLIB/src/stm32f4xx_flash.c **** {
 227              		.loc 1 415 0
 228              		.cfi_startproc
 229              		@ args = 0, pretend = 0, frame = 0
 230              		@ frame_needed = 0, uses_anonymous_args = 0
 231              		@ link register save eliminated.
 416:FWLIB/src/stm32f4xx_flash.c ****   if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 232              		.loc 1 416 0
 233 0000 054B     		ldr	r3, .L31
 234 0002 1B69     		ldr	r3, [r3, #16]
 235 0004 002B     		cmp	r3, #0
 236 0006 00DB     		blt	.L30
 237              	.L28:
 238 0008 7047     		bx	lr
 239              	.L30:
 417:FWLIB/src/stm32f4xx_flash.c ****   {
 418:FWLIB/src/stm32f4xx_flash.c ****     /* Authorize the FLASH Registers access */
 419:FWLIB/src/stm32f4xx_flash.c ****     FLASH->KEYR = FLASH_KEY1;
 240              		.loc 1 419 0
 241 000a 034B     		ldr	r3, .L31
 242 000c 034A     		ldr	r2, .L31+4
 243 000e 5A60     		str	r2, [r3, #4]
 420:FWLIB/src/stm32f4xx_flash.c ****     FLASH->KEYR = FLASH_KEY2;
 244              		.loc 1 420 0
 245 0010 02F18832 		add	r2, r2, #-2004318072
 246 0014 5A60     		str	r2, [r3, #4]
 421:FWLIB/src/stm32f4xx_flash.c ****   }  
 422:FWLIB/src/stm32f4xx_flash.c **** }
 247              		.loc 1 422 0
 248 0016 F7E7     		b	.L28
 249              	.L32:
 250              		.align	2
 251              	.L31:
 252 0018 003C0240 		.word	1073888256
 253 001c 23016745 		.word	1164378403
 254              		.cfi_endproc
 255              	.LFE129:
 257              		.section	.text.FLASH_Lock,"ax",%progbits
 258              		.align	1
 259              		.global	FLASH_Lock
 260              		.syntax unified
 261              		.thumb
 262              		.thumb_func
 263              		.fpu fpv4-sp-d16
 265              	FLASH_Lock:
 266              	.LFB130:
 423:FWLIB/src/stm32f4xx_flash.c **** 
 424:FWLIB/src/stm32f4xx_flash.c **** /**
 425:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Locks the FLASH control register access
 426:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
 427:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 428:FWLIB/src/stm32f4xx_flash.c ****   */
 429:FWLIB/src/stm32f4xx_flash.c **** void FLASH_Lock(void)
 430:FWLIB/src/stm32f4xx_flash.c **** {
ARM GAS  /tmp/ccfgdlY1.s 			page 13


 267              		.loc 1 430 0
 268              		.cfi_startproc
 269              		@ args = 0, pretend = 0, frame = 0
 270              		@ frame_needed = 0, uses_anonymous_args = 0
 271              		@ link register save eliminated.
 431:FWLIB/src/stm32f4xx_flash.c ****   /* Set the LOCK Bit to lock the FLASH Registers access */
 432:FWLIB/src/stm32f4xx_flash.c ****   FLASH->CR |= FLASH_CR_LOCK;
 272              		.loc 1 432 0
 273 0000 024A     		ldr	r2, .L34
 274 0002 1369     		ldr	r3, [r2, #16]
 275 0004 43F00043 		orr	r3, r3, #-2147483648
 276 0008 1361     		str	r3, [r2, #16]
 277 000a 7047     		bx	lr
 278              	.L35:
 279              		.align	2
 280              	.L34:
 281 000c 003C0240 		.word	1073888256
 282              		.cfi_endproc
 283              	.LFE130:
 285              		.section	.text.FLASH_OB_Unlock,"ax",%progbits
 286              		.align	1
 287              		.global	FLASH_OB_Unlock
 288              		.syntax unified
 289              		.thumb
 290              		.thumb_func
 291              		.fpu fpv4-sp-d16
 293              	FLASH_OB_Unlock:
 294              	.LFB139:
 433:FWLIB/src/stm32f4xx_flash.c **** }
 434:FWLIB/src/stm32f4xx_flash.c **** 
 435:FWLIB/src/stm32f4xx_flash.c **** /**
 436:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Erases a specified FLASH Sector.
 437:FWLIB/src/stm32f4xx_flash.c ****   *
 438:FWLIB/src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 439:FWLIB/src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 440:FWLIB/src/stm32f4xx_flash.c ****   *
 441:FWLIB/src/stm32f4xx_flash.c ****   * @param  FLASH_Sector: The Sector number to be erased.
 442:FWLIB/src/stm32f4xx_flash.c ****   *
 443:FWLIB/src/stm32f4xx_flash.c ****   *  @note  For STM32F405xx/407xx and STM32F415xx/417xx devices this parameter can 
 444:FWLIB/src/stm32f4xx_flash.c ****   *         be a value between FLASH_Sector_0 and FLASH_Sector_11.
 445:FWLIB/src/stm32f4xx_flash.c ****   *
 446:FWLIB/src/stm32f4xx_flash.c ****   *         For STM32F42xxx/43xxx devices this parameter can be a value between 
 447:FWLIB/src/stm32f4xx_flash.c ****   *         FLASH_Sector_0 and FLASH_Sector_23.
 448:FWLIB/src/stm32f4xx_flash.c ****   *
 449:FWLIB/src/stm32f4xx_flash.c ****   *         For STM32F401xx devices this parameter can be a value between 
 450:FWLIB/src/stm32f4xx_flash.c ****   *         FLASH_Sector_0 and FLASH_Sector_5.
 451:FWLIB/src/stm32f4xx_flash.c ****   *
 452:FWLIB/src/stm32f4xx_flash.c ****   *         For STM32F411xE and STM32F412xG devices this parameter can be a value between 
 453:FWLIB/src/stm32f4xx_flash.c ****   *         FLASH_Sector_0 and FLASH_Sector_7.
 454:FWLIB/src/stm32f4xx_flash.c ****   *
 455:FWLIB/src/stm32f4xx_flash.c ****   *         For STM32F410xx devices this parameter can be a value between 
 456:FWLIB/src/stm32f4xx_flash.c ****   *         FLASH_Sector_0 and FLASH_Sector_4.
 457:FWLIB/src/stm32f4xx_flash.c ****   *
 458:FWLIB/src/stm32f4xx_flash.c ****   *         For STM32F413_423xx devices this parameter can be a value between 
 459:FWLIB/src/stm32f4xx_flash.c ****   *         FLASH_Sector_0 and FLASH_Sector_15.
 460:FWLIB/src/stm32f4xx_flash.c ****   *
 461:FWLIB/src/stm32f4xx_flash.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
ARM GAS  /tmp/ccfgdlY1.s 			page 14


 462:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
 463:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_1: when the device voltage range is 1.8V to 2.1V, 
 464:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by byte (8-bit) 
 465:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_2: when the device voltage range is 2.1V to 2.7V,
 466:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by half word (16-bit)
 467:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_3: when the device voltage range is 2.7V to 3.6V,
 468:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by word (32-bit)
 469:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
 470:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by double word (64-bit)
 471:FWLIB/src/stm32f4xx_flash.c ****   *       
 472:FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 473:FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
 474:FWLIB/src/stm32f4xx_flash.c ****   */
 475:FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
 476:FWLIB/src/stm32f4xx_flash.c **** {
 477:FWLIB/src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 478:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 479:FWLIB/src/stm32f4xx_flash.c **** 
 480:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
 481:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_SECTOR(FLASH_Sector));
 482:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 483:FWLIB/src/stm32f4xx_flash.c ****   
 484:FWLIB/src/stm32f4xx_flash.c ****   if(VoltageRange == VoltageRange_1)
 485:FWLIB/src/stm32f4xx_flash.c ****   {
 486:FWLIB/src/stm32f4xx_flash.c ****      tmp_psize = FLASH_PSIZE_BYTE;
 487:FWLIB/src/stm32f4xx_flash.c ****   }
 488:FWLIB/src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_2)
 489:FWLIB/src/stm32f4xx_flash.c ****   {
 490:FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_HALF_WORD;
 491:FWLIB/src/stm32f4xx_flash.c ****   }
 492:FWLIB/src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_3)
 493:FWLIB/src/stm32f4xx_flash.c ****   {
 494:FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_WORD;
 495:FWLIB/src/stm32f4xx_flash.c ****   }
 496:FWLIB/src/stm32f4xx_flash.c ****   else
 497:FWLIB/src/stm32f4xx_flash.c ****   {
 498:FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 499:FWLIB/src/stm32f4xx_flash.c ****   }
 500:FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 501:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 502:FWLIB/src/stm32f4xx_flash.c ****   
 503:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 504:FWLIB/src/stm32f4xx_flash.c ****   { 
 505:FWLIB/src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to erase the sector */
 506:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 507:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= tmp_psize;
 508:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= SECTOR_MASK;
 509:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 510:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 511:FWLIB/src/stm32f4xx_flash.c ****     
 512:FWLIB/src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 513:FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 514:FWLIB/src/stm32f4xx_flash.c ****     
 515:FWLIB/src/stm32f4xx_flash.c ****     /* if the erase operation is completed, disable the SER Bit */
 516:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_SER);
 517:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= SECTOR_MASK; 
 518:FWLIB/src/stm32f4xx_flash.c ****   }
ARM GAS  /tmp/ccfgdlY1.s 			page 15


 519:FWLIB/src/stm32f4xx_flash.c ****   /* Return the Erase Status */
 520:FWLIB/src/stm32f4xx_flash.c ****   return status;
 521:FWLIB/src/stm32f4xx_flash.c **** }
 522:FWLIB/src/stm32f4xx_flash.c **** 
 523:FWLIB/src/stm32f4xx_flash.c **** /**
 524:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Erases all FLASH Sectors.
 525:FWLIB/src/stm32f4xx_flash.c ****   *
 526:FWLIB/src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 527:FWLIB/src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 528:FWLIB/src/stm32f4xx_flash.c ****   *  
 529:FWLIB/src/stm32f4xx_flash.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
 530:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
 531:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_1: when the device voltage range is 1.8V to 2.1V, 
 532:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by byte (8-bit) 
 533:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_2: when the device voltage range is 2.1V to 2.7V,
 534:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by half word (16-bit)
 535:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_3: when the device voltage range is 2.7V to 3.6V,
 536:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by word (32-bit)
 537:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
 538:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by double word (64-bit)
 539:FWLIB/src/stm32f4xx_flash.c ****   *       
 540:FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 541:FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
 542:FWLIB/src/stm32f4xx_flash.c ****   */
 543:FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)
 544:FWLIB/src/stm32f4xx_flash.c **** {
 545:FWLIB/src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 546:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 547:FWLIB/src/stm32f4xx_flash.c ****   
 548:FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 549:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 550:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 551:FWLIB/src/stm32f4xx_flash.c ****   
 552:FWLIB/src/stm32f4xx_flash.c ****   if(VoltageRange == VoltageRange_1)
 553:FWLIB/src/stm32f4xx_flash.c ****   {
 554:FWLIB/src/stm32f4xx_flash.c ****      tmp_psize = FLASH_PSIZE_BYTE;
 555:FWLIB/src/stm32f4xx_flash.c ****   }
 556:FWLIB/src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_2)
 557:FWLIB/src/stm32f4xx_flash.c ****   {
 558:FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_HALF_WORD;
 559:FWLIB/src/stm32f4xx_flash.c ****   }
 560:FWLIB/src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_3)
 561:FWLIB/src/stm32f4xx_flash.c ****   {
 562:FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_WORD;
 563:FWLIB/src/stm32f4xx_flash.c ****   }
 564:FWLIB/src/stm32f4xx_flash.c ****   else
 565:FWLIB/src/stm32f4xx_flash.c ****   {
 566:FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 567:FWLIB/src/stm32f4xx_flash.c ****   }  
 568:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 569:FWLIB/src/stm32f4xx_flash.c ****   {
 570:FWLIB/src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to erase all sectors */
 571:FWLIB/src/stm32f4xx_flash.c **** #if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F469_479xx)
 572:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 573:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= tmp_psize;
 574:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= (FLASH_CR_MER1 | FLASH_CR_MER2);
 575:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
ARM GAS  /tmp/ccfgdlY1.s 			page 16


 576:FWLIB/src/stm32f4xx_flash.c ****     
 577:FWLIB/src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 578:FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 579:FWLIB/src/stm32f4xx_flash.c **** 
 580:FWLIB/src/stm32f4xx_flash.c ****     /* if the erase operation is completed, disable the MER Bit */
 581:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= ~(FLASH_CR_MER1 | FLASH_CR_MER2);
 582:FWLIB/src/stm32f4xx_flash.c **** #endif /* STM32F427_437xx ||  STM32F429_439xx ||  STM32F469_479xx */
 583:FWLIB/src/stm32f4xx_flash.c **** 
 584:FWLIB/src/stm32f4xx_flash.c **** #if defined(STM32F40_41xxx) || defined(STM32F401xx) || defined(STM32F410xx) || defined(STM32F411xE)
 585:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 586:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= tmp_psize;
 587:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_MER;
 588:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 589:FWLIB/src/stm32f4xx_flash.c ****     
 590:FWLIB/src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 591:FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 592:FWLIB/src/stm32f4xx_flash.c **** 
 593:FWLIB/src/stm32f4xx_flash.c ****     /* if the erase operation is completed, disable the MER Bit */
 594:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_MER);
 595:FWLIB/src/stm32f4xx_flash.c **** #endif /* STM32F40_41xxx || STM32F401xx || STM32F410xx || STM32F411xE || STM32F412xG || STM32F413_4
 596:FWLIB/src/stm32f4xx_flash.c **** 
 597:FWLIB/src/stm32f4xx_flash.c ****   }   
 598:FWLIB/src/stm32f4xx_flash.c ****   /* Return the Erase Status */
 599:FWLIB/src/stm32f4xx_flash.c ****   return status;
 600:FWLIB/src/stm32f4xx_flash.c **** }
 601:FWLIB/src/stm32f4xx_flash.c **** 
 602:FWLIB/src/stm32f4xx_flash.c **** /**
 603:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Erases all FLASH Sectors in Bank 1.
 604:FWLIB/src/stm32f4xx_flash.c ****   *
 605:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
 606:FWLIB/src/stm32f4xx_flash.c ****   *      
 607:FWLIB/src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 608:FWLIB/src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one. 
 609:FWLIB/src/stm32f4xx_flash.c ****   *  
 610:FWLIB/src/stm32f4xx_flash.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
 611:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
 612:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_1: when the device voltage range is 1.8V to 2.1V, 
 613:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by byte (8-bit) 
 614:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_2: when the device voltage range is 2.1V to 2.7V,
 615:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by half word (16-bit)
 616:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_3: when the device voltage range is 2.7V to 3.6V,
 617:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by word (32-bit)
 618:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
 619:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by double word (64-bit)
 620:FWLIB/src/stm32f4xx_flash.c ****   *       
 621:FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 622:FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
 623:FWLIB/src/stm32f4xx_flash.c ****   */
 624:FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_EraseAllBank1Sectors(uint8_t VoltageRange)
 625:FWLIB/src/stm32f4xx_flash.c **** {
 626:FWLIB/src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 627:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 628:FWLIB/src/stm32f4xx_flash.c ****   
 629:FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 630:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 631:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 632:FWLIB/src/stm32f4xx_flash.c ****   
ARM GAS  /tmp/ccfgdlY1.s 			page 17


 633:FWLIB/src/stm32f4xx_flash.c ****   if(VoltageRange == VoltageRange_1)
 634:FWLIB/src/stm32f4xx_flash.c ****   {
 635:FWLIB/src/stm32f4xx_flash.c ****      tmp_psize = FLASH_PSIZE_BYTE;
 636:FWLIB/src/stm32f4xx_flash.c ****   }
 637:FWLIB/src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_2)
 638:FWLIB/src/stm32f4xx_flash.c ****   {
 639:FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_HALF_WORD;
 640:FWLIB/src/stm32f4xx_flash.c ****   }
 641:FWLIB/src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_3)
 642:FWLIB/src/stm32f4xx_flash.c ****   {
 643:FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_WORD;
 644:FWLIB/src/stm32f4xx_flash.c ****   }
 645:FWLIB/src/stm32f4xx_flash.c ****   else
 646:FWLIB/src/stm32f4xx_flash.c ****   {
 647:FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 648:FWLIB/src/stm32f4xx_flash.c ****   }  
 649:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 650:FWLIB/src/stm32f4xx_flash.c ****   {
 651:FWLIB/src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to erase all sectors */
 652:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR &= CR_PSIZE_MASK;
 653:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= tmp_psize;
 654:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_MER1;
 655:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_STRT;
 656:FWLIB/src/stm32f4xx_flash.c ****     
 657:FWLIB/src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 658:FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 659:FWLIB/src/stm32f4xx_flash.c **** 
 660:FWLIB/src/stm32f4xx_flash.c ****     /* if the erase operation is completed, disable the MER Bit */
 661:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_MER1);
 662:FWLIB/src/stm32f4xx_flash.c **** 
 663:FWLIB/src/stm32f4xx_flash.c ****   }   
 664:FWLIB/src/stm32f4xx_flash.c ****   /* Return the Erase Status */
 665:FWLIB/src/stm32f4xx_flash.c ****   return status;
 666:FWLIB/src/stm32f4xx_flash.c **** }
 667:FWLIB/src/stm32f4xx_flash.c **** 
 668:FWLIB/src/stm32f4xx_flash.c **** 
 669:FWLIB/src/stm32f4xx_flash.c **** /**
 670:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Erases all FLASH Sectors in Bank 2.
 671:FWLIB/src/stm32f4xx_flash.c ****   *
 672:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
 673:FWLIB/src/stm32f4xx_flash.c ****   *     
 674:FWLIB/src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 675:FWLIB/src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 676:FWLIB/src/stm32f4xx_flash.c ****   *     
 677:FWLIB/src/stm32f4xx_flash.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
 678:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
 679:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_1: when the device voltage range is 1.8V to 2.1V, 
 680:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by byte (8-bit) 
 681:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_2: when the device voltage range is 2.1V to 2.7V,
 682:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by half word (16-bit)
 683:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_3: when the device voltage range is 2.7V to 3.6V,
 684:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by word (32-bit)
 685:FWLIB/src/stm32f4xx_flash.c ****   *            @arg VoltageRange_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
 686:FWLIB/src/stm32f4xx_flash.c ****   *                                  the operation will be done by double word (64-bit)
 687:FWLIB/src/stm32f4xx_flash.c ****   *       
 688:FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 689:FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
ARM GAS  /tmp/ccfgdlY1.s 			page 18


 690:FWLIB/src/stm32f4xx_flash.c ****   */
 691:FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_EraseAllBank2Sectors(uint8_t VoltageRange)
 692:FWLIB/src/stm32f4xx_flash.c **** {
 693:FWLIB/src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 694:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 695:FWLIB/src/stm32f4xx_flash.c ****   
 696:FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 697:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 698:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 699:FWLIB/src/stm32f4xx_flash.c ****   
 700:FWLIB/src/stm32f4xx_flash.c ****   if(VoltageRange == VoltageRange_1)
 701:FWLIB/src/stm32f4xx_flash.c ****   {
 702:FWLIB/src/stm32f4xx_flash.c ****      tmp_psize = FLASH_PSIZE_BYTE;
 703:FWLIB/src/stm32f4xx_flash.c ****   }
 704:FWLIB/src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_2)
 705:FWLIB/src/stm32f4xx_flash.c ****   {
 706:FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_HALF_WORD;
 707:FWLIB/src/stm32f4xx_flash.c ****   }
 708:FWLIB/src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_3)
 709:FWLIB/src/stm32f4xx_flash.c ****   {
 710:FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_WORD;
 711:FWLIB/src/stm32f4xx_flash.c ****   }
 712:FWLIB/src/stm32f4xx_flash.c ****   else
 713:FWLIB/src/stm32f4xx_flash.c ****   {
 714:FWLIB/src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 715:FWLIB/src/stm32f4xx_flash.c ****   }  
 716:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 717:FWLIB/src/stm32f4xx_flash.c ****   {
 718:FWLIB/src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to erase all sectors */
 719:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR &= CR_PSIZE_MASK;
 720:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= tmp_psize;
 721:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_MER2;
 722:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_STRT;
 723:FWLIB/src/stm32f4xx_flash.c ****     
 724:FWLIB/src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 725:FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 726:FWLIB/src/stm32f4xx_flash.c **** 
 727:FWLIB/src/stm32f4xx_flash.c ****     /* if the erase operation is completed, disable the MER Bit */
 728:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_MER2);
 729:FWLIB/src/stm32f4xx_flash.c **** 
 730:FWLIB/src/stm32f4xx_flash.c ****   }   
 731:FWLIB/src/stm32f4xx_flash.c ****   /* Return the Erase Status */
 732:FWLIB/src/stm32f4xx_flash.c ****   return status;
 733:FWLIB/src/stm32f4xx_flash.c **** }
 734:FWLIB/src/stm32f4xx_flash.c **** 
 735:FWLIB/src/stm32f4xx_flash.c **** /**
 736:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Programs a double word (64-bit) at a specified address.
 737:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function must be used when the device voltage range is from
 738:FWLIB/src/stm32f4xx_flash.c ****   *         2.7V to 3.6V and an External Vpp is present.
 739:FWLIB/src/stm32f4xx_flash.c ****   *
 740:FWLIB/src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 741:FWLIB/src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 742:FWLIB/src/stm32f4xx_flash.c ****   *  
 743:FWLIB/src/stm32f4xx_flash.c ****   * @param  Address: specifies the address to be programmed.
 744:FWLIB/src/stm32f4xx_flash.c ****   * @param  Data: specifies the data to be programmed.
 745:FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 746:FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
ARM GAS  /tmp/ccfgdlY1.s 			page 19


 747:FWLIB/src/stm32f4xx_flash.c ****   */
 748:FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
 749:FWLIB/src/stm32f4xx_flash.c **** {
 750:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 751:FWLIB/src/stm32f4xx_flash.c **** 
 752:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
 753:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 754:FWLIB/src/stm32f4xx_flash.c **** 
 755:FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 756:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 757:FWLIB/src/stm32f4xx_flash.c ****   
 758:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 759:FWLIB/src/stm32f4xx_flash.c ****   {
 760:FWLIB/src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to program the new data */
 761:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 762:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 763:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 764:FWLIB/src/stm32f4xx_flash.c ****   
 765:FWLIB/src/stm32f4xx_flash.c ****     *(__IO uint64_t*)Address = Data;
 766:FWLIB/src/stm32f4xx_flash.c ****         
 767:FWLIB/src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 768:FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 769:FWLIB/src/stm32f4xx_flash.c **** 
 770:FWLIB/src/stm32f4xx_flash.c ****     /* if the program operation is completed, disable the PG Bit */
 771:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_PG);
 772:FWLIB/src/stm32f4xx_flash.c ****   } 
 773:FWLIB/src/stm32f4xx_flash.c ****   /* Return the Program Status */
 774:FWLIB/src/stm32f4xx_flash.c ****   return status;
 775:FWLIB/src/stm32f4xx_flash.c **** }
 776:FWLIB/src/stm32f4xx_flash.c **** 
 777:FWLIB/src/stm32f4xx_flash.c **** /**
 778:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Programs a word (32-bit) at a specified address.
 779:FWLIB/src/stm32f4xx_flash.c ****   *
 780:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function must be used when the device voltage range is from 2.7V to 3.6V. 
 781:FWLIB/src/stm32f4xx_flash.c ****   *
 782:FWLIB/src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 783:FWLIB/src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 784:FWLIB/src/stm32f4xx_flash.c ****   *  
 785:FWLIB/src/stm32f4xx_flash.c ****   * @param  Address: specifies the address to be programmed.
 786:FWLIB/src/stm32f4xx_flash.c ****   *         This parameter can be any address in Program memory zone or in OTP zone.  
 787:FWLIB/src/stm32f4xx_flash.c ****   * @param  Data: specifies the data to be programmed.
 788:FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 789:FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
 790:FWLIB/src/stm32f4xx_flash.c ****   */
 791:FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
 792:FWLIB/src/stm32f4xx_flash.c **** {
 793:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 794:FWLIB/src/stm32f4xx_flash.c **** 
 795:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
 796:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 797:FWLIB/src/stm32f4xx_flash.c **** 
 798:FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 799:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 800:FWLIB/src/stm32f4xx_flash.c ****   
 801:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 802:FWLIB/src/stm32f4xx_flash.c ****   {
 803:FWLIB/src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to program the new data */
ARM GAS  /tmp/ccfgdlY1.s 			page 20


 804:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 805:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_WORD;
 806:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 807:FWLIB/src/stm32f4xx_flash.c ****   
 808:FWLIB/src/stm32f4xx_flash.c ****     *(__IO uint32_t*)Address = Data;
 809:FWLIB/src/stm32f4xx_flash.c ****         
 810:FWLIB/src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 811:FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 812:FWLIB/src/stm32f4xx_flash.c **** 
 813:FWLIB/src/stm32f4xx_flash.c ****     /* if the program operation is completed, disable the PG Bit */
 814:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_PG);
 815:FWLIB/src/stm32f4xx_flash.c ****   } 
 816:FWLIB/src/stm32f4xx_flash.c ****   /* Return the Program Status */
 817:FWLIB/src/stm32f4xx_flash.c ****   return status;
 818:FWLIB/src/stm32f4xx_flash.c **** }
 819:FWLIB/src/stm32f4xx_flash.c **** 
 820:FWLIB/src/stm32f4xx_flash.c **** /**
 821:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Programs a half word (16-bit) at a specified address. 
 822:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function must be used when the device voltage range is from 2.1V to 3.6V. 
 823:FWLIB/src/stm32f4xx_flash.c ****   *
 824:FWLIB/src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 825:FWLIB/src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 826:FWLIB/src/stm32f4xx_flash.c ****   * 
 827:FWLIB/src/stm32f4xx_flash.c ****   * @param  Address: specifies the address to be programmed.
 828:FWLIB/src/stm32f4xx_flash.c ****   *         This parameter can be any address in Program memory zone or in OTP zone.  
 829:FWLIB/src/stm32f4xx_flash.c ****   * @param  Data: specifies the data to be programmed.
 830:FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 831:FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
 832:FWLIB/src/stm32f4xx_flash.c ****   */
 833:FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
 834:FWLIB/src/stm32f4xx_flash.c **** {
 835:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 836:FWLIB/src/stm32f4xx_flash.c **** 
 837:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
 838:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 839:FWLIB/src/stm32f4xx_flash.c **** 
 840:FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 841:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 842:FWLIB/src/stm32f4xx_flash.c ****   
 843:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 844:FWLIB/src/stm32f4xx_flash.c ****   {
 845:FWLIB/src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to program the new data */
 846:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 847:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 848:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 849:FWLIB/src/stm32f4xx_flash.c ****   
 850:FWLIB/src/stm32f4xx_flash.c ****     *(__IO uint16_t*)Address = Data;
 851:FWLIB/src/stm32f4xx_flash.c ****         
 852:FWLIB/src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 853:FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 854:FWLIB/src/stm32f4xx_flash.c **** 
 855:FWLIB/src/stm32f4xx_flash.c ****     /* if the program operation is completed, disable the PG Bit */
 856:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_PG);
 857:FWLIB/src/stm32f4xx_flash.c ****   } 
 858:FWLIB/src/stm32f4xx_flash.c ****   /* Return the Program Status */
 859:FWLIB/src/stm32f4xx_flash.c ****   return status;
 860:FWLIB/src/stm32f4xx_flash.c **** }
ARM GAS  /tmp/ccfgdlY1.s 			page 21


 861:FWLIB/src/stm32f4xx_flash.c **** 
 862:FWLIB/src/stm32f4xx_flash.c **** /**
 863:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Programs a byte (8-bit) at a specified address.
 864:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used within all the device supply voltage ranges.  
 865:FWLIB/src/stm32f4xx_flash.c ****   *
 866:FWLIB/src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 867:FWLIB/src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 868:FWLIB/src/stm32f4xx_flash.c ****   * 
 869:FWLIB/src/stm32f4xx_flash.c ****   * @param  Address: specifies the address to be programmed.
 870:FWLIB/src/stm32f4xx_flash.c ****   *         This parameter can be any address in Program memory zone or in OTP zone.  
 871:FWLIB/src/stm32f4xx_flash.c ****   * @param  Data: specifies the data to be programmed.
 872:FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 873:FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
 874:FWLIB/src/stm32f4xx_flash.c ****   */
 875:FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
 876:FWLIB/src/stm32f4xx_flash.c **** {
 877:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 878:FWLIB/src/stm32f4xx_flash.c **** 
 879:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
 880:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 881:FWLIB/src/stm32f4xx_flash.c **** 
 882:FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 883:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 884:FWLIB/src/stm32f4xx_flash.c ****   
 885:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 886:FWLIB/src/stm32f4xx_flash.c ****   {
 887:FWLIB/src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to program the new data */
 888:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 889:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_BYTE;
 890:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 891:FWLIB/src/stm32f4xx_flash.c ****   
 892:FWLIB/src/stm32f4xx_flash.c ****     *(__IO uint8_t*)Address = Data;
 893:FWLIB/src/stm32f4xx_flash.c ****         
 894:FWLIB/src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 895:FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 896:FWLIB/src/stm32f4xx_flash.c **** 
 897:FWLIB/src/stm32f4xx_flash.c ****     /* if the program operation is completed, disable the PG Bit */
 898:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_PG);
 899:FWLIB/src/stm32f4xx_flash.c ****   } 
 900:FWLIB/src/stm32f4xx_flash.c **** 
 901:FWLIB/src/stm32f4xx_flash.c ****   /* Return the Program Status */
 902:FWLIB/src/stm32f4xx_flash.c ****   return status;
 903:FWLIB/src/stm32f4xx_flash.c **** }
 904:FWLIB/src/stm32f4xx_flash.c **** 
 905:FWLIB/src/stm32f4xx_flash.c **** /**
 906:FWLIB/src/stm32f4xx_flash.c ****   * @}
 907:FWLIB/src/stm32f4xx_flash.c ****   */
 908:FWLIB/src/stm32f4xx_flash.c **** 
 909:FWLIB/src/stm32f4xx_flash.c **** /** @defgroup FLASH_Group3 Option Bytes Programming functions
 910:FWLIB/src/stm32f4xx_flash.c ****  *  @brief   Option Bytes Programming functions 
 911:FWLIB/src/stm32f4xx_flash.c ****  *
 912:FWLIB/src/stm32f4xx_flash.c **** @verbatim   
 913:FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================
 914:FWLIB/src/stm32f4xx_flash.c ****                 ##### Option Bytes Programming functions #####
 915:FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================  
 916:FWLIB/src/stm32f4xx_flash.c ****     [..]
 917:FWLIB/src/stm32f4xx_flash.c ****       This group includes the following functions:
ARM GAS  /tmp/ccfgdlY1.s 			page 22


 918:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_Unlock(void)
 919:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_Lock(void)
 920:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
 921:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_WRP1Config(uint32_t OB_WRP, FunctionalState NewState)  
 922:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_PCROPSelectionConfig(uint8_t OB_PCROPSelect)
 923:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_PCROPConfig(uint32_t OB_PCROP, FunctionalState NewState)
 924:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_PCROP1Config(uint32_t OB_PCROP, FunctionalState NewState) 
 925:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_RDPConfig(uint8_t OB_RDP)
 926:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
 927:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_BORConfig(uint8_t OB_BOR)
 928:FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_ProgramOTP(uint32_t Address, uint32_t Data)
 929:FWLIB/src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_OB_Launch(void)
 930:FWLIB/src/stm32f4xx_flash.c ****       (+) uint32_t FLASH_OB_GetUser(void)
 931:FWLIB/src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetWRP(void)
 932:FWLIB/src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetWRP1(void)
 933:FWLIB/src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetPCROP(void)
 934:FWLIB/src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetPCROP1(void)
 935:FWLIB/src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetRDP(void)
 936:FWLIB/src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetBOR(void)
 937:FWLIB/src/stm32f4xx_flash.c ****     [..]  
 938:FWLIB/src/stm32f4xx_flash.c ****       The following function can be used only for STM32F42xxx/43xxx devices. 
 939:FWLIB/src/stm32f4xx_flash.c ****       (+) void FLASH_OB_BootConfig(uint8_t OB_BOOT)
 940:FWLIB/src/stm32f4xx_flash.c ****     [..]   
 941:FWLIB/src/stm32f4xx_flash.c ****      Any operation of erase or program should follow these steps:
 942:FWLIB/src/stm32f4xx_flash.c ****       (#) Call the FLASH_OB_Unlock() function to enable the FLASH option control 
 943:FWLIB/src/stm32f4xx_flash.c ****           register access
 944:FWLIB/src/stm32f4xx_flash.c **** 
 945:FWLIB/src/stm32f4xx_flash.c ****       (#) Call one or several functions to program the desired Option Bytes:
 946:FWLIB/src/stm32f4xx_flash.c ****         (++) void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState) 
 947:FWLIB/src/stm32f4xx_flash.c ****              => to Enable/Disable the desired sector write protection
 948:FWLIB/src/stm32f4xx_flash.c ****         (++) void FLASH_OB_RDPConfig(uint8_t OB_RDP) => to set the desired read 
 949:FWLIB/src/stm32f4xx_flash.c ****              Protection Level
 950:FWLIB/src/stm32f4xx_flash.c ****         (++) void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY) 
 951:FWLIB/src/stm32f4xx_flash.c ****              => to configure the user Option Bytes.
 952:FWLIB/src/stm32f4xx_flash.c ****         (++) void FLASH_OB_BORConfig(uint8_t OB_BOR) => to set the BOR Level 			 
 953:FWLIB/src/stm32f4xx_flash.c **** 
 954:FWLIB/src/stm32f4xx_flash.c ****       (#) Once all needed Option Bytes to be programmed are correctly written, 
 955:FWLIB/src/stm32f4xx_flash.c ****           call the FLASH_OB_Launch() function to launch the Option Bytes 
 956:FWLIB/src/stm32f4xx_flash.c ****           programming process.
 957:FWLIB/src/stm32f4xx_flash.c ****      
 958:FWLIB/src/stm32f4xx_flash.c ****       -@- When changing the IWDG mode from HW to SW or from SW to HW, a system 
 959:FWLIB/src/stm32f4xx_flash.c ****           reset is needed to make the change effective.  
 960:FWLIB/src/stm32f4xx_flash.c **** 
 961:FWLIB/src/stm32f4xx_flash.c ****       (#) Call the FLASH_OB_Lock() function to disable the FLASH option control 
 962:FWLIB/src/stm32f4xx_flash.c ****           register access (recommended to protect the Option Bytes against 
 963:FWLIB/src/stm32f4xx_flash.c ****           possible unwanted operations)
 964:FWLIB/src/stm32f4xx_flash.c ****     
 965:FWLIB/src/stm32f4xx_flash.c **** @endverbatim
 966:FWLIB/src/stm32f4xx_flash.c ****   * @{
 967:FWLIB/src/stm32f4xx_flash.c ****   */
 968:FWLIB/src/stm32f4xx_flash.c **** 
 969:FWLIB/src/stm32f4xx_flash.c **** /**
 970:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Unlocks the FLASH Option Control Registers access.
 971:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
 972:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 973:FWLIB/src/stm32f4xx_flash.c ****   */
 974:FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_Unlock(void)
ARM GAS  /tmp/ccfgdlY1.s 			page 23


 975:FWLIB/src/stm32f4xx_flash.c **** {
 295              		.loc 1 975 0
 296              		.cfi_startproc
 297              		@ args = 0, pretend = 0, frame = 0
 298              		@ frame_needed = 0, uses_anonymous_args = 0
 299              		@ link register save eliminated.
 976:FWLIB/src/stm32f4xx_flash.c ****   if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 300              		.loc 1 976 0
 301 0000 054B     		ldr	r3, .L38
 302 0002 5B69     		ldr	r3, [r3, #20]
 303 0004 13F0010F 		tst	r3, #1
 304 0008 05D0     		beq	.L36
 977:FWLIB/src/stm32f4xx_flash.c ****   {
 978:FWLIB/src/stm32f4xx_flash.c ****     /* Authorizes the Option Byte register programming */
 979:FWLIB/src/stm32f4xx_flash.c ****     FLASH->OPTKEYR = FLASH_OPT_KEY1;
 305              		.loc 1 979 0
 306 000a 034B     		ldr	r3, .L38
 307 000c 034A     		ldr	r2, .L38+4
 308 000e 9A60     		str	r2, [r3, #8]
 980:FWLIB/src/stm32f4xx_flash.c ****     FLASH->OPTKEYR = FLASH_OPT_KEY2;
 309              		.loc 1 980 0
 310 0010 02F14432 		add	r2, r2, #1145324612
 311 0014 9A60     		str	r2, [r3, #8]
 312              	.L36:
 313 0016 7047     		bx	lr
 314              	.L39:
 315              		.align	2
 316              	.L38:
 317 0018 003C0240 		.word	1073888256
 318 001c 3B2A1908 		.word	135866939
 319              		.cfi_endproc
 320              	.LFE139:
 322              		.section	.text.FLASH_OB_Lock,"ax",%progbits
 323              		.align	1
 324              		.global	FLASH_OB_Lock
 325              		.syntax unified
 326              		.thumb
 327              		.thumb_func
 328              		.fpu fpv4-sp-d16
 330              	FLASH_OB_Lock:
 331              	.LFB140:
 981:FWLIB/src/stm32f4xx_flash.c ****   }  
 982:FWLIB/src/stm32f4xx_flash.c **** }
 983:FWLIB/src/stm32f4xx_flash.c **** 
 984:FWLIB/src/stm32f4xx_flash.c **** /**
 985:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Locks the FLASH Option Control Registers access.
 986:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
 987:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
 988:FWLIB/src/stm32f4xx_flash.c ****   */
 989:FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_Lock(void)
 990:FWLIB/src/stm32f4xx_flash.c **** {
 332              		.loc 1 990 0
 333              		.cfi_startproc
 334              		@ args = 0, pretend = 0, frame = 0
 335              		@ frame_needed = 0, uses_anonymous_args = 0
 336              		@ link register save eliminated.
 991:FWLIB/src/stm32f4xx_flash.c ****   /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
ARM GAS  /tmp/ccfgdlY1.s 			page 24


 992:FWLIB/src/stm32f4xx_flash.c ****   FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 337              		.loc 1 992 0
 338 0000 024A     		ldr	r2, .L41
 339 0002 5369     		ldr	r3, [r2, #20]
 340 0004 43F00103 		orr	r3, r3, #1
 341 0008 5361     		str	r3, [r2, #20]
 342 000a 7047     		bx	lr
 343              	.L42:
 344              		.align	2
 345              	.L41:
 346 000c 003C0240 		.word	1073888256
 347              		.cfi_endproc
 348              	.LFE140:
 350              		.section	.text.FLASH_OB_PCROPSelectionConfig,"ax",%progbits
 351              		.align	1
 352              		.global	FLASH_OB_PCROPSelectionConfig
 353              		.syntax unified
 354              		.thumb
 355              		.thumb_func
 356              		.fpu fpv4-sp-d16
 358              	FLASH_OB_PCROPSelectionConfig:
 359              	.LFB143:
 993:FWLIB/src/stm32f4xx_flash.c **** }
 994:FWLIB/src/stm32f4xx_flash.c **** 
 995:FWLIB/src/stm32f4xx_flash.c **** /**
 996:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Enables or disables the write protection of the desired sectors, for the first
 997:FWLIB/src/stm32f4xx_flash.c ****   *         1 Mb of the Flash  
 998:FWLIB/src/stm32f4xx_flash.c ****   *
 999:FWLIB/src/stm32f4xx_flash.c ****   * @note   When the memory read protection level is selected (RDP level = 1), 
1000:FWLIB/src/stm32f4xx_flash.c ****   *         it is not possible to program or erase the flash sector i if CortexM4  
1001:FWLIB/src/stm32f4xx_flash.c ****   *         debug features are connected or boot code is executed in RAM, even if nWRPi = 1 
1002:FWLIB/src/stm32f4xx_flash.c ****   * @note   Active value of nWRPi bits is inverted when PCROP mode is active (SPRMOD =1).   
1003:FWLIB/src/stm32f4xx_flash.c ****   * 
1004:FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_WRP: specifies the sector(s) to be write protected or unprotected.
1005:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1006:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_WRP: A value between OB_WRP_Sector0 and OB_WRP_Sector11                     
1007:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_WRP_Sector_All
1008:FWLIB/src/stm32f4xx_flash.c ****   * @param  Newstate: new state of the Write Protection.
1009:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be: ENABLE or DISABLE.
1010:FWLIB/src/stm32f4xx_flash.c ****   * @retval None  
1011:FWLIB/src/stm32f4xx_flash.c ****   */
1012:FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
1013:FWLIB/src/stm32f4xx_flash.c **** { 
1014:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
1015:FWLIB/src/stm32f4xx_flash.c ****   
1016:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1017:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_WRP(OB_WRP));
1018:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1019:FWLIB/src/stm32f4xx_flash.c ****     
1020:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
1021:FWLIB/src/stm32f4xx_flash.c **** 
1022:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
1023:FWLIB/src/stm32f4xx_flash.c ****   { 
1024:FWLIB/src/stm32f4xx_flash.c ****     if(NewState != DISABLE)
1025:FWLIB/src/stm32f4xx_flash.c ****     {
1026:FWLIB/src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
1027:FWLIB/src/stm32f4xx_flash.c ****     }
ARM GAS  /tmp/ccfgdlY1.s 			page 25


1028:FWLIB/src/stm32f4xx_flash.c ****     else
1029:FWLIB/src/stm32f4xx_flash.c ****     {
1030:FWLIB/src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
1031:FWLIB/src/stm32f4xx_flash.c ****     }
1032:FWLIB/src/stm32f4xx_flash.c ****   }
1033:FWLIB/src/stm32f4xx_flash.c **** }
1034:FWLIB/src/stm32f4xx_flash.c **** 
1035:FWLIB/src/stm32f4xx_flash.c **** /**
1036:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Enables or disables the write protection of the desired sectors, for the second
1037:FWLIB/src/stm32f4xx_flash.c ****   *         1 Mb of the Flash  
1038:FWLIB/src/stm32f4xx_flash.c ****   *           
1039:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1040:FWLIB/src/stm32f4xx_flash.c ****   *   
1041:FWLIB/src/stm32f4xx_flash.c ****   * @note   When the memory read out protection is selected (RDP level = 1), 
1042:FWLIB/src/stm32f4xx_flash.c ****   *         it is not possible to program or erase the flash sector i if CortexM4  
1043:FWLIB/src/stm32f4xx_flash.c ****   *         debug features are connected or boot code is executed in RAM, even if nWRPi = 1 
1044:FWLIB/src/stm32f4xx_flash.c ****   * @note   Active value of nWRPi bits is inverted when PCROP mode is active (SPRMOD =1).      
1045:FWLIB/src/stm32f4xx_flash.c ****   * 
1046:FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_WRP: specifies the sector(s) to be write protected or unprotected.
1047:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1048:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_WRP: A value between OB_WRP_Sector12 and OB_WRP_Sector23
1049:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_WRP_Sector_All                        
1050:FWLIB/src/stm32f4xx_flash.c ****   * @param  Newstate: new state of the Write Protection.
1051:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be: ENABLE or DISABLE.
1052:FWLIB/src/stm32f4xx_flash.c ****   * @retval None  
1053:FWLIB/src/stm32f4xx_flash.c ****   */
1054:FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_WRP1Config(uint32_t OB_WRP, FunctionalState NewState)
1055:FWLIB/src/stm32f4xx_flash.c **** { 
1056:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
1057:FWLIB/src/stm32f4xx_flash.c ****   
1058:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1059:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_WRP(OB_WRP));
1060:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1061:FWLIB/src/stm32f4xx_flash.c ****     
1062:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
1063:FWLIB/src/stm32f4xx_flash.c **** 
1064:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
1065:FWLIB/src/stm32f4xx_flash.c ****   { 
1066:FWLIB/src/stm32f4xx_flash.c ****     if(NewState != DISABLE)
1067:FWLIB/src/stm32f4xx_flash.c ****     {
1068:FWLIB/src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~OB_WRP);
1069:FWLIB/src/stm32f4xx_flash.c ****     }
1070:FWLIB/src/stm32f4xx_flash.c ****     else
1071:FWLIB/src/stm32f4xx_flash.c ****     {
1072:FWLIB/src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
1073:FWLIB/src/stm32f4xx_flash.c ****     }
1074:FWLIB/src/stm32f4xx_flash.c ****   }
1075:FWLIB/src/stm32f4xx_flash.c **** }
1076:FWLIB/src/stm32f4xx_flash.c **** 
1077:FWLIB/src/stm32f4xx_flash.c **** /**
1078:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Select the Protection Mode (SPRMOD). 
1079:FWLIB/src/stm32f4xx_flash.c ****   * 
1080:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx and STM32F401xx/411xE devices.    
1081:FWLIB/src/stm32f4xx_flash.c ****   * 
1082:FWLIB/src/stm32f4xx_flash.c ****   * @note   After PCROP activation, Option Byte modification is not possible. 
1083:FWLIB/src/stm32f4xx_flash.c ****   *         Exception made for the global Read Out Protection modification level (level1 to level0)
1084:FWLIB/src/stm32f4xx_flash.c ****   * @note   Once SPRMOD bit is active unprotection of a protected sector is not possible 
ARM GAS  /tmp/ccfgdlY1.s 			page 26


1085:FWLIB/src/stm32f4xx_flash.c ****   *   
1086:FWLIB/src/stm32f4xx_flash.c ****   * @note   Read a protected sector will set RDERR Flag and write a protected sector will set WRPER
1087:FWLIB/src/stm32f4xx_flash.c ****   *   
1088:FWLIB/src/stm32f4xx_flash.c ****   * @note   Some Precautions should be taken when activating the PCROP feature :
1089:FWLIB/src/stm32f4xx_flash.c ****   *         The active value of nWRPi bits is inverted when PCROP mode is active, this means if SPR
1090:FWLIB/src/stm32f4xx_flash.c ****   *         and WRPi = 1 (default value), then the user sector i is read/write protected.
1091:FWLIB/src/stm32f4xx_flash.c ****   *         In order to avoid activation of PCROP Mode for undesired sectors, please follow the
1092:FWLIB/src/stm32f4xx_flash.c ****   *         below safety sequence :       
1093:FWLIB/src/stm32f4xx_flash.c ****   *         - Disable PCROP for all Sectors using FLASH_OB_PCROPConfig(OB_PCROP_Sector_All, DISABLE
1094:FWLIB/src/stm32f4xx_flash.c ****   *           for Bank1 or FLASH_OB_PCROP1Config(OB_PCROP_Sector_All, DISABLE) function for Bank2  
1095:FWLIB/src/stm32f4xx_flash.c ****   *         - Enable PCROP for the desired Sector i using FLASH_OB_PCROPConfig(Sector i, ENABLE) fu
1096:FWLIB/src/stm32f4xx_flash.c ****   *         - Activate the PCROP Mode FLASH_OB_PCROPSelectionConfig() function. 
1097:FWLIB/src/stm32f4xx_flash.c ****   * 
1098:FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_PCROP:  Select the Protection Mode of nWPRi bits 
1099:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1100:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_PcROP_Disable: nWRPi control the write protection of respective user sectors
1101:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_PcROP_Enable: nWRPi control the  read&write protection (PCROP) of respective
1102:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
1103:FWLIB/src/stm32f4xx_flash.c ****   */
1104:FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_PCROPSelectionConfig(uint8_t OB_PcROP)
1105:FWLIB/src/stm32f4xx_flash.c **** {  
 360              		.loc 1 1105 0
 361              		.cfi_startproc
 362              		@ args = 0, pretend = 0, frame = 0
 363              		@ frame_needed = 0, uses_anonymous_args = 0
 364              		@ link register save eliminated.
 365              	.LVL5:
1106:FWLIB/src/stm32f4xx_flash.c ****   uint8_t optiontmp = 0xFF;
1107:FWLIB/src/stm32f4xx_flash.c ****       
1108:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1109:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_PCROP_SELECT(OB_PcROP));
1110:FWLIB/src/stm32f4xx_flash.c ****   
1111:FWLIB/src/stm32f4xx_flash.c ****   /* Mask SPRMOD bit */
1112:FWLIB/src/stm32f4xx_flash.c ****   optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE3_ADDRESS) & (uint8_t)0x7F); 
 366              		.loc 1 1112 0
 367 0000 034A     		ldr	r2, .L44
 368 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 369 0004 03F07F03 		and	r3, r3, #127
 370              	.LVL6:
1113:FWLIB/src/stm32f4xx_flash.c ****   /* Update Option Byte */
1114:FWLIB/src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE3_ADDRESS = (uint8_t)(OB_PcROP | optiontmp); 
 371              		.loc 1 1114 0
 372 0008 1843     		orrs	r0, r0, r3
 373              	.LVL7:
 374 000a 1070     		strb	r0, [r2]
 375 000c 7047     		bx	lr
 376              	.L45:
 377 000e 00BF     		.align	2
 378              	.L44:
 379 0010 173C0240 		.word	1073888279
 380              		.cfi_endproc
 381              	.LFE143:
 383              		.section	.text.FLASH_OB_BootConfig,"ax",%progbits
 384              		.align	1
 385              		.global	FLASH_OB_BootConfig
 386              		.syntax unified
 387              		.thumb
ARM GAS  /tmp/ccfgdlY1.s 			page 27


 388              		.thumb_func
 389              		.fpu fpv4-sp-d16
 391              	FLASH_OB_BootConfig:
 392              	.LFB148:
1115:FWLIB/src/stm32f4xx_flash.c ****     
1116:FWLIB/src/stm32f4xx_flash.c **** }
1117:FWLIB/src/stm32f4xx_flash.c **** 
1118:FWLIB/src/stm32f4xx_flash.c **** /**
1119:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Enables or disables the read/write protection (PCROP) of the desired 
1120:FWLIB/src/stm32f4xx_flash.c ****   *         sectors, for the first 1 MB of the Flash.
1121:FWLIB/src/stm32f4xx_flash.c ****   *           
1122:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx , STM32F401xx/411xE 
1123:FWLIB/src/stm32f4xx_flash.c ****   *         STM32F412xG and STM32F413_423xx devices.
1124:FWLIB/src/stm32f4xx_flash.c ****   *   
1125:FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_PCROP: specifies the sector(s) to be read/write protected or unprotected.
1126:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1127:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_PCROP: A value between OB_PCROP_Sector0 and OB_PCROP_Sector11 for 
1128:FWLIB/src/stm32f4xx_flash.c ****   *                           STM32F42xxx/43xxx devices and between OB_PCROP_Sector0 and 
1129:FWLIB/src/stm32f4xx_flash.c ****   *                           OB_PCROP_Sector5 for STM32F401xx/411xE devices.
1130:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_PCROP_Sector_All
1131:FWLIB/src/stm32f4xx_flash.c ****   * @param  Newstate: new state of the Write Protection.
1132:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be: ENABLE or DISABLE.
1133:FWLIB/src/stm32f4xx_flash.c ****   * @retval None  
1134:FWLIB/src/stm32f4xx_flash.c ****   */
1135:FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_PCROPConfig(uint32_t OB_PCROP, FunctionalState NewState)
1136:FWLIB/src/stm32f4xx_flash.c **** { 
1137:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
1138:FWLIB/src/stm32f4xx_flash.c ****   
1139:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1140:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_PCROP(OB_PCROP));
1141:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1142:FWLIB/src/stm32f4xx_flash.c ****     
1143:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
1144:FWLIB/src/stm32f4xx_flash.c **** 
1145:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
1146:FWLIB/src/stm32f4xx_flash.c ****   { 
1147:FWLIB/src/stm32f4xx_flash.c ****     if(NewState != DISABLE)
1148:FWLIB/src/stm32f4xx_flash.c ****     {
1149:FWLIB/src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_PCROP;    
1150:FWLIB/src/stm32f4xx_flash.c ****     }
1151:FWLIB/src/stm32f4xx_flash.c ****     else
1152:FWLIB/src/stm32f4xx_flash.c ****     {
1153:FWLIB/src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_PCROP);
1154:FWLIB/src/stm32f4xx_flash.c ****     }
1155:FWLIB/src/stm32f4xx_flash.c ****   }
1156:FWLIB/src/stm32f4xx_flash.c **** }
1157:FWLIB/src/stm32f4xx_flash.c **** 
1158:FWLIB/src/stm32f4xx_flash.c **** /**
1159:FWLIB/src/stm32f4xx_flash.c ****    * @brief Enables or disables the read/write protection (PCROP) of the desired 
1160:FWLIB/src/stm32f4xx_flash.c ****   *         sectors
1161:FWLIB/src/stm32f4xx_flash.c ****   *           
1162:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1163:FWLIB/src/stm32f4xx_flash.c ****   *   
1164:FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_PCROP: specifies the sector(s) to be read/write protected or unprotected.
1165:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1166:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_PCROP: A value between OB_PCROP_Sector12 and OB_PCROP_Sector23 
1167:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_PCROP_Sector_All
ARM GAS  /tmp/ccfgdlY1.s 			page 28


1168:FWLIB/src/stm32f4xx_flash.c ****   * @param  Newstate: new state of the Write Protection.
1169:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be: ENABLE or DISABLE.
1170:FWLIB/src/stm32f4xx_flash.c ****   * @retval None  
1171:FWLIB/src/stm32f4xx_flash.c ****   */
1172:FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_PCROP1Config(uint32_t OB_PCROP, FunctionalState NewState)
1173:FWLIB/src/stm32f4xx_flash.c **** { 
1174:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
1175:FWLIB/src/stm32f4xx_flash.c ****   
1176:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1177:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_PCROP(OB_PCROP));
1178:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1179:FWLIB/src/stm32f4xx_flash.c ****     
1180:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
1181:FWLIB/src/stm32f4xx_flash.c **** 
1182:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
1183:FWLIB/src/stm32f4xx_flash.c ****   { 
1184:FWLIB/src/stm32f4xx_flash.c ****     if(NewState != DISABLE)
1185:FWLIB/src/stm32f4xx_flash.c ****     {
1186:FWLIB/src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_PCROP;
1187:FWLIB/src/stm32f4xx_flash.c ****     }
1188:FWLIB/src/stm32f4xx_flash.c ****     else
1189:FWLIB/src/stm32f4xx_flash.c ****     {
1190:FWLIB/src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~OB_PCROP);
1191:FWLIB/src/stm32f4xx_flash.c ****     }
1192:FWLIB/src/stm32f4xx_flash.c ****   }
1193:FWLIB/src/stm32f4xx_flash.c **** }
1194:FWLIB/src/stm32f4xx_flash.c **** 
1195:FWLIB/src/stm32f4xx_flash.c **** 
1196:FWLIB/src/stm32f4xx_flash.c **** /**
1197:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Sets the read protection level.
1198:FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_RDP: specifies the read protection level.
1199:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1200:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_RDP_Level_0: No protection
1201:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_RDP_Level_1: Read protection of the memory
1202:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_RDP_Level_2: Full chip protection
1203:FWLIB/src/stm32f4xx_flash.c ****   *   
1204:FWLIB/src/stm32f4xx_flash.c ****   * /!\ Warning /!\ When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
1205:FWLIB/src/stm32f4xx_flash.c ****   *    
1206:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
1207:FWLIB/src/stm32f4xx_flash.c ****   */
1208:FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_RDPConfig(uint8_t OB_RDP)
1209:FWLIB/src/stm32f4xx_flash.c **** {
1210:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
1211:FWLIB/src/stm32f4xx_flash.c **** 
1212:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1213:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_RDP(OB_RDP));
1214:FWLIB/src/stm32f4xx_flash.c **** 
1215:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
1216:FWLIB/src/stm32f4xx_flash.c **** 
1217:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
1218:FWLIB/src/stm32f4xx_flash.c ****   {
1219:FWLIB/src/stm32f4xx_flash.c ****     *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = OB_RDP;
1220:FWLIB/src/stm32f4xx_flash.c **** 
1221:FWLIB/src/stm32f4xx_flash.c ****   }
1222:FWLIB/src/stm32f4xx_flash.c **** }
1223:FWLIB/src/stm32f4xx_flash.c **** 
1224:FWLIB/src/stm32f4xx_flash.c **** /**
ARM GAS  /tmp/ccfgdlY1.s 			page 29


1225:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Programs the FLASH User Option Byte: IWDG_SW / RST_STOP / RST_STDBY.    
1226:FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_IWDG: Selects the IWDG mode
1227:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1228:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_IWDG_SW: Software IWDG selected
1229:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_IWDG_HW: Hardware IWDG selected
1230:FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_STOP: Reset event when entering STOP mode.
1231:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter  can be one of the following values:
1232:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_STOP_NoRST: No reset generated when entering in STOP
1233:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_STOP_RST: Reset generated when entering in STOP
1234:FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_STDBY: Reset event when entering Standby mode.
1235:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter  can be one of the following values:
1236:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_STDBY_NoRST: No reset generated when entering in STANDBY
1237:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
1238:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
1239:FWLIB/src/stm32f4xx_flash.c ****   */
1240:FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
1241:FWLIB/src/stm32f4xx_flash.c **** {
1242:FWLIB/src/stm32f4xx_flash.c ****   uint8_t optiontmp = 0xFF;
1243:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE; 
1244:FWLIB/src/stm32f4xx_flash.c **** 
1245:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1246:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
1247:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_STOP_SOURCE(OB_STOP));
1248:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));
1249:FWLIB/src/stm32f4xx_flash.c **** 
1250:FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
1251:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
1252:FWLIB/src/stm32f4xx_flash.c ****   
1253:FWLIB/src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
1254:FWLIB/src/stm32f4xx_flash.c ****   { 
1255:FWLIB/src/stm32f4xx_flash.c **** #if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F469_479xx)
1256:FWLIB/src/stm32f4xx_flash.c ****     /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
1257:FWLIB/src/stm32f4xx_flash.c ****     optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
1258:FWLIB/src/stm32f4xx_flash.c **** #endif /* STM32F427_437xx ||  STM32F429_439xx ||  STM32F469_479xx */
1259:FWLIB/src/stm32f4xx_flash.c **** 
1260:FWLIB/src/stm32f4xx_flash.c **** #if defined(STM32F40_41xxx) || defined(STM32F401xx) || defined(STM32F410xx) || defined(STM32F411xE)
1261:FWLIB/src/stm32f4xx_flash.c ****     /* Mask OPTLOCK, OPTSTRT and BOR_LEV bits */
1262:FWLIB/src/stm32f4xx_flash.c ****     optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0F); 
1263:FWLIB/src/stm32f4xx_flash.c **** #endif /* STM32F40_41xxx || STM32F401xx || STM32F410xx || STM32F411xE || STM32F446xx */ 
1264:FWLIB/src/stm32f4xx_flash.c **** 
1265:FWLIB/src/stm32f4xx_flash.c ****     /* Update User Option Byte */
1266:FWLIB/src/stm32f4xx_flash.c ****     *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = OB_IWDG | (uint8_t)(OB_STDBY | (uint8_t)(OB_STOP | ((uin
1267:FWLIB/src/stm32f4xx_flash.c ****   }  
1268:FWLIB/src/stm32f4xx_flash.c **** }
1269:FWLIB/src/stm32f4xx_flash.c **** 
1270:FWLIB/src/stm32f4xx_flash.c **** /**
1271:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Configure the Dual Bank Boot.
1272:FWLIB/src/stm32f4xx_flash.c ****   *   
1273:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1274:FWLIB/src/stm32f4xx_flash.c ****   *      
1275:FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_BOOT: specifies the Dual Bank Boot Option byte.
1276:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1277:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_Dual_BootEnabled: Dual Bank Boot Enable
1278:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_Dual_BootDisabled: Dual Bank Boot Disabled
1279:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
1280:FWLIB/src/stm32f4xx_flash.c ****   */
1281:FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_BootConfig(uint8_t OB_BOOT)
ARM GAS  /tmp/ccfgdlY1.s 			page 30


1282:FWLIB/src/stm32f4xx_flash.c **** {
 393              		.loc 1 1282 0
 394              		.cfi_startproc
 395              		@ args = 0, pretend = 0, frame = 0
 396              		@ frame_needed = 0, uses_anonymous_args = 0
 397              		@ link register save eliminated.
 398              	.LVL8:
1283:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1284:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_BOOT(OB_BOOT));
1285:FWLIB/src/stm32f4xx_flash.c **** 
1286:FWLIB/src/stm32f4xx_flash.c ****   /* Set Dual Bank Boot */
1287:FWLIB/src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BFB2);
 399              		.loc 1 1287 0
 400 0000 044B     		ldr	r3, .L47
 401 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 402 0004 02F0EF02 		and	r2, r2, #239
 403 0008 1A70     		strb	r2, [r3]
1288:FWLIB/src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOOT;
 404              		.loc 1 1288 0
 405 000a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 406 000c 1043     		orrs	r0, r0, r2
 407              	.LVL9:
 408 000e 1870     		strb	r0, [r3]
 409 0010 7047     		bx	lr
 410              	.L48:
 411 0012 00BF     		.align	2
 412              	.L47:
 413 0014 143C0240 		.word	1073888276
 414              		.cfi_endproc
 415              	.LFE148:
 417              		.section	.text.FLASH_OB_BORConfig,"ax",%progbits
 418              		.align	1
 419              		.global	FLASH_OB_BORConfig
 420              		.syntax unified
 421              		.thumb
 422              		.thumb_func
 423              		.fpu fpv4-sp-d16
 425              	FLASH_OB_BORConfig:
 426              	.LFB149:
1289:FWLIB/src/stm32f4xx_flash.c **** 
1290:FWLIB/src/stm32f4xx_flash.c **** }
1291:FWLIB/src/stm32f4xx_flash.c **** 
1292:FWLIB/src/stm32f4xx_flash.c **** /**
1293:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Sets the BOR Level. 
1294:FWLIB/src/stm32f4xx_flash.c ****   * @param  OB_BOR: specifies the Option Bytes BOR Reset Level.
1295:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1296:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_BOR_LEVEL3: Supply voltage ranges from 2.7 to 3.6 V
1297:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
1298:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
1299:FWLIB/src/stm32f4xx_flash.c ****   *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
1300:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
1301:FWLIB/src/stm32f4xx_flash.c ****   */
1302:FWLIB/src/stm32f4xx_flash.c **** void FLASH_OB_BORConfig(uint8_t OB_BOR)
1303:FWLIB/src/stm32f4xx_flash.c **** {
 427              		.loc 1 1303 0
 428              		.cfi_startproc
 429              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccfgdlY1.s 			page 31


 430              		@ frame_needed = 0, uses_anonymous_args = 0
 431              		@ link register save eliminated.
 432              	.LVL10:
1304:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1305:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_OB_BOR(OB_BOR));
1306:FWLIB/src/stm32f4xx_flash.c **** 
1307:FWLIB/src/stm32f4xx_flash.c ****   /* Set the BOR Level */
1308:FWLIB/src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 433              		.loc 1 1308 0
 434 0000 044B     		ldr	r3, .L50
 435 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 436 0004 02F0F302 		and	r2, r2, #243
 437 0008 1A70     		strb	r2, [r3]
1309:FWLIB/src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOR;
 438              		.loc 1 1309 0
 439 000a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 440 000c 1043     		orrs	r0, r0, r2
 441              	.LVL11:
 442 000e 1870     		strb	r0, [r3]
 443 0010 7047     		bx	lr
 444              	.L51:
 445 0012 00BF     		.align	2
 446              	.L50:
 447 0014 143C0240 		.word	1073888276
 448              		.cfi_endproc
 449              	.LFE149:
 451              		.section	.text.FLASH_OB_GetUser,"ax",%progbits
 452              		.align	1
 453              		.global	FLASH_OB_GetUser
 454              		.syntax unified
 455              		.thumb
 456              		.thumb_func
 457              		.fpu fpv4-sp-d16
 459              	FLASH_OB_GetUser:
 460              	.LFB151:
1310:FWLIB/src/stm32f4xx_flash.c **** 
1311:FWLIB/src/stm32f4xx_flash.c **** }
1312:FWLIB/src/stm32f4xx_flash.c **** 
1313:FWLIB/src/stm32f4xx_flash.c **** /**
1314:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Launch the option byte loading.
1315:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1316:FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
1317:FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
1318:FWLIB/src/stm32f4xx_flash.c ****   */
1319:FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_OB_Launch(void)
1320:FWLIB/src/stm32f4xx_flash.c **** {
1321:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
1322:FWLIB/src/stm32f4xx_flash.c **** 
1323:FWLIB/src/stm32f4xx_flash.c ****   /* Set the OPTSTRT bit in OPTCR register */
1324:FWLIB/src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
1325:FWLIB/src/stm32f4xx_flash.c **** 
1326:FWLIB/src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
1327:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
1328:FWLIB/src/stm32f4xx_flash.c **** 
1329:FWLIB/src/stm32f4xx_flash.c ****   return status;
1330:FWLIB/src/stm32f4xx_flash.c **** }
1331:FWLIB/src/stm32f4xx_flash.c **** 
ARM GAS  /tmp/ccfgdlY1.s 			page 32


1332:FWLIB/src/stm32f4xx_flash.c **** /**
1333:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH User Option Bytes values.
1334:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1335:FWLIB/src/stm32f4xx_flash.c ****   * @retval The FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
1336:FWLIB/src/stm32f4xx_flash.c ****   *         and RST_STDBY(Bit2).
1337:FWLIB/src/stm32f4xx_flash.c ****   */
1338:FWLIB/src/stm32f4xx_flash.c **** uint8_t FLASH_OB_GetUser(void)
1339:FWLIB/src/stm32f4xx_flash.c **** {
 461              		.loc 1 1339 0
 462              		.cfi_startproc
 463              		@ args = 0, pretend = 0, frame = 0
 464              		@ frame_needed = 0, uses_anonymous_args = 0
 465              		@ link register save eliminated.
1340:FWLIB/src/stm32f4xx_flash.c ****   /* Return the User Option Byte */
1341:FWLIB/src/stm32f4xx_flash.c ****   return (uint8_t)(FLASH->OPTCR >> 5);
 466              		.loc 1 1341 0
 467 0000 024B     		ldr	r3, .L53
 468 0002 5869     		ldr	r0, [r3, #20]
1342:FWLIB/src/stm32f4xx_flash.c **** }
 469              		.loc 1 1342 0
 470 0004 C0F34710 		ubfx	r0, r0, #5, #8
 471 0008 7047     		bx	lr
 472              	.L54:
 473 000a 00BF     		.align	2
 474              	.L53:
 475 000c 003C0240 		.word	1073888256
 476              		.cfi_endproc
 477              	.LFE151:
 479              		.section	.text.FLASH_OB_GetWRP,"ax",%progbits
 480              		.align	1
 481              		.global	FLASH_OB_GetWRP
 482              		.syntax unified
 483              		.thumb
 484              		.thumb_func
 485              		.fpu fpv4-sp-d16
 487              	FLASH_OB_GetWRP:
 488              	.LFB152:
1343:FWLIB/src/stm32f4xx_flash.c **** 
1344:FWLIB/src/stm32f4xx_flash.c **** /**
1345:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH Write Protection Option Bytes value.
1346:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1347:FWLIB/src/stm32f4xx_flash.c ****   * @retval The FLASH Write Protection  Option Bytes value
1348:FWLIB/src/stm32f4xx_flash.c ****   */
1349:FWLIB/src/stm32f4xx_flash.c **** uint16_t FLASH_OB_GetWRP(void)
1350:FWLIB/src/stm32f4xx_flash.c **** {
 489              		.loc 1 1350 0
 490              		.cfi_startproc
 491              		@ args = 0, pretend = 0, frame = 0
 492              		@ frame_needed = 0, uses_anonymous_args = 0
 493              		@ link register save eliminated.
1351:FWLIB/src/stm32f4xx_flash.c ****   /* Return the FLASH write protection Register value */
1352:FWLIB/src/stm32f4xx_flash.c ****   return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 494              		.loc 1 1352 0
 495 0000 014B     		ldr	r3, .L56
 496 0002 1888     		ldrh	r0, [r3]
1353:FWLIB/src/stm32f4xx_flash.c **** }
 497              		.loc 1 1353 0
ARM GAS  /tmp/ccfgdlY1.s 			page 33


 498 0004 80B2     		uxth	r0, r0
 499 0006 7047     		bx	lr
 500              	.L57:
 501              		.align	2
 502              	.L56:
 503 0008 163C0240 		.word	1073888278
 504              		.cfi_endproc
 505              	.LFE152:
 507              		.section	.text.FLASH_OB_GetWRP1,"ax",%progbits
 508              		.align	1
 509              		.global	FLASH_OB_GetWRP1
 510              		.syntax unified
 511              		.thumb
 512              		.thumb_func
 513              		.fpu fpv4-sp-d16
 515              	FLASH_OB_GetWRP1:
 516              	.LFB153:
1354:FWLIB/src/stm32f4xx_flash.c **** 
1355:FWLIB/src/stm32f4xx_flash.c **** /**
1356:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH Write Protection Option Bytes value.
1357:FWLIB/src/stm32f4xx_flash.c ****   *   
1358:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1359:FWLIB/src/stm32f4xx_flash.c ****   *   
1360:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1361:FWLIB/src/stm32f4xx_flash.c ****   * @retval The FLASH Write Protection  Option Bytes value
1362:FWLIB/src/stm32f4xx_flash.c ****   */
1363:FWLIB/src/stm32f4xx_flash.c **** uint16_t FLASH_OB_GetWRP1(void)
1364:FWLIB/src/stm32f4xx_flash.c **** {
 517              		.loc 1 1364 0
 518              		.cfi_startproc
 519              		@ args = 0, pretend = 0, frame = 0
 520              		@ frame_needed = 0, uses_anonymous_args = 0
 521              		@ link register save eliminated.
1365:FWLIB/src/stm32f4xx_flash.c ****   /* Return the FLASH write protection Register value */
1366:FWLIB/src/stm32f4xx_flash.c ****   return (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
 522              		.loc 1 1366 0
 523 0000 014B     		ldr	r3, .L59
 524 0002 1888     		ldrh	r0, [r3]
1367:FWLIB/src/stm32f4xx_flash.c **** }
 525              		.loc 1 1367 0
 526 0004 80B2     		uxth	r0, r0
 527 0006 7047     		bx	lr
 528              	.L60:
 529              		.align	2
 530              	.L59:
 531 0008 1A3C0240 		.word	1073888282
 532              		.cfi_endproc
 533              	.LFE153:
 535              		.section	.text.FLASH_OB_GetPCROP,"ax",%progbits
 536              		.align	1
 537              		.global	FLASH_OB_GetPCROP
 538              		.syntax unified
 539              		.thumb
 540              		.thumb_func
 541              		.fpu fpv4-sp-d16
 543              	FLASH_OB_GetPCROP:
 544              	.LFB154:
ARM GAS  /tmp/ccfgdlY1.s 			page 34


1368:FWLIB/src/stm32f4xx_flash.c **** 
1369:FWLIB/src/stm32f4xx_flash.c **** /**
1370:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH PC Read/Write Protection Option Bytes value.
1371:FWLIB/src/stm32f4xx_flash.c ****   *   
1372:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices and STM32F401xx/411xE devi
1373:FWLIB/src/stm32f4xx_flash.c ****   *   
1374:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1375:FWLIB/src/stm32f4xx_flash.c ****   * @retval The FLASH PC Read/Write Protection Option Bytes value
1376:FWLIB/src/stm32f4xx_flash.c ****   */
1377:FWLIB/src/stm32f4xx_flash.c **** uint16_t FLASH_OB_GetPCROP(void)
1378:FWLIB/src/stm32f4xx_flash.c **** {
 545              		.loc 1 1378 0
 546              		.cfi_startproc
 547              		@ args = 0, pretend = 0, frame = 0
 548              		@ frame_needed = 0, uses_anonymous_args = 0
 549              		@ link register save eliminated.
1379:FWLIB/src/stm32f4xx_flash.c ****   /* Return the FLASH PC Read/write protection Register value */
1380:FWLIB/src/stm32f4xx_flash.c ****   return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 550              		.loc 1 1380 0
 551 0000 014B     		ldr	r3, .L62
 552 0002 1888     		ldrh	r0, [r3]
1381:FWLIB/src/stm32f4xx_flash.c **** }
 553              		.loc 1 1381 0
 554 0004 80B2     		uxth	r0, r0
 555 0006 7047     		bx	lr
 556              	.L63:
 557              		.align	2
 558              	.L62:
 559 0008 163C0240 		.word	1073888278
 560              		.cfi_endproc
 561              	.LFE154:
 563              		.section	.text.FLASH_OB_GetPCROP1,"ax",%progbits
 564              		.align	1
 565              		.global	FLASH_OB_GetPCROP1
 566              		.syntax unified
 567              		.thumb
 568              		.thumb_func
 569              		.fpu fpv4-sp-d16
 571              	FLASH_OB_GetPCROP1:
 572              	.LFB155:
1382:FWLIB/src/stm32f4xx_flash.c **** 
1383:FWLIB/src/stm32f4xx_flash.c **** /**
1384:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH PC Read/Write Protection Option Bytes value.
1385:FWLIB/src/stm32f4xx_flash.c ****   *   
1386:FWLIB/src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices. 
1387:FWLIB/src/stm32f4xx_flash.c ****   *     
1388:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1389:FWLIB/src/stm32f4xx_flash.c ****   * @retval The FLASH PC Read/Write Protection Option Bytes value
1390:FWLIB/src/stm32f4xx_flash.c ****   */
1391:FWLIB/src/stm32f4xx_flash.c **** uint16_t FLASH_OB_GetPCROP1(void)
1392:FWLIB/src/stm32f4xx_flash.c **** {
 573              		.loc 1 1392 0
 574              		.cfi_startproc
 575              		@ args = 0, pretend = 0, frame = 0
 576              		@ frame_needed = 0, uses_anonymous_args = 0
 577              		@ link register save eliminated.
1393:FWLIB/src/stm32f4xx_flash.c ****   /* Return the FLASH write protection Register value */
ARM GAS  /tmp/ccfgdlY1.s 			page 35


1394:FWLIB/src/stm32f4xx_flash.c ****   return (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
 578              		.loc 1 1394 0
 579 0000 014B     		ldr	r3, .L65
 580 0002 1888     		ldrh	r0, [r3]
1395:FWLIB/src/stm32f4xx_flash.c **** }
 581              		.loc 1 1395 0
 582 0004 80B2     		uxth	r0, r0
 583 0006 7047     		bx	lr
 584              	.L66:
 585              		.align	2
 586              	.L65:
 587 0008 1A3C0240 		.word	1073888282
 588              		.cfi_endproc
 589              	.LFE155:
 591              		.section	.text.FLASH_OB_GetRDP,"ax",%progbits
 592              		.align	1
 593              		.global	FLASH_OB_GetRDP
 594              		.syntax unified
 595              		.thumb
 596              		.thumb_func
 597              		.fpu fpv4-sp-d16
 599              	FLASH_OB_GetRDP:
 600              	.LFB156:
1396:FWLIB/src/stm32f4xx_flash.c **** 
1397:FWLIB/src/stm32f4xx_flash.c **** /**
1398:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH Read Protection level.
1399:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1400:FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH ReadOut Protection Status:
1401:FWLIB/src/stm32f4xx_flash.c ****   *           - SET, when OB_RDP_Level_1 or OB_RDP_Level_2 is set
1402:FWLIB/src/stm32f4xx_flash.c ****   *           - RESET, when OB_RDP_Level_0 is set
1403:FWLIB/src/stm32f4xx_flash.c ****   */
1404:FWLIB/src/stm32f4xx_flash.c **** FlagStatus FLASH_OB_GetRDP(void)
1405:FWLIB/src/stm32f4xx_flash.c **** {
 601              		.loc 1 1405 0
 602              		.cfi_startproc
 603              		@ args = 0, pretend = 0, frame = 0
 604              		@ frame_needed = 0, uses_anonymous_args = 0
 605              		@ link register save eliminated.
 606              	.LVL12:
1406:FWLIB/src/stm32f4xx_flash.c ****   FlagStatus readstatus = RESET;
1407:FWLIB/src/stm32f4xx_flash.c **** 
1408:FWLIB/src/stm32f4xx_flash.c ****   if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) != (uint8_t)OB_RDP_Level_0))
 607              		.loc 1 1408 0
 608 0000 044B     		ldr	r3, .L70
 609 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 610 0004 DBB2     		uxtb	r3, r3
 611 0006 AA2B     		cmp	r3, #170
 612 0008 01D0     		beq	.L69
1409:FWLIB/src/stm32f4xx_flash.c ****   {
1410:FWLIB/src/stm32f4xx_flash.c ****     readstatus = SET;
 613              		.loc 1 1410 0
 614 000a 0120     		movs	r0, #1
 615 000c 7047     		bx	lr
 616              	.L69:
1411:FWLIB/src/stm32f4xx_flash.c ****   }
1412:FWLIB/src/stm32f4xx_flash.c ****   else
1413:FWLIB/src/stm32f4xx_flash.c ****   {
ARM GAS  /tmp/ccfgdlY1.s 			page 36


1414:FWLIB/src/stm32f4xx_flash.c ****     readstatus = RESET;
 617              		.loc 1 1414 0
 618 000e 0020     		movs	r0, #0
 619              	.LVL13:
1415:FWLIB/src/stm32f4xx_flash.c ****   }
1416:FWLIB/src/stm32f4xx_flash.c ****   return readstatus;
1417:FWLIB/src/stm32f4xx_flash.c **** }
 620              		.loc 1 1417 0
 621 0010 7047     		bx	lr
 622              	.L71:
 623 0012 00BF     		.align	2
 624              	.L70:
 625 0014 153C0240 		.word	1073888277
 626              		.cfi_endproc
 627              	.LFE156:
 629              		.section	.text.FLASH_OB_GetBOR,"ax",%progbits
 630              		.align	1
 631              		.global	FLASH_OB_GetBOR
 632              		.syntax unified
 633              		.thumb
 634              		.thumb_func
 635              		.fpu fpv4-sp-d16
 637              	FLASH_OB_GetBOR:
 638              	.LFB157:
1418:FWLIB/src/stm32f4xx_flash.c **** 
1419:FWLIB/src/stm32f4xx_flash.c **** /**
1420:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH BOR level.
1421:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1422:FWLIB/src/stm32f4xx_flash.c ****   * @retval The FLASH BOR level:
1423:FWLIB/src/stm32f4xx_flash.c ****   *           - OB_BOR_LEVEL3: Supply voltage ranges from 2.7 to 3.6 V
1424:FWLIB/src/stm32f4xx_flash.c ****   *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
1425:FWLIB/src/stm32f4xx_flash.c ****   *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
1426:FWLIB/src/stm32f4xx_flash.c ****   *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
1427:FWLIB/src/stm32f4xx_flash.c ****   */
1428:FWLIB/src/stm32f4xx_flash.c **** uint8_t FLASH_OB_GetBOR(void)
1429:FWLIB/src/stm32f4xx_flash.c **** {
 639              		.loc 1 1429 0
 640              		.cfi_startproc
 641              		@ args = 0, pretend = 0, frame = 0
 642              		@ frame_needed = 0, uses_anonymous_args = 0
 643              		@ link register save eliminated.
1430:FWLIB/src/stm32f4xx_flash.c ****   /* Return the FLASH BOR level */
1431:FWLIB/src/stm32f4xx_flash.c ****   return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 644              		.loc 1 1431 0
 645 0000 024B     		ldr	r3, .L73
 646 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
1432:FWLIB/src/stm32f4xx_flash.c **** }
 647              		.loc 1 1432 0
 648 0004 00F00C00 		and	r0, r0, #12
 649 0008 7047     		bx	lr
 650              	.L74:
 651 000a 00BF     		.align	2
 652              	.L73:
 653 000c 143C0240 		.word	1073888276
 654              		.cfi_endproc
 655              	.LFE157:
 657              		.section	.text.FLASH_ITConfig,"ax",%progbits
ARM GAS  /tmp/ccfgdlY1.s 			page 37


 658              		.align	1
 659              		.global	FLASH_ITConfig
 660              		.syntax unified
 661              		.thumb
 662              		.thumb_func
 663              		.fpu fpv4-sp-d16
 665              	FLASH_ITConfig:
 666              	.LFB158:
1433:FWLIB/src/stm32f4xx_flash.c **** 
1434:FWLIB/src/stm32f4xx_flash.c **** /**
1435:FWLIB/src/stm32f4xx_flash.c ****   * @}
1436:FWLIB/src/stm32f4xx_flash.c ****   */
1437:FWLIB/src/stm32f4xx_flash.c **** 
1438:FWLIB/src/stm32f4xx_flash.c **** /** @defgroup FLASH_Group4 Interrupts and flags management functions
1439:FWLIB/src/stm32f4xx_flash.c ****  *  @brief   Interrupts and flags management functions
1440:FWLIB/src/stm32f4xx_flash.c ****  *
1441:FWLIB/src/stm32f4xx_flash.c **** @verbatim   
1442:FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================
1443:FWLIB/src/stm32f4xx_flash.c ****               ##### Interrupts and flags management functions #####
1444:FWLIB/src/stm32f4xx_flash.c ****  ===============================================================================  
1445:FWLIB/src/stm32f4xx_flash.c **** @endverbatim
1446:FWLIB/src/stm32f4xx_flash.c ****   * @{
1447:FWLIB/src/stm32f4xx_flash.c ****   */
1448:FWLIB/src/stm32f4xx_flash.c **** 
1449:FWLIB/src/stm32f4xx_flash.c **** /**
1450:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Enables or disables the specified FLASH interrupts.
1451:FWLIB/src/stm32f4xx_flash.c ****   * @param  FLASH_IT: specifies the FLASH interrupt sources to be enabled or disabled.
1452:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be any combination of the following values:
1453:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_IT_ERR: FLASH Error Interrupt
1454:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_IT_EOP: FLASH end of operation Interrupt
1455:FWLIB/src/stm32f4xx_flash.c ****   * @retval None 
1456:FWLIB/src/stm32f4xx_flash.c ****   */
1457:FWLIB/src/stm32f4xx_flash.c **** void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
1458:FWLIB/src/stm32f4xx_flash.c **** {
 667              		.loc 1 1458 0
 668              		.cfi_startproc
 669              		@ args = 0, pretend = 0, frame = 0
 670              		@ frame_needed = 0, uses_anonymous_args = 0
 671              		@ link register save eliminated.
 672              	.LVL14:
1459:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1460:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_IT(FLASH_IT)); 
1461:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1462:FWLIB/src/stm32f4xx_flash.c **** 
1463:FWLIB/src/stm32f4xx_flash.c ****   if(NewState != DISABLE)
 673              		.loc 1 1463 0
 674 0000 29B9     		cbnz	r1, .L78
1464:FWLIB/src/stm32f4xx_flash.c ****   {
1465:FWLIB/src/stm32f4xx_flash.c ****     /* Enable the interrupt sources */
1466:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_IT;
1467:FWLIB/src/stm32f4xx_flash.c ****   }
1468:FWLIB/src/stm32f4xx_flash.c ****   else
1469:FWLIB/src/stm32f4xx_flash.c ****   {
1470:FWLIB/src/stm32f4xx_flash.c ****     /* Disable the interrupt sources */
1471:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= ~(uint32_t)FLASH_IT;
 675              		.loc 1 1471 0
 676 0002 054A     		ldr	r2, .L79
ARM GAS  /tmp/ccfgdlY1.s 			page 38


 677 0004 1369     		ldr	r3, [r2, #16]
 678 0006 23EA0000 		bic	r0, r3, r0
 679              	.LVL15:
 680 000a 1061     		str	r0, [r2, #16]
 681 000c 7047     		bx	lr
 682              	.LVL16:
 683              	.L78:
1466:FWLIB/src/stm32f4xx_flash.c ****   }
 684              		.loc 1 1466 0
 685 000e 024A     		ldr	r2, .L79
 686 0010 1369     		ldr	r3, [r2, #16]
 687 0012 1843     		orrs	r0, r0, r3
 688              	.LVL17:
 689 0014 1061     		str	r0, [r2, #16]
 690 0016 7047     		bx	lr
 691              	.L80:
 692              		.align	2
 693              	.L79:
 694 0018 003C0240 		.word	1073888256
 695              		.cfi_endproc
 696              	.LFE158:
 698              		.section	.text.FLASH_GetFlagStatus,"ax",%progbits
 699              		.align	1
 700              		.global	FLASH_GetFlagStatus
 701              		.syntax unified
 702              		.thumb
 703              		.thumb_func
 704              		.fpu fpv4-sp-d16
 706              	FLASH_GetFlagStatus:
 707              	.LFB159:
1472:FWLIB/src/stm32f4xx_flash.c ****   }
1473:FWLIB/src/stm32f4xx_flash.c **** }
1474:FWLIB/src/stm32f4xx_flash.c **** 
1475:FWLIB/src/stm32f4xx_flash.c **** /**
1476:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Checks whether the specified FLASH flag is set or not.
1477:FWLIB/src/stm32f4xx_flash.c ****   * @param  FLASH_FLAG: specifies the FLASH flag to check.
1478:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1479:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_EOP: FLASH End of Operation flag 
1480:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_OPERR: FLASH operation Error flag 
1481:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_WRPERR: FLASH Write protected error flag 
1482:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGAERR: FLASH Programming Alignment error flag
1483:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGPERR: FLASH Programming Parallelism error flag
1484:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
1485:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_RDERR: FLASH (PCROP) Read Protection error flag (STM32F42xx/43xxx an
1486:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_BSY: FLASH Busy flag
1487:FWLIB/src/stm32f4xx_flash.c ****   * @retval The new state of FLASH_FLAG (SET or RESET).
1488:FWLIB/src/stm32f4xx_flash.c ****   */
1489:FWLIB/src/stm32f4xx_flash.c **** FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
1490:FWLIB/src/stm32f4xx_flash.c **** {
 708              		.loc 1 1490 0
 709              		.cfi_startproc
 710              		@ args = 0, pretend = 0, frame = 0
 711              		@ frame_needed = 0, uses_anonymous_args = 0
 712              		@ link register save eliminated.
 713              	.LVL18:
1491:FWLIB/src/stm32f4xx_flash.c ****   FlagStatus bitstatus = RESET;
1492:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
ARM GAS  /tmp/ccfgdlY1.s 			page 39


1493:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));
1494:FWLIB/src/stm32f4xx_flash.c **** 
1495:FWLIB/src/stm32f4xx_flash.c ****   if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 714              		.loc 1 1495 0
 715 0000 034B     		ldr	r3, .L85
 716 0002 DB68     		ldr	r3, [r3, #12]
 717 0004 0342     		tst	r3, r0
 718 0006 01D1     		bne	.L84
1496:FWLIB/src/stm32f4xx_flash.c ****   {
1497:FWLIB/src/stm32f4xx_flash.c ****     bitstatus = SET;
1498:FWLIB/src/stm32f4xx_flash.c ****   }
1499:FWLIB/src/stm32f4xx_flash.c ****   else
1500:FWLIB/src/stm32f4xx_flash.c ****   {
1501:FWLIB/src/stm32f4xx_flash.c ****     bitstatus = RESET;
 719              		.loc 1 1501 0
 720 0008 0020     		movs	r0, #0
 721              	.LVL19:
1502:FWLIB/src/stm32f4xx_flash.c ****   }
1503:FWLIB/src/stm32f4xx_flash.c ****   /* Return the new state of FLASH_FLAG (SET or RESET) */
1504:FWLIB/src/stm32f4xx_flash.c ****   return bitstatus; 
1505:FWLIB/src/stm32f4xx_flash.c **** }
 722              		.loc 1 1505 0
 723 000a 7047     		bx	lr
 724              	.LVL20:
 725              	.L84:
1497:FWLIB/src/stm32f4xx_flash.c ****   }
 726              		.loc 1 1497 0
 727 000c 0120     		movs	r0, #1
 728              	.LVL21:
 729 000e 7047     		bx	lr
 730              	.L86:
 731              		.align	2
 732              	.L85:
 733 0010 003C0240 		.word	1073888256
 734              		.cfi_endproc
 735              	.LFE159:
 737              		.section	.text.FLASH_ClearFlag,"ax",%progbits
 738              		.align	1
 739              		.global	FLASH_ClearFlag
 740              		.syntax unified
 741              		.thumb
 742              		.thumb_func
 743              		.fpu fpv4-sp-d16
 745              	FLASH_ClearFlag:
 746              	.LFB160:
1506:FWLIB/src/stm32f4xx_flash.c **** 
1507:FWLIB/src/stm32f4xx_flash.c **** /**
1508:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Clears the FLASH's pending flags.
1509:FWLIB/src/stm32f4xx_flash.c ****   * @param  FLASH_FLAG: specifies the FLASH flags to clear.
1510:FWLIB/src/stm32f4xx_flash.c ****   *          This parameter can be any combination of the following values:
1511:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_EOP: FLASH End of Operation flag 
1512:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_OPERR: FLASH operation Error flag 
1513:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_WRPERR: FLASH Write protected error flag 
1514:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGAERR: FLASH Programming Alignment error flag 
1515:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGPERR: FLASH Programming Parallelism error flag
1516:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
1517:FWLIB/src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_RDERR: FLASH Read Protection error flag (STM32F42xx/43xxx and STM32F
ARM GAS  /tmp/ccfgdlY1.s 			page 40


1518:FWLIB/src/stm32f4xx_flash.c ****   * @retval None
1519:FWLIB/src/stm32f4xx_flash.c ****   */
1520:FWLIB/src/stm32f4xx_flash.c **** void FLASH_ClearFlag(uint32_t FLASH_FLAG)
1521:FWLIB/src/stm32f4xx_flash.c **** {
 747              		.loc 1 1521 0
 748              		.cfi_startproc
 749              		@ args = 0, pretend = 0, frame = 0
 750              		@ frame_needed = 0, uses_anonymous_args = 0
 751              		@ link register save eliminated.
 752              	.LVL22:
1522:FWLIB/src/stm32f4xx_flash.c ****   /* Check the parameters */
1523:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
1524:FWLIB/src/stm32f4xx_flash.c ****   
1525:FWLIB/src/stm32f4xx_flash.c ****   /* Clear the flags */
1526:FWLIB/src/stm32f4xx_flash.c ****   FLASH->SR = FLASH_FLAG;
 753              		.loc 1 1526 0
 754 0000 014B     		ldr	r3, .L88
 755 0002 D860     		str	r0, [r3, #12]
 756 0004 7047     		bx	lr
 757              	.L89:
 758 0006 00BF     		.align	2
 759              	.L88:
 760 0008 003C0240 		.word	1073888256
 761              		.cfi_endproc
 762              	.LFE160:
 764              		.section	.text.FLASH_GetStatus,"ax",%progbits
 765              		.align	1
 766              		.global	FLASH_GetStatus
 767              		.syntax unified
 768              		.thumb
 769              		.thumb_func
 770              		.fpu fpv4-sp-d16
 772              	FLASH_GetStatus:
 773              	.LFB161:
1527:FWLIB/src/stm32f4xx_flash.c **** }
1528:FWLIB/src/stm32f4xx_flash.c **** 
1529:FWLIB/src/stm32f4xx_flash.c **** /**
1530:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH Status.
1531:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1532:FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
1533:FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_RD, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
1534:FWLIB/src/stm32f4xx_flash.c ****   */
1535:FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_GetStatus(void)
1536:FWLIB/src/stm32f4xx_flash.c **** {
 774              		.loc 1 1536 0
 775              		.cfi_startproc
 776              		@ args = 0, pretend = 0, frame = 0
 777              		@ frame_needed = 0, uses_anonymous_args = 0
 778              		@ link register save eliminated.
 779              	.LVL23:
1537:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status flashstatus = FLASH_COMPLETE;
1538:FWLIB/src/stm32f4xx_flash.c ****   
1539:FWLIB/src/stm32f4xx_flash.c ****   if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 780              		.loc 1 1539 0
 781 0000 124B     		ldr	r3, .L100
 782 0002 DB68     		ldr	r3, [r3, #12]
 783 0004 13F4803F 		tst	r3, #65536
ARM GAS  /tmp/ccfgdlY1.s 			page 41


 784 0008 1BD1     		bne	.L92
1540:FWLIB/src/stm32f4xx_flash.c ****   {
1541:FWLIB/src/stm32f4xx_flash.c ****     flashstatus = FLASH_BUSY;
1542:FWLIB/src/stm32f4xx_flash.c ****   }
1543:FWLIB/src/stm32f4xx_flash.c ****   else 
1544:FWLIB/src/stm32f4xx_flash.c ****   {  
1545:FWLIB/src/stm32f4xx_flash.c ****     if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 785              		.loc 1 1545 0
 786 000a 104B     		ldr	r3, .L100
 787 000c DB68     		ldr	r3, [r3, #12]
 788 000e 13F0100F 		tst	r3, #16
 789 0012 01D0     		beq	.L97
1546:FWLIB/src/stm32f4xx_flash.c ****     { 
1547:FWLIB/src/stm32f4xx_flash.c ****       flashstatus = FLASH_ERROR_WRP;
 790              		.loc 1 1547 0
 791 0014 0620     		movs	r0, #6
 792 0016 7047     		bx	lr
 793              	.L97:
1548:FWLIB/src/stm32f4xx_flash.c ****     }
1549:FWLIB/src/stm32f4xx_flash.c ****     else
1550:FWLIB/src/stm32f4xx_flash.c ****     {
1551:FWLIB/src/stm32f4xx_flash.c ****       if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
 794              		.loc 1 1551 0
 795 0018 0C4B     		ldr	r3, .L100
 796 001a DB68     		ldr	r3, [r3, #12]
 797 001c 13F4807F 		tst	r3, #256
 798 0020 01D0     		beq	.L98
1552:FWLIB/src/stm32f4xx_flash.c ****       { 
1553:FWLIB/src/stm32f4xx_flash.c ****         flashstatus = FLASH_ERROR_RD;
 799              		.loc 1 1553 0
 800 0022 0220     		movs	r0, #2
 801 0024 7047     		bx	lr
 802              	.L98:
1554:FWLIB/src/stm32f4xx_flash.c ****       } 
1555:FWLIB/src/stm32f4xx_flash.c ****       else 
1556:FWLIB/src/stm32f4xx_flash.c ****       {
1557:FWLIB/src/stm32f4xx_flash.c ****         if((FLASH->SR & (uint32_t)0xE0) != (uint32_t)0x00)
 803              		.loc 1 1557 0
 804 0026 094B     		ldr	r3, .L100
 805 0028 DB68     		ldr	r3, [r3, #12]
 806 002a 13F0E00F 		tst	r3, #224
 807 002e 01D0     		beq	.L99
1558:FWLIB/src/stm32f4xx_flash.c ****         {
1559:FWLIB/src/stm32f4xx_flash.c ****           flashstatus = FLASH_ERROR_PROGRAM; 
 808              		.loc 1 1559 0
 809 0030 0720     		movs	r0, #7
 810 0032 7047     		bx	lr
 811              	.L99:
1560:FWLIB/src/stm32f4xx_flash.c ****         }
1561:FWLIB/src/stm32f4xx_flash.c ****         else
1562:FWLIB/src/stm32f4xx_flash.c ****         {
1563:FWLIB/src/stm32f4xx_flash.c ****           if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 812              		.loc 1 1563 0
 813 0034 054B     		ldr	r3, .L100
 814 0036 DB68     		ldr	r3, [r3, #12]
 815 0038 13F0020F 		tst	r3, #2
 816 003c 03D0     		beq	.L96
ARM GAS  /tmp/ccfgdlY1.s 			page 42


1564:FWLIB/src/stm32f4xx_flash.c ****           {
1565:FWLIB/src/stm32f4xx_flash.c ****             flashstatus = FLASH_ERROR_OPERATION;
 817              		.loc 1 1565 0
 818 003e 0820     		movs	r0, #8
 819 0040 7047     		bx	lr
 820              	.L92:
1541:FWLIB/src/stm32f4xx_flash.c ****   }
 821              		.loc 1 1541 0
 822 0042 0120     		movs	r0, #1
 823 0044 7047     		bx	lr
 824              	.L96:
1566:FWLIB/src/stm32f4xx_flash.c ****           }
1567:FWLIB/src/stm32f4xx_flash.c ****           else
1568:FWLIB/src/stm32f4xx_flash.c ****           {
1569:FWLIB/src/stm32f4xx_flash.c ****             flashstatus = FLASH_COMPLETE;
 825              		.loc 1 1569 0
 826 0046 0920     		movs	r0, #9
 827              	.LVL24:
1570:FWLIB/src/stm32f4xx_flash.c ****           }
1571:FWLIB/src/stm32f4xx_flash.c ****         }
1572:FWLIB/src/stm32f4xx_flash.c ****       }
1573:FWLIB/src/stm32f4xx_flash.c ****     }
1574:FWLIB/src/stm32f4xx_flash.c ****   }
1575:FWLIB/src/stm32f4xx_flash.c ****   /* Return the FLASH Status */
1576:FWLIB/src/stm32f4xx_flash.c ****   return flashstatus;
1577:FWLIB/src/stm32f4xx_flash.c **** }
 828              		.loc 1 1577 0
 829 0048 7047     		bx	lr
 830              	.L101:
 831 004a 00BF     		.align	2
 832              	.L100:
 833 004c 003C0240 		.word	1073888256
 834              		.cfi_endproc
 835              	.LFE161:
 837              		.section	.text.FLASH_WaitForLastOperation,"ax",%progbits
 838              		.align	1
 839              		.global	FLASH_WaitForLastOperation
 840              		.syntax unified
 841              		.thumb
 842              		.thumb_func
 843              		.fpu fpv4-sp-d16
 845              	FLASH_WaitForLastOperation:
 846              	.LFB162:
1578:FWLIB/src/stm32f4xx_flash.c **** 
1579:FWLIB/src/stm32f4xx_flash.c **** /**
1580:FWLIB/src/stm32f4xx_flash.c ****   * @brief  Waits for a FLASH operation to complete.
1581:FWLIB/src/stm32f4xx_flash.c ****   * @param  None
1582:FWLIB/src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
1583:FWLIB/src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
1584:FWLIB/src/stm32f4xx_flash.c ****   */
1585:FWLIB/src/stm32f4xx_flash.c **** FLASH_Status FLASH_WaitForLastOperation(void)
1586:FWLIB/src/stm32f4xx_flash.c **** { 
 847              		.loc 1 1586 0
 848              		.cfi_startproc
 849              		@ args = 0, pretend = 0, frame = 8
 850              		@ frame_needed = 0, uses_anonymous_args = 0
 851 0000 00B5     		push	{lr}
ARM GAS  /tmp/ccfgdlY1.s 			page 43


 852              	.LCFI0:
 853              		.cfi_def_cfa_offset 4
 854              		.cfi_offset 14, -4
 855 0002 83B0     		sub	sp, sp, #12
 856              	.LCFI1:
 857              		.cfi_def_cfa_offset 16
1587:FWLIB/src/stm32f4xx_flash.c ****   __IO FLASH_Status status = FLASH_COMPLETE;
 858              		.loc 1 1587 0
 859 0004 0923     		movs	r3, #9
 860 0006 8DF80730 		strb	r3, [sp, #7]
1588:FWLIB/src/stm32f4xx_flash.c ****    
1589:FWLIB/src/stm32f4xx_flash.c ****   /* Check for the FLASH Status */
1590:FWLIB/src/stm32f4xx_flash.c ****   status = FLASH_GetStatus();
 861              		.loc 1 1590 0
 862 000a FFF7FEFF 		bl	FLASH_GetStatus
 863              	.LVL25:
 864 000e 8DF80700 		strb	r0, [sp, #7]
1591:FWLIB/src/stm32f4xx_flash.c **** 
1592:FWLIB/src/stm32f4xx_flash.c ****   /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
1593:FWLIB/src/stm32f4xx_flash.c ****      Even if the FLASH operation fails, the BUSY flag will be reset and an error
1594:FWLIB/src/stm32f4xx_flash.c ****      flag will be set */
1595:FWLIB/src/stm32f4xx_flash.c ****   while(status == FLASH_BUSY)
 865              		.loc 1 1595 0
 866 0012 03E0     		b	.L103
 867              	.L104:
1596:FWLIB/src/stm32f4xx_flash.c ****   {
1597:FWLIB/src/stm32f4xx_flash.c ****     status = FLASH_GetStatus();
 868              		.loc 1 1597 0
 869 0014 FFF7FEFF 		bl	FLASH_GetStatus
 870              	.LVL26:
 871 0018 8DF80700 		strb	r0, [sp, #7]
 872              	.L103:
1595:FWLIB/src/stm32f4xx_flash.c ****   {
 873              		.loc 1 1595 0
 874 001c 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 875 0020 DBB2     		uxtb	r3, r3
 876 0022 012B     		cmp	r3, #1
 877 0024 F6D0     		beq	.L104
1598:FWLIB/src/stm32f4xx_flash.c ****   }
1599:FWLIB/src/stm32f4xx_flash.c ****   /* Return the operation status */
1600:FWLIB/src/stm32f4xx_flash.c ****   return status;
 878              		.loc 1 1600 0
 879 0026 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
1601:FWLIB/src/stm32f4xx_flash.c **** }
 880              		.loc 1 1601 0
 881 002a 03B0     		add	sp, sp, #12
 882              	.LCFI2:
 883              		.cfi_def_cfa_offset 4
 884              		@ sp needed
 885 002c 5DF804FB 		ldr	pc, [sp], #4
 886              		.cfi_endproc
 887              	.LFE162:
 889              		.section	.text.FLASH_EraseSector,"ax",%progbits
 890              		.align	1
 891              		.global	FLASH_EraseSector
 892              		.syntax unified
 893              		.thumb
ARM GAS  /tmp/ccfgdlY1.s 			page 44


 894              		.thumb_func
 895              		.fpu fpv4-sp-d16
 897              	FLASH_EraseSector:
 898              	.LFB131:
 476:FWLIB/src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 899              		.loc 1 476 0
 900              		.cfi_startproc
 901              		@ args = 0, pretend = 0, frame = 0
 902              		@ frame_needed = 0, uses_anonymous_args = 0
 903              	.LVL27:
 904 0000 70B5     		push	{r4, r5, r6, lr}
 905              	.LCFI3:
 906              		.cfi_def_cfa_offset 16
 907              		.cfi_offset 4, -16
 908              		.cfi_offset 5, -12
 909              		.cfi_offset 6, -8
 910              		.cfi_offset 14, -4
 911 0002 0646     		mov	r6, r0
 912              	.LVL28:
 484:FWLIB/src/stm32f4xx_flash.c ****   {
 913              		.loc 1 484 0
 914 0004 49B1     		cbz	r1, .L109
 488:FWLIB/src/stm32f4xx_flash.c ****   {
 915              		.loc 1 488 0
 916 0006 0129     		cmp	r1, #1
 917 0008 0DD0     		beq	.L110
 492:FWLIB/src/stm32f4xx_flash.c ****   {
 918              		.loc 1 492 0
 919 000a 0229     		cmp	r1, #2
 920 000c 02D0     		beq	.L113
 498:FWLIB/src/stm32f4xx_flash.c ****   }
 921              		.loc 1 498 0
 922 000e 4FF44075 		mov	r5, #768
 923 0012 03E0     		b	.L107
 924              	.L113:
 494:FWLIB/src/stm32f4xx_flash.c ****   }
 925              		.loc 1 494 0
 926 0014 4FF40075 		mov	r5, #512
 927 0018 00E0     		b	.L107
 928              	.L109:
 486:FWLIB/src/stm32f4xx_flash.c ****   }
 929              		.loc 1 486 0
 930 001a 0025     		movs	r5, #0
 931              	.L107:
 932              	.LVL29:
 501:FWLIB/src/stm32f4xx_flash.c ****   
 933              		.loc 1 501 0
 934 001c FFF7FEFF 		bl	FLASH_WaitForLastOperation
 935              	.LVL30:
 503:FWLIB/src/stm32f4xx_flash.c ****   { 
 936              		.loc 1 503 0
 937 0020 0928     		cmp	r0, #9
 938 0022 03D0     		beq	.L114
 939              	.LVL31:
 940              	.L108:
 521:FWLIB/src/stm32f4xx_flash.c **** 
 941              		.loc 1 521 0
ARM GAS  /tmp/ccfgdlY1.s 			page 45


 942 0024 70BD     		pop	{r4, r5, r6, pc}
 943              	.LVL32:
 944              	.L110:
 490:FWLIB/src/stm32f4xx_flash.c ****   }
 945              		.loc 1 490 0
 946 0026 4FF48075 		mov	r5, #256
 947 002a F7E7     		b	.L107
 948              	.LVL33:
 949              	.L114:
 506:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= tmp_psize;
 950              		.loc 1 506 0
 951 002c 0F4C     		ldr	r4, .L115
 952 002e 2369     		ldr	r3, [r4, #16]
 953 0030 23F44073 		bic	r3, r3, #768
 954 0034 2361     		str	r3, [r4, #16]
 507:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= SECTOR_MASK;
 955              		.loc 1 507 0
 956 0036 2369     		ldr	r3, [r4, #16]
 957 0038 1D43     		orrs	r5, r5, r3
 958              	.LVL34:
 959 003a 2561     		str	r5, [r4, #16]
 508:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 960              		.loc 1 508 0
 961 003c 2369     		ldr	r3, [r4, #16]
 962 003e 23F0F803 		bic	r3, r3, #248
 963 0042 2361     		str	r3, [r4, #16]
 509:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 964              		.loc 1 509 0
 965 0044 2369     		ldr	r3, [r4, #16]
 966 0046 1E43     		orrs	r6, r6, r3
 967              	.LVL35:
 968 0048 46F00206 		orr	r6, r6, #2
 969 004c 2661     		str	r6, [r4, #16]
 510:FWLIB/src/stm32f4xx_flash.c ****     
 970              		.loc 1 510 0
 971 004e 2369     		ldr	r3, [r4, #16]
 972 0050 43F48033 		orr	r3, r3, #65536
 973 0054 2361     		str	r3, [r4, #16]
 513:FWLIB/src/stm32f4xx_flash.c ****     
 974              		.loc 1 513 0
 975 0056 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 976              	.LVL36:
 516:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR &= SECTOR_MASK; 
 977              		.loc 1 516 0
 978 005a 2369     		ldr	r3, [r4, #16]
 979 005c 23F00203 		bic	r3, r3, #2
 980 0060 2361     		str	r3, [r4, #16]
 517:FWLIB/src/stm32f4xx_flash.c ****   }
 981              		.loc 1 517 0
 982 0062 2369     		ldr	r3, [r4, #16]
 983 0064 23F0F803 		bic	r3, r3, #248
 984 0068 2361     		str	r3, [r4, #16]
 985 006a DBE7     		b	.L108
 986              	.L116:
 987              		.align	2
 988              	.L115:
 989 006c 003C0240 		.word	1073888256
ARM GAS  /tmp/ccfgdlY1.s 			page 46


 990              		.cfi_endproc
 991              	.LFE131:
 993              		.section	.text.FLASH_EraseAllSectors,"ax",%progbits
 994              		.align	1
 995              		.global	FLASH_EraseAllSectors
 996              		.syntax unified
 997              		.thumb
 998              		.thumb_func
 999              		.fpu fpv4-sp-d16
 1001              	FLASH_EraseAllSectors:
 1002              	.LFB132:
 544:FWLIB/src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 1003              		.loc 1 544 0
 1004              		.cfi_startproc
 1005              		@ args = 0, pretend = 0, frame = 0
 1006              		@ frame_needed = 0, uses_anonymous_args = 0
 1007              	.LVL37:
 1008 0000 10B5     		push	{r4, lr}
 1009              	.LCFI4:
 1010              		.cfi_def_cfa_offset 8
 1011              		.cfi_offset 4, -8
 1012              		.cfi_offset 14, -4
 1013 0002 0446     		mov	r4, r0
 1014              	.LVL38:
 549:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 1015              		.loc 1 549 0
 1016 0004 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1017              	.LVL39:
 552:FWLIB/src/stm32f4xx_flash.c ****   {
 1018              		.loc 1 552 0
 1019 0008 4CB1     		cbz	r4, .L120
 556:FWLIB/src/stm32f4xx_flash.c ****   {
 1020              		.loc 1 556 0
 1021 000a 012C     		cmp	r4, #1
 1022 000c 0BD0     		beq	.L121
 560:FWLIB/src/stm32f4xx_flash.c ****   {
 1023              		.loc 1 560 0
 1024 000e 022C     		cmp	r4, #2
 1025 0010 02D0     		beq	.L124
 566:FWLIB/src/stm32f4xx_flash.c ****   }  
 1026              		.loc 1 566 0
 1027 0012 4FF44073 		mov	r3, #768
 1028 0016 03E0     		b	.L118
 1029              	.L124:
 562:FWLIB/src/stm32f4xx_flash.c ****   }
 1030              		.loc 1 562 0
 1031 0018 4FF40073 		mov	r3, #512
 1032 001c 00E0     		b	.L118
 1033              	.L120:
 554:FWLIB/src/stm32f4xx_flash.c ****   }
 1034              		.loc 1 554 0
 1035 001e 0023     		movs	r3, #0
 1036              	.L118:
 1037              	.LVL40:
 568:FWLIB/src/stm32f4xx_flash.c ****   {
 1038              		.loc 1 568 0
 1039 0020 0928     		cmp	r0, #9
ARM GAS  /tmp/ccfgdlY1.s 			page 47


 1040 0022 03D0     		beq	.L125
 1041              	.LVL41:
 1042              	.L119:
 600:FWLIB/src/stm32f4xx_flash.c **** 
 1043              		.loc 1 600 0
 1044 0024 10BD     		pop	{r4, pc}
 1045              	.LVL42:
 1046              	.L121:
 558:FWLIB/src/stm32f4xx_flash.c ****   }
 1047              		.loc 1 558 0
 1048 0026 4FF48073 		mov	r3, #256
 1049 002a F9E7     		b	.L118
 1050              	.LVL43:
 1051              	.L125:
 585:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= tmp_psize;
 1052              		.loc 1 585 0
 1053 002c 0B4C     		ldr	r4, .L126
 1054 002e 2269     		ldr	r2, [r4, #16]
 1055 0030 22F44072 		bic	r2, r2, #768
 1056 0034 2261     		str	r2, [r4, #16]
 586:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_MER;
 1057              		.loc 1 586 0
 1058 0036 2269     		ldr	r2, [r4, #16]
 1059 0038 1343     		orrs	r3, r3, r2
 1060              	.LVL44:
 1061 003a 2361     		str	r3, [r4, #16]
 587:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 1062              		.loc 1 587 0
 1063 003c 2369     		ldr	r3, [r4, #16]
 1064 003e 43F00403 		orr	r3, r3, #4
 1065 0042 2361     		str	r3, [r4, #16]
 588:FWLIB/src/stm32f4xx_flash.c ****     
 1066              		.loc 1 588 0
 1067 0044 2369     		ldr	r3, [r4, #16]
 1068 0046 43F48033 		orr	r3, r3, #65536
 1069 004a 2361     		str	r3, [r4, #16]
 591:FWLIB/src/stm32f4xx_flash.c **** 
 1070              		.loc 1 591 0
 1071 004c FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1072              	.LVL45:
 594:FWLIB/src/stm32f4xx_flash.c **** #endif /* STM32F40_41xxx || STM32F401xx || STM32F410xx || STM32F411xE || STM32F412xG || STM32F413_4
 1073              		.loc 1 594 0
 1074 0050 2369     		ldr	r3, [r4, #16]
 1075 0052 23F00403 		bic	r3, r3, #4
 1076 0056 2361     		str	r3, [r4, #16]
 1077 0058 E4E7     		b	.L119
 1078              	.L127:
 1079 005a 00BF     		.align	2
 1080              	.L126:
 1081 005c 003C0240 		.word	1073888256
 1082              		.cfi_endproc
 1083              	.LFE132:
 1085              		.section	.text.FLASH_EraseAllBank1Sectors,"ax",%progbits
 1086              		.align	1
 1087              		.global	FLASH_EraseAllBank1Sectors
 1088              		.syntax unified
 1089              		.thumb
ARM GAS  /tmp/ccfgdlY1.s 			page 48


 1090              		.thumb_func
 1091              		.fpu fpv4-sp-d16
 1093              	FLASH_EraseAllBank1Sectors:
 1094              	.LFB133:
 625:FWLIB/src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 1095              		.loc 1 625 0
 1096              		.cfi_startproc
 1097              		@ args = 0, pretend = 0, frame = 0
 1098              		@ frame_needed = 0, uses_anonymous_args = 0
 1099              	.LVL46:
 1100 0000 10B5     		push	{r4, lr}
 1101              	.LCFI5:
 1102              		.cfi_def_cfa_offset 8
 1103              		.cfi_offset 4, -8
 1104              		.cfi_offset 14, -4
 1105 0002 0446     		mov	r4, r0
 1106              	.LVL47:
 630:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 1107              		.loc 1 630 0
 1108 0004 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1109              	.LVL48:
 633:FWLIB/src/stm32f4xx_flash.c ****   {
 1110              		.loc 1 633 0
 1111 0008 4CB1     		cbz	r4, .L131
 637:FWLIB/src/stm32f4xx_flash.c ****   {
 1112              		.loc 1 637 0
 1113 000a 012C     		cmp	r4, #1
 1114 000c 0BD0     		beq	.L132
 641:FWLIB/src/stm32f4xx_flash.c ****   {
 1115              		.loc 1 641 0
 1116 000e 022C     		cmp	r4, #2
 1117 0010 02D0     		beq	.L135
 647:FWLIB/src/stm32f4xx_flash.c ****   }  
 1118              		.loc 1 647 0
 1119 0012 4FF44073 		mov	r3, #768
 1120 0016 03E0     		b	.L129
 1121              	.L135:
 643:FWLIB/src/stm32f4xx_flash.c ****   }
 1122              		.loc 1 643 0
 1123 0018 4FF40073 		mov	r3, #512
 1124 001c 00E0     		b	.L129
 1125              	.L131:
 635:FWLIB/src/stm32f4xx_flash.c ****   }
 1126              		.loc 1 635 0
 1127 001e 0023     		movs	r3, #0
 1128              	.L129:
 1129              	.LVL49:
 649:FWLIB/src/stm32f4xx_flash.c ****   {
 1130              		.loc 1 649 0
 1131 0020 0928     		cmp	r0, #9
 1132 0022 03D0     		beq	.L136
 1133              	.LVL50:
 1134              	.L130:
 666:FWLIB/src/stm32f4xx_flash.c **** 
 1135              		.loc 1 666 0
 1136 0024 10BD     		pop	{r4, pc}
 1137              	.LVL51:
ARM GAS  /tmp/ccfgdlY1.s 			page 49


 1138              	.L132:
 639:FWLIB/src/stm32f4xx_flash.c ****   }
 1139              		.loc 1 639 0
 1140 0026 4FF48073 		mov	r3, #256
 1141 002a F9E7     		b	.L129
 1142              	.LVL52:
 1143              	.L136:
 652:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= tmp_psize;
 1144              		.loc 1 652 0
 1145 002c 0B4C     		ldr	r4, .L137
 1146 002e 2269     		ldr	r2, [r4, #16]
 1147 0030 22F44072 		bic	r2, r2, #768
 1148 0034 2261     		str	r2, [r4, #16]
 653:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_MER1;
 1149              		.loc 1 653 0
 1150 0036 2269     		ldr	r2, [r4, #16]
 1151 0038 1343     		orrs	r3, r3, r2
 1152              	.LVL53:
 1153 003a 2361     		str	r3, [r4, #16]
 654:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_STRT;
 1154              		.loc 1 654 0
 1155 003c 2369     		ldr	r3, [r4, #16]
 1156 003e 43F00403 		orr	r3, r3, #4
 1157 0042 2361     		str	r3, [r4, #16]
 655:FWLIB/src/stm32f4xx_flash.c ****     
 1158              		.loc 1 655 0
 1159 0044 2369     		ldr	r3, [r4, #16]
 1160 0046 43F48033 		orr	r3, r3, #65536
 1161 004a 2361     		str	r3, [r4, #16]
 658:FWLIB/src/stm32f4xx_flash.c **** 
 1162              		.loc 1 658 0
 1163 004c FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1164              	.LVL54:
 661:FWLIB/src/stm32f4xx_flash.c **** 
 1165              		.loc 1 661 0
 1166 0050 2369     		ldr	r3, [r4, #16]
 1167 0052 23F00403 		bic	r3, r3, #4
 1168 0056 2361     		str	r3, [r4, #16]
 1169 0058 E4E7     		b	.L130
 1170              	.L138:
 1171 005a 00BF     		.align	2
 1172              	.L137:
 1173 005c 003C0240 		.word	1073888256
 1174              		.cfi_endproc
 1175              	.LFE133:
 1177              		.section	.text.FLASH_EraseAllBank2Sectors,"ax",%progbits
 1178              		.align	1
 1179              		.global	FLASH_EraseAllBank2Sectors
 1180              		.syntax unified
 1181              		.thumb
 1182              		.thumb_func
 1183              		.fpu fpv4-sp-d16
 1185              	FLASH_EraseAllBank2Sectors:
 1186              	.LFB134:
 692:FWLIB/src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 1187              		.loc 1 692 0
 1188              		.cfi_startproc
ARM GAS  /tmp/ccfgdlY1.s 			page 50


 1189              		@ args = 0, pretend = 0, frame = 0
 1190              		@ frame_needed = 0, uses_anonymous_args = 0
 1191              	.LVL55:
 1192 0000 10B5     		push	{r4, lr}
 1193              	.LCFI6:
 1194              		.cfi_def_cfa_offset 8
 1195              		.cfi_offset 4, -8
 1196              		.cfi_offset 14, -4
 1197 0002 0446     		mov	r4, r0
 1198              	.LVL56:
 697:FWLIB/src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 1199              		.loc 1 697 0
 1200 0004 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1201              	.LVL57:
 700:FWLIB/src/stm32f4xx_flash.c ****   {
 1202              		.loc 1 700 0
 1203 0008 4CB1     		cbz	r4, .L142
 704:FWLIB/src/stm32f4xx_flash.c ****   {
 1204              		.loc 1 704 0
 1205 000a 012C     		cmp	r4, #1
 1206 000c 0BD0     		beq	.L143
 708:FWLIB/src/stm32f4xx_flash.c ****   {
 1207              		.loc 1 708 0
 1208 000e 022C     		cmp	r4, #2
 1209 0010 02D0     		beq	.L146
 714:FWLIB/src/stm32f4xx_flash.c ****   }  
 1210              		.loc 1 714 0
 1211 0012 4FF44073 		mov	r3, #768
 1212 0016 03E0     		b	.L140
 1213              	.L146:
 710:FWLIB/src/stm32f4xx_flash.c ****   }
 1214              		.loc 1 710 0
 1215 0018 4FF40073 		mov	r3, #512
 1216 001c 00E0     		b	.L140
 1217              	.L142:
 702:FWLIB/src/stm32f4xx_flash.c ****   }
 1218              		.loc 1 702 0
 1219 001e 0023     		movs	r3, #0
 1220              	.L140:
 1221              	.LVL58:
 716:FWLIB/src/stm32f4xx_flash.c ****   {
 1222              		.loc 1 716 0
 1223 0020 0928     		cmp	r0, #9
 1224 0022 03D0     		beq	.L147
 1225              	.LVL59:
 1226              	.L141:
 733:FWLIB/src/stm32f4xx_flash.c **** 
 1227              		.loc 1 733 0
 1228 0024 10BD     		pop	{r4, pc}
 1229              	.LVL60:
 1230              	.L143:
 706:FWLIB/src/stm32f4xx_flash.c ****   }
 1231              		.loc 1 706 0
 1232 0026 4FF48073 		mov	r3, #256
 1233 002a F9E7     		b	.L140
 1234              	.LVL61:
 1235              	.L147:
ARM GAS  /tmp/ccfgdlY1.s 			page 51


 719:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= tmp_psize;
 1236              		.loc 1 719 0
 1237 002c 0B4C     		ldr	r4, .L148
 1238 002e 2269     		ldr	r2, [r4, #16]
 1239 0030 22F44072 		bic	r2, r2, #768
 1240 0034 2261     		str	r2, [r4, #16]
 720:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_MER2;
 1241              		.loc 1 720 0
 1242 0036 2269     		ldr	r2, [r4, #16]
 1243 0038 1343     		orrs	r3, r3, r2
 1244              	.LVL62:
 1245 003a 2361     		str	r3, [r4, #16]
 721:FWLIB/src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_STRT;
 1246              		.loc 1 721 0
 1247 003c 2369     		ldr	r3, [r4, #16]
 1248 003e 43F40043 		orr	r3, r3, #32768
 1249 0042 2361     		str	r3, [r4, #16]
 722:FWLIB/src/stm32f4xx_flash.c ****     
 1250              		.loc 1 722 0
 1251 0044 2369     		ldr	r3, [r4, #16]
 1252 0046 43F48033 		orr	r3, r3, #65536
 1253 004a 2361     		str	r3, [r4, #16]
 725:FWLIB/src/stm32f4xx_flash.c **** 
 1254              		.loc 1 725 0
 1255 004c FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1256              	.LVL63:
 728:FWLIB/src/stm32f4xx_flash.c **** 
 1257              		.loc 1 728 0
 1258 0050 2369     		ldr	r3, [r4, #16]
 1259 0052 23F40043 		bic	r3, r3, #32768
 1260 0056 2361     		str	r3, [r4, #16]
 1261 0058 E4E7     		b	.L141
 1262              	.L149:
 1263 005a 00BF     		.align	2
 1264              	.L148:
 1265 005c 003C0240 		.word	1073888256
 1266              		.cfi_endproc
 1267              	.LFE134:
 1269              		.section	.text.FLASH_ProgramDoubleWord,"ax",%progbits
 1270              		.align	1
 1271              		.global	FLASH_ProgramDoubleWord
 1272              		.syntax unified
 1273              		.thumb
 1274              		.thumb_func
 1275              		.fpu fpv4-sp-d16
 1277              	FLASH_ProgramDoubleWord:
 1278              	.LFB135:
 749:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1279              		.loc 1 749 0
 1280              		.cfi_startproc
 1281              		@ args = 0, pretend = 0, frame = 0
 1282              		@ frame_needed = 0, uses_anonymous_args = 0
 1283              	.LVL64:
 1284 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1285              	.LCFI7:
 1286              		.cfi_def_cfa_offset 24
 1287              		.cfi_offset 3, -24
ARM GAS  /tmp/ccfgdlY1.s 			page 52


 1288              		.cfi_offset 4, -20
 1289              		.cfi_offset 5, -16
 1290              		.cfi_offset 6, -12
 1291              		.cfi_offset 7, -8
 1292              		.cfi_offset 14, -4
 1293 0002 0546     		mov	r5, r0
 1294 0004 1646     		mov	r6, r2
 1295 0006 1F46     		mov	r7, r3
 1296              	.LVL65:
 756:FWLIB/src/stm32f4xx_flash.c ****   
 1297              		.loc 1 756 0
 1298 0008 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1299              	.LVL66:
 758:FWLIB/src/stm32f4xx_flash.c ****   {
 1300              		.loc 1 758 0
 1301 000c 0928     		cmp	r0, #9
 1302 000e 00D0     		beq	.L153
 1303              	.L151:
 775:FWLIB/src/stm32f4xx_flash.c **** 
 1304              		.loc 1 775 0
 1305 0010 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1306              	.LVL67:
 1307              	.L153:
 761:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 1308              		.loc 1 761 0
 1309 0012 0B4C     		ldr	r4, .L154
 1310 0014 2369     		ldr	r3, [r4, #16]
 1311 0016 23F44073 		bic	r3, r3, #768
 1312 001a 2361     		str	r3, [r4, #16]
 762:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 1313              		.loc 1 762 0
 1314 001c 2369     		ldr	r3, [r4, #16]
 1315 001e 43F44073 		orr	r3, r3, #768
 1316 0022 2361     		str	r3, [r4, #16]
 763:FWLIB/src/stm32f4xx_flash.c ****   
 1317              		.loc 1 763 0
 1318 0024 2369     		ldr	r3, [r4, #16]
 1319 0026 43F00103 		orr	r3, r3, #1
 1320 002a 2361     		str	r3, [r4, #16]
 765:FWLIB/src/stm32f4xx_flash.c ****         
 1321              		.loc 1 765 0
 1322 002c C5E90067 		strd	r6, [r5]
 768:FWLIB/src/stm32f4xx_flash.c **** 
 1323              		.loc 1 768 0
 1324 0030 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1325              	.LVL68:
 771:FWLIB/src/stm32f4xx_flash.c ****   } 
 1326              		.loc 1 771 0
 1327 0034 2369     		ldr	r3, [r4, #16]
 1328 0036 23F00103 		bic	r3, r3, #1
 1329 003a 2361     		str	r3, [r4, #16]
 1330 003c E8E7     		b	.L151
 1331              	.L155:
 1332 003e 00BF     		.align	2
 1333              	.L154:
 1334 0040 003C0240 		.word	1073888256
 1335              		.cfi_endproc
ARM GAS  /tmp/ccfgdlY1.s 			page 53


 1336              	.LFE135:
 1338              		.section	.text.FLASH_ProgramWord,"ax",%progbits
 1339              		.align	1
 1340              		.global	FLASH_ProgramWord
 1341              		.syntax unified
 1342              		.thumb
 1343              		.thumb_func
 1344              		.fpu fpv4-sp-d16
 1346              	FLASH_ProgramWord:
 1347              	.LFB136:
 792:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1348              		.loc 1 792 0
 1349              		.cfi_startproc
 1350              		@ args = 0, pretend = 0, frame = 0
 1351              		@ frame_needed = 0, uses_anonymous_args = 0
 1352              	.LVL69:
 1353 0000 70B5     		push	{r4, r5, r6, lr}
 1354              	.LCFI8:
 1355              		.cfi_def_cfa_offset 16
 1356              		.cfi_offset 4, -16
 1357              		.cfi_offset 5, -12
 1358              		.cfi_offset 6, -8
 1359              		.cfi_offset 14, -4
 1360 0002 0546     		mov	r5, r0
 1361 0004 0E46     		mov	r6, r1
 1362              	.LVL70:
 799:FWLIB/src/stm32f4xx_flash.c ****   
 1363              		.loc 1 799 0
 1364 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1365              	.LVL71:
 801:FWLIB/src/stm32f4xx_flash.c ****   {
 1366              		.loc 1 801 0
 1367 000a 0928     		cmp	r0, #9
 1368 000c 00D0     		beq	.L159
 1369              	.L157:
 818:FWLIB/src/stm32f4xx_flash.c **** 
 1370              		.loc 1 818 0
 1371 000e 70BD     		pop	{r4, r5, r6, pc}
 1372              	.LVL72:
 1373              	.L159:
 804:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_WORD;
 1374              		.loc 1 804 0
 1375 0010 0A4C     		ldr	r4, .L160
 1376 0012 2369     		ldr	r3, [r4, #16]
 1377 0014 23F44073 		bic	r3, r3, #768
 1378 0018 2361     		str	r3, [r4, #16]
 805:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 1379              		.loc 1 805 0
 1380 001a 2369     		ldr	r3, [r4, #16]
 1381 001c 43F40073 		orr	r3, r3, #512
 1382 0020 2361     		str	r3, [r4, #16]
 806:FWLIB/src/stm32f4xx_flash.c ****   
 1383              		.loc 1 806 0
 1384 0022 2369     		ldr	r3, [r4, #16]
 1385 0024 43F00103 		orr	r3, r3, #1
 1386 0028 2361     		str	r3, [r4, #16]
 808:FWLIB/src/stm32f4xx_flash.c ****         
ARM GAS  /tmp/ccfgdlY1.s 			page 54


 1387              		.loc 1 808 0
 1388 002a 2E60     		str	r6, [r5]
 811:FWLIB/src/stm32f4xx_flash.c **** 
 1389              		.loc 1 811 0
 1390 002c FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1391              	.LVL73:
 814:FWLIB/src/stm32f4xx_flash.c ****   } 
 1392              		.loc 1 814 0
 1393 0030 2369     		ldr	r3, [r4, #16]
 1394 0032 23F00103 		bic	r3, r3, #1
 1395 0036 2361     		str	r3, [r4, #16]
 1396 0038 E9E7     		b	.L157
 1397              	.L161:
 1398 003a 00BF     		.align	2
 1399              	.L160:
 1400 003c 003C0240 		.word	1073888256
 1401              		.cfi_endproc
 1402              	.LFE136:
 1404              		.section	.text.FLASH_ProgramHalfWord,"ax",%progbits
 1405              		.align	1
 1406              		.global	FLASH_ProgramHalfWord
 1407              		.syntax unified
 1408              		.thumb
 1409              		.thumb_func
 1410              		.fpu fpv4-sp-d16
 1412              	FLASH_ProgramHalfWord:
 1413              	.LFB137:
 834:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1414              		.loc 1 834 0
 1415              		.cfi_startproc
 1416              		@ args = 0, pretend = 0, frame = 0
 1417              		@ frame_needed = 0, uses_anonymous_args = 0
 1418              	.LVL74:
 1419 0000 70B5     		push	{r4, r5, r6, lr}
 1420              	.LCFI9:
 1421              		.cfi_def_cfa_offset 16
 1422              		.cfi_offset 4, -16
 1423              		.cfi_offset 5, -12
 1424              		.cfi_offset 6, -8
 1425              		.cfi_offset 14, -4
 1426 0002 0546     		mov	r5, r0
 1427 0004 0E46     		mov	r6, r1
 1428              	.LVL75:
 841:FWLIB/src/stm32f4xx_flash.c ****   
 1429              		.loc 1 841 0
 1430 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1431              	.LVL76:
 843:FWLIB/src/stm32f4xx_flash.c ****   {
 1432              		.loc 1 843 0
 1433 000a 0928     		cmp	r0, #9
 1434 000c 00D0     		beq	.L165
 1435              	.L163:
 860:FWLIB/src/stm32f4xx_flash.c **** 
 1436              		.loc 1 860 0
 1437 000e 70BD     		pop	{r4, r5, r6, pc}
 1438              	.LVL77:
 1439              	.L165:
ARM GAS  /tmp/ccfgdlY1.s 			page 55


 846:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 1440              		.loc 1 846 0
 1441 0010 0A4C     		ldr	r4, .L166
 1442 0012 2369     		ldr	r3, [r4, #16]
 1443 0014 23F44073 		bic	r3, r3, #768
 1444 0018 2361     		str	r3, [r4, #16]
 847:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 1445              		.loc 1 847 0
 1446 001a 2369     		ldr	r3, [r4, #16]
 1447 001c 43F48073 		orr	r3, r3, #256
 1448 0020 2361     		str	r3, [r4, #16]
 848:FWLIB/src/stm32f4xx_flash.c ****   
 1449              		.loc 1 848 0
 1450 0022 2369     		ldr	r3, [r4, #16]
 1451 0024 43F00103 		orr	r3, r3, #1
 1452 0028 2361     		str	r3, [r4, #16]
 850:FWLIB/src/stm32f4xx_flash.c ****         
 1453              		.loc 1 850 0
 1454 002a 2E80     		strh	r6, [r5]	@ movhi
 853:FWLIB/src/stm32f4xx_flash.c **** 
 1455              		.loc 1 853 0
 1456 002c FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1457              	.LVL78:
 856:FWLIB/src/stm32f4xx_flash.c ****   } 
 1458              		.loc 1 856 0
 1459 0030 2369     		ldr	r3, [r4, #16]
 1460 0032 23F00103 		bic	r3, r3, #1
 1461 0036 2361     		str	r3, [r4, #16]
 1462 0038 E9E7     		b	.L163
 1463              	.L167:
 1464 003a 00BF     		.align	2
 1465              	.L166:
 1466 003c 003C0240 		.word	1073888256
 1467              		.cfi_endproc
 1468              	.LFE137:
 1470              		.section	.text.FLASH_ProgramByte,"ax",%progbits
 1471              		.align	1
 1472              		.global	FLASH_ProgramByte
 1473              		.syntax unified
 1474              		.thumb
 1475              		.thumb_func
 1476              		.fpu fpv4-sp-d16
 1478              	FLASH_ProgramByte:
 1479              	.LFB138:
 876:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1480              		.loc 1 876 0
 1481              		.cfi_startproc
 1482              		@ args = 0, pretend = 0, frame = 0
 1483              		@ frame_needed = 0, uses_anonymous_args = 0
 1484              	.LVL79:
 1485 0000 70B5     		push	{r4, r5, r6, lr}
 1486              	.LCFI10:
 1487              		.cfi_def_cfa_offset 16
 1488              		.cfi_offset 4, -16
 1489              		.cfi_offset 5, -12
 1490              		.cfi_offset 6, -8
 1491              		.cfi_offset 14, -4
ARM GAS  /tmp/ccfgdlY1.s 			page 56


 1492 0002 0546     		mov	r5, r0
 1493 0004 0E46     		mov	r6, r1
 1494              	.LVL80:
 883:FWLIB/src/stm32f4xx_flash.c ****   
 1495              		.loc 1 883 0
 1496 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1497              	.LVL81:
 885:FWLIB/src/stm32f4xx_flash.c ****   {
 1498              		.loc 1 885 0
 1499 000a 0928     		cmp	r0, #9
 1500 000c 00D0     		beq	.L171
 1501              	.L169:
 903:FWLIB/src/stm32f4xx_flash.c **** 
 1502              		.loc 1 903 0
 1503 000e 70BD     		pop	{r4, r5, r6, pc}
 1504              	.LVL82:
 1505              	.L171:
 888:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_BYTE;
 1506              		.loc 1 888 0
 1507 0010 094C     		ldr	r4, .L172
 1508 0012 2369     		ldr	r3, [r4, #16]
 1509 0014 23F44073 		bic	r3, r3, #768
 1510 0018 2361     		str	r3, [r4, #16]
 889:FWLIB/src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 1511              		.loc 1 889 0
 1512 001a 2369     		ldr	r3, [r4, #16]
 1513 001c 2361     		str	r3, [r4, #16]
 890:FWLIB/src/stm32f4xx_flash.c ****   
 1514              		.loc 1 890 0
 1515 001e 2369     		ldr	r3, [r4, #16]
 1516 0020 43F00103 		orr	r3, r3, #1
 1517 0024 2361     		str	r3, [r4, #16]
 892:FWLIB/src/stm32f4xx_flash.c ****         
 1518              		.loc 1 892 0
 1519 0026 2E70     		strb	r6, [r5]
 895:FWLIB/src/stm32f4xx_flash.c **** 
 1520              		.loc 1 895 0
 1521 0028 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1522              	.LVL83:
 898:FWLIB/src/stm32f4xx_flash.c ****   } 
 1523              		.loc 1 898 0
 1524 002c 2369     		ldr	r3, [r4, #16]
 1525 002e 23F00103 		bic	r3, r3, #1
 1526 0032 2361     		str	r3, [r4, #16]
 1527 0034 EBE7     		b	.L169
 1528              	.L173:
 1529 0036 00BF     		.align	2
 1530              	.L172:
 1531 0038 003C0240 		.word	1073888256
 1532              		.cfi_endproc
 1533              	.LFE138:
 1535              		.section	.text.FLASH_OB_WRPConfig,"ax",%progbits
 1536              		.align	1
 1537              		.global	FLASH_OB_WRPConfig
 1538              		.syntax unified
 1539              		.thumb
 1540              		.thumb_func
ARM GAS  /tmp/ccfgdlY1.s 			page 57


 1541              		.fpu fpv4-sp-d16
 1543              	FLASH_OB_WRPConfig:
 1544              	.LFB141:
1013:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1545              		.loc 1 1013 0
 1546              		.cfi_startproc
 1547              		@ args = 0, pretend = 0, frame = 0
 1548              		@ frame_needed = 0, uses_anonymous_args = 0
 1549              	.LVL84:
 1550 0000 38B5     		push	{r3, r4, r5, lr}
 1551              	.LCFI11:
 1552              		.cfi_def_cfa_offset 16
 1553              		.cfi_offset 3, -16
 1554              		.cfi_offset 4, -12
 1555              		.cfi_offset 5, -8
 1556              		.cfi_offset 14, -4
 1557 0002 0446     		mov	r4, r0
 1558 0004 0D46     		mov	r5, r1
 1559              	.LVL85:
1020:FWLIB/src/stm32f4xx_flash.c **** 
 1560              		.loc 1 1020 0
 1561 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1562              	.LVL86:
1022:FWLIB/src/stm32f4xx_flash.c ****   { 
 1563              		.loc 1 1022 0
 1564 000a 0928     		cmp	r0, #9
 1565 000c 00D0     		beq	.L178
 1566              	.LVL87:
 1567              	.L174:
 1568 000e 38BD     		pop	{r3, r4, r5, pc}
 1569              	.LVL88:
 1570              	.L178:
1024:FWLIB/src/stm32f4xx_flash.c ****     {
 1571              		.loc 1 1024 0
 1572 0010 35B9     		cbnz	r5, .L179
1030:FWLIB/src/stm32f4xx_flash.c ****     }
 1573              		.loc 1 1030 0
 1574 0012 074A     		ldr	r2, .L180
 1575 0014 1388     		ldrh	r3, [r2]
 1576 0016 9BB2     		uxth	r3, r3
 1577 0018 A4B2     		uxth	r4, r4
 1578              	.LVL89:
 1579 001a 1C43     		orrs	r4, r4, r3
 1580 001c 1480     		strh	r4, [r2]	@ movhi
1033:FWLIB/src/stm32f4xx_flash.c **** 
 1581              		.loc 1 1033 0
 1582 001e F6E7     		b	.L174
 1583              	.LVL90:
 1584              	.L179:
1026:FWLIB/src/stm32f4xx_flash.c ****     }
 1585              		.loc 1 1026 0
 1586 0020 034A     		ldr	r2, .L180
 1587 0022 1388     		ldrh	r3, [r2]
 1588 0024 9BB2     		uxth	r3, r3
 1589 0026 23EA0404 		bic	r4, r3, r4
 1590              	.LVL91:
 1591 002a 1480     		strh	r4, [r2]	@ movhi
ARM GAS  /tmp/ccfgdlY1.s 			page 58


 1592 002c 38BD     		pop	{r3, r4, r5, pc}
 1593              	.L181:
 1594 002e 00BF     		.align	2
 1595              	.L180:
 1596 0030 163C0240 		.word	1073888278
 1597              		.cfi_endproc
 1598              	.LFE141:
 1600              		.section	.text.FLASH_OB_WRP1Config,"ax",%progbits
 1601              		.align	1
 1602              		.global	FLASH_OB_WRP1Config
 1603              		.syntax unified
 1604              		.thumb
 1605              		.thumb_func
 1606              		.fpu fpv4-sp-d16
 1608              	FLASH_OB_WRP1Config:
 1609              	.LFB142:
1055:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1610              		.loc 1 1055 0
 1611              		.cfi_startproc
 1612              		@ args = 0, pretend = 0, frame = 0
 1613              		@ frame_needed = 0, uses_anonymous_args = 0
 1614              	.LVL92:
 1615 0000 38B5     		push	{r3, r4, r5, lr}
 1616              	.LCFI12:
 1617              		.cfi_def_cfa_offset 16
 1618              		.cfi_offset 3, -16
 1619              		.cfi_offset 4, -12
 1620              		.cfi_offset 5, -8
 1621              		.cfi_offset 14, -4
 1622 0002 0446     		mov	r4, r0
 1623 0004 0D46     		mov	r5, r1
 1624              	.LVL93:
1062:FWLIB/src/stm32f4xx_flash.c **** 
 1625              		.loc 1 1062 0
 1626 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1627              	.LVL94:
1064:FWLIB/src/stm32f4xx_flash.c ****   { 
 1628              		.loc 1 1064 0
 1629 000a 0928     		cmp	r0, #9
 1630 000c 00D0     		beq	.L186
 1631              	.LVL95:
 1632              	.L182:
 1633 000e 38BD     		pop	{r3, r4, r5, pc}
 1634              	.LVL96:
 1635              	.L186:
1066:FWLIB/src/stm32f4xx_flash.c ****     {
 1636              		.loc 1 1066 0
 1637 0010 35B9     		cbnz	r5, .L187
1072:FWLIB/src/stm32f4xx_flash.c ****     }
 1638              		.loc 1 1072 0
 1639 0012 074A     		ldr	r2, .L188
 1640 0014 1388     		ldrh	r3, [r2]
 1641 0016 9BB2     		uxth	r3, r3
 1642 0018 A4B2     		uxth	r4, r4
 1643              	.LVL97:
 1644 001a 1C43     		orrs	r4, r4, r3
 1645 001c 1480     		strh	r4, [r2]	@ movhi
ARM GAS  /tmp/ccfgdlY1.s 			page 59


1075:FWLIB/src/stm32f4xx_flash.c **** 
 1646              		.loc 1 1075 0
 1647 001e F6E7     		b	.L182
 1648              	.LVL98:
 1649              	.L187:
1068:FWLIB/src/stm32f4xx_flash.c ****     }
 1650              		.loc 1 1068 0
 1651 0020 034A     		ldr	r2, .L188
 1652 0022 1388     		ldrh	r3, [r2]
 1653 0024 9BB2     		uxth	r3, r3
 1654 0026 23EA0404 		bic	r4, r3, r4
 1655              	.LVL99:
 1656 002a 1480     		strh	r4, [r2]	@ movhi
 1657 002c 38BD     		pop	{r3, r4, r5, pc}
 1658              	.L189:
 1659 002e 00BF     		.align	2
 1660              	.L188:
 1661 0030 1A3C0240 		.word	1073888282
 1662              		.cfi_endproc
 1663              	.LFE142:
 1665              		.section	.text.FLASH_OB_PCROPConfig,"ax",%progbits
 1666              		.align	1
 1667              		.global	FLASH_OB_PCROPConfig
 1668              		.syntax unified
 1669              		.thumb
 1670              		.thumb_func
 1671              		.fpu fpv4-sp-d16
 1673              	FLASH_OB_PCROPConfig:
 1674              	.LFB144:
1136:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1675              		.loc 1 1136 0
 1676              		.cfi_startproc
 1677              		@ args = 0, pretend = 0, frame = 0
 1678              		@ frame_needed = 0, uses_anonymous_args = 0
 1679              	.LVL100:
 1680 0000 38B5     		push	{r3, r4, r5, lr}
 1681              	.LCFI13:
 1682              		.cfi_def_cfa_offset 16
 1683              		.cfi_offset 3, -16
 1684              		.cfi_offset 4, -12
 1685              		.cfi_offset 5, -8
 1686              		.cfi_offset 14, -4
 1687 0002 0446     		mov	r4, r0
 1688 0004 0D46     		mov	r5, r1
 1689              	.LVL101:
1143:FWLIB/src/stm32f4xx_flash.c **** 
 1690              		.loc 1 1143 0
 1691 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1692              	.LVL102:
1145:FWLIB/src/stm32f4xx_flash.c ****   { 
 1693              		.loc 1 1145 0
 1694 000a 0928     		cmp	r0, #9
 1695 000c 00D0     		beq	.L194
 1696              	.LVL103:
 1697              	.L190:
 1698 000e 38BD     		pop	{r3, r4, r5, pc}
 1699              	.LVL104:
ARM GAS  /tmp/ccfgdlY1.s 			page 60


 1700              	.L194:
1147:FWLIB/src/stm32f4xx_flash.c ****     {
 1701              		.loc 1 1147 0
 1702 0010 35B9     		cbnz	r5, .L195
1153:FWLIB/src/stm32f4xx_flash.c ****     }
 1703              		.loc 1 1153 0
 1704 0012 074A     		ldr	r2, .L196
 1705 0014 1388     		ldrh	r3, [r2]
 1706 0016 9BB2     		uxth	r3, r3
 1707 0018 23EA0404 		bic	r4, r3, r4
 1708              	.LVL105:
 1709 001c 1480     		strh	r4, [r2]	@ movhi
1156:FWLIB/src/stm32f4xx_flash.c **** 
 1710              		.loc 1 1156 0
 1711 001e F6E7     		b	.L190
 1712              	.LVL106:
 1713              	.L195:
1149:FWLIB/src/stm32f4xx_flash.c ****     }
 1714              		.loc 1 1149 0
 1715 0020 034A     		ldr	r2, .L196
 1716 0022 1388     		ldrh	r3, [r2]
 1717 0024 9BB2     		uxth	r3, r3
 1718 0026 A4B2     		uxth	r4, r4
 1719              	.LVL107:
 1720 0028 1C43     		orrs	r4, r4, r3
 1721 002a 1480     		strh	r4, [r2]	@ movhi
 1722 002c 38BD     		pop	{r3, r4, r5, pc}
 1723              	.L197:
 1724 002e 00BF     		.align	2
 1725              	.L196:
 1726 0030 163C0240 		.word	1073888278
 1727              		.cfi_endproc
 1728              	.LFE144:
 1730              		.section	.text.FLASH_OB_PCROP1Config,"ax",%progbits
 1731              		.align	1
 1732              		.global	FLASH_OB_PCROP1Config
 1733              		.syntax unified
 1734              		.thumb
 1735              		.thumb_func
 1736              		.fpu fpv4-sp-d16
 1738              	FLASH_OB_PCROP1Config:
 1739              	.LFB145:
1173:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1740              		.loc 1 1173 0
 1741              		.cfi_startproc
 1742              		@ args = 0, pretend = 0, frame = 0
 1743              		@ frame_needed = 0, uses_anonymous_args = 0
 1744              	.LVL108:
 1745 0000 38B5     		push	{r3, r4, r5, lr}
 1746              	.LCFI14:
 1747              		.cfi_def_cfa_offset 16
 1748              		.cfi_offset 3, -16
 1749              		.cfi_offset 4, -12
 1750              		.cfi_offset 5, -8
 1751              		.cfi_offset 14, -4
 1752 0002 0446     		mov	r4, r0
 1753 0004 0D46     		mov	r5, r1
ARM GAS  /tmp/ccfgdlY1.s 			page 61


 1754              	.LVL109:
1180:FWLIB/src/stm32f4xx_flash.c **** 
 1755              		.loc 1 1180 0
 1756 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1757              	.LVL110:
1182:FWLIB/src/stm32f4xx_flash.c ****   { 
 1758              		.loc 1 1182 0
 1759 000a 0928     		cmp	r0, #9
 1760 000c 00D0     		beq	.L202
 1761              	.LVL111:
 1762              	.L198:
 1763 000e 38BD     		pop	{r3, r4, r5, pc}
 1764              	.LVL112:
 1765              	.L202:
1184:FWLIB/src/stm32f4xx_flash.c ****     {
 1766              		.loc 1 1184 0
 1767 0010 35B9     		cbnz	r5, .L203
1190:FWLIB/src/stm32f4xx_flash.c ****     }
 1768              		.loc 1 1190 0
 1769 0012 074A     		ldr	r2, .L204
 1770 0014 1388     		ldrh	r3, [r2]
 1771 0016 9BB2     		uxth	r3, r3
 1772 0018 23EA0404 		bic	r4, r3, r4
 1773              	.LVL113:
 1774 001c 1480     		strh	r4, [r2]	@ movhi
1193:FWLIB/src/stm32f4xx_flash.c **** 
 1775              		.loc 1 1193 0
 1776 001e F6E7     		b	.L198
 1777              	.LVL114:
 1778              	.L203:
1186:FWLIB/src/stm32f4xx_flash.c ****     }
 1779              		.loc 1 1186 0
 1780 0020 034A     		ldr	r2, .L204
 1781 0022 1388     		ldrh	r3, [r2]
 1782 0024 9BB2     		uxth	r3, r3
 1783 0026 A4B2     		uxth	r4, r4
 1784              	.LVL115:
 1785 0028 1C43     		orrs	r4, r4, r3
 1786 002a 1480     		strh	r4, [r2]	@ movhi
 1787 002c 38BD     		pop	{r3, r4, r5, pc}
 1788              	.L205:
 1789 002e 00BF     		.align	2
 1790              	.L204:
 1791 0030 1A3C0240 		.word	1073888282
 1792              		.cfi_endproc
 1793              	.LFE145:
 1795              		.section	.text.FLASH_OB_RDPConfig,"ax",%progbits
 1796              		.align	1
 1797              		.global	FLASH_OB_RDPConfig
 1798              		.syntax unified
 1799              		.thumb
 1800              		.thumb_func
 1801              		.fpu fpv4-sp-d16
 1803              	FLASH_OB_RDPConfig:
 1804              	.LFB146:
1209:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1805              		.loc 1 1209 0
ARM GAS  /tmp/ccfgdlY1.s 			page 62


 1806              		.cfi_startproc
 1807              		@ args = 0, pretend = 0, frame = 0
 1808              		@ frame_needed = 0, uses_anonymous_args = 0
 1809              	.LVL116:
 1810 0000 10B5     		push	{r4, lr}
 1811              	.LCFI15:
 1812              		.cfi_def_cfa_offset 8
 1813              		.cfi_offset 4, -8
 1814              		.cfi_offset 14, -4
 1815 0002 0446     		mov	r4, r0
 1816              	.LVL117:
1215:FWLIB/src/stm32f4xx_flash.c **** 
 1817              		.loc 1 1215 0
 1818 0004 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1819              	.LVL118:
1217:FWLIB/src/stm32f4xx_flash.c ****   {
 1820              		.loc 1 1217 0
 1821 0008 0928     		cmp	r0, #9
 1822 000a 00D0     		beq	.L209
 1823              	.L206:
 1824 000c 10BD     		pop	{r4, pc}
 1825              	.L209:
1219:FWLIB/src/stm32f4xx_flash.c **** 
 1826              		.loc 1 1219 0
 1827 000e 014B     		ldr	r3, .L210
 1828 0010 1C70     		strb	r4, [r3]
1222:FWLIB/src/stm32f4xx_flash.c **** 
 1829              		.loc 1 1222 0
 1830 0012 FBE7     		b	.L206
 1831              	.L211:
 1832              		.align	2
 1833              	.L210:
 1834 0014 153C0240 		.word	1073888277
 1835              		.cfi_endproc
 1836              	.LFE146:
 1838              		.section	.text.FLASH_OB_UserConfig,"ax",%progbits
 1839              		.align	1
 1840              		.global	FLASH_OB_UserConfig
 1841              		.syntax unified
 1842              		.thumb
 1843              		.thumb_func
 1844              		.fpu fpv4-sp-d16
 1846              	FLASH_OB_UserConfig:
 1847              	.LFB147:
1241:FWLIB/src/stm32f4xx_flash.c ****   uint8_t optiontmp = 0xFF;
 1848              		.loc 1 1241 0
 1849              		.cfi_startproc
 1850              		@ args = 0, pretend = 0, frame = 0
 1851              		@ frame_needed = 0, uses_anonymous_args = 0
 1852              	.LVL119:
 1853 0000 70B5     		push	{r4, r5, r6, lr}
 1854              	.LCFI16:
 1855              		.cfi_def_cfa_offset 16
 1856              		.cfi_offset 4, -16
 1857              		.cfi_offset 5, -12
 1858              		.cfi_offset 6, -8
 1859              		.cfi_offset 14, -4
ARM GAS  /tmp/ccfgdlY1.s 			page 63


 1860 0002 0446     		mov	r4, r0
 1861 0004 0E46     		mov	r6, r1
 1862 0006 1546     		mov	r5, r2
 1863              	.LVL120:
1251:FWLIB/src/stm32f4xx_flash.c ****   
 1864              		.loc 1 1251 0
 1865 0008 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1866              	.LVL121:
1253:FWLIB/src/stm32f4xx_flash.c ****   { 
 1867              		.loc 1 1253 0
 1868 000c 0928     		cmp	r0, #9
 1869 000e 00D0     		beq	.L215
 1870              	.LVL122:
 1871              	.L212:
 1872 0010 70BD     		pop	{r4, r5, r6, pc}
 1873              	.LVL123:
 1874              	.L215:
1262:FWLIB/src/stm32f4xx_flash.c **** #endif /* STM32F40_41xxx || STM32F401xx || STM32F410xx || STM32F411xE || STM32F446xx */ 
 1875              		.loc 1 1262 0
 1876 0012 044B     		ldr	r3, .L216
 1877 0014 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 1878              	.LVL124:
 1879 0016 00F00F00 		and	r0, r0, #15
 1880              	.LVL125:
1266:FWLIB/src/stm32f4xx_flash.c ****   }  
 1881              		.loc 1 1266 0
 1882 001a 3043     		orrs	r0, r0, r6
 1883              	.LVL126:
 1884 001c 2843     		orrs	r0, r0, r5
 1885 001e 2043     		orrs	r0, r0, r4
 1886 0020 1870     		strb	r0, [r3]
1268:FWLIB/src/stm32f4xx_flash.c **** 
 1887              		.loc 1 1268 0
 1888 0022 F5E7     		b	.L212
 1889              	.L217:
 1890              		.align	2
 1891              	.L216:
 1892 0024 143C0240 		.word	1073888276
 1893              		.cfi_endproc
 1894              	.LFE147:
 1896              		.section	.text.FLASH_OB_Launch,"ax",%progbits
 1897              		.align	1
 1898              		.global	FLASH_OB_Launch
 1899              		.syntax unified
 1900              		.thumb
 1901              		.thumb_func
 1902              		.fpu fpv4-sp-d16
 1904              	FLASH_OB_Launch:
 1905              	.LFB150:
1320:FWLIB/src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1906              		.loc 1 1320 0
 1907              		.cfi_startproc
 1908              		@ args = 0, pretend = 0, frame = 0
 1909              		@ frame_needed = 0, uses_anonymous_args = 0
 1910 0000 08B5     		push	{r3, lr}
 1911              	.LCFI17:
 1912              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccfgdlY1.s 			page 64


 1913              		.cfi_offset 3, -8
 1914              		.cfi_offset 14, -4
 1915              	.LVL127:
1324:FWLIB/src/stm32f4xx_flash.c **** 
 1916              		.loc 1 1324 0
 1917 0002 044A     		ldr	r2, .L220
 1918 0004 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1919 0006 43F00203 		orr	r3, r3, #2
 1920 000a 1370     		strb	r3, [r2]
1327:FWLIB/src/stm32f4xx_flash.c **** 
 1921              		.loc 1 1327 0
 1922 000c FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1923              	.LVL128:
1330:FWLIB/src/stm32f4xx_flash.c **** 
 1924              		.loc 1 1330 0
 1925 0010 08BD     		pop	{r3, pc}
 1926              	.L221:
 1927 0012 00BF     		.align	2
 1928              	.L220:
 1929 0014 143C0240 		.word	1073888276
 1930              		.cfi_endproc
 1931              	.LFE150:
 1933              		.text
 1934              	.Letext0:
 1935              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1936              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1937              		.file 4 "F4_CORE/core_cm4.h"
 1938              		.file 5 "USER/system_stm32f4xx.h"
 1939              		.file 6 "USER/stm32f4xx.h"
 1940              		.file 7 "FWLIB/inc/stm32f4xx_flash.h"
ARM GAS  /tmp/ccfgdlY1.s 			page 65


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_flash.c
     /tmp/ccfgdlY1.s:18     .text.FLASH_SetLatency:0000000000000000 $t
     /tmp/ccfgdlY1.s:25     .text.FLASH_SetLatency:0000000000000000 FLASH_SetLatency
     /tmp/ccfgdlY1.s:43     .text.FLASH_SetLatency:0000000000000008 $d
     /tmp/ccfgdlY1.s:48     .text.FLASH_PrefetchBufferCmd:0000000000000000 $t
     /tmp/ccfgdlY1.s:55     .text.FLASH_PrefetchBufferCmd:0000000000000000 FLASH_PrefetchBufferCmd
     /tmp/ccfgdlY1.s:81     .text.FLASH_PrefetchBufferCmd:000000000000001c $d
     /tmp/ccfgdlY1.s:86     .text.FLASH_InstructionCacheCmd:0000000000000000 $t
     /tmp/ccfgdlY1.s:93     .text.FLASH_InstructionCacheCmd:0000000000000000 FLASH_InstructionCacheCmd
     /tmp/ccfgdlY1.s:119    .text.FLASH_InstructionCacheCmd:000000000000001c $d
     /tmp/ccfgdlY1.s:124    .text.FLASH_DataCacheCmd:0000000000000000 $t
     /tmp/ccfgdlY1.s:131    .text.FLASH_DataCacheCmd:0000000000000000 FLASH_DataCacheCmd
     /tmp/ccfgdlY1.s:157    .text.FLASH_DataCacheCmd:000000000000001c $d
     /tmp/ccfgdlY1.s:162    .text.FLASH_InstructionCacheReset:0000000000000000 $t
     /tmp/ccfgdlY1.s:169    .text.FLASH_InstructionCacheReset:0000000000000000 FLASH_InstructionCacheReset
     /tmp/ccfgdlY1.s:185    .text.FLASH_InstructionCacheReset:000000000000000c $d
     /tmp/ccfgdlY1.s:190    .text.FLASH_DataCacheReset:0000000000000000 $t
     /tmp/ccfgdlY1.s:197    .text.FLASH_DataCacheReset:0000000000000000 FLASH_DataCacheReset
     /tmp/ccfgdlY1.s:213    .text.FLASH_DataCacheReset:000000000000000c $d
     /tmp/ccfgdlY1.s:218    .text.FLASH_Unlock:0000000000000000 $t
     /tmp/ccfgdlY1.s:225    .text.FLASH_Unlock:0000000000000000 FLASH_Unlock
     /tmp/ccfgdlY1.s:252    .text.FLASH_Unlock:0000000000000018 $d
     /tmp/ccfgdlY1.s:258    .text.FLASH_Lock:0000000000000000 $t
     /tmp/ccfgdlY1.s:265    .text.FLASH_Lock:0000000000000000 FLASH_Lock
     /tmp/ccfgdlY1.s:281    .text.FLASH_Lock:000000000000000c $d
     /tmp/ccfgdlY1.s:286    .text.FLASH_OB_Unlock:0000000000000000 $t
     /tmp/ccfgdlY1.s:293    .text.FLASH_OB_Unlock:0000000000000000 FLASH_OB_Unlock
     /tmp/ccfgdlY1.s:317    .text.FLASH_OB_Unlock:0000000000000018 $d
     /tmp/ccfgdlY1.s:323    .text.FLASH_OB_Lock:0000000000000000 $t
     /tmp/ccfgdlY1.s:330    .text.FLASH_OB_Lock:0000000000000000 FLASH_OB_Lock
     /tmp/ccfgdlY1.s:346    .text.FLASH_OB_Lock:000000000000000c $d
     /tmp/ccfgdlY1.s:351    .text.FLASH_OB_PCROPSelectionConfig:0000000000000000 $t
     /tmp/ccfgdlY1.s:358    .text.FLASH_OB_PCROPSelectionConfig:0000000000000000 FLASH_OB_PCROPSelectionConfig
     /tmp/ccfgdlY1.s:379    .text.FLASH_OB_PCROPSelectionConfig:0000000000000010 $d
     /tmp/ccfgdlY1.s:384    .text.FLASH_OB_BootConfig:0000000000000000 $t
     /tmp/ccfgdlY1.s:391    .text.FLASH_OB_BootConfig:0000000000000000 FLASH_OB_BootConfig
     /tmp/ccfgdlY1.s:413    .text.FLASH_OB_BootConfig:0000000000000014 $d
     /tmp/ccfgdlY1.s:418    .text.FLASH_OB_BORConfig:0000000000000000 $t
     /tmp/ccfgdlY1.s:425    .text.FLASH_OB_BORConfig:0000000000000000 FLASH_OB_BORConfig
     /tmp/ccfgdlY1.s:447    .text.FLASH_OB_BORConfig:0000000000000014 $d
     /tmp/ccfgdlY1.s:452    .text.FLASH_OB_GetUser:0000000000000000 $t
     /tmp/ccfgdlY1.s:459    .text.FLASH_OB_GetUser:0000000000000000 FLASH_OB_GetUser
     /tmp/ccfgdlY1.s:475    .text.FLASH_OB_GetUser:000000000000000c $d
     /tmp/ccfgdlY1.s:480    .text.FLASH_OB_GetWRP:0000000000000000 $t
     /tmp/ccfgdlY1.s:487    .text.FLASH_OB_GetWRP:0000000000000000 FLASH_OB_GetWRP
     /tmp/ccfgdlY1.s:503    .text.FLASH_OB_GetWRP:0000000000000008 $d
     /tmp/ccfgdlY1.s:508    .text.FLASH_OB_GetWRP1:0000000000000000 $t
     /tmp/ccfgdlY1.s:515    .text.FLASH_OB_GetWRP1:0000000000000000 FLASH_OB_GetWRP1
     /tmp/ccfgdlY1.s:531    .text.FLASH_OB_GetWRP1:0000000000000008 $d
     /tmp/ccfgdlY1.s:536    .text.FLASH_OB_GetPCROP:0000000000000000 $t
     /tmp/ccfgdlY1.s:543    .text.FLASH_OB_GetPCROP:0000000000000000 FLASH_OB_GetPCROP
     /tmp/ccfgdlY1.s:559    .text.FLASH_OB_GetPCROP:0000000000000008 $d
     /tmp/ccfgdlY1.s:564    .text.FLASH_OB_GetPCROP1:0000000000000000 $t
     /tmp/ccfgdlY1.s:571    .text.FLASH_OB_GetPCROP1:0000000000000000 FLASH_OB_GetPCROP1
     /tmp/ccfgdlY1.s:587    .text.FLASH_OB_GetPCROP1:0000000000000008 $d
     /tmp/ccfgdlY1.s:592    .text.FLASH_OB_GetRDP:0000000000000000 $t
ARM GAS  /tmp/ccfgdlY1.s 			page 66


     /tmp/ccfgdlY1.s:599    .text.FLASH_OB_GetRDP:0000000000000000 FLASH_OB_GetRDP
     /tmp/ccfgdlY1.s:625    .text.FLASH_OB_GetRDP:0000000000000014 $d
     /tmp/ccfgdlY1.s:630    .text.FLASH_OB_GetBOR:0000000000000000 $t
     /tmp/ccfgdlY1.s:637    .text.FLASH_OB_GetBOR:0000000000000000 FLASH_OB_GetBOR
     /tmp/ccfgdlY1.s:653    .text.FLASH_OB_GetBOR:000000000000000c $d
     /tmp/ccfgdlY1.s:658    .text.FLASH_ITConfig:0000000000000000 $t
     /tmp/ccfgdlY1.s:665    .text.FLASH_ITConfig:0000000000000000 FLASH_ITConfig
     /tmp/ccfgdlY1.s:694    .text.FLASH_ITConfig:0000000000000018 $d
     /tmp/ccfgdlY1.s:699    .text.FLASH_GetFlagStatus:0000000000000000 $t
     /tmp/ccfgdlY1.s:706    .text.FLASH_GetFlagStatus:0000000000000000 FLASH_GetFlagStatus
     /tmp/ccfgdlY1.s:733    .text.FLASH_GetFlagStatus:0000000000000010 $d
     /tmp/ccfgdlY1.s:738    .text.FLASH_ClearFlag:0000000000000000 $t
     /tmp/ccfgdlY1.s:745    .text.FLASH_ClearFlag:0000000000000000 FLASH_ClearFlag
     /tmp/ccfgdlY1.s:760    .text.FLASH_ClearFlag:0000000000000008 $d
     /tmp/ccfgdlY1.s:765    .text.FLASH_GetStatus:0000000000000000 $t
     /tmp/ccfgdlY1.s:772    .text.FLASH_GetStatus:0000000000000000 FLASH_GetStatus
     /tmp/ccfgdlY1.s:833    .text.FLASH_GetStatus:000000000000004c $d
     /tmp/ccfgdlY1.s:838    .text.FLASH_WaitForLastOperation:0000000000000000 $t
     /tmp/ccfgdlY1.s:845    .text.FLASH_WaitForLastOperation:0000000000000000 FLASH_WaitForLastOperation
     /tmp/ccfgdlY1.s:890    .text.FLASH_EraseSector:0000000000000000 $t
     /tmp/ccfgdlY1.s:897    .text.FLASH_EraseSector:0000000000000000 FLASH_EraseSector
     /tmp/ccfgdlY1.s:989    .text.FLASH_EraseSector:000000000000006c $d
     /tmp/ccfgdlY1.s:994    .text.FLASH_EraseAllSectors:0000000000000000 $t
     /tmp/ccfgdlY1.s:1001   .text.FLASH_EraseAllSectors:0000000000000000 FLASH_EraseAllSectors
     /tmp/ccfgdlY1.s:1081   .text.FLASH_EraseAllSectors:000000000000005c $d
     /tmp/ccfgdlY1.s:1086   .text.FLASH_EraseAllBank1Sectors:0000000000000000 $t
     /tmp/ccfgdlY1.s:1093   .text.FLASH_EraseAllBank1Sectors:0000000000000000 FLASH_EraseAllBank1Sectors
     /tmp/ccfgdlY1.s:1173   .text.FLASH_EraseAllBank1Sectors:000000000000005c $d
     /tmp/ccfgdlY1.s:1178   .text.FLASH_EraseAllBank2Sectors:0000000000000000 $t
     /tmp/ccfgdlY1.s:1185   .text.FLASH_EraseAllBank2Sectors:0000000000000000 FLASH_EraseAllBank2Sectors
     /tmp/ccfgdlY1.s:1265   .text.FLASH_EraseAllBank2Sectors:000000000000005c $d
     /tmp/ccfgdlY1.s:1270   .text.FLASH_ProgramDoubleWord:0000000000000000 $t
     /tmp/ccfgdlY1.s:1277   .text.FLASH_ProgramDoubleWord:0000000000000000 FLASH_ProgramDoubleWord
     /tmp/ccfgdlY1.s:1334   .text.FLASH_ProgramDoubleWord:0000000000000040 $d
     /tmp/ccfgdlY1.s:1339   .text.FLASH_ProgramWord:0000000000000000 $t
     /tmp/ccfgdlY1.s:1346   .text.FLASH_ProgramWord:0000000000000000 FLASH_ProgramWord
     /tmp/ccfgdlY1.s:1400   .text.FLASH_ProgramWord:000000000000003c $d
     /tmp/ccfgdlY1.s:1405   .text.FLASH_ProgramHalfWord:0000000000000000 $t
     /tmp/ccfgdlY1.s:1412   .text.FLASH_ProgramHalfWord:0000000000000000 FLASH_ProgramHalfWord
     /tmp/ccfgdlY1.s:1466   .text.FLASH_ProgramHalfWord:000000000000003c $d
     /tmp/ccfgdlY1.s:1471   .text.FLASH_ProgramByte:0000000000000000 $t
     /tmp/ccfgdlY1.s:1478   .text.FLASH_ProgramByte:0000000000000000 FLASH_ProgramByte
     /tmp/ccfgdlY1.s:1531   .text.FLASH_ProgramByte:0000000000000038 $d
     /tmp/ccfgdlY1.s:1536   .text.FLASH_OB_WRPConfig:0000000000000000 $t
     /tmp/ccfgdlY1.s:1543   .text.FLASH_OB_WRPConfig:0000000000000000 FLASH_OB_WRPConfig
     /tmp/ccfgdlY1.s:1596   .text.FLASH_OB_WRPConfig:0000000000000030 $d
     /tmp/ccfgdlY1.s:1601   .text.FLASH_OB_WRP1Config:0000000000000000 $t
     /tmp/ccfgdlY1.s:1608   .text.FLASH_OB_WRP1Config:0000000000000000 FLASH_OB_WRP1Config
     /tmp/ccfgdlY1.s:1661   .text.FLASH_OB_WRP1Config:0000000000000030 $d
     /tmp/ccfgdlY1.s:1666   .text.FLASH_OB_PCROPConfig:0000000000000000 $t
     /tmp/ccfgdlY1.s:1673   .text.FLASH_OB_PCROPConfig:0000000000000000 FLASH_OB_PCROPConfig
     /tmp/ccfgdlY1.s:1726   .text.FLASH_OB_PCROPConfig:0000000000000030 $d
     /tmp/ccfgdlY1.s:1731   .text.FLASH_OB_PCROP1Config:0000000000000000 $t
     /tmp/ccfgdlY1.s:1738   .text.FLASH_OB_PCROP1Config:0000000000000000 FLASH_OB_PCROP1Config
     /tmp/ccfgdlY1.s:1791   .text.FLASH_OB_PCROP1Config:0000000000000030 $d
     /tmp/ccfgdlY1.s:1796   .text.FLASH_OB_RDPConfig:0000000000000000 $t
     /tmp/ccfgdlY1.s:1803   .text.FLASH_OB_RDPConfig:0000000000000000 FLASH_OB_RDPConfig
ARM GAS  /tmp/ccfgdlY1.s 			page 67


     /tmp/ccfgdlY1.s:1834   .text.FLASH_OB_RDPConfig:0000000000000014 $d
     /tmp/ccfgdlY1.s:1839   .text.FLASH_OB_UserConfig:0000000000000000 $t
     /tmp/ccfgdlY1.s:1846   .text.FLASH_OB_UserConfig:0000000000000000 FLASH_OB_UserConfig
     /tmp/ccfgdlY1.s:1892   .text.FLASH_OB_UserConfig:0000000000000024 $d
     /tmp/ccfgdlY1.s:1897   .text.FLASH_OB_Launch:0000000000000000 $t
     /tmp/ccfgdlY1.s:1904   .text.FLASH_OB_Launch:0000000000000000 FLASH_OB_Launch
     /tmp/ccfgdlY1.s:1929   .text.FLASH_OB_Launch:0000000000000014 $d
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
