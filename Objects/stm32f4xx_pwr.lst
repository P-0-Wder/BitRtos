ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_pwr.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.PWR_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	PWR_DeInit
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	PWR_DeInit:
  27              	.LFB123:
  28              		.file 1 "FWLIB/src/stm32f4xx_pwr.c"
   1:FWLIB/src/stm32f4xx_pwr.c **** /**
   2:FWLIB/src/stm32f4xx_pwr.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_pwr.c ****   * @file    stm32f4xx_pwr.c
   4:FWLIB/src/stm32f4xx_pwr.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_pwr.c ****   * @version V1.8.0
   6:FWLIB/src/stm32f4xx_pwr.c ****   * @date    04-November-2016
   7:FWLIB/src/stm32f4xx_pwr.c ****   * @brief   This file provides firmware functions to manage the following 
   8:FWLIB/src/stm32f4xx_pwr.c ****   *          functionalities of the Power Controller (PWR) peripheral:           
   9:FWLIB/src/stm32f4xx_pwr.c ****   *           + Backup Domain Access
  10:FWLIB/src/stm32f4xx_pwr.c ****   *           + PVD configuration
  11:FWLIB/src/stm32f4xx_pwr.c ****   *           + WakeUp pin configuration
  12:FWLIB/src/stm32f4xx_pwr.c ****   *           + Main and Backup Regulators configuration
  13:FWLIB/src/stm32f4xx_pwr.c ****   *           + FLASH Power Down configuration
  14:FWLIB/src/stm32f4xx_pwr.c ****   *           + Low Power modes configuration
  15:FWLIB/src/stm32f4xx_pwr.c ****   *           + Flags management
  16:FWLIB/src/stm32f4xx_pwr.c ****   *               
  17:FWLIB/src/stm32f4xx_pwr.c ****   ******************************************************************************
  18:FWLIB/src/stm32f4xx_pwr.c ****   * @attention
  19:FWLIB/src/stm32f4xx_pwr.c ****   *
  20:FWLIB/src/stm32f4xx_pwr.c ****   * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
  21:FWLIB/src/stm32f4xx_pwr.c ****   *
  22:FWLIB/src/stm32f4xx_pwr.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  23:FWLIB/src/stm32f4xx_pwr.c ****   * You may not use this file except in compliance with the License.
  24:FWLIB/src/stm32f4xx_pwr.c ****   * You may obtain a copy of the License at:
  25:FWLIB/src/stm32f4xx_pwr.c ****   *
  26:FWLIB/src/stm32f4xx_pwr.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  27:FWLIB/src/stm32f4xx_pwr.c ****   *
  28:FWLIB/src/stm32f4xx_pwr.c ****   * Unless required by applicable law or agreed to in writing, software 
  29:FWLIB/src/stm32f4xx_pwr.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  30:FWLIB/src/stm32f4xx_pwr.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 2


  31:FWLIB/src/stm32f4xx_pwr.c ****   * See the License for the specific language governing permissions and
  32:FWLIB/src/stm32f4xx_pwr.c ****   * limitations under the License.
  33:FWLIB/src/stm32f4xx_pwr.c ****   *
  34:FWLIB/src/stm32f4xx_pwr.c ****   ******************************************************************************
  35:FWLIB/src/stm32f4xx_pwr.c ****   */ 
  36:FWLIB/src/stm32f4xx_pwr.c **** 
  37:FWLIB/src/stm32f4xx_pwr.c **** /* Includes ------------------------------------------------------------------*/
  38:FWLIB/src/stm32f4xx_pwr.c **** #include "stm32f4xx_pwr.h"
  39:FWLIB/src/stm32f4xx_pwr.c **** #include "stm32f4xx_rcc.h"
  40:FWLIB/src/stm32f4xx_pwr.c **** 
  41:FWLIB/src/stm32f4xx_pwr.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  42:FWLIB/src/stm32f4xx_pwr.c ****   * @{
  43:FWLIB/src/stm32f4xx_pwr.c ****   */
  44:FWLIB/src/stm32f4xx_pwr.c **** 
  45:FWLIB/src/stm32f4xx_pwr.c **** /** @defgroup PWR 
  46:FWLIB/src/stm32f4xx_pwr.c ****   * @brief PWR driver modules
  47:FWLIB/src/stm32f4xx_pwr.c ****   * @{
  48:FWLIB/src/stm32f4xx_pwr.c ****   */ 
  49:FWLIB/src/stm32f4xx_pwr.c **** 
  50:FWLIB/src/stm32f4xx_pwr.c **** /* Private typedef -----------------------------------------------------------*/
  51:FWLIB/src/stm32f4xx_pwr.c **** /* Private define ------------------------------------------------------------*/
  52:FWLIB/src/stm32f4xx_pwr.c **** /* --------- PWR registers bit address in the alias region ---------- */
  53:FWLIB/src/stm32f4xx_pwr.c **** #define PWR_OFFSET               (PWR_BASE - PERIPH_BASE)
  54:FWLIB/src/stm32f4xx_pwr.c **** 
  55:FWLIB/src/stm32f4xx_pwr.c **** /* --- CR Register ---*/
  56:FWLIB/src/stm32f4xx_pwr.c **** 
  57:FWLIB/src/stm32f4xx_pwr.c **** /* Alias word address of DBP bit */
  58:FWLIB/src/stm32f4xx_pwr.c **** #define CR_OFFSET                (PWR_OFFSET + 0x00)
  59:FWLIB/src/stm32f4xx_pwr.c **** #define DBP_BitNumber            0x08
  60:FWLIB/src/stm32f4xx_pwr.c **** #define CR_DBP_BB                (PERIPH_BB_BASE + (CR_OFFSET * 32) + (DBP_BitNumber * 4))
  61:FWLIB/src/stm32f4xx_pwr.c **** 
  62:FWLIB/src/stm32f4xx_pwr.c **** /* Alias word address of PVDE bit */
  63:FWLIB/src/stm32f4xx_pwr.c **** #define PVDE_BitNumber           0x04
  64:FWLIB/src/stm32f4xx_pwr.c **** #define CR_PVDE_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PVDE_BitNumber * 4))
  65:FWLIB/src/stm32f4xx_pwr.c **** 
  66:FWLIB/src/stm32f4xx_pwr.c **** /* Alias word address of FPDS bit */
  67:FWLIB/src/stm32f4xx_pwr.c **** #define FPDS_BitNumber           0x09
  68:FWLIB/src/stm32f4xx_pwr.c **** #define CR_FPDS_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (FPDS_BitNumber * 4))
  69:FWLIB/src/stm32f4xx_pwr.c **** 
  70:FWLIB/src/stm32f4xx_pwr.c **** /* Alias word address of PMODE bit */
  71:FWLIB/src/stm32f4xx_pwr.c **** #define PMODE_BitNumber           0x0E
  72:FWLIB/src/stm32f4xx_pwr.c **** #define CR_PMODE_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PMODE_BitNumber * 4))
  73:FWLIB/src/stm32f4xx_pwr.c **** 
  74:FWLIB/src/stm32f4xx_pwr.c **** /* Alias word address of ODEN bit */
  75:FWLIB/src/stm32f4xx_pwr.c **** #define ODEN_BitNumber           0x10
  76:FWLIB/src/stm32f4xx_pwr.c **** #define CR_ODEN_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (ODEN_BitNumber * 4))
  77:FWLIB/src/stm32f4xx_pwr.c **** 
  78:FWLIB/src/stm32f4xx_pwr.c **** /* Alias word address of ODSWEN bit */
  79:FWLIB/src/stm32f4xx_pwr.c **** #define ODSWEN_BitNumber         0x11
  80:FWLIB/src/stm32f4xx_pwr.c **** #define CR_ODSWEN_BB             (PERIPH_BB_BASE + (CR_OFFSET * 32) + (ODSWEN_BitNumber * 4))
  81:FWLIB/src/stm32f4xx_pwr.c **** 
  82:FWLIB/src/stm32f4xx_pwr.c **** #if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx)
  83:FWLIB/src/stm32f4xx_pwr.c **** /* Alias word address of MRUDS bit */
  84:FWLIB/src/stm32f4xx_pwr.c **** #define MRUDS_BitNumber         0x0B
  85:FWLIB/src/stm32f4xx_pwr.c **** #define CR_MRUDS_BB             (PERIPH_BB_BASE + (CR_OFFSET * 32) + (MRUDS_BitNumber * 4))
  86:FWLIB/src/stm32f4xx_pwr.c **** 
  87:FWLIB/src/stm32f4xx_pwr.c **** /* Alias word address of LPUDS bit */
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 3


  88:FWLIB/src/stm32f4xx_pwr.c **** #define LPUDS_BitNumber         0x0A
  89:FWLIB/src/stm32f4xx_pwr.c **** #define CR_LPUDS_BB             (PERIPH_BB_BASE + (CR_OFFSET * 32) + (LPUDS_BitNumber * 4))
  90:FWLIB/src/stm32f4xx_pwr.c **** #endif /* STM32F427_437xx || STM32F429_439xx || STM32F446xx */
  91:FWLIB/src/stm32f4xx_pwr.c **** 
  92:FWLIB/src/stm32f4xx_pwr.c **** #if defined(STM32F401xx) || defined(STM32F410xx) || defined(STM32F411xE) || defined(STM32F412xG) ||
  93:FWLIB/src/stm32f4xx_pwr.c **** /* Alias word address of MRLVDS bit */
  94:FWLIB/src/stm32f4xx_pwr.c **** #define MRLVDS_BitNumber         0x0B
  95:FWLIB/src/stm32f4xx_pwr.c **** #define CR_MRLVDS_BB             (PERIPH_BB_BASE + (CR_OFFSET * 32) + (MRLVDS_BitNumber * 4))
  96:FWLIB/src/stm32f4xx_pwr.c **** 
  97:FWLIB/src/stm32f4xx_pwr.c **** /* Alias word address of LPLVDS bit */
  98:FWLIB/src/stm32f4xx_pwr.c **** #define LPLVDS_BitNumber         0x0A
  99:FWLIB/src/stm32f4xx_pwr.c **** #define CR_LPLVDS_BB             (PERIPH_BB_BASE + (CR_OFFSET * 32) + (LPLVDS_BitNumber * 4))
 100:FWLIB/src/stm32f4xx_pwr.c **** #endif /* STM32F401xx || STM32F410xx || STM32F411xE || STM32F412xG || STM32F413_423xx */
 101:FWLIB/src/stm32f4xx_pwr.c **** 
 102:FWLIB/src/stm32f4xx_pwr.c **** /* --- CSR Register ---*/
 103:FWLIB/src/stm32f4xx_pwr.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
 104:FWLIB/src/stm32f4xx_pwr.c **** /* Alias word address of EWUP bit */
 105:FWLIB/src/stm32f4xx_pwr.c **** #define CSR_OFFSET               (PWR_OFFSET + 0x04)
 106:FWLIB/src/stm32f4xx_pwr.c **** #define EWUP_BitNumber           0x08
 107:FWLIB/src/stm32f4xx_pwr.c **** #define CSR_EWUP_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (EWUP_BitNumber * 4))
 108:FWLIB/src/stm32f4xx_pwr.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F410xx || STM
 109:FWLIB/src/stm32f4xx_pwr.c **** 
 110:FWLIB/src/stm32f4xx_pwr.c **** #if defined(STM32F410xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx
 111:FWLIB/src/stm32f4xx_pwr.c **** /* Alias word address of EWUP2 bit */
 112:FWLIB/src/stm32f4xx_pwr.c **** #define CSR_OFFSET               (PWR_OFFSET + 0x04)
 113:FWLIB/src/stm32f4xx_pwr.c **** #define EWUP1_BitNumber           0x08
 114:FWLIB/src/stm32f4xx_pwr.c **** #define CSR_EWUP1_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (EWUP1_BitNumber * 4))
 115:FWLIB/src/stm32f4xx_pwr.c **** #define EWUP2_BitNumber           0x07
 116:FWLIB/src/stm32f4xx_pwr.c **** #define CSR_EWUP2_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (EWUP2_BitNumber * 4))
 117:FWLIB/src/stm32f4xx_pwr.c **** #if defined(STM32F410xx) || defined(STM32F412xG) || defined(STM32F413_423xx)
 118:FWLIB/src/stm32f4xx_pwr.c **** #define EWUP3_BitNumber           0x06
 119:FWLIB/src/stm32f4xx_pwr.c **** #define CSR_EWUP3_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (EWUP2_BitNumber * 4))
 120:FWLIB/src/stm32f4xx_pwr.c **** #endif /* STM32F410xx || STM32F412xG || STM32F413_423xx */
 121:FWLIB/src/stm32f4xx_pwr.c **** #endif /* STM32F410xx || STM32F412xG || STM32F413_423xx || STM32F446xx */
 122:FWLIB/src/stm32f4xx_pwr.c **** 
 123:FWLIB/src/stm32f4xx_pwr.c **** /* Alias word address of BRE bit */
 124:FWLIB/src/stm32f4xx_pwr.c **** #define BRE_BitNumber            0x09
 125:FWLIB/src/stm32f4xx_pwr.c **** #define CSR_BRE_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (BRE_BitNumber * 4))
 126:FWLIB/src/stm32f4xx_pwr.c **** 
 127:FWLIB/src/stm32f4xx_pwr.c **** /* ------------------ PWR registers bit mask ------------------------ */
 128:FWLIB/src/stm32f4xx_pwr.c **** 
 129:FWLIB/src/stm32f4xx_pwr.c **** /* CR register bit mask */
 130:FWLIB/src/stm32f4xx_pwr.c **** #define CR_DS_MASK               ((uint32_t)0xFFFFF3FC)
 131:FWLIB/src/stm32f4xx_pwr.c **** #define CR_PLS_MASK              ((uint32_t)0xFFFFFF1F)
 132:FWLIB/src/stm32f4xx_pwr.c **** #define CR_VOS_MASK              ((uint32_t)0xFFFF3FFF)
 133:FWLIB/src/stm32f4xx_pwr.c **** 
 134:FWLIB/src/stm32f4xx_pwr.c **** /* Private macro -------------------------------------------------------------*/
 135:FWLIB/src/stm32f4xx_pwr.c **** /* Private variables ---------------------------------------------------------*/
 136:FWLIB/src/stm32f4xx_pwr.c **** /* Private function prototypes -----------------------------------------------*/
 137:FWLIB/src/stm32f4xx_pwr.c **** /* Private functions ---------------------------------------------------------*/
 138:FWLIB/src/stm32f4xx_pwr.c **** 
 139:FWLIB/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Private_Functions
 140:FWLIB/src/stm32f4xx_pwr.c ****   * @{
 141:FWLIB/src/stm32f4xx_pwr.c ****   */
 142:FWLIB/src/stm32f4xx_pwr.c **** 
 143:FWLIB/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group1 Backup Domain Access function 
 144:FWLIB/src/stm32f4xx_pwr.c ****   *  @brief   Backup Domain Access function  
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 4


 145:FWLIB/src/stm32f4xx_pwr.c ****   *
 146:FWLIB/src/stm32f4xx_pwr.c **** @verbatim   
 147:FWLIB/src/stm32f4xx_pwr.c ****  ===============================================================================
 148:FWLIB/src/stm32f4xx_pwr.c ****                   ##### Backup Domain Access function #####
 149:FWLIB/src/stm32f4xx_pwr.c ****  ===============================================================================  
 150:FWLIB/src/stm32f4xx_pwr.c ****     [..]
 151:FWLIB/src/stm32f4xx_pwr.c ****       After reset, the backup domain (RTC registers, RTC backup data 
 152:FWLIB/src/stm32f4xx_pwr.c ****       registers and backup SRAM) is protected against possible unwanted 
 153:FWLIB/src/stm32f4xx_pwr.c ****       write accesses. 
 154:FWLIB/src/stm32f4xx_pwr.c ****       To enable access to the RTC Domain and RTC registers, proceed as follows:
 155:FWLIB/src/stm32f4xx_pwr.c ****         (+) Enable the Power Controller (PWR) APB1 interface clock using the
 156:FWLIB/src/stm32f4xx_pwr.c ****             RCC_APB1PeriphClockCmd() function.
 157:FWLIB/src/stm32f4xx_pwr.c ****         (+) Enable access to RTC domain using the PWR_BackupAccessCmd() function.
 158:FWLIB/src/stm32f4xx_pwr.c **** 
 159:FWLIB/src/stm32f4xx_pwr.c **** @endverbatim
 160:FWLIB/src/stm32f4xx_pwr.c ****   * @{
 161:FWLIB/src/stm32f4xx_pwr.c ****   */
 162:FWLIB/src/stm32f4xx_pwr.c **** 
 163:FWLIB/src/stm32f4xx_pwr.c **** /**
 164:FWLIB/src/stm32f4xx_pwr.c ****   * @brief  Deinitializes the PWR peripheral registers to their default reset values.     
 165:FWLIB/src/stm32f4xx_pwr.c ****   * @param  None
 166:FWLIB/src/stm32f4xx_pwr.c ****   * @retval None
 167:FWLIB/src/stm32f4xx_pwr.c ****   */
 168:FWLIB/src/stm32f4xx_pwr.c **** void PWR_DeInit(void)
 169:FWLIB/src/stm32f4xx_pwr.c **** {
  29              		.loc 1 169 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 08B5     		push	{r3, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 3, -8
  37              		.cfi_offset 14, -4
 170:FWLIB/src/stm32f4xx_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
  38              		.loc 1 170 3 view .LVU1
  39 0002 0121     		movs	r1, #1
  40 0004 4FF08050 		mov	r0, #268435456
  41 0008 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  42              	.LVL0:
 171:FWLIB/src/stm32f4xx_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
  43              		.loc 1 171 3 view .LVU2
  44 000c 0021     		movs	r1, #0
  45 000e 4FF08050 		mov	r0, #268435456
  46 0012 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  47              	.LVL1:
 172:FWLIB/src/stm32f4xx_pwr.c **** }
  48              		.loc 1 172 1 is_stmt 0 view .LVU3
  49 0016 08BD     		pop	{r3, pc}
  50              		.cfi_endproc
  51              	.LFE123:
  53              		.section	.text.PWR_BackupAccessCmd,"ax",%progbits
  54              		.align	1
  55              		.global	PWR_BackupAccessCmd
  56              		.syntax unified
  57              		.thumb
  58              		.thumb_func
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 5


  59              		.fpu fpv4-sp-d16
  61              	PWR_BackupAccessCmd:
  62              	.LVL2:
  63              	.LFB124:
 173:FWLIB/src/stm32f4xx_pwr.c **** 
 174:FWLIB/src/stm32f4xx_pwr.c **** /**
 175:FWLIB/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables access to the backup domain (RTC registers, RTC 
 176:FWLIB/src/stm32f4xx_pwr.c ****   *         backup data registers and backup SRAM).
 177:FWLIB/src/stm32f4xx_pwr.c ****   * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
 178:FWLIB/src/stm32f4xx_pwr.c ****   *         Backup Domain Access should be kept enabled.
 179:FWLIB/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the access to the backup domain.
 180:FWLIB/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 181:FWLIB/src/stm32f4xx_pwr.c ****   * @retval None
 182:FWLIB/src/stm32f4xx_pwr.c ****   */
 183:FWLIB/src/stm32f4xx_pwr.c **** void PWR_BackupAccessCmd(FunctionalState NewState)
 184:FWLIB/src/stm32f4xx_pwr.c **** {
  64              		.loc 1 184 1 is_stmt 1 view -0
  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 0
  67              		@ frame_needed = 0, uses_anonymous_args = 0
  68              		@ link register save eliminated.
 185:FWLIB/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 186:FWLIB/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
  69              		.loc 1 186 3 view .LVU5
 187:FWLIB/src/stm32f4xx_pwr.c ****   
 188:FWLIB/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
  70              		.loc 1 188 3 view .LVU6
  71              		.loc 1 188 32 is_stmt 0 view .LVU7
  72 0000 014B     		ldr	r3, .L4
  73 0002 1862     		str	r0, [r3, #32]
 189:FWLIB/src/stm32f4xx_pwr.c **** }
  74              		.loc 1 189 1 view .LVU8
  75 0004 7047     		bx	lr
  76              	.L5:
  77 0006 00BF     		.align	2
  78              	.L4:
  79 0008 00000E42 		.word	1108213760
  80              		.cfi_endproc
  81              	.LFE124:
  83              		.section	.text.PWR_PVDLevelConfig,"ax",%progbits
  84              		.align	1
  85              		.global	PWR_PVDLevelConfig
  86              		.syntax unified
  87              		.thumb
  88              		.thumb_func
  89              		.fpu fpv4-sp-d16
  91              	PWR_PVDLevelConfig:
  92              	.LVL3:
  93              	.LFB125:
 190:FWLIB/src/stm32f4xx_pwr.c **** 
 191:FWLIB/src/stm32f4xx_pwr.c **** /**
 192:FWLIB/src/stm32f4xx_pwr.c ****   * @}
 193:FWLIB/src/stm32f4xx_pwr.c ****   */
 194:FWLIB/src/stm32f4xx_pwr.c **** 
 195:FWLIB/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group2 PVD configuration functions
 196:FWLIB/src/stm32f4xx_pwr.c ****   *  @brief   PVD configuration functions 
 197:FWLIB/src/stm32f4xx_pwr.c ****   *
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 6


 198:FWLIB/src/stm32f4xx_pwr.c **** @verbatim   
 199:FWLIB/src/stm32f4xx_pwr.c ****  ===============================================================================
 200:FWLIB/src/stm32f4xx_pwr.c ****                     ##### PVD configuration functions #####
 201:FWLIB/src/stm32f4xx_pwr.c ****  ===============================================================================  
 202:FWLIB/src/stm32f4xx_pwr.c ****     [..]
 203:FWLIB/src/stm32f4xx_pwr.c ****       (+) The PVD is used to monitor the VDD power supply by comparing it to a 
 204:FWLIB/src/stm32f4xx_pwr.c ****           threshold selected by the PVD Level (PLS[2:0] bits in the PWR_CR).
 205:FWLIB/src/stm32f4xx_pwr.c ****       (+) A PVDO flag is available to indicate if VDD/VDDA is higher or lower 
 206:FWLIB/src/stm32f4xx_pwr.c ****           than the PVD threshold. This event is internally connected to the EXTI 
 207:FWLIB/src/stm32f4xx_pwr.c ****           line16 and can generate an interrupt if enabled through the EXTI registers.
 208:FWLIB/src/stm32f4xx_pwr.c ****       (+) The PVD is stopped in Standby mode.
 209:FWLIB/src/stm32f4xx_pwr.c **** 
 210:FWLIB/src/stm32f4xx_pwr.c **** @endverbatim
 211:FWLIB/src/stm32f4xx_pwr.c ****   * @{
 212:FWLIB/src/stm32f4xx_pwr.c ****   */
 213:FWLIB/src/stm32f4xx_pwr.c **** 
 214:FWLIB/src/stm32f4xx_pwr.c **** /**
 215:FWLIB/src/stm32f4xx_pwr.c ****   * @brief  Configures the voltage threshold detected by the Power Voltage Detector(PVD).
 216:FWLIB/src/stm32f4xx_pwr.c ****   * @param  PWR_PVDLevel: specifies the PVD detection level
 217:FWLIB/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 218:FWLIB/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_0
 219:FWLIB/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_1
 220:FWLIB/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_2
 221:FWLIB/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_3
 222:FWLIB/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_4
 223:FWLIB/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_5
 224:FWLIB/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_6
 225:FWLIB/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_7
 226:FWLIB/src/stm32f4xx_pwr.c ****   * @note   Refer to the electrical characteristics of your device datasheet for
 227:FWLIB/src/stm32f4xx_pwr.c ****   *         more details about the voltage threshold corresponding to each 
 228:FWLIB/src/stm32f4xx_pwr.c ****   *         detection level.
 229:FWLIB/src/stm32f4xx_pwr.c ****   * @retval None
 230:FWLIB/src/stm32f4xx_pwr.c ****   */
 231:FWLIB/src/stm32f4xx_pwr.c **** void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
 232:FWLIB/src/stm32f4xx_pwr.c **** {
  94              		.loc 1 232 1 is_stmt 1 view -0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 0
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  98              		@ link register save eliminated.
 233:FWLIB/src/stm32f4xx_pwr.c ****   uint32_t tmpreg = 0;
  99              		.loc 1 233 3 view .LVU10
 234:FWLIB/src/stm32f4xx_pwr.c ****   
 235:FWLIB/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 236:FWLIB/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
 100              		.loc 1 236 3 view .LVU11
 237:FWLIB/src/stm32f4xx_pwr.c ****   
 238:FWLIB/src/stm32f4xx_pwr.c ****   tmpreg = PWR->CR;
 101              		.loc 1 238 3 view .LVU12
 102              		.loc 1 238 10 is_stmt 0 view .LVU13
 103 0000 034A     		ldr	r2, .L7
 104 0002 1368     		ldr	r3, [r2]
 105              	.LVL4:
 239:FWLIB/src/stm32f4xx_pwr.c ****   
 240:FWLIB/src/stm32f4xx_pwr.c ****   /* Clear PLS[7:5] bits */
 241:FWLIB/src/stm32f4xx_pwr.c ****   tmpreg &= CR_PLS_MASK;
 106              		.loc 1 241 3 is_stmt 1 view .LVU14
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 7


 107              		.loc 1 241 10 is_stmt 0 view .LVU15
 108 0004 23F0E003 		bic	r3, r3, #224
 109              	.LVL5:
 242:FWLIB/src/stm32f4xx_pwr.c ****   
 243:FWLIB/src/stm32f4xx_pwr.c ****   /* Set PLS[7:5] bits according to PWR_PVDLevel value */
 244:FWLIB/src/stm32f4xx_pwr.c ****   tmpreg |= PWR_PVDLevel;
 110              		.loc 1 244 3 is_stmt 1 view .LVU16
 111              		.loc 1 244 10 is_stmt 0 view .LVU17
 112 0008 0343     		orrs	r3, r3, r0
 113              	.LVL6:
 245:FWLIB/src/stm32f4xx_pwr.c ****   
 246:FWLIB/src/stm32f4xx_pwr.c ****   /* Store the new value */
 247:FWLIB/src/stm32f4xx_pwr.c ****   PWR->CR = tmpreg;
 114              		.loc 1 247 3 is_stmt 1 view .LVU18
 115              		.loc 1 247 11 is_stmt 0 view .LVU19
 116 000a 1360     		str	r3, [r2]
 248:FWLIB/src/stm32f4xx_pwr.c **** }
 117              		.loc 1 248 1 view .LVU20
 118 000c 7047     		bx	lr
 119              	.L8:
 120 000e 00BF     		.align	2
 121              	.L7:
 122 0010 00700040 		.word	1073770496
 123              		.cfi_endproc
 124              	.LFE125:
 126              		.section	.text.PWR_PVDCmd,"ax",%progbits
 127              		.align	1
 128              		.global	PWR_PVDCmd
 129              		.syntax unified
 130              		.thumb
 131              		.thumb_func
 132              		.fpu fpv4-sp-d16
 134              	PWR_PVDCmd:
 135              	.LVL7:
 136              	.LFB126:
 249:FWLIB/src/stm32f4xx_pwr.c **** 
 250:FWLIB/src/stm32f4xx_pwr.c **** /**
 251:FWLIB/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Power Voltage Detector(PVD).
 252:FWLIB/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the PVD.
 253:FWLIB/src/stm32f4xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
 254:FWLIB/src/stm32f4xx_pwr.c ****   * @retval None
 255:FWLIB/src/stm32f4xx_pwr.c ****   */
 256:FWLIB/src/stm32f4xx_pwr.c **** void PWR_PVDCmd(FunctionalState NewState)
 257:FWLIB/src/stm32f4xx_pwr.c **** {
 137              		.loc 1 257 1 is_stmt 1 view -0
 138              		.cfi_startproc
 139              		@ args = 0, pretend = 0, frame = 0
 140              		@ frame_needed = 0, uses_anonymous_args = 0
 141              		@ link register save eliminated.
 258:FWLIB/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 259:FWLIB/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 142              		.loc 1 259 3 view .LVU22
 260:FWLIB/src/stm32f4xx_pwr.c ****   
 261:FWLIB/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 143              		.loc 1 261 3 view .LVU23
 144              		.loc 1 261 33 is_stmt 0 view .LVU24
 145 0000 014B     		ldr	r3, .L10
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 8


 146 0002 1861     		str	r0, [r3, #16]
 262:FWLIB/src/stm32f4xx_pwr.c **** }
 147              		.loc 1 262 1 view .LVU25
 148 0004 7047     		bx	lr
 149              	.L11:
 150 0006 00BF     		.align	2
 151              	.L10:
 152 0008 00000E42 		.word	1108213760
 153              		.cfi_endproc
 154              	.LFE126:
 156              		.section	.text.PWR_WakeUpPinCmd,"ax",%progbits
 157              		.align	1
 158              		.global	PWR_WakeUpPinCmd
 159              		.syntax unified
 160              		.thumb
 161              		.thumb_func
 162              		.fpu fpv4-sp-d16
 164              	PWR_WakeUpPinCmd:
 165              	.LVL8:
 166              	.LFB127:
 263:FWLIB/src/stm32f4xx_pwr.c **** 
 264:FWLIB/src/stm32f4xx_pwr.c **** /**
 265:FWLIB/src/stm32f4xx_pwr.c ****   * @}
 266:FWLIB/src/stm32f4xx_pwr.c ****   */
 267:FWLIB/src/stm32f4xx_pwr.c **** 
 268:FWLIB/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group3 WakeUp pin configuration functions
 269:FWLIB/src/stm32f4xx_pwr.c ****   *  @brief   WakeUp pin configuration functions 
 270:FWLIB/src/stm32f4xx_pwr.c ****   *
 271:FWLIB/src/stm32f4xx_pwr.c **** @verbatim   
 272:FWLIB/src/stm32f4xx_pwr.c ****  ===============================================================================
 273:FWLIB/src/stm32f4xx_pwr.c ****                  ##### WakeUp pin configuration functions #####
 274:FWLIB/src/stm32f4xx_pwr.c ****  ===============================================================================  
 275:FWLIB/src/stm32f4xx_pwr.c ****     [..]
 276:FWLIB/src/stm32f4xx_pwr.c ****       (+) WakeUp pin is used to wakeup the system from Standby mode. This pin is 
 277:FWLIB/src/stm32f4xx_pwr.c ****           forced in input pull down configuration and is active on rising edges.
 278:FWLIB/src/stm32f4xx_pwr.c ****       (+) There is one Wake-up pin: Wake-up Pin 1 on PA.00.
 279:FWLIB/src/stm32f4xx_pwr.c **** 	   (++) For STM32F446xx there are two Wake-Up pins: Pin1 on PA.00 and Pin2 on PC.13
 280:FWLIB/src/stm32f4xx_pwr.c ****            (++) For STM32F410xx/STM32F412xG/STM32F413_423xx there are three Wake-Up pins: Pin1 on P
 281:FWLIB/src/stm32f4xx_pwr.c **** @endverbatim
 282:FWLIB/src/stm32f4xx_pwr.c ****   * @{
 283:FWLIB/src/stm32f4xx_pwr.c ****   */
 284:FWLIB/src/stm32f4xx_pwr.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
 285:FWLIB/src/stm32f4xx_pwr.c **** /**
 286:FWLIB/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the WakeUp Pin functionality.
 287:FWLIB/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the WakeUp Pin functionality.
 288:FWLIB/src/stm32f4xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
 289:FWLIB/src/stm32f4xx_pwr.c ****   * @retval None
 290:FWLIB/src/stm32f4xx_pwr.c ****   */
 291:FWLIB/src/stm32f4xx_pwr.c **** void PWR_WakeUpPinCmd(FunctionalState NewState)
 292:FWLIB/src/stm32f4xx_pwr.c **** {
 167              		.loc 1 292 1 is_stmt 1 view -0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 0
 170              		@ frame_needed = 0, uses_anonymous_args = 0
 171              		@ link register save eliminated.
 293:FWLIB/src/stm32f4xx_pwr.c ****   /* Check the parameters */  
 294:FWLIB/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 9


 172              		.loc 1 294 3 view .LVU27
 295:FWLIB/src/stm32f4xx_pwr.c **** 
 296:FWLIB/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 173              		.loc 1 296 3 view .LVU28
 174              		.loc 1 296 34 is_stmt 0 view .LVU29
 175 0000 014B     		ldr	r3, .L13
 176 0002 C3F8A000 		str	r0, [r3, #160]
 297:FWLIB/src/stm32f4xx_pwr.c **** }
 177              		.loc 1 297 1 view .LVU30
 178 0006 7047     		bx	lr
 179              	.L14:
 180              		.align	2
 181              	.L13:
 182 0008 00000E42 		.word	1108213760
 183              		.cfi_endproc
 184              	.LFE127:
 186              		.section	.text.PWR_BackupRegulatorCmd,"ax",%progbits
 187              		.align	1
 188              		.global	PWR_BackupRegulatorCmd
 189              		.syntax unified
 190              		.thumb
 191              		.thumb_func
 192              		.fpu fpv4-sp-d16
 194              	PWR_BackupRegulatorCmd:
 195              	.LVL9:
 196              	.LFB128:
 298:FWLIB/src/stm32f4xx_pwr.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE */
 299:FWLIB/src/stm32f4xx_pwr.c **** 
 300:FWLIB/src/stm32f4xx_pwr.c **** #if defined(STM32F410xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx
 301:FWLIB/src/stm32f4xx_pwr.c **** /**
 302:FWLIB/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the WakeUp Pin functionality.
 303:FWLIB/src/stm32f4xx_pwr.c ****   * @param  PWR_WakeUpPinx: specifies the WakeUp Pin.
 304:FWLIB/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 305:FWLIB/src/stm32f4xx_pwr.c ****   *            @arg PWR_WakeUp_Pin1: WKUP1 pin is used for wakeup from Standby mode.
 306:FWLIB/src/stm32f4xx_pwr.c ****   *            @arg PWR_WakeUp_Pin2: WKUP2 pin is used for wakeup from Standby mode.
 307:FWLIB/src/stm32f4xx_pwr.c ****   *            @arg PWR_WakeUp_Pin3: WKUP3 pin is used for wakeup from Standby mode.(only for STM32
 308:FWLIB/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the WakeUp Pin functionality.
 309:FWLIB/src/stm32f4xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
 310:FWLIB/src/stm32f4xx_pwr.c ****   * @retval None
 311:FWLIB/src/stm32f4xx_pwr.c ****   */
 312:FWLIB/src/stm32f4xx_pwr.c **** void PWR_WakeUpPinCmd(uint32_t PWR_WakeUpPinx, FunctionalState NewState)
 313:FWLIB/src/stm32f4xx_pwr.c **** {
 314:FWLIB/src/stm32f4xx_pwr.c ****   /* Check the parameters */  
 315:FWLIB/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 316:FWLIB/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(NewState));
 317:FWLIB/src/stm32f4xx_pwr.c ****   if(PWR_WakeUpPinx == PWR_WakeUp_Pin1) /* PWR_WakeUp_Pin1 */
 318:FWLIB/src/stm32f4xx_pwr.c ****   {
 319:FWLIB/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CSR_EWUP1_BB = (uint32_t)NewState;
 320:FWLIB/src/stm32f4xx_pwr.c ****   }
 321:FWLIB/src/stm32f4xx_pwr.c **** #if defined(STM32F410xx)|| defined(STM32F412xG) || defined(STM32F413_423xx)  
 322:FWLIB/src/stm32f4xx_pwr.c ****   else if(PWR_WakeUpPinx == PWR_WakeUp_Pin3) /* PWR_WakeUp_Pin3 */
 323:FWLIB/src/stm32f4xx_pwr.c ****   {
 324:FWLIB/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CSR_EWUP3_BB = (uint32_t)NewState;
 325:FWLIB/src/stm32f4xx_pwr.c ****   }
 326:FWLIB/src/stm32f4xx_pwr.c **** #endif /* STM32F410xx */  
 327:FWLIB/src/stm32f4xx_pwr.c ****   else /* PWR_WakeUp_Pin2 */
 328:FWLIB/src/stm32f4xx_pwr.c ****   {
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 10


 329:FWLIB/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CSR_EWUP2_BB = (uint32_t)NewState;
 330:FWLIB/src/stm32f4xx_pwr.c ****   }
 331:FWLIB/src/stm32f4xx_pwr.c **** }
 332:FWLIB/src/stm32f4xx_pwr.c **** #endif /* STM32F410xx || STM32F412xG || STM32F413_423xx || STM32F446xx */
 333:FWLIB/src/stm32f4xx_pwr.c **** 
 334:FWLIB/src/stm32f4xx_pwr.c **** /**
 335:FWLIB/src/stm32f4xx_pwr.c ****   * @}
 336:FWLIB/src/stm32f4xx_pwr.c ****   */
 337:FWLIB/src/stm32f4xx_pwr.c **** 
 338:FWLIB/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group4 Main and Backup Regulators configuration functions
 339:FWLIB/src/stm32f4xx_pwr.c ****   *  @brief   Main and Backup Regulators configuration functions 
 340:FWLIB/src/stm32f4xx_pwr.c ****   *
 341:FWLIB/src/stm32f4xx_pwr.c **** @verbatim   
 342:FWLIB/src/stm32f4xx_pwr.c ****  ===============================================================================
 343:FWLIB/src/stm32f4xx_pwr.c ****           ##### Main and Backup Regulators configuration functions #####
 344:FWLIB/src/stm32f4xx_pwr.c ****  ===============================================================================  
 345:FWLIB/src/stm32f4xx_pwr.c ****     [..]
 346:FWLIB/src/stm32f4xx_pwr.c ****       (+) The backup domain includes 4 Kbytes of backup SRAM accessible only from 
 347:FWLIB/src/stm32f4xx_pwr.c ****           the CPU, and address in 32-bit, 16-bit or 8-bit mode. Its content is 
 348:FWLIB/src/stm32f4xx_pwr.c ****           retained even in Standby or VBAT mode when the low power backup regulator
 349:FWLIB/src/stm32f4xx_pwr.c ****           is enabled. It can be considered as an internal EEPROM when VBAT is 
 350:FWLIB/src/stm32f4xx_pwr.c ****           always present. You can use the PWR_BackupRegulatorCmd() function to 
 351:FWLIB/src/stm32f4xx_pwr.c ****           enable the low power backup regulator and use the PWR_GetFlagStatus
 352:FWLIB/src/stm32f4xx_pwr.c ****           (PWR_FLAG_BRR) to check if it is ready or not. 
 353:FWLIB/src/stm32f4xx_pwr.c **** 
 354:FWLIB/src/stm32f4xx_pwr.c ****       (+) When the backup domain is supplied by VDD (analog switch connected to VDD) 
 355:FWLIB/src/stm32f4xx_pwr.c ****           the backup SRAM is powered from VDD which replaces the VBAT power supply to 
 356:FWLIB/src/stm32f4xx_pwr.c ****           save battery life.
 357:FWLIB/src/stm32f4xx_pwr.c **** 
 358:FWLIB/src/stm32f4xx_pwr.c ****       (+) The backup SRAM is not mass erased by an tamper event. It is read 
 359:FWLIB/src/stm32f4xx_pwr.c ****           protected to prevent confidential data, such as cryptographic private 
 360:FWLIB/src/stm32f4xx_pwr.c ****           key, from being accessed. The backup SRAM can be erased only through 
 361:FWLIB/src/stm32f4xx_pwr.c ****           the Flash interface when a protection level change from level 1 to 
 362:FWLIB/src/stm32f4xx_pwr.c ****           level 0 is requested. 
 363:FWLIB/src/stm32f4xx_pwr.c ****       -@- Refer to the description of Read protection (RDP) in the reference manual.
 364:FWLIB/src/stm32f4xx_pwr.c **** 
 365:FWLIB/src/stm32f4xx_pwr.c ****       (+) The main internal regulator can be configured to have a tradeoff between 
 366:FWLIB/src/stm32f4xx_pwr.c ****           performance and power consumption when the device does not operate at 
 367:FWLIB/src/stm32f4xx_pwr.c ****           the maximum frequency. 
 368:FWLIB/src/stm32f4xx_pwr.c ****       (+) For STM32F405xx/407xx and STM32F415xx/417xx  Devices, the regulator can be     
 369:FWLIB/src/stm32f4xx_pwr.c ****           configured on the fly through PWR_MainRegulatorModeConfig() function which  
 370:FWLIB/src/stm32f4xx_pwr.c ****           configure VOS bit in PWR_CR register:
 371:FWLIB/src/stm32f4xx_pwr.c ****         (++) When this bit is set (Regulator voltage output Scale 1 mode selected) 
 372:FWLIB/src/stm32f4xx_pwr.c ****              the System frequency can go up to 168 MHz. 
 373:FWLIB/src/stm32f4xx_pwr.c ****         (++) When this bit is reset (Regulator voltage output Scale 2 mode selected) 
 374:FWLIB/src/stm32f4xx_pwr.c ****              the System frequency can go up to 144 MHz.
 375:FWLIB/src/stm32f4xx_pwr.c ****              
 376:FWLIB/src/stm32f4xx_pwr.c ****        (+) For STM32F42xxx/43xxx Devices, the regulator can be configured through    
 377:FWLIB/src/stm32f4xx_pwr.c ****            PWR_MainRegulatorModeConfig() function which configure VOS[1:0] bits in
 378:FWLIB/src/stm32f4xx_pwr.c ****            PWR_CR register:  
 379:FWLIB/src/stm32f4xx_pwr.c ****            which configure VOS[1:0] bits in PWR_CR register: 
 380:FWLIB/src/stm32f4xx_pwr.c ****         (++) When VOS[1:0] = 11 (Regulator voltage output Scale 1 mode selected) 
 381:FWLIB/src/stm32f4xx_pwr.c ****              the System frequency can go up to 168 MHz. 
 382:FWLIB/src/stm32f4xx_pwr.c ****         (++) When VOS[1:0] = 10 (Regulator voltage output Scale 2 mode selected) 
 383:FWLIB/src/stm32f4xx_pwr.c ****              the System frequency can go up to 144 MHz.  
 384:FWLIB/src/stm32f4xx_pwr.c ****         (++) When VOS[1:0] = 01 (Regulator voltage output Scale 3 mode selected) 
 385:FWLIB/src/stm32f4xx_pwr.c ****              the System frequency can go up to 120 MHz. 
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 11


 386:FWLIB/src/stm32f4xx_pwr.c ****                           
 387:FWLIB/src/stm32f4xx_pwr.c ****        (+) For STM32F42xxx/43xxx Devices, the scale can be modified only when the PLL 
 388:FWLIB/src/stm32f4xx_pwr.c ****            is OFF and the HSI or HSE clock source is selected as system clock. 
 389:FWLIB/src/stm32f4xx_pwr.c ****            The new value programmed is active only when the PLL is ON.
 390:FWLIB/src/stm32f4xx_pwr.c ****            When the PLL is OFF, the voltage scale 3 is automatically selected. 
 391:FWLIB/src/stm32f4xx_pwr.c ****         Refer to the datasheets for more details.
 392:FWLIB/src/stm32f4xx_pwr.c ****         
 393:FWLIB/src/stm32f4xx_pwr.c ****        (+) For STM32F42xxx/43xxx Devices, in Run mode: the main regulator has
 394:FWLIB/src/stm32f4xx_pwr.c ****            2 operating modes available:
 395:FWLIB/src/stm32f4xx_pwr.c ****         (++) Normal mode: The CPU and core logic operate at maximum frequency at a given 
 396:FWLIB/src/stm32f4xx_pwr.c ****              voltage scaling (scale 1, scale 2 or scale 3)
 397:FWLIB/src/stm32f4xx_pwr.c ****         (++) Over-drive mode: This mode allows the CPU and the core logic to operate at a 
 398:FWLIB/src/stm32f4xx_pwr.c ****             higher frequency than the normal mode for a given voltage scaling (scale 1,  
 399:FWLIB/src/stm32f4xx_pwr.c ****             scale 2 or scale 3). This mode is enabled through PWR_OverDriveCmd() function and
 400:FWLIB/src/stm32f4xx_pwr.c ****             PWR_OverDriveSWCmd() function, to enter or exit from Over-drive mode please follow 
 401:FWLIB/src/stm32f4xx_pwr.c ****             the sequence described in Reference manual.
 402:FWLIB/src/stm32f4xx_pwr.c ****              
 403:FWLIB/src/stm32f4xx_pwr.c ****        (+) For STM32F42xxx/43xxx Devices, in Stop mode: the main regulator or low power regulator 
 404:FWLIB/src/stm32f4xx_pwr.c ****            supplies a low power voltage to the 1.2V domain, thus preserving the content of register
 405:FWLIB/src/stm32f4xx_pwr.c ****            and internal SRAM. 2 operating modes are available:
 406:FWLIB/src/stm32f4xx_pwr.c ****          (++) Normal mode: the 1.2V domain is preserved in nominal leakage mode. This mode is only 
 407:FWLIB/src/stm32f4xx_pwr.c ****               available when the main regulator or the low power regulator is used in Scale 3 or 
 408:FWLIB/src/stm32f4xx_pwr.c ****               low voltage mode.
 409:FWLIB/src/stm32f4xx_pwr.c ****          (++) Under-drive mode: the 1.2V domain is preserved in reduced leakage mode. This mode is 
 410:FWLIB/src/stm32f4xx_pwr.c ****               available when the main regulator or the low power regulator is in low voltage mode.
 411:FWLIB/src/stm32f4xx_pwr.c ****               This mode is enabled through PWR_UnderDriveCmd() function.
 412:FWLIB/src/stm32f4xx_pwr.c ****             
 413:FWLIB/src/stm32f4xx_pwr.c **** @endverbatim
 414:FWLIB/src/stm32f4xx_pwr.c ****   * @{
 415:FWLIB/src/stm32f4xx_pwr.c ****   */
 416:FWLIB/src/stm32f4xx_pwr.c **** 
 417:FWLIB/src/stm32f4xx_pwr.c **** /**
 418:FWLIB/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Backup Regulator.
 419:FWLIB/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Backup Regulator.
 420:FWLIB/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 421:FWLIB/src/stm32f4xx_pwr.c ****   * @retval None
 422:FWLIB/src/stm32f4xx_pwr.c ****   */
 423:FWLIB/src/stm32f4xx_pwr.c **** void PWR_BackupRegulatorCmd(FunctionalState NewState)
 424:FWLIB/src/stm32f4xx_pwr.c **** {
 197              		.loc 1 424 1 is_stmt 1 view -0
 198              		.cfi_startproc
 199              		@ args = 0, pretend = 0, frame = 0
 200              		@ frame_needed = 0, uses_anonymous_args = 0
 201              		@ link register save eliminated.
 425:FWLIB/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 426:FWLIB/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 202              		.loc 1 426 3 view .LVU32
 427:FWLIB/src/stm32f4xx_pwr.c **** 
 428:FWLIB/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)NewState;
 203              		.loc 1 428 3 view .LVU33
 204              		.loc 1 428 33 is_stmt 0 view .LVU34
 205 0000 014B     		ldr	r3, .L16
 206 0002 C3F8A400 		str	r0, [r3, #164]
 429:FWLIB/src/stm32f4xx_pwr.c **** }
 207              		.loc 1 429 1 view .LVU35
 208 0006 7047     		bx	lr
 209              	.L17:
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 12


 210              		.align	2
 211              	.L16:
 212 0008 00000E42 		.word	1108213760
 213              		.cfi_endproc
 214              	.LFE128:
 216              		.section	.text.PWR_MainRegulatorModeConfig,"ax",%progbits
 217              		.align	1
 218              		.global	PWR_MainRegulatorModeConfig
 219              		.syntax unified
 220              		.thumb
 221              		.thumb_func
 222              		.fpu fpv4-sp-d16
 224              	PWR_MainRegulatorModeConfig:
 225              	.LVL10:
 226              	.LFB129:
 430:FWLIB/src/stm32f4xx_pwr.c **** 
 431:FWLIB/src/stm32f4xx_pwr.c **** /**
 432:FWLIB/src/stm32f4xx_pwr.c ****   * @brief  Configures the main internal regulator output voltage.
 433:FWLIB/src/stm32f4xx_pwr.c ****   * @param  PWR_Regulator_Voltage: specifies the regulator output voltage to achieve
 434:FWLIB/src/stm32f4xx_pwr.c ****   *         a tradeoff between performance and power consumption when the device does
 435:FWLIB/src/stm32f4xx_pwr.c ****   *         not operate at the maximum frequency (refer to the datasheets for more details).
 436:FWLIB/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 437:FWLIB/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_Voltage_Scale1: Regulator voltage output Scale 1 mode, 
 438:FWLIB/src/stm32f4xx_pwr.c ****   *                                                System frequency up to 168 MHz. 
 439:FWLIB/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_Voltage_Scale2: Regulator voltage output Scale 2 mode, 
 440:FWLIB/src/stm32f4xx_pwr.c ****   *                                                System frequency up to 144 MHz.    
 441:FWLIB/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_Voltage_Scale3: Regulator voltage output Scale 3 mode, 
 442:FWLIB/src/stm32f4xx_pwr.c ****   *                                                System frequency up to 120 MHz (only for STM32F4
 443:FWLIB/src/stm32f4xx_pwr.c ****   * @retval None
 444:FWLIB/src/stm32f4xx_pwr.c ****   */
 445:FWLIB/src/stm32f4xx_pwr.c **** void PWR_MainRegulatorModeConfig(uint32_t PWR_Regulator_Voltage)
 446:FWLIB/src/stm32f4xx_pwr.c **** {
 227              		.loc 1 446 1 is_stmt 1 view -0
 228              		.cfi_startproc
 229              		@ args = 0, pretend = 0, frame = 0
 230              		@ frame_needed = 0, uses_anonymous_args = 0
 231              		@ link register save eliminated.
 447:FWLIB/src/stm32f4xx_pwr.c ****   uint32_t tmpreg = 0;
 232              		.loc 1 447 3 view .LVU37
 448:FWLIB/src/stm32f4xx_pwr.c **** 	
 449:FWLIB/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 450:FWLIB/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_REGULATOR_VOLTAGE(PWR_Regulator_Voltage));
 233              		.loc 1 450 3 view .LVU38
 451:FWLIB/src/stm32f4xx_pwr.c **** 
 452:FWLIB/src/stm32f4xx_pwr.c ****   tmpreg = PWR->CR;
 234              		.loc 1 452 3 view .LVU39
 235              		.loc 1 452 10 is_stmt 0 view .LVU40
 236 0000 034A     		ldr	r2, .L19
 237 0002 1368     		ldr	r3, [r2]
 238              	.LVL11:
 453:FWLIB/src/stm32f4xx_pwr.c ****   
 454:FWLIB/src/stm32f4xx_pwr.c ****   /* Clear VOS[15:14] bits */
 455:FWLIB/src/stm32f4xx_pwr.c ****   tmpreg &= CR_VOS_MASK;
 239              		.loc 1 455 3 is_stmt 1 view .LVU41
 240              		.loc 1 455 10 is_stmt 0 view .LVU42
 241 0004 23F44043 		bic	r3, r3, #49152
 242              	.LVL12:
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 13


 456:FWLIB/src/stm32f4xx_pwr.c ****   
 457:FWLIB/src/stm32f4xx_pwr.c ****   /* Set VOS[15:14] bits according to PWR_Regulator_Voltage value */
 458:FWLIB/src/stm32f4xx_pwr.c ****   tmpreg |= PWR_Regulator_Voltage;
 243              		.loc 1 458 3 is_stmt 1 view .LVU43
 244              		.loc 1 458 10 is_stmt 0 view .LVU44
 245 0008 0343     		orrs	r3, r3, r0
 246              	.LVL13:
 459:FWLIB/src/stm32f4xx_pwr.c ****   
 460:FWLIB/src/stm32f4xx_pwr.c ****   /* Store the new value */
 461:FWLIB/src/stm32f4xx_pwr.c ****   PWR->CR = tmpreg;
 247              		.loc 1 461 3 is_stmt 1 view .LVU45
 248              		.loc 1 461 11 is_stmt 0 view .LVU46
 249 000a 1360     		str	r3, [r2]
 462:FWLIB/src/stm32f4xx_pwr.c **** }
 250              		.loc 1 462 1 view .LVU47
 251 000c 7047     		bx	lr
 252              	.L20:
 253 000e 00BF     		.align	2
 254              	.L19:
 255 0010 00700040 		.word	1073770496
 256              		.cfi_endproc
 257              	.LFE129:
 259              		.section	.text.PWR_OverDriveCmd,"ax",%progbits
 260              		.align	1
 261              		.global	PWR_OverDriveCmd
 262              		.syntax unified
 263              		.thumb
 264              		.thumb_func
 265              		.fpu fpv4-sp-d16
 267              	PWR_OverDriveCmd:
 268              	.LVL14:
 269              	.LFB130:
 463:FWLIB/src/stm32f4xx_pwr.c **** 
 464:FWLIB/src/stm32f4xx_pwr.c **** /**
 465:FWLIB/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Over-Drive.
 466:FWLIB/src/stm32f4xx_pwr.c ****   * 
 467:FWLIB/src/stm32f4xx_pwr.c ****   * @note   This function can be used only for STM32F42xxx/STM3243xxx devices.
 468:FWLIB/src/stm32f4xx_pwr.c ****   *         This mode allows the CPU and the core logic to operate at a higher frequency
 469:FWLIB/src/stm32f4xx_pwr.c ****   *         than the normal mode for a given voltage scaling (scale 1, scale 2 or scale 3).   
 470:FWLIB/src/stm32f4xx_pwr.c ****   * 
 471:FWLIB/src/stm32f4xx_pwr.c ****   * @note   It is recommended to enter or exit Over-drive mode when the application is not running 
 472:FWLIB/src/stm32f4xx_pwr.c ****   *          critical tasks and when the system clock source is either HSI or HSE. 
 473:FWLIB/src/stm32f4xx_pwr.c ****   *          During the Over-drive switch activation, no peripheral clocks should be enabled.   
 474:FWLIB/src/stm32f4xx_pwr.c ****   *          The peripheral clocks must be enabled once the Over-drive mode is activated.
 475:FWLIB/src/stm32f4xx_pwr.c ****   *            
 476:FWLIB/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Over Drive mode.
 477:FWLIB/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 478:FWLIB/src/stm32f4xx_pwr.c ****   * @retval None
 479:FWLIB/src/stm32f4xx_pwr.c ****   */
 480:FWLIB/src/stm32f4xx_pwr.c **** void PWR_OverDriveCmd(FunctionalState NewState)
 481:FWLIB/src/stm32f4xx_pwr.c **** {
 270              		.loc 1 481 1 is_stmt 1 view -0
 271              		.cfi_startproc
 272              		@ args = 0, pretend = 0, frame = 0
 273              		@ frame_needed = 0, uses_anonymous_args = 0
 274              		@ link register save eliminated.
 482:FWLIB/src/stm32f4xx_pwr.c ****   /* Check the parameters */
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 14


 483:FWLIB/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 275              		.loc 1 483 3 view .LVU49
 484:FWLIB/src/stm32f4xx_pwr.c ****   
 485:FWLIB/src/stm32f4xx_pwr.c ****   /* Set/Reset the ODEN bit to enable/disable the Over Drive mode */
 486:FWLIB/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_ODEN_BB = (uint32_t)NewState;
 276              		.loc 1 486 3 view .LVU50
 277              		.loc 1 486 33 is_stmt 0 view .LVU51
 278 0000 014B     		ldr	r3, .L22
 279 0002 1864     		str	r0, [r3, #64]
 487:FWLIB/src/stm32f4xx_pwr.c **** }
 280              		.loc 1 487 1 view .LVU52
 281 0004 7047     		bx	lr
 282              	.L23:
 283 0006 00BF     		.align	2
 284              	.L22:
 285 0008 00000E42 		.word	1108213760
 286              		.cfi_endproc
 287              	.LFE130:
 289              		.section	.text.PWR_OverDriveSWCmd,"ax",%progbits
 290              		.align	1
 291              		.global	PWR_OverDriveSWCmd
 292              		.syntax unified
 293              		.thumb
 294              		.thumb_func
 295              		.fpu fpv4-sp-d16
 297              	PWR_OverDriveSWCmd:
 298              	.LVL15:
 299              	.LFB131:
 488:FWLIB/src/stm32f4xx_pwr.c **** 
 489:FWLIB/src/stm32f4xx_pwr.c **** /**
 490:FWLIB/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Over-Drive switching.
 491:FWLIB/src/stm32f4xx_pwr.c ****   * 
 492:FWLIB/src/stm32f4xx_pwr.c ****   * @note   This function can be used only for STM32F42xxx/STM3243xxx devices. 
 493:FWLIB/src/stm32f4xx_pwr.c ****   *       
 494:FWLIB/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Over Drive switching mode.
 495:FWLIB/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 496:FWLIB/src/stm32f4xx_pwr.c ****   * @retval None
 497:FWLIB/src/stm32f4xx_pwr.c ****   */
 498:FWLIB/src/stm32f4xx_pwr.c **** void PWR_OverDriveSWCmd(FunctionalState NewState)
 499:FWLIB/src/stm32f4xx_pwr.c **** {
 300              		.loc 1 499 1 is_stmt 1 view -0
 301              		.cfi_startproc
 302              		@ args = 0, pretend = 0, frame = 0
 303              		@ frame_needed = 0, uses_anonymous_args = 0
 304              		@ link register save eliminated.
 500:FWLIB/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 501:FWLIB/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 305              		.loc 1 501 3 view .LVU54
 502:FWLIB/src/stm32f4xx_pwr.c **** 
 503:FWLIB/src/stm32f4xx_pwr.c ****   /* Set/Reset the ODSWEN bit to enable/disable the Over Drive switching mode */
 504:FWLIB/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_ODSWEN_BB = (uint32_t)NewState;
 306              		.loc 1 504 3 view .LVU55
 307              		.loc 1 504 35 is_stmt 0 view .LVU56
 308 0000 014B     		ldr	r3, .L25
 309 0002 5864     		str	r0, [r3, #68]
 505:FWLIB/src/stm32f4xx_pwr.c **** }
 310              		.loc 1 505 1 view .LVU57
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 15


 311 0004 7047     		bx	lr
 312              	.L26:
 313 0006 00BF     		.align	2
 314              	.L25:
 315 0008 00000E42 		.word	1108213760
 316              		.cfi_endproc
 317              	.LFE131:
 319              		.section	.text.PWR_UnderDriveCmd,"ax",%progbits
 320              		.align	1
 321              		.global	PWR_UnderDriveCmd
 322              		.syntax unified
 323              		.thumb
 324              		.thumb_func
 325              		.fpu fpv4-sp-d16
 327              	PWR_UnderDriveCmd:
 328              	.LVL16:
 329              	.LFB132:
 506:FWLIB/src/stm32f4xx_pwr.c **** 
 507:FWLIB/src/stm32f4xx_pwr.c **** /**
 508:FWLIB/src/stm32f4xx_pwr.c ****   * @brief   Enables or disables the Under-Drive mode.
 509:FWLIB/src/stm32f4xx_pwr.c ****   * 
 510:FWLIB/src/stm32f4xx_pwr.c ****   * @note   This function can be used only for STM32F42xxx/STM3243xxx devices.
 511:FWLIB/src/stm32f4xx_pwr.c ****   * @note    This mode is enabled only with STOP low power mode.
 512:FWLIB/src/stm32f4xx_pwr.c ****   *          In this mode, the 1.2V domain is preserved in reduced leakage mode. This 
 513:FWLIB/src/stm32f4xx_pwr.c ****   *          mode is only available when the main regulator or the low power regulator 
 514:FWLIB/src/stm32f4xx_pwr.c ****   *          is in low voltage mode
 515:FWLIB/src/stm32f4xx_pwr.c ****   *        
 516:FWLIB/src/stm32f4xx_pwr.c ****   * @note   If the Under-drive mode was enabled, it is automatically disabled after 
 517:FWLIB/src/stm32f4xx_pwr.c ****   *         exiting Stop mode. 
 518:FWLIB/src/stm32f4xx_pwr.c ****   *         When the voltage regulator operates in Under-drive mode, an additional  
 519:FWLIB/src/stm32f4xx_pwr.c ****   *         startup delay is induced when waking up from Stop mode.
 520:FWLIB/src/stm32f4xx_pwr.c ****   *                    
 521:FWLIB/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Under Drive mode.
 522:FWLIB/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 523:FWLIB/src/stm32f4xx_pwr.c ****   * @retval None
 524:FWLIB/src/stm32f4xx_pwr.c ****   */
 525:FWLIB/src/stm32f4xx_pwr.c **** void PWR_UnderDriveCmd(FunctionalState NewState)
 526:FWLIB/src/stm32f4xx_pwr.c **** {
 330              		.loc 1 526 1 is_stmt 1 view -0
 331              		.cfi_startproc
 332              		@ args = 0, pretend = 0, frame = 0
 333              		@ frame_needed = 0, uses_anonymous_args = 0
 334              		@ link register save eliminated.
 527:FWLIB/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 528:FWLIB/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 335              		.loc 1 528 3 view .LVU59
 529:FWLIB/src/stm32f4xx_pwr.c **** 
 530:FWLIB/src/stm32f4xx_pwr.c ****   if (NewState != DISABLE)
 336              		.loc 1 530 3 view .LVU60
 337              		.loc 1 530 6 is_stmt 0 view .LVU61
 338 0000 28B1     		cbz	r0, .L28
 531:FWLIB/src/stm32f4xx_pwr.c ****   {
 532:FWLIB/src/stm32f4xx_pwr.c ****     /* Set the UDEN[1:0] bits to enable the Under Drive mode */
 533:FWLIB/src/stm32f4xx_pwr.c ****     PWR->CR |= (uint32_t)PWR_CR_UDEN;
 339              		.loc 1 533 5 is_stmt 1 view .LVU62
 340              		.loc 1 533 13 is_stmt 0 view .LVU63
 341 0002 064A     		ldr	r2, .L30
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 16


 342 0004 1368     		ldr	r3, [r2]
 343 0006 43F44023 		orr	r3, r3, #786432
 344 000a 1360     		str	r3, [r2]
 345 000c 7047     		bx	lr
 346              	.L28:
 534:FWLIB/src/stm32f4xx_pwr.c ****   }
 535:FWLIB/src/stm32f4xx_pwr.c ****   else
 536:FWLIB/src/stm32f4xx_pwr.c ****   {
 537:FWLIB/src/stm32f4xx_pwr.c ****     /* Reset the UDEN[1:0] bits to disable the Under Drive mode */
 538:FWLIB/src/stm32f4xx_pwr.c ****     PWR->CR &= (uint32_t)(~PWR_CR_UDEN);
 347              		.loc 1 538 5 is_stmt 1 view .LVU64
 348              		.loc 1 538 13 is_stmt 0 view .LVU65
 349 000e 034A     		ldr	r2, .L30
 350 0010 1368     		ldr	r3, [r2]
 351 0012 23F44023 		bic	r3, r3, #786432
 352 0016 1360     		str	r3, [r2]
 539:FWLIB/src/stm32f4xx_pwr.c ****   }
 540:FWLIB/src/stm32f4xx_pwr.c **** }
 353              		.loc 1 540 1 view .LVU66
 354 0018 7047     		bx	lr
 355              	.L31:
 356 001a 00BF     		.align	2
 357              	.L30:
 358 001c 00700040 		.word	1073770496
 359              		.cfi_endproc
 360              	.LFE132:
 362              		.section	.text.PWR_FlashPowerDownCmd,"ax",%progbits
 363              		.align	1
 364              		.global	PWR_FlashPowerDownCmd
 365              		.syntax unified
 366              		.thumb
 367              		.thumb_func
 368              		.fpu fpv4-sp-d16
 370              	PWR_FlashPowerDownCmd:
 371              	.LVL17:
 372              	.LFB133:
 541:FWLIB/src/stm32f4xx_pwr.c **** 
 542:FWLIB/src/stm32f4xx_pwr.c **** #if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx)
 543:FWLIB/src/stm32f4xx_pwr.c **** /**
 544:FWLIB/src/stm32f4xx_pwr.c ****   * @brief Enables or disables the Main Regulator under drive mode.
 545:FWLIB/src/stm32f4xx_pwr.c ****   *
 546:FWLIB/src/stm32f4xx_pwr.c ****   * @note  This mode is only available for STM32F427_437xx/STM32F429_439xx/STM32F446xx devices.
 547:FWLIB/src/stm32f4xx_pwr.c ****   *
 548:FWLIB/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Main Regulator Under Drive mode.
 549:FWLIB/src/stm32f4xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
 550:FWLIB/src/stm32f4xx_pwr.c ****   * @retval None
 551:FWLIB/src/stm32f4xx_pwr.c ****   */
 552:FWLIB/src/stm32f4xx_pwr.c **** void PWR_MainRegulatorUnderDriveCmd(FunctionalState NewState)
 553:FWLIB/src/stm32f4xx_pwr.c **** { 
 554:FWLIB/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 555:FWLIB/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 556:FWLIB/src/stm32f4xx_pwr.c ****   
 557:FWLIB/src/stm32f4xx_pwr.c ****   if (NewState != DISABLE)
 558:FWLIB/src/stm32f4xx_pwr.c ****   {
 559:FWLIB/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CR_MRUDS_BB = (uint32_t)ENABLE;
 560:FWLIB/src/stm32f4xx_pwr.c ****   }
 561:FWLIB/src/stm32f4xx_pwr.c ****   else
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 17


 562:FWLIB/src/stm32f4xx_pwr.c ****   {
 563:FWLIB/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CR_MRUDS_BB = (uint32_t)DISABLE;
 564:FWLIB/src/stm32f4xx_pwr.c ****   }
 565:FWLIB/src/stm32f4xx_pwr.c **** }
 566:FWLIB/src/stm32f4xx_pwr.c **** 
 567:FWLIB/src/stm32f4xx_pwr.c **** /**
 568:FWLIB/src/stm32f4xx_pwr.c ****   * @brief Enables or disables the Low Power Regulator under drive mode.
 569:FWLIB/src/stm32f4xx_pwr.c ****   *
 570:FWLIB/src/stm32f4xx_pwr.c ****   * @note  This mode is only available for STM32F427_437xx/STM32F429_439xx/STM32F446xx devices.
 571:FWLIB/src/stm32f4xx_pwr.c ****   *
 572:FWLIB/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Low Power Regulator Under Drive mode.
 573:FWLIB/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 574:FWLIB/src/stm32f4xx_pwr.c ****   * @retval None
 575:FWLIB/src/stm32f4xx_pwr.c ****   */
 576:FWLIB/src/stm32f4xx_pwr.c **** void PWR_LowRegulatorUnderDriveCmd(FunctionalState NewState)
 577:FWLIB/src/stm32f4xx_pwr.c **** {
 578:FWLIB/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 579:FWLIB/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 580:FWLIB/src/stm32f4xx_pwr.c ****   
 581:FWLIB/src/stm32f4xx_pwr.c ****   if (NewState != DISABLE)
 582:FWLIB/src/stm32f4xx_pwr.c ****   {
 583:FWLIB/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CR_LPUDS_BB = (uint32_t)ENABLE;
 584:FWLIB/src/stm32f4xx_pwr.c ****   }
 585:FWLIB/src/stm32f4xx_pwr.c ****   else
 586:FWLIB/src/stm32f4xx_pwr.c ****   {
 587:FWLIB/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CR_LPUDS_BB = (uint32_t)DISABLE;
 588:FWLIB/src/stm32f4xx_pwr.c ****   }
 589:FWLIB/src/stm32f4xx_pwr.c **** }
 590:FWLIB/src/stm32f4xx_pwr.c **** #endif /* STM32F427_437xx || STM32F429_439xx || STM32F446xx */
 591:FWLIB/src/stm32f4xx_pwr.c **** 
 592:FWLIB/src/stm32f4xx_pwr.c **** #if defined(STM32F401xx) || defined(STM32F410xx) || defined(STM32F411xE) || defined(STM32F412xG) ||
 593:FWLIB/src/stm32f4xx_pwr.c **** /**
 594:FWLIB/src/stm32f4xx_pwr.c ****   * @brief Enables or disables the Main Regulator low voltage mode.
 595:FWLIB/src/stm32f4xx_pwr.c ****   *
 596:FWLIB/src/stm32f4xx_pwr.c ****   * @note  This mode is only available for STM32F401xx/STM32F410xx/STM32F411xx/STM32F412xG/STM32F41
 597:FWLIB/src/stm32f4xx_pwr.c ****   *
 598:FWLIB/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Main Regulator Low Voltage mode.
 599:FWLIB/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 600:FWLIB/src/stm32f4xx_pwr.c ****   * @retval None
 601:FWLIB/src/stm32f4xx_pwr.c ****   */
 602:FWLIB/src/stm32f4xx_pwr.c **** void PWR_MainRegulatorLowVoltageCmd(FunctionalState NewState)
 603:FWLIB/src/stm32f4xx_pwr.c **** { 
 604:FWLIB/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 605:FWLIB/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 606:FWLIB/src/stm32f4xx_pwr.c ****   
 607:FWLIB/src/stm32f4xx_pwr.c ****   if (NewState != DISABLE)
 608:FWLIB/src/stm32f4xx_pwr.c ****   {
 609:FWLIB/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CR_MRLVDS_BB = (uint32_t)ENABLE;
 610:FWLIB/src/stm32f4xx_pwr.c ****   }
 611:FWLIB/src/stm32f4xx_pwr.c ****   else
 612:FWLIB/src/stm32f4xx_pwr.c ****   {
 613:FWLIB/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CR_MRLVDS_BB = (uint32_t)DISABLE;
 614:FWLIB/src/stm32f4xx_pwr.c ****   }
 615:FWLIB/src/stm32f4xx_pwr.c **** }
 616:FWLIB/src/stm32f4xx_pwr.c **** 
 617:FWLIB/src/stm32f4xx_pwr.c **** /**
 618:FWLIB/src/stm32f4xx_pwr.c ****   * @brief Enables or disables the Low Power Regulator low voltage mode.
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 18


 619:FWLIB/src/stm32f4xx_pwr.c ****   *
 620:FWLIB/src/stm32f4xx_pwr.c ****   * @note  This mode is only available for STM32F401xx/STM32F410xx/STM32F411xx/STM32F412xG/STM32F41
 621:FWLIB/src/stm32f4xx_pwr.c ****   *
 622:FWLIB/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Low Power Regulator Low Voltage mode.
 623:FWLIB/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 624:FWLIB/src/stm32f4xx_pwr.c ****   * @retval None
 625:FWLIB/src/stm32f4xx_pwr.c ****   */
 626:FWLIB/src/stm32f4xx_pwr.c **** void PWR_LowRegulatorLowVoltageCmd(FunctionalState NewState)
 627:FWLIB/src/stm32f4xx_pwr.c **** {
 628:FWLIB/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 629:FWLIB/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 630:FWLIB/src/stm32f4xx_pwr.c ****   
 631:FWLIB/src/stm32f4xx_pwr.c ****   if (NewState != DISABLE)
 632:FWLIB/src/stm32f4xx_pwr.c ****   {
 633:FWLIB/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CR_LPLVDS_BB = (uint32_t)ENABLE;
 634:FWLIB/src/stm32f4xx_pwr.c ****   }
 635:FWLIB/src/stm32f4xx_pwr.c ****   else
 636:FWLIB/src/stm32f4xx_pwr.c ****   {
 637:FWLIB/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CR_LPLVDS_BB = (uint32_t)DISABLE;
 638:FWLIB/src/stm32f4xx_pwr.c ****   }
 639:FWLIB/src/stm32f4xx_pwr.c **** }
 640:FWLIB/src/stm32f4xx_pwr.c **** #endif /* STM32F401xx || STM32F410xx || STM32F411xE || STM32F412xG || STM32F413_423xx */
 641:FWLIB/src/stm32f4xx_pwr.c **** 
 642:FWLIB/src/stm32f4xx_pwr.c **** /**
 643:FWLIB/src/stm32f4xx_pwr.c ****   * @}
 644:FWLIB/src/stm32f4xx_pwr.c ****   */
 645:FWLIB/src/stm32f4xx_pwr.c **** 
 646:FWLIB/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group5 FLASH Power Down configuration functions
 647:FWLIB/src/stm32f4xx_pwr.c ****   *  @brief   FLASH Power Down configuration functions 
 648:FWLIB/src/stm32f4xx_pwr.c ****   *
 649:FWLIB/src/stm32f4xx_pwr.c **** @verbatim   
 650:FWLIB/src/stm32f4xx_pwr.c ****  ===============================================================================
 651:FWLIB/src/stm32f4xx_pwr.c ****              ##### FLASH Power Down configuration functions #####
 652:FWLIB/src/stm32f4xx_pwr.c ****  ===============================================================================  
 653:FWLIB/src/stm32f4xx_pwr.c ****     [..]
 654:FWLIB/src/stm32f4xx_pwr.c ****       (+) By setting the FPDS bit in the PWR_CR register by using the 
 655:FWLIB/src/stm32f4xx_pwr.c ****           PWR_FlashPowerDownCmd() function, the Flash memory also enters power 
 656:FWLIB/src/stm32f4xx_pwr.c ****           down mode when the device enters Stop mode. When the Flash memory 
 657:FWLIB/src/stm32f4xx_pwr.c ****           is in power down mode, an additional startup delay is incurred when 
 658:FWLIB/src/stm32f4xx_pwr.c ****           waking up from Stop mode.
 659:FWLIB/src/stm32f4xx_pwr.c **** @endverbatim
 660:FWLIB/src/stm32f4xx_pwr.c ****   * @{
 661:FWLIB/src/stm32f4xx_pwr.c ****   */
 662:FWLIB/src/stm32f4xx_pwr.c **** 
 663:FWLIB/src/stm32f4xx_pwr.c **** /**
 664:FWLIB/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Flash Power Down in STOP mode.
 665:FWLIB/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Flash power mode.
 666:FWLIB/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 667:FWLIB/src/stm32f4xx_pwr.c ****   * @retval None
 668:FWLIB/src/stm32f4xx_pwr.c ****   */
 669:FWLIB/src/stm32f4xx_pwr.c **** void PWR_FlashPowerDownCmd(FunctionalState NewState)
 670:FWLIB/src/stm32f4xx_pwr.c **** {
 373              		.loc 1 670 1 is_stmt 1 view -0
 374              		.cfi_startproc
 375              		@ args = 0, pretend = 0, frame = 0
 376              		@ frame_needed = 0, uses_anonymous_args = 0
 377              		@ link register save eliminated.
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 19


 671:FWLIB/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 672:FWLIB/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 378              		.loc 1 672 3 view .LVU68
 673:FWLIB/src/stm32f4xx_pwr.c **** 
 674:FWLIB/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
 379              		.loc 1 674 3 view .LVU69
 380              		.loc 1 674 33 is_stmt 0 view .LVU70
 381 0000 014B     		ldr	r3, .L33
 382 0002 5862     		str	r0, [r3, #36]
 675:FWLIB/src/stm32f4xx_pwr.c **** }
 383              		.loc 1 675 1 view .LVU71
 384 0004 7047     		bx	lr
 385              	.L34:
 386 0006 00BF     		.align	2
 387              	.L33:
 388 0008 00000E42 		.word	1108213760
 389              		.cfi_endproc
 390              	.LFE133:
 392              		.section	.text.PWR_EnterSTOPMode,"ax",%progbits
 393              		.align	1
 394              		.global	PWR_EnterSTOPMode
 395              		.syntax unified
 396              		.thumb
 397              		.thumb_func
 398              		.fpu fpv4-sp-d16
 400              	PWR_EnterSTOPMode:
 401              	.LVL18:
 402              	.LFB134:
 676:FWLIB/src/stm32f4xx_pwr.c **** 
 677:FWLIB/src/stm32f4xx_pwr.c **** /**
 678:FWLIB/src/stm32f4xx_pwr.c ****   * @}
 679:FWLIB/src/stm32f4xx_pwr.c ****   */
 680:FWLIB/src/stm32f4xx_pwr.c **** 
 681:FWLIB/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group6 Low Power modes configuration functions
 682:FWLIB/src/stm32f4xx_pwr.c ****   *  @brief   Low Power modes configuration functions 
 683:FWLIB/src/stm32f4xx_pwr.c ****   *
 684:FWLIB/src/stm32f4xx_pwr.c **** @verbatim   
 685:FWLIB/src/stm32f4xx_pwr.c ****  ===============================================================================
 686:FWLIB/src/stm32f4xx_pwr.c ****               ##### Low Power modes configuration functions #####
 687:FWLIB/src/stm32f4xx_pwr.c ****  ===============================================================================  
 688:FWLIB/src/stm32f4xx_pwr.c ****     [..]
 689:FWLIB/src/stm32f4xx_pwr.c ****       The devices feature 3 low-power modes:
 690:FWLIB/src/stm32f4xx_pwr.c ****       (+) Sleep mode: Cortex-M4 core stopped, peripherals kept running.
 691:FWLIB/src/stm32f4xx_pwr.c ****       (+) Stop mode: all clocks are stopped, regulator running, regulator 
 692:FWLIB/src/stm32f4xx_pwr.c ****           in low power mode
 693:FWLIB/src/stm32f4xx_pwr.c ****       (+) Standby mode: 1.2V domain powered off.
 694:FWLIB/src/stm32f4xx_pwr.c ****    
 695:FWLIB/src/stm32f4xx_pwr.c ****    *** Sleep mode ***
 696:FWLIB/src/stm32f4xx_pwr.c ****    ==================
 697:FWLIB/src/stm32f4xx_pwr.c ****     [..]
 698:FWLIB/src/stm32f4xx_pwr.c ****       (+) Entry:
 699:FWLIB/src/stm32f4xx_pwr.c ****         (++) The Sleep mode is entered by using the __WFI() or __WFE() functions.
 700:FWLIB/src/stm32f4xx_pwr.c ****       (+) Exit:
 701:FWLIB/src/stm32f4xx_pwr.c ****         (++) Any peripheral interrupt acknowledged by the nested vectored interrupt 
 702:FWLIB/src/stm32f4xx_pwr.c ****              controller (NVIC) can wake up the device from Sleep mode.
 703:FWLIB/src/stm32f4xx_pwr.c **** 
 704:FWLIB/src/stm32f4xx_pwr.c ****    *** Stop mode ***
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 20


 705:FWLIB/src/stm32f4xx_pwr.c ****    =================
 706:FWLIB/src/stm32f4xx_pwr.c ****     [..]
 707:FWLIB/src/stm32f4xx_pwr.c ****       In Stop mode, all clocks in the 1.2V domain are stopped, the PLL, the HSI,
 708:FWLIB/src/stm32f4xx_pwr.c ****       and the HSE RC oscillators are disabled. Internal SRAM and register contents 
 709:FWLIB/src/stm32f4xx_pwr.c ****       are preserved.
 710:FWLIB/src/stm32f4xx_pwr.c ****       The voltage regulator can be configured either in normal or low-power mode.
 711:FWLIB/src/stm32f4xx_pwr.c ****       To minimize the consumption In Stop mode, FLASH can be powered off before 
 712:FWLIB/src/stm32f4xx_pwr.c ****       entering the Stop mode. It can be switched on again by software after exiting 
 713:FWLIB/src/stm32f4xx_pwr.c ****       the Stop mode using the PWR_FlashPowerDownCmd() function. 
 714:FWLIB/src/stm32f4xx_pwr.c ****    
 715:FWLIB/src/stm32f4xx_pwr.c ****       (+) Entry:
 716:FWLIB/src/stm32f4xx_pwr.c ****         (++) The Stop mode is entered using the PWR_EnterSTOPMode(PWR_MainRegulator_ON) 
 717:FWLIB/src/stm32f4xx_pwr.c ****              function with:
 718:FWLIB/src/stm32f4xx_pwr.c ****           (+++) Main regulator ON.
 719:FWLIB/src/stm32f4xx_pwr.c ****           (+++) Low Power regulator ON.
 720:FWLIB/src/stm32f4xx_pwr.c ****       (+) Exit:
 721:FWLIB/src/stm32f4xx_pwr.c ****         (++) Any EXTI Line (Internal or External) configured in Interrupt/Event mode.
 722:FWLIB/src/stm32f4xx_pwr.c ****       
 723:FWLIB/src/stm32f4xx_pwr.c ****    *** Standby mode ***
 724:FWLIB/src/stm32f4xx_pwr.c ****    ====================
 725:FWLIB/src/stm32f4xx_pwr.c ****     [..]
 726:FWLIB/src/stm32f4xx_pwr.c ****       The Standby mode allows to achieve the lowest power consumption. It is based 
 727:FWLIB/src/stm32f4xx_pwr.c ****       on the Cortex-M4 deepsleep mode, with the voltage regulator disabled. 
 728:FWLIB/src/stm32f4xx_pwr.c ****       The 1.2V domain is consequently powered off. The PLL, the HSI oscillator and 
 729:FWLIB/src/stm32f4xx_pwr.c ****       the HSE oscillator are also switched off. SRAM and register contents are lost 
 730:FWLIB/src/stm32f4xx_pwr.c ****       except for the RTC registers, RTC backup registers, backup SRAM and Standby 
 731:FWLIB/src/stm32f4xx_pwr.c ****       circuitry.
 732:FWLIB/src/stm32f4xx_pwr.c ****    
 733:FWLIB/src/stm32f4xx_pwr.c ****       The voltage regulator is OFF.
 734:FWLIB/src/stm32f4xx_pwr.c ****       
 735:FWLIB/src/stm32f4xx_pwr.c ****       (+) Entry:
 736:FWLIB/src/stm32f4xx_pwr.c ****         (++) The Standby mode is entered using the PWR_EnterSTANDBYMode() function.
 737:FWLIB/src/stm32f4xx_pwr.c ****       (+) Exit:
 738:FWLIB/src/stm32f4xx_pwr.c ****         (++) WKUP pin rising edge, RTC alarm (Alarm A and Alarm B), RTC wakeup,
 739:FWLIB/src/stm32f4xx_pwr.c ****              tamper event, time-stamp event, external reset in NRST pin, IWDG reset.              
 740:FWLIB/src/stm32f4xx_pwr.c **** 
 741:FWLIB/src/stm32f4xx_pwr.c ****    *** Auto-wakeup (AWU) from low-power mode ***
 742:FWLIB/src/stm32f4xx_pwr.c ****    =============================================
 743:FWLIB/src/stm32f4xx_pwr.c ****     [..]
 744:FWLIB/src/stm32f4xx_pwr.c ****       The MCU can be woken up from low-power mode by an RTC Alarm event, an RTC 
 745:FWLIB/src/stm32f4xx_pwr.c ****       Wakeup event, a tamper event, a time-stamp event, or a comparator event, 
 746:FWLIB/src/stm32f4xx_pwr.c ****       without depending on an external interrupt (Auto-wakeup mode).
 747:FWLIB/src/stm32f4xx_pwr.c **** 
 748:FWLIB/src/stm32f4xx_pwr.c ****       (#) RTC auto-wakeup (AWU) from the Stop mode
 749:FWLIB/src/stm32f4xx_pwr.c ****        
 750:FWLIB/src/stm32f4xx_pwr.c ****         (++) To wake up from the Stop mode with an RTC alarm event, it is necessary to:
 751:FWLIB/src/stm32f4xx_pwr.c ****           (+++) Configure the EXTI Line 17 to be sensitive to rising edges (Interrupt 
 752:FWLIB/src/stm32f4xx_pwr.c ****                 or Event modes) using the EXTI_Init() function.
 753:FWLIB/src/stm32f4xx_pwr.c ****           (+++) Enable the RTC Alarm Interrupt using the RTC_ITConfig() function
 754:FWLIB/src/stm32f4xx_pwr.c ****           (+++) Configure the RTC to generate the RTC alarm using the RTC_SetAlarm() 
 755:FWLIB/src/stm32f4xx_pwr.c ****                 and RTC_AlarmCmd() functions.
 756:FWLIB/src/stm32f4xx_pwr.c ****         (++) To wake up from the Stop mode with an RTC Tamper or time stamp event, it 
 757:FWLIB/src/stm32f4xx_pwr.c ****              is necessary to:
 758:FWLIB/src/stm32f4xx_pwr.c ****           (+++) Configure the EXTI Line 21 to be sensitive to rising edges (Interrupt 
 759:FWLIB/src/stm32f4xx_pwr.c ****                 or Event modes) using the EXTI_Init() function.
 760:FWLIB/src/stm32f4xx_pwr.c ****           (+++) Enable the RTC Tamper or time stamp Interrupt using the RTC_ITConfig() 
 761:FWLIB/src/stm32f4xx_pwr.c ****                 function
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 21


 762:FWLIB/src/stm32f4xx_pwr.c ****           (+++) Configure the RTC to detect the tamper or time stamp event using the
 763:FWLIB/src/stm32f4xx_pwr.c ****                 RTC_TimeStampConfig(), RTC_TamperTriggerConfig() and RTC_TamperCmd()
 764:FWLIB/src/stm32f4xx_pwr.c ****                 functions.
 765:FWLIB/src/stm32f4xx_pwr.c ****         (++) To wake up from the Stop mode with an RTC WakeUp event, it is necessary to:
 766:FWLIB/src/stm32f4xx_pwr.c ****            (+++) Configure the EXTI Line 22 to be sensitive to rising edges (Interrupt 
 767:FWLIB/src/stm32f4xx_pwr.c ****                  or Event modes) using the EXTI_Init() function.
 768:FWLIB/src/stm32f4xx_pwr.c ****            (+++) Enable the RTC WakeUp Interrupt using the RTC_ITConfig() function
 769:FWLIB/src/stm32f4xx_pwr.c ****            (+++) Configure the RTC to generate the RTC WakeUp event using the RTC_WakeUpClockConfig
 770:FWLIB/src/stm32f4xx_pwr.c ****                  RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
 771:FWLIB/src/stm32f4xx_pwr.c **** 
 772:FWLIB/src/stm32f4xx_pwr.c ****       (#) RTC auto-wakeup (AWU) from the Standby mode
 773:FWLIB/src/stm32f4xx_pwr.c ****    
 774:FWLIB/src/stm32f4xx_pwr.c ****         (++) To wake up from the Standby mode with an RTC alarm event, it is necessary to:
 775:FWLIB/src/stm32f4xx_pwr.c ****           (+++) Enable the RTC Alarm Interrupt using the RTC_ITConfig() function
 776:FWLIB/src/stm32f4xx_pwr.c ****           (+++) Configure the RTC to generate the RTC alarm using the RTC_SetAlarm() 
 777:FWLIB/src/stm32f4xx_pwr.c ****                 and RTC_AlarmCmd() functions.
 778:FWLIB/src/stm32f4xx_pwr.c ****         (++) To wake up from the Standby mode with an RTC Tamper or time stamp event, it 
 779:FWLIB/src/stm32f4xx_pwr.c ****              is necessary to:
 780:FWLIB/src/stm32f4xx_pwr.c ****           (+++) Enable the RTC Tamper or time stamp Interrupt using the RTC_ITConfig() 
 781:FWLIB/src/stm32f4xx_pwr.c ****                 function
 782:FWLIB/src/stm32f4xx_pwr.c ****           (+++) Configure the RTC to detect the tamper or time stamp event using the
 783:FWLIB/src/stm32f4xx_pwr.c ****                 RTC_TimeStampConfig(), RTC_TamperTriggerConfig() and RTC_TamperCmd()
 784:FWLIB/src/stm32f4xx_pwr.c ****                 functions.
 785:FWLIB/src/stm32f4xx_pwr.c ****         (++) To wake up from the Standby mode with an RTC WakeUp event, it is necessary to:
 786:FWLIB/src/stm32f4xx_pwr.c ****           (+++) Enable the RTC WakeUp Interrupt using the RTC_ITConfig() function
 787:FWLIB/src/stm32f4xx_pwr.c ****           (+++) Configure the RTC to generate the RTC WakeUp event using the RTC_WakeUpClockConfig(
 788:FWLIB/src/stm32f4xx_pwr.c ****                 RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
 789:FWLIB/src/stm32f4xx_pwr.c **** 
 790:FWLIB/src/stm32f4xx_pwr.c **** @endverbatim
 791:FWLIB/src/stm32f4xx_pwr.c ****   * @{
 792:FWLIB/src/stm32f4xx_pwr.c ****   */
 793:FWLIB/src/stm32f4xx_pwr.c **** 
 794:FWLIB/src/stm32f4xx_pwr.c **** /**
 795:FWLIB/src/stm32f4xx_pwr.c ****   * @brief  Enters STOP mode.
 796:FWLIB/src/stm32f4xx_pwr.c ****   *   
 797:FWLIB/src/stm32f4xx_pwr.c ****   * @note   In Stop mode, all I/O pins keep the same state as in Run mode.
 798:FWLIB/src/stm32f4xx_pwr.c ****   * @note   When exiting Stop mode by issuing an interrupt or a wakeup event, 
 799:FWLIB/src/stm32f4xx_pwr.c ****   *         the HSI RC oscillator is selected as system clock.
 800:FWLIB/src/stm32f4xx_pwr.c ****   * @note   When the voltage regulator operates in low power mode, an additional 
 801:FWLIB/src/stm32f4xx_pwr.c ****   *         startup delay is incurred when waking up from Stop mode. 
 802:FWLIB/src/stm32f4xx_pwr.c ****   *         By keeping the internal regulator ON during Stop mode, the consumption 
 803:FWLIB/src/stm32f4xx_pwr.c ****   *         is higher although the startup time is reduced.
 804:FWLIB/src/stm32f4xx_pwr.c ****   *     
 805:FWLIB/src/stm32f4xx_pwr.c ****   * @param  PWR_Regulator: specifies the regulator state in STOP mode.
 806:FWLIB/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 807:FWLIB/src/stm32f4xx_pwr.c ****   *            @arg PWR_MainRegulator_ON: STOP mode with regulator ON
 808:FWLIB/src/stm32f4xx_pwr.c ****   *            @arg PWR_LowPowerRegulator_ON: STOP mode with low power regulator ON
 809:FWLIB/src/stm32f4xx_pwr.c ****   * @param  PWR_STOPEntry: specifies if STOP mode in entered with WFI or WFE instruction.
 810:FWLIB/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 811:FWLIB/src/stm32f4xx_pwr.c ****   *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
 812:FWLIB/src/stm32f4xx_pwr.c ****   *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
 813:FWLIB/src/stm32f4xx_pwr.c ****   * @retval None
 814:FWLIB/src/stm32f4xx_pwr.c ****   */
 815:FWLIB/src/stm32f4xx_pwr.c **** void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
 816:FWLIB/src/stm32f4xx_pwr.c **** {
 403              		.loc 1 816 1 is_stmt 1 view -0
 404              		.cfi_startproc
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 22


 405              		@ args = 0, pretend = 0, frame = 0
 406              		@ frame_needed = 0, uses_anonymous_args = 0
 407              		@ link register save eliminated.
 817:FWLIB/src/stm32f4xx_pwr.c ****   uint32_t tmpreg = 0;
 408              		.loc 1 817 3 view .LVU73
 818:FWLIB/src/stm32f4xx_pwr.c ****   
 819:FWLIB/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 820:FWLIB/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_REGULATOR(PWR_Regulator));
 409              		.loc 1 820 3 view .LVU74
 821:FWLIB/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
 410              		.loc 1 821 3 view .LVU75
 822:FWLIB/src/stm32f4xx_pwr.c ****   
 823:FWLIB/src/stm32f4xx_pwr.c ****   /* Select the regulator state in STOP mode ---------------------------------*/
 824:FWLIB/src/stm32f4xx_pwr.c ****   tmpreg = PWR->CR;
 411              		.loc 1 824 3 view .LVU76
 412              		.loc 1 824 10 is_stmt 0 view .LVU77
 413 0000 0B4A     		ldr	r2, .L39
 414 0002 1368     		ldr	r3, [r2]
 415              	.LVL19:
 825:FWLIB/src/stm32f4xx_pwr.c ****   /* Clear PDDS and LPDS bits */
 826:FWLIB/src/stm32f4xx_pwr.c ****   tmpreg &= CR_DS_MASK;
 416              		.loc 1 826 3 is_stmt 1 view .LVU78
 417              		.loc 1 826 10 is_stmt 0 view .LVU79
 418 0004 23F44063 		bic	r3, r3, #3072
 419              	.LVL20:
 420              		.loc 1 826 10 view .LVU80
 421 0008 23F00303 		bic	r3, r3, #3
 422              	.LVL21:
 827:FWLIB/src/stm32f4xx_pwr.c ****   
 828:FWLIB/src/stm32f4xx_pwr.c ****   /* Set LPDS, MRLVDS and LPLVDS bits according to PWR_Regulator value */
 829:FWLIB/src/stm32f4xx_pwr.c ****   tmpreg |= PWR_Regulator;
 423              		.loc 1 829 3 is_stmt 1 view .LVU81
 424              		.loc 1 829 10 is_stmt 0 view .LVU82
 425 000c 0343     		orrs	r3, r3, r0
 426              	.LVL22:
 830:FWLIB/src/stm32f4xx_pwr.c ****   
 831:FWLIB/src/stm32f4xx_pwr.c ****   /* Store the new value */
 832:FWLIB/src/stm32f4xx_pwr.c ****   PWR->CR = tmpreg;
 427              		.loc 1 832 3 is_stmt 1 view .LVU83
 428              		.loc 1 832 11 is_stmt 0 view .LVU84
 429 000e 1360     		str	r3, [r2]
 833:FWLIB/src/stm32f4xx_pwr.c ****   
 834:FWLIB/src/stm32f4xx_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 835:FWLIB/src/stm32f4xx_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 430              		.loc 1 835 3 is_stmt 1 view .LVU85
 431              		.loc 1 835 12 is_stmt 0 view .LVU86
 432 0010 084A     		ldr	r2, .L39+4
 433 0012 1369     		ldr	r3, [r2, #16]
 434              	.LVL23:
 435              		.loc 1 835 12 view .LVU87
 436 0014 43F00403 		orr	r3, r3, #4
 437 0018 1361     		str	r3, [r2, #16]
 438              	.LVL24:
 836:FWLIB/src/stm32f4xx_pwr.c ****   
 837:FWLIB/src/stm32f4xx_pwr.c ****   /* Select STOP mode entry --------------------------------------------------*/
 838:FWLIB/src/stm32f4xx_pwr.c ****   if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 439              		.loc 1 838 3 is_stmt 1 view .LVU88
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 23


 440              		.loc 1 838 5 is_stmt 0 view .LVU89
 441 001a 0129     		cmp	r1, #1
 442 001c 06D0     		beq	.L38
 839:FWLIB/src/stm32f4xx_pwr.c ****   {   
 840:FWLIB/src/stm32f4xx_pwr.c ****     /* Request Wait For Interrupt */
 841:FWLIB/src/stm32f4xx_pwr.c ****     __WFI();
 842:FWLIB/src/stm32f4xx_pwr.c ****   }
 843:FWLIB/src/stm32f4xx_pwr.c ****   else
 844:FWLIB/src/stm32f4xx_pwr.c ****   {
 845:FWLIB/src/stm32f4xx_pwr.c ****     /* Request Wait For Event */
 846:FWLIB/src/stm32f4xx_pwr.c ****     __WFE();
 443              		.loc 1 846 5 is_stmt 1 view .LVU90
 444              	.LBB12:
 445              	.LBI12:
 446              		.file 2 "F4_CORE/core_cmInstr.h"
   1:F4_CORE/core_cmInstr.h **** /**************************************************************************//**
   2:F4_CORE/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:F4_CORE/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:F4_CORE/core_cmInstr.h ****  * @version  V4.10
   5:F4_CORE/core_cmInstr.h ****  * @date     18. March 2015
   6:F4_CORE/core_cmInstr.h ****  *
   7:F4_CORE/core_cmInstr.h ****  * @note
   8:F4_CORE/core_cmInstr.h ****  *
   9:F4_CORE/core_cmInstr.h ****  ******************************************************************************/
  10:F4_CORE/core_cmInstr.h **** /* Copyright (c) 2009 - 2014 ARM LIMITED
  11:F4_CORE/core_cmInstr.h **** 
  12:F4_CORE/core_cmInstr.h ****    All rights reserved.
  13:F4_CORE/core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:F4_CORE/core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:F4_CORE/core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:F4_CORE/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:F4_CORE/core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:F4_CORE/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:F4_CORE/core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:F4_CORE/core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:F4_CORE/core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:F4_CORE/core_cmInstr.h ****      specific prior written permission.
  23:F4_CORE/core_cmInstr.h ****    *
  24:F4_CORE/core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:F4_CORE/core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:F4_CORE/core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:F4_CORE/core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:F4_CORE/core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:F4_CORE/core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:F4_CORE/core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:F4_CORE/core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:F4_CORE/core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:F4_CORE/core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:F4_CORE/core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:F4_CORE/core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:F4_CORE/core_cmInstr.h **** 
  37:F4_CORE/core_cmInstr.h **** 
  38:F4_CORE/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:F4_CORE/core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:F4_CORE/core_cmInstr.h **** 
  41:F4_CORE/core_cmInstr.h **** 
  42:F4_CORE/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 24


  43:F4_CORE/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:F4_CORE/core_cmInstr.h ****   Access to dedicated instructions
  45:F4_CORE/core_cmInstr.h ****   @{
  46:F4_CORE/core_cmInstr.h **** */
  47:F4_CORE/core_cmInstr.h **** 
  48:F4_CORE/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:F4_CORE/core_cmInstr.h **** /* ARM armcc specific functions */
  50:F4_CORE/core_cmInstr.h **** 
  51:F4_CORE/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:F4_CORE/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:F4_CORE/core_cmInstr.h **** #endif
  54:F4_CORE/core_cmInstr.h **** 
  55:F4_CORE/core_cmInstr.h **** 
  56:F4_CORE/core_cmInstr.h **** /** \brief  No Operation
  57:F4_CORE/core_cmInstr.h **** 
  58:F4_CORE/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:F4_CORE/core_cmInstr.h ****  */
  60:F4_CORE/core_cmInstr.h **** #define __NOP                             __nop
  61:F4_CORE/core_cmInstr.h **** 
  62:F4_CORE/core_cmInstr.h **** 
  63:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:F4_CORE/core_cmInstr.h **** 
  65:F4_CORE/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:F4_CORE/core_cmInstr.h ****     until one of a number of events occurs.
  67:F4_CORE/core_cmInstr.h ****  */
  68:F4_CORE/core_cmInstr.h **** #define __WFI                             __wfi
  69:F4_CORE/core_cmInstr.h **** 
  70:F4_CORE/core_cmInstr.h **** 
  71:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Event
  72:F4_CORE/core_cmInstr.h **** 
  73:F4_CORE/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:F4_CORE/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:F4_CORE/core_cmInstr.h ****  */
  76:F4_CORE/core_cmInstr.h **** #define __WFE                             __wfe
  77:F4_CORE/core_cmInstr.h **** 
  78:F4_CORE/core_cmInstr.h **** 
  79:F4_CORE/core_cmInstr.h **** /** \brief  Send Event
  80:F4_CORE/core_cmInstr.h **** 
  81:F4_CORE/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:F4_CORE/core_cmInstr.h ****  */
  83:F4_CORE/core_cmInstr.h **** #define __SEV                             __sev
  84:F4_CORE/core_cmInstr.h **** 
  85:F4_CORE/core_cmInstr.h **** 
  86:F4_CORE/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:F4_CORE/core_cmInstr.h **** 
  88:F4_CORE/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:F4_CORE/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:F4_CORE/core_cmInstr.h ****     memory, after the instruction has been completed.
  91:F4_CORE/core_cmInstr.h ****  */
  92:F4_CORE/core_cmInstr.h **** #define __ISB() do {\
  93:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
  94:F4_CORE/core_cmInstr.h ****                    __isb(0xF);\
  95:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
  96:F4_CORE/core_cmInstr.h ****                 } while (0)
  97:F4_CORE/core_cmInstr.h **** 
  98:F4_CORE/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  99:F4_CORE/core_cmInstr.h **** 
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 25


 100:F4_CORE/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 101:F4_CORE/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 102:F4_CORE/core_cmInstr.h ****  */
 103:F4_CORE/core_cmInstr.h **** #define __DSB() do {\
 104:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 105:F4_CORE/core_cmInstr.h ****                    __dsb(0xF);\
 106:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 107:F4_CORE/core_cmInstr.h ****                 } while (0)
 108:F4_CORE/core_cmInstr.h **** 
 109:F4_CORE/core_cmInstr.h **** /** \brief  Data Memory Barrier
 110:F4_CORE/core_cmInstr.h **** 
 111:F4_CORE/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 112:F4_CORE/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 113:F4_CORE/core_cmInstr.h ****  */
 114:F4_CORE/core_cmInstr.h **** #define __DMB() do {\
 115:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 116:F4_CORE/core_cmInstr.h ****                    __dmb(0xF);\
 117:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 118:F4_CORE/core_cmInstr.h ****                 } while (0)
 119:F4_CORE/core_cmInstr.h **** 
 120:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 121:F4_CORE/core_cmInstr.h **** 
 122:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in integer value.
 123:F4_CORE/core_cmInstr.h **** 
 124:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 125:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 126:F4_CORE/core_cmInstr.h ****  */
 127:F4_CORE/core_cmInstr.h **** #define __REV                             __rev
 128:F4_CORE/core_cmInstr.h **** 
 129:F4_CORE/core_cmInstr.h **** 
 130:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 131:F4_CORE/core_cmInstr.h **** 
 132:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 133:F4_CORE/core_cmInstr.h **** 
 134:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 135:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 136:F4_CORE/core_cmInstr.h ****  */
 137:F4_CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 138:F4_CORE/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 139:F4_CORE/core_cmInstr.h **** {
 140:F4_CORE/core_cmInstr.h ****   rev16 r0, r0
 141:F4_CORE/core_cmInstr.h ****   bx lr
 142:F4_CORE/core_cmInstr.h **** }
 143:F4_CORE/core_cmInstr.h **** #endif
 144:F4_CORE/core_cmInstr.h **** 
 145:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 146:F4_CORE/core_cmInstr.h **** 
 147:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 148:F4_CORE/core_cmInstr.h **** 
 149:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 150:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 151:F4_CORE/core_cmInstr.h ****  */
 152:F4_CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 153:F4_CORE/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 154:F4_CORE/core_cmInstr.h **** {
 155:F4_CORE/core_cmInstr.h ****   revsh r0, r0
 156:F4_CORE/core_cmInstr.h ****   bx lr
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 26


 157:F4_CORE/core_cmInstr.h **** }
 158:F4_CORE/core_cmInstr.h **** #endif
 159:F4_CORE/core_cmInstr.h **** 
 160:F4_CORE/core_cmInstr.h **** 
 161:F4_CORE/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 162:F4_CORE/core_cmInstr.h **** 
 163:F4_CORE/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 164:F4_CORE/core_cmInstr.h **** 
 165:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to rotate
 166:F4_CORE/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 167:F4_CORE/core_cmInstr.h ****     \return               Rotated value
 168:F4_CORE/core_cmInstr.h ****  */
 169:F4_CORE/core_cmInstr.h **** #define __ROR                             __ror
 170:F4_CORE/core_cmInstr.h **** 
 171:F4_CORE/core_cmInstr.h **** 
 172:F4_CORE/core_cmInstr.h **** /** \brief  Breakpoint
 173:F4_CORE/core_cmInstr.h **** 
 174:F4_CORE/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 175:F4_CORE/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 176:F4_CORE/core_cmInstr.h **** 
 177:F4_CORE/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 178:F4_CORE/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 179:F4_CORE/core_cmInstr.h ****  */
 180:F4_CORE/core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 181:F4_CORE/core_cmInstr.h **** 
 182:F4_CORE/core_cmInstr.h **** 
 183:F4_CORE/core_cmInstr.h **** /** \brief  Reverse bit order of value
 184:F4_CORE/core_cmInstr.h **** 
 185:F4_CORE/core_cmInstr.h ****     This function reverses the bit order of the given value.
 186:F4_CORE/core_cmInstr.h **** 
 187:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 188:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 189:F4_CORE/core_cmInstr.h ****  */
 190:F4_CORE/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 191:F4_CORE/core_cmInstr.h ****   #define __RBIT                          __rbit
 192:F4_CORE/core_cmInstr.h **** #else
 193:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 194:F4_CORE/core_cmInstr.h **** {
 195:F4_CORE/core_cmInstr.h ****   uint32_t result;
 196:F4_CORE/core_cmInstr.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; // extra shift needed at end
 197:F4_CORE/core_cmInstr.h **** 
 198:F4_CORE/core_cmInstr.h ****   result = value;                      // r will be reversed bits of v; first get LSB of v
 199:F4_CORE/core_cmInstr.h ****   for (value >>= 1; value; value >>= 1)
 200:F4_CORE/core_cmInstr.h ****   {
 201:F4_CORE/core_cmInstr.h ****     result <<= 1;
 202:F4_CORE/core_cmInstr.h ****     result |= value & 1;
 203:F4_CORE/core_cmInstr.h ****     s--;
 204:F4_CORE/core_cmInstr.h ****   }
 205:F4_CORE/core_cmInstr.h ****   result <<= s;                       // shift when v's highest bits are zero
 206:F4_CORE/core_cmInstr.h ****   return(result);
 207:F4_CORE/core_cmInstr.h **** }
 208:F4_CORE/core_cmInstr.h **** #endif
 209:F4_CORE/core_cmInstr.h **** 
 210:F4_CORE/core_cmInstr.h **** 
 211:F4_CORE/core_cmInstr.h **** /** \brief  Count leading zeros
 212:F4_CORE/core_cmInstr.h **** 
 213:F4_CORE/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 27


 214:F4_CORE/core_cmInstr.h **** 
 215:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 216:F4_CORE/core_cmInstr.h ****     \return             number of leading zeros in value
 217:F4_CORE/core_cmInstr.h ****  */
 218:F4_CORE/core_cmInstr.h **** #define __CLZ                             __clz
 219:F4_CORE/core_cmInstr.h **** 
 220:F4_CORE/core_cmInstr.h **** 
 221:F4_CORE/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 222:F4_CORE/core_cmInstr.h **** 
 223:F4_CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 224:F4_CORE/core_cmInstr.h **** 
 225:F4_CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 8 bit value.
 226:F4_CORE/core_cmInstr.h **** 
 227:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 228:F4_CORE/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 229:F4_CORE/core_cmInstr.h ****  */
 230:F4_CORE/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 231:F4_CORE/core_cmInstr.h **** 
 232:F4_CORE/core_cmInstr.h **** 
 233:F4_CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 234:F4_CORE/core_cmInstr.h **** 
 235:F4_CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 16 bit values.
 236:F4_CORE/core_cmInstr.h **** 
 237:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 238:F4_CORE/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 239:F4_CORE/core_cmInstr.h ****  */
 240:F4_CORE/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 241:F4_CORE/core_cmInstr.h **** 
 242:F4_CORE/core_cmInstr.h **** 
 243:F4_CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 244:F4_CORE/core_cmInstr.h **** 
 245:F4_CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 32 bit values.
 246:F4_CORE/core_cmInstr.h **** 
 247:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 248:F4_CORE/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 249:F4_CORE/core_cmInstr.h ****  */
 250:F4_CORE/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 251:F4_CORE/core_cmInstr.h **** 
 252:F4_CORE/core_cmInstr.h **** 
 253:F4_CORE/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 254:F4_CORE/core_cmInstr.h **** 
 255:F4_CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 8 bit values.
 256:F4_CORE/core_cmInstr.h **** 
 257:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 258:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 259:F4_CORE/core_cmInstr.h ****     \return          0  Function succeeded
 260:F4_CORE/core_cmInstr.h ****     \return          1  Function failed
 261:F4_CORE/core_cmInstr.h ****  */
 262:F4_CORE/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 263:F4_CORE/core_cmInstr.h **** 
 264:F4_CORE/core_cmInstr.h **** 
 265:F4_CORE/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 266:F4_CORE/core_cmInstr.h **** 
 267:F4_CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 16 bit values.
 268:F4_CORE/core_cmInstr.h **** 
 269:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 270:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 28


 271:F4_CORE/core_cmInstr.h ****     \return          0  Function succeeded
 272:F4_CORE/core_cmInstr.h ****     \return          1  Function failed
 273:F4_CORE/core_cmInstr.h ****  */
 274:F4_CORE/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 275:F4_CORE/core_cmInstr.h **** 
 276:F4_CORE/core_cmInstr.h **** 
 277:F4_CORE/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 278:F4_CORE/core_cmInstr.h **** 
 279:F4_CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 32 bit values.
 280:F4_CORE/core_cmInstr.h **** 
 281:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 282:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 283:F4_CORE/core_cmInstr.h ****     \return          0  Function succeeded
 284:F4_CORE/core_cmInstr.h ****     \return          1  Function failed
 285:F4_CORE/core_cmInstr.h ****  */
 286:F4_CORE/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 287:F4_CORE/core_cmInstr.h **** 
 288:F4_CORE/core_cmInstr.h **** 
 289:F4_CORE/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 290:F4_CORE/core_cmInstr.h **** 
 291:F4_CORE/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 292:F4_CORE/core_cmInstr.h **** 
 293:F4_CORE/core_cmInstr.h ****  */
 294:F4_CORE/core_cmInstr.h **** #define __CLREX                           __clrex
 295:F4_CORE/core_cmInstr.h **** 
 296:F4_CORE/core_cmInstr.h **** 
 297:F4_CORE/core_cmInstr.h **** /** \brief  Signed Saturate
 298:F4_CORE/core_cmInstr.h **** 
 299:F4_CORE/core_cmInstr.h ****     This function saturates a signed value.
 300:F4_CORE/core_cmInstr.h **** 
 301:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 302:F4_CORE/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 303:F4_CORE/core_cmInstr.h ****     \return             Saturated value
 304:F4_CORE/core_cmInstr.h ****  */
 305:F4_CORE/core_cmInstr.h **** #define __SSAT                            __ssat
 306:F4_CORE/core_cmInstr.h **** 
 307:F4_CORE/core_cmInstr.h **** 
 308:F4_CORE/core_cmInstr.h **** /** \brief  Unsigned Saturate
 309:F4_CORE/core_cmInstr.h **** 
 310:F4_CORE/core_cmInstr.h ****     This function saturates an unsigned value.
 311:F4_CORE/core_cmInstr.h **** 
 312:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 313:F4_CORE/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 314:F4_CORE/core_cmInstr.h ****     \return             Saturated value
 315:F4_CORE/core_cmInstr.h ****  */
 316:F4_CORE/core_cmInstr.h **** #define __USAT                            __usat
 317:F4_CORE/core_cmInstr.h **** 
 318:F4_CORE/core_cmInstr.h **** 
 319:F4_CORE/core_cmInstr.h **** /** \brief  Rotate Right with Extend (32 bit)
 320:F4_CORE/core_cmInstr.h **** 
 321:F4_CORE/core_cmInstr.h ****     This function moves each bit of a bitstring right by one bit.
 322:F4_CORE/core_cmInstr.h ****     The carry input is shifted in at the left end of the bitstring.
 323:F4_CORE/core_cmInstr.h **** 
 324:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to rotate
 325:F4_CORE/core_cmInstr.h ****     \return               Rotated value
 326:F4_CORE/core_cmInstr.h ****  */
 327:F4_CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 29


 328:F4_CORE/core_cmInstr.h **** __attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
 329:F4_CORE/core_cmInstr.h **** {
 330:F4_CORE/core_cmInstr.h ****   rrx r0, r0
 331:F4_CORE/core_cmInstr.h ****   bx lr
 332:F4_CORE/core_cmInstr.h **** }
 333:F4_CORE/core_cmInstr.h **** #endif
 334:F4_CORE/core_cmInstr.h **** 
 335:F4_CORE/core_cmInstr.h **** 
 336:F4_CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (8 bit)
 337:F4_CORE/core_cmInstr.h **** 
 338:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 8 bit value.
 339:F4_CORE/core_cmInstr.h **** 
 340:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 341:F4_CORE/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 342:F4_CORE/core_cmInstr.h ****  */
 343:F4_CORE/core_cmInstr.h **** #define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
 344:F4_CORE/core_cmInstr.h **** 
 345:F4_CORE/core_cmInstr.h **** 
 346:F4_CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (16 bit)
 347:F4_CORE/core_cmInstr.h **** 
 348:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 16 bit values.
 349:F4_CORE/core_cmInstr.h **** 
 350:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 351:F4_CORE/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 352:F4_CORE/core_cmInstr.h ****  */
 353:F4_CORE/core_cmInstr.h **** #define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
 354:F4_CORE/core_cmInstr.h **** 
 355:F4_CORE/core_cmInstr.h **** 
 356:F4_CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (32 bit)
 357:F4_CORE/core_cmInstr.h **** 
 358:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 32 bit values.
 359:F4_CORE/core_cmInstr.h **** 
 360:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 361:F4_CORE/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 362:F4_CORE/core_cmInstr.h ****  */
 363:F4_CORE/core_cmInstr.h **** #define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
 364:F4_CORE/core_cmInstr.h **** 
 365:F4_CORE/core_cmInstr.h **** 
 366:F4_CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (8 bit)
 367:F4_CORE/core_cmInstr.h **** 
 368:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 8 bit values.
 369:F4_CORE/core_cmInstr.h **** 
 370:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 371:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 372:F4_CORE/core_cmInstr.h ****  */
 373:F4_CORE/core_cmInstr.h **** #define __STRBT(value, ptr)               __strt(value, ptr)
 374:F4_CORE/core_cmInstr.h **** 
 375:F4_CORE/core_cmInstr.h **** 
 376:F4_CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (16 bit)
 377:F4_CORE/core_cmInstr.h **** 
 378:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 16 bit values.
 379:F4_CORE/core_cmInstr.h **** 
 380:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 381:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 382:F4_CORE/core_cmInstr.h ****  */
 383:F4_CORE/core_cmInstr.h **** #define __STRHT(value, ptr)               __strt(value, ptr)
 384:F4_CORE/core_cmInstr.h **** 
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 30


 385:F4_CORE/core_cmInstr.h **** 
 386:F4_CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (32 bit)
 387:F4_CORE/core_cmInstr.h **** 
 388:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 32 bit values.
 389:F4_CORE/core_cmInstr.h **** 
 390:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 391:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 392:F4_CORE/core_cmInstr.h ****  */
 393:F4_CORE/core_cmInstr.h **** #define __STRT(value, ptr)                __strt(value, ptr)
 394:F4_CORE/core_cmInstr.h **** 
 395:F4_CORE/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300) */
 396:F4_CORE/core_cmInstr.h **** 
 397:F4_CORE/core_cmInstr.h **** 
 398:F4_CORE/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 399:F4_CORE/core_cmInstr.h **** /* GNU gcc specific functions */
 400:F4_CORE/core_cmInstr.h **** 
 401:F4_CORE/core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 402:F4_CORE/core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 403:F4_CORE/core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 404:F4_CORE/core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 405:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 406:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 407:F4_CORE/core_cmInstr.h **** #else
 408:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 409:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 410:F4_CORE/core_cmInstr.h **** #endif
 411:F4_CORE/core_cmInstr.h **** 
 412:F4_CORE/core_cmInstr.h **** /** \brief  No Operation
 413:F4_CORE/core_cmInstr.h **** 
 414:F4_CORE/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 415:F4_CORE/core_cmInstr.h ****  */
 416:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 417:F4_CORE/core_cmInstr.h **** {
 418:F4_CORE/core_cmInstr.h ****   __ASM volatile ("nop");
 419:F4_CORE/core_cmInstr.h **** }
 420:F4_CORE/core_cmInstr.h **** 
 421:F4_CORE/core_cmInstr.h **** 
 422:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Interrupt
 423:F4_CORE/core_cmInstr.h **** 
 424:F4_CORE/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 425:F4_CORE/core_cmInstr.h ****     until one of a number of events occurs.
 426:F4_CORE/core_cmInstr.h ****  */
 427:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 428:F4_CORE/core_cmInstr.h **** {
 429:F4_CORE/core_cmInstr.h ****   __ASM volatile ("wfi");
 430:F4_CORE/core_cmInstr.h **** }
 431:F4_CORE/core_cmInstr.h **** 
 432:F4_CORE/core_cmInstr.h **** 
 433:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Event
 434:F4_CORE/core_cmInstr.h **** 
 435:F4_CORE/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 436:F4_CORE/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 437:F4_CORE/core_cmInstr.h ****  */
 438:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 447              		.loc 2 438 53 view .LVU91
 448              	.LBB13:
 439:F4_CORE/core_cmInstr.h **** {
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 31


 440:F4_CORE/core_cmInstr.h ****   __ASM volatile ("wfe");
 449              		.loc 2 440 3 view .LVU92
 450              		.syntax unified
 451              	@ 440 "F4_CORE/core_cmInstr.h" 1
 452 001e 20BF     		wfe
 453              	@ 0 "" 2
 454              		.thumb
 455              		.syntax unified
 456              	.L37:
 457              	.LBE13:
 458              	.LBE12:
 847:FWLIB/src/stm32f4xx_pwr.c ****   }
 848:FWLIB/src/stm32f4xx_pwr.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
 849:FWLIB/src/stm32f4xx_pwr.c ****   SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 459              		.loc 1 849 3 view .LVU93
 460              		.loc 1 849 12 is_stmt 0 view .LVU94
 461 0020 044A     		ldr	r2, .L39+4
 462 0022 1369     		ldr	r3, [r2, #16]
 463 0024 23F00403 		bic	r3, r3, #4
 464 0028 1361     		str	r3, [r2, #16]
 850:FWLIB/src/stm32f4xx_pwr.c **** }
 465              		.loc 1 850 1 view .LVU95
 466 002a 7047     		bx	lr
 467              	.L38:
 841:FWLIB/src/stm32f4xx_pwr.c ****   }
 468              		.loc 1 841 5 is_stmt 1 view .LVU96
 469              	.LBB14:
 470              	.LBI14:
 427:F4_CORE/core_cmInstr.h **** {
 471              		.loc 2 427 53 view .LVU97
 472              	.LBB15:
 429:F4_CORE/core_cmInstr.h **** }
 473              		.loc 2 429 3 view .LVU98
 474              		.syntax unified
 475              	@ 429 "F4_CORE/core_cmInstr.h" 1
 476 002c 30BF     		wfi
 477              	@ 0 "" 2
 430:F4_CORE/core_cmInstr.h **** 
 478              		.loc 2 430 1 is_stmt 0 view .LVU99
 479              		.thumb
 480              		.syntax unified
 481 002e F7E7     		b	.L37
 482              	.L40:
 483              		.align	2
 484              	.L39:
 485 0030 00700040 		.word	1073770496
 486 0034 00ED00E0 		.word	-536810240
 487              	.LBE15:
 488              	.LBE14:
 489              		.cfi_endproc
 490              	.LFE134:
 492              		.section	.text.PWR_EnterUnderDriveSTOPMode,"ax",%progbits
 493              		.align	1
 494              		.global	PWR_EnterUnderDriveSTOPMode
 495              		.syntax unified
 496              		.thumb
 497              		.thumb_func
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 32


 498              		.fpu fpv4-sp-d16
 500              	PWR_EnterUnderDriveSTOPMode:
 501              	.LVL25:
 502              	.LFB135:
 851:FWLIB/src/stm32f4xx_pwr.c **** 
 852:FWLIB/src/stm32f4xx_pwr.c **** /**
 853:FWLIB/src/stm32f4xx_pwr.c ****   * @brief  Enters in Under-Drive STOP mode.
 854:FWLIB/src/stm32f4xx_pwr.c ****   *  
 855:FWLIB/src/stm32f4xx_pwr.c ****   * @note   This mode is only available for STM32F42xxx/STM3243xxx devices. 
 856:FWLIB/src/stm32f4xx_pwr.c ****   * 
 857:FWLIB/src/stm32f4xx_pwr.c ****   * @note    This mode can be selected only when the Under-Drive is already active 
 858:FWLIB/src/stm32f4xx_pwr.c ****   *         
 859:FWLIB/src/stm32f4xx_pwr.c ****   * @note   In Stop mode, all I/O pins keep the same state as in Run mode.
 860:FWLIB/src/stm32f4xx_pwr.c ****   * @note   When exiting Stop mode by issuing an interrupt or a wakeup event, 
 861:FWLIB/src/stm32f4xx_pwr.c ****   *         the HSI RC oscillator is selected as system clock.
 862:FWLIB/src/stm32f4xx_pwr.c ****   * @note   When the voltage regulator operates in low power mode, an additional 
 863:FWLIB/src/stm32f4xx_pwr.c ****   *         startup delay is incurred when waking up from Stop mode. 
 864:FWLIB/src/stm32f4xx_pwr.c ****   *         By keeping the internal regulator ON during Stop mode, the consumption 
 865:FWLIB/src/stm32f4xx_pwr.c ****   *         is higher although the startup time is reduced.
 866:FWLIB/src/stm32f4xx_pwr.c ****   *     
 867:FWLIB/src/stm32f4xx_pwr.c ****   * @param  PWR_Regulator: specifies the regulator state in STOP mode.
 868:FWLIB/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 869:FWLIB/src/stm32f4xx_pwr.c ****   *            @arg PWR_MainRegulator_UnderDrive_ON:  Main Regulator in under-drive mode 
 870:FWLIB/src/stm32f4xx_pwr.c ****   *                 and Flash memory in power-down when the device is in Stop under-drive mode
 871:FWLIB/src/stm32f4xx_pwr.c ****   *            @arg PWR_LowPowerRegulator_UnderDrive_ON:  Low Power Regulator in under-drive mode 
 872:FWLIB/src/stm32f4xx_pwr.c ****   *                and Flash memory in power-down when the device is in Stop under-drive mode
 873:FWLIB/src/stm32f4xx_pwr.c ****   * @param  PWR_STOPEntry: specifies if STOP mode in entered with WFI or WFE instruction.
 874:FWLIB/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 875:FWLIB/src/stm32f4xx_pwr.c ****   *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
 876:FWLIB/src/stm32f4xx_pwr.c ****   *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
 877:FWLIB/src/stm32f4xx_pwr.c ****   * @retval None
 878:FWLIB/src/stm32f4xx_pwr.c ****   */
 879:FWLIB/src/stm32f4xx_pwr.c **** void PWR_EnterUnderDriveSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
 880:FWLIB/src/stm32f4xx_pwr.c **** {
 503              		.loc 1 880 1 is_stmt 1 view -0
 504              		.cfi_startproc
 505              		@ args = 0, pretend = 0, frame = 0
 506              		@ frame_needed = 0, uses_anonymous_args = 0
 507              		@ link register save eliminated.
 881:FWLIB/src/stm32f4xx_pwr.c ****   uint32_t tmpreg = 0;
 508              		.loc 1 881 3 view .LVU101
 882:FWLIB/src/stm32f4xx_pwr.c ****   
 883:FWLIB/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 884:FWLIB/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_REGULATOR_UNDERDRIVE(PWR_Regulator));
 509              		.loc 1 884 3 view .LVU102
 885:FWLIB/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
 510              		.loc 1 885 3 view .LVU103
 886:FWLIB/src/stm32f4xx_pwr.c ****   
 887:FWLIB/src/stm32f4xx_pwr.c ****   /* Select the regulator state in STOP mode ---------------------------------*/
 888:FWLIB/src/stm32f4xx_pwr.c ****   tmpreg = PWR->CR;
 511              		.loc 1 888 3 view .LVU104
 512              		.loc 1 888 10 is_stmt 0 view .LVU105
 513 0000 0B4A     		ldr	r2, .L45
 514 0002 1368     		ldr	r3, [r2]
 515              	.LVL26:
 889:FWLIB/src/stm32f4xx_pwr.c ****   /* Clear PDDS and LPDS bits */
 890:FWLIB/src/stm32f4xx_pwr.c ****   tmpreg &= CR_DS_MASK;
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 33


 516              		.loc 1 890 3 is_stmt 1 view .LVU106
 517              		.loc 1 890 10 is_stmt 0 view .LVU107
 518 0004 23F44063 		bic	r3, r3, #3072
 519              	.LVL27:
 520              		.loc 1 890 10 view .LVU108
 521 0008 23F00303 		bic	r3, r3, #3
 522              	.LVL28:
 891:FWLIB/src/stm32f4xx_pwr.c ****   
 892:FWLIB/src/stm32f4xx_pwr.c ****   /* Set LPDS, MRLUDS and LPLUDS bits according to PWR_Regulator value */
 893:FWLIB/src/stm32f4xx_pwr.c ****   tmpreg |= PWR_Regulator;
 523              		.loc 1 893 3 is_stmt 1 view .LVU109
 524              		.loc 1 893 10 is_stmt 0 view .LVU110
 525 000c 0343     		orrs	r3, r3, r0
 526              	.LVL29:
 894:FWLIB/src/stm32f4xx_pwr.c ****   
 895:FWLIB/src/stm32f4xx_pwr.c ****   /* Store the new value */
 896:FWLIB/src/stm32f4xx_pwr.c ****   PWR->CR = tmpreg;
 527              		.loc 1 896 3 is_stmt 1 view .LVU111
 528              		.loc 1 896 11 is_stmt 0 view .LVU112
 529 000e 1360     		str	r3, [r2]
 897:FWLIB/src/stm32f4xx_pwr.c ****   
 898:FWLIB/src/stm32f4xx_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 899:FWLIB/src/stm32f4xx_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 530              		.loc 1 899 3 is_stmt 1 view .LVU113
 531              		.loc 1 899 12 is_stmt 0 view .LVU114
 532 0010 084A     		ldr	r2, .L45+4
 533 0012 1369     		ldr	r3, [r2, #16]
 534              	.LVL30:
 535              		.loc 1 899 12 view .LVU115
 536 0014 43F00403 		orr	r3, r3, #4
 537 0018 1361     		str	r3, [r2, #16]
 538              	.LVL31:
 900:FWLIB/src/stm32f4xx_pwr.c ****   
 901:FWLIB/src/stm32f4xx_pwr.c ****   /* Select STOP mode entry --------------------------------------------------*/
 902:FWLIB/src/stm32f4xx_pwr.c ****   if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 539              		.loc 1 902 3 is_stmt 1 view .LVU116
 540              		.loc 1 902 5 is_stmt 0 view .LVU117
 541 001a 0129     		cmp	r1, #1
 542 001c 06D0     		beq	.L44
 903:FWLIB/src/stm32f4xx_pwr.c ****   {   
 904:FWLIB/src/stm32f4xx_pwr.c ****     /* Request Wait For Interrupt */
 905:FWLIB/src/stm32f4xx_pwr.c ****     __WFI();
 906:FWLIB/src/stm32f4xx_pwr.c ****   }
 907:FWLIB/src/stm32f4xx_pwr.c ****   else
 908:FWLIB/src/stm32f4xx_pwr.c ****   {
 909:FWLIB/src/stm32f4xx_pwr.c ****     /* Request Wait For Event */
 910:FWLIB/src/stm32f4xx_pwr.c ****     __WFE();
 543              		.loc 1 910 5 is_stmt 1 view .LVU118
 544              	.LBB16:
 545              	.LBI16:
 438:F4_CORE/core_cmInstr.h **** {
 546              		.loc 2 438 53 view .LVU119
 547              	.LBB17:
 548              		.loc 2 440 3 view .LVU120
 549              		.syntax unified
 550              	@ 440 "F4_CORE/core_cmInstr.h" 1
 551 001e 20BF     		wfe
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 34


 552              	@ 0 "" 2
 553              		.thumb
 554              		.syntax unified
 555              	.L43:
 556              	.LBE17:
 557              	.LBE16:
 911:FWLIB/src/stm32f4xx_pwr.c ****   }
 912:FWLIB/src/stm32f4xx_pwr.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
 913:FWLIB/src/stm32f4xx_pwr.c ****   SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 558              		.loc 1 913 3 view .LVU121
 559              		.loc 1 913 12 is_stmt 0 view .LVU122
 560 0020 044A     		ldr	r2, .L45+4
 561 0022 1369     		ldr	r3, [r2, #16]
 562 0024 23F00403 		bic	r3, r3, #4
 563 0028 1361     		str	r3, [r2, #16]
 914:FWLIB/src/stm32f4xx_pwr.c **** }
 564              		.loc 1 914 1 view .LVU123
 565 002a 7047     		bx	lr
 566              	.L44:
 905:FWLIB/src/stm32f4xx_pwr.c ****   }
 567              		.loc 1 905 5 is_stmt 1 view .LVU124
 568              	.LBB18:
 569              	.LBI18:
 427:F4_CORE/core_cmInstr.h **** {
 570              		.loc 2 427 53 view .LVU125
 571              	.LBB19:
 429:F4_CORE/core_cmInstr.h **** }
 572              		.loc 2 429 3 view .LVU126
 573              		.syntax unified
 574              	@ 429 "F4_CORE/core_cmInstr.h" 1
 575 002c 30BF     		wfi
 576              	@ 0 "" 2
 430:F4_CORE/core_cmInstr.h **** 
 577              		.loc 2 430 1 is_stmt 0 view .LVU127
 578              		.thumb
 579              		.syntax unified
 580 002e F7E7     		b	.L43
 581              	.L46:
 582              		.align	2
 583              	.L45:
 584 0030 00700040 		.word	1073770496
 585 0034 00ED00E0 		.word	-536810240
 586              	.LBE19:
 587              	.LBE18:
 588              		.cfi_endproc
 589              	.LFE135:
 591              		.section	.text.PWR_EnterSTANDBYMode,"ax",%progbits
 592              		.align	1
 593              		.global	PWR_EnterSTANDBYMode
 594              		.syntax unified
 595              		.thumb
 596              		.thumb_func
 597              		.fpu fpv4-sp-d16
 599              	PWR_EnterSTANDBYMode:
 600              	.LFB136:
 915:FWLIB/src/stm32f4xx_pwr.c **** 
 916:FWLIB/src/stm32f4xx_pwr.c **** /**
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 35


 917:FWLIB/src/stm32f4xx_pwr.c ****   * @brief  Enters STANDBY mode.
 918:FWLIB/src/stm32f4xx_pwr.c ****   * @note   In Standby mode, all I/O pins are high impedance except for:
 919:FWLIB/src/stm32f4xx_pwr.c ****   *          - Reset pad (still available) 
 920:FWLIB/src/stm32f4xx_pwr.c ****   *          - RTC_AF1 pin (PC13) if configured for tamper, time-stamp, RTC 
 921:FWLIB/src/stm32f4xx_pwr.c ****   *            Alarm out, or RTC clock calibration out.
 922:FWLIB/src/stm32f4xx_pwr.c ****   *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
 923:FWLIB/src/stm32f4xx_pwr.c ****   *          - WKUP pin 1 (PA0) if enabled.
 924:FWLIB/src/stm32f4xx_pwr.c ****   * @note   The Wakeup flag (WUF) need to be cleared at application level before to call this funct
 925:FWLIB/src/stm32f4xx_pwr.c ****   * @param  None
 926:FWLIB/src/stm32f4xx_pwr.c ****   * @retval None
 927:FWLIB/src/stm32f4xx_pwr.c ****   */
 928:FWLIB/src/stm32f4xx_pwr.c **** void PWR_EnterSTANDBYMode(void)
 929:FWLIB/src/stm32f4xx_pwr.c **** {
 601              		.loc 1 929 1 is_stmt 1 view -0
 602              		.cfi_startproc
 603              		@ args = 0, pretend = 0, frame = 0
 604              		@ frame_needed = 0, uses_anonymous_args = 0
 605              		@ link register save eliminated.
 930:FWLIB/src/stm32f4xx_pwr.c ****   /* Select STANDBY mode */
 931:FWLIB/src/stm32f4xx_pwr.c ****   PWR->CR |= PWR_CR_PDDS;
 606              		.loc 1 931 3 view .LVU129
 607              		.loc 1 931 11 is_stmt 0 view .LVU130
 608 0000 054A     		ldr	r2, .L48
 609 0002 1368     		ldr	r3, [r2]
 610 0004 43F00203 		orr	r3, r3, #2
 611 0008 1360     		str	r3, [r2]
 932:FWLIB/src/stm32f4xx_pwr.c ****   
 933:FWLIB/src/stm32f4xx_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 934:FWLIB/src/stm32f4xx_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 612              		.loc 1 934 3 is_stmt 1 view .LVU131
 613              		.loc 1 934 12 is_stmt 0 view .LVU132
 614 000a 044A     		ldr	r2, .L48+4
 615 000c 1369     		ldr	r3, [r2, #16]
 616 000e 43F00403 		orr	r3, r3, #4
 617 0012 1361     		str	r3, [r2, #16]
 935:FWLIB/src/stm32f4xx_pwr.c ****   
 936:FWLIB/src/stm32f4xx_pwr.c ****   /* This option is used to ensure that store operations are completed */
 937:FWLIB/src/stm32f4xx_pwr.c **** #if defined ( __CC_ARM   )
 938:FWLIB/src/stm32f4xx_pwr.c ****   __force_stores();
 939:FWLIB/src/stm32f4xx_pwr.c **** #endif
 940:FWLIB/src/stm32f4xx_pwr.c ****   /* Request Wait For Interrupt */
 941:FWLIB/src/stm32f4xx_pwr.c ****   __WFI();
 618              		.loc 1 941 3 is_stmt 1 view .LVU133
 619              	.LBB20:
 620              	.LBI20:
 427:F4_CORE/core_cmInstr.h **** {
 621              		.loc 2 427 53 view .LVU134
 622              	.LBB21:
 429:F4_CORE/core_cmInstr.h **** }
 623              		.loc 2 429 3 view .LVU135
 624              		.syntax unified
 625              	@ 429 "F4_CORE/core_cmInstr.h" 1
 626 0014 30BF     		wfi
 627              	@ 0 "" 2
 628              		.thumb
 629              		.syntax unified
 630              	.LBE21:
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 36


 631              	.LBE20:
 942:FWLIB/src/stm32f4xx_pwr.c **** }
 632              		.loc 1 942 1 is_stmt 0 view .LVU136
 633 0016 7047     		bx	lr
 634              	.L49:
 635              		.align	2
 636              	.L48:
 637 0018 00700040 		.word	1073770496
 638 001c 00ED00E0 		.word	-536810240
 639              		.cfi_endproc
 640              	.LFE136:
 642              		.section	.text.PWR_GetFlagStatus,"ax",%progbits
 643              		.align	1
 644              		.global	PWR_GetFlagStatus
 645              		.syntax unified
 646              		.thumb
 647              		.thumb_func
 648              		.fpu fpv4-sp-d16
 650              	PWR_GetFlagStatus:
 651              	.LVL32:
 652              	.LFB137:
 943:FWLIB/src/stm32f4xx_pwr.c **** 
 944:FWLIB/src/stm32f4xx_pwr.c **** /**
 945:FWLIB/src/stm32f4xx_pwr.c ****   * @}
 946:FWLIB/src/stm32f4xx_pwr.c ****   */
 947:FWLIB/src/stm32f4xx_pwr.c **** 
 948:FWLIB/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group7 Flags management functions
 949:FWLIB/src/stm32f4xx_pwr.c ****   *  @brief   Flags management functions 
 950:FWLIB/src/stm32f4xx_pwr.c ****   *
 951:FWLIB/src/stm32f4xx_pwr.c **** @verbatim   
 952:FWLIB/src/stm32f4xx_pwr.c ****  ===============================================================================
 953:FWLIB/src/stm32f4xx_pwr.c ****                     ##### Flags management functions #####
 954:FWLIB/src/stm32f4xx_pwr.c ****  ===============================================================================  
 955:FWLIB/src/stm32f4xx_pwr.c **** 
 956:FWLIB/src/stm32f4xx_pwr.c **** @endverbatim
 957:FWLIB/src/stm32f4xx_pwr.c ****   * @{
 958:FWLIB/src/stm32f4xx_pwr.c ****   */
 959:FWLIB/src/stm32f4xx_pwr.c **** 
 960:FWLIB/src/stm32f4xx_pwr.c **** /**
 961:FWLIB/src/stm32f4xx_pwr.c ****   * @brief  Checks whether the specified PWR flag is set or not.
 962:FWLIB/src/stm32f4xx_pwr.c ****   * @param  PWR_FLAG: specifies the flag to check.
 963:FWLIB/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 964:FWLIB/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_WU: Wake Up flag. This flag indicates that a wakeup event 
 965:FWLIB/src/stm32f4xx_pwr.c ****   *                  was received from the WKUP pin or from the RTC alarm (Alarm A 
 966:FWLIB/src/stm32f4xx_pwr.c ****   *                  or Alarm B), RTC Tamper event, RTC TimeStamp event or RTC Wakeup.
 967:FWLIB/src/stm32f4xx_pwr.c ****   *                  An additional wakeup event is detected if the WKUP pin is enabled 
 968:FWLIB/src/stm32f4xx_pwr.c ****   *                  (by setting the EWUP bit) when the WKUP pin level is already high.  
 969:FWLIB/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_SB: StandBy flag. This flag indicates that the system was
 970:FWLIB/src/stm32f4xx_pwr.c ****   *                  resumed from StandBy mode.    
 971:FWLIB/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_PVDO: PVD Output. This flag is valid only if PVD is enabled 
 972:FWLIB/src/stm32f4xx_pwr.c ****   *                  by the PWR_PVDCmd() function. The PVD is stopped by Standby mode 
 973:FWLIB/src/stm32f4xx_pwr.c ****   *                  For this reason, this bit is equal to 0 after Standby or reset
 974:FWLIB/src/stm32f4xx_pwr.c ****   *                  until the PVDE bit is set.
 975:FWLIB/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_BRR: Backup regulator ready flag. This bit is not reset 
 976:FWLIB/src/stm32f4xx_pwr.c ****   *                  when the device wakes up from Standby mode or by a system reset 
 977:FWLIB/src/stm32f4xx_pwr.c ****   *                  or power reset.  
 978:FWLIB/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_VOSRDY: This flag indicates that the Regulator voltage 
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 37


 979:FWLIB/src/stm32f4xx_pwr.c ****   *                 scaling output selection is ready.
 980:FWLIB/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_ODRDY: This flag indicates that the Over-drive mode
 981:FWLIB/src/stm32f4xx_pwr.c ****   *                 is ready (STM32F42xxx/43xxx devices) 
 982:FWLIB/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_ODSWRDY: This flag indicates that the Over-drive mode
 983:FWLIB/src/stm32f4xx_pwr.c ****   *                 switching is ready (STM32F42xxx/43xxx devices) 
 984:FWLIB/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_UDRDY: This flag indicates that the Under-drive mode
 985:FWLIB/src/stm32f4xx_pwr.c ****   *                 is enabled in Stop mode (STM32F42xxx/43xxx devices)
 986:FWLIB/src/stm32f4xx_pwr.c ****   * @retval The new state of PWR_FLAG (SET or RESET).
 987:FWLIB/src/stm32f4xx_pwr.c ****   */
 988:FWLIB/src/stm32f4xx_pwr.c **** FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
 989:FWLIB/src/stm32f4xx_pwr.c **** {
 653              		.loc 1 989 1 is_stmt 1 view -0
 654              		.cfi_startproc
 655              		@ args = 0, pretend = 0, frame = 0
 656              		@ frame_needed = 0, uses_anonymous_args = 0
 657              		@ link register save eliminated.
 990:FWLIB/src/stm32f4xx_pwr.c ****   FlagStatus bitstatus = RESET;
 658              		.loc 1 990 3 view .LVU138
 991:FWLIB/src/stm32f4xx_pwr.c ****   
 992:FWLIB/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 993:FWLIB/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
 659              		.loc 1 993 3 view .LVU139
 994:FWLIB/src/stm32f4xx_pwr.c ****   
 995:FWLIB/src/stm32f4xx_pwr.c ****   if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 660              		.loc 1 995 3 view .LVU140
 661              		.loc 1 995 11 is_stmt 0 view .LVU141
 662 0000 034B     		ldr	r3, .L53
 663 0002 5B68     		ldr	r3, [r3, #4]
 664              		.loc 1 995 6 view .LVU142
 665 0004 0342     		tst	r3, r0
 666 0006 01D0     		beq	.L52
 996:FWLIB/src/stm32f4xx_pwr.c ****   {
 997:FWLIB/src/stm32f4xx_pwr.c ****     bitstatus = SET;
 667              		.loc 1 997 15 view .LVU143
 668 0008 0120     		movs	r0, #1
 669              	.LVL33:
 670              		.loc 1 997 15 view .LVU144
 671 000a 7047     		bx	lr
 672              	.LVL34:
 673              	.L52:
 998:FWLIB/src/stm32f4xx_pwr.c ****   }
 999:FWLIB/src/stm32f4xx_pwr.c ****   else
1000:FWLIB/src/stm32f4xx_pwr.c ****   {
1001:FWLIB/src/stm32f4xx_pwr.c ****     bitstatus = RESET;
 674              		.loc 1 1001 15 view .LVU145
 675 000c 0020     		movs	r0, #0
 676              	.LVL35:
1002:FWLIB/src/stm32f4xx_pwr.c ****   }
1003:FWLIB/src/stm32f4xx_pwr.c ****   /* Return the flag status */
1004:FWLIB/src/stm32f4xx_pwr.c ****   return bitstatus;
 677              		.loc 1 1004 3 is_stmt 1 view .LVU146
1005:FWLIB/src/stm32f4xx_pwr.c **** }
 678              		.loc 1 1005 1 is_stmt 0 view .LVU147
 679 000e 7047     		bx	lr
 680              	.L54:
 681              		.align	2
 682              	.L53:
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 38


 683 0010 00700040 		.word	1073770496
 684              		.cfi_endproc
 685              	.LFE137:
 687              		.section	.text.PWR_ClearFlag,"ax",%progbits
 688              		.align	1
 689              		.global	PWR_ClearFlag
 690              		.syntax unified
 691              		.thumb
 692              		.thumb_func
 693              		.fpu fpv4-sp-d16
 695              	PWR_ClearFlag:
 696              	.LVL36:
 697              	.LFB138:
1006:FWLIB/src/stm32f4xx_pwr.c **** 
1007:FWLIB/src/stm32f4xx_pwr.c **** /**
1008:FWLIB/src/stm32f4xx_pwr.c ****   * @brief  Clears the PWR's pending flags.
1009:FWLIB/src/stm32f4xx_pwr.c ****   * @param  PWR_FLAG: specifies the flag to clear.
1010:FWLIB/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
1011:FWLIB/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_WU: Wake Up flag
1012:FWLIB/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_SB: StandBy flag
1013:FWLIB/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_UDRDY: Under-drive ready flag (STM32F42xxx/43xxx devices)
1014:FWLIB/src/stm32f4xx_pwr.c ****   * @retval None
1015:FWLIB/src/stm32f4xx_pwr.c ****   */
1016:FWLIB/src/stm32f4xx_pwr.c **** void PWR_ClearFlag(uint32_t PWR_FLAG)
1017:FWLIB/src/stm32f4xx_pwr.c **** {
 698              		.loc 1 1017 1 is_stmt 1 view -0
 699              		.cfi_startproc
 700              		@ args = 0, pretend = 0, frame = 0
 701              		@ frame_needed = 0, uses_anonymous_args = 0
 702              		@ link register save eliminated.
1018:FWLIB/src/stm32f4xx_pwr.c ****   /* Check the parameters */
1019:FWLIB/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
 703              		.loc 1 1019 3 view .LVU149
1020:FWLIB/src/stm32f4xx_pwr.c ****   
1021:FWLIB/src/stm32f4xx_pwr.c **** #if defined (STM32F427_437xx) || defined (STM32F429_439xx)
1022:FWLIB/src/stm32f4xx_pwr.c ****   if (PWR_FLAG != PWR_FLAG_UDRDY)
1023:FWLIB/src/stm32f4xx_pwr.c ****   {
1024:FWLIB/src/stm32f4xx_pwr.c ****     PWR->CR |=  PWR_FLAG << 2;
1025:FWLIB/src/stm32f4xx_pwr.c ****   }
1026:FWLIB/src/stm32f4xx_pwr.c ****   else
1027:FWLIB/src/stm32f4xx_pwr.c ****   {
1028:FWLIB/src/stm32f4xx_pwr.c ****     PWR->CSR |= PWR_FLAG_UDRDY;
1029:FWLIB/src/stm32f4xx_pwr.c ****   }
1030:FWLIB/src/stm32f4xx_pwr.c **** #endif /* STM32F427_437xx ||  STM32F429_439xx */
1031:FWLIB/src/stm32f4xx_pwr.c **** 
1032:FWLIB/src/stm32f4xx_pwr.c **** #if defined (STM32F40_41xxx) || defined (STM32F401xx) || defined (STM32F410xx) || defined (STM32F41
1033:FWLIB/src/stm32f4xx_pwr.c ****   PWR->CR |=  PWR_FLAG << 2;
 704              		.loc 1 1033 3 view .LVU150
 705              		.loc 1 1033 11 is_stmt 0 view .LVU151
 706 0000 024A     		ldr	r2, .L56
 707 0002 1368     		ldr	r3, [r2]
 708 0004 43EA8003 		orr	r3, r3, r0, lsl #2
 709 0008 1360     		str	r3, [r2]
1034:FWLIB/src/stm32f4xx_pwr.c **** #endif /* STM32F40_41xxx  || STM32F401xx || STM32F410xx || STM32F411xE || STM32F412xG || STM32F413_
1035:FWLIB/src/stm32f4xx_pwr.c **** }
 710              		.loc 1 1035 1 view .LVU152
 711 000a 7047     		bx	lr
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 39


 712              	.L57:
 713              		.align	2
 714              	.L56:
 715 000c 00700040 		.word	1073770496
 716              		.cfi_endproc
 717              	.LFE138:
 719              		.text
 720              	.Letext0:
 721              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2020-q4-major\\arm-none-eabi\\inc
 722              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2020-q4-major\\arm-none-eabi\\inc
 723              		.file 5 "F4_CORE/core_cm4.h"
 724              		.file 6 "USER/stm32f4xx.h"
 725              		.file 7 "FWLIB/inc/stm32f4xx_rcc.h"
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s 			page 40


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_pwr.c
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:18     .text.PWR_DeInit:00000000 $t
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:26     .text.PWR_DeInit:00000000 PWR_DeInit
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:54     .text.PWR_BackupAccessCmd:00000000 $t
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:61     .text.PWR_BackupAccessCmd:00000000 PWR_BackupAccessCmd
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:79     .text.PWR_BackupAccessCmd:00000008 $d
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:84     .text.PWR_PVDLevelConfig:00000000 $t
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:91     .text.PWR_PVDLevelConfig:00000000 PWR_PVDLevelConfig
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:122    .text.PWR_PVDLevelConfig:00000010 $d
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:127    .text.PWR_PVDCmd:00000000 $t
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:134    .text.PWR_PVDCmd:00000000 PWR_PVDCmd
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:152    .text.PWR_PVDCmd:00000008 $d
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:157    .text.PWR_WakeUpPinCmd:00000000 $t
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:164    .text.PWR_WakeUpPinCmd:00000000 PWR_WakeUpPinCmd
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:182    .text.PWR_WakeUpPinCmd:00000008 $d
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:187    .text.PWR_BackupRegulatorCmd:00000000 $t
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:194    .text.PWR_BackupRegulatorCmd:00000000 PWR_BackupRegulatorCmd
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:212    .text.PWR_BackupRegulatorCmd:00000008 $d
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:217    .text.PWR_MainRegulatorModeConfig:00000000 $t
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:224    .text.PWR_MainRegulatorModeConfig:00000000 PWR_MainRegulatorModeConfig
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:255    .text.PWR_MainRegulatorModeConfig:00000010 $d
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:260    .text.PWR_OverDriveCmd:00000000 $t
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:267    .text.PWR_OverDriveCmd:00000000 PWR_OverDriveCmd
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:285    .text.PWR_OverDriveCmd:00000008 $d
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:290    .text.PWR_OverDriveSWCmd:00000000 $t
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:297    .text.PWR_OverDriveSWCmd:00000000 PWR_OverDriveSWCmd
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:315    .text.PWR_OverDriveSWCmd:00000008 $d
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:320    .text.PWR_UnderDriveCmd:00000000 $t
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:327    .text.PWR_UnderDriveCmd:00000000 PWR_UnderDriveCmd
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:358    .text.PWR_UnderDriveCmd:0000001c $d
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:363    .text.PWR_FlashPowerDownCmd:00000000 $t
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:370    .text.PWR_FlashPowerDownCmd:00000000 PWR_FlashPowerDownCmd
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:388    .text.PWR_FlashPowerDownCmd:00000008 $d
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:393    .text.PWR_EnterSTOPMode:00000000 $t
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:400    .text.PWR_EnterSTOPMode:00000000 PWR_EnterSTOPMode
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:485    .text.PWR_EnterSTOPMode:00000030 $d
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:493    .text.PWR_EnterUnderDriveSTOPMode:00000000 $t
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:500    .text.PWR_EnterUnderDriveSTOPMode:00000000 PWR_EnterUnderDriveSTOPMode
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:584    .text.PWR_EnterUnderDriveSTOPMode:00000030 $d
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:592    .text.PWR_EnterSTANDBYMode:00000000 $t
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:599    .text.PWR_EnterSTANDBYMode:00000000 PWR_EnterSTANDBYMode
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:637    .text.PWR_EnterSTANDBYMode:00000018 $d
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:643    .text.PWR_GetFlagStatus:00000000 $t
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:650    .text.PWR_GetFlagStatus:00000000 PWR_GetFlagStatus
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:683    .text.PWR_GetFlagStatus:00000010 $d
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:688    .text.PWR_ClearFlag:00000000 $t
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:695    .text.PWR_ClearFlag:00000000 PWR_ClearFlag
C:\Users\huav\AppData\Local\Temp\ccqF3hH5.s:715    .text.PWR_ClearFlag:0000000c $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
