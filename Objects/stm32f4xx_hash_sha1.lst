ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//cccW0x9Y.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_hash_sha1.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HASH_SHA1,"ax",%progbits
  18              		.align	1
  19              		.global	HASH_SHA1
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	HASH_SHA1:
  27              	.LVL0:
  28              	.LFB123:
  29              		.file 1 "FWLIB/src/stm32f4xx_hash_sha1.c"
   1:FWLIB/src/stm32f4xx_hash_sha1.c **** /**
   2:FWLIB/src/stm32f4xx_hash_sha1.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_hash_sha1.c ****   * @file    stm32f4xx_hash_sha1.c
   4:FWLIB/src/stm32f4xx_hash_sha1.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_hash_sha1.c ****   * @version V1.8.0
   6:FWLIB/src/stm32f4xx_hash_sha1.c ****   * @date    04-November-2016
   7:FWLIB/src/stm32f4xx_hash_sha1.c ****   * @brief   This file provides high level functions to compute the HASH SHA1 and
   8:FWLIB/src/stm32f4xx_hash_sha1.c ****   *          HMAC SHA1 Digest of an input message.
   9:FWLIB/src/stm32f4xx_hash_sha1.c ****   *          It uses the stm32f4xx_hash.c/.h drivers to access the STM32F4xx HASH
  10:FWLIB/src/stm32f4xx_hash_sha1.c ****   *          peripheral.
  11:FWLIB/src/stm32f4xx_hash_sha1.c ****   *
  12:FWLIB/src/stm32f4xx_hash_sha1.c **** @verbatim
  13:FWLIB/src/stm32f4xx_hash_sha1.c ****  ===================================================================
  14:FWLIB/src/stm32f4xx_hash_sha1.c ****                  ##### How to use this driver #####
  15:FWLIB/src/stm32f4xx_hash_sha1.c ****  ===================================================================
  16:FWLIB/src/stm32f4xx_hash_sha1.c ****  [..]
  17:FWLIB/src/stm32f4xx_hash_sha1.c ****    (#) Enable The HASH controller clock using 
  18:FWLIB/src/stm32f4xx_hash_sha1.c ****        RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_HASH, ENABLE); function.
  19:FWLIB/src/stm32f4xx_hash_sha1.c ****   
  20:FWLIB/src/stm32f4xx_hash_sha1.c ****    (#) Calculate the HASH SHA1 Digest using HASH_SHA1() function.
  21:FWLIB/src/stm32f4xx_hash_sha1.c ****   
  22:FWLIB/src/stm32f4xx_hash_sha1.c ****    (#) Calculate the HMAC SHA1 Digest using HMAC_SHA1() function.
  23:FWLIB/src/stm32f4xx_hash_sha1.c ****   
  24:FWLIB/src/stm32f4xx_hash_sha1.c **** @endverbatim
  25:FWLIB/src/stm32f4xx_hash_sha1.c ****   *
  26:FWLIB/src/stm32f4xx_hash_sha1.c ****   ******************************************************************************
  27:FWLIB/src/stm32f4xx_hash_sha1.c ****   * @attention
  28:FWLIB/src/stm32f4xx_hash_sha1.c ****   *
  29:FWLIB/src/stm32f4xx_hash_sha1.c ****   * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//cccW0x9Y.s 			page 2


  30:FWLIB/src/stm32f4xx_hash_sha1.c ****   *
  31:FWLIB/src/stm32f4xx_hash_sha1.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  32:FWLIB/src/stm32f4xx_hash_sha1.c ****   * You may not use this file except in compliance with the License.
  33:FWLIB/src/stm32f4xx_hash_sha1.c ****   * You may obtain a copy of the License at:
  34:FWLIB/src/stm32f4xx_hash_sha1.c ****   *
  35:FWLIB/src/stm32f4xx_hash_sha1.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  36:FWLIB/src/stm32f4xx_hash_sha1.c ****   *
  37:FWLIB/src/stm32f4xx_hash_sha1.c ****   * Unless required by applicable law or agreed to in writing, software 
  38:FWLIB/src/stm32f4xx_hash_sha1.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  39:FWLIB/src/stm32f4xx_hash_sha1.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  40:FWLIB/src/stm32f4xx_hash_sha1.c ****   * See the License for the specific language governing permissions and
  41:FWLIB/src/stm32f4xx_hash_sha1.c ****   * limitations under the License.
  42:FWLIB/src/stm32f4xx_hash_sha1.c ****   *
  43:FWLIB/src/stm32f4xx_hash_sha1.c ****   ******************************************************************************
  44:FWLIB/src/stm32f4xx_hash_sha1.c ****   */
  45:FWLIB/src/stm32f4xx_hash_sha1.c **** 
  46:FWLIB/src/stm32f4xx_hash_sha1.c **** /* Includes ------------------------------------------------------------------*/
  47:FWLIB/src/stm32f4xx_hash_sha1.c **** #include "stm32f4xx_hash.h"
  48:FWLIB/src/stm32f4xx_hash_sha1.c **** 
  49:FWLIB/src/stm32f4xx_hash_sha1.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  50:FWLIB/src/stm32f4xx_hash_sha1.c ****   * @{
  51:FWLIB/src/stm32f4xx_hash_sha1.c ****   */
  52:FWLIB/src/stm32f4xx_hash_sha1.c **** 
  53:FWLIB/src/stm32f4xx_hash_sha1.c **** /** @defgroup HASH 
  54:FWLIB/src/stm32f4xx_hash_sha1.c ****   * @brief HASH driver modules
  55:FWLIB/src/stm32f4xx_hash_sha1.c ****   * @{
  56:FWLIB/src/stm32f4xx_hash_sha1.c ****   */
  57:FWLIB/src/stm32f4xx_hash_sha1.c **** 
  58:FWLIB/src/stm32f4xx_hash_sha1.c **** /* Private typedef -----------------------------------------------------------*/
  59:FWLIB/src/stm32f4xx_hash_sha1.c **** /* Private define ------------------------------------------------------------*/
  60:FWLIB/src/stm32f4xx_hash_sha1.c **** #define SHA1BUSY_TIMEOUT    ((uint32_t) 0x00010000)
  61:FWLIB/src/stm32f4xx_hash_sha1.c **** 
  62:FWLIB/src/stm32f4xx_hash_sha1.c **** /* Private macro -------------------------------------------------------------*/
  63:FWLIB/src/stm32f4xx_hash_sha1.c **** /* Private variables ---------------------------------------------------------*/
  64:FWLIB/src/stm32f4xx_hash_sha1.c **** /* Private function prototypes -----------------------------------------------*/
  65:FWLIB/src/stm32f4xx_hash_sha1.c **** /* Private functions ---------------------------------------------------------*/
  66:FWLIB/src/stm32f4xx_hash_sha1.c **** 
  67:FWLIB/src/stm32f4xx_hash_sha1.c **** /** @defgroup HASH_Private_Functions
  68:FWLIB/src/stm32f4xx_hash_sha1.c ****   * @{
  69:FWLIB/src/stm32f4xx_hash_sha1.c ****   */ 
  70:FWLIB/src/stm32f4xx_hash_sha1.c **** 
  71:FWLIB/src/stm32f4xx_hash_sha1.c **** /** @defgroup HASH_Group6 High Level SHA1 functions
  72:FWLIB/src/stm32f4xx_hash_sha1.c ****  *  @brief   High Level SHA1 Hash and HMAC functions 
  73:FWLIB/src/stm32f4xx_hash_sha1.c ****  *
  74:FWLIB/src/stm32f4xx_hash_sha1.c **** @verbatim   
  75:FWLIB/src/stm32f4xx_hash_sha1.c ****  ===============================================================================
  76:FWLIB/src/stm32f4xx_hash_sha1.c ****                ##### High Level SHA1 Hash and HMAC functions #####
  77:FWLIB/src/stm32f4xx_hash_sha1.c ****  ===============================================================================
  78:FWLIB/src/stm32f4xx_hash_sha1.c **** 
  79:FWLIB/src/stm32f4xx_hash_sha1.c **** 
  80:FWLIB/src/stm32f4xx_hash_sha1.c **** @endverbatim
  81:FWLIB/src/stm32f4xx_hash_sha1.c ****   * @{
  82:FWLIB/src/stm32f4xx_hash_sha1.c ****   */
  83:FWLIB/src/stm32f4xx_hash_sha1.c **** 
  84:FWLIB/src/stm32f4xx_hash_sha1.c **** /**
  85:FWLIB/src/stm32f4xx_hash_sha1.c ****   * @brief  Compute the HASH SHA1 digest.
  86:FWLIB/src/stm32f4xx_hash_sha1.c ****   * @param  Input: pointer to the Input buffer to be treated.
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//cccW0x9Y.s 			page 3


  87:FWLIB/src/stm32f4xx_hash_sha1.c ****   * @param  Ilen: length of the Input buffer.
  88:FWLIB/src/stm32f4xx_hash_sha1.c ****   * @param  Output: the returned digest
  89:FWLIB/src/stm32f4xx_hash_sha1.c ****   * @retval An ErrorStatus enumeration value:
  90:FWLIB/src/stm32f4xx_hash_sha1.c ****   *          - SUCCESS: digest computation done
  91:FWLIB/src/stm32f4xx_hash_sha1.c ****   *          - ERROR: digest computation failed
  92:FWLIB/src/stm32f4xx_hash_sha1.c ****   */
  93:FWLIB/src/stm32f4xx_hash_sha1.c **** ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
  94:FWLIB/src/stm32f4xx_hash_sha1.c **** {
  30              		.loc 1 94 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 56
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 94 1 is_stmt 0 view .LVU1
  35 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 20
  38              		.cfi_offset 4, -20
  39              		.cfi_offset 5, -16
  40              		.cfi_offset 6, -12
  41              		.cfi_offset 7, -8
  42              		.cfi_offset 14, -4
  43 0002 8FB0     		sub	sp, sp, #60
  44              	.LCFI1:
  45              		.cfi_def_cfa_offset 80
  46 0004 0F46     		mov	r7, r1
  47 0006 1646     		mov	r6, r2
  95:FWLIB/src/stm32f4xx_hash_sha1.c ****   HASH_InitTypeDef SHA1_HASH_InitStructure;
  48              		.loc 1 95 3 is_stmt 1 view .LVU2
  96:FWLIB/src/stm32f4xx_hash_sha1.c ****   HASH_MsgDigest SHA1_MessageDigest;
  49              		.loc 1 96 3 view .LVU3
  97:FWLIB/src/stm32f4xx_hash_sha1.c ****   __IO uint16_t nbvalidbitsdata = 0;
  50              		.loc 1 97 3 view .LVU4
  51              		.loc 1 97 17 is_stmt 0 view .LVU5
  52 0008 0024     		movs	r4, #0
  53 000a ADF80640 		strh	r4, [sp, #6]	@ movhi
  98:FWLIB/src/stm32f4xx_hash_sha1.c ****   uint32_t i = 0;
  54              		.loc 1 98 3 is_stmt 1 view .LVU6
  55              	.LVL1:
  99:FWLIB/src/stm32f4xx_hash_sha1.c ****   __IO uint32_t counter = 0;
  56              		.loc 1 99 3 view .LVU7
  57              		.loc 1 99 17 is_stmt 0 view .LVU8
  58 000e 0094     		str	r4, [sp]
 100:FWLIB/src/stm32f4xx_hash_sha1.c ****   uint32_t busystatus = 0;
  59              		.loc 1 100 3 is_stmt 1 view .LVU9
  60              	.LVL2:
 101:FWLIB/src/stm32f4xx_hash_sha1.c ****   ErrorStatus status = SUCCESS;
  61              		.loc 1 101 3 view .LVU10
 102:FWLIB/src/stm32f4xx_hash_sha1.c ****   uint32_t inputaddr  = (uint32_t)Input;
  62              		.loc 1 102 3 view .LVU11
  63              		.loc 1 102 12 is_stmt 0 view .LVU12
  64 0010 0546     		mov	r5, r0
  65              	.LVL3:
 103:FWLIB/src/stm32f4xx_hash_sha1.c ****   uint32_t outputaddr = (uint32_t)Output;
  66              		.loc 1 103 3 is_stmt 1 view .LVU13
 104:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 105:FWLIB/src/stm32f4xx_hash_sha1.c ****   /* Number of valid bits in last word of the Input data */
 106:FWLIB/src/stm32f4xx_hash_sha1.c ****   nbvalidbitsdata = 8 * (Ilen % 4);
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//cccW0x9Y.s 			page 4


  67              		.loc 1 106 3 view .LVU14
  68              		.loc 1 106 19 is_stmt 0 view .LVU15
  69 0012 01F00303 		and	r3, r1, #3
  70 0016 DB00     		lsls	r3, r3, #3
  71 0018 ADF80630 		strh	r3, [sp, #6]	@ movhi
 107:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 108:FWLIB/src/stm32f4xx_hash_sha1.c ****   /* HASH peripheral initialization */
 109:FWLIB/src/stm32f4xx_hash_sha1.c ****   HASH_DeInit();
  72              		.loc 1 109 3 is_stmt 1 view .LVU16
  73 001c FFF7FEFF 		bl	HASH_DeInit
  74              	.LVL4:
 110:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 111:FWLIB/src/stm32f4xx_hash_sha1.c ****   /* HASH Configuration */
 112:FWLIB/src/stm32f4xx_hash_sha1.c ****   SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
  75              		.loc 1 112 3 view .LVU17
  76              		.loc 1 112 46 is_stmt 0 view .LVU18
  77 0020 0A94     		str	r4, [sp, #40]
 113:FWLIB/src/stm32f4xx_hash_sha1.c ****   SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
  78              		.loc 1 113 3 is_stmt 1 view .LVU19
  79              		.loc 1 113 41 is_stmt 0 view .LVU20
  80 0022 0B94     		str	r4, [sp, #44]
 114:FWLIB/src/stm32f4xx_hash_sha1.c ****   SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
  81              		.loc 1 114 3 is_stmt 1 view .LVU21
  82              		.loc 1 114 41 is_stmt 0 view .LVU22
  83 0024 2023     		movs	r3, #32
  84 0026 0C93     		str	r3, [sp, #48]
 115:FWLIB/src/stm32f4xx_hash_sha1.c ****   HASH_Init(&SHA1_HASH_InitStructure);
  85              		.loc 1 115 3 is_stmt 1 view .LVU23
  86 0028 0AA8     		add	r0, sp, #40
  87 002a FFF7FEFF 		bl	HASH_Init
  88              	.LVL5:
 116:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 117:FWLIB/src/stm32f4xx_hash_sha1.c ****   /* Configure the number of valid bits in last word of the data */
 118:FWLIB/src/stm32f4xx_hash_sha1.c ****   HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
  89              		.loc 1 118 3 view .LVU24
  90 002e BDF80600 		ldrh	r0, [sp, #6]
  91 0032 80B2     		uxth	r0, r0
  92 0034 FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
  93              	.LVL6:
 119:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 120:FWLIB/src/stm32f4xx_hash_sha1.c ****   /* Write the Input block in the IN FIFO */
 121:FWLIB/src/stm32f4xx_hash_sha1.c ****   for(i=0; i<Ilen; i+=4)
  94              		.loc 1 121 3 view .LVU25
  95              		.loc 1 121 3 is_stmt 0 view .LVU26
  96 0038 04E0     		b	.L2
  97              	.LVL7:
  98              	.L3:
 122:FWLIB/src/stm32f4xx_hash_sha1.c ****   {
 123:FWLIB/src/stm32f4xx_hash_sha1.c ****     HASH_DataIn(*(uint32_t*)inputaddr);
  99              		.loc 1 123 5 is_stmt 1 discriminator 3 view .LVU27
 100 003a 55F8040B 		ldr	r0, [r5], #4
 101              	.LVL8:
 102              		.loc 1 123 5 is_stmt 0 discriminator 3 view .LVU28
 103 003e FFF7FEFF 		bl	HASH_DataIn
 104              	.LVL9:
 124:FWLIB/src/stm32f4xx_hash_sha1.c ****     inputaddr+=4;
 105              		.loc 1 124 5 is_stmt 1 discriminator 3 view .LVU29
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//cccW0x9Y.s 			page 5


 121:FWLIB/src/stm32f4xx_hash_sha1.c ****   {
 106              		.loc 1 121 20 discriminator 3 view .LVU30
 121:FWLIB/src/stm32f4xx_hash_sha1.c ****   {
 107              		.loc 1 121 21 is_stmt 0 discriminator 3 view .LVU31
 108 0042 0434     		adds	r4, r4, #4
 109              	.LVL10:
 110              	.L2:
 121:FWLIB/src/stm32f4xx_hash_sha1.c ****   {
 111              		.loc 1 121 12 is_stmt 1 discriminator 1 view .LVU32
 121:FWLIB/src/stm32f4xx_hash_sha1.c ****   {
 112              		.loc 1 121 3 is_stmt 0 discriminator 1 view .LVU33
 113 0044 BC42     		cmp	r4, r7
 114 0046 F8D3     		bcc	.L3
 125:FWLIB/src/stm32f4xx_hash_sha1.c ****   }
 126:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 127:FWLIB/src/stm32f4xx_hash_sha1.c ****   /* Start the HASH processor */
 128:FWLIB/src/stm32f4xx_hash_sha1.c ****   HASH_StartDigest();
 115              		.loc 1 128 3 is_stmt 1 view .LVU34
 116 0048 FFF7FEFF 		bl	HASH_StartDigest
 117              	.LVL11:
 118              	.L5:
 129:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 130:FWLIB/src/stm32f4xx_hash_sha1.c ****   /* wait until the Busy flag is RESET */
 131:FWLIB/src/stm32f4xx_hash_sha1.c ****   do
 119              		.loc 1 131 3 discriminator 2 view .LVU35
 132:FWLIB/src/stm32f4xx_hash_sha1.c ****   {
 133:FWLIB/src/stm32f4xx_hash_sha1.c ****     busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 120              		.loc 1 133 5 discriminator 2 view .LVU36
 121              		.loc 1 133 18 is_stmt 0 discriminator 2 view .LVU37
 122 004c 0820     		movs	r0, #8
 123 004e FFF7FEFF 		bl	HASH_GetFlagStatus
 124              	.LVL12:
 134:FWLIB/src/stm32f4xx_hash_sha1.c ****     counter++;
 125              		.loc 1 134 5 is_stmt 1 discriminator 2 view .LVU38
 126              		.loc 1 134 12 is_stmt 0 discriminator 2 view .LVU39
 127 0052 009B     		ldr	r3, [sp]
 128 0054 0133     		adds	r3, r3, #1
 129 0056 0093     		str	r3, [sp]
 135:FWLIB/src/stm32f4xx_hash_sha1.c ****   }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 130              		.loc 1 135 10 is_stmt 1 discriminator 2 view .LVU40
 131              		.loc 1 135 20 is_stmt 0 discriminator 2 view .LVU41
 132 0058 009B     		ldr	r3, [sp]
 133              		.loc 1 135 3 discriminator 2 view .LVU42
 134 005a B3F5803F 		cmp	r3, #65536
 135 005e 01D0     		beq	.L4
 136              		.loc 1 135 41 discriminator 1 view .LVU43
 137 0060 0028     		cmp	r0, #0
 138 0062 F3D1     		bne	.L5
 139              	.L4:
 136:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 137:FWLIB/src/stm32f4xx_hash_sha1.c ****   if (busystatus != RESET)
 140              		.loc 1 137 3 is_stmt 1 view .LVU44
 141              		.loc 1 137 6 is_stmt 0 view .LVU45
 142 0064 10B1     		cbz	r0, .L9
 138:FWLIB/src/stm32f4xx_hash_sha1.c ****   {
 139:FWLIB/src/stm32f4xx_hash_sha1.c ****      status = ERROR;
 143              		.loc 1 139 13 view .LVU46
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//cccW0x9Y.s 			page 6


 144 0066 0020     		movs	r0, #0
 145              	.LVL13:
 146              	.L6:
 140:FWLIB/src/stm32f4xx_hash_sha1.c ****   }
 141:FWLIB/src/stm32f4xx_hash_sha1.c ****   else
 142:FWLIB/src/stm32f4xx_hash_sha1.c ****   {
 143:FWLIB/src/stm32f4xx_hash_sha1.c ****     /* Read the message digest */
 144:FWLIB/src/stm32f4xx_hash_sha1.c ****     HASH_GetDigest(&SHA1_MessageDigest);
 145:FWLIB/src/stm32f4xx_hash_sha1.c ****     *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 146:FWLIB/src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 147:FWLIB/src/stm32f4xx_hash_sha1.c ****     *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 148:FWLIB/src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 149:FWLIB/src/stm32f4xx_hash_sha1.c ****     *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 150:FWLIB/src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 151:FWLIB/src/stm32f4xx_hash_sha1.c ****     *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 152:FWLIB/src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 153:FWLIB/src/stm32f4xx_hash_sha1.c ****     *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 154:FWLIB/src/stm32f4xx_hash_sha1.c ****   }
 155:FWLIB/src/stm32f4xx_hash_sha1.c ****   return status;
 147              		.loc 1 155 3 is_stmt 1 view .LVU47
 156:FWLIB/src/stm32f4xx_hash_sha1.c **** }
 148              		.loc 1 156 1 is_stmt 0 view .LVU48
 149 0068 0FB0     		add	sp, sp, #60
 150              	.LCFI2:
 151              		.cfi_remember_state
 152              		.cfi_def_cfa_offset 20
 153              		@ sp needed
 154 006a F0BD     		pop	{r4, r5, r6, r7, pc}
 155              	.LVL14:
 156              	.L9:
 157              	.LCFI3:
 158              		.cfi_restore_state
 144:FWLIB/src/stm32f4xx_hash_sha1.c ****     *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 159              		.loc 1 144 5 is_stmt 1 view .LVU49
 160 006c 02A8     		add	r0, sp, #8
 161              	.LVL15:
 144:FWLIB/src/stm32f4xx_hash_sha1.c ****     *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 162              		.loc 1 144 5 is_stmt 0 view .LVU50
 163 006e FFF7FEFF 		bl	HASH_GetDigest
 164              	.LVL16:
 145:FWLIB/src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 165              		.loc 1 145 5 is_stmt 1 view .LVU51
 145:FWLIB/src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 166              		.loc 1 145 33 is_stmt 0 view .LVU52
 167 0072 029B     		ldr	r3, [sp, #8]
 168              	.LVL17:
 169              	.LBB22:
 170              	.LBI22:
 171              		.file 2 "F4_CORE/core_cmInstr.h"
   1:F4_CORE/core_cmInstr.h **** /**************************************************************************//**
   2:F4_CORE/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:F4_CORE/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:F4_CORE/core_cmInstr.h ****  * @version  V4.10
   5:F4_CORE/core_cmInstr.h ****  * @date     18. March 2015
   6:F4_CORE/core_cmInstr.h ****  *
   7:F4_CORE/core_cmInstr.h ****  * @note
   8:F4_CORE/core_cmInstr.h ****  *
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//cccW0x9Y.s 			page 7


   9:F4_CORE/core_cmInstr.h ****  ******************************************************************************/
  10:F4_CORE/core_cmInstr.h **** /* Copyright (c) 2009 - 2014 ARM LIMITED
  11:F4_CORE/core_cmInstr.h **** 
  12:F4_CORE/core_cmInstr.h ****    All rights reserved.
  13:F4_CORE/core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:F4_CORE/core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:F4_CORE/core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:F4_CORE/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:F4_CORE/core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:F4_CORE/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:F4_CORE/core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:F4_CORE/core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:F4_CORE/core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:F4_CORE/core_cmInstr.h ****      specific prior written permission.
  23:F4_CORE/core_cmInstr.h ****    *
  24:F4_CORE/core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:F4_CORE/core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:F4_CORE/core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:F4_CORE/core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:F4_CORE/core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:F4_CORE/core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:F4_CORE/core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:F4_CORE/core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:F4_CORE/core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:F4_CORE/core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:F4_CORE/core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:F4_CORE/core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:F4_CORE/core_cmInstr.h **** 
  37:F4_CORE/core_cmInstr.h **** 
  38:F4_CORE/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:F4_CORE/core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:F4_CORE/core_cmInstr.h **** 
  41:F4_CORE/core_cmInstr.h **** 
  42:F4_CORE/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:F4_CORE/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:F4_CORE/core_cmInstr.h ****   Access to dedicated instructions
  45:F4_CORE/core_cmInstr.h ****   @{
  46:F4_CORE/core_cmInstr.h **** */
  47:F4_CORE/core_cmInstr.h **** 
  48:F4_CORE/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:F4_CORE/core_cmInstr.h **** /* ARM armcc specific functions */
  50:F4_CORE/core_cmInstr.h **** 
  51:F4_CORE/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:F4_CORE/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:F4_CORE/core_cmInstr.h **** #endif
  54:F4_CORE/core_cmInstr.h **** 
  55:F4_CORE/core_cmInstr.h **** 
  56:F4_CORE/core_cmInstr.h **** /** \brief  No Operation
  57:F4_CORE/core_cmInstr.h **** 
  58:F4_CORE/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:F4_CORE/core_cmInstr.h ****  */
  60:F4_CORE/core_cmInstr.h **** #define __NOP                             __nop
  61:F4_CORE/core_cmInstr.h **** 
  62:F4_CORE/core_cmInstr.h **** 
  63:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:F4_CORE/core_cmInstr.h **** 
  65:F4_CORE/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//cccW0x9Y.s 			page 8


  66:F4_CORE/core_cmInstr.h ****     until one of a number of events occurs.
  67:F4_CORE/core_cmInstr.h ****  */
  68:F4_CORE/core_cmInstr.h **** #define __WFI                             __wfi
  69:F4_CORE/core_cmInstr.h **** 
  70:F4_CORE/core_cmInstr.h **** 
  71:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Event
  72:F4_CORE/core_cmInstr.h **** 
  73:F4_CORE/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:F4_CORE/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:F4_CORE/core_cmInstr.h ****  */
  76:F4_CORE/core_cmInstr.h **** #define __WFE                             __wfe
  77:F4_CORE/core_cmInstr.h **** 
  78:F4_CORE/core_cmInstr.h **** 
  79:F4_CORE/core_cmInstr.h **** /** \brief  Send Event
  80:F4_CORE/core_cmInstr.h **** 
  81:F4_CORE/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:F4_CORE/core_cmInstr.h ****  */
  83:F4_CORE/core_cmInstr.h **** #define __SEV                             __sev
  84:F4_CORE/core_cmInstr.h **** 
  85:F4_CORE/core_cmInstr.h **** 
  86:F4_CORE/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:F4_CORE/core_cmInstr.h **** 
  88:F4_CORE/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:F4_CORE/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:F4_CORE/core_cmInstr.h ****     memory, after the instruction has been completed.
  91:F4_CORE/core_cmInstr.h ****  */
  92:F4_CORE/core_cmInstr.h **** #define __ISB() do {\
  93:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
  94:F4_CORE/core_cmInstr.h ****                    __isb(0xF);\
  95:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
  96:F4_CORE/core_cmInstr.h ****                 } while (0)
  97:F4_CORE/core_cmInstr.h **** 
  98:F4_CORE/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  99:F4_CORE/core_cmInstr.h **** 
 100:F4_CORE/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 101:F4_CORE/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 102:F4_CORE/core_cmInstr.h ****  */
 103:F4_CORE/core_cmInstr.h **** #define __DSB() do {\
 104:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 105:F4_CORE/core_cmInstr.h ****                    __dsb(0xF);\
 106:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 107:F4_CORE/core_cmInstr.h ****                 } while (0)
 108:F4_CORE/core_cmInstr.h **** 
 109:F4_CORE/core_cmInstr.h **** /** \brief  Data Memory Barrier
 110:F4_CORE/core_cmInstr.h **** 
 111:F4_CORE/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 112:F4_CORE/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 113:F4_CORE/core_cmInstr.h ****  */
 114:F4_CORE/core_cmInstr.h **** #define __DMB() do {\
 115:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 116:F4_CORE/core_cmInstr.h ****                    __dmb(0xF);\
 117:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 118:F4_CORE/core_cmInstr.h ****                 } while (0)
 119:F4_CORE/core_cmInstr.h **** 
 120:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 121:F4_CORE/core_cmInstr.h **** 
 122:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in integer value.
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//cccW0x9Y.s 			page 9


 123:F4_CORE/core_cmInstr.h **** 
 124:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 125:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 126:F4_CORE/core_cmInstr.h ****  */
 127:F4_CORE/core_cmInstr.h **** #define __REV                             __rev
 128:F4_CORE/core_cmInstr.h **** 
 129:F4_CORE/core_cmInstr.h **** 
 130:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 131:F4_CORE/core_cmInstr.h **** 
 132:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 133:F4_CORE/core_cmInstr.h **** 
 134:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 135:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 136:F4_CORE/core_cmInstr.h ****  */
 137:F4_CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 138:F4_CORE/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 139:F4_CORE/core_cmInstr.h **** {
 140:F4_CORE/core_cmInstr.h ****   rev16 r0, r0
 141:F4_CORE/core_cmInstr.h ****   bx lr
 142:F4_CORE/core_cmInstr.h **** }
 143:F4_CORE/core_cmInstr.h **** #endif
 144:F4_CORE/core_cmInstr.h **** 
 145:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 146:F4_CORE/core_cmInstr.h **** 
 147:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 148:F4_CORE/core_cmInstr.h **** 
 149:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 150:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 151:F4_CORE/core_cmInstr.h ****  */
 152:F4_CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 153:F4_CORE/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 154:F4_CORE/core_cmInstr.h **** {
 155:F4_CORE/core_cmInstr.h ****   revsh r0, r0
 156:F4_CORE/core_cmInstr.h ****   bx lr
 157:F4_CORE/core_cmInstr.h **** }
 158:F4_CORE/core_cmInstr.h **** #endif
 159:F4_CORE/core_cmInstr.h **** 
 160:F4_CORE/core_cmInstr.h **** 
 161:F4_CORE/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 162:F4_CORE/core_cmInstr.h **** 
 163:F4_CORE/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 164:F4_CORE/core_cmInstr.h **** 
 165:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to rotate
 166:F4_CORE/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 167:F4_CORE/core_cmInstr.h ****     \return               Rotated value
 168:F4_CORE/core_cmInstr.h ****  */
 169:F4_CORE/core_cmInstr.h **** #define __ROR                             __ror
 170:F4_CORE/core_cmInstr.h **** 
 171:F4_CORE/core_cmInstr.h **** 
 172:F4_CORE/core_cmInstr.h **** /** \brief  Breakpoint
 173:F4_CORE/core_cmInstr.h **** 
 174:F4_CORE/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 175:F4_CORE/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 176:F4_CORE/core_cmInstr.h **** 
 177:F4_CORE/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 178:F4_CORE/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 179:F4_CORE/core_cmInstr.h ****  */
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//cccW0x9Y.s 			page 10


 180:F4_CORE/core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 181:F4_CORE/core_cmInstr.h **** 
 182:F4_CORE/core_cmInstr.h **** 
 183:F4_CORE/core_cmInstr.h **** /** \brief  Reverse bit order of value
 184:F4_CORE/core_cmInstr.h **** 
 185:F4_CORE/core_cmInstr.h ****     This function reverses the bit order of the given value.
 186:F4_CORE/core_cmInstr.h **** 
 187:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 188:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 189:F4_CORE/core_cmInstr.h ****  */
 190:F4_CORE/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 191:F4_CORE/core_cmInstr.h ****   #define __RBIT                          __rbit
 192:F4_CORE/core_cmInstr.h **** #else
 193:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 194:F4_CORE/core_cmInstr.h **** {
 195:F4_CORE/core_cmInstr.h ****   uint32_t result;
 196:F4_CORE/core_cmInstr.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; // extra shift needed at end
 197:F4_CORE/core_cmInstr.h **** 
 198:F4_CORE/core_cmInstr.h ****   result = value;                      // r will be reversed bits of v; first get LSB of v
 199:F4_CORE/core_cmInstr.h ****   for (value >>= 1; value; value >>= 1)
 200:F4_CORE/core_cmInstr.h ****   {
 201:F4_CORE/core_cmInstr.h ****     result <<= 1;
 202:F4_CORE/core_cmInstr.h ****     result |= value & 1;
 203:F4_CORE/core_cmInstr.h ****     s--;
 204:F4_CORE/core_cmInstr.h ****   }
 205:F4_CORE/core_cmInstr.h ****   result <<= s;                       // shift when v's highest bits are zero
 206:F4_CORE/core_cmInstr.h ****   return(result);
 207:F4_CORE/core_cmInstr.h **** }
 208:F4_CORE/core_cmInstr.h **** #endif
 209:F4_CORE/core_cmInstr.h **** 
 210:F4_CORE/core_cmInstr.h **** 
 211:F4_CORE/core_cmInstr.h **** /** \brief  Count leading zeros
 212:F4_CORE/core_cmInstr.h **** 
 213:F4_CORE/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 214:F4_CORE/core_cmInstr.h **** 
 215:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 216:F4_CORE/core_cmInstr.h ****     \return             number of leading zeros in value
 217:F4_CORE/core_cmInstr.h ****  */
 218:F4_CORE/core_cmInstr.h **** #define __CLZ                             __clz
 219:F4_CORE/core_cmInstr.h **** 
 220:F4_CORE/core_cmInstr.h **** 
 221:F4_CORE/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 222:F4_CORE/core_cmInstr.h **** 
 223:F4_CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 224:F4_CORE/core_cmInstr.h **** 
 225:F4_CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 8 bit value.
 226:F4_CORE/core_cmInstr.h **** 
 227:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 228:F4_CORE/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 229:F4_CORE/core_cmInstr.h ****  */
 230:F4_CORE/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 231:F4_CORE/core_cmInstr.h **** 
 232:F4_CORE/core_cmInstr.h **** 
 233:F4_CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 234:F4_CORE/core_cmInstr.h **** 
 235:F4_CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 16 bit values.
 236:F4_CORE/core_cmInstr.h **** 
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//cccW0x9Y.s 			page 11


 237:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 238:F4_CORE/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 239:F4_CORE/core_cmInstr.h ****  */
 240:F4_CORE/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 241:F4_CORE/core_cmInstr.h **** 
 242:F4_CORE/core_cmInstr.h **** 
 243:F4_CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 244:F4_CORE/core_cmInstr.h **** 
 245:F4_CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 32 bit values.
 246:F4_CORE/core_cmInstr.h **** 
 247:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 248:F4_CORE/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 249:F4_CORE/core_cmInstr.h ****  */
 250:F4_CORE/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 251:F4_CORE/core_cmInstr.h **** 
 252:F4_CORE/core_cmInstr.h **** 
 253:F4_CORE/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 254:F4_CORE/core_cmInstr.h **** 
 255:F4_CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 8 bit values.
 256:F4_CORE/core_cmInstr.h **** 
 257:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 258:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 259:F4_CORE/core_cmInstr.h ****     \return          0  Function succeeded
 260:F4_CORE/core_cmInstr.h ****     \return          1  Function failed
 261:F4_CORE/core_cmInstr.h ****  */
 262:F4_CORE/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 263:F4_CORE/core_cmInstr.h **** 
 264:F4_CORE/core_cmInstr.h **** 
 265:F4_CORE/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 266:F4_CORE/core_cmInstr.h **** 
 267:F4_CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 16 bit values.
 268:F4_CORE/core_cmInstr.h **** 
 269:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 270:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 271:F4_CORE/core_cmInstr.h ****     \return          0  Function succeeded
 272:F4_CORE/core_cmInstr.h ****     \return          1  Function failed
 273:F4_CORE/core_cmInstr.h ****  */
 274:F4_CORE/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 275:F4_CORE/core_cmInstr.h **** 
 276:F4_CORE/core_cmInstr.h **** 
 277:F4_CORE/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 278:F4_CORE/core_cmInstr.h **** 
 279:F4_CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 32 bit values.
 280:F4_CORE/core_cmInstr.h **** 
 281:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 282:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 283:F4_CORE/core_cmInstr.h ****     \return          0  Function succeeded
 284:F4_CORE/core_cmInstr.h ****     \return          1  Function failed
 285:F4_CORE/core_cmInstr.h ****  */
 286:F4_CORE/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 287:F4_CORE/core_cmInstr.h **** 
 288:F4_CORE/core_cmInstr.h **** 
 289:F4_CORE/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 290:F4_CORE/core_cmInstr.h **** 
 291:F4_CORE/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 292:F4_CORE/core_cmInstr.h **** 
 293:F4_CORE/core_cmInstr.h ****  */
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//cccW0x9Y.s 			page 12


 294:F4_CORE/core_cmInstr.h **** #define __CLREX                           __clrex
 295:F4_CORE/core_cmInstr.h **** 
 296:F4_CORE/core_cmInstr.h **** 
 297:F4_CORE/core_cmInstr.h **** /** \brief  Signed Saturate
 298:F4_CORE/core_cmInstr.h **** 
 299:F4_CORE/core_cmInstr.h ****     This function saturates a signed value.
 300:F4_CORE/core_cmInstr.h **** 
 301:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 302:F4_CORE/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 303:F4_CORE/core_cmInstr.h ****     \return             Saturated value
 304:F4_CORE/core_cmInstr.h ****  */
 305:F4_CORE/core_cmInstr.h **** #define __SSAT                            __ssat
 306:F4_CORE/core_cmInstr.h **** 
 307:F4_CORE/core_cmInstr.h **** 
 308:F4_CORE/core_cmInstr.h **** /** \brief  Unsigned Saturate
 309:F4_CORE/core_cmInstr.h **** 
 310:F4_CORE/core_cmInstr.h ****     This function saturates an unsigned value.
 311:F4_CORE/core_cmInstr.h **** 
 312:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 313:F4_CORE/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 314:F4_CORE/core_cmInstr.h ****     \return             Saturated value
 315:F4_CORE/core_cmInstr.h ****  */
 316:F4_CORE/core_cmInstr.h **** #define __USAT                            __usat
 317:F4_CORE/core_cmInstr.h **** 
 318:F4_CORE/core_cmInstr.h **** 
 319:F4_CORE/core_cmInstr.h **** /** \brief  Rotate Right with Extend (32 bit)
 320:F4_CORE/core_cmInstr.h **** 
 321:F4_CORE/core_cmInstr.h ****     This function moves each bit of a bitstring right by one bit.
 322:F4_CORE/core_cmInstr.h ****     The carry input is shifted in at the left end of the bitstring.
 323:F4_CORE/core_cmInstr.h **** 
 324:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to rotate
 325:F4_CORE/core_cmInstr.h ****     \return               Rotated value
 326:F4_CORE/core_cmInstr.h ****  */
 327:F4_CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 328:F4_CORE/core_cmInstr.h **** __attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
 329:F4_CORE/core_cmInstr.h **** {
 330:F4_CORE/core_cmInstr.h ****   rrx r0, r0
 331:F4_CORE/core_cmInstr.h ****   bx lr
 332:F4_CORE/core_cmInstr.h **** }
 333:F4_CORE/core_cmInstr.h **** #endif
 334:F4_CORE/core_cmInstr.h **** 
 335:F4_CORE/core_cmInstr.h **** 
 336:F4_CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (8 bit)
 337:F4_CORE/core_cmInstr.h **** 
 338:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 8 bit value.
 339:F4_CORE/core_cmInstr.h **** 
 340:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 341:F4_CORE/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 342:F4_CORE/core_cmInstr.h ****  */
 343:F4_CORE/core_cmInstr.h **** #define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
 344:F4_CORE/core_cmInstr.h **** 
 345:F4_CORE/core_cmInstr.h **** 
 346:F4_CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (16 bit)
 347:F4_CORE/core_cmInstr.h **** 
 348:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 16 bit values.
 349:F4_CORE/core_cmInstr.h **** 
 350:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//cccW0x9Y.s 			page 13


 351:F4_CORE/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 352:F4_CORE/core_cmInstr.h ****  */
 353:F4_CORE/core_cmInstr.h **** #define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
 354:F4_CORE/core_cmInstr.h **** 
 355:F4_CORE/core_cmInstr.h **** 
 356:F4_CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (32 bit)
 357:F4_CORE/core_cmInstr.h **** 
 358:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 32 bit values.
 359:F4_CORE/core_cmInstr.h **** 
 360:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 361:F4_CORE/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 362:F4_CORE/core_cmInstr.h ****  */
 363:F4_CORE/core_cmInstr.h **** #define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
 364:F4_CORE/core_cmInstr.h **** 
 365:F4_CORE/core_cmInstr.h **** 
 366:F4_CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (8 bit)
 367:F4_CORE/core_cmInstr.h **** 
 368:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 8 bit values.
 369:F4_CORE/core_cmInstr.h **** 
 370:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 371:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 372:F4_CORE/core_cmInstr.h ****  */
 373:F4_CORE/core_cmInstr.h **** #define __STRBT(value, ptr)               __strt(value, ptr)
 374:F4_CORE/core_cmInstr.h **** 
 375:F4_CORE/core_cmInstr.h **** 
 376:F4_CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (16 bit)
 377:F4_CORE/core_cmInstr.h **** 
 378:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 16 bit values.
 379:F4_CORE/core_cmInstr.h **** 
 380:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 381:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 382:F4_CORE/core_cmInstr.h ****  */
 383:F4_CORE/core_cmInstr.h **** #define __STRHT(value, ptr)               __strt(value, ptr)
 384:F4_CORE/core_cmInstr.h **** 
 385:F4_CORE/core_cmInstr.h **** 
 386:F4_CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (32 bit)
 387:F4_CORE/core_cmInstr.h **** 
 388:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 32 bit values.
 389:F4_CORE/core_cmInstr.h **** 
 390:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 391:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 392:F4_CORE/core_cmInstr.h ****  */
 393:F4_CORE/core_cmInstr.h **** #define __STRT(value, ptr)                __strt(value, ptr)
 394:F4_CORE/core_cmInstr.h **** 
 395:F4_CORE/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300) */
 396:F4_CORE/core_cmInstr.h **** 
 397:F4_CORE/core_cmInstr.h **** 
 398:F4_CORE/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 399:F4_CORE/core_cmInstr.h **** /* GNU gcc specific functions */
 400:F4_CORE/core_cmInstr.h **** 
 401:F4_CORE/core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 402:F4_CORE/core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 403:F4_CORE/core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 404:F4_CORE/core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 405:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 406:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 407:F4_CORE/core_cmInstr.h **** #else
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//cccW0x9Y.s 			page 14


 408:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 409:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 410:F4_CORE/core_cmInstr.h **** #endif
 411:F4_CORE/core_cmInstr.h **** 
 412:F4_CORE/core_cmInstr.h **** /** \brief  No Operation
 413:F4_CORE/core_cmInstr.h **** 
 414:F4_CORE/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 415:F4_CORE/core_cmInstr.h ****  */
 416:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 417:F4_CORE/core_cmInstr.h **** {
 418:F4_CORE/core_cmInstr.h ****   __ASM volatile ("nop");
 419:F4_CORE/core_cmInstr.h **** }
 420:F4_CORE/core_cmInstr.h **** 
 421:F4_CORE/core_cmInstr.h **** 
 422:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Interrupt
 423:F4_CORE/core_cmInstr.h **** 
 424:F4_CORE/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 425:F4_CORE/core_cmInstr.h ****     until one of a number of events occurs.
 426:F4_CORE/core_cmInstr.h ****  */
 427:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 428:F4_CORE/core_cmInstr.h **** {
 429:F4_CORE/core_cmInstr.h ****   __ASM volatile ("wfi");
 430:F4_CORE/core_cmInstr.h **** }
 431:F4_CORE/core_cmInstr.h **** 
 432:F4_CORE/core_cmInstr.h **** 
 433:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Event
 434:F4_CORE/core_cmInstr.h **** 
 435:F4_CORE/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 436:F4_CORE/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 437:F4_CORE/core_cmInstr.h ****  */
 438:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 439:F4_CORE/core_cmInstr.h **** {
 440:F4_CORE/core_cmInstr.h ****   __ASM volatile ("wfe");
 441:F4_CORE/core_cmInstr.h **** }
 442:F4_CORE/core_cmInstr.h **** 
 443:F4_CORE/core_cmInstr.h **** 
 444:F4_CORE/core_cmInstr.h **** /** \brief  Send Event
 445:F4_CORE/core_cmInstr.h **** 
 446:F4_CORE/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 447:F4_CORE/core_cmInstr.h ****  */
 448:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 449:F4_CORE/core_cmInstr.h **** {
 450:F4_CORE/core_cmInstr.h ****   __ASM volatile ("sev");
 451:F4_CORE/core_cmInstr.h **** }
 452:F4_CORE/core_cmInstr.h **** 
 453:F4_CORE/core_cmInstr.h **** 
 454:F4_CORE/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 455:F4_CORE/core_cmInstr.h **** 
 456:F4_CORE/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 457:F4_CORE/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 458:F4_CORE/core_cmInstr.h ****     memory, after the instruction has been completed.
 459:F4_CORE/core_cmInstr.h ****  */
 460:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 461:F4_CORE/core_cmInstr.h **** {
 462:F4_CORE/core_cmInstr.h ****   __ASM volatile ("isb 0xF":::"memory");
 463:F4_CORE/core_cmInstr.h **** }
 464:F4_CORE/core_cmInstr.h **** 
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//cccW0x9Y.s 			page 15


 465:F4_CORE/core_cmInstr.h **** 
 466:F4_CORE/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 467:F4_CORE/core_cmInstr.h **** 
 468:F4_CORE/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 469:F4_CORE/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 470:F4_CORE/core_cmInstr.h ****  */
 471:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 472:F4_CORE/core_cmInstr.h **** {
 473:F4_CORE/core_cmInstr.h ****   __ASM volatile ("dsb 0xF":::"memory");
 474:F4_CORE/core_cmInstr.h **** }
 475:F4_CORE/core_cmInstr.h **** 
 476:F4_CORE/core_cmInstr.h **** 
 477:F4_CORE/core_cmInstr.h **** /** \brief  Data Memory Barrier
 478:F4_CORE/core_cmInstr.h **** 
 479:F4_CORE/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 480:F4_CORE/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 481:F4_CORE/core_cmInstr.h ****  */
 482:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 483:F4_CORE/core_cmInstr.h **** {
 484:F4_CORE/core_cmInstr.h ****   __ASM volatile ("dmb 0xF":::"memory");
 485:F4_CORE/core_cmInstr.h **** }
 486:F4_CORE/core_cmInstr.h **** 
 487:F4_CORE/core_cmInstr.h **** 
 488:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 489:F4_CORE/core_cmInstr.h **** 
 490:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in integer value.
 491:F4_CORE/core_cmInstr.h **** 
 492:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 493:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 494:F4_CORE/core_cmInstr.h ****  */
 495:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 172              		.loc 2 495 57 is_stmt 1 view .LVU53
 173              	.LBB23:
 496:F4_CORE/core_cmInstr.h **** {
 497:F4_CORE/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 498:F4_CORE/core_cmInstr.h ****   return __builtin_bswap32(value);
 174              		.loc 2 498 3 view .LVU54
 175              		.loc 2 498 10 is_stmt 0 view .LVU55
 176 0074 1BBA     		rev	r3, r3
 177              	.LVL18:
 178              		.loc 2 498 10 view .LVU56
 179              	.LBE23:
 180              	.LBE22:
 145:FWLIB/src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 181              		.loc 1 145 31 view .LVU57
 182 0076 3360     		str	r3, [r6]
 146:FWLIB/src/stm32f4xx_hash_sha1.c ****     *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 183              		.loc 1 146 5 is_stmt 1 view .LVU58
 184              	.LVL19:
 147:FWLIB/src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 185              		.loc 1 147 5 view .LVU59
 147:FWLIB/src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 186              		.loc 1 147 33 is_stmt 0 view .LVU60
 187 0078 039B     		ldr	r3, [sp, #12]
 188              	.LVL20:
 189              	.LBB24:
 190              	.LBI24:
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//cccW0x9Y.s 			page 16


 495:F4_CORE/core_cmInstr.h **** {
 191              		.loc 2 495 57 is_stmt 1 view .LVU61
 192              	.LBB25:
 193              		.loc 2 498 3 view .LVU62
 194              		.loc 2 498 10 is_stmt 0 view .LVU63
 195 007a 1BBA     		rev	r3, r3
 196              	.LVL21:
 197              		.loc 2 498 10 view .LVU64
 198              	.LBE25:
 199              	.LBE24:
 147:FWLIB/src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 200              		.loc 1 147 31 view .LVU65
 201 007c 7360     		str	r3, [r6, #4]
 148:FWLIB/src/stm32f4xx_hash_sha1.c ****     *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 202              		.loc 1 148 5 is_stmt 1 view .LVU66
 203              	.LVL22:
 149:FWLIB/src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 204              		.loc 1 149 5 view .LVU67
 149:FWLIB/src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 205              		.loc 1 149 33 is_stmt 0 view .LVU68
 206 007e 049B     		ldr	r3, [sp, #16]
 207              	.LVL23:
 208              	.LBB26:
 209              	.LBI26:
 495:F4_CORE/core_cmInstr.h **** {
 210              		.loc 2 495 57 is_stmt 1 view .LVU69
 211              	.LBB27:
 212              		.loc 2 498 3 view .LVU70
 213              		.loc 2 498 10 is_stmt 0 view .LVU71
 214 0080 1BBA     		rev	r3, r3
 215              	.LVL24:
 216              		.loc 2 498 10 view .LVU72
 217              	.LBE27:
 218              	.LBE26:
 149:FWLIB/src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 219              		.loc 1 149 31 view .LVU73
 220 0082 B360     		str	r3, [r6, #8]
 150:FWLIB/src/stm32f4xx_hash_sha1.c ****     *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 221              		.loc 1 150 5 is_stmt 1 view .LVU74
 222              	.LVL25:
 151:FWLIB/src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 223              		.loc 1 151 5 view .LVU75
 151:FWLIB/src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 224              		.loc 1 151 33 is_stmt 0 view .LVU76
 225 0084 059B     		ldr	r3, [sp, #20]
 226              	.LVL26:
 227              	.LBB28:
 228              	.LBI28:
 495:F4_CORE/core_cmInstr.h **** {
 229              		.loc 2 495 57 is_stmt 1 view .LVU77
 230              	.LBB29:
 231              		.loc 2 498 3 view .LVU78
 232              		.loc 2 498 10 is_stmt 0 view .LVU79
 233 0086 1BBA     		rev	r3, r3
 234              	.LVL27:
 235              		.loc 2 498 10 view .LVU80
 236              	.LBE29:
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//cccW0x9Y.s 			page 17


 237              	.LBE28:
 151:FWLIB/src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 238              		.loc 1 151 31 view .LVU81
 239 0088 F360     		str	r3, [r6, #12]
 152:FWLIB/src/stm32f4xx_hash_sha1.c ****     *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 240              		.loc 1 152 5 is_stmt 1 view .LVU82
 241              	.LVL28:
 153:FWLIB/src/stm32f4xx_hash_sha1.c ****   }
 242              		.loc 1 153 5 view .LVU83
 153:FWLIB/src/stm32f4xx_hash_sha1.c ****   }
 243              		.loc 1 153 33 is_stmt 0 view .LVU84
 244 008a 069B     		ldr	r3, [sp, #24]
 245              	.LVL29:
 246              	.LBB30:
 247              	.LBI30:
 495:F4_CORE/core_cmInstr.h **** {
 248              		.loc 2 495 57 is_stmt 1 view .LVU85
 249              	.LBB31:
 250              		.loc 2 498 3 view .LVU86
 251              		.loc 2 498 10 is_stmt 0 view .LVU87
 252 008c 1BBA     		rev	r3, r3
 253              	.LVL30:
 254              		.loc 2 498 10 view .LVU88
 255              	.LBE31:
 256              	.LBE30:
 153:FWLIB/src/stm32f4xx_hash_sha1.c ****   }
 257              		.loc 1 153 31 view .LVU89
 258 008e 3361     		str	r3, [r6, #16]
 101:FWLIB/src/stm32f4xx_hash_sha1.c ****   uint32_t inputaddr  = (uint32_t)Input;
 259              		.loc 1 101 15 view .LVU90
 260 0090 0120     		movs	r0, #1
 261 0092 E9E7     		b	.L6
 262              		.cfi_endproc
 263              	.LFE123:
 265              		.section	.text.HMAC_SHA1,"ax",%progbits
 266              		.align	1
 267              		.global	HMAC_SHA1
 268              		.syntax unified
 269              		.thumb
 270              		.thumb_func
 271              		.fpu fpv4-sp-d16
 273              	HMAC_SHA1:
 274              	.LVL31:
 275              	.LFB124:
 157:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 158:FWLIB/src/stm32f4xx_hash_sha1.c **** /**
 159:FWLIB/src/stm32f4xx_hash_sha1.c ****   * @brief  Compute the HMAC SHA1 digest.
 160:FWLIB/src/stm32f4xx_hash_sha1.c ****   * @param  Key: pointer to the Key used for HMAC.
 161:FWLIB/src/stm32f4xx_hash_sha1.c ****   * @param  Keylen: length of the Key used for HMAC.  
 162:FWLIB/src/stm32f4xx_hash_sha1.c ****   * @param  Input: pointer to the Input buffer to be treated.
 163:FWLIB/src/stm32f4xx_hash_sha1.c ****   * @param  Ilen: length of the Input buffer.
 164:FWLIB/src/stm32f4xx_hash_sha1.c ****   * @param  Output: the returned digest
 165:FWLIB/src/stm32f4xx_hash_sha1.c ****   * @retval An ErrorStatus enumeration value:
 166:FWLIB/src/stm32f4xx_hash_sha1.c ****   *          - SUCCESS: digest computation done
 167:FWLIB/src/stm32f4xx_hash_sha1.c ****   *          - ERROR: digest computation failed
 168:FWLIB/src/stm32f4xx_hash_sha1.c ****   */
 169:FWLIB/src/stm32f4xx_hash_sha1.c **** ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//cccW0x9Y.s 			page 18


 170:FWLIB/src/stm32f4xx_hash_sha1.c ****                       uint32_t Ilen, uint8_t Output[20])
 171:FWLIB/src/stm32f4xx_hash_sha1.c **** {
 276              		.loc 1 171 1 is_stmt 1 view -0
 277              		.cfi_startproc
 278              		@ args = 4, pretend = 0, frame = 56
 279              		@ frame_needed = 0, uses_anonymous_args = 0
 280              		.loc 1 171 1 is_stmt 0 view .LVU92
 281 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 282              	.LCFI4:
 283              		.cfi_def_cfa_offset 28
 284              		.cfi_offset 4, -28
 285              		.cfi_offset 5, -24
 286              		.cfi_offset 6, -20
 287              		.cfi_offset 7, -16
 288              		.cfi_offset 8, -12
 289              		.cfi_offset 9, -8
 290              		.cfi_offset 14, -4
 291 0004 8FB0     		sub	sp, sp, #60
 292              	.LCFI5:
 293              		.cfi_def_cfa_offset 88
 294 0006 8146     		mov	r9, r0
 295 0008 0D46     		mov	r5, r1
 296 000a 1F46     		mov	r7, r3
 172:FWLIB/src/stm32f4xx_hash_sha1.c ****   HASH_InitTypeDef SHA1_HASH_InitStructure;
 297              		.loc 1 172 3 is_stmt 1 view .LVU93
 173:FWLIB/src/stm32f4xx_hash_sha1.c ****   HASH_MsgDigest SHA1_MessageDigest;
 298              		.loc 1 173 3 view .LVU94
 174:FWLIB/src/stm32f4xx_hash_sha1.c ****   __IO uint16_t nbvalidbitsdata = 0;
 299              		.loc 1 174 3 view .LVU95
 300              		.loc 1 174 17 is_stmt 0 view .LVU96
 301 000c 0024     		movs	r4, #0
 302 000e ADF80640 		strh	r4, [sp, #6]	@ movhi
 175:FWLIB/src/stm32f4xx_hash_sha1.c ****   __IO uint16_t nbvalidbitskey = 0;
 303              		.loc 1 175 3 is_stmt 1 view .LVU97
 304              		.loc 1 175 17 is_stmt 0 view .LVU98
 305 0012 ADF80440 		strh	r4, [sp, #4]	@ movhi
 176:FWLIB/src/stm32f4xx_hash_sha1.c ****   uint32_t i = 0;
 306              		.loc 1 176 3 is_stmt 1 view .LVU99
 307              	.LVL32:
 177:FWLIB/src/stm32f4xx_hash_sha1.c ****   __IO uint32_t counter = 0;
 308              		.loc 1 177 3 view .LVU100
 309              		.loc 1 177 17 is_stmt 0 view .LVU101
 310 0016 0094     		str	r4, [sp]
 178:FWLIB/src/stm32f4xx_hash_sha1.c ****   uint32_t busystatus = 0;
 311              		.loc 1 178 3 is_stmt 1 view .LVU102
 312              	.LVL33:
 179:FWLIB/src/stm32f4xx_hash_sha1.c ****   ErrorStatus status = SUCCESS;
 313              		.loc 1 179 3 view .LVU103
 180:FWLIB/src/stm32f4xx_hash_sha1.c ****   uint32_t keyaddr    = (uint32_t)Key;
 314              		.loc 1 180 3 view .LVU104
 315              		.loc 1 180 12 is_stmt 0 view .LVU105
 316 0018 8046     		mov	r8, r0
 317              	.LVL34:
 181:FWLIB/src/stm32f4xx_hash_sha1.c ****   uint32_t inputaddr  = (uint32_t)Input;
 318              		.loc 1 181 3 is_stmt 1 view .LVU106
 319              		.loc 1 181 12 is_stmt 0 view .LVU107
 320 001a 1646     		mov	r6, r2
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//cccW0x9Y.s 			page 19


 321              	.LVL35:
 182:FWLIB/src/stm32f4xx_hash_sha1.c ****   uint32_t outputaddr = (uint32_t)Output;
 322              		.loc 1 182 3 is_stmt 1 view .LVU108
 183:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 184:FWLIB/src/stm32f4xx_hash_sha1.c ****   /* Number of valid bits in last word of the Input data */
 185:FWLIB/src/stm32f4xx_hash_sha1.c ****   nbvalidbitsdata = 8 * (Ilen % 4);
 323              		.loc 1 185 3 view .LVU109
 324              		.loc 1 185 19 is_stmt 0 view .LVU110
 325 001c 03F00303 		and	r3, r3, #3
 326              	.LVL36:
 327              		.loc 1 185 19 view .LVU111
 328 0020 DB00     		lsls	r3, r3, #3
 329 0022 ADF80630 		strh	r3, [sp, #6]	@ movhi
 186:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 187:FWLIB/src/stm32f4xx_hash_sha1.c ****   /* Number of valid bits in last word of the Key */
 188:FWLIB/src/stm32f4xx_hash_sha1.c ****   nbvalidbitskey = 8 * (Keylen % 4);
 330              		.loc 1 188 3 is_stmt 1 view .LVU112
 331              		.loc 1 188 18 is_stmt 0 view .LVU113
 332 0026 01F00303 		and	r3, r1, #3
 333 002a DB00     		lsls	r3, r3, #3
 334 002c ADF80430 		strh	r3, [sp, #4]	@ movhi
 189:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 190:FWLIB/src/stm32f4xx_hash_sha1.c ****   /* HASH peripheral initialization */
 191:FWLIB/src/stm32f4xx_hash_sha1.c ****   HASH_DeInit();
 335              		.loc 1 191 3 is_stmt 1 view .LVU114
 336 0030 FFF7FEFF 		bl	HASH_DeInit
 337              	.LVL37:
 192:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 193:FWLIB/src/stm32f4xx_hash_sha1.c ****   /* HASH Configuration */
 194:FWLIB/src/stm32f4xx_hash_sha1.c ****   SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 338              		.loc 1 194 3 view .LVU115
 339              		.loc 1 194 46 is_stmt 0 view .LVU116
 340 0034 0A94     		str	r4, [sp, #40]
 195:FWLIB/src/stm32f4xx_hash_sha1.c ****   SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 341              		.loc 1 195 3 is_stmt 1 view .LVU117
 342              		.loc 1 195 41 is_stmt 0 view .LVU118
 343 0036 4023     		movs	r3, #64
 344 0038 0B93     		str	r3, [sp, #44]
 196:FWLIB/src/stm32f4xx_hash_sha1.c ****   SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 345              		.loc 1 196 3 is_stmt 1 view .LVU119
 346              		.loc 1 196 41 is_stmt 0 view .LVU120
 347 003a 2023     		movs	r3, #32
 348 003c 0C93     		str	r3, [sp, #48]
 197:FWLIB/src/stm32f4xx_hash_sha1.c ****   if(Keylen > 64)
 349              		.loc 1 197 3 is_stmt 1 view .LVU121
 350              		.loc 1 197 5 is_stmt 0 view .LVU122
 351 003e 402D     		cmp	r5, #64
 352 0040 0CD9     		bls	.L11
 198:FWLIB/src/stm32f4xx_hash_sha1.c ****   {
 199:FWLIB/src/stm32f4xx_hash_sha1.c ****     /* HMAC long Key */
 200:FWLIB/src/stm32f4xx_hash_sha1.c ****     SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 353              		.loc 1 200 5 is_stmt 1 view .LVU123
 354              		.loc 1 200 46 is_stmt 0 view .LVU124
 355 0042 4FF48033 		mov	r3, #65536
 356 0046 0D93     		str	r3, [sp, #52]
 357              	.L12:
 201:FWLIB/src/stm32f4xx_hash_sha1.c ****   }
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//cccW0x9Y.s 			page 20


 202:FWLIB/src/stm32f4xx_hash_sha1.c ****   else
 203:FWLIB/src/stm32f4xx_hash_sha1.c ****   {
 204:FWLIB/src/stm32f4xx_hash_sha1.c ****     /* HMAC short Key */
 205:FWLIB/src/stm32f4xx_hash_sha1.c ****     SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 206:FWLIB/src/stm32f4xx_hash_sha1.c ****   }
 207:FWLIB/src/stm32f4xx_hash_sha1.c ****   HASH_Init(&SHA1_HASH_InitStructure);
 358              		.loc 1 207 3 is_stmt 1 view .LVU125
 359 0048 0AA8     		add	r0, sp, #40
 360 004a FFF7FEFF 		bl	HASH_Init
 361              	.LVL38:
 208:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 209:FWLIB/src/stm32f4xx_hash_sha1.c ****   /* Configure the number of valid bits in last word of the Key */
 210:FWLIB/src/stm32f4xx_hash_sha1.c ****   HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 362              		.loc 1 210 3 view .LVU126
 363 004e BDF80400 		ldrh	r0, [sp, #4]
 364 0052 80B2     		uxth	r0, r0
 365 0054 FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 366              	.LVL39:
 211:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 212:FWLIB/src/stm32f4xx_hash_sha1.c ****   /* Write the Key */
 213:FWLIB/src/stm32f4xx_hash_sha1.c ****   for(i=0; i<Keylen; i+=4)
 367              		.loc 1 213 3 view .LVU127
 368              		.loc 1 213 8 is_stmt 0 view .LVU128
 369 0058 0024     		movs	r4, #0
 370              		.loc 1 213 3 view .LVU129
 371 005a 07E0     		b	.L13
 372              	.L11:
 205:FWLIB/src/stm32f4xx_hash_sha1.c ****   }
 373              		.loc 1 205 5 is_stmt 1 view .LVU130
 205:FWLIB/src/stm32f4xx_hash_sha1.c ****   }
 374              		.loc 1 205 46 is_stmt 0 view .LVU131
 375 005c 0023     		movs	r3, #0
 376 005e 0D93     		str	r3, [sp, #52]
 377 0060 F2E7     		b	.L12
 378              	.LVL40:
 379              	.L14:
 214:FWLIB/src/stm32f4xx_hash_sha1.c ****   {
 215:FWLIB/src/stm32f4xx_hash_sha1.c ****     HASH_DataIn(*(uint32_t*)keyaddr);
 380              		.loc 1 215 5 is_stmt 1 discriminator 3 view .LVU132
 381 0062 59F8040B 		ldr	r0, [r9], #4
 382              	.LVL41:
 383              		.loc 1 215 5 is_stmt 0 discriminator 3 view .LVU133
 384 0066 FFF7FEFF 		bl	HASH_DataIn
 385              	.LVL42:
 216:FWLIB/src/stm32f4xx_hash_sha1.c ****     keyaddr+=4;
 386              		.loc 1 216 5 is_stmt 1 discriminator 3 view .LVU134
 213:FWLIB/src/stm32f4xx_hash_sha1.c ****   {
 387              		.loc 1 213 22 discriminator 3 view .LVU135
 213:FWLIB/src/stm32f4xx_hash_sha1.c ****   {
 388              		.loc 1 213 23 is_stmt 0 discriminator 3 view .LVU136
 389 006a 0434     		adds	r4, r4, #4
 390              	.LVL43:
 391              	.L13:
 213:FWLIB/src/stm32f4xx_hash_sha1.c ****   {
 392              		.loc 1 213 12 is_stmt 1 discriminator 1 view .LVU137
 213:FWLIB/src/stm32f4xx_hash_sha1.c ****   {
 393              		.loc 1 213 3 is_stmt 0 discriminator 1 view .LVU138
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//cccW0x9Y.s 			page 21


 394 006c AC42     		cmp	r4, r5
 395 006e F8D3     		bcc	.L14
 217:FWLIB/src/stm32f4xx_hash_sha1.c ****   }
 218:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 219:FWLIB/src/stm32f4xx_hash_sha1.c ****   /* Start the HASH processor */
 220:FWLIB/src/stm32f4xx_hash_sha1.c ****   HASH_StartDigest();
 396              		.loc 1 220 3 is_stmt 1 view .LVU139
 397 0070 FFF7FEFF 		bl	HASH_StartDigest
 398              	.LVL44:
 399              	.L16:
 221:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 222:FWLIB/src/stm32f4xx_hash_sha1.c ****   /* wait until the Busy flag is RESET */
 223:FWLIB/src/stm32f4xx_hash_sha1.c ****   do
 400              		.loc 1 223 3 discriminator 2 view .LVU140
 224:FWLIB/src/stm32f4xx_hash_sha1.c ****   {
 225:FWLIB/src/stm32f4xx_hash_sha1.c ****     busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 401              		.loc 1 225 5 discriminator 2 view .LVU141
 402              		.loc 1 225 18 is_stmt 0 discriminator 2 view .LVU142
 403 0074 0820     		movs	r0, #8
 404 0076 FFF7FEFF 		bl	HASH_GetFlagStatus
 405              	.LVL45:
 406              		.loc 1 225 16 discriminator 2 view .LVU143
 407 007a 8146     		mov	r9, r0
 408              	.LVL46:
 226:FWLIB/src/stm32f4xx_hash_sha1.c ****     counter++;
 409              		.loc 1 226 5 is_stmt 1 discriminator 2 view .LVU144
 410              		.loc 1 226 12 is_stmt 0 discriminator 2 view .LVU145
 411 007c 009C     		ldr	r4, [sp]
 412 007e 0134     		adds	r4, r4, #1
 413 0080 0094     		str	r4, [sp]
 227:FWLIB/src/stm32f4xx_hash_sha1.c ****   }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 414              		.loc 1 227 10 is_stmt 1 discriminator 2 view .LVU146
 415              		.loc 1 227 20 is_stmt 0 discriminator 2 view .LVU147
 416 0082 009B     		ldr	r3, [sp]
 417              		.loc 1 227 3 discriminator 2 view .LVU148
 418 0084 B3F5803F 		cmp	r3, #65536
 419 0088 01D0     		beq	.L15
 420              		.loc 1 227 41 discriminator 1 view .LVU149
 421 008a 0028     		cmp	r0, #0
 422 008c F2D1     		bne	.L16
 423              	.L15:
 228:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 229:FWLIB/src/stm32f4xx_hash_sha1.c ****   if (busystatus != RESET)
 424              		.loc 1 229 3 is_stmt 1 view .LVU150
 425              		.loc 1 229 6 is_stmt 0 view .LVU151
 426 008e B9F1000F 		cmp	r9, #0
 427 0092 03D0     		beq	.L30
 230:FWLIB/src/stm32f4xx_hash_sha1.c ****   {
 231:FWLIB/src/stm32f4xx_hash_sha1.c ****      status = ERROR;
 428              		.loc 1 231 13 view .LVU152
 429 0094 0020     		movs	r0, #0
 430              	.LVL47:
 431              	.L17:
 232:FWLIB/src/stm32f4xx_hash_sha1.c ****   }
 233:FWLIB/src/stm32f4xx_hash_sha1.c ****   else
 234:FWLIB/src/stm32f4xx_hash_sha1.c ****   {
 235:FWLIB/src/stm32f4xx_hash_sha1.c ****     /* Configure the number of valid bits in last word of the Input data */
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//cccW0x9Y.s 			page 22


 236:FWLIB/src/stm32f4xx_hash_sha1.c ****     HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 237:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 238:FWLIB/src/stm32f4xx_hash_sha1.c ****     /* Write the Input block in the IN FIFO */
 239:FWLIB/src/stm32f4xx_hash_sha1.c ****     for(i=0; i<Ilen; i+=4)
 240:FWLIB/src/stm32f4xx_hash_sha1.c ****     {
 241:FWLIB/src/stm32f4xx_hash_sha1.c ****       HASH_DataIn(*(uint32_t*)inputaddr);
 242:FWLIB/src/stm32f4xx_hash_sha1.c ****       inputaddr+=4;
 243:FWLIB/src/stm32f4xx_hash_sha1.c ****     }
 244:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 245:FWLIB/src/stm32f4xx_hash_sha1.c ****     /* Start the HASH processor */
 246:FWLIB/src/stm32f4xx_hash_sha1.c ****     HASH_StartDigest();
 247:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 248:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 249:FWLIB/src/stm32f4xx_hash_sha1.c ****     /* wait until the Busy flag is RESET */
 250:FWLIB/src/stm32f4xx_hash_sha1.c ****     counter =0;
 251:FWLIB/src/stm32f4xx_hash_sha1.c ****     do
 252:FWLIB/src/stm32f4xx_hash_sha1.c ****     {
 253:FWLIB/src/stm32f4xx_hash_sha1.c ****       busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 254:FWLIB/src/stm32f4xx_hash_sha1.c ****       counter++;
 255:FWLIB/src/stm32f4xx_hash_sha1.c ****     }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 256:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 257:FWLIB/src/stm32f4xx_hash_sha1.c ****     if (busystatus != RESET)
 258:FWLIB/src/stm32f4xx_hash_sha1.c ****     {
 259:FWLIB/src/stm32f4xx_hash_sha1.c ****       status = ERROR;
 260:FWLIB/src/stm32f4xx_hash_sha1.c ****     }
 261:FWLIB/src/stm32f4xx_hash_sha1.c ****     else
 262:FWLIB/src/stm32f4xx_hash_sha1.c ****     {  
 263:FWLIB/src/stm32f4xx_hash_sha1.c ****       /* Configure the number of valid bits in last word of the Key */
 264:FWLIB/src/stm32f4xx_hash_sha1.c ****       HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 265:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 266:FWLIB/src/stm32f4xx_hash_sha1.c ****       /* Write the Key */
 267:FWLIB/src/stm32f4xx_hash_sha1.c ****       keyaddr = (uint32_t)Key;
 268:FWLIB/src/stm32f4xx_hash_sha1.c ****       for(i=0; i<Keylen; i+=4)
 269:FWLIB/src/stm32f4xx_hash_sha1.c ****       {
 270:FWLIB/src/stm32f4xx_hash_sha1.c ****         HASH_DataIn(*(uint32_t*)keyaddr);
 271:FWLIB/src/stm32f4xx_hash_sha1.c ****         keyaddr+=4;
 272:FWLIB/src/stm32f4xx_hash_sha1.c ****       }
 273:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 274:FWLIB/src/stm32f4xx_hash_sha1.c ****       /* Start the HASH processor */
 275:FWLIB/src/stm32f4xx_hash_sha1.c ****       HASH_StartDigest();
 276:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 277:FWLIB/src/stm32f4xx_hash_sha1.c ****       /* wait until the Busy flag is RESET */
 278:FWLIB/src/stm32f4xx_hash_sha1.c ****       counter =0;
 279:FWLIB/src/stm32f4xx_hash_sha1.c ****       do
 280:FWLIB/src/stm32f4xx_hash_sha1.c ****       {
 281:FWLIB/src/stm32f4xx_hash_sha1.c ****         busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 282:FWLIB/src/stm32f4xx_hash_sha1.c ****         counter++;
 283:FWLIB/src/stm32f4xx_hash_sha1.c ****       }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 284:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 285:FWLIB/src/stm32f4xx_hash_sha1.c ****       if (busystatus != RESET)
 286:FWLIB/src/stm32f4xx_hash_sha1.c ****       {
 287:FWLIB/src/stm32f4xx_hash_sha1.c ****         status = ERROR;
 288:FWLIB/src/stm32f4xx_hash_sha1.c ****       }
 289:FWLIB/src/stm32f4xx_hash_sha1.c ****       else
 290:FWLIB/src/stm32f4xx_hash_sha1.c ****       {
 291:FWLIB/src/stm32f4xx_hash_sha1.c ****         /* Read the message digest */
 292:FWLIB/src/stm32f4xx_hash_sha1.c ****         HASH_GetDigest(&SHA1_MessageDigest);
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//cccW0x9Y.s 			page 23


 293:FWLIB/src/stm32f4xx_hash_sha1.c ****         *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 294:FWLIB/src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 295:FWLIB/src/stm32f4xx_hash_sha1.c ****         *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 296:FWLIB/src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 297:FWLIB/src/stm32f4xx_hash_sha1.c ****         *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 298:FWLIB/src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 299:FWLIB/src/stm32f4xx_hash_sha1.c ****         *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 300:FWLIB/src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 301:FWLIB/src/stm32f4xx_hash_sha1.c ****         *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 302:FWLIB/src/stm32f4xx_hash_sha1.c ****       }
 303:FWLIB/src/stm32f4xx_hash_sha1.c ****     }  
 304:FWLIB/src/stm32f4xx_hash_sha1.c ****   }
 305:FWLIB/src/stm32f4xx_hash_sha1.c ****   return status;  
 432              		.loc 1 305 3 is_stmt 1 view .LVU153
 306:FWLIB/src/stm32f4xx_hash_sha1.c **** }
 433              		.loc 1 306 1 is_stmt 0 view .LVU154
 434 0096 0FB0     		add	sp, sp, #60
 435              	.LCFI6:
 436              		.cfi_remember_state
 437              		.cfi_def_cfa_offset 28
 438              		@ sp needed
 439 0098 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 440              	.LVL48:
 441              	.L30:
 442              	.LCFI7:
 443              		.cfi_restore_state
 236:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 444              		.loc 1 236 5 is_stmt 1 view .LVU155
 445 009c BDF80600 		ldrh	r0, [sp, #6]
 446              	.LVL49:
 236:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 447              		.loc 1 236 5 is_stmt 0 view .LVU156
 448 00a0 80B2     		uxth	r0, r0
 449 00a2 FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 450              	.LVL50:
 239:FWLIB/src/stm32f4xx_hash_sha1.c ****     {
 451              		.loc 1 239 5 is_stmt 1 view .LVU157
 239:FWLIB/src/stm32f4xx_hash_sha1.c ****     {
 452              		.loc 1 239 5 is_stmt 0 view .LVU158
 453 00a6 05E0     		b	.L18
 454              	.LVL51:
 455              	.L19:
 241:FWLIB/src/stm32f4xx_hash_sha1.c ****       inputaddr+=4;
 456              		.loc 1 241 7 is_stmt 1 discriminator 3 view .LVU159
 457 00a8 56F8040B 		ldr	r0, [r6], #4
 458              	.LVL52:
 241:FWLIB/src/stm32f4xx_hash_sha1.c ****       inputaddr+=4;
 459              		.loc 1 241 7 is_stmt 0 discriminator 3 view .LVU160
 460 00ac FFF7FEFF 		bl	HASH_DataIn
 461              	.LVL53:
 242:FWLIB/src/stm32f4xx_hash_sha1.c ****     }
 462              		.loc 1 242 7 is_stmt 1 discriminator 3 view .LVU161
 239:FWLIB/src/stm32f4xx_hash_sha1.c ****     {
 463              		.loc 1 239 22 discriminator 3 view .LVU162
 239:FWLIB/src/stm32f4xx_hash_sha1.c ****     {
 464              		.loc 1 239 23 is_stmt 0 discriminator 3 view .LVU163
 465 00b0 09F10409 		add	r9, r9, #4
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//cccW0x9Y.s 			page 24


 466              	.LVL54:
 467              	.L18:
 239:FWLIB/src/stm32f4xx_hash_sha1.c ****     {
 468              		.loc 1 239 14 is_stmt 1 discriminator 1 view .LVU164
 239:FWLIB/src/stm32f4xx_hash_sha1.c ****     {
 469              		.loc 1 239 5 is_stmt 0 discriminator 1 view .LVU165
 470 00b4 B945     		cmp	r9, r7
 471 00b6 F7D3     		bcc	.L19
 246:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 472              		.loc 1 246 5 is_stmt 1 view .LVU166
 473 00b8 FFF7FEFF 		bl	HASH_StartDigest
 474              	.LVL55:
 250:FWLIB/src/stm32f4xx_hash_sha1.c ****     do
 475              		.loc 1 250 5 view .LVU167
 250:FWLIB/src/stm32f4xx_hash_sha1.c ****     do
 476              		.loc 1 250 13 is_stmt 0 view .LVU168
 477 00bc 0023     		movs	r3, #0
 478 00be 0093     		str	r3, [sp]
 479              	.L21:
 251:FWLIB/src/stm32f4xx_hash_sha1.c ****     {
 480              		.loc 1 251 5 is_stmt 1 discriminator 2 view .LVU169
 253:FWLIB/src/stm32f4xx_hash_sha1.c ****       counter++;
 481              		.loc 1 253 7 discriminator 2 view .LVU170
 253:FWLIB/src/stm32f4xx_hash_sha1.c ****       counter++;
 482              		.loc 1 253 20 is_stmt 0 discriminator 2 view .LVU171
 483 00c0 0820     		movs	r0, #8
 484 00c2 FFF7FEFF 		bl	HASH_GetFlagStatus
 485              	.LVL56:
 253:FWLIB/src/stm32f4xx_hash_sha1.c ****       counter++;
 486              		.loc 1 253 18 discriminator 2 view .LVU172
 487 00c6 0446     		mov	r4, r0
 488              	.LVL57:
 254:FWLIB/src/stm32f4xx_hash_sha1.c ****     }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 489              		.loc 1 254 7 is_stmt 1 discriminator 2 view .LVU173
 254:FWLIB/src/stm32f4xx_hash_sha1.c ****     }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 490              		.loc 1 254 14 is_stmt 0 discriminator 2 view .LVU174
 491 00c8 009B     		ldr	r3, [sp]
 492 00ca 0133     		adds	r3, r3, #1
 493 00cc 0093     		str	r3, [sp]
 255:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 494              		.loc 1 255 12 is_stmt 1 discriminator 2 view .LVU175
 255:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 495              		.loc 1 255 22 is_stmt 0 discriminator 2 view .LVU176
 496 00ce 009B     		ldr	r3, [sp]
 255:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 497              		.loc 1 255 5 discriminator 2 view .LVU177
 498 00d0 B3F5803F 		cmp	r3, #65536
 499 00d4 01D0     		beq	.L20
 255:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 500              		.loc 1 255 43 discriminator 1 view .LVU178
 501 00d6 0028     		cmp	r0, #0
 502 00d8 F2D1     		bne	.L21
 503              	.L20:
 257:FWLIB/src/stm32f4xx_hash_sha1.c ****     {
 504              		.loc 1 257 5 is_stmt 1 view .LVU179
 257:FWLIB/src/stm32f4xx_hash_sha1.c ****     {
 505              		.loc 1 257 8 is_stmt 0 view .LVU180
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//cccW0x9Y.s 			page 25


 506 00da 0CB1     		cbz	r4, .L31
 259:FWLIB/src/stm32f4xx_hash_sha1.c ****     }
 507              		.loc 1 259 14 view .LVU181
 508 00dc 0020     		movs	r0, #0
 509              	.LVL58:
 259:FWLIB/src/stm32f4xx_hash_sha1.c ****     }
 510              		.loc 1 259 14 view .LVU182
 511 00de DAE7     		b	.L17
 512              	.LVL59:
 513              	.L31:
 264:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 514              		.loc 1 264 7 is_stmt 1 view .LVU183
 515 00e0 BDF80400 		ldrh	r0, [sp, #4]
 516              	.LVL60:
 264:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 517              		.loc 1 264 7 is_stmt 0 view .LVU184
 518 00e4 80B2     		uxth	r0, r0
 519 00e6 FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 520              	.LVL61:
 267:FWLIB/src/stm32f4xx_hash_sha1.c ****       for(i=0; i<Keylen; i+=4)
 521              		.loc 1 267 7 is_stmt 1 view .LVU185
 268:FWLIB/src/stm32f4xx_hash_sha1.c ****       {
 522              		.loc 1 268 7 view .LVU186
 268:FWLIB/src/stm32f4xx_hash_sha1.c ****       {
 523              		.loc 1 268 7 is_stmt 0 view .LVU187
 524 00ea 04E0     		b	.L22
 525              	.LVL62:
 526              	.L23:
 270:FWLIB/src/stm32f4xx_hash_sha1.c ****         keyaddr+=4;
 527              		.loc 1 270 9 is_stmt 1 discriminator 3 view .LVU188
 528 00ec 58F8040B 		ldr	r0, [r8], #4
 529              	.LVL63:
 270:FWLIB/src/stm32f4xx_hash_sha1.c ****         keyaddr+=4;
 530              		.loc 1 270 9 is_stmt 0 discriminator 3 view .LVU189
 531 00f0 FFF7FEFF 		bl	HASH_DataIn
 532              	.LVL64:
 271:FWLIB/src/stm32f4xx_hash_sha1.c ****       }
 533              		.loc 1 271 9 is_stmt 1 discriminator 3 view .LVU190
 268:FWLIB/src/stm32f4xx_hash_sha1.c ****       {
 534              		.loc 1 268 26 discriminator 3 view .LVU191
 268:FWLIB/src/stm32f4xx_hash_sha1.c ****       {
 535              		.loc 1 268 27 is_stmt 0 discriminator 3 view .LVU192
 536 00f4 0434     		adds	r4, r4, #4
 537              	.LVL65:
 538              	.L22:
 268:FWLIB/src/stm32f4xx_hash_sha1.c ****       {
 539              		.loc 1 268 16 is_stmt 1 discriminator 1 view .LVU193
 268:FWLIB/src/stm32f4xx_hash_sha1.c ****       {
 540              		.loc 1 268 7 is_stmt 0 discriminator 1 view .LVU194
 541 00f6 AC42     		cmp	r4, r5
 542 00f8 F8D3     		bcc	.L23
 275:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 543              		.loc 1 275 7 is_stmt 1 view .LVU195
 544 00fa FFF7FEFF 		bl	HASH_StartDigest
 545              	.LVL66:
 278:FWLIB/src/stm32f4xx_hash_sha1.c ****       do
 546              		.loc 1 278 7 view .LVU196
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//cccW0x9Y.s 			page 26


 278:FWLIB/src/stm32f4xx_hash_sha1.c ****       do
 547              		.loc 1 278 15 is_stmt 0 view .LVU197
 548 00fe 0023     		movs	r3, #0
 549 0100 0093     		str	r3, [sp]
 550              	.L25:
 279:FWLIB/src/stm32f4xx_hash_sha1.c ****       {
 551              		.loc 1 279 7 is_stmt 1 discriminator 2 view .LVU198
 281:FWLIB/src/stm32f4xx_hash_sha1.c ****         counter++;
 552              		.loc 1 281 9 discriminator 2 view .LVU199
 281:FWLIB/src/stm32f4xx_hash_sha1.c ****         counter++;
 553              		.loc 1 281 22 is_stmt 0 discriminator 2 view .LVU200
 554 0102 0820     		movs	r0, #8
 555 0104 FFF7FEFF 		bl	HASH_GetFlagStatus
 556              	.LVL67:
 282:FWLIB/src/stm32f4xx_hash_sha1.c ****       }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 557              		.loc 1 282 9 is_stmt 1 discriminator 2 view .LVU201
 282:FWLIB/src/stm32f4xx_hash_sha1.c ****       }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 558              		.loc 1 282 16 is_stmt 0 discriminator 2 view .LVU202
 559 0108 009B     		ldr	r3, [sp]
 560 010a 0133     		adds	r3, r3, #1
 561 010c 0093     		str	r3, [sp]
 283:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 562              		.loc 1 283 14 is_stmt 1 discriminator 2 view .LVU203
 283:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 563              		.loc 1 283 24 is_stmt 0 discriminator 2 view .LVU204
 564 010e 009B     		ldr	r3, [sp]
 283:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 565              		.loc 1 283 7 discriminator 2 view .LVU205
 566 0110 B3F5803F 		cmp	r3, #65536
 567 0114 01D0     		beq	.L24
 283:FWLIB/src/stm32f4xx_hash_sha1.c **** 
 568              		.loc 1 283 45 discriminator 1 view .LVU206
 569 0116 0028     		cmp	r0, #0
 570 0118 F3D1     		bne	.L25
 571              	.L24:
 285:FWLIB/src/stm32f4xx_hash_sha1.c ****       {
 572              		.loc 1 285 7 is_stmt 1 view .LVU207
 285:FWLIB/src/stm32f4xx_hash_sha1.c ****       {
 573              		.loc 1 285 10 is_stmt 0 view .LVU208
 574 011a 08B1     		cbz	r0, .L32
 287:FWLIB/src/stm32f4xx_hash_sha1.c ****       }
 575              		.loc 1 287 16 view .LVU209
 576 011c 0020     		movs	r0, #0
 577              	.LVL68:
 287:FWLIB/src/stm32f4xx_hash_sha1.c ****       }
 578              		.loc 1 287 16 view .LVU210
 579 011e BAE7     		b	.L17
 580              	.LVL69:
 581              	.L32:
 292:FWLIB/src/stm32f4xx_hash_sha1.c ****         *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 582              		.loc 1 292 9 is_stmt 1 view .LVU211
 583 0120 02A8     		add	r0, sp, #8
 584              	.LVL70:
 292:FWLIB/src/stm32f4xx_hash_sha1.c ****         *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 585              		.loc 1 292 9 is_stmt 0 view .LVU212
 586 0122 FFF7FEFF 		bl	HASH_GetDigest
 587              	.LVL71:
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//cccW0x9Y.s 			page 27


 293:FWLIB/src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 588              		.loc 1 293 9 is_stmt 1 view .LVU213
 293:FWLIB/src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 589              		.loc 1 293 37 is_stmt 0 view .LVU214
 590 0126 029B     		ldr	r3, [sp, #8]
 591              	.LVL72:
 592              	.LBB32:
 593              	.LBI32:
 495:F4_CORE/core_cmInstr.h **** {
 594              		.loc 2 495 57 is_stmt 1 view .LVU215
 595              	.LBB33:
 596              		.loc 2 498 3 view .LVU216
 597              		.loc 2 498 10 is_stmt 0 view .LVU217
 598 0128 1BBA     		rev	r3, r3
 599              	.LVL73:
 600              		.loc 2 498 10 view .LVU218
 601              	.LBE33:
 602              	.LBE32:
 293:FWLIB/src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 603              		.loc 1 293 35 view .LVU219
 604 012a 169A     		ldr	r2, [sp, #88]
 605 012c 1360     		str	r3, [r2]
 294:FWLIB/src/stm32f4xx_hash_sha1.c ****         *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 606              		.loc 1 294 9 is_stmt 1 view .LVU220
 607              	.LVL74:
 295:FWLIB/src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 608              		.loc 1 295 9 view .LVU221
 295:FWLIB/src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 609              		.loc 1 295 37 is_stmt 0 view .LVU222
 610 012e 039B     		ldr	r3, [sp, #12]
 611              	.LVL75:
 612              	.LBB34:
 613              	.LBI34:
 495:F4_CORE/core_cmInstr.h **** {
 614              		.loc 2 495 57 is_stmt 1 view .LVU223
 615              	.LBB35:
 616              		.loc 2 498 3 view .LVU224
 617              		.loc 2 498 10 is_stmt 0 view .LVU225
 618 0130 1BBA     		rev	r3, r3
 619              	.LVL76:
 620              		.loc 2 498 10 view .LVU226
 621              	.LBE35:
 622              	.LBE34:
 295:FWLIB/src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 623              		.loc 1 295 35 view .LVU227
 624 0132 5360     		str	r3, [r2, #4]
 296:FWLIB/src/stm32f4xx_hash_sha1.c ****         *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 625              		.loc 1 296 9 is_stmt 1 view .LVU228
 626              	.LVL77:
 297:FWLIB/src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 627              		.loc 1 297 9 view .LVU229
 297:FWLIB/src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 628              		.loc 1 297 37 is_stmt 0 view .LVU230
 629 0134 049B     		ldr	r3, [sp, #16]
 630              	.LVL78:
 631              	.LBB36:
 632              	.LBI36:
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//cccW0x9Y.s 			page 28


 495:F4_CORE/core_cmInstr.h **** {
 633              		.loc 2 495 57 is_stmt 1 view .LVU231
 634              	.LBB37:
 635              		.loc 2 498 3 view .LVU232
 636              		.loc 2 498 10 is_stmt 0 view .LVU233
 637 0136 1BBA     		rev	r3, r3
 638              	.LVL79:
 639              		.loc 2 498 10 view .LVU234
 640              	.LBE37:
 641              	.LBE36:
 297:FWLIB/src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 642              		.loc 1 297 35 view .LVU235
 643 0138 9360     		str	r3, [r2, #8]
 298:FWLIB/src/stm32f4xx_hash_sha1.c ****         *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 644              		.loc 1 298 9 is_stmt 1 view .LVU236
 645              	.LVL80:
 299:FWLIB/src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 646              		.loc 1 299 9 view .LVU237
 299:FWLIB/src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 647              		.loc 1 299 37 is_stmt 0 view .LVU238
 648 013a 059B     		ldr	r3, [sp, #20]
 649              	.LVL81:
 650              	.LBB38:
 651              	.LBI38:
 495:F4_CORE/core_cmInstr.h **** {
 652              		.loc 2 495 57 is_stmt 1 view .LVU239
 653              	.LBB39:
 654              		.loc 2 498 3 view .LVU240
 655              		.loc 2 498 10 is_stmt 0 view .LVU241
 656 013c 1BBA     		rev	r3, r3
 657              	.LVL82:
 658              		.loc 2 498 10 view .LVU242
 659              	.LBE39:
 660              	.LBE38:
 299:FWLIB/src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 661              		.loc 1 299 35 view .LVU243
 662 013e D360     		str	r3, [r2, #12]
 300:FWLIB/src/stm32f4xx_hash_sha1.c ****         *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 663              		.loc 1 300 9 is_stmt 1 view .LVU244
 664              	.LVL83:
 301:FWLIB/src/stm32f4xx_hash_sha1.c ****       }
 665              		.loc 1 301 9 view .LVU245
 301:FWLIB/src/stm32f4xx_hash_sha1.c ****       }
 666              		.loc 1 301 37 is_stmt 0 view .LVU246
 667 0140 069B     		ldr	r3, [sp, #24]
 668              	.LVL84:
 669              	.LBB40:
 670              	.LBI40:
 495:F4_CORE/core_cmInstr.h **** {
 671              		.loc 2 495 57 is_stmt 1 view .LVU247
 672              	.LBB41:
 673              		.loc 2 498 3 view .LVU248
 674              		.loc 2 498 10 is_stmt 0 view .LVU249
 675 0142 1BBA     		rev	r3, r3
 676              	.LVL85:
 677              		.loc 2 498 10 view .LVU250
 678              	.LBE41:
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//cccW0x9Y.s 			page 29


 679              	.LBE40:
 301:FWLIB/src/stm32f4xx_hash_sha1.c ****       }
 680              		.loc 1 301 35 view .LVU251
 681 0144 1361     		str	r3, [r2, #16]
 179:FWLIB/src/stm32f4xx_hash_sha1.c ****   uint32_t keyaddr    = (uint32_t)Key;
 682              		.loc 1 179 15 view .LVU252
 683 0146 0120     		movs	r0, #1
 684 0148 A5E7     		b	.L17
 685              		.cfi_endproc
 686              	.LFE124:
 688              		.text
 689              	.Letext0:
 690              		.file 3 "/usr/local/arm-none-eabi-gcc/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/mac
 691              		.file 4 "/usr/local/arm-none-eabi-gcc/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys
 692              		.file 5 "USER/stm32f4xx.h"
 693              		.file 6 "FWLIB/inc/stm32f4xx_hash.h"
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//cccW0x9Y.s 			page 30


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_hash_sha1.c
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//cccW0x9Y.s:18     .text.HASH_SHA1:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//cccW0x9Y.s:26     .text.HASH_SHA1:0000000000000000 HASH_SHA1
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//cccW0x9Y.s:266    .text.HMAC_SHA1:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//cccW0x9Y.s:273    .text.HMAC_SHA1:0000000000000000 HMAC_SHA1

UNDEFINED SYMBOLS
HASH_DeInit
HASH_Init
HASH_SetLastWordValidBitsNbr
HASH_DataIn
HASH_StartDigest
HASH_GetFlagStatus
HASH_GetDigest
