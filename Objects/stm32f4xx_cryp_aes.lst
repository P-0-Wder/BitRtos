ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"stm32f4xx_cryp_aes.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.CRYP_AES_ECB,"ax",%progbits
  22              		.align	2
  23              		.global	CRYP_AES_ECB
  24              		.thumb
  25              		.thumb_func
  27              	CRYP_AES_ECB:
  28              	.LFB123:
  29              		.file 1 "FWLIB/src/stm32f4xx_cryp_aes.c"
   1:FWLIB/src/stm32f4xx_cryp_aes.c **** /**
   2:FWLIB/src/stm32f4xx_cryp_aes.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @file    stm32f4xx_cryp_aes.c
   4:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @version V1.8.0
   6:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @date    04-November-2016
   7:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @brief   This file provides high level functions to encrypt and decrypt an 
   8:FWLIB/src/stm32f4xx_cryp_aes.c ****   *          input message using AES in ECB/CBC/CTR/GCM/CCM modes.
   9:FWLIB/src/stm32f4xx_cryp_aes.c ****   *          It uses the stm32f4xx_cryp.c/.h drivers to access the STM32F4xx CRYP
  10:FWLIB/src/stm32f4xx_cryp_aes.c ****   *          peripheral.
  11:FWLIB/src/stm32f4xx_cryp_aes.c ****   *          AES-ECB/CBC/CTR/GCM/CCM modes are available on STM32F437x Devices.
  12:FWLIB/src/stm32f4xx_cryp_aes.c ****   *          For STM32F41xx Devices, only AES-ECB/CBC/CTR modes are available.
  13:FWLIB/src/stm32f4xx_cryp_aes.c ****   *
  14:FWLIB/src/stm32f4xx_cryp_aes.c **** @verbatim
  15:FWLIB/src/stm32f4xx_cryp_aes.c ****  ===================================================================
  16:FWLIB/src/stm32f4xx_cryp_aes.c ****                   ##### How to use this driver #####
  17:FWLIB/src/stm32f4xx_cryp_aes.c ****  ===================================================================
  18:FWLIB/src/stm32f4xx_cryp_aes.c ****  [..]
  19:FWLIB/src/stm32f4xx_cryp_aes.c ****    (#) Enable The CRYP controller clock using 
  20:FWLIB/src/stm32f4xx_cryp_aes.c ****       RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_CRYP, ENABLE); function.
  21:FWLIB/src/stm32f4xx_cryp_aes.c ****   
  22:FWLIB/src/stm32f4xx_cryp_aes.c ****    (#) Encrypt and decrypt using AES in ECB Mode using CRYP_AES_ECB() function.
  23:FWLIB/src/stm32f4xx_cryp_aes.c ****   
  24:FWLIB/src/stm32f4xx_cryp_aes.c ****    (#) Encrypt and decrypt using AES in CBC Mode using CRYP_AES_CBC() function.
  25:FWLIB/src/stm32f4xx_cryp_aes.c ****   
  26:FWLIB/src/stm32f4xx_cryp_aes.c ****    (#) Encrypt and decrypt using AES in CTR Mode using CRYP_AES_CTR() function.
  27:FWLIB/src/stm32f4xx_cryp_aes.c **** 
  28:FWLIB/src/stm32f4xx_cryp_aes.c ****    (#) Encrypt and decrypt using AES in GCM Mode using CRYP_AES_GCM() function.
  29:FWLIB/src/stm32f4xx_cryp_aes.c ****    
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 2


  30:FWLIB/src/stm32f4xx_cryp_aes.c ****    (#) Encrypt and decrypt using AES in CCM Mode using CRYP_AES_CCM() function.
  31:FWLIB/src/stm32f4xx_cryp_aes.c ****      
  32:FWLIB/src/stm32f4xx_cryp_aes.c **** @endverbatim
  33:FWLIB/src/stm32f4xx_cryp_aes.c ****   *
  34:FWLIB/src/stm32f4xx_cryp_aes.c ****   ******************************************************************************
  35:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @attention
  36:FWLIB/src/stm32f4xx_cryp_aes.c ****   *
  37:FWLIB/src/stm32f4xx_cryp_aes.c ****   * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
  38:FWLIB/src/stm32f4xx_cryp_aes.c ****   *
  39:FWLIB/src/stm32f4xx_cryp_aes.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  40:FWLIB/src/stm32f4xx_cryp_aes.c ****   * You may not use this file except in compliance with the License.
  41:FWLIB/src/stm32f4xx_cryp_aes.c ****   * You may obtain a copy of the License at:
  42:FWLIB/src/stm32f4xx_cryp_aes.c ****   *
  43:FWLIB/src/stm32f4xx_cryp_aes.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  44:FWLIB/src/stm32f4xx_cryp_aes.c ****   *
  45:FWLIB/src/stm32f4xx_cryp_aes.c ****   * Unless required by applicable law or agreed to in writing, software 
  46:FWLIB/src/stm32f4xx_cryp_aes.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  47:FWLIB/src/stm32f4xx_cryp_aes.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  48:FWLIB/src/stm32f4xx_cryp_aes.c ****   * See the License for the specific language governing permissions and
  49:FWLIB/src/stm32f4xx_cryp_aes.c ****   * limitations under the License.
  50:FWLIB/src/stm32f4xx_cryp_aes.c ****   *
  51:FWLIB/src/stm32f4xx_cryp_aes.c ****   ******************************************************************************  
  52:FWLIB/src/stm32f4xx_cryp_aes.c ****   */
  53:FWLIB/src/stm32f4xx_cryp_aes.c **** 
  54:FWLIB/src/stm32f4xx_cryp_aes.c **** /* Includes ------------------------------------------------------------------*/
  55:FWLIB/src/stm32f4xx_cryp_aes.c **** #include "stm32f4xx_cryp.h"
  56:FWLIB/src/stm32f4xx_cryp_aes.c **** 
  57:FWLIB/src/stm32f4xx_cryp_aes.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  58:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @{
  59:FWLIB/src/stm32f4xx_cryp_aes.c ****   */
  60:FWLIB/src/stm32f4xx_cryp_aes.c **** 
  61:FWLIB/src/stm32f4xx_cryp_aes.c **** /** @defgroup CRYP 
  62:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @brief CRYP driver modules
  63:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @{
  64:FWLIB/src/stm32f4xx_cryp_aes.c ****   */
  65:FWLIB/src/stm32f4xx_cryp_aes.c **** 
  66:FWLIB/src/stm32f4xx_cryp_aes.c **** /* Private typedef -----------------------------------------------------------*/
  67:FWLIB/src/stm32f4xx_cryp_aes.c **** /* Private define ------------------------------------------------------------*/
  68:FWLIB/src/stm32f4xx_cryp_aes.c **** #define AESBUSY_TIMEOUT    ((uint32_t) 0x00010000)
  69:FWLIB/src/stm32f4xx_cryp_aes.c **** 
  70:FWLIB/src/stm32f4xx_cryp_aes.c **** /* Private macro -------------------------------------------------------------*/
  71:FWLIB/src/stm32f4xx_cryp_aes.c **** /* Private variables ---------------------------------------------------------*/
  72:FWLIB/src/stm32f4xx_cryp_aes.c **** /* Private function prototypes -----------------------------------------------*/
  73:FWLIB/src/stm32f4xx_cryp_aes.c **** /* Private functions ---------------------------------------------------------*/
  74:FWLIB/src/stm32f4xx_cryp_aes.c **** 
  75:FWLIB/src/stm32f4xx_cryp_aes.c **** /** @defgroup CRYP_Private_Functions
  76:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @{
  77:FWLIB/src/stm32f4xx_cryp_aes.c ****   */ 
  78:FWLIB/src/stm32f4xx_cryp_aes.c **** 
  79:FWLIB/src/stm32f4xx_cryp_aes.c **** /** @defgroup CRYP_Group6 High Level AES functions
  80:FWLIB/src/stm32f4xx_cryp_aes.c ****  *  @brief   High Level AES functions 
  81:FWLIB/src/stm32f4xx_cryp_aes.c ****  *
  82:FWLIB/src/stm32f4xx_cryp_aes.c **** @verbatim   
  83:FWLIB/src/stm32f4xx_cryp_aes.c ****  ===============================================================================
  84:FWLIB/src/stm32f4xx_cryp_aes.c ****                        ##### High Level AES functions #####
  85:FWLIB/src/stm32f4xx_cryp_aes.c ****  ===============================================================================
  86:FWLIB/src/stm32f4xx_cryp_aes.c **** 
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 3


  87:FWLIB/src/stm32f4xx_cryp_aes.c **** @endverbatim
  88:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @{
  89:FWLIB/src/stm32f4xx_cryp_aes.c ****   */
  90:FWLIB/src/stm32f4xx_cryp_aes.c **** 
  91:FWLIB/src/stm32f4xx_cryp_aes.c **** /**
  92:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @brief  Encrypt and decrypt using AES in ECB Mode
  93:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Mode: encryption or decryption Mode.
  94:FWLIB/src/stm32f4xx_cryp_aes.c ****   *          This parameter can be one of the following values:
  95:FWLIB/src/stm32f4xx_cryp_aes.c ****   *            @arg MODE_ENCRYPT: Encryption
  96:FWLIB/src/stm32f4xx_cryp_aes.c ****   *            @arg MODE_DECRYPT: Decryption
  97:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Key: Key used for AES algorithm.
  98:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Keysize: length of the Key, must be a 128, 192 or 256.
  99:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Input: pointer to the Input buffer.
 100:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 16.
 101:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Output: pointer to the returned buffer.
 102:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @retval An ErrorStatus enumeration value:
 103:FWLIB/src/stm32f4xx_cryp_aes.c ****   *          - SUCCESS: Operation done
 104:FWLIB/src/stm32f4xx_cryp_aes.c ****   *          - ERROR: Operation failed
 105:FWLIB/src/stm32f4xx_cryp_aes.c ****   */
 106:FWLIB/src/stm32f4xx_cryp_aes.c **** ErrorStatus CRYP_AES_ECB(uint8_t Mode, uint8_t* Key, uint16_t Keysize,
 107:FWLIB/src/stm32f4xx_cryp_aes.c ****                          uint8_t* Input, uint32_t Ilength, uint8_t* Output)
 108:FWLIB/src/stm32f4xx_cryp_aes.c **** {
  30              		.loc 1 108 0
  31              		.cfi_startproc
  32              		@ args = 8, pretend = 0, frame = 56
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              	.LVL0:
  35 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 28
  38              		.cfi_offset 4, -28
  39              		.cfi_offset 5, -24
  40              		.cfi_offset 6, -20
  41              		.cfi_offset 7, -16
  42              		.cfi_offset 8, -12
  43              		.cfi_offset 9, -8
  44              		.cfi_offset 14, -4
  45 0004 8FB0     		sub	sp, sp, #60
  46              	.LCFI1:
  47              		.cfi_def_cfa_offset 88
  48 0006 8146     		mov	r9, r0
  49 0008 0D46     		mov	r5, r1
  50 000a 1646     		mov	r6, r2
  51 000c DDF85880 		ldr	r8, [sp, #88]
 109:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_InitTypeDef AES_CRYP_InitStructure;
 110:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
 111:FWLIB/src/stm32f4xx_cryp_aes.c ****   __IO uint32_t counter = 0;
  52              		.loc 1 111 0
  53 0010 0022     		movs	r2, #0
  54              	.LVL1:
  55 0012 0192     		str	r2, [sp, #4]
  56              	.LVL2:
 112:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t busystatus = 0;
 113:FWLIB/src/stm32f4xx_cryp_aes.c ****   ErrorStatus status = SUCCESS;
 114:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 115:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t inputaddr  = (uint32_t)Input;
  57              		.loc 1 115 0
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 4


  58 0014 1C46     		mov	r4, r3
  59              	.LVL3:
 116:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t outputaddr = (uint32_t)Output;
  60              		.loc 1 116 0
  61 0016 179F     		ldr	r7, [sp, #92]
  62              	.LVL4:
 117:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t i = 0;
 118:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 119:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Crypto structures initialisation*/
 120:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
  63              		.loc 1 120 0
  64 0018 02A8     		add	r0, sp, #8
  65              	.LVL5:
  66 001a FFF7FEFF 		bl	CRYP_KeyStructInit
  67              	.LVL6:
 121:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 122:FWLIB/src/stm32f4xx_cryp_aes.c ****   switch(Keysize)
  68              		.loc 1 122 0
  69 001e C02E     		cmp	r6, #192
  70 0020 13D0     		beq	.L3
  71 0022 B6F5807F 		cmp	r6, #256
  72 0026 26D0     		beq	.L4
  73 0028 802E     		cmp	r6, #128
  74 002a 3FD1     		bne	.L2
 123:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 124:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 128:
 125:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
  75              		.loc 1 125 0
  76 002c 0023     		movs	r3, #0
  77 002e 0D93     		str	r3, [sp, #52]
 126:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
  78              		.loc 1 126 0
  79 0030 2B68     		ldr	r3, [r5]
  80              	.LVL7:
  81              	.LBB230:
  82              	.LBB231:
  83              		.file 2 "F4_CORE/core_cmInstr.h"
   1:F4_CORE/core_cmInstr.h **** /**************************************************************************//**
   2:F4_CORE/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:F4_CORE/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:F4_CORE/core_cmInstr.h ****  * @version  V4.10
   5:F4_CORE/core_cmInstr.h ****  * @date     18. March 2015
   6:F4_CORE/core_cmInstr.h ****  *
   7:F4_CORE/core_cmInstr.h ****  * @note
   8:F4_CORE/core_cmInstr.h ****  *
   9:F4_CORE/core_cmInstr.h ****  ******************************************************************************/
  10:F4_CORE/core_cmInstr.h **** /* Copyright (c) 2009 - 2014 ARM LIMITED
  11:F4_CORE/core_cmInstr.h **** 
  12:F4_CORE/core_cmInstr.h ****    All rights reserved.
  13:F4_CORE/core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:F4_CORE/core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:F4_CORE/core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:F4_CORE/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:F4_CORE/core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:F4_CORE/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:F4_CORE/core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:F4_CORE/core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 5


  21:F4_CORE/core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:F4_CORE/core_cmInstr.h ****      specific prior written permission.
  23:F4_CORE/core_cmInstr.h ****    *
  24:F4_CORE/core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:F4_CORE/core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:F4_CORE/core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:F4_CORE/core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:F4_CORE/core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:F4_CORE/core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:F4_CORE/core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:F4_CORE/core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:F4_CORE/core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:F4_CORE/core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:F4_CORE/core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:F4_CORE/core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:F4_CORE/core_cmInstr.h **** 
  37:F4_CORE/core_cmInstr.h **** 
  38:F4_CORE/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:F4_CORE/core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:F4_CORE/core_cmInstr.h **** 
  41:F4_CORE/core_cmInstr.h **** 
  42:F4_CORE/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:F4_CORE/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:F4_CORE/core_cmInstr.h ****   Access to dedicated instructions
  45:F4_CORE/core_cmInstr.h ****   @{
  46:F4_CORE/core_cmInstr.h **** */
  47:F4_CORE/core_cmInstr.h **** 
  48:F4_CORE/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:F4_CORE/core_cmInstr.h **** /* ARM armcc specific functions */
  50:F4_CORE/core_cmInstr.h **** 
  51:F4_CORE/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:F4_CORE/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:F4_CORE/core_cmInstr.h **** #endif
  54:F4_CORE/core_cmInstr.h **** 
  55:F4_CORE/core_cmInstr.h **** 
  56:F4_CORE/core_cmInstr.h **** /** \brief  No Operation
  57:F4_CORE/core_cmInstr.h **** 
  58:F4_CORE/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:F4_CORE/core_cmInstr.h ****  */
  60:F4_CORE/core_cmInstr.h **** #define __NOP                             __nop
  61:F4_CORE/core_cmInstr.h **** 
  62:F4_CORE/core_cmInstr.h **** 
  63:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:F4_CORE/core_cmInstr.h **** 
  65:F4_CORE/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:F4_CORE/core_cmInstr.h ****     until one of a number of events occurs.
  67:F4_CORE/core_cmInstr.h ****  */
  68:F4_CORE/core_cmInstr.h **** #define __WFI                             __wfi
  69:F4_CORE/core_cmInstr.h **** 
  70:F4_CORE/core_cmInstr.h **** 
  71:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Event
  72:F4_CORE/core_cmInstr.h **** 
  73:F4_CORE/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:F4_CORE/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:F4_CORE/core_cmInstr.h ****  */
  76:F4_CORE/core_cmInstr.h **** #define __WFE                             __wfe
  77:F4_CORE/core_cmInstr.h **** 
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 6


  78:F4_CORE/core_cmInstr.h **** 
  79:F4_CORE/core_cmInstr.h **** /** \brief  Send Event
  80:F4_CORE/core_cmInstr.h **** 
  81:F4_CORE/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:F4_CORE/core_cmInstr.h ****  */
  83:F4_CORE/core_cmInstr.h **** #define __SEV                             __sev
  84:F4_CORE/core_cmInstr.h **** 
  85:F4_CORE/core_cmInstr.h **** 
  86:F4_CORE/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:F4_CORE/core_cmInstr.h **** 
  88:F4_CORE/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:F4_CORE/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:F4_CORE/core_cmInstr.h ****     memory, after the instruction has been completed.
  91:F4_CORE/core_cmInstr.h ****  */
  92:F4_CORE/core_cmInstr.h **** #define __ISB() do {\
  93:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
  94:F4_CORE/core_cmInstr.h ****                    __isb(0xF);\
  95:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
  96:F4_CORE/core_cmInstr.h ****                 } while (0)
  97:F4_CORE/core_cmInstr.h **** 
  98:F4_CORE/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  99:F4_CORE/core_cmInstr.h **** 
 100:F4_CORE/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 101:F4_CORE/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 102:F4_CORE/core_cmInstr.h ****  */
 103:F4_CORE/core_cmInstr.h **** #define __DSB() do {\
 104:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 105:F4_CORE/core_cmInstr.h ****                    __dsb(0xF);\
 106:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 107:F4_CORE/core_cmInstr.h ****                 } while (0)
 108:F4_CORE/core_cmInstr.h **** 
 109:F4_CORE/core_cmInstr.h **** /** \brief  Data Memory Barrier
 110:F4_CORE/core_cmInstr.h **** 
 111:F4_CORE/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 112:F4_CORE/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 113:F4_CORE/core_cmInstr.h ****  */
 114:F4_CORE/core_cmInstr.h **** #define __DMB() do {\
 115:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 116:F4_CORE/core_cmInstr.h ****                    __dmb(0xF);\
 117:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 118:F4_CORE/core_cmInstr.h ****                 } while (0)
 119:F4_CORE/core_cmInstr.h **** 
 120:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 121:F4_CORE/core_cmInstr.h **** 
 122:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in integer value.
 123:F4_CORE/core_cmInstr.h **** 
 124:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 125:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 126:F4_CORE/core_cmInstr.h ****  */
 127:F4_CORE/core_cmInstr.h **** #define __REV                             __rev
 128:F4_CORE/core_cmInstr.h **** 
 129:F4_CORE/core_cmInstr.h **** 
 130:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 131:F4_CORE/core_cmInstr.h **** 
 132:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 133:F4_CORE/core_cmInstr.h **** 
 134:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 7


 135:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 136:F4_CORE/core_cmInstr.h ****  */
 137:F4_CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 138:F4_CORE/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 139:F4_CORE/core_cmInstr.h **** {
 140:F4_CORE/core_cmInstr.h ****   rev16 r0, r0
 141:F4_CORE/core_cmInstr.h ****   bx lr
 142:F4_CORE/core_cmInstr.h **** }
 143:F4_CORE/core_cmInstr.h **** #endif
 144:F4_CORE/core_cmInstr.h **** 
 145:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 146:F4_CORE/core_cmInstr.h **** 
 147:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 148:F4_CORE/core_cmInstr.h **** 
 149:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 150:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 151:F4_CORE/core_cmInstr.h ****  */
 152:F4_CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 153:F4_CORE/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 154:F4_CORE/core_cmInstr.h **** {
 155:F4_CORE/core_cmInstr.h ****   revsh r0, r0
 156:F4_CORE/core_cmInstr.h ****   bx lr
 157:F4_CORE/core_cmInstr.h **** }
 158:F4_CORE/core_cmInstr.h **** #endif
 159:F4_CORE/core_cmInstr.h **** 
 160:F4_CORE/core_cmInstr.h **** 
 161:F4_CORE/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 162:F4_CORE/core_cmInstr.h **** 
 163:F4_CORE/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 164:F4_CORE/core_cmInstr.h **** 
 165:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to rotate
 166:F4_CORE/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 167:F4_CORE/core_cmInstr.h ****     \return               Rotated value
 168:F4_CORE/core_cmInstr.h ****  */
 169:F4_CORE/core_cmInstr.h **** #define __ROR                             __ror
 170:F4_CORE/core_cmInstr.h **** 
 171:F4_CORE/core_cmInstr.h **** 
 172:F4_CORE/core_cmInstr.h **** /** \brief  Breakpoint
 173:F4_CORE/core_cmInstr.h **** 
 174:F4_CORE/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 175:F4_CORE/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 176:F4_CORE/core_cmInstr.h **** 
 177:F4_CORE/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 178:F4_CORE/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 179:F4_CORE/core_cmInstr.h ****  */
 180:F4_CORE/core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 181:F4_CORE/core_cmInstr.h **** 
 182:F4_CORE/core_cmInstr.h **** 
 183:F4_CORE/core_cmInstr.h **** /** \brief  Reverse bit order of value
 184:F4_CORE/core_cmInstr.h **** 
 185:F4_CORE/core_cmInstr.h ****     This function reverses the bit order of the given value.
 186:F4_CORE/core_cmInstr.h **** 
 187:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 188:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 189:F4_CORE/core_cmInstr.h ****  */
 190:F4_CORE/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 191:F4_CORE/core_cmInstr.h ****   #define __RBIT                          __rbit
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 8


 192:F4_CORE/core_cmInstr.h **** #else
 193:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 194:F4_CORE/core_cmInstr.h **** {
 195:F4_CORE/core_cmInstr.h ****   uint32_t result;
 196:F4_CORE/core_cmInstr.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; // extra shift needed at end
 197:F4_CORE/core_cmInstr.h **** 
 198:F4_CORE/core_cmInstr.h ****   result = value;                      // r will be reversed bits of v; first get LSB of v
 199:F4_CORE/core_cmInstr.h ****   for (value >>= 1; value; value >>= 1)
 200:F4_CORE/core_cmInstr.h ****   {
 201:F4_CORE/core_cmInstr.h ****     result <<= 1;
 202:F4_CORE/core_cmInstr.h ****     result |= value & 1;
 203:F4_CORE/core_cmInstr.h ****     s--;
 204:F4_CORE/core_cmInstr.h ****   }
 205:F4_CORE/core_cmInstr.h ****   result <<= s;                       // shift when v's highest bits are zero
 206:F4_CORE/core_cmInstr.h ****   return(result);
 207:F4_CORE/core_cmInstr.h **** }
 208:F4_CORE/core_cmInstr.h **** #endif
 209:F4_CORE/core_cmInstr.h **** 
 210:F4_CORE/core_cmInstr.h **** 
 211:F4_CORE/core_cmInstr.h **** /** \brief  Count leading zeros
 212:F4_CORE/core_cmInstr.h **** 
 213:F4_CORE/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 214:F4_CORE/core_cmInstr.h **** 
 215:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 216:F4_CORE/core_cmInstr.h ****     \return             number of leading zeros in value
 217:F4_CORE/core_cmInstr.h ****  */
 218:F4_CORE/core_cmInstr.h **** #define __CLZ                             __clz
 219:F4_CORE/core_cmInstr.h **** 
 220:F4_CORE/core_cmInstr.h **** 
 221:F4_CORE/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 222:F4_CORE/core_cmInstr.h **** 
 223:F4_CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 224:F4_CORE/core_cmInstr.h **** 
 225:F4_CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 8 bit value.
 226:F4_CORE/core_cmInstr.h **** 
 227:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 228:F4_CORE/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 229:F4_CORE/core_cmInstr.h ****  */
 230:F4_CORE/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 231:F4_CORE/core_cmInstr.h **** 
 232:F4_CORE/core_cmInstr.h **** 
 233:F4_CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 234:F4_CORE/core_cmInstr.h **** 
 235:F4_CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 16 bit values.
 236:F4_CORE/core_cmInstr.h **** 
 237:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 238:F4_CORE/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 239:F4_CORE/core_cmInstr.h ****  */
 240:F4_CORE/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 241:F4_CORE/core_cmInstr.h **** 
 242:F4_CORE/core_cmInstr.h **** 
 243:F4_CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 244:F4_CORE/core_cmInstr.h **** 
 245:F4_CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 32 bit values.
 246:F4_CORE/core_cmInstr.h **** 
 247:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 248:F4_CORE/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 9


 249:F4_CORE/core_cmInstr.h ****  */
 250:F4_CORE/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 251:F4_CORE/core_cmInstr.h **** 
 252:F4_CORE/core_cmInstr.h **** 
 253:F4_CORE/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 254:F4_CORE/core_cmInstr.h **** 
 255:F4_CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 8 bit values.
 256:F4_CORE/core_cmInstr.h **** 
 257:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 258:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 259:F4_CORE/core_cmInstr.h ****     \return          0  Function succeeded
 260:F4_CORE/core_cmInstr.h ****     \return          1  Function failed
 261:F4_CORE/core_cmInstr.h ****  */
 262:F4_CORE/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 263:F4_CORE/core_cmInstr.h **** 
 264:F4_CORE/core_cmInstr.h **** 
 265:F4_CORE/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 266:F4_CORE/core_cmInstr.h **** 
 267:F4_CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 16 bit values.
 268:F4_CORE/core_cmInstr.h **** 
 269:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 270:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 271:F4_CORE/core_cmInstr.h ****     \return          0  Function succeeded
 272:F4_CORE/core_cmInstr.h ****     \return          1  Function failed
 273:F4_CORE/core_cmInstr.h ****  */
 274:F4_CORE/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 275:F4_CORE/core_cmInstr.h **** 
 276:F4_CORE/core_cmInstr.h **** 
 277:F4_CORE/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 278:F4_CORE/core_cmInstr.h **** 
 279:F4_CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 32 bit values.
 280:F4_CORE/core_cmInstr.h **** 
 281:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 282:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 283:F4_CORE/core_cmInstr.h ****     \return          0  Function succeeded
 284:F4_CORE/core_cmInstr.h ****     \return          1  Function failed
 285:F4_CORE/core_cmInstr.h ****  */
 286:F4_CORE/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 287:F4_CORE/core_cmInstr.h **** 
 288:F4_CORE/core_cmInstr.h **** 
 289:F4_CORE/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 290:F4_CORE/core_cmInstr.h **** 
 291:F4_CORE/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 292:F4_CORE/core_cmInstr.h **** 
 293:F4_CORE/core_cmInstr.h ****  */
 294:F4_CORE/core_cmInstr.h **** #define __CLREX                           __clrex
 295:F4_CORE/core_cmInstr.h **** 
 296:F4_CORE/core_cmInstr.h **** 
 297:F4_CORE/core_cmInstr.h **** /** \brief  Signed Saturate
 298:F4_CORE/core_cmInstr.h **** 
 299:F4_CORE/core_cmInstr.h ****     This function saturates a signed value.
 300:F4_CORE/core_cmInstr.h **** 
 301:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 302:F4_CORE/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 303:F4_CORE/core_cmInstr.h ****     \return             Saturated value
 304:F4_CORE/core_cmInstr.h ****  */
 305:F4_CORE/core_cmInstr.h **** #define __SSAT                            __ssat
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 10


 306:F4_CORE/core_cmInstr.h **** 
 307:F4_CORE/core_cmInstr.h **** 
 308:F4_CORE/core_cmInstr.h **** /** \brief  Unsigned Saturate
 309:F4_CORE/core_cmInstr.h **** 
 310:F4_CORE/core_cmInstr.h ****     This function saturates an unsigned value.
 311:F4_CORE/core_cmInstr.h **** 
 312:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 313:F4_CORE/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 314:F4_CORE/core_cmInstr.h ****     \return             Saturated value
 315:F4_CORE/core_cmInstr.h ****  */
 316:F4_CORE/core_cmInstr.h **** #define __USAT                            __usat
 317:F4_CORE/core_cmInstr.h **** 
 318:F4_CORE/core_cmInstr.h **** 
 319:F4_CORE/core_cmInstr.h **** /** \brief  Rotate Right with Extend (32 bit)
 320:F4_CORE/core_cmInstr.h **** 
 321:F4_CORE/core_cmInstr.h ****     This function moves each bit of a bitstring right by one bit.
 322:F4_CORE/core_cmInstr.h ****     The carry input is shifted in at the left end of the bitstring.
 323:F4_CORE/core_cmInstr.h **** 
 324:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to rotate
 325:F4_CORE/core_cmInstr.h ****     \return               Rotated value
 326:F4_CORE/core_cmInstr.h ****  */
 327:F4_CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 328:F4_CORE/core_cmInstr.h **** __attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
 329:F4_CORE/core_cmInstr.h **** {
 330:F4_CORE/core_cmInstr.h ****   rrx r0, r0
 331:F4_CORE/core_cmInstr.h ****   bx lr
 332:F4_CORE/core_cmInstr.h **** }
 333:F4_CORE/core_cmInstr.h **** #endif
 334:F4_CORE/core_cmInstr.h **** 
 335:F4_CORE/core_cmInstr.h **** 
 336:F4_CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (8 bit)
 337:F4_CORE/core_cmInstr.h **** 
 338:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 8 bit value.
 339:F4_CORE/core_cmInstr.h **** 
 340:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 341:F4_CORE/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 342:F4_CORE/core_cmInstr.h ****  */
 343:F4_CORE/core_cmInstr.h **** #define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
 344:F4_CORE/core_cmInstr.h **** 
 345:F4_CORE/core_cmInstr.h **** 
 346:F4_CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (16 bit)
 347:F4_CORE/core_cmInstr.h **** 
 348:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 16 bit values.
 349:F4_CORE/core_cmInstr.h **** 
 350:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 351:F4_CORE/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 352:F4_CORE/core_cmInstr.h ****  */
 353:F4_CORE/core_cmInstr.h **** #define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
 354:F4_CORE/core_cmInstr.h **** 
 355:F4_CORE/core_cmInstr.h **** 
 356:F4_CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (32 bit)
 357:F4_CORE/core_cmInstr.h **** 
 358:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 32 bit values.
 359:F4_CORE/core_cmInstr.h **** 
 360:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 361:F4_CORE/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 362:F4_CORE/core_cmInstr.h ****  */
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 11


 363:F4_CORE/core_cmInstr.h **** #define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
 364:F4_CORE/core_cmInstr.h **** 
 365:F4_CORE/core_cmInstr.h **** 
 366:F4_CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (8 bit)
 367:F4_CORE/core_cmInstr.h **** 
 368:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 8 bit values.
 369:F4_CORE/core_cmInstr.h **** 
 370:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 371:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 372:F4_CORE/core_cmInstr.h ****  */
 373:F4_CORE/core_cmInstr.h **** #define __STRBT(value, ptr)               __strt(value, ptr)
 374:F4_CORE/core_cmInstr.h **** 
 375:F4_CORE/core_cmInstr.h **** 
 376:F4_CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (16 bit)
 377:F4_CORE/core_cmInstr.h **** 
 378:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 16 bit values.
 379:F4_CORE/core_cmInstr.h **** 
 380:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 381:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 382:F4_CORE/core_cmInstr.h ****  */
 383:F4_CORE/core_cmInstr.h **** #define __STRHT(value, ptr)               __strt(value, ptr)
 384:F4_CORE/core_cmInstr.h **** 
 385:F4_CORE/core_cmInstr.h **** 
 386:F4_CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (32 bit)
 387:F4_CORE/core_cmInstr.h **** 
 388:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 32 bit values.
 389:F4_CORE/core_cmInstr.h **** 
 390:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 391:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 392:F4_CORE/core_cmInstr.h ****  */
 393:F4_CORE/core_cmInstr.h **** #define __STRT(value, ptr)                __strt(value, ptr)
 394:F4_CORE/core_cmInstr.h **** 
 395:F4_CORE/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300) */
 396:F4_CORE/core_cmInstr.h **** 
 397:F4_CORE/core_cmInstr.h **** 
 398:F4_CORE/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 399:F4_CORE/core_cmInstr.h **** /* GNU gcc specific functions */
 400:F4_CORE/core_cmInstr.h **** 
 401:F4_CORE/core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 402:F4_CORE/core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 403:F4_CORE/core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 404:F4_CORE/core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 405:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 406:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 407:F4_CORE/core_cmInstr.h **** #else
 408:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 409:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 410:F4_CORE/core_cmInstr.h **** #endif
 411:F4_CORE/core_cmInstr.h **** 
 412:F4_CORE/core_cmInstr.h **** /** \brief  No Operation
 413:F4_CORE/core_cmInstr.h **** 
 414:F4_CORE/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 415:F4_CORE/core_cmInstr.h ****  */
 416:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 417:F4_CORE/core_cmInstr.h **** {
 418:F4_CORE/core_cmInstr.h ****   __ASM volatile ("nop");
 419:F4_CORE/core_cmInstr.h **** }
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 12


 420:F4_CORE/core_cmInstr.h **** 
 421:F4_CORE/core_cmInstr.h **** 
 422:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Interrupt
 423:F4_CORE/core_cmInstr.h **** 
 424:F4_CORE/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 425:F4_CORE/core_cmInstr.h ****     until one of a number of events occurs.
 426:F4_CORE/core_cmInstr.h ****  */
 427:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 428:F4_CORE/core_cmInstr.h **** {
 429:F4_CORE/core_cmInstr.h ****   __ASM volatile ("wfi");
 430:F4_CORE/core_cmInstr.h **** }
 431:F4_CORE/core_cmInstr.h **** 
 432:F4_CORE/core_cmInstr.h **** 
 433:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Event
 434:F4_CORE/core_cmInstr.h **** 
 435:F4_CORE/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 436:F4_CORE/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 437:F4_CORE/core_cmInstr.h ****  */
 438:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 439:F4_CORE/core_cmInstr.h **** {
 440:F4_CORE/core_cmInstr.h ****   __ASM volatile ("wfe");
 441:F4_CORE/core_cmInstr.h **** }
 442:F4_CORE/core_cmInstr.h **** 
 443:F4_CORE/core_cmInstr.h **** 
 444:F4_CORE/core_cmInstr.h **** /** \brief  Send Event
 445:F4_CORE/core_cmInstr.h **** 
 446:F4_CORE/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 447:F4_CORE/core_cmInstr.h ****  */
 448:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 449:F4_CORE/core_cmInstr.h **** {
 450:F4_CORE/core_cmInstr.h ****   __ASM volatile ("sev");
 451:F4_CORE/core_cmInstr.h **** }
 452:F4_CORE/core_cmInstr.h **** 
 453:F4_CORE/core_cmInstr.h **** 
 454:F4_CORE/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 455:F4_CORE/core_cmInstr.h **** 
 456:F4_CORE/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 457:F4_CORE/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 458:F4_CORE/core_cmInstr.h ****     memory, after the instruction has been completed.
 459:F4_CORE/core_cmInstr.h ****  */
 460:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 461:F4_CORE/core_cmInstr.h **** {
 462:F4_CORE/core_cmInstr.h ****   __ASM volatile ("isb 0xF":::"memory");
 463:F4_CORE/core_cmInstr.h **** }
 464:F4_CORE/core_cmInstr.h **** 
 465:F4_CORE/core_cmInstr.h **** 
 466:F4_CORE/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 467:F4_CORE/core_cmInstr.h **** 
 468:F4_CORE/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 469:F4_CORE/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 470:F4_CORE/core_cmInstr.h ****  */
 471:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 472:F4_CORE/core_cmInstr.h **** {
 473:F4_CORE/core_cmInstr.h ****   __ASM volatile ("dsb 0xF":::"memory");
 474:F4_CORE/core_cmInstr.h **** }
 475:F4_CORE/core_cmInstr.h **** 
 476:F4_CORE/core_cmInstr.h **** 
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 13


 477:F4_CORE/core_cmInstr.h **** /** \brief  Data Memory Barrier
 478:F4_CORE/core_cmInstr.h **** 
 479:F4_CORE/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 480:F4_CORE/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 481:F4_CORE/core_cmInstr.h ****  */
 482:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 483:F4_CORE/core_cmInstr.h **** {
 484:F4_CORE/core_cmInstr.h ****   __ASM volatile ("dmb 0xF":::"memory");
 485:F4_CORE/core_cmInstr.h **** }
 486:F4_CORE/core_cmInstr.h **** 
 487:F4_CORE/core_cmInstr.h **** 
 488:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 489:F4_CORE/core_cmInstr.h **** 
 490:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in integer value.
 491:F4_CORE/core_cmInstr.h **** 
 492:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 493:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 494:F4_CORE/core_cmInstr.h ****  */
 495:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 496:F4_CORE/core_cmInstr.h **** {
 497:F4_CORE/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 498:F4_CORE/core_cmInstr.h ****   return __builtin_bswap32(value);
  84              		.loc 2 498 0
  85 0032 1BBA     		rev	r3, r3
  86              	.LVL8:
  87              	.LBE231:
  88              	.LBE230:
  89              		.loc 1 126 0
  90 0034 0693     		str	r3, [sp, #24]
  91              	.LVL9:
 127:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 128:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
  92              		.loc 1 128 0
  93 0036 6B68     		ldr	r3, [r5, #4]
  94              	.LVL10:
  95              	.LBB232:
  96              	.LBB233:
  97              		.loc 2 498 0
  98 0038 1BBA     		rev	r3, r3
  99              	.LVL11:
 100              	.LBE233:
 101              	.LBE232:
 102              		.loc 1 128 0
 103 003a 0793     		str	r3, [sp, #28]
 104              	.LVL12:
 129:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 130:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 105              		.loc 1 130 0
 106 003c AB68     		ldr	r3, [r5, #8]
 107              	.LVL13:
 108              	.LBB234:
 109              	.LBB235:
 110              		.loc 2 498 0
 111 003e 1BBA     		rev	r3, r3
 112              	.LVL14:
 113              	.LBE235:
 114              	.LBE234:
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 14


 115              		.loc 1 130 0
 116 0040 0893     		str	r3, [sp, #32]
 117              	.LVL15:
 131:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 132:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 118              		.loc 1 132 0
 119 0042 EB68     		ldr	r3, [r5, #12]
 120              	.LVL16:
 121              	.LBB236:
 122              	.LBB237:
 123              		.loc 2 498 0
 124 0044 1BBA     		rev	r3, r3
 125              	.LVL17:
 126              	.LBE237:
 127              	.LBE236:
 128              		.loc 1 132 0
 129 0046 0993     		str	r3, [sp, #36]
 133:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 130              		.loc 1 133 0
 131 0048 30E0     		b	.L2
 132              	.LVL18:
 133              	.L3:
 134:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 192:
 135:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 134              		.loc 1 135 0
 135 004a 4FF48073 		mov	r3, #256
 136 004e 0D93     		str	r3, [sp, #52]
 136:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 137              		.loc 1 136 0
 138 0050 2B68     		ldr	r3, [r5]
 139              	.LVL19:
 140              	.LBB238:
 141              	.LBB239:
 142              		.loc 2 498 0
 143 0052 1BBA     		rev	r3, r3
 144              	.LVL20:
 145              	.LBE239:
 146              	.LBE238:
 147              		.loc 1 136 0
 148 0054 0493     		str	r3, [sp, #16]
 149              	.LVL21:
 137:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 138:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 150              		.loc 1 138 0
 151 0056 6B68     		ldr	r3, [r5, #4]
 152              	.LVL22:
 153              	.LBB240:
 154              	.LBB241:
 155              		.loc 2 498 0
 156 0058 1BBA     		rev	r3, r3
 157              	.LVL23:
 158              	.LBE241:
 159              	.LBE240:
 160              		.loc 1 138 0
 161 005a 0593     		str	r3, [sp, #20]
 162              	.LVL24:
 139:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 15


 140:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 163              		.loc 1 140 0
 164 005c AB68     		ldr	r3, [r5, #8]
 165              	.LVL25:
 166              	.LBB242:
 167              	.LBB243:
 168              		.loc 2 498 0
 169 005e 1BBA     		rev	r3, r3
 170              	.LVL26:
 171              	.LBE243:
 172              	.LBE242:
 173              		.loc 1 140 0
 174 0060 0693     		str	r3, [sp, #24]
 175              	.LVL27:
 141:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 142:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 176              		.loc 1 142 0
 177 0062 EB68     		ldr	r3, [r5, #12]
 178              	.LVL28:
 179              	.LBB244:
 180              	.LBB245:
 181              		.loc 2 498 0
 182 0064 1BBA     		rev	r3, r3
 183              	.LVL29:
 184              	.LBE245:
 185              	.LBE244:
 186              		.loc 1 142 0
 187 0066 0793     		str	r3, [sp, #28]
 188              	.LVL30:
 143:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 144:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 189              		.loc 1 144 0
 190 0068 2B69     		ldr	r3, [r5, #16]
 191              	.LVL31:
 192              	.LBB246:
 193              	.LBB247:
 194              		.loc 2 498 0
 195 006a 1BBA     		rev	r3, r3
 196              	.LVL32:
 197              	.LBE247:
 198              	.LBE246:
 199              		.loc 1 144 0
 200 006c 0893     		str	r3, [sp, #32]
 201              	.LVL33:
 145:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 146:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 202              		.loc 1 146 0
 203 006e 6B69     		ldr	r3, [r5, #20]
 204              	.LVL34:
 205              	.LBB248:
 206              	.LBB249:
 207              		.loc 2 498 0
 208 0070 1BBA     		rev	r3, r3
 209              	.LVL35:
 210              	.LBE249:
 211              	.LBE248:
 212              		.loc 1 146 0
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 16


 213 0072 0993     		str	r3, [sp, #36]
 147:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 214              		.loc 1 147 0
 215 0074 1AE0     		b	.L2
 216              	.LVL36:
 217              	.L4:
 148:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 256:
 149:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 218              		.loc 1 149 0
 219 0076 4FF40073 		mov	r3, #512
 220 007a 0D93     		str	r3, [sp, #52]
 150:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 221              		.loc 1 150 0
 222 007c 2B68     		ldr	r3, [r5]
 223              	.LVL37:
 224              	.LBB250:
 225              	.LBB251:
 226              		.loc 2 498 0
 227 007e 1BBA     		rev	r3, r3
 228              	.LVL38:
 229              	.LBE251:
 230              	.LBE250:
 231              		.loc 1 150 0
 232 0080 0293     		str	r3, [sp, #8]
 233              	.LVL39:
 151:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 152:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 234              		.loc 1 152 0
 235 0082 6B68     		ldr	r3, [r5, #4]
 236              	.LVL40:
 237              	.LBB252:
 238              	.LBB253:
 239              		.loc 2 498 0
 240 0084 1BBA     		rev	r3, r3
 241              	.LVL41:
 242              	.LBE253:
 243              	.LBE252:
 244              		.loc 1 152 0
 245 0086 0393     		str	r3, [sp, #12]
 246              	.LVL42:
 153:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 154:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 247              		.loc 1 154 0
 248 0088 AB68     		ldr	r3, [r5, #8]
 249              	.LVL43:
 250              	.LBB254:
 251              	.LBB255:
 252              		.loc 2 498 0
 253 008a 1BBA     		rev	r3, r3
 254              	.LVL44:
 255              	.LBE255:
 256              	.LBE254:
 257              		.loc 1 154 0
 258 008c 0493     		str	r3, [sp, #16]
 259              	.LVL45:
 155:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 156:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 17


 260              		.loc 1 156 0
 261 008e EB68     		ldr	r3, [r5, #12]
 262              	.LVL46:
 263              	.LBB256:
 264              	.LBB257:
 265              		.loc 2 498 0
 266 0090 1BBA     		rev	r3, r3
 267              	.LVL47:
 268              	.LBE257:
 269              	.LBE256:
 270              		.loc 1 156 0
 271 0092 0593     		str	r3, [sp, #20]
 272              	.LVL48:
 157:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 158:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 273              		.loc 1 158 0
 274 0094 2B69     		ldr	r3, [r5, #16]
 275              	.LVL49:
 276              	.LBB258:
 277              	.LBB259:
 278              		.loc 2 498 0
 279 0096 1BBA     		rev	r3, r3
 280              	.LVL50:
 281              	.LBE259:
 282              	.LBE258:
 283              		.loc 1 158 0
 284 0098 0693     		str	r3, [sp, #24]
 285              	.LVL51:
 159:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 160:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 286              		.loc 1 160 0
 287 009a 6B69     		ldr	r3, [r5, #20]
 288              	.LVL52:
 289              	.LBB260:
 290              	.LBB261:
 291              		.loc 2 498 0
 292 009c 1BBA     		rev	r3, r3
 293              	.LVL53:
 294              	.LBE261:
 295              	.LBE260:
 296              		.loc 1 160 0
 297 009e 0793     		str	r3, [sp, #28]
 298              	.LVL54:
 161:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 162:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 299              		.loc 1 162 0
 300 00a0 AB69     		ldr	r3, [r5, #24]
 301              	.LVL55:
 302              	.LBB262:
 303              	.LBB263:
 304              		.loc 2 498 0
 305 00a2 1BBA     		rev	r3, r3
 306              	.LVL56:
 307              	.LBE263:
 308              	.LBE262:
 309              		.loc 1 162 0
 310 00a4 0893     		str	r3, [sp, #32]
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 18


 311              	.LVL57:
 163:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 164:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 312              		.loc 1 164 0
 313 00a6 EB69     		ldr	r3, [r5, #28]
 314              	.LVL58:
 315              	.LBB264:
 316              	.LBB265:
 317              		.loc 2 498 0
 318 00a8 1BBA     		rev	r3, r3
 319              	.LVL59:
 320              	.LBE265:
 321              	.LBE264:
 322              		.loc 1 164 0
 323 00aa 0993     		str	r3, [sp, #36]
 324              	.LVL60:
 325              	.L2:
 165:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 166:FWLIB/src/stm32f4xx_cryp_aes.c ****     default:
 167:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 168:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 169:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 170:FWLIB/src/stm32f4xx_cryp_aes.c ****   /*------------------ AES Decryption ------------------*/
 171:FWLIB/src/stm32f4xx_cryp_aes.c ****   if(Mode == MODE_DECRYPT) /* AES decryption */
 326              		.loc 1 171 0
 327 00ac B9F1000F 		cmp	r9, #0
 328 00b0 22D1     		bne	.L6
 172:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 173:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Flush IN/OUT FIFOs */
 174:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_FIFOFlush();
 329              		.loc 1 174 0
 330 00b2 FFF7FEFF 		bl	CRYP_FIFOFlush
 331              	.LVL61:
 175:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 176:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Crypto Init for Key preparation for decryption process */
 177:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 332              		.loc 1 177 0
 333 00b6 0423     		movs	r3, #4
 334 00b8 0A93     		str	r3, [sp, #40]
 178:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 335              		.loc 1 178 0
 336 00ba 3823     		movs	r3, #56
 337 00bc 0B93     		str	r3, [sp, #44]
 179:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 338              		.loc 1 179 0
 339 00be 0023     		movs	r3, #0
 340 00c0 0C93     		str	r3, [sp, #48]
 180:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_Init(&AES_CRYP_InitStructure);
 341              		.loc 1 180 0
 342 00c2 0AA8     		add	r0, sp, #40
 343 00c4 FFF7FEFF 		bl	CRYP_Init
 344              	.LVL62:
 181:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 182:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Key Initialisation */
 183:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 345              		.loc 1 183 0
 346 00c8 02A8     		add	r0, sp, #8
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 19


 347 00ca FFF7FEFF 		bl	CRYP_KeyInit
 348              	.LVL63:
 184:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 185:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Enable Crypto processor */
 186:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_Cmd(ENABLE);
 349              		.loc 1 186 0
 350 00ce 0120     		movs	r0, #1
 351 00d0 FFF7FEFF 		bl	CRYP_Cmd
 352              	.LVL64:
 353              	.L8:
 187:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 188:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* wait until the Busy flag is RESET */
 189:FWLIB/src/stm32f4xx_cryp_aes.c ****     do
 190:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 191:FWLIB/src/stm32f4xx_cryp_aes.c ****       busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 354              		.loc 1 191 0 discriminator 2
 355 00d4 1020     		movs	r0, #16
 356 00d6 FFF7FEFF 		bl	CRYP_GetFlagStatus
 357              	.LVL65:
 358 00da 0246     		mov	r2, r0
 359              	.LVL66:
 192:FWLIB/src/stm32f4xx_cryp_aes.c ****       counter++;
 360              		.loc 1 192 0 discriminator 2
 361 00dc 019B     		ldr	r3, [sp, #4]
 362 00de 0133     		adds	r3, r3, #1
 363 00e0 0193     		str	r3, [sp, #4]
 193:FWLIB/src/stm32f4xx_cryp_aes.c ****     }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 364              		.loc 1 193 0 discriminator 2
 365 00e2 019B     		ldr	r3, [sp, #4]
 366 00e4 B3F5803F 		cmp	r3, #65536
 367 00e8 01D0     		beq	.L7
 368              		.loc 1 193 0 is_stmt 0 discriminator 1
 369 00ea 0028     		cmp	r0, #0
 370 00ec F2D1     		bne	.L8
 371              	.L7:
 194:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 195:FWLIB/src/stm32f4xx_cryp_aes.c ****     if (busystatus != RESET)
 372              		.loc 1 195 0 is_stmt 1
 373 00ee 52B9     		cbnz	r2, .L17
 196:FWLIB/src/stm32f4xx_cryp_aes.c ****    {
 197:FWLIB/src/stm32f4xx_cryp_aes.c ****        status = ERROR;
 198:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 199:FWLIB/src/stm32f4xx_cryp_aes.c ****     else
 200:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 201:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Crypto Init for decryption process */  
 202:FWLIB/src/stm32f4xx_cryp_aes.c ****       AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 374              		.loc 1 202 0
 375 00f0 0423     		movs	r3, #4
 376 00f2 0A93     		str	r3, [sp, #40]
 113:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 377              		.loc 1 113 0
 378 00f4 0126     		movs	r6, #1
 379 00f6 07E0     		b	.L9
 380              	.LVL67:
 381              	.L6:
 203:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 204:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 20


 205:FWLIB/src/stm32f4xx_cryp_aes.c ****   /*------------------ AES Encryption ------------------*/
 206:FWLIB/src/stm32f4xx_cryp_aes.c ****   else /* AES encryption */
 207:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 208:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 209:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 382              		.loc 1 209 0
 383 00f8 02A8     		add	r0, sp, #8
 384 00fa FFF7FEFF 		bl	CRYP_KeyInit
 385              	.LVL68:
 210:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 211:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Crypto Init for Encryption process */
 212:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 386              		.loc 1 212 0
 387 00fe 0023     		movs	r3, #0
 388 0100 0A93     		str	r3, [sp, #40]
 113:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 389              		.loc 1 113 0
 390 0102 0126     		movs	r6, #1
 391 0104 00E0     		b	.L9
 392              	.LVL69:
 393              	.L17:
 197:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 394              		.loc 1 197 0
 395 0106 0026     		movs	r6, #0
 396              	.LVL70:
 397              	.L9:
 213:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 214:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 215:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
 398              		.loc 1 215 0
 399 0108 2023     		movs	r3, #32
 400 010a 0B93     		str	r3, [sp, #44]
 216:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 401              		.loc 1 216 0
 402 010c 8023     		movs	r3, #128
 403 010e 0C93     		str	r3, [sp, #48]
 217:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_Init(&AES_CRYP_InitStructure);
 404              		.loc 1 217 0
 405 0110 0AA8     		add	r0, sp, #40
 406 0112 FFF7FEFF 		bl	CRYP_Init
 407              	.LVL71:
 218:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 219:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Flush IN/OUT FIFOs */
 220:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_FIFOFlush();
 408              		.loc 1 220 0
 409 0116 FFF7FEFF 		bl	CRYP_FIFOFlush
 410              	.LVL72:
 221:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 222:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Enable Crypto processor */
 223:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_Cmd(ENABLE);
 411              		.loc 1 223 0
 412 011a 0120     		movs	r0, #1
 413 011c FFF7FEFF 		bl	CRYP_Cmd
 414              	.LVL73:
 224:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 225:FWLIB/src/stm32f4xx_cryp_aes.c ****   if(CRYP_GetCmdStatus() == DISABLE)
 415              		.loc 1 225 0
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 21


 416 0120 FFF7FEFF 		bl	CRYP_GetCmdStatus
 417              	.LVL74:
 418 0124 0028     		cmp	r0, #0
 419 0126 37D0     		beq	.L18
 420 0128 0025     		movs	r5, #0
 421              	.LVL75:
 422 012a 2CE0     		b	.L11
 423              	.LVL76:
 424              	.L16:
 226:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 227:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* The CRYP peripheral clock is not enabled or the device doesn't embed 
 228:FWLIB/src/stm32f4xx_cryp_aes.c ****        the CRYP peripheral (please check the device sales type. */
 229:FWLIB/src/stm32f4xx_cryp_aes.c ****     return(ERROR);
 230:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 231:FWLIB/src/stm32f4xx_cryp_aes.c ****   
 232:FWLIB/src/stm32f4xx_cryp_aes.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 233:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 234:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 235:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Write the Input block in the IN FIFO */
 236:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 425              		.loc 1 236 0
 426 012c 2068     		ldr	r0, [r4]
 427 012e FFF7FEFF 		bl	CRYP_DataIn
 428              	.LVL77:
 237:FWLIB/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 238:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 429              		.loc 1 238 0
 430 0132 6068     		ldr	r0, [r4, #4]
 431 0134 FFF7FEFF 		bl	CRYP_DataIn
 432              	.LVL78:
 239:FWLIB/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 240:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 433              		.loc 1 240 0
 434 0138 A068     		ldr	r0, [r4, #8]
 435 013a FFF7FEFF 		bl	CRYP_DataIn
 436              	.LVL79:
 241:FWLIB/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 242:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 437              		.loc 1 242 0
 438 013e E068     		ldr	r0, [r4, #12]
 439 0140 FFF7FEFF 		bl	CRYP_DataIn
 440              	.LVL80:
 243:FWLIB/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 441              		.loc 1 243 0
 442 0144 1034     		adds	r4, r4, #16
 443              	.LVL81:
 244:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 245:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Wait until the complete message has been processed */
 246:FWLIB/src/stm32f4xx_cryp_aes.c ****     counter = 0;
 444              		.loc 1 246 0
 445 0146 0023     		movs	r3, #0
 446 0148 0193     		str	r3, [sp, #4]
 447              	.L13:
 247:FWLIB/src/stm32f4xx_cryp_aes.c ****     do
 248:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 249:FWLIB/src/stm32f4xx_cryp_aes.c ****       busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 448              		.loc 1 249 0 discriminator 2
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 22


 449 014a 1020     		movs	r0, #16
 450 014c FFF7FEFF 		bl	CRYP_GetFlagStatus
 451              	.LVL82:
 452 0150 0246     		mov	r2, r0
 453              	.LVL83:
 250:FWLIB/src/stm32f4xx_cryp_aes.c ****       counter++;
 454              		.loc 1 250 0 discriminator 2
 455 0152 019B     		ldr	r3, [sp, #4]
 456 0154 0133     		adds	r3, r3, #1
 457 0156 0193     		str	r3, [sp, #4]
 251:FWLIB/src/stm32f4xx_cryp_aes.c ****     }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 458              		.loc 1 251 0 discriminator 2
 459 0158 019B     		ldr	r3, [sp, #4]
 460 015a B3F5803F 		cmp	r3, #65536
 461 015e 01D0     		beq	.L12
 462              		.loc 1 251 0 is_stmt 0 discriminator 1
 463 0160 0028     		cmp	r0, #0
 464 0162 F2D1     		bne	.L13
 465              	.L12:
 252:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 253:FWLIB/src/stm32f4xx_cryp_aes.c ****     if (busystatus != RESET)
 466              		.loc 1 253 0 is_stmt 1
 467 0164 6AB9     		cbnz	r2, .L19
 254:FWLIB/src/stm32f4xx_cryp_aes.c ****    {
 255:FWLIB/src/stm32f4xx_cryp_aes.c ****        status = ERROR;
 256:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 257:FWLIB/src/stm32f4xx_cryp_aes.c ****     else
 258:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 259:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 260:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Read the Output block from the Output FIFO */
 261:FWLIB/src/stm32f4xx_cryp_aes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 468              		.loc 1 261 0
 469 0166 FFF7FEFF 		bl	CRYP_DataOut
 470              	.LVL84:
 471 016a 3860     		str	r0, [r7]
 472              	.LVL85:
 262:FWLIB/src/stm32f4xx_cryp_aes.c ****       outputaddr+=4;
 263:FWLIB/src/stm32f4xx_cryp_aes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 473              		.loc 1 263 0
 474 016c FFF7FEFF 		bl	CRYP_DataOut
 475              	.LVL86:
 476 0170 7860     		str	r0, [r7, #4]
 477              	.LVL87:
 264:FWLIB/src/stm32f4xx_cryp_aes.c ****       outputaddr+=4;
 265:FWLIB/src/stm32f4xx_cryp_aes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 478              		.loc 1 265 0
 479 0172 FFF7FEFF 		bl	CRYP_DataOut
 480              	.LVL88:
 481 0176 B860     		str	r0, [r7, #8]
 482              	.LVL89:
 266:FWLIB/src/stm32f4xx_cryp_aes.c ****       outputaddr+=4;
 267:FWLIB/src/stm32f4xx_cryp_aes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut(); 
 483              		.loc 1 267 0
 484 0178 FFF7FEFF 		bl	CRYP_DataOut
 485              	.LVL90:
 486 017c F860     		str	r0, [r7, #12]
 268:FWLIB/src/stm32f4xx_cryp_aes.c ****       outputaddr+=4;
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 23


 487              		.loc 1 268 0
 488 017e 1037     		adds	r7, r7, #16
 489              	.LVL91:
 490 0180 00E0     		b	.L14
 491              	.LVL92:
 492              	.L19:
 255:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 493              		.loc 1 255 0
 494 0182 0026     		movs	r6, #0
 495              	.LVL93:
 496              	.L14:
 232:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 497              		.loc 1 232 0 discriminator 2
 498 0184 1035     		adds	r5, r5, #16
 499              	.LVL94:
 500              	.L11:
 232:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 501              		.loc 1 232 0 is_stmt 0 discriminator 1
 502 0186 4545     		cmp	r5, r8
 503 0188 01D2     		bcs	.L15
 232:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 504              		.loc 1 232 0 discriminator 3
 505 018a 002E     		cmp	r6, #0
 506 018c CED1     		bne	.L16
 507              	.L15:
 269:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 270:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 271:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 272:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Disable Crypto */
 273:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_Cmd(DISABLE);
 508              		.loc 1 273 0 is_stmt 1
 509 018e 0020     		movs	r0, #0
 510 0190 FFF7FEFF 		bl	CRYP_Cmd
 511              	.LVL95:
 274:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 275:FWLIB/src/stm32f4xx_cryp_aes.c ****   return status; 
 512              		.loc 1 275 0
 513 0194 3046     		mov	r0, r6
 514 0196 00E0     		b	.L10
 515              	.LVL96:
 516              	.L18:
 229:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 517              		.loc 1 229 0
 518 0198 0020     		movs	r0, #0
 519              	.LVL97:
 520              	.L10:
 276:FWLIB/src/stm32f4xx_cryp_aes.c **** }
 521              		.loc 1 276 0
 522 019a 0FB0     		add	sp, sp, #60
 523              	.LCFI2:
 524              		.cfi_def_cfa_offset 28
 525              		@ sp needed
 526 019c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 527              		.cfi_endproc
 528              	.LFE123:
 530              		.section	.text.CRYP_AES_CBC,"ax",%progbits
 531              		.align	2
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 24


 532              		.global	CRYP_AES_CBC
 533              		.thumb
 534              		.thumb_func
 536              	CRYP_AES_CBC:
 537              	.LFB124:
 277:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 278:FWLIB/src/stm32f4xx_cryp_aes.c **** /**
 279:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @brief  Encrypt and decrypt using AES in CBC Mode
 280:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Mode: encryption or decryption Mode.
 281:FWLIB/src/stm32f4xx_cryp_aes.c ****   *          This parameter can be one of the following values:
 282:FWLIB/src/stm32f4xx_cryp_aes.c ****   *            @arg MODE_ENCRYPT: Encryption
 283:FWLIB/src/stm32f4xx_cryp_aes.c ****   *            @arg MODE_DECRYPT: Decryption
 284:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  InitVectors: Initialisation Vectors used for AES algorithm.
 285:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Key: Key used for AES algorithm.
 286:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Keysize: length of the Key, must be a 128, 192 or 256.
 287:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Input: pointer to the Input buffer.
 288:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 16.
 289:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Output: pointer to the returned buffer.
 290:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @retval An ErrorStatus enumeration value:
 291:FWLIB/src/stm32f4xx_cryp_aes.c ****   *          - SUCCESS: Operation done
 292:FWLIB/src/stm32f4xx_cryp_aes.c ****   *          - ERROR: Operation failed
 293:FWLIB/src/stm32f4xx_cryp_aes.c ****   */
 294:FWLIB/src/stm32f4xx_cryp_aes.c **** ErrorStatus CRYP_AES_CBC(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key,
 295:FWLIB/src/stm32f4xx_cryp_aes.c ****                          uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
 296:FWLIB/src/stm32f4xx_cryp_aes.c ****                          uint8_t *Output)
 297:FWLIB/src/stm32f4xx_cryp_aes.c **** {
 538              		.loc 1 297 0
 539              		.cfi_startproc
 540              		@ args = 12, pretend = 0, frame = 72
 541              		@ frame_needed = 0, uses_anonymous_args = 0
 542              	.LVL98:
 543 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 544              	.LCFI3:
 545              		.cfi_def_cfa_offset 32
 546              		.cfi_offset 4, -32
 547              		.cfi_offset 5, -28
 548              		.cfi_offset 6, -24
 549              		.cfi_offset 7, -20
 550              		.cfi_offset 8, -16
 551              		.cfi_offset 9, -12
 552              		.cfi_offset 10, -8
 553              		.cfi_offset 14, -4
 554 0004 92B0     		sub	sp, sp, #72
 555              	.LCFI4:
 556              		.cfi_def_cfa_offset 104
 557 0006 8146     		mov	r9, r0
 558 0008 0E46     		mov	r6, r1
 559 000a 1546     		mov	r5, r2
 560 000c 9A46     		mov	r10, r3
 561 000e DDF86C80 		ldr	r8, [sp, #108]
 298:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_InitTypeDef AES_CRYP_InitStructure;
 299:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
 300:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
 301:FWLIB/src/stm32f4xx_cryp_aes.c ****   __IO uint32_t counter = 0;
 562              		.loc 1 301 0
 563 0012 0023     		movs	r3, #0
 564              	.LVL99:
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 25


 565 0014 0193     		str	r3, [sp, #4]
 566              	.LVL100:
 302:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t busystatus = 0;
 303:FWLIB/src/stm32f4xx_cryp_aes.c ****   ErrorStatus status = SUCCESS;
 304:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 305:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t inputaddr  = (uint32_t)Input;
 567              		.loc 1 305 0
 568 0016 1A9C     		ldr	r4, [sp, #104]
 569              	.LVL101:
 306:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t outputaddr = (uint32_t)Output;
 570              		.loc 1 306 0
 571 0018 1C9F     		ldr	r7, [sp, #112]
 572              	.LVL102:
 307:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t ivaddr = (uint32_t)InitVectors;
 308:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t i = 0;
 309:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 310:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Crypto structures initialisation*/
 311:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 573              		.loc 1 311 0
 574 001a 06A8     		add	r0, sp, #24
 575              	.LVL103:
 576 001c FFF7FEFF 		bl	CRYP_KeyStructInit
 577              	.LVL104:
 312:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 313:FWLIB/src/stm32f4xx_cryp_aes.c ****   switch(Keysize)
 578              		.loc 1 313 0
 579 0020 BAF1C00F 		cmp	r10, #192
 580 0024 14D0     		beq	.L23
 581 0026 BAF5807F 		cmp	r10, #256
 582 002a 27D0     		beq	.L24
 583 002c BAF1800F 		cmp	r10, #128
 584 0030 3FD1     		bne	.L22
 314:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 315:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 128:
 316:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 585              		.loc 1 316 0
 586 0032 0023     		movs	r3, #0
 587 0034 1193     		str	r3, [sp, #68]
 317:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 588              		.loc 1 317 0
 589 0036 2B68     		ldr	r3, [r5]
 590              	.LVL105:
 591              	.LBB266:
 592              	.LBB267:
 593              		.loc 2 498 0
 594 0038 1BBA     		rev	r3, r3
 595              	.LVL106:
 596              	.LBE267:
 597              	.LBE266:
 598              		.loc 1 317 0
 599 003a 0A93     		str	r3, [sp, #40]
 600              	.LVL107:
 318:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 319:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 601              		.loc 1 319 0
 602 003c 6B68     		ldr	r3, [r5, #4]
 603              	.LVL108:
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 26


 604              	.LBB268:
 605              	.LBB269:
 606              		.loc 2 498 0
 607 003e 1BBA     		rev	r3, r3
 608              	.LVL109:
 609              	.LBE269:
 610              	.LBE268:
 611              		.loc 1 319 0
 612 0040 0B93     		str	r3, [sp, #44]
 613              	.LVL110:
 320:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 321:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 614              		.loc 1 321 0
 615 0042 AB68     		ldr	r3, [r5, #8]
 616              	.LVL111:
 617              	.LBB270:
 618              	.LBB271:
 619              		.loc 2 498 0
 620 0044 1BBA     		rev	r3, r3
 621              	.LVL112:
 622              	.LBE271:
 623              	.LBE270:
 624              		.loc 1 321 0
 625 0046 0C93     		str	r3, [sp, #48]
 626              	.LVL113:
 322:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 323:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 627              		.loc 1 323 0
 628 0048 EB68     		ldr	r3, [r5, #12]
 629              	.LVL114:
 630              	.LBB272:
 631              	.LBB273:
 632              		.loc 2 498 0
 633 004a 1BBA     		rev	r3, r3
 634              	.LVL115:
 635              	.LBE273:
 636              	.LBE272:
 637              		.loc 1 323 0
 638 004c 0D93     		str	r3, [sp, #52]
 324:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 639              		.loc 1 324 0
 640 004e 30E0     		b	.L22
 641              	.LVL116:
 642              	.L23:
 325:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 192:
 326:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 643              		.loc 1 326 0
 644 0050 4FF48073 		mov	r3, #256
 645 0054 1193     		str	r3, [sp, #68]
 327:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 646              		.loc 1 327 0
 647 0056 2B68     		ldr	r3, [r5]
 648              	.LVL117:
 649              	.LBB274:
 650              	.LBB275:
 651              		.loc 2 498 0
 652 0058 1BBA     		rev	r3, r3
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 27


 653              	.LVL118:
 654              	.LBE275:
 655              	.LBE274:
 656              		.loc 1 327 0
 657 005a 0893     		str	r3, [sp, #32]
 658              	.LVL119:
 328:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 329:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 659              		.loc 1 329 0
 660 005c 6B68     		ldr	r3, [r5, #4]
 661              	.LVL120:
 662              	.LBB276:
 663              	.LBB277:
 664              		.loc 2 498 0
 665 005e 1BBA     		rev	r3, r3
 666              	.LVL121:
 667              	.LBE277:
 668              	.LBE276:
 669              		.loc 1 329 0
 670 0060 0993     		str	r3, [sp, #36]
 671              	.LVL122:
 330:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 331:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 672              		.loc 1 331 0
 673 0062 AB68     		ldr	r3, [r5, #8]
 674              	.LVL123:
 675              	.LBB278:
 676              	.LBB279:
 677              		.loc 2 498 0
 678 0064 1BBA     		rev	r3, r3
 679              	.LVL124:
 680              	.LBE279:
 681              	.LBE278:
 682              		.loc 1 331 0
 683 0066 0A93     		str	r3, [sp, #40]
 684              	.LVL125:
 332:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 333:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 685              		.loc 1 333 0
 686 0068 EB68     		ldr	r3, [r5, #12]
 687              	.LVL126:
 688              	.LBB280:
 689              	.LBB281:
 690              		.loc 2 498 0
 691 006a 1BBA     		rev	r3, r3
 692              	.LVL127:
 693              	.LBE281:
 694              	.LBE280:
 695              		.loc 1 333 0
 696 006c 0B93     		str	r3, [sp, #44]
 697              	.LVL128:
 334:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 335:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 698              		.loc 1 335 0
 699 006e 2B69     		ldr	r3, [r5, #16]
 700              	.LVL129:
 701              	.LBB282:
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 28


 702              	.LBB283:
 703              		.loc 2 498 0
 704 0070 1BBA     		rev	r3, r3
 705              	.LVL130:
 706              	.LBE283:
 707              	.LBE282:
 708              		.loc 1 335 0
 709 0072 0C93     		str	r3, [sp, #48]
 710              	.LVL131:
 336:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 337:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 711              		.loc 1 337 0
 712 0074 6B69     		ldr	r3, [r5, #20]
 713              	.LVL132:
 714              	.LBB284:
 715              	.LBB285:
 716              		.loc 2 498 0
 717 0076 1BBA     		rev	r3, r3
 718              	.LVL133:
 719              	.LBE285:
 720              	.LBE284:
 721              		.loc 1 337 0
 722 0078 0D93     		str	r3, [sp, #52]
 338:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 723              		.loc 1 338 0
 724 007a 1AE0     		b	.L22
 725              	.LVL134:
 726              	.L24:
 339:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 256:
 340:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 727              		.loc 1 340 0
 728 007c 4FF40073 		mov	r3, #512
 729 0080 1193     		str	r3, [sp, #68]
 341:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 730              		.loc 1 341 0
 731 0082 2B68     		ldr	r3, [r5]
 732              	.LVL135:
 733              	.LBB286:
 734              	.LBB287:
 735              		.loc 2 498 0
 736 0084 1BBA     		rev	r3, r3
 737              	.LVL136:
 738              	.LBE287:
 739              	.LBE286:
 740              		.loc 1 341 0
 741 0086 0693     		str	r3, [sp, #24]
 742              	.LVL137:
 342:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 343:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 743              		.loc 1 343 0
 744 0088 6B68     		ldr	r3, [r5, #4]
 745              	.LVL138:
 746              	.LBB288:
 747              	.LBB289:
 748              		.loc 2 498 0
 749 008a 1BBA     		rev	r3, r3
 750              	.LVL139:
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 29


 751              	.LBE289:
 752              	.LBE288:
 753              		.loc 1 343 0
 754 008c 0793     		str	r3, [sp, #28]
 755              	.LVL140:
 344:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 345:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 756              		.loc 1 345 0
 757 008e AB68     		ldr	r3, [r5, #8]
 758              	.LVL141:
 759              	.LBB290:
 760              	.LBB291:
 761              		.loc 2 498 0
 762 0090 1BBA     		rev	r3, r3
 763              	.LVL142:
 764              	.LBE291:
 765              	.LBE290:
 766              		.loc 1 345 0
 767 0092 0893     		str	r3, [sp, #32]
 768              	.LVL143:
 346:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 347:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 769              		.loc 1 347 0
 770 0094 EB68     		ldr	r3, [r5, #12]
 771              	.LVL144:
 772              	.LBB292:
 773              	.LBB293:
 774              		.loc 2 498 0
 775 0096 1BBA     		rev	r3, r3
 776              	.LVL145:
 777              	.LBE293:
 778              	.LBE292:
 779              		.loc 1 347 0
 780 0098 0993     		str	r3, [sp, #36]
 781              	.LVL146:
 348:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 349:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 782              		.loc 1 349 0
 783 009a 2B69     		ldr	r3, [r5, #16]
 784              	.LVL147:
 785              	.LBB294:
 786              	.LBB295:
 787              		.loc 2 498 0
 788 009c 1BBA     		rev	r3, r3
 789              	.LVL148:
 790              	.LBE295:
 791              	.LBE294:
 792              		.loc 1 349 0
 793 009e 0A93     		str	r3, [sp, #40]
 794              	.LVL149:
 350:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 351:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 795              		.loc 1 351 0
 796 00a0 6B69     		ldr	r3, [r5, #20]
 797              	.LVL150:
 798              	.LBB296:
 799              	.LBB297:
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 30


 800              		.loc 2 498 0
 801 00a2 1BBA     		rev	r3, r3
 802              	.LVL151:
 803              	.LBE297:
 804              	.LBE296:
 805              		.loc 1 351 0
 806 00a4 0B93     		str	r3, [sp, #44]
 807              	.LVL152:
 352:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 353:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 808              		.loc 1 353 0
 809 00a6 AB69     		ldr	r3, [r5, #24]
 810              	.LVL153:
 811              	.LBB298:
 812              	.LBB299:
 813              		.loc 2 498 0
 814 00a8 1BBA     		rev	r3, r3
 815              	.LVL154:
 816              	.LBE299:
 817              	.LBE298:
 818              		.loc 1 353 0
 819 00aa 0C93     		str	r3, [sp, #48]
 820              	.LVL155:
 354:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 355:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 821              		.loc 1 355 0
 822 00ac EB69     		ldr	r3, [r5, #28]
 823              	.LVL156:
 824              	.LBB300:
 825              	.LBB301:
 826              		.loc 2 498 0
 827 00ae 1BBA     		rev	r3, r3
 828              	.LVL157:
 829              	.LBE301:
 830              	.LBE300:
 831              		.loc 1 355 0
 832 00b0 0D93     		str	r3, [sp, #52]
 833              	.LVL158:
 834              	.L22:
 356:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 357:FWLIB/src/stm32f4xx_cryp_aes.c ****     default:
 358:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 359:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 360:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 361:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* CRYP Initialization Vectors */
 362:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 835              		.loc 1 362 0
 836 00b2 3368     		ldr	r3, [r6]
 837              	.LVL159:
 838              	.LBB302:
 839              	.LBB303:
 840              		.loc 2 498 0
 841 00b4 1BBA     		rev	r3, r3
 842              	.LVL160:
 843              	.LBE303:
 844              	.LBE302:
 845              		.loc 1 362 0
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 31


 846 00b6 0293     		str	r3, [sp, #8]
 847              	.LVL161:
 363:FWLIB/src/stm32f4xx_cryp_aes.c ****   ivaddr+=4;
 364:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 848              		.loc 1 364 0
 849 00b8 7368     		ldr	r3, [r6, #4]
 850              	.LVL162:
 851              	.LBB304:
 852              	.LBB305:
 853              		.loc 2 498 0
 854 00ba 1BBA     		rev	r3, r3
 855              	.LVL163:
 856              	.LBE305:
 857              	.LBE304:
 858              		.loc 1 364 0
 859 00bc 0393     		str	r3, [sp, #12]
 860              	.LVL164:
 365:FWLIB/src/stm32f4xx_cryp_aes.c ****   ivaddr+=4;
 366:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 861              		.loc 1 366 0
 862 00be B368     		ldr	r3, [r6, #8]
 863              	.LVL165:
 864              	.LBB306:
 865              	.LBB307:
 866              		.loc 2 498 0
 867 00c0 1BBA     		rev	r3, r3
 868              	.LVL166:
 869              	.LBE307:
 870              	.LBE306:
 871              		.loc 1 366 0
 872 00c2 0493     		str	r3, [sp, #16]
 873              	.LVL167:
 367:FWLIB/src/stm32f4xx_cryp_aes.c ****   ivaddr+=4;
 368:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 874              		.loc 1 368 0
 875 00c4 F368     		ldr	r3, [r6, #12]
 876              	.LVL168:
 877              	.LBB308:
 878              	.LBB309:
 879              		.loc 2 498 0
 880 00c6 1BBA     		rev	r3, r3
 881              	.LVL169:
 882              	.LBE309:
 883              	.LBE308:
 884              		.loc 1 368 0
 885 00c8 0593     		str	r3, [sp, #20]
 369:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 370:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 371:FWLIB/src/stm32f4xx_cryp_aes.c ****   /*------------------ AES Decryption ------------------*/
 372:FWLIB/src/stm32f4xx_cryp_aes.c ****   if(Mode == MODE_DECRYPT) /* AES decryption */
 886              		.loc 1 372 0
 887 00ca B9F1000F 		cmp	r9, #0
 888 00ce 22D1     		bne	.L26
 373:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 374:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Flush IN/OUT FIFOs */
 375:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_FIFOFlush();
 889              		.loc 1 375 0
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 32


 890 00d0 FFF7FEFF 		bl	CRYP_FIFOFlush
 891              	.LVL170:
 376:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 377:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Crypto Init for Key preparation for decryption process */
 378:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 892              		.loc 1 378 0
 893 00d4 0423     		movs	r3, #4
 894 00d6 0E93     		str	r3, [sp, #56]
 379:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 895              		.loc 1 379 0
 896 00d8 3823     		movs	r3, #56
 897 00da 0F93     		str	r3, [sp, #60]
 380:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 898              		.loc 1 380 0
 899 00dc 0023     		movs	r3, #0
 900 00de 1093     		str	r3, [sp, #64]
 381:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 382:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_Init(&AES_CRYP_InitStructure);
 901              		.loc 1 382 0
 902 00e0 0EA8     		add	r0, sp, #56
 903 00e2 FFF7FEFF 		bl	CRYP_Init
 904              	.LVL171:
 383:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 384:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Key Initialisation */
 385:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 905              		.loc 1 385 0
 906 00e6 06A8     		add	r0, sp, #24
 907 00e8 FFF7FEFF 		bl	CRYP_KeyInit
 908              	.LVL172:
 386:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 387:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Enable Crypto processor */
 388:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_Cmd(ENABLE);
 909              		.loc 1 388 0
 910 00ec 0120     		movs	r0, #1
 911 00ee FFF7FEFF 		bl	CRYP_Cmd
 912              	.LVL173:
 913              	.L28:
 389:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 390:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* wait until the Busy flag is RESET */
 391:FWLIB/src/stm32f4xx_cryp_aes.c ****     do
 392:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 393:FWLIB/src/stm32f4xx_cryp_aes.c ****       busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 914              		.loc 1 393 0 discriminator 2
 915 00f2 1020     		movs	r0, #16
 916 00f4 FFF7FEFF 		bl	CRYP_GetFlagStatus
 917              	.LVL174:
 918 00f8 0246     		mov	r2, r0
 919              	.LVL175:
 394:FWLIB/src/stm32f4xx_cryp_aes.c ****       counter++;
 920              		.loc 1 394 0 discriminator 2
 921 00fa 019B     		ldr	r3, [sp, #4]
 922 00fc 0133     		adds	r3, r3, #1
 923 00fe 0193     		str	r3, [sp, #4]
 395:FWLIB/src/stm32f4xx_cryp_aes.c ****     }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 924              		.loc 1 395 0 discriminator 2
 925 0100 019B     		ldr	r3, [sp, #4]
 926 0102 B3F5803F 		cmp	r3, #65536
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 33


 927 0106 01D0     		beq	.L27
 928              		.loc 1 395 0 is_stmt 0 discriminator 1
 929 0108 0028     		cmp	r0, #0
 930 010a F2D1     		bne	.L28
 931              	.L27:
 396:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 397:FWLIB/src/stm32f4xx_cryp_aes.c ****     if (busystatus != RESET)
 932              		.loc 1 397 0 is_stmt 1
 933 010c 52B9     		cbnz	r2, .L37
 398:FWLIB/src/stm32f4xx_cryp_aes.c ****    {
 399:FWLIB/src/stm32f4xx_cryp_aes.c ****        status = ERROR;
 400:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 401:FWLIB/src/stm32f4xx_cryp_aes.c ****     else
 402:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 403:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Crypto Init for decryption process */  
 404:FWLIB/src/stm32f4xx_cryp_aes.c ****       AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 934              		.loc 1 404 0
 935 010e 0423     		movs	r3, #4
 936 0110 0E93     		str	r3, [sp, #56]
 303:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 937              		.loc 1 303 0
 938 0112 0126     		movs	r6, #1
 939              	.LVL176:
 940 0114 07E0     		b	.L29
 941              	.LVL177:
 942              	.L26:
 405:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 406:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 407:FWLIB/src/stm32f4xx_cryp_aes.c ****   /*------------------ AES Encryption ------------------*/
 408:FWLIB/src/stm32f4xx_cryp_aes.c ****   else /* AES encryption */
 409:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 410:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 943              		.loc 1 410 0
 944 0116 06A8     		add	r0, sp, #24
 945 0118 FFF7FEFF 		bl	CRYP_KeyInit
 946              	.LVL178:
 411:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 412:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Crypto Init for Encryption process */
 413:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 947              		.loc 1 413 0
 948 011c 0023     		movs	r3, #0
 949 011e 0E93     		str	r3, [sp, #56]
 303:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 950              		.loc 1 303 0
 951 0120 0126     		movs	r6, #1
 952              	.LVL179:
 953 0122 00E0     		b	.L29
 954              	.LVL180:
 955              	.L37:
 399:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 956              		.loc 1 399 0
 957 0124 0026     		movs	r6, #0
 958              	.LVL181:
 959              	.L29:
 414:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 415:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
 960              		.loc 1 415 0
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 34


 961 0126 2823     		movs	r3, #40
 962 0128 0F93     		str	r3, [sp, #60]
 416:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 963              		.loc 1 416 0
 964 012a 8023     		movs	r3, #128
 965 012c 1093     		str	r3, [sp, #64]
 417:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_Init(&AES_CRYP_InitStructure);
 966              		.loc 1 417 0
 967 012e 0EA8     		add	r0, sp, #56
 968 0130 FFF7FEFF 		bl	CRYP_Init
 969              	.LVL182:
 418:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 419:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* CRYP Initialization Vectors */
 420:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_IVInit(&AES_CRYP_IVInitStructure);
 970              		.loc 1 420 0
 971 0134 02A8     		add	r0, sp, #8
 972 0136 FFF7FEFF 		bl	CRYP_IVInit
 973              	.LVL183:
 421:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 422:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Flush IN/OUT FIFOs */
 423:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_FIFOFlush();
 974              		.loc 1 423 0
 975 013a FFF7FEFF 		bl	CRYP_FIFOFlush
 976              	.LVL184:
 424:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 425:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Enable Crypto processor */
 426:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_Cmd(ENABLE);
 977              		.loc 1 426 0
 978 013e 0120     		movs	r0, #1
 979 0140 FFF7FEFF 		bl	CRYP_Cmd
 980              	.LVL185:
 427:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 428:FWLIB/src/stm32f4xx_cryp_aes.c ****   if(CRYP_GetCmdStatus() == DISABLE)
 981              		.loc 1 428 0
 982 0144 FFF7FEFF 		bl	CRYP_GetCmdStatus
 983              	.LVL186:
 984 0148 0028     		cmp	r0, #0
 985 014a 37D0     		beq	.L38
 986 014c 0025     		movs	r5, #0
 987              	.LVL187:
 988 014e 2CE0     		b	.L31
 989              	.LVL188:
 990              	.L36:
 429:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 430:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* The CRYP peripheral clock is not enabled or the device doesn't embed 
 431:FWLIB/src/stm32f4xx_cryp_aes.c ****        the CRYP peripheral (please check the device sales type. */
 432:FWLIB/src/stm32f4xx_cryp_aes.c ****     return(ERROR);
 433:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 434:FWLIB/src/stm32f4xx_cryp_aes.c ****   
 435:FWLIB/src/stm32f4xx_cryp_aes.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 436:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 437:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 438:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Write the Input block in the IN FIFO */
 439:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 991              		.loc 1 439 0
 992 0150 2068     		ldr	r0, [r4]
 993 0152 FFF7FEFF 		bl	CRYP_DataIn
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 35


 994              	.LVL189:
 440:FWLIB/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 441:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 995              		.loc 1 441 0
 996 0156 6068     		ldr	r0, [r4, #4]
 997 0158 FFF7FEFF 		bl	CRYP_DataIn
 998              	.LVL190:
 442:FWLIB/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 443:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 999              		.loc 1 443 0
 1000 015c A068     		ldr	r0, [r4, #8]
 1001 015e FFF7FEFF 		bl	CRYP_DataIn
 1002              	.LVL191:
 444:FWLIB/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 445:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 1003              		.loc 1 445 0
 1004 0162 E068     		ldr	r0, [r4, #12]
 1005 0164 FFF7FEFF 		bl	CRYP_DataIn
 1006              	.LVL192:
 446:FWLIB/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 1007              		.loc 1 446 0
 1008 0168 1034     		adds	r4, r4, #16
 1009              	.LVL193:
 447:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Wait until the complete message has been processed */
 448:FWLIB/src/stm32f4xx_cryp_aes.c ****     counter = 0;
 1010              		.loc 1 448 0
 1011 016a 0023     		movs	r3, #0
 1012 016c 0193     		str	r3, [sp, #4]
 1013              	.L33:
 449:FWLIB/src/stm32f4xx_cryp_aes.c ****     do
 450:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 451:FWLIB/src/stm32f4xx_cryp_aes.c ****       busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 1014              		.loc 1 451 0 discriminator 2
 1015 016e 1020     		movs	r0, #16
 1016 0170 FFF7FEFF 		bl	CRYP_GetFlagStatus
 1017              	.LVL194:
 1018 0174 0246     		mov	r2, r0
 1019              	.LVL195:
 452:FWLIB/src/stm32f4xx_cryp_aes.c ****       counter++;
 1020              		.loc 1 452 0 discriminator 2
 1021 0176 019B     		ldr	r3, [sp, #4]
 1022 0178 0133     		adds	r3, r3, #1
 1023 017a 0193     		str	r3, [sp, #4]
 453:FWLIB/src/stm32f4xx_cryp_aes.c ****     }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 1024              		.loc 1 453 0 discriminator 2
 1025 017c 019B     		ldr	r3, [sp, #4]
 1026 017e B3F5803F 		cmp	r3, #65536
 1027 0182 01D0     		beq	.L32
 1028              		.loc 1 453 0 is_stmt 0 discriminator 1
 1029 0184 0028     		cmp	r0, #0
 1030 0186 F2D1     		bne	.L33
 1031              	.L32:
 454:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 455:FWLIB/src/stm32f4xx_cryp_aes.c ****     if (busystatus != RESET)
 1032              		.loc 1 455 0 is_stmt 1
 1033 0188 6AB9     		cbnz	r2, .L39
 456:FWLIB/src/stm32f4xx_cryp_aes.c ****    {
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 36


 457:FWLIB/src/stm32f4xx_cryp_aes.c ****        status = ERROR;
 458:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 459:FWLIB/src/stm32f4xx_cryp_aes.c ****     else
 460:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 461:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 462:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Read the Output block from the Output FIFO */
 463:FWLIB/src/stm32f4xx_cryp_aes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 1034              		.loc 1 463 0
 1035 018a FFF7FEFF 		bl	CRYP_DataOut
 1036              	.LVL196:
 1037 018e 3860     		str	r0, [r7]
 1038              	.LVL197:
 464:FWLIB/src/stm32f4xx_cryp_aes.c ****       outputaddr+=4;
 465:FWLIB/src/stm32f4xx_cryp_aes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 1039              		.loc 1 465 0
 1040 0190 FFF7FEFF 		bl	CRYP_DataOut
 1041              	.LVL198:
 1042 0194 7860     		str	r0, [r7, #4]
 1043              	.LVL199:
 466:FWLIB/src/stm32f4xx_cryp_aes.c ****       outputaddr+=4;
 467:FWLIB/src/stm32f4xx_cryp_aes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 1044              		.loc 1 467 0
 1045 0196 FFF7FEFF 		bl	CRYP_DataOut
 1046              	.LVL200:
 1047 019a B860     		str	r0, [r7, #8]
 1048              	.LVL201:
 468:FWLIB/src/stm32f4xx_cryp_aes.c ****       outputaddr+=4;
 469:FWLIB/src/stm32f4xx_cryp_aes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 1049              		.loc 1 469 0
 1050 019c FFF7FEFF 		bl	CRYP_DataOut
 1051              	.LVL202:
 1052 01a0 F860     		str	r0, [r7, #12]
 470:FWLIB/src/stm32f4xx_cryp_aes.c ****       outputaddr+=4;
 1053              		.loc 1 470 0
 1054 01a2 1037     		adds	r7, r7, #16
 1055              	.LVL203:
 1056 01a4 00E0     		b	.L34
 1057              	.LVL204:
 1058              	.L39:
 457:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 1059              		.loc 1 457 0
 1060 01a6 0026     		movs	r6, #0
 1061              	.LVL205:
 1062              	.L34:
 435:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 1063              		.loc 1 435 0 discriminator 2
 1064 01a8 1035     		adds	r5, r5, #16
 1065              	.LVL206:
 1066              	.L31:
 435:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 1067              		.loc 1 435 0 is_stmt 0 discriminator 1
 1068 01aa 4545     		cmp	r5, r8
 1069 01ac 01D2     		bcs	.L35
 435:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 1070              		.loc 1 435 0 discriminator 3
 1071 01ae 002E     		cmp	r6, #0
 1072 01b0 CED1     		bne	.L36
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 37


 1073              	.L35:
 471:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 472:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 473:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 474:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Disable Crypto */
 475:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_Cmd(DISABLE);
 1074              		.loc 1 475 0 is_stmt 1
 1075 01b2 0020     		movs	r0, #0
 1076 01b4 FFF7FEFF 		bl	CRYP_Cmd
 1077              	.LVL207:
 476:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 477:FWLIB/src/stm32f4xx_cryp_aes.c ****   return status;
 1078              		.loc 1 477 0
 1079 01b8 3046     		mov	r0, r6
 1080 01ba 00E0     		b	.L30
 1081              	.LVL208:
 1082              	.L38:
 432:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 1083              		.loc 1 432 0
 1084 01bc 0020     		movs	r0, #0
 1085              	.LVL209:
 1086              	.L30:
 478:FWLIB/src/stm32f4xx_cryp_aes.c **** }
 1087              		.loc 1 478 0
 1088 01be 12B0     		add	sp, sp, #72
 1089              	.LCFI5:
 1090              		.cfi_def_cfa_offset 32
 1091              		@ sp needed
 1092 01c0 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1093              		.cfi_endproc
 1094              	.LFE124:
 1096              		.section	.text.CRYP_AES_CTR,"ax",%progbits
 1097              		.align	2
 1098              		.global	CRYP_AES_CTR
 1099              		.thumb
 1100              		.thumb_func
 1102              	CRYP_AES_CTR:
 1103              	.LFB125:
 479:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 480:FWLIB/src/stm32f4xx_cryp_aes.c **** /**
 481:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @brief  Encrypt and decrypt using AES in CTR Mode
 482:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Mode: encryption or decryption Mode.
 483:FWLIB/src/stm32f4xx_cryp_aes.c ****   *           This parameter can be one of the following values:
 484:FWLIB/src/stm32f4xx_cryp_aes.c ****   *            @arg MODE_ENCRYPT: Encryption
 485:FWLIB/src/stm32f4xx_cryp_aes.c ****   *            @arg MODE_DECRYPT: Decryption
 486:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  InitVectors: Initialisation Vectors used for AES algorithm.
 487:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Key: Key used for AES algorithm.
 488:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Keysize: length of the Key, must be a 128, 192 or 256.
 489:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Input: pointer to the Input buffer.
 490:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 16.
 491:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Output: pointer to the returned buffer.
 492:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @retval An ErrorStatus enumeration value:
 493:FWLIB/src/stm32f4xx_cryp_aes.c ****   *          - SUCCESS: Operation done
 494:FWLIB/src/stm32f4xx_cryp_aes.c ****   *          - ERROR: Operation failed
 495:FWLIB/src/stm32f4xx_cryp_aes.c ****   */
 496:FWLIB/src/stm32f4xx_cryp_aes.c **** ErrorStatus CRYP_AES_CTR(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key, 
 497:FWLIB/src/stm32f4xx_cryp_aes.c ****                          uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 38


 498:FWLIB/src/stm32f4xx_cryp_aes.c ****                          uint8_t *Output)
 499:FWLIB/src/stm32f4xx_cryp_aes.c **** {
 1104              		.loc 1 499 0
 1105              		.cfi_startproc
 1106              		@ args = 12, pretend = 0, frame = 72
 1107              		@ frame_needed = 0, uses_anonymous_args = 0
 1108              	.LVL210:
 1109 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1110              	.LCFI6:
 1111              		.cfi_def_cfa_offset 32
 1112              		.cfi_offset 4, -32
 1113              		.cfi_offset 5, -28
 1114              		.cfi_offset 6, -24
 1115              		.cfi_offset 7, -20
 1116              		.cfi_offset 8, -16
 1117              		.cfi_offset 9, -12
 1118              		.cfi_offset 10, -8
 1119              		.cfi_offset 14, -4
 1120 0004 92B0     		sub	sp, sp, #72
 1121              	.LCFI7:
 1122              		.cfi_def_cfa_offset 104
 1123 0006 8146     		mov	r9, r0
 1124 0008 0E46     		mov	r6, r1
 1125 000a 1546     		mov	r5, r2
 1126 000c 9A46     		mov	r10, r3
 1127 000e DDF86C80 		ldr	r8, [sp, #108]
 500:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_InitTypeDef AES_CRYP_InitStructure;
 501:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
 502:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
 503:FWLIB/src/stm32f4xx_cryp_aes.c ****   __IO uint32_t counter = 0;
 1128              		.loc 1 503 0
 1129 0012 0023     		movs	r3, #0
 1130              	.LVL211:
 1131 0014 0193     		str	r3, [sp, #4]
 1132              	.LVL212:
 504:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t busystatus = 0;
 505:FWLIB/src/stm32f4xx_cryp_aes.c ****   ErrorStatus status = SUCCESS;
 506:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 507:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t inputaddr  = (uint32_t)Input;
 1133              		.loc 1 507 0
 1134 0016 1A9C     		ldr	r4, [sp, #104]
 1135              	.LVL213:
 508:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t outputaddr = (uint32_t)Output;
 1136              		.loc 1 508 0
 1137 0018 1C9F     		ldr	r7, [sp, #112]
 1138              	.LVL214:
 509:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t ivaddr     = (uint32_t)InitVectors;
 510:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t i = 0;
 511:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 512:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Crypto structures initialisation*/
 513:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 1139              		.loc 1 513 0
 1140 001a 06A8     		add	r0, sp, #24
 1141              	.LVL215:
 1142 001c FFF7FEFF 		bl	CRYP_KeyStructInit
 1143              	.LVL216:
 514:FWLIB/src/stm32f4xx_cryp_aes.c **** 
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 39


 515:FWLIB/src/stm32f4xx_cryp_aes.c ****   switch(Keysize)
 1144              		.loc 1 515 0
 1145 0020 BAF1C00F 		cmp	r10, #192
 1146 0024 14D0     		beq	.L43
 1147 0026 BAF5807F 		cmp	r10, #256
 1148 002a 27D0     		beq	.L44
 1149 002c BAF1800F 		cmp	r10, #128
 1150 0030 3FD1     		bne	.L42
 516:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 517:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 128:
 518:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 1151              		.loc 1 518 0
 1152 0032 0023     		movs	r3, #0
 1153 0034 1193     		str	r3, [sp, #68]
 519:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 1154              		.loc 1 519 0
 1155 0036 2B68     		ldr	r3, [r5]
 1156              	.LVL217:
 1157              	.LBB310:
 1158              	.LBB311:
 1159              		.loc 2 498 0
 1160 0038 1BBA     		rev	r3, r3
 1161              	.LVL218:
 1162              	.LBE311:
 1163              	.LBE310:
 1164              		.loc 1 519 0
 1165 003a 0A93     		str	r3, [sp, #40]
 1166              	.LVL219:
 520:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 521:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 1167              		.loc 1 521 0
 1168 003c 6B68     		ldr	r3, [r5, #4]
 1169              	.LVL220:
 1170              	.LBB312:
 1171              	.LBB313:
 1172              		.loc 2 498 0
 1173 003e 1BBA     		rev	r3, r3
 1174              	.LVL221:
 1175              	.LBE313:
 1176              	.LBE312:
 1177              		.loc 1 521 0
 1178 0040 0B93     		str	r3, [sp, #44]
 1179              	.LVL222:
 522:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 523:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 1180              		.loc 1 523 0
 1181 0042 AB68     		ldr	r3, [r5, #8]
 1182              	.LVL223:
 1183              	.LBB314:
 1184              	.LBB315:
 1185              		.loc 2 498 0
 1186 0044 1BBA     		rev	r3, r3
 1187              	.LVL224:
 1188              	.LBE315:
 1189              	.LBE314:
 1190              		.loc 1 523 0
 1191 0046 0C93     		str	r3, [sp, #48]
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 40


 1192              	.LVL225:
 524:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 525:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 1193              		.loc 1 525 0
 1194 0048 EB68     		ldr	r3, [r5, #12]
 1195              	.LVL226:
 1196              	.LBB316:
 1197              	.LBB317:
 1198              		.loc 2 498 0
 1199 004a 1BBA     		rev	r3, r3
 1200              	.LVL227:
 1201              	.LBE317:
 1202              	.LBE316:
 1203              		.loc 1 525 0
 1204 004c 0D93     		str	r3, [sp, #52]
 526:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 1205              		.loc 1 526 0
 1206 004e 30E0     		b	.L42
 1207              	.LVL228:
 1208              	.L43:
 527:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 192:
 528:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 1209              		.loc 1 528 0
 1210 0050 4FF48073 		mov	r3, #256
 1211 0054 1193     		str	r3, [sp, #68]
 529:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 1212              		.loc 1 529 0
 1213 0056 2B68     		ldr	r3, [r5]
 1214              	.LVL229:
 1215              	.LBB318:
 1216              	.LBB319:
 1217              		.loc 2 498 0
 1218 0058 1BBA     		rev	r3, r3
 1219              	.LVL230:
 1220              	.LBE319:
 1221              	.LBE318:
 1222              		.loc 1 529 0
 1223 005a 0893     		str	r3, [sp, #32]
 1224              	.LVL231:
 530:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 531:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 1225              		.loc 1 531 0
 1226 005c 6B68     		ldr	r3, [r5, #4]
 1227              	.LVL232:
 1228              	.LBB320:
 1229              	.LBB321:
 1230              		.loc 2 498 0
 1231 005e 1BBA     		rev	r3, r3
 1232              	.LVL233:
 1233              	.LBE321:
 1234              	.LBE320:
 1235              		.loc 1 531 0
 1236 0060 0993     		str	r3, [sp, #36]
 1237              	.LVL234:
 532:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 533:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 1238              		.loc 1 533 0
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 41


 1239 0062 AB68     		ldr	r3, [r5, #8]
 1240              	.LVL235:
 1241              	.LBB322:
 1242              	.LBB323:
 1243              		.loc 2 498 0
 1244 0064 1BBA     		rev	r3, r3
 1245              	.LVL236:
 1246              	.LBE323:
 1247              	.LBE322:
 1248              		.loc 1 533 0
 1249 0066 0A93     		str	r3, [sp, #40]
 1250              	.LVL237:
 534:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 535:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 1251              		.loc 1 535 0
 1252 0068 EB68     		ldr	r3, [r5, #12]
 1253              	.LVL238:
 1254              	.LBB324:
 1255              	.LBB325:
 1256              		.loc 2 498 0
 1257 006a 1BBA     		rev	r3, r3
 1258              	.LVL239:
 1259              	.LBE325:
 1260              	.LBE324:
 1261              		.loc 1 535 0
 1262 006c 0B93     		str	r3, [sp, #44]
 1263              	.LVL240:
 536:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 537:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 1264              		.loc 1 537 0
 1265 006e 2B69     		ldr	r3, [r5, #16]
 1266              	.LVL241:
 1267              	.LBB326:
 1268              	.LBB327:
 1269              		.loc 2 498 0
 1270 0070 1BBA     		rev	r3, r3
 1271              	.LVL242:
 1272              	.LBE327:
 1273              	.LBE326:
 1274              		.loc 1 537 0
 1275 0072 0C93     		str	r3, [sp, #48]
 1276              	.LVL243:
 538:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 539:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 1277              		.loc 1 539 0
 1278 0074 6B69     		ldr	r3, [r5, #20]
 1279              	.LVL244:
 1280              	.LBB328:
 1281              	.LBB329:
 1282              		.loc 2 498 0
 1283 0076 1BBA     		rev	r3, r3
 1284              	.LVL245:
 1285              	.LBE329:
 1286              	.LBE328:
 1287              		.loc 1 539 0
 1288 0078 0D93     		str	r3, [sp, #52]
 540:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 42


 1289              		.loc 1 540 0
 1290 007a 1AE0     		b	.L42
 1291              	.LVL246:
 1292              	.L44:
 541:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 256:
 542:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 1293              		.loc 1 542 0
 1294 007c 4FF40073 		mov	r3, #512
 1295 0080 1193     		str	r3, [sp, #68]
 543:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 1296              		.loc 1 543 0
 1297 0082 2B68     		ldr	r3, [r5]
 1298              	.LVL247:
 1299              	.LBB330:
 1300              	.LBB331:
 1301              		.loc 2 498 0
 1302 0084 1BBA     		rev	r3, r3
 1303              	.LVL248:
 1304              	.LBE331:
 1305              	.LBE330:
 1306              		.loc 1 543 0
 1307 0086 0693     		str	r3, [sp, #24]
 1308              	.LVL249:
 544:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 545:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 1309              		.loc 1 545 0
 1310 0088 6B68     		ldr	r3, [r5, #4]
 1311              	.LVL250:
 1312              	.LBB332:
 1313              	.LBB333:
 1314              		.loc 2 498 0
 1315 008a 1BBA     		rev	r3, r3
 1316              	.LVL251:
 1317              	.LBE333:
 1318              	.LBE332:
 1319              		.loc 1 545 0
 1320 008c 0793     		str	r3, [sp, #28]
 1321              	.LVL252:
 546:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 547:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 1322              		.loc 1 547 0
 1323 008e AB68     		ldr	r3, [r5, #8]
 1324              	.LVL253:
 1325              	.LBB334:
 1326              	.LBB335:
 1327              		.loc 2 498 0
 1328 0090 1BBA     		rev	r3, r3
 1329              	.LVL254:
 1330              	.LBE335:
 1331              	.LBE334:
 1332              		.loc 1 547 0
 1333 0092 0893     		str	r3, [sp, #32]
 1334              	.LVL255:
 548:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 549:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 1335              		.loc 1 549 0
 1336 0094 EB68     		ldr	r3, [r5, #12]
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 43


 1337              	.LVL256:
 1338              	.LBB336:
 1339              	.LBB337:
 1340              		.loc 2 498 0
 1341 0096 1BBA     		rev	r3, r3
 1342              	.LVL257:
 1343              	.LBE337:
 1344              	.LBE336:
 1345              		.loc 1 549 0
 1346 0098 0993     		str	r3, [sp, #36]
 1347              	.LVL258:
 550:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 551:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 1348              		.loc 1 551 0
 1349 009a 2B69     		ldr	r3, [r5, #16]
 1350              	.LVL259:
 1351              	.LBB338:
 1352              	.LBB339:
 1353              		.loc 2 498 0
 1354 009c 1BBA     		rev	r3, r3
 1355              	.LVL260:
 1356              	.LBE339:
 1357              	.LBE338:
 1358              		.loc 1 551 0
 1359 009e 0A93     		str	r3, [sp, #40]
 1360              	.LVL261:
 552:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 553:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 1361              		.loc 1 553 0
 1362 00a0 6B69     		ldr	r3, [r5, #20]
 1363              	.LVL262:
 1364              	.LBB340:
 1365              	.LBB341:
 1366              		.loc 2 498 0
 1367 00a2 1BBA     		rev	r3, r3
 1368              	.LVL263:
 1369              	.LBE341:
 1370              	.LBE340:
 1371              		.loc 1 553 0
 1372 00a4 0B93     		str	r3, [sp, #44]
 1373              	.LVL264:
 554:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 555:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 1374              		.loc 1 555 0
 1375 00a6 AB69     		ldr	r3, [r5, #24]
 1376              	.LVL265:
 1377              	.LBB342:
 1378              	.LBB343:
 1379              		.loc 2 498 0
 1380 00a8 1BBA     		rev	r3, r3
 1381              	.LVL266:
 1382              	.LBE343:
 1383              	.LBE342:
 1384              		.loc 1 555 0
 1385 00aa 0C93     		str	r3, [sp, #48]
 1386              	.LVL267:
 556:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 44


 557:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 1387              		.loc 1 557 0
 1388 00ac EB69     		ldr	r3, [r5, #28]
 1389              	.LVL268:
 1390              	.LBB344:
 1391              	.LBB345:
 1392              		.loc 2 498 0
 1393 00ae 1BBA     		rev	r3, r3
 1394              	.LVL269:
 1395              	.LBE345:
 1396              	.LBE344:
 1397              		.loc 1 557 0
 1398 00b0 0D93     		str	r3, [sp, #52]
 1399              	.LVL270:
 1400              	.L42:
 558:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 559:FWLIB/src/stm32f4xx_cryp_aes.c ****     default:
 560:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 561:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 562:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* CRYP Initialization Vectors */
 563:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 1401              		.loc 1 563 0
 1402 00b2 3368     		ldr	r3, [r6]
 1403              	.LVL271:
 1404              	.LBB346:
 1405              	.LBB347:
 1406              		.loc 2 498 0
 1407 00b4 1BBA     		rev	r3, r3
 1408              	.LVL272:
 1409              	.LBE347:
 1410              	.LBE346:
 1411              		.loc 1 563 0
 1412 00b6 0293     		str	r3, [sp, #8]
 1413              	.LVL273:
 564:FWLIB/src/stm32f4xx_cryp_aes.c ****   ivaddr+=4;
 565:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 1414              		.loc 1 565 0
 1415 00b8 7368     		ldr	r3, [r6, #4]
 1416              	.LVL274:
 1417              	.LBB348:
 1418              	.LBB349:
 1419              		.loc 2 498 0
 1420 00ba 1BBA     		rev	r3, r3
 1421              	.LVL275:
 1422              	.LBE349:
 1423              	.LBE348:
 1424              		.loc 1 565 0
 1425 00bc 0393     		str	r3, [sp, #12]
 1426              	.LVL276:
 566:FWLIB/src/stm32f4xx_cryp_aes.c ****   ivaddr+=4;
 567:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 1427              		.loc 1 567 0
 1428 00be B368     		ldr	r3, [r6, #8]
 1429              	.LVL277:
 1430              	.LBB350:
 1431              	.LBB351:
 1432              		.loc 2 498 0
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 45


 1433 00c0 1BBA     		rev	r3, r3
 1434              	.LVL278:
 1435              	.LBE351:
 1436              	.LBE350:
 1437              		.loc 1 567 0
 1438 00c2 0493     		str	r3, [sp, #16]
 1439              	.LVL279:
 568:FWLIB/src/stm32f4xx_cryp_aes.c ****   ivaddr+=4;
 569:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 1440              		.loc 1 569 0
 1441 00c4 F368     		ldr	r3, [r6, #12]
 1442              	.LVL280:
 1443              	.LBB352:
 1444              	.LBB353:
 1445              		.loc 2 498 0
 1446 00c6 1BBA     		rev	r3, r3
 1447              	.LVL281:
 1448              	.LBE353:
 1449              	.LBE352:
 1450              		.loc 1 569 0
 1451 00c8 0593     		str	r3, [sp, #20]
 570:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 571:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Key Initialisation */
 572:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 1452              		.loc 1 572 0
 1453 00ca 06A8     		add	r0, sp, #24
 1454 00cc FFF7FEFF 		bl	CRYP_KeyInit
 1455              	.LVL282:
 573:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 574:FWLIB/src/stm32f4xx_cryp_aes.c ****   /*------------------ AES Decryption ------------------*/
 575:FWLIB/src/stm32f4xx_cryp_aes.c ****   if(Mode == MODE_DECRYPT) /* AES decryption */
 1456              		.loc 1 575 0
 1457 00d0 B9F1000F 		cmp	r9, #0
 1458 00d4 02D1     		bne	.L46
 576:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 577:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Crypto Init for decryption process */
 578:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 1459              		.loc 1 578 0
 1460 00d6 0423     		movs	r3, #4
 1461 00d8 0E93     		str	r3, [sp, #56]
 1462 00da 01E0     		b	.L47
 1463              	.L46:
 579:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 580:FWLIB/src/stm32f4xx_cryp_aes.c ****   /*------------------ AES Encryption ------------------*/
 581:FWLIB/src/stm32f4xx_cryp_aes.c ****   else /* AES encryption */
 582:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 583:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Crypto Init for Encryption process */
 584:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 1464              		.loc 1 584 0
 1465 00dc 0023     		movs	r3, #0
 1466 00de 0E93     		str	r3, [sp, #56]
 1467              	.L47:
 585:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 586:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CTR;
 1468              		.loc 1 586 0
 1469 00e0 3023     		movs	r3, #48
 1470 00e2 0F93     		str	r3, [sp, #60]
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 46


 587:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 1471              		.loc 1 587 0
 1472 00e4 8023     		movs	r3, #128
 1473 00e6 1093     		str	r3, [sp, #64]
 588:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_Init(&AES_CRYP_InitStructure);
 1474              		.loc 1 588 0
 1475 00e8 0EA8     		add	r0, sp, #56
 1476 00ea FFF7FEFF 		bl	CRYP_Init
 1477              	.LVL283:
 589:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 590:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* CRYP Initialization Vectors */
 591:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_IVInit(&AES_CRYP_IVInitStructure);
 1478              		.loc 1 591 0
 1479 00ee 02A8     		add	r0, sp, #8
 1480 00f0 FFF7FEFF 		bl	CRYP_IVInit
 1481              	.LVL284:
 592:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 593:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Flush IN/OUT FIFOs */
 594:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_FIFOFlush();
 1482              		.loc 1 594 0
 1483 00f4 FFF7FEFF 		bl	CRYP_FIFOFlush
 1484              	.LVL285:
 595:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 596:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Enable Crypto processor */
 597:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_Cmd(ENABLE);
 1485              		.loc 1 597 0
 1486 00f8 0120     		movs	r0, #1
 1487 00fa FFF7FEFF 		bl	CRYP_Cmd
 1488              	.LVL286:
 598:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 599:FWLIB/src/stm32f4xx_cryp_aes.c ****   if(CRYP_GetCmdStatus() == DISABLE)
 1489              		.loc 1 599 0
 1490 00fe FFF7FEFF 		bl	CRYP_GetCmdStatus
 1491              	.LVL287:
 1492 0102 0028     		cmp	r0, #0
 1493 0104 38D0     		beq	.L55
 1494 0106 0025     		movs	r5, #0
 1495              	.LVL288:
 1496 0108 0126     		movs	r6, #1
 1497              	.LVL289:
 1498 010a 2CE0     		b	.L49
 1499              	.LVL290:
 1500              	.L54:
 600:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 601:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* The CRYP peripheral clock is not enabled or the device doesn't embed 
 602:FWLIB/src/stm32f4xx_cryp_aes.c ****        the CRYP peripheral (please check the device sales type. */
 603:FWLIB/src/stm32f4xx_cryp_aes.c ****     return(ERROR);
 604:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 605:FWLIB/src/stm32f4xx_cryp_aes.c ****   
 606:FWLIB/src/stm32f4xx_cryp_aes.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 607:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 608:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 609:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Write the Input block in the IN FIFO */
 610:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 1501              		.loc 1 610 0
 1502 010c 2068     		ldr	r0, [r4]
 1503 010e FFF7FEFF 		bl	CRYP_DataIn
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 47


 1504              	.LVL291:
 611:FWLIB/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 612:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 1505              		.loc 1 612 0
 1506 0112 6068     		ldr	r0, [r4, #4]
 1507 0114 FFF7FEFF 		bl	CRYP_DataIn
 1508              	.LVL292:
 613:FWLIB/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 614:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 1509              		.loc 1 614 0
 1510 0118 A068     		ldr	r0, [r4, #8]
 1511 011a FFF7FEFF 		bl	CRYP_DataIn
 1512              	.LVL293:
 615:FWLIB/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 616:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 1513              		.loc 1 616 0
 1514 011e E068     		ldr	r0, [r4, #12]
 1515 0120 FFF7FEFF 		bl	CRYP_DataIn
 1516              	.LVL294:
 617:FWLIB/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 1517              		.loc 1 617 0
 1518 0124 1034     		adds	r4, r4, #16
 1519              	.LVL295:
 618:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Wait until the complete message has been processed */
 619:FWLIB/src/stm32f4xx_cryp_aes.c ****     counter = 0;
 1520              		.loc 1 619 0
 1521 0126 0023     		movs	r3, #0
 1522 0128 0193     		str	r3, [sp, #4]
 1523              	.L51:
 620:FWLIB/src/stm32f4xx_cryp_aes.c ****     do
 621:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 622:FWLIB/src/stm32f4xx_cryp_aes.c ****       busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 1524              		.loc 1 622 0 discriminator 2
 1525 012a 1020     		movs	r0, #16
 1526 012c FFF7FEFF 		bl	CRYP_GetFlagStatus
 1527              	.LVL296:
 1528 0130 0246     		mov	r2, r0
 1529              	.LVL297:
 623:FWLIB/src/stm32f4xx_cryp_aes.c ****       counter++;
 1530              		.loc 1 623 0 discriminator 2
 1531 0132 019B     		ldr	r3, [sp, #4]
 1532 0134 0133     		adds	r3, r3, #1
 1533 0136 0193     		str	r3, [sp, #4]
 624:FWLIB/src/stm32f4xx_cryp_aes.c ****     }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 1534              		.loc 1 624 0 discriminator 2
 1535 0138 019B     		ldr	r3, [sp, #4]
 1536 013a B3F5803F 		cmp	r3, #65536
 1537 013e 01D0     		beq	.L50
 1538              		.loc 1 624 0 is_stmt 0 discriminator 1
 1539 0140 0028     		cmp	r0, #0
 1540 0142 F2D1     		bne	.L51
 1541              	.L50:
 625:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 626:FWLIB/src/stm32f4xx_cryp_aes.c ****     if (busystatus != RESET)
 1542              		.loc 1 626 0 is_stmt 1
 1543 0144 6AB9     		cbnz	r2, .L56
 627:FWLIB/src/stm32f4xx_cryp_aes.c ****    {
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 48


 628:FWLIB/src/stm32f4xx_cryp_aes.c ****        status = ERROR;
 629:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 630:FWLIB/src/stm32f4xx_cryp_aes.c ****     else
 631:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 632:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 633:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Read the Output block from the Output FIFO */
 634:FWLIB/src/stm32f4xx_cryp_aes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 1544              		.loc 1 634 0
 1545 0146 FFF7FEFF 		bl	CRYP_DataOut
 1546              	.LVL298:
 1547 014a 3860     		str	r0, [r7]
 1548              	.LVL299:
 635:FWLIB/src/stm32f4xx_cryp_aes.c ****       outputaddr+=4;
 636:FWLIB/src/stm32f4xx_cryp_aes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 1549              		.loc 1 636 0
 1550 014c FFF7FEFF 		bl	CRYP_DataOut
 1551              	.LVL300:
 1552 0150 7860     		str	r0, [r7, #4]
 1553              	.LVL301:
 637:FWLIB/src/stm32f4xx_cryp_aes.c ****       outputaddr+=4;
 638:FWLIB/src/stm32f4xx_cryp_aes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 1554              		.loc 1 638 0
 1555 0152 FFF7FEFF 		bl	CRYP_DataOut
 1556              	.LVL302:
 1557 0156 B860     		str	r0, [r7, #8]
 1558              	.LVL303:
 639:FWLIB/src/stm32f4xx_cryp_aes.c ****       outputaddr+=4;
 640:FWLIB/src/stm32f4xx_cryp_aes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 1559              		.loc 1 640 0
 1560 0158 FFF7FEFF 		bl	CRYP_DataOut
 1561              	.LVL304:
 1562 015c F860     		str	r0, [r7, #12]
 641:FWLIB/src/stm32f4xx_cryp_aes.c ****       outputaddr+=4;
 1563              		.loc 1 641 0
 1564 015e 1037     		adds	r7, r7, #16
 1565              	.LVL305:
 1566 0160 00E0     		b	.L52
 1567              	.LVL306:
 1568              	.L56:
 628:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 1569              		.loc 1 628 0
 1570 0162 0026     		movs	r6, #0
 1571              	.LVL307:
 1572              	.L52:
 606:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 1573              		.loc 1 606 0 discriminator 2
 1574 0164 1035     		adds	r5, r5, #16
 1575              	.LVL308:
 1576              	.L49:
 606:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 1577              		.loc 1 606 0 is_stmt 0 discriminator 1
 1578 0166 4545     		cmp	r5, r8
 1579 0168 01D2     		bcs	.L53
 606:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 1580              		.loc 1 606 0 discriminator 3
 1581 016a 002E     		cmp	r6, #0
 1582 016c CED1     		bne	.L54
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 49


 1583              	.L53:
 642:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 643:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 644:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Disable Crypto */
 645:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_Cmd(DISABLE);
 1584              		.loc 1 645 0 is_stmt 1
 1585 016e 0020     		movs	r0, #0
 1586 0170 FFF7FEFF 		bl	CRYP_Cmd
 1587              	.LVL309:
 646:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 647:FWLIB/src/stm32f4xx_cryp_aes.c ****   return status;
 1588              		.loc 1 647 0
 1589 0174 3046     		mov	r0, r6
 1590 0176 00E0     		b	.L48
 1591              	.LVL310:
 1592              	.L55:
 603:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 1593              		.loc 1 603 0
 1594 0178 0020     		movs	r0, #0
 1595              	.LVL311:
 1596              	.L48:
 648:FWLIB/src/stm32f4xx_cryp_aes.c **** }
 1597              		.loc 1 648 0
 1598 017a 12B0     		add	sp, sp, #72
 1599              	.LCFI8:
 1600              		.cfi_def_cfa_offset 32
 1601              		@ sp needed
 1602 017c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1603              		.cfi_endproc
 1604              	.LFE125:
 1606              		.section	.text.CRYP_AES_GCM,"ax",%progbits
 1607              		.align	2
 1608              		.global	CRYP_AES_GCM
 1609              		.thumb
 1610              		.thumb_func
 1612              	CRYP_AES_GCM:
 1613              	.LFB126:
 649:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 650:FWLIB/src/stm32f4xx_cryp_aes.c **** /**
 651:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @brief  Encrypt and decrypt using AES in GCM Mode. The GCM and CCM modes
 652:FWLIB/src/stm32f4xx_cryp_aes.c ****   *         are available only on STM32F437x Devices.
 653:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Mode: encryption or decryption Mode.
 654:FWLIB/src/stm32f4xx_cryp_aes.c ****   *          This parameter can be one of the following values:
 655:FWLIB/src/stm32f4xx_cryp_aes.c ****   *            @arg MODE_ENCRYPT: Encryption
 656:FWLIB/src/stm32f4xx_cryp_aes.c ****   *            @arg MODE_DECRYPT: Decryption
 657:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  InitVectors: Initialisation Vectors used for AES algorithm.
 658:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Key: Key used for AES algorithm.
 659:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Keysize: length of the Key, must be a 128, 192 or 256.
 660:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Input: pointer to the Input buffer.
 661:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Ilength: length of the Input buffer in bytes, must be a multiple of 16.
 662:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Header: pointer to the header buffer.
 663:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Hlength: length of the header buffer in bytes, must be a multiple of 16.  
 664:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Output: pointer to the returned buffer.
 665:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  AuthTAG: pointer to the authentication TAG buffer.
 666:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @retval An ErrorStatus enumeration value:
 667:FWLIB/src/stm32f4xx_cryp_aes.c ****   *          - SUCCESS: Operation done
 668:FWLIB/src/stm32f4xx_cryp_aes.c ****   *          - ERROR: Operation failed
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 50


 669:FWLIB/src/stm32f4xx_cryp_aes.c ****   */
 670:FWLIB/src/stm32f4xx_cryp_aes.c **** ErrorStatus CRYP_AES_GCM(uint8_t Mode, uint8_t InitVectors[16],
 671:FWLIB/src/stm32f4xx_cryp_aes.c ****                          uint8_t *Key, uint16_t Keysize,
 672:FWLIB/src/stm32f4xx_cryp_aes.c ****                          uint8_t *Input, uint32_t ILength,
 673:FWLIB/src/stm32f4xx_cryp_aes.c ****                          uint8_t *Header, uint32_t HLength,
 674:FWLIB/src/stm32f4xx_cryp_aes.c ****                          uint8_t *Output, uint8_t *AuthTAG)
 675:FWLIB/src/stm32f4xx_cryp_aes.c **** {
 1614              		.loc 1 675 0
 1615              		.cfi_startproc
 1616              		@ args = 24, pretend = 0, frame = 88
 1617              		@ frame_needed = 0, uses_anonymous_args = 0
 1618              	.LVL312:
 1619 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1620              	.LCFI9:
 1621              		.cfi_def_cfa_offset 36
 1622              		.cfi_offset 4, -36
 1623              		.cfi_offset 5, -32
 1624              		.cfi_offset 6, -28
 1625              		.cfi_offset 7, -24
 1626              		.cfi_offset 8, -20
 1627              		.cfi_offset 9, -16
 1628              		.cfi_offset 10, -12
 1629              		.cfi_offset 11, -8
 1630              		.cfi_offset 14, -4
 1631 0004 97B0     		sub	sp, sp, #92
 1632              	.LCFI10:
 1633              		.cfi_def_cfa_offset 128
 1634 0006 0190     		str	r0, [sp, #4]
 1635 0008 8946     		mov	r9, r1
 1636 000a 9046     		mov	r8, r2
 1637 000c 9B46     		mov	fp, r3
 1638 000e 219F     		ldr	r7, [sp, #132]
 1639 0010 DDF88CA0 		ldr	r10, [sp, #140]
 676:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_InitTypeDef AES_CRYP_InitStructure;
 677:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
 678:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
 679:FWLIB/src/stm32f4xx_cryp_aes.c ****   __IO uint32_t counter = 0;
 1640              		.loc 1 679 0
 1641 0014 0023     		movs	r3, #0
 1642              	.LVL313:
 1643 0016 0593     		str	r3, [sp, #20]
 1644              	.LVL314:
 680:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t busystatus = 0;
 681:FWLIB/src/stm32f4xx_cryp_aes.c ****   ErrorStatus status = SUCCESS;
 682:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 683:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t inputaddr  = (uint32_t)Input;
 1645              		.loc 1 683 0
 1646 0018 209C     		ldr	r4, [sp, #128]
 1647              	.LVL315:
 684:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t outputaddr = (uint32_t)Output;
 1648              		.loc 1 684 0
 1649 001a 249E     		ldr	r6, [sp, #144]
 1650              	.LVL316:
 685:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t ivaddr     = (uint32_t)InitVectors;
 686:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t headeraddr = (uint32_t)Header;
 1651              		.loc 1 686 0
 1652 001c 229D     		ldr	r5, [sp, #136]
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 51


 1653              	.LVL317:
 687:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t tagaddr = (uint32_t)AuthTAG;
 688:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint64_t headerlength = HLength * 8;/* header length in bits */
 1654              		.loc 1 688 0
 1655 001e 4FEACA03 		lsl	r3, r10, #3
 1656 0022 0293     		str	r3, [sp, #8]
 1657              	.LVL318:
 689:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint64_t inputlength = ILength * 8;/* input length in bits */
 1658              		.loc 1 689 0
 1659 0024 FB00     		lsls	r3, r7, #3
 1660              	.LVL319:
 1661 0026 0393     		str	r3, [sp, #12]
 1662              	.LVL320:
 690:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t loopcounter = 0;
 691:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 692:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Crypto structures initialisation*/
 693:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 1663              		.loc 1 693 0
 1664 0028 0AA8     		add	r0, sp, #40
 1665              	.LVL321:
 1666 002a FFF7FEFF 		bl	CRYP_KeyStructInit
 1667              	.LVL322:
 694:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 695:FWLIB/src/stm32f4xx_cryp_aes.c ****   switch(Keysize)
 1668              		.loc 1 695 0
 1669 002e BBF1C00F 		cmp	fp, #192
 1670 0032 18D0     		beq	.L60
 1671 0034 BBF5807F 		cmp	fp, #256
 1672 0038 31D0     		beq	.L61
 1673 003a BBF1800F 		cmp	fp, #128
 1674 003e 51D1     		bne	.L59
 696:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 697:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 128:
 698:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 1675              		.loc 1 698 0
 1676 0040 0023     		movs	r3, #0
 1677 0042 1593     		str	r3, [sp, #84]
 699:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 1678              		.loc 1 699 0
 1679 0044 D8F80030 		ldr	r3, [r8]
 1680              	.LVL323:
 1681              	.LBB354:
 1682              	.LBB355:
 1683              		.loc 2 498 0
 1684 0048 1BBA     		rev	r3, r3
 1685              	.LVL324:
 1686              	.LBE355:
 1687              	.LBE354:
 1688              		.loc 1 699 0
 1689 004a 0E93     		str	r3, [sp, #56]
 1690              	.LVL325:
 700:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 701:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 1691              		.loc 1 701 0
 1692 004c D8F80430 		ldr	r3, [r8, #4]
 1693              	.LVL326:
 1694              	.LBB356:
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 52


 1695              	.LBB357:
 1696              		.loc 2 498 0
 1697 0050 1BBA     		rev	r3, r3
 1698              	.LVL327:
 1699              	.LBE357:
 1700              	.LBE356:
 1701              		.loc 1 701 0
 1702 0052 0F93     		str	r3, [sp, #60]
 1703              	.LVL328:
 702:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 703:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 1704              		.loc 1 703 0
 1705 0054 D8F80830 		ldr	r3, [r8, #8]
 1706              	.LVL329:
 1707              	.LBB358:
 1708              	.LBB359:
 1709              		.loc 2 498 0
 1710 0058 1BBA     		rev	r3, r3
 1711              	.LVL330:
 1712              	.LBE359:
 1713              	.LBE358:
 1714              		.loc 1 703 0
 1715 005a 1093     		str	r3, [sp, #64]
 1716              	.LVL331:
 704:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 705:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 1717              		.loc 1 705 0
 1718 005c D8F80C30 		ldr	r3, [r8, #12]
 1719              	.LVL332:
 1720              	.LBB360:
 1721              	.LBB361:
 1722              		.loc 2 498 0
 1723 0060 1BBA     		rev	r3, r3
 1724              	.LVL333:
 1725              	.LBE361:
 1726              	.LBE360:
 1727              		.loc 1 705 0
 1728 0062 1193     		str	r3, [sp, #68]
 706:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 1729              		.loc 1 706 0
 1730 0064 3EE0     		b	.L59
 1731              	.LVL334:
 1732              	.L60:
 707:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 192:
 708:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 1733              		.loc 1 708 0
 1734 0066 4FF48073 		mov	r3, #256
 1735 006a 1593     		str	r3, [sp, #84]
 709:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 1736              		.loc 1 709 0
 1737 006c D8F80030 		ldr	r3, [r8]
 1738              	.LVL335:
 1739              	.LBB362:
 1740              	.LBB363:
 1741              		.loc 2 498 0
 1742 0070 1BBA     		rev	r3, r3
 1743              	.LVL336:
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 53


 1744              	.LBE363:
 1745              	.LBE362:
 1746              		.loc 1 709 0
 1747 0072 0C93     		str	r3, [sp, #48]
 1748              	.LVL337:
 710:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 711:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 1749              		.loc 1 711 0
 1750 0074 D8F80430 		ldr	r3, [r8, #4]
 1751              	.LVL338:
 1752              	.LBB364:
 1753              	.LBB365:
 1754              		.loc 2 498 0
 1755 0078 1BBA     		rev	r3, r3
 1756              	.LVL339:
 1757              	.LBE365:
 1758              	.LBE364:
 1759              		.loc 1 711 0
 1760 007a 0D93     		str	r3, [sp, #52]
 1761              	.LVL340:
 712:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 713:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 1762              		.loc 1 713 0
 1763 007c D8F80830 		ldr	r3, [r8, #8]
 1764              	.LVL341:
 1765              	.LBB366:
 1766              	.LBB367:
 1767              		.loc 2 498 0
 1768 0080 1BBA     		rev	r3, r3
 1769              	.LVL342:
 1770              	.LBE367:
 1771              	.LBE366:
 1772              		.loc 1 713 0
 1773 0082 0E93     		str	r3, [sp, #56]
 1774              	.LVL343:
 714:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 715:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 1775              		.loc 1 715 0
 1776 0084 D8F80C30 		ldr	r3, [r8, #12]
 1777              	.LVL344:
 1778              	.LBB368:
 1779              	.LBB369:
 1780              		.loc 2 498 0
 1781 0088 1BBA     		rev	r3, r3
 1782              	.LVL345:
 1783              	.LBE369:
 1784              	.LBE368:
 1785              		.loc 1 715 0
 1786 008a 0F93     		str	r3, [sp, #60]
 1787              	.LVL346:
 716:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 717:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 1788              		.loc 1 717 0
 1789 008c D8F81030 		ldr	r3, [r8, #16]
 1790              	.LVL347:
 1791              	.LBB370:
 1792              	.LBB371:
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 54


 1793              		.loc 2 498 0
 1794 0090 1BBA     		rev	r3, r3
 1795              	.LVL348:
 1796              	.LBE371:
 1797              	.LBE370:
 1798              		.loc 1 717 0
 1799 0092 1093     		str	r3, [sp, #64]
 1800              	.LVL349:
 718:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 719:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 1801              		.loc 1 719 0
 1802 0094 D8F81430 		ldr	r3, [r8, #20]
 1803              	.LVL350:
 1804              	.LBB372:
 1805              	.LBB373:
 1806              		.loc 2 498 0
 1807 0098 1BBA     		rev	r3, r3
 1808              	.LVL351:
 1809              	.LBE373:
 1810              	.LBE372:
 1811              		.loc 1 719 0
 1812 009a 1193     		str	r3, [sp, #68]
 720:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 1813              		.loc 1 720 0
 1814 009c 22E0     		b	.L59
 1815              	.LVL352:
 1816              	.L61:
 721:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 256:
 722:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 1817              		.loc 1 722 0
 1818 009e 4FF40073 		mov	r3, #512
 1819 00a2 1593     		str	r3, [sp, #84]
 723:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 1820              		.loc 1 723 0
 1821 00a4 D8F80030 		ldr	r3, [r8]
 1822              	.LVL353:
 1823              	.LBB374:
 1824              	.LBB375:
 1825              		.loc 2 498 0
 1826 00a8 1BBA     		rev	r3, r3
 1827              	.LVL354:
 1828              	.LBE375:
 1829              	.LBE374:
 1830              		.loc 1 723 0
 1831 00aa 0A93     		str	r3, [sp, #40]
 1832              	.LVL355:
 724:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 725:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 1833              		.loc 1 725 0
 1834 00ac D8F80430 		ldr	r3, [r8, #4]
 1835              	.LVL356:
 1836              	.LBB376:
 1837              	.LBB377:
 1838              		.loc 2 498 0
 1839 00b0 1BBA     		rev	r3, r3
 1840              	.LVL357:
 1841              	.LBE377:
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 55


 1842              	.LBE376:
 1843              		.loc 1 725 0
 1844 00b2 0B93     		str	r3, [sp, #44]
 1845              	.LVL358:
 726:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 727:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 1846              		.loc 1 727 0
 1847 00b4 D8F80830 		ldr	r3, [r8, #8]
 1848              	.LVL359:
 1849              	.LBB378:
 1850              	.LBB379:
 1851              		.loc 2 498 0
 1852 00b8 1BBA     		rev	r3, r3
 1853              	.LVL360:
 1854              	.LBE379:
 1855              	.LBE378:
 1856              		.loc 1 727 0
 1857 00ba 0C93     		str	r3, [sp, #48]
 1858              	.LVL361:
 728:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 729:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 1859              		.loc 1 729 0
 1860 00bc D8F80C30 		ldr	r3, [r8, #12]
 1861              	.LVL362:
 1862              	.LBB380:
 1863              	.LBB381:
 1864              		.loc 2 498 0
 1865 00c0 1BBA     		rev	r3, r3
 1866              	.LVL363:
 1867              	.LBE381:
 1868              	.LBE380:
 1869              		.loc 1 729 0
 1870 00c2 0D93     		str	r3, [sp, #52]
 1871              	.LVL364:
 730:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 731:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 1872              		.loc 1 731 0
 1873 00c4 D8F81030 		ldr	r3, [r8, #16]
 1874              	.LVL365:
 1875              	.LBB382:
 1876              	.LBB383:
 1877              		.loc 2 498 0
 1878 00c8 1BBA     		rev	r3, r3
 1879              	.LVL366:
 1880              	.LBE383:
 1881              	.LBE382:
 1882              		.loc 1 731 0
 1883 00ca 0E93     		str	r3, [sp, #56]
 1884              	.LVL367:
 732:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 733:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 1885              		.loc 1 733 0
 1886 00cc D8F81430 		ldr	r3, [r8, #20]
 1887              	.LVL368:
 1888              	.LBB384:
 1889              	.LBB385:
 1890              		.loc 2 498 0
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 56


 1891 00d0 1BBA     		rev	r3, r3
 1892              	.LVL369:
 1893              	.LBE385:
 1894              	.LBE384:
 1895              		.loc 1 733 0
 1896 00d2 0F93     		str	r3, [sp, #60]
 1897              	.LVL370:
 734:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 735:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 1898              		.loc 1 735 0
 1899 00d4 D8F81830 		ldr	r3, [r8, #24]
 1900              	.LVL371:
 1901              	.LBB386:
 1902              	.LBB387:
 1903              		.loc 2 498 0
 1904 00d8 1BBA     		rev	r3, r3
 1905              	.LVL372:
 1906              	.LBE387:
 1907              	.LBE386:
 1908              		.loc 1 735 0
 1909 00da 1093     		str	r3, [sp, #64]
 1910              	.LVL373:
 736:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 737:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 1911              		.loc 1 737 0
 1912 00dc D8F81C30 		ldr	r3, [r8, #28]
 1913              	.LVL374:
 1914              	.LBB388:
 1915              	.LBB389:
 1916              		.loc 2 498 0
 1917 00e0 1BBA     		rev	r3, r3
 1918              	.LVL375:
 1919              	.LBE389:
 1920              	.LBE388:
 1921              		.loc 1 737 0
 1922 00e2 1193     		str	r3, [sp, #68]
 1923              	.LVL376:
 1924              	.L59:
 738:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 739:FWLIB/src/stm32f4xx_cryp_aes.c ****     default:
 740:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 741:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 742:FWLIB/src/stm32f4xx_cryp_aes.c ****   
 743:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* CRYP Initialization Vectors */
 744:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 1925              		.loc 1 744 0
 1926 00e4 D9F80030 		ldr	r3, [r9]
 1927              	.LVL377:
 1928              	.LBB390:
 1929              	.LBB391:
 1930              		.loc 2 498 0
 1931 00e8 1BBA     		rev	r3, r3
 1932              	.LVL378:
 1933              	.LBE391:
 1934              	.LBE390:
 1935              		.loc 1 744 0
 1936 00ea 0693     		str	r3, [sp, #24]
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 57


 1937              	.LVL379:
 745:FWLIB/src/stm32f4xx_cryp_aes.c ****   ivaddr+=4;
 746:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 1938              		.loc 1 746 0
 1939 00ec D9F80430 		ldr	r3, [r9, #4]
 1940              	.LVL380:
 1941              	.LBB392:
 1942              	.LBB393:
 1943              		.loc 2 498 0
 1944 00f0 1BBA     		rev	r3, r3
 1945              	.LVL381:
 1946              	.LBE393:
 1947              	.LBE392:
 1948              		.loc 1 746 0
 1949 00f2 0793     		str	r3, [sp, #28]
 1950              	.LVL382:
 747:FWLIB/src/stm32f4xx_cryp_aes.c ****   ivaddr+=4;
 748:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 1951              		.loc 1 748 0
 1952 00f4 D9F80830 		ldr	r3, [r9, #8]
 1953              	.LVL383:
 1954              	.LBB394:
 1955              	.LBB395:
 1956              		.loc 2 498 0
 1957 00f8 1BBA     		rev	r3, r3
 1958              	.LVL384:
 1959              	.LBE395:
 1960              	.LBE394:
 1961              		.loc 1 748 0
 1962 00fa 0893     		str	r3, [sp, #32]
 1963              	.LVL385:
 749:FWLIB/src/stm32f4xx_cryp_aes.c ****   ivaddr+=4;
 750:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 1964              		.loc 1 750 0
 1965 00fc D9F80C30 		ldr	r3, [r9, #12]
 1966              	.LVL386:
 1967              	.LBB396:
 1968              	.LBB397:
 1969              		.loc 2 498 0
 1970 0100 1BBA     		rev	r3, r3
 1971              	.LVL387:
 1972              	.LBE397:
 1973              	.LBE396:
 1974              		.loc 1 750 0
 1975 0102 0993     		str	r3, [sp, #36]
 751:FWLIB/src/stm32f4xx_cryp_aes.c ****   
 752:FWLIB/src/stm32f4xx_cryp_aes.c ****   /*------------------ AES Encryption ------------------*/
 753:FWLIB/src/stm32f4xx_cryp_aes.c ****   if(Mode == MODE_ENCRYPT) /* AES encryption */
 1976              		.loc 1 753 0
 1977 0104 019B     		ldr	r3, [sp, #4]
 1978 0106 012B     		cmp	r3, #1
 1979 0108 40F0D880 		bne	.L63
 754:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 755:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Flush IN/OUT FIFOs */
 756:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_FIFOFlush();
 1980              		.loc 1 756 0
 1981 010c FFF7FEFF 		bl	CRYP_FIFOFlush
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 58


 1982              	.LVL388:
 757:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 758:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Key Initialisation */
 759:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 1983              		.loc 1 759 0
 1984 0110 0AA8     		add	r0, sp, #40
 1985 0112 FFF7FEFF 		bl	CRYP_KeyInit
 1986              	.LVL389:
 760:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 761:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* CRYP Initialization Vectors */
 762:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_IVInit(&AES_CRYP_IVInitStructure);
 1987              		.loc 1 762 0
 1988 0116 06A8     		add	r0, sp, #24
 1989 0118 FFF7FEFF 		bl	CRYP_IVInit
 1990              	.LVL390:
 763:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 764:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Crypto Init for Key preparation for decryption process */
 765:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 1991              		.loc 1 765 0
 1992 011c 4FF00008 		mov	r8, #0
 1993              	.LVL391:
 1994 0120 CDF84880 		str	r8, [sp, #72]
 766:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_GCM;
 1995              		.loc 1 766 0
 1996 0124 4FF40023 		mov	r3, #524288
 1997 0128 1393     		str	r3, [sp, #76]
 767:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 1998              		.loc 1 767 0
 1999 012a 8023     		movs	r3, #128
 2000 012c 1493     		str	r3, [sp, #80]
 768:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_Init(&AES_CRYP_InitStructure);
 2001              		.loc 1 768 0
 2002 012e 12A8     		add	r0, sp, #72
 2003 0130 FFF7FEFF 		bl	CRYP_Init
 2004              	.LVL392:
 769:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 770:FWLIB/src/stm32f4xx_cryp_aes.c ****     /***************************** Init phase *********************************/
 771:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Select init phase */
 772:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_PhaseConfig(CRYP_Phase_Init);
 2005              		.loc 1 772 0
 2006 0134 4046     		mov	r0, r8
 2007 0136 FFF7FEFF 		bl	CRYP_PhaseConfig
 2008              	.LVL393:
 773:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 774:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Enable Crypto processor */
 775:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_Cmd(ENABLE);
 2009              		.loc 1 775 0
 2010 013a 0120     		movs	r0, #1
 2011 013c FFF7FEFF 		bl	CRYP_Cmd
 2012              	.LVL394:
 2013              	.L64:
 776:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 777:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Wait for CRYPEN bit to be 0 */
 778:FWLIB/src/stm32f4xx_cryp_aes.c ****     while(CRYP_GetCmdStatus() == ENABLE)
 2014              		.loc 1 778 0 discriminator 1
 2015 0140 FFF7FEFF 		bl	CRYP_GetCmdStatus
 2016              	.LVL395:
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 59


 2017 0144 0128     		cmp	r0, #1
 2018 0146 FBD0     		beq	.L64
 779:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 780:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 781:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 782:FWLIB/src/stm32f4xx_cryp_aes.c ****     /***************************** header phase *******************************/
 783:FWLIB/src/stm32f4xx_cryp_aes.c ****     if(HLength != 0)
 2019              		.loc 1 783 0
 2020 0148 BAF1000F 		cmp	r10, #0
 2021 014c 36D0     		beq	.L94
 784:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 785:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Select header phase */
 786:FWLIB/src/stm32f4xx_cryp_aes.c ****       CRYP_PhaseConfig(CRYP_Phase_Header);
 2022              		.loc 1 786 0
 2023 014e 4FF48030 		mov	r0, #65536
 2024 0152 FFF7FEFF 		bl	CRYP_PhaseConfig
 2025              	.LVL396:
 787:FWLIB/src/stm32f4xx_cryp_aes.c ****       
 788:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Enable Crypto processor */
 789:FWLIB/src/stm32f4xx_cryp_aes.c ****       CRYP_Cmd(ENABLE);
 2026              		.loc 1 789 0
 2027 0156 0120     		movs	r0, #1
 2028 0158 FFF7FEFF 		bl	CRYP_Cmd
 2029              	.LVL397:
 790:FWLIB/src/stm32f4xx_cryp_aes.c ****       
 791:FWLIB/src/stm32f4xx_cryp_aes.c ****       if(CRYP_GetCmdStatus() == DISABLE)
 2030              		.loc 1 791 0
 2031 015c FFF7FEFF 		bl	CRYP_GetCmdStatus
 2032              	.LVL398:
 2033 0160 0028     		cmp	r0, #0
 2034 0162 00F08281 		beq	.L95
 2035 0166 4FF00008 		mov	r8, #0
 2036 016a 13E0     		b	.L67
 2037              	.LVL399:
 2038              	.L68:
 792:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 793:FWLIB/src/stm32f4xx_cryp_aes.c ****          /* The CRYP peripheral clock is not enabled or the device doesn't embed 
 794:FWLIB/src/stm32f4xx_cryp_aes.c ****             the CRYP peripheral (please check the device sales type. */
 795:FWLIB/src/stm32f4xx_cryp_aes.c ****          return(ERROR);
 796:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 797:FWLIB/src/stm32f4xx_cryp_aes.c ****       
 798:FWLIB/src/stm32f4xx_cryp_aes.c ****       for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
 799:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 800:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Wait until the IFEM flag is reset */
 801:FWLIB/src/stm32f4xx_cryp_aes.c ****         while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 2039              		.loc 1 801 0 discriminator 1
 2040 016c 0120     		movs	r0, #1
 2041 016e FFF7FEFF 		bl	CRYP_GetFlagStatus
 2042              	.LVL400:
 2043 0172 0028     		cmp	r0, #0
 2044 0174 FAD0     		beq	.L68
 802:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
 803:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
 804:FWLIB/src/stm32f4xx_cryp_aes.c ****         
 805:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Write the Input block in the IN FIFO */
 806:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(headeraddr));
 2045              		.loc 1 806 0 discriminator 2
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 60


 2046 0176 2868     		ldr	r0, [r5]
 2047 0178 FFF7FEFF 		bl	CRYP_DataIn
 2048              	.LVL401:
 807:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
 808:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(headeraddr));
 2049              		.loc 1 808 0 discriminator 2
 2050 017c 6868     		ldr	r0, [r5, #4]
 2051 017e FFF7FEFF 		bl	CRYP_DataIn
 2052              	.LVL402:
 809:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
 810:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(headeraddr));
 2053              		.loc 1 810 0 discriminator 2
 2054 0182 A868     		ldr	r0, [r5, #8]
 2055 0184 FFF7FEFF 		bl	CRYP_DataIn
 2056              	.LVL403:
 811:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
 812:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(headeraddr));
 2057              		.loc 1 812 0 discriminator 2
 2058 0188 E868     		ldr	r0, [r5, #12]
 2059 018a FFF7FEFF 		bl	CRYP_DataIn
 2060              	.LVL404:
 813:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
 2061              		.loc 1 813 0 discriminator 2
 2062 018e 1035     		adds	r5, r5, #16
 2063              	.LVL405:
 798:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 2064              		.loc 1 798 0 discriminator 2
 2065 0190 08F11008 		add	r8, r8, #16
 2066              	.LVL406:
 2067              	.L67:
 798:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 2068              		.loc 1 798 0 is_stmt 0 discriminator 1
 2069 0194 D045     		cmp	r8, r10
 2070 0196 E9D3     		bcc	.L68
 814:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 815:FWLIB/src/stm32f4xx_cryp_aes.c ****       
 816:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Wait until the complete message has been processed */
 817:FWLIB/src/stm32f4xx_cryp_aes.c ****       counter = 0;
 2071              		.loc 1 817 0 is_stmt 1
 2072 0198 0023     		movs	r3, #0
 2073 019a 0593     		str	r3, [sp, #20]
 2074              	.LVL407:
 2075              	.L70:
 818:FWLIB/src/stm32f4xx_cryp_aes.c ****       do
 819:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 820:FWLIB/src/stm32f4xx_cryp_aes.c ****         busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 2076              		.loc 1 820 0 discriminator 2
 2077 019c 1020     		movs	r0, #16
 2078 019e FFF7FEFF 		bl	CRYP_GetFlagStatus
 2079              	.LVL408:
 2080 01a2 0246     		mov	r2, r0
 2081              	.LVL409:
 821:FWLIB/src/stm32f4xx_cryp_aes.c ****         counter++;
 2082              		.loc 1 821 0 discriminator 2
 2083 01a4 059B     		ldr	r3, [sp, #20]
 2084 01a6 0133     		adds	r3, r3, #1
 2085 01a8 0593     		str	r3, [sp, #20]
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 61


 822:FWLIB/src/stm32f4xx_cryp_aes.c ****       }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 2086              		.loc 1 822 0 discriminator 2
 2087 01aa 059B     		ldr	r3, [sp, #20]
 2088 01ac B3F5803F 		cmp	r3, #65536
 2089 01b0 01D0     		beq	.L69
 2090              		.loc 1 822 0 is_stmt 0 discriminator 1
 2091 01b2 0028     		cmp	r0, #0
 2092 01b4 F2D1     		bne	.L70
 2093              	.L69:
 823:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 824:FWLIB/src/stm32f4xx_cryp_aes.c ****       if (busystatus != RESET)
 2094              		.loc 1 824 0 is_stmt 1
 2095 01b6 1AB9     		cbnz	r2, .L96
 681:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 2096              		.loc 1 681 0
 2097 01b8 0125     		movs	r5, #1
 2098              	.LVL410:
 2099 01ba 02E0     		b	.L65
 2100              	.LVL411:
 2101              	.L94:
 2102 01bc 0125     		movs	r5, #1
 2103              	.LVL412:
 2104 01be 00E0     		b	.L65
 2105              	.LVL413:
 2106              	.L96:
 825:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 826:FWLIB/src/stm32f4xx_cryp_aes.c ****         status = ERROR;
 2107              		.loc 1 826 0
 2108 01c0 0025     		movs	r5, #0
 2109              	.LVL414:
 2110              	.L65:
 827:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 828:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 829:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 830:FWLIB/src/stm32f4xx_cryp_aes.c ****     /**************************** payload phase *******************************/
 831:FWLIB/src/stm32f4xx_cryp_aes.c ****     if(ILength != 0)
 2111              		.loc 1 831 0
 2112 01c2 002F     		cmp	r7, #0
 2113 01c4 4AD0     		beq	.L71
 832:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 833:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Select payload phase */
 834:FWLIB/src/stm32f4xx_cryp_aes.c ****       CRYP_PhaseConfig(CRYP_Phase_Payload);
 2114              		.loc 1 834 0
 2115 01c6 4FF40030 		mov	r0, #131072
 2116 01ca FFF7FEFF 		bl	CRYP_PhaseConfig
 2117              	.LVL415:
 835:FWLIB/src/stm32f4xx_cryp_aes.c ****       
 836:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Enable Crypto processor */
 837:FWLIB/src/stm32f4xx_cryp_aes.c ****       CRYP_Cmd(ENABLE);
 2118              		.loc 1 837 0
 2119 01ce 0120     		movs	r0, #1
 2120 01d0 FFF7FEFF 		bl	CRYP_Cmd
 2121              	.LVL416:
 838:FWLIB/src/stm32f4xx_cryp_aes.c ****       
 839:FWLIB/src/stm32f4xx_cryp_aes.c ****       if(CRYP_GetCmdStatus() == DISABLE)
 2122              		.loc 1 839 0
 2123 01d4 FFF7FEFF 		bl	CRYP_GetCmdStatus
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 62


 2124              	.LVL417:
 2125 01d8 0028     		cmp	r0, #0
 2126 01da 00F04881 		beq	.L97
 2127 01de 4FF00008 		mov	r8, #0
 2128              	.LVL418:
 2129 01e2 37E0     		b	.L72
 2130              	.LVL419:
 2131              	.L73:
 840:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 841:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* The CRYP peripheral clock is not enabled or the device doesn't embed 
 842:FWLIB/src/stm32f4xx_cryp_aes.c ****            the CRYP peripheral (please check the device sales type. */
 843:FWLIB/src/stm32f4xx_cryp_aes.c ****         return(ERROR);
 844:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 845:FWLIB/src/stm32f4xx_cryp_aes.c ****       
 846:FWLIB/src/stm32f4xx_cryp_aes.c ****       for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 847:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 848:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Wait until the IFEM flag is reset */
 849:FWLIB/src/stm32f4xx_cryp_aes.c ****         while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 2132              		.loc 1 849 0 discriminator 1
 2133 01e4 0120     		movs	r0, #1
 2134 01e6 FFF7FEFF 		bl	CRYP_GetFlagStatus
 2135              	.LVL420:
 2136 01ea 0028     		cmp	r0, #0
 2137 01ec FAD0     		beq	.L73
 850:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
 851:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
 852:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Write the Input block in the IN FIFO */
 853:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(inputaddr));
 2138              		.loc 1 853 0
 2139 01ee 2068     		ldr	r0, [r4]
 2140 01f0 FFF7FEFF 		bl	CRYP_DataIn
 2141              	.LVL421:
 854:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
 855:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(inputaddr));
 2142              		.loc 1 855 0
 2143 01f4 6068     		ldr	r0, [r4, #4]
 2144 01f6 FFF7FEFF 		bl	CRYP_DataIn
 2145              	.LVL422:
 856:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
 857:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(inputaddr));
 2146              		.loc 1 857 0
 2147 01fa A068     		ldr	r0, [r4, #8]
 2148 01fc FFF7FEFF 		bl	CRYP_DataIn
 2149              	.LVL423:
 858:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
 859:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(inputaddr));
 2150              		.loc 1 859 0
 2151 0200 E068     		ldr	r0, [r4, #12]
 2152 0202 FFF7FEFF 		bl	CRYP_DataIn
 2153              	.LVL424:
 860:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
 2154              		.loc 1 860 0
 2155 0206 1034     		adds	r4, r4, #16
 2156              	.LVL425:
 861:FWLIB/src/stm32f4xx_cryp_aes.c ****         
 862:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Wait until the complete message has been processed */
 863:FWLIB/src/stm32f4xx_cryp_aes.c ****         counter = 0;
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 63


 2157              		.loc 1 863 0
 2158 0208 0023     		movs	r3, #0
 2159              	.LVL426:
 2160 020a 0593     		str	r3, [sp, #20]
 2161              	.LVL427:
 2162              	.L75:
 864:FWLIB/src/stm32f4xx_cryp_aes.c ****         do
 865:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
 866:FWLIB/src/stm32f4xx_cryp_aes.c ****           busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 2163              		.loc 1 866 0 discriminator 2
 2164 020c 1020     		movs	r0, #16
 2165 020e FFF7FEFF 		bl	CRYP_GetFlagStatus
 2166              	.LVL428:
 2167 0212 0246     		mov	r2, r0
 2168              	.LVL429:
 867:FWLIB/src/stm32f4xx_cryp_aes.c ****           counter++;
 2169              		.loc 1 867 0 discriminator 2
 2170 0214 059B     		ldr	r3, [sp, #20]
 2171 0216 0133     		adds	r3, r3, #1
 2172 0218 0593     		str	r3, [sp, #20]
 868:FWLIB/src/stm32f4xx_cryp_aes.c ****         }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 2173              		.loc 1 868 0 discriminator 2
 2174 021a 059B     		ldr	r3, [sp, #20]
 2175 021c B3F5803F 		cmp	r3, #65536
 2176 0220 01D0     		beq	.L74
 2177              		.loc 1 868 0 is_stmt 0 discriminator 1
 2178 0222 0028     		cmp	r0, #0
 2179 0224 F2D1     		bne	.L75
 2180              	.L74:
 869:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 870:FWLIB/src/stm32f4xx_cryp_aes.c ****         if (busystatus != RESET)
 2181              		.loc 1 870 0 is_stmt 1
 2182 0226 92B9     		cbnz	r2, .L98
 2183              	.LVL430:
 2184              	.L77:
 871:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
 872:FWLIB/src/stm32f4xx_cryp_aes.c ****           status = ERROR;
 873:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
 874:FWLIB/src/stm32f4xx_cryp_aes.c ****         else
 875:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
 876:FWLIB/src/stm32f4xx_cryp_aes.c ****           /* Wait until the OFNE flag is reset */
 877:FWLIB/src/stm32f4xx_cryp_aes.c ****           while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 2185              		.loc 1 877 0 discriminator 1
 2186 0228 0420     		movs	r0, #4
 2187 022a FFF7FEFF 		bl	CRYP_GetFlagStatus
 2188              	.LVL431:
 2189 022e 0028     		cmp	r0, #0
 2190 0230 FAD0     		beq	.L77
 878:FWLIB/src/stm32f4xx_cryp_aes.c ****           {
 879:FWLIB/src/stm32f4xx_cryp_aes.c ****           }
 880:FWLIB/src/stm32f4xx_cryp_aes.c ****           
 881:FWLIB/src/stm32f4xx_cryp_aes.c ****           /* Read the Output block from the Output FIFO */
 882:FWLIB/src/stm32f4xx_cryp_aes.c ****           *(uint32_t*)(outputaddr) = CRYP_DataOut();
 2191              		.loc 1 882 0
 2192 0232 FFF7FEFF 		bl	CRYP_DataOut
 2193              	.LVL432:
 2194 0236 3060     		str	r0, [r6]
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 64


 2195              	.LVL433:
 883:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
 884:FWLIB/src/stm32f4xx_cryp_aes.c ****           *(uint32_t*)(outputaddr) = CRYP_DataOut();
 2196              		.loc 1 884 0
 2197 0238 FFF7FEFF 		bl	CRYP_DataOut
 2198              	.LVL434:
 2199 023c 7060     		str	r0, [r6, #4]
 2200              	.LVL435:
 885:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
 886:FWLIB/src/stm32f4xx_cryp_aes.c ****           *(uint32_t*)(outputaddr) = CRYP_DataOut();
 2201              		.loc 1 886 0
 2202 023e FFF7FEFF 		bl	CRYP_DataOut
 2203              	.LVL436:
 2204 0242 B060     		str	r0, [r6, #8]
 2205              	.LVL437:
 887:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
 888:FWLIB/src/stm32f4xx_cryp_aes.c ****           *(uint32_t*)(outputaddr) = CRYP_DataOut();
 2206              		.loc 1 888 0
 2207 0244 FFF7FEFF 		bl	CRYP_DataOut
 2208              	.LVL438:
 2209 0248 F060     		str	r0, [r6, #12]
 889:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
 2210              		.loc 1 889 0
 2211 024a 1036     		adds	r6, r6, #16
 2212              	.LVL439:
 2213 024c 00E0     		b	.L76
 2214              	.LVL440:
 2215              	.L98:
 872:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
 2216              		.loc 1 872 0
 2217 024e 0025     		movs	r5, #0
 2218              	.LVL441:
 2219              	.L76:
 846:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 2220              		.loc 1 846 0 discriminator 2
 2221 0250 08F11008 		add	r8, r8, #16
 2222              	.LVL442:
 2223              	.L72:
 846:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 2224              		.loc 1 846 0 is_stmt 0 discriminator 1
 2225 0254 B845     		cmp	r8, r7
 2226 0256 01D2     		bcs	.L71
 846:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 2227              		.loc 1 846 0 discriminator 3
 2228 0258 002D     		cmp	r5, #0
 2229 025a C3D1     		bne	.L73
 2230              	.LVL443:
 2231              	.L71:
 890:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
 891:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 892:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 893:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 894:FWLIB/src/stm32f4xx_cryp_aes.c ****     /***************************** final phase ********************************/
 895:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Select final phase */
 896:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_PhaseConfig(CRYP_Phase_Final);
 2232              		.loc 1 896 0 is_stmt 1
 2233 025c 4FF44030 		mov	r0, #196608
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 65


 2234 0260 FFF7FEFF 		bl	CRYP_PhaseConfig
 2235              	.LVL444:
 897:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 898:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Enable Crypto processor */
 899:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_Cmd(ENABLE);
 2236              		.loc 1 899 0
 2237 0264 0120     		movs	r0, #1
 2238 0266 FFF7FEFF 		bl	CRYP_Cmd
 2239              	.LVL445:
 900:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 901:FWLIB/src/stm32f4xx_cryp_aes.c ****     if(CRYP_GetCmdStatus() == DISABLE)
 2240              		.loc 1 901 0
 2241 026a FFF7FEFF 		bl	CRYP_GetCmdStatus
 2242              	.LVL446:
 2243 026e 0028     		cmp	r0, #0
 2244 0270 00F0FF80 		beq	.L99
 902:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 903:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* The CRYP peripheral clock is not enabled or the device doesn't embed 
 904:FWLIB/src/stm32f4xx_cryp_aes.c ****          the CRYP peripheral (please check the device sales type. */
 905:FWLIB/src/stm32f4xx_cryp_aes.c ****       return(ERROR);
 906:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 907:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 908:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Write number of bits concatenated with header in the IN FIFO */
 909:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(__REV(headerlength>>32));
 2245              		.loc 1 909 0
 2246 0274 0020     		movs	r0, #0
 2247              	.LVL447:
 2248 0276 FFF7FEFF 		bl	CRYP_DataIn
 2249              	.LVL448:
 910:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(__REV(headerlength));
 2250              		.loc 1 910 0
 2251 027a 029B     		ldr	r3, [sp, #8]
 2252 027c 18BA     		rev	r0, r3
 2253 027e FFF7FEFF 		bl	CRYP_DataIn
 2254              	.LVL449:
 911:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(__REV(inputlength>>32));
 2255              		.loc 1 911 0
 2256 0282 0020     		movs	r0, #0
 2257              	.LVL450:
 2258 0284 FFF7FEFF 		bl	CRYP_DataIn
 2259              	.LVL451:
 912:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(__REV(inputlength));
 2260              		.loc 1 912 0
 2261 0288 039B     		ldr	r3, [sp, #12]
 2262 028a 18BA     		rev	r0, r3
 2263 028c FFF7FEFF 		bl	CRYP_DataIn
 2264              	.LVL452:
 2265              	.L78:
 913:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Wait until the OFNE flag is reset */
 914:FWLIB/src/stm32f4xx_cryp_aes.c ****     while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 2266              		.loc 1 914 0 discriminator 1
 2267 0290 0420     		movs	r0, #4
 2268 0292 FFF7FEFF 		bl	CRYP_GetFlagStatus
 2269              	.LVL453:
 2270 0296 0028     		cmp	r0, #0
 2271 0298 FAD0     		beq	.L78
 915:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 66


 916:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 917:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 918:FWLIB/src/stm32f4xx_cryp_aes.c ****     tagaddr = (uint32_t)AuthTAG;
 919:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Read the Auth TAG in the IN FIFO */
 920:FWLIB/src/stm32f4xx_cryp_aes.c ****     *(uint32_t*)(tagaddr) = CRYP_DataOut();
 2272              		.loc 1 920 0
 2273 029a FFF7FEFF 		bl	CRYP_DataOut
 2274              	.LVL454:
 2275 029e 259B     		ldr	r3, [sp, #148]
 2276 02a0 1860     		str	r0, [r3]
 2277              	.LVL455:
 921:FWLIB/src/stm32f4xx_cryp_aes.c ****     tagaddr+=4;
 922:FWLIB/src/stm32f4xx_cryp_aes.c ****     *(uint32_t*)(tagaddr) = CRYP_DataOut();
 2278              		.loc 1 922 0
 2279 02a2 FFF7FEFF 		bl	CRYP_DataOut
 2280              	.LVL456:
 2281 02a6 259B     		ldr	r3, [sp, #148]
 2282 02a8 5860     		str	r0, [r3, #4]
 2283              	.LVL457:
 923:FWLIB/src/stm32f4xx_cryp_aes.c ****     tagaddr+=4;
 924:FWLIB/src/stm32f4xx_cryp_aes.c ****     *(uint32_t*)(tagaddr) = CRYP_DataOut();
 2284              		.loc 1 924 0
 2285 02aa FFF7FEFF 		bl	CRYP_DataOut
 2286              	.LVL458:
 2287 02ae 259B     		ldr	r3, [sp, #148]
 2288 02b0 9860     		str	r0, [r3, #8]
 2289              	.LVL459:
 925:FWLIB/src/stm32f4xx_cryp_aes.c ****     tagaddr+=4;
 926:FWLIB/src/stm32f4xx_cryp_aes.c ****     *(uint32_t*)(tagaddr) = CRYP_DataOut();
 2290              		.loc 1 926 0
 2291 02b2 FFF7FEFF 		bl	CRYP_DataOut
 2292              	.LVL460:
 2293 02b6 259B     		ldr	r3, [sp, #148]
 2294 02b8 D860     		str	r0, [r3, #12]
 2295              	.LVL461:
 2296 02ba D1E0     		b	.L79
 2297              	.LVL462:
 2298              	.L63:
 927:FWLIB/src/stm32f4xx_cryp_aes.c ****     tagaddr+=4;
 928:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 929:FWLIB/src/stm32f4xx_cryp_aes.c ****   /*------------------ AES Decryption ------------------*/
 930:FWLIB/src/stm32f4xx_cryp_aes.c ****   else /* AES decryption */
 931:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 932:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Flush IN/OUT FIFOs */
 933:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_FIFOFlush();
 2299              		.loc 1 933 0
 2300 02bc FFF7FEFF 		bl	CRYP_FIFOFlush
 2301              	.LVL463:
 934:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 935:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Key Initialisation */
 936:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 2302              		.loc 1 936 0
 2303 02c0 0AA8     		add	r0, sp, #40
 2304 02c2 FFF7FEFF 		bl	CRYP_KeyInit
 2305              	.LVL464:
 937:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 938:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* CRYP Initialization Vectors */
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 67


 939:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_IVInit(&AES_CRYP_IVInitStructure);
 2306              		.loc 1 939 0
 2307 02c6 06A8     		add	r0, sp, #24
 2308 02c8 FFF7FEFF 		bl	CRYP_IVInit
 2309              	.LVL465:
 940:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 941:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Crypto Init for Key preparation for decryption process */
 942:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 2310              		.loc 1 942 0
 2311 02cc 0423     		movs	r3, #4
 2312 02ce 1293     		str	r3, [sp, #72]
 943:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_GCM;
 2313              		.loc 1 943 0
 2314 02d0 4FF40023 		mov	r3, #524288
 2315 02d4 1393     		str	r3, [sp, #76]
 944:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 2316              		.loc 1 944 0
 2317 02d6 8023     		movs	r3, #128
 2318 02d8 1493     		str	r3, [sp, #80]
 945:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_Init(&AES_CRYP_InitStructure);
 2319              		.loc 1 945 0
 2320 02da 12A8     		add	r0, sp, #72
 2321 02dc FFF7FEFF 		bl	CRYP_Init
 2322              	.LVL466:
 946:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 947:FWLIB/src/stm32f4xx_cryp_aes.c ****     /***************************** Init phase *********************************/
 948:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Select init phase */
 949:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_PhaseConfig(CRYP_Phase_Init);
 2323              		.loc 1 949 0
 2324 02e0 0020     		movs	r0, #0
 2325 02e2 FFF7FEFF 		bl	CRYP_PhaseConfig
 2326              	.LVL467:
 950:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 951:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Enable Crypto processor */
 952:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_Cmd(ENABLE);
 2327              		.loc 1 952 0
 2328 02e6 0120     		movs	r0, #1
 2329 02e8 FFF7FEFF 		bl	CRYP_Cmd
 2330              	.LVL468:
 2331              	.L80:
 953:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 954:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Wait for CRYPEN bit to be 0 */
 955:FWLIB/src/stm32f4xx_cryp_aes.c ****     while(CRYP_GetCmdStatus() == ENABLE)
 2332              		.loc 1 955 0 discriminator 1
 2333 02ec FFF7FEFF 		bl	CRYP_GetCmdStatus
 2334              	.LVL469:
 2335 02f0 0128     		cmp	r0, #1
 2336 02f2 FBD0     		beq	.L80
 956:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 957:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 958:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 959:FWLIB/src/stm32f4xx_cryp_aes.c ****     /***************************** header phase *******************************/
 960:FWLIB/src/stm32f4xx_cryp_aes.c ****     if(HLength != 0)
 2337              		.loc 1 960 0
 2338 02f4 BAF1000F 		cmp	r10, #0
 2339 02f8 36D0     		beq	.L100
 961:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 68


 962:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Select header phase */
 963:FWLIB/src/stm32f4xx_cryp_aes.c ****       CRYP_PhaseConfig(CRYP_Phase_Header);
 2340              		.loc 1 963 0
 2341 02fa 4FF48030 		mov	r0, #65536
 2342 02fe FFF7FEFF 		bl	CRYP_PhaseConfig
 2343              	.LVL470:
 964:FWLIB/src/stm32f4xx_cryp_aes.c ****       
 965:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Enable Crypto processor */
 966:FWLIB/src/stm32f4xx_cryp_aes.c ****       CRYP_Cmd(ENABLE);
 2344              		.loc 1 966 0
 2345 0302 0120     		movs	r0, #1
 2346 0304 FFF7FEFF 		bl	CRYP_Cmd
 2347              	.LVL471:
 967:FWLIB/src/stm32f4xx_cryp_aes.c ****       
 968:FWLIB/src/stm32f4xx_cryp_aes.c ****       if(CRYP_GetCmdStatus() == DISABLE)
 2348              		.loc 1 968 0
 2349 0308 FFF7FEFF 		bl	CRYP_GetCmdStatus
 2350              	.LVL472:
 2351 030c 0028     		cmp	r0, #0
 2352 030e 00F0B280 		beq	.L101
 2353 0312 4FF00008 		mov	r8, #0
 2354              	.LVL473:
 2355 0316 13E0     		b	.L82
 2356              	.LVL474:
 2357              	.L83:
 969:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 970:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* The CRYP peripheral clock is not enabled or the device doesn't embed 
 971:FWLIB/src/stm32f4xx_cryp_aes.c ****            the CRYP peripheral (please check the device sales type. */
 972:FWLIB/src/stm32f4xx_cryp_aes.c ****         return(ERROR);
 973:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 974:FWLIB/src/stm32f4xx_cryp_aes.c ****       
 975:FWLIB/src/stm32f4xx_cryp_aes.c ****       for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
 976:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 977:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Wait until the IFEM flag is reset */
 978:FWLIB/src/stm32f4xx_cryp_aes.c ****         while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 2358              		.loc 1 978 0 discriminator 1
 2359 0318 0120     		movs	r0, #1
 2360 031a FFF7FEFF 		bl	CRYP_GetFlagStatus
 2361              	.LVL475:
 2362 031e 0028     		cmp	r0, #0
 2363 0320 FAD0     		beq	.L83
 979:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
 980:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
 981:FWLIB/src/stm32f4xx_cryp_aes.c ****         
 982:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Write the Input block in the IN FIFO */
 983:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(headeraddr));
 2364              		.loc 1 983 0 discriminator 2
 2365 0322 2868     		ldr	r0, [r5]
 2366 0324 FFF7FEFF 		bl	CRYP_DataIn
 2367              	.LVL476:
 984:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
 985:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(headeraddr));
 2368              		.loc 1 985 0 discriminator 2
 2369 0328 6868     		ldr	r0, [r5, #4]
 2370 032a FFF7FEFF 		bl	CRYP_DataIn
 2371              	.LVL477:
 986:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 69


 987:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(headeraddr));
 2372              		.loc 1 987 0 discriminator 2
 2373 032e A868     		ldr	r0, [r5, #8]
 2374 0330 FFF7FEFF 		bl	CRYP_DataIn
 2375              	.LVL478:
 988:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
 989:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(headeraddr));
 2376              		.loc 1 989 0 discriminator 2
 2377 0334 E868     		ldr	r0, [r5, #12]
 2378 0336 FFF7FEFF 		bl	CRYP_DataIn
 2379              	.LVL479:
 990:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
 2380              		.loc 1 990 0 discriminator 2
 2381 033a 1035     		adds	r5, r5, #16
 2382              	.LVL480:
 975:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 2383              		.loc 1 975 0 discriminator 2
 2384 033c 08F11008 		add	r8, r8, #16
 2385              	.LVL481:
 2386              	.L82:
 975:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 2387              		.loc 1 975 0 is_stmt 0 discriminator 1
 2388 0340 D045     		cmp	r8, r10
 2389 0342 E9D3     		bcc	.L83
 991:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 992:FWLIB/src/stm32f4xx_cryp_aes.c ****       
 993:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Wait until the complete message has been processed */
 994:FWLIB/src/stm32f4xx_cryp_aes.c ****       counter = 0;
 2390              		.loc 1 994 0 is_stmt 1
 2391 0344 0023     		movs	r3, #0
 2392 0346 0593     		str	r3, [sp, #20]
 2393              	.LVL482:
 2394              	.L85:
 995:FWLIB/src/stm32f4xx_cryp_aes.c ****       do
 996:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 997:FWLIB/src/stm32f4xx_cryp_aes.c ****         busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 2395              		.loc 1 997 0 discriminator 2
 2396 0348 1020     		movs	r0, #16
 2397 034a FFF7FEFF 		bl	CRYP_GetFlagStatus
 2398              	.LVL483:
 2399 034e 0246     		mov	r2, r0
 2400              	.LVL484:
 998:FWLIB/src/stm32f4xx_cryp_aes.c ****         counter++;
 2401              		.loc 1 998 0 discriminator 2
 2402 0350 059B     		ldr	r3, [sp, #20]
 2403 0352 0133     		adds	r3, r3, #1
 2404 0354 0593     		str	r3, [sp, #20]
 999:FWLIB/src/stm32f4xx_cryp_aes.c ****       }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 2405              		.loc 1 999 0 discriminator 2
 2406 0356 059B     		ldr	r3, [sp, #20]
 2407 0358 B3F5803F 		cmp	r3, #65536
 2408 035c 01D0     		beq	.L84
 2409              		.loc 1 999 0 is_stmt 0 discriminator 1
 2410 035e 0028     		cmp	r0, #0
 2411 0360 F2D1     		bne	.L85
 2412              	.L84:
1000:FWLIB/src/stm32f4xx_cryp_aes.c **** 
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 70


1001:FWLIB/src/stm32f4xx_cryp_aes.c ****       if (busystatus != RESET)
 2413              		.loc 1 1001 0 is_stmt 1
 2414 0362 1AB9     		cbnz	r2, .L102
 681:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 2415              		.loc 1 681 0
 2416 0364 0125     		movs	r5, #1
 2417              	.LVL485:
 2418 0366 02E0     		b	.L81
 2419              	.LVL486:
 2420              	.L100:
 2421 0368 0125     		movs	r5, #1
 2422              	.LVL487:
 2423 036a 00E0     		b	.L81
 2424              	.LVL488:
 2425              	.L102:
1002:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
1003:FWLIB/src/stm32f4xx_cryp_aes.c ****         status = ERROR;
 2426              		.loc 1 1003 0
 2427 036c 0025     		movs	r5, #0
 2428              	.LVL489:
 2429              	.L81:
1004:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
1005:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
1006:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1007:FWLIB/src/stm32f4xx_cryp_aes.c ****     /**************************** payload phase *******************************/
1008:FWLIB/src/stm32f4xx_cryp_aes.c ****     if(ILength != 0)
 2430              		.loc 1 1008 0
 2431 036e 002F     		cmp	r7, #0
 2432 0370 49D0     		beq	.L86
1009:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
1010:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Select payload phase */
1011:FWLIB/src/stm32f4xx_cryp_aes.c ****       CRYP_PhaseConfig(CRYP_Phase_Payload);
 2433              		.loc 1 1011 0
 2434 0372 4FF40030 		mov	r0, #131072
 2435 0376 FFF7FEFF 		bl	CRYP_PhaseConfig
 2436              	.LVL490:
1012:FWLIB/src/stm32f4xx_cryp_aes.c **** 
1013:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Enable Crypto processor */
1014:FWLIB/src/stm32f4xx_cryp_aes.c ****       CRYP_Cmd(ENABLE);
 2437              		.loc 1 1014 0
 2438 037a 0120     		movs	r0, #1
 2439 037c FFF7FEFF 		bl	CRYP_Cmd
 2440              	.LVL491:
1015:FWLIB/src/stm32f4xx_cryp_aes.c ****       
1016:FWLIB/src/stm32f4xx_cryp_aes.c ****       if(CRYP_GetCmdStatus() == DISABLE)
 2441              		.loc 1 1016 0
 2442 0380 FFF7FEFF 		bl	CRYP_GetCmdStatus
 2443              	.LVL492:
 2444 0384 0028     		cmp	r0, #0
 2445 0386 78D0     		beq	.L103
 2446 0388 4FF00008 		mov	r8, #0
 2447              	.LVL493:
 2448 038c 37E0     		b	.L87
 2449              	.LVL494:
 2450              	.L88:
1017:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
1018:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* The CRYP peripheral clock is not enabled or the device doesn't embed 
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 71


1019:FWLIB/src/stm32f4xx_cryp_aes.c ****            the CRYP peripheral (please check the device sales type. */
1020:FWLIB/src/stm32f4xx_cryp_aes.c ****         return(ERROR);
1021:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
1022:FWLIB/src/stm32f4xx_cryp_aes.c ****       
1023:FWLIB/src/stm32f4xx_cryp_aes.c ****       for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
1024:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
1025:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Wait until the IFEM flag is reset */
1026:FWLIB/src/stm32f4xx_cryp_aes.c ****         while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 2451              		.loc 1 1026 0 discriminator 1
 2452 038e 0120     		movs	r0, #1
 2453 0390 FFF7FEFF 		bl	CRYP_GetFlagStatus
 2454              	.LVL495:
 2455 0394 0028     		cmp	r0, #0
 2456 0396 FAD0     		beq	.L88
1027:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
1028:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
1029:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Write the Input block in the IN FIFO */
1030:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(inputaddr));
 2457              		.loc 1 1030 0
 2458 0398 2068     		ldr	r0, [r4]
 2459 039a FFF7FEFF 		bl	CRYP_DataIn
 2460              	.LVL496:
1031:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
1032:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(inputaddr));
 2461              		.loc 1 1032 0
 2462 039e 6068     		ldr	r0, [r4, #4]
 2463 03a0 FFF7FEFF 		bl	CRYP_DataIn
 2464              	.LVL497:
1033:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
1034:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(inputaddr));
 2465              		.loc 1 1034 0
 2466 03a4 A068     		ldr	r0, [r4, #8]
 2467 03a6 FFF7FEFF 		bl	CRYP_DataIn
 2468              	.LVL498:
1035:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
1036:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(inputaddr));
 2469              		.loc 1 1036 0
 2470 03aa E068     		ldr	r0, [r4, #12]
 2471 03ac FFF7FEFF 		bl	CRYP_DataIn
 2472              	.LVL499:
1037:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
 2473              		.loc 1 1037 0
 2474 03b0 1034     		adds	r4, r4, #16
 2475              	.LVL500:
1038:FWLIB/src/stm32f4xx_cryp_aes.c ****         
1039:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Wait until the complete message has been processed */
1040:FWLIB/src/stm32f4xx_cryp_aes.c ****         counter = 0;
 2476              		.loc 1 1040 0
 2477 03b2 0023     		movs	r3, #0
 2478              	.LVL501:
 2479 03b4 0593     		str	r3, [sp, #20]
 2480              	.LVL502:
 2481              	.L90:
1041:FWLIB/src/stm32f4xx_cryp_aes.c ****         do
1042:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
1043:FWLIB/src/stm32f4xx_cryp_aes.c ****           busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 2482              		.loc 1 1043 0 discriminator 2
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 72


 2483 03b6 1020     		movs	r0, #16
 2484 03b8 FFF7FEFF 		bl	CRYP_GetFlagStatus
 2485              	.LVL503:
 2486 03bc 0246     		mov	r2, r0
 2487              	.LVL504:
1044:FWLIB/src/stm32f4xx_cryp_aes.c ****           counter++;
 2488              		.loc 1 1044 0 discriminator 2
 2489 03be 059B     		ldr	r3, [sp, #20]
 2490 03c0 0133     		adds	r3, r3, #1
 2491 03c2 0593     		str	r3, [sp, #20]
1045:FWLIB/src/stm32f4xx_cryp_aes.c ****         }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 2492              		.loc 1 1045 0 discriminator 2
 2493 03c4 059B     		ldr	r3, [sp, #20]
 2494 03c6 B3F5803F 		cmp	r3, #65536
 2495 03ca 01D0     		beq	.L89
 2496              		.loc 1 1045 0 is_stmt 0 discriminator 1
 2497 03cc 0028     		cmp	r0, #0
 2498 03ce F2D1     		bne	.L90
 2499              	.L89:
1046:FWLIB/src/stm32f4xx_cryp_aes.c **** 
1047:FWLIB/src/stm32f4xx_cryp_aes.c ****         if (busystatus != RESET)
 2500              		.loc 1 1047 0 is_stmt 1
 2501 03d0 92B9     		cbnz	r2, .L104
 2502              	.LVL505:
 2503              	.L92:
1048:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
1049:FWLIB/src/stm32f4xx_cryp_aes.c ****           status = ERROR;
1050:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
1051:FWLIB/src/stm32f4xx_cryp_aes.c ****         else
1052:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
1053:FWLIB/src/stm32f4xx_cryp_aes.c ****           /* Wait until the OFNE flag is reset */
1054:FWLIB/src/stm32f4xx_cryp_aes.c ****           while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 2504              		.loc 1 1054 0 discriminator 1
 2505 03d2 0420     		movs	r0, #4
 2506 03d4 FFF7FEFF 		bl	CRYP_GetFlagStatus
 2507              	.LVL506:
 2508 03d8 0028     		cmp	r0, #0
 2509 03da FAD0     		beq	.L92
1055:FWLIB/src/stm32f4xx_cryp_aes.c ****           {
1056:FWLIB/src/stm32f4xx_cryp_aes.c ****           }
1057:FWLIB/src/stm32f4xx_cryp_aes.c ****           
1058:FWLIB/src/stm32f4xx_cryp_aes.c ****           /* Read the Output block from the Output FIFO */
1059:FWLIB/src/stm32f4xx_cryp_aes.c ****           *(uint32_t*)(outputaddr) = CRYP_DataOut();
 2510              		.loc 1 1059 0
 2511 03dc FFF7FEFF 		bl	CRYP_DataOut
 2512              	.LVL507:
 2513 03e0 3060     		str	r0, [r6]
 2514              	.LVL508:
1060:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
1061:FWLIB/src/stm32f4xx_cryp_aes.c ****           *(uint32_t*)(outputaddr) = CRYP_DataOut();
 2515              		.loc 1 1061 0
 2516 03e2 FFF7FEFF 		bl	CRYP_DataOut
 2517              	.LVL509:
 2518 03e6 7060     		str	r0, [r6, #4]
 2519              	.LVL510:
1062:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
1063:FWLIB/src/stm32f4xx_cryp_aes.c ****           *(uint32_t*)(outputaddr) = CRYP_DataOut();
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 73


 2520              		.loc 1 1063 0
 2521 03e8 FFF7FEFF 		bl	CRYP_DataOut
 2522              	.LVL511:
 2523 03ec B060     		str	r0, [r6, #8]
 2524              	.LVL512:
1064:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
1065:FWLIB/src/stm32f4xx_cryp_aes.c ****           *(uint32_t*)(outputaddr) = CRYP_DataOut();
 2525              		.loc 1 1065 0
 2526 03ee FFF7FEFF 		bl	CRYP_DataOut
 2527              	.LVL513:
 2528 03f2 F060     		str	r0, [r6, #12]
1066:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
 2529              		.loc 1 1066 0
 2530 03f4 1036     		adds	r6, r6, #16
 2531              	.LVL514:
 2532 03f6 00E0     		b	.L91
 2533              	.LVL515:
 2534              	.L104:
1049:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
 2535              		.loc 1 1049 0
 2536 03f8 0025     		movs	r5, #0
 2537              	.LVL516:
 2538              	.L91:
1023:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 2539              		.loc 1 1023 0 discriminator 2
 2540 03fa 08F11008 		add	r8, r8, #16
 2541              	.LVL517:
 2542              	.L87:
1023:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 2543              		.loc 1 1023 0 is_stmt 0 discriminator 1
 2544 03fe B845     		cmp	r8, r7
 2545 0400 01D2     		bcs	.L86
1023:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 2546              		.loc 1 1023 0 discriminator 3
 2547 0402 002D     		cmp	r5, #0
 2548 0404 C3D1     		bne	.L88
 2549              	.LVL518:
 2550              	.L86:
1067:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
1068:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
1069:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
1070:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1071:FWLIB/src/stm32f4xx_cryp_aes.c ****     /***************************** final phase ********************************/
1072:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Select final phase */
1073:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_PhaseConfig(CRYP_Phase_Final);
 2551              		.loc 1 1073 0 is_stmt 1
 2552 0406 4FF44030 		mov	r0, #196608
 2553 040a FFF7FEFF 		bl	CRYP_PhaseConfig
 2554              	.LVL519:
1074:FWLIB/src/stm32f4xx_cryp_aes.c **** 
1075:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Enable Crypto processor */
1076:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_Cmd(ENABLE);
 2555              		.loc 1 1076 0
 2556 040e 0120     		movs	r0, #1
 2557 0410 FFF7FEFF 		bl	CRYP_Cmd
 2558              	.LVL520:
1077:FWLIB/src/stm32f4xx_cryp_aes.c ****     
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 74


1078:FWLIB/src/stm32f4xx_cryp_aes.c ****     if(CRYP_GetCmdStatus() == DISABLE)
 2559              		.loc 1 1078 0
 2560 0414 FFF7FEFF 		bl	CRYP_GetCmdStatus
 2561              	.LVL521:
 2562 0418 88B3     		cbz	r0, .L105
1079:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
1080:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* The CRYP peripheral clock is not enabled or the device doesn't embed 
1081:FWLIB/src/stm32f4xx_cryp_aes.c ****          the CRYP peripheral (please check the device sales type. */
1082:FWLIB/src/stm32f4xx_cryp_aes.c ****       return(ERROR);
1083:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
1084:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1085:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Write number of bits concatenated with header in the IN FIFO */
1086:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(__REV(headerlength>>32));
 2563              		.loc 1 1086 0
 2564 041a 0020     		movs	r0, #0
 2565              	.LVL522:
 2566 041c FFF7FEFF 		bl	CRYP_DataIn
 2567              	.LVL523:
1087:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(__REV(headerlength));
 2568              		.loc 1 1087 0
 2569 0420 029B     		ldr	r3, [sp, #8]
 2570 0422 18BA     		rev	r0, r3
 2571 0424 FFF7FEFF 		bl	CRYP_DataIn
 2572              	.LVL524:
1088:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(__REV(inputlength>>32));
 2573              		.loc 1 1088 0
 2574 0428 0020     		movs	r0, #0
 2575              	.LVL525:
 2576 042a FFF7FEFF 		bl	CRYP_DataIn
 2577              	.LVL526:
1089:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(__REV(inputlength));
 2578              		.loc 1 1089 0
 2579 042e 039B     		ldr	r3, [sp, #12]
 2580 0430 18BA     		rev	r0, r3
 2581 0432 FFF7FEFF 		bl	CRYP_DataIn
 2582              	.LVL527:
 2583              	.L93:
1090:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Wait until the OFNE flag is reset */
1091:FWLIB/src/stm32f4xx_cryp_aes.c ****     while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 2584              		.loc 1 1091 0 discriminator 1
 2585 0436 0420     		movs	r0, #4
 2586 0438 FFF7FEFF 		bl	CRYP_GetFlagStatus
 2587              	.LVL528:
 2588 043c 0028     		cmp	r0, #0
 2589 043e FAD0     		beq	.L93
1092:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
1093:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
1094:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1095:FWLIB/src/stm32f4xx_cryp_aes.c ****     tagaddr = (uint32_t)AuthTAG;
1096:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Read the Auth TAG in the IN FIFO */
1097:FWLIB/src/stm32f4xx_cryp_aes.c ****     *(uint32_t*)(tagaddr) = CRYP_DataOut();
 2590              		.loc 1 1097 0
 2591 0440 FFF7FEFF 		bl	CRYP_DataOut
 2592              	.LVL529:
 2593 0444 259B     		ldr	r3, [sp, #148]
 2594 0446 1860     		str	r0, [r3]
 2595              	.LVL530:
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 75


1098:FWLIB/src/stm32f4xx_cryp_aes.c ****     tagaddr+=4;
1099:FWLIB/src/stm32f4xx_cryp_aes.c ****     *(uint32_t*)(tagaddr) = CRYP_DataOut();
 2596              		.loc 1 1099 0
 2597 0448 FFF7FEFF 		bl	CRYP_DataOut
 2598              	.LVL531:
 2599 044c 259B     		ldr	r3, [sp, #148]
 2600 044e 5860     		str	r0, [r3, #4]
 2601              	.LVL532:
1100:FWLIB/src/stm32f4xx_cryp_aes.c ****     tagaddr+=4;
1101:FWLIB/src/stm32f4xx_cryp_aes.c ****     *(uint32_t*)(tagaddr) = CRYP_DataOut();
 2602              		.loc 1 1101 0
 2603 0450 FFF7FEFF 		bl	CRYP_DataOut
 2604              	.LVL533:
 2605 0454 259B     		ldr	r3, [sp, #148]
 2606 0456 9860     		str	r0, [r3, #8]
 2607              	.LVL534:
1102:FWLIB/src/stm32f4xx_cryp_aes.c ****     tagaddr+=4;
1103:FWLIB/src/stm32f4xx_cryp_aes.c ****     *(uint32_t*)(tagaddr) = CRYP_DataOut();
 2608              		.loc 1 1103 0
 2609 0458 FFF7FEFF 		bl	CRYP_DataOut
 2610              	.LVL535:
 2611 045c 259B     		ldr	r3, [sp, #148]
 2612 045e D860     		str	r0, [r3, #12]
 2613              	.LVL536:
 2614              	.L79:
1104:FWLIB/src/stm32f4xx_cryp_aes.c ****     tagaddr+=4;
1105:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
1106:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Disable Crypto */
1107:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_Cmd(DISABLE);
 2615              		.loc 1 1107 0
 2616 0460 0020     		movs	r0, #0
 2617              	.LVL537:
 2618 0462 FFF7FEFF 		bl	CRYP_Cmd
 2619              	.LVL538:
1108:FWLIB/src/stm32f4xx_cryp_aes.c **** 
1109:FWLIB/src/stm32f4xx_cryp_aes.c ****   return status;
 2620              		.loc 1 1109 0
 2621 0466 2846     		mov	r0, r5
 2622 0468 0AE0     		b	.L66
 2623              	.LVL539:
 2624              	.L95:
 795:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 2625              		.loc 1 795 0
 2626 046a 0020     		movs	r0, #0
 2627 046c 08E0     		b	.L66
 2628              	.LVL540:
 2629              	.L97:
 843:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 2630              		.loc 1 843 0
 2631 046e 0020     		movs	r0, #0
 2632              	.LVL541:
 2633 0470 06E0     		b	.L66
 2634              	.LVL542:
 2635              	.L99:
 905:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 2636              		.loc 1 905 0
 2637 0472 0020     		movs	r0, #0
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 76


 2638              	.LVL543:
 2639 0474 04E0     		b	.L66
 2640              	.LVL544:
 2641              	.L101:
 972:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 2642              		.loc 1 972 0
 2643 0476 0020     		movs	r0, #0
 2644 0478 02E0     		b	.L66
 2645              	.LVL545:
 2646              	.L103:
1020:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 2647              		.loc 1 1020 0
 2648 047a 0020     		movs	r0, #0
 2649              	.LVL546:
 2650 047c 00E0     		b	.L66
 2651              	.LVL547:
 2652              	.L105:
1082:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 2653              		.loc 1 1082 0
 2654 047e 0020     		movs	r0, #0
 2655              	.LVL548:
 2656              	.L66:
1110:FWLIB/src/stm32f4xx_cryp_aes.c **** }
 2657              		.loc 1 1110 0
 2658 0480 17B0     		add	sp, sp, #92
 2659              	.LCFI11:
 2660              		.cfi_def_cfa_offset 36
 2661              		@ sp needed
 2662 0482 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2663              		.cfi_endproc
 2664              	.LFE126:
 2666 0486 00BF     		.section	.text.CRYP_AES_CCM,"ax",%progbits
 2667              		.align	2
 2668              		.global	CRYP_AES_CCM
 2669              		.thumb
 2670              		.thumb_func
 2672              	CRYP_AES_CCM:
 2673              	.LFB127:
1111:FWLIB/src/stm32f4xx_cryp_aes.c **** 
1112:FWLIB/src/stm32f4xx_cryp_aes.c **** /**
1113:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @brief  Encrypt and decrypt using AES in CCM Mode. The GCM and CCM modes
1114:FWLIB/src/stm32f4xx_cryp_aes.c ****   *         are available only on STM32F437x Devices.
1115:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Mode: encryption or decryption Mode.
1116:FWLIB/src/stm32f4xx_cryp_aes.c ****   *          This parameter can be one of the following values:
1117:FWLIB/src/stm32f4xx_cryp_aes.c ****   *            @arg MODE_ENCRYPT: Encryption
1118:FWLIB/src/stm32f4xx_cryp_aes.c ****   *            @arg MODE_DECRYPT: Decryption
1119:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Nonce: the nonce used for AES algorithm. It shall be unique for each processing.
1120:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Key: Key used for AES algorithm.
1121:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Keysize: length of the Key, must be a 128, 192 or 256.
1122:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Input: pointer to the Input buffer.
1123:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Ilength: length of the Input buffer in bytes, must be a multiple of 16.
1124:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Header: pointer to the header buffer.
1125:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Hlength: length of the header buffer in bytes.
1126:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  HBuffer: pointer to temporary buffer used to append the header
1127:FWLIB/src/stm32f4xx_cryp_aes.c ****   *         HBuffer size must be equal to Hlength + 21
1128:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Output: pointer to the returned buffer.
1129:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  AuthTAG: pointer to the authentication TAG buffer.
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 77


1130:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  TAGSize: the size of the TAG (called also MAC).
1131:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @retval An ErrorStatus enumeration value:
1132:FWLIB/src/stm32f4xx_cryp_aes.c ****   *          - SUCCESS: Operation done
1133:FWLIB/src/stm32f4xx_cryp_aes.c ****   *          - ERROR: Operation failed
1134:FWLIB/src/stm32f4xx_cryp_aes.c ****   */
1135:FWLIB/src/stm32f4xx_cryp_aes.c **** ErrorStatus CRYP_AES_CCM(uint8_t Mode, 
1136:FWLIB/src/stm32f4xx_cryp_aes.c ****                          uint8_t* Nonce, uint32_t NonceSize,
1137:FWLIB/src/stm32f4xx_cryp_aes.c ****                          uint8_t *Key, uint16_t Keysize,
1138:FWLIB/src/stm32f4xx_cryp_aes.c ****                          uint8_t *Input, uint32_t ILength,
1139:FWLIB/src/stm32f4xx_cryp_aes.c ****                          uint8_t *Header, uint32_t HLength, uint8_t *HBuffer,
1140:FWLIB/src/stm32f4xx_cryp_aes.c ****                          uint8_t *Output,
1141:FWLIB/src/stm32f4xx_cryp_aes.c ****                          uint8_t *AuthTAG, uint32_t TAGSize)
1142:FWLIB/src/stm32f4xx_cryp_aes.c **** {
 2674              		.loc 1 1142 0
 2675              		.cfi_startproc
 2676              		@ args = 36, pretend = 0, frame = 128
 2677              		@ frame_needed = 0, uses_anonymous_args = 0
 2678              	.LVL549:
 2679 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2680              	.LCFI12:
 2681              		.cfi_def_cfa_offset 36
 2682              		.cfi_offset 4, -36
 2683              		.cfi_offset 5, -32
 2684              		.cfi_offset 6, -28
 2685              		.cfi_offset 7, -24
 2686              		.cfi_offset 8, -20
 2687              		.cfi_offset 9, -16
 2688              		.cfi_offset 10, -12
 2689              		.cfi_offset 11, -8
 2690              		.cfi_offset 14, -4
 2691 0004 A1B0     		sub	sp, sp, #132
 2692              	.LCFI13:
 2693              		.cfi_def_cfa_offset 168
 2694 0006 0090     		str	r0, [sp]
 2695 0008 9A46     		mov	r10, r3
 2696 000a BDF8A830 		ldrh	r3, [sp, #168]
 2697              	.LVL550:
 2698 000e 0193     		str	r3, [sp, #4]
 2699 0010 DDF8B090 		ldr	r9, [sp, #176]
 2700 0014 DDF8B4C0 		ldr	ip, [sp, #180]
 2701 0018 2E9D     		ldr	r5, [sp, #184]
 2702 001a DDF8BCE0 		ldr	lr, [sp, #188]
1143:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_InitTypeDef AES_CRYP_InitStructure;
1144:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
1145:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
1146:FWLIB/src/stm32f4xx_cryp_aes.c ****   __IO uint32_t counter = 0;
 2703              		.loc 1 1146 0
 2704 001e 0023     		movs	r3, #0
 2705 0020 0F93     		str	r3, [sp, #60]
 2706              	.LVL551:
1147:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t busystatus = 0;
1148:FWLIB/src/stm32f4xx_cryp_aes.c ****   ErrorStatus status = SUCCESS;
1149:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t keyaddr    = (uint32_t)Key;
1150:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t inputaddr  = (uint32_t)Input;
 2707              		.loc 1 1150 0
 2708 0022 2B9C     		ldr	r4, [sp, #172]
 2709              	.LVL552:
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 78


1151:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t outputaddr = (uint32_t)Output;
 2710              		.loc 1 1151 0
 2711 0024 DDF8C080 		ldr	r8, [sp, #192]
 2712              	.LVL553:
1152:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t headeraddr = (uint32_t)Header;
 2713              		.loc 1 1152 0
 2714 0028 6646     		mov	r6, ip
 2715              	.LVL554:
1153:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t tagaddr = (uint32_t)AuthTAG;
 2716              		.loc 1 1153 0
 2717 002a DDF8C4B0 		ldr	fp, [sp, #196]
 2718              	.LVL555:
1154:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t headersize = HLength;
1155:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t loopcounter = 0;
1156:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t bufferidx = 0;
1157:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint8_t blockb0[16] = {0};/* Block B0 */
 2719              		.loc 1 1157 0
 2720 002e 0B93     		str	r3, [sp, #44]
 2721 0030 0C93     		str	r3, [sp, #48]
 2722 0032 0D93     		str	r3, [sp, #52]
 2723 0034 0E93     		str	r3, [sp, #56]
1158:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint8_t ctr[16] = {0}; /* Counter */
 2724              		.loc 1 1158 0
 2725 0036 07AF     		add	r7, sp, #28
 2726 0038 0793     		str	r3, [sp, #28]
 2727 003a 7B60     		str	r3, [r7, #4]
 2728 003c BB60     		str	r3, [r7, #8]
 2729 003e FB60     		str	r3, [r7, #12]
1159:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t temptag[4] = {0}; /* temporary TAG (MAC) */
 2730              		.loc 1 1159 0
 2731 0040 0393     		str	r3, [sp, #12]
 2732 0042 0493     		str	r3, [sp, #16]
 2733 0044 0593     		str	r3, [sp, #20]
 2734 0046 0693     		str	r3, [sp, #24]
 2735              	.LVL556:
1160:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t ctraddr = (uint32_t)ctr;
1161:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t b0addr = (uint32_t)blockb0;
1162:FWLIB/src/stm32f4xx_cryp_aes.c ****   
1163:FWLIB/src/stm32f4xx_cryp_aes.c ****   /************************ Formatting the header block ***********************/
1164:FWLIB/src/stm32f4xx_cryp_aes.c ****   if(headersize != 0)
 2736              		.loc 1 1164 0
 2737 0048 BDB3     		cbz	r5, .L110
1165:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
1166:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Check that the associated data (or header) length is lower than 2^16 - 2^8 = 65536 - 256 = 6
1167:FWLIB/src/stm32f4xx_cryp_aes.c ****     if(headersize < 65280)
 2738              		.loc 1 1167 0
 2739 004a B5F57F4F 		cmp	r5, #65280
 2740 004e 08D2     		bcs	.L111
 2741              	.LVL557:
1168:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
1169:FWLIB/src/stm32f4xx_cryp_aes.c ****       HBuffer[bufferidx++] = (uint8_t) ((headersize >> 8) & 0xFF);
 2742              		.loc 1 1169 0
 2743 0050 C5F30723 		ubfx	r3, r5, #8, #8
 2744 0054 8EF80030 		strb	r3, [lr]
 2745              	.LVL558:
1170:FWLIB/src/stm32f4xx_cryp_aes.c ****       HBuffer[bufferidx++] = (uint8_t) ((headersize) & 0xFF);
 2746              		.loc 1 1170 0
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 79


 2747 0058 8EF80150 		strb	r5, [lr, #1]
1171:FWLIB/src/stm32f4xx_cryp_aes.c ****       headersize += 2;
 2748              		.loc 1 1171 0
 2749 005c 0235     		adds	r5, r5, #2
 2750              	.LVL559:
1170:FWLIB/src/stm32f4xx_cryp_aes.c ****       HBuffer[bufferidx++] = (uint8_t) ((headersize) & 0xFF);
 2751              		.loc 1 1170 0
 2752 005e 0220     		movs	r0, #2
 2753              	.LVL560:
 2754 0060 10E0     		b	.L112
 2755              	.LVL561:
 2756              	.L111:
1172:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
1173:FWLIB/src/stm32f4xx_cryp_aes.c ****     else
1174:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
1175:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* header is encoded as 0xff || 0xfe || [headersize]32, i.e., six octets */
1176:FWLIB/src/stm32f4xx_cryp_aes.c ****       HBuffer[bufferidx++] = 0xFF;
 2757              		.loc 1 1176 0
 2758 0062 FF23     		movs	r3, #255
 2759 0064 8EF80030 		strb	r3, [lr]
 2760              	.LVL562:
1177:FWLIB/src/stm32f4xx_cryp_aes.c ****       HBuffer[bufferidx++] = 0xFE;
 2761              		.loc 1 1177 0
 2762 0068 FE23     		movs	r3, #254
 2763 006a 8EF80130 		strb	r3, [lr, #1]
 2764              	.LVL563:
1178:FWLIB/src/stm32f4xx_cryp_aes.c ****       HBuffer[bufferidx++] = headersize & 0xff000000;
 2765              		.loc 1 1178 0
 2766 006e 0023     		movs	r3, #0
 2767 0070 8EF80230 		strb	r3, [lr, #2]
 2768              	.LVL564:
1179:FWLIB/src/stm32f4xx_cryp_aes.c ****       HBuffer[bufferidx++] = headersize & 0x00ff0000;
 2769              		.loc 1 1179 0
 2770 0074 8EF80330 		strb	r3, [lr, #3]
 2771              	.LVL565:
1180:FWLIB/src/stm32f4xx_cryp_aes.c ****       HBuffer[bufferidx++] = headersize & 0x0000ff00;
 2772              		.loc 1 1180 0
 2773 0078 8EF80430 		strb	r3, [lr, #4]
 2774              	.LVL566:
1181:FWLIB/src/stm32f4xx_cryp_aes.c ****       HBuffer[bufferidx++] = headersize & 0x000000ff;
 2775              		.loc 1 1181 0
 2776 007c 8EF80550 		strb	r5, [lr, #5]
1182:FWLIB/src/stm32f4xx_cryp_aes.c ****       headersize += 6;
 2777              		.loc 1 1182 0
 2778 0080 0635     		adds	r5, r5, #6
 2779              	.LVL567:
1181:FWLIB/src/stm32f4xx_cryp_aes.c ****       HBuffer[bufferidx++] = headersize & 0x000000ff;
 2780              		.loc 1 1181 0
 2781 0082 0620     		movs	r0, #6
 2782              	.LVL568:
 2783              	.L112:
1183:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
1184:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Copy the header buffer in internal buffer "HBuffer" */
1185:FWLIB/src/stm32f4xx_cryp_aes.c ****     for(loopcounter = 0; loopcounter < headersize; loopcounter++)
 2784              		.loc 1 1185 0
 2785 0084 0023     		movs	r3, #0
 2786 0086 05E0     		b	.L113
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 80


 2787              	.LVL569:
 2788              	.L114:
1186:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
1187:FWLIB/src/stm32f4xx_cryp_aes.c ****       HBuffer[bufferidx++] = Header[loopcounter];
 2789              		.loc 1 1187 0 discriminator 3
 2790 0088 1CF80360 		ldrb	r6, [ip, r3]	@ zero_extendqisi2
 2791 008c 0EF80060 		strb	r6, [lr, r0]
1185:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 2792              		.loc 1 1185 0 discriminator 3
 2793 0090 0133     		adds	r3, r3, #1
 2794              	.LVL570:
 2795              		.loc 1 1187 0 discriminator 3
 2796 0092 0130     		adds	r0, r0, #1
 2797              	.LVL571:
 2798              	.L113:
1185:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 2799              		.loc 1 1185 0 discriminator 1
 2800 0094 9D42     		cmp	r5, r3
 2801 0096 F7D8     		bhi	.L114
1188:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
1189:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Check if the header size is modulo 16 */
1190:FWLIB/src/stm32f4xx_cryp_aes.c ****     if ((headersize % 16) != 0)
 2802              		.loc 1 1190 0
 2803 0098 15F00F0F 		tst	r5, #15
 2804 009c 05D1     		bne	.L162
 2805 009e 0BE0     		b	.L116
 2806              	.LVL572:
 2807              	.L117:
1191:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
1192:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Padd the header buffer with 0s till the HBuffer length is modulo 16 */
1193:FWLIB/src/stm32f4xx_cryp_aes.c ****       for(loopcounter = headersize; loopcounter <= ((headersize/16) + 1) * 16; loopcounter++)
1194:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
1195:FWLIB/src/stm32f4xx_cryp_aes.c ****         HBuffer[loopcounter] = 0;
 2808              		.loc 1 1195 0 discriminator 3
 2809 00a0 0023     		movs	r3, #0
 2810 00a2 0EF80030 		strb	r3, [lr, r0]
1193:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 2811              		.loc 1 1193 0 discriminator 3
 2812 00a6 0130     		adds	r0, r0, #1
 2813              	.LVL573:
 2814 00a8 00E0     		b	.L115
 2815              	.LVL574:
 2816              	.L162:
 2817 00aa 2846     		mov	r0, r5
 2818              	.LVL575:
 2819              	.L115:
1193:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 2820              		.loc 1 1193 0 is_stmt 0 discriminator 1
 2821 00ac 2B09     		lsrs	r3, r5, #4
 2822 00ae 0133     		adds	r3, r3, #1
 2823 00b0 1B01     		lsls	r3, r3, #4
 2824 00b2 9842     		cmp	r0, r3
 2825 00b4 F4D9     		bls	.L117
1196:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
1197:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Set the header size to modulo 16 */
1198:FWLIB/src/stm32f4xx_cryp_aes.c ****       headersize = ((headersize/16) + 1) * 16;
 2826              		.loc 1 1198 0 is_stmt 1
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 81


 2827 00b6 1D46     		mov	r5, r3
 2828              	.LVL576:
 2829              	.L116:
1199:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
1200:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* set the pointer headeraddr to HBuffer */
1201:FWLIB/src/stm32f4xx_cryp_aes.c ****     headeraddr = (uint32_t)HBuffer;
 2830              		.loc 1 1201 0
 2831 00b8 7646     		mov	r6, lr
 2832              	.LVL577:
 2833              	.L110:
1202:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
1203:FWLIB/src/stm32f4xx_cryp_aes.c ****   /************************* Formatting the block B0 **************************/
1204:FWLIB/src/stm32f4xx_cryp_aes.c ****   if(headersize != 0)
 2834              		.loc 1 1204 0
 2835 00ba 15B1     		cbz	r5, .L118
1205:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
1206:FWLIB/src/stm32f4xx_cryp_aes.c ****     blockb0[0] = 0x40;
 2836              		.loc 1 1206 0
 2837 00bc 4023     		movs	r3, #64
 2838 00be 8DF82C30 		strb	r3, [sp, #44]
 2839              	.L118:
1207:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
1208:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Flags byte */
1209:FWLIB/src/stm32f4xx_cryp_aes.c ****   blockb0[0] |= 0u | (((( (uint8_t) TAGSize - 2) / 2) & 0x07 ) << 3 ) | ( ( (uint8_t) (15 - NonceSi
 2840              		.loc 1 1209 0
 2841 00c2 9DF8C830 		ldrb	r3, [sp, #200]	@ zero_extendqisi2
 2842 00c6 023B     		subs	r3, r3, #2
 2843 00c8 03EBD373 		add	r3, r3, r3, lsr #31
 2844 00cc 5B10     		asrs	r3, r3, #1
 2845 00ce DB00     		lsls	r3, r3, #3
 2846 00d0 03F03803 		and	r3, r3, #56
 2847 00d4 C2F10E00 		rsb	r0, r2, #14
 2848 00d8 00F00700 		and	r0, r0, #7
 2849 00dc 0343     		orrs	r3, r3, r0
 2850 00de 9DF82C00 		ldrb	r0, [sp, #44]	@ zero_extendqisi2
 2851 00e2 0343     		orrs	r3, r3, r0
 2852 00e4 8DF82C30 		strb	r3, [sp, #44]
 2853              	.LVL578:
1210:FWLIB/src/stm32f4xx_cryp_aes.c ****   
1211:FWLIB/src/stm32f4xx_cryp_aes.c ****   for (loopcounter = 0; loopcounter < NonceSize; loopcounter++)
 2854              		.loc 1 1211 0
 2855 00e8 0023     		movs	r3, #0
 2856 00ea 07E0     		b	.L119
 2857              	.LVL579:
 2858              	.L120:
1212:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
1213:FWLIB/src/stm32f4xx_cryp_aes.c ****     blockb0[loopcounter+1] = Nonce[loopcounter];
 2859              		.loc 1 1213 0 discriminator 3
 2860 00ec 581C     		adds	r0, r3, #1
 2861 00ee 11F803E0 		ldrb	lr, [r1, r3]	@ zero_extendqisi2
 2862 00f2 20AB     		add	r3, sp, #128
 2863              	.LVL580:
 2864 00f4 0344     		add	r3, r3, r0
 2865 00f6 03F854EC 		strb	lr, [r3, #-84]
 2866              	.LVL581:
1211:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 2867              		.loc 1 1211 0 discriminator 3
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 82


 2868 00fa 0346     		mov	r3, r0
 2869              	.LVL582:
 2870              	.L119:
1211:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 2871              		.loc 1 1211 0 is_stmt 0 discriminator 1
 2872 00fc 9342     		cmp	r3, r2
 2873 00fe F5D3     		bcc	.L120
 2874 0100 05E0     		b	.L121
 2875              	.LVL583:
 2876              	.L122:
1214:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
1215:FWLIB/src/stm32f4xx_cryp_aes.c ****   for ( ; loopcounter < 13; loopcounter++)
1216:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
1217:FWLIB/src/stm32f4xx_cryp_aes.c ****     blockb0[loopcounter+1] = 0;
 2877              		.loc 1 1217 0 is_stmt 1 discriminator 2
 2878 0102 0133     		adds	r3, r3, #1
 2879              	.LVL584:
 2880 0104 20A9     		add	r1, sp, #128
 2881 0106 1944     		add	r1, r1, r3
 2882 0108 0020     		movs	r0, #0
 2883 010a 01F8540C 		strb	r0, [r1, #-84]
 2884              	.LVL585:
 2885              	.L121:
1215:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 2886              		.loc 1 1215 0 discriminator 1
 2887 010e 0C2B     		cmp	r3, #12
 2888 0110 F7D9     		bls	.L122
1218:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
1219:FWLIB/src/stm32f4xx_cryp_aes.c ****   
1220:FWLIB/src/stm32f4xx_cryp_aes.c ****   blockb0[14] = ((ILength >> 8) & 0xFF);
 2889              		.loc 1 1220 0
 2890 0112 4FEA1923 		lsr	r3, r9, #8
 2891              	.LVL586:
 2892 0116 8DF83A30 		strb	r3, [sp, #58]
1221:FWLIB/src/stm32f4xx_cryp_aes.c ****   blockb0[15] = (ILength & 0xFF);
 2893              		.loc 1 1221 0
 2894 011a 8DF83B90 		strb	r9, [sp, #59]
1222:FWLIB/src/stm32f4xx_cryp_aes.c ****   
1223:FWLIB/src/stm32f4xx_cryp_aes.c ****   /************************* Formatting the initial counter *******************/
1224:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Byte 0:
1225:FWLIB/src/stm32f4xx_cryp_aes.c ****      Bits 7 and 6 are reserved and shall be set to 0
1226:FWLIB/src/stm32f4xx_cryp_aes.c ****      Bits 3, 4, and 5 shall also be set to 0, to ensure that all the counter blocks
1227:FWLIB/src/stm32f4xx_cryp_aes.c ****      are distinct from B0
1228:FWLIB/src/stm32f4xx_cryp_aes.c ****      Bits 0, 1, and 2 contain the same encoding of q as in B0
1229:FWLIB/src/stm32f4xx_cryp_aes.c ****   */
1230:FWLIB/src/stm32f4xx_cryp_aes.c ****   ctr[0] = blockb0[0] & 0x07;
 2895              		.loc 1 1230 0
 2896 011e 9DF82C30 		ldrb	r3, [sp, #44]	@ zero_extendqisi2
 2897 0122 03F00703 		and	r3, r3, #7
 2898 0126 8DF81C30 		strb	r3, [sp, #28]
 2899              	.LVL587:
1231:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* byte 1 to NonceSize is the IV (Nonce) */
1232:FWLIB/src/stm32f4xx_cryp_aes.c ****   for(loopcounter = 1; loopcounter < NonceSize + 1; loopcounter++)
 2900              		.loc 1 1232 0
 2901 012a 0123     		movs	r3, #1
 2902 012c 06E0     		b	.L123
 2903              	.LVL588:
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 83


 2904              	.L124:
1233:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
1234:FWLIB/src/stm32f4xx_cryp_aes.c ****     ctr[loopcounter] = blockb0[loopcounter];
 2905              		.loc 1 1234 0 discriminator 3
 2906 012e 20A9     		add	r1, sp, #128
 2907 0130 1944     		add	r1, r1, r3
 2908 0132 11F8540C 		ldrb	r0, [r1, #-84]	@ zero_extendqisi2
 2909 0136 01F8640C 		strb	r0, [r1, #-100]
1232:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 2910              		.loc 1 1232 0 discriminator 3
 2911 013a 0133     		adds	r3, r3, #1
 2912              	.LVL589:
 2913              	.L123:
1232:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 2914              		.loc 1 1232 0 is_stmt 0 discriminator 1
 2915 013c 511C     		adds	r1, r2, #1
 2916 013e 8B42     		cmp	r3, r1
 2917 0140 F5D3     		bcc	.L124
1235:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
1236:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Set the LSB to 1 */
1237:FWLIB/src/stm32f4xx_cryp_aes.c ****   ctr[15] |= 0x01;
 2918              		.loc 1 1237 0 is_stmt 1
 2919 0142 9DF82B30 		ldrb	r3, [sp, #43]	@ zero_extendqisi2
 2920              	.LVL590:
 2921 0146 43F00103 		orr	r3, r3, #1
 2922 014a 8DF82B30 		strb	r3, [sp, #43]
1238:FWLIB/src/stm32f4xx_cryp_aes.c ****   
1239:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Crypto structures initialisation*/
1240:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 2923              		.loc 1 1240 0
 2924 014e 14A8     		add	r0, sp, #80
 2925 0150 FFF7FEFF 		bl	CRYP_KeyStructInit
 2926              	.LVL591:
1241:FWLIB/src/stm32f4xx_cryp_aes.c ****   
1242:FWLIB/src/stm32f4xx_cryp_aes.c ****   switch(Keysize)
 2927              		.loc 1 1242 0
 2928 0154 019B     		ldr	r3, [sp, #4]
 2929 0156 C02B     		cmp	r3, #192
 2930 0158 17D0     		beq	.L126
 2931 015a B3F5807F 		cmp	r3, #256
 2932 015e 30D0     		beq	.L127
 2933 0160 802B     		cmp	r3, #128
 2934 0162 51D1     		bne	.L125
1243:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
1244:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 128:
1245:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 2935              		.loc 1 1245 0
 2936 0164 0023     		movs	r3, #0
 2937 0166 1F93     		str	r3, [sp, #124]
1246:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 2938              		.loc 1 1246 0
 2939 0168 DAF80030 		ldr	r3, [r10]
 2940              	.LVL592:
 2941              	.LBB398:
 2942              	.LBB399:
 2943              		.loc 2 498 0
 2944 016c 1BBA     		rev	r3, r3
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 84


 2945              	.LVL593:
 2946              	.LBE399:
 2947              	.LBE398:
 2948              		.loc 1 1246 0
 2949 016e 1893     		str	r3, [sp, #96]
 2950              	.LVL594:
1247:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
1248:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 2951              		.loc 1 1248 0
 2952 0170 DAF80430 		ldr	r3, [r10, #4]
 2953              	.LVL595:
 2954              	.LBB400:
 2955              	.LBB401:
 2956              		.loc 2 498 0
 2957 0174 1BBA     		rev	r3, r3
 2958              	.LVL596:
 2959              	.LBE401:
 2960              	.LBE400:
 2961              		.loc 1 1248 0
 2962 0176 1993     		str	r3, [sp, #100]
 2963              	.LVL597:
1249:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
1250:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 2964              		.loc 1 1250 0
 2965 0178 DAF80830 		ldr	r3, [r10, #8]
 2966              	.LVL598:
 2967              	.LBB402:
 2968              	.LBB403:
 2969              		.loc 2 498 0
 2970 017c 1BBA     		rev	r3, r3
 2971              	.LVL599:
 2972              	.LBE403:
 2973              	.LBE402:
 2974              		.loc 1 1250 0
 2975 017e 1A93     		str	r3, [sp, #104]
 2976              	.LVL600:
1251:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
1252:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 2977              		.loc 1 1252 0
 2978 0180 DAF80C30 		ldr	r3, [r10, #12]
 2979              	.LVL601:
 2980              	.LBB404:
 2981              	.LBB405:
 2982              		.loc 2 498 0
 2983 0184 1BBA     		rev	r3, r3
 2984              	.LVL602:
 2985              	.LBE405:
 2986              	.LBE404:
 2987              		.loc 1 1252 0
 2988 0186 1B93     		str	r3, [sp, #108]
1253:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 2989              		.loc 1 1253 0
 2990 0188 3EE0     		b	.L125
 2991              	.LVL603:
 2992              	.L126:
1254:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 192:
1255:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 85


 2993              		.loc 1 1255 0
 2994 018a 4FF48073 		mov	r3, #256
 2995 018e 1F93     		str	r3, [sp, #124]
1256:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 2996              		.loc 1 1256 0
 2997 0190 DAF80030 		ldr	r3, [r10]
 2998              	.LVL604:
 2999              	.LBB406:
 3000              	.LBB407:
 3001              		.loc 2 498 0
 3002 0194 1BBA     		rev	r3, r3
 3003              	.LVL605:
 3004              	.LBE407:
 3005              	.LBE406:
 3006              		.loc 1 1256 0
 3007 0196 1693     		str	r3, [sp, #88]
 3008              	.LVL606:
1257:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
1258:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 3009              		.loc 1 1258 0
 3010 0198 DAF80430 		ldr	r3, [r10, #4]
 3011              	.LVL607:
 3012              	.LBB408:
 3013              	.LBB409:
 3014              		.loc 2 498 0
 3015 019c 1BBA     		rev	r3, r3
 3016              	.LVL608:
 3017              	.LBE409:
 3018              	.LBE408:
 3019              		.loc 1 1258 0
 3020 019e 1793     		str	r3, [sp, #92]
 3021              	.LVL609:
1259:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
1260:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 3022              		.loc 1 1260 0
 3023 01a0 DAF80830 		ldr	r3, [r10, #8]
 3024              	.LVL610:
 3025              	.LBB410:
 3026              	.LBB411:
 3027              		.loc 2 498 0
 3028 01a4 1BBA     		rev	r3, r3
 3029              	.LVL611:
 3030              	.LBE411:
 3031              	.LBE410:
 3032              		.loc 1 1260 0
 3033 01a6 1893     		str	r3, [sp, #96]
 3034              	.LVL612:
1261:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
1262:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 3035              		.loc 1 1262 0
 3036 01a8 DAF80C30 		ldr	r3, [r10, #12]
 3037              	.LVL613:
 3038              	.LBB412:
 3039              	.LBB413:
 3040              		.loc 2 498 0
 3041 01ac 1BBA     		rev	r3, r3
 3042              	.LVL614:
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 86


 3043              	.LBE413:
 3044              	.LBE412:
 3045              		.loc 1 1262 0
 3046 01ae 1993     		str	r3, [sp, #100]
 3047              	.LVL615:
1263:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
1264:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 3048              		.loc 1 1264 0
 3049 01b0 DAF81030 		ldr	r3, [r10, #16]
 3050              	.LVL616:
 3051              	.LBB414:
 3052              	.LBB415:
 3053              		.loc 2 498 0
 3054 01b4 1BBA     		rev	r3, r3
 3055              	.LVL617:
 3056              	.LBE415:
 3057              	.LBE414:
 3058              		.loc 1 1264 0
 3059 01b6 1A93     		str	r3, [sp, #104]
 3060              	.LVL618:
1265:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
1266:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 3061              		.loc 1 1266 0
 3062 01b8 DAF81430 		ldr	r3, [r10, #20]
 3063              	.LVL619:
 3064              	.LBB416:
 3065              	.LBB417:
 3066              		.loc 2 498 0
 3067 01bc 1BBA     		rev	r3, r3
 3068              	.LVL620:
 3069              	.LBE417:
 3070              	.LBE416:
 3071              		.loc 1 1266 0
 3072 01be 1B93     		str	r3, [sp, #108]
1267:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 3073              		.loc 1 1267 0
 3074 01c0 22E0     		b	.L125
 3075              	.LVL621:
 3076              	.L127:
1268:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 256:
1269:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 3077              		.loc 1 1269 0
 3078 01c2 4FF40073 		mov	r3, #512
 3079 01c6 1F93     		str	r3, [sp, #124]
1270:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 3080              		.loc 1 1270 0
 3081 01c8 DAF80030 		ldr	r3, [r10]
 3082              	.LVL622:
 3083              	.LBB418:
 3084              	.LBB419:
 3085              		.loc 2 498 0
 3086 01cc 1BBA     		rev	r3, r3
 3087              	.LVL623:
 3088              	.LBE419:
 3089              	.LBE418:
 3090              		.loc 1 1270 0
 3091 01ce 1493     		str	r3, [sp, #80]
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 87


 3092              	.LVL624:
1271:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
1272:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 3093              		.loc 1 1272 0
 3094 01d0 DAF80430 		ldr	r3, [r10, #4]
 3095              	.LVL625:
 3096              	.LBB420:
 3097              	.LBB421:
 3098              		.loc 2 498 0
 3099 01d4 1BBA     		rev	r3, r3
 3100              	.LVL626:
 3101              	.LBE421:
 3102              	.LBE420:
 3103              		.loc 1 1272 0
 3104 01d6 1593     		str	r3, [sp, #84]
 3105              	.LVL627:
1273:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
1274:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 3106              		.loc 1 1274 0
 3107 01d8 DAF80830 		ldr	r3, [r10, #8]
 3108              	.LVL628:
 3109              	.LBB422:
 3110              	.LBB423:
 3111              		.loc 2 498 0
 3112 01dc 1BBA     		rev	r3, r3
 3113              	.LVL629:
 3114              	.LBE423:
 3115              	.LBE422:
 3116              		.loc 1 1274 0
 3117 01de 1693     		str	r3, [sp, #88]
 3118              	.LVL630:
1275:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
1276:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 3119              		.loc 1 1276 0
 3120 01e0 DAF80C30 		ldr	r3, [r10, #12]
 3121              	.LVL631:
 3122              	.LBB424:
 3123              	.LBB425:
 3124              		.loc 2 498 0
 3125 01e4 1BBA     		rev	r3, r3
 3126              	.LVL632:
 3127              	.LBE425:
 3128              	.LBE424:
 3129              		.loc 1 1276 0
 3130 01e6 1793     		str	r3, [sp, #92]
 3131              	.LVL633:
1277:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
1278:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 3132              		.loc 1 1278 0
 3133 01e8 DAF81030 		ldr	r3, [r10, #16]
 3134              	.LVL634:
 3135              	.LBB426:
 3136              	.LBB427:
 3137              		.loc 2 498 0
 3138 01ec 1BBA     		rev	r3, r3
 3139              	.LVL635:
 3140              	.LBE427:
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 88


 3141              	.LBE426:
 3142              		.loc 1 1278 0
 3143 01ee 1893     		str	r3, [sp, #96]
 3144              	.LVL636:
1279:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
1280:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 3145              		.loc 1 1280 0
 3146 01f0 DAF81430 		ldr	r3, [r10, #20]
 3147              	.LVL637:
 3148              	.LBB428:
 3149              	.LBB429:
 3150              		.loc 2 498 0
 3151 01f4 1BBA     		rev	r3, r3
 3152              	.LVL638:
 3153              	.LBE429:
 3154              	.LBE428:
 3155              		.loc 1 1280 0
 3156 01f6 1993     		str	r3, [sp, #100]
 3157              	.LVL639:
1281:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
1282:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 3158              		.loc 1 1282 0
 3159 01f8 DAF81830 		ldr	r3, [r10, #24]
 3160              	.LVL640:
 3161              	.LBB430:
 3162              	.LBB431:
 3163              		.loc 2 498 0
 3164 01fc 1BBA     		rev	r3, r3
 3165              	.LVL641:
 3166              	.LBE431:
 3167              	.LBE430:
 3168              		.loc 1 1282 0
 3169 01fe 1A93     		str	r3, [sp, #104]
 3170              	.LVL642:
1283:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
1284:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 3171              		.loc 1 1284 0
 3172 0200 DAF81C30 		ldr	r3, [r10, #28]
 3173              	.LVL643:
 3174              	.LBB432:
 3175              	.LBB433:
 3176              		.loc 2 498 0
 3177 0204 1BBA     		rev	r3, r3
 3178              	.LVL644:
 3179              	.LBE433:
 3180              	.LBE432:
 3181              		.loc 1 1284 0
 3182 0206 1B93     		str	r3, [sp, #108]
 3183              	.LVL645:
 3184              	.L125:
1285:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
1286:FWLIB/src/stm32f4xx_cryp_aes.c ****     default:
1287:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
1288:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
1289:FWLIB/src/stm32f4xx_cryp_aes.c ****   
1290:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* CRYP Initialization Vectors */
1291:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV0Left = (__REV(*(uint32_t*)(ctraddr)));
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 89


 3185              		.loc 1 1291 0
 3186 0208 079B     		ldr	r3, [sp, #28]
 3187              	.LVL646:
 3188              	.LBB434:
 3189              	.LBB435:
 3190              		.loc 2 498 0
 3191 020a 1BBA     		rev	r3, r3
 3192              	.LVL647:
 3193              	.LBE435:
 3194              	.LBE434:
 3195              		.loc 1 1291 0
 3196 020c 1093     		str	r3, [sp, #64]
 3197              	.LVL648:
1292:FWLIB/src/stm32f4xx_cryp_aes.c ****   ctraddr+=4;
1293:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV0Right= (__REV(*(uint32_t*)(ctraddr)));
 3198              		.loc 1 1293 0
 3199 020e 7B68     		ldr	r3, [r7, #4]
 3200              	.LVL649:
 3201              	.LBB436:
 3202              	.LBB437:
 3203              		.loc 2 498 0
 3204 0210 1BBA     		rev	r3, r3
 3205              	.LVL650:
 3206              	.LBE437:
 3207              	.LBE436:
 3208              		.loc 1 1293 0
 3209 0212 1193     		str	r3, [sp, #68]
 3210              	.LVL651:
1294:FWLIB/src/stm32f4xx_cryp_aes.c ****   ctraddr+=4;
1295:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV1Left = (__REV(*(uint32_t*)(ctraddr)));
 3211              		.loc 1 1295 0
 3212 0214 BB68     		ldr	r3, [r7, #8]
 3213              	.LVL652:
 3214              	.LBB438:
 3215              	.LBB439:
 3216              		.loc 2 498 0
 3217 0216 1BBA     		rev	r3, r3
 3218              	.LVL653:
 3219              	.LBE439:
 3220              	.LBE438:
 3221              		.loc 1 1295 0
 3222 0218 1293     		str	r3, [sp, #72]
 3223              	.LVL654:
1296:FWLIB/src/stm32f4xx_cryp_aes.c ****   ctraddr+=4;
1297:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV1Right= (__REV(*(uint32_t*)(ctraddr)));
 3224              		.loc 1 1297 0
 3225 021a FB68     		ldr	r3, [r7, #12]
 3226              	.LVL655:
 3227              	.LBB440:
 3228              	.LBB441:
 3229              		.loc 2 498 0
 3230 021c 1BBA     		rev	r3, r3
 3231              	.LVL656:
 3232              	.LBE441:
 3233              	.LBE440:
 3234              		.loc 1 1297 0
 3235 021e 1393     		str	r3, [sp, #76]
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 90


1298:FWLIB/src/stm32f4xx_cryp_aes.c ****   
1299:FWLIB/src/stm32f4xx_cryp_aes.c ****   /*------------------ AES Encryption ------------------*/
1300:FWLIB/src/stm32f4xx_cryp_aes.c ****   if(Mode == MODE_ENCRYPT) /* AES encryption */
 3236              		.loc 1 1300 0
 3237 0220 009B     		ldr	r3, [sp]
 3238 0222 012B     		cmp	r3, #1
 3239 0224 40F0E380 		bne	.L129
1301:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
1302:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Flush IN/OUT FIFOs */
1303:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_FIFOFlush();
 3240              		.loc 1 1303 0
 3241 0228 FFF7FEFF 		bl	CRYP_FIFOFlush
 3242              	.LVL657:
1304:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1305:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Key Initialisation */
1306:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 3243              		.loc 1 1306 0
 3244 022c 14A8     		add	r0, sp, #80
 3245 022e FFF7FEFF 		bl	CRYP_KeyInit
 3246              	.LVL658:
1307:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1308:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* CRYP Initialization Vectors */
1309:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_IVInit(&AES_CRYP_IVInitStructure);
 3247              		.loc 1 1309 0
 3248 0232 10A8     		add	r0, sp, #64
 3249 0234 FFF7FEFF 		bl	CRYP_IVInit
 3250              	.LVL659:
1310:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1311:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Crypto Init for Key preparation for decryption process */
1312:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 3251              		.loc 1 1312 0
 3252 0238 4FF0000A 		mov	r10, #0
 3253              	.LVL660:
 3254 023c CDF870A0 		str	r10, [sp, #112]
1313:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CCM;
 3255              		.loc 1 1313 0
 3256 0240 4FF00813 		mov	r3, #524296
 3257 0244 1D93     		str	r3, [sp, #116]
1314:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 3258              		.loc 1 1314 0
 3259 0246 8023     		movs	r3, #128
 3260 0248 1E93     		str	r3, [sp, #120]
1315:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_Init(&AES_CRYP_InitStructure);
 3261              		.loc 1 1315 0
 3262 024a 1CA8     		add	r0, sp, #112
 3263 024c FFF7FEFF 		bl	CRYP_Init
 3264              	.LVL661:
1316:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1317:FWLIB/src/stm32f4xx_cryp_aes.c ****     /***************************** Init phase *********************************/
1318:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Select init phase */
1319:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_PhaseConfig(CRYP_Phase_Init);
 3265              		.loc 1 1319 0
 3266 0250 5046     		mov	r0, r10
 3267 0252 FFF7FEFF 		bl	CRYP_PhaseConfig
 3268              	.LVL662:
1320:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1321:FWLIB/src/stm32f4xx_cryp_aes.c ****     b0addr = (uint32_t)blockb0;
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 91


1322:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Write the blockb0 block in the IN FIFO */
1323:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn((*(uint32_t*)(b0addr)));
 3269              		.loc 1 1323 0
 3270 0256 0B98     		ldr	r0, [sp, #44]
 3271 0258 FFF7FEFF 		bl	CRYP_DataIn
 3272              	.LVL663:
1324:FWLIB/src/stm32f4xx_cryp_aes.c ****     b0addr+=4;
1325:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn((*(uint32_t*)(b0addr)));
 3273              		.loc 1 1325 0
 3274 025c 0C98     		ldr	r0, [sp, #48]
 3275 025e FFF7FEFF 		bl	CRYP_DataIn
 3276              	.LVL664:
1326:FWLIB/src/stm32f4xx_cryp_aes.c ****     b0addr+=4;
1327:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn((*(uint32_t*)(b0addr)));
 3277              		.loc 1 1327 0
 3278 0262 0D98     		ldr	r0, [sp, #52]
 3279 0264 FFF7FEFF 		bl	CRYP_DataIn
 3280              	.LVL665:
1328:FWLIB/src/stm32f4xx_cryp_aes.c ****     b0addr+=4;
1329:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn((*(uint32_t*)(b0addr)));
 3281              		.loc 1 1329 0
 3282 0268 0E98     		ldr	r0, [sp, #56]
 3283 026a FFF7FEFF 		bl	CRYP_DataIn
 3284              	.LVL666:
1330:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1331:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Enable Crypto processor */
1332:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_Cmd(ENABLE);
 3285              		.loc 1 1332 0
 3286 026e 0120     		movs	r0, #1
 3287 0270 FFF7FEFF 		bl	CRYP_Cmd
 3288              	.LVL667:
 3289              	.L130:
1333:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1334:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Wait for CRYPEN bit to be 0 */
1335:FWLIB/src/stm32f4xx_cryp_aes.c ****     while(CRYP_GetCmdStatus() == ENABLE)
 3290              		.loc 1 1335 0 discriminator 1
 3291 0274 FFF7FEFF 		bl	CRYP_GetCmdStatus
 3292              	.LVL668:
 3293 0278 0128     		cmp	r0, #1
 3294 027a FBD0     		beq	.L130
1336:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
1337:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
1338:FWLIB/src/stm32f4xx_cryp_aes.c ****     /***************************** header phase *******************************/
1339:FWLIB/src/stm32f4xx_cryp_aes.c ****     if(headersize != 0)
 3295              		.loc 1 1339 0
 3296 027c 002D     		cmp	r5, #0
 3297 027e 36D0     		beq	.L163
1340:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
1341:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Select header phase */
1342:FWLIB/src/stm32f4xx_cryp_aes.c ****       CRYP_PhaseConfig(CRYP_Phase_Header);
 3298              		.loc 1 1342 0
 3299 0280 4FF48030 		mov	r0, #65536
 3300 0284 FFF7FEFF 		bl	CRYP_PhaseConfig
 3301              	.LVL669:
1343:FWLIB/src/stm32f4xx_cryp_aes.c ****       
1344:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Enable Crypto processor */
1345:FWLIB/src/stm32f4xx_cryp_aes.c ****       CRYP_Cmd(ENABLE);
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 92


 3302              		.loc 1 1345 0
 3303 0288 0120     		movs	r0, #1
 3304 028a FFF7FEFF 		bl	CRYP_Cmd
 3305              	.LVL670:
1346:FWLIB/src/stm32f4xx_cryp_aes.c ****       
1347:FWLIB/src/stm32f4xx_cryp_aes.c ****       if(CRYP_GetCmdStatus() == DISABLE)
 3306              		.loc 1 1347 0
 3307 028e FFF7FEFF 		bl	CRYP_GetCmdStatus
 3308              	.LVL671:
 3309 0292 0028     		cmp	r0, #0
 3310 0294 00F09981 		beq	.L164
 3311 0298 4FF0000A 		mov	r10, #0
 3312 029c 13E0     		b	.L133
 3313              	.LVL672:
 3314              	.L134:
1348:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
1349:FWLIB/src/stm32f4xx_cryp_aes.c ****          /* The CRYP peripheral clock is not enabled or the device doesn't embed 
1350:FWLIB/src/stm32f4xx_cryp_aes.c ****             the CRYP peripheral (please check the device sales type. */
1351:FWLIB/src/stm32f4xx_cryp_aes.c ****          return(ERROR);
1352:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
1353:FWLIB/src/stm32f4xx_cryp_aes.c ****       
1354:FWLIB/src/stm32f4xx_cryp_aes.c ****       for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
1355:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
1356:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Wait until the IFEM flag is reset */
1357:FWLIB/src/stm32f4xx_cryp_aes.c ****         while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 3315              		.loc 1 1357 0 discriminator 1
 3316 029e 0120     		movs	r0, #1
 3317 02a0 FFF7FEFF 		bl	CRYP_GetFlagStatus
 3318              	.LVL673:
 3319 02a4 0028     		cmp	r0, #0
 3320 02a6 FAD0     		beq	.L134
1358:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
1359:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
1360:FWLIB/src/stm32f4xx_cryp_aes.c ****         
1361:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Write the Input block in the IN FIFO */
1362:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(headeraddr));
 3321              		.loc 1 1362 0 discriminator 2
 3322 02a8 3068     		ldr	r0, [r6]
 3323 02aa FFF7FEFF 		bl	CRYP_DataIn
 3324              	.LVL674:
1363:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
1364:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(headeraddr));
 3325              		.loc 1 1364 0 discriminator 2
 3326 02ae 7068     		ldr	r0, [r6, #4]
 3327 02b0 FFF7FEFF 		bl	CRYP_DataIn
 3328              	.LVL675:
1365:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
1366:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(headeraddr));
 3329              		.loc 1 1366 0 discriminator 2
 3330 02b4 B068     		ldr	r0, [r6, #8]
 3331 02b6 FFF7FEFF 		bl	CRYP_DataIn
 3332              	.LVL676:
1367:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
1368:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(headeraddr));
 3333              		.loc 1 1368 0 discriminator 2
 3334 02ba F068     		ldr	r0, [r6, #12]
 3335 02bc FFF7FEFF 		bl	CRYP_DataIn
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 93


 3336              	.LVL677:
1369:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
 3337              		.loc 1 1369 0 discriminator 2
 3338 02c0 1036     		adds	r6, r6, #16
 3339              	.LVL678:
1354:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 3340              		.loc 1 1354 0 discriminator 2
 3341 02c2 0AF1100A 		add	r10, r10, #16
 3342              	.LVL679:
 3343              	.L133:
1354:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 3344              		.loc 1 1354 0 is_stmt 0 discriminator 1
 3345 02c6 5545     		cmp	r5, r10
 3346 02c8 E9D8     		bhi	.L134
1370:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
1371:FWLIB/src/stm32f4xx_cryp_aes.c ****       
1372:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Wait until the complete message has been processed */
1373:FWLIB/src/stm32f4xx_cryp_aes.c ****       counter = 0;
 3347              		.loc 1 1373 0 is_stmt 1
 3348 02ca 0023     		movs	r3, #0
 3349 02cc 0F93     		str	r3, [sp, #60]
 3350              	.LVL680:
 3351              	.L136:
1374:FWLIB/src/stm32f4xx_cryp_aes.c ****       do
1375:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
1376:FWLIB/src/stm32f4xx_cryp_aes.c ****         busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 3352              		.loc 1 1376 0 discriminator 2
 3353 02ce 1020     		movs	r0, #16
 3354 02d0 FFF7FEFF 		bl	CRYP_GetFlagStatus
 3355              	.LVL681:
 3356 02d4 0246     		mov	r2, r0
 3357              	.LVL682:
1377:FWLIB/src/stm32f4xx_cryp_aes.c ****         counter++;
 3358              		.loc 1 1377 0 discriminator 2
 3359 02d6 0F9B     		ldr	r3, [sp, #60]
 3360 02d8 0133     		adds	r3, r3, #1
 3361 02da 0F93     		str	r3, [sp, #60]
1378:FWLIB/src/stm32f4xx_cryp_aes.c ****       }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 3362              		.loc 1 1378 0 discriminator 2
 3363 02dc 0F9B     		ldr	r3, [sp, #60]
 3364 02de B3F5803F 		cmp	r3, #65536
 3365 02e2 01D0     		beq	.L135
 3366              		.loc 1 1378 0 is_stmt 0 discriminator 1
 3367 02e4 0028     		cmp	r0, #0
 3368 02e6 F2D1     		bne	.L136
 3369              	.L135:
1379:FWLIB/src/stm32f4xx_cryp_aes.c **** 
1380:FWLIB/src/stm32f4xx_cryp_aes.c ****       if (busystatus != RESET)
 3370              		.loc 1 1380 0 is_stmt 1
 3371 02e8 1AB9     		cbnz	r2, .L165
1148:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 3372              		.loc 1 1148 0
 3373 02ea 0125     		movs	r5, #1
 3374              	.LVL683:
 3375 02ec 02E0     		b	.L131
 3376              	.LVL684:
 3377              	.L163:
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 94


 3378 02ee 0125     		movs	r5, #1
 3379              	.LVL685:
 3380 02f0 00E0     		b	.L131
 3381              	.LVL686:
 3382              	.L165:
1381:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
1382:FWLIB/src/stm32f4xx_cryp_aes.c ****         status = ERROR;
 3383              		.loc 1 1382 0
 3384 02f2 0025     		movs	r5, #0
 3385              	.LVL687:
 3386              	.L131:
1383:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
1384:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
1385:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1386:FWLIB/src/stm32f4xx_cryp_aes.c ****     /**************************** payload phase *******************************/
1387:FWLIB/src/stm32f4xx_cryp_aes.c ****     if(ILength != 0)
 3387              		.loc 1 1387 0
 3388 02f4 B9F1000F 		cmp	r9, #0
 3389 02f8 4DD0     		beq	.L137
1388:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
1389:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Select payload phase */
1390:FWLIB/src/stm32f4xx_cryp_aes.c ****       CRYP_PhaseConfig(CRYP_Phase_Payload);
 3390              		.loc 1 1390 0
 3391 02fa 4FF40030 		mov	r0, #131072
 3392 02fe FFF7FEFF 		bl	CRYP_PhaseConfig
 3393              	.LVL688:
1391:FWLIB/src/stm32f4xx_cryp_aes.c ****       
1392:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Enable Crypto processor */
1393:FWLIB/src/stm32f4xx_cryp_aes.c ****       CRYP_Cmd(ENABLE);
 3394              		.loc 1 1393 0
 3395 0302 0120     		movs	r0, #1
 3396 0304 FFF7FEFF 		bl	CRYP_Cmd
 3397              	.LVL689:
1394:FWLIB/src/stm32f4xx_cryp_aes.c ****       
1395:FWLIB/src/stm32f4xx_cryp_aes.c ****       if(CRYP_GetCmdStatus() == DISABLE)
 3398              		.loc 1 1395 0
 3399 0308 FFF7FEFF 		bl	CRYP_GetCmdStatus
 3400              	.LVL690:
 3401 030c 0028     		cmp	r0, #0
 3402 030e 00F05E81 		beq	.L166
 3403 0312 0026     		movs	r6, #0
 3404              	.LVL691:
 3405 0314 3BE0     		b	.L138
 3406              	.LVL692:
 3407              	.L139:
1396:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
1397:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* The CRYP peripheral clock is not enabled or the device doesn't embed 
1398:FWLIB/src/stm32f4xx_cryp_aes.c ****            the CRYP peripheral (please check the device sales type. */
1399:FWLIB/src/stm32f4xx_cryp_aes.c ****         return(ERROR);
1400:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
1401:FWLIB/src/stm32f4xx_cryp_aes.c ****       
1402:FWLIB/src/stm32f4xx_cryp_aes.c ****       for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
1403:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
1404:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Wait until the IFEM flag is reset */
1405:FWLIB/src/stm32f4xx_cryp_aes.c ****         while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 3408              		.loc 1 1405 0 discriminator 1
 3409 0316 0120     		movs	r0, #1
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 95


 3410 0318 FFF7FEFF 		bl	CRYP_GetFlagStatus
 3411              	.LVL693:
 3412 031c 0028     		cmp	r0, #0
 3413 031e FAD0     		beq	.L139
1406:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
1407:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
1408:FWLIB/src/stm32f4xx_cryp_aes.c ****         
1409:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Write the Input block in the IN FIFO */
1410:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(inputaddr));
 3414              		.loc 1 1410 0
 3415 0320 2068     		ldr	r0, [r4]
 3416 0322 FFF7FEFF 		bl	CRYP_DataIn
 3417              	.LVL694:
1411:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
1412:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(inputaddr));
 3418              		.loc 1 1412 0
 3419 0326 6068     		ldr	r0, [r4, #4]
 3420 0328 FFF7FEFF 		bl	CRYP_DataIn
 3421              	.LVL695:
1413:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
1414:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(inputaddr));
 3422              		.loc 1 1414 0
 3423 032c A068     		ldr	r0, [r4, #8]
 3424 032e FFF7FEFF 		bl	CRYP_DataIn
 3425              	.LVL696:
1415:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
1416:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(inputaddr));
 3426              		.loc 1 1416 0
 3427 0332 E068     		ldr	r0, [r4, #12]
 3428 0334 FFF7FEFF 		bl	CRYP_DataIn
 3429              	.LVL697:
1417:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
 3430              		.loc 1 1417 0
 3431 0338 1034     		adds	r4, r4, #16
 3432              	.LVL698:
1418:FWLIB/src/stm32f4xx_cryp_aes.c ****         
1419:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Wait until the complete message has been processed */
1420:FWLIB/src/stm32f4xx_cryp_aes.c ****         counter = 0;
 3433              		.loc 1 1420 0
 3434 033a 0023     		movs	r3, #0
 3435 033c 0F93     		str	r3, [sp, #60]
 3436              	.L141:
1421:FWLIB/src/stm32f4xx_cryp_aes.c ****         do
1422:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
1423:FWLIB/src/stm32f4xx_cryp_aes.c ****           busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 3437              		.loc 1 1423 0 discriminator 2
 3438 033e 1020     		movs	r0, #16
 3439 0340 FFF7FEFF 		bl	CRYP_GetFlagStatus
 3440              	.LVL699:
 3441 0344 0246     		mov	r2, r0
 3442              	.LVL700:
1424:FWLIB/src/stm32f4xx_cryp_aes.c ****           counter++;
 3443              		.loc 1 1424 0 discriminator 2
 3444 0346 0F9B     		ldr	r3, [sp, #60]
 3445 0348 0133     		adds	r3, r3, #1
 3446 034a 0F93     		str	r3, [sp, #60]
1425:FWLIB/src/stm32f4xx_cryp_aes.c ****         }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 96


 3447              		.loc 1 1425 0 discriminator 2
 3448 034c 0F9B     		ldr	r3, [sp, #60]
 3449 034e B3F5803F 		cmp	r3, #65536
 3450 0352 01D0     		beq	.L140
 3451              		.loc 1 1425 0 is_stmt 0 discriminator 1
 3452 0354 0028     		cmp	r0, #0
 3453 0356 F2D1     		bne	.L141
 3454              	.L140:
1426:FWLIB/src/stm32f4xx_cryp_aes.c **** 
1427:FWLIB/src/stm32f4xx_cryp_aes.c ****         if (busystatus != RESET)
 3455              		.loc 1 1427 0 is_stmt 1
 3456 0358 BAB9     		cbnz	r2, .L167
 3457              	.LVL701:
 3458              	.L143:
1428:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
1429:FWLIB/src/stm32f4xx_cryp_aes.c ****           status = ERROR;
1430:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
1431:FWLIB/src/stm32f4xx_cryp_aes.c ****         else
1432:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
1433:FWLIB/src/stm32f4xx_cryp_aes.c ****           /* Wait until the OFNE flag is reset */
1434:FWLIB/src/stm32f4xx_cryp_aes.c ****           while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 3459              		.loc 1 1434 0 discriminator 1
 3460 035a 0420     		movs	r0, #4
 3461 035c FFF7FEFF 		bl	CRYP_GetFlagStatus
 3462              	.LVL702:
 3463 0360 0028     		cmp	r0, #0
 3464 0362 FAD0     		beq	.L143
1435:FWLIB/src/stm32f4xx_cryp_aes.c ****           {
1436:FWLIB/src/stm32f4xx_cryp_aes.c ****           }
1437:FWLIB/src/stm32f4xx_cryp_aes.c ****           
1438:FWLIB/src/stm32f4xx_cryp_aes.c ****           /* Read the Output block from the Output FIFO */
1439:FWLIB/src/stm32f4xx_cryp_aes.c ****           *(uint32_t*)(outputaddr) = CRYP_DataOut();
 3465              		.loc 1 1439 0
 3466 0364 FFF7FEFF 		bl	CRYP_DataOut
 3467              	.LVL703:
 3468 0368 C8F80000 		str	r0, [r8]
 3469              	.LVL704:
1440:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
1441:FWLIB/src/stm32f4xx_cryp_aes.c ****           *(uint32_t*)(outputaddr) = CRYP_DataOut();
 3470              		.loc 1 1441 0
 3471 036c FFF7FEFF 		bl	CRYP_DataOut
 3472              	.LVL705:
 3473 0370 C8F80400 		str	r0, [r8, #4]
 3474              	.LVL706:
1442:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
1443:FWLIB/src/stm32f4xx_cryp_aes.c ****           *(uint32_t*)(outputaddr) = CRYP_DataOut();
 3475              		.loc 1 1443 0
 3476 0374 FFF7FEFF 		bl	CRYP_DataOut
 3477              	.LVL707:
 3478 0378 C8F80800 		str	r0, [r8, #8]
 3479              	.LVL708:
1444:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
1445:FWLIB/src/stm32f4xx_cryp_aes.c ****           *(uint32_t*)(outputaddr) = CRYP_DataOut();
 3480              		.loc 1 1445 0
 3481 037c FFF7FEFF 		bl	CRYP_DataOut
 3482              	.LVL709:
 3483 0380 C8F80C00 		str	r0, [r8, #12]
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 97


1446:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
 3484              		.loc 1 1446 0
 3485 0384 08F11008 		add	r8, r8, #16
 3486              	.LVL710:
 3487 0388 00E0     		b	.L142
 3488              	.LVL711:
 3489              	.L167:
1429:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
 3490              		.loc 1 1429 0
 3491 038a 0025     		movs	r5, #0
 3492              	.LVL712:
 3493              	.L142:
1402:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 3494              		.loc 1 1402 0 discriminator 2
 3495 038c 1036     		adds	r6, r6, #16
 3496              	.LVL713:
 3497              	.L138:
1402:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 3498              		.loc 1 1402 0 is_stmt 0 discriminator 1
 3499 038e 4E45     		cmp	r6, r9
 3500 0390 01D2     		bcs	.L137
1402:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 3501              		.loc 1 1402 0 discriminator 3
 3502 0392 002D     		cmp	r5, #0
 3503 0394 BFD1     		bne	.L139
 3504              	.LVL714:
 3505              	.L137:
1447:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
1448:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
1449:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
1450:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1451:FWLIB/src/stm32f4xx_cryp_aes.c ****     /***************************** final phase ********************************/
1452:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Select final phase */
1453:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_PhaseConfig(CRYP_Phase_Final);
 3506              		.loc 1 1453 0 is_stmt 1
 3507 0396 4FF44030 		mov	r0, #196608
 3508 039a FFF7FEFF 		bl	CRYP_PhaseConfig
 3509              	.LVL715:
1454:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1455:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Enable Crypto processor */
1456:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_Cmd(ENABLE);
 3510              		.loc 1 1456 0
 3511 039e 0120     		movs	r0, #1
 3512 03a0 FFF7FEFF 		bl	CRYP_Cmd
 3513              	.LVL716:
1457:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1458:FWLIB/src/stm32f4xx_cryp_aes.c ****     if(CRYP_GetCmdStatus() == DISABLE)
 3514              		.loc 1 1458 0
 3515 03a4 FFF7FEFF 		bl	CRYP_GetCmdStatus
 3516              	.LVL717:
 3517 03a8 0028     		cmp	r0, #0
 3518 03aa 00F01281 		beq	.L168
 3519              	.LVL718:
1459:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
1460:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* The CRYP peripheral clock is not enabled or the device doesn't embed 
1461:FWLIB/src/stm32f4xx_cryp_aes.c ****          the CRYP peripheral (please check the device sales type. */
1462:FWLIB/src/stm32f4xx_cryp_aes.c ****       return(ERROR);
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 98


1463:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
1464:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1465:FWLIB/src/stm32f4xx_cryp_aes.c ****     ctraddr = (uint32_t)ctr;
1466:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Write the counter block in the IN FIFO */
1467:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(ctraddr));
 3520              		.loc 1 1467 0
 3521 03ae 0798     		ldr	r0, [sp, #28]
 3522 03b0 FFF7FEFF 		bl	CRYP_DataIn
 3523              	.LVL719:
1468:FWLIB/src/stm32f4xx_cryp_aes.c ****     ctraddr+=4;
1469:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(ctraddr));
 3524              		.loc 1 1469 0
 3525 03b4 7868     		ldr	r0, [r7, #4]
 3526 03b6 FFF7FEFF 		bl	CRYP_DataIn
 3527              	.LVL720:
1470:FWLIB/src/stm32f4xx_cryp_aes.c ****     ctraddr+=4;
1471:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(ctraddr));
 3528              		.loc 1 1471 0
 3529 03ba B868     		ldr	r0, [r7, #8]
 3530 03bc FFF7FEFF 		bl	CRYP_DataIn
 3531              	.LVL721:
1472:FWLIB/src/stm32f4xx_cryp_aes.c ****     ctraddr+=4;
1473:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Reset bit 0 (after 8-bit swap) is equivalent to reset bit 24 (before 8-bit swap) */
1474:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(ctraddr) & 0xfeffffff);
 3532              		.loc 1 1474 0
 3533 03c0 F868     		ldr	r0, [r7, #12]
 3534 03c2 20F08070 		bic	r0, r0, #16777216
 3535 03c6 FFF7FEFF 		bl	CRYP_DataIn
 3536              	.LVL722:
 3537              	.L144:
1475:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1476:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Wait until the OFNE flag is reset */
1477:FWLIB/src/stm32f4xx_cryp_aes.c ****     while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 3538              		.loc 1 1477 0 discriminator 1
 3539 03ca 0420     		movs	r0, #4
 3540 03cc FFF7FEFF 		bl	CRYP_GetFlagStatus
 3541              	.LVL723:
 3542 03d0 0028     		cmp	r0, #0
 3543 03d2 FAD0     		beq	.L144
1478:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
1479:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
1480:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1481:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Read the Auth TAG in the IN FIFO */
1482:FWLIB/src/stm32f4xx_cryp_aes.c ****     temptag[0] = CRYP_DataOut();
 3544              		.loc 1 1482 0
 3545 03d4 FFF7FEFF 		bl	CRYP_DataOut
 3546              	.LVL724:
 3547 03d8 0390     		str	r0, [sp, #12]
1483:FWLIB/src/stm32f4xx_cryp_aes.c ****     temptag[1] = CRYP_DataOut();
 3548              		.loc 1 1483 0
 3549 03da FFF7FEFF 		bl	CRYP_DataOut
 3550              	.LVL725:
 3551 03de 0490     		str	r0, [sp, #16]
1484:FWLIB/src/stm32f4xx_cryp_aes.c ****     temptag[2] = CRYP_DataOut();
 3552              		.loc 1 1484 0
 3553 03e0 FFF7FEFF 		bl	CRYP_DataOut
 3554              	.LVL726:
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 99


 3555 03e4 0590     		str	r0, [sp, #20]
1485:FWLIB/src/stm32f4xx_cryp_aes.c ****     temptag[3] = CRYP_DataOut();
 3556              		.loc 1 1485 0
 3557 03e6 FFF7FEFF 		bl	CRYP_DataOut
 3558              	.LVL727:
 3559 03ea 0690     		str	r0, [sp, #24]
 3560 03ec DEE0     		b	.L145
 3561              	.LVL728:
 3562              	.L129:
1486:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
1487:FWLIB/src/stm32f4xx_cryp_aes.c ****   /*------------------ AES Decryption ------------------*/
1488:FWLIB/src/stm32f4xx_cryp_aes.c ****   else /* AES decryption */
1489:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
1490:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Flush IN/OUT FIFOs */
1491:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_FIFOFlush();
 3563              		.loc 1 1491 0
 3564 03ee FFF7FEFF 		bl	CRYP_FIFOFlush
 3565              	.LVL729:
1492:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1493:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Key Initialisation */
1494:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 3566              		.loc 1 1494 0
 3567 03f2 14A8     		add	r0, sp, #80
 3568 03f4 FFF7FEFF 		bl	CRYP_KeyInit
 3569              	.LVL730:
1495:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1496:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* CRYP Initialization Vectors */
1497:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_IVInit(&AES_CRYP_IVInitStructure);
 3570              		.loc 1 1497 0
 3571 03f8 10A8     		add	r0, sp, #64
 3572 03fa FFF7FEFF 		bl	CRYP_IVInit
 3573              	.LVL731:
1498:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1499:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Crypto Init for Key preparation for decryption process */
1500:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 3574              		.loc 1 1500 0
 3575 03fe 0423     		movs	r3, #4
 3576 0400 1C93     		str	r3, [sp, #112]
1501:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CCM;
 3577              		.loc 1 1501 0
 3578 0402 4FF00813 		mov	r3, #524296
 3579 0406 1D93     		str	r3, [sp, #116]
1502:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 3580              		.loc 1 1502 0
 3581 0408 8023     		movs	r3, #128
 3582 040a 1E93     		str	r3, [sp, #120]
1503:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_Init(&AES_CRYP_InitStructure);
 3583              		.loc 1 1503 0
 3584 040c 1CA8     		add	r0, sp, #112
 3585 040e FFF7FEFF 		bl	CRYP_Init
 3586              	.LVL732:
1504:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1505:FWLIB/src/stm32f4xx_cryp_aes.c ****     /***************************** Init phase *********************************/
1506:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Select init phase */
1507:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_PhaseConfig(CRYP_Phase_Init);
 3587              		.loc 1 1507 0
 3588 0412 0020     		movs	r0, #0
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 100


 3589 0414 FFF7FEFF 		bl	CRYP_PhaseConfig
 3590              	.LVL733:
1508:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1509:FWLIB/src/stm32f4xx_cryp_aes.c ****     b0addr = (uint32_t)blockb0;
1510:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Write the blockb0 block in the IN FIFO */
1511:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn((*(uint32_t*)(b0addr)));
 3591              		.loc 1 1511 0
 3592 0418 0B98     		ldr	r0, [sp, #44]
 3593 041a FFF7FEFF 		bl	CRYP_DataIn
 3594              	.LVL734:
1512:FWLIB/src/stm32f4xx_cryp_aes.c ****     b0addr+=4;
1513:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn((*(uint32_t*)(b0addr)));
 3595              		.loc 1 1513 0
 3596 041e 0C98     		ldr	r0, [sp, #48]
 3597 0420 FFF7FEFF 		bl	CRYP_DataIn
 3598              	.LVL735:
1514:FWLIB/src/stm32f4xx_cryp_aes.c ****     b0addr+=4;
1515:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn((*(uint32_t*)(b0addr)));
 3599              		.loc 1 1515 0
 3600 0424 0D98     		ldr	r0, [sp, #52]
 3601 0426 FFF7FEFF 		bl	CRYP_DataIn
 3602              	.LVL736:
1516:FWLIB/src/stm32f4xx_cryp_aes.c ****     b0addr+=4;
1517:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn((*(uint32_t*)(b0addr)));
 3603              		.loc 1 1517 0
 3604 042a 0E98     		ldr	r0, [sp, #56]
 3605 042c FFF7FEFF 		bl	CRYP_DataIn
 3606              	.LVL737:
1518:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1519:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Enable Crypto processor */
1520:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_Cmd(ENABLE);
 3607              		.loc 1 1520 0
 3608 0430 0120     		movs	r0, #1
 3609 0432 FFF7FEFF 		bl	CRYP_Cmd
 3610              	.LVL738:
 3611              	.L146:
1521:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1522:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Wait for CRYPEN bit to be 0 */
1523:FWLIB/src/stm32f4xx_cryp_aes.c ****     while(CRYP_GetCmdStatus() == ENABLE)
 3612              		.loc 1 1523 0 discriminator 1
 3613 0436 FFF7FEFF 		bl	CRYP_GetCmdStatus
 3614              	.LVL739:
 3615 043a 0128     		cmp	r0, #1
 3616 043c FBD0     		beq	.L146
1524:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
1525:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
1526:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1527:FWLIB/src/stm32f4xx_cryp_aes.c ****     /***************************** header phase *******************************/
1528:FWLIB/src/stm32f4xx_cryp_aes.c ****     if(headersize != 0)
 3617              		.loc 1 1528 0
 3618 043e 002D     		cmp	r5, #0
 3619 0440 36D0     		beq	.L169
1529:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
1530:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Select header phase */
1531:FWLIB/src/stm32f4xx_cryp_aes.c ****       CRYP_PhaseConfig(CRYP_Phase_Header);
 3620              		.loc 1 1531 0
 3621 0442 4FF48030 		mov	r0, #65536
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 101


 3622 0446 FFF7FEFF 		bl	CRYP_PhaseConfig
 3623              	.LVL740:
1532:FWLIB/src/stm32f4xx_cryp_aes.c ****       
1533:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Enable Crypto processor */
1534:FWLIB/src/stm32f4xx_cryp_aes.c ****       CRYP_Cmd(ENABLE);
 3624              		.loc 1 1534 0
 3625 044a 0120     		movs	r0, #1
 3626 044c FFF7FEFF 		bl	CRYP_Cmd
 3627              	.LVL741:
1535:FWLIB/src/stm32f4xx_cryp_aes.c ****       
1536:FWLIB/src/stm32f4xx_cryp_aes.c ****       if(CRYP_GetCmdStatus() == DISABLE)
 3628              		.loc 1 1536 0
 3629 0450 FFF7FEFF 		bl	CRYP_GetCmdStatus
 3630              	.LVL742:
 3631 0454 0028     		cmp	r0, #0
 3632 0456 00F0BE80 		beq	.L170
 3633 045a 4FF0000A 		mov	r10, #0
 3634              	.LVL743:
 3635 045e 13E0     		b	.L148
 3636              	.LVL744:
 3637              	.L149:
1537:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
1538:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* The CRYP peripheral clock is not enabled or the device doesn't embed 
1539:FWLIB/src/stm32f4xx_cryp_aes.c ****            the CRYP peripheral (please check the device sales type. */
1540:FWLIB/src/stm32f4xx_cryp_aes.c ****         return(ERROR);
1541:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
1542:FWLIB/src/stm32f4xx_cryp_aes.c ****       
1543:FWLIB/src/stm32f4xx_cryp_aes.c ****       for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
1544:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
1545:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Wait until the IFEM flag is reset */
1546:FWLIB/src/stm32f4xx_cryp_aes.c ****         while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 3638              		.loc 1 1546 0 discriminator 1
 3639 0460 0120     		movs	r0, #1
 3640 0462 FFF7FEFF 		bl	CRYP_GetFlagStatus
 3641              	.LVL745:
 3642 0466 0028     		cmp	r0, #0
 3643 0468 FAD0     		beq	.L149
1547:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
1548:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
1549:FWLIB/src/stm32f4xx_cryp_aes.c ****         
1550:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Write the Input block in the IN FIFO */
1551:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(headeraddr));
 3644              		.loc 1 1551 0 discriminator 2
 3645 046a 3068     		ldr	r0, [r6]
 3646 046c FFF7FEFF 		bl	CRYP_DataIn
 3647              	.LVL746:
1552:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
1553:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(headeraddr));
 3648              		.loc 1 1553 0 discriminator 2
 3649 0470 7068     		ldr	r0, [r6, #4]
 3650 0472 FFF7FEFF 		bl	CRYP_DataIn
 3651              	.LVL747:
1554:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
1555:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(headeraddr));
 3652              		.loc 1 1555 0 discriminator 2
 3653 0476 B068     		ldr	r0, [r6, #8]
 3654 0478 FFF7FEFF 		bl	CRYP_DataIn
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 102


 3655              	.LVL748:
1556:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
1557:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(headeraddr));
 3656              		.loc 1 1557 0 discriminator 2
 3657 047c F068     		ldr	r0, [r6, #12]
 3658 047e FFF7FEFF 		bl	CRYP_DataIn
 3659              	.LVL749:
1558:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
 3660              		.loc 1 1558 0 discriminator 2
 3661 0482 1036     		adds	r6, r6, #16
 3662              	.LVL750:
1543:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 3663              		.loc 1 1543 0 discriminator 2
 3664 0484 0AF1100A 		add	r10, r10, #16
 3665              	.LVL751:
 3666              	.L148:
1543:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 3667              		.loc 1 1543 0 is_stmt 0 discriminator 1
 3668 0488 5545     		cmp	r5, r10
 3669 048a E9D8     		bhi	.L149
1559:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
1560:FWLIB/src/stm32f4xx_cryp_aes.c ****       
1561:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Wait until the complete message has been processed */
1562:FWLIB/src/stm32f4xx_cryp_aes.c ****       counter = 0;
 3670              		.loc 1 1562 0 is_stmt 1
 3671 048c 0023     		movs	r3, #0
 3672 048e 0F93     		str	r3, [sp, #60]
 3673              	.LVL752:
 3674              	.L151:
1563:FWLIB/src/stm32f4xx_cryp_aes.c ****       do
1564:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
1565:FWLIB/src/stm32f4xx_cryp_aes.c ****         busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 3675              		.loc 1 1565 0 discriminator 2
 3676 0490 1020     		movs	r0, #16
 3677 0492 FFF7FEFF 		bl	CRYP_GetFlagStatus
 3678              	.LVL753:
 3679 0496 0246     		mov	r2, r0
 3680              	.LVL754:
1566:FWLIB/src/stm32f4xx_cryp_aes.c ****         counter++;
 3681              		.loc 1 1566 0 discriminator 2
 3682 0498 0F9B     		ldr	r3, [sp, #60]
 3683 049a 0133     		adds	r3, r3, #1
 3684 049c 0F93     		str	r3, [sp, #60]
1567:FWLIB/src/stm32f4xx_cryp_aes.c ****       }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 3685              		.loc 1 1567 0 discriminator 2
 3686 049e 0F9B     		ldr	r3, [sp, #60]
 3687 04a0 B3F5803F 		cmp	r3, #65536
 3688 04a4 01D0     		beq	.L150
 3689              		.loc 1 1567 0 is_stmt 0 discriminator 1
 3690 04a6 0028     		cmp	r0, #0
 3691 04a8 F2D1     		bne	.L151
 3692              	.L150:
1568:FWLIB/src/stm32f4xx_cryp_aes.c **** 
1569:FWLIB/src/stm32f4xx_cryp_aes.c ****       if (busystatus != RESET)
 3693              		.loc 1 1569 0 is_stmt 1
 3694 04aa 1AB9     		cbnz	r2, .L171
1148:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t keyaddr    = (uint32_t)Key;
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 103


 3695              		.loc 1 1148 0
 3696 04ac 0125     		movs	r5, #1
 3697              	.LVL755:
 3698 04ae 02E0     		b	.L147
 3699              	.LVL756:
 3700              	.L169:
 3701 04b0 0125     		movs	r5, #1
 3702              	.LVL757:
 3703 04b2 00E0     		b	.L147
 3704              	.LVL758:
 3705              	.L171:
1570:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
1571:FWLIB/src/stm32f4xx_cryp_aes.c ****         status = ERROR;
 3706              		.loc 1 1571 0
 3707 04b4 0025     		movs	r5, #0
 3708              	.LVL759:
 3709              	.L147:
1572:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
1573:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
1574:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1575:FWLIB/src/stm32f4xx_cryp_aes.c ****     /**************************** payload phase *******************************/
1576:FWLIB/src/stm32f4xx_cryp_aes.c ****     if(ILength != 0)
 3710              		.loc 1 1576 0
 3711 04b6 B9F1000F 		cmp	r9, #0
 3712 04ba 4DD0     		beq	.L152
1577:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
1578:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Select payload phase */
1579:FWLIB/src/stm32f4xx_cryp_aes.c ****       CRYP_PhaseConfig(CRYP_Phase_Payload);
 3713              		.loc 1 1579 0
 3714 04bc 4FF40030 		mov	r0, #131072
 3715 04c0 FFF7FEFF 		bl	CRYP_PhaseConfig
 3716              	.LVL760:
1580:FWLIB/src/stm32f4xx_cryp_aes.c **** 
1581:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Enable Crypto processor */
1582:FWLIB/src/stm32f4xx_cryp_aes.c ****       CRYP_Cmd(ENABLE);
 3717              		.loc 1 1582 0
 3718 04c4 0120     		movs	r0, #1
 3719 04c6 FFF7FEFF 		bl	CRYP_Cmd
 3720              	.LVL761:
1583:FWLIB/src/stm32f4xx_cryp_aes.c ****       
1584:FWLIB/src/stm32f4xx_cryp_aes.c ****       if(CRYP_GetCmdStatus() == DISABLE)
 3721              		.loc 1 1584 0
 3722 04ca FFF7FEFF 		bl	CRYP_GetCmdStatus
 3723              	.LVL762:
 3724 04ce 0028     		cmp	r0, #0
 3725 04d0 00F08380 		beq	.L172
 3726 04d4 0026     		movs	r6, #0
 3727              	.LVL763:
 3728 04d6 3BE0     		b	.L153
 3729              	.LVL764:
 3730              	.L154:
1585:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
1586:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* The CRYP peripheral clock is not enabled or the device doesn't embed 
1587:FWLIB/src/stm32f4xx_cryp_aes.c ****            the CRYP peripheral (please check the device sales type. */
1588:FWLIB/src/stm32f4xx_cryp_aes.c ****         return(ERROR);
1589:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
1590:FWLIB/src/stm32f4xx_cryp_aes.c ****       
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 104


1591:FWLIB/src/stm32f4xx_cryp_aes.c ****       for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
1592:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
1593:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Wait until the IFEM flag is reset */
1594:FWLIB/src/stm32f4xx_cryp_aes.c ****         while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 3731              		.loc 1 1594 0 discriminator 1
 3732 04d8 0120     		movs	r0, #1
 3733 04da FFF7FEFF 		bl	CRYP_GetFlagStatus
 3734              	.LVL765:
 3735 04de 0028     		cmp	r0, #0
 3736 04e0 FAD0     		beq	.L154
1595:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
1596:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
1597:FWLIB/src/stm32f4xx_cryp_aes.c ****         
1598:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Write the Input block in the IN FIFO */
1599:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(inputaddr));
 3737              		.loc 1 1599 0
 3738 04e2 2068     		ldr	r0, [r4]
 3739 04e4 FFF7FEFF 		bl	CRYP_DataIn
 3740              	.LVL766:
1600:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
1601:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(inputaddr));
 3741              		.loc 1 1601 0
 3742 04e8 6068     		ldr	r0, [r4, #4]
 3743 04ea FFF7FEFF 		bl	CRYP_DataIn
 3744              	.LVL767:
1602:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
1603:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(inputaddr));
 3745              		.loc 1 1603 0
 3746 04ee A068     		ldr	r0, [r4, #8]
 3747 04f0 FFF7FEFF 		bl	CRYP_DataIn
 3748              	.LVL768:
1604:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
1605:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(inputaddr));
 3749              		.loc 1 1605 0
 3750 04f4 E068     		ldr	r0, [r4, #12]
 3751 04f6 FFF7FEFF 		bl	CRYP_DataIn
 3752              	.LVL769:
1606:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
 3753              		.loc 1 1606 0
 3754 04fa 1034     		adds	r4, r4, #16
 3755              	.LVL770:
1607:FWLIB/src/stm32f4xx_cryp_aes.c ****         
1608:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Wait until the complete message has been processed */
1609:FWLIB/src/stm32f4xx_cryp_aes.c ****         counter = 0;
 3756              		.loc 1 1609 0
 3757 04fc 0023     		movs	r3, #0
 3758 04fe 0F93     		str	r3, [sp, #60]
 3759              	.L156:
1610:FWLIB/src/stm32f4xx_cryp_aes.c ****         do
1611:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
1612:FWLIB/src/stm32f4xx_cryp_aes.c ****           busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 3760              		.loc 1 1612 0 discriminator 2
 3761 0500 1020     		movs	r0, #16
 3762 0502 FFF7FEFF 		bl	CRYP_GetFlagStatus
 3763              	.LVL771:
 3764 0506 0246     		mov	r2, r0
 3765              	.LVL772:
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 105


1613:FWLIB/src/stm32f4xx_cryp_aes.c ****           counter++;
 3766              		.loc 1 1613 0 discriminator 2
 3767 0508 0F9B     		ldr	r3, [sp, #60]
 3768 050a 0133     		adds	r3, r3, #1
 3769 050c 0F93     		str	r3, [sp, #60]
1614:FWLIB/src/stm32f4xx_cryp_aes.c ****         }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 3770              		.loc 1 1614 0 discriminator 2
 3771 050e 0F9B     		ldr	r3, [sp, #60]
 3772 0510 B3F5803F 		cmp	r3, #65536
 3773 0514 01D0     		beq	.L155
 3774              		.loc 1 1614 0 is_stmt 0 discriminator 1
 3775 0516 0028     		cmp	r0, #0
 3776 0518 F2D1     		bne	.L156
 3777              	.L155:
1615:FWLIB/src/stm32f4xx_cryp_aes.c **** 
1616:FWLIB/src/stm32f4xx_cryp_aes.c ****         if (busystatus != RESET)
 3778              		.loc 1 1616 0 is_stmt 1
 3779 051a BAB9     		cbnz	r2, .L173
 3780              	.LVL773:
 3781              	.L158:
1617:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
1618:FWLIB/src/stm32f4xx_cryp_aes.c ****           status = ERROR;
1619:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
1620:FWLIB/src/stm32f4xx_cryp_aes.c ****         else
1621:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
1622:FWLIB/src/stm32f4xx_cryp_aes.c ****           /* Wait until the OFNE flag is reset */
1623:FWLIB/src/stm32f4xx_cryp_aes.c ****           while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 3782              		.loc 1 1623 0 discriminator 1
 3783 051c 0420     		movs	r0, #4
 3784 051e FFF7FEFF 		bl	CRYP_GetFlagStatus
 3785              	.LVL774:
 3786 0522 0028     		cmp	r0, #0
 3787 0524 FAD0     		beq	.L158
1624:FWLIB/src/stm32f4xx_cryp_aes.c ****           {
1625:FWLIB/src/stm32f4xx_cryp_aes.c ****           }
1626:FWLIB/src/stm32f4xx_cryp_aes.c ****           
1627:FWLIB/src/stm32f4xx_cryp_aes.c ****           /* Read the Output block from the Output FIFO */
1628:FWLIB/src/stm32f4xx_cryp_aes.c ****           *(uint32_t*)(outputaddr) = CRYP_DataOut();
 3788              		.loc 1 1628 0
 3789 0526 FFF7FEFF 		bl	CRYP_DataOut
 3790              	.LVL775:
 3791 052a C8F80000 		str	r0, [r8]
 3792              	.LVL776:
1629:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
1630:FWLIB/src/stm32f4xx_cryp_aes.c ****           *(uint32_t*)(outputaddr) = CRYP_DataOut();
 3793              		.loc 1 1630 0
 3794 052e FFF7FEFF 		bl	CRYP_DataOut
 3795              	.LVL777:
 3796 0532 C8F80400 		str	r0, [r8, #4]
 3797              	.LVL778:
1631:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
1632:FWLIB/src/stm32f4xx_cryp_aes.c ****           *(uint32_t*)(outputaddr) = CRYP_DataOut();
 3798              		.loc 1 1632 0
 3799 0536 FFF7FEFF 		bl	CRYP_DataOut
 3800              	.LVL779:
 3801 053a C8F80800 		str	r0, [r8, #8]
 3802              	.LVL780:
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 106


1633:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
1634:FWLIB/src/stm32f4xx_cryp_aes.c ****           *(uint32_t*)(outputaddr) = CRYP_DataOut();
 3803              		.loc 1 1634 0
 3804 053e FFF7FEFF 		bl	CRYP_DataOut
 3805              	.LVL781:
 3806 0542 C8F80C00 		str	r0, [r8, #12]
1635:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
 3807              		.loc 1 1635 0
 3808 0546 08F11008 		add	r8, r8, #16
 3809              	.LVL782:
 3810 054a 00E0     		b	.L157
 3811              	.LVL783:
 3812              	.L173:
1618:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
 3813              		.loc 1 1618 0
 3814 054c 0025     		movs	r5, #0
 3815              	.LVL784:
 3816              	.L157:
1591:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 3817              		.loc 1 1591 0 discriminator 2
 3818 054e 1036     		adds	r6, r6, #16
 3819              	.LVL785:
 3820              	.L153:
1591:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 3821              		.loc 1 1591 0 is_stmt 0 discriminator 1
 3822 0550 4E45     		cmp	r6, r9
 3823 0552 01D2     		bcs	.L152
1591:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 3824              		.loc 1 1591 0 discriminator 3
 3825 0554 002D     		cmp	r5, #0
 3826 0556 BFD1     		bne	.L154
 3827              	.LVL786:
 3828              	.L152:
1636:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
1637:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
1638:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
1639:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1640:FWLIB/src/stm32f4xx_cryp_aes.c ****     /***************************** final phase ********************************/
1641:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Select final phase */
1642:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_PhaseConfig(CRYP_Phase_Final);
 3829              		.loc 1 1642 0 is_stmt 1
 3830 0558 4FF44030 		mov	r0, #196608
 3831 055c FFF7FEFF 		bl	CRYP_PhaseConfig
 3832              	.LVL787:
1643:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1644:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Enable Crypto processor */
1645:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_Cmd(ENABLE);
 3833              		.loc 1 1645 0
 3834 0560 0120     		movs	r0, #1
 3835 0562 FFF7FEFF 		bl	CRYP_Cmd
 3836              	.LVL788:
1646:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1647:FWLIB/src/stm32f4xx_cryp_aes.c ****     if(CRYP_GetCmdStatus() == DISABLE)
 3837              		.loc 1 1647 0
 3838 0566 FFF7FEFF 		bl	CRYP_GetCmdStatus
 3839              	.LVL789:
 3840 056a 0028     		cmp	r0, #0
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 107


 3841 056c 37D0     		beq	.L174
 3842              	.LVL790:
1648:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
1649:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* The CRYP peripheral clock is not enabled or the device doesn't embed 
1650:FWLIB/src/stm32f4xx_cryp_aes.c ****          the CRYP peripheral (please check the device sales type. */
1651:FWLIB/src/stm32f4xx_cryp_aes.c ****       return(ERROR);
1652:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
1653:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1654:FWLIB/src/stm32f4xx_cryp_aes.c ****     ctraddr = (uint32_t)ctr;
1655:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Write the counter block in the IN FIFO */
1656:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(ctraddr));
 3843              		.loc 1 1656 0
 3844 056e 0798     		ldr	r0, [sp, #28]
 3845 0570 FFF7FEFF 		bl	CRYP_DataIn
 3846              	.LVL791:
1657:FWLIB/src/stm32f4xx_cryp_aes.c ****     ctraddr+=4;
1658:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(ctraddr));
 3847              		.loc 1 1658 0
 3848 0574 7868     		ldr	r0, [r7, #4]
 3849 0576 FFF7FEFF 		bl	CRYP_DataIn
 3850              	.LVL792:
1659:FWLIB/src/stm32f4xx_cryp_aes.c ****     ctraddr+=4;
1660:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(ctraddr));
 3851              		.loc 1 1660 0
 3852 057a B868     		ldr	r0, [r7, #8]
 3853 057c FFF7FEFF 		bl	CRYP_DataIn
 3854              	.LVL793:
1661:FWLIB/src/stm32f4xx_cryp_aes.c ****     ctraddr+=4;
1662:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Reset bit 0 (after 8-bit swap) is equivalent to reset bit 24 (before 8-bit swap) */
1663:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(ctraddr) & 0xfeffffff);
 3855              		.loc 1 1663 0
 3856 0580 F868     		ldr	r0, [r7, #12]
 3857 0582 20F08070 		bic	r0, r0, #16777216
 3858 0586 FFF7FEFF 		bl	CRYP_DataIn
 3859              	.LVL794:
 3860              	.L159:
1664:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1665:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Wait until the OFNE flag is reset */
1666:FWLIB/src/stm32f4xx_cryp_aes.c ****     while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 3861              		.loc 1 1666 0 discriminator 1
 3862 058a 0420     		movs	r0, #4
 3863 058c FFF7FEFF 		bl	CRYP_GetFlagStatus
 3864              	.LVL795:
 3865 0590 0028     		cmp	r0, #0
 3866 0592 FAD0     		beq	.L159
1667:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
1668:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
1669:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1670:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Read the Authentification TAG (MAC) in the IN FIFO */
1671:FWLIB/src/stm32f4xx_cryp_aes.c ****     temptag[0] = CRYP_DataOut();
 3867              		.loc 1 1671 0
 3868 0594 FFF7FEFF 		bl	CRYP_DataOut
 3869              	.LVL796:
 3870 0598 0390     		str	r0, [sp, #12]
1672:FWLIB/src/stm32f4xx_cryp_aes.c ****     temptag[1] = CRYP_DataOut();
 3871              		.loc 1 1672 0
 3872 059a FFF7FEFF 		bl	CRYP_DataOut
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 108


 3873              	.LVL797:
 3874 059e 0490     		str	r0, [sp, #16]
1673:FWLIB/src/stm32f4xx_cryp_aes.c ****     temptag[2] = CRYP_DataOut();
 3875              		.loc 1 1673 0
 3876 05a0 FFF7FEFF 		bl	CRYP_DataOut
 3877              	.LVL798:
 3878 05a4 0590     		str	r0, [sp, #20]
1674:FWLIB/src/stm32f4xx_cryp_aes.c ****     temptag[3] = CRYP_DataOut();
 3879              		.loc 1 1674 0
 3880 05a6 FFF7FEFF 		bl	CRYP_DataOut
 3881              	.LVL799:
 3882 05aa 0690     		str	r0, [sp, #24]
 3883              	.LVL800:
 3884              	.L145:
1675:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
1676:FWLIB/src/stm32f4xx_cryp_aes.c ****   
1677:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Copy temporary authentication TAG in user TAG buffer */
1678:FWLIB/src/stm32f4xx_cryp_aes.c ****   for(loopcounter = 0; (loopcounter < TAGSize); loopcounter++)
 3885              		.loc 1 1678 0
 3886 05ac 0023     		movs	r3, #0
 3887 05ae 3299     		ldr	r1, [sp, #200]
 3888 05b0 04E0     		b	.L160
 3889              	.LVL801:
 3890              	.L161:
1679:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
1680:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Set the authentication TAG buffer */
1681:FWLIB/src/stm32f4xx_cryp_aes.c ****     *((uint8_t*)tagaddr+loopcounter) = *((uint8_t*)temptag+loopcounter);
 3891              		.loc 1 1681 0 discriminator 3
 3892 05b2 03AA     		add	r2, sp, #12
 3893 05b4 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 3894 05b6 03F80B20 		strb	r2, [r3, fp]
1678:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 3895              		.loc 1 1678 0 discriminator 3
 3896 05ba 0133     		adds	r3, r3, #1
 3897              	.LVL802:
 3898              	.L160:
1678:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 3899              		.loc 1 1678 0 is_stmt 0 discriminator 1
 3900 05bc 8B42     		cmp	r3, r1
 3901 05be F8D3     		bcc	.L161
1682:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
1683:FWLIB/src/stm32f4xx_cryp_aes.c ****   
1684:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Disable Crypto */
1685:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_Cmd(DISABLE);
 3902              		.loc 1 1685 0 is_stmt 1
 3903 05c0 0020     		movs	r0, #0
 3904 05c2 FFF7FEFF 		bl	CRYP_Cmd
 3905              	.LVL803:
1686:FWLIB/src/stm32f4xx_cryp_aes.c **** 
1687:FWLIB/src/stm32f4xx_cryp_aes.c ****   return status;
 3906              		.loc 1 1687 0
 3907 05c6 2846     		mov	r0, r5
 3908 05c8 0AE0     		b	.L132
 3909              	.LVL804:
 3910              	.L164:
1351:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 3911              		.loc 1 1351 0
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 109


 3912 05ca 0020     		movs	r0, #0
 3913 05cc 08E0     		b	.L132
 3914              	.LVL805:
 3915              	.L166:
1399:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 3916              		.loc 1 1399 0
 3917 05ce 0020     		movs	r0, #0
 3918 05d0 06E0     		b	.L132
 3919              	.LVL806:
 3920              	.L168:
1462:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 3921              		.loc 1 1462 0
 3922 05d2 0020     		movs	r0, #0
 3923 05d4 04E0     		b	.L132
 3924              	.LVL807:
 3925              	.L170:
1540:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 3926              		.loc 1 1540 0
 3927 05d6 0020     		movs	r0, #0
 3928 05d8 02E0     		b	.L132
 3929              	.LVL808:
 3930              	.L172:
1588:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 3931              		.loc 1 1588 0
 3932 05da 0020     		movs	r0, #0
 3933 05dc 00E0     		b	.L132
 3934              	.LVL809:
 3935              	.L174:
1651:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 3936              		.loc 1 1651 0
 3937 05de 0020     		movs	r0, #0
 3938              	.LVL810:
 3939              	.L132:
1688:FWLIB/src/stm32f4xx_cryp_aes.c **** }
 3940              		.loc 1 1688 0
 3941 05e0 21B0     		add	sp, sp, #132
 3942              	.LCFI14:
 3943              		.cfi_def_cfa_offset 36
 3944              		@ sp needed
 3945 05e2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3946              		.cfi_endproc
 3947              	.LFE127:
 3949 05e6 00BF     		.text
 3950              	.Letext0:
 3951              		.file 3 "d:\\gcc_arm\\5.4 2016q3\\arm-none-eabi\\include\\machine\\_default_types.h"
 3952              		.file 4 "d:\\gcc_arm\\5.4 2016q3\\arm-none-eabi\\include\\sys\\_stdint.h"
 3953              		.file 5 "USER/stm32f4xx.h"
 3954              		.file 6 "FWLIB/inc/stm32f4xx_cryp.h"
 3955              		.file 7 "F4_CORE/core_cm4.h"
ARM GAS  C:\Users\why\AppData\Local\Temp\cc37RgOb.s 			page 110


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_cryp_aes.c
C:\Users\why\AppData\Local\Temp\cc37RgOb.s:22     .text.CRYP_AES_ECB:00000000 $t
C:\Users\why\AppData\Local\Temp\cc37RgOb.s:27     .text.CRYP_AES_ECB:00000000 CRYP_AES_ECB
C:\Users\why\AppData\Local\Temp\cc37RgOb.s:531    .text.CRYP_AES_CBC:00000000 $t
C:\Users\why\AppData\Local\Temp\cc37RgOb.s:536    .text.CRYP_AES_CBC:00000000 CRYP_AES_CBC
C:\Users\why\AppData\Local\Temp\cc37RgOb.s:1097   .text.CRYP_AES_CTR:00000000 $t
C:\Users\why\AppData\Local\Temp\cc37RgOb.s:1102   .text.CRYP_AES_CTR:00000000 CRYP_AES_CTR
C:\Users\why\AppData\Local\Temp\cc37RgOb.s:1607   .text.CRYP_AES_GCM:00000000 $t
C:\Users\why\AppData\Local\Temp\cc37RgOb.s:1612   .text.CRYP_AES_GCM:00000000 CRYP_AES_GCM
C:\Users\why\AppData\Local\Temp\cc37RgOb.s:2667   .text.CRYP_AES_CCM:00000000 $t
C:\Users\why\AppData\Local\Temp\cc37RgOb.s:2672   .text.CRYP_AES_CCM:00000000 CRYP_AES_CCM
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
CRYP_KeyStructInit
CRYP_FIFOFlush
CRYP_Init
CRYP_KeyInit
CRYP_Cmd
CRYP_GetFlagStatus
CRYP_GetCmdStatus
CRYP_DataIn
CRYP_DataOut
CRYP_IVInit
CRYP_PhaseConfig
