ARM GAS  /tmp/cc1B5Puw.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_cryp_aes.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.CRYP_AES_ECB,"ax",%progbits
  18              		.align	1
  19              		.global	CRYP_AES_ECB
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	CRYP_AES_ECB:
  26              	.LFB123:
  27              		.file 1 "FWLIB/src/stm32f4xx_cryp_aes.c"
   1:FWLIB/src/stm32f4xx_cryp_aes.c **** /**
   2:FWLIB/src/stm32f4xx_cryp_aes.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @file    stm32f4xx_cryp_aes.c
   4:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @version V1.8.0
   6:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @date    04-November-2016
   7:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @brief   This file provides high level functions to encrypt and decrypt an 
   8:FWLIB/src/stm32f4xx_cryp_aes.c ****   *          input message using AES in ECB/CBC/CTR/GCM/CCM modes.
   9:FWLIB/src/stm32f4xx_cryp_aes.c ****   *          It uses the stm32f4xx_cryp.c/.h drivers to access the STM32F4xx CRYP
  10:FWLIB/src/stm32f4xx_cryp_aes.c ****   *          peripheral.
  11:FWLIB/src/stm32f4xx_cryp_aes.c ****   *          AES-ECB/CBC/CTR/GCM/CCM modes are available on STM32F437x Devices.
  12:FWLIB/src/stm32f4xx_cryp_aes.c ****   *          For STM32F41xx Devices, only AES-ECB/CBC/CTR modes are available.
  13:FWLIB/src/stm32f4xx_cryp_aes.c ****   *
  14:FWLIB/src/stm32f4xx_cryp_aes.c **** @verbatim
  15:FWLIB/src/stm32f4xx_cryp_aes.c ****  ===================================================================
  16:FWLIB/src/stm32f4xx_cryp_aes.c ****                   ##### How to use this driver #####
  17:FWLIB/src/stm32f4xx_cryp_aes.c ****  ===================================================================
  18:FWLIB/src/stm32f4xx_cryp_aes.c ****  [..]
  19:FWLIB/src/stm32f4xx_cryp_aes.c ****    (#) Enable The CRYP controller clock using 
  20:FWLIB/src/stm32f4xx_cryp_aes.c ****       RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_CRYP, ENABLE); function.
  21:FWLIB/src/stm32f4xx_cryp_aes.c ****   
  22:FWLIB/src/stm32f4xx_cryp_aes.c ****    (#) Encrypt and decrypt using AES in ECB Mode using CRYP_AES_ECB() function.
  23:FWLIB/src/stm32f4xx_cryp_aes.c ****   
  24:FWLIB/src/stm32f4xx_cryp_aes.c ****    (#) Encrypt and decrypt using AES in CBC Mode using CRYP_AES_CBC() function.
  25:FWLIB/src/stm32f4xx_cryp_aes.c ****   
  26:FWLIB/src/stm32f4xx_cryp_aes.c ****    (#) Encrypt and decrypt using AES in CTR Mode using CRYP_AES_CTR() function.
  27:FWLIB/src/stm32f4xx_cryp_aes.c **** 
  28:FWLIB/src/stm32f4xx_cryp_aes.c ****    (#) Encrypt and decrypt using AES in GCM Mode using CRYP_AES_GCM() function.
  29:FWLIB/src/stm32f4xx_cryp_aes.c ****    
  30:FWLIB/src/stm32f4xx_cryp_aes.c ****    (#) Encrypt and decrypt using AES in CCM Mode using CRYP_AES_CCM() function.
  31:FWLIB/src/stm32f4xx_cryp_aes.c ****      
ARM GAS  /tmp/cc1B5Puw.s 			page 2


  32:FWLIB/src/stm32f4xx_cryp_aes.c **** @endverbatim
  33:FWLIB/src/stm32f4xx_cryp_aes.c ****   *
  34:FWLIB/src/stm32f4xx_cryp_aes.c ****   ******************************************************************************
  35:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @attention
  36:FWLIB/src/stm32f4xx_cryp_aes.c ****   *
  37:FWLIB/src/stm32f4xx_cryp_aes.c ****   * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
  38:FWLIB/src/stm32f4xx_cryp_aes.c ****   *
  39:FWLIB/src/stm32f4xx_cryp_aes.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  40:FWLIB/src/stm32f4xx_cryp_aes.c ****   * You may not use this file except in compliance with the License.
  41:FWLIB/src/stm32f4xx_cryp_aes.c ****   * You may obtain a copy of the License at:
  42:FWLIB/src/stm32f4xx_cryp_aes.c ****   *
  43:FWLIB/src/stm32f4xx_cryp_aes.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  44:FWLIB/src/stm32f4xx_cryp_aes.c ****   *
  45:FWLIB/src/stm32f4xx_cryp_aes.c ****   * Unless required by applicable law or agreed to in writing, software 
  46:FWLIB/src/stm32f4xx_cryp_aes.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  47:FWLIB/src/stm32f4xx_cryp_aes.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  48:FWLIB/src/stm32f4xx_cryp_aes.c ****   * See the License for the specific language governing permissions and
  49:FWLIB/src/stm32f4xx_cryp_aes.c ****   * limitations under the License.
  50:FWLIB/src/stm32f4xx_cryp_aes.c ****   *
  51:FWLIB/src/stm32f4xx_cryp_aes.c ****   ******************************************************************************  
  52:FWLIB/src/stm32f4xx_cryp_aes.c ****   */
  53:FWLIB/src/stm32f4xx_cryp_aes.c **** 
  54:FWLIB/src/stm32f4xx_cryp_aes.c **** /* Includes ------------------------------------------------------------------*/
  55:FWLIB/src/stm32f4xx_cryp_aes.c **** #include "stm32f4xx_cryp.h"
  56:FWLIB/src/stm32f4xx_cryp_aes.c **** 
  57:FWLIB/src/stm32f4xx_cryp_aes.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  58:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @{
  59:FWLIB/src/stm32f4xx_cryp_aes.c ****   */
  60:FWLIB/src/stm32f4xx_cryp_aes.c **** 
  61:FWLIB/src/stm32f4xx_cryp_aes.c **** /** @defgroup CRYP 
  62:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @brief CRYP driver modules
  63:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @{
  64:FWLIB/src/stm32f4xx_cryp_aes.c ****   */
  65:FWLIB/src/stm32f4xx_cryp_aes.c **** 
  66:FWLIB/src/stm32f4xx_cryp_aes.c **** /* Private typedef -----------------------------------------------------------*/
  67:FWLIB/src/stm32f4xx_cryp_aes.c **** /* Private define ------------------------------------------------------------*/
  68:FWLIB/src/stm32f4xx_cryp_aes.c **** #define AESBUSY_TIMEOUT    ((uint32_t) 0x00010000)
  69:FWLIB/src/stm32f4xx_cryp_aes.c **** 
  70:FWLIB/src/stm32f4xx_cryp_aes.c **** /* Private macro -------------------------------------------------------------*/
  71:FWLIB/src/stm32f4xx_cryp_aes.c **** /* Private variables ---------------------------------------------------------*/
  72:FWLIB/src/stm32f4xx_cryp_aes.c **** /* Private function prototypes -----------------------------------------------*/
  73:FWLIB/src/stm32f4xx_cryp_aes.c **** /* Private functions ---------------------------------------------------------*/
  74:FWLIB/src/stm32f4xx_cryp_aes.c **** 
  75:FWLIB/src/stm32f4xx_cryp_aes.c **** /** @defgroup CRYP_Private_Functions
  76:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @{
  77:FWLIB/src/stm32f4xx_cryp_aes.c ****   */ 
  78:FWLIB/src/stm32f4xx_cryp_aes.c **** 
  79:FWLIB/src/stm32f4xx_cryp_aes.c **** /** @defgroup CRYP_Group6 High Level AES functions
  80:FWLIB/src/stm32f4xx_cryp_aes.c ****  *  @brief   High Level AES functions 
  81:FWLIB/src/stm32f4xx_cryp_aes.c ****  *
  82:FWLIB/src/stm32f4xx_cryp_aes.c **** @verbatim   
  83:FWLIB/src/stm32f4xx_cryp_aes.c ****  ===============================================================================
  84:FWLIB/src/stm32f4xx_cryp_aes.c ****                        ##### High Level AES functions #####
  85:FWLIB/src/stm32f4xx_cryp_aes.c ****  ===============================================================================
  86:FWLIB/src/stm32f4xx_cryp_aes.c **** 
  87:FWLIB/src/stm32f4xx_cryp_aes.c **** @endverbatim
  88:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @{
ARM GAS  /tmp/cc1B5Puw.s 			page 3


  89:FWLIB/src/stm32f4xx_cryp_aes.c ****   */
  90:FWLIB/src/stm32f4xx_cryp_aes.c **** 
  91:FWLIB/src/stm32f4xx_cryp_aes.c **** /**
  92:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @brief  Encrypt and decrypt using AES in ECB Mode
  93:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Mode: encryption or decryption Mode.
  94:FWLIB/src/stm32f4xx_cryp_aes.c ****   *          This parameter can be one of the following values:
  95:FWLIB/src/stm32f4xx_cryp_aes.c ****   *            @arg MODE_ENCRYPT: Encryption
  96:FWLIB/src/stm32f4xx_cryp_aes.c ****   *            @arg MODE_DECRYPT: Decryption
  97:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Key: Key used for AES algorithm.
  98:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Keysize: length of the Key, must be a 128, 192 or 256.
  99:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Input: pointer to the Input buffer.
 100:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 16.
 101:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Output: pointer to the returned buffer.
 102:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @retval An ErrorStatus enumeration value:
 103:FWLIB/src/stm32f4xx_cryp_aes.c ****   *          - SUCCESS: Operation done
 104:FWLIB/src/stm32f4xx_cryp_aes.c ****   *          - ERROR: Operation failed
 105:FWLIB/src/stm32f4xx_cryp_aes.c ****   */
 106:FWLIB/src/stm32f4xx_cryp_aes.c **** ErrorStatus CRYP_AES_ECB(uint8_t Mode, uint8_t* Key, uint16_t Keysize,
 107:FWLIB/src/stm32f4xx_cryp_aes.c ****                          uint8_t* Input, uint32_t Ilength, uint8_t* Output)
 108:FWLIB/src/stm32f4xx_cryp_aes.c **** {
  28              		.loc 1 108 0
  29              		.cfi_startproc
  30              		@ args = 8, pretend = 0, frame = 56
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 28
  36              		.cfi_offset 4, -28
  37              		.cfi_offset 5, -24
  38              		.cfi_offset 6, -20
  39              		.cfi_offset 7, -16
  40              		.cfi_offset 8, -12
  41              		.cfi_offset 9, -8
  42              		.cfi_offset 14, -4
  43 0004 8FB0     		sub	sp, sp, #60
  44              	.LCFI1:
  45              		.cfi_def_cfa_offset 88
  46 0006 8146     		mov	r9, r0
  47 0008 0D46     		mov	r5, r1
  48 000a 1646     		mov	r6, r2
  49 000c DDF85880 		ldr	r8, [sp, #88]
 109:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_InitTypeDef AES_CRYP_InitStructure;
 110:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
 111:FWLIB/src/stm32f4xx_cryp_aes.c ****   __IO uint32_t counter = 0;
  50              		.loc 1 111 0
  51 0010 0022     		movs	r2, #0
  52              	.LVL1:
  53 0012 0192     		str	r2, [sp, #4]
  54              	.LVL2:
 112:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t busystatus = 0;
 113:FWLIB/src/stm32f4xx_cryp_aes.c ****   ErrorStatus status = SUCCESS;
 114:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 115:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t inputaddr  = (uint32_t)Input;
  55              		.loc 1 115 0
  56 0014 1C46     		mov	r4, r3
  57              	.LVL3:
ARM GAS  /tmp/cc1B5Puw.s 			page 4


 116:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t outputaddr = (uint32_t)Output;
  58              		.loc 1 116 0
  59 0016 179F     		ldr	r7, [sp, #92]
  60              	.LVL4:
 117:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t i = 0;
 118:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 119:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Crypto structures initialisation*/
 120:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
  61              		.loc 1 120 0
  62 0018 02A8     		add	r0, sp, #8
  63              	.LVL5:
  64 001a FFF7FEFF 		bl	CRYP_KeyStructInit
  65              	.LVL6:
 121:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 122:FWLIB/src/stm32f4xx_cryp_aes.c ****   switch(Keysize)
  66              		.loc 1 122 0
  67 001e C02E     		cmp	r6, #192
  68 0020 3AD0     		beq	.L3
  69 0022 B6F5807F 		cmp	r6, #256
  70 0026 4DD0     		beq	.L4
  71 0028 802E     		cmp	r6, #128
  72 002a 26D0     		beq	.L21
  73              	.LVL7:
  74              	.L2:
 123:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 124:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 128:
 125:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 126:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 127:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 128:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 129:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 130:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 131:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 132:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 133:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 134:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 192:
 135:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 136:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 137:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 138:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 139:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 140:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 141:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 142:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 143:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 144:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 145:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 146:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 147:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 148:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 256:
 149:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 150:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 151:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 152:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 153:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 154:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 155:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
ARM GAS  /tmp/cc1B5Puw.s 			page 5


 156:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 157:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 158:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 159:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 160:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 161:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 162:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 163:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 164:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 165:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 166:FWLIB/src/stm32f4xx_cryp_aes.c ****     default:
 167:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 168:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 169:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 170:FWLIB/src/stm32f4xx_cryp_aes.c ****   /*------------------ AES Decryption ------------------*/
 171:FWLIB/src/stm32f4xx_cryp_aes.c ****   if(Mode == MODE_DECRYPT) /* AES decryption */
  75              		.loc 1 171 0
  76 002c B9F1000F 		cmp	r9, #0
  77 0030 64D1     		bne	.L6
 172:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 173:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Flush IN/OUT FIFOs */
 174:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_FIFOFlush();
  78              		.loc 1 174 0
  79 0032 FFF7FEFF 		bl	CRYP_FIFOFlush
  80              	.LVL8:
 175:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 176:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Crypto Init for Key preparation for decryption process */
 177:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
  81              		.loc 1 177 0
  82 0036 0423     		movs	r3, #4
  83 0038 0A93     		str	r3, [sp, #40]
 178:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
  84              		.loc 1 178 0
  85 003a 3823     		movs	r3, #56
  86 003c 0B93     		str	r3, [sp, #44]
 179:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
  87              		.loc 1 179 0
  88 003e 0023     		movs	r3, #0
  89 0040 0C93     		str	r3, [sp, #48]
 180:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_Init(&AES_CRYP_InitStructure);
  90              		.loc 1 180 0
  91 0042 0AA8     		add	r0, sp, #40
  92 0044 FFF7FEFF 		bl	CRYP_Init
  93              	.LVL9:
 181:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 182:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Key Initialisation */
 183:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
  94              		.loc 1 183 0
  95 0048 02A8     		add	r0, sp, #8
  96 004a FFF7FEFF 		bl	CRYP_KeyInit
  97              	.LVL10:
 184:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 185:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Enable Crypto processor */
 186:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_Cmd(ENABLE);
  98              		.loc 1 186 0
  99 004e 0120     		movs	r0, #1
 100 0050 FFF7FEFF 		bl	CRYP_Cmd
ARM GAS  /tmp/cc1B5Puw.s 			page 6


 101              	.LVL11:
 102              	.L8:
 187:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 188:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* wait until the Busy flag is RESET */
 189:FWLIB/src/stm32f4xx_cryp_aes.c ****     do
 190:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 191:FWLIB/src/stm32f4xx_cryp_aes.c ****       busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 103              		.loc 1 191 0 discriminator 2
 104 0054 1020     		movs	r0, #16
 105 0056 FFF7FEFF 		bl	CRYP_GetFlagStatus
 106              	.LVL12:
 107 005a 0246     		mov	r2, r0
 108              	.LVL13:
 192:FWLIB/src/stm32f4xx_cryp_aes.c ****       counter++;
 109              		.loc 1 192 0 discriminator 2
 110 005c 019B     		ldr	r3, [sp, #4]
 111 005e 0133     		adds	r3, r3, #1
 112 0060 0193     		str	r3, [sp, #4]
 193:FWLIB/src/stm32f4xx_cryp_aes.c ****     }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 113              		.loc 1 193 0 discriminator 2
 114 0062 019B     		ldr	r3, [sp, #4]
 115 0064 B3F5803F 		cmp	r3, #65536
 116 0068 01D0     		beq	.L7
 117              		.loc 1 193 0 is_stmt 0 discriminator 1
 118 006a 0028     		cmp	r0, #0
 119 006c F2D1     		bne	.L8
 120              	.L7:
 194:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 195:FWLIB/src/stm32f4xx_cryp_aes.c ****     if (busystatus != RESET)
 121              		.loc 1 195 0 is_stmt 1
 122 006e 002A     		cmp	r2, #0
 123 0070 5CD1     		bne	.L17
 196:FWLIB/src/stm32f4xx_cryp_aes.c ****    {
 197:FWLIB/src/stm32f4xx_cryp_aes.c ****        status = ERROR;
 198:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 199:FWLIB/src/stm32f4xx_cryp_aes.c ****     else
 200:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 201:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Crypto Init for decryption process */  
 202:FWLIB/src/stm32f4xx_cryp_aes.c ****       AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 124              		.loc 1 202 0
 125 0072 0423     		movs	r3, #4
 126 0074 0A93     		str	r3, [sp, #40]
 113:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 127              		.loc 1 113 0
 128 0076 0126     		movs	r6, #1
 129 0078 46E0     		b	.L9
 130              	.LVL14:
 131              	.L21:
 125:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 132              		.loc 1 125 0
 133 007a 0023     		movs	r3, #0
 134 007c 0D93     		str	r3, [sp, #52]
 126:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 135              		.loc 1 126 0
 136 007e 2B68     		ldr	r3, [r5]
 137              	.LVL15:
 138              	.LBB230:
ARM GAS  /tmp/cc1B5Puw.s 			page 7


 139              	.LBB231:
 140              		.file 2 "F4_CORE/core_cmInstr.h"
   1:F4_CORE/core_cmInstr.h **** /**************************************************************************//**
   2:F4_CORE/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:F4_CORE/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:F4_CORE/core_cmInstr.h ****  * @version  V4.10
   5:F4_CORE/core_cmInstr.h ****  * @date     18. March 2015
   6:F4_CORE/core_cmInstr.h ****  *
   7:F4_CORE/core_cmInstr.h ****  * @note
   8:F4_CORE/core_cmInstr.h ****  *
   9:F4_CORE/core_cmInstr.h ****  ******************************************************************************/
  10:F4_CORE/core_cmInstr.h **** /* Copyright (c) 2009 - 2014 ARM LIMITED
  11:F4_CORE/core_cmInstr.h **** 
  12:F4_CORE/core_cmInstr.h ****    All rights reserved.
  13:F4_CORE/core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:F4_CORE/core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:F4_CORE/core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:F4_CORE/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:F4_CORE/core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:F4_CORE/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:F4_CORE/core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:F4_CORE/core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:F4_CORE/core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:F4_CORE/core_cmInstr.h ****      specific prior written permission.
  23:F4_CORE/core_cmInstr.h ****    *
  24:F4_CORE/core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:F4_CORE/core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:F4_CORE/core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:F4_CORE/core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:F4_CORE/core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:F4_CORE/core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:F4_CORE/core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:F4_CORE/core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:F4_CORE/core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:F4_CORE/core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:F4_CORE/core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:F4_CORE/core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:F4_CORE/core_cmInstr.h **** 
  37:F4_CORE/core_cmInstr.h **** 
  38:F4_CORE/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:F4_CORE/core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:F4_CORE/core_cmInstr.h **** 
  41:F4_CORE/core_cmInstr.h **** 
  42:F4_CORE/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:F4_CORE/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:F4_CORE/core_cmInstr.h ****   Access to dedicated instructions
  45:F4_CORE/core_cmInstr.h ****   @{
  46:F4_CORE/core_cmInstr.h **** */
  47:F4_CORE/core_cmInstr.h **** 
  48:F4_CORE/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:F4_CORE/core_cmInstr.h **** /* ARM armcc specific functions */
  50:F4_CORE/core_cmInstr.h **** 
  51:F4_CORE/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:F4_CORE/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:F4_CORE/core_cmInstr.h **** #endif
  54:F4_CORE/core_cmInstr.h **** 
  55:F4_CORE/core_cmInstr.h **** 
ARM GAS  /tmp/cc1B5Puw.s 			page 8


  56:F4_CORE/core_cmInstr.h **** /** \brief  No Operation
  57:F4_CORE/core_cmInstr.h **** 
  58:F4_CORE/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:F4_CORE/core_cmInstr.h ****  */
  60:F4_CORE/core_cmInstr.h **** #define __NOP                             __nop
  61:F4_CORE/core_cmInstr.h **** 
  62:F4_CORE/core_cmInstr.h **** 
  63:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:F4_CORE/core_cmInstr.h **** 
  65:F4_CORE/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:F4_CORE/core_cmInstr.h ****     until one of a number of events occurs.
  67:F4_CORE/core_cmInstr.h ****  */
  68:F4_CORE/core_cmInstr.h **** #define __WFI                             __wfi
  69:F4_CORE/core_cmInstr.h **** 
  70:F4_CORE/core_cmInstr.h **** 
  71:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Event
  72:F4_CORE/core_cmInstr.h **** 
  73:F4_CORE/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:F4_CORE/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:F4_CORE/core_cmInstr.h ****  */
  76:F4_CORE/core_cmInstr.h **** #define __WFE                             __wfe
  77:F4_CORE/core_cmInstr.h **** 
  78:F4_CORE/core_cmInstr.h **** 
  79:F4_CORE/core_cmInstr.h **** /** \brief  Send Event
  80:F4_CORE/core_cmInstr.h **** 
  81:F4_CORE/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:F4_CORE/core_cmInstr.h ****  */
  83:F4_CORE/core_cmInstr.h **** #define __SEV                             __sev
  84:F4_CORE/core_cmInstr.h **** 
  85:F4_CORE/core_cmInstr.h **** 
  86:F4_CORE/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:F4_CORE/core_cmInstr.h **** 
  88:F4_CORE/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:F4_CORE/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:F4_CORE/core_cmInstr.h ****     memory, after the instruction has been completed.
  91:F4_CORE/core_cmInstr.h ****  */
  92:F4_CORE/core_cmInstr.h **** #define __ISB() do {\
  93:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
  94:F4_CORE/core_cmInstr.h ****                    __isb(0xF);\
  95:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
  96:F4_CORE/core_cmInstr.h ****                 } while (0)
  97:F4_CORE/core_cmInstr.h **** 
  98:F4_CORE/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  99:F4_CORE/core_cmInstr.h **** 
 100:F4_CORE/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 101:F4_CORE/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 102:F4_CORE/core_cmInstr.h ****  */
 103:F4_CORE/core_cmInstr.h **** #define __DSB() do {\
 104:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 105:F4_CORE/core_cmInstr.h ****                    __dsb(0xF);\
 106:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 107:F4_CORE/core_cmInstr.h ****                 } while (0)
 108:F4_CORE/core_cmInstr.h **** 
 109:F4_CORE/core_cmInstr.h **** /** \brief  Data Memory Barrier
 110:F4_CORE/core_cmInstr.h **** 
 111:F4_CORE/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 112:F4_CORE/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
ARM GAS  /tmp/cc1B5Puw.s 			page 9


 113:F4_CORE/core_cmInstr.h ****  */
 114:F4_CORE/core_cmInstr.h **** #define __DMB() do {\
 115:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 116:F4_CORE/core_cmInstr.h ****                    __dmb(0xF);\
 117:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 118:F4_CORE/core_cmInstr.h ****                 } while (0)
 119:F4_CORE/core_cmInstr.h **** 
 120:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 121:F4_CORE/core_cmInstr.h **** 
 122:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in integer value.
 123:F4_CORE/core_cmInstr.h **** 
 124:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 125:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 126:F4_CORE/core_cmInstr.h ****  */
 127:F4_CORE/core_cmInstr.h **** #define __REV                             __rev
 128:F4_CORE/core_cmInstr.h **** 
 129:F4_CORE/core_cmInstr.h **** 
 130:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 131:F4_CORE/core_cmInstr.h **** 
 132:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 133:F4_CORE/core_cmInstr.h **** 
 134:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 135:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 136:F4_CORE/core_cmInstr.h ****  */
 137:F4_CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 138:F4_CORE/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 139:F4_CORE/core_cmInstr.h **** {
 140:F4_CORE/core_cmInstr.h ****   rev16 r0, r0
 141:F4_CORE/core_cmInstr.h ****   bx lr
 142:F4_CORE/core_cmInstr.h **** }
 143:F4_CORE/core_cmInstr.h **** #endif
 144:F4_CORE/core_cmInstr.h **** 
 145:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 146:F4_CORE/core_cmInstr.h **** 
 147:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 148:F4_CORE/core_cmInstr.h **** 
 149:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 150:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 151:F4_CORE/core_cmInstr.h ****  */
 152:F4_CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 153:F4_CORE/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 154:F4_CORE/core_cmInstr.h **** {
 155:F4_CORE/core_cmInstr.h ****   revsh r0, r0
 156:F4_CORE/core_cmInstr.h ****   bx lr
 157:F4_CORE/core_cmInstr.h **** }
 158:F4_CORE/core_cmInstr.h **** #endif
 159:F4_CORE/core_cmInstr.h **** 
 160:F4_CORE/core_cmInstr.h **** 
 161:F4_CORE/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 162:F4_CORE/core_cmInstr.h **** 
 163:F4_CORE/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 164:F4_CORE/core_cmInstr.h **** 
 165:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to rotate
 166:F4_CORE/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 167:F4_CORE/core_cmInstr.h ****     \return               Rotated value
 168:F4_CORE/core_cmInstr.h ****  */
 169:F4_CORE/core_cmInstr.h **** #define __ROR                             __ror
ARM GAS  /tmp/cc1B5Puw.s 			page 10


 170:F4_CORE/core_cmInstr.h **** 
 171:F4_CORE/core_cmInstr.h **** 
 172:F4_CORE/core_cmInstr.h **** /** \brief  Breakpoint
 173:F4_CORE/core_cmInstr.h **** 
 174:F4_CORE/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 175:F4_CORE/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 176:F4_CORE/core_cmInstr.h **** 
 177:F4_CORE/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 178:F4_CORE/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 179:F4_CORE/core_cmInstr.h ****  */
 180:F4_CORE/core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 181:F4_CORE/core_cmInstr.h **** 
 182:F4_CORE/core_cmInstr.h **** 
 183:F4_CORE/core_cmInstr.h **** /** \brief  Reverse bit order of value
 184:F4_CORE/core_cmInstr.h **** 
 185:F4_CORE/core_cmInstr.h ****     This function reverses the bit order of the given value.
 186:F4_CORE/core_cmInstr.h **** 
 187:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 188:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 189:F4_CORE/core_cmInstr.h ****  */
 190:F4_CORE/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 191:F4_CORE/core_cmInstr.h ****   #define __RBIT                          __rbit
 192:F4_CORE/core_cmInstr.h **** #else
 193:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 194:F4_CORE/core_cmInstr.h **** {
 195:F4_CORE/core_cmInstr.h ****   uint32_t result;
 196:F4_CORE/core_cmInstr.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; // extra shift needed at end
 197:F4_CORE/core_cmInstr.h **** 
 198:F4_CORE/core_cmInstr.h ****   result = value;                      // r will be reversed bits of v; first get LSB of v
 199:F4_CORE/core_cmInstr.h ****   for (value >>= 1; value; value >>= 1)
 200:F4_CORE/core_cmInstr.h ****   {
 201:F4_CORE/core_cmInstr.h ****     result <<= 1;
 202:F4_CORE/core_cmInstr.h ****     result |= value & 1;
 203:F4_CORE/core_cmInstr.h ****     s--;
 204:F4_CORE/core_cmInstr.h ****   }
 205:F4_CORE/core_cmInstr.h ****   result <<= s;                       // shift when v's highest bits are zero
 206:F4_CORE/core_cmInstr.h ****   return(result);
 207:F4_CORE/core_cmInstr.h **** }
 208:F4_CORE/core_cmInstr.h **** #endif
 209:F4_CORE/core_cmInstr.h **** 
 210:F4_CORE/core_cmInstr.h **** 
 211:F4_CORE/core_cmInstr.h **** /** \brief  Count leading zeros
 212:F4_CORE/core_cmInstr.h **** 
 213:F4_CORE/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 214:F4_CORE/core_cmInstr.h **** 
 215:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 216:F4_CORE/core_cmInstr.h ****     \return             number of leading zeros in value
 217:F4_CORE/core_cmInstr.h ****  */
 218:F4_CORE/core_cmInstr.h **** #define __CLZ                             __clz
 219:F4_CORE/core_cmInstr.h **** 
 220:F4_CORE/core_cmInstr.h **** 
 221:F4_CORE/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 222:F4_CORE/core_cmInstr.h **** 
 223:F4_CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 224:F4_CORE/core_cmInstr.h **** 
 225:F4_CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 8 bit value.
 226:F4_CORE/core_cmInstr.h **** 
ARM GAS  /tmp/cc1B5Puw.s 			page 11


 227:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 228:F4_CORE/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 229:F4_CORE/core_cmInstr.h ****  */
 230:F4_CORE/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 231:F4_CORE/core_cmInstr.h **** 
 232:F4_CORE/core_cmInstr.h **** 
 233:F4_CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 234:F4_CORE/core_cmInstr.h **** 
 235:F4_CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 16 bit values.
 236:F4_CORE/core_cmInstr.h **** 
 237:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 238:F4_CORE/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 239:F4_CORE/core_cmInstr.h ****  */
 240:F4_CORE/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 241:F4_CORE/core_cmInstr.h **** 
 242:F4_CORE/core_cmInstr.h **** 
 243:F4_CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 244:F4_CORE/core_cmInstr.h **** 
 245:F4_CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 32 bit values.
 246:F4_CORE/core_cmInstr.h **** 
 247:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 248:F4_CORE/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 249:F4_CORE/core_cmInstr.h ****  */
 250:F4_CORE/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 251:F4_CORE/core_cmInstr.h **** 
 252:F4_CORE/core_cmInstr.h **** 
 253:F4_CORE/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 254:F4_CORE/core_cmInstr.h **** 
 255:F4_CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 8 bit values.
 256:F4_CORE/core_cmInstr.h **** 
 257:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 258:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 259:F4_CORE/core_cmInstr.h ****     \return          0  Function succeeded
 260:F4_CORE/core_cmInstr.h ****     \return          1  Function failed
 261:F4_CORE/core_cmInstr.h ****  */
 262:F4_CORE/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 263:F4_CORE/core_cmInstr.h **** 
 264:F4_CORE/core_cmInstr.h **** 
 265:F4_CORE/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 266:F4_CORE/core_cmInstr.h **** 
 267:F4_CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 16 bit values.
 268:F4_CORE/core_cmInstr.h **** 
 269:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 270:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 271:F4_CORE/core_cmInstr.h ****     \return          0  Function succeeded
 272:F4_CORE/core_cmInstr.h ****     \return          1  Function failed
 273:F4_CORE/core_cmInstr.h ****  */
 274:F4_CORE/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 275:F4_CORE/core_cmInstr.h **** 
 276:F4_CORE/core_cmInstr.h **** 
 277:F4_CORE/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 278:F4_CORE/core_cmInstr.h **** 
 279:F4_CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 32 bit values.
 280:F4_CORE/core_cmInstr.h **** 
 281:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 282:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 283:F4_CORE/core_cmInstr.h ****     \return          0  Function succeeded
ARM GAS  /tmp/cc1B5Puw.s 			page 12


 284:F4_CORE/core_cmInstr.h ****     \return          1  Function failed
 285:F4_CORE/core_cmInstr.h ****  */
 286:F4_CORE/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 287:F4_CORE/core_cmInstr.h **** 
 288:F4_CORE/core_cmInstr.h **** 
 289:F4_CORE/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 290:F4_CORE/core_cmInstr.h **** 
 291:F4_CORE/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 292:F4_CORE/core_cmInstr.h **** 
 293:F4_CORE/core_cmInstr.h ****  */
 294:F4_CORE/core_cmInstr.h **** #define __CLREX                           __clrex
 295:F4_CORE/core_cmInstr.h **** 
 296:F4_CORE/core_cmInstr.h **** 
 297:F4_CORE/core_cmInstr.h **** /** \brief  Signed Saturate
 298:F4_CORE/core_cmInstr.h **** 
 299:F4_CORE/core_cmInstr.h ****     This function saturates a signed value.
 300:F4_CORE/core_cmInstr.h **** 
 301:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 302:F4_CORE/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 303:F4_CORE/core_cmInstr.h ****     \return             Saturated value
 304:F4_CORE/core_cmInstr.h ****  */
 305:F4_CORE/core_cmInstr.h **** #define __SSAT                            __ssat
 306:F4_CORE/core_cmInstr.h **** 
 307:F4_CORE/core_cmInstr.h **** 
 308:F4_CORE/core_cmInstr.h **** /** \brief  Unsigned Saturate
 309:F4_CORE/core_cmInstr.h **** 
 310:F4_CORE/core_cmInstr.h ****     This function saturates an unsigned value.
 311:F4_CORE/core_cmInstr.h **** 
 312:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 313:F4_CORE/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 314:F4_CORE/core_cmInstr.h ****     \return             Saturated value
 315:F4_CORE/core_cmInstr.h ****  */
 316:F4_CORE/core_cmInstr.h **** #define __USAT                            __usat
 317:F4_CORE/core_cmInstr.h **** 
 318:F4_CORE/core_cmInstr.h **** 
 319:F4_CORE/core_cmInstr.h **** /** \brief  Rotate Right with Extend (32 bit)
 320:F4_CORE/core_cmInstr.h **** 
 321:F4_CORE/core_cmInstr.h ****     This function moves each bit of a bitstring right by one bit.
 322:F4_CORE/core_cmInstr.h ****     The carry input is shifted in at the left end of the bitstring.
 323:F4_CORE/core_cmInstr.h **** 
 324:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to rotate
 325:F4_CORE/core_cmInstr.h ****     \return               Rotated value
 326:F4_CORE/core_cmInstr.h ****  */
 327:F4_CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 328:F4_CORE/core_cmInstr.h **** __attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
 329:F4_CORE/core_cmInstr.h **** {
 330:F4_CORE/core_cmInstr.h ****   rrx r0, r0
 331:F4_CORE/core_cmInstr.h ****   bx lr
 332:F4_CORE/core_cmInstr.h **** }
 333:F4_CORE/core_cmInstr.h **** #endif
 334:F4_CORE/core_cmInstr.h **** 
 335:F4_CORE/core_cmInstr.h **** 
 336:F4_CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (8 bit)
 337:F4_CORE/core_cmInstr.h **** 
 338:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 8 bit value.
 339:F4_CORE/core_cmInstr.h **** 
 340:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
ARM GAS  /tmp/cc1B5Puw.s 			page 13


 341:F4_CORE/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 342:F4_CORE/core_cmInstr.h ****  */
 343:F4_CORE/core_cmInstr.h **** #define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
 344:F4_CORE/core_cmInstr.h **** 
 345:F4_CORE/core_cmInstr.h **** 
 346:F4_CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (16 bit)
 347:F4_CORE/core_cmInstr.h **** 
 348:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 16 bit values.
 349:F4_CORE/core_cmInstr.h **** 
 350:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 351:F4_CORE/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 352:F4_CORE/core_cmInstr.h ****  */
 353:F4_CORE/core_cmInstr.h **** #define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
 354:F4_CORE/core_cmInstr.h **** 
 355:F4_CORE/core_cmInstr.h **** 
 356:F4_CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (32 bit)
 357:F4_CORE/core_cmInstr.h **** 
 358:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 32 bit values.
 359:F4_CORE/core_cmInstr.h **** 
 360:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 361:F4_CORE/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 362:F4_CORE/core_cmInstr.h ****  */
 363:F4_CORE/core_cmInstr.h **** #define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
 364:F4_CORE/core_cmInstr.h **** 
 365:F4_CORE/core_cmInstr.h **** 
 366:F4_CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (8 bit)
 367:F4_CORE/core_cmInstr.h **** 
 368:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 8 bit values.
 369:F4_CORE/core_cmInstr.h **** 
 370:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 371:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 372:F4_CORE/core_cmInstr.h ****  */
 373:F4_CORE/core_cmInstr.h **** #define __STRBT(value, ptr)               __strt(value, ptr)
 374:F4_CORE/core_cmInstr.h **** 
 375:F4_CORE/core_cmInstr.h **** 
 376:F4_CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (16 bit)
 377:F4_CORE/core_cmInstr.h **** 
 378:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 16 bit values.
 379:F4_CORE/core_cmInstr.h **** 
 380:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 381:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 382:F4_CORE/core_cmInstr.h ****  */
 383:F4_CORE/core_cmInstr.h **** #define __STRHT(value, ptr)               __strt(value, ptr)
 384:F4_CORE/core_cmInstr.h **** 
 385:F4_CORE/core_cmInstr.h **** 
 386:F4_CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (32 bit)
 387:F4_CORE/core_cmInstr.h **** 
 388:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 32 bit values.
 389:F4_CORE/core_cmInstr.h **** 
 390:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 391:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 392:F4_CORE/core_cmInstr.h ****  */
 393:F4_CORE/core_cmInstr.h **** #define __STRT(value, ptr)                __strt(value, ptr)
 394:F4_CORE/core_cmInstr.h **** 
 395:F4_CORE/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300) */
 396:F4_CORE/core_cmInstr.h **** 
 397:F4_CORE/core_cmInstr.h **** 
ARM GAS  /tmp/cc1B5Puw.s 			page 14


 398:F4_CORE/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 399:F4_CORE/core_cmInstr.h **** /* GNU gcc specific functions */
 400:F4_CORE/core_cmInstr.h **** 
 401:F4_CORE/core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 402:F4_CORE/core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 403:F4_CORE/core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 404:F4_CORE/core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 405:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 406:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 407:F4_CORE/core_cmInstr.h **** #else
 408:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 409:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 410:F4_CORE/core_cmInstr.h **** #endif
 411:F4_CORE/core_cmInstr.h **** 
 412:F4_CORE/core_cmInstr.h **** /** \brief  No Operation
 413:F4_CORE/core_cmInstr.h **** 
 414:F4_CORE/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 415:F4_CORE/core_cmInstr.h ****  */
 416:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 417:F4_CORE/core_cmInstr.h **** {
 418:F4_CORE/core_cmInstr.h ****   __ASM volatile ("nop");
 419:F4_CORE/core_cmInstr.h **** }
 420:F4_CORE/core_cmInstr.h **** 
 421:F4_CORE/core_cmInstr.h **** 
 422:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Interrupt
 423:F4_CORE/core_cmInstr.h **** 
 424:F4_CORE/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 425:F4_CORE/core_cmInstr.h ****     until one of a number of events occurs.
 426:F4_CORE/core_cmInstr.h ****  */
 427:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 428:F4_CORE/core_cmInstr.h **** {
 429:F4_CORE/core_cmInstr.h ****   __ASM volatile ("wfi");
 430:F4_CORE/core_cmInstr.h **** }
 431:F4_CORE/core_cmInstr.h **** 
 432:F4_CORE/core_cmInstr.h **** 
 433:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Event
 434:F4_CORE/core_cmInstr.h **** 
 435:F4_CORE/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 436:F4_CORE/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 437:F4_CORE/core_cmInstr.h ****  */
 438:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 439:F4_CORE/core_cmInstr.h **** {
 440:F4_CORE/core_cmInstr.h ****   __ASM volatile ("wfe");
 441:F4_CORE/core_cmInstr.h **** }
 442:F4_CORE/core_cmInstr.h **** 
 443:F4_CORE/core_cmInstr.h **** 
 444:F4_CORE/core_cmInstr.h **** /** \brief  Send Event
 445:F4_CORE/core_cmInstr.h **** 
 446:F4_CORE/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 447:F4_CORE/core_cmInstr.h ****  */
 448:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 449:F4_CORE/core_cmInstr.h **** {
 450:F4_CORE/core_cmInstr.h ****   __ASM volatile ("sev");
 451:F4_CORE/core_cmInstr.h **** }
 452:F4_CORE/core_cmInstr.h **** 
 453:F4_CORE/core_cmInstr.h **** 
 454:F4_CORE/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
ARM GAS  /tmp/cc1B5Puw.s 			page 15


 455:F4_CORE/core_cmInstr.h **** 
 456:F4_CORE/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 457:F4_CORE/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 458:F4_CORE/core_cmInstr.h ****     memory, after the instruction has been completed.
 459:F4_CORE/core_cmInstr.h ****  */
 460:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 461:F4_CORE/core_cmInstr.h **** {
 462:F4_CORE/core_cmInstr.h ****   __ASM volatile ("isb 0xF":::"memory");
 463:F4_CORE/core_cmInstr.h **** }
 464:F4_CORE/core_cmInstr.h **** 
 465:F4_CORE/core_cmInstr.h **** 
 466:F4_CORE/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 467:F4_CORE/core_cmInstr.h **** 
 468:F4_CORE/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 469:F4_CORE/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 470:F4_CORE/core_cmInstr.h ****  */
 471:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 472:F4_CORE/core_cmInstr.h **** {
 473:F4_CORE/core_cmInstr.h ****   __ASM volatile ("dsb 0xF":::"memory");
 474:F4_CORE/core_cmInstr.h **** }
 475:F4_CORE/core_cmInstr.h **** 
 476:F4_CORE/core_cmInstr.h **** 
 477:F4_CORE/core_cmInstr.h **** /** \brief  Data Memory Barrier
 478:F4_CORE/core_cmInstr.h **** 
 479:F4_CORE/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 480:F4_CORE/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 481:F4_CORE/core_cmInstr.h ****  */
 482:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 483:F4_CORE/core_cmInstr.h **** {
 484:F4_CORE/core_cmInstr.h ****   __ASM volatile ("dmb 0xF":::"memory");
 485:F4_CORE/core_cmInstr.h **** }
 486:F4_CORE/core_cmInstr.h **** 
 487:F4_CORE/core_cmInstr.h **** 
 488:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 489:F4_CORE/core_cmInstr.h **** 
 490:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in integer value.
 491:F4_CORE/core_cmInstr.h **** 
 492:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 493:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 494:F4_CORE/core_cmInstr.h ****  */
 495:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 496:F4_CORE/core_cmInstr.h **** {
 497:F4_CORE/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 498:F4_CORE/core_cmInstr.h ****   return __builtin_bswap32(value);
 141              		.loc 2 498 0
 142 0080 1BBA     		rev	r3, r3
 143              	.LVL16:
 144              	.LBE231:
 145              	.LBE230:
 126:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 146              		.loc 1 126 0
 147 0082 0693     		str	r3, [sp, #24]
 148              	.LVL17:
 128:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 149              		.loc 1 128 0
 150 0084 6B68     		ldr	r3, [r5, #4]
 151              	.LVL18:
ARM GAS  /tmp/cc1B5Puw.s 			page 16


 152              	.LBB232:
 153              	.LBB233:
 154              		.loc 2 498 0
 155 0086 1BBA     		rev	r3, r3
 156              	.LVL19:
 157              	.LBE233:
 158              	.LBE232:
 128:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 159              		.loc 1 128 0
 160 0088 0793     		str	r3, [sp, #28]
 161              	.LVL20:
 130:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 162              		.loc 1 130 0
 163 008a AB68     		ldr	r3, [r5, #8]
 164              	.LVL21:
 165              	.LBB234:
 166              	.LBB235:
 167              		.loc 2 498 0
 168 008c 1BBA     		rev	r3, r3
 169              	.LVL22:
 170              	.LBE235:
 171              	.LBE234:
 130:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 172              		.loc 1 130 0
 173 008e 0893     		str	r3, [sp, #32]
 174              	.LVL23:
 132:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 175              		.loc 1 132 0
 176 0090 EB68     		ldr	r3, [r5, #12]
 177              	.LVL24:
 178              	.LBB236:
 179              	.LBB237:
 180              		.loc 2 498 0
 181 0092 1BBA     		rev	r3, r3
 182              	.LVL25:
 183              	.LBE237:
 184              	.LBE236:
 132:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 185              		.loc 1 132 0
 186 0094 0993     		str	r3, [sp, #36]
 133:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 192:
 187              		.loc 1 133 0
 188 0096 C9E7     		b	.L2
 189              	.LVL26:
 190              	.L3:
 135:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 191              		.loc 1 135 0
 192 0098 4FF48073 		mov	r3, #256
 193 009c 0D93     		str	r3, [sp, #52]
 136:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 194              		.loc 1 136 0
 195 009e 2B68     		ldr	r3, [r5]
 196              	.LVL27:
 197              	.LBB238:
 198              	.LBB239:
 199              		.loc 2 498 0
 200 00a0 1BBA     		rev	r3, r3
ARM GAS  /tmp/cc1B5Puw.s 			page 17


 201              	.LVL28:
 202              	.LBE239:
 203              	.LBE238:
 136:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 204              		.loc 1 136 0
 205 00a2 0493     		str	r3, [sp, #16]
 206              	.LVL29:
 138:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 207              		.loc 1 138 0
 208 00a4 6B68     		ldr	r3, [r5, #4]
 209              	.LVL30:
 210              	.LBB240:
 211              	.LBB241:
 212              		.loc 2 498 0
 213 00a6 1BBA     		rev	r3, r3
 214              	.LVL31:
 215              	.LBE241:
 216              	.LBE240:
 138:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 217              		.loc 1 138 0
 218 00a8 0593     		str	r3, [sp, #20]
 219              	.LVL32:
 140:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 220              		.loc 1 140 0
 221 00aa AB68     		ldr	r3, [r5, #8]
 222              	.LVL33:
 223              	.LBB242:
 224              	.LBB243:
 225              		.loc 2 498 0
 226 00ac 1BBA     		rev	r3, r3
 227              	.LVL34:
 228              	.LBE243:
 229              	.LBE242:
 140:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 230              		.loc 1 140 0
 231 00ae 0693     		str	r3, [sp, #24]
 232              	.LVL35:
 142:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 233              		.loc 1 142 0
 234 00b0 EB68     		ldr	r3, [r5, #12]
 235              	.LVL36:
 236              	.LBB244:
 237              	.LBB245:
 238              		.loc 2 498 0
 239 00b2 1BBA     		rev	r3, r3
 240              	.LVL37:
 241              	.LBE245:
 242              	.LBE244:
 142:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 243              		.loc 1 142 0
 244 00b4 0793     		str	r3, [sp, #28]
 245              	.LVL38:
 144:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 246              		.loc 1 144 0
 247 00b6 2B69     		ldr	r3, [r5, #16]
 248              	.LVL39:
 249              	.LBB246:
ARM GAS  /tmp/cc1B5Puw.s 			page 18


 250              	.LBB247:
 251              		.loc 2 498 0
 252 00b8 1BBA     		rev	r3, r3
 253              	.LVL40:
 254              	.LBE247:
 255              	.LBE246:
 144:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 256              		.loc 1 144 0
 257 00ba 0893     		str	r3, [sp, #32]
 258              	.LVL41:
 146:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 259              		.loc 1 146 0
 260 00bc 6B69     		ldr	r3, [r5, #20]
 261              	.LVL42:
 262              	.LBB248:
 263              	.LBB249:
 264              		.loc 2 498 0
 265 00be 1BBA     		rev	r3, r3
 266              	.LVL43:
 267              	.LBE249:
 268              	.LBE248:
 146:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 269              		.loc 1 146 0
 270 00c0 0993     		str	r3, [sp, #36]
 147:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 256:
 271              		.loc 1 147 0
 272 00c2 B3E7     		b	.L2
 273              	.LVL44:
 274              	.L4:
 149:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 275              		.loc 1 149 0
 276 00c4 4FF40073 		mov	r3, #512
 277 00c8 0D93     		str	r3, [sp, #52]
 150:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 278              		.loc 1 150 0
 279 00ca 2B68     		ldr	r3, [r5]
 280              	.LVL45:
 281              	.LBB250:
 282              	.LBB251:
 283              		.loc 2 498 0
 284 00cc 1BBA     		rev	r3, r3
 285              	.LVL46:
 286              	.LBE251:
 287              	.LBE250:
 150:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 288              		.loc 1 150 0
 289 00ce 0293     		str	r3, [sp, #8]
 290              	.LVL47:
 152:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 291              		.loc 1 152 0
 292 00d0 6B68     		ldr	r3, [r5, #4]
 293              	.LVL48:
 294              	.LBB252:
 295              	.LBB253:
 296              		.loc 2 498 0
 297 00d2 1BBA     		rev	r3, r3
 298              	.LVL49:
ARM GAS  /tmp/cc1B5Puw.s 			page 19


 299              	.LBE253:
 300              	.LBE252:
 152:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 301              		.loc 1 152 0
 302 00d4 0393     		str	r3, [sp, #12]
 303              	.LVL50:
 154:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 304              		.loc 1 154 0
 305 00d6 AB68     		ldr	r3, [r5, #8]
 306              	.LVL51:
 307              	.LBB254:
 308              	.LBB255:
 309              		.loc 2 498 0
 310 00d8 1BBA     		rev	r3, r3
 311              	.LVL52:
 312              	.LBE255:
 313              	.LBE254:
 154:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 314              		.loc 1 154 0
 315 00da 0493     		str	r3, [sp, #16]
 316              	.LVL53:
 156:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 317              		.loc 1 156 0
 318 00dc EB68     		ldr	r3, [r5, #12]
 319              	.LVL54:
 320              	.LBB256:
 321              	.LBB257:
 322              		.loc 2 498 0
 323 00de 1BBA     		rev	r3, r3
 324              	.LVL55:
 325              	.LBE257:
 326              	.LBE256:
 156:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 327              		.loc 1 156 0
 328 00e0 0593     		str	r3, [sp, #20]
 329              	.LVL56:
 158:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 330              		.loc 1 158 0
 331 00e2 2B69     		ldr	r3, [r5, #16]
 332              	.LVL57:
 333              	.LBB258:
 334              	.LBB259:
 335              		.loc 2 498 0
 336 00e4 1BBA     		rev	r3, r3
 337              	.LVL58:
 338              	.LBE259:
 339              	.LBE258:
 158:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 340              		.loc 1 158 0
 341 00e6 0693     		str	r3, [sp, #24]
 342              	.LVL59:
 160:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 343              		.loc 1 160 0
 344 00e8 6B69     		ldr	r3, [r5, #20]
 345              	.LVL60:
 346              	.LBB260:
 347              	.LBB261:
ARM GAS  /tmp/cc1B5Puw.s 			page 20


 348              		.loc 2 498 0
 349 00ea 1BBA     		rev	r3, r3
 350              	.LVL61:
 351              	.LBE261:
 352              	.LBE260:
 160:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 353              		.loc 1 160 0
 354 00ec 0793     		str	r3, [sp, #28]
 355              	.LVL62:
 162:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 356              		.loc 1 162 0
 357 00ee AB69     		ldr	r3, [r5, #24]
 358              	.LVL63:
 359              	.LBB262:
 360              	.LBB263:
 361              		.loc 2 498 0
 362 00f0 1BBA     		rev	r3, r3
 363              	.LVL64:
 364              	.LBE263:
 365              	.LBE262:
 162:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 366              		.loc 1 162 0
 367 00f2 0893     		str	r3, [sp, #32]
 368              	.LVL65:
 164:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 369              		.loc 1 164 0
 370 00f4 EB69     		ldr	r3, [r5, #28]
 371              	.LVL66:
 372              	.LBB264:
 373              	.LBB265:
 374              		.loc 2 498 0
 375 00f6 1BBA     		rev	r3, r3
 376              	.LVL67:
 377              	.LBE265:
 378              	.LBE264:
 164:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 379              		.loc 1 164 0
 380 00f8 0993     		str	r3, [sp, #36]
 165:FWLIB/src/stm32f4xx_cryp_aes.c ****     default:
 381              		.loc 1 165 0
 382 00fa 97E7     		b	.L2
 383              	.LVL68:
 384              	.L6:
 203:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 204:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 205:FWLIB/src/stm32f4xx_cryp_aes.c ****   /*------------------ AES Encryption ------------------*/
 206:FWLIB/src/stm32f4xx_cryp_aes.c ****   else /* AES encryption */
 207:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 208:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 209:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 385              		.loc 1 209 0
 386 00fc 02A8     		add	r0, sp, #8
 387 00fe FFF7FEFF 		bl	CRYP_KeyInit
 388              	.LVL69:
 210:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 211:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Crypto Init for Encryption process */
 212:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
ARM GAS  /tmp/cc1B5Puw.s 			page 21


 389              		.loc 1 212 0
 390 0102 0023     		movs	r3, #0
 391 0104 0A93     		str	r3, [sp, #40]
 113:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 392              		.loc 1 113 0
 393 0106 0126     		movs	r6, #1
 394              	.LVL70:
 395              	.L9:
 213:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 214:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 215:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
 396              		.loc 1 215 0
 397 0108 2023     		movs	r3, #32
 398 010a 0B93     		str	r3, [sp, #44]
 216:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 399              		.loc 1 216 0
 400 010c 8023     		movs	r3, #128
 401 010e 0C93     		str	r3, [sp, #48]
 217:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_Init(&AES_CRYP_InitStructure);
 402              		.loc 1 217 0
 403 0110 0AA8     		add	r0, sp, #40
 404 0112 FFF7FEFF 		bl	CRYP_Init
 405              	.LVL71:
 218:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 219:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Flush IN/OUT FIFOs */
 220:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_FIFOFlush();
 406              		.loc 1 220 0
 407 0116 FFF7FEFF 		bl	CRYP_FIFOFlush
 408              	.LVL72:
 221:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 222:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Enable Crypto processor */
 223:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_Cmd(ENABLE);
 409              		.loc 1 223 0
 410 011a 0120     		movs	r0, #1
 411 011c FFF7FEFF 		bl	CRYP_Cmd
 412              	.LVL73:
 224:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 225:FWLIB/src/stm32f4xx_cryp_aes.c ****   if(CRYP_GetCmdStatus() == DISABLE)
 413              		.loc 1 225 0
 414 0120 FFF7FEFF 		bl	CRYP_GetCmdStatus
 415              	.LVL74:
 416 0124 0028     		cmp	r0, #0
 417 0126 3BD0     		beq	.L18
 418 0128 0025     		movs	r5, #0
 419              	.LVL75:
 420 012a 04E0     		b	.L11
 421              	.LVL76:
 422              	.L17:
 197:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 423              		.loc 1 197 0
 424 012c 0026     		movs	r6, #0
 425 012e EBE7     		b	.L9
 426              	.LVL77:
 427              	.L12:
 226:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 227:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* The CRYP peripheral clock is not enabled or the device doesn't embed 
 228:FWLIB/src/stm32f4xx_cryp_aes.c ****        the CRYP peripheral (please check the device sales type. */
ARM GAS  /tmp/cc1B5Puw.s 			page 22


 229:FWLIB/src/stm32f4xx_cryp_aes.c ****     return(ERROR);
 230:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 231:FWLIB/src/stm32f4xx_cryp_aes.c ****   
 232:FWLIB/src/stm32f4xx_cryp_aes.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 233:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 234:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 235:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Write the Input block in the IN FIFO */
 236:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 237:FWLIB/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 238:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 239:FWLIB/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 240:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 241:FWLIB/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 242:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 243:FWLIB/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 244:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 245:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Wait until the complete message has been processed */
 246:FWLIB/src/stm32f4xx_cryp_aes.c ****     counter = 0;
 247:FWLIB/src/stm32f4xx_cryp_aes.c ****     do
 248:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 249:FWLIB/src/stm32f4xx_cryp_aes.c ****       busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 250:FWLIB/src/stm32f4xx_cryp_aes.c ****       counter++;
 251:FWLIB/src/stm32f4xx_cryp_aes.c ****     }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 252:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 253:FWLIB/src/stm32f4xx_cryp_aes.c ****     if (busystatus != RESET)
 428              		.loc 1 253 0
 429 0130 0AB3     		cbz	r2, .L22
 254:FWLIB/src/stm32f4xx_cryp_aes.c ****    {
 255:FWLIB/src/stm32f4xx_cryp_aes.c ****        status = ERROR;
 430              		.loc 1 255 0
 431 0132 0026     		movs	r6, #0
 432              	.LVL78:
 433              	.L14:
 232:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 434              		.loc 1 232 0 discriminator 2
 435 0134 1035     		adds	r5, r5, #16
 436              	.LVL79:
 437              	.L11:
 232:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 438              		.loc 1 232 0 is_stmt 0 discriminator 1
 439 0136 4545     		cmp	r5, r8
 440 0138 2BD2     		bcs	.L15
 232:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 441              		.loc 1 232 0 discriminator 3
 442 013a 56B3     		cbz	r6, .L15
 236:FWLIB/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 443              		.loc 1 236 0 is_stmt 1
 444 013c 2068     		ldr	r0, [r4]
 445 013e FFF7FEFF 		bl	CRYP_DataIn
 446              	.LVL80:
 238:FWLIB/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 447              		.loc 1 238 0
 448 0142 6068     		ldr	r0, [r4, #4]
 449 0144 FFF7FEFF 		bl	CRYP_DataIn
 450              	.LVL81:
 240:FWLIB/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 451              		.loc 1 240 0
ARM GAS  /tmp/cc1B5Puw.s 			page 23


 452 0148 A068     		ldr	r0, [r4, #8]
 453 014a FFF7FEFF 		bl	CRYP_DataIn
 454              	.LVL82:
 242:FWLIB/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 455              		.loc 1 242 0
 456 014e E068     		ldr	r0, [r4, #12]
 457 0150 FFF7FEFF 		bl	CRYP_DataIn
 458              	.LVL83:
 243:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 459              		.loc 1 243 0
 460 0154 1034     		adds	r4, r4, #16
 461              	.LVL84:
 246:FWLIB/src/stm32f4xx_cryp_aes.c ****     do
 462              		.loc 1 246 0
 463 0156 0023     		movs	r3, #0
 464 0158 0193     		str	r3, [sp, #4]
 465              	.L13:
 249:FWLIB/src/stm32f4xx_cryp_aes.c ****       counter++;
 466              		.loc 1 249 0 discriminator 2
 467 015a 1020     		movs	r0, #16
 468 015c FFF7FEFF 		bl	CRYP_GetFlagStatus
 469              	.LVL85:
 470 0160 0246     		mov	r2, r0
 471              	.LVL86:
 250:FWLIB/src/stm32f4xx_cryp_aes.c ****     }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 472              		.loc 1 250 0 discriminator 2
 473 0162 019B     		ldr	r3, [sp, #4]
 474 0164 0133     		adds	r3, r3, #1
 475 0166 0193     		str	r3, [sp, #4]
 251:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 476              		.loc 1 251 0 discriminator 2
 477 0168 019B     		ldr	r3, [sp, #4]
 478 016a B3F5803F 		cmp	r3, #65536
 479 016e DFD0     		beq	.L12
 251:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 480              		.loc 1 251 0 is_stmt 0 discriminator 1
 481 0170 0028     		cmp	r0, #0
 482 0172 F2D1     		bne	.L13
 483 0174 DCE7     		b	.L12
 484              	.L22:
 256:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 257:FWLIB/src/stm32f4xx_cryp_aes.c ****     else
 258:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 259:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 260:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Read the Output block from the Output FIFO */
 261:FWLIB/src/stm32f4xx_cryp_aes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 485              		.loc 1 261 0 is_stmt 1
 486 0176 FFF7FEFF 		bl	CRYP_DataOut
 487              	.LVL87:
 488 017a 3860     		str	r0, [r7]
 489              	.LVL88:
 262:FWLIB/src/stm32f4xx_cryp_aes.c ****       outputaddr+=4;
 263:FWLIB/src/stm32f4xx_cryp_aes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 490              		.loc 1 263 0
 491 017c FFF7FEFF 		bl	CRYP_DataOut
 492              	.LVL89:
 493 0180 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/cc1B5Puw.s 			page 24


 494              	.LVL90:
 264:FWLIB/src/stm32f4xx_cryp_aes.c ****       outputaddr+=4;
 265:FWLIB/src/stm32f4xx_cryp_aes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 495              		.loc 1 265 0
 496 0182 FFF7FEFF 		bl	CRYP_DataOut
 497              	.LVL91:
 498 0186 B860     		str	r0, [r7, #8]
 499              	.LVL92:
 266:FWLIB/src/stm32f4xx_cryp_aes.c ****       outputaddr+=4;
 267:FWLIB/src/stm32f4xx_cryp_aes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut(); 
 500              		.loc 1 267 0
 501 0188 FFF7FEFF 		bl	CRYP_DataOut
 502              	.LVL93:
 503 018c F860     		str	r0, [r7, #12]
 268:FWLIB/src/stm32f4xx_cryp_aes.c ****       outputaddr+=4;
 504              		.loc 1 268 0
 505 018e 1037     		adds	r7, r7, #16
 506              	.LVL94:
 507 0190 D0E7     		b	.L14
 508              	.L15:
 269:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 270:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 271:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 272:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Disable Crypto */
 273:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_Cmd(DISABLE);
 509              		.loc 1 273 0
 510 0192 0020     		movs	r0, #0
 511 0194 FFF7FEFF 		bl	CRYP_Cmd
 512              	.LVL95:
 513              	.L10:
 274:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 275:FWLIB/src/stm32f4xx_cryp_aes.c ****   return status; 
 276:FWLIB/src/stm32f4xx_cryp_aes.c **** }
 514              		.loc 1 276 0
 515 0198 3046     		mov	r0, r6
 516 019a 0FB0     		add	sp, sp, #60
 517              	.LCFI2:
 518              		.cfi_remember_state
 519              		.cfi_def_cfa_offset 28
 520              		@ sp needed
 521 019c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 522              	.LVL96:
 523              	.L18:
 524              	.LCFI3:
 525              		.cfi_restore_state
 229:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 526              		.loc 1 229 0
 527 01a0 0026     		movs	r6, #0
 528              	.LVL97:
 529 01a2 F9E7     		b	.L10
 530              		.cfi_endproc
 531              	.LFE123:
 533              		.section	.text.CRYP_AES_CBC,"ax",%progbits
 534              		.align	1
 535              		.global	CRYP_AES_CBC
 536              		.syntax unified
 537              		.thumb
ARM GAS  /tmp/cc1B5Puw.s 			page 25


 538              		.thumb_func
 539              		.fpu fpv4-sp-d16
 541              	CRYP_AES_CBC:
 542              	.LFB124:
 277:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 278:FWLIB/src/stm32f4xx_cryp_aes.c **** /**
 279:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @brief  Encrypt and decrypt using AES in CBC Mode
 280:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Mode: encryption or decryption Mode.
 281:FWLIB/src/stm32f4xx_cryp_aes.c ****   *          This parameter can be one of the following values:
 282:FWLIB/src/stm32f4xx_cryp_aes.c ****   *            @arg MODE_ENCRYPT: Encryption
 283:FWLIB/src/stm32f4xx_cryp_aes.c ****   *            @arg MODE_DECRYPT: Decryption
 284:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  InitVectors: Initialisation Vectors used for AES algorithm.
 285:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Key: Key used for AES algorithm.
 286:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Keysize: length of the Key, must be a 128, 192 or 256.
 287:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Input: pointer to the Input buffer.
 288:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 16.
 289:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Output: pointer to the returned buffer.
 290:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @retval An ErrorStatus enumeration value:
 291:FWLIB/src/stm32f4xx_cryp_aes.c ****   *          - SUCCESS: Operation done
 292:FWLIB/src/stm32f4xx_cryp_aes.c ****   *          - ERROR: Operation failed
 293:FWLIB/src/stm32f4xx_cryp_aes.c ****   */
 294:FWLIB/src/stm32f4xx_cryp_aes.c **** ErrorStatus CRYP_AES_CBC(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key,
 295:FWLIB/src/stm32f4xx_cryp_aes.c ****                          uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
 296:FWLIB/src/stm32f4xx_cryp_aes.c ****                          uint8_t *Output)
 297:FWLIB/src/stm32f4xx_cryp_aes.c **** {
 543              		.loc 1 297 0
 544              		.cfi_startproc
 545              		@ args = 12, pretend = 0, frame = 72
 546              		@ frame_needed = 0, uses_anonymous_args = 0
 547              	.LVL98:
 548 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 549              	.LCFI4:
 550              		.cfi_def_cfa_offset 32
 551              		.cfi_offset 4, -32
 552              		.cfi_offset 5, -28
 553              		.cfi_offset 6, -24
 554              		.cfi_offset 7, -20
 555              		.cfi_offset 8, -16
 556              		.cfi_offset 9, -12
 557              		.cfi_offset 10, -8
 558              		.cfi_offset 14, -4
 559 0004 92B0     		sub	sp, sp, #72
 560              	.LCFI5:
 561              		.cfi_def_cfa_offset 104
 562 0006 8146     		mov	r9, r0
 563 0008 0E46     		mov	r6, r1
 564 000a 1546     		mov	r5, r2
 565 000c 9A46     		mov	r10, r3
 566 000e DDF86C80 		ldr	r8, [sp, #108]
 298:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_InitTypeDef AES_CRYP_InitStructure;
 299:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
 300:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
 301:FWLIB/src/stm32f4xx_cryp_aes.c ****   __IO uint32_t counter = 0;
 567              		.loc 1 301 0
 568 0012 0023     		movs	r3, #0
 569              	.LVL99:
 570 0014 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/cc1B5Puw.s 			page 26


 571              	.LVL100:
 302:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t busystatus = 0;
 303:FWLIB/src/stm32f4xx_cryp_aes.c ****   ErrorStatus status = SUCCESS;
 304:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 305:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t inputaddr  = (uint32_t)Input;
 572              		.loc 1 305 0
 573 0016 1A9C     		ldr	r4, [sp, #104]
 574              	.LVL101:
 306:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t outputaddr = (uint32_t)Output;
 575              		.loc 1 306 0
 576 0018 1C9F     		ldr	r7, [sp, #112]
 577              	.LVL102:
 307:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t ivaddr = (uint32_t)InitVectors;
 308:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t i = 0;
 309:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 310:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Crypto structures initialisation*/
 311:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 578              		.loc 1 311 0
 579 001a 06A8     		add	r0, sp, #24
 580              	.LVL103:
 581 001c FFF7FEFF 		bl	CRYP_KeyStructInit
 582              	.LVL104:
 312:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 313:FWLIB/src/stm32f4xx_cryp_aes.c ****   switch(Keysize)
 583              		.loc 1 313 0
 584 0020 BAF1C00F 		cmp	r10, #192
 585 0024 47D0     		beq	.L25
 586 0026 BAF5807F 		cmp	r10, #256
 587 002a 5AD0     		beq	.L26
 588 002c BAF1800F 		cmp	r10, #128
 589 0030 32D0     		beq	.L43
 590              	.LVL105:
 591              	.L24:
 314:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 315:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 128:
 316:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 317:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 318:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 319:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 320:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 321:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 322:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 323:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 324:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 325:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 192:
 326:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 327:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 328:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 329:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 330:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 331:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 332:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 333:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 334:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 335:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 336:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 337:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
ARM GAS  /tmp/cc1B5Puw.s 			page 27


 338:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 339:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 256:
 340:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 341:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 342:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 343:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 344:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 345:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 346:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 347:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 348:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 349:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 350:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 351:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 352:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 353:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 354:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 355:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 356:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 357:FWLIB/src/stm32f4xx_cryp_aes.c ****     default:
 358:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 359:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 360:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 361:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* CRYP Initialization Vectors */
 362:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 592              		.loc 1 362 0
 593 0032 3368     		ldr	r3, [r6]
 594              	.LVL106:
 595              	.LBB266:
 596              	.LBB267:
 597              		.loc 2 498 0
 598 0034 1BBA     		rev	r3, r3
 599              	.LVL107:
 600              	.LBE267:
 601              	.LBE266:
 602              		.loc 1 362 0
 603 0036 0293     		str	r3, [sp, #8]
 604              	.LVL108:
 363:FWLIB/src/stm32f4xx_cryp_aes.c ****   ivaddr+=4;
 364:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 605              		.loc 1 364 0
 606 0038 7368     		ldr	r3, [r6, #4]
 607              	.LVL109:
 608              	.LBB268:
 609              	.LBB269:
 610              		.loc 2 498 0
 611 003a 1BBA     		rev	r3, r3
 612              	.LVL110:
 613              	.LBE269:
 614              	.LBE268:
 615              		.loc 1 364 0
 616 003c 0393     		str	r3, [sp, #12]
 617              	.LVL111:
 365:FWLIB/src/stm32f4xx_cryp_aes.c ****   ivaddr+=4;
 366:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 618              		.loc 1 366 0
 619 003e B368     		ldr	r3, [r6, #8]
ARM GAS  /tmp/cc1B5Puw.s 			page 28


 620              	.LVL112:
 621              	.LBB270:
 622              	.LBB271:
 623              		.loc 2 498 0
 624 0040 1BBA     		rev	r3, r3
 625              	.LVL113:
 626              	.LBE271:
 627              	.LBE270:
 628              		.loc 1 366 0
 629 0042 0493     		str	r3, [sp, #16]
 630              	.LVL114:
 367:FWLIB/src/stm32f4xx_cryp_aes.c ****   ivaddr+=4;
 368:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 631              		.loc 1 368 0
 632 0044 F368     		ldr	r3, [r6, #12]
 633              	.LVL115:
 634              	.LBB272:
 635              	.LBB273:
 636              		.loc 2 498 0
 637 0046 1BBA     		rev	r3, r3
 638              	.LVL116:
 639              	.LBE273:
 640              	.LBE272:
 641              		.loc 1 368 0
 642 0048 0593     		str	r3, [sp, #20]
 369:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 370:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 371:FWLIB/src/stm32f4xx_cryp_aes.c ****   /*------------------ AES Decryption ------------------*/
 372:FWLIB/src/stm32f4xx_cryp_aes.c ****   if(Mode == MODE_DECRYPT) /* AES decryption */
 643              		.loc 1 372 0
 644 004a B9F1000F 		cmp	r9, #0
 645 004e 64D1     		bne	.L28
 373:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 374:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Flush IN/OUT FIFOs */
 375:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_FIFOFlush();
 646              		.loc 1 375 0
 647 0050 FFF7FEFF 		bl	CRYP_FIFOFlush
 648              	.LVL117:
 376:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 377:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Crypto Init for Key preparation for decryption process */
 378:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 649              		.loc 1 378 0
 650 0054 0423     		movs	r3, #4
 651 0056 0E93     		str	r3, [sp, #56]
 379:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 652              		.loc 1 379 0
 653 0058 3823     		movs	r3, #56
 654 005a 0F93     		str	r3, [sp, #60]
 380:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 655              		.loc 1 380 0
 656 005c 0023     		movs	r3, #0
 657 005e 1093     		str	r3, [sp, #64]
 381:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 382:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_Init(&AES_CRYP_InitStructure);
 658              		.loc 1 382 0
 659 0060 0EA8     		add	r0, sp, #56
 660 0062 FFF7FEFF 		bl	CRYP_Init
ARM GAS  /tmp/cc1B5Puw.s 			page 29


 661              	.LVL118:
 383:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 384:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Key Initialisation */
 385:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 662              		.loc 1 385 0
 663 0066 06A8     		add	r0, sp, #24
 664 0068 FFF7FEFF 		bl	CRYP_KeyInit
 665              	.LVL119:
 386:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 387:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Enable Crypto processor */
 388:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_Cmd(ENABLE);
 666              		.loc 1 388 0
 667 006c 0120     		movs	r0, #1
 668 006e FFF7FEFF 		bl	CRYP_Cmd
 669              	.LVL120:
 670              	.L30:
 389:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 390:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* wait until the Busy flag is RESET */
 391:FWLIB/src/stm32f4xx_cryp_aes.c ****     do
 392:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 393:FWLIB/src/stm32f4xx_cryp_aes.c ****       busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 671              		.loc 1 393 0 discriminator 2
 672 0072 1020     		movs	r0, #16
 673 0074 FFF7FEFF 		bl	CRYP_GetFlagStatus
 674              	.LVL121:
 675 0078 0246     		mov	r2, r0
 676              	.LVL122:
 394:FWLIB/src/stm32f4xx_cryp_aes.c ****       counter++;
 677              		.loc 1 394 0 discriminator 2
 678 007a 019B     		ldr	r3, [sp, #4]
 679 007c 0133     		adds	r3, r3, #1
 680 007e 0193     		str	r3, [sp, #4]
 395:FWLIB/src/stm32f4xx_cryp_aes.c ****     }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 681              		.loc 1 395 0 discriminator 2
 682 0080 019B     		ldr	r3, [sp, #4]
 683 0082 B3F5803F 		cmp	r3, #65536
 684 0086 01D0     		beq	.L29
 685              		.loc 1 395 0 is_stmt 0 discriminator 1
 686 0088 0028     		cmp	r0, #0
 687 008a F2D1     		bne	.L30
 688              	.L29:
 396:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 397:FWLIB/src/stm32f4xx_cryp_aes.c ****     if (busystatus != RESET)
 689              		.loc 1 397 0 is_stmt 1
 690 008c 002A     		cmp	r2, #0
 691 008e 5FD1     		bne	.L39
 398:FWLIB/src/stm32f4xx_cryp_aes.c ****    {
 399:FWLIB/src/stm32f4xx_cryp_aes.c ****        status = ERROR;
 400:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 401:FWLIB/src/stm32f4xx_cryp_aes.c ****     else
 402:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 403:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Crypto Init for decryption process */  
 404:FWLIB/src/stm32f4xx_cryp_aes.c ****       AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 692              		.loc 1 404 0
 693 0090 0423     		movs	r3, #4
 694 0092 0E93     		str	r3, [sp, #56]
 303:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t keyaddr    = (uint32_t)Key;
ARM GAS  /tmp/cc1B5Puw.s 			page 30


 695              		.loc 1 303 0
 696 0094 0126     		movs	r6, #1
 697              	.LVL123:
 698 0096 46E0     		b	.L31
 699              	.LVL124:
 700              	.L43:
 316:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 701              		.loc 1 316 0
 702 0098 0023     		movs	r3, #0
 703 009a 1193     		str	r3, [sp, #68]
 317:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 704              		.loc 1 317 0
 705 009c 2B68     		ldr	r3, [r5]
 706              	.LVL125:
 707              	.LBB274:
 708              	.LBB275:
 709              		.loc 2 498 0
 710 009e 1BBA     		rev	r3, r3
 711              	.LVL126:
 712              	.LBE275:
 713              	.LBE274:
 317:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 714              		.loc 1 317 0
 715 00a0 0A93     		str	r3, [sp, #40]
 716              	.LVL127:
 319:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 717              		.loc 1 319 0
 718 00a2 6B68     		ldr	r3, [r5, #4]
 719              	.LVL128:
 720              	.LBB276:
 721              	.LBB277:
 722              		.loc 2 498 0
 723 00a4 1BBA     		rev	r3, r3
 724              	.LVL129:
 725              	.LBE277:
 726              	.LBE276:
 319:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 727              		.loc 1 319 0
 728 00a6 0B93     		str	r3, [sp, #44]
 729              	.LVL130:
 321:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 730              		.loc 1 321 0
 731 00a8 AB68     		ldr	r3, [r5, #8]
 732              	.LVL131:
 733              	.LBB278:
 734              	.LBB279:
 735              		.loc 2 498 0
 736 00aa 1BBA     		rev	r3, r3
 737              	.LVL132:
 738              	.LBE279:
 739              	.LBE278:
 321:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 740              		.loc 1 321 0
 741 00ac 0C93     		str	r3, [sp, #48]
 742              	.LVL133:
 323:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 743              		.loc 1 323 0
ARM GAS  /tmp/cc1B5Puw.s 			page 31


 744 00ae EB68     		ldr	r3, [r5, #12]
 745              	.LVL134:
 746              	.LBB280:
 747              	.LBB281:
 748              		.loc 2 498 0
 749 00b0 1BBA     		rev	r3, r3
 750              	.LVL135:
 751              	.LBE281:
 752              	.LBE280:
 323:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 753              		.loc 1 323 0
 754 00b2 0D93     		str	r3, [sp, #52]
 324:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 192:
 755              		.loc 1 324 0
 756 00b4 BDE7     		b	.L24
 757              	.LVL136:
 758              	.L25:
 326:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 759              		.loc 1 326 0
 760 00b6 4FF48073 		mov	r3, #256
 761 00ba 1193     		str	r3, [sp, #68]
 327:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 762              		.loc 1 327 0
 763 00bc 2B68     		ldr	r3, [r5]
 764              	.LVL137:
 765              	.LBB282:
 766              	.LBB283:
 767              		.loc 2 498 0
 768 00be 1BBA     		rev	r3, r3
 769              	.LVL138:
 770              	.LBE283:
 771              	.LBE282:
 327:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 772              		.loc 1 327 0
 773 00c0 0893     		str	r3, [sp, #32]
 774              	.LVL139:
 329:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 775              		.loc 1 329 0
 776 00c2 6B68     		ldr	r3, [r5, #4]
 777              	.LVL140:
 778              	.LBB284:
 779              	.LBB285:
 780              		.loc 2 498 0
 781 00c4 1BBA     		rev	r3, r3
 782              	.LVL141:
 783              	.LBE285:
 784              	.LBE284:
 329:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 785              		.loc 1 329 0
 786 00c6 0993     		str	r3, [sp, #36]
 787              	.LVL142:
 331:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 788              		.loc 1 331 0
 789 00c8 AB68     		ldr	r3, [r5, #8]
 790              	.LVL143:
 791              	.LBB286:
 792              	.LBB287:
ARM GAS  /tmp/cc1B5Puw.s 			page 32


 793              		.loc 2 498 0
 794 00ca 1BBA     		rev	r3, r3
 795              	.LVL144:
 796              	.LBE287:
 797              	.LBE286:
 331:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 798              		.loc 1 331 0
 799 00cc 0A93     		str	r3, [sp, #40]
 800              	.LVL145:
 333:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 801              		.loc 1 333 0
 802 00ce EB68     		ldr	r3, [r5, #12]
 803              	.LVL146:
 804              	.LBB288:
 805              	.LBB289:
 806              		.loc 2 498 0
 807 00d0 1BBA     		rev	r3, r3
 808              	.LVL147:
 809              	.LBE289:
 810              	.LBE288:
 333:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 811              		.loc 1 333 0
 812 00d2 0B93     		str	r3, [sp, #44]
 813              	.LVL148:
 335:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 814              		.loc 1 335 0
 815 00d4 2B69     		ldr	r3, [r5, #16]
 816              	.LVL149:
 817              	.LBB290:
 818              	.LBB291:
 819              		.loc 2 498 0
 820 00d6 1BBA     		rev	r3, r3
 821              	.LVL150:
 822              	.LBE291:
 823              	.LBE290:
 335:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 824              		.loc 1 335 0
 825 00d8 0C93     		str	r3, [sp, #48]
 826              	.LVL151:
 337:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 827              		.loc 1 337 0
 828 00da 6B69     		ldr	r3, [r5, #20]
 829              	.LVL152:
 830              	.LBB292:
 831              	.LBB293:
 832              		.loc 2 498 0
 833 00dc 1BBA     		rev	r3, r3
 834              	.LVL153:
 835              	.LBE293:
 836              	.LBE292:
 337:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 837              		.loc 1 337 0
 838 00de 0D93     		str	r3, [sp, #52]
 338:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 256:
 839              		.loc 1 338 0
 840 00e0 A7E7     		b	.L24
 841              	.LVL154:
ARM GAS  /tmp/cc1B5Puw.s 			page 33


 842              	.L26:
 340:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 843              		.loc 1 340 0
 844 00e2 4FF40073 		mov	r3, #512
 845 00e6 1193     		str	r3, [sp, #68]
 341:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 846              		.loc 1 341 0
 847 00e8 2B68     		ldr	r3, [r5]
 848              	.LVL155:
 849              	.LBB294:
 850              	.LBB295:
 851              		.loc 2 498 0
 852 00ea 1BBA     		rev	r3, r3
 853              	.LVL156:
 854              	.LBE295:
 855              	.LBE294:
 341:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 856              		.loc 1 341 0
 857 00ec 0693     		str	r3, [sp, #24]
 858              	.LVL157:
 343:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 859              		.loc 1 343 0
 860 00ee 6B68     		ldr	r3, [r5, #4]
 861              	.LVL158:
 862              	.LBB296:
 863              	.LBB297:
 864              		.loc 2 498 0
 865 00f0 1BBA     		rev	r3, r3
 866              	.LVL159:
 867              	.LBE297:
 868              	.LBE296:
 343:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 869              		.loc 1 343 0
 870 00f2 0793     		str	r3, [sp, #28]
 871              	.LVL160:
 345:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 872              		.loc 1 345 0
 873 00f4 AB68     		ldr	r3, [r5, #8]
 874              	.LVL161:
 875              	.LBB298:
 876              	.LBB299:
 877              		.loc 2 498 0
 878 00f6 1BBA     		rev	r3, r3
 879              	.LVL162:
 880              	.LBE299:
 881              	.LBE298:
 345:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 882              		.loc 1 345 0
 883 00f8 0893     		str	r3, [sp, #32]
 884              	.LVL163:
 347:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 885              		.loc 1 347 0
 886 00fa EB68     		ldr	r3, [r5, #12]
 887              	.LVL164:
 888              	.LBB300:
 889              	.LBB301:
 890              		.loc 2 498 0
ARM GAS  /tmp/cc1B5Puw.s 			page 34


 891 00fc 1BBA     		rev	r3, r3
 892              	.LVL165:
 893              	.LBE301:
 894              	.LBE300:
 347:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 895              		.loc 1 347 0
 896 00fe 0993     		str	r3, [sp, #36]
 897              	.LVL166:
 349:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 898              		.loc 1 349 0
 899 0100 2B69     		ldr	r3, [r5, #16]
 900              	.LVL167:
 901              	.LBB302:
 902              	.LBB303:
 903              		.loc 2 498 0
 904 0102 1BBA     		rev	r3, r3
 905              	.LVL168:
 906              	.LBE303:
 907              	.LBE302:
 349:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 908              		.loc 1 349 0
 909 0104 0A93     		str	r3, [sp, #40]
 910              	.LVL169:
 351:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 911              		.loc 1 351 0
 912 0106 6B69     		ldr	r3, [r5, #20]
 913              	.LVL170:
 914              	.LBB304:
 915              	.LBB305:
 916              		.loc 2 498 0
 917 0108 1BBA     		rev	r3, r3
 918              	.LVL171:
 919              	.LBE305:
 920              	.LBE304:
 351:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 921              		.loc 1 351 0
 922 010a 0B93     		str	r3, [sp, #44]
 923              	.LVL172:
 353:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 924              		.loc 1 353 0
 925 010c AB69     		ldr	r3, [r5, #24]
 926              	.LVL173:
 927              	.LBB306:
 928              	.LBB307:
 929              		.loc 2 498 0
 930 010e 1BBA     		rev	r3, r3
 931              	.LVL174:
 932              	.LBE307:
 933              	.LBE306:
 353:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 934              		.loc 1 353 0
 935 0110 0C93     		str	r3, [sp, #48]
 936              	.LVL175:
 355:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 937              		.loc 1 355 0
 938 0112 EB69     		ldr	r3, [r5, #28]
 939              	.LVL176:
ARM GAS  /tmp/cc1B5Puw.s 			page 35


 940              	.LBB308:
 941              	.LBB309:
 942              		.loc 2 498 0
 943 0114 1BBA     		rev	r3, r3
 944              	.LVL177:
 945              	.LBE309:
 946              	.LBE308:
 355:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 947              		.loc 1 355 0
 948 0116 0D93     		str	r3, [sp, #52]
 356:FWLIB/src/stm32f4xx_cryp_aes.c ****     default:
 949              		.loc 1 356 0
 950 0118 8BE7     		b	.L24
 951              	.LVL178:
 952              	.L28:
 405:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 406:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 407:FWLIB/src/stm32f4xx_cryp_aes.c ****   /*------------------ AES Encryption ------------------*/
 408:FWLIB/src/stm32f4xx_cryp_aes.c ****   else /* AES encryption */
 409:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 410:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 953              		.loc 1 410 0
 954 011a 06A8     		add	r0, sp, #24
 955 011c FFF7FEFF 		bl	CRYP_KeyInit
 956              	.LVL179:
 411:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 412:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Crypto Init for Encryption process */
 413:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 957              		.loc 1 413 0
 958 0120 0023     		movs	r3, #0
 959 0122 0E93     		str	r3, [sp, #56]
 303:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 960              		.loc 1 303 0
 961 0124 0126     		movs	r6, #1
 962              	.LVL180:
 963              	.L31:
 414:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 415:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
 964              		.loc 1 415 0
 965 0126 2823     		movs	r3, #40
 966 0128 0F93     		str	r3, [sp, #60]
 416:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 967              		.loc 1 416 0
 968 012a 8023     		movs	r3, #128
 969 012c 1093     		str	r3, [sp, #64]
 417:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_Init(&AES_CRYP_InitStructure);
 970              		.loc 1 417 0
 971 012e 0EA8     		add	r0, sp, #56
 972 0130 FFF7FEFF 		bl	CRYP_Init
 973              	.LVL181:
 418:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 419:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* CRYP Initialization Vectors */
 420:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_IVInit(&AES_CRYP_IVInitStructure);
 974              		.loc 1 420 0
 975 0134 02A8     		add	r0, sp, #8
 976 0136 FFF7FEFF 		bl	CRYP_IVInit
 977              	.LVL182:
ARM GAS  /tmp/cc1B5Puw.s 			page 36


 421:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 422:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Flush IN/OUT FIFOs */
 423:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_FIFOFlush();
 978              		.loc 1 423 0
 979 013a FFF7FEFF 		bl	CRYP_FIFOFlush
 980              	.LVL183:
 424:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 425:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Enable Crypto processor */
 426:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_Cmd(ENABLE);
 981              		.loc 1 426 0
 982 013e 0120     		movs	r0, #1
 983 0140 FFF7FEFF 		bl	CRYP_Cmd
 984              	.LVL184:
 427:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 428:FWLIB/src/stm32f4xx_cryp_aes.c ****   if(CRYP_GetCmdStatus() == DISABLE)
 985              		.loc 1 428 0
 986 0144 FFF7FEFF 		bl	CRYP_GetCmdStatus
 987              	.LVL185:
 988 0148 0028     		cmp	r0, #0
 989 014a 3BD0     		beq	.L40
 990 014c 0025     		movs	r5, #0
 991              	.LVL186:
 992 014e 04E0     		b	.L33
 993              	.LVL187:
 994              	.L39:
 399:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 995              		.loc 1 399 0
 996 0150 0026     		movs	r6, #0
 997              	.LVL188:
 998 0152 E8E7     		b	.L31
 999              	.LVL189:
 1000              	.L34:
 429:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 430:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* The CRYP peripheral clock is not enabled or the device doesn't embed 
 431:FWLIB/src/stm32f4xx_cryp_aes.c ****        the CRYP peripheral (please check the device sales type. */
 432:FWLIB/src/stm32f4xx_cryp_aes.c ****     return(ERROR);
 433:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 434:FWLIB/src/stm32f4xx_cryp_aes.c ****   
 435:FWLIB/src/stm32f4xx_cryp_aes.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 436:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 437:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 438:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Write the Input block in the IN FIFO */
 439:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 440:FWLIB/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 441:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 442:FWLIB/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 443:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 444:FWLIB/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 445:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 446:FWLIB/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 447:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Wait until the complete message has been processed */
 448:FWLIB/src/stm32f4xx_cryp_aes.c ****     counter = 0;
 449:FWLIB/src/stm32f4xx_cryp_aes.c ****     do
 450:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 451:FWLIB/src/stm32f4xx_cryp_aes.c ****       busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 452:FWLIB/src/stm32f4xx_cryp_aes.c ****       counter++;
 453:FWLIB/src/stm32f4xx_cryp_aes.c ****     }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
ARM GAS  /tmp/cc1B5Puw.s 			page 37


 454:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 455:FWLIB/src/stm32f4xx_cryp_aes.c ****     if (busystatus != RESET)
 1001              		.loc 1 455 0
 1002 0154 0AB3     		cbz	r2, .L44
 456:FWLIB/src/stm32f4xx_cryp_aes.c ****    {
 457:FWLIB/src/stm32f4xx_cryp_aes.c ****        status = ERROR;
 1003              		.loc 1 457 0
 1004 0156 0026     		movs	r6, #0
 1005              	.LVL190:
 1006              	.L36:
 435:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 1007              		.loc 1 435 0 discriminator 2
 1008 0158 1035     		adds	r5, r5, #16
 1009              	.LVL191:
 1010              	.L33:
 435:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 1011              		.loc 1 435 0 is_stmt 0 discriminator 1
 1012 015a 4545     		cmp	r5, r8
 1013 015c 2BD2     		bcs	.L37
 435:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 1014              		.loc 1 435 0 discriminator 3
 1015 015e 56B3     		cbz	r6, .L37
 439:FWLIB/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 1016              		.loc 1 439 0 is_stmt 1
 1017 0160 2068     		ldr	r0, [r4]
 1018 0162 FFF7FEFF 		bl	CRYP_DataIn
 1019              	.LVL192:
 441:FWLIB/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 1020              		.loc 1 441 0
 1021 0166 6068     		ldr	r0, [r4, #4]
 1022 0168 FFF7FEFF 		bl	CRYP_DataIn
 1023              	.LVL193:
 443:FWLIB/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 1024              		.loc 1 443 0
 1025 016c A068     		ldr	r0, [r4, #8]
 1026 016e FFF7FEFF 		bl	CRYP_DataIn
 1027              	.LVL194:
 445:FWLIB/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 1028              		.loc 1 445 0
 1029 0172 E068     		ldr	r0, [r4, #12]
 1030 0174 FFF7FEFF 		bl	CRYP_DataIn
 1031              	.LVL195:
 446:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Wait until the complete message has been processed */
 1032              		.loc 1 446 0
 1033 0178 1034     		adds	r4, r4, #16
 1034              	.LVL196:
 448:FWLIB/src/stm32f4xx_cryp_aes.c ****     do
 1035              		.loc 1 448 0
 1036 017a 0023     		movs	r3, #0
 1037 017c 0193     		str	r3, [sp, #4]
 1038              	.L35:
 451:FWLIB/src/stm32f4xx_cryp_aes.c ****       counter++;
 1039              		.loc 1 451 0 discriminator 2
 1040 017e 1020     		movs	r0, #16
 1041 0180 FFF7FEFF 		bl	CRYP_GetFlagStatus
 1042              	.LVL197:
 1043 0184 0246     		mov	r2, r0
ARM GAS  /tmp/cc1B5Puw.s 			page 38


 1044              	.LVL198:
 452:FWLIB/src/stm32f4xx_cryp_aes.c ****     }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 1045              		.loc 1 452 0 discriminator 2
 1046 0186 019B     		ldr	r3, [sp, #4]
 1047 0188 0133     		adds	r3, r3, #1
 1048 018a 0193     		str	r3, [sp, #4]
 453:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 1049              		.loc 1 453 0 discriminator 2
 1050 018c 019B     		ldr	r3, [sp, #4]
 1051 018e B3F5803F 		cmp	r3, #65536
 1052 0192 DFD0     		beq	.L34
 453:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 1053              		.loc 1 453 0 is_stmt 0 discriminator 1
 1054 0194 0028     		cmp	r0, #0
 1055 0196 F2D1     		bne	.L35
 1056 0198 DCE7     		b	.L34
 1057              	.L44:
 458:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 459:FWLIB/src/stm32f4xx_cryp_aes.c ****     else
 460:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 461:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 462:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Read the Output block from the Output FIFO */
 463:FWLIB/src/stm32f4xx_cryp_aes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 1058              		.loc 1 463 0 is_stmt 1
 1059 019a FFF7FEFF 		bl	CRYP_DataOut
 1060              	.LVL199:
 1061 019e 3860     		str	r0, [r7]
 1062              	.LVL200:
 464:FWLIB/src/stm32f4xx_cryp_aes.c ****       outputaddr+=4;
 465:FWLIB/src/stm32f4xx_cryp_aes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 1063              		.loc 1 465 0
 1064 01a0 FFF7FEFF 		bl	CRYP_DataOut
 1065              	.LVL201:
 1066 01a4 7860     		str	r0, [r7, #4]
 1067              	.LVL202:
 466:FWLIB/src/stm32f4xx_cryp_aes.c ****       outputaddr+=4;
 467:FWLIB/src/stm32f4xx_cryp_aes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 1068              		.loc 1 467 0
 1069 01a6 FFF7FEFF 		bl	CRYP_DataOut
 1070              	.LVL203:
 1071 01aa B860     		str	r0, [r7, #8]
 1072              	.LVL204:
 468:FWLIB/src/stm32f4xx_cryp_aes.c ****       outputaddr+=4;
 469:FWLIB/src/stm32f4xx_cryp_aes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 1073              		.loc 1 469 0
 1074 01ac FFF7FEFF 		bl	CRYP_DataOut
 1075              	.LVL205:
 1076 01b0 F860     		str	r0, [r7, #12]
 470:FWLIB/src/stm32f4xx_cryp_aes.c ****       outputaddr+=4;
 1077              		.loc 1 470 0
 1078 01b2 1037     		adds	r7, r7, #16
 1079              	.LVL206:
 1080 01b4 D0E7     		b	.L36
 1081              	.L37:
 471:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 472:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 473:FWLIB/src/stm32f4xx_cryp_aes.c **** 
ARM GAS  /tmp/cc1B5Puw.s 			page 39


 474:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Disable Crypto */
 475:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_Cmd(DISABLE);
 1082              		.loc 1 475 0
 1083 01b6 0020     		movs	r0, #0
 1084 01b8 FFF7FEFF 		bl	CRYP_Cmd
 1085              	.LVL207:
 1086              	.L32:
 476:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 477:FWLIB/src/stm32f4xx_cryp_aes.c ****   return status;
 478:FWLIB/src/stm32f4xx_cryp_aes.c **** }
 1087              		.loc 1 478 0
 1088 01bc 3046     		mov	r0, r6
 1089 01be 12B0     		add	sp, sp, #72
 1090              	.LCFI6:
 1091              		.cfi_remember_state
 1092              		.cfi_def_cfa_offset 32
 1093              		@ sp needed
 1094 01c0 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1095              	.LVL208:
 1096              	.L40:
 1097              	.LCFI7:
 1098              		.cfi_restore_state
 432:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 1099              		.loc 1 432 0
 1100 01c4 0026     		movs	r6, #0
 1101              	.LVL209:
 1102 01c6 F9E7     		b	.L32
 1103              		.cfi_endproc
 1104              	.LFE124:
 1106              		.section	.text.CRYP_AES_CTR,"ax",%progbits
 1107              		.align	1
 1108              		.global	CRYP_AES_CTR
 1109              		.syntax unified
 1110              		.thumb
 1111              		.thumb_func
 1112              		.fpu fpv4-sp-d16
 1114              	CRYP_AES_CTR:
 1115              	.LFB125:
 479:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 480:FWLIB/src/stm32f4xx_cryp_aes.c **** /**
 481:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @brief  Encrypt and decrypt using AES in CTR Mode
 482:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Mode: encryption or decryption Mode.
 483:FWLIB/src/stm32f4xx_cryp_aes.c ****   *           This parameter can be one of the following values:
 484:FWLIB/src/stm32f4xx_cryp_aes.c ****   *            @arg MODE_ENCRYPT: Encryption
 485:FWLIB/src/stm32f4xx_cryp_aes.c ****   *            @arg MODE_DECRYPT: Decryption
 486:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  InitVectors: Initialisation Vectors used for AES algorithm.
 487:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Key: Key used for AES algorithm.
 488:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Keysize: length of the Key, must be a 128, 192 or 256.
 489:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Input: pointer to the Input buffer.
 490:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 16.
 491:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Output: pointer to the returned buffer.
 492:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @retval An ErrorStatus enumeration value:
 493:FWLIB/src/stm32f4xx_cryp_aes.c ****   *          - SUCCESS: Operation done
 494:FWLIB/src/stm32f4xx_cryp_aes.c ****   *          - ERROR: Operation failed
 495:FWLIB/src/stm32f4xx_cryp_aes.c ****   */
 496:FWLIB/src/stm32f4xx_cryp_aes.c **** ErrorStatus CRYP_AES_CTR(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key, 
 497:FWLIB/src/stm32f4xx_cryp_aes.c ****                          uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
ARM GAS  /tmp/cc1B5Puw.s 			page 40


 498:FWLIB/src/stm32f4xx_cryp_aes.c ****                          uint8_t *Output)
 499:FWLIB/src/stm32f4xx_cryp_aes.c **** {
 1116              		.loc 1 499 0
 1117              		.cfi_startproc
 1118              		@ args = 12, pretend = 0, frame = 72
 1119              		@ frame_needed = 0, uses_anonymous_args = 0
 1120              	.LVL210:
 1121 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1122              	.LCFI8:
 1123              		.cfi_def_cfa_offset 32
 1124              		.cfi_offset 4, -32
 1125              		.cfi_offset 5, -28
 1126              		.cfi_offset 6, -24
 1127              		.cfi_offset 7, -20
 1128              		.cfi_offset 8, -16
 1129              		.cfi_offset 9, -12
 1130              		.cfi_offset 10, -8
 1131              		.cfi_offset 14, -4
 1132 0004 92B0     		sub	sp, sp, #72
 1133              	.LCFI9:
 1134              		.cfi_def_cfa_offset 104
 1135 0006 8146     		mov	r9, r0
 1136 0008 0E46     		mov	r6, r1
 1137 000a 1546     		mov	r5, r2
 1138 000c 9A46     		mov	r10, r3
 1139 000e DDF86C80 		ldr	r8, [sp, #108]
 500:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_InitTypeDef AES_CRYP_InitStructure;
 501:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
 502:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
 503:FWLIB/src/stm32f4xx_cryp_aes.c ****   __IO uint32_t counter = 0;
 1140              		.loc 1 503 0
 1141 0012 0023     		movs	r3, #0
 1142              	.LVL211:
 1143 0014 0193     		str	r3, [sp, #4]
 1144              	.LVL212:
 504:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t busystatus = 0;
 505:FWLIB/src/stm32f4xx_cryp_aes.c ****   ErrorStatus status = SUCCESS;
 506:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 507:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t inputaddr  = (uint32_t)Input;
 1145              		.loc 1 507 0
 1146 0016 1A9C     		ldr	r4, [sp, #104]
 1147              	.LVL213:
 508:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t outputaddr = (uint32_t)Output;
 1148              		.loc 1 508 0
 1149 0018 1C9F     		ldr	r7, [sp, #112]
 1150              	.LVL214:
 509:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t ivaddr     = (uint32_t)InitVectors;
 510:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t i = 0;
 511:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 512:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Crypto structures initialisation*/
 513:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 1151              		.loc 1 513 0
 1152 001a 06A8     		add	r0, sp, #24
 1153              	.LVL215:
 1154 001c FFF7FEFF 		bl	CRYP_KeyStructInit
 1155              	.LVL216:
 514:FWLIB/src/stm32f4xx_cryp_aes.c **** 
ARM GAS  /tmp/cc1B5Puw.s 			page 41


 515:FWLIB/src/stm32f4xx_cryp_aes.c ****   switch(Keysize)
 1156              		.loc 1 515 0
 1157 0020 BAF1C00F 		cmp	r10, #192
 1158 0024 3ED0     		beq	.L47
 1159 0026 BAF5807F 		cmp	r10, #256
 1160 002a 51D0     		beq	.L48
 1161 002c BAF1800F 		cmp	r10, #128
 1162 0030 29D0     		beq	.L62
 1163              	.LVL217:
 1164              	.L46:
 516:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 517:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 128:
 518:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 519:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 520:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 521:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 522:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 523:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 524:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 525:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 526:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 527:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 192:
 528:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 529:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 530:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 531:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 532:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 533:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 534:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 535:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 536:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 537:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 538:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 539:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 540:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 541:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 256:
 542:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 543:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 544:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 545:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 546:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 547:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 548:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 549:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 550:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 551:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 552:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 553:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 554:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 555:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 556:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 557:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 558:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 559:FWLIB/src/stm32f4xx_cryp_aes.c ****     default:
 560:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 561:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 562:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* CRYP Initialization Vectors */
ARM GAS  /tmp/cc1B5Puw.s 			page 42


 563:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 1165              		.loc 1 563 0
 1166 0032 3368     		ldr	r3, [r6]
 1167              	.LVL218:
 1168              	.LBB310:
 1169              	.LBB311:
 1170              		.loc 2 498 0
 1171 0034 1BBA     		rev	r3, r3
 1172              	.LVL219:
 1173              	.LBE311:
 1174              	.LBE310:
 1175              		.loc 1 563 0
 1176 0036 0293     		str	r3, [sp, #8]
 1177              	.LVL220:
 564:FWLIB/src/stm32f4xx_cryp_aes.c ****   ivaddr+=4;
 565:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 1178              		.loc 1 565 0
 1179 0038 7368     		ldr	r3, [r6, #4]
 1180              	.LVL221:
 1181              	.LBB312:
 1182              	.LBB313:
 1183              		.loc 2 498 0
 1184 003a 1BBA     		rev	r3, r3
 1185              	.LVL222:
 1186              	.LBE313:
 1187              	.LBE312:
 1188              		.loc 1 565 0
 1189 003c 0393     		str	r3, [sp, #12]
 1190              	.LVL223:
 566:FWLIB/src/stm32f4xx_cryp_aes.c ****   ivaddr+=4;
 567:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 1191              		.loc 1 567 0
 1192 003e B368     		ldr	r3, [r6, #8]
 1193              	.LVL224:
 1194              	.LBB314:
 1195              	.LBB315:
 1196              		.loc 2 498 0
 1197 0040 1BBA     		rev	r3, r3
 1198              	.LVL225:
 1199              	.LBE315:
 1200              	.LBE314:
 1201              		.loc 1 567 0
 1202 0042 0493     		str	r3, [sp, #16]
 1203              	.LVL226:
 568:FWLIB/src/stm32f4xx_cryp_aes.c ****   ivaddr+=4;
 569:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 1204              		.loc 1 569 0
 1205 0044 F368     		ldr	r3, [r6, #12]
 1206              	.LVL227:
 1207              	.LBB316:
 1208              	.LBB317:
 1209              		.loc 2 498 0
 1210 0046 1BBA     		rev	r3, r3
 1211              	.LVL228:
 1212              	.LBE317:
 1213              	.LBE316:
 1214              		.loc 1 569 0
ARM GAS  /tmp/cc1B5Puw.s 			page 43


 1215 0048 0593     		str	r3, [sp, #20]
 570:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 571:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Key Initialisation */
 572:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 1216              		.loc 1 572 0
 1217 004a 06A8     		add	r0, sp, #24
 1218 004c FFF7FEFF 		bl	CRYP_KeyInit
 1219              	.LVL229:
 573:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 574:FWLIB/src/stm32f4xx_cryp_aes.c ****   /*------------------ AES Decryption ------------------*/
 575:FWLIB/src/stm32f4xx_cryp_aes.c ****   if(Mode == MODE_DECRYPT) /* AES decryption */
 1220              		.loc 1 575 0
 1221 0050 B9F1000F 		cmp	r9, #0
 1222 0054 58D1     		bne	.L50
 576:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 577:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Crypto Init for decryption process */
 578:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 1223              		.loc 1 578 0
 1224 0056 0423     		movs	r3, #4
 1225 0058 0E93     		str	r3, [sp, #56]
 1226              	.L51:
 579:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 580:FWLIB/src/stm32f4xx_cryp_aes.c ****   /*------------------ AES Encryption ------------------*/
 581:FWLIB/src/stm32f4xx_cryp_aes.c ****   else /* AES encryption */
 582:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 583:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Crypto Init for Encryption process */
 584:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 585:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 586:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CTR;
 1227              		.loc 1 586 0
 1228 005a 3023     		movs	r3, #48
 1229 005c 0F93     		str	r3, [sp, #60]
 587:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 1230              		.loc 1 587 0
 1231 005e 8023     		movs	r3, #128
 1232 0060 1093     		str	r3, [sp, #64]
 588:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_Init(&AES_CRYP_InitStructure);
 1233              		.loc 1 588 0
 1234 0062 0EA8     		add	r0, sp, #56
 1235 0064 FFF7FEFF 		bl	CRYP_Init
 1236              	.LVL230:
 589:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 590:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* CRYP Initialization Vectors */
 591:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_IVInit(&AES_CRYP_IVInitStructure);
 1237              		.loc 1 591 0
 1238 0068 02A8     		add	r0, sp, #8
 1239 006a FFF7FEFF 		bl	CRYP_IVInit
 1240              	.LVL231:
 592:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 593:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Flush IN/OUT FIFOs */
 594:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_FIFOFlush();
 1241              		.loc 1 594 0
 1242 006e FFF7FEFF 		bl	CRYP_FIFOFlush
 1243              	.LVL232:
 595:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 596:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Enable Crypto processor */
 597:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_Cmd(ENABLE);
ARM GAS  /tmp/cc1B5Puw.s 			page 44


 1244              		.loc 1 597 0
 1245 0072 0120     		movs	r0, #1
 1246 0074 FFF7FEFF 		bl	CRYP_Cmd
 1247              	.LVL233:
 598:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 599:FWLIB/src/stm32f4xx_cryp_aes.c ****   if(CRYP_GetCmdStatus() == DISABLE)
 1248              		.loc 1 599 0
 1249 0078 FFF7FEFF 		bl	CRYP_GetCmdStatus
 1250              	.LVL234:
 1251 007c 0028     		cmp	r0, #0
 1252 007e 7ED0     		beq	.L59
 1253 0080 0025     		movs	r5, #0
 1254              	.LVL235:
 1255 0082 0126     		movs	r6, #1
 1256              	.LVL236:
 1257 0084 46E0     		b	.L53
 1258              	.LVL237:
 1259              	.L62:
 518:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 1260              		.loc 1 518 0
 1261 0086 0023     		movs	r3, #0
 1262 0088 1193     		str	r3, [sp, #68]
 519:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1263              		.loc 1 519 0
 1264 008a 2B68     		ldr	r3, [r5]
 1265              	.LVL238:
 1266              	.LBB318:
 1267              	.LBB319:
 1268              		.loc 2 498 0
 1269 008c 1BBA     		rev	r3, r3
 1270              	.LVL239:
 1271              	.LBE319:
 1272              	.LBE318:
 519:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1273              		.loc 1 519 0
 1274 008e 0A93     		str	r3, [sp, #40]
 1275              	.LVL240:
 521:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1276              		.loc 1 521 0
 1277 0090 6B68     		ldr	r3, [r5, #4]
 1278              	.LVL241:
 1279              	.LBB320:
 1280              	.LBB321:
 1281              		.loc 2 498 0
 1282 0092 1BBA     		rev	r3, r3
 1283              	.LVL242:
 1284              	.LBE321:
 1285              	.LBE320:
 521:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1286              		.loc 1 521 0
 1287 0094 0B93     		str	r3, [sp, #44]
 1288              	.LVL243:
 523:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1289              		.loc 1 523 0
 1290 0096 AB68     		ldr	r3, [r5, #8]
 1291              	.LVL244:
 1292              	.LBB322:
ARM GAS  /tmp/cc1B5Puw.s 			page 45


 1293              	.LBB323:
 1294              		.loc 2 498 0
 1295 0098 1BBA     		rev	r3, r3
 1296              	.LVL245:
 1297              	.LBE323:
 1298              	.LBE322:
 523:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1299              		.loc 1 523 0
 1300 009a 0C93     		str	r3, [sp, #48]
 1301              	.LVL246:
 525:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 1302              		.loc 1 525 0
 1303 009c EB68     		ldr	r3, [r5, #12]
 1304              	.LVL247:
 1305              	.LBB324:
 1306              	.LBB325:
 1307              		.loc 2 498 0
 1308 009e 1BBA     		rev	r3, r3
 1309              	.LVL248:
 1310              	.LBE325:
 1311              	.LBE324:
 525:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 1312              		.loc 1 525 0
 1313 00a0 0D93     		str	r3, [sp, #52]
 526:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 192:
 1314              		.loc 1 526 0
 1315 00a2 C6E7     		b	.L46
 1316              	.LVL249:
 1317              	.L47:
 528:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 1318              		.loc 1 528 0
 1319 00a4 4FF48073 		mov	r3, #256
 1320 00a8 1193     		str	r3, [sp, #68]
 529:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1321              		.loc 1 529 0
 1322 00aa 2B68     		ldr	r3, [r5]
 1323              	.LVL250:
 1324              	.LBB326:
 1325              	.LBB327:
 1326              		.loc 2 498 0
 1327 00ac 1BBA     		rev	r3, r3
 1328              	.LVL251:
 1329              	.LBE327:
 1330              	.LBE326:
 529:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1331              		.loc 1 529 0
 1332 00ae 0893     		str	r3, [sp, #32]
 1333              	.LVL252:
 531:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1334              		.loc 1 531 0
 1335 00b0 6B68     		ldr	r3, [r5, #4]
 1336              	.LVL253:
 1337              	.LBB328:
 1338              	.LBB329:
 1339              		.loc 2 498 0
 1340 00b2 1BBA     		rev	r3, r3
 1341              	.LVL254:
ARM GAS  /tmp/cc1B5Puw.s 			page 46


 1342              	.LBE329:
 1343              	.LBE328:
 531:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1344              		.loc 1 531 0
 1345 00b4 0993     		str	r3, [sp, #36]
 1346              	.LVL255:
 533:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1347              		.loc 1 533 0
 1348 00b6 AB68     		ldr	r3, [r5, #8]
 1349              	.LVL256:
 1350              	.LBB330:
 1351              	.LBB331:
 1352              		.loc 2 498 0
 1353 00b8 1BBA     		rev	r3, r3
 1354              	.LVL257:
 1355              	.LBE331:
 1356              	.LBE330:
 533:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1357              		.loc 1 533 0
 1358 00ba 0A93     		str	r3, [sp, #40]
 1359              	.LVL258:
 535:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1360              		.loc 1 535 0
 1361 00bc EB68     		ldr	r3, [r5, #12]
 1362              	.LVL259:
 1363              	.LBB332:
 1364              	.LBB333:
 1365              		.loc 2 498 0
 1366 00be 1BBA     		rev	r3, r3
 1367              	.LVL260:
 1368              	.LBE333:
 1369              	.LBE332:
 535:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1370              		.loc 1 535 0
 1371 00c0 0B93     		str	r3, [sp, #44]
 1372              	.LVL261:
 537:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1373              		.loc 1 537 0
 1374 00c2 2B69     		ldr	r3, [r5, #16]
 1375              	.LVL262:
 1376              	.LBB334:
 1377              	.LBB335:
 1378              		.loc 2 498 0
 1379 00c4 1BBA     		rev	r3, r3
 1380              	.LVL263:
 1381              	.LBE335:
 1382              	.LBE334:
 537:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1383              		.loc 1 537 0
 1384 00c6 0C93     		str	r3, [sp, #48]
 1385              	.LVL264:
 539:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 1386              		.loc 1 539 0
 1387 00c8 6B69     		ldr	r3, [r5, #20]
 1388              	.LVL265:
 1389              	.LBB336:
 1390              	.LBB337:
ARM GAS  /tmp/cc1B5Puw.s 			page 47


 1391              		.loc 2 498 0
 1392 00ca 1BBA     		rev	r3, r3
 1393              	.LVL266:
 1394              	.LBE337:
 1395              	.LBE336:
 539:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 1396              		.loc 1 539 0
 1397 00cc 0D93     		str	r3, [sp, #52]
 540:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 256:
 1398              		.loc 1 540 0
 1399 00ce B0E7     		b	.L46
 1400              	.LVL267:
 1401              	.L48:
 542:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 1402              		.loc 1 542 0
 1403 00d0 4FF40073 		mov	r3, #512
 1404 00d4 1193     		str	r3, [sp, #68]
 543:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1405              		.loc 1 543 0
 1406 00d6 2B68     		ldr	r3, [r5]
 1407              	.LVL268:
 1408              	.LBB338:
 1409              	.LBB339:
 1410              		.loc 2 498 0
 1411 00d8 1BBA     		rev	r3, r3
 1412              	.LVL269:
 1413              	.LBE339:
 1414              	.LBE338:
 543:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1415              		.loc 1 543 0
 1416 00da 0693     		str	r3, [sp, #24]
 1417              	.LVL270:
 545:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1418              		.loc 1 545 0
 1419 00dc 6B68     		ldr	r3, [r5, #4]
 1420              	.LVL271:
 1421              	.LBB340:
 1422              	.LBB341:
 1423              		.loc 2 498 0
 1424 00de 1BBA     		rev	r3, r3
 1425              	.LVL272:
 1426              	.LBE341:
 1427              	.LBE340:
 545:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1428              		.loc 1 545 0
 1429 00e0 0793     		str	r3, [sp, #28]
 1430              	.LVL273:
 547:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1431              		.loc 1 547 0
 1432 00e2 AB68     		ldr	r3, [r5, #8]
 1433              	.LVL274:
 1434              	.LBB342:
 1435              	.LBB343:
 1436              		.loc 2 498 0
 1437 00e4 1BBA     		rev	r3, r3
 1438              	.LVL275:
 1439              	.LBE343:
ARM GAS  /tmp/cc1B5Puw.s 			page 48


 1440              	.LBE342:
 547:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1441              		.loc 1 547 0
 1442 00e6 0893     		str	r3, [sp, #32]
 1443              	.LVL276:
 549:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1444              		.loc 1 549 0
 1445 00e8 EB68     		ldr	r3, [r5, #12]
 1446              	.LVL277:
 1447              	.LBB344:
 1448              	.LBB345:
 1449              		.loc 2 498 0
 1450 00ea 1BBA     		rev	r3, r3
 1451              	.LVL278:
 1452              	.LBE345:
 1453              	.LBE344:
 549:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1454              		.loc 1 549 0
 1455 00ec 0993     		str	r3, [sp, #36]
 1456              	.LVL279:
 551:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1457              		.loc 1 551 0
 1458 00ee 2B69     		ldr	r3, [r5, #16]
 1459              	.LVL280:
 1460              	.LBB346:
 1461              	.LBB347:
 1462              		.loc 2 498 0
 1463 00f0 1BBA     		rev	r3, r3
 1464              	.LVL281:
 1465              	.LBE347:
 1466              	.LBE346:
 551:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1467              		.loc 1 551 0
 1468 00f2 0A93     		str	r3, [sp, #40]
 1469              	.LVL282:
 553:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1470              		.loc 1 553 0
 1471 00f4 6B69     		ldr	r3, [r5, #20]
 1472              	.LVL283:
 1473              	.LBB348:
 1474              	.LBB349:
 1475              		.loc 2 498 0
 1476 00f6 1BBA     		rev	r3, r3
 1477              	.LVL284:
 1478              	.LBE349:
 1479              	.LBE348:
 553:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1480              		.loc 1 553 0
 1481 00f8 0B93     		str	r3, [sp, #44]
 1482              	.LVL285:
 555:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1483              		.loc 1 555 0
 1484 00fa AB69     		ldr	r3, [r5, #24]
 1485              	.LVL286:
 1486              	.LBB350:
 1487              	.LBB351:
 1488              		.loc 2 498 0
ARM GAS  /tmp/cc1B5Puw.s 			page 49


 1489 00fc 1BBA     		rev	r3, r3
 1490              	.LVL287:
 1491              	.LBE351:
 1492              	.LBE350:
 555:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1493              		.loc 1 555 0
 1494 00fe 0C93     		str	r3, [sp, #48]
 1495              	.LVL288:
 557:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 1496              		.loc 1 557 0
 1497 0100 EB69     		ldr	r3, [r5, #28]
 1498              	.LVL289:
 1499              	.LBB352:
 1500              	.LBB353:
 1501              		.loc 2 498 0
 1502 0102 1BBA     		rev	r3, r3
 1503              	.LVL290:
 1504              	.LBE353:
 1505              	.LBE352:
 557:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 1506              		.loc 1 557 0
 1507 0104 0D93     		str	r3, [sp, #52]
 558:FWLIB/src/stm32f4xx_cryp_aes.c ****     default:
 1508              		.loc 1 558 0
 1509 0106 94E7     		b	.L46
 1510              	.LVL291:
 1511              	.L50:
 584:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 1512              		.loc 1 584 0
 1513 0108 0023     		movs	r3, #0
 1514 010a 0E93     		str	r3, [sp, #56]
 1515 010c A5E7     		b	.L51
 1516              	.LVL292:
 1517              	.L54:
 600:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 601:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* The CRYP peripheral clock is not enabled or the device doesn't embed 
 602:FWLIB/src/stm32f4xx_cryp_aes.c ****        the CRYP peripheral (please check the device sales type. */
 603:FWLIB/src/stm32f4xx_cryp_aes.c ****     return(ERROR);
 604:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 605:FWLIB/src/stm32f4xx_cryp_aes.c ****   
 606:FWLIB/src/stm32f4xx_cryp_aes.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 607:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 608:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 609:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Write the Input block in the IN FIFO */
 610:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 611:FWLIB/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 612:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 613:FWLIB/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 614:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 615:FWLIB/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 616:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 617:FWLIB/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 618:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Wait until the complete message has been processed */
 619:FWLIB/src/stm32f4xx_cryp_aes.c ****     counter = 0;
 620:FWLIB/src/stm32f4xx_cryp_aes.c ****     do
 621:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 622:FWLIB/src/stm32f4xx_cryp_aes.c ****       busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
ARM GAS  /tmp/cc1B5Puw.s 			page 50


 623:FWLIB/src/stm32f4xx_cryp_aes.c ****       counter++;
 624:FWLIB/src/stm32f4xx_cryp_aes.c ****     }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 625:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 626:FWLIB/src/stm32f4xx_cryp_aes.c ****     if (busystatus != RESET)
 1518              		.loc 1 626 0
 1519 010e 0AB3     		cbz	r2, .L63
 627:FWLIB/src/stm32f4xx_cryp_aes.c ****    {
 628:FWLIB/src/stm32f4xx_cryp_aes.c ****        status = ERROR;
 1520              		.loc 1 628 0
 1521 0110 0026     		movs	r6, #0
 1522              	.LVL293:
 1523              	.L56:
 606:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 1524              		.loc 1 606 0 discriminator 2
 1525 0112 1035     		adds	r5, r5, #16
 1526              	.LVL294:
 1527              	.L53:
 606:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 1528              		.loc 1 606 0 is_stmt 0 discriminator 1
 1529 0114 4545     		cmp	r5, r8
 1530 0116 2BD2     		bcs	.L57
 606:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 1531              		.loc 1 606 0 discriminator 3
 1532 0118 56B3     		cbz	r6, .L57
 610:FWLIB/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 1533              		.loc 1 610 0 is_stmt 1
 1534 011a 2068     		ldr	r0, [r4]
 1535 011c FFF7FEFF 		bl	CRYP_DataIn
 1536              	.LVL295:
 612:FWLIB/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 1537              		.loc 1 612 0
 1538 0120 6068     		ldr	r0, [r4, #4]
 1539 0122 FFF7FEFF 		bl	CRYP_DataIn
 1540              	.LVL296:
 614:FWLIB/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 1541              		.loc 1 614 0
 1542 0126 A068     		ldr	r0, [r4, #8]
 1543 0128 FFF7FEFF 		bl	CRYP_DataIn
 1544              	.LVL297:
 616:FWLIB/src/stm32f4xx_cryp_aes.c ****     inputaddr+=4;
 1545              		.loc 1 616 0
 1546 012c E068     		ldr	r0, [r4, #12]
 1547 012e FFF7FEFF 		bl	CRYP_DataIn
 1548              	.LVL298:
 617:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Wait until the complete message has been processed */
 1549              		.loc 1 617 0
 1550 0132 1034     		adds	r4, r4, #16
 1551              	.LVL299:
 619:FWLIB/src/stm32f4xx_cryp_aes.c ****     do
 1552              		.loc 1 619 0
 1553 0134 0023     		movs	r3, #0
 1554 0136 0193     		str	r3, [sp, #4]
 1555              	.L55:
 622:FWLIB/src/stm32f4xx_cryp_aes.c ****       counter++;
 1556              		.loc 1 622 0 discriminator 2
 1557 0138 1020     		movs	r0, #16
 1558 013a FFF7FEFF 		bl	CRYP_GetFlagStatus
ARM GAS  /tmp/cc1B5Puw.s 			page 51


 1559              	.LVL300:
 1560 013e 0246     		mov	r2, r0
 1561              	.LVL301:
 623:FWLIB/src/stm32f4xx_cryp_aes.c ****     }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 1562              		.loc 1 623 0 discriminator 2
 1563 0140 019B     		ldr	r3, [sp, #4]
 1564 0142 0133     		adds	r3, r3, #1
 1565 0144 0193     		str	r3, [sp, #4]
 624:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 1566              		.loc 1 624 0 discriminator 2
 1567 0146 019B     		ldr	r3, [sp, #4]
 1568 0148 B3F5803F 		cmp	r3, #65536
 1569 014c DFD0     		beq	.L54
 624:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 1570              		.loc 1 624 0 is_stmt 0 discriminator 1
 1571 014e 0028     		cmp	r0, #0
 1572 0150 F2D1     		bne	.L55
 1573 0152 DCE7     		b	.L54
 1574              	.L63:
 629:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 630:FWLIB/src/stm32f4xx_cryp_aes.c ****     else
 631:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 632:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 633:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Read the Output block from the Output FIFO */
 634:FWLIB/src/stm32f4xx_cryp_aes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 1575              		.loc 1 634 0 is_stmt 1
 1576 0154 FFF7FEFF 		bl	CRYP_DataOut
 1577              	.LVL302:
 1578 0158 3860     		str	r0, [r7]
 1579              	.LVL303:
 635:FWLIB/src/stm32f4xx_cryp_aes.c ****       outputaddr+=4;
 636:FWLIB/src/stm32f4xx_cryp_aes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 1580              		.loc 1 636 0
 1581 015a FFF7FEFF 		bl	CRYP_DataOut
 1582              	.LVL304:
 1583 015e 7860     		str	r0, [r7, #4]
 1584              	.LVL305:
 637:FWLIB/src/stm32f4xx_cryp_aes.c ****       outputaddr+=4;
 638:FWLIB/src/stm32f4xx_cryp_aes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 1585              		.loc 1 638 0
 1586 0160 FFF7FEFF 		bl	CRYP_DataOut
 1587              	.LVL306:
 1588 0164 B860     		str	r0, [r7, #8]
 1589              	.LVL307:
 639:FWLIB/src/stm32f4xx_cryp_aes.c ****       outputaddr+=4;
 640:FWLIB/src/stm32f4xx_cryp_aes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 1590              		.loc 1 640 0
 1591 0166 FFF7FEFF 		bl	CRYP_DataOut
 1592              	.LVL308:
 1593 016a F860     		str	r0, [r7, #12]
 641:FWLIB/src/stm32f4xx_cryp_aes.c ****       outputaddr+=4;
 1594              		.loc 1 641 0
 1595 016c 1037     		adds	r7, r7, #16
 1596              	.LVL309:
 1597 016e D0E7     		b	.L56
 1598              	.L57:
 642:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
ARM GAS  /tmp/cc1B5Puw.s 			page 52


 643:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 644:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Disable Crypto */
 645:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_Cmd(DISABLE);
 1599              		.loc 1 645 0
 1600 0170 0020     		movs	r0, #0
 1601 0172 FFF7FEFF 		bl	CRYP_Cmd
 1602              	.LVL310:
 1603              	.L52:
 646:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 647:FWLIB/src/stm32f4xx_cryp_aes.c ****   return status;
 648:FWLIB/src/stm32f4xx_cryp_aes.c **** }
 1604              		.loc 1 648 0
 1605 0176 3046     		mov	r0, r6
 1606 0178 12B0     		add	sp, sp, #72
 1607              	.LCFI10:
 1608              		.cfi_remember_state
 1609              		.cfi_def_cfa_offset 32
 1610              		@ sp needed
 1611 017a BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1612              	.LVL311:
 1613              	.L59:
 1614              	.LCFI11:
 1615              		.cfi_restore_state
 603:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 1616              		.loc 1 603 0
 1617 017e 0026     		movs	r6, #0
 1618              	.LVL312:
 1619 0180 F9E7     		b	.L52
 1620              		.cfi_endproc
 1621              	.LFE125:
 1623              		.section	.text.CRYP_AES_GCM,"ax",%progbits
 1624              		.align	1
 1625              		.global	CRYP_AES_GCM
 1626              		.syntax unified
 1627              		.thumb
 1628              		.thumb_func
 1629              		.fpu fpv4-sp-d16
 1631              	CRYP_AES_GCM:
 1632              	.LFB126:
 649:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 650:FWLIB/src/stm32f4xx_cryp_aes.c **** /**
 651:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @brief  Encrypt and decrypt using AES in GCM Mode. The GCM and CCM modes
 652:FWLIB/src/stm32f4xx_cryp_aes.c ****   *         are available only on STM32F437x Devices.
 653:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Mode: encryption or decryption Mode.
 654:FWLIB/src/stm32f4xx_cryp_aes.c ****   *          This parameter can be one of the following values:
 655:FWLIB/src/stm32f4xx_cryp_aes.c ****   *            @arg MODE_ENCRYPT: Encryption
 656:FWLIB/src/stm32f4xx_cryp_aes.c ****   *            @arg MODE_DECRYPT: Decryption
 657:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  InitVectors: Initialisation Vectors used for AES algorithm.
 658:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Key: Key used for AES algorithm.
 659:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Keysize: length of the Key, must be a 128, 192 or 256.
 660:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Input: pointer to the Input buffer.
 661:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Ilength: length of the Input buffer in bytes, must be a multiple of 16.
 662:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Header: pointer to the header buffer.
 663:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Hlength: length of the header buffer in bytes, must be a multiple of 16.  
 664:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Output: pointer to the returned buffer.
 665:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  AuthTAG: pointer to the authentication TAG buffer.
 666:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @retval An ErrorStatus enumeration value:
ARM GAS  /tmp/cc1B5Puw.s 			page 53


 667:FWLIB/src/stm32f4xx_cryp_aes.c ****   *          - SUCCESS: Operation done
 668:FWLIB/src/stm32f4xx_cryp_aes.c ****   *          - ERROR: Operation failed
 669:FWLIB/src/stm32f4xx_cryp_aes.c ****   */
 670:FWLIB/src/stm32f4xx_cryp_aes.c **** ErrorStatus CRYP_AES_GCM(uint8_t Mode, uint8_t InitVectors[16],
 671:FWLIB/src/stm32f4xx_cryp_aes.c ****                          uint8_t *Key, uint16_t Keysize,
 672:FWLIB/src/stm32f4xx_cryp_aes.c ****                          uint8_t *Input, uint32_t ILength,
 673:FWLIB/src/stm32f4xx_cryp_aes.c ****                          uint8_t *Header, uint32_t HLength,
 674:FWLIB/src/stm32f4xx_cryp_aes.c ****                          uint8_t *Output, uint8_t *AuthTAG)
 675:FWLIB/src/stm32f4xx_cryp_aes.c **** {
 1633              		.loc 1 675 0
 1634              		.cfi_startproc
 1635              		@ args = 24, pretend = 0, frame = 88
 1636              		@ frame_needed = 0, uses_anonymous_args = 0
 1637              	.LVL313:
 1638 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1639              	.LCFI12:
 1640              		.cfi_def_cfa_offset 36
 1641              		.cfi_offset 4, -36
 1642              		.cfi_offset 5, -32
 1643              		.cfi_offset 6, -28
 1644              		.cfi_offset 7, -24
 1645              		.cfi_offset 8, -20
 1646              		.cfi_offset 9, -16
 1647              		.cfi_offset 10, -12
 1648              		.cfi_offset 11, -8
 1649              		.cfi_offset 14, -4
 1650 0004 97B0     		sub	sp, sp, #92
 1651              	.LCFI13:
 1652              		.cfi_def_cfa_offset 128
 1653 0006 0190     		str	r0, [sp, #4]
 1654 0008 8946     		mov	r9, r1
 1655 000a 9046     		mov	r8, r2
 1656 000c 9B46     		mov	fp, r3
 1657 000e 219F     		ldr	r7, [sp, #132]
 1658 0010 DDF88CA0 		ldr	r10, [sp, #140]
 676:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_InitTypeDef AES_CRYP_InitStructure;
 677:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
 678:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
 679:FWLIB/src/stm32f4xx_cryp_aes.c ****   __IO uint32_t counter = 0;
 1659              		.loc 1 679 0
 1660 0014 0023     		movs	r3, #0
 1661              	.LVL314:
 1662 0016 0593     		str	r3, [sp, #20]
 1663              	.LVL315:
 680:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t busystatus = 0;
 681:FWLIB/src/stm32f4xx_cryp_aes.c ****   ErrorStatus status = SUCCESS;
 682:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 683:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t inputaddr  = (uint32_t)Input;
 1664              		.loc 1 683 0
 1665 0018 209C     		ldr	r4, [sp, #128]
 1666              	.LVL316:
 684:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t outputaddr = (uint32_t)Output;
 1667              		.loc 1 684 0
 1668 001a 249E     		ldr	r6, [sp, #144]
 1669              	.LVL317:
 685:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t ivaddr     = (uint32_t)InitVectors;
 686:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t headeraddr = (uint32_t)Header;
ARM GAS  /tmp/cc1B5Puw.s 			page 54


 1670              		.loc 1 686 0
 1671 001c 229D     		ldr	r5, [sp, #136]
 1672              	.LVL318:
 687:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t tagaddr = (uint32_t)AuthTAG;
 688:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint64_t headerlength = HLength * 8;/* header length in bits */
 1673              		.loc 1 688 0
 1674 001e 4FEACA03 		lsl	r3, r10, #3
 1675 0022 0293     		str	r3, [sp, #8]
 1676              	.LVL319:
 689:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint64_t inputlength = ILength * 8;/* input length in bits */
 1677              		.loc 1 689 0
 1678 0024 FB00     		lsls	r3, r7, #3
 1679              	.LVL320:
 1680 0026 0393     		str	r3, [sp, #12]
 1681              	.LVL321:
 690:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t loopcounter = 0;
 691:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 692:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Crypto structures initialisation*/
 693:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 1682              		.loc 1 693 0
 1683 0028 0AA8     		add	r0, sp, #40
 1684              	.LVL322:
 1685 002a FFF7FEFF 		bl	CRYP_KeyStructInit
 1686              	.LVL323:
 694:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 695:FWLIB/src/stm32f4xx_cryp_aes.c ****   switch(Keysize)
 1687              		.loc 1 695 0
 1688 002e BBF1C00F 		cmp	fp, #192
 1689 0032 5FD0     		beq	.L66
 1690 0034 BBF5807F 		cmp	fp, #256
 1691 0038 78D0     		beq	.L67
 1692 003a BBF1800F 		cmp	fp, #128
 1693 003e 46D0     		beq	.L115
 1694              	.LVL324:
 1695              	.L65:
 696:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 697:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 128:
 698:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 699:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 700:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 701:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 702:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 703:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 704:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 705:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 706:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 707:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 192:
 708:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 709:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 710:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 711:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 712:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 713:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 714:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 715:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 716:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 717:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
ARM GAS  /tmp/cc1B5Puw.s 			page 55


 718:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 719:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 720:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 721:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 256:
 722:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 723:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 724:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 725:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 726:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 727:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 728:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 729:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 730:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 731:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 732:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 733:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 734:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 735:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 736:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 737:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 738:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 739:FWLIB/src/stm32f4xx_cryp_aes.c ****     default:
 740:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 741:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 742:FWLIB/src/stm32f4xx_cryp_aes.c ****   
 743:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* CRYP Initialization Vectors */
 744:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 1696              		.loc 1 744 0
 1697 0040 D9F80030 		ldr	r3, [r9]
 1698              	.LVL325:
 1699              	.LBB354:
 1700              	.LBB355:
 1701              		.loc 2 498 0
 1702 0044 1BBA     		rev	r3, r3
 1703              	.LVL326:
 1704              	.LBE355:
 1705              	.LBE354:
 1706              		.loc 1 744 0
 1707 0046 0693     		str	r3, [sp, #24]
 1708              	.LVL327:
 745:FWLIB/src/stm32f4xx_cryp_aes.c ****   ivaddr+=4;
 746:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 1709              		.loc 1 746 0
 1710 0048 D9F80430 		ldr	r3, [r9, #4]
 1711              	.LVL328:
 1712              	.LBB356:
 1713              	.LBB357:
 1714              		.loc 2 498 0
 1715 004c 1BBA     		rev	r3, r3
 1716              	.LVL329:
 1717              	.LBE357:
 1718              	.LBE356:
 1719              		.loc 1 746 0
 1720 004e 0793     		str	r3, [sp, #28]
 1721              	.LVL330:
 747:FWLIB/src/stm32f4xx_cryp_aes.c ****   ivaddr+=4;
 748:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
ARM GAS  /tmp/cc1B5Puw.s 			page 56


 1722              		.loc 1 748 0
 1723 0050 D9F80830 		ldr	r3, [r9, #8]
 1724              	.LVL331:
 1725              	.LBB358:
 1726              	.LBB359:
 1727              		.loc 2 498 0
 1728 0054 1BBA     		rev	r3, r3
 1729              	.LVL332:
 1730              	.LBE359:
 1731              	.LBE358:
 1732              		.loc 1 748 0
 1733 0056 0893     		str	r3, [sp, #32]
 1734              	.LVL333:
 749:FWLIB/src/stm32f4xx_cryp_aes.c ****   ivaddr+=4;
 750:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 1735              		.loc 1 750 0
 1736 0058 D9F80C30 		ldr	r3, [r9, #12]
 1737              	.LVL334:
 1738              	.LBB360:
 1739              	.LBB361:
 1740              		.loc 2 498 0
 1741 005c 1BBA     		rev	r3, r3
 1742              	.LVL335:
 1743              	.LBE361:
 1744              	.LBE360:
 1745              		.loc 1 750 0
 1746 005e 0993     		str	r3, [sp, #36]
 751:FWLIB/src/stm32f4xx_cryp_aes.c ****   
 752:FWLIB/src/stm32f4xx_cryp_aes.c ****   /*------------------ AES Encryption ------------------*/
 753:FWLIB/src/stm32f4xx_cryp_aes.c ****   if(Mode == MODE_ENCRYPT) /* AES encryption */
 1747              		.loc 1 753 0
 1748 0060 019B     		ldr	r3, [sp, #4]
 1749 0062 012B     		cmp	r3, #1
 1750 0064 00F08680 		beq	.L116
 754:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 755:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Flush IN/OUT FIFOs */
 756:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_FIFOFlush();
 757:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 758:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Key Initialisation */
 759:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 760:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 761:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* CRYP Initialization Vectors */
 762:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_IVInit(&AES_CRYP_IVInitStructure);
 763:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 764:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Crypto Init for Key preparation for decryption process */
 765:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 766:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_GCM;
 767:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 768:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_Init(&AES_CRYP_InitStructure);
 769:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 770:FWLIB/src/stm32f4xx_cryp_aes.c ****     /***************************** Init phase *********************************/
 771:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Select init phase */
 772:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_PhaseConfig(CRYP_Phase_Init);
 773:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 774:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Enable Crypto processor */
 775:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_Cmd(ENABLE);
 776:FWLIB/src/stm32f4xx_cryp_aes.c ****     
ARM GAS  /tmp/cc1B5Puw.s 			page 57


 777:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Wait for CRYPEN bit to be 0 */
 778:FWLIB/src/stm32f4xx_cryp_aes.c ****     while(CRYP_GetCmdStatus() == ENABLE)
 779:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 780:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 781:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 782:FWLIB/src/stm32f4xx_cryp_aes.c ****     /***************************** header phase *******************************/
 783:FWLIB/src/stm32f4xx_cryp_aes.c ****     if(HLength != 0)
 784:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 785:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Select header phase */
 786:FWLIB/src/stm32f4xx_cryp_aes.c ****       CRYP_PhaseConfig(CRYP_Phase_Header);
 787:FWLIB/src/stm32f4xx_cryp_aes.c ****       
 788:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Enable Crypto processor */
 789:FWLIB/src/stm32f4xx_cryp_aes.c ****       CRYP_Cmd(ENABLE);
 790:FWLIB/src/stm32f4xx_cryp_aes.c ****       
 791:FWLIB/src/stm32f4xx_cryp_aes.c ****       if(CRYP_GetCmdStatus() == DISABLE)
 792:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 793:FWLIB/src/stm32f4xx_cryp_aes.c ****          /* The CRYP peripheral clock is not enabled or the device doesn't embed 
 794:FWLIB/src/stm32f4xx_cryp_aes.c ****             the CRYP peripheral (please check the device sales type. */
 795:FWLIB/src/stm32f4xx_cryp_aes.c ****          return(ERROR);
 796:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 797:FWLIB/src/stm32f4xx_cryp_aes.c ****       
 798:FWLIB/src/stm32f4xx_cryp_aes.c ****       for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
 799:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 800:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Wait until the IFEM flag is reset */
 801:FWLIB/src/stm32f4xx_cryp_aes.c ****         while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 802:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
 803:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
 804:FWLIB/src/stm32f4xx_cryp_aes.c ****         
 805:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Write the Input block in the IN FIFO */
 806:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(headeraddr));
 807:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
 808:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(headeraddr));
 809:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
 810:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(headeraddr));
 811:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
 812:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(headeraddr));
 813:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
 814:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 815:FWLIB/src/stm32f4xx_cryp_aes.c ****       
 816:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Wait until the complete message has been processed */
 817:FWLIB/src/stm32f4xx_cryp_aes.c ****       counter = 0;
 818:FWLIB/src/stm32f4xx_cryp_aes.c ****       do
 819:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 820:FWLIB/src/stm32f4xx_cryp_aes.c ****         busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 821:FWLIB/src/stm32f4xx_cryp_aes.c ****         counter++;
 822:FWLIB/src/stm32f4xx_cryp_aes.c ****       }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 823:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 824:FWLIB/src/stm32f4xx_cryp_aes.c ****       if (busystatus != RESET)
 825:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 826:FWLIB/src/stm32f4xx_cryp_aes.c ****         status = ERROR;
 827:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 828:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 829:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 830:FWLIB/src/stm32f4xx_cryp_aes.c ****     /**************************** payload phase *******************************/
 831:FWLIB/src/stm32f4xx_cryp_aes.c ****     if(ILength != 0)
 832:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 833:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Select payload phase */
ARM GAS  /tmp/cc1B5Puw.s 			page 58


 834:FWLIB/src/stm32f4xx_cryp_aes.c ****       CRYP_PhaseConfig(CRYP_Phase_Payload);
 835:FWLIB/src/stm32f4xx_cryp_aes.c ****       
 836:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Enable Crypto processor */
 837:FWLIB/src/stm32f4xx_cryp_aes.c ****       CRYP_Cmd(ENABLE);
 838:FWLIB/src/stm32f4xx_cryp_aes.c ****       
 839:FWLIB/src/stm32f4xx_cryp_aes.c ****       if(CRYP_GetCmdStatus() == DISABLE)
 840:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 841:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* The CRYP peripheral clock is not enabled or the device doesn't embed 
 842:FWLIB/src/stm32f4xx_cryp_aes.c ****            the CRYP peripheral (please check the device sales type. */
 843:FWLIB/src/stm32f4xx_cryp_aes.c ****         return(ERROR);
 844:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 845:FWLIB/src/stm32f4xx_cryp_aes.c ****       
 846:FWLIB/src/stm32f4xx_cryp_aes.c ****       for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 847:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 848:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Wait until the IFEM flag is reset */
 849:FWLIB/src/stm32f4xx_cryp_aes.c ****         while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 850:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
 851:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
 852:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Write the Input block in the IN FIFO */
 853:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(inputaddr));
 854:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
 855:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(inputaddr));
 856:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
 857:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(inputaddr));
 858:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
 859:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(inputaddr));
 860:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
 861:FWLIB/src/stm32f4xx_cryp_aes.c ****         
 862:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Wait until the complete message has been processed */
 863:FWLIB/src/stm32f4xx_cryp_aes.c ****         counter = 0;
 864:FWLIB/src/stm32f4xx_cryp_aes.c ****         do
 865:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
 866:FWLIB/src/stm32f4xx_cryp_aes.c ****           busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 867:FWLIB/src/stm32f4xx_cryp_aes.c ****           counter++;
 868:FWLIB/src/stm32f4xx_cryp_aes.c ****         }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 869:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 870:FWLIB/src/stm32f4xx_cryp_aes.c ****         if (busystatus != RESET)
 871:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
 872:FWLIB/src/stm32f4xx_cryp_aes.c ****           status = ERROR;
 873:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
 874:FWLIB/src/stm32f4xx_cryp_aes.c ****         else
 875:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
 876:FWLIB/src/stm32f4xx_cryp_aes.c ****           /* Wait until the OFNE flag is reset */
 877:FWLIB/src/stm32f4xx_cryp_aes.c ****           while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 878:FWLIB/src/stm32f4xx_cryp_aes.c ****           {
 879:FWLIB/src/stm32f4xx_cryp_aes.c ****           }
 880:FWLIB/src/stm32f4xx_cryp_aes.c ****           
 881:FWLIB/src/stm32f4xx_cryp_aes.c ****           /* Read the Output block from the Output FIFO */
 882:FWLIB/src/stm32f4xx_cryp_aes.c ****           *(uint32_t*)(outputaddr) = CRYP_DataOut();
 883:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
 884:FWLIB/src/stm32f4xx_cryp_aes.c ****           *(uint32_t*)(outputaddr) = CRYP_DataOut();
 885:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
 886:FWLIB/src/stm32f4xx_cryp_aes.c ****           *(uint32_t*)(outputaddr) = CRYP_DataOut();
 887:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
 888:FWLIB/src/stm32f4xx_cryp_aes.c ****           *(uint32_t*)(outputaddr) = CRYP_DataOut();
 889:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
 890:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
ARM GAS  /tmp/cc1B5Puw.s 			page 59


 891:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 892:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 893:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 894:FWLIB/src/stm32f4xx_cryp_aes.c ****     /***************************** final phase ********************************/
 895:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Select final phase */
 896:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_PhaseConfig(CRYP_Phase_Final);
 897:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 898:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Enable Crypto processor */
 899:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_Cmd(ENABLE);
 900:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 901:FWLIB/src/stm32f4xx_cryp_aes.c ****     if(CRYP_GetCmdStatus() == DISABLE)
 902:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 903:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* The CRYP peripheral clock is not enabled or the device doesn't embed 
 904:FWLIB/src/stm32f4xx_cryp_aes.c ****          the CRYP peripheral (please check the device sales type. */
 905:FWLIB/src/stm32f4xx_cryp_aes.c ****       return(ERROR);
 906:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 907:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 908:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Write number of bits concatenated with header in the IN FIFO */
 909:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(__REV(headerlength>>32));
 910:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(__REV(headerlength));
 911:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(__REV(inputlength>>32));
 912:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(__REV(inputlength));
 913:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Wait until the OFNE flag is reset */
 914:FWLIB/src/stm32f4xx_cryp_aes.c ****     while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 915:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 916:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 917:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 918:FWLIB/src/stm32f4xx_cryp_aes.c ****     tagaddr = (uint32_t)AuthTAG;
 919:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Read the Auth TAG in the IN FIFO */
 920:FWLIB/src/stm32f4xx_cryp_aes.c ****     *(uint32_t*)(tagaddr) = CRYP_DataOut();
 921:FWLIB/src/stm32f4xx_cryp_aes.c ****     tagaddr+=4;
 922:FWLIB/src/stm32f4xx_cryp_aes.c ****     *(uint32_t*)(tagaddr) = CRYP_DataOut();
 923:FWLIB/src/stm32f4xx_cryp_aes.c ****     tagaddr+=4;
 924:FWLIB/src/stm32f4xx_cryp_aes.c ****     *(uint32_t*)(tagaddr) = CRYP_DataOut();
 925:FWLIB/src/stm32f4xx_cryp_aes.c ****     tagaddr+=4;
 926:FWLIB/src/stm32f4xx_cryp_aes.c ****     *(uint32_t*)(tagaddr) = CRYP_DataOut();
 927:FWLIB/src/stm32f4xx_cryp_aes.c ****     tagaddr+=4;
 928:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 929:FWLIB/src/stm32f4xx_cryp_aes.c ****   /*------------------ AES Decryption ------------------*/
 930:FWLIB/src/stm32f4xx_cryp_aes.c ****   else /* AES decryption */
 931:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 932:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Flush IN/OUT FIFOs */
 933:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_FIFOFlush();
 1751              		.loc 1 933 0
 1752 0068 FFF7FEFF 		bl	CRYP_FIFOFlush
 1753              	.LVL336:
 934:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 935:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Key Initialisation */
 936:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 1754              		.loc 1 936 0
 1755 006c 0AA8     		add	r0, sp, #40
 1756 006e FFF7FEFF 		bl	CRYP_KeyInit
 1757              	.LVL337:
 937:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 938:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* CRYP Initialization Vectors */
 939:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_IVInit(&AES_CRYP_IVInitStructure);
 1758              		.loc 1 939 0
ARM GAS  /tmp/cc1B5Puw.s 			page 60


 1759 0072 06A8     		add	r0, sp, #24
 1760 0074 FFF7FEFF 		bl	CRYP_IVInit
 1761              	.LVL338:
 940:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 941:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Crypto Init for Key preparation for decryption process */
 942:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 1762              		.loc 1 942 0
 1763 0078 0423     		movs	r3, #4
 1764 007a 1293     		str	r3, [sp, #72]
 943:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_GCM;
 1765              		.loc 1 943 0
 1766 007c 4FF40023 		mov	r3, #524288
 1767 0080 1393     		str	r3, [sp, #76]
 944:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 1768              		.loc 1 944 0
 1769 0082 8023     		movs	r3, #128
 1770 0084 1493     		str	r3, [sp, #80]
 945:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_Init(&AES_CRYP_InitStructure);
 1771              		.loc 1 945 0
 1772 0086 12A8     		add	r0, sp, #72
 1773 0088 FFF7FEFF 		bl	CRYP_Init
 1774              	.LVL339:
 946:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 947:FWLIB/src/stm32f4xx_cryp_aes.c ****     /***************************** Init phase *********************************/
 948:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Select init phase */
 949:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_PhaseConfig(CRYP_Phase_Init);
 1775              		.loc 1 949 0
 1776 008c 0020     		movs	r0, #0
 1777 008e FFF7FEFF 		bl	CRYP_PhaseConfig
 1778              	.LVL340:
 950:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 951:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Enable Crypto processor */
 952:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_Cmd(ENABLE);
 1779              		.loc 1 952 0
 1780 0092 0120     		movs	r0, #1
 1781 0094 FFF7FEFF 		bl	CRYP_Cmd
 1782              	.LVL341:
 1783              	.L86:
 953:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 954:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Wait for CRYPEN bit to be 0 */
 955:FWLIB/src/stm32f4xx_cryp_aes.c ****     while(CRYP_GetCmdStatus() == ENABLE)
 1784              		.loc 1 955 0 discriminator 1
 1785 0098 FFF7FEFF 		bl	CRYP_GetCmdStatus
 1786              	.LVL342:
 1787 009c 0128     		cmp	r0, #1
 1788 009e FBD0     		beq	.L86
 956:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 957:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 958:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 959:FWLIB/src/stm32f4xx_cryp_aes.c ****     /***************************** header phase *******************************/
 960:FWLIB/src/stm32f4xx_cryp_aes.c ****     if(HLength != 0)
 1789              		.loc 1 960 0
 1790 00a0 BAF1000F 		cmp	r10, #0
 1791 00a4 40F04081 		bne	.L117
 681:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 1792              		.loc 1 681 0
 1793 00a8 0125     		movs	r5, #1
ARM GAS  /tmp/cc1B5Puw.s 			page 61


 1794              	.LVL343:
 1795              	.L87:
 961:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 962:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Select header phase */
 963:FWLIB/src/stm32f4xx_cryp_aes.c ****       CRYP_PhaseConfig(CRYP_Phase_Header);
 964:FWLIB/src/stm32f4xx_cryp_aes.c ****       
 965:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Enable Crypto processor */
 966:FWLIB/src/stm32f4xx_cryp_aes.c ****       CRYP_Cmd(ENABLE);
 967:FWLIB/src/stm32f4xx_cryp_aes.c ****       
 968:FWLIB/src/stm32f4xx_cryp_aes.c ****       if(CRYP_GetCmdStatus() == DISABLE)
 969:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 970:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* The CRYP peripheral clock is not enabled or the device doesn't embed 
 971:FWLIB/src/stm32f4xx_cryp_aes.c ****            the CRYP peripheral (please check the device sales type. */
 972:FWLIB/src/stm32f4xx_cryp_aes.c ****         return(ERROR);
 973:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 974:FWLIB/src/stm32f4xx_cryp_aes.c ****       
 975:FWLIB/src/stm32f4xx_cryp_aes.c ****       for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
 976:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 977:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Wait until the IFEM flag is reset */
 978:FWLIB/src/stm32f4xx_cryp_aes.c ****         while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 979:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
 980:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
 981:FWLIB/src/stm32f4xx_cryp_aes.c ****         
 982:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Write the Input block in the IN FIFO */
 983:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(headeraddr));
 984:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
 985:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(headeraddr));
 986:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
 987:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(headeraddr));
 988:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
 989:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(headeraddr));
 990:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
 991:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 992:FWLIB/src/stm32f4xx_cryp_aes.c ****       
 993:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Wait until the complete message has been processed */
 994:FWLIB/src/stm32f4xx_cryp_aes.c ****       counter = 0;
 995:FWLIB/src/stm32f4xx_cryp_aes.c ****       do
 996:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 997:FWLIB/src/stm32f4xx_cryp_aes.c ****         busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 998:FWLIB/src/stm32f4xx_cryp_aes.c ****         counter++;
 999:FWLIB/src/stm32f4xx_cryp_aes.c ****       }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
1000:FWLIB/src/stm32f4xx_cryp_aes.c **** 
1001:FWLIB/src/stm32f4xx_cryp_aes.c ****       if (busystatus != RESET)
1002:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
1003:FWLIB/src/stm32f4xx_cryp_aes.c ****         status = ERROR;
1004:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
1005:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
1006:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1007:FWLIB/src/stm32f4xx_cryp_aes.c ****     /**************************** payload phase *******************************/
1008:FWLIB/src/stm32f4xx_cryp_aes.c ****     if(ILength != 0)
 1796              		.loc 1 1008 0
 1797 00aa 002F     		cmp	r7, #0
 1798 00ac 00F0B281 		beq	.L92
1009:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
1010:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Select payload phase */
1011:FWLIB/src/stm32f4xx_cryp_aes.c ****       CRYP_PhaseConfig(CRYP_Phase_Payload);
 1799              		.loc 1 1011 0
ARM GAS  /tmp/cc1B5Puw.s 			page 62


 1800 00b0 4FF40030 		mov	r0, #131072
 1801 00b4 FFF7FEFF 		bl	CRYP_PhaseConfig
 1802              	.LVL344:
1012:FWLIB/src/stm32f4xx_cryp_aes.c **** 
1013:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Enable Crypto processor */
1014:FWLIB/src/stm32f4xx_cryp_aes.c ****       CRYP_Cmd(ENABLE);
 1803              		.loc 1 1014 0
 1804 00b8 0120     		movs	r0, #1
 1805 00ba FFF7FEFF 		bl	CRYP_Cmd
 1806              	.LVL345:
1015:FWLIB/src/stm32f4xx_cryp_aes.c ****       
1016:FWLIB/src/stm32f4xx_cryp_aes.c ****       if(CRYP_GetCmdStatus() == DISABLE)
 1807              		.loc 1 1016 0
 1808 00be FFF7FEFF 		bl	CRYP_GetCmdStatus
 1809              	.LVL346:
 1810 00c2 0028     		cmp	r0, #0
 1811 00c4 00F0E281 		beq	.L109
 1812 00c8 4FF00008 		mov	r8, #0
 1813              	.LVL347:
 1814 00cc 7BE1     		b	.L93
 1815              	.LVL348:
 1816              	.L115:
 698:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 1817              		.loc 1 698 0
 1818 00ce 0023     		movs	r3, #0
 1819 00d0 1593     		str	r3, [sp, #84]
 699:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1820              		.loc 1 699 0
 1821 00d2 D8F80030 		ldr	r3, [r8]
 1822              	.LVL349:
 1823              	.LBB362:
 1824              	.LBB363:
 1825              		.loc 2 498 0
 1826 00d6 1BBA     		rev	r3, r3
 1827              	.LVL350:
 1828              	.LBE363:
 1829              	.LBE362:
 699:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1830              		.loc 1 699 0
 1831 00d8 0E93     		str	r3, [sp, #56]
 1832              	.LVL351:
 701:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1833              		.loc 1 701 0
 1834 00da D8F80430 		ldr	r3, [r8, #4]
 1835              	.LVL352:
 1836              	.LBB364:
 1837              	.LBB365:
 1838              		.loc 2 498 0
 1839 00de 1BBA     		rev	r3, r3
 1840              	.LVL353:
 1841              	.LBE365:
 1842              	.LBE364:
 701:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1843              		.loc 1 701 0
 1844 00e0 0F93     		str	r3, [sp, #60]
 1845              	.LVL354:
 703:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
ARM GAS  /tmp/cc1B5Puw.s 			page 63


 1846              		.loc 1 703 0
 1847 00e2 D8F80830 		ldr	r3, [r8, #8]
 1848              	.LVL355:
 1849              	.LBB366:
 1850              	.LBB367:
 1851              		.loc 2 498 0
 1852 00e6 1BBA     		rev	r3, r3
 1853              	.LVL356:
 1854              	.LBE367:
 1855              	.LBE366:
 703:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1856              		.loc 1 703 0
 1857 00e8 1093     		str	r3, [sp, #64]
 1858              	.LVL357:
 705:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 1859              		.loc 1 705 0
 1860 00ea D8F80C30 		ldr	r3, [r8, #12]
 1861              	.LVL358:
 1862              	.LBB368:
 1863              	.LBB369:
 1864              		.loc 2 498 0
 1865 00ee 1BBA     		rev	r3, r3
 1866              	.LVL359:
 1867              	.LBE369:
 1868              	.LBE368:
 705:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 1869              		.loc 1 705 0
 1870 00f0 1193     		str	r3, [sp, #68]
 706:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 192:
 1871              		.loc 1 706 0
 1872 00f2 A5E7     		b	.L65
 1873              	.LVL360:
 1874              	.L66:
 708:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 1875              		.loc 1 708 0
 1876 00f4 4FF48073 		mov	r3, #256
 1877 00f8 1593     		str	r3, [sp, #84]
 709:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1878              		.loc 1 709 0
 1879 00fa D8F80030 		ldr	r3, [r8]
 1880              	.LVL361:
 1881              	.LBB370:
 1882              	.LBB371:
 1883              		.loc 2 498 0
 1884 00fe 1BBA     		rev	r3, r3
 1885              	.LVL362:
 1886              	.LBE371:
 1887              	.LBE370:
 709:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1888              		.loc 1 709 0
 1889 0100 0C93     		str	r3, [sp, #48]
 1890              	.LVL363:
 711:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1891              		.loc 1 711 0
 1892 0102 D8F80430 		ldr	r3, [r8, #4]
 1893              	.LVL364:
 1894              	.LBB372:
ARM GAS  /tmp/cc1B5Puw.s 			page 64


 1895              	.LBB373:
 1896              		.loc 2 498 0
 1897 0106 1BBA     		rev	r3, r3
 1898              	.LVL365:
 1899              	.LBE373:
 1900              	.LBE372:
 711:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1901              		.loc 1 711 0
 1902 0108 0D93     		str	r3, [sp, #52]
 1903              	.LVL366:
 713:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1904              		.loc 1 713 0
 1905 010a D8F80830 		ldr	r3, [r8, #8]
 1906              	.LVL367:
 1907              	.LBB374:
 1908              	.LBB375:
 1909              		.loc 2 498 0
 1910 010e 1BBA     		rev	r3, r3
 1911              	.LVL368:
 1912              	.LBE375:
 1913              	.LBE374:
 713:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1914              		.loc 1 713 0
 1915 0110 0E93     		str	r3, [sp, #56]
 1916              	.LVL369:
 715:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1917              		.loc 1 715 0
 1918 0112 D8F80C30 		ldr	r3, [r8, #12]
 1919              	.LVL370:
 1920              	.LBB376:
 1921              	.LBB377:
 1922              		.loc 2 498 0
 1923 0116 1BBA     		rev	r3, r3
 1924              	.LVL371:
 1925              	.LBE377:
 1926              	.LBE376:
 715:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1927              		.loc 1 715 0
 1928 0118 0F93     		str	r3, [sp, #60]
 1929              	.LVL372:
 717:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1930              		.loc 1 717 0
 1931 011a D8F81030 		ldr	r3, [r8, #16]
 1932              	.LVL373:
 1933              	.LBB378:
 1934              	.LBB379:
 1935              		.loc 2 498 0
 1936 011e 1BBA     		rev	r3, r3
 1937              	.LVL374:
 1938              	.LBE379:
 1939              	.LBE378:
 717:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1940              		.loc 1 717 0
 1941 0120 1093     		str	r3, [sp, #64]
 1942              	.LVL375:
 719:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 1943              		.loc 1 719 0
ARM GAS  /tmp/cc1B5Puw.s 			page 65


 1944 0122 D8F81430 		ldr	r3, [r8, #20]
 1945              	.LVL376:
 1946              	.LBB380:
 1947              	.LBB381:
 1948              		.loc 2 498 0
 1949 0126 1BBA     		rev	r3, r3
 1950              	.LVL377:
 1951              	.LBE381:
 1952              	.LBE380:
 719:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 1953              		.loc 1 719 0
 1954 0128 1193     		str	r3, [sp, #68]
 720:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 256:
 1955              		.loc 1 720 0
 1956 012a 89E7     		b	.L65
 1957              	.LVL378:
 1958              	.L67:
 722:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 1959              		.loc 1 722 0
 1960 012c 4FF40073 		mov	r3, #512
 1961 0130 1593     		str	r3, [sp, #84]
 723:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1962              		.loc 1 723 0
 1963 0132 D8F80030 		ldr	r3, [r8]
 1964              	.LVL379:
 1965              	.LBB382:
 1966              	.LBB383:
 1967              		.loc 2 498 0
 1968 0136 1BBA     		rev	r3, r3
 1969              	.LVL380:
 1970              	.LBE383:
 1971              	.LBE382:
 723:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1972              		.loc 1 723 0
 1973 0138 0A93     		str	r3, [sp, #40]
 1974              	.LVL381:
 725:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1975              		.loc 1 725 0
 1976 013a D8F80430 		ldr	r3, [r8, #4]
 1977              	.LVL382:
 1978              	.LBB384:
 1979              	.LBB385:
 1980              		.loc 2 498 0
 1981 013e 1BBA     		rev	r3, r3
 1982              	.LVL383:
 1983              	.LBE385:
 1984              	.LBE384:
 725:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1985              		.loc 1 725 0
 1986 0140 0B93     		str	r3, [sp, #44]
 1987              	.LVL384:
 727:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1988              		.loc 1 727 0
 1989 0142 D8F80830 		ldr	r3, [r8, #8]
 1990              	.LVL385:
 1991              	.LBB386:
 1992              	.LBB387:
ARM GAS  /tmp/cc1B5Puw.s 			page 66


 1993              		.loc 2 498 0
 1994 0146 1BBA     		rev	r3, r3
 1995              	.LVL386:
 1996              	.LBE387:
 1997              	.LBE386:
 727:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 1998              		.loc 1 727 0
 1999 0148 0C93     		str	r3, [sp, #48]
 2000              	.LVL387:
 729:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 2001              		.loc 1 729 0
 2002 014a D8F80C30 		ldr	r3, [r8, #12]
 2003              	.LVL388:
 2004              	.LBB388:
 2005              	.LBB389:
 2006              		.loc 2 498 0
 2007 014e 1BBA     		rev	r3, r3
 2008              	.LVL389:
 2009              	.LBE389:
 2010              	.LBE388:
 729:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 2011              		.loc 1 729 0
 2012 0150 0D93     		str	r3, [sp, #52]
 2013              	.LVL390:
 731:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 2014              		.loc 1 731 0
 2015 0152 D8F81030 		ldr	r3, [r8, #16]
 2016              	.LVL391:
 2017              	.LBB390:
 2018              	.LBB391:
 2019              		.loc 2 498 0
 2020 0156 1BBA     		rev	r3, r3
 2021              	.LVL392:
 2022              	.LBE391:
 2023              	.LBE390:
 731:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 2024              		.loc 1 731 0
 2025 0158 0E93     		str	r3, [sp, #56]
 2026              	.LVL393:
 733:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 2027              		.loc 1 733 0
 2028 015a D8F81430 		ldr	r3, [r8, #20]
 2029              	.LVL394:
 2030              	.LBB392:
 2031              	.LBB393:
 2032              		.loc 2 498 0
 2033 015e 1BBA     		rev	r3, r3
 2034              	.LVL395:
 2035              	.LBE393:
 2036              	.LBE392:
 733:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 2037              		.loc 1 733 0
 2038 0160 0F93     		str	r3, [sp, #60]
 2039              	.LVL396:
 735:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 2040              		.loc 1 735 0
 2041 0162 D8F81830 		ldr	r3, [r8, #24]
ARM GAS  /tmp/cc1B5Puw.s 			page 67


 2042              	.LVL397:
 2043              	.LBB394:
 2044              	.LBB395:
 2045              		.loc 2 498 0
 2046 0166 1BBA     		rev	r3, r3
 2047              	.LVL398:
 2048              	.LBE395:
 2049              	.LBE394:
 735:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 2050              		.loc 1 735 0
 2051 0168 1093     		str	r3, [sp, #64]
 2052              	.LVL399:
 737:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 2053              		.loc 1 737 0
 2054 016a D8F81C30 		ldr	r3, [r8, #28]
 2055              	.LVL400:
 2056              	.LBB396:
 2057              	.LBB397:
 2058              		.loc 2 498 0
 2059 016e 1BBA     		rev	r3, r3
 2060              	.LVL401:
 2061              	.LBE397:
 2062              	.LBE396:
 737:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 2063              		.loc 1 737 0
 2064 0170 1193     		str	r3, [sp, #68]
 738:FWLIB/src/stm32f4xx_cryp_aes.c ****     default:
 2065              		.loc 1 738 0
 2066 0172 65E7     		b	.L65
 2067              	.LVL402:
 2068              	.L116:
 756:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 2069              		.loc 1 756 0
 2070 0174 FFF7FEFF 		bl	CRYP_FIFOFlush
 2071              	.LVL403:
 759:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 2072              		.loc 1 759 0
 2073 0178 0AA8     		add	r0, sp, #40
 2074 017a FFF7FEFF 		bl	CRYP_KeyInit
 2075              	.LVL404:
 762:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 2076              		.loc 1 762 0
 2077 017e 06A8     		add	r0, sp, #24
 2078 0180 FFF7FEFF 		bl	CRYP_IVInit
 2079              	.LVL405:
 765:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_GCM;
 2080              		.loc 1 765 0
 2081 0184 4FF00008 		mov	r8, #0
 2082              	.LVL406:
 2083 0188 CDF84880 		str	r8, [sp, #72]
 766:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 2084              		.loc 1 766 0
 2085 018c 4FF40023 		mov	r3, #524288
 2086 0190 1393     		str	r3, [sp, #76]
 767:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_Init(&AES_CRYP_InitStructure);
 2087              		.loc 1 767 0
 2088 0192 8023     		movs	r3, #128
ARM GAS  /tmp/cc1B5Puw.s 			page 68


 2089 0194 1493     		str	r3, [sp, #80]
 768:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 2090              		.loc 1 768 0
 2091 0196 12A8     		add	r0, sp, #72
 2092 0198 FFF7FEFF 		bl	CRYP_Init
 2093              	.LVL407:
 772:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 2094              		.loc 1 772 0
 2095 019c 4046     		mov	r0, r8
 2096 019e FFF7FEFF 		bl	CRYP_PhaseConfig
 2097              	.LVL408:
 775:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 2098              		.loc 1 775 0
 2099 01a2 0120     		movs	r0, #1
 2100 01a4 FFF7FEFF 		bl	CRYP_Cmd
 2101              	.LVL409:
 2102              	.L70:
 778:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 2103              		.loc 1 778 0 discriminator 1
 2104 01a8 FFF7FEFF 		bl	CRYP_GetCmdStatus
 2105              	.LVL410:
 2106 01ac 0128     		cmp	r0, #1
 2107 01ae FBD0     		beq	.L70
 783:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 2108              		.loc 1 783 0
 2109 01b0 BAF1000F 		cmp	r10, #0
 2110 01b4 12D1     		bne	.L118
 681:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 2111              		.loc 1 681 0
 2112 01b6 0125     		movs	r5, #1
 2113              	.LVL411:
 2114              	.L71:
 831:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 2115              		.loc 1 831 0
 2116 01b8 002F     		cmp	r7, #0
 2117 01ba 00F08580 		beq	.L77
 834:FWLIB/src/stm32f4xx_cryp_aes.c ****       
 2118              		.loc 1 834 0
 2119 01be 4FF40030 		mov	r0, #131072
 2120 01c2 FFF7FEFF 		bl	CRYP_PhaseConfig
 2121              	.LVL412:
 837:FWLIB/src/stm32f4xx_cryp_aes.c ****       
 2122              		.loc 1 837 0
 2123 01c6 0120     		movs	r0, #1
 2124 01c8 FFF7FEFF 		bl	CRYP_Cmd
 2125              	.LVL413:
 839:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 2126              		.loc 1 839 0
 2127 01cc FFF7FEFF 		bl	CRYP_GetCmdStatus
 2128              	.LVL414:
 2129 01d0 0028     		cmp	r0, #0
 2130 01d2 00F05781 		beq	.L103
 2131 01d6 4FF00008 		mov	r8, #0
 2132              	.LVL415:
 2133 01da 4EE0     		b	.L78
 2134              	.LVL416:
 2135              	.L118:
ARM GAS  /tmp/cc1B5Puw.s 			page 69


 786:FWLIB/src/stm32f4xx_cryp_aes.c ****       
 2136              		.loc 1 786 0
 2137 01dc 4FF48030 		mov	r0, #65536
 2138 01e0 FFF7FEFF 		bl	CRYP_PhaseConfig
 2139              	.LVL417:
 789:FWLIB/src/stm32f4xx_cryp_aes.c ****       
 2140              		.loc 1 789 0
 2141 01e4 0120     		movs	r0, #1
 2142 01e6 FFF7FEFF 		bl	CRYP_Cmd
 2143              	.LVL418:
 791:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 2144              		.loc 1 791 0
 2145 01ea FFF7FEFF 		bl	CRYP_GetCmdStatus
 2146              	.LVL419:
 2147 01ee 0028     		cmp	r0, #0
 2148 01f0 00F04681 		beq	.L101
 2149 01f4 4FF00008 		mov	r8, #0
 2150 01f8 13E0     		b	.L73
 2151              	.LVL420:
 2152              	.L74:
 801:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
 2153              		.loc 1 801 0 discriminator 1
 2154 01fa 0120     		movs	r0, #1
 2155 01fc FFF7FEFF 		bl	CRYP_GetFlagStatus
 2156              	.LVL421:
 2157 0200 0028     		cmp	r0, #0
 2158 0202 FAD0     		beq	.L74
 806:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
 2159              		.loc 1 806 0 discriminator 2
 2160 0204 2868     		ldr	r0, [r5]
 2161 0206 FFF7FEFF 		bl	CRYP_DataIn
 2162              	.LVL422:
 808:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
 2163              		.loc 1 808 0 discriminator 2
 2164 020a 6868     		ldr	r0, [r5, #4]
 2165 020c FFF7FEFF 		bl	CRYP_DataIn
 2166              	.LVL423:
 810:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
 2167              		.loc 1 810 0 discriminator 2
 2168 0210 A868     		ldr	r0, [r5, #8]
 2169 0212 FFF7FEFF 		bl	CRYP_DataIn
 2170              	.LVL424:
 812:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
 2171              		.loc 1 812 0 discriminator 2
 2172 0216 E868     		ldr	r0, [r5, #12]
 2173 0218 FFF7FEFF 		bl	CRYP_DataIn
 2174              	.LVL425:
 813:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 2175              		.loc 1 813 0 discriminator 2
 2176 021c 1035     		adds	r5, r5, #16
 2177              	.LVL426:
 798:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 2178              		.loc 1 798 0 discriminator 2
 2179 021e 08F11008 		add	r8, r8, #16
 2180              	.LVL427:
 2181              	.L73:
 798:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
ARM GAS  /tmp/cc1B5Puw.s 			page 70


 2182              		.loc 1 798 0 is_stmt 0 discriminator 1
 2183 0222 D045     		cmp	r8, r10
 2184 0224 E9D3     		bcc	.L74
 817:FWLIB/src/stm32f4xx_cryp_aes.c ****       do
 2185              		.loc 1 817 0 is_stmt 1
 2186 0226 0023     		movs	r3, #0
 2187 0228 0593     		str	r3, [sp, #20]
 2188              	.LVL428:
 2189              	.L76:
 820:FWLIB/src/stm32f4xx_cryp_aes.c ****         counter++;
 2190              		.loc 1 820 0 discriminator 2
 2191 022a 1020     		movs	r0, #16
 2192 022c FFF7FEFF 		bl	CRYP_GetFlagStatus
 2193              	.LVL429:
 2194 0230 0246     		mov	r2, r0
 2195              	.LVL430:
 821:FWLIB/src/stm32f4xx_cryp_aes.c ****       }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 2196              		.loc 1 821 0 discriminator 2
 2197 0232 059B     		ldr	r3, [sp, #20]
 2198 0234 0133     		adds	r3, r3, #1
 2199 0236 0593     		str	r3, [sp, #20]
 822:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 2200              		.loc 1 822 0 discriminator 2
 2201 0238 059B     		ldr	r3, [sp, #20]
 2202 023a B3F5803F 		cmp	r3, #65536
 2203 023e 01D0     		beq	.L75
 822:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 2204              		.loc 1 822 0 is_stmt 0 discriminator 1
 2205 0240 0028     		cmp	r0, #0
 2206 0242 F2D1     		bne	.L76
 2207              	.L75:
 824:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 2208              		.loc 1 824 0 is_stmt 1
 2209 0244 0AB9     		cbnz	r2, .L102
 681:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 2210              		.loc 1 681 0
 2211 0246 0125     		movs	r5, #1
 2212              	.LVL431:
 2213 0248 B6E7     		b	.L71
 2214              	.LVL432:
 2215              	.L102:
 826:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 2216              		.loc 1 826 0
 2217 024a 0025     		movs	r5, #0
 2218              	.LVL433:
 2219 024c B4E7     		b	.L71
 2220              	.LVL434:
 2221              	.L80:
 870:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
 2222              		.loc 1 870 0
 2223 024e 002A     		cmp	r2, #0
 2224 0250 38D1     		bne	.L104
 2225              	.LVL435:
 2226              	.L83:
 877:FWLIB/src/stm32f4xx_cryp_aes.c ****           {
 2227              		.loc 1 877 0 discriminator 1
 2228 0252 0420     		movs	r0, #4
ARM GAS  /tmp/cc1B5Puw.s 			page 71


 2229 0254 FFF7FEFF 		bl	CRYP_GetFlagStatus
 2230              	.LVL436:
 2231 0258 0028     		cmp	r0, #0
 2232 025a FAD0     		beq	.L83
 882:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
 2233              		.loc 1 882 0
 2234 025c FFF7FEFF 		bl	CRYP_DataOut
 2235              	.LVL437:
 2236 0260 3060     		str	r0, [r6]
 2237              	.LVL438:
 884:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
 2238              		.loc 1 884 0
 2239 0262 FFF7FEFF 		bl	CRYP_DataOut
 2240              	.LVL439:
 2241 0266 7060     		str	r0, [r6, #4]
 2242              	.LVL440:
 886:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
 2243              		.loc 1 886 0
 2244 0268 FFF7FEFF 		bl	CRYP_DataOut
 2245              	.LVL441:
 2246 026c B060     		str	r0, [r6, #8]
 2247              	.LVL442:
 888:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
 2248              		.loc 1 888 0
 2249 026e FFF7FEFF 		bl	CRYP_DataOut
 2250              	.LVL443:
 2251 0272 F060     		str	r0, [r6, #12]
 889:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
 2252              		.loc 1 889 0
 2253 0274 1036     		adds	r6, r6, #16
 2254              	.LVL444:
 2255              	.L82:
 846:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 2256              		.loc 1 846 0 discriminator 2
 2257 0276 08F11008 		add	r8, r8, #16
 2258              	.LVL445:
 2259              	.L78:
 846:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 2260              		.loc 1 846 0 is_stmt 0 discriminator 1
 2261 027a B845     		cmp	r8, r7
 2262 027c 24D2     		bcs	.L77
 846:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 2263              		.loc 1 846 0 discriminator 3
 2264 027e 1DB3     		cbz	r5, .L77
 2265              	.L79:
 849:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
 2266              		.loc 1 849 0 is_stmt 1 discriminator 1
 2267 0280 0120     		movs	r0, #1
 2268 0282 FFF7FEFF 		bl	CRYP_GetFlagStatus
 2269              	.LVL446:
 2270 0286 0028     		cmp	r0, #0
 2271 0288 FAD0     		beq	.L79
 853:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
 2272              		.loc 1 853 0
 2273 028a 2068     		ldr	r0, [r4]
 2274 028c FFF7FEFF 		bl	CRYP_DataIn
 2275              	.LVL447:
ARM GAS  /tmp/cc1B5Puw.s 			page 72


 855:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
 2276              		.loc 1 855 0
 2277 0290 6068     		ldr	r0, [r4, #4]
 2278 0292 FFF7FEFF 		bl	CRYP_DataIn
 2279              	.LVL448:
 857:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
 2280              		.loc 1 857 0
 2281 0296 A068     		ldr	r0, [r4, #8]
 2282 0298 FFF7FEFF 		bl	CRYP_DataIn
 2283              	.LVL449:
 859:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
 2284              		.loc 1 859 0
 2285 029c E068     		ldr	r0, [r4, #12]
 2286 029e FFF7FEFF 		bl	CRYP_DataIn
 2287              	.LVL450:
 860:FWLIB/src/stm32f4xx_cryp_aes.c ****         
 2288              		.loc 1 860 0
 2289 02a2 1034     		adds	r4, r4, #16
 2290              	.LVL451:
 863:FWLIB/src/stm32f4xx_cryp_aes.c ****         do
 2291              		.loc 1 863 0
 2292 02a4 0023     		movs	r3, #0
 2293              	.LVL452:
 2294 02a6 0593     		str	r3, [sp, #20]
 2295              	.LVL453:
 2296              	.L81:
 866:FWLIB/src/stm32f4xx_cryp_aes.c ****           counter++;
 2297              		.loc 1 866 0 discriminator 2
 2298 02a8 1020     		movs	r0, #16
 2299 02aa FFF7FEFF 		bl	CRYP_GetFlagStatus
 2300              	.LVL454:
 2301 02ae 0246     		mov	r2, r0
 2302              	.LVL455:
 867:FWLIB/src/stm32f4xx_cryp_aes.c ****         }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 2303              		.loc 1 867 0 discriminator 2
 2304 02b0 059B     		ldr	r3, [sp, #20]
 2305 02b2 0133     		adds	r3, r3, #1
 2306 02b4 0593     		str	r3, [sp, #20]
 868:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 2307              		.loc 1 868 0 discriminator 2
 2308 02b6 059B     		ldr	r3, [sp, #20]
 2309 02b8 B3F5803F 		cmp	r3, #65536
 2310 02bc C7D0     		beq	.L80
 868:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 2311              		.loc 1 868 0 is_stmt 0 discriminator 1
 2312 02be 0028     		cmp	r0, #0
 2313 02c0 F2D1     		bne	.L81
 2314 02c2 C4E7     		b	.L80
 2315              	.L104:
 872:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
 2316              		.loc 1 872 0 is_stmt 1
 2317 02c4 0025     		movs	r5, #0
 2318              	.LVL456:
 2319 02c6 D6E7     		b	.L82
 2320              	.LVL457:
 2321              	.L77:
 896:FWLIB/src/stm32f4xx_cryp_aes.c ****     
ARM GAS  /tmp/cc1B5Puw.s 			page 73


 2322              		.loc 1 896 0
 2323 02c8 4FF44030 		mov	r0, #196608
 2324 02cc FFF7FEFF 		bl	CRYP_PhaseConfig
 2325              	.LVL458:
 899:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 2326              		.loc 1 899 0
 2327 02d0 0120     		movs	r0, #1
 2328 02d2 FFF7FEFF 		bl	CRYP_Cmd
 2329              	.LVL459:
 901:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 2330              		.loc 1 901 0
 2331 02d6 FFF7FEFF 		bl	CRYP_GetCmdStatus
 2332              	.LVL460:
 2333 02da 08B9     		cbnz	r0, .L119
 905:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 2334              		.loc 1 905 0
 2335 02dc 0025     		movs	r5, #0
 2336              	.LVL461:
 2337 02de A4E0     		b	.L72
 2338              	.LVL462:
 2339              	.L119:
 909:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(__REV(headerlength));
 2340              		.loc 1 909 0
 2341 02e0 0020     		movs	r0, #0
 2342              	.LVL463:
 2343 02e2 FFF7FEFF 		bl	CRYP_DataIn
 2344              	.LVL464:
 910:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(__REV(inputlength>>32));
 2345              		.loc 1 910 0
 2346 02e6 029B     		ldr	r3, [sp, #8]
 2347 02e8 18BA     		rev	r0, r3
 2348 02ea FFF7FEFF 		bl	CRYP_DataIn
 2349              	.LVL465:
 911:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(__REV(inputlength));
 2350              		.loc 1 911 0
 2351 02ee 0020     		movs	r0, #0
 2352              	.LVL466:
 2353 02f0 FFF7FEFF 		bl	CRYP_DataIn
 2354              	.LVL467:
 912:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Wait until the OFNE flag is reset */
 2355              		.loc 1 912 0
 2356 02f4 039B     		ldr	r3, [sp, #12]
 2357 02f6 18BA     		rev	r0, r3
 2358 02f8 FFF7FEFF 		bl	CRYP_DataIn
 2359              	.LVL468:
 2360              	.L84:
 914:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 2361              		.loc 1 914 0 discriminator 1
 2362 02fc 0420     		movs	r0, #4
 2363 02fe FFF7FEFF 		bl	CRYP_GetFlagStatus
 2364              	.LVL469:
 2365 0302 0028     		cmp	r0, #0
 2366 0304 FAD0     		beq	.L84
 920:FWLIB/src/stm32f4xx_cryp_aes.c ****     tagaddr+=4;
 2367              		.loc 1 920 0
 2368 0306 FFF7FEFF 		bl	CRYP_DataOut
 2369              	.LVL470:
ARM GAS  /tmp/cc1B5Puw.s 			page 74


 2370 030a 259B     		ldr	r3, [sp, #148]
 2371 030c 1860     		str	r0, [r3]
 2372              	.LVL471:
 922:FWLIB/src/stm32f4xx_cryp_aes.c ****     tagaddr+=4;
 2373              		.loc 1 922 0
 2374 030e FFF7FEFF 		bl	CRYP_DataOut
 2375              	.LVL472:
 2376 0312 259B     		ldr	r3, [sp, #148]
 2377 0314 5860     		str	r0, [r3, #4]
 2378              	.LVL473:
 924:FWLIB/src/stm32f4xx_cryp_aes.c ****     tagaddr+=4;
 2379              		.loc 1 924 0
 2380 0316 FFF7FEFF 		bl	CRYP_DataOut
 2381              	.LVL474:
 2382 031a 259B     		ldr	r3, [sp, #148]
 2383 031c 9860     		str	r0, [r3, #8]
 2384              	.LVL475:
 926:FWLIB/src/stm32f4xx_cryp_aes.c ****     tagaddr+=4;
 2385              		.loc 1 926 0
 2386 031e FFF7FEFF 		bl	CRYP_DataOut
 2387              	.LVL476:
 2388 0322 259B     		ldr	r3, [sp, #148]
 2389 0324 D860     		str	r0, [r3, #12]
 2390              	.LVL477:
 2391 0326 A7E0     		b	.L85
 2392              	.LVL478:
 2393              	.L117:
 963:FWLIB/src/stm32f4xx_cryp_aes.c ****       
 2394              		.loc 1 963 0
 2395 0328 4FF48030 		mov	r0, #65536
 2396 032c FFF7FEFF 		bl	CRYP_PhaseConfig
 2397              	.LVL479:
 966:FWLIB/src/stm32f4xx_cryp_aes.c ****       
 2398              		.loc 1 966 0
 2399 0330 0120     		movs	r0, #1
 2400 0332 FFF7FEFF 		bl	CRYP_Cmd
 2401              	.LVL480:
 968:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 2402              		.loc 1 968 0
 2403 0336 FFF7FEFF 		bl	CRYP_GetCmdStatus
 2404              	.LVL481:
 2405 033a 0028     		cmp	r0, #0
 2406 033c 00F0A480 		beq	.L107
 2407 0340 4FF00008 		mov	r8, #0
 2408              	.LVL482:
 2409 0344 13E0     		b	.L88
 2410              	.LVL483:
 2411              	.L89:
 978:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
 2412              		.loc 1 978 0 discriminator 1
 2413 0346 0120     		movs	r0, #1
 2414 0348 FFF7FEFF 		bl	CRYP_GetFlagStatus
 2415              	.LVL484:
 2416 034c 0028     		cmp	r0, #0
 2417 034e FAD0     		beq	.L89
 983:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
 2418              		.loc 1 983 0 discriminator 2
ARM GAS  /tmp/cc1B5Puw.s 			page 75


 2419 0350 2868     		ldr	r0, [r5]
 2420 0352 FFF7FEFF 		bl	CRYP_DataIn
 2421              	.LVL485:
 985:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
 2422              		.loc 1 985 0 discriminator 2
 2423 0356 6868     		ldr	r0, [r5, #4]
 2424 0358 FFF7FEFF 		bl	CRYP_DataIn
 2425              	.LVL486:
 987:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
 2426              		.loc 1 987 0 discriminator 2
 2427 035c A868     		ldr	r0, [r5, #8]
 2428 035e FFF7FEFF 		bl	CRYP_DataIn
 2429              	.LVL487:
 989:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
 2430              		.loc 1 989 0 discriminator 2
 2431 0362 E868     		ldr	r0, [r5, #12]
 2432 0364 FFF7FEFF 		bl	CRYP_DataIn
 2433              	.LVL488:
 990:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 2434              		.loc 1 990 0 discriminator 2
 2435 0368 1035     		adds	r5, r5, #16
 2436              	.LVL489:
 975:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 2437              		.loc 1 975 0 discriminator 2
 2438 036a 08F11008 		add	r8, r8, #16
 2439              	.LVL490:
 2440              	.L88:
 975:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 2441              		.loc 1 975 0 is_stmt 0 discriminator 1
 2442 036e D045     		cmp	r8, r10
 2443 0370 E9D3     		bcc	.L89
 994:FWLIB/src/stm32f4xx_cryp_aes.c ****       do
 2444              		.loc 1 994 0 is_stmt 1
 2445 0372 0023     		movs	r3, #0
 2446 0374 0593     		str	r3, [sp, #20]
 2447              	.LVL491:
 2448              	.L91:
 997:FWLIB/src/stm32f4xx_cryp_aes.c ****         counter++;
 2449              		.loc 1 997 0 discriminator 2
 2450 0376 1020     		movs	r0, #16
 2451 0378 FFF7FEFF 		bl	CRYP_GetFlagStatus
 2452              	.LVL492:
 2453 037c 0246     		mov	r2, r0
 2454              	.LVL493:
 998:FWLIB/src/stm32f4xx_cryp_aes.c ****       }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 2455              		.loc 1 998 0 discriminator 2
 2456 037e 059B     		ldr	r3, [sp, #20]
 2457 0380 0133     		adds	r3, r3, #1
 2458 0382 0593     		str	r3, [sp, #20]
 999:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 2459              		.loc 1 999 0 discriminator 2
 2460 0384 059B     		ldr	r3, [sp, #20]
 2461 0386 B3F5803F 		cmp	r3, #65536
 2462 038a 01D0     		beq	.L90
 999:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 2463              		.loc 1 999 0 is_stmt 0 discriminator 1
 2464 038c 0028     		cmp	r0, #0
ARM GAS  /tmp/cc1B5Puw.s 			page 76


 2465 038e F2D1     		bne	.L91
 2466              	.L90:
1001:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 2467              		.loc 1 1001 0 is_stmt 1
 2468 0390 0AB9     		cbnz	r2, .L108
 681:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 2469              		.loc 1 681 0
 2470 0392 0125     		movs	r5, #1
 2471              	.LVL494:
 2472 0394 89E6     		b	.L87
 2473              	.LVL495:
 2474              	.L108:
1003:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 2475              		.loc 1 1003 0
 2476 0396 0025     		movs	r5, #0
 2477              	.LVL496:
 2478 0398 87E6     		b	.L87
 2479              	.LVL497:
 2480              	.L95:
1017:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
1018:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* The CRYP peripheral clock is not enabled or the device doesn't embed 
1019:FWLIB/src/stm32f4xx_cryp_aes.c ****            the CRYP peripheral (please check the device sales type. */
1020:FWLIB/src/stm32f4xx_cryp_aes.c ****         return(ERROR);
1021:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
1022:FWLIB/src/stm32f4xx_cryp_aes.c ****       
1023:FWLIB/src/stm32f4xx_cryp_aes.c ****       for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
1024:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
1025:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Wait until the IFEM flag is reset */
1026:FWLIB/src/stm32f4xx_cryp_aes.c ****         while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
1027:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
1028:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
1029:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Write the Input block in the IN FIFO */
1030:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(inputaddr));
1031:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
1032:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(inputaddr));
1033:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
1034:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(inputaddr));
1035:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
1036:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(inputaddr));
1037:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
1038:FWLIB/src/stm32f4xx_cryp_aes.c ****         
1039:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Wait until the complete message has been processed */
1040:FWLIB/src/stm32f4xx_cryp_aes.c ****         counter = 0;
1041:FWLIB/src/stm32f4xx_cryp_aes.c ****         do
1042:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
1043:FWLIB/src/stm32f4xx_cryp_aes.c ****           busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
1044:FWLIB/src/stm32f4xx_cryp_aes.c ****           counter++;
1045:FWLIB/src/stm32f4xx_cryp_aes.c ****         }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
1046:FWLIB/src/stm32f4xx_cryp_aes.c **** 
1047:FWLIB/src/stm32f4xx_cryp_aes.c ****         if (busystatus != RESET)
 2481              		.loc 1 1047 0
 2482 039a 002A     		cmp	r2, #0
 2483 039c 38D1     		bne	.L110
 2484              	.LVL498:
 2485              	.L98:
1048:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
1049:FWLIB/src/stm32f4xx_cryp_aes.c ****           status = ERROR;
ARM GAS  /tmp/cc1B5Puw.s 			page 77


1050:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
1051:FWLIB/src/stm32f4xx_cryp_aes.c ****         else
1052:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
1053:FWLIB/src/stm32f4xx_cryp_aes.c ****           /* Wait until the OFNE flag is reset */
1054:FWLIB/src/stm32f4xx_cryp_aes.c ****           while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 2486              		.loc 1 1054 0 discriminator 1
 2487 039e 0420     		movs	r0, #4
 2488 03a0 FFF7FEFF 		bl	CRYP_GetFlagStatus
 2489              	.LVL499:
 2490 03a4 0028     		cmp	r0, #0
 2491 03a6 FAD0     		beq	.L98
1055:FWLIB/src/stm32f4xx_cryp_aes.c ****           {
1056:FWLIB/src/stm32f4xx_cryp_aes.c ****           }
1057:FWLIB/src/stm32f4xx_cryp_aes.c ****           
1058:FWLIB/src/stm32f4xx_cryp_aes.c ****           /* Read the Output block from the Output FIFO */
1059:FWLIB/src/stm32f4xx_cryp_aes.c ****           *(uint32_t*)(outputaddr) = CRYP_DataOut();
 2492              		.loc 1 1059 0
 2493 03a8 FFF7FEFF 		bl	CRYP_DataOut
 2494              	.LVL500:
 2495 03ac 3060     		str	r0, [r6]
 2496              	.LVL501:
1060:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
1061:FWLIB/src/stm32f4xx_cryp_aes.c ****           *(uint32_t*)(outputaddr) = CRYP_DataOut();
 2497              		.loc 1 1061 0
 2498 03ae FFF7FEFF 		bl	CRYP_DataOut
 2499              	.LVL502:
 2500 03b2 7060     		str	r0, [r6, #4]
 2501              	.LVL503:
1062:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
1063:FWLIB/src/stm32f4xx_cryp_aes.c ****           *(uint32_t*)(outputaddr) = CRYP_DataOut();
 2502              		.loc 1 1063 0
 2503 03b4 FFF7FEFF 		bl	CRYP_DataOut
 2504              	.LVL504:
 2505 03b8 B060     		str	r0, [r6, #8]
 2506              	.LVL505:
1064:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
1065:FWLIB/src/stm32f4xx_cryp_aes.c ****           *(uint32_t*)(outputaddr) = CRYP_DataOut();
 2507              		.loc 1 1065 0
 2508 03ba FFF7FEFF 		bl	CRYP_DataOut
 2509              	.LVL506:
 2510 03be F060     		str	r0, [r6, #12]
1066:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
 2511              		.loc 1 1066 0
 2512 03c0 1036     		adds	r6, r6, #16
 2513              	.LVL507:
 2514              	.L97:
1023:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 2515              		.loc 1 1023 0 discriminator 2
 2516 03c2 08F11008 		add	r8, r8, #16
 2517              	.LVL508:
 2518              	.L93:
1023:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 2519              		.loc 1 1023 0 is_stmt 0 discriminator 1
 2520 03c6 B845     		cmp	r8, r7
 2521 03c8 24D2     		bcs	.L92
1023:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 2522              		.loc 1 1023 0 discriminator 3
ARM GAS  /tmp/cc1B5Puw.s 			page 78


 2523 03ca 1DB3     		cbz	r5, .L92
 2524              	.L94:
1026:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
 2525              		.loc 1 1026 0 is_stmt 1 discriminator 1
 2526 03cc 0120     		movs	r0, #1
 2527 03ce FFF7FEFF 		bl	CRYP_GetFlagStatus
 2528              	.LVL509:
 2529 03d2 0028     		cmp	r0, #0
 2530 03d4 FAD0     		beq	.L94
1030:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
 2531              		.loc 1 1030 0
 2532 03d6 2068     		ldr	r0, [r4]
 2533 03d8 FFF7FEFF 		bl	CRYP_DataIn
 2534              	.LVL510:
1032:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
 2535              		.loc 1 1032 0
 2536 03dc 6068     		ldr	r0, [r4, #4]
 2537 03de FFF7FEFF 		bl	CRYP_DataIn
 2538              	.LVL511:
1034:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
 2539              		.loc 1 1034 0
 2540 03e2 A068     		ldr	r0, [r4, #8]
 2541 03e4 FFF7FEFF 		bl	CRYP_DataIn
 2542              	.LVL512:
1036:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
 2543              		.loc 1 1036 0
 2544 03e8 E068     		ldr	r0, [r4, #12]
 2545 03ea FFF7FEFF 		bl	CRYP_DataIn
 2546              	.LVL513:
1037:FWLIB/src/stm32f4xx_cryp_aes.c ****         
 2547              		.loc 1 1037 0
 2548 03ee 1034     		adds	r4, r4, #16
 2549              	.LVL514:
1040:FWLIB/src/stm32f4xx_cryp_aes.c ****         do
 2550              		.loc 1 1040 0
 2551 03f0 0023     		movs	r3, #0
 2552              	.LVL515:
 2553 03f2 0593     		str	r3, [sp, #20]
 2554              	.LVL516:
 2555              	.L96:
1043:FWLIB/src/stm32f4xx_cryp_aes.c ****           counter++;
 2556              		.loc 1 1043 0 discriminator 2
 2557 03f4 1020     		movs	r0, #16
 2558 03f6 FFF7FEFF 		bl	CRYP_GetFlagStatus
 2559              	.LVL517:
 2560 03fa 0246     		mov	r2, r0
 2561              	.LVL518:
1044:FWLIB/src/stm32f4xx_cryp_aes.c ****         }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 2562              		.loc 1 1044 0 discriminator 2
 2563 03fc 059B     		ldr	r3, [sp, #20]
 2564 03fe 0133     		adds	r3, r3, #1
 2565 0400 0593     		str	r3, [sp, #20]
1045:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 2566              		.loc 1 1045 0 discriminator 2
 2567 0402 059B     		ldr	r3, [sp, #20]
 2568 0404 B3F5803F 		cmp	r3, #65536
 2569 0408 C7D0     		beq	.L95
ARM GAS  /tmp/cc1B5Puw.s 			page 79


1045:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 2570              		.loc 1 1045 0 is_stmt 0 discriminator 1
 2571 040a 0028     		cmp	r0, #0
 2572 040c F2D1     		bne	.L96
 2573 040e C4E7     		b	.L95
 2574              	.L110:
1049:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
 2575              		.loc 1 1049 0 is_stmt 1
 2576 0410 0025     		movs	r5, #0
 2577              	.LVL519:
 2578 0412 D6E7     		b	.L97
 2579              	.LVL520:
 2580              	.L92:
1067:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
1068:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
1069:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
1070:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1071:FWLIB/src/stm32f4xx_cryp_aes.c ****     /***************************** final phase ********************************/
1072:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Select final phase */
1073:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_PhaseConfig(CRYP_Phase_Final);
 2581              		.loc 1 1073 0
 2582 0414 4FF44030 		mov	r0, #196608
 2583 0418 FFF7FEFF 		bl	CRYP_PhaseConfig
 2584              	.LVL521:
1074:FWLIB/src/stm32f4xx_cryp_aes.c **** 
1075:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Enable Crypto processor */
1076:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_Cmd(ENABLE);
 2585              		.loc 1 1076 0
 2586 041c 0120     		movs	r0, #1
 2587 041e FFF7FEFF 		bl	CRYP_Cmd
 2588              	.LVL522:
1077:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1078:FWLIB/src/stm32f4xx_cryp_aes.c ****     if(CRYP_GetCmdStatus() == DISABLE)
 2589              		.loc 1 1078 0
 2590 0422 FFF7FEFF 		bl	CRYP_GetCmdStatus
 2591              	.LVL523:
 2592 0426 20B9     		cbnz	r0, .L120
1079:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
1080:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* The CRYP peripheral clock is not enabled or the device doesn't embed 
1081:FWLIB/src/stm32f4xx_cryp_aes.c ****          the CRYP peripheral (please check the device sales type. */
1082:FWLIB/src/stm32f4xx_cryp_aes.c ****       return(ERROR);
 2593              		.loc 1 1082 0
 2594 0428 0025     		movs	r5, #0
 2595              	.LVL524:
 2596              	.L72:
1083:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
1084:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1085:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Write number of bits concatenated with header in the IN FIFO */
1086:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(__REV(headerlength>>32));
1087:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(__REV(headerlength));
1088:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(__REV(inputlength>>32));
1089:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(__REV(inputlength));
1090:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Wait until the OFNE flag is reset */
1091:FWLIB/src/stm32f4xx_cryp_aes.c ****     while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
1092:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
1093:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
1094:FWLIB/src/stm32f4xx_cryp_aes.c ****     
ARM GAS  /tmp/cc1B5Puw.s 			page 80


1095:FWLIB/src/stm32f4xx_cryp_aes.c ****     tagaddr = (uint32_t)AuthTAG;
1096:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Read the Auth TAG in the IN FIFO */
1097:FWLIB/src/stm32f4xx_cryp_aes.c ****     *(uint32_t*)(tagaddr) = CRYP_DataOut();
1098:FWLIB/src/stm32f4xx_cryp_aes.c ****     tagaddr+=4;
1099:FWLIB/src/stm32f4xx_cryp_aes.c ****     *(uint32_t*)(tagaddr) = CRYP_DataOut();
1100:FWLIB/src/stm32f4xx_cryp_aes.c ****     tagaddr+=4;
1101:FWLIB/src/stm32f4xx_cryp_aes.c ****     *(uint32_t*)(tagaddr) = CRYP_DataOut();
1102:FWLIB/src/stm32f4xx_cryp_aes.c ****     tagaddr+=4;
1103:FWLIB/src/stm32f4xx_cryp_aes.c ****     *(uint32_t*)(tagaddr) = CRYP_DataOut();
1104:FWLIB/src/stm32f4xx_cryp_aes.c ****     tagaddr+=4;
1105:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
1106:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Disable Crypto */
1107:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_Cmd(DISABLE);
1108:FWLIB/src/stm32f4xx_cryp_aes.c **** 
1109:FWLIB/src/stm32f4xx_cryp_aes.c ****   return status;
1110:FWLIB/src/stm32f4xx_cryp_aes.c **** }
 2597              		.loc 1 1110 0
 2598 042a 2846     		mov	r0, r5
 2599 042c 17B0     		add	sp, sp, #92
 2600              	.LCFI14:
 2601              		.cfi_remember_state
 2602              		.cfi_def_cfa_offset 36
 2603              		@ sp needed
 2604 042e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2605              	.LVL525:
 2606              	.L120:
 2607              	.LCFI15:
 2608              		.cfi_restore_state
1086:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(__REV(headerlength));
 2609              		.loc 1 1086 0
 2610 0432 0020     		movs	r0, #0
 2611              	.LVL526:
 2612 0434 FFF7FEFF 		bl	CRYP_DataIn
 2613              	.LVL527:
1087:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(__REV(inputlength>>32));
 2614              		.loc 1 1087 0
 2615 0438 029B     		ldr	r3, [sp, #8]
 2616 043a 18BA     		rev	r0, r3
 2617 043c FFF7FEFF 		bl	CRYP_DataIn
 2618              	.LVL528:
1088:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(__REV(inputlength));
 2619              		.loc 1 1088 0
 2620 0440 0020     		movs	r0, #0
 2621              	.LVL529:
 2622 0442 FFF7FEFF 		bl	CRYP_DataIn
 2623              	.LVL530:
1089:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Wait until the OFNE flag is reset */
 2624              		.loc 1 1089 0
 2625 0446 039B     		ldr	r3, [sp, #12]
 2626 0448 18BA     		rev	r0, r3
 2627 044a FFF7FEFF 		bl	CRYP_DataIn
 2628              	.LVL531:
 2629              	.L99:
1091:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 2630              		.loc 1 1091 0 discriminator 1
 2631 044e 0420     		movs	r0, #4
 2632 0450 FFF7FEFF 		bl	CRYP_GetFlagStatus
ARM GAS  /tmp/cc1B5Puw.s 			page 81


 2633              	.LVL532:
 2634 0454 0028     		cmp	r0, #0
 2635 0456 FAD0     		beq	.L99
1097:FWLIB/src/stm32f4xx_cryp_aes.c ****     tagaddr+=4;
 2636              		.loc 1 1097 0
 2637 0458 FFF7FEFF 		bl	CRYP_DataOut
 2638              	.LVL533:
 2639 045c 259B     		ldr	r3, [sp, #148]
 2640 045e 1860     		str	r0, [r3]
 2641              	.LVL534:
1099:FWLIB/src/stm32f4xx_cryp_aes.c ****     tagaddr+=4;
 2642              		.loc 1 1099 0
 2643 0460 FFF7FEFF 		bl	CRYP_DataOut
 2644              	.LVL535:
 2645 0464 259B     		ldr	r3, [sp, #148]
 2646 0466 5860     		str	r0, [r3, #4]
 2647              	.LVL536:
1101:FWLIB/src/stm32f4xx_cryp_aes.c ****     tagaddr+=4;
 2648              		.loc 1 1101 0
 2649 0468 FFF7FEFF 		bl	CRYP_DataOut
 2650              	.LVL537:
 2651 046c 259B     		ldr	r3, [sp, #148]
 2652 046e 9860     		str	r0, [r3, #8]
 2653              	.LVL538:
1103:FWLIB/src/stm32f4xx_cryp_aes.c ****     tagaddr+=4;
 2654              		.loc 1 1103 0
 2655 0470 FFF7FEFF 		bl	CRYP_DataOut
 2656              	.LVL539:
 2657 0474 259B     		ldr	r3, [sp, #148]
 2658 0476 D860     		str	r0, [r3, #12]
 2659              	.LVL540:
 2660              	.L85:
1107:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 2661              		.loc 1 1107 0
 2662 0478 0020     		movs	r0, #0
 2663              	.LVL541:
 2664 047a FFF7FEFF 		bl	CRYP_Cmd
 2665              	.LVL542:
1109:FWLIB/src/stm32f4xx_cryp_aes.c **** }
 2666              		.loc 1 1109 0
 2667 047e D4E7     		b	.L72
 2668              	.LVL543:
 2669              	.L101:
 795:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 2670              		.loc 1 795 0
 2671 0480 0025     		movs	r5, #0
 2672              	.LVL544:
 2673 0482 D2E7     		b	.L72
 2674              	.LVL545:
 2675              	.L103:
 843:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 2676              		.loc 1 843 0
 2677 0484 0025     		movs	r5, #0
 2678              	.LVL546:
 2679 0486 D0E7     		b	.L72
 2680              	.LVL547:
 2681              	.L107:
ARM GAS  /tmp/cc1B5Puw.s 			page 82


 972:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 2682              		.loc 1 972 0
 2683 0488 0025     		movs	r5, #0
 2684              	.LVL548:
 2685 048a CEE7     		b	.L72
 2686              	.LVL549:
 2687              	.L109:
1020:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 2688              		.loc 1 1020 0
 2689 048c 0025     		movs	r5, #0
 2690              	.LVL550:
 2691 048e CCE7     		b	.L72
 2692              		.cfi_endproc
 2693              	.LFE126:
 2695              		.section	.text.CRYP_AES_CCM,"ax",%progbits
 2696              		.align	1
 2697              		.global	CRYP_AES_CCM
 2698              		.syntax unified
 2699              		.thumb
 2700              		.thumb_func
 2701              		.fpu fpv4-sp-d16
 2703              	CRYP_AES_CCM:
 2704              	.LFB127:
1111:FWLIB/src/stm32f4xx_cryp_aes.c **** 
1112:FWLIB/src/stm32f4xx_cryp_aes.c **** /**
1113:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @brief  Encrypt and decrypt using AES in CCM Mode. The GCM and CCM modes
1114:FWLIB/src/stm32f4xx_cryp_aes.c ****   *         are available only on STM32F437x Devices.
1115:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Mode: encryption or decryption Mode.
1116:FWLIB/src/stm32f4xx_cryp_aes.c ****   *          This parameter can be one of the following values:
1117:FWLIB/src/stm32f4xx_cryp_aes.c ****   *            @arg MODE_ENCRYPT: Encryption
1118:FWLIB/src/stm32f4xx_cryp_aes.c ****   *            @arg MODE_DECRYPT: Decryption
1119:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Nonce: the nonce used for AES algorithm. It shall be unique for each processing.
1120:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Key: Key used for AES algorithm.
1121:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Keysize: length of the Key, must be a 128, 192 or 256.
1122:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Input: pointer to the Input buffer.
1123:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Ilength: length of the Input buffer in bytes, must be a multiple of 16.
1124:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Header: pointer to the header buffer.
1125:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Hlength: length of the header buffer in bytes.
1126:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  HBuffer: pointer to temporary buffer used to append the header
1127:FWLIB/src/stm32f4xx_cryp_aes.c ****   *         HBuffer size must be equal to Hlength + 21
1128:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  Output: pointer to the returned buffer.
1129:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  AuthTAG: pointer to the authentication TAG buffer.
1130:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @param  TAGSize: the size of the TAG (called also MAC).
1131:FWLIB/src/stm32f4xx_cryp_aes.c ****   * @retval An ErrorStatus enumeration value:
1132:FWLIB/src/stm32f4xx_cryp_aes.c ****   *          - SUCCESS: Operation done
1133:FWLIB/src/stm32f4xx_cryp_aes.c ****   *          - ERROR: Operation failed
1134:FWLIB/src/stm32f4xx_cryp_aes.c ****   */
1135:FWLIB/src/stm32f4xx_cryp_aes.c **** ErrorStatus CRYP_AES_CCM(uint8_t Mode, 
1136:FWLIB/src/stm32f4xx_cryp_aes.c ****                          uint8_t* Nonce, uint32_t NonceSize,
1137:FWLIB/src/stm32f4xx_cryp_aes.c ****                          uint8_t *Key, uint16_t Keysize,
1138:FWLIB/src/stm32f4xx_cryp_aes.c ****                          uint8_t *Input, uint32_t ILength,
1139:FWLIB/src/stm32f4xx_cryp_aes.c ****                          uint8_t *Header, uint32_t HLength, uint8_t *HBuffer,
1140:FWLIB/src/stm32f4xx_cryp_aes.c ****                          uint8_t *Output,
1141:FWLIB/src/stm32f4xx_cryp_aes.c ****                          uint8_t *AuthTAG, uint32_t TAGSize)
1142:FWLIB/src/stm32f4xx_cryp_aes.c **** {
 2705              		.loc 1 1142 0
 2706              		.cfi_startproc
ARM GAS  /tmp/cc1B5Puw.s 			page 83


 2707              		@ args = 36, pretend = 0, frame = 136
 2708              		@ frame_needed = 0, uses_anonymous_args = 0
 2709              	.LVL551:
 2710 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2711              	.LCFI16:
 2712              		.cfi_def_cfa_offset 36
 2713              		.cfi_offset 4, -36
 2714              		.cfi_offset 5, -32
 2715              		.cfi_offset 6, -28
 2716              		.cfi_offset 7, -24
 2717              		.cfi_offset 8, -20
 2718              		.cfi_offset 9, -16
 2719              		.cfi_offset 10, -12
 2720              		.cfi_offset 11, -8
 2721              		.cfi_offset 14, -4
 2722 0004 A3B0     		sub	sp, sp, #140
 2723              	.LCFI17:
 2724              		.cfi_def_cfa_offset 176
 2725 0006 0290     		str	r0, [sp, #8]
 2726 0008 9A46     		mov	r10, r3
 2727 000a BDF8B030 		ldrh	r3, [sp, #176]
 2728              	.LVL552:
 2729 000e 0393     		str	r3, [sp, #12]
 2730 0010 DDF8B890 		ldr	r9, [sp, #184]
 2731 0014 DDF8BCC0 		ldr	ip, [sp, #188]
 2732 0018 309D     		ldr	r5, [sp, #192]
 2733 001a DDF8C4E0 		ldr	lr, [sp, #196]
1143:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_InitTypeDef AES_CRYP_InitStructure;
1144:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
1145:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
1146:FWLIB/src/stm32f4xx_cryp_aes.c ****   __IO uint32_t counter = 0;
 2734              		.loc 1 1146 0
 2735 001e 0023     		movs	r3, #0
 2736 0020 1193     		str	r3, [sp, #68]
 2737              	.LVL553:
1147:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t busystatus = 0;
1148:FWLIB/src/stm32f4xx_cryp_aes.c ****   ErrorStatus status = SUCCESS;
1149:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t keyaddr    = (uint32_t)Key;
1150:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t inputaddr  = (uint32_t)Input;
 2738              		.loc 1 1150 0
 2739 0022 2D9C     		ldr	r4, [sp, #180]
 2740              	.LVL554:
1151:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t outputaddr = (uint32_t)Output;
 2741              		.loc 1 1151 0
 2742 0024 DDF8C880 		ldr	r8, [sp, #200]
 2743              	.LVL555:
1152:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t headeraddr = (uint32_t)Header;
 2744              		.loc 1 1152 0
 2745 0028 6646     		mov	r6, ip
 2746              	.LVL556:
1153:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t tagaddr = (uint32_t)AuthTAG;
 2747              		.loc 1 1153 0
 2748 002a DDF8CCB0 		ldr	fp, [sp, #204]
 2749              	.LVL557:
1154:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t headersize = HLength;
1155:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t loopcounter = 0;
1156:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t bufferidx = 0;
ARM GAS  /tmp/cc1B5Puw.s 			page 84


1157:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint8_t blockb0[16] = {0};/* Block B0 */
 2750              		.loc 1 1157 0
 2751 002e 0DA8     		add	r0, sp, #52
 2752              	.LVL558:
 2753 0030 0D93     		str	r3, [sp, #52]
 2754 0032 0E93     		str	r3, [sp, #56]
 2755 0034 0F93     		str	r3, [sp, #60]
 2756 0036 1093     		str	r3, [sp, #64]
1158:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint8_t ctr[16] = {0}; /* Counter */
 2757              		.loc 1 1158 0
 2758 0038 09AF     		add	r7, sp, #36
 2759 003a 0993     		str	r3, [sp, #36]
 2760 003c 7B60     		str	r3, [r7, #4]
 2761 003e BB60     		str	r3, [r7, #8]
 2762 0040 FB60     		str	r3, [r7, #12]
1159:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t temptag[4] = {0}; /* temporary TAG (MAC) */
 2763              		.loc 1 1159 0
 2764 0042 0593     		str	r3, [sp, #20]
 2765 0044 0693     		str	r3, [sp, #24]
 2766 0046 0793     		str	r3, [sp, #28]
 2767 0048 0893     		str	r3, [sp, #32]
 2768              	.LVL559:
1160:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t ctraddr = (uint32_t)ctr;
1161:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t b0addr = (uint32_t)blockb0;
 2769              		.loc 1 1161 0
 2770 004a 0190     		str	r0, [sp, #4]
 2771              	.LVL560:
1162:FWLIB/src/stm32f4xx_cryp_aes.c ****   
1163:FWLIB/src/stm32f4xx_cryp_aes.c ****   /************************ Formatting the header block ***********************/
1164:FWLIB/src/stm32f4xx_cryp_aes.c ****   if(headersize != 0)
 2772              		.loc 1 1164 0
 2773 004c 55B3     		cbz	r5, .L122
1165:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
1166:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Check that the associated data (or header) length is lower than 2^16 - 2^8 = 65536 - 256 = 6
1167:FWLIB/src/stm32f4xx_cryp_aes.c ****     if(headersize < 65280)
 2774              		.loc 1 1167 0
 2775 004e B5F57F4F 		cmp	r5, #65280
 2776 0052 09D2     		bcs	.L123
 2777              	.LVL561:
1168:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
1169:FWLIB/src/stm32f4xx_cryp_aes.c ****       HBuffer[bufferidx++] = (uint8_t) ((headersize >> 8) & 0xFF);
 2778              		.loc 1 1169 0
 2779 0054 C5F30723 		ubfx	r3, r5, #8, #8
 2780 0058 8EF80030 		strb	r3, [lr]
 2781              	.LVL562:
1170:FWLIB/src/stm32f4xx_cryp_aes.c ****       HBuffer[bufferidx++] = (uint8_t) ((headersize) & 0xFF);
 2782              		.loc 1 1170 0
 2783 005c 8EF80150 		strb	r5, [lr, #1]
1171:FWLIB/src/stm32f4xx_cryp_aes.c ****       headersize += 2;
 2784              		.loc 1 1171 0
 2785 0060 0235     		adds	r5, r5, #2
 2786              	.LVL563:
1170:FWLIB/src/stm32f4xx_cryp_aes.c ****       HBuffer[bufferidx++] = (uint8_t) ((headersize) & 0xFF);
 2787              		.loc 1 1170 0
 2788 0062 0220     		movs	r0, #2
 2789              	.LVL564:
 2790              	.L124:
ARM GAS  /tmp/cc1B5Puw.s 			page 85


1172:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
1173:FWLIB/src/stm32f4xx_cryp_aes.c ****     else
1174:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
1175:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* header is encoded as 0xff || 0xfe || [headersize]32, i.e., six octets */
1176:FWLIB/src/stm32f4xx_cryp_aes.c ****       HBuffer[bufferidx++] = 0xFF;
1177:FWLIB/src/stm32f4xx_cryp_aes.c ****       HBuffer[bufferidx++] = 0xFE;
1178:FWLIB/src/stm32f4xx_cryp_aes.c ****       HBuffer[bufferidx++] = headersize & 0xff000000;
1179:FWLIB/src/stm32f4xx_cryp_aes.c ****       HBuffer[bufferidx++] = headersize & 0x00ff0000;
1180:FWLIB/src/stm32f4xx_cryp_aes.c ****       HBuffer[bufferidx++] = headersize & 0x0000ff00;
1181:FWLIB/src/stm32f4xx_cryp_aes.c ****       HBuffer[bufferidx++] = headersize & 0x000000ff;
1182:FWLIB/src/stm32f4xx_cryp_aes.c ****       headersize += 6;
1183:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
1184:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Copy the header buffer in internal buffer "HBuffer" */
1185:FWLIB/src/stm32f4xx_cryp_aes.c ****     for(loopcounter = 0; loopcounter < headersize; loopcounter++)
 2791              		.loc 1 1185 0
 2792 0064 0023     		movs	r3, #0
 2793 0066 17E0     		b	.L125
 2794              	.LVL565:
 2795              	.L123:
1176:FWLIB/src/stm32f4xx_cryp_aes.c ****       HBuffer[bufferidx++] = 0xFE;
 2796              		.loc 1 1176 0
 2797 0068 FF23     		movs	r3, #255
 2798 006a 8EF80030 		strb	r3, [lr]
 2799              	.LVL566:
1177:FWLIB/src/stm32f4xx_cryp_aes.c ****       HBuffer[bufferidx++] = headersize & 0xff000000;
 2800              		.loc 1 1177 0
 2801 006e FE23     		movs	r3, #254
 2802 0070 8EF80130 		strb	r3, [lr, #1]
 2803              	.LVL567:
1178:FWLIB/src/stm32f4xx_cryp_aes.c ****       HBuffer[bufferidx++] = headersize & 0x00ff0000;
 2804              		.loc 1 1178 0
 2805 0074 0023     		movs	r3, #0
 2806 0076 8EF80230 		strb	r3, [lr, #2]
 2807              	.LVL568:
1179:FWLIB/src/stm32f4xx_cryp_aes.c ****       HBuffer[bufferidx++] = headersize & 0x0000ff00;
 2808              		.loc 1 1179 0
 2809 007a 8EF80330 		strb	r3, [lr, #3]
 2810              	.LVL569:
1180:FWLIB/src/stm32f4xx_cryp_aes.c ****       HBuffer[bufferidx++] = headersize & 0x000000ff;
 2811              		.loc 1 1180 0
 2812 007e 8EF80430 		strb	r3, [lr, #4]
 2813              	.LVL570:
1181:FWLIB/src/stm32f4xx_cryp_aes.c ****       headersize += 6;
 2814              		.loc 1 1181 0
 2815 0082 8EF80550 		strb	r5, [lr, #5]
1182:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 2816              		.loc 1 1182 0
 2817 0086 0635     		adds	r5, r5, #6
 2818              	.LVL571:
1181:FWLIB/src/stm32f4xx_cryp_aes.c ****       headersize += 6;
 2819              		.loc 1 1181 0
 2820 0088 0620     		movs	r0, #6
 2821              	.LVL572:
 2822 008a EBE7     		b	.L124
 2823              	.LVL573:
 2824              	.L126:
1186:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
ARM GAS  /tmp/cc1B5Puw.s 			page 86


1187:FWLIB/src/stm32f4xx_cryp_aes.c ****       HBuffer[bufferidx++] = Header[loopcounter];
 2825              		.loc 1 1187 0 discriminator 3
 2826 008c 1CF80360 		ldrb	r6, [ip, r3]	@ zero_extendqisi2
 2827 0090 0EF80060 		strb	r6, [lr, r0]
1185:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 2828              		.loc 1 1185 0 discriminator 3
 2829 0094 0133     		adds	r3, r3, #1
 2830              	.LVL574:
 2831              		.loc 1 1187 0 discriminator 3
 2832 0096 0130     		adds	r0, r0, #1
 2833              	.LVL575:
 2834              	.L125:
1185:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 2835              		.loc 1 1185 0 discriminator 1
 2836 0098 9D42     		cmp	r5, r3
 2837 009a F7D8     		bhi	.L126
1188:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
1189:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Check if the header size is modulo 16 */
1190:FWLIB/src/stm32f4xx_cryp_aes.c ****     if ((headersize % 16) != 0)
 2838              		.loc 1 1190 0
 2839 009c 15F00F0F 		tst	r5, #15
 2840 00a0 24D1     		bne	.L174
 2841              	.LVL576:
 2842              	.L128:
1191:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
1192:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Padd the header buffer with 0s till the HBuffer length is modulo 16 */
1193:FWLIB/src/stm32f4xx_cryp_aes.c ****       for(loopcounter = headersize; loopcounter <= ((headersize/16) + 1) * 16; loopcounter++)
1194:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
1195:FWLIB/src/stm32f4xx_cryp_aes.c ****         HBuffer[loopcounter] = 0;
1196:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
1197:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Set the header size to modulo 16 */
1198:FWLIB/src/stm32f4xx_cryp_aes.c ****       headersize = ((headersize/16) + 1) * 16;
1199:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
1200:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* set the pointer headeraddr to HBuffer */
1201:FWLIB/src/stm32f4xx_cryp_aes.c ****     headeraddr = (uint32_t)HBuffer;
 2843              		.loc 1 1201 0
 2844 00a2 7646     		mov	r6, lr
 2845              	.LVL577:
 2846              	.L122:
1202:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
1203:FWLIB/src/stm32f4xx_cryp_aes.c ****   /************************* Formatting the block B0 **************************/
1204:FWLIB/src/stm32f4xx_cryp_aes.c ****   if(headersize != 0)
 2847              		.loc 1 1204 0
 2848 00a4 15B1     		cbz	r5, .L130
1205:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
1206:FWLIB/src/stm32f4xx_cryp_aes.c ****     blockb0[0] = 0x40;
 2849              		.loc 1 1206 0
 2850 00a6 4023     		movs	r3, #64
 2851 00a8 8DF83430 		strb	r3, [sp, #52]
 2852              	.L130:
1207:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
1208:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Flags byte */
1209:FWLIB/src/stm32f4xx_cryp_aes.c ****   blockb0[0] |= 0u | (((( (uint8_t) TAGSize - 2) / 2) & 0x07 ) << 3 ) | ( ( (uint8_t) (15 - NonceSi
 2853              		.loc 1 1209 0
 2854 00ac 9DF8D030 		ldrb	r3, [sp, #208]	@ zero_extendqisi2
 2855 00b0 023B     		subs	r3, r3, #2
 2856 00b2 03EBD373 		add	r3, r3, r3, lsr #31
ARM GAS  /tmp/cc1B5Puw.s 			page 87


 2857 00b6 5B10     		asrs	r3, r3, #1
 2858 00b8 DB00     		lsls	r3, r3, #3
 2859 00ba 03F03803 		and	r3, r3, #56
 2860 00be C2F10E00 		rsb	r0, r2, #14
 2861 00c2 00F00700 		and	r0, r0, #7
 2862 00c6 0343     		orrs	r3, r3, r0
 2863 00c8 9DF83400 		ldrb	r0, [sp, #52]	@ zero_extendqisi2
 2864 00cc 0343     		orrs	r3, r3, r0
 2865 00ce 8DF83430 		strb	r3, [sp, #52]
 2866              	.LVL578:
1210:FWLIB/src/stm32f4xx_cryp_aes.c ****   
1211:FWLIB/src/stm32f4xx_cryp_aes.c ****   for (loopcounter = 0; loopcounter < NonceSize; loopcounter++)
 2867              		.loc 1 1211 0
 2868 00d2 0023     		movs	r3, #0
 2869 00d4 14E0     		b	.L131
 2870              	.LVL579:
 2871              	.L129:
1195:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 2872              		.loc 1 1195 0 discriminator 3
 2873 00d6 0023     		movs	r3, #0
 2874 00d8 0EF80030 		strb	r3, [lr, r0]
1193:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 2875              		.loc 1 1193 0 discriminator 3
 2876 00dc 0130     		adds	r0, r0, #1
 2877              	.LVL580:
 2878              	.L127:
1193:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 2879              		.loc 1 1193 0 is_stmt 0 discriminator 1
 2880 00de 25F00F03 		bic	r3, r5, #15
 2881 00e2 1033     		adds	r3, r3, #16
 2882 00e4 9842     		cmp	r0, r3
 2883 00e6 F6D9     		bls	.L129
1198:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 2884              		.loc 1 1198 0 is_stmt 1
 2885 00e8 1D46     		mov	r5, r3
 2886              	.LVL581:
 2887 00ea DAE7     		b	.L128
 2888              	.LVL582:
 2889              	.L174:
 2890 00ec 2846     		mov	r0, r5
 2891              	.LVL583:
 2892 00ee F6E7     		b	.L127
 2893              	.LVL584:
 2894              	.L132:
1212:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
1213:FWLIB/src/stm32f4xx_cryp_aes.c ****     blockb0[loopcounter+1] = Nonce[loopcounter];
 2895              		.loc 1 1213 0 discriminator 3
 2896 00f0 581C     		adds	r0, r3, #1
 2897 00f2 11F803E0 		ldrb	lr, [r1, r3]	@ zero_extendqisi2
 2898 00f6 22AB     		add	r3, sp, #136
 2899              	.LVL585:
 2900 00f8 0344     		add	r3, r3, r0
 2901 00fa 03F854EC 		strb	lr, [r3, #-84]
 2902              	.LVL586:
1211:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 2903              		.loc 1 1211 0 discriminator 3
 2904 00fe 0346     		mov	r3, r0
ARM GAS  /tmp/cc1B5Puw.s 			page 88


 2905              	.LVL587:
 2906              	.L131:
1211:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 2907              		.loc 1 1211 0 is_stmt 0 discriminator 1
 2908 0100 9342     		cmp	r3, r2
 2909 0102 F5D3     		bcc	.L132
 2910 0104 05E0     		b	.L133
 2911              	.LVL588:
 2912              	.L134:
1214:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
1215:FWLIB/src/stm32f4xx_cryp_aes.c ****   for ( ; loopcounter < 13; loopcounter++)
1216:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
1217:FWLIB/src/stm32f4xx_cryp_aes.c ****     blockb0[loopcounter+1] = 0;
 2913              		.loc 1 1217 0 is_stmt 1 discriminator 2
 2914 0106 0133     		adds	r3, r3, #1
 2915              	.LVL589:
 2916 0108 22A9     		add	r1, sp, #136
 2917 010a 1944     		add	r1, r1, r3
 2918 010c 0020     		movs	r0, #0
 2919 010e 01F8540C 		strb	r0, [r1, #-84]
 2920              	.LVL590:
 2921              	.L133:
1215:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 2922              		.loc 1 1215 0 discriminator 1
 2923 0112 0C2B     		cmp	r3, #12
 2924 0114 F7D9     		bls	.L134
1218:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
1219:FWLIB/src/stm32f4xx_cryp_aes.c ****   
1220:FWLIB/src/stm32f4xx_cryp_aes.c ****   blockb0[14] = ((ILength >> 8) & 0xFF);
 2925              		.loc 1 1220 0
 2926 0116 4FEA1923 		lsr	r3, r9, #8
 2927              	.LVL591:
 2928 011a 8DF84230 		strb	r3, [sp, #66]
1221:FWLIB/src/stm32f4xx_cryp_aes.c ****   blockb0[15] = (ILength & 0xFF);
 2929              		.loc 1 1221 0
 2930 011e 8DF84390 		strb	r9, [sp, #67]
1222:FWLIB/src/stm32f4xx_cryp_aes.c ****   
1223:FWLIB/src/stm32f4xx_cryp_aes.c ****   /************************* Formatting the initial counter *******************/
1224:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Byte 0:
1225:FWLIB/src/stm32f4xx_cryp_aes.c ****      Bits 7 and 6 are reserved and shall be set to 0
1226:FWLIB/src/stm32f4xx_cryp_aes.c ****      Bits 3, 4, and 5 shall also be set to 0, to ensure that all the counter blocks
1227:FWLIB/src/stm32f4xx_cryp_aes.c ****      are distinct from B0
1228:FWLIB/src/stm32f4xx_cryp_aes.c ****      Bits 0, 1, and 2 contain the same encoding of q as in B0
1229:FWLIB/src/stm32f4xx_cryp_aes.c ****   */
1230:FWLIB/src/stm32f4xx_cryp_aes.c ****   ctr[0] = blockb0[0] & 0x07;
 2931              		.loc 1 1230 0
 2932 0122 9DF83430 		ldrb	r3, [sp, #52]	@ zero_extendqisi2
 2933 0126 03F00703 		and	r3, r3, #7
 2934 012a 8DF82430 		strb	r3, [sp, #36]
 2935              	.LVL592:
1231:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* byte 1 to NonceSize is the IV (Nonce) */
1232:FWLIB/src/stm32f4xx_cryp_aes.c ****   for(loopcounter = 1; loopcounter < NonceSize + 1; loopcounter++)
 2936              		.loc 1 1232 0
 2937 012e 0123     		movs	r3, #1
 2938 0130 06E0     		b	.L135
 2939              	.LVL593:
 2940              	.L136:
ARM GAS  /tmp/cc1B5Puw.s 			page 89


1233:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
1234:FWLIB/src/stm32f4xx_cryp_aes.c ****     ctr[loopcounter] = blockb0[loopcounter];
 2941              		.loc 1 1234 0 discriminator 3
 2942 0132 22A9     		add	r1, sp, #136
 2943 0134 1944     		add	r1, r1, r3
 2944 0136 11F8540C 		ldrb	r0, [r1, #-84]	@ zero_extendqisi2
 2945 013a 01F8640C 		strb	r0, [r1, #-100]
1232:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 2946              		.loc 1 1232 0 discriminator 3
 2947 013e 0133     		adds	r3, r3, #1
 2948              	.LVL594:
 2949              	.L135:
1232:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 2950              		.loc 1 1232 0 is_stmt 0 discriminator 1
 2951 0140 511C     		adds	r1, r2, #1
 2952 0142 8B42     		cmp	r3, r1
 2953 0144 F5D3     		bcc	.L136
1235:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
1236:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Set the LSB to 1 */
1237:FWLIB/src/stm32f4xx_cryp_aes.c ****   ctr[15] |= 0x01;
 2954              		.loc 1 1237 0 is_stmt 1
 2955 0146 9DF83330 		ldrb	r3, [sp, #51]	@ zero_extendqisi2
 2956              	.LVL595:
 2957 014a 43F00103 		orr	r3, r3, #1
 2958 014e 8DF83330 		strb	r3, [sp, #51]
1238:FWLIB/src/stm32f4xx_cryp_aes.c ****   
1239:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Crypto structures initialisation*/
1240:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 2959              		.loc 1 1240 0
 2960 0152 16A8     		add	r0, sp, #88
 2961 0154 FFF7FEFF 		bl	CRYP_KeyStructInit
 2962              	.LVL596:
1241:FWLIB/src/stm32f4xx_cryp_aes.c ****   
1242:FWLIB/src/stm32f4xx_cryp_aes.c ****   switch(Keysize)
 2963              		.loc 1 1242 0
 2964 0158 039B     		ldr	r3, [sp, #12]
 2965 015a C02B     		cmp	r3, #192
 2966 015c 69D0     		beq	.L138
 2967 015e B3F5807F 		cmp	r3, #256
 2968 0162 00F08280 		beq	.L139
 2969 0166 802B     		cmp	r3, #128
 2970 0168 50D0     		beq	.L190
 2971              	.LVL597:
 2972              	.L137:
1243:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
1244:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 128:
1245:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
1246:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
1247:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
1248:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
1249:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
1250:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
1251:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
1252:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
1253:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
1254:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 192:
1255:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
ARM GAS  /tmp/cc1B5Puw.s 			page 90


1256:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
1257:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
1258:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
1259:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
1260:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
1261:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
1262:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
1263:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
1264:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
1265:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
1266:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
1267:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
1268:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 256:
1269:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
1270:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
1271:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
1272:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
1273:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
1274:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
1275:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
1276:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
1277:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
1278:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
1279:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
1280:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
1281:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
1282:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
1283:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
1284:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
1285:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
1286:FWLIB/src/stm32f4xx_cryp_aes.c ****     default:
1287:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
1288:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
1289:FWLIB/src/stm32f4xx_cryp_aes.c ****   
1290:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* CRYP Initialization Vectors */
1291:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV0Left = (__REV(*(uint32_t*)(ctraddr)));
 2973              		.loc 1 1291 0
 2974 016a 099B     		ldr	r3, [sp, #36]
 2975              	.LVL598:
 2976              	.LBB398:
 2977              	.LBB399:
 2978              		.loc 2 498 0
 2979 016c 1BBA     		rev	r3, r3
 2980              	.LVL599:
 2981              	.LBE399:
 2982              	.LBE398:
 2983              		.loc 1 1291 0
 2984 016e 1293     		str	r3, [sp, #72]
 2985              	.LVL600:
1292:FWLIB/src/stm32f4xx_cryp_aes.c ****   ctraddr+=4;
1293:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV0Right= (__REV(*(uint32_t*)(ctraddr)));
 2986              		.loc 1 1293 0
 2987 0170 7B68     		ldr	r3, [r7, #4]
 2988              	.LVL601:
 2989              	.LBB400:
 2990              	.LBB401:
 2991              		.loc 2 498 0
ARM GAS  /tmp/cc1B5Puw.s 			page 91


 2992 0172 1BBA     		rev	r3, r3
 2993              	.LVL602:
 2994              	.LBE401:
 2995              	.LBE400:
 2996              		.loc 1 1293 0
 2997 0174 1393     		str	r3, [sp, #76]
 2998              	.LVL603:
1294:FWLIB/src/stm32f4xx_cryp_aes.c ****   ctraddr+=4;
1295:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV1Left = (__REV(*(uint32_t*)(ctraddr)));
 2999              		.loc 1 1295 0
 3000 0176 BB68     		ldr	r3, [r7, #8]
 3001              	.LVL604:
 3002              	.LBB402:
 3003              	.LBB403:
 3004              		.loc 2 498 0
 3005 0178 1BBA     		rev	r3, r3
 3006              	.LVL605:
 3007              	.LBE403:
 3008              	.LBE402:
 3009              		.loc 1 1295 0
 3010 017a 1493     		str	r3, [sp, #80]
 3011              	.LVL606:
1296:FWLIB/src/stm32f4xx_cryp_aes.c ****   ctraddr+=4;
1297:FWLIB/src/stm32f4xx_cryp_aes.c ****   AES_CRYP_IVInitStructure.CRYP_IV1Right= (__REV(*(uint32_t*)(ctraddr)));
 3012              		.loc 1 1297 0
 3013 017c FB68     		ldr	r3, [r7, #12]
 3014              	.LVL607:
 3015              	.LBB404:
 3016              	.LBB405:
 3017              		.loc 2 498 0
 3018 017e 1BBA     		rev	r3, r3
 3019              	.LVL608:
 3020              	.LBE405:
 3021              	.LBE404:
 3022              		.loc 1 1297 0
 3023 0180 1593     		str	r3, [sp, #84]
1298:FWLIB/src/stm32f4xx_cryp_aes.c ****   
1299:FWLIB/src/stm32f4xx_cryp_aes.c ****   /*------------------ AES Encryption ------------------*/
1300:FWLIB/src/stm32f4xx_cryp_aes.c ****   if(Mode == MODE_ENCRYPT) /* AES encryption */
 3024              		.loc 1 1300 0
 3025 0182 029B     		ldr	r3, [sp, #8]
 3026 0184 012B     		cmp	r3, #1
 3027 0186 00F09480 		beq	.L191
1301:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
1302:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Flush IN/OUT FIFOs */
1303:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_FIFOFlush();
1304:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1305:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Key Initialisation */
1306:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
1307:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1308:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* CRYP Initialization Vectors */
1309:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_IVInit(&AES_CRYP_IVInitStructure);
1310:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1311:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Crypto Init for Key preparation for decryption process */
1312:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
1313:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CCM;
1314:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
ARM GAS  /tmp/cc1B5Puw.s 			page 92


1315:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_Init(&AES_CRYP_InitStructure);
1316:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1317:FWLIB/src/stm32f4xx_cryp_aes.c ****     /***************************** Init phase *********************************/
1318:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Select init phase */
1319:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_PhaseConfig(CRYP_Phase_Init);
1320:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1321:FWLIB/src/stm32f4xx_cryp_aes.c ****     b0addr = (uint32_t)blockb0;
1322:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Write the blockb0 block in the IN FIFO */
1323:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn((*(uint32_t*)(b0addr)));
1324:FWLIB/src/stm32f4xx_cryp_aes.c ****     b0addr+=4;
1325:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn((*(uint32_t*)(b0addr)));
1326:FWLIB/src/stm32f4xx_cryp_aes.c ****     b0addr+=4;
1327:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn((*(uint32_t*)(b0addr)));
1328:FWLIB/src/stm32f4xx_cryp_aes.c ****     b0addr+=4;
1329:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn((*(uint32_t*)(b0addr)));
1330:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1331:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Enable Crypto processor */
1332:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_Cmd(ENABLE);
1333:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1334:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Wait for CRYPEN bit to be 0 */
1335:FWLIB/src/stm32f4xx_cryp_aes.c ****     while(CRYP_GetCmdStatus() == ENABLE)
1336:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
1337:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
1338:FWLIB/src/stm32f4xx_cryp_aes.c ****     /***************************** header phase *******************************/
1339:FWLIB/src/stm32f4xx_cryp_aes.c ****     if(headersize != 0)
1340:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
1341:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Select header phase */
1342:FWLIB/src/stm32f4xx_cryp_aes.c ****       CRYP_PhaseConfig(CRYP_Phase_Header);
1343:FWLIB/src/stm32f4xx_cryp_aes.c ****       
1344:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Enable Crypto processor */
1345:FWLIB/src/stm32f4xx_cryp_aes.c ****       CRYP_Cmd(ENABLE);
1346:FWLIB/src/stm32f4xx_cryp_aes.c ****       
1347:FWLIB/src/stm32f4xx_cryp_aes.c ****       if(CRYP_GetCmdStatus() == DISABLE)
1348:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
1349:FWLIB/src/stm32f4xx_cryp_aes.c ****          /* The CRYP peripheral clock is not enabled or the device doesn't embed 
1350:FWLIB/src/stm32f4xx_cryp_aes.c ****             the CRYP peripheral (please check the device sales type. */
1351:FWLIB/src/stm32f4xx_cryp_aes.c ****          return(ERROR);
1352:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
1353:FWLIB/src/stm32f4xx_cryp_aes.c ****       
1354:FWLIB/src/stm32f4xx_cryp_aes.c ****       for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
1355:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
1356:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Wait until the IFEM flag is reset */
1357:FWLIB/src/stm32f4xx_cryp_aes.c ****         while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
1358:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
1359:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
1360:FWLIB/src/stm32f4xx_cryp_aes.c ****         
1361:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Write the Input block in the IN FIFO */
1362:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(headeraddr));
1363:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
1364:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(headeraddr));
1365:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
1366:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(headeraddr));
1367:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
1368:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(headeraddr));
1369:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
1370:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
1371:FWLIB/src/stm32f4xx_cryp_aes.c ****       
ARM GAS  /tmp/cc1B5Puw.s 			page 93


1372:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Wait until the complete message has been processed */
1373:FWLIB/src/stm32f4xx_cryp_aes.c ****       counter = 0;
1374:FWLIB/src/stm32f4xx_cryp_aes.c ****       do
1375:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
1376:FWLIB/src/stm32f4xx_cryp_aes.c ****         busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
1377:FWLIB/src/stm32f4xx_cryp_aes.c ****         counter++;
1378:FWLIB/src/stm32f4xx_cryp_aes.c ****       }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
1379:FWLIB/src/stm32f4xx_cryp_aes.c **** 
1380:FWLIB/src/stm32f4xx_cryp_aes.c ****       if (busystatus != RESET)
1381:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
1382:FWLIB/src/stm32f4xx_cryp_aes.c ****         status = ERROR;
1383:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
1384:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
1385:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1386:FWLIB/src/stm32f4xx_cryp_aes.c ****     /**************************** payload phase *******************************/
1387:FWLIB/src/stm32f4xx_cryp_aes.c ****     if(ILength != 0)
1388:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
1389:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Select payload phase */
1390:FWLIB/src/stm32f4xx_cryp_aes.c ****       CRYP_PhaseConfig(CRYP_Phase_Payload);
1391:FWLIB/src/stm32f4xx_cryp_aes.c ****       
1392:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Enable Crypto processor */
1393:FWLIB/src/stm32f4xx_cryp_aes.c ****       CRYP_Cmd(ENABLE);
1394:FWLIB/src/stm32f4xx_cryp_aes.c ****       
1395:FWLIB/src/stm32f4xx_cryp_aes.c ****       if(CRYP_GetCmdStatus() == DISABLE)
1396:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
1397:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* The CRYP peripheral clock is not enabled or the device doesn't embed 
1398:FWLIB/src/stm32f4xx_cryp_aes.c ****            the CRYP peripheral (please check the device sales type. */
1399:FWLIB/src/stm32f4xx_cryp_aes.c ****         return(ERROR);
1400:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
1401:FWLIB/src/stm32f4xx_cryp_aes.c ****       
1402:FWLIB/src/stm32f4xx_cryp_aes.c ****       for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
1403:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
1404:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Wait until the IFEM flag is reset */
1405:FWLIB/src/stm32f4xx_cryp_aes.c ****         while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
1406:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
1407:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
1408:FWLIB/src/stm32f4xx_cryp_aes.c ****         
1409:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Write the Input block in the IN FIFO */
1410:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(inputaddr));
1411:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
1412:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(inputaddr));
1413:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
1414:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(inputaddr));
1415:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
1416:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(inputaddr));
1417:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
1418:FWLIB/src/stm32f4xx_cryp_aes.c ****         
1419:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Wait until the complete message has been processed */
1420:FWLIB/src/stm32f4xx_cryp_aes.c ****         counter = 0;
1421:FWLIB/src/stm32f4xx_cryp_aes.c ****         do
1422:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
1423:FWLIB/src/stm32f4xx_cryp_aes.c ****           busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
1424:FWLIB/src/stm32f4xx_cryp_aes.c ****           counter++;
1425:FWLIB/src/stm32f4xx_cryp_aes.c ****         }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
1426:FWLIB/src/stm32f4xx_cryp_aes.c **** 
1427:FWLIB/src/stm32f4xx_cryp_aes.c ****         if (busystatus != RESET)
1428:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
ARM GAS  /tmp/cc1B5Puw.s 			page 94


1429:FWLIB/src/stm32f4xx_cryp_aes.c ****           status = ERROR;
1430:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
1431:FWLIB/src/stm32f4xx_cryp_aes.c ****         else
1432:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
1433:FWLIB/src/stm32f4xx_cryp_aes.c ****           /* Wait until the OFNE flag is reset */
1434:FWLIB/src/stm32f4xx_cryp_aes.c ****           while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
1435:FWLIB/src/stm32f4xx_cryp_aes.c ****           {
1436:FWLIB/src/stm32f4xx_cryp_aes.c ****           }
1437:FWLIB/src/stm32f4xx_cryp_aes.c ****           
1438:FWLIB/src/stm32f4xx_cryp_aes.c ****           /* Read the Output block from the Output FIFO */
1439:FWLIB/src/stm32f4xx_cryp_aes.c ****           *(uint32_t*)(outputaddr) = CRYP_DataOut();
1440:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
1441:FWLIB/src/stm32f4xx_cryp_aes.c ****           *(uint32_t*)(outputaddr) = CRYP_DataOut();
1442:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
1443:FWLIB/src/stm32f4xx_cryp_aes.c ****           *(uint32_t*)(outputaddr) = CRYP_DataOut();
1444:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
1445:FWLIB/src/stm32f4xx_cryp_aes.c ****           *(uint32_t*)(outputaddr) = CRYP_DataOut();
1446:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
1447:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
1448:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
1449:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
1450:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1451:FWLIB/src/stm32f4xx_cryp_aes.c ****     /***************************** final phase ********************************/
1452:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Select final phase */
1453:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_PhaseConfig(CRYP_Phase_Final);
1454:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1455:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Enable Crypto processor */
1456:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_Cmd(ENABLE);
1457:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1458:FWLIB/src/stm32f4xx_cryp_aes.c ****     if(CRYP_GetCmdStatus() == DISABLE)
1459:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
1460:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* The CRYP peripheral clock is not enabled or the device doesn't embed 
1461:FWLIB/src/stm32f4xx_cryp_aes.c ****          the CRYP peripheral (please check the device sales type. */
1462:FWLIB/src/stm32f4xx_cryp_aes.c ****       return(ERROR);
1463:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
1464:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1465:FWLIB/src/stm32f4xx_cryp_aes.c ****     ctraddr = (uint32_t)ctr;
1466:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Write the counter block in the IN FIFO */
1467:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(ctraddr));
1468:FWLIB/src/stm32f4xx_cryp_aes.c ****     ctraddr+=4;
1469:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(ctraddr));
1470:FWLIB/src/stm32f4xx_cryp_aes.c ****     ctraddr+=4;
1471:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(ctraddr));
1472:FWLIB/src/stm32f4xx_cryp_aes.c ****     ctraddr+=4;
1473:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Reset bit 0 (after 8-bit swap) is equivalent to reset bit 24 (before 8-bit swap) */
1474:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(ctraddr) & 0xfeffffff);
1475:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1476:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Wait until the OFNE flag is reset */
1477:FWLIB/src/stm32f4xx_cryp_aes.c ****     while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
1478:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
1479:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
1480:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1481:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Read the Auth TAG in the IN FIFO */
1482:FWLIB/src/stm32f4xx_cryp_aes.c ****     temptag[0] = CRYP_DataOut();
1483:FWLIB/src/stm32f4xx_cryp_aes.c ****     temptag[1] = CRYP_DataOut();
1484:FWLIB/src/stm32f4xx_cryp_aes.c ****     temptag[2] = CRYP_DataOut();
1485:FWLIB/src/stm32f4xx_cryp_aes.c ****     temptag[3] = CRYP_DataOut();
ARM GAS  /tmp/cc1B5Puw.s 			page 95


1486:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
1487:FWLIB/src/stm32f4xx_cryp_aes.c ****   /*------------------ AES Decryption ------------------*/
1488:FWLIB/src/stm32f4xx_cryp_aes.c ****   else /* AES decryption */
1489:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
1490:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Flush IN/OUT FIFOs */
1491:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_FIFOFlush();
 3028              		.loc 1 1491 0
 3029 018a FFF7FEFF 		bl	CRYP_FIFOFlush
 3030              	.LVL609:
1492:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1493:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Key Initialisation */
1494:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 3031              		.loc 1 1494 0
 3032 018e 16A8     		add	r0, sp, #88
 3033 0190 FFF7FEFF 		bl	CRYP_KeyInit
 3034              	.LVL610:
1495:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1496:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* CRYP Initialization Vectors */
1497:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_IVInit(&AES_CRYP_IVInitStructure);
 3035              		.loc 1 1497 0
 3036 0194 12A8     		add	r0, sp, #72
 3037 0196 FFF7FEFF 		bl	CRYP_IVInit
 3038              	.LVL611:
1498:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1499:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Crypto Init for Key preparation for decryption process */
1500:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 3039              		.loc 1 1500 0
 3040 019a 0423     		movs	r3, #4
 3041 019c 1E93     		str	r3, [sp, #120]
1501:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CCM;
 3042              		.loc 1 1501 0
 3043 019e 4FF00813 		mov	r3, #524296
 3044 01a2 1F93     		str	r3, [sp, #124]
1502:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 3045              		.loc 1 1502 0
 3046 01a4 8023     		movs	r3, #128
 3047 01a6 2093     		str	r3, [sp, #128]
1503:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_Init(&AES_CRYP_InitStructure);
 3048              		.loc 1 1503 0
 3049 01a8 1EA8     		add	r0, sp, #120
 3050 01aa FFF7FEFF 		bl	CRYP_Init
 3051              	.LVL612:
1504:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1505:FWLIB/src/stm32f4xx_cryp_aes.c ****     /***************************** Init phase *********************************/
1506:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Select init phase */
1507:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_PhaseConfig(CRYP_Phase_Init);
 3052              		.loc 1 1507 0
 3053 01ae 0020     		movs	r0, #0
 3054 01b0 FFF7FEFF 		bl	CRYP_PhaseConfig
 3055              	.LVL613:
1508:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1509:FWLIB/src/stm32f4xx_cryp_aes.c ****     b0addr = (uint32_t)blockb0;
1510:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Write the blockb0 block in the IN FIFO */
1511:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn((*(uint32_t*)(b0addr)));
 3056              		.loc 1 1511 0
 3057 01b4 0D98     		ldr	r0, [sp, #52]
 3058 01b6 FFF7FEFF 		bl	CRYP_DataIn
ARM GAS  /tmp/cc1B5Puw.s 			page 96


 3059              	.LVL614:
1512:FWLIB/src/stm32f4xx_cryp_aes.c ****     b0addr+=4;
1513:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn((*(uint32_t*)(b0addr)));
 3060              		.loc 1 1513 0
 3061 01ba 019B     		ldr	r3, [sp, #4]
 3062 01bc 5868     		ldr	r0, [r3, #4]
 3063 01be FFF7FEFF 		bl	CRYP_DataIn
 3064              	.LVL615:
1514:FWLIB/src/stm32f4xx_cryp_aes.c ****     b0addr+=4;
1515:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn((*(uint32_t*)(b0addr)));
 3065              		.loc 1 1515 0
 3066 01c2 019A     		ldr	r2, [sp, #4]
 3067 01c4 9068     		ldr	r0, [r2, #8]
 3068 01c6 FFF7FEFF 		bl	CRYP_DataIn
 3069              	.LVL616:
1516:FWLIB/src/stm32f4xx_cryp_aes.c ****     b0addr+=4;
1517:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn((*(uint32_t*)(b0addr)));
 3070              		.loc 1 1517 0
 3071 01ca 019A     		ldr	r2, [sp, #4]
 3072 01cc D068     		ldr	r0, [r2, #12]
 3073 01ce FFF7FEFF 		bl	CRYP_DataIn
 3074              	.LVL617:
1518:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1519:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Enable Crypto processor */
1520:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_Cmd(ENABLE);
 3075              		.loc 1 1520 0
 3076 01d2 0120     		movs	r0, #1
 3077 01d4 FFF7FEFF 		bl	CRYP_Cmd
 3078              	.LVL618:
 3079              	.L158:
1521:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1522:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Wait for CRYPEN bit to be 0 */
1523:FWLIB/src/stm32f4xx_cryp_aes.c ****     while(CRYP_GetCmdStatus() == ENABLE)
 3080              		.loc 1 1523 0 discriminator 1
 3081 01d8 FFF7FEFF 		bl	CRYP_GetCmdStatus
 3082              	.LVL619:
 3083 01dc 0128     		cmp	r0, #1
 3084 01de FBD0     		beq	.L158
1524:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
1525:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
1526:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1527:FWLIB/src/stm32f4xx_cryp_aes.c ****     /***************************** header phase *******************************/
1528:FWLIB/src/stm32f4xx_cryp_aes.c ****     if(headersize != 0)
 3085              		.loc 1 1528 0
 3086 01e0 002D     		cmp	r5, #0
 3087 01e2 40F04D81 		bne	.L192
1148:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 3088              		.loc 1 1148 0
 3089 01e6 0125     		movs	r5, #1
 3090              	.LVL620:
 3091              	.L159:
1529:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
1530:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Select header phase */
1531:FWLIB/src/stm32f4xx_cryp_aes.c ****       CRYP_PhaseConfig(CRYP_Phase_Header);
1532:FWLIB/src/stm32f4xx_cryp_aes.c ****       
1533:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Enable Crypto processor */
1534:FWLIB/src/stm32f4xx_cryp_aes.c ****       CRYP_Cmd(ENABLE);
ARM GAS  /tmp/cc1B5Puw.s 			page 97


1535:FWLIB/src/stm32f4xx_cryp_aes.c ****       
1536:FWLIB/src/stm32f4xx_cryp_aes.c ****       if(CRYP_GetCmdStatus() == DISABLE)
1537:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
1538:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* The CRYP peripheral clock is not enabled or the device doesn't embed 
1539:FWLIB/src/stm32f4xx_cryp_aes.c ****            the CRYP peripheral (please check the device sales type. */
1540:FWLIB/src/stm32f4xx_cryp_aes.c ****         return(ERROR);
1541:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
1542:FWLIB/src/stm32f4xx_cryp_aes.c ****       
1543:FWLIB/src/stm32f4xx_cryp_aes.c ****       for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
1544:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
1545:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Wait until the IFEM flag is reset */
1546:FWLIB/src/stm32f4xx_cryp_aes.c ****         while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
1547:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
1548:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
1549:FWLIB/src/stm32f4xx_cryp_aes.c ****         
1550:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Write the Input block in the IN FIFO */
1551:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(headeraddr));
1552:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
1553:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(headeraddr));
1554:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
1555:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(headeraddr));
1556:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
1557:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(headeraddr));
1558:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
1559:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
1560:FWLIB/src/stm32f4xx_cryp_aes.c ****       
1561:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Wait until the complete message has been processed */
1562:FWLIB/src/stm32f4xx_cryp_aes.c ****       counter = 0;
1563:FWLIB/src/stm32f4xx_cryp_aes.c ****       do
1564:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
1565:FWLIB/src/stm32f4xx_cryp_aes.c ****         busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
1566:FWLIB/src/stm32f4xx_cryp_aes.c ****         counter++;
1567:FWLIB/src/stm32f4xx_cryp_aes.c ****       }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
1568:FWLIB/src/stm32f4xx_cryp_aes.c **** 
1569:FWLIB/src/stm32f4xx_cryp_aes.c ****       if (busystatus != RESET)
1570:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
1571:FWLIB/src/stm32f4xx_cryp_aes.c ****         status = ERROR;
1572:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
1573:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
1574:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1575:FWLIB/src/stm32f4xx_cryp_aes.c ****     /**************************** payload phase *******************************/
1576:FWLIB/src/stm32f4xx_cryp_aes.c ****     if(ILength != 0)
 3092              		.loc 1 1576 0
 3093 01e8 B9F1000F 		cmp	r9, #0
 3094 01ec 00F0C281 		beq	.L164
1577:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
1578:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Select payload phase */
1579:FWLIB/src/stm32f4xx_cryp_aes.c ****       CRYP_PhaseConfig(CRYP_Phase_Payload);
 3095              		.loc 1 1579 0
 3096 01f0 4FF40030 		mov	r0, #131072
 3097 01f4 FFF7FEFF 		bl	CRYP_PhaseConfig
 3098              	.LVL621:
1580:FWLIB/src/stm32f4xx_cryp_aes.c **** 
1581:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* Enable Crypto processor */
1582:FWLIB/src/stm32f4xx_cryp_aes.c ****       CRYP_Cmd(ENABLE);
 3099              		.loc 1 1582 0
 3100 01f8 0120     		movs	r0, #1
ARM GAS  /tmp/cc1B5Puw.s 			page 98


 3101 01fa FFF7FEFF 		bl	CRYP_Cmd
 3102              	.LVL622:
1583:FWLIB/src/stm32f4xx_cryp_aes.c ****       
1584:FWLIB/src/stm32f4xx_cryp_aes.c ****       if(CRYP_GetCmdStatus() == DISABLE)
 3103              		.loc 1 1584 0
 3104 01fe FFF7FEFF 		bl	CRYP_GetCmdStatus
 3105              	.LVL623:
 3106 0202 0028     		cmp	r0, #0
 3107 0204 00F0F881 		beq	.L184
 3108 0208 0026     		movs	r6, #0
 3109              	.LVL624:
 3110 020a 8CE1     		b	.L165
 3111              	.LVL625:
 3112              	.L190:
1245:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 3113              		.loc 1 1245 0
 3114 020c 0023     		movs	r3, #0
 3115 020e 2193     		str	r3, [sp, #132]
1246:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 3116              		.loc 1 1246 0
 3117 0210 DAF80030 		ldr	r3, [r10]
 3118              	.LVL626:
 3119              	.LBB406:
 3120              	.LBB407:
 3121              		.loc 2 498 0
 3122 0214 1BBA     		rev	r3, r3
 3123              	.LVL627:
 3124              	.LBE407:
 3125              	.LBE406:
1246:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 3126              		.loc 1 1246 0
 3127 0216 1A93     		str	r3, [sp, #104]
 3128              	.LVL628:
1248:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 3129              		.loc 1 1248 0
 3130 0218 DAF80430 		ldr	r3, [r10, #4]
 3131              	.LVL629:
 3132              	.LBB408:
 3133              	.LBB409:
 3134              		.loc 2 498 0
 3135 021c 1BBA     		rev	r3, r3
 3136              	.LVL630:
 3137              	.LBE409:
 3138              	.LBE408:
1248:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 3139              		.loc 1 1248 0
 3140 021e 1B93     		str	r3, [sp, #108]
 3141              	.LVL631:
1250:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 3142              		.loc 1 1250 0
 3143 0220 DAF80830 		ldr	r3, [r10, #8]
 3144              	.LVL632:
 3145              	.LBB410:
 3146              	.LBB411:
 3147              		.loc 2 498 0
 3148 0224 1BBA     		rev	r3, r3
 3149              	.LVL633:
ARM GAS  /tmp/cc1B5Puw.s 			page 99


 3150              	.LBE411:
 3151              	.LBE410:
1250:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 3152              		.loc 1 1250 0
 3153 0226 1C93     		str	r3, [sp, #112]
 3154              	.LVL634:
1252:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 3155              		.loc 1 1252 0
 3156 0228 DAF80C30 		ldr	r3, [r10, #12]
 3157              	.LVL635:
 3158              	.LBB412:
 3159              	.LBB413:
 3160              		.loc 2 498 0
 3161 022c 1BBA     		rev	r3, r3
 3162              	.LVL636:
 3163              	.LBE413:
 3164              	.LBE412:
1252:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 3165              		.loc 1 1252 0
 3166 022e 1D93     		str	r3, [sp, #116]
1253:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 192:
 3167              		.loc 1 1253 0
 3168 0230 9BE7     		b	.L137
 3169              	.LVL637:
 3170              	.L138:
1255:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 3171              		.loc 1 1255 0
 3172 0232 4FF48073 		mov	r3, #256
 3173 0236 2193     		str	r3, [sp, #132]
1256:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 3174              		.loc 1 1256 0
 3175 0238 DAF80030 		ldr	r3, [r10]
 3176              	.LVL638:
 3177              	.LBB414:
 3178              	.LBB415:
 3179              		.loc 2 498 0
 3180 023c 1BBA     		rev	r3, r3
 3181              	.LVL639:
 3182              	.LBE415:
 3183              	.LBE414:
1256:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 3184              		.loc 1 1256 0
 3185 023e 1893     		str	r3, [sp, #96]
 3186              	.LVL640:
1258:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 3187              		.loc 1 1258 0
 3188 0240 DAF80430 		ldr	r3, [r10, #4]
 3189              	.LVL641:
 3190              	.LBB416:
 3191              	.LBB417:
 3192              		.loc 2 498 0
 3193 0244 1BBA     		rev	r3, r3
 3194              	.LVL642:
 3195              	.LBE417:
 3196              	.LBE416:
1258:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 3197              		.loc 1 1258 0
ARM GAS  /tmp/cc1B5Puw.s 			page 100


 3198 0246 1993     		str	r3, [sp, #100]
 3199              	.LVL643:
1260:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 3200              		.loc 1 1260 0
 3201 0248 DAF80830 		ldr	r3, [r10, #8]
 3202              	.LVL644:
 3203              	.LBB418:
 3204              	.LBB419:
 3205              		.loc 2 498 0
 3206 024c 1BBA     		rev	r3, r3
 3207              	.LVL645:
 3208              	.LBE419:
 3209              	.LBE418:
1260:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 3210              		.loc 1 1260 0
 3211 024e 1A93     		str	r3, [sp, #104]
 3212              	.LVL646:
1262:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 3213              		.loc 1 1262 0
 3214 0250 DAF80C30 		ldr	r3, [r10, #12]
 3215              	.LVL647:
 3216              	.LBB420:
 3217              	.LBB421:
 3218              		.loc 2 498 0
 3219 0254 1BBA     		rev	r3, r3
 3220              	.LVL648:
 3221              	.LBE421:
 3222              	.LBE420:
1262:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 3223              		.loc 1 1262 0
 3224 0256 1B93     		str	r3, [sp, #108]
 3225              	.LVL649:
1264:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 3226              		.loc 1 1264 0
 3227 0258 DAF81030 		ldr	r3, [r10, #16]
 3228              	.LVL650:
 3229              	.LBB422:
 3230              	.LBB423:
 3231              		.loc 2 498 0
 3232 025c 1BBA     		rev	r3, r3
 3233              	.LVL651:
 3234              	.LBE423:
 3235              	.LBE422:
1264:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 3236              		.loc 1 1264 0
 3237 025e 1C93     		str	r3, [sp, #112]
 3238              	.LVL652:
1266:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 3239              		.loc 1 1266 0
 3240 0260 DAF81430 		ldr	r3, [r10, #20]
 3241              	.LVL653:
 3242              	.LBB424:
 3243              	.LBB425:
 3244              		.loc 2 498 0
 3245 0264 1BBA     		rev	r3, r3
 3246              	.LVL654:
 3247              	.LBE425:
ARM GAS  /tmp/cc1B5Puw.s 			page 101


 3248              	.LBE424:
1266:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 3249              		.loc 1 1266 0
 3250 0266 1D93     		str	r3, [sp, #116]
1267:FWLIB/src/stm32f4xx_cryp_aes.c ****     case 256:
 3251              		.loc 1 1267 0
 3252 0268 7FE7     		b	.L137
 3253              	.LVL655:
 3254              	.L139:
1269:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 3255              		.loc 1 1269 0
 3256 026a 4FF40073 		mov	r3, #512
 3257 026e 2193     		str	r3, [sp, #132]
1270:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 3258              		.loc 1 1270 0
 3259 0270 DAF80030 		ldr	r3, [r10]
 3260              	.LVL656:
 3261              	.LBB426:
 3262              	.LBB427:
 3263              		.loc 2 498 0
 3264 0274 1BBA     		rev	r3, r3
 3265              	.LVL657:
 3266              	.LBE427:
 3267              	.LBE426:
1270:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 3268              		.loc 1 1270 0
 3269 0276 1693     		str	r3, [sp, #88]
 3270              	.LVL658:
1272:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 3271              		.loc 1 1272 0
 3272 0278 DAF80430 		ldr	r3, [r10, #4]
 3273              	.LVL659:
 3274              	.LBB428:
 3275              	.LBB429:
 3276              		.loc 2 498 0
 3277 027c 1BBA     		rev	r3, r3
 3278              	.LVL660:
 3279              	.LBE429:
 3280              	.LBE428:
1272:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 3281              		.loc 1 1272 0
 3282 027e 1793     		str	r3, [sp, #92]
 3283              	.LVL661:
1274:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 3284              		.loc 1 1274 0
 3285 0280 DAF80830 		ldr	r3, [r10, #8]
 3286              	.LVL662:
 3287              	.LBB430:
 3288              	.LBB431:
 3289              		.loc 2 498 0
 3290 0284 1BBA     		rev	r3, r3
 3291              	.LVL663:
 3292              	.LBE431:
 3293              	.LBE430:
1274:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 3294              		.loc 1 1274 0
 3295 0286 1893     		str	r3, [sp, #96]
ARM GAS  /tmp/cc1B5Puw.s 			page 102


 3296              	.LVL664:
1276:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 3297              		.loc 1 1276 0
 3298 0288 DAF80C30 		ldr	r3, [r10, #12]
 3299              	.LVL665:
 3300              	.LBB432:
 3301              	.LBB433:
 3302              		.loc 2 498 0
 3303 028c 1BBA     		rev	r3, r3
 3304              	.LVL666:
 3305              	.LBE433:
 3306              	.LBE432:
1276:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 3307              		.loc 1 1276 0
 3308 028e 1993     		str	r3, [sp, #100]
 3309              	.LVL667:
1278:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 3310              		.loc 1 1278 0
 3311 0290 DAF81030 		ldr	r3, [r10, #16]
 3312              	.LVL668:
 3313              	.LBB434:
 3314              	.LBB435:
 3315              		.loc 2 498 0
 3316 0294 1BBA     		rev	r3, r3
 3317              	.LVL669:
 3318              	.LBE435:
 3319              	.LBE434:
1278:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 3320              		.loc 1 1278 0
 3321 0296 1A93     		str	r3, [sp, #104]
 3322              	.LVL670:
1280:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 3323              		.loc 1 1280 0
 3324 0298 DAF81430 		ldr	r3, [r10, #20]
 3325              	.LVL671:
 3326              	.LBB436:
 3327              	.LBB437:
 3328              		.loc 2 498 0
 3329 029c 1BBA     		rev	r3, r3
 3330              	.LVL672:
 3331              	.LBE437:
 3332              	.LBE436:
1280:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 3333              		.loc 1 1280 0
 3334 029e 1B93     		str	r3, [sp, #108]
 3335              	.LVL673:
1282:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 3336              		.loc 1 1282 0
 3337 02a0 DAF81830 		ldr	r3, [r10, #24]
 3338              	.LVL674:
 3339              	.LBB438:
 3340              	.LBB439:
 3341              		.loc 2 498 0
 3342 02a4 1BBA     		rev	r3, r3
 3343              	.LVL675:
 3344              	.LBE439:
 3345              	.LBE438:
ARM GAS  /tmp/cc1B5Puw.s 			page 103


1282:FWLIB/src/stm32f4xx_cryp_aes.c ****     keyaddr+=4;
 3346              		.loc 1 1282 0
 3347 02a6 1C93     		str	r3, [sp, #112]
 3348              	.LVL676:
1284:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 3349              		.loc 1 1284 0
 3350 02a8 DAF81C30 		ldr	r3, [r10, #28]
 3351              	.LVL677:
 3352              	.LBB440:
 3353              	.LBB441:
 3354              		.loc 2 498 0
 3355 02ac 1BBA     		rev	r3, r3
 3356              	.LVL678:
 3357              	.LBE441:
 3358              	.LBE440:
1284:FWLIB/src/stm32f4xx_cryp_aes.c ****     break;
 3359              		.loc 1 1284 0
 3360 02ae 1D93     		str	r3, [sp, #116]
1285:FWLIB/src/stm32f4xx_cryp_aes.c ****     default:
 3361              		.loc 1 1285 0
 3362 02b0 5BE7     		b	.L137
 3363              	.LVL679:
 3364              	.L191:
1303:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 3365              		.loc 1 1303 0
 3366 02b2 FFF7FEFF 		bl	CRYP_FIFOFlush
 3367              	.LVL680:
1306:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 3368              		.loc 1 1306 0
 3369 02b6 16A8     		add	r0, sp, #88
 3370 02b8 FFF7FEFF 		bl	CRYP_KeyInit
 3371              	.LVL681:
1309:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 3372              		.loc 1 1309 0
 3373 02bc 12A8     		add	r0, sp, #72
 3374 02be FFF7FEFF 		bl	CRYP_IVInit
 3375              	.LVL682:
1312:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CCM;
 3376              		.loc 1 1312 0
 3377 02c2 4FF0000A 		mov	r10, #0
 3378              	.LVL683:
 3379 02c6 CDF878A0 		str	r10, [sp, #120]
1313:FWLIB/src/stm32f4xx_cryp_aes.c ****     AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 3380              		.loc 1 1313 0
 3381 02ca 4FF00813 		mov	r3, #524296
 3382 02ce 1F93     		str	r3, [sp, #124]
1314:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_Init(&AES_CRYP_InitStructure);
 3383              		.loc 1 1314 0
 3384 02d0 8023     		movs	r3, #128
 3385 02d2 2093     		str	r3, [sp, #128]
1315:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 3386              		.loc 1 1315 0
 3387 02d4 1EA8     		add	r0, sp, #120
 3388 02d6 FFF7FEFF 		bl	CRYP_Init
 3389              	.LVL684:
1319:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 3390              		.loc 1 1319 0
ARM GAS  /tmp/cc1B5Puw.s 			page 104


 3391 02da 5046     		mov	r0, r10
 3392 02dc FFF7FEFF 		bl	CRYP_PhaseConfig
 3393              	.LVL685:
1323:FWLIB/src/stm32f4xx_cryp_aes.c ****     b0addr+=4;
 3394              		.loc 1 1323 0
 3395 02e0 0D98     		ldr	r0, [sp, #52]
 3396 02e2 FFF7FEFF 		bl	CRYP_DataIn
 3397              	.LVL686:
1325:FWLIB/src/stm32f4xx_cryp_aes.c ****     b0addr+=4;
 3398              		.loc 1 1325 0
 3399 02e6 019B     		ldr	r3, [sp, #4]
 3400 02e8 5868     		ldr	r0, [r3, #4]
 3401 02ea FFF7FEFF 		bl	CRYP_DataIn
 3402              	.LVL687:
1327:FWLIB/src/stm32f4xx_cryp_aes.c ****     b0addr+=4;
 3403              		.loc 1 1327 0
 3404 02ee 019A     		ldr	r2, [sp, #4]
 3405 02f0 9068     		ldr	r0, [r2, #8]
 3406 02f2 FFF7FEFF 		bl	CRYP_DataIn
 3407              	.LVL688:
1329:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 3408              		.loc 1 1329 0
 3409 02f6 019A     		ldr	r2, [sp, #4]
 3410 02f8 D068     		ldr	r0, [r2, #12]
 3411 02fa FFF7FEFF 		bl	CRYP_DataIn
 3412              	.LVL689:
1332:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 3413              		.loc 1 1332 0
 3414 02fe 0120     		movs	r0, #1
 3415 0300 FFF7FEFF 		bl	CRYP_Cmd
 3416              	.LVL690:
 3417              	.L142:
1335:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 3418              		.loc 1 1335 0 discriminator 1
 3419 0304 FFF7FEFF 		bl	CRYP_GetCmdStatus
 3420              	.LVL691:
 3421 0308 0128     		cmp	r0, #1
 3422 030a FBD0     		beq	.L142
1339:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 3423              		.loc 1 1339 0
 3424 030c 95B9     		cbnz	r5, .L193
1148:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 3425              		.loc 1 1148 0
 3426 030e 0125     		movs	r5, #1
 3427              	.LVL692:
 3428              	.L143:
1387:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 3429              		.loc 1 1387 0
 3430 0310 B9F1000F 		cmp	r9, #0
 3431 0314 00F08880 		beq	.L149
1390:FWLIB/src/stm32f4xx_cryp_aes.c ****       
 3432              		.loc 1 1390 0
 3433 0318 4FF40030 		mov	r0, #131072
 3434 031c FFF7FEFF 		bl	CRYP_PhaseConfig
 3435              	.LVL693:
1393:FWLIB/src/stm32f4xx_cryp_aes.c ****       
 3436              		.loc 1 1393 0
ARM GAS  /tmp/cc1B5Puw.s 			page 105


 3437 0320 0120     		movs	r0, #1
 3438 0322 FFF7FEFF 		bl	CRYP_Cmd
 3439              	.LVL694:
1395:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 3440              		.loc 1 1395 0
 3441 0326 FFF7FEFF 		bl	CRYP_GetCmdStatus
 3442              	.LVL695:
 3443 032a 0028     		cmp	r0, #0
 3444 032c 00F06081 		beq	.L178
 3445 0330 0026     		movs	r6, #0
 3446              	.LVL696:
 3447 0332 52E0     		b	.L150
 3448              	.LVL697:
 3449              	.L193:
1342:FWLIB/src/stm32f4xx_cryp_aes.c ****       
 3450              		.loc 1 1342 0
 3451 0334 4FF48030 		mov	r0, #65536
 3452 0338 FFF7FEFF 		bl	CRYP_PhaseConfig
 3453              	.LVL698:
1345:FWLIB/src/stm32f4xx_cryp_aes.c ****       
 3454              		.loc 1 1345 0
 3455 033c 0120     		movs	r0, #1
 3456 033e FFF7FEFF 		bl	CRYP_Cmd
 3457              	.LVL699:
1347:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 3458              		.loc 1 1347 0
 3459 0342 FFF7FEFF 		bl	CRYP_GetCmdStatus
 3460              	.LVL700:
 3461 0346 0028     		cmp	r0, #0
 3462 0348 00F05081 		beq	.L176
 3463 034c 4FF0000A 		mov	r10, #0
 3464 0350 13E0     		b	.L145
 3465              	.LVL701:
 3466              	.L146:
1357:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
 3467              		.loc 1 1357 0 discriminator 1
 3468 0352 0120     		movs	r0, #1
 3469 0354 FFF7FEFF 		bl	CRYP_GetFlagStatus
 3470              	.LVL702:
 3471 0358 0028     		cmp	r0, #0
 3472 035a FAD0     		beq	.L146
1362:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
 3473              		.loc 1 1362 0 discriminator 2
 3474 035c 3068     		ldr	r0, [r6]
 3475 035e FFF7FEFF 		bl	CRYP_DataIn
 3476              	.LVL703:
1364:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
 3477              		.loc 1 1364 0 discriminator 2
 3478 0362 7068     		ldr	r0, [r6, #4]
 3479 0364 FFF7FEFF 		bl	CRYP_DataIn
 3480              	.LVL704:
1366:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
 3481              		.loc 1 1366 0 discriminator 2
 3482 0368 B068     		ldr	r0, [r6, #8]
 3483 036a FFF7FEFF 		bl	CRYP_DataIn
 3484              	.LVL705:
1368:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
ARM GAS  /tmp/cc1B5Puw.s 			page 106


 3485              		.loc 1 1368 0 discriminator 2
 3486 036e F068     		ldr	r0, [r6, #12]
 3487 0370 FFF7FEFF 		bl	CRYP_DataIn
 3488              	.LVL706:
1369:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 3489              		.loc 1 1369 0 discriminator 2
 3490 0374 1036     		adds	r6, r6, #16
 3491              	.LVL707:
1354:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 3492              		.loc 1 1354 0 discriminator 2
 3493 0376 0AF1100A 		add	r10, r10, #16
 3494              	.LVL708:
 3495              	.L145:
1354:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 3496              		.loc 1 1354 0 is_stmt 0 discriminator 1
 3497 037a 5545     		cmp	r5, r10
 3498 037c E9D8     		bhi	.L146
1373:FWLIB/src/stm32f4xx_cryp_aes.c ****       do
 3499              		.loc 1 1373 0 is_stmt 1
 3500 037e 0023     		movs	r3, #0
 3501 0380 1193     		str	r3, [sp, #68]
 3502              	.LVL709:
 3503              	.L148:
1376:FWLIB/src/stm32f4xx_cryp_aes.c ****         counter++;
 3504              		.loc 1 1376 0 discriminator 2
 3505 0382 1020     		movs	r0, #16
 3506 0384 FFF7FEFF 		bl	CRYP_GetFlagStatus
 3507              	.LVL710:
 3508 0388 0246     		mov	r2, r0
 3509              	.LVL711:
1377:FWLIB/src/stm32f4xx_cryp_aes.c ****       }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 3510              		.loc 1 1377 0 discriminator 2
 3511 038a 119B     		ldr	r3, [sp, #68]
 3512 038c 0133     		adds	r3, r3, #1
 3513 038e 1193     		str	r3, [sp, #68]
1378:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 3514              		.loc 1 1378 0 discriminator 2
 3515 0390 119B     		ldr	r3, [sp, #68]
 3516 0392 B3F5803F 		cmp	r3, #65536
 3517 0396 01D0     		beq	.L147
1378:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 3518              		.loc 1 1378 0 is_stmt 0 discriminator 1
 3519 0398 0028     		cmp	r0, #0
 3520 039a F2D1     		bne	.L148
 3521              	.L147:
1380:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 3522              		.loc 1 1380 0 is_stmt 1
 3523 039c 0AB9     		cbnz	r2, .L177
1148:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 3524              		.loc 1 1148 0
 3525 039e 0125     		movs	r5, #1
 3526              	.LVL712:
 3527 03a0 B6E7     		b	.L143
 3528              	.LVL713:
 3529              	.L177:
1382:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 3530              		.loc 1 1382 0
ARM GAS  /tmp/cc1B5Puw.s 			page 107


 3531 03a2 0025     		movs	r5, #0
 3532              	.LVL714:
 3533 03a4 B4E7     		b	.L143
 3534              	.LVL715:
 3535              	.L152:
1427:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
 3536              		.loc 1 1427 0
 3537 03a6 002A     		cmp	r2, #0
 3538 03a8 3CD1     		bne	.L179
 3539              	.LVL716:
 3540              	.L155:
1434:FWLIB/src/stm32f4xx_cryp_aes.c ****           {
 3541              		.loc 1 1434 0 discriminator 1
 3542 03aa 0420     		movs	r0, #4
 3543 03ac FFF7FEFF 		bl	CRYP_GetFlagStatus
 3544              	.LVL717:
 3545 03b0 0028     		cmp	r0, #0
 3546 03b2 FAD0     		beq	.L155
1439:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
 3547              		.loc 1 1439 0
 3548 03b4 FFF7FEFF 		bl	CRYP_DataOut
 3549              	.LVL718:
 3550 03b8 C8F80000 		str	r0, [r8]
 3551              	.LVL719:
1441:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
 3552              		.loc 1 1441 0
 3553 03bc FFF7FEFF 		bl	CRYP_DataOut
 3554              	.LVL720:
 3555 03c0 C8F80400 		str	r0, [r8, #4]
 3556              	.LVL721:
1443:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
 3557              		.loc 1 1443 0
 3558 03c4 FFF7FEFF 		bl	CRYP_DataOut
 3559              	.LVL722:
 3560 03c8 C8F80800 		str	r0, [r8, #8]
 3561              	.LVL723:
1445:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
 3562              		.loc 1 1445 0
 3563 03cc FFF7FEFF 		bl	CRYP_DataOut
 3564              	.LVL724:
 3565 03d0 C8F80C00 		str	r0, [r8, #12]
1446:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
 3566              		.loc 1 1446 0
 3567 03d4 08F11008 		add	r8, r8, #16
 3568              	.LVL725:
 3569              	.L154:
1402:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 3570              		.loc 1 1402 0 discriminator 2
 3571 03d8 1036     		adds	r6, r6, #16
 3572              	.LVL726:
 3573              	.L150:
1402:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 3574              		.loc 1 1402 0 is_stmt 0 discriminator 1
 3575 03da 4E45     		cmp	r6, r9
 3576 03dc 24D2     		bcs	.L149
1402:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 3577              		.loc 1 1402 0 discriminator 3
ARM GAS  /tmp/cc1B5Puw.s 			page 108


 3578 03de 1DB3     		cbz	r5, .L149
 3579              	.L151:
1405:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
 3580              		.loc 1 1405 0 is_stmt 1 discriminator 1
 3581 03e0 0120     		movs	r0, #1
 3582 03e2 FFF7FEFF 		bl	CRYP_GetFlagStatus
 3583              	.LVL727:
 3584 03e6 0028     		cmp	r0, #0
 3585 03e8 FAD0     		beq	.L151
1410:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
 3586              		.loc 1 1410 0
 3587 03ea 2068     		ldr	r0, [r4]
 3588 03ec FFF7FEFF 		bl	CRYP_DataIn
 3589              	.LVL728:
1412:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
 3590              		.loc 1 1412 0
 3591 03f0 6068     		ldr	r0, [r4, #4]
 3592 03f2 FFF7FEFF 		bl	CRYP_DataIn
 3593              	.LVL729:
1414:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
 3594              		.loc 1 1414 0
 3595 03f6 A068     		ldr	r0, [r4, #8]
 3596 03f8 FFF7FEFF 		bl	CRYP_DataIn
 3597              	.LVL730:
1416:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
 3598              		.loc 1 1416 0
 3599 03fc E068     		ldr	r0, [r4, #12]
 3600 03fe FFF7FEFF 		bl	CRYP_DataIn
 3601              	.LVL731:
1417:FWLIB/src/stm32f4xx_cryp_aes.c ****         
 3602              		.loc 1 1417 0
 3603 0402 1034     		adds	r4, r4, #16
 3604              	.LVL732:
1420:FWLIB/src/stm32f4xx_cryp_aes.c ****         do
 3605              		.loc 1 1420 0
 3606 0404 0023     		movs	r3, #0
 3607 0406 1193     		str	r3, [sp, #68]
 3608              	.L153:
1423:FWLIB/src/stm32f4xx_cryp_aes.c ****           counter++;
 3609              		.loc 1 1423 0 discriminator 2
 3610 0408 1020     		movs	r0, #16
 3611 040a FFF7FEFF 		bl	CRYP_GetFlagStatus
 3612              	.LVL733:
 3613 040e 0246     		mov	r2, r0
 3614              	.LVL734:
1424:FWLIB/src/stm32f4xx_cryp_aes.c ****         }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 3615              		.loc 1 1424 0 discriminator 2
 3616 0410 119B     		ldr	r3, [sp, #68]
 3617 0412 0133     		adds	r3, r3, #1
 3618 0414 1193     		str	r3, [sp, #68]
1425:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 3619              		.loc 1 1425 0 discriminator 2
 3620 0416 119B     		ldr	r3, [sp, #68]
 3621 0418 B3F5803F 		cmp	r3, #65536
 3622 041c C3D0     		beq	.L152
1425:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 3623              		.loc 1 1425 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/cc1B5Puw.s 			page 109


 3624 041e 0028     		cmp	r0, #0
 3625 0420 F2D1     		bne	.L153
 3626 0422 C0E7     		b	.L152
 3627              	.L179:
1429:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
 3628              		.loc 1 1429 0 is_stmt 1
 3629 0424 0025     		movs	r5, #0
 3630              	.LVL735:
 3631 0426 D7E7     		b	.L154
 3632              	.LVL736:
 3633              	.L149:
1453:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 3634              		.loc 1 1453 0
 3635 0428 4FF44030 		mov	r0, #196608
 3636 042c FFF7FEFF 		bl	CRYP_PhaseConfig
 3637              	.LVL737:
1456:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 3638              		.loc 1 1456 0
 3639 0430 0120     		movs	r0, #1
 3640 0432 FFF7FEFF 		bl	CRYP_Cmd
 3641              	.LVL738:
1458:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 3642              		.loc 1 1458 0
 3643 0436 FFF7FEFF 		bl	CRYP_GetCmdStatus
 3644              	.LVL739:
 3645 043a 08B9     		cbnz	r0, .L194
1462:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
 3646              		.loc 1 1462 0
 3647 043c 0025     		movs	r5, #0
 3648              	.LVL740:
 3649 043e A4E0     		b	.L144
 3650              	.LVL741:
 3651              	.L194:
1467:FWLIB/src/stm32f4xx_cryp_aes.c ****     ctraddr+=4;
 3652              		.loc 1 1467 0
 3653 0440 0998     		ldr	r0, [sp, #36]
 3654 0442 FFF7FEFF 		bl	CRYP_DataIn
 3655              	.LVL742:
1469:FWLIB/src/stm32f4xx_cryp_aes.c ****     ctraddr+=4;
 3656              		.loc 1 1469 0
 3657 0446 7868     		ldr	r0, [r7, #4]
 3658 0448 FFF7FEFF 		bl	CRYP_DataIn
 3659              	.LVL743:
1471:FWLIB/src/stm32f4xx_cryp_aes.c ****     ctraddr+=4;
 3660              		.loc 1 1471 0
 3661 044c B868     		ldr	r0, [r7, #8]
 3662 044e FFF7FEFF 		bl	CRYP_DataIn
 3663              	.LVL744:
1474:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 3664              		.loc 1 1474 0
 3665 0452 F868     		ldr	r0, [r7, #12]
 3666 0454 20F08070 		bic	r0, r0, #16777216
 3667 0458 FFF7FEFF 		bl	CRYP_DataIn
 3668              	.LVL745:
 3669              	.L156:
1477:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 3670              		.loc 1 1477 0 discriminator 1
ARM GAS  /tmp/cc1B5Puw.s 			page 110


 3671 045c 0420     		movs	r0, #4
 3672 045e FFF7FEFF 		bl	CRYP_GetFlagStatus
 3673              	.LVL746:
 3674 0462 0028     		cmp	r0, #0
 3675 0464 FAD0     		beq	.L156
1482:FWLIB/src/stm32f4xx_cryp_aes.c ****     temptag[1] = CRYP_DataOut();
 3676              		.loc 1 1482 0
 3677 0466 FFF7FEFF 		bl	CRYP_DataOut
 3678              	.LVL747:
 3679 046a 0590     		str	r0, [sp, #20]
1483:FWLIB/src/stm32f4xx_cryp_aes.c ****     temptag[2] = CRYP_DataOut();
 3680              		.loc 1 1483 0
 3681 046c FFF7FEFF 		bl	CRYP_DataOut
 3682              	.LVL748:
 3683 0470 0690     		str	r0, [sp, #24]
1484:FWLIB/src/stm32f4xx_cryp_aes.c ****     temptag[3] = CRYP_DataOut();
 3684              		.loc 1 1484 0
 3685 0472 FFF7FEFF 		bl	CRYP_DataOut
 3686              	.LVL749:
 3687 0476 0790     		str	r0, [sp, #28]
1485:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 3688              		.loc 1 1485 0
 3689 0478 FFF7FEFF 		bl	CRYP_DataOut
 3690              	.LVL750:
 3691 047c 0890     		str	r0, [sp, #32]
 3692 047e A7E0     		b	.L157
 3693              	.LVL751:
 3694              	.L192:
1531:FWLIB/src/stm32f4xx_cryp_aes.c ****       
 3695              		.loc 1 1531 0
 3696 0480 4FF48030 		mov	r0, #65536
 3697 0484 FFF7FEFF 		bl	CRYP_PhaseConfig
 3698              	.LVL752:
1534:FWLIB/src/stm32f4xx_cryp_aes.c ****       
 3699              		.loc 1 1534 0
 3700 0488 0120     		movs	r0, #1
 3701 048a FFF7FEFF 		bl	CRYP_Cmd
 3702              	.LVL753:
1536:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 3703              		.loc 1 1536 0
 3704 048e FFF7FEFF 		bl	CRYP_GetCmdStatus
 3705              	.LVL754:
 3706 0492 0028     		cmp	r0, #0
 3707 0494 00F0AE80 		beq	.L182
 3708 0498 4FF0000A 		mov	r10, #0
 3709              	.LVL755:
 3710 049c 13E0     		b	.L160
 3711              	.LVL756:
 3712              	.L161:
1546:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
 3713              		.loc 1 1546 0 discriminator 1
 3714 049e 0120     		movs	r0, #1
 3715 04a0 FFF7FEFF 		bl	CRYP_GetFlagStatus
 3716              	.LVL757:
 3717 04a4 0028     		cmp	r0, #0
 3718 04a6 FAD0     		beq	.L161
1551:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
ARM GAS  /tmp/cc1B5Puw.s 			page 111


 3719              		.loc 1 1551 0 discriminator 2
 3720 04a8 3068     		ldr	r0, [r6]
 3721 04aa FFF7FEFF 		bl	CRYP_DataIn
 3722              	.LVL758:
1553:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
 3723              		.loc 1 1553 0 discriminator 2
 3724 04ae 7068     		ldr	r0, [r6, #4]
 3725 04b0 FFF7FEFF 		bl	CRYP_DataIn
 3726              	.LVL759:
1555:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
 3727              		.loc 1 1555 0 discriminator 2
 3728 04b4 B068     		ldr	r0, [r6, #8]
 3729 04b6 FFF7FEFF 		bl	CRYP_DataIn
 3730              	.LVL760:
1557:FWLIB/src/stm32f4xx_cryp_aes.c ****         headeraddr+=4;
 3731              		.loc 1 1557 0 discriminator 2
 3732 04ba F068     		ldr	r0, [r6, #12]
 3733 04bc FFF7FEFF 		bl	CRYP_DataIn
 3734              	.LVL761:
1558:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 3735              		.loc 1 1558 0 discriminator 2
 3736 04c0 1036     		adds	r6, r6, #16
 3737              	.LVL762:
1543:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 3738              		.loc 1 1543 0 discriminator 2
 3739 04c2 0AF1100A 		add	r10, r10, #16
 3740              	.LVL763:
 3741              	.L160:
1543:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 3742              		.loc 1 1543 0 is_stmt 0 discriminator 1
 3743 04c6 5545     		cmp	r5, r10
 3744 04c8 E9D8     		bhi	.L161
1562:FWLIB/src/stm32f4xx_cryp_aes.c ****       do
 3745              		.loc 1 1562 0 is_stmt 1
 3746 04ca 0023     		movs	r3, #0
 3747 04cc 1193     		str	r3, [sp, #68]
 3748              	.LVL764:
 3749              	.L163:
1565:FWLIB/src/stm32f4xx_cryp_aes.c ****         counter++;
 3750              		.loc 1 1565 0 discriminator 2
 3751 04ce 1020     		movs	r0, #16
 3752 04d0 FFF7FEFF 		bl	CRYP_GetFlagStatus
 3753              	.LVL765:
 3754 04d4 0246     		mov	r2, r0
 3755              	.LVL766:
1566:FWLIB/src/stm32f4xx_cryp_aes.c ****       }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 3756              		.loc 1 1566 0 discriminator 2
 3757 04d6 119B     		ldr	r3, [sp, #68]
 3758 04d8 0133     		adds	r3, r3, #1
 3759 04da 1193     		str	r3, [sp, #68]
1567:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 3760              		.loc 1 1567 0 discriminator 2
 3761 04dc 119B     		ldr	r3, [sp, #68]
 3762 04de B3F5803F 		cmp	r3, #65536
 3763 04e2 01D0     		beq	.L162
1567:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 3764              		.loc 1 1567 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/cc1B5Puw.s 			page 112


 3765 04e4 0028     		cmp	r0, #0
 3766 04e6 F2D1     		bne	.L163
 3767              	.L162:
1569:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 3768              		.loc 1 1569 0 is_stmt 1
 3769 04e8 0AB9     		cbnz	r2, .L183
1148:FWLIB/src/stm32f4xx_cryp_aes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 3770              		.loc 1 1148 0
 3771 04ea 0125     		movs	r5, #1
 3772              	.LVL767:
 3773 04ec 7CE6     		b	.L159
 3774              	.LVL768:
 3775              	.L183:
1571:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 3776              		.loc 1 1571 0
 3777 04ee 0025     		movs	r5, #0
 3778              	.LVL769:
 3779 04f0 7AE6     		b	.L159
 3780              	.LVL770:
 3781              	.L167:
1585:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
1586:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* The CRYP peripheral clock is not enabled or the device doesn't embed 
1587:FWLIB/src/stm32f4xx_cryp_aes.c ****            the CRYP peripheral (please check the device sales type. */
1588:FWLIB/src/stm32f4xx_cryp_aes.c ****         return(ERROR);
1589:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
1590:FWLIB/src/stm32f4xx_cryp_aes.c ****       
1591:FWLIB/src/stm32f4xx_cryp_aes.c ****       for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
1592:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
1593:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Wait until the IFEM flag is reset */
1594:FWLIB/src/stm32f4xx_cryp_aes.c ****         while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
1595:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
1596:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
1597:FWLIB/src/stm32f4xx_cryp_aes.c ****         
1598:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Write the Input block in the IN FIFO */
1599:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(inputaddr));
1600:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
1601:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(inputaddr));
1602:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
1603:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(inputaddr));
1604:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
1605:FWLIB/src/stm32f4xx_cryp_aes.c ****         CRYP_DataIn(*(uint32_t*)(inputaddr));
1606:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
1607:FWLIB/src/stm32f4xx_cryp_aes.c ****         
1608:FWLIB/src/stm32f4xx_cryp_aes.c ****         /* Wait until the complete message has been processed */
1609:FWLIB/src/stm32f4xx_cryp_aes.c ****         counter = 0;
1610:FWLIB/src/stm32f4xx_cryp_aes.c ****         do
1611:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
1612:FWLIB/src/stm32f4xx_cryp_aes.c ****           busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
1613:FWLIB/src/stm32f4xx_cryp_aes.c ****           counter++;
1614:FWLIB/src/stm32f4xx_cryp_aes.c ****         }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
1615:FWLIB/src/stm32f4xx_cryp_aes.c **** 
1616:FWLIB/src/stm32f4xx_cryp_aes.c ****         if (busystatus != RESET)
 3782              		.loc 1 1616 0
 3783 04f2 002A     		cmp	r2, #0
 3784 04f4 3CD1     		bne	.L185
 3785              	.LVL771:
 3786              	.L170:
ARM GAS  /tmp/cc1B5Puw.s 			page 113


1617:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
1618:FWLIB/src/stm32f4xx_cryp_aes.c ****           status = ERROR;
1619:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
1620:FWLIB/src/stm32f4xx_cryp_aes.c ****         else
1621:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
1622:FWLIB/src/stm32f4xx_cryp_aes.c ****           /* Wait until the OFNE flag is reset */
1623:FWLIB/src/stm32f4xx_cryp_aes.c ****           while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 3787              		.loc 1 1623 0 discriminator 1
 3788 04f6 0420     		movs	r0, #4
 3789 04f8 FFF7FEFF 		bl	CRYP_GetFlagStatus
 3790              	.LVL772:
 3791 04fc 0028     		cmp	r0, #0
 3792 04fe FAD0     		beq	.L170
1624:FWLIB/src/stm32f4xx_cryp_aes.c ****           {
1625:FWLIB/src/stm32f4xx_cryp_aes.c ****           }
1626:FWLIB/src/stm32f4xx_cryp_aes.c ****           
1627:FWLIB/src/stm32f4xx_cryp_aes.c ****           /* Read the Output block from the Output FIFO */
1628:FWLIB/src/stm32f4xx_cryp_aes.c ****           *(uint32_t*)(outputaddr) = CRYP_DataOut();
 3793              		.loc 1 1628 0
 3794 0500 FFF7FEFF 		bl	CRYP_DataOut
 3795              	.LVL773:
 3796 0504 C8F80000 		str	r0, [r8]
 3797              	.LVL774:
1629:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
1630:FWLIB/src/stm32f4xx_cryp_aes.c ****           *(uint32_t*)(outputaddr) = CRYP_DataOut();
 3798              		.loc 1 1630 0
 3799 0508 FFF7FEFF 		bl	CRYP_DataOut
 3800              	.LVL775:
 3801 050c C8F80400 		str	r0, [r8, #4]
 3802              	.LVL776:
1631:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
1632:FWLIB/src/stm32f4xx_cryp_aes.c ****           *(uint32_t*)(outputaddr) = CRYP_DataOut();
 3803              		.loc 1 1632 0
 3804 0510 FFF7FEFF 		bl	CRYP_DataOut
 3805              	.LVL777:
 3806 0514 C8F80800 		str	r0, [r8, #8]
 3807              	.LVL778:
1633:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
1634:FWLIB/src/stm32f4xx_cryp_aes.c ****           *(uint32_t*)(outputaddr) = CRYP_DataOut();
 3808              		.loc 1 1634 0
 3809 0518 FFF7FEFF 		bl	CRYP_DataOut
 3810              	.LVL779:
 3811 051c C8F80C00 		str	r0, [r8, #12]
1635:FWLIB/src/stm32f4xx_cryp_aes.c ****           outputaddr+=4;
 3812              		.loc 1 1635 0
 3813 0520 08F11008 		add	r8, r8, #16
 3814              	.LVL780:
 3815              	.L169:
1591:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 3816              		.loc 1 1591 0 discriminator 2
 3817 0524 1036     		adds	r6, r6, #16
 3818              	.LVL781:
 3819              	.L165:
1591:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 3820              		.loc 1 1591 0 is_stmt 0 discriminator 1
 3821 0526 4E45     		cmp	r6, r9
 3822 0528 24D2     		bcs	.L164
ARM GAS  /tmp/cc1B5Puw.s 			page 114


1591:FWLIB/src/stm32f4xx_cryp_aes.c ****       {
 3823              		.loc 1 1591 0 discriminator 3
 3824 052a 1DB3     		cbz	r5, .L164
 3825              	.L166:
1594:FWLIB/src/stm32f4xx_cryp_aes.c ****         {
 3826              		.loc 1 1594 0 is_stmt 1 discriminator 1
 3827 052c 0120     		movs	r0, #1
 3828 052e FFF7FEFF 		bl	CRYP_GetFlagStatus
 3829              	.LVL782:
 3830 0532 0028     		cmp	r0, #0
 3831 0534 FAD0     		beq	.L166
1599:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
 3832              		.loc 1 1599 0
 3833 0536 2068     		ldr	r0, [r4]
 3834 0538 FFF7FEFF 		bl	CRYP_DataIn
 3835              	.LVL783:
1601:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
 3836              		.loc 1 1601 0
 3837 053c 6068     		ldr	r0, [r4, #4]
 3838 053e FFF7FEFF 		bl	CRYP_DataIn
 3839              	.LVL784:
1603:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
 3840              		.loc 1 1603 0
 3841 0542 A068     		ldr	r0, [r4, #8]
 3842 0544 FFF7FEFF 		bl	CRYP_DataIn
 3843              	.LVL785:
1605:FWLIB/src/stm32f4xx_cryp_aes.c ****         inputaddr+=4;
 3844              		.loc 1 1605 0
 3845 0548 E068     		ldr	r0, [r4, #12]
 3846 054a FFF7FEFF 		bl	CRYP_DataIn
 3847              	.LVL786:
1606:FWLIB/src/stm32f4xx_cryp_aes.c ****         
 3848              		.loc 1 1606 0
 3849 054e 1034     		adds	r4, r4, #16
 3850              	.LVL787:
1609:FWLIB/src/stm32f4xx_cryp_aes.c ****         do
 3851              		.loc 1 1609 0
 3852 0550 0023     		movs	r3, #0
 3853 0552 1193     		str	r3, [sp, #68]
 3854              	.L168:
1612:FWLIB/src/stm32f4xx_cryp_aes.c ****           counter++;
 3855              		.loc 1 1612 0 discriminator 2
 3856 0554 1020     		movs	r0, #16
 3857 0556 FFF7FEFF 		bl	CRYP_GetFlagStatus
 3858              	.LVL788:
 3859 055a 0246     		mov	r2, r0
 3860              	.LVL789:
1613:FWLIB/src/stm32f4xx_cryp_aes.c ****         }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 3861              		.loc 1 1613 0 discriminator 2
 3862 055c 119B     		ldr	r3, [sp, #68]
 3863 055e 0133     		adds	r3, r3, #1
 3864 0560 1193     		str	r3, [sp, #68]
1614:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 3865              		.loc 1 1614 0 discriminator 2
 3866 0562 119B     		ldr	r3, [sp, #68]
 3867 0564 B3F5803F 		cmp	r3, #65536
 3868 0568 C3D0     		beq	.L167
ARM GAS  /tmp/cc1B5Puw.s 			page 115


1614:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 3869              		.loc 1 1614 0 is_stmt 0 discriminator 1
 3870 056a 0028     		cmp	r0, #0
 3871 056c F2D1     		bne	.L168
 3872 056e C0E7     		b	.L167
 3873              	.L185:
1618:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
 3874              		.loc 1 1618 0 is_stmt 1
 3875 0570 0025     		movs	r5, #0
 3876              	.LVL790:
 3877 0572 D7E7     		b	.L169
 3878              	.LVL791:
 3879              	.L164:
1636:FWLIB/src/stm32f4xx_cryp_aes.c ****         }
1637:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
1638:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
1639:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1640:FWLIB/src/stm32f4xx_cryp_aes.c ****     /***************************** final phase ********************************/
1641:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Select final phase */
1642:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_PhaseConfig(CRYP_Phase_Final);
 3880              		.loc 1 1642 0
 3881 0574 4FF44030 		mov	r0, #196608
 3882 0578 FFF7FEFF 		bl	CRYP_PhaseConfig
 3883              	.LVL792:
1643:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1644:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Enable Crypto processor */
1645:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_Cmd(ENABLE);
 3884              		.loc 1 1645 0
 3885 057c 0120     		movs	r0, #1
 3886 057e FFF7FEFF 		bl	CRYP_Cmd
 3887              	.LVL793:
1646:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1647:FWLIB/src/stm32f4xx_cryp_aes.c ****     if(CRYP_GetCmdStatus() == DISABLE)
 3888              		.loc 1 1647 0
 3889 0582 FFF7FEFF 		bl	CRYP_GetCmdStatus
 3890              	.LVL794:
 3891 0586 20B9     		cbnz	r0, .L195
1648:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
1649:FWLIB/src/stm32f4xx_cryp_aes.c ****       /* The CRYP peripheral clock is not enabled or the device doesn't embed 
1650:FWLIB/src/stm32f4xx_cryp_aes.c ****          the CRYP peripheral (please check the device sales type. */
1651:FWLIB/src/stm32f4xx_cryp_aes.c ****       return(ERROR);
 3892              		.loc 1 1651 0
 3893 0588 0025     		movs	r5, #0
 3894              	.LVL795:
 3895              	.L144:
1652:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
1653:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1654:FWLIB/src/stm32f4xx_cryp_aes.c ****     ctraddr = (uint32_t)ctr;
1655:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Write the counter block in the IN FIFO */
1656:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(ctraddr));
1657:FWLIB/src/stm32f4xx_cryp_aes.c ****     ctraddr+=4;
1658:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(ctraddr));
1659:FWLIB/src/stm32f4xx_cryp_aes.c ****     ctraddr+=4;
1660:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(ctraddr));
1661:FWLIB/src/stm32f4xx_cryp_aes.c ****     ctraddr+=4;
1662:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Reset bit 0 (after 8-bit swap) is equivalent to reset bit 24 (before 8-bit swap) */
1663:FWLIB/src/stm32f4xx_cryp_aes.c ****     CRYP_DataIn(*(uint32_t*)(ctraddr) & 0xfeffffff);
ARM GAS  /tmp/cc1B5Puw.s 			page 116


1664:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1665:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Wait until the OFNE flag is reset */
1666:FWLIB/src/stm32f4xx_cryp_aes.c ****     while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
1667:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
1668:FWLIB/src/stm32f4xx_cryp_aes.c ****     }
1669:FWLIB/src/stm32f4xx_cryp_aes.c ****     
1670:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Read the Authentification TAG (MAC) in the IN FIFO */
1671:FWLIB/src/stm32f4xx_cryp_aes.c ****     temptag[0] = CRYP_DataOut();
1672:FWLIB/src/stm32f4xx_cryp_aes.c ****     temptag[1] = CRYP_DataOut();
1673:FWLIB/src/stm32f4xx_cryp_aes.c ****     temptag[2] = CRYP_DataOut();
1674:FWLIB/src/stm32f4xx_cryp_aes.c ****     temptag[3] = CRYP_DataOut();
1675:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
1676:FWLIB/src/stm32f4xx_cryp_aes.c ****   
1677:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Copy temporary authentication TAG in user TAG buffer */
1678:FWLIB/src/stm32f4xx_cryp_aes.c ****   for(loopcounter = 0; (loopcounter < TAGSize); loopcounter++)
1679:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
1680:FWLIB/src/stm32f4xx_cryp_aes.c ****     /* Set the authentication TAG buffer */
1681:FWLIB/src/stm32f4xx_cryp_aes.c ****     *((uint8_t*)tagaddr+loopcounter) = *((uint8_t*)temptag+loopcounter);
1682:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
1683:FWLIB/src/stm32f4xx_cryp_aes.c ****   
1684:FWLIB/src/stm32f4xx_cryp_aes.c ****   /* Disable Crypto */
1685:FWLIB/src/stm32f4xx_cryp_aes.c ****   CRYP_Cmd(DISABLE);
1686:FWLIB/src/stm32f4xx_cryp_aes.c **** 
1687:FWLIB/src/stm32f4xx_cryp_aes.c ****   return status;
1688:FWLIB/src/stm32f4xx_cryp_aes.c **** }
 3896              		.loc 1 1688 0
 3897 058a 2846     		mov	r0, r5
 3898 058c 23B0     		add	sp, sp, #140
 3899              	.LCFI18:
 3900              		.cfi_remember_state
 3901              		.cfi_def_cfa_offset 36
 3902              		@ sp needed
 3903 058e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3904              	.LVL796:
 3905              	.L195:
 3906              	.LCFI19:
 3907              		.cfi_restore_state
1656:FWLIB/src/stm32f4xx_cryp_aes.c ****     ctraddr+=4;
 3908              		.loc 1 1656 0
 3909 0592 0998     		ldr	r0, [sp, #36]
 3910 0594 FFF7FEFF 		bl	CRYP_DataIn
 3911              	.LVL797:
1658:FWLIB/src/stm32f4xx_cryp_aes.c ****     ctraddr+=4;
 3912              		.loc 1 1658 0
 3913 0598 7868     		ldr	r0, [r7, #4]
 3914 059a FFF7FEFF 		bl	CRYP_DataIn
 3915              	.LVL798:
1660:FWLIB/src/stm32f4xx_cryp_aes.c ****     ctraddr+=4;
 3916              		.loc 1 1660 0
 3917 059e B868     		ldr	r0, [r7, #8]
 3918 05a0 FFF7FEFF 		bl	CRYP_DataIn
 3919              	.LVL799:
1663:FWLIB/src/stm32f4xx_cryp_aes.c ****     
 3920              		.loc 1 1663 0
 3921 05a4 F868     		ldr	r0, [r7, #12]
 3922 05a6 20F08070 		bic	r0, r0, #16777216
 3923 05aa FFF7FEFF 		bl	CRYP_DataIn
ARM GAS  /tmp/cc1B5Puw.s 			page 117


 3924              	.LVL800:
 3925              	.L171:
1666:FWLIB/src/stm32f4xx_cryp_aes.c ****     {
 3926              		.loc 1 1666 0 discriminator 1
 3927 05ae 0420     		movs	r0, #4
 3928 05b0 FFF7FEFF 		bl	CRYP_GetFlagStatus
 3929              	.LVL801:
 3930 05b4 0028     		cmp	r0, #0
 3931 05b6 FAD0     		beq	.L171
1671:FWLIB/src/stm32f4xx_cryp_aes.c ****     temptag[1] = CRYP_DataOut();
 3932              		.loc 1 1671 0
 3933 05b8 FFF7FEFF 		bl	CRYP_DataOut
 3934              	.LVL802:
 3935 05bc 0590     		str	r0, [sp, #20]
1672:FWLIB/src/stm32f4xx_cryp_aes.c ****     temptag[2] = CRYP_DataOut();
 3936              		.loc 1 1672 0
 3937 05be FFF7FEFF 		bl	CRYP_DataOut
 3938              	.LVL803:
 3939 05c2 0690     		str	r0, [sp, #24]
1673:FWLIB/src/stm32f4xx_cryp_aes.c ****     temptag[3] = CRYP_DataOut();
 3940              		.loc 1 1673 0
 3941 05c4 FFF7FEFF 		bl	CRYP_DataOut
 3942              	.LVL804:
 3943 05c8 0790     		str	r0, [sp, #28]
1674:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 3944              		.loc 1 1674 0
 3945 05ca FFF7FEFF 		bl	CRYP_DataOut
 3946              	.LVL805:
 3947 05ce 0890     		str	r0, [sp, #32]
 3948              	.LVL806:
 3949              	.L157:
1678:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 3950              		.loc 1 1678 0
 3951 05d0 0023     		movs	r3, #0
 3952 05d2 3499     		ldr	r1, [sp, #208]
 3953 05d4 04E0     		b	.L172
 3954              	.LVL807:
 3955              	.L173:
1681:FWLIB/src/stm32f4xx_cryp_aes.c ****   }
 3956              		.loc 1 1681 0 discriminator 3
 3957 05d6 05AA     		add	r2, sp, #20
 3958 05d8 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 3959 05da 03F80B20 		strb	r2, [r3, fp]
1678:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 3960              		.loc 1 1678 0 discriminator 3
 3961 05de 0133     		adds	r3, r3, #1
 3962              	.LVL808:
 3963              	.L172:
1678:FWLIB/src/stm32f4xx_cryp_aes.c ****   {
 3964              		.loc 1 1678 0 is_stmt 0 discriminator 1
 3965 05e0 8B42     		cmp	r3, r1
 3966 05e2 F8D3     		bcc	.L173
1685:FWLIB/src/stm32f4xx_cryp_aes.c **** 
 3967              		.loc 1 1685 0 is_stmt 1
 3968 05e4 0020     		movs	r0, #0
 3969 05e6 FFF7FEFF 		bl	CRYP_Cmd
 3970              	.LVL809:
ARM GAS  /tmp/cc1B5Puw.s 			page 118


1687:FWLIB/src/stm32f4xx_cryp_aes.c **** }
 3971              		.loc 1 1687 0
 3972 05ea CEE7     		b	.L144
 3973              	.LVL810:
 3974              	.L176:
1351:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 3975              		.loc 1 1351 0
 3976 05ec 0025     		movs	r5, #0
 3977              	.LVL811:
 3978 05ee CCE7     		b	.L144
 3979              	.LVL812:
 3980              	.L178:
1399:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 3981              		.loc 1 1399 0
 3982 05f0 0025     		movs	r5, #0
 3983              	.LVL813:
 3984 05f2 CAE7     		b	.L144
 3985              	.LVL814:
 3986              	.L182:
1540:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 3987              		.loc 1 1540 0
 3988 05f4 0025     		movs	r5, #0
 3989              	.LVL815:
 3990 05f6 C8E7     		b	.L144
 3991              	.LVL816:
 3992              	.L184:
1588:FWLIB/src/stm32f4xx_cryp_aes.c ****       }
 3993              		.loc 1 1588 0
 3994 05f8 0025     		movs	r5, #0
 3995              	.LVL817:
 3996 05fa C6E7     		b	.L144
 3997              		.cfi_endproc
 3998              	.LFE127:
 4000              		.text
 4001              	.Letext0:
 4002              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 4003              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 4004              		.file 5 "F4_CORE/core_cm4.h"
 4005              		.file 6 "USER/system_stm32f4xx.h"
 4006              		.file 7 "USER/stm32f4xx.h"
 4007              		.file 8 "FWLIB/inc/stm32f4xx_cryp.h"
ARM GAS  /tmp/cc1B5Puw.s 			page 119


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_cryp_aes.c
     /tmp/cc1B5Puw.s:18     .text.CRYP_AES_ECB:0000000000000000 $t
     /tmp/cc1B5Puw.s:25     .text.CRYP_AES_ECB:0000000000000000 CRYP_AES_ECB
     /tmp/cc1B5Puw.s:534    .text.CRYP_AES_CBC:0000000000000000 $t
     /tmp/cc1B5Puw.s:541    .text.CRYP_AES_CBC:0000000000000000 CRYP_AES_CBC
     /tmp/cc1B5Puw.s:1107   .text.CRYP_AES_CTR:0000000000000000 $t
     /tmp/cc1B5Puw.s:1114   .text.CRYP_AES_CTR:0000000000000000 CRYP_AES_CTR
     /tmp/cc1B5Puw.s:1624   .text.CRYP_AES_GCM:0000000000000000 $t
     /tmp/cc1B5Puw.s:1631   .text.CRYP_AES_GCM:0000000000000000 CRYP_AES_GCM
     /tmp/cc1B5Puw.s:2696   .text.CRYP_AES_CCM:0000000000000000 $t
     /tmp/cc1B5Puw.s:2703   .text.CRYP_AES_CCM:0000000000000000 CRYP_AES_CCM
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
CRYP_KeyStructInit
CRYP_FIFOFlush
CRYP_Init
CRYP_KeyInit
CRYP_Cmd
CRYP_GetFlagStatus
CRYP_GetCmdStatus
CRYP_DataIn
CRYP_DataOut
CRYP_IVInit
CRYP_PhaseConfig
