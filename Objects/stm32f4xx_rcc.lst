ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_rcc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.RCC_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	RCC_DeInit
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	RCC_DeInit:
  27              	.LFB123:
  28              		.file 1 "FWLIB/src/stm32f4xx_rcc.c"
   1:FWLIB/src/stm32f4xx_rcc.c **** /**
   2:FWLIB/src/stm32f4xx_rcc.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_rcc.c ****   * @file    stm32f4xx_rcc.c
   4:FWLIB/src/stm32f4xx_rcc.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_rcc.c ****   * @version V1.8.0
   6:FWLIB/src/stm32f4xx_rcc.c ****   * @date    04-November-2016
   7:FWLIB/src/stm32f4xx_rcc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:FWLIB/src/stm32f4xx_rcc.c ****   *          functionalities of the Reset and clock control (RCC) peripheral:
   9:FWLIB/src/stm32f4xx_rcc.c ****   *           + Internal/external clocks, PLL, CSS and MCO configuration
  10:FWLIB/src/stm32f4xx_rcc.c ****   *           + System, AHB and APB busses clocks configuration
  11:FWLIB/src/stm32f4xx_rcc.c ****   *           + Peripheral clocks configuration
  12:FWLIB/src/stm32f4xx_rcc.c ****   *           + Interrupts and flags management
  13:FWLIB/src/stm32f4xx_rcc.c ****   *
  14:FWLIB/src/stm32f4xx_rcc.c ****  @verbatim
  15:FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================
  16:FWLIB/src/stm32f4xx_rcc.c ****                       ##### RCC specific features #####
  17:FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================
  18:FWLIB/src/stm32f4xx_rcc.c ****     [..]  
  19:FWLIB/src/stm32f4xx_rcc.c ****       After reset the device is running from Internal High Speed oscillator 
  20:FWLIB/src/stm32f4xx_rcc.c ****       (HSI 16MHz) with Flash 0 wait state, Flash prefetch buffer, D-Cache 
  21:FWLIB/src/stm32f4xx_rcc.c ****       and I-Cache are disabled, and all peripherals are off except internal
  22:FWLIB/src/stm32f4xx_rcc.c ****       SRAM, Flash and JTAG.
  23:FWLIB/src/stm32f4xx_rcc.c ****       (+) There is no prescaler on High speed (AHB) and Low speed (APB) busses;
  24:FWLIB/src/stm32f4xx_rcc.c ****           all peripherals mapped on these busses are running at HSI speed.
  25:FWLIB/src/stm32f4xx_rcc.c ****       (+) The clock for all peripherals is switched off, except the SRAM and FLASH.
  26:FWLIB/src/stm32f4xx_rcc.c ****       (+) All GPIOs are in input floating state, except the JTAG pins which
  27:FWLIB/src/stm32f4xx_rcc.c ****           are assigned to be used for debug purpose.
  28:FWLIB/src/stm32f4xx_rcc.c ****     [..]          
  29:FWLIB/src/stm32f4xx_rcc.c ****       Once the device started from reset, the user application has to:
  30:FWLIB/src/stm32f4xx_rcc.c ****       (+) Configure the clock source to be used to drive the System clock
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 2


  31:FWLIB/src/stm32f4xx_rcc.c ****           (if the application needs higher frequency/performance)
  32:FWLIB/src/stm32f4xx_rcc.c ****       (+) Configure the System clock frequency and Flash settings  
  33:FWLIB/src/stm32f4xx_rcc.c ****       (+) Configure the AHB and APB busses prescalers
  34:FWLIB/src/stm32f4xx_rcc.c ****       (+) Enable the clock for the peripheral(s) to be used
  35:FWLIB/src/stm32f4xx_rcc.c ****       (+) Configure the clock source(s) for peripherals which clocks are not
  36:FWLIB/src/stm32f4xx_rcc.c ****           derived from the System clock (I2S, RTC, ADC, USB OTG FS/SDIO/RNG)
  37:FWLIB/src/stm32f4xx_rcc.c ****  @endverbatim    
  38:FWLIB/src/stm32f4xx_rcc.c ****   ******************************************************************************
  39:FWLIB/src/stm32f4xx_rcc.c ****   * @attention
  40:FWLIB/src/stm32f4xx_rcc.c ****   *
  41:FWLIB/src/stm32f4xx_rcc.c ****   * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
  42:FWLIB/src/stm32f4xx_rcc.c ****   *
  43:FWLIB/src/stm32f4xx_rcc.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  44:FWLIB/src/stm32f4xx_rcc.c ****   * You may not use this file except in compliance with the License.
  45:FWLIB/src/stm32f4xx_rcc.c ****   * You may obtain a copy of the License at:
  46:FWLIB/src/stm32f4xx_rcc.c ****   *
  47:FWLIB/src/stm32f4xx_rcc.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  48:FWLIB/src/stm32f4xx_rcc.c ****   *
  49:FWLIB/src/stm32f4xx_rcc.c ****   * Unless required by applicable law or agreed to in writing, software 
  50:FWLIB/src/stm32f4xx_rcc.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  51:FWLIB/src/stm32f4xx_rcc.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  52:FWLIB/src/stm32f4xx_rcc.c ****   * See the License for the specific language governing permissions and
  53:FWLIB/src/stm32f4xx_rcc.c ****   * limitations under the License.
  54:FWLIB/src/stm32f4xx_rcc.c ****   *
  55:FWLIB/src/stm32f4xx_rcc.c ****   ******************************************************************************
  56:FWLIB/src/stm32f4xx_rcc.c ****   */
  57:FWLIB/src/stm32f4xx_rcc.c **** 
  58:FWLIB/src/stm32f4xx_rcc.c **** /* Includes ------------------------------------------------------------------*/
  59:FWLIB/src/stm32f4xx_rcc.c **** #include "stm32f4xx_rcc.h"
  60:FWLIB/src/stm32f4xx_rcc.c **** 
  61:FWLIB/src/stm32f4xx_rcc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  62:FWLIB/src/stm32f4xx_rcc.c ****   * @{
  63:FWLIB/src/stm32f4xx_rcc.c ****   */
  64:FWLIB/src/stm32f4xx_rcc.c **** 
  65:FWLIB/src/stm32f4xx_rcc.c **** /** @defgroup RCC 
  66:FWLIB/src/stm32f4xx_rcc.c ****   * @brief RCC driver modules
  67:FWLIB/src/stm32f4xx_rcc.c ****   * @{
  68:FWLIB/src/stm32f4xx_rcc.c ****   */ 
  69:FWLIB/src/stm32f4xx_rcc.c **** 
  70:FWLIB/src/stm32f4xx_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  71:FWLIB/src/stm32f4xx_rcc.c **** /* Private define ------------------------------------------------------------*/
  72:FWLIB/src/stm32f4xx_rcc.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  73:FWLIB/src/stm32f4xx_rcc.c **** #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
  74:FWLIB/src/stm32f4xx_rcc.c **** /* --- CR Register ---*/
  75:FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of HSION bit */
  76:FWLIB/src/stm32f4xx_rcc.c **** #define CR_OFFSET                 (RCC_OFFSET + 0x00)
  77:FWLIB/src/stm32f4xx_rcc.c **** #define HSION_BitNumber           0x00
  78:FWLIB/src/stm32f4xx_rcc.c **** #define CR_HSION_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (HSION_BitNumber * 4))
  79:FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of CSSON bit */
  80:FWLIB/src/stm32f4xx_rcc.c **** #define CSSON_BitNumber           0x13
  81:FWLIB/src/stm32f4xx_rcc.c **** #define CR_CSSON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))
  82:FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of PLLON bit */
  83:FWLIB/src/stm32f4xx_rcc.c **** #define PLLON_BitNumber           0x18
  84:FWLIB/src/stm32f4xx_rcc.c **** #define CR_PLLON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))
  85:FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of PLLI2SON bit */
  86:FWLIB/src/stm32f4xx_rcc.c **** #define PLLI2SON_BitNumber        0x1A
  87:FWLIB/src/stm32f4xx_rcc.c **** #define CR_PLLI2SON_BB            (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLI2SON_BitNumber * 4))
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 3


  88:FWLIB/src/stm32f4xx_rcc.c **** 
  89:FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of PLLSAION bit */
  90:FWLIB/src/stm32f4xx_rcc.c **** #define PLLSAION_BitNumber        0x1C
  91:FWLIB/src/stm32f4xx_rcc.c **** #define CR_PLLSAION_BB            (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLSAION_BitNumber * 4))
  92:FWLIB/src/stm32f4xx_rcc.c **** 
  93:FWLIB/src/stm32f4xx_rcc.c **** /* --- CFGR Register ---*/
  94:FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of I2SSRC bit */
  95:FWLIB/src/stm32f4xx_rcc.c **** #define CFGR_OFFSET               (RCC_OFFSET + 0x08)
  96:FWLIB/src/stm32f4xx_rcc.c **** #define I2SSRC_BitNumber          0x17
  97:FWLIB/src/stm32f4xx_rcc.c **** #define CFGR_I2SSRC_BB            (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (I2SSRC_BitNumber * 4))
  98:FWLIB/src/stm32f4xx_rcc.c **** 
  99:FWLIB/src/stm32f4xx_rcc.c **** /* --- BDCR Register ---*/
 100:FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of RTCEN bit */
 101:FWLIB/src/stm32f4xx_rcc.c **** #define BDCR_OFFSET               (RCC_OFFSET + 0x70)
 102:FWLIB/src/stm32f4xx_rcc.c **** #define RTCEN_BitNumber           0x0F
 103:FWLIB/src/stm32f4xx_rcc.c **** #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
 104:FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of BDRST bit */
 105:FWLIB/src/stm32f4xx_rcc.c **** #define BDRST_BitNumber           0x10
 106:FWLIB/src/stm32f4xx_rcc.c **** #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))
 107:FWLIB/src/stm32f4xx_rcc.c **** 
 108:FWLIB/src/stm32f4xx_rcc.c **** /* --- CSR Register ---*/
 109:FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of LSION bit */
 110:FWLIB/src/stm32f4xx_rcc.c **** #define CSR_OFFSET                (RCC_OFFSET + 0x74)
 111:FWLIB/src/stm32f4xx_rcc.c **** #define LSION_BitNumber           0x00
 112:FWLIB/src/stm32f4xx_rcc.c **** #define CSR_LSION_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))
 113:FWLIB/src/stm32f4xx_rcc.c **** 
 114:FWLIB/src/stm32f4xx_rcc.c **** /* --- DCKCFGR Register ---*/
 115:FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of TIMPRE bit */
 116:FWLIB/src/stm32f4xx_rcc.c **** #define DCKCFGR_OFFSET            (RCC_OFFSET + 0x8C)
 117:FWLIB/src/stm32f4xx_rcc.c **** #define TIMPRE_BitNumber          0x18
 118:FWLIB/src/stm32f4xx_rcc.c **** #define DCKCFGR_TIMPRE_BB         (PERIPH_BB_BASE + (DCKCFGR_OFFSET * 32) + (TIMPRE_BitNumber * 4))
 119:FWLIB/src/stm32f4xx_rcc.c ****     
 120:FWLIB/src/stm32f4xx_rcc.c **** /* --- CFGR Register ---*/
 121:FWLIB/src/stm32f4xx_rcc.c **** #define RCC_CFGR_OFFSET            (RCC_OFFSET + 0x08)
 122:FWLIB/src/stm32f4xx_rcc.c ****  #if defined(STM32F410xx)
 123:FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of MCO1EN bit */
 124:FWLIB/src/stm32f4xx_rcc.c **** #define RCC_MCO1EN_BIT_NUMBER      0x8
 125:FWLIB/src/stm32f4xx_rcc.c **** #define RCC_CFGR_MCO1EN_BB         (PERIPH_BB_BASE + (RCC_CFGR_OFFSET * 32) + (RCC_MCO1EN_BIT_NUMBE
 126:FWLIB/src/stm32f4xx_rcc.c **** 
 127:FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of MCO2EN bit */
 128:FWLIB/src/stm32f4xx_rcc.c **** #define RCC_MCO2EN_BIT_NUMBER      0x9
 129:FWLIB/src/stm32f4xx_rcc.c **** #define RCC_CFGR_MCO2EN_BB         (PERIPH_BB_BASE + (RCC_CFGR_OFFSET * 32) + (RCC_MCO2EN_BIT_NUMBE
 130:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F410xx */
 131:FWLIB/src/stm32f4xx_rcc.c **** /* ---------------------- RCC registers bit mask ------------------------ */
 132:FWLIB/src/stm32f4xx_rcc.c **** /* CFGR register bit mask */
 133:FWLIB/src/stm32f4xx_rcc.c **** #define CFGR_MCO2_RESET_MASK      ((uint32_t)0x07FFFFFF)
 134:FWLIB/src/stm32f4xx_rcc.c **** #define CFGR_MCO1_RESET_MASK      ((uint32_t)0xF89FFFFF)
 135:FWLIB/src/stm32f4xx_rcc.c **** 
 136:FWLIB/src/stm32f4xx_rcc.c **** /* RCC Flag Mask */
 137:FWLIB/src/stm32f4xx_rcc.c **** #define FLAG_MASK                 ((uint8_t)0x1F)
 138:FWLIB/src/stm32f4xx_rcc.c **** 
 139:FWLIB/src/stm32f4xx_rcc.c **** /* CR register byte 3 (Bits[23:16]) base address */
 140:FWLIB/src/stm32f4xx_rcc.c **** #define CR_BYTE3_ADDRESS          ((uint32_t)0x40023802)
 141:FWLIB/src/stm32f4xx_rcc.c **** 
 142:FWLIB/src/stm32f4xx_rcc.c **** /* CIR register byte 2 (Bits[15:8]) base address */
 143:FWLIB/src/stm32f4xx_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x01))
 144:FWLIB/src/stm32f4xx_rcc.c **** 
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 4


 145:FWLIB/src/stm32f4xx_rcc.c **** /* CIR register byte 3 (Bits[23:16]) base address */
 146:FWLIB/src/stm32f4xx_rcc.c **** #define CIR_BYTE3_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x02))
 147:FWLIB/src/stm32f4xx_rcc.c **** 
 148:FWLIB/src/stm32f4xx_rcc.c **** /* BDCR register base address */
 149:FWLIB/src/stm32f4xx_rcc.c **** #define BDCR_ADDRESS              (PERIPH_BASE + BDCR_OFFSET)
 150:FWLIB/src/stm32f4xx_rcc.c **** 
 151:FWLIB/src/stm32f4xx_rcc.c **** /* Private macro -------------------------------------------------------------*/
 152:FWLIB/src/stm32f4xx_rcc.c **** /* Private variables ---------------------------------------------------------*/
 153:FWLIB/src/stm32f4xx_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 154:FWLIB/src/stm32f4xx_rcc.c **** 
 155:FWLIB/src/stm32f4xx_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 156:FWLIB/src/stm32f4xx_rcc.c **** /* Private functions ---------------------------------------------------------*/
 157:FWLIB/src/stm32f4xx_rcc.c **** 
 158:FWLIB/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Private_Functions
 159:FWLIB/src/stm32f4xx_rcc.c ****   * @{
 160:FWLIB/src/stm32f4xx_rcc.c ****   */ 
 161:FWLIB/src/stm32f4xx_rcc.c **** 
 162:FWLIB/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group1 Internal and external clocks, PLL, CSS and MCO configuration functions
 163:FWLIB/src/stm32f4xx_rcc.c ****  *  @brief   Internal and external clocks, PLL, CSS and MCO configuration functions 
 164:FWLIB/src/stm32f4xx_rcc.c ****  *
 165:FWLIB/src/stm32f4xx_rcc.c **** @verbatim   
 166:FWLIB/src/stm32f4xx_rcc.c ****  ===================================================================================
 167:FWLIB/src/stm32f4xx_rcc.c ****  ##### Internal and  external clocks, PLL, CSS and MCO configuration functions #####
 168:FWLIB/src/stm32f4xx_rcc.c ****  ===================================================================================
 169:FWLIB/src/stm32f4xx_rcc.c ****     [..]
 170:FWLIB/src/stm32f4xx_rcc.c ****       This section provide functions allowing to configure the internal/external clocks,
 171:FWLIB/src/stm32f4xx_rcc.c ****       PLLs, CSS and MCO pins.
 172:FWLIB/src/stm32f4xx_rcc.c ****   
 173:FWLIB/src/stm32f4xx_rcc.c ****       (#) HSI (high-speed internal), 16 MHz factory-trimmed RC used directly or through
 174:FWLIB/src/stm32f4xx_rcc.c ****           the PLL as System clock source.
 175:FWLIB/src/stm32f4xx_rcc.c **** 
 176:FWLIB/src/stm32f4xx_rcc.c ****       (#) LSI (low-speed internal), 32 KHz low consumption RC used as IWDG and/or RTC
 177:FWLIB/src/stm32f4xx_rcc.c ****           clock source.
 178:FWLIB/src/stm32f4xx_rcc.c **** 
 179:FWLIB/src/stm32f4xx_rcc.c ****       (#) HSE (high-speed external), 4 to 26 MHz crystal oscillator used directly or
 180:FWLIB/src/stm32f4xx_rcc.c ****           through the PLL as System clock source. Can be used also as RTC clock source.
 181:FWLIB/src/stm32f4xx_rcc.c **** 
 182:FWLIB/src/stm32f4xx_rcc.c ****       (#) LSE (low-speed external), 32 KHz oscillator used as RTC clock source.   
 183:FWLIB/src/stm32f4xx_rcc.c **** 
 184:FWLIB/src/stm32f4xx_rcc.c ****       (#) PLL (clocked by HSI or HSE), featuring two different output clocks:
 185:FWLIB/src/stm32f4xx_rcc.c ****         (++) The first output is used to generate the high speed system clock (up to 168 MHz)
 186:FWLIB/src/stm32f4xx_rcc.c ****         (++) The second output is used to generate the clock for the USB OTG FS (48 MHz),
 187:FWLIB/src/stm32f4xx_rcc.c ****              the random analog generator (<=48 MHz) and the SDIO (<= 48 MHz).
 188:FWLIB/src/stm32f4xx_rcc.c **** 
 189:FWLIB/src/stm32f4xx_rcc.c ****       (#) PLLI2S (clocked by HSI or HSE), used to generate an accurate clock to achieve 
 190:FWLIB/src/stm32f4xx_rcc.c ****           high-quality audio performance on the I2S interface or SAI interface in case 
 191:FWLIB/src/stm32f4xx_rcc.c ****           of STM32F429x/439x devices.
 192:FWLIB/src/stm32f4xx_rcc.c ****      
 193:FWLIB/src/stm32f4xx_rcc.c ****       (#) PLLSAI clocked by (HSI or HSE), used to generate an accurate clock to SAI 
 194:FWLIB/src/stm32f4xx_rcc.c ****           interface and LCD TFT controller available only for STM32F42xxx/43xxx/446xx/469xx/479xx d
 195:FWLIB/src/stm32f4xx_rcc.c ****   
 196:FWLIB/src/stm32f4xx_rcc.c ****       (#) CSS (Clock security system), once enable and if a HSE clock failure occurs 
 197:FWLIB/src/stm32f4xx_rcc.c ****          (HSE used directly or through PLL as System clock source), the System clock
 198:FWLIB/src/stm32f4xx_rcc.c ****          is automatically switched to HSI and an interrupt is generated if enabled. 
 199:FWLIB/src/stm32f4xx_rcc.c ****          The interrupt is linked to the Cortex-M4 NMI (Non-Maskable Interrupt) 
 200:FWLIB/src/stm32f4xx_rcc.c ****          exception vector.   
 201:FWLIB/src/stm32f4xx_rcc.c **** 
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 5


 202:FWLIB/src/stm32f4xx_rcc.c ****       (#) MCO1 (microcontroller clock output), used to output HSI, LSE, HSE or PLL
 203:FWLIB/src/stm32f4xx_rcc.c ****           clock (through a configurable prescaler) on PA8 pin.
 204:FWLIB/src/stm32f4xx_rcc.c **** 
 205:FWLIB/src/stm32f4xx_rcc.c ****       (#) MCO2 (microcontroller clock output), used to output HSE, PLL, SYSCLK or PLLI2S
 206:FWLIB/src/stm32f4xx_rcc.c ****           clock (through a configurable prescaler) on PC9 pin.
 207:FWLIB/src/stm32f4xx_rcc.c ****  @endverbatim
 208:FWLIB/src/stm32f4xx_rcc.c ****   * @{
 209:FWLIB/src/stm32f4xx_rcc.c ****   */
 210:FWLIB/src/stm32f4xx_rcc.c **** 
 211:FWLIB/src/stm32f4xx_rcc.c **** /**
 212:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 213:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 214:FWLIB/src/stm32f4xx_rcc.c ****   *            - HSI ON and used as system clock source
 215:FWLIB/src/stm32f4xx_rcc.c ****   *            - HSE, PLL and PLLI2S OFF
 216:FWLIB/src/stm32f4xx_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 217:FWLIB/src/stm32f4xx_rcc.c ****   *            - CSS, MCO1 and MCO2 OFF
 218:FWLIB/src/stm32f4xx_rcc.c ****   *            - All interrupts disabled
 219:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function doesn't modify the configuration of the
 220:FWLIB/src/stm32f4xx_rcc.c ****   *            - Peripheral clocks  
 221:FWLIB/src/stm32f4xx_rcc.c ****   *            - LSI, LSE and RTC clocks 
 222:FWLIB/src/stm32f4xx_rcc.c ****   * @param  None
 223:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 224:FWLIB/src/stm32f4xx_rcc.c ****   */
 225:FWLIB/src/stm32f4xx_rcc.c **** void RCC_DeInit(void)
 226:FWLIB/src/stm32f4xx_rcc.c **** {
  29              		.loc 1 226 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 227:FWLIB/src/stm32f4xx_rcc.c ****   /* Set HSION bit */
 228:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
  34              		.loc 1 228 3 view .LVU1
  35              		.loc 1 228 11 is_stmt 0 view .LVU2
  36 0000 0E4B     		ldr	r3, .L2
  37 0002 1A68     		ldr	r2, [r3]
  38 0004 42F00102 		orr	r2, r2, #1
  39 0008 1A60     		str	r2, [r3]
 229:FWLIB/src/stm32f4xx_rcc.c **** 
 230:FWLIB/src/stm32f4xx_rcc.c ****   /* Reset CFGR register */
 231:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CFGR = 0x00000000;
  40              		.loc 1 231 3 is_stmt 1 view .LVU3
  41              		.loc 1 231 13 is_stmt 0 view .LVU4
  42 000a 0021     		movs	r1, #0
  43 000c 9960     		str	r1, [r3, #8]
 232:FWLIB/src/stm32f4xx_rcc.c **** 
 233:FWLIB/src/stm32f4xx_rcc.c ****   /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits
 234:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xEAF6FFFF;
  44              		.loc 1 234 3 is_stmt 1 view .LVU5
  45              		.loc 1 234 11 is_stmt 0 view .LVU6
  46 000e 1A68     		ldr	r2, [r3]
  47 0010 22F0A852 		bic	r2, r2, #352321536
  48 0014 22F41022 		bic	r2, r2, #589824
  49 0018 1A60     		str	r2, [r3]
 235:FWLIB/src/stm32f4xx_rcc.c ****   
 236:FWLIB/src/stm32f4xx_rcc.c ****   /* Reset PLLCFGR register */
 237:FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = 0x24003010;
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 6


  50              		.loc 1 237 3 is_stmt 1 view .LVU7
  51              		.loc 1 237 16 is_stmt 0 view .LVU8
  52 001a 094A     		ldr	r2, .L2+4
  53 001c 5A60     		str	r2, [r3, #4]
 238:FWLIB/src/stm32f4xx_rcc.c **** 
 239:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
 240:FWLIB/src/stm32f4xx_rcc.c ****   /* Reset PLLI2SCFGR register */
 241:FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = 0x20003000;
  54              		.loc 1 241 3 is_stmt 1 view .LVU9
  55              		.loc 1 241 19 is_stmt 0 view .LVU10
  56 001e 094A     		ldr	r2, .L2+8
  57 0020 C3F88420 		str	r2, [r3, #132]
 242:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM
 243:FWLIB/src/stm32f4xx_rcc.c **** 
 244:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
 245:FWLIB/src/stm32f4xx_rcc.c ****   /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
 246:FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLSAICFGR = 0x24003000;
  58              		.loc 1 246 3 is_stmt 1 view .LVU11
  59              		.loc 1 246 19 is_stmt 0 view .LVU12
  60 0024 02F18062 		add	r2, r2, #67108864
  61 0028 C3F88820 		str	r2, [r3, #136]
 247:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
 248:FWLIB/src/stm32f4xx_rcc.c ****   
 249:FWLIB/src/stm32f4xx_rcc.c ****   /* Reset HSEBYP bit */
 250:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  62              		.loc 1 250 3 is_stmt 1 view .LVU13
  63              		.loc 1 250 11 is_stmt 0 view .LVU14
  64 002c 1A68     		ldr	r2, [r3]
  65 002e 22F48022 		bic	r2, r2, #262144
  66 0032 1A60     		str	r2, [r3]
 251:FWLIB/src/stm32f4xx_rcc.c **** 
 252:FWLIB/src/stm32f4xx_rcc.c ****   /* Disable all interrupts */
 253:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CIR = 0x00000000;
  67              		.loc 1 253 3 is_stmt 1 view .LVU15
  68              		.loc 1 253 12 is_stmt 0 view .LVU16
  69 0034 D960     		str	r1, [r3, #12]
 254:FWLIB/src/stm32f4xx_rcc.c **** 
 255:FWLIB/src/stm32f4xx_rcc.c ****   /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423
 256:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = 0x00000000;
  70              		.loc 1 256 3 is_stmt 1 view .LVU17
  71              		.loc 1 256 16 is_stmt 0 view .LVU18
  72 0036 C3F88C10 		str	r1, [r3, #140]
 257:FWLIB/src/stm32f4xx_rcc.c ****   
 258:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F410xx) || defined(STM32F413_423xx)
 259:FWLIB/src/stm32f4xx_rcc.c ****   /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F
 260:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR2 = 0x00000000;
 261:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F410xx || STM32F413_423xx */  
 262:FWLIB/src/stm32f4xx_rcc.c **** }
  73              		.loc 1 262 1 view .LVU19
  74 003a 7047     		bx	lr
  75              	.L3:
  76              		.align	2
  77              	.L2:
  78 003c 00380240 		.word	1073887232
  79 0040 10300024 		.word	603992080
  80 0044 00300020 		.word	536883200
  81              		.cfi_endproc
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 7


  82              	.LFE123:
  84              		.section	.text.RCC_HSEConfig,"ax",%progbits
  85              		.align	1
  86              		.global	RCC_HSEConfig
  87              		.syntax unified
  88              		.thumb
  89              		.thumb_func
  90              		.fpu fpv4-sp-d16
  92              	RCC_HSEConfig:
  93              	.LVL0:
  94              	.LFB124:
 263:FWLIB/src/stm32f4xx_rcc.c **** 
 264:FWLIB/src/stm32f4xx_rcc.c **** /**
 265:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 266:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After enabling the HSE (RCC_HSE_ON or RCC_HSE_Bypass), the application
 267:FWLIB/src/stm32f4xx_rcc.c ****   *         software should wait on HSERDY flag to be set indicating that HSE clock
 268:FWLIB/src/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the PLL and/or system clock.
 269:FWLIB/src/stm32f4xx_rcc.c ****   * @note   HSE state can not be changed if it is used directly or through the
 270:FWLIB/src/stm32f4xx_rcc.c ****   *         PLL as system clock. In this case, you have to select another source
 271:FWLIB/src/stm32f4xx_rcc.c ****   *         of the system clock then change the HSE state (ex. disable it).
 272:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The HSE is stopped by hardware when entering STOP and STANDBY modes.  
 273:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function reset the CSSON bit, so if the Clock security system(CSS)
 274:FWLIB/src/stm32f4xx_rcc.c ****   *         was previously enabled you have to enable it again after calling this
 275:FWLIB/src/stm32f4xx_rcc.c ****   *         function.    
 276:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 277:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 278:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_OFF: turn OFF the HSE oscillator, HSERDY flag goes low after
 279:FWLIB/src/stm32f4xx_rcc.c ****   *                              6 HSE oscillator clock cycles.
 280:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_ON: turn ON the HSE oscillator
 281:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 282:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 283:FWLIB/src/stm32f4xx_rcc.c ****   */
 284:FWLIB/src/stm32f4xx_rcc.c **** void RCC_HSEConfig(uint8_t RCC_HSE)
 285:FWLIB/src/stm32f4xx_rcc.c **** {
  95              		.loc 1 285 1 is_stmt 1 view -0
  96              		.cfi_startproc
  97              		@ args = 0, pretend = 0, frame = 0
  98              		@ frame_needed = 0, uses_anonymous_args = 0
  99              		@ link register save eliminated.
 286:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 287:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
 100              		.loc 1 287 3 view .LVU21
 288:FWLIB/src/stm32f4xx_rcc.c **** 
 289:FWLIB/src/stm32f4xx_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 290:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 101              		.loc 1 290 3 view .LVU22
 102              		.loc 1 290 38 is_stmt 0 view .LVU23
 103 0000 024B     		ldr	r3, .L5
 104 0002 0022     		movs	r2, #0
 105 0004 9A70     		strb	r2, [r3, #2]
 291:FWLIB/src/stm32f4xx_rcc.c **** 
 292:FWLIB/src/stm32f4xx_rcc.c ****   /* Set the new HSE configuration -------------------------------------------*/
 293:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 106              		.loc 1 293 3 is_stmt 1 view .LVU24
 107              		.loc 1 293 38 is_stmt 0 view .LVU25
 108 0006 9870     		strb	r0, [r3, #2]
 294:FWLIB/src/stm32f4xx_rcc.c **** }
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 8


 109              		.loc 1 294 1 view .LVU26
 110 0008 7047     		bx	lr
 111              	.L6:
 112 000a 00BF     		.align	2
 113              	.L5:
 114 000c 00380240 		.word	1073887232
 115              		.cfi_endproc
 116              	.LFE124:
 118              		.section	.text.RCC_AdjustHSICalibrationValue,"ax",%progbits
 119              		.align	1
 120              		.global	RCC_AdjustHSICalibrationValue
 121              		.syntax unified
 122              		.thumb
 123              		.thumb_func
 124              		.fpu fpv4-sp-d16
 126              	RCC_AdjustHSICalibrationValue:
 127              	.LVL1:
 128              	.LFB126:
 295:FWLIB/src/stm32f4xx_rcc.c **** 
 296:FWLIB/src/stm32f4xx_rcc.c **** /**
 297:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Waits for HSE start-up.
 298:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This functions waits on HSERDY flag to be set and return SUCCESS if 
 299:FWLIB/src/stm32f4xx_rcc.c ****   *         this flag is set, otherwise returns ERROR if the timeout is reached 
 300:FWLIB/src/stm32f4xx_rcc.c ****   *         and this flag is not set. The timeout value is defined by the constant
 301:FWLIB/src/stm32f4xx_rcc.c ****   *         HSE_STARTUP_TIMEOUT in stm32f4xx.h file. You can tailor it depending
 302:FWLIB/src/stm32f4xx_rcc.c ****   *         on the HSE crystal used in your application. 
 303:FWLIB/src/stm32f4xx_rcc.c ****   * @param  None
 304:FWLIB/src/stm32f4xx_rcc.c ****   * @retval An ErrorStatus enumeration value:
 305:FWLIB/src/stm32f4xx_rcc.c ****   *          - SUCCESS: HSE oscillator is stable and ready to use
 306:FWLIB/src/stm32f4xx_rcc.c ****   *          - ERROR: HSE oscillator not yet ready
 307:FWLIB/src/stm32f4xx_rcc.c ****   */
 308:FWLIB/src/stm32f4xx_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 309:FWLIB/src/stm32f4xx_rcc.c **** {
 310:FWLIB/src/stm32f4xx_rcc.c ****   __IO uint32_t startupcounter = 0;
 311:FWLIB/src/stm32f4xx_rcc.c ****   ErrorStatus status = ERROR;
 312:FWLIB/src/stm32f4xx_rcc.c ****   FlagStatus hsestatus = RESET;
 313:FWLIB/src/stm32f4xx_rcc.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 314:FWLIB/src/stm32f4xx_rcc.c ****   do
 315:FWLIB/src/stm32f4xx_rcc.c ****   {
 316:FWLIB/src/stm32f4xx_rcc.c ****     hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 317:FWLIB/src/stm32f4xx_rcc.c ****     startupcounter++;
 318:FWLIB/src/stm32f4xx_rcc.c ****   } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 319:FWLIB/src/stm32f4xx_rcc.c **** 
 320:FWLIB/src/stm32f4xx_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 321:FWLIB/src/stm32f4xx_rcc.c ****   {
 322:FWLIB/src/stm32f4xx_rcc.c ****     status = SUCCESS;
 323:FWLIB/src/stm32f4xx_rcc.c ****   }
 324:FWLIB/src/stm32f4xx_rcc.c ****   else
 325:FWLIB/src/stm32f4xx_rcc.c ****   {
 326:FWLIB/src/stm32f4xx_rcc.c ****     status = ERROR;
 327:FWLIB/src/stm32f4xx_rcc.c ****   }
 328:FWLIB/src/stm32f4xx_rcc.c ****   return (status);
 329:FWLIB/src/stm32f4xx_rcc.c **** }
 330:FWLIB/src/stm32f4xx_rcc.c **** 
 331:FWLIB/src/stm32f4xx_rcc.c **** /**
 332:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 333:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The calibration is used to compensate for the variations in voltage
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 9


 334:FWLIB/src/stm32f4xx_rcc.c ****   *         and temperature that influence the frequency of the internal HSI RC.
 335:FWLIB/src/stm32f4xx_rcc.c ****   * @param  HSICalibrationValue: specifies the calibration trimming value.
 336:FWLIB/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between 0 and 0x1F.
 337:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 338:FWLIB/src/stm32f4xx_rcc.c ****   */
 339:FWLIB/src/stm32f4xx_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 340:FWLIB/src/stm32f4xx_rcc.c **** {
 129              		.loc 1 340 1 is_stmt 1 view -0
 130              		.cfi_startproc
 131              		@ args = 0, pretend = 0, frame = 0
 132              		@ frame_needed = 0, uses_anonymous_args = 0
 133              		@ link register save eliminated.
 341:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 134              		.loc 1 341 3 view .LVU28
 342:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 343:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
 135              		.loc 1 343 3 view .LVU29
 344:FWLIB/src/stm32f4xx_rcc.c **** 
 345:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CR;
 136              		.loc 1 345 3 view .LVU30
 137              		.loc 1 345 10 is_stmt 0 view .LVU31
 138 0000 034A     		ldr	r2, .L8
 139 0002 1368     		ldr	r3, [r2]
 140              	.LVL2:
 346:FWLIB/src/stm32f4xx_rcc.c **** 
 347:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 348:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CR_HSITRIM;
 141              		.loc 1 348 3 is_stmt 1 view .LVU32
 142              		.loc 1 348 10 is_stmt 0 view .LVU33
 143 0004 23F0F803 		bic	r3, r3, #248
 144              	.LVL3:
 349:FWLIB/src/stm32f4xx_rcc.c **** 
 350:FWLIB/src/stm32f4xx_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 351:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 145              		.loc 1 351 3 is_stmt 1 view .LVU34
 146              		.loc 1 351 10 is_stmt 0 view .LVU35
 147 0008 43EAC003 		orr	r3, r3, r0, lsl #3
 148              	.LVL4:
 352:FWLIB/src/stm32f4xx_rcc.c **** 
 353:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
 354:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CR = tmpreg;
 149              		.loc 1 354 3 is_stmt 1 view .LVU36
 150              		.loc 1 354 11 is_stmt 0 view .LVU37
 151 000c 1360     		str	r3, [r2]
 355:FWLIB/src/stm32f4xx_rcc.c **** }
 152              		.loc 1 355 1 view .LVU38
 153 000e 7047     		bx	lr
 154              	.L9:
 155              		.align	2
 156              	.L8:
 157 0010 00380240 		.word	1073887232
 158              		.cfi_endproc
 159              	.LFE126:
 161              		.section	.text.RCC_HSICmd,"ax",%progbits
 162              		.align	1
 163              		.global	RCC_HSICmd
 164              		.syntax unified
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 10


 165              		.thumb
 166              		.thumb_func
 167              		.fpu fpv4-sp-d16
 169              	RCC_HSICmd:
 170              	.LVL5:
 171              	.LFB127:
 356:FWLIB/src/stm32f4xx_rcc.c **** 
 357:FWLIB/src/stm32f4xx_rcc.c **** /**
 358:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 359:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The HSI is stopped by hardware when entering STOP and STANDBY modes.
 360:FWLIB/src/stm32f4xx_rcc.c ****   *         It is used (enabled by hardware) as system clock source after startup
 361:FWLIB/src/stm32f4xx_rcc.c ****   *         from Reset, wakeup from STOP and STANDBY mode, or in case of failure
 362:FWLIB/src/stm32f4xx_rcc.c ****   *         of the HSE used directly or indirectly as system clock (if the Clock
 363:FWLIB/src/stm32f4xx_rcc.c ****   *         Security System CSS is enabled).             
 364:FWLIB/src/stm32f4xx_rcc.c ****   * @note   HSI can not be stopped if it is used as system clock source. In this case,
 365:FWLIB/src/stm32f4xx_rcc.c ****   *         you have to select another source of the system clock then stop the HSI.  
 366:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After enabling the HSI, the application software should wait on HSIRDY
 367:FWLIB/src/stm32f4xx_rcc.c ****   *         flag to be set indicating that HSI clock is stable and can be used as
 368:FWLIB/src/stm32f4xx_rcc.c ****   *         system clock source.  
 369:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the HSI.
 370:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 371:FWLIB/src/stm32f4xx_rcc.c ****   * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
 372:FWLIB/src/stm32f4xx_rcc.c ****   *         clock cycles.  
 373:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 374:FWLIB/src/stm32f4xx_rcc.c ****   */
 375:FWLIB/src/stm32f4xx_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 376:FWLIB/src/stm32f4xx_rcc.c **** {
 172              		.loc 1 376 1 is_stmt 1 view -0
 173              		.cfi_startproc
 174              		@ args = 0, pretend = 0, frame = 0
 175              		@ frame_needed = 0, uses_anonymous_args = 0
 176              		@ link register save eliminated.
 377:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 378:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 177              		.loc 1 378 3 view .LVU40
 379:FWLIB/src/stm32f4xx_rcc.c **** 
 380:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 178              		.loc 1 380 3 view .LVU41
 179              		.loc 1 380 34 is_stmt 0 view .LVU42
 180 0000 014B     		ldr	r3, .L11
 181 0002 1860     		str	r0, [r3]
 381:FWLIB/src/stm32f4xx_rcc.c **** }
 182              		.loc 1 381 1 view .LVU43
 183 0004 7047     		bx	lr
 184              	.L12:
 185 0006 00BF     		.align	2
 186              	.L11:
 187 0008 00004742 		.word	1111949312
 188              		.cfi_endproc
 189              	.LFE127:
 191              		.section	.text.RCC_LSEConfig,"ax",%progbits
 192              		.align	1
 193              		.global	RCC_LSEConfig
 194              		.syntax unified
 195              		.thumb
 196              		.thumb_func
 197              		.fpu fpv4-sp-d16
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 11


 199              	RCC_LSEConfig:
 200              	.LVL6:
 201              	.LFB128:
 382:FWLIB/src/stm32f4xx_rcc.c **** 
 383:FWLIB/src/stm32f4xx_rcc.c **** /**
 384:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 385:FWLIB/src/stm32f4xx_rcc.c ****   * @note   As the LSE is in the Backup domain and write access is denied to
 386:FWLIB/src/stm32f4xx_rcc.c ****   *         this domain after reset, you have to enable write access using 
 387:FWLIB/src/stm32f4xx_rcc.c ****   *         PWR_BackupAccessCmd(ENABLE) function before to configure the LSE
 388:FWLIB/src/stm32f4xx_rcc.c ****   *         (to be done once after reset).  
 389:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After enabling the LSE (RCC_LSE_ON or RCC_LSE_Bypass), the application
 390:FWLIB/src/stm32f4xx_rcc.c ****   *         software should wait on LSERDY flag to be set indicating that LSE clock
 391:FWLIB/src/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the RTC.
 392:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 393:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 394:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_OFF: turn OFF the LSE oscillator, LSERDY flag goes low after
 395:FWLIB/src/stm32f4xx_rcc.c ****   *                              6 LSE oscillator clock cycles.
 396:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_ON: turn ON the LSE oscillator
 397:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 398:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 399:FWLIB/src/stm32f4xx_rcc.c ****   */
 400:FWLIB/src/stm32f4xx_rcc.c **** void RCC_LSEConfig(uint8_t RCC_LSE)
 401:FWLIB/src/stm32f4xx_rcc.c **** {
 202              		.loc 1 401 1 is_stmt 1 view -0
 203              		.cfi_startproc
 204              		@ args = 0, pretend = 0, frame = 0
 205              		@ frame_needed = 0, uses_anonymous_args = 0
 206              		@ link register save eliminated.
 402:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 403:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 207              		.loc 1 403 3 view .LVU45
 404:FWLIB/src/stm32f4xx_rcc.c **** 
 405:FWLIB/src/stm32f4xx_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 406:FWLIB/src/stm32f4xx_rcc.c ****   /* Reset LSEON bit */
 407:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 208              		.loc 1 407 3 view .LVU46
 209              		.loc 1 407 34 is_stmt 0 view .LVU47
 210 0000 0A4B     		ldr	r3, .L17
 211 0002 0022     		movs	r2, #0
 212 0004 83F87020 		strb	r2, [r3, #112]
 408:FWLIB/src/stm32f4xx_rcc.c **** 
 409:FWLIB/src/stm32f4xx_rcc.c ****   /* Reset LSEBYP bit */
 410:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 213              		.loc 1 410 3 is_stmt 1 view .LVU48
 214              		.loc 1 410 34 is_stmt 0 view .LVU49
 215 0008 83F87020 		strb	r2, [r3, #112]
 411:FWLIB/src/stm32f4xx_rcc.c **** 
 412:FWLIB/src/stm32f4xx_rcc.c ****   /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
 413:FWLIB/src/stm32f4xx_rcc.c ****   switch (RCC_LSE)
 216              		.loc 1 413 3 is_stmt 1 view .LVU50
 217 000c 0128     		cmp	r0, #1
 218 000e 02D0     		beq	.L14
 219 0010 0428     		cmp	r0, #4
 220 0012 05D0     		beq	.L15
 221 0014 7047     		bx	lr
 222              	.L14:
 414:FWLIB/src/stm32f4xx_rcc.c ****   {
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 12


 415:FWLIB/src/stm32f4xx_rcc.c ****     case RCC_LSE_ON:
 416:FWLIB/src/stm32f4xx_rcc.c ****       /* Set LSEON bit */
 417:FWLIB/src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 223              		.loc 1 417 7 view .LVU51
 224              		.loc 1 417 38 is_stmt 0 view .LVU52
 225 0016 054B     		ldr	r3, .L17
 226 0018 0122     		movs	r2, #1
 227 001a 83F87020 		strb	r2, [r3, #112]
 418:FWLIB/src/stm32f4xx_rcc.c ****       break;
 228              		.loc 1 418 7 is_stmt 1 view .LVU53
 229 001e 7047     		bx	lr
 230              	.L15:
 419:FWLIB/src/stm32f4xx_rcc.c ****     case RCC_LSE_Bypass:
 420:FWLIB/src/stm32f4xx_rcc.c ****       /* Set LSEBYP and LSEON bits */
 421:FWLIB/src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 231              		.loc 1 421 7 view .LVU54
 232              		.loc 1 421 38 is_stmt 0 view .LVU55
 233 0020 024B     		ldr	r3, .L17
 234 0022 0522     		movs	r2, #5
 235 0024 83F87020 		strb	r2, [r3, #112]
 422:FWLIB/src/stm32f4xx_rcc.c ****       break;
 236              		.loc 1 422 7 is_stmt 1 view .LVU56
 423:FWLIB/src/stm32f4xx_rcc.c ****     default:
 424:FWLIB/src/stm32f4xx_rcc.c ****       break;
 425:FWLIB/src/stm32f4xx_rcc.c ****   }
 426:FWLIB/src/stm32f4xx_rcc.c **** }
 237              		.loc 1 426 1 is_stmt 0 view .LVU57
 238 0028 7047     		bx	lr
 239              	.L18:
 240 002a 00BF     		.align	2
 241              	.L17:
 242 002c 00380240 		.word	1073887232
 243              		.cfi_endproc
 244              	.LFE128:
 246              		.section	.text.RCC_LSICmd,"ax",%progbits
 247              		.align	1
 248              		.global	RCC_LSICmd
 249              		.syntax unified
 250              		.thumb
 251              		.thumb_func
 252              		.fpu fpv4-sp-d16
 254              	RCC_LSICmd:
 255              	.LVL7:
 256              	.LFB129:
 427:FWLIB/src/stm32f4xx_rcc.c **** 
 428:FWLIB/src/stm32f4xx_rcc.c **** /**
 429:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 430:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After enabling the LSI, the application software should wait on 
 431:FWLIB/src/stm32f4xx_rcc.c ****   *         LSIRDY flag to be set indicating that LSI clock is stable and can
 432:FWLIB/src/stm32f4xx_rcc.c ****   *         be used to clock the IWDG and/or the RTC.
 433:FWLIB/src/stm32f4xx_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.  
 434:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the LSI.
 435:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 436:FWLIB/src/stm32f4xx_rcc.c ****   * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
 437:FWLIB/src/stm32f4xx_rcc.c ****   *         clock cycles. 
 438:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 439:FWLIB/src/stm32f4xx_rcc.c ****   */
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 13


 440:FWLIB/src/stm32f4xx_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 441:FWLIB/src/stm32f4xx_rcc.c **** {
 257              		.loc 1 441 1 is_stmt 1 view -0
 258              		.cfi_startproc
 259              		@ args = 0, pretend = 0, frame = 0
 260              		@ frame_needed = 0, uses_anonymous_args = 0
 261              		@ link register save eliminated.
 442:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 443:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 262              		.loc 1 443 3 view .LVU59
 444:FWLIB/src/stm32f4xx_rcc.c **** 
 445:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 263              		.loc 1 445 3 view .LVU60
 264              		.loc 1 445 35 is_stmt 0 view .LVU61
 265 0000 014B     		ldr	r3, .L20
 266 0002 C3F8800E 		str	r0, [r3, #3712]
 446:FWLIB/src/stm32f4xx_rcc.c **** }
 267              		.loc 1 446 1 view .LVU62
 268 0006 7047     		bx	lr
 269              	.L21:
 270              		.align	2
 271              	.L20:
 272 0008 00004742 		.word	1111949312
 273              		.cfi_endproc
 274              	.LFE129:
 276              		.section	.text.RCC_PLLConfig,"ax",%progbits
 277              		.align	1
 278              		.global	RCC_PLLConfig
 279              		.syntax unified
 280              		.thumb
 281              		.thumb_func
 282              		.fpu fpv4-sp-d16
 284              	RCC_PLLConfig:
 285              	.LVL8:
 286              	.LFB130:
 447:FWLIB/src/stm32f4xx_rcc.c **** 
 448:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F410xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx
 449:FWLIB/src/stm32f4xx_rcc.c **** /**
 450:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the main PLL clock source, multiplication and division factors.
 451:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the main PLL is disabled.
 452:FWLIB/src/stm32f4xx_rcc.c ****   *  
 453:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 454:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 455:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSI: HSI oscillator clock selected as PLL clock entry
 456:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSE: HSE oscillator clock selected as PLL clock entry
 457:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This clock source (RCC_PLLSource) is common for the main PLL and PLLI2S.  
 458:FWLIB/src/stm32f4xx_rcc.c ****   *  
 459:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLM: specifies the division factor for PLL VCO input clock
 460:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 0 and 63.
 461:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLM parameter correctly to ensure that the VCO input
 462:FWLIB/src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 463:FWLIB/src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLL jitter.
 464:FWLIB/src/stm32f4xx_rcc.c ****   *  
 465:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLN: specifies the multiplication factor for PLL VCO output clock
 466:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 467:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLN parameter correctly to ensure that the VCO
 468:FWLIB/src/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 14


 469:FWLIB/src/stm32f4xx_rcc.c ****   *   
 470:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLP: specifies the division factor for main system clock (SYSCLK)
 471:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number in the range {2, 4, 6, or 8}.
 472:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLP parameter correctly to not exceed 168 MHz on
 473:FWLIB/src/stm32f4xx_rcc.c ****   *         the System clock frequency.
 474:FWLIB/src/stm32f4xx_rcc.c ****   *  
 475:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLQ: specifies the division factor for OTG FS, SDIO and RNG clocks
 476:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 4 and 15.
 477:FWLIB/src/stm32f4xx_rcc.c ****   *
 478:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLR: specifies the division factor for I2S, SAI, SYSTEM, SPDIF in STM32F446xx devices
 479:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 480:FWLIB/src/stm32f4xx_rcc.c ****   *
 481:FWLIB/src/stm32f4xx_rcc.c ****   * @note   If the USB OTG FS is used in your application, you have to set the
 482:FWLIB/src/stm32f4xx_rcc.c ****   *         PLLQ parameter correctly to have 48 MHz clock for the USB. However,
 483:FWLIB/src/stm32f4xx_rcc.c ****   *         the SDIO and RNG need a frequency lower than or equal to 48 MHz to work
 484:FWLIB/src/stm32f4xx_rcc.c ****   *         correctly.
 485:FWLIB/src/stm32f4xx_rcc.c ****   *   
 486:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 487:FWLIB/src/stm32f4xx_rcc.c ****   */
 488:FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PL
 489:FWLIB/src/stm32f4xx_rcc.c **** {
 490:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 491:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 492:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLM_VALUE(PLLM));
 493:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLN_VALUE(PLLN));
 494:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLP_VALUE(PLLP));
 495:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
 496:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLR_VALUE(PLLR));
 497:FWLIB/src/stm32f4xx_rcc.c ****   
 498:FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 499:FWLIB/src/stm32f4xx_rcc.c ****                  (PLLQ << 24) | (PLLR << 28);
 500:FWLIB/src/stm32f4xx_rcc.c **** }
 501:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F410xx || STM32F412xG || STM32F413_423xx || STM32F446xx || STM32F469_479xx */
 502:FWLIB/src/stm32f4xx_rcc.c **** 
 503:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
 504:FWLIB/src/stm32f4xx_rcc.c **** /**
 505:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the main PLL clock source, multiplication and division factors.
 506:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the main PLL is disabled.
 507:FWLIB/src/stm32f4xx_rcc.c ****   *  
 508:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 509:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 510:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSI: HSI oscillator clock selected as PLL clock entry
 511:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSE: HSE oscillator clock selected as PLL clock entry
 512:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This clock source (RCC_PLLSource) is common for the main PLL and PLLI2S.  
 513:FWLIB/src/stm32f4xx_rcc.c ****   *  
 514:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLM: specifies the division factor for PLL VCO input clock
 515:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 0 and 63.
 516:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLM parameter correctly to ensure that the VCO input
 517:FWLIB/src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 518:FWLIB/src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLL jitter.
 519:FWLIB/src/stm32f4xx_rcc.c ****   *  
 520:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLN: specifies the multiplication factor for PLL VCO output clock
 521:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 522:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLN parameter correctly to ensure that the VCO
 523:FWLIB/src/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 524:FWLIB/src/stm32f4xx_rcc.c ****   *   
 525:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLP: specifies the division factor for main system clock (SYSCLK)
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 15


 526:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number in the range {2, 4, 6, or 8}.
 527:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLP parameter correctly to not exceed 168 MHz on
 528:FWLIB/src/stm32f4xx_rcc.c ****   *         the System clock frequency.
 529:FWLIB/src/stm32f4xx_rcc.c ****   *  
 530:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLQ: specifies the division factor for OTG FS, SDIO and RNG clocks
 531:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 4 and 15.
 532:FWLIB/src/stm32f4xx_rcc.c ****   * @note   If the USB OTG FS is used in your application, you have to set the
 533:FWLIB/src/stm32f4xx_rcc.c ****   *         PLLQ parameter correctly to have 48 MHz clock for the USB. However,
 534:FWLIB/src/stm32f4xx_rcc.c ****   *         the SDIO and RNG need a frequency lower than or equal to 48 MHz to work
 535:FWLIB/src/stm32f4xx_rcc.c ****   *         correctly.
 536:FWLIB/src/stm32f4xx_rcc.c ****   *   
 537:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 538:FWLIB/src/stm32f4xx_rcc.c ****   */
 539:FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PL
 540:FWLIB/src/stm32f4xx_rcc.c **** {
 287              		.loc 1 540 1 is_stmt 1 view -0
 288              		.cfi_startproc
 289              		@ args = 4, pretend = 0, frame = 0
 290              		@ frame_needed = 0, uses_anonymous_args = 0
 291              		@ link register save eliminated.
 541:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 542:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 292              		.loc 1 542 3 view .LVU64
 543:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLM_VALUE(PLLM));
 293              		.loc 1 543 3 view .LVU65
 544:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLN_VALUE(PLLN));
 294              		.loc 1 544 3 view .LVU66
 545:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLP_VALUE(PLLP));
 295              		.loc 1 545 3 view .LVU67
 546:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
 296              		.loc 1 546 3 view .LVU68
 547:FWLIB/src/stm32f4xx_rcc.c **** 
 548:FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 297              		.loc 1 548 3 view .LVU69
 298              		.loc 1 548 23 is_stmt 0 view .LVU70
 299 0000 41EA8211 		orr	r1, r1, r2, lsl #6
 300              	.LVL9:
 301              		.loc 1 548 47 view .LVU71
 302 0004 5B08     		lsrs	r3, r3, #1
 303              	.LVL10:
 304              		.loc 1 548 53 view .LVU72
 305 0006 013B     		subs	r3, r3, #1
 306              		.loc 1 548 37 view .LVU73
 307 0008 41EA0341 		orr	r1, r1, r3, lsl #16
 308              		.loc 1 548 64 view .LVU74
 309 000c 0143     		orrs	r1, r1, r0
 310              		.loc 1 548 82 view .LVU75
 311 000e 0098     		ldr	r0, [sp]
 312              	.LVL11:
 313              		.loc 1 548 82 view .LVU76
 314 0010 41EA0061 		orr	r1, r1, r0, lsl #24
 315              		.loc 1 548 16 view .LVU77
 316 0014 014B     		ldr	r3, .L23
 317 0016 5960     		str	r1, [r3, #4]
 318              	.LVL12:
 549:FWLIB/src/stm32f4xx_rcc.c ****                  (PLLQ << 24);
 550:FWLIB/src/stm32f4xx_rcc.c **** }
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 16


 319              		.loc 1 550 1 view .LVU78
 320 0018 7047     		bx	lr
 321              	.L24:
 322 001a 00BF     		.align	2
 323              	.L23:
 324 001c 00380240 		.word	1073887232
 325              		.cfi_endproc
 326              	.LFE130:
 328              		.section	.text.RCC_PLLCmd,"ax",%progbits
 329              		.align	1
 330              		.global	RCC_PLLCmd
 331              		.syntax unified
 332              		.thumb
 333              		.thumb_func
 334              		.fpu fpv4-sp-d16
 336              	RCC_PLLCmd:
 337              	.LVL13:
 338              	.LFB131:
 551:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE */
 552:FWLIB/src/stm32f4xx_rcc.c **** 
 553:FWLIB/src/stm32f4xx_rcc.c **** /**
 554:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the main PLL.
 555:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After enabling the main PLL, the application software should wait on 
 556:FWLIB/src/stm32f4xx_rcc.c ****   *         PLLRDY flag to be set indicating that PLL clock is stable and can
 557:FWLIB/src/stm32f4xx_rcc.c ****   *         be used as system clock source.
 558:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The main PLL can not be disabled if it is used as system clock source
 559:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
 560:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
 561:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 562:FWLIB/src/stm32f4xx_rcc.c ****   */
 563:FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 564:FWLIB/src/stm32f4xx_rcc.c **** {
 339              		.loc 1 564 1 is_stmt 1 view -0
 340              		.cfi_startproc
 341              		@ args = 0, pretend = 0, frame = 0
 342              		@ frame_needed = 0, uses_anonymous_args = 0
 343              		@ link register save eliminated.
 565:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 566:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 344              		.loc 1 566 3 view .LVU80
 567:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 345              		.loc 1 567 3 view .LVU81
 346              		.loc 1 567 34 is_stmt 0 view .LVU82
 347 0000 014B     		ldr	r3, .L26
 348 0002 1866     		str	r0, [r3, #96]
 568:FWLIB/src/stm32f4xx_rcc.c **** }
 349              		.loc 1 568 1 view .LVU83
 350 0004 7047     		bx	lr
 351              	.L27:
 352 0006 00BF     		.align	2
 353              	.L26:
 354 0008 00004742 		.word	1111949312
 355              		.cfi_endproc
 356              	.LFE131:
 358              		.section	.text.RCC_PLLI2SConfig,"ax",%progbits
 359              		.align	1
 360              		.global	RCC_PLLI2SConfig
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 17


 361              		.syntax unified
 362              		.thumb
 363              		.thumb_func
 364              		.fpu fpv4-sp-d16
 366              	RCC_PLLI2SConfig:
 367              	.LVL14:
 368              	.LFB132:
 569:FWLIB/src/stm32f4xx_rcc.c **** 
 570:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F401xx)
 571:FWLIB/src/stm32f4xx_rcc.c **** /**
 572:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 573:FWLIB/src/stm32f4xx_rcc.c ****   *  
 574:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F405xx/407xx, STM32F415xx/417xx 
 575:FWLIB/src/stm32f4xx_rcc.c ****   *         or STM32F401xx devices. 
 576:FWLIB/src/stm32f4xx_rcc.c ****   *    
 577:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 578:FWLIB/src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 579:FWLIB/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 580:FWLIB/src/stm32f4xx_rcc.c ****   *             
 581:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 582:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 583:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 584:FWLIB/src/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 585:FWLIB/src/stm32f4xx_rcc.c ****   *    
 586:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 587:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 588:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 589:FWLIB/src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 590:FWLIB/src/stm32f4xx_rcc.c ****   *   
 591:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 592:FWLIB/src/stm32f4xx_rcc.c ****   */
 593:FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
 594:FWLIB/src/stm32f4xx_rcc.c **** {
 369              		.loc 1 594 1 is_stmt 1 view -0
 370              		.cfi_startproc
 371              		@ args = 0, pretend = 0, frame = 0
 372              		@ frame_needed = 0, uses_anonymous_args = 0
 373              		@ link register save eliminated.
 595:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 596:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 374              		.loc 1 596 3 view .LVU85
 597:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 375              		.loc 1 597 3 view .LVU86
 598:FWLIB/src/stm32f4xx_rcc.c **** 
 599:FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 376              		.loc 1 599 3 view .LVU87
 377              		.loc 1 599 47 is_stmt 0 view .LVU88
 378 0000 0907     		lsls	r1, r1, #28
 379              	.LVL15:
 380              		.loc 1 599 36 view .LVU89
 381 0002 41EA8011 		orr	r1, r1, r0, lsl #6
 382              		.loc 1 599 19 view .LVU90
 383 0006 024B     		ldr	r3, .L29
 384 0008 C3F88410 		str	r1, [r3, #132]
 600:FWLIB/src/stm32f4xx_rcc.c **** }
 385              		.loc 1 600 1 view .LVU91
 386 000c 7047     		bx	lr
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 18


 387              	.L30:
 388 000e 00BF     		.align	2
 389              	.L29:
 390 0010 00380240 		.word	1073887232
 391              		.cfi_endproc
 392              	.LFE132:
 394              		.section	.text.RCC_PLLI2SCmd,"ax",%progbits
 395              		.align	1
 396              		.global	RCC_PLLI2SCmd
 397              		.syntax unified
 398              		.thumb
 399              		.thumb_func
 400              		.fpu fpv4-sp-d16
 402              	RCC_PLLI2SCmd:
 403              	.LVL16:
 404              	.LFB133:
 601:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F401xx */
 602:FWLIB/src/stm32f4xx_rcc.c **** 
 603:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F411xE)
 604:FWLIB/src/stm32f4xx_rcc.c **** /**
 605:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 606:FWLIB/src/stm32f4xx_rcc.c ****   *  
 607:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F411xE devices. 
 608:FWLIB/src/stm32f4xx_rcc.c ****   *    
 609:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 610:FWLIB/src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 611:FWLIB/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 612:FWLIB/src/stm32f4xx_rcc.c ****   *
 613:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SM: specifies the division factor for PLLI2S VCO input clock
 614:FWLIB/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between Min_Data = 2 and Max_Data = 63.
 615:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SM parameter correctly to ensure that the VCO input
 616:FWLIB/src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 617:FWLIB/src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLLI2S jitter.
 618:FWLIB/src/stm32f4xx_rcc.c ****   *
 619:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 620:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 621:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 622:FWLIB/src/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 623:FWLIB/src/stm32f4xx_rcc.c ****   *    
 624:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 625:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 626:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 627:FWLIB/src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 628:FWLIB/src/stm32f4xx_rcc.c ****   *   
 629:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 630:FWLIB/src/stm32f4xx_rcc.c ****   */
 631:FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR, uint32_t PLLI2SM)
 632:FWLIB/src/stm32f4xx_rcc.c **** {
 633:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 634:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 635:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SM_VALUE(PLLI2SM));
 636:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 637:FWLIB/src/stm32f4xx_rcc.c **** 
 638:FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28) | PLLI2SM;
 639:FWLIB/src/stm32f4xx_rcc.c **** }
 640:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F411xE */
 641:FWLIB/src/stm32f4xx_rcc.c **** 
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 19


 642:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F469_479xx)
 643:FWLIB/src/stm32f4xx_rcc.c **** /**
 644:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 645:FWLIB/src/stm32f4xx_rcc.c ****   * 
 646:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices 
 647:FWLIB/src/stm32f4xx_rcc.c ****   *         
 648:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 649:FWLIB/src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 650:FWLIB/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 651:FWLIB/src/stm32f4xx_rcc.c ****   *             
 652:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 653:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 654:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 655:FWLIB/src/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 656:FWLIB/src/stm32f4xx_rcc.c ****   * 
 657:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SQ: specifies the division factor for SAI1 clock
 658:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 15.
 659:FWLIB/src/stm32f4xx_rcc.c ****   *                 
 660:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 661:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 662:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 663:FWLIB/src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 664:FWLIB/src/stm32f4xx_rcc.c ****   *   
 665:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 666:FWLIB/src/stm32f4xx_rcc.c ****   */
 667:FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SQ, uint32_t PLLI2SR)
 668:FWLIB/src/stm32f4xx_rcc.c **** {
 669:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 670:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 671:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SQ));
 672:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 673:FWLIB/src/stm32f4xx_rcc.c **** 
 674:FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SQ << 24) | (PLLI2SR << 28);
 675:FWLIB/src/stm32f4xx_rcc.c **** }
 676:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F427_437xx || STM32F429_439xx || STM32F469_479xx */
 677:FWLIB/src/stm32f4xx_rcc.c **** 
 678:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F412xG ) || defined(STM32F413_423xx) || defined(STM32F446xx)
 679:FWLIB/src/stm32f4xx_rcc.c **** /**
 680:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 681:FWLIB/src/stm32f4xx_rcc.c ****   * 
 682:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F446xx devices 
 683:FWLIB/src/stm32f4xx_rcc.c ****   *         
 684:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 685:FWLIB/src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 686:FWLIB/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 687:FWLIB/src/stm32f4xx_rcc.c ****   * 
 688:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SM: specifies the division factor for PLLI2S VCO input clock
 689:FWLIB/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between Min_Data = 2 and Max_Data = 63.
 690:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SM parameter correctly to ensure that the VCO input
 691:FWLIB/src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 692:FWLIB/src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLLI2S jitter.
 693:FWLIB/src/stm32f4xx_rcc.c ****   *
 694:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 695:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 696:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 697:FWLIB/src/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 698:FWLIB/src/stm32f4xx_rcc.c ****   *
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 20


 699:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SP: specifies the division factor for PLL 48Mhz clock output
 700:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number in the range {2, 4, 6, or 8}.
 701:FWLIB/src/stm32f4xx_rcc.c ****   *
 702:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SQ: specifies the division factor for SAI1 clock
 703:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 15.
 704:FWLIB/src/stm32f4xx_rcc.c ****   *                 
 705:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 706:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 707:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 708:FWLIB/src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 709:FWLIB/src/stm32f4xx_rcc.c ****   * @note   the PLLI2SR parameter is only available with STM32F42xxx/43xxx devices.  
 710:FWLIB/src/stm32f4xx_rcc.c ****   *   
 711:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 712:FWLIB/src/stm32f4xx_rcc.c ****   */
 713:FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SM, uint32_t PLLI2SN, uint32_t PLLI2SP, uint32_t PLLI2SQ, uint3
 714:FWLIB/src/stm32f4xx_rcc.c **** {
 715:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 716:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SM_VALUE(PLLI2SM));
 717:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 718:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SP_VALUE(PLLI2SP));
 719:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SQ));
 720:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 721:FWLIB/src/stm32f4xx_rcc.c **** 
 722:FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR =  PLLI2SM | (PLLI2SN << 6) | (((PLLI2SP >> 1) -1) << 16) | (PLLI2SQ << 24) | (PL
 723:FWLIB/src/stm32f4xx_rcc.c **** }
 724:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
 725:FWLIB/src/stm32f4xx_rcc.c **** 
 726:FWLIB/src/stm32f4xx_rcc.c **** /**
 727:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the PLLI2S. 
 728:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
 729:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
 730:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 731:FWLIB/src/stm32f4xx_rcc.c ****   */
 732:FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLI2SCmd(FunctionalState NewState)
 733:FWLIB/src/stm32f4xx_rcc.c **** {
 405              		.loc 1 733 1 is_stmt 1 view -0
 406              		.cfi_startproc
 407              		@ args = 0, pretend = 0, frame = 0
 408              		@ frame_needed = 0, uses_anonymous_args = 0
 409              		@ link register save eliminated.
 734:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 735:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 410              		.loc 1 735 3 view .LVU93
 736:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 411              		.loc 1 736 3 view .LVU94
 412              		.loc 1 736 37 is_stmt 0 view .LVU95
 413 0000 014B     		ldr	r3, .L32
 414 0002 9866     		str	r0, [r3, #104]
 737:FWLIB/src/stm32f4xx_rcc.c **** }
 415              		.loc 1 737 1 view .LVU96
 416 0004 7047     		bx	lr
 417              	.L33:
 418 0006 00BF     		.align	2
 419              	.L32:
 420 0008 00004742 		.word	1111949312
 421              		.cfi_endproc
 422              	.LFE133:
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 21


 424              		.section	.text.RCC_PLLSAIConfig,"ax",%progbits
 425              		.align	1
 426              		.global	RCC_PLLSAIConfig
 427              		.syntax unified
 428              		.thumb
 429              		.thumb_func
 430              		.fpu fpv4-sp-d16
 432              	RCC_PLLSAIConfig:
 433              	.LVL17:
 434              	.LFB134:
 738:FWLIB/src/stm32f4xx_rcc.c **** 
 739:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F469_479xx)
 740:FWLIB/src/stm32f4xx_rcc.c **** /**
 741:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLSAI clock multiplication and division factors.
 742:FWLIB/src/stm32f4xx_rcc.c ****   *
 743:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F469_479xx devices 
 744:FWLIB/src/stm32f4xx_rcc.c ****   *        
 745:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLSAI is disabled.
 746:FWLIB/src/stm32f4xx_rcc.c ****   * @note   PLLSAI clock source is common with the main PLL (configured in 
 747:FWLIB/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 748:FWLIB/src/stm32f4xx_rcc.c ****   *
 749:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLSAIN: specifies the multiplication factor for PLLSAI VCO output clock
 750:FWLIB/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between 50 and 432.
 751:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLSAIN parameter correctly to ensure that the VCO 
 752:FWLIB/src/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 753:FWLIB/src/stm32f4xx_rcc.c ****   *
 754:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLSAIP: specifies the division factor for PLL 48Mhz clock output
 755:FWLIB/src/stm32f4xx_rcc.c ****   *         This parameter must be a number in the range {2, 4, 6, or 8}..
 756:FWLIB/src/stm32f4xx_rcc.c ****   *           
 757:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLSAIQ: specifies the division factor for SAI1 clock
 758:FWLIB/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between 2 and 15.
 759:FWLIB/src/stm32f4xx_rcc.c ****   *            
 760:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLSAIR: specifies the division factor for LTDC clock
 761:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 762:FWLIB/src/stm32f4xx_rcc.c ****   *   
 763:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 764:FWLIB/src/stm32f4xx_rcc.c ****   */
 765:FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIP, uint32_t PLLSAIQ, uint32_t PLLSAIR)
 766:FWLIB/src/stm32f4xx_rcc.c **** {
 767:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 768:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
 769:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIP_VALUE(PLLSAIP));
 770:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
 771:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
 772:FWLIB/src/stm32f4xx_rcc.c **** 
 773:FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLSAICFGR = (PLLSAIN << 6) | (((PLLSAIP >> 1) -1) << 16) | (PLLSAIQ << 24) | (PLLSAIR << 28
 774:FWLIB/src/stm32f4xx_rcc.c **** }
 775:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F469_479xx */
 776:FWLIB/src/stm32f4xx_rcc.c **** 
 777:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F446xx)
 778:FWLIB/src/stm32f4xx_rcc.c **** /**
 779:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLSAI clock multiplication and division factors.
 780:FWLIB/src/stm32f4xx_rcc.c ****   *
 781:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F446xx devices 
 782:FWLIB/src/stm32f4xx_rcc.c ****   *        
 783:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLSAI is disabled.
 784:FWLIB/src/stm32f4xx_rcc.c ****   * @note   PLLSAI clock source is common with the main PLL (configured in 
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 22


 785:FWLIB/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 786:FWLIB/src/stm32f4xx_rcc.c ****   * 
 787:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLSAIM: specifies the division factor for PLLSAI VCO input clock
 788:FWLIB/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between Min_Data = 2 and Max_Data = 63.
 789:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLSAIM parameter correctly to ensure that the VCO input
 790:FWLIB/src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 791:FWLIB/src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLLSAI jitter.
 792:FWLIB/src/stm32f4xx_rcc.c ****   *
 793:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLSAIN: specifies the multiplication factor for PLLSAI VCO output clock
 794:FWLIB/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between 50 and 432.
 795:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLSAIN parameter correctly to ensure that the VCO 
 796:FWLIB/src/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 797:FWLIB/src/stm32f4xx_rcc.c ****   * 
 798:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLSAIP: specifies the division factor for PLL 48Mhz clock output
 799:FWLIB/src/stm32f4xx_rcc.c ****   *         This parameter must be a number in the range {2, 4, 6, or 8}.
 800:FWLIB/src/stm32f4xx_rcc.c ****   *
 801:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLSAIQ: specifies the division factor for SAI1 clock
 802:FWLIB/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between 2 and 15.
 803:FWLIB/src/stm32f4xx_rcc.c ****   *   
 804:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 805:FWLIB/src/stm32f4xx_rcc.c ****   */
 806:FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLSAIConfig(uint32_t PLLSAIM, uint32_t PLLSAIN, uint32_t PLLSAIP, uint32_t PLLSAIQ)
 807:FWLIB/src/stm32f4xx_rcc.c **** {
 808:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 809:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIM_VALUE(PLLSAIM));
 810:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
 811:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIP_VALUE(PLLSAIP));
 812:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
 813:FWLIB/src/stm32f4xx_rcc.c **** 
 814:FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLSAICFGR = PLLSAIM | (PLLSAIN << 6) | (((PLLSAIP >> 1) -1) << 16)  | (PLLSAIQ << 24);
 815:FWLIB/src/stm32f4xx_rcc.c **** }
 816:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F446xx */
 817:FWLIB/src/stm32f4xx_rcc.c **** 
 818:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
 819:FWLIB/src/stm32f4xx_rcc.c **** /**
 820:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLSAI clock multiplication and division factors.
 821:FWLIB/src/stm32f4xx_rcc.c ****   *
 822:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices 
 823:FWLIB/src/stm32f4xx_rcc.c ****   *        
 824:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLSAI is disabled.
 825:FWLIB/src/stm32f4xx_rcc.c ****   * @note   PLLSAI clock source is common with the main PLL (configured in 
 826:FWLIB/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 827:FWLIB/src/stm32f4xx_rcc.c ****   *             
 828:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLSAIN: specifies the multiplication factor for PLLSAI VCO output clock
 829:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 830:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLSAIN parameter correctly to ensure that the VCO 
 831:FWLIB/src/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 832:FWLIB/src/stm32f4xx_rcc.c ****   *           
 833:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLSAIQ: specifies the division factor for SAI1 clock
 834:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 15.
 835:FWLIB/src/stm32f4xx_rcc.c ****   *            
 836:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLSAIR: specifies the division factor for LTDC clock
 837:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 838:FWLIB/src/stm32f4xx_rcc.c ****   *   
 839:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 840:FWLIB/src/stm32f4xx_rcc.c ****   */
 841:FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 23


 842:FWLIB/src/stm32f4xx_rcc.c **** {
 435              		.loc 1 842 1 is_stmt 1 view -0
 436              		.cfi_startproc
 437              		@ args = 0, pretend = 0, frame = 0
 438              		@ frame_needed = 0, uses_anonymous_args = 0
 439              		@ link register save eliminated.
 843:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 844:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
 440              		.loc 1 844 3 view .LVU98
 845:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
 441              		.loc 1 845 3 view .LVU99
 846:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
 442              		.loc 1 846 3 view .LVU100
 847:FWLIB/src/stm32f4xx_rcc.c ****   
 848:FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 443              		.loc 1 848 3 view .LVU101
 444              		.loc 1 848 47 is_stmt 0 view .LVU102
 445 0000 0906     		lsls	r1, r1, #24
 446              	.LVL18:
 447              		.loc 1 848 36 view .LVU103
 448 0002 41EA8011 		orr	r1, r1, r0, lsl #6
 449              		.loc 1 848 54 view .LVU104
 450 0006 41EA0271 		orr	r1, r1, r2, lsl #28
 451              		.loc 1 848 19 view .LVU105
 452 000a 024B     		ldr	r3, .L35
 453 000c C3F88810 		str	r1, [r3, #136]
 849:FWLIB/src/stm32f4xx_rcc.c **** }
 454              		.loc 1 849 1 view .LVU106
 455 0010 7047     		bx	lr
 456              	.L36:
 457 0012 00BF     		.align	2
 458              	.L35:
 459 0014 00380240 		.word	1073887232
 460              		.cfi_endproc
 461              	.LFE134:
 463              		.section	.text.RCC_PLLSAICmd,"ax",%progbits
 464              		.align	1
 465              		.global	RCC_PLLSAICmd
 466              		.syntax unified
 467              		.thumb
 468              		.thumb_func
 469              		.fpu fpv4-sp-d16
 471              	RCC_PLLSAICmd:
 472              	.LVL19:
 473              	.LFB135:
 850:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE */
 851:FWLIB/src/stm32f4xx_rcc.c **** 
 852:FWLIB/src/stm32f4xx_rcc.c **** /**
 853:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the PLLSAI. 
 854:FWLIB/src/stm32f4xx_rcc.c ****   * 
 855:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx/446xx/469xx/479xx devices 
 856:FWLIB/src/stm32f4xx_rcc.c ****   *       
 857:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
 858:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
 859:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 860:FWLIB/src/stm32f4xx_rcc.c ****   */
 861:FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLSAICmd(FunctionalState NewState)
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 24


 862:FWLIB/src/stm32f4xx_rcc.c **** {
 474              		.loc 1 862 1 is_stmt 1 view -0
 475              		.cfi_startproc
 476              		@ args = 0, pretend = 0, frame = 0
 477              		@ frame_needed = 0, uses_anonymous_args = 0
 478              		@ link register save eliminated.
 863:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 864:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 479              		.loc 1 864 3 view .LVU108
 865:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 480              		.loc 1 865 3 view .LVU109
 481              		.loc 1 865 37 is_stmt 0 view .LVU110
 482 0000 014B     		ldr	r3, .L38
 483 0002 1867     		str	r0, [r3, #112]
 866:FWLIB/src/stm32f4xx_rcc.c **** }
 484              		.loc 1 866 1 view .LVU111
 485 0004 7047     		bx	lr
 486              	.L39:
 487 0006 00BF     		.align	2
 488              	.L38:
 489 0008 00004742 		.word	1111949312
 490              		.cfi_endproc
 491              	.LFE135:
 493              		.section	.text.RCC_ClockSecuritySystemCmd,"ax",%progbits
 494              		.align	1
 495              		.global	RCC_ClockSecuritySystemCmd
 496              		.syntax unified
 497              		.thumb
 498              		.thumb_func
 499              		.fpu fpv4-sp-d16
 501              	RCC_ClockSecuritySystemCmd:
 502              	.LVL20:
 503              	.LFB136:
 867:FWLIB/src/stm32f4xx_rcc.c **** 
 868:FWLIB/src/stm32f4xx_rcc.c **** /**
 869:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Clock Security System.
 870:FWLIB/src/stm32f4xx_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 871:FWLIB/src/stm32f4xx_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 872:FWLIB/src/stm32f4xx_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 873:FWLIB/src/stm32f4xx_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
 874:FWLIB/src/stm32f4xx_rcc.c ****   *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
 875:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Clock Security System.
 876:FWLIB/src/stm32f4xx_rcc.c ****   *         This parameter can be: ENABLE or DISABLE.
 877:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 878:FWLIB/src/stm32f4xx_rcc.c ****   */
 879:FWLIB/src/stm32f4xx_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
 880:FWLIB/src/stm32f4xx_rcc.c **** {
 504              		.loc 1 880 1 is_stmt 1 view -0
 505              		.cfi_startproc
 506              		@ args = 0, pretend = 0, frame = 0
 507              		@ frame_needed = 0, uses_anonymous_args = 0
 508              		@ link register save eliminated.
 881:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 882:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 509              		.loc 1 882 3 view .LVU113
 883:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 510              		.loc 1 883 3 view .LVU114
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 25


 511              		.loc 1 883 34 is_stmt 0 view .LVU115
 512 0000 014B     		ldr	r3, .L41
 513 0002 D864     		str	r0, [r3, #76]
 884:FWLIB/src/stm32f4xx_rcc.c **** }
 514              		.loc 1 884 1 view .LVU116
 515 0004 7047     		bx	lr
 516              	.L42:
 517 0006 00BF     		.align	2
 518              	.L41:
 519 0008 00004742 		.word	1111949312
 520              		.cfi_endproc
 521              	.LFE136:
 523              		.section	.text.RCC_MCO1Config,"ax",%progbits
 524              		.align	1
 525              		.global	RCC_MCO1Config
 526              		.syntax unified
 527              		.thumb
 528              		.thumb_func
 529              		.fpu fpv4-sp-d16
 531              	RCC_MCO1Config:
 532              	.LVL21:
 533              	.LFB137:
 885:FWLIB/src/stm32f4xx_rcc.c **** 
 886:FWLIB/src/stm32f4xx_rcc.c **** /**
 887:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO1 pin(PA8).
 888:FWLIB/src/stm32f4xx_rcc.c ****   * @note   PA8 should be configured in alternate function mode.
 889:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Source: specifies the clock source to output.
 890:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 891:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSI: HSI clock selected as MCO1 source
 892:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_LSE: LSE clock selected as MCO1 source
 893:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSE: HSE clock selected as MCO1 source
 894:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_PLLCLK: main PLL clock selected as MCO1 source
 895:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Div: specifies the MCO1 prescaler.
 896:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 897:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_1: no division applied to MCO1 clock
 898:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_2: division by 2 applied to MCO1 clock
 899:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_3: division by 3 applied to MCO1 clock
 900:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
 901:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
 902:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 903:FWLIB/src/stm32f4xx_rcc.c ****   */
 904:FWLIB/src/stm32f4xx_rcc.c **** void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
 905:FWLIB/src/stm32f4xx_rcc.c **** {
 534              		.loc 1 905 1 is_stmt 1 view -0
 535              		.cfi_startproc
 536              		@ args = 0, pretend = 0, frame = 0
 537              		@ frame_needed = 0, uses_anonymous_args = 0
 538              		@ link register save eliminated.
 906:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 539              		.loc 1 906 3 view .LVU118
 907:FWLIB/src/stm32f4xx_rcc.c ****   
 908:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 909:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
 540              		.loc 1 909 3 view .LVU119
 910:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  
 541              		.loc 1 910 3 view .LVU120
 911:FWLIB/src/stm32f4xx_rcc.c **** 
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 26


 912:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 542              		.loc 1 912 3 view .LVU121
 543              		.loc 1 912 10 is_stmt 0 view .LVU122
 544 0000 034A     		ldr	r2, .L44
 545 0002 9368     		ldr	r3, [r2, #8]
 546              	.LVL22:
 913:FWLIB/src/stm32f4xx_rcc.c **** 
 914:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
 915:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO1_RESET_MASK;
 547              		.loc 1 915 3 is_stmt 1 view .LVU123
 548              		.loc 1 915 10 is_stmt 0 view .LVU124
 549 0004 23F0EC63 		bic	r3, r3, #123731968
 550              	.LVL23:
 916:FWLIB/src/stm32f4xx_rcc.c **** 
 917:FWLIB/src/stm32f4xx_rcc.c ****   /* Select MCO1 clock source and prescaler */
 918:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 551              		.loc 1 918 3 is_stmt 1 view .LVU125
 552              		.loc 1 918 28 is_stmt 0 view .LVU126
 553 0008 0843     		orrs	r0, r0, r1
 554              	.LVL24:
 555              		.loc 1 918 10 view .LVU127
 556 000a 1843     		orrs	r0, r0, r3
 557              	.LVL25:
 919:FWLIB/src/stm32f4xx_rcc.c ****   
 920:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
 921:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 558              		.loc 1 921 3 is_stmt 1 view .LVU128
 559              		.loc 1 921 13 is_stmt 0 view .LVU129
 560 000c 9060     		str	r0, [r2, #8]
 922:FWLIB/src/stm32f4xx_rcc.c **** 
 923:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F410xx)
 924:FWLIB/src/stm32f4xx_rcc.c ****   RCC_MCO1Cmd(ENABLE);
 925:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F410xx */   
 926:FWLIB/src/stm32f4xx_rcc.c **** }
 561              		.loc 1 926 1 view .LVU130
 562 000e 7047     		bx	lr
 563              	.L45:
 564              		.align	2
 565              	.L44:
 566 0010 00380240 		.word	1073887232
 567              		.cfi_endproc
 568              	.LFE137:
 570              		.section	.text.RCC_MCO2Config,"ax",%progbits
 571              		.align	1
 572              		.global	RCC_MCO2Config
 573              		.syntax unified
 574              		.thumb
 575              		.thumb_func
 576              		.fpu fpv4-sp-d16
 578              	RCC_MCO2Config:
 579              	.LVL26:
 580              	.LFB138:
 927:FWLIB/src/stm32f4xx_rcc.c **** 
 928:FWLIB/src/stm32f4xx_rcc.c **** /**
 929:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO2 pin(PC9).
 930:FWLIB/src/stm32f4xx_rcc.c ****   * @note   PC9 should be configured in alternate function mode.
 931:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Source: specifies the clock source to output.
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 27


 932:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 933:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_SYSCLK: System clock (SYSCLK) selected as MCO2 source
 934:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2SOURCE_PLLI2SCLK: PLLI2S clock selected as MCO2 source, available for a
 935:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2SOURCE_I2SCLK: I2SCLK clock selected as MCO2 source, available only for
 936:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_HSE: HSE clock selected as MCO2 source
 937:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLCLK: main PLL clock selected as MCO2 source
 938:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Div: specifies the MCO2 prescaler.
 939:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 940:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_1: no division applied to MCO2 clock
 941:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_2: division by 2 applied to MCO2 clock
 942:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_3: division by 3 applied to MCO2 clock
 943:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
 944:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
 945:FWLIB/src/stm32f4xx_rcc.c ****   * @note  For STM32F410xx devices to output I2SCLK clock on MCO2 you should have
 946:FWLIB/src/stm32f4xx_rcc.c ****   *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
 947:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 948:FWLIB/src/stm32f4xx_rcc.c ****   */
 949:FWLIB/src/stm32f4xx_rcc.c **** void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
 950:FWLIB/src/stm32f4xx_rcc.c **** {
 581              		.loc 1 950 1 is_stmt 1 view -0
 582              		.cfi_startproc
 583              		@ args = 0, pretend = 0, frame = 0
 584              		@ frame_needed = 0, uses_anonymous_args = 0
 585              		@ link register save eliminated.
 951:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 586              		.loc 1 951 3 view .LVU132
 952:FWLIB/src/stm32f4xx_rcc.c ****   
 953:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 954:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
 587              		.loc 1 954 3 view .LVU133
 955:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
 588              		.loc 1 955 3 view .LVU134
 956:FWLIB/src/stm32f4xx_rcc.c ****   
 957:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 589              		.loc 1 957 3 view .LVU135
 590              		.loc 1 957 10 is_stmt 0 view .LVU136
 591 0000 034A     		ldr	r2, .L47
 592 0002 9368     		ldr	r3, [r2, #8]
 593              	.LVL27:
 958:FWLIB/src/stm32f4xx_rcc.c ****   
 959:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear MCO2 and MCO2PRE[2:0] bits */
 960:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO2_RESET_MASK;
 594              		.loc 1 960 3 is_stmt 1 view .LVU137
 595              		.loc 1 960 10 is_stmt 0 view .LVU138
 596 0004 23F07843 		bic	r3, r3, #-134217728
 597              	.LVL28:
 961:FWLIB/src/stm32f4xx_rcc.c **** 
 962:FWLIB/src/stm32f4xx_rcc.c ****   /* Select MCO2 clock source and prescaler */
 963:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 598              		.loc 1 963 3 is_stmt 1 view .LVU139
 599              		.loc 1 963 28 is_stmt 0 view .LVU140
 600 0008 0843     		orrs	r0, r0, r1
 601              	.LVL29:
 602              		.loc 1 963 10 view .LVU141
 603 000a 1843     		orrs	r0, r0, r3
 604              	.LVL30:
 964:FWLIB/src/stm32f4xx_rcc.c ****   
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 28


 965:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
 966:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 605              		.loc 1 966 3 is_stmt 1 view .LVU142
 606              		.loc 1 966 13 is_stmt 0 view .LVU143
 607 000c 9060     		str	r0, [r2, #8]
 967:FWLIB/src/stm32f4xx_rcc.c **** 
 968:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F410xx)
 969:FWLIB/src/stm32f4xx_rcc.c ****   RCC_MCO2Cmd(ENABLE);
 970:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F410xx */   
 971:FWLIB/src/stm32f4xx_rcc.c **** }
 608              		.loc 1 971 1 view .LVU144
 609 000e 7047     		bx	lr
 610              	.L48:
 611              		.align	2
 612              	.L47:
 613 0010 00380240 		.word	1073887232
 614              		.cfi_endproc
 615              	.LFE138:
 617              		.section	.text.RCC_SYSCLKConfig,"ax",%progbits
 618              		.align	1
 619              		.global	RCC_SYSCLKConfig
 620              		.syntax unified
 621              		.thumb
 622              		.thumb_func
 623              		.fpu fpv4-sp-d16
 625              	RCC_SYSCLKConfig:
 626              	.LVL31:
 627              	.LFB139:
 972:FWLIB/src/stm32f4xx_rcc.c **** 
 973:FWLIB/src/stm32f4xx_rcc.c **** /**
 974:FWLIB/src/stm32f4xx_rcc.c ****   * @}
 975:FWLIB/src/stm32f4xx_rcc.c ****   */
 976:FWLIB/src/stm32f4xx_rcc.c **** 
 977:FWLIB/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group2 System AHB and APB busses clocks configuration functions
 978:FWLIB/src/stm32f4xx_rcc.c ****  *  @brief   System, AHB and APB busses clocks configuration functions
 979:FWLIB/src/stm32f4xx_rcc.c ****  *
 980:FWLIB/src/stm32f4xx_rcc.c **** @verbatim   
 981:FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================
 982:FWLIB/src/stm32f4xx_rcc.c ****       ##### System, AHB and APB busses clocks configuration functions #####
 983:FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================  
 984:FWLIB/src/stm32f4xx_rcc.c ****     [..]
 985:FWLIB/src/stm32f4xx_rcc.c ****       This section provide functions allowing to configure the System, AHB, APB1 and 
 986:FWLIB/src/stm32f4xx_rcc.c ****       APB2 busses clocks.
 987:FWLIB/src/stm32f4xx_rcc.c ****   
 988:FWLIB/src/stm32f4xx_rcc.c ****       (#) Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 989:FWLIB/src/stm32f4xx_rcc.c ****           HSE and PLL.
 990:FWLIB/src/stm32f4xx_rcc.c ****           The AHB clock (HCLK) is derived from System clock through configurable 
 991:FWLIB/src/stm32f4xx_rcc.c ****           prescaler and used to clock the CPU, memory and peripherals mapped 
 992:FWLIB/src/stm32f4xx_rcc.c ****           on AHB bus (DMA, GPIO...). APB1 (PCLK1) and APB2 (PCLK2) clocks are derived 
 993:FWLIB/src/stm32f4xx_rcc.c ****           from AHB clock through configurable prescalers and used to clock 
 994:FWLIB/src/stm32f4xx_rcc.c ****           the peripherals mapped on these busses. You can use 
 995:FWLIB/src/stm32f4xx_rcc.c ****           "RCC_GetClocksFreq()" function to retrieve the frequencies of these clocks.  
 996:FWLIB/src/stm32f4xx_rcc.c **** 
 997:FWLIB/src/stm32f4xx_rcc.c ****       -@- All the peripheral clocks are derived from the System clock (SYSCLK) except:
 998:FWLIB/src/stm32f4xx_rcc.c ****         (+@) I2S: the I2S clock can be derived either from a specific PLL (PLLI2S) or
 999:FWLIB/src/stm32f4xx_rcc.c ****              from an external clock mapped on the I2S_CKIN pin. 
1000:FWLIB/src/stm32f4xx_rcc.c ****              You have to use RCC_I2SCLKConfig() function to configure this clock. 
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 29


1001:FWLIB/src/stm32f4xx_rcc.c ****         (+@) RTC: the RTC clock can be derived either from the LSI, LSE or HSE clock
1002:FWLIB/src/stm32f4xx_rcc.c ****              divided by 2 to 31. You have to use RCC_RTCCLKConfig() and RCC_RTCCLKCmd()
1003:FWLIB/src/stm32f4xx_rcc.c ****              functions to configure this clock. 
1004:FWLIB/src/stm32f4xx_rcc.c ****         (+@) USB OTG FS, SDIO and RTC: USB OTG FS require a frequency equal to 48 MHz
1005:FWLIB/src/stm32f4xx_rcc.c ****              to work correctly, while the SDIO require a frequency equal or lower than
1006:FWLIB/src/stm32f4xx_rcc.c ****              to 48. This clock is derived of the main PLL through PLLQ divider.
1007:FWLIB/src/stm32f4xx_rcc.c ****         (+@) IWDG clock which is always the LSI clock.
1008:FWLIB/src/stm32f4xx_rcc.c ****        
1009:FWLIB/src/stm32f4xx_rcc.c ****       (#) For STM32F405xx/407xx and STM32F415xx/417xx devices, the maximum frequency 
1010:FWLIB/src/stm32f4xx_rcc.c ****          of the SYSCLK and HCLK is 168 MHz, PCLK2 84 MHz and PCLK1 42 MHz. Depending 
1011:FWLIB/src/stm32f4xx_rcc.c ****          on the device voltage range, the maximum frequency should be adapted accordingly:
1012:FWLIB/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1013:FWLIB/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
1014:FWLIB/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|
1015:FWLIB/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
1016:FWLIB/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
1017:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1018:FWLIB/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
1019:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1020:FWLIB/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
1021:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1022:FWLIB/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
1023:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1024:FWLIB/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |66 < HCLK <= 88  |60 < HCLK <= 80  |
1025:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1026:FWLIB/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|88 < HCLK <= 110 |80 < HCLK <= 100 |
1027:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1028:FWLIB/src/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|150< HCLK <= 168|120< HCLK <= 144|110 < HCLK <= 132|100 < HCLK <= 120|
1029:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1030:FWLIB/src/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|132 < HCLK <= 154|120 < HCLK <= 140|
1031:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1032:FWLIB/src/stm32f4xx_rcc.c ****  |7WS(8CPU cycle)|      NA        |      NA        |154 < HCLK <= 168|140 < HCLK <= 160|
1033:FWLIB/src/stm32f4xx_rcc.c ****  +---------------|----------------|----------------|-----------------|-----------------+
1034:FWLIB/src/stm32f4xx_rcc.c ****       (#) For STM32F42xxx/43xxx/469xx/479xx devices, the maximum frequency of the SYSCLK and HCLK i
1035:FWLIB/src/stm32f4xx_rcc.c ****           PCLK2 90 MHz and PCLK1 45 MHz. Depending on the device voltage range, the maximum 
1036:FWLIB/src/stm32f4xx_rcc.c ****           frequency should be adapted accordingly:
1037:FWLIB/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1038:FWLIB/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
1039:FWLIB/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|
1040:FWLIB/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
1041:FWLIB/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
1042:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1043:FWLIB/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
1044:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1045:FWLIB/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
1046:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1047:FWLIB/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
1048:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1049:FWLIB/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |66 < HCLK <= 88  |60 < HCLK <= 80  |
1050:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1051:FWLIB/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|88 < HCLK <= 110 |80 < HCLK <= 100 |
1052:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1053:FWLIB/src/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|120< HCLK <= 180|120< HCLK <= 144|110 < HCLK <= 132|100 < HCLK <= 120|
1054:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1055:FWLIB/src/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|132 < HCLK <= 154|120 < HCLK <= 140|
1056:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1057:FWLIB/src/stm32f4xx_rcc.c ****  |7WS(8CPU cycle)|      NA        |168< HCLK <= 180|154 < HCLK <= 176|140 < HCLK <= 160|
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 30


1058:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1059:FWLIB/src/stm32f4xx_rcc.c ****  |8WS(9CPU cycle)|      NA        |      NA        |176 < HCLK <= 180|160 < HCLK <= 168|
1060:FWLIB/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1061:FWLIB/src/stm32f4xx_rcc.c ****    
1062:FWLIB/src/stm32f4xx_rcc.c ****       (#) For STM32F401xx devices, the maximum frequency of the SYSCLK and HCLK is 84 MHz, 
1063:FWLIB/src/stm32f4xx_rcc.c ****           PCLK2 84 MHz and PCLK1 42 MHz. Depending on the device voltage range, the maximum 
1064:FWLIB/src/stm32f4xx_rcc.c ****           frequency should be adapted accordingly:
1065:FWLIB/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1066:FWLIB/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
1067:FWLIB/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|
1068:FWLIB/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
1069:FWLIB/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
1070:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1071:FWLIB/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
1072:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1073:FWLIB/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
1074:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1075:FWLIB/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 84 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
1076:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1077:FWLIB/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|      NA        |72 < HCLK <= 84 |66 < HCLK <= 84  |60 < HCLK <= 80  |
1078:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1079:FWLIB/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|      NA        |      NA        |      NA         |80 < HCLK <= 84  |
1080:FWLIB/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1081:FWLIB/src/stm32f4xx_rcc.c **** 
1082:FWLIB/src/stm32f4xx_rcc.c ****       (#) For STM32F410xx/STM32F411xE devices, the maximum frequency of the SYSCLK and HCLK is 100 
1083:FWLIB/src/stm32f4xx_rcc.c ****           PCLK2 100 MHz and PCLK1 50 MHz. Depending on the device voltage range, the maximum 
1084:FWLIB/src/stm32f4xx_rcc.c ****           frequency should be adapted accordingly:
1085:FWLIB/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1086:FWLIB/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
1087:FWLIB/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|
1088:FWLIB/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
1089:FWLIB/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
1090:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1091:FWLIB/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 18   |0 < HCLK <= 16   |
1092:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1093:FWLIB/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 64 |24 < HCLK <= 48 |18 < HCLK <= 36  |16 < HCLK <= 32  |
1094:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1095:FWLIB/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|64 < HCLK <= 90 |48 < HCLK <= 72 |36 < HCLK <= 54  |32 < HCLK <= 48  |
1096:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1097:FWLIB/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 100|72 < HCLK <= 96 |54 < HCLK <= 72  |48 < HCLK <= 64  |
1098:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1099:FWLIB/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|      NA        |96 < HCLK <= 100|72 < HCLK <= 90  |64 < HCLK <= 80  |
1100:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1101:FWLIB/src/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|      NA        |       NA       |90 < HCLK <= 100 |80 < HCLK <= 96  |
1102:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1103:FWLIB/src/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |       NA       |        NA       |96 < HCLK <= 100 |
1104:FWLIB/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1105:FWLIB/src/stm32f4xx_rcc.c ****   
1106:FWLIB/src/stm32f4xx_rcc.c ****       -@- On STM32F405xx/407xx and STM32F415xx/417xx devices: 
1107:FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS = '0', the maximum value of fHCLK = 144MHz. 
1108:FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS = '1', the maximum value of fHCLK = 168MHz. 
1109:FWLIB/src/stm32f4xx_rcc.c ****           [..] 
1110:FWLIB/src/stm32f4xx_rcc.c ****           On STM32F42xxx/43xxx/469xx/479xx devices:
1111:FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x01', the maximum value of fHCLK is 120MHz.
1112:FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x10', the maximum value of fHCLK is 144MHz.
1113:FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x11', the maximum value of f  is 168MHz 
1114:FWLIB/src/stm32f4xx_rcc.c ****           [..]  
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 31


1115:FWLIB/src/stm32f4xx_rcc.c ****           On STM32F401x devices:
1116:FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x01', the maximum value of fHCLK is 64MHz.
1117:FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x10', the maximum value of fHCLK is 84MHz.
1118:FWLIB/src/stm32f4xx_rcc.c ****           On STM32F410xx/STM32F411xE devices:
1119:FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x01' the maximum value of fHCLK is 64MHz.
1120:FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x10' the maximum value of fHCLK is 84MHz.
1121:FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x11' the maximum value of fHCLK is 100MHz.
1122:FWLIB/src/stm32f4xx_rcc.c **** 
1123:FWLIB/src/stm32f4xx_rcc.c ****        You can use PWR_MainRegulatorModeConfig() function to control VOS bits.
1124:FWLIB/src/stm32f4xx_rcc.c **** 
1125:FWLIB/src/stm32f4xx_rcc.c **** @endverbatim
1126:FWLIB/src/stm32f4xx_rcc.c ****   * @{
1127:FWLIB/src/stm32f4xx_rcc.c ****   */
1128:FWLIB/src/stm32f4xx_rcc.c **** 
1129:FWLIB/src/stm32f4xx_rcc.c **** /**
1130:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
1131:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
1132:FWLIB/src/stm32f4xx_rcc.c ****   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
1133:FWLIB/src/stm32f4xx_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
1134:FWLIB/src/stm32f4xx_rcc.c ****   *         (if the Clock Security System CSS is enabled).
1135:FWLIB/src/stm32f4xx_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
1136:FWLIB/src/stm32f4xx_rcc.c ****   *         clock source is ready (clock stable after startup delay or PLL locked). 
1137:FWLIB/src/stm32f4xx_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
1138:FWLIB/src/stm32f4xx_rcc.c ****   *         occur when the clock source will be ready. 
1139:FWLIB/src/stm32f4xx_rcc.c ****   *         You can use RCC_GetSYSCLKSource() function to know which clock is
1140:FWLIB/src/stm32f4xx_rcc.c ****   *         currently used as system clock source. 
1141:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock.
1142:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1143:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSI: HSI selected as system clock source
1144:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSE: HSE selected as system clock source
1145:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_
1146:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F
1147:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1148:FWLIB/src/stm32f4xx_rcc.c ****   */
1149:FWLIB/src/stm32f4xx_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
1150:FWLIB/src/stm32f4xx_rcc.c **** {
 628              		.loc 1 1150 1 is_stmt 1 view -0
 629              		.cfi_startproc
 630              		@ args = 0, pretend = 0, frame = 0
 631              		@ frame_needed = 0, uses_anonymous_args = 0
 632              		@ link register save eliminated.
1151:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 633              		.loc 1 1151 3 view .LVU146
1152:FWLIB/src/stm32f4xx_rcc.c **** 
1153:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1154:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 634              		.loc 1 1154 3 view .LVU147
1155:FWLIB/src/stm32f4xx_rcc.c **** 
1156:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 635              		.loc 1 1156 3 view .LVU148
 636              		.loc 1 1156 10 is_stmt 0 view .LVU149
 637 0000 034A     		ldr	r2, .L50
 638 0002 9368     		ldr	r3, [r2, #8]
 639              	.LVL32:
1157:FWLIB/src/stm32f4xx_rcc.c **** 
1158:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear SW[1:0] bits */
1159:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_SW;
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 32


 640              		.loc 1 1159 3 is_stmt 1 view .LVU150
 641              		.loc 1 1159 10 is_stmt 0 view .LVU151
 642 0004 23F00303 		bic	r3, r3, #3
 643              	.LVL33:
1160:FWLIB/src/stm32f4xx_rcc.c **** 
1161:FWLIB/src/stm32f4xx_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
1162:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 644              		.loc 1 1162 3 is_stmt 1 view .LVU152
 645              		.loc 1 1162 10 is_stmt 0 view .LVU153
 646 0008 0343     		orrs	r3, r3, r0
 647              	.LVL34:
1163:FWLIB/src/stm32f4xx_rcc.c **** 
1164:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1165:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 648              		.loc 1 1165 3 is_stmt 1 view .LVU154
 649              		.loc 1 1165 13 is_stmt 0 view .LVU155
 650 000a 9360     		str	r3, [r2, #8]
1166:FWLIB/src/stm32f4xx_rcc.c **** }
 651              		.loc 1 1166 1 view .LVU156
 652 000c 7047     		bx	lr
 653              	.L51:
 654 000e 00BF     		.align	2
 655              	.L50:
 656 0010 00380240 		.word	1073887232
 657              		.cfi_endproc
 658              	.LFE139:
 660              		.section	.text.RCC_GetSYSCLKSource,"ax",%progbits
 661              		.align	1
 662              		.global	RCC_GetSYSCLKSource
 663              		.syntax unified
 664              		.thumb
 665              		.thumb_func
 666              		.fpu fpv4-sp-d16
 668              	RCC_GetSYSCLKSource:
 669              	.LFB140:
1167:FWLIB/src/stm32f4xx_rcc.c **** 
1168:FWLIB/src/stm32f4xx_rcc.c **** /**
1169:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Returns the clock source used as system clock.
1170:FWLIB/src/stm32f4xx_rcc.c ****   * @param  None
1171:FWLIB/src/stm32f4xx_rcc.c ****   * @retval The clock source used as system clock. The returned value can be one
1172:FWLIB/src/stm32f4xx_rcc.c ****   *         of the following:
1173:FWLIB/src/stm32f4xx_rcc.c ****   *              - 0x00: HSI used as system clock
1174:FWLIB/src/stm32f4xx_rcc.c ****   *              - 0x04: HSE used as system clock
1175:FWLIB/src/stm32f4xx_rcc.c ****   *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
1176:FWLIB/src/stm32f4xx_rcc.c ****   *              - 0x0C: PLL R used as system clock (only for STM32F412xG, STM32F413_423xx and STM3
1177:FWLIB/src/stm32f4xx_rcc.c ****   */
1178:FWLIB/src/stm32f4xx_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
1179:FWLIB/src/stm32f4xx_rcc.c **** {
 670              		.loc 1 1179 1 is_stmt 1 view -0
 671              		.cfi_startproc
 672              		@ args = 0, pretend = 0, frame = 0
 673              		@ frame_needed = 0, uses_anonymous_args = 0
 674              		@ link register save eliminated.
1180:FWLIB/src/stm32f4xx_rcc.c ****   return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 675              		.loc 1 1180 3 view .LVU158
 676              		.loc 1 1180 24 is_stmt 0 view .LVU159
 677 0000 024B     		ldr	r3, .L53
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 33


 678 0002 9868     		ldr	r0, [r3, #8]
1181:FWLIB/src/stm32f4xx_rcc.c **** }
 679              		.loc 1 1181 1 view .LVU160
 680 0004 00F00C00 		and	r0, r0, #12
 681 0008 7047     		bx	lr
 682              	.L54:
 683 000a 00BF     		.align	2
 684              	.L53:
 685 000c 00380240 		.word	1073887232
 686              		.cfi_endproc
 687              	.LFE140:
 689              		.section	.text.RCC_HCLKConfig,"ax",%progbits
 690              		.align	1
 691              		.global	RCC_HCLKConfig
 692              		.syntax unified
 693              		.thumb
 694              		.thumb_func
 695              		.fpu fpv4-sp-d16
 697              	RCC_HCLKConfig:
 698              	.LVL35:
 699              	.LFB141:
1182:FWLIB/src/stm32f4xx_rcc.c **** 
1183:FWLIB/src/stm32f4xx_rcc.c **** /**
1184:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
1185:FWLIB/src/stm32f4xx_rcc.c ****   * @note   Depending on the device voltage range, the software has to set correctly
1186:FWLIB/src/stm32f4xx_rcc.c ****   *         these bits to ensure that HCLK not exceed the maximum allowed frequency
1187:FWLIB/src/stm32f4xx_rcc.c ****   *         (for more details refer to section above
1188:FWLIB/src/stm32f4xx_rcc.c ****   *           "CPU, AHB and APB busses clocks configuration functions")
1189:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
1190:FWLIB/src/stm32f4xx_rcc.c ****   *         the system clock (SYSCLK).
1191:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1192:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div1: AHB clock = SYSCLK
1193:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div2: AHB clock = SYSCLK/2
1194:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div4: AHB clock = SYSCLK/4
1195:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div8: AHB clock = SYSCLK/8
1196:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div16: AHB clock = SYSCLK/16
1197:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div64: AHB clock = SYSCLK/64
1198:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
1199:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
1200:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
1201:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1202:FWLIB/src/stm32f4xx_rcc.c ****   */
1203:FWLIB/src/stm32f4xx_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
1204:FWLIB/src/stm32f4xx_rcc.c **** {
 700              		.loc 1 1204 1 is_stmt 1 view -0
 701              		.cfi_startproc
 702              		@ args = 0, pretend = 0, frame = 0
 703              		@ frame_needed = 0, uses_anonymous_args = 0
 704              		@ link register save eliminated.
1205:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 705              		.loc 1 1205 3 view .LVU162
1206:FWLIB/src/stm32f4xx_rcc.c ****   
1207:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1208:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
 706              		.loc 1 1208 3 view .LVU163
1209:FWLIB/src/stm32f4xx_rcc.c **** 
1210:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 34


 707              		.loc 1 1210 3 view .LVU164
 708              		.loc 1 1210 10 is_stmt 0 view .LVU165
 709 0000 034A     		ldr	r2, .L56
 710 0002 9368     		ldr	r3, [r2, #8]
 711              	.LVL36:
1211:FWLIB/src/stm32f4xx_rcc.c **** 
1212:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear HPRE[3:0] bits */
1213:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_HPRE;
 712              		.loc 1 1213 3 is_stmt 1 view .LVU166
 713              		.loc 1 1213 10 is_stmt 0 view .LVU167
 714 0004 23F0F003 		bic	r3, r3, #240
 715              	.LVL37:
1214:FWLIB/src/stm32f4xx_rcc.c **** 
1215:FWLIB/src/stm32f4xx_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
1216:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLK;
 716              		.loc 1 1216 3 is_stmt 1 view .LVU168
 717              		.loc 1 1216 10 is_stmt 0 view .LVU169
 718 0008 0343     		orrs	r3, r3, r0
 719              	.LVL38:
1217:FWLIB/src/stm32f4xx_rcc.c **** 
1218:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1219:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 720              		.loc 1 1219 3 is_stmt 1 view .LVU170
 721              		.loc 1 1219 13 is_stmt 0 view .LVU171
 722 000a 9360     		str	r3, [r2, #8]
1220:FWLIB/src/stm32f4xx_rcc.c **** }
 723              		.loc 1 1220 1 view .LVU172
 724 000c 7047     		bx	lr
 725              	.L57:
 726 000e 00BF     		.align	2
 727              	.L56:
 728 0010 00380240 		.word	1073887232
 729              		.cfi_endproc
 730              	.LFE141:
 732              		.section	.text.RCC_PCLK1Config,"ax",%progbits
 733              		.align	1
 734              		.global	RCC_PCLK1Config
 735              		.syntax unified
 736              		.thumb
 737              		.thumb_func
 738              		.fpu fpv4-sp-d16
 740              	RCC_PCLK1Config:
 741              	.LVL39:
 742              	.LFB142:
1221:FWLIB/src/stm32f4xx_rcc.c **** 
1222:FWLIB/src/stm32f4xx_rcc.c **** /**
1223:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the Low Speed APB clock (PCLK1).
1224:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB1 clock divider. This clock is derived from 
1225:FWLIB/src/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
1226:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1227:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB1 clock = HCLK
1228:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB1 clock = HCLK/2
1229:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB1 clock = HCLK/4
1230:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
1231:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
1232:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1233:FWLIB/src/stm32f4xx_rcc.c ****   */
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 35


1234:FWLIB/src/stm32f4xx_rcc.c **** void RCC_PCLK1Config(uint32_t RCC_HCLK)
1235:FWLIB/src/stm32f4xx_rcc.c **** {
 743              		.loc 1 1235 1 is_stmt 1 view -0
 744              		.cfi_startproc
 745              		@ args = 0, pretend = 0, frame = 0
 746              		@ frame_needed = 0, uses_anonymous_args = 0
 747              		@ link register save eliminated.
1236:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 748              		.loc 1 1236 3 view .LVU174
1237:FWLIB/src/stm32f4xx_rcc.c **** 
1238:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1239:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 749              		.loc 1 1239 3 view .LVU175
1240:FWLIB/src/stm32f4xx_rcc.c **** 
1241:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 750              		.loc 1 1241 3 view .LVU176
 751              		.loc 1 1241 10 is_stmt 0 view .LVU177
 752 0000 034A     		ldr	r2, .L59
 753 0002 9368     		ldr	r3, [r2, #8]
 754              	.LVL40:
1242:FWLIB/src/stm32f4xx_rcc.c **** 
1243:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear PPRE1[2:0] bits */
1244:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE1;
 755              		.loc 1 1244 3 is_stmt 1 view .LVU178
 756              		.loc 1 1244 10 is_stmt 0 view .LVU179
 757 0004 23F4E053 		bic	r3, r3, #7168
 758              	.LVL41:
1245:FWLIB/src/stm32f4xx_rcc.c **** 
1246:FWLIB/src/stm32f4xx_rcc.c ****   /* Set PPRE1[2:0] bits according to RCC_HCLK value */
1247:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK;
 759              		.loc 1 1247 3 is_stmt 1 view .LVU180
 760              		.loc 1 1247 10 is_stmt 0 view .LVU181
 761 0008 0343     		orrs	r3, r3, r0
 762              	.LVL42:
1248:FWLIB/src/stm32f4xx_rcc.c **** 
1249:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1250:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 763              		.loc 1 1250 3 is_stmt 1 view .LVU182
 764              		.loc 1 1250 13 is_stmt 0 view .LVU183
 765 000a 9360     		str	r3, [r2, #8]
1251:FWLIB/src/stm32f4xx_rcc.c **** }
 766              		.loc 1 1251 1 view .LVU184
 767 000c 7047     		bx	lr
 768              	.L60:
 769 000e 00BF     		.align	2
 770              	.L59:
 771 0010 00380240 		.word	1073887232
 772              		.cfi_endproc
 773              	.LFE142:
 775              		.section	.text.RCC_PCLK2Config,"ax",%progbits
 776              		.align	1
 777              		.global	RCC_PCLK2Config
 778              		.syntax unified
 779              		.thumb
 780              		.thumb_func
 781              		.fpu fpv4-sp-d16
 783              	RCC_PCLK2Config:
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 36


 784              	.LVL43:
 785              	.LFB143:
1252:FWLIB/src/stm32f4xx_rcc.c **** 
1253:FWLIB/src/stm32f4xx_rcc.c **** /**
1254:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the High Speed APB clock (PCLK2).
1255:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB2 clock divider. This clock is derived from 
1256:FWLIB/src/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
1257:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1258:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB2 clock = HCLK
1259:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB2 clock = HCLK/2
1260:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB2 clock = HCLK/4
1261:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
1262:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
1263:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1264:FWLIB/src/stm32f4xx_rcc.c ****   */
1265:FWLIB/src/stm32f4xx_rcc.c **** void RCC_PCLK2Config(uint32_t RCC_HCLK)
1266:FWLIB/src/stm32f4xx_rcc.c **** {
 786              		.loc 1 1266 1 is_stmt 1 view -0
 787              		.cfi_startproc
 788              		@ args = 0, pretend = 0, frame = 0
 789              		@ frame_needed = 0, uses_anonymous_args = 0
 790              		@ link register save eliminated.
1267:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 791              		.loc 1 1267 3 view .LVU186
1268:FWLIB/src/stm32f4xx_rcc.c **** 
1269:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1270:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 792              		.loc 1 1270 3 view .LVU187
1271:FWLIB/src/stm32f4xx_rcc.c **** 
1272:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 793              		.loc 1 1272 3 view .LVU188
 794              		.loc 1 1272 10 is_stmt 0 view .LVU189
 795 0000 034A     		ldr	r2, .L62
 796 0002 9368     		ldr	r3, [r2, #8]
 797              	.LVL44:
1273:FWLIB/src/stm32f4xx_rcc.c **** 
1274:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear PPRE2[2:0] bits */
1275:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE2;
 798              		.loc 1 1275 3 is_stmt 1 view .LVU190
 799              		.loc 1 1275 10 is_stmt 0 view .LVU191
 800 0004 23F46043 		bic	r3, r3, #57344
 801              	.LVL45:
1276:FWLIB/src/stm32f4xx_rcc.c **** 
1277:FWLIB/src/stm32f4xx_rcc.c ****   /* Set PPRE2[2:0] bits according to RCC_HCLK value */
1278:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK << 3;
 802              		.loc 1 1278 3 is_stmt 1 view .LVU192
 803              		.loc 1 1278 10 is_stmt 0 view .LVU193
 804 0008 43EAC003 		orr	r3, r3, r0, lsl #3
 805              	.LVL46:
1279:FWLIB/src/stm32f4xx_rcc.c **** 
1280:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1281:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 806              		.loc 1 1281 3 is_stmt 1 view .LVU194
 807              		.loc 1 1281 13 is_stmt 0 view .LVU195
 808 000c 9360     		str	r3, [r2, #8]
1282:FWLIB/src/stm32f4xx_rcc.c **** }
 809              		.loc 1 1282 1 view .LVU196
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 37


 810 000e 7047     		bx	lr
 811              	.L63:
 812              		.align	2
 813              	.L62:
 814 0010 00380240 		.word	1073887232
 815              		.cfi_endproc
 816              	.LFE143:
 818              		.section	.text.RCC_GetClocksFreq,"ax",%progbits
 819              		.align	1
 820              		.global	RCC_GetClocksFreq
 821              		.syntax unified
 822              		.thumb
 823              		.thumb_func
 824              		.fpu fpv4-sp-d16
 826              	RCC_GetClocksFreq:
 827              	.LVL47:
 828              	.LFB144:
1283:FWLIB/src/stm32f4xx_rcc.c **** 
1284:FWLIB/src/stm32f4xx_rcc.c **** /**
1285:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Returns the frequencies of different on chip clocks; SYSCLK, HCLK, 
1286:FWLIB/src/stm32f4xx_rcc.c ****   *         PCLK1 and PCLK2.
1287:FWLIB/src/stm32f4xx_rcc.c ****   * 
1288:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The system frequency computed by this function is not the real 
1289:FWLIB/src/stm32f4xx_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined 
1290:FWLIB/src/stm32f4xx_rcc.c ****   *         constant and the selected clock source:
1291:FWLIB/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
1292:FWLIB/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE(**)
1293:FWLIB/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is PLL, function returns values based on HSE_VALUE(**) 
1294:FWLIB/src/stm32f4xx_rcc.c ****   *           or HSI_VALUE(*) multiplied/divided by the PLL factors.         
1295:FWLIB/src/stm32f4xx_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f4xx.h file (default value
1296:FWLIB/src/stm32f4xx_rcc.c ****   *               16 MHz) but the real value may vary depending on the variations
1297:FWLIB/src/stm32f4xx_rcc.c ****   *               in voltage and temperature.
1298:FWLIB/src/stm32f4xx_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f4xx.h file (default value
1299:FWLIB/src/stm32f4xx_rcc.c ****   *                25 MHz), user has to ensure that HSE_VALUE is same as the real
1300:FWLIB/src/stm32f4xx_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
1301:FWLIB/src/stm32f4xx_rcc.c ****   *                have wrong result.
1302:FWLIB/src/stm32f4xx_rcc.c ****   *                
1303:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The result of this function could be not correct when using fractional
1304:FWLIB/src/stm32f4xx_rcc.c ****   *         value for HSE crystal.
1305:FWLIB/src/stm32f4xx_rcc.c ****   *   
1306:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
1307:FWLIB/src/stm32f4xx_rcc.c ****   *          the clocks frequencies.
1308:FWLIB/src/stm32f4xx_rcc.c ****   *     
1309:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used by the user application to compute the 
1310:FWLIB/src/stm32f4xx_rcc.c ****   *         baudrate for the communication peripherals or configure other parameters.
1311:FWLIB/src/stm32f4xx_rcc.c ****   * @note   Each time SYSCLK, HCLK, PCLK1 and/or PCLK2 clock changes, this function
1312:FWLIB/src/stm32f4xx_rcc.c ****   *         must be called to update the structure's field. Otherwise, any
1313:FWLIB/src/stm32f4xx_rcc.c ****   *         configuration based on this function will be incorrect.
1314:FWLIB/src/stm32f4xx_rcc.c ****   *    
1315:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1316:FWLIB/src/stm32f4xx_rcc.c ****   */
1317:FWLIB/src/stm32f4xx_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
1318:FWLIB/src/stm32f4xx_rcc.c **** {
 829              		.loc 1 1318 1 is_stmt 1 view -0
 830              		.cfi_startproc
 831              		@ args = 0, pretend = 0, frame = 0
 832              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 38


 833              		@ link register save eliminated.
 834              		.loc 1 1318 1 is_stmt 0 view .LVU198
 835 0000 10B4     		push	{r4}
 836              	.LCFI0:
 837              		.cfi_def_cfa_offset 4
 838              		.cfi_offset 4, -4
1319:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 839              		.loc 1 1319 3 is_stmt 1 view .LVU199
 840              	.LVL48:
1320:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
1321:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t pllr = 2;
1322:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
1323:FWLIB/src/stm32f4xx_rcc.c ****   
1324:FWLIB/src/stm32f4xx_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
1325:FWLIB/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 841              		.loc 1 1325 3 view .LVU200
 842              		.loc 1 1325 12 is_stmt 0 view .LVU201
 843 0002 294B     		ldr	r3, .L73
 844 0004 9B68     		ldr	r3, [r3, #8]
 845              		.loc 1 1325 7 view .LVU202
 846 0006 03F00C03 		and	r3, r3, #12
 847              	.LVL49:
1326:FWLIB/src/stm32f4xx_rcc.c ****   
1327:FWLIB/src/stm32f4xx_rcc.c ****   switch (tmp)
 848              		.loc 1 1327 3 is_stmt 1 view .LVU203
 849 000a 042B     		cmp	r3, #4
 850 000c 23D0     		beq	.L65
 851 000e 082B     		cmp	r3, #8
 852 0010 24D0     		beq	.L66
 853 0012 13B1     		cbz	r3, .L72
1328:FWLIB/src/stm32f4xx_rcc.c ****   {
1329:FWLIB/src/stm32f4xx_rcc.c ****   case 0x00:  /* HSI used as system clock source */
1330:FWLIB/src/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
1331:FWLIB/src/stm32f4xx_rcc.c ****     break;
1332:FWLIB/src/stm32f4xx_rcc.c ****   case 0x04:  /* HSE used as system clock  source */
1333:FWLIB/src/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
1334:FWLIB/src/stm32f4xx_rcc.c ****     break;
1335:FWLIB/src/stm32f4xx_rcc.c ****   case 0x08:  /* PLL P used as system clock  source */
1336:FWLIB/src/stm32f4xx_rcc.c ****     
1337:FWLIB/src/stm32f4xx_rcc.c ****     /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
1338:FWLIB/src/stm32f4xx_rcc.c ****     SYSCLK = PLL_VCO / PLLP
1339:FWLIB/src/stm32f4xx_rcc.c ****     */    
1340:FWLIB/src/stm32f4xx_rcc.c ****     pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
1341:FWLIB/src/stm32f4xx_rcc.c ****     pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
1342:FWLIB/src/stm32f4xx_rcc.c ****     
1343:FWLIB/src/stm32f4xx_rcc.c ****     if (pllsource != 0)
1344:FWLIB/src/stm32f4xx_rcc.c ****     {
1345:FWLIB/src/stm32f4xx_rcc.c ****       /* HSE used as PLL clock source */
1346:FWLIB/src/stm32f4xx_rcc.c ****       pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
1347:FWLIB/src/stm32f4xx_rcc.c ****     }
1348:FWLIB/src/stm32f4xx_rcc.c ****     else
1349:FWLIB/src/stm32f4xx_rcc.c ****     {
1350:FWLIB/src/stm32f4xx_rcc.c ****       /* HSI used as PLL clock source */
1351:FWLIB/src/stm32f4xx_rcc.c ****       pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
1352:FWLIB/src/stm32f4xx_rcc.c ****     }
1353:FWLIB/src/stm32f4xx_rcc.c ****     
1354:FWLIB/src/stm32f4xx_rcc.c ****     pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 39


1355:FWLIB/src/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
1356:FWLIB/src/stm32f4xx_rcc.c ****     break;
1357:FWLIB/src/stm32f4xx_rcc.c **** 
1358:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
1359:FWLIB/src/stm32f4xx_rcc.c ****   case 0x0C:  /* PLL R used as system clock  source */
1360:FWLIB/src/stm32f4xx_rcc.c ****     /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
1361:FWLIB/src/stm32f4xx_rcc.c ****     SYSCLK = PLL_VCO / PLLR
1362:FWLIB/src/stm32f4xx_rcc.c ****     */    
1363:FWLIB/src/stm32f4xx_rcc.c ****     pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
1364:FWLIB/src/stm32f4xx_rcc.c ****     pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
1365:FWLIB/src/stm32f4xx_rcc.c ****     
1366:FWLIB/src/stm32f4xx_rcc.c ****     if (pllsource != 0)
1367:FWLIB/src/stm32f4xx_rcc.c ****     {
1368:FWLIB/src/stm32f4xx_rcc.c ****       /* HSE used as PLL clock source */
1369:FWLIB/src/stm32f4xx_rcc.c ****       pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
1370:FWLIB/src/stm32f4xx_rcc.c ****     }
1371:FWLIB/src/stm32f4xx_rcc.c ****     else
1372:FWLIB/src/stm32f4xx_rcc.c ****     {
1373:FWLIB/src/stm32f4xx_rcc.c ****       /* HSI used as PLL clock source */
1374:FWLIB/src/stm32f4xx_rcc.c ****       pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
1375:FWLIB/src/stm32f4xx_rcc.c ****     }
1376:FWLIB/src/stm32f4xx_rcc.c ****     
1377:FWLIB/src/stm32f4xx_rcc.c ****     pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
1378:FWLIB/src/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
1379:FWLIB/src/stm32f4xx_rcc.c ****     break;
1380:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
1381:FWLIB/src/stm32f4xx_rcc.c ****     
1382:FWLIB/src/stm32f4xx_rcc.c ****   default:
1383:FWLIB/src/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 854              		.loc 1 1383 5 view .LVU204
 855              		.loc 1 1383 34 is_stmt 0 view .LVU205
 856 0014 254B     		ldr	r3, .L73+4
 857              	.LVL50:
 858              		.loc 1 1383 34 view .LVU206
 859 0016 0360     		str	r3, [r0]
1384:FWLIB/src/stm32f4xx_rcc.c ****     break;
 860              		.loc 1 1384 5 is_stmt 1 view .LVU207
 861 0018 01E0     		b	.L68
 862              	.LVL51:
 863              	.L72:
1330:FWLIB/src/stm32f4xx_rcc.c ****     break;
 864              		.loc 1 1330 5 view .LVU208
1330:FWLIB/src/stm32f4xx_rcc.c ****     break;
 865              		.loc 1 1330 34 is_stmt 0 view .LVU209
 866 001a 244B     		ldr	r3, .L73+4
 867              	.LVL52:
1330:FWLIB/src/stm32f4xx_rcc.c ****     break;
 868              		.loc 1 1330 34 view .LVU210
 869 001c 0360     		str	r3, [r0]
1331:FWLIB/src/stm32f4xx_rcc.c ****   case 0x04:  /* HSE used as system clock  source */
 870              		.loc 1 1331 5 is_stmt 1 view .LVU211
 871              	.LVL53:
 872              	.L68:
1385:FWLIB/src/stm32f4xx_rcc.c ****   }
1386:FWLIB/src/stm32f4xx_rcc.c ****   /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
1387:FWLIB/src/stm32f4xx_rcc.c ****   
1388:FWLIB/src/stm32f4xx_rcc.c ****   /* Get HCLK prescaler */
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 40


1389:FWLIB/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_HPRE;
 873              		.loc 1 1389 3 view .LVU212
 874              		.loc 1 1389 12 is_stmt 0 view .LVU213
 875 001e 224C     		ldr	r4, .L73
 876 0020 A368     		ldr	r3, [r4, #8]
 877              	.LVL54:
1390:FWLIB/src/stm32f4xx_rcc.c ****   tmp = tmp >> 4;
 878              		.loc 1 1390 3 is_stmt 1 view .LVU214
 879              		.loc 1 1390 7 is_stmt 0 view .LVU215
 880 0022 C3F30313 		ubfx	r3, r3, #4, #4
 881              	.LVL55:
1391:FWLIB/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 882              		.loc 1 1391 3 is_stmt 1 view .LVU216
 883              		.loc 1 1391 27 is_stmt 0 view .LVU217
 884 0026 2249     		ldr	r1, .L73+8
 885 0028 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 886              	.LVL56:
 887              		.loc 1 1391 27 view .LVU218
 888 002a DAB2     		uxtb	r2, r3
 889              	.LVL57:
1392:FWLIB/src/stm32f4xx_rcc.c ****   /* HCLK clock frequency */
1393:FWLIB/src/stm32f4xx_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 890              		.loc 1 1393 3 is_stmt 1 view .LVU219
 891              		.loc 1 1393 42 is_stmt 0 view .LVU220
 892 002c 0368     		ldr	r3, [r0]
 893              		.loc 1 1393 61 view .LVU221
 894 002e D340     		lsrs	r3, r3, r2
 895              		.loc 1 1393 30 view .LVU222
 896 0030 4360     		str	r3, [r0, #4]
1394:FWLIB/src/stm32f4xx_rcc.c **** 
1395:FWLIB/src/stm32f4xx_rcc.c ****   /* Get PCLK1 prescaler */
1396:FWLIB/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 897              		.loc 1 1396 3 is_stmt 1 view .LVU223
 898              		.loc 1 1396 12 is_stmt 0 view .LVU224
 899 0032 A268     		ldr	r2, [r4, #8]
 900              	.LVL58:
1397:FWLIB/src/stm32f4xx_rcc.c ****   tmp = tmp >> 10;
 901              		.loc 1 1397 3 is_stmt 1 view .LVU225
 902              		.loc 1 1397 7 is_stmt 0 view .LVU226
 903 0034 C2F38222 		ubfx	r2, r2, #10, #3
 904              	.LVL59:
1398:FWLIB/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 905              		.loc 1 1398 3 is_stmt 1 view .LVU227
 906              		.loc 1 1398 27 is_stmt 0 view .LVU228
 907 0038 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 908              	.LVL60:
 909              		.loc 1 1398 27 view .LVU229
 910 003a D2B2     		uxtb	r2, r2
 911              	.LVL61:
1399:FWLIB/src/stm32f4xx_rcc.c ****   /* PCLK1 clock frequency */
1400:FWLIB/src/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 912              		.loc 1 1400 3 is_stmt 1 view .LVU230
 913              		.loc 1 1400 60 is_stmt 0 view .LVU231
 914 003c 23FA02F2 		lsr	r2, r3, r2
 915              	.LVL62:
 916              		.loc 1 1400 31 view .LVU232
 917 0040 8260     		str	r2, [r0, #8]
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 41


1401:FWLIB/src/stm32f4xx_rcc.c **** 
1402:FWLIB/src/stm32f4xx_rcc.c ****   /* Get PCLK2 prescaler */
1403:FWLIB/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 918              		.loc 1 1403 3 is_stmt 1 view .LVU233
 919              		.loc 1 1403 12 is_stmt 0 view .LVU234
 920 0042 A268     		ldr	r2, [r4, #8]
 921              	.LVL63:
1404:FWLIB/src/stm32f4xx_rcc.c ****   tmp = tmp >> 13;
 922              		.loc 1 1404 3 is_stmt 1 view .LVU235
 923              		.loc 1 1404 7 is_stmt 0 view .LVU236
 924 0044 C2F34232 		ubfx	r2, r2, #13, #3
 925              	.LVL64:
1405:FWLIB/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 926              		.loc 1 1405 3 is_stmt 1 view .LVU237
 927              		.loc 1 1405 27 is_stmt 0 view .LVU238
 928 0048 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 929              	.LVL65:
 930              		.loc 1 1405 27 view .LVU239
 931 004a D2B2     		uxtb	r2, r2
 932              	.LVL66:
1406:FWLIB/src/stm32f4xx_rcc.c ****   /* PCLK2 clock frequency */
1407:FWLIB/src/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 933              		.loc 1 1407 3 is_stmt 1 view .LVU240
 934              		.loc 1 1407 60 is_stmt 0 view .LVU241
 935 004c D340     		lsrs	r3, r3, r2
 936              		.loc 1 1407 31 view .LVU242
 937 004e C360     		str	r3, [r0, #12]
1408:FWLIB/src/stm32f4xx_rcc.c **** }
 938              		.loc 1 1408 1 view .LVU243
 939 0050 5DF8044B 		ldr	r4, [sp], #4
 940              	.LCFI1:
 941              		.cfi_remember_state
 942              		.cfi_restore 4
 943              		.cfi_def_cfa_offset 0
 944 0054 7047     		bx	lr
 945              	.LVL67:
 946              	.L65:
 947              	.LCFI2:
 948              		.cfi_restore_state
1333:FWLIB/src/stm32f4xx_rcc.c ****     break;
 949              		.loc 1 1333 5 is_stmt 1 view .LVU244
1333:FWLIB/src/stm32f4xx_rcc.c ****     break;
 950              		.loc 1 1333 34 is_stmt 0 view .LVU245
 951 0056 174B     		ldr	r3, .L73+12
 952              	.LVL68:
1333:FWLIB/src/stm32f4xx_rcc.c ****     break;
 953              		.loc 1 1333 34 view .LVU246
 954 0058 0360     		str	r3, [r0]
1334:FWLIB/src/stm32f4xx_rcc.c ****   case 0x08:  /* PLL P used as system clock  source */
 955              		.loc 1 1334 5 is_stmt 1 view .LVU247
 956 005a E0E7     		b	.L68
 957              	.LVL69:
 958              	.L66:
1340:FWLIB/src/stm32f4xx_rcc.c ****     pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 959              		.loc 1 1340 5 view .LVU248
1340:FWLIB/src/stm32f4xx_rcc.c ****     pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 960              		.loc 1 1340 21 is_stmt 0 view .LVU249
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 42


 961 005c 124B     		ldr	r3, .L73
 962              	.LVL70:
1340:FWLIB/src/stm32f4xx_rcc.c ****     pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 963              		.loc 1 1340 21 view .LVU250
 964 005e 5968     		ldr	r1, [r3, #4]
 965              	.LVL71:
1341:FWLIB/src/stm32f4xx_rcc.c ****     
 966              		.loc 1 1341 5 is_stmt 1 view .LVU251
1341:FWLIB/src/stm32f4xx_rcc.c ****     
 967              		.loc 1 1341 15 is_stmt 0 view .LVU252
 968 0060 5A68     		ldr	r2, [r3, #4]
1341:FWLIB/src/stm32f4xx_rcc.c ****     
 969              		.loc 1 1341 10 view .LVU253
 970 0062 02F03F02 		and	r2, r2, #63
 971              	.LVL72:
1343:FWLIB/src/stm32f4xx_rcc.c ****     {
 972              		.loc 1 1343 5 is_stmt 1 view .LVU254
1343:FWLIB/src/stm32f4xx_rcc.c ****     {
 973              		.loc 1 1343 8 is_stmt 0 view .LVU255
 974 0066 11F4800F 		tst	r1, #4194304
 975 006a 12D0     		beq	.L69
1346:FWLIB/src/stm32f4xx_rcc.c ****     }
 976              		.loc 1 1346 7 is_stmt 1 view .LVU256
1346:FWLIB/src/stm32f4xx_rcc.c ****     }
 977              		.loc 1 1346 27 is_stmt 0 view .LVU257
 978 006c 114B     		ldr	r3, .L73+12
 979 006e B3FBF2F3 		udiv	r3, r3, r2
1346:FWLIB/src/stm32f4xx_rcc.c ****     }
 980              		.loc 1 1346 42 view .LVU258
 981 0072 0D4A     		ldr	r2, .L73
 982              	.LVL73:
1346:FWLIB/src/stm32f4xx_rcc.c ****     }
 983              		.loc 1 1346 42 view .LVU259
 984 0074 5268     		ldr	r2, [r2, #4]
1346:FWLIB/src/stm32f4xx_rcc.c ****     }
 985              		.loc 1 1346 72 view .LVU260
 986 0076 C2F38812 		ubfx	r2, r2, #6, #9
1346:FWLIB/src/stm32f4xx_rcc.c ****     }
 987              		.loc 1 1346 14 view .LVU261
 988 007a 02FB03F3 		mul	r3, r2, r3
 989              	.LVL74:
 990              	.L70:
1354:FWLIB/src/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 991              		.loc 1 1354 5 is_stmt 1 view .LVU262
1354:FWLIB/src/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 992              		.loc 1 1354 18 is_stmt 0 view .LVU263
 993 007e 0A4A     		ldr	r2, .L73
 994 0080 5268     		ldr	r2, [r2, #4]
1354:FWLIB/src/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 995              		.loc 1 1354 48 view .LVU264
 996 0082 C2F30142 		ubfx	r2, r2, #16, #2
1354:FWLIB/src/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 997              		.loc 1 1354 54 view .LVU265
 998 0086 0132     		adds	r2, r2, #1
1354:FWLIB/src/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 999              		.loc 1 1354 10 view .LVU266
 1000 0088 5200     		lsls	r2, r2, #1
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 43


 1001              	.LVL75:
1355:FWLIB/src/stm32f4xx_rcc.c ****     break;
 1002              		.loc 1 1355 5 is_stmt 1 view .LVU267
1355:FWLIB/src/stm32f4xx_rcc.c ****     break;
 1003              		.loc 1 1355 42 is_stmt 0 view .LVU268
 1004 008a B3FBF2F3 		udiv	r3, r3, r2
 1005              	.LVL76:
1355:FWLIB/src/stm32f4xx_rcc.c ****     break;
 1006              		.loc 1 1355 34 view .LVU269
 1007 008e 0360     		str	r3, [r0]
1356:FWLIB/src/stm32f4xx_rcc.c **** 
 1008              		.loc 1 1356 5 is_stmt 1 view .LVU270
 1009 0090 C5E7     		b	.L68
 1010              	.LVL77:
 1011              	.L69:
1351:FWLIB/src/stm32f4xx_rcc.c ****     }
 1012              		.loc 1 1351 7 view .LVU271
1351:FWLIB/src/stm32f4xx_rcc.c ****     }
 1013              		.loc 1 1351 27 is_stmt 0 view .LVU272
 1014 0092 064B     		ldr	r3, .L73+4
 1015 0094 B3FBF2F3 		udiv	r3, r3, r2
1351:FWLIB/src/stm32f4xx_rcc.c ****     }
 1016              		.loc 1 1351 42 view .LVU273
 1017 0098 034A     		ldr	r2, .L73
 1018              	.LVL78:
1351:FWLIB/src/stm32f4xx_rcc.c ****     }
 1019              		.loc 1 1351 42 view .LVU274
 1020 009a 5268     		ldr	r2, [r2, #4]
1351:FWLIB/src/stm32f4xx_rcc.c ****     }
 1021              		.loc 1 1351 72 view .LVU275
 1022 009c C2F38812 		ubfx	r2, r2, #6, #9
1351:FWLIB/src/stm32f4xx_rcc.c ****     }
 1023              		.loc 1 1351 14 view .LVU276
 1024 00a0 02FB03F3 		mul	r3, r2, r3
 1025              	.LVL79:
1351:FWLIB/src/stm32f4xx_rcc.c ****     }
 1026              		.loc 1 1351 14 view .LVU277
 1027 00a4 EBE7     		b	.L70
 1028              	.L74:
 1029 00a6 00BF     		.align	2
 1030              	.L73:
 1031 00a8 00380240 		.word	1073887232
 1032 00ac 0024F400 		.word	16000000
 1033 00b0 00000000 		.word	.LANCHOR0
 1034 00b4 00127A00 		.word	8000000
 1035              		.cfi_endproc
 1036              	.LFE144:
 1038              		.section	.text.RCC_RTCCLKConfig,"ax",%progbits
 1039              		.align	1
 1040              		.global	RCC_RTCCLKConfig
 1041              		.syntax unified
 1042              		.thumb
 1043              		.thumb_func
 1044              		.fpu fpv4-sp-d16
 1046              	RCC_RTCCLKConfig:
 1047              	.LVL80:
 1048              	.LFB145:
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 44


1409:FWLIB/src/stm32f4xx_rcc.c **** 
1410:FWLIB/src/stm32f4xx_rcc.c **** /**
1411:FWLIB/src/stm32f4xx_rcc.c ****   * @}
1412:FWLIB/src/stm32f4xx_rcc.c ****   */
1413:FWLIB/src/stm32f4xx_rcc.c **** 
1414:FWLIB/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group3 Peripheral clocks configuration functions
1415:FWLIB/src/stm32f4xx_rcc.c ****  *  @brief   Peripheral clocks configuration functions 
1416:FWLIB/src/stm32f4xx_rcc.c ****  *
1417:FWLIB/src/stm32f4xx_rcc.c **** @verbatim   
1418:FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================
1419:FWLIB/src/stm32f4xx_rcc.c ****               ##### Peripheral clocks configuration functions #####
1420:FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================  
1421:FWLIB/src/stm32f4xx_rcc.c ****     [..] This section provide functions allowing to configure the Peripheral clocks. 
1422:FWLIB/src/stm32f4xx_rcc.c ****   
1423:FWLIB/src/stm32f4xx_rcc.c ****       (#) The RTC clock which is derived from the LSI, LSE or HSE clock divided 
1424:FWLIB/src/stm32f4xx_rcc.c ****           by 2 to 31.
1425:FWLIB/src/stm32f4xx_rcc.c ****      
1426:FWLIB/src/stm32f4xx_rcc.c ****       (#) After restart from Reset or wakeup from STANDBY, all peripherals are off
1427:FWLIB/src/stm32f4xx_rcc.c ****           except internal SRAM, Flash and JTAG. Before to start using a peripheral 
1428:FWLIB/src/stm32f4xx_rcc.c ****           you have to enable its interface clock. You can do this using 
1429:FWLIB/src/stm32f4xx_rcc.c ****           RCC_AHBPeriphClockCmd(), RCC_APB2PeriphClockCmd() and RCC_APB1PeriphClockCmd() functions.
1430:FWLIB/src/stm32f4xx_rcc.c **** 
1431:FWLIB/src/stm32f4xx_rcc.c ****       (#) To reset the peripherals configuration (to the default state after device reset)
1432:FWLIB/src/stm32f4xx_rcc.c ****           you can use RCC_AHBPeriphResetCmd(), RCC_APB2PeriphResetCmd() and 
1433:FWLIB/src/stm32f4xx_rcc.c ****           RCC_APB1PeriphResetCmd() functions.
1434:FWLIB/src/stm32f4xx_rcc.c ****      
1435:FWLIB/src/stm32f4xx_rcc.c ****       (#) To further reduce power consumption in SLEEP mode the peripheral clocks 
1436:FWLIB/src/stm32f4xx_rcc.c ****           can be disabled prior to executing the WFI or WFE instructions. 
1437:FWLIB/src/stm32f4xx_rcc.c ****           You can do this using RCC_AHBPeriphClockLPModeCmd(), 
1438:FWLIB/src/stm32f4xx_rcc.c ****           RCC_APB2PeriphClockLPModeCmd() and RCC_APB1PeriphClockLPModeCmd() functions.  
1439:FWLIB/src/stm32f4xx_rcc.c **** 
1440:FWLIB/src/stm32f4xx_rcc.c **** @endverbatim
1441:FWLIB/src/stm32f4xx_rcc.c ****   * @{
1442:FWLIB/src/stm32f4xx_rcc.c ****   */
1443:FWLIB/src/stm32f4xx_rcc.c **** 
1444:FWLIB/src/stm32f4xx_rcc.c **** /**
1445:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
1446:FWLIB/src/stm32f4xx_rcc.c ****   * @note   As the RTC clock configuration bits are in the Backup domain and write
1447:FWLIB/src/stm32f4xx_rcc.c ****   *         access is denied to this domain after reset, you have to enable write
1448:FWLIB/src/stm32f4xx_rcc.c ****   *         access using PWR_BackupAccessCmd(ENABLE) function before to configure
1449:FWLIB/src/stm32f4xx_rcc.c ****   *         the RTC clock source (to be done once after reset).    
1450:FWLIB/src/stm32f4xx_rcc.c ****   * @note   Once the RTC clock is configured it can't be changed unless the  
1451:FWLIB/src/stm32f4xx_rcc.c ****   *         Backup domain is reset using RCC_BackupResetCmd() function, or by
1452:FWLIB/src/stm32f4xx_rcc.c ****   *         a Power On Reset (POR).
1453:FWLIB/src/stm32f4xx_rcc.c ****   *    
1454:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
1455:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1456:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
1457:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
1458:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_HSE_Divx: HSE clock divided by x selected
1459:FWLIB/src/stm32f4xx_rcc.c ****   *                                            as RTC clock, where x:[2,31]
1460:FWLIB/src/stm32f4xx_rcc.c ****   *  
1461:FWLIB/src/stm32f4xx_rcc.c ****   * @note   If the LSE or LSI is used as RTC clock source, the RTC continues to
1462:FWLIB/src/stm32f4xx_rcc.c ****   *         work in STOP and STANDBY modes, and can be used as wakeup source.
1463:FWLIB/src/stm32f4xx_rcc.c ****   *         However, when the HSE clock is used as RTC clock source, the RTC
1464:FWLIB/src/stm32f4xx_rcc.c ****   *         cannot be used in STOP and STANDBY modes.    
1465:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The maximum input clock frequency for RTC is 1MHz (when using HSE as
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 45


1466:FWLIB/src/stm32f4xx_rcc.c ****   *         RTC clock source).
1467:FWLIB/src/stm32f4xx_rcc.c ****   *  
1468:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1469:FWLIB/src/stm32f4xx_rcc.c ****   */
1470:FWLIB/src/stm32f4xx_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
1471:FWLIB/src/stm32f4xx_rcc.c **** {
 1049              		.loc 1 1471 1 is_stmt 1 view -0
 1050              		.cfi_startproc
 1051              		@ args = 0, pretend = 0, frame = 0
 1052              		@ frame_needed = 0, uses_anonymous_args = 0
 1053              		@ link register save eliminated.
1472:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1054              		.loc 1 1472 3 view .LVU279
1473:FWLIB/src/stm32f4xx_rcc.c **** 
1474:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1475:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
 1055              		.loc 1 1475 3 view .LVU280
1476:FWLIB/src/stm32f4xx_rcc.c **** 
1477:FWLIB/src/stm32f4xx_rcc.c ****   if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 1056              		.loc 1 1477 3 view .LVU281
 1057              		.loc 1 1477 25 is_stmt 0 view .LVU282
 1058 0000 00F44073 		and	r3, r0, #768
 1059              		.loc 1 1477 6 view .LVU283
 1060 0004 B3F5407F 		cmp	r3, #768
 1061 0008 06D0     		beq	.L77
 1062              	.LVL81:
 1063              	.L76:
1478:FWLIB/src/stm32f4xx_rcc.c ****   { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
1479:FWLIB/src/stm32f4xx_rcc.c ****     tmpreg = RCC->CFGR;
1480:FWLIB/src/stm32f4xx_rcc.c **** 
1481:FWLIB/src/stm32f4xx_rcc.c ****     /* Clear RTCPRE[4:0] bits */
1482:FWLIB/src/stm32f4xx_rcc.c ****     tmpreg &= ~RCC_CFGR_RTCPRE;
1483:FWLIB/src/stm32f4xx_rcc.c **** 
1484:FWLIB/src/stm32f4xx_rcc.c ****     /* Configure HSE division factor for RTC clock */
1485:FWLIB/src/stm32f4xx_rcc.c ****     tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
1486:FWLIB/src/stm32f4xx_rcc.c **** 
1487:FWLIB/src/stm32f4xx_rcc.c ****     /* Store the new value */
1488:FWLIB/src/stm32f4xx_rcc.c ****     RCC->CFGR = tmpreg;
1489:FWLIB/src/stm32f4xx_rcc.c ****   }
1490:FWLIB/src/stm32f4xx_rcc.c ****     
1491:FWLIB/src/stm32f4xx_rcc.c ****   /* Select the RTC clock source */
1492:FWLIB/src/stm32f4xx_rcc.c ****   RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 1064              		.loc 1 1492 3 is_stmt 1 view .LVU284
 1065              		.loc 1 1492 13 is_stmt 0 view .LVU285
 1066 000a 094A     		ldr	r2, .L78
 1067 000c 136F     		ldr	r3, [r2, #112]
 1068              		.loc 1 1492 34 view .LVU286
 1069 000e C0F30B00 		ubfx	r0, r0, #0, #12
 1070              	.LVL82:
 1071              		.loc 1 1492 13 view .LVU287
 1072 0012 1843     		orrs	r0, r0, r3
 1073 0014 1067     		str	r0, [r2, #112]
1493:FWLIB/src/stm32f4xx_rcc.c **** }
 1074              		.loc 1 1493 1 view .LVU288
 1075 0016 7047     		bx	lr
 1076              	.LVL83:
 1077              	.L77:
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 46


1479:FWLIB/src/stm32f4xx_rcc.c **** 
 1078              		.loc 1 1479 5 is_stmt 1 view .LVU289
1479:FWLIB/src/stm32f4xx_rcc.c **** 
 1079              		.loc 1 1479 12 is_stmt 0 view .LVU290
 1080 0018 0549     		ldr	r1, .L78
 1081 001a 8A68     		ldr	r2, [r1, #8]
 1082              	.LVL84:
1482:FWLIB/src/stm32f4xx_rcc.c **** 
 1083              		.loc 1 1482 5 is_stmt 1 view .LVU291
1482:FWLIB/src/stm32f4xx_rcc.c **** 
 1084              		.loc 1 1482 12 is_stmt 0 view .LVU292
 1085 001c 22F4F812 		bic	r2, r2, #2031616
 1086              	.LVL85:
1485:FWLIB/src/stm32f4xx_rcc.c **** 
 1087              		.loc 1 1485 5 is_stmt 1 view .LVU293
1485:FWLIB/src/stm32f4xx_rcc.c **** 
 1088              		.loc 1 1485 33 is_stmt 0 view .LVU294
 1089 0020 20F07043 		bic	r3, r0, #-268435456
 1090 0024 23F44073 		bic	r3, r3, #768
1485:FWLIB/src/stm32f4xx_rcc.c **** 
 1091              		.loc 1 1485 12 view .LVU295
 1092 0028 1343     		orrs	r3, r3, r2
 1093              	.LVL86:
1488:FWLIB/src/stm32f4xx_rcc.c ****   }
 1094              		.loc 1 1488 5 is_stmt 1 view .LVU296
1488:FWLIB/src/stm32f4xx_rcc.c ****   }
 1095              		.loc 1 1488 15 is_stmt 0 view .LVU297
 1096 002a 8B60     		str	r3, [r1, #8]
 1097 002c EDE7     		b	.L76
 1098              	.L79:
 1099 002e 00BF     		.align	2
 1100              	.L78:
 1101 0030 00380240 		.word	1073887232
 1102              		.cfi_endproc
 1103              	.LFE145:
 1105              		.section	.text.RCC_RTCCLKCmd,"ax",%progbits
 1106              		.align	1
 1107              		.global	RCC_RTCCLKCmd
 1108              		.syntax unified
 1109              		.thumb
 1110              		.thumb_func
 1111              		.fpu fpv4-sp-d16
 1113              	RCC_RTCCLKCmd:
 1114              	.LVL87:
 1115              	.LFB146:
1494:FWLIB/src/stm32f4xx_rcc.c **** 
1495:FWLIB/src/stm32f4xx_rcc.c **** /**
1496:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the RTC clock.
1497:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be used only after the RTC clock source was selected
1498:FWLIB/src/stm32f4xx_rcc.c ****   *         using the RCC_RTCCLKConfig function.
1499:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
1500:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1501:FWLIB/src/stm32f4xx_rcc.c ****   */
1502:FWLIB/src/stm32f4xx_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
1503:FWLIB/src/stm32f4xx_rcc.c **** {
 1116              		.loc 1 1503 1 is_stmt 1 view -0
 1117              		.cfi_startproc
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 47


 1118              		@ args = 0, pretend = 0, frame = 0
 1119              		@ frame_needed = 0, uses_anonymous_args = 0
 1120              		@ link register save eliminated.
1504:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1505:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1121              		.loc 1 1505 3 view .LVU299
1506:FWLIB/src/stm32f4xx_rcc.c **** 
1507:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 1122              		.loc 1 1507 3 view .LVU300
 1123              		.loc 1 1507 36 is_stmt 0 view .LVU301
 1124 0000 014B     		ldr	r3, .L81
 1125 0002 C3F83C0E 		str	r0, [r3, #3644]
1508:FWLIB/src/stm32f4xx_rcc.c **** }
 1126              		.loc 1 1508 1 view .LVU302
 1127 0006 7047     		bx	lr
 1128              	.L82:
 1129              		.align	2
 1130              	.L81:
 1131 0008 00004742 		.word	1111949312
 1132              		.cfi_endproc
 1133              	.LFE146:
 1135              		.section	.text.RCC_BackupResetCmd,"ax",%progbits
 1136              		.align	1
 1137              		.global	RCC_BackupResetCmd
 1138              		.syntax unified
 1139              		.thumb
 1140              		.thumb_func
 1141              		.fpu fpv4-sp-d16
 1143              	RCC_BackupResetCmd:
 1144              	.LVL88:
 1145              	.LFB147:
1509:FWLIB/src/stm32f4xx_rcc.c **** 
1510:FWLIB/src/stm32f4xx_rcc.c **** /**
1511:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1512:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function resets the RTC peripheral (including the backup registers)
1513:FWLIB/src/stm32f4xx_rcc.c ****   *         and the RTC clock source selection in RCC_CSR register.
1514:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The BKPSRAM is not affected by this reset.    
1515:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1516:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1517:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1518:FWLIB/src/stm32f4xx_rcc.c ****   */
1519:FWLIB/src/stm32f4xx_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1520:FWLIB/src/stm32f4xx_rcc.c **** {
 1146              		.loc 1 1520 1 is_stmt 1 view -0
 1147              		.cfi_startproc
 1148              		@ args = 0, pretend = 0, frame = 0
 1149              		@ frame_needed = 0, uses_anonymous_args = 0
 1150              		@ link register save eliminated.
1521:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1522:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1151              		.loc 1 1522 3 view .LVU304
1523:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 1152              		.loc 1 1523 3 view .LVU305
 1153              		.loc 1 1523 36 is_stmt 0 view .LVU306
 1154 0000 014B     		ldr	r3, .L84
 1155 0002 C3F8400E 		str	r0, [r3, #3648]
1524:FWLIB/src/stm32f4xx_rcc.c **** }
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 48


 1156              		.loc 1 1524 1 view .LVU307
 1157 0006 7047     		bx	lr
 1158              	.L85:
 1159              		.align	2
 1160              	.L84:
 1161 0008 00004742 		.word	1111949312
 1162              		.cfi_endproc
 1163              	.LFE147:
 1165              		.section	.text.RCC_I2SCLKConfig,"ax",%progbits
 1166              		.align	1
 1167              		.global	RCC_I2SCLKConfig
 1168              		.syntax unified
 1169              		.thumb
 1170              		.thumb_func
 1171              		.fpu fpv4-sp-d16
 1173              	RCC_I2SCLKConfig:
 1174              	.LVL89:
 1175              	.LFB148:
1525:FWLIB/src/stm32f4xx_rcc.c **** 
1526:FWLIB/src/stm32f4xx_rcc.c **** #if defined (STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
1527:FWLIB/src/stm32f4xx_rcc.c **** /**
1528:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the I2S clock source (I2SCLK).
1529:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the I2S APB clock.
1530:FWLIB/src/stm32f4xx_rcc.c ****   *
1531:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_I2SAPBx: specifies the APBx I2S clock source.
1532:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1533:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SBus_APB1: I2S peripheral instance is on APB1 Bus
1534:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SBus_APB2: I2S peripheral instance is on APB2 Bus
1535:FWLIB/src/stm32f4xx_rcc.c ****   *
1536:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_I2SCLKSource: specifies the I2S clock source.
1537:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1538:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SCLKSource_PLLI2S: PLLI2S clock used as I2S clock source
1539:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SCLKSource_Ext: External clock mapped on the I2S_CKIN pin
1540:FWLIB/src/stm32f4xx_rcc.c ****   *                                        used as I2S clock source
1541:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SCLKSource_PLL: PLL clock used as I2S clock source
1542:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SCLKSource_HSI_HSE: HSI or HSE depends on PLLSRC used as I2S clock source
1543:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1544:FWLIB/src/stm32f4xx_rcc.c ****   */
1545:FWLIB/src/stm32f4xx_rcc.c **** void RCC_I2SCLKConfig(uint32_t RCC_I2SAPBx, uint32_t RCC_I2SCLKSource)
1546:FWLIB/src/stm32f4xx_rcc.c **** {
1547:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1548:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
1549:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2S_APBx(RCC_I2SAPBx));
1550:FWLIB/src/stm32f4xx_rcc.c ****   
1551:FWLIB/src/stm32f4xx_rcc.c ****   if(RCC_I2SAPBx == RCC_I2SBus_APB1)
1552:FWLIB/src/stm32f4xx_rcc.c ****   {
1553:FWLIB/src/stm32f4xx_rcc.c ****     /* Clear APB1 I2Sx clock source selection bits */
1554:FWLIB/src/stm32f4xx_rcc.c ****     RCC->DCKCFGR &= ~RCC_DCKCFGR_I2S1SRC;
1555:FWLIB/src/stm32f4xx_rcc.c ****     /* Set new APB1 I2Sx clock source*/
1556:FWLIB/src/stm32f4xx_rcc.c ****     RCC->DCKCFGR |= RCC_I2SCLKSource;
1557:FWLIB/src/stm32f4xx_rcc.c ****   }
1558:FWLIB/src/stm32f4xx_rcc.c ****   else
1559:FWLIB/src/stm32f4xx_rcc.c ****   {
1560:FWLIB/src/stm32f4xx_rcc.c ****     /* Clear APB2 I2Sx clock source selection  bits */
1561:FWLIB/src/stm32f4xx_rcc.c ****     RCC->DCKCFGR &= ~RCC_DCKCFGR_I2S2SRC;
1562:FWLIB/src/stm32f4xx_rcc.c ****     /* Set new APB2 I2Sx clock source */
1563:FWLIB/src/stm32f4xx_rcc.c ****     RCC->DCKCFGR |= (RCC_I2SCLKSource << 2);
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 49


1564:FWLIB/src/stm32f4xx_rcc.c ****   }
1565:FWLIB/src/stm32f4xx_rcc.c **** }
1566:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F446xx)
1567:FWLIB/src/stm32f4xx_rcc.c **** /**
1568:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the SAIx clock source (SAIxCLK).
1569:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the SAIx APB clock.
1570:FWLIB/src/stm32f4xx_rcc.c ****   *
1571:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_SAIInstance: specifies the SAIx clock source.
1572:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1573:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIInstance_SAI1: SAI1 clock source selection
1574:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIInstance_SAI2: SAI2 clock source selections
1575:FWLIB/src/stm32f4xx_rcc.c ****   *
1576:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_SAICLKSource: specifies the SAI clock source.
1577:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1578:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAICLKSource_PLLSAI: PLLSAI clock used as SAI clock source
1579:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAICLKSource_PLLI2S: PLLI2S clock used as SAI clock source
1580:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAICLKSource_PLL: PLL clock used as SAI clock source
1581:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAICLKSource_HSI_HSE: HSI or HSE depends on PLLSRC used as SAI clock source
1582:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1583:FWLIB/src/stm32f4xx_rcc.c ****   */
1584:FWLIB/src/stm32f4xx_rcc.c **** void RCC_SAICLKConfig(uint32_t RCC_SAIInstance, uint32_t RCC_SAICLKSource)
1585:FWLIB/src/stm32f4xx_rcc.c **** {
1586:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1587:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAICLK_SOURCE(RCC_SAICLKSource));
1588:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAI_INSTANCE(RCC_SAIInstance));
1589:FWLIB/src/stm32f4xx_rcc.c ****   
1590:FWLIB/src/stm32f4xx_rcc.c ****   if(RCC_SAIInstance == RCC_SAIInstance_SAI1)
1591:FWLIB/src/stm32f4xx_rcc.c ****   {
1592:FWLIB/src/stm32f4xx_rcc.c ****     /* Clear SAI1 clock source selection bits */
1593:FWLIB/src/stm32f4xx_rcc.c ****     RCC->DCKCFGR &= ~RCC_DCKCFGR_SAI1SRC;
1594:FWLIB/src/stm32f4xx_rcc.c ****     /* Set new SAI1 clock source */
1595:FWLIB/src/stm32f4xx_rcc.c ****     RCC->DCKCFGR |= RCC_SAICLKSource;
1596:FWLIB/src/stm32f4xx_rcc.c ****   }
1597:FWLIB/src/stm32f4xx_rcc.c ****   else
1598:FWLIB/src/stm32f4xx_rcc.c ****   {
1599:FWLIB/src/stm32f4xx_rcc.c ****     /* Clear SAI2 clock source selection bits */
1600:FWLIB/src/stm32f4xx_rcc.c ****     RCC->DCKCFGR &= ~RCC_DCKCFGR_SAI2SRC;
1601:FWLIB/src/stm32f4xx_rcc.c ****     /* Set new SAI2 clock source */
1602:FWLIB/src/stm32f4xx_rcc.c ****     RCC->DCKCFGR |= (RCC_SAICLKSource << 2);
1603:FWLIB/src/stm32f4xx_rcc.c ****   }
1604:FWLIB/src/stm32f4xx_rcc.c **** }
1605:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F446xx */
1606:FWLIB/src/stm32f4xx_rcc.c **** 
1607:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F413_423xx)
1608:FWLIB/src/stm32f4xx_rcc.c **** /**
1609:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures SAI1BlockA clock source selection.      
1610:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling PLLSAI, PLLI2S and  
1611:FWLIB/src/stm32f4xx_rcc.c ****   *         the SAI clock.
1612:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_SAIBlockACLKSource: specifies the SAI Block A clock source.
1613:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1614:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLLI2SR: PLLI2SR clock used as SAI clock source
1615:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLLI2S: PLLI2S clock used as SAI clock source
1616:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLL: PLL clock used as SAI clock source
1617:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_HSI_HSE: HSI or HSE depends on PLLSRC used as SAI clock sourc
1618:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1619:FWLIB/src/stm32f4xx_rcc.c ****   */
1620:FWLIB/src/stm32f4xx_rcc.c **** void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 50


1621:FWLIB/src/stm32f4xx_rcc.c **** {
1622:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1623:FWLIB/src/stm32f4xx_rcc.c ****   
1624:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1625:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
1626:FWLIB/src/stm32f4xx_rcc.c ****   
1627:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1628:FWLIB/src/stm32f4xx_rcc.c **** 
1629:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
1630:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
1631:FWLIB/src/stm32f4xx_rcc.c **** 
1632:FWLIB/src/stm32f4xx_rcc.c ****   /* Set SAI Block A source selection value */
1633:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SAIBlockACLKSource;
1634:FWLIB/src/stm32f4xx_rcc.c **** 
1635:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1636:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1637:FWLIB/src/stm32f4xx_rcc.c **** }
1638:FWLIB/src/stm32f4xx_rcc.c **** 
1639:FWLIB/src/stm32f4xx_rcc.c **** /**
1640:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures SAI1BlockB clock source selection.      
1641:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling PLLSAI, PLLI2S and  
1642:FWLIB/src/stm32f4xx_rcc.c ****   *         the SAI clock.
1643:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_SAIBlockBCLKSource: specifies the SAI Block B clock source.
1644:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1645:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLLI2SR: PLLI2SR clock used as SAI clock source
1646:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLLI2S: PLLI2S clock used as SAI clock source
1647:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLL: PLL clock used as SAI clock source
1648:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_HSI_HSE: HSI or HSE depends on PLLSRC used as SAI clock sourc
1649:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1650:FWLIB/src/stm32f4xx_rcc.c ****   */
1651:FWLIB/src/stm32f4xx_rcc.c **** void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
1652:FWLIB/src/stm32f4xx_rcc.c **** {
1653:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1654:FWLIB/src/stm32f4xx_rcc.c ****   
1655:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1656:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
1657:FWLIB/src/stm32f4xx_rcc.c ****   
1658:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1659:FWLIB/src/stm32f4xx_rcc.c **** 
1660:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
1661:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
1662:FWLIB/src/stm32f4xx_rcc.c **** 
1663:FWLIB/src/stm32f4xx_rcc.c ****   /* Set SAI Block B source selection value */
1664:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SAIBlockBCLKSource;
1665:FWLIB/src/stm32f4xx_rcc.c **** 
1666:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1667:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1668:FWLIB/src/stm32f4xx_rcc.c **** }
1669:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F413_423xx */
1670:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
1671:FWLIB/src/stm32f4xx_rcc.c **** 
1672:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F410xx)
1673:FWLIB/src/stm32f4xx_rcc.c **** /**
1674:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the I2S clock source (I2SCLK).
1675:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the I2S clock.
1676:FWLIB/src/stm32f4xx_rcc.c ****   *
1677:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_I2SCLKSource: specifies the I2S clock source.
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 51


1678:FWLIB/src/stm32f4xx_rcc.c ****   *         This parameter can be one of the following values:
1679:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SAPBCLKSOURCE_PLLR: PLL VCO output clock divided by PLLR.
1680:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SAPBCLKSOURCE_EXT: External clock mapped on the I2S_CKIN pin.
1681:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SAPBCLKSOURCE_PLLSRC: HSI/HSE depends on PLLSRC.
1682:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1683:FWLIB/src/stm32f4xx_rcc.c ****   */
1684:FWLIB/src/stm32f4xx_rcc.c **** void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
1685:FWLIB/src/stm32f4xx_rcc.c **** {
1686:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1687:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
1688:FWLIB/src/stm32f4xx_rcc.c ****   
1689:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear I2Sx clock source selection bits */
1690:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR &= ~RCC_DCKCFGR_I2SSRC;
1691:FWLIB/src/stm32f4xx_rcc.c ****   /* Set new I2Sx clock source*/
1692:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR |= RCC_I2SCLKSource;
1693:FWLIB/src/stm32f4xx_rcc.c **** }
1694:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F410xx */
1695:FWLIB/src/stm32f4xx_rcc.c **** 
1696:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
1697:FWLIB/src/stm32f4xx_rcc.c **** /**
1698:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the I2S clock source (I2SCLK).
1699:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the I2S APB clock.
1700:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_I2SCLKSource: specifies the I2S clock source.
1701:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1702:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_PLLI2S: PLLI2S clock used as I2S clock source
1703:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
1704:FWLIB/src/stm32f4xx_rcc.c ****   *                                        used as I2S clock source
1705:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1706:FWLIB/src/stm32f4xx_rcc.c ****   */
1707:FWLIB/src/stm32f4xx_rcc.c **** void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
1708:FWLIB/src/stm32f4xx_rcc.c **** {
 1176              		.loc 1 1708 1 is_stmt 1 view -0
 1177              		.cfi_startproc
 1178              		@ args = 0, pretend = 0, frame = 0
 1179              		@ frame_needed = 0, uses_anonymous_args = 0
 1180              		@ link register save eliminated.
1709:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1710:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
 1181              		.loc 1 1710 3 view .LVU309
1711:FWLIB/src/stm32f4xx_rcc.c **** 
1712:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;  
 1182              		.loc 1 1712 3 view .LVU310
 1183              		.loc 1 1712 37 is_stmt 0 view .LVU311
 1184 0000 014B     		ldr	r3, .L87
 1185 0002 C3F85C01 		str	r0, [r3, #348]
1713:FWLIB/src/stm32f4xx_rcc.c **** }
 1186              		.loc 1 1713 1 view .LVU312
 1187 0006 7047     		bx	lr
 1188              	.L88:
 1189              		.align	2
 1190              	.L87:
 1191 0008 00004742 		.word	1111949312
 1192              		.cfi_endproc
 1193              	.LFE148:
 1195              		.section	.text.RCC_SAIBlockACLKConfig,"ax",%progbits
 1196              		.align	1
 1197              		.global	RCC_SAIBlockACLKConfig
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 52


 1198              		.syntax unified
 1199              		.thumb
 1200              		.thumb_func
 1201              		.fpu fpv4-sp-d16
 1203              	RCC_SAIBlockACLKConfig:
 1204              	.LVL90:
 1205              	.LFB149:
1714:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM
1715:FWLIB/src/stm32f4xx_rcc.c **** 
1716:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
1717:FWLIB/src/stm32f4xx_rcc.c **** /**
1718:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures SAI1BlockA clock source selection.
1719:FWLIB/src/stm32f4xx_rcc.c ****   * 
1720:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx/469xx/479xx devices.
1721:FWLIB/src/stm32f4xx_rcc.c ****   *       
1722:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling PLLSAI, PLLI2S and  
1723:FWLIB/src/stm32f4xx_rcc.c ****   *         the SAI clock.
1724:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_SAIBlockACLKSource: specifies the SAI Block A clock source.
1725:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1726:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLLI2S: PLLI2S_Q clock divided by PLLI2SDIVQ used 
1727:FWLIB/src/stm32f4xx_rcc.c ****   *                                           as SAI1 Block A clock 
1728:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLLSAI: PLLISAI_Q clock divided by PLLSAIDIVQ used 
1729:FWLIB/src/stm32f4xx_rcc.c ****   *                                           as SAI1 Block A clock 
1730:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
1731:FWLIB/src/stm32f4xx_rcc.c ****   *                                        used as SAI1 Block A clock
1732:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1733:FWLIB/src/stm32f4xx_rcc.c ****   */
1734:FWLIB/src/stm32f4xx_rcc.c **** void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
1735:FWLIB/src/stm32f4xx_rcc.c **** {
 1206              		.loc 1 1735 1 is_stmt 1 view -0
 1207              		.cfi_startproc
 1208              		@ args = 0, pretend = 0, frame = 0
 1209              		@ frame_needed = 0, uses_anonymous_args = 0
 1210              		@ link register save eliminated.
1736:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1211              		.loc 1 1736 3 view .LVU314
1737:FWLIB/src/stm32f4xx_rcc.c ****   
1738:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1739:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
 1212              		.loc 1 1739 3 view .LVU315
1740:FWLIB/src/stm32f4xx_rcc.c ****   
1741:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 1213              		.loc 1 1741 3 view .LVU316
 1214              		.loc 1 1741 10 is_stmt 0 view .LVU317
 1215 0000 044A     		ldr	r2, .L90
 1216 0002 D2F88C30 		ldr	r3, [r2, #140]
 1217              	.LVL91:
1742:FWLIB/src/stm32f4xx_rcc.c **** 
1743:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
1744:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
 1218              		.loc 1 1744 3 is_stmt 1 view .LVU318
 1219              		.loc 1 1744 10 is_stmt 0 view .LVU319
 1220 0006 23F44013 		bic	r3, r3, #3145728
 1221              	.LVL92:
1745:FWLIB/src/stm32f4xx_rcc.c **** 
1746:FWLIB/src/stm32f4xx_rcc.c ****   /* Set SAI Block A source selection value */
1747:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SAIBlockACLKSource;
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 53


 1222              		.loc 1 1747 3 is_stmt 1 view .LVU320
 1223              		.loc 1 1747 10 is_stmt 0 view .LVU321
 1224 000a 0343     		orrs	r3, r3, r0
 1225              	.LVL93:
1748:FWLIB/src/stm32f4xx_rcc.c **** 
1749:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1750:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 1226              		.loc 1 1750 3 is_stmt 1 view .LVU322
 1227              		.loc 1 1750 16 is_stmt 0 view .LVU323
 1228 000c C2F88C30 		str	r3, [r2, #140]
1751:FWLIB/src/stm32f4xx_rcc.c **** }
 1229              		.loc 1 1751 1 view .LVU324
 1230 0010 7047     		bx	lr
 1231              	.L91:
 1232 0012 00BF     		.align	2
 1233              	.L90:
 1234 0014 00380240 		.word	1073887232
 1235              		.cfi_endproc
 1236              	.LFE149:
 1238              		.section	.text.RCC_SAIBlockBCLKConfig,"ax",%progbits
 1239              		.align	1
 1240              		.global	RCC_SAIBlockBCLKConfig
 1241              		.syntax unified
 1242              		.thumb
 1243              		.thumb_func
 1244              		.fpu fpv4-sp-d16
 1246              	RCC_SAIBlockBCLKConfig:
 1247              	.LVL94:
 1248              	.LFB150:
1752:FWLIB/src/stm32f4xx_rcc.c **** 
1753:FWLIB/src/stm32f4xx_rcc.c **** /**
1754:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures SAI1BlockB clock source selection.
1755:FWLIB/src/stm32f4xx_rcc.c ****   * 
1756:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx/469xx/479xx devices.
1757:FWLIB/src/stm32f4xx_rcc.c ****   *       
1758:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling PLLSAI, PLLI2S and  
1759:FWLIB/src/stm32f4xx_rcc.c ****   *         the SAI clock.
1760:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_SAIBlockBCLKSource: specifies the SAI Block B clock source.
1761:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1762:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLLI2S: PLLI2S_Q clock divided by PLLI2SDIVQ used 
1763:FWLIB/src/stm32f4xx_rcc.c ****   *                                           as SAI1 Block B clock 
1764:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLLSAI: PLLISAI_Q clock divided by PLLSAIDIVQ used 
1765:FWLIB/src/stm32f4xx_rcc.c ****   *                                           as SAI1 Block B clock 
1766:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
1767:FWLIB/src/stm32f4xx_rcc.c ****   *                                        used as SAI1 Block B clock
1768:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1769:FWLIB/src/stm32f4xx_rcc.c ****   */
1770:FWLIB/src/stm32f4xx_rcc.c **** void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
1771:FWLIB/src/stm32f4xx_rcc.c **** {
 1249              		.loc 1 1771 1 is_stmt 1 view -0
 1250              		.cfi_startproc
 1251              		@ args = 0, pretend = 0, frame = 0
 1252              		@ frame_needed = 0, uses_anonymous_args = 0
 1253              		@ link register save eliminated.
1772:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1254              		.loc 1 1772 3 view .LVU326
1773:FWLIB/src/stm32f4xx_rcc.c ****   
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 54


1774:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1775:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
 1255              		.loc 1 1775 3 view .LVU327
1776:FWLIB/src/stm32f4xx_rcc.c ****   
1777:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 1256              		.loc 1 1777 3 view .LVU328
 1257              		.loc 1 1777 10 is_stmt 0 view .LVU329
 1258 0000 044A     		ldr	r2, .L93
 1259 0002 D2F88C30 		ldr	r3, [r2, #140]
 1260              	.LVL95:
1778:FWLIB/src/stm32f4xx_rcc.c **** 
1779:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
1780:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
 1261              		.loc 1 1780 3 is_stmt 1 view .LVU330
 1262              		.loc 1 1780 10 is_stmt 0 view .LVU331
 1263 0006 23F44003 		bic	r3, r3, #12582912
 1264              	.LVL96:
1781:FWLIB/src/stm32f4xx_rcc.c **** 
1782:FWLIB/src/stm32f4xx_rcc.c ****   /* Set SAI Block B source selection value */
1783:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SAIBlockBCLKSource;
 1265              		.loc 1 1783 3 is_stmt 1 view .LVU332
 1266              		.loc 1 1783 10 is_stmt 0 view .LVU333
 1267 000a 0343     		orrs	r3, r3, r0
 1268              	.LVL97:
1784:FWLIB/src/stm32f4xx_rcc.c **** 
1785:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1786:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 1269              		.loc 1 1786 3 is_stmt 1 view .LVU334
 1270              		.loc 1 1786 16 is_stmt 0 view .LVU335
 1271 000c C2F88C30 		str	r3, [r2, #140]
1787:FWLIB/src/stm32f4xx_rcc.c **** }
 1272              		.loc 1 1787 1 view .LVU336
 1273 0010 7047     		bx	lr
 1274              	.L94:
 1275 0012 00BF     		.align	2
 1276              	.L93:
 1277 0014 00380240 		.word	1073887232
 1278              		.cfi_endproc
 1279              	.LFE150:
 1281              		.section	.text.RCC_SAIPLLI2SClkDivConfig,"ax",%progbits
 1282              		.align	1
 1283              		.global	RCC_SAIPLLI2SClkDivConfig
 1284              		.syntax unified
 1285              		.thumb
 1286              		.thumb_func
 1287              		.fpu fpv4-sp-d16
 1289              	RCC_SAIPLLI2SClkDivConfig:
 1290              	.LVL98:
 1291              	.LFB151:
1788:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F469_479xx */
1789:FWLIB/src/stm32f4xx_rcc.c **** 
1790:FWLIB/src/stm32f4xx_rcc.c **** /**
1791:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the SAI clock Divider coming from PLLI2S.
1792:FWLIB/src/stm32f4xx_rcc.c ****   * 
1793:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx/446xx/469xx/479xx devices.
1794:FWLIB/src/stm32f4xx_rcc.c ****   *   
1795:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLI2S.
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 55


1796:FWLIB/src/stm32f4xx_rcc.c ****   *              
1797:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLI2SDivQ: specifies the PLLI2S division factor for SAI1 clock .
1798:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 1 and 32.
1799:FWLIB/src/stm32f4xx_rcc.c ****   *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
1800:FWLIB/src/stm32f4xx_rcc.c ****   *              
1801:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1802:FWLIB/src/stm32f4xx_rcc.c ****   */
1803:FWLIB/src/stm32f4xx_rcc.c **** void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
1804:FWLIB/src/stm32f4xx_rcc.c **** {
 1292              		.loc 1 1804 1 is_stmt 1 view -0
 1293              		.cfi_startproc
 1294              		@ args = 0, pretend = 0, frame = 0
 1295              		@ frame_needed = 0, uses_anonymous_args = 0
 1296              		@ link register save eliminated.
1805:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1297              		.loc 1 1805 3 view .LVU338
1806:FWLIB/src/stm32f4xx_rcc.c ****   
1807:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1808:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
 1298              		.loc 1 1808 3 view .LVU339
1809:FWLIB/src/stm32f4xx_rcc.c ****   
1810:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 1299              		.loc 1 1810 3 view .LVU340
 1300              		.loc 1 1810 10 is_stmt 0 view .LVU341
 1301 0000 044A     		ldr	r2, .L96
 1302 0002 D2F88C30 		ldr	r3, [r2, #140]
 1303              	.LVL99:
1811:FWLIB/src/stm32f4xx_rcc.c **** 
1812:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear PLLI2SDIVQ[4:0] bits */
1813:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
 1304              		.loc 1 1813 3 is_stmt 1 view .LVU342
 1305              		.loc 1 1813 10 is_stmt 0 view .LVU343
 1306 0006 23F01F03 		bic	r3, r3, #31
 1307              	.LVL100:
1814:FWLIB/src/stm32f4xx_rcc.c **** 
1815:FWLIB/src/stm32f4xx_rcc.c ****   /* Set PLLI2SDIVQ values */
1816:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= (RCC_PLLI2SDivQ - 1);
 1308              		.loc 1 1816 3 is_stmt 1 view .LVU344
 1309              		.loc 1 1816 29 is_stmt 0 view .LVU345
 1310 000a 0138     		subs	r0, r0, #1
 1311              	.LVL101:
 1312              		.loc 1 1816 10 view .LVU346
 1313 000c 1843     		orrs	r0, r0, r3
 1314              	.LVL102:
1817:FWLIB/src/stm32f4xx_rcc.c **** 
1818:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1819:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 1315              		.loc 1 1819 3 is_stmt 1 view .LVU347
 1316              		.loc 1 1819 16 is_stmt 0 view .LVU348
 1317 000e C2F88C00 		str	r0, [r2, #140]
1820:FWLIB/src/stm32f4xx_rcc.c **** }
 1318              		.loc 1 1820 1 view .LVU349
 1319 0012 7047     		bx	lr
 1320              	.L97:
 1321              		.align	2
 1322              	.L96:
 1323 0014 00380240 		.word	1073887232
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 56


 1324              		.cfi_endproc
 1325              	.LFE151:
 1327              		.section	.text.RCC_SAIPLLSAIClkDivConfig,"ax",%progbits
 1328              		.align	1
 1329              		.global	RCC_SAIPLLSAIClkDivConfig
 1330              		.syntax unified
 1331              		.thumb
 1332              		.thumb_func
 1333              		.fpu fpv4-sp-d16
 1335              	RCC_SAIPLLSAIClkDivConfig:
 1336              	.LVL103:
 1337              	.LFB152:
1821:FWLIB/src/stm32f4xx_rcc.c **** 
1822:FWLIB/src/stm32f4xx_rcc.c **** /**
1823:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the SAI clock Divider coming from PLLSAI.
1824:FWLIB/src/stm32f4xx_rcc.c ****   * 
1825:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx/446xx/469xx/479xx devices.
1826:FWLIB/src/stm32f4xx_rcc.c ****   *        
1827:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLSAI.
1828:FWLIB/src/stm32f4xx_rcc.c ****   *   
1829:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSAIDivQ: specifies the PLLSAI division factor for SAI1 clock .
1830:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 1 and 32.
1831:FWLIB/src/stm32f4xx_rcc.c ****   *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
1832:FWLIB/src/stm32f4xx_rcc.c ****   *              
1833:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1834:FWLIB/src/stm32f4xx_rcc.c ****   */
1835:FWLIB/src/stm32f4xx_rcc.c **** void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
1836:FWLIB/src/stm32f4xx_rcc.c **** {
 1338              		.loc 1 1836 1 is_stmt 1 view -0
 1339              		.cfi_startproc
 1340              		@ args = 0, pretend = 0, frame = 0
 1341              		@ frame_needed = 0, uses_anonymous_args = 0
 1342              		@ link register save eliminated.
1837:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1343              		.loc 1 1837 3 view .LVU351
1838:FWLIB/src/stm32f4xx_rcc.c ****   
1839:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1840:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
 1344              		.loc 1 1840 3 view .LVU352
1841:FWLIB/src/stm32f4xx_rcc.c ****   
1842:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 1345              		.loc 1 1842 3 view .LVU353
 1346              		.loc 1 1842 10 is_stmt 0 view .LVU354
 1347 0000 054A     		ldr	r2, .L99
 1348 0002 D2F88C30 		ldr	r3, [r2, #140]
 1349              	.LVL104:
1843:FWLIB/src/stm32f4xx_rcc.c **** 
1844:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
1845:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
 1350              		.loc 1 1845 3 is_stmt 1 view .LVU355
 1351              		.loc 1 1845 10 is_stmt 0 view .LVU356
 1352 0006 23F4F853 		bic	r3, r3, #7936
 1353              	.LVL105:
1846:FWLIB/src/stm32f4xx_rcc.c **** 
1847:FWLIB/src/stm32f4xx_rcc.c ****   /* Set PLLSAIDIVQ values */
1848:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 1354              		.loc 1 1848 3 is_stmt 1 view .LVU357
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 57


 1355              		.loc 1 1848 30 is_stmt 0 view .LVU358
 1356 000a 0138     		subs	r0, r0, #1
 1357              	.LVL106:
 1358              		.loc 1 1848 10 view .LVU359
 1359 000c 43EA0023 		orr	r3, r3, r0, lsl #8
 1360              	.LVL107:
1849:FWLIB/src/stm32f4xx_rcc.c **** 
1850:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1851:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 1361              		.loc 1 1851 3 is_stmt 1 view .LVU360
 1362              		.loc 1 1851 16 is_stmt 0 view .LVU361
 1363 0010 C2F88C30 		str	r3, [r2, #140]
1852:FWLIB/src/stm32f4xx_rcc.c **** }
 1364              		.loc 1 1852 1 view .LVU362
 1365 0014 7047     		bx	lr
 1366              	.L100:
 1367 0016 00BF     		.align	2
 1368              	.L99:
 1369 0018 00380240 		.word	1073887232
 1370              		.cfi_endproc
 1371              	.LFE152:
 1373              		.section	.text.RCC_LTDCCLKDivConfig,"ax",%progbits
 1374              		.align	1
 1375              		.global	RCC_LTDCCLKDivConfig
 1376              		.syntax unified
 1377              		.thumb
 1378              		.thumb_func
 1379              		.fpu fpv4-sp-d16
 1381              	RCC_LTDCCLKDivConfig:
 1382              	.LVL108:
 1383              	.LFB153:
1853:FWLIB/src/stm32f4xx_rcc.c **** 
1854:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F413_423xx)
1855:FWLIB/src/stm32f4xx_rcc.c **** /**
1856:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the SAI clock Divider coming from PLLI2S.
1857:FWLIB/src/stm32f4xx_rcc.c ****   * 
1858:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F413_423xx
1859:FWLIB/src/stm32f4xx_rcc.c ****   *   
1860:FWLIB/src/stm32f4xx_rcc.c ****   * @param   RCC_PLLI2SDivR: specifies the PLLI2S division factor for SAI1 clock.
1861:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 1 and 32.
1862:FWLIB/src/stm32f4xx_rcc.c ****   *          SAI1 clock frequency = f(PLLI2SR) / RCC_PLLI2SDivR 
1863:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1864:FWLIB/src/stm32f4xx_rcc.c ****   */
1865:FWLIB/src/stm32f4xx_rcc.c **** void RCC_SAIPLLI2SRClkDivConfig(uint32_t RCC_PLLI2SDivR)  
1866:FWLIB/src/stm32f4xx_rcc.c **** {
1867:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1868:FWLIB/src/stm32f4xx_rcc.c ****   
1869:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1870:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2S_DIVR_VALUE(RCC_PLLI2SDivR));
1871:FWLIB/src/stm32f4xx_rcc.c ****   
1872:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1873:FWLIB/src/stm32f4xx_rcc.c **** 
1874:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear PLLI2SDIVR[4:0] bits */
1875:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVR);
1876:FWLIB/src/stm32f4xx_rcc.c **** 
1877:FWLIB/src/stm32f4xx_rcc.c ****   /* Set PLLI2SDIVR values */
1878:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= (RCC_PLLI2SDivR-1);
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 58


1879:FWLIB/src/stm32f4xx_rcc.c **** 
1880:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1881:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1882:FWLIB/src/stm32f4xx_rcc.c **** }
1883:FWLIB/src/stm32f4xx_rcc.c **** 
1884:FWLIB/src/stm32f4xx_rcc.c **** /**
1885:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the SAI clock Divider coming from PLL.
1886:FWLIB/src/stm32f4xx_rcc.c ****   * 
1887:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F413_423xx
1888:FWLIB/src/stm32f4xx_rcc.c ****   *        
1889:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLSAI.
1890:FWLIB/src/stm32f4xx_rcc.c ****   *   
1891:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLDivR: specifies the PLL division factor for SAI1 clock.
1892:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 1 and 32.
1893:FWLIB/src/stm32f4xx_rcc.c ****   *          SAI1 clock frequency = f(PLLR) / RCC_PLLDivR 
1894:FWLIB/src/stm32f4xx_rcc.c ****   *              
1895:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1896:FWLIB/src/stm32f4xx_rcc.c ****   */
1897:FWLIB/src/stm32f4xx_rcc.c **** void RCC_SAIPLLRClkDivConfig(uint32_t RCC_PLLDivR)  
1898:FWLIB/src/stm32f4xx_rcc.c **** {
1899:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1900:FWLIB/src/stm32f4xx_rcc.c ****   
1901:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1902:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_PLLDivR));
1903:FWLIB/src/stm32f4xx_rcc.c ****   
1904:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1905:FWLIB/src/stm32f4xx_rcc.c **** 
1906:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear PLLDIVR[12:8] */
1907:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~(RCC_DCKCFGR_PLLDIVR);
1908:FWLIB/src/stm32f4xx_rcc.c **** 
1909:FWLIB/src/stm32f4xx_rcc.c ****   /* Set PLLDivR values */
1910:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= ((RCC_PLLDivR - 1 ) << 8);
1911:FWLIB/src/stm32f4xx_rcc.c **** 
1912:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1913:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1914:FWLIB/src/stm32f4xx_rcc.c **** }
1915:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F413_423xx */
1916:FWLIB/src/stm32f4xx_rcc.c **** 
1917:FWLIB/src/stm32f4xx_rcc.c **** /**
1918:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the LTDC clock Divider coming from PLLSAI.
1919:FWLIB/src/stm32f4xx_rcc.c ****   * 
1920:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The LTDC peripheral is only available with STM32F42xxx/43xxx/446xx/469xx/479xx Devices.
1921:FWLIB/src/stm32f4xx_rcc.c ****   *      
1922:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLSAI.
1923:FWLIB/src/stm32f4xx_rcc.c ****   *   
1924:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSAIDivR: specifies the PLLSAI division factor for LTDC clock .
1925:FWLIB/src/stm32f4xx_rcc.c ****   *          LTDC clock frequency = f(PLLSAI_R) / RCC_PLLSAIDivR  
1926:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1927:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSAIDivR_Div2: LTDC clock = f(PLLSAI_R)/2
1928:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSAIDivR_Div4: LTDC clock = f(PLLSAI_R)/4
1929:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSAIDivR_Div8: LTDC clock = f(PLLSAI_R)/8
1930:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSAIDivR_Div16: LTDC clock = f(PLLSAI_R)/16
1931:FWLIB/src/stm32f4xx_rcc.c ****   *            
1932:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1933:FWLIB/src/stm32f4xx_rcc.c ****   */
1934:FWLIB/src/stm32f4xx_rcc.c **** void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
1935:FWLIB/src/stm32f4xx_rcc.c **** {
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 59


 1384              		.loc 1 1935 1 is_stmt 1 view -0
 1385              		.cfi_startproc
 1386              		@ args = 0, pretend = 0, frame = 0
 1387              		@ frame_needed = 0, uses_anonymous_args = 0
 1388              		@ link register save eliminated.
1936:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1389              		.loc 1 1936 3 view .LVU364
1937:FWLIB/src/stm32f4xx_rcc.c ****   
1938:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1939:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
 1390              		.loc 1 1939 3 view .LVU365
1940:FWLIB/src/stm32f4xx_rcc.c ****   
1941:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 1391              		.loc 1 1941 3 view .LVU366
 1392              		.loc 1 1941 10 is_stmt 0 view .LVU367
 1393 0000 044A     		ldr	r2, .L102
 1394 0002 D2F88C30 		ldr	r3, [r2, #140]
 1395              	.LVL109:
1942:FWLIB/src/stm32f4xx_rcc.c **** 
1943:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear PLLSAIDIVR[2:0] bits */
1944:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
 1396              		.loc 1 1944 3 is_stmt 1 view .LVU368
 1397              		.loc 1 1944 10 is_stmt 0 view .LVU369
 1398 0006 23F44033 		bic	r3, r3, #196608
 1399              	.LVL110:
1945:FWLIB/src/stm32f4xx_rcc.c **** 
1946:FWLIB/src/stm32f4xx_rcc.c ****   /* Set PLLSAIDIVR values */
1947:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_PLLSAIDivR;
 1400              		.loc 1 1947 3 is_stmt 1 view .LVU370
 1401              		.loc 1 1947 10 is_stmt 0 view .LVU371
 1402 000a 0343     		orrs	r3, r3, r0
 1403              	.LVL111:
1948:FWLIB/src/stm32f4xx_rcc.c **** 
1949:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1950:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 1404              		.loc 1 1950 3 is_stmt 1 view .LVU372
 1405              		.loc 1 1950 16 is_stmt 0 view .LVU373
 1406 000c C2F88C30 		str	r3, [r2, #140]
1951:FWLIB/src/stm32f4xx_rcc.c **** }
 1407              		.loc 1 1951 1 view .LVU374
 1408 0010 7047     		bx	lr
 1409              	.L103:
 1410 0012 00BF     		.align	2
 1411              	.L102:
 1412 0014 00380240 		.word	1073887232
 1413              		.cfi_endproc
 1414              	.LFE153:
 1416              		.section	.text.RCC_TIMCLKPresConfig,"ax",%progbits
 1417              		.align	1
 1418              		.global	RCC_TIMCLKPresConfig
 1419              		.syntax unified
 1420              		.thumb
 1421              		.thumb_func
 1422              		.fpu fpv4-sp-d16
 1424              	RCC_TIMCLKPresConfig:
 1425              	.LVL112:
 1426              	.LFB154:
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 60


1952:FWLIB/src/stm32f4xx_rcc.c **** 
1953:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F412xG) || defined(STM32F413_423xx)
1954:FWLIB/src/stm32f4xx_rcc.c **** /**
1955:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the DFSDM clock source (DFSDMCLK).
1956:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the DFSDM APB clock.
1957:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_DFSDMCLKSource: specifies the DFSDM clock source.
1958:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1959:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_DFSDMCLKSource_APB: APB clock used as DFSDM clock source.
1960:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_DFSDMCLKSource_SYS: System clock used as DFSDM clock source.
1961:FWLIB/src/stm32f4xx_rcc.c ****   *                                        
1962:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1963:FWLIB/src/stm32f4xx_rcc.c ****   */
1964:FWLIB/src/stm32f4xx_rcc.c **** void RCC_DFSDM1CLKConfig(uint32_t RCC_DFSDMCLKSource)
1965:FWLIB/src/stm32f4xx_rcc.c **** {
1966:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1967:FWLIB/src/stm32f4xx_rcc.c ****   
1968:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1969:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_DFSDM1CLK_SOURCE(RCC_DFSDMCLKSource));
1970:FWLIB/src/stm32f4xx_rcc.c ****   
1971:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1972:FWLIB/src/stm32f4xx_rcc.c **** 
1973:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear CKDFSDM-SEL  bit */
1974:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_CKDFSDM1SEL;
1975:FWLIB/src/stm32f4xx_rcc.c **** 
1976:FWLIB/src/stm32f4xx_rcc.c ****   /* Set CKDFSDM-SEL bit according to RCC_DFSDMCLKSource value */
1977:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= (RCC_DFSDMCLKSource << 31) ;
1978:FWLIB/src/stm32f4xx_rcc.c **** 
1979:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1980:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1981:FWLIB/src/stm32f4xx_rcc.c **** }
1982:FWLIB/src/stm32f4xx_rcc.c **** 
1983:FWLIB/src/stm32f4xx_rcc.c **** /**
1984:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the DFSDM Audio clock source (DFSDMACLK).
1985:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the DFSDM APB clock.
1986:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_DFSDM1ACLKSource: specifies the DFSDM clock source.
1987:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1988:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_DFSDM1AUDIOCLKSOURCE_I2SAPB1: APB clock used as DFSDM clock source.
1989:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_DFSDM1AUDIOCLKSOURCE_I2SAPB2: System clock used as DFSDM clock source.
1990:FWLIB/src/stm32f4xx_rcc.c ****   *                                        
1991:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1992:FWLIB/src/stm32f4xx_rcc.c ****   */
1993:FWLIB/src/stm32f4xx_rcc.c **** void RCC_DFSDM1ACLKConfig(uint32_t RCC_DFSDM1ACLKSource)
1994:FWLIB/src/stm32f4xx_rcc.c **** {
1995:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1996:FWLIB/src/stm32f4xx_rcc.c ****   
1997:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1998:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_DFSDMACLK_SOURCE(RCC_DFSDM1ACLKSource));
1999:FWLIB/src/stm32f4xx_rcc.c ****   
2000:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
2001:FWLIB/src/stm32f4xx_rcc.c **** 
2002:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear CKDFSDMA SEL  bit */
2003:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_CKDFSDM1ASEL;
2004:FWLIB/src/stm32f4xx_rcc.c **** 
2005:FWLIB/src/stm32f4xx_rcc.c ****   /* Set CKDFSDM-SEL   bt according to RCC_DFSDMCLKSource value */
2006:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_DFSDM1ACLKSource;
2007:FWLIB/src/stm32f4xx_rcc.c **** 
2008:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 61


2009:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
2010:FWLIB/src/stm32f4xx_rcc.c **** }
2011:FWLIB/src/stm32f4xx_rcc.c **** 
2012:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F413_423xx)
2013:FWLIB/src/stm32f4xx_rcc.c **** /**
2014:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the DFSDM Audio clock source (DFSDMACLK).
2015:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the DFSDM APB clock.
2016:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_DFSDM2ACLKSource: specifies the DFSDM clock source.
2017:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2018:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_DFSDM2AUDIOCLKSOURCE_I2SAPB1: APB clock used as DFSDM clock source.
2019:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_DFSDM2AUDIOCLKSOURCE_I2SAPB2: System clock used as DFSDM clock source.
2020:FWLIB/src/stm32f4xx_rcc.c ****   *                                        
2021:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2022:FWLIB/src/stm32f4xx_rcc.c ****   */
2023:FWLIB/src/stm32f4xx_rcc.c **** void RCC_DFSDM2ACLKConfig(uint32_t RCC_DFSDMACLKSource)
2024:FWLIB/src/stm32f4xx_rcc.c **** {
2025:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
2026:FWLIB/src/stm32f4xx_rcc.c ****   
2027:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2028:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_DFSDMCLK_SOURCE(RCC_DFSDMACLKSource));
2029:FWLIB/src/stm32f4xx_rcc.c ****   
2030:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
2031:FWLIB/src/stm32f4xx_rcc.c **** 
2032:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear CKDFSDMA SEL  bit */
2033:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_CKDFSDM1ASEL;
2034:FWLIB/src/stm32f4xx_rcc.c **** 
2035:FWLIB/src/stm32f4xx_rcc.c ****   /* Set CKDFSDM-SEL   bt according to RCC_DFSDMCLKSource value */
2036:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_DFSDMACLKSource;
2037:FWLIB/src/stm32f4xx_rcc.c **** 
2038:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
2039:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
2040:FWLIB/src/stm32f4xx_rcc.c **** }
2041:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F413_423xx */
2042:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F412xG || STM32F413_423xx */
2043:FWLIB/src/stm32f4xx_rcc.c **** 
2044:FWLIB/src/stm32f4xx_rcc.c **** /**
2045:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the Timers clocks prescalers selection.
2046:FWLIB/src/stm32f4xx_rcc.c ****   * 
2047:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx and STM32F401xx/411xE devices. 
2048:FWLIB/src/stm32f4xx_rcc.c ****   *   
2049:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_TIMCLKPrescaler : specifies the Timers clocks prescalers selection
2050:FWLIB/src/stm32f4xx_rcc.c ****   *         This parameter can be one of the following values:
2051:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_TIMPrescDesactivated: The Timers kernels clocks prescaler is 
2052:FWLIB/src/stm32f4xx_rcc.c ****   *                 equal to HPRE if PPREx is corresponding to division by 1 or 2, 
2053:FWLIB/src/stm32f4xx_rcc.c ****   *                 else it is equal to [(HPRE * PPREx) / 2] if PPREx is corresponding to 
2054:FWLIB/src/stm32f4xx_rcc.c ****   *                 division by 4 or more.
2055:FWLIB/src/stm32f4xx_rcc.c ****   *                   
2056:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_TIMPrescActivated: The Timers kernels clocks prescaler is 
2057:FWLIB/src/stm32f4xx_rcc.c ****   *                 equal to HPRE if PPREx is corresponding to division by 1, 2 or 4, 
2058:FWLIB/src/stm32f4xx_rcc.c ****   *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
2059:FWLIB/src/stm32f4xx_rcc.c ****   *                 to division by 8 or more.
2060:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2061:FWLIB/src/stm32f4xx_rcc.c ****   */
2062:FWLIB/src/stm32f4xx_rcc.c **** void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
2063:FWLIB/src/stm32f4xx_rcc.c **** {
 1427              		.loc 1 2063 1 is_stmt 1 view -0
 1428              		.cfi_startproc
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 62


 1429              		@ args = 0, pretend = 0, frame = 0
 1430              		@ frame_needed = 0, uses_anonymous_args = 0
 1431              		@ link register save eliminated.
2064:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2065:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));
 1432              		.loc 1 2065 3 view .LVU376
2066:FWLIB/src/stm32f4xx_rcc.c **** 
2067:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 1433              		.loc 1 2067 3 view .LVU377
 1434              		.loc 1 2067 40 is_stmt 0 view .LVU378
 1435 0000 014B     		ldr	r3, .L105
 1436 0002 C3F8E001 		str	r0, [r3, #480]
2068:FWLIB/src/stm32f4xx_rcc.c **** }
 1437              		.loc 1 2068 1 view .LVU379
 1438 0006 7047     		bx	lr
 1439              	.L106:
 1440              		.align	2
 1441              	.L105:
 1442 0008 00104742 		.word	1111953408
 1443              		.cfi_endproc
 1444              	.LFE154:
 1446              		.section	.text.RCC_AHB1PeriphClockCmd,"ax",%progbits
 1447              		.align	1
 1448              		.global	RCC_AHB1PeriphClockCmd
 1449              		.syntax unified
 1450              		.thumb
 1451              		.thumb_func
 1452              		.fpu fpv4-sp-d16
 1454              	RCC_AHB1PeriphClockCmd:
 1455              	.LVL113:
 1456              	.LFB155:
2069:FWLIB/src/stm32f4xx_rcc.c **** 
2070:FWLIB/src/stm32f4xx_rcc.c **** /**
2071:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock.
2072:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
2073:FWLIB/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
2074:FWLIB/src/stm32f4xx_rcc.c ****   *         using it.   
2075:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
2076:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2077:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
2078:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
2079:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
2080:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
2081:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
2082:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
2083:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
2084:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
2085:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
2086:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOJ:       GPIOJ clock (STM32F42xxx/43xxx devices) 
2087:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOK:       GPIOK clock (STM32F42xxx/43xxx devices)  
2088:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
2089:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
2090:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CCMDATARAMEN CCM data RAM interface clock
2091:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
2092:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
2093:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2D:       DMA2D clock (STM32F429xx/439xx devices)  
2094:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 63


2095:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
2096:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
2097:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
2098:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
2099:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
2100:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2101:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2102:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2103:FWLIB/src/stm32f4xx_rcc.c ****   */
2104:FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
2105:FWLIB/src/stm32f4xx_rcc.c **** {
 1457              		.loc 1 2105 1 is_stmt 1 view -0
 1458              		.cfi_startproc
 1459              		@ args = 0, pretend = 0, frame = 0
 1460              		@ frame_needed = 0, uses_anonymous_args = 0
 1461              		@ link register save eliminated.
2106:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2107:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
 1462              		.loc 1 2107 3 view .LVU381
2108:FWLIB/src/stm32f4xx_rcc.c **** 
2109:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1463              		.loc 1 2109 3 view .LVU382
2110:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1464              		.loc 1 2110 3 view .LVU383
 1465              		.loc 1 2110 6 is_stmt 0 view .LVU384
 1466 0000 21B1     		cbz	r1, .L108
2111:FWLIB/src/stm32f4xx_rcc.c ****   {
2112:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB1ENR |= RCC_AHB1Periph;
 1467              		.loc 1 2112 5 is_stmt 1 view .LVU385
 1468              		.loc 1 2112 18 is_stmt 0 view .LVU386
 1469 0002 054A     		ldr	r2, .L110
 1470 0004 136B     		ldr	r3, [r2, #48]
 1471 0006 1843     		orrs	r0, r0, r3
 1472              	.LVL114:
 1473              		.loc 1 2112 18 view .LVU387
 1474 0008 1063     		str	r0, [r2, #48]
 1475 000a 7047     		bx	lr
 1476              	.LVL115:
 1477              	.L108:
2113:FWLIB/src/stm32f4xx_rcc.c ****   }
2114:FWLIB/src/stm32f4xx_rcc.c ****   else
2115:FWLIB/src/stm32f4xx_rcc.c ****   {
2116:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB1ENR &= ~RCC_AHB1Periph;
 1478              		.loc 1 2116 5 is_stmt 1 view .LVU388
 1479              		.loc 1 2116 18 is_stmt 0 view .LVU389
 1480 000c 024A     		ldr	r2, .L110
 1481 000e 136B     		ldr	r3, [r2, #48]
 1482 0010 23EA0000 		bic	r0, r3, r0
 1483              	.LVL116:
 1484              		.loc 1 2116 18 view .LVU390
 1485 0014 1063     		str	r0, [r2, #48]
2117:FWLIB/src/stm32f4xx_rcc.c ****   }
2118:FWLIB/src/stm32f4xx_rcc.c **** }
 1486              		.loc 1 2118 1 view .LVU391
 1487 0016 7047     		bx	lr
 1488              	.L111:
 1489              		.align	2
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 64


 1490              	.L110:
 1491 0018 00380240 		.word	1073887232
 1492              		.cfi_endproc
 1493              	.LFE155:
 1495              		.section	.text.RCC_AHB2PeriphClockCmd,"ax",%progbits
 1496              		.align	1
 1497              		.global	RCC_AHB2PeriphClockCmd
 1498              		.syntax unified
 1499              		.thumb
 1500              		.thumb_func
 1501              		.fpu fpv4-sp-d16
 1503              	RCC_AHB2PeriphClockCmd:
 1504              	.LVL117:
 1505              	.LFB156:
2119:FWLIB/src/stm32f4xx_rcc.c **** 
2120:FWLIB/src/stm32f4xx_rcc.c **** /**
2121:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock.
2122:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
2123:FWLIB/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
2124:FWLIB/src/stm32f4xx_rcc.c ****   *         using it. 
2125:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
2126:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2127:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
2128:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
2129:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
2130:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
2131:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
2132:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2133:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2134:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2135:FWLIB/src/stm32f4xx_rcc.c ****   */
2136:FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
2137:FWLIB/src/stm32f4xx_rcc.c **** {
 1506              		.loc 1 2137 1 is_stmt 1 view -0
 1507              		.cfi_startproc
 1508              		@ args = 0, pretend = 0, frame = 0
 1509              		@ frame_needed = 0, uses_anonymous_args = 0
 1510              		@ link register save eliminated.
2138:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2139:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
 1511              		.loc 1 2139 3 view .LVU393
2140:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1512              		.loc 1 2140 3 view .LVU394
2141:FWLIB/src/stm32f4xx_rcc.c **** 
2142:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1513              		.loc 1 2142 3 view .LVU395
 1514              		.loc 1 2142 6 is_stmt 0 view .LVU396
 1515 0000 21B1     		cbz	r1, .L113
2143:FWLIB/src/stm32f4xx_rcc.c ****   {
2144:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB2ENR |= RCC_AHB2Periph;
 1516              		.loc 1 2144 5 is_stmt 1 view .LVU397
 1517              		.loc 1 2144 18 is_stmt 0 view .LVU398
 1518 0002 054A     		ldr	r2, .L115
 1519 0004 536B     		ldr	r3, [r2, #52]
 1520 0006 1843     		orrs	r0, r0, r3
 1521              	.LVL118:
 1522              		.loc 1 2144 18 view .LVU399
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 65


 1523 0008 5063     		str	r0, [r2, #52]
 1524 000a 7047     		bx	lr
 1525              	.LVL119:
 1526              	.L113:
2145:FWLIB/src/stm32f4xx_rcc.c ****   }
2146:FWLIB/src/stm32f4xx_rcc.c ****   else
2147:FWLIB/src/stm32f4xx_rcc.c ****   {
2148:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB2ENR &= ~RCC_AHB2Periph;
 1527              		.loc 1 2148 5 is_stmt 1 view .LVU400
 1528              		.loc 1 2148 18 is_stmt 0 view .LVU401
 1529 000c 024A     		ldr	r2, .L115
 1530 000e 536B     		ldr	r3, [r2, #52]
 1531 0010 23EA0000 		bic	r0, r3, r0
 1532              	.LVL120:
 1533              		.loc 1 2148 18 view .LVU402
 1534 0014 5063     		str	r0, [r2, #52]
2149:FWLIB/src/stm32f4xx_rcc.c ****   }
2150:FWLIB/src/stm32f4xx_rcc.c **** }
 1535              		.loc 1 2150 1 view .LVU403
 1536 0016 7047     		bx	lr
 1537              	.L116:
 1538              		.align	2
 1539              	.L115:
 1540 0018 00380240 		.word	1073887232
 1541              		.cfi_endproc
 1542              	.LFE156:
 1544              		.section	.text.RCC_AHB3PeriphClockCmd,"ax",%progbits
 1545              		.align	1
 1546              		.global	RCC_AHB3PeriphClockCmd
 1547              		.syntax unified
 1548              		.thumb
 1549              		.thumb_func
 1550              		.fpu fpv4-sp-d16
 1552              	RCC_AHB3PeriphClockCmd:
 1553              	.LVL121:
 1554              	.LFB157:
2151:FWLIB/src/stm32f4xx_rcc.c **** 
2152:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F42
2153:FWLIB/src/stm32f4xx_rcc.c **** /**
2154:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock.
2155:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
2156:FWLIB/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
2157:FWLIB/src/stm32f4xx_rcc.c ****   *         using it. 
2158:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
2159:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be: 
2160:FWLIB/src/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_FSMC or RCC_AHB3Periph_FMC (STM32F412xG/STM32F413_423xx/STM32F429x/4
2161:FWLIB/src/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_QSPI (STM32F412xG/STM32F413_423xx/STM32F446xx/STM32F469_479xx device
2162:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2163:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2164:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2165:FWLIB/src/stm32f4xx_rcc.c ****   */
2166:FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
2167:FWLIB/src/stm32f4xx_rcc.c **** {
 1555              		.loc 1 2167 1 is_stmt 1 view -0
 1556              		.cfi_startproc
 1557              		@ args = 0, pretend = 0, frame = 0
 1558              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 66


 1559              		@ link register save eliminated.
2168:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2169:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
 1560              		.loc 1 2169 3 view .LVU405
2170:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1561              		.loc 1 2170 3 view .LVU406
2171:FWLIB/src/stm32f4xx_rcc.c **** 
2172:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1562              		.loc 1 2172 3 view .LVU407
 1563              		.loc 1 2172 6 is_stmt 0 view .LVU408
 1564 0000 21B1     		cbz	r1, .L118
2173:FWLIB/src/stm32f4xx_rcc.c ****   {
2174:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB3ENR |= RCC_AHB3Periph;
 1565              		.loc 1 2174 5 is_stmt 1 view .LVU409
 1566              		.loc 1 2174 18 is_stmt 0 view .LVU410
 1567 0002 054A     		ldr	r2, .L120
 1568 0004 936B     		ldr	r3, [r2, #56]
 1569 0006 1843     		orrs	r0, r0, r3
 1570              	.LVL122:
 1571              		.loc 1 2174 18 view .LVU411
 1572 0008 9063     		str	r0, [r2, #56]
 1573 000a 7047     		bx	lr
 1574              	.LVL123:
 1575              	.L118:
2175:FWLIB/src/stm32f4xx_rcc.c ****   }
2176:FWLIB/src/stm32f4xx_rcc.c ****   else
2177:FWLIB/src/stm32f4xx_rcc.c ****   {
2178:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB3ENR &= ~RCC_AHB3Periph;
 1576              		.loc 1 2178 5 is_stmt 1 view .LVU412
 1577              		.loc 1 2178 18 is_stmt 0 view .LVU413
 1578 000c 024A     		ldr	r2, .L120
 1579 000e 936B     		ldr	r3, [r2, #56]
 1580 0010 23EA0000 		bic	r0, r3, r0
 1581              	.LVL124:
 1582              		.loc 1 2178 18 view .LVU414
 1583 0014 9063     		str	r0, [r2, #56]
2179:FWLIB/src/stm32f4xx_rcc.c ****   }
2180:FWLIB/src/stm32f4xx_rcc.c **** }
 1584              		.loc 1 2180 1 view .LVU415
 1585 0016 7047     		bx	lr
 1586              	.L121:
 1587              		.align	2
 1588              	.L120:
 1589 0018 00380240 		.word	1073887232
 1590              		.cfi_endproc
 1591              	.LFE157:
 1593              		.section	.text.RCC_APB1PeriphClockCmd,"ax",%progbits
 1594              		.align	1
 1595              		.global	RCC_APB1PeriphClockCmd
 1596              		.syntax unified
 1597              		.thumb
 1598              		.thumb_func
 1599              		.fpu fpv4-sp-d16
 1601              	RCC_APB1PeriphClockCmd:
 1602              	.LVL125:
 1603              	.LFB158:
2181:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F412xG || STM32F413_423xx || STM32F427_437xx || STM32F429_439xx ||
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 67


2182:FWLIB/src/stm32f4xx_rcc.c **** 
2183:FWLIB/src/stm32f4xx_rcc.c **** /**
2184:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
2185:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
2186:FWLIB/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
2187:FWLIB/src/stm32f4xx_rcc.c ****   *         using it. 
2188:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
2189:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2190:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
2191:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
2192:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
2193:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
2194:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
2195:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
2196:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
2197:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
2198:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
2199:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_LPTIM1: LPTIM1 clock (STM32F410xx and STM32F413_423xx devices) 
2200:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
2201:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
2202:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
2203:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPDIF:  SPDIF RX clock (STM32F446xx devices) 
2204:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
2205:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
2206:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
2207:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
2208:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
2209:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
2210:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
2211:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_FMPI2C1:FMPI2C1 clock
2212:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
2213:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
2214:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CEC:    CEC clock (STM32F446xx devices)
2215:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
2216:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
2217:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART7:  UART7 clock
2218:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART8:  UART8 clock
2219:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2220:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2221:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2222:FWLIB/src/stm32f4xx_rcc.c ****   */
2223:FWLIB/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
2224:FWLIB/src/stm32f4xx_rcc.c **** {
 1604              		.loc 1 2224 1 is_stmt 1 view -0
 1605              		.cfi_startproc
 1606              		@ args = 0, pretend = 0, frame = 0
 1607              		@ frame_needed = 0, uses_anonymous_args = 0
 1608              		@ link register save eliminated.
2225:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2226:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
 1609              		.loc 1 2226 3 view .LVU417
2227:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1610              		.loc 1 2227 3 view .LVU418
2228:FWLIB/src/stm32f4xx_rcc.c **** 
2229:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1611              		.loc 1 2229 3 view .LVU419
 1612              		.loc 1 2229 6 is_stmt 0 view .LVU420
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 68


 1613 0000 21B1     		cbz	r1, .L123
2230:FWLIB/src/stm32f4xx_rcc.c ****   {
2231:FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
 1614              		.loc 1 2231 5 is_stmt 1 view .LVU421
 1615              		.loc 1 2231 18 is_stmt 0 view .LVU422
 1616 0002 054A     		ldr	r2, .L125
 1617 0004 136C     		ldr	r3, [r2, #64]
 1618 0006 1843     		orrs	r0, r0, r3
 1619              	.LVL126:
 1620              		.loc 1 2231 18 view .LVU423
 1621 0008 1064     		str	r0, [r2, #64]
 1622 000a 7047     		bx	lr
 1623              	.LVL127:
 1624              	.L123:
2232:FWLIB/src/stm32f4xx_rcc.c ****   }
2233:FWLIB/src/stm32f4xx_rcc.c ****   else
2234:FWLIB/src/stm32f4xx_rcc.c ****   {
2235:FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
 1625              		.loc 1 2235 5 is_stmt 1 view .LVU424
 1626              		.loc 1 2235 18 is_stmt 0 view .LVU425
 1627 000c 024A     		ldr	r2, .L125
 1628 000e 136C     		ldr	r3, [r2, #64]
 1629 0010 23EA0000 		bic	r0, r3, r0
 1630              	.LVL128:
 1631              		.loc 1 2235 18 view .LVU426
 1632 0014 1064     		str	r0, [r2, #64]
2236:FWLIB/src/stm32f4xx_rcc.c ****   }
2237:FWLIB/src/stm32f4xx_rcc.c **** }
 1633              		.loc 1 2237 1 view .LVU427
 1634 0016 7047     		bx	lr
 1635              	.L126:
 1636              		.align	2
 1637              	.L125:
 1638 0018 00380240 		.word	1073887232
 1639              		.cfi_endproc
 1640              	.LFE158:
 1642              		.section	.text.RCC_APB2PeriphClockCmd,"ax",%progbits
 1643              		.align	1
 1644              		.global	RCC_APB2PeriphClockCmd
 1645              		.syntax unified
 1646              		.thumb
 1647              		.thumb_func
 1648              		.fpu fpv4-sp-d16
 1650              	RCC_APB2PeriphClockCmd:
 1651              	.LVL129:
 1652              	.LFB159:
2238:FWLIB/src/stm32f4xx_rcc.c **** 
2239:FWLIB/src/stm32f4xx_rcc.c **** /**
2240:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
2241:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
2242:FWLIB/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
2243:FWLIB/src/stm32f4xx_rcc.c ****   *         using it.
2244:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
2245:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2246:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
2247:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
2248:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 69


2249:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
2250:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
2251:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
2252:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
2253:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
2254:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
2255:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI4:   SPI4 clock
2256:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
2257:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_EXTIT:  EXTIIT clock
2258:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
2259:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
2260:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
2261:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI5:   SPI5 clock
2262:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI6:   SPI6 clock
2263:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI1:   SAI1 clock (STM32F42xxx/43xxx/446xx/469xx/479xx/413_423x
2264:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI2:   SAI2 clock (STM32F446xx devices) 
2265:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_LTDC:   LTDC clock (STM32F429xx/439xx devices)
2266:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DSI:    DSI clock (STM32F469_479xx devices)
2267:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DFSDM1: DFSDM Clock (STM32F412xG and STM32F413_423xx Devices)
2268:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DFSDM2: DFSDM2 Clock (STM32F413_423xx Devices)
2269:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_UART9:  UART9 Clock (STM32F413_423xx Devices)
2270:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_UART10: UART10 Clock (STM32F413_423xx Devices)
2271:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2272:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2273:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2274:FWLIB/src/stm32f4xx_rcc.c ****   */
2275:FWLIB/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
2276:FWLIB/src/stm32f4xx_rcc.c **** {
 1653              		.loc 1 2276 1 is_stmt 1 view -0
 1654              		.cfi_startproc
 1655              		@ args = 0, pretend = 0, frame = 0
 1656              		@ frame_needed = 0, uses_anonymous_args = 0
 1657              		@ link register save eliminated.
2277:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2278:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
 1658              		.loc 1 2278 3 view .LVU429
2279:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1659              		.loc 1 2279 3 view .LVU430
2280:FWLIB/src/stm32f4xx_rcc.c **** 
2281:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1660              		.loc 1 2281 3 view .LVU431
 1661              		.loc 1 2281 6 is_stmt 0 view .LVU432
 1662 0000 21B1     		cbz	r1, .L128
2282:FWLIB/src/stm32f4xx_rcc.c ****   {
2283:FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
 1663              		.loc 1 2283 5 is_stmt 1 view .LVU433
 1664              		.loc 1 2283 18 is_stmt 0 view .LVU434
 1665 0002 054A     		ldr	r2, .L130
 1666 0004 536C     		ldr	r3, [r2, #68]
 1667 0006 1843     		orrs	r0, r0, r3
 1668              	.LVL130:
 1669              		.loc 1 2283 18 view .LVU435
 1670 0008 5064     		str	r0, [r2, #68]
 1671 000a 7047     		bx	lr
 1672              	.LVL131:
 1673              	.L128:
2284:FWLIB/src/stm32f4xx_rcc.c ****   }
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 70


2285:FWLIB/src/stm32f4xx_rcc.c ****   else
2286:FWLIB/src/stm32f4xx_rcc.c ****   {
2287:FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
 1674              		.loc 1 2287 5 is_stmt 1 view .LVU436
 1675              		.loc 1 2287 18 is_stmt 0 view .LVU437
 1676 000c 024A     		ldr	r2, .L130
 1677 000e 536C     		ldr	r3, [r2, #68]
 1678 0010 23EA0000 		bic	r0, r3, r0
 1679              	.LVL132:
 1680              		.loc 1 2287 18 view .LVU438
 1681 0014 5064     		str	r0, [r2, #68]
2288:FWLIB/src/stm32f4xx_rcc.c ****   }
2289:FWLIB/src/stm32f4xx_rcc.c **** }
 1682              		.loc 1 2289 1 view .LVU439
 1683 0016 7047     		bx	lr
 1684              	.L131:
 1685              		.align	2
 1686              	.L130:
 1687 0018 00380240 		.word	1073887232
 1688              		.cfi_endproc
 1689              	.LFE159:
 1691              		.section	.text.RCC_AHB1PeriphResetCmd,"ax",%progbits
 1692              		.align	1
 1693              		.global	RCC_AHB1PeriphResetCmd
 1694              		.syntax unified
 1695              		.thumb
 1696              		.thumb_func
 1697              		.fpu fpv4-sp-d16
 1699              	RCC_AHB1PeriphResetCmd:
 1700              	.LVL133:
 1701              	.LFB160:
2290:FWLIB/src/stm32f4xx_rcc.c **** 
2291:FWLIB/src/stm32f4xx_rcc.c **** /**
2292:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB1 peripheral reset.
2293:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB1Periph: specifies the AHB1 peripheral to reset.
2294:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2295:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:   GPIOA clock
2296:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:   GPIOB clock 
2297:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:   GPIOC clock
2298:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:   GPIOD clock
2299:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:   GPIOE clock
2300:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:   GPIOF clock
2301:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
2302:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
2303:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:   GPIOI clock
2304:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOJ:   GPIOJ clock (STM32F42xxx/43xxx devices) 
2305:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOK:   GPIOK clock (STM32F42xxx/43xxxdevices)   
2306:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:     CRC clock
2307:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:    DMA1 clock
2308:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:    DMA2 clock
2309:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2D:   DMA2D clock (STM32F429xx/439xx devices)   
2310:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC: Ethernet MAC clock
2311:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:  USB OTG HS clock
2312:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_RNG:     RNG clock for STM32F410xx devices   
2313:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
2314:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2315:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 71


2316:FWLIB/src/stm32f4xx_rcc.c ****   */
2317:FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
2318:FWLIB/src/stm32f4xx_rcc.c **** {
 1702              		.loc 1 2318 1 is_stmt 1 view -0
 1703              		.cfi_startproc
 1704              		@ args = 0, pretend = 0, frame = 0
 1705              		@ frame_needed = 0, uses_anonymous_args = 0
 1706              		@ link register save eliminated.
2319:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2320:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
 1707              		.loc 1 2320 3 view .LVU441
2321:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1708              		.loc 1 2321 3 view .LVU442
2322:FWLIB/src/stm32f4xx_rcc.c **** 
2323:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1709              		.loc 1 2323 3 view .LVU443
 1710              		.loc 1 2323 6 is_stmt 0 view .LVU444
 1711 0000 21B1     		cbz	r1, .L133
2324:FWLIB/src/stm32f4xx_rcc.c ****   {
2325:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB1RSTR |= RCC_AHB1Periph;
 1712              		.loc 1 2325 5 is_stmt 1 view .LVU445
 1713              		.loc 1 2325 19 is_stmt 0 view .LVU446
 1714 0002 054A     		ldr	r2, .L135
 1715 0004 1369     		ldr	r3, [r2, #16]
 1716 0006 1843     		orrs	r0, r0, r3
 1717              	.LVL134:
 1718              		.loc 1 2325 19 view .LVU447
 1719 0008 1061     		str	r0, [r2, #16]
 1720 000a 7047     		bx	lr
 1721              	.LVL135:
 1722              	.L133:
2326:FWLIB/src/stm32f4xx_rcc.c ****   }
2327:FWLIB/src/stm32f4xx_rcc.c ****   else
2328:FWLIB/src/stm32f4xx_rcc.c ****   {
2329:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 1723              		.loc 1 2329 5 is_stmt 1 view .LVU448
 1724              		.loc 1 2329 19 is_stmt 0 view .LVU449
 1725 000c 024A     		ldr	r2, .L135
 1726 000e 1369     		ldr	r3, [r2, #16]
 1727 0010 23EA0000 		bic	r0, r3, r0
 1728              	.LVL136:
 1729              		.loc 1 2329 19 view .LVU450
 1730 0014 1061     		str	r0, [r2, #16]
2330:FWLIB/src/stm32f4xx_rcc.c ****   }
2331:FWLIB/src/stm32f4xx_rcc.c **** }
 1731              		.loc 1 2331 1 view .LVU451
 1732 0016 7047     		bx	lr
 1733              	.L136:
 1734              		.align	2
 1735              	.L135:
 1736 0018 00380240 		.word	1073887232
 1737              		.cfi_endproc
 1738              	.LFE160:
 1740              		.section	.text.RCC_AHB2PeriphResetCmd,"ax",%progbits
 1741              		.align	1
 1742              		.global	RCC_AHB2PeriphResetCmd
 1743              		.syntax unified
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 72


 1744              		.thumb
 1745              		.thumb_func
 1746              		.fpu fpv4-sp-d16
 1748              	RCC_AHB2PeriphResetCmd:
 1749              	.LVL137:
 1750              	.LFB161:
2332:FWLIB/src/stm32f4xx_rcc.c **** 
2333:FWLIB/src/stm32f4xx_rcc.c **** /**
2334:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB2 peripheral reset.
2335:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB2Periph: specifies the AHB2 peripheral to reset.
2336:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2337:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
2338:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
2339:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
2340:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock for STM32F40_41xxx/STM32F412xG/STM32F413_423xx
2341:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
2342:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
2343:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2344:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2345:FWLIB/src/stm32f4xx_rcc.c ****   */
2346:FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
2347:FWLIB/src/stm32f4xx_rcc.c **** {
 1751              		.loc 1 2347 1 is_stmt 1 view -0
 1752              		.cfi_startproc
 1753              		@ args = 0, pretend = 0, frame = 0
 1754              		@ frame_needed = 0, uses_anonymous_args = 0
 1755              		@ link register save eliminated.
2348:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2349:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
 1756              		.loc 1 2349 3 view .LVU453
2350:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1757              		.loc 1 2350 3 view .LVU454
2351:FWLIB/src/stm32f4xx_rcc.c **** 
2352:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1758              		.loc 1 2352 3 view .LVU455
 1759              		.loc 1 2352 6 is_stmt 0 view .LVU456
 1760 0000 21B1     		cbz	r1, .L138
2353:FWLIB/src/stm32f4xx_rcc.c ****   {
2354:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB2RSTR |= RCC_AHB2Periph;
 1761              		.loc 1 2354 5 is_stmt 1 view .LVU457
 1762              		.loc 1 2354 19 is_stmt 0 view .LVU458
 1763 0002 054A     		ldr	r2, .L140
 1764 0004 5369     		ldr	r3, [r2, #20]
 1765 0006 1843     		orrs	r0, r0, r3
 1766              	.LVL138:
 1767              		.loc 1 2354 19 view .LVU459
 1768 0008 5061     		str	r0, [r2, #20]
 1769 000a 7047     		bx	lr
 1770              	.LVL139:
 1771              	.L138:
2355:FWLIB/src/stm32f4xx_rcc.c ****   }
2356:FWLIB/src/stm32f4xx_rcc.c ****   else
2357:FWLIB/src/stm32f4xx_rcc.c ****   {
2358:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 1772              		.loc 1 2358 5 is_stmt 1 view .LVU460
 1773              		.loc 1 2358 19 is_stmt 0 view .LVU461
 1774 000c 024A     		ldr	r2, .L140
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 73


 1775 000e 5369     		ldr	r3, [r2, #20]
 1776 0010 23EA0000 		bic	r0, r3, r0
 1777              	.LVL140:
 1778              		.loc 1 2358 19 view .LVU462
 1779 0014 5061     		str	r0, [r2, #20]
2359:FWLIB/src/stm32f4xx_rcc.c ****   }
2360:FWLIB/src/stm32f4xx_rcc.c **** }
 1780              		.loc 1 2360 1 view .LVU463
 1781 0016 7047     		bx	lr
 1782              	.L141:
 1783              		.align	2
 1784              	.L140:
 1785 0018 00380240 		.word	1073887232
 1786              		.cfi_endproc
 1787              	.LFE161:
 1789              		.section	.text.RCC_AHB3PeriphResetCmd,"ax",%progbits
 1790              		.align	1
 1791              		.global	RCC_AHB3PeriphResetCmd
 1792              		.syntax unified
 1793              		.thumb
 1794              		.thumb_func
 1795              		.fpu fpv4-sp-d16
 1797              	RCC_AHB3PeriphResetCmd:
 1798              	.LVL141:
 1799              	.LFB162:
2361:FWLIB/src/stm32f4xx_rcc.c **** 
2362:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F42
2363:FWLIB/src/stm32f4xx_rcc.c **** /**
2364:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB3 peripheral reset.
2365:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB3Periph: specifies the AHB3 peripheral to reset.
2366:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be: 
2367:FWLIB/src/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_FSMC or RCC_AHB3Periph_FMC (STM32F412xG, STM32F413_423xx and STM32F4
2368:FWLIB/src/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_QSPI (STM32F412xG/STM32F446xx/STM32F469_479xx devices)
2369:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
2370:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2371:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2372:FWLIB/src/stm32f4xx_rcc.c ****   */
2373:FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
2374:FWLIB/src/stm32f4xx_rcc.c **** {
 1800              		.loc 1 2374 1 is_stmt 1 view -0
 1801              		.cfi_startproc
 1802              		@ args = 0, pretend = 0, frame = 0
 1803              		@ frame_needed = 0, uses_anonymous_args = 0
 1804              		@ link register save eliminated.
2375:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2376:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
 1805              		.loc 1 2376 3 view .LVU465
2377:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1806              		.loc 1 2377 3 view .LVU466
2378:FWLIB/src/stm32f4xx_rcc.c **** 
2379:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1807              		.loc 1 2379 3 view .LVU467
 1808              		.loc 1 2379 6 is_stmt 0 view .LVU468
 1809 0000 21B1     		cbz	r1, .L143
2380:FWLIB/src/stm32f4xx_rcc.c ****   {
2381:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB3RSTR |= RCC_AHB3Periph;
 1810              		.loc 1 2381 5 is_stmt 1 view .LVU469
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 74


 1811              		.loc 1 2381 19 is_stmt 0 view .LVU470
 1812 0002 054A     		ldr	r2, .L145
 1813 0004 9369     		ldr	r3, [r2, #24]
 1814 0006 1843     		orrs	r0, r0, r3
 1815              	.LVL142:
 1816              		.loc 1 2381 19 view .LVU471
 1817 0008 9061     		str	r0, [r2, #24]
 1818 000a 7047     		bx	lr
 1819              	.LVL143:
 1820              	.L143:
2382:FWLIB/src/stm32f4xx_rcc.c ****   }
2383:FWLIB/src/stm32f4xx_rcc.c ****   else
2384:FWLIB/src/stm32f4xx_rcc.c ****   {
2385:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 1821              		.loc 1 2385 5 is_stmt 1 view .LVU472
 1822              		.loc 1 2385 19 is_stmt 0 view .LVU473
 1823 000c 024A     		ldr	r2, .L145
 1824 000e 9369     		ldr	r3, [r2, #24]
 1825 0010 23EA0000 		bic	r0, r3, r0
 1826              	.LVL144:
 1827              		.loc 1 2385 19 view .LVU474
 1828 0014 9061     		str	r0, [r2, #24]
2386:FWLIB/src/stm32f4xx_rcc.c ****   }
2387:FWLIB/src/stm32f4xx_rcc.c **** }
 1829              		.loc 1 2387 1 view .LVU475
 1830 0016 7047     		bx	lr
 1831              	.L146:
 1832              		.align	2
 1833              	.L145:
 1834 0018 00380240 		.word	1073887232
 1835              		.cfi_endproc
 1836              	.LFE162:
 1838              		.section	.text.RCC_APB1PeriphResetCmd,"ax",%progbits
 1839              		.align	1
 1840              		.global	RCC_APB1PeriphResetCmd
 1841              		.syntax unified
 1842              		.thumb
 1843              		.thumb_func
 1844              		.fpu fpv4-sp-d16
 1846              	RCC_APB1PeriphResetCmd:
 1847              	.LVL145:
 1848              	.LFB163:
2388:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F412xG || STM32F413_423xx || STM32F427_437xx || STM32F429_439xx ||
2389:FWLIB/src/stm32f4xx_rcc.c **** 
2390:FWLIB/src/stm32f4xx_rcc.c **** /**
2391:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
2392:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
2393:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2394:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
2395:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
2396:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
2397:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
2398:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
2399:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
2400:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
2401:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
2402:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 75


2403:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_LPTIM1: LPTIM1 clock (STM32F410xx and STM32F413_423xx devices) 
2404:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
2405:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
2406:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
2407:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPDIF:  SPDIF RX clock (STM32F446xx devices) 
2408:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
2409:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
2410:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
2411:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
2412:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
2413:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
2414:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
2415:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_FMPI2C1:FMPI2C1 clock
2416:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
2417:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
2418:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CEC:    CEC clock(STM32F446xx devices)
2419:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
2420:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
2421:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART7:  UART7 clock
2422:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART8:  UART8 clock  
2423:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
2424:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2425:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2426:FWLIB/src/stm32f4xx_rcc.c ****   */
2427:FWLIB/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
2428:FWLIB/src/stm32f4xx_rcc.c **** {
 1849              		.loc 1 2428 1 is_stmt 1 view -0
 1850              		.cfi_startproc
 1851              		@ args = 0, pretend = 0, frame = 0
 1852              		@ frame_needed = 0, uses_anonymous_args = 0
 1853              		@ link register save eliminated.
2429:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2430:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
 1854              		.loc 1 2430 3 view .LVU477
2431:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1855              		.loc 1 2431 3 view .LVU478
2432:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1856              		.loc 1 2432 3 view .LVU479
 1857              		.loc 1 2432 6 is_stmt 0 view .LVU480
 1858 0000 21B1     		cbz	r1, .L148
2433:FWLIB/src/stm32f4xx_rcc.c ****   {
2434:FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
 1859              		.loc 1 2434 5 is_stmt 1 view .LVU481
 1860              		.loc 1 2434 19 is_stmt 0 view .LVU482
 1861 0002 054A     		ldr	r2, .L150
 1862 0004 136A     		ldr	r3, [r2, #32]
 1863 0006 1843     		orrs	r0, r0, r3
 1864              	.LVL146:
 1865              		.loc 1 2434 19 view .LVU483
 1866 0008 1062     		str	r0, [r2, #32]
 1867 000a 7047     		bx	lr
 1868              	.LVL147:
 1869              	.L148:
2435:FWLIB/src/stm32f4xx_rcc.c ****   }
2436:FWLIB/src/stm32f4xx_rcc.c ****   else
2437:FWLIB/src/stm32f4xx_rcc.c ****   {
2438:FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 76


 1870              		.loc 1 2438 5 is_stmt 1 view .LVU484
 1871              		.loc 1 2438 19 is_stmt 0 view .LVU485
 1872 000c 024A     		ldr	r2, .L150
 1873 000e 136A     		ldr	r3, [r2, #32]
 1874 0010 23EA0000 		bic	r0, r3, r0
 1875              	.LVL148:
 1876              		.loc 1 2438 19 view .LVU486
 1877 0014 1062     		str	r0, [r2, #32]
2439:FWLIB/src/stm32f4xx_rcc.c ****   }
2440:FWLIB/src/stm32f4xx_rcc.c **** }
 1878              		.loc 1 2440 1 view .LVU487
 1879 0016 7047     		bx	lr
 1880              	.L151:
 1881              		.align	2
 1882              	.L150:
 1883 0018 00380240 		.word	1073887232
 1884              		.cfi_endproc
 1885              	.LFE163:
 1887              		.section	.text.RCC_APB2PeriphResetCmd,"ax",%progbits
 1888              		.align	1
 1889              		.global	RCC_APB2PeriphResetCmd
 1890              		.syntax unified
 1891              		.thumb
 1892              		.thumb_func
 1893              		.fpu fpv4-sp-d16
 1895              	RCC_APB2PeriphResetCmd:
 1896              	.LVL149:
 1897              	.LFB164:
2441:FWLIB/src/stm32f4xx_rcc.c **** 
2442:FWLIB/src/stm32f4xx_rcc.c **** /**
2443:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
2444:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
2445:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2446:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
2447:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
2448:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
2449:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
2450:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
2451:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
2452:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
2453:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
2454:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
2455:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI4:   SPI4 clock  
2456:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
2457:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
2458:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
2459:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
2460:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI5:   SPI5 clock
2461:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI6:   SPI6 clock
2462:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI1:   SAI1 clock (STM32F42xxx/43xxx/446xx/469xx/479xx/413_423x
2463:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI2:   SAI2 clock (STM32F446xx devices) 
2464:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_LTDC:   LTDC clock (STM32F429xx/439xx devices)
2465:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DSI:    DSI clock (STM32F469_479xx devices)
2466:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DFSDM1: DFSDM Clock (STM32F412xG and STM32F413_423xx Devices)
2467:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DFSDM2: DFSDM2 Clock (STM32F413_423xx Devices)
2468:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_UART9:  UART9 Clock (STM32F413_423xx Devices)
2469:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_UART10: UART10 Clock (STM32F413_423xx Devices)
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 77


2470:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
2471:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2472:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2473:FWLIB/src/stm32f4xx_rcc.c ****   */
2474:FWLIB/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
2475:FWLIB/src/stm32f4xx_rcc.c **** {
 1898              		.loc 1 2475 1 is_stmt 1 view -0
 1899              		.cfi_startproc
 1900              		@ args = 0, pretend = 0, frame = 0
 1901              		@ frame_needed = 0, uses_anonymous_args = 0
 1902              		@ link register save eliminated.
2476:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2477:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
 1903              		.loc 1 2477 3 view .LVU489
2478:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1904              		.loc 1 2478 3 view .LVU490
2479:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1905              		.loc 1 2479 3 view .LVU491
 1906              		.loc 1 2479 6 is_stmt 0 view .LVU492
 1907 0000 21B1     		cbz	r1, .L153
2480:FWLIB/src/stm32f4xx_rcc.c ****   {
2481:FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
 1908              		.loc 1 2481 5 is_stmt 1 view .LVU493
 1909              		.loc 1 2481 19 is_stmt 0 view .LVU494
 1910 0002 054A     		ldr	r2, .L155
 1911 0004 536A     		ldr	r3, [r2, #36]
 1912 0006 1843     		orrs	r0, r0, r3
 1913              	.LVL150:
 1914              		.loc 1 2481 19 view .LVU495
 1915 0008 5062     		str	r0, [r2, #36]
 1916 000a 7047     		bx	lr
 1917              	.LVL151:
 1918              	.L153:
2482:FWLIB/src/stm32f4xx_rcc.c ****   }
2483:FWLIB/src/stm32f4xx_rcc.c ****   else
2484:FWLIB/src/stm32f4xx_rcc.c ****   {
2485:FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
 1919              		.loc 1 2485 5 is_stmt 1 view .LVU496
 1920              		.loc 1 2485 19 is_stmt 0 view .LVU497
 1921 000c 024A     		ldr	r2, .L155
 1922 000e 536A     		ldr	r3, [r2, #36]
 1923 0010 23EA0000 		bic	r0, r3, r0
 1924              	.LVL152:
 1925              		.loc 1 2485 19 view .LVU498
 1926 0014 5062     		str	r0, [r2, #36]
2486:FWLIB/src/stm32f4xx_rcc.c ****   }
2487:FWLIB/src/stm32f4xx_rcc.c **** }
 1927              		.loc 1 2487 1 view .LVU499
 1928 0016 7047     		bx	lr
 1929              	.L156:
 1930              		.align	2
 1931              	.L155:
 1932 0018 00380240 		.word	1073887232
 1933              		.cfi_endproc
 1934              	.LFE164:
 1936              		.section	.text.RCC_AHB1PeriphClockLPModeCmd,"ax",%progbits
 1937              		.align	1
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 78


 1938              		.global	RCC_AHB1PeriphClockLPModeCmd
 1939              		.syntax unified
 1940              		.thumb
 1941              		.thumb_func
 1942              		.fpu fpv4-sp-d16
 1944              	RCC_AHB1PeriphClockLPModeCmd:
 1945              	.LVL153:
 1946              	.LFB165:
2488:FWLIB/src/stm32f4xx_rcc.c **** 
2489:FWLIB/src/stm32f4xx_rcc.c **** /**
2490:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock during Low Power (Sleep) mode.
2491:FWLIB/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
2492:FWLIB/src/stm32f4xx_rcc.c ****   *         power consumption.
2493:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
2494:FWLIB/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
2495:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
2496:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2497:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
2498:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
2499:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
2500:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
2501:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
2502:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
2503:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
2504:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
2505:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
2506:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOJ:       GPIOJ clock (STM32F42xxx/43xxx devices) 
2507:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOK:       GPIOK clock (STM32F42xxx/43xxx devices)   
2508:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
2509:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
2510:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
2511:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
2512:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2D:       DMA2D clock (STM32F429xx/439xx devices) 
2513:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
2514:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
2515:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
2516:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
2517:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
2518:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
2519:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2520:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2521:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2522:FWLIB/src/stm32f4xx_rcc.c ****   */
2523:FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
2524:FWLIB/src/stm32f4xx_rcc.c **** {
 1947              		.loc 1 2524 1 is_stmt 1 view -0
 1948              		.cfi_startproc
 1949              		@ args = 0, pretend = 0, frame = 0
 1950              		@ frame_needed = 0, uses_anonymous_args = 0
 1951              		@ link register save eliminated.
2525:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2526:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
 1952              		.loc 1 2526 3 view .LVU501
2527:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1953              		.loc 1 2527 3 view .LVU502
2528:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1954              		.loc 1 2528 3 view .LVU503
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 79


 1955              		.loc 1 2528 6 is_stmt 0 view .LVU504
 1956 0000 21B1     		cbz	r1, .L158
2529:FWLIB/src/stm32f4xx_rcc.c ****   {
2530:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB1LPENR |= RCC_AHB1Periph;
 1957              		.loc 1 2530 5 is_stmt 1 view .LVU505
 1958              		.loc 1 2530 20 is_stmt 0 view .LVU506
 1959 0002 054A     		ldr	r2, .L160
 1960 0004 136D     		ldr	r3, [r2, #80]
 1961 0006 1843     		orrs	r0, r0, r3
 1962              	.LVL154:
 1963              		.loc 1 2530 20 view .LVU507
 1964 0008 1065     		str	r0, [r2, #80]
 1965 000a 7047     		bx	lr
 1966              	.LVL155:
 1967              	.L158:
2531:FWLIB/src/stm32f4xx_rcc.c ****   }
2532:FWLIB/src/stm32f4xx_rcc.c ****   else
2533:FWLIB/src/stm32f4xx_rcc.c ****   {
2534:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 1968              		.loc 1 2534 5 is_stmt 1 view .LVU508
 1969              		.loc 1 2534 20 is_stmt 0 view .LVU509
 1970 000c 024A     		ldr	r2, .L160
 1971 000e 136D     		ldr	r3, [r2, #80]
 1972 0010 23EA0000 		bic	r0, r3, r0
 1973              	.LVL156:
 1974              		.loc 1 2534 20 view .LVU510
 1975 0014 1065     		str	r0, [r2, #80]
2535:FWLIB/src/stm32f4xx_rcc.c ****   }
2536:FWLIB/src/stm32f4xx_rcc.c **** }
 1976              		.loc 1 2536 1 view .LVU511
 1977 0016 7047     		bx	lr
 1978              	.L161:
 1979              		.align	2
 1980              	.L160:
 1981 0018 00380240 		.word	1073887232
 1982              		.cfi_endproc
 1983              	.LFE165:
 1985              		.section	.text.RCC_AHB2PeriphClockLPModeCmd,"ax",%progbits
 1986              		.align	1
 1987              		.global	RCC_AHB2PeriphClockLPModeCmd
 1988              		.syntax unified
 1989              		.thumb
 1990              		.thumb_func
 1991              		.fpu fpv4-sp-d16
 1993              	RCC_AHB2PeriphClockLPModeCmd:
 1994              	.LVL157:
 1995              	.LFB166:
2537:FWLIB/src/stm32f4xx_rcc.c **** 
2538:FWLIB/src/stm32f4xx_rcc.c **** /**
2539:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock during Low Power (Sleep) mode.
2540:FWLIB/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
2541:FWLIB/src/stm32f4xx_rcc.c ****   *           power consumption.
2542:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
2543:FWLIB/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
2544:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
2545:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2546:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 80


2547:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
2548:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
2549:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
2550:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock  
2551:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2552:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2553:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2554:FWLIB/src/stm32f4xx_rcc.c ****   */
2555:FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
2556:FWLIB/src/stm32f4xx_rcc.c **** {
 1996              		.loc 1 2556 1 is_stmt 1 view -0
 1997              		.cfi_startproc
 1998              		@ args = 0, pretend = 0, frame = 0
 1999              		@ frame_needed = 0, uses_anonymous_args = 0
 2000              		@ link register save eliminated.
2557:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2558:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
 2001              		.loc 1 2558 3 view .LVU513
2559:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2002              		.loc 1 2559 3 view .LVU514
2560:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2003              		.loc 1 2560 3 view .LVU515
 2004              		.loc 1 2560 6 is_stmt 0 view .LVU516
 2005 0000 21B1     		cbz	r1, .L163
2561:FWLIB/src/stm32f4xx_rcc.c ****   {
2562:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB2LPENR |= RCC_AHB2Periph;
 2006              		.loc 1 2562 5 is_stmt 1 view .LVU517
 2007              		.loc 1 2562 20 is_stmt 0 view .LVU518
 2008 0002 054A     		ldr	r2, .L165
 2009 0004 536D     		ldr	r3, [r2, #84]
 2010 0006 1843     		orrs	r0, r0, r3
 2011              	.LVL158:
 2012              		.loc 1 2562 20 view .LVU519
 2013 0008 5065     		str	r0, [r2, #84]
 2014 000a 7047     		bx	lr
 2015              	.LVL159:
 2016              	.L163:
2563:FWLIB/src/stm32f4xx_rcc.c ****   }
2564:FWLIB/src/stm32f4xx_rcc.c ****   else
2565:FWLIB/src/stm32f4xx_rcc.c ****   {
2566:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 2017              		.loc 1 2566 5 is_stmt 1 view .LVU520
 2018              		.loc 1 2566 20 is_stmt 0 view .LVU521
 2019 000c 024A     		ldr	r2, .L165
 2020 000e 536D     		ldr	r3, [r2, #84]
 2021 0010 23EA0000 		bic	r0, r3, r0
 2022              	.LVL160:
 2023              		.loc 1 2566 20 view .LVU522
 2024 0014 5065     		str	r0, [r2, #84]
2567:FWLIB/src/stm32f4xx_rcc.c ****   }
2568:FWLIB/src/stm32f4xx_rcc.c **** }
 2025              		.loc 1 2568 1 view .LVU523
 2026 0016 7047     		bx	lr
 2027              	.L166:
 2028              		.align	2
 2029              	.L165:
 2030 0018 00380240 		.word	1073887232
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 81


 2031              		.cfi_endproc
 2032              	.LFE166:
 2034              		.section	.text.RCC_AHB3PeriphClockLPModeCmd,"ax",%progbits
 2035              		.align	1
 2036              		.global	RCC_AHB3PeriphClockLPModeCmd
 2037              		.syntax unified
 2038              		.thumb
 2039              		.thumb_func
 2040              		.fpu fpv4-sp-d16
 2042              	RCC_AHB3PeriphClockLPModeCmd:
 2043              	.LVL161:
 2044              	.LFB167:
2569:FWLIB/src/stm32f4xx_rcc.c **** 
2570:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F42
2571:FWLIB/src/stm32f4xx_rcc.c **** /**
2572:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock during Low Power (Sleep) mode.
2573:FWLIB/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
2574:FWLIB/src/stm32f4xx_rcc.c ****   *         power consumption.
2575:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
2576:FWLIB/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
2577:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
2578:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be: 
2579:FWLIB/src/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_FSMC or RCC_AHB3Periph_FMC (STM32F412xG/STM32F413_423xx/STM32F429x/4
2580:FWLIB/src/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_QSPI (STM32F412xG/STM32F413_423xx/STM32F446xx/STM32F469_479xx device
2581:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2582:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2583:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2584:FWLIB/src/stm32f4xx_rcc.c ****   */
2585:FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
2586:FWLIB/src/stm32f4xx_rcc.c **** {
 2045              		.loc 1 2586 1 is_stmt 1 view -0
 2046              		.cfi_startproc
 2047              		@ args = 0, pretend = 0, frame = 0
 2048              		@ frame_needed = 0, uses_anonymous_args = 0
 2049              		@ link register save eliminated.
2587:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2588:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
 2050              		.loc 1 2588 3 view .LVU525
2589:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2051              		.loc 1 2589 3 view .LVU526
2590:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2052              		.loc 1 2590 3 view .LVU527
 2053              		.loc 1 2590 6 is_stmt 0 view .LVU528
 2054 0000 21B1     		cbz	r1, .L168
2591:FWLIB/src/stm32f4xx_rcc.c ****   {
2592:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB3LPENR |= RCC_AHB3Periph;
 2055              		.loc 1 2592 5 is_stmt 1 view .LVU529
 2056              		.loc 1 2592 20 is_stmt 0 view .LVU530
 2057 0002 054A     		ldr	r2, .L170
 2058 0004 936D     		ldr	r3, [r2, #88]
 2059 0006 1843     		orrs	r0, r0, r3
 2060              	.LVL162:
 2061              		.loc 1 2592 20 view .LVU531
 2062 0008 9065     		str	r0, [r2, #88]
 2063 000a 7047     		bx	lr
 2064              	.LVL163:
 2065              	.L168:
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 82


2593:FWLIB/src/stm32f4xx_rcc.c ****   }
2594:FWLIB/src/stm32f4xx_rcc.c ****   else
2595:FWLIB/src/stm32f4xx_rcc.c ****   {
2596:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 2066              		.loc 1 2596 5 is_stmt 1 view .LVU532
 2067              		.loc 1 2596 20 is_stmt 0 view .LVU533
 2068 000c 024A     		ldr	r2, .L170
 2069 000e 936D     		ldr	r3, [r2, #88]
 2070 0010 23EA0000 		bic	r0, r3, r0
 2071              	.LVL164:
 2072              		.loc 1 2596 20 view .LVU534
 2073 0014 9065     		str	r0, [r2, #88]
2597:FWLIB/src/stm32f4xx_rcc.c ****   }
2598:FWLIB/src/stm32f4xx_rcc.c **** }
 2074              		.loc 1 2598 1 view .LVU535
 2075 0016 7047     		bx	lr
 2076              	.L171:
 2077              		.align	2
 2078              	.L170:
 2079 0018 00380240 		.word	1073887232
 2080              		.cfi_endproc
 2081              	.LFE167:
 2083              		.section	.text.RCC_APB1PeriphClockLPModeCmd,"ax",%progbits
 2084              		.align	1
 2085              		.global	RCC_APB1PeriphClockLPModeCmd
 2086              		.syntax unified
 2087              		.thumb
 2088              		.thumb_func
 2089              		.fpu fpv4-sp-d16
 2091              	RCC_APB1PeriphClockLPModeCmd:
 2092              	.LVL165:
 2093              	.LFB168:
2599:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F412xG || STM32F413_423xx || STM32F427_437xx || STM32F429_439xx ||
2600:FWLIB/src/stm32f4xx_rcc.c **** 
2601:FWLIB/src/stm32f4xx_rcc.c **** /**
2602:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB1 peripheral clock during Low Power (Sleep) mode.
2603:FWLIB/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
2604:FWLIB/src/stm32f4xx_rcc.c ****   *         power consumption.
2605:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
2606:FWLIB/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
2607:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
2608:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2609:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
2610:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
2611:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
2612:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
2613:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
2614:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
2615:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
2616:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
2617:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
2618:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_LPTIM1: LPTIM1 clock (STM32F410xx and STM32F413_423xx devices) 
2619:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
2620:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
2621:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
2622:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPDIF:   SPDIF RX clock (STM32F446xx devices) 
2623:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 83


2624:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
2625:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
2626:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
2627:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
2628:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
2629:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
2630:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_FMPI2C1:   FMPI2C1 clock
2631:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
2632:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
2633:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CEC:    CEC clock (STM32F446xx devices)
2634:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
2635:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
2636:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART7:  UART7 clock
2637:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART8:  UART8 clock
2638:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2639:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2640:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2641:FWLIB/src/stm32f4xx_rcc.c ****   */
2642:FWLIB/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
2643:FWLIB/src/stm32f4xx_rcc.c **** {
 2094              		.loc 1 2643 1 is_stmt 1 view -0
 2095              		.cfi_startproc
 2096              		@ args = 0, pretend = 0, frame = 0
 2097              		@ frame_needed = 0, uses_anonymous_args = 0
 2098              		@ link register save eliminated.
2644:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2645:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
 2099              		.loc 1 2645 3 view .LVU537
2646:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2100              		.loc 1 2646 3 view .LVU538
2647:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2101              		.loc 1 2647 3 view .LVU539
 2102              		.loc 1 2647 6 is_stmt 0 view .LVU540
 2103 0000 21B1     		cbz	r1, .L173
2648:FWLIB/src/stm32f4xx_rcc.c ****   {
2649:FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB1LPENR |= RCC_APB1Periph;
 2104              		.loc 1 2649 5 is_stmt 1 view .LVU541
 2105              		.loc 1 2649 20 is_stmt 0 view .LVU542
 2106 0002 054A     		ldr	r2, .L175
 2107 0004 136E     		ldr	r3, [r2, #96]
 2108 0006 1843     		orrs	r0, r0, r3
 2109              	.LVL166:
 2110              		.loc 1 2649 20 view .LVU543
 2111 0008 1066     		str	r0, [r2, #96]
 2112 000a 7047     		bx	lr
 2113              	.LVL167:
 2114              	.L173:
2650:FWLIB/src/stm32f4xx_rcc.c ****   }
2651:FWLIB/src/stm32f4xx_rcc.c ****   else
2652:FWLIB/src/stm32f4xx_rcc.c ****   {
2653:FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB1LPENR &= ~RCC_APB1Periph;
 2115              		.loc 1 2653 5 is_stmt 1 view .LVU544
 2116              		.loc 1 2653 20 is_stmt 0 view .LVU545
 2117 000c 024A     		ldr	r2, .L175
 2118 000e 136E     		ldr	r3, [r2, #96]
 2119 0010 23EA0000 		bic	r0, r3, r0
 2120              	.LVL168:
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 84


 2121              		.loc 1 2653 20 view .LVU546
 2122 0014 1066     		str	r0, [r2, #96]
2654:FWLIB/src/stm32f4xx_rcc.c ****   }
2655:FWLIB/src/stm32f4xx_rcc.c **** }
 2123              		.loc 1 2655 1 view .LVU547
 2124 0016 7047     		bx	lr
 2125              	.L176:
 2126              		.align	2
 2127              	.L175:
 2128 0018 00380240 		.word	1073887232
 2129              		.cfi_endproc
 2130              	.LFE168:
 2132              		.section	.text.RCC_APB2PeriphClockLPModeCmd,"ax",%progbits
 2133              		.align	1
 2134              		.global	RCC_APB2PeriphClockLPModeCmd
 2135              		.syntax unified
 2136              		.thumb
 2137              		.thumb_func
 2138              		.fpu fpv4-sp-d16
 2140              	RCC_APB2PeriphClockLPModeCmd:
 2141              	.LVL169:
 2142              	.LFB169:
2656:FWLIB/src/stm32f4xx_rcc.c **** 
2657:FWLIB/src/stm32f4xx_rcc.c **** /**
2658:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB2 peripheral clock during Low Power (Sleep) mode.
2659:FWLIB/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
2660:FWLIB/src/stm32f4xx_rcc.c ****   *         power consumption.
2661:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
2662:FWLIB/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
2663:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
2664:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2665:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
2666:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
2667:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
2668:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
2669:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
2670:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
2671:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
2672:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
2673:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
2674:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI4:   SPI4 clock
2675:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
2676:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_EXTIT:  EXTIIT clock
2677:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
2678:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
2679:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
2680:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI5:   SPI5 clock
2681:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI6:   SPI6 clock
2682:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI1:   SAI1 clock (STM32F42xxx/43xxx/446xx/469xx/479xx/413_423x
2683:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI2:   SAI2 clock (STM32F446xx devices)
2684:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_LTDC:   LTDC clock (STM32F429xx/439xx devices)
2685:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DSI:    DSI clock (STM32F469_479xx devices)
2686:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DFSDM1: DFSDM Clock (STM32F412xG and STM32F413_423xx Devices)
2687:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DFSDM2: DFSDM2 Clock (STM32F413_423xx Devices)
2688:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_UART9:  UART9 Clock (STM32F413_423xx Devices)
2689:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_UART10: UART10 Clock (STM32F413_423xx Devices)
2690:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 85


2691:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2692:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2693:FWLIB/src/stm32f4xx_rcc.c ****   */
2694:FWLIB/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
2695:FWLIB/src/stm32f4xx_rcc.c **** {
 2143              		.loc 1 2695 1 is_stmt 1 view -0
 2144              		.cfi_startproc
 2145              		@ args = 0, pretend = 0, frame = 0
 2146              		@ frame_needed = 0, uses_anonymous_args = 0
 2147              		@ link register save eliminated.
2696:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2697:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
 2148              		.loc 1 2697 3 view .LVU549
2698:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2149              		.loc 1 2698 3 view .LVU550
2699:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2150              		.loc 1 2699 3 view .LVU551
 2151              		.loc 1 2699 6 is_stmt 0 view .LVU552
 2152 0000 21B1     		cbz	r1, .L178
2700:FWLIB/src/stm32f4xx_rcc.c ****   {
2701:FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB2LPENR |= RCC_APB2Periph;
 2153              		.loc 1 2701 5 is_stmt 1 view .LVU553
 2154              		.loc 1 2701 20 is_stmt 0 view .LVU554
 2155 0002 054A     		ldr	r2, .L180
 2156 0004 536E     		ldr	r3, [r2, #100]
 2157 0006 1843     		orrs	r0, r0, r3
 2158              	.LVL170:
 2159              		.loc 1 2701 20 view .LVU555
 2160 0008 5066     		str	r0, [r2, #100]
 2161 000a 7047     		bx	lr
 2162              	.LVL171:
 2163              	.L178:
2702:FWLIB/src/stm32f4xx_rcc.c ****   }
2703:FWLIB/src/stm32f4xx_rcc.c ****   else
2704:FWLIB/src/stm32f4xx_rcc.c ****   {
2705:FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB2LPENR &= ~RCC_APB2Periph;
 2164              		.loc 1 2705 5 is_stmt 1 view .LVU556
 2165              		.loc 1 2705 20 is_stmt 0 view .LVU557
 2166 000c 024A     		ldr	r2, .L180
 2167 000e 536E     		ldr	r3, [r2, #100]
 2168 0010 23EA0000 		bic	r0, r3, r0
 2169              	.LVL172:
 2170              		.loc 1 2705 20 view .LVU558
 2171 0014 5066     		str	r0, [r2, #100]
2706:FWLIB/src/stm32f4xx_rcc.c ****   }
2707:FWLIB/src/stm32f4xx_rcc.c **** }
 2172              		.loc 1 2707 1 view .LVU559
 2173 0016 7047     		bx	lr
 2174              	.L181:
 2175              		.align	2
 2176              	.L180:
 2177 0018 00380240 		.word	1073887232
 2178              		.cfi_endproc
 2179              	.LFE169:
 2181              		.section	.text.RCC_LSEModeConfig,"ax",%progbits
 2182              		.align	1
 2183              		.global	RCC_LSEModeConfig
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 86


 2184              		.syntax unified
 2185              		.thumb
 2186              		.thumb_func
 2187              		.fpu fpv4-sp-d16
 2189              	RCC_LSEModeConfig:
 2190              	.LVL173:
 2191              	.LFB170:
2708:FWLIB/src/stm32f4xx_rcc.c **** 
2709:FWLIB/src/stm32f4xx_rcc.c **** /**
2710:FWLIB/src/stm32f4xx_rcc.c ****   * @brief Configures the External Low Speed oscillator mode (LSE mode).
2711:FWLIB/src/stm32f4xx_rcc.c ****   * @note This mode is only available for STM32F410xx/STM32F411xx/STM32F446xx/STM32F469_479xx devic
2712:FWLIB/src/stm32f4xx_rcc.c ****   * @param  Mode: specifies the LSE mode.
2713:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2714:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode.
2715:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode.
2716:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2717:FWLIB/src/stm32f4xx_rcc.c ****   */
2718:FWLIB/src/stm32f4xx_rcc.c **** void RCC_LSEModeConfig(uint8_t RCC_Mode)
2719:FWLIB/src/stm32f4xx_rcc.c **** {
 2192              		.loc 1 2719 1 is_stmt 1 view -0
 2193              		.cfi_startproc
 2194              		@ args = 0, pretend = 0, frame = 0
 2195              		@ frame_needed = 0, uses_anonymous_args = 0
 2196              		@ link register save eliminated.
2720:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2721:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_LSE_MODE(RCC_Mode));
 2197              		.loc 1 2721 3 view .LVU561
2722:FWLIB/src/stm32f4xx_rcc.c ****   
2723:FWLIB/src/stm32f4xx_rcc.c ****   if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
 2198              		.loc 1 2723 3 view .LVU562
 2199              		.loc 1 2723 5 is_stmt 0 view .LVU563
 2200 0000 0128     		cmp	r0, #1
 2201 0002 05D0     		beq	.L185
2724:FWLIB/src/stm32f4xx_rcc.c ****   {
2725:FWLIB/src/stm32f4xx_rcc.c ****     SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
2726:FWLIB/src/stm32f4xx_rcc.c ****   }
2727:FWLIB/src/stm32f4xx_rcc.c ****   else
2728:FWLIB/src/stm32f4xx_rcc.c ****   {
2729:FWLIB/src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
 2202              		.loc 1 2729 5 is_stmt 1 view .LVU564
 2203 0004 054A     		ldr	r2, .L186
 2204 0006 136F     		ldr	r3, [r2, #112]
 2205 0008 23F00803 		bic	r3, r3, #8
 2206 000c 1367     		str	r3, [r2, #112]
2730:FWLIB/src/stm32f4xx_rcc.c ****   }
2731:FWLIB/src/stm32f4xx_rcc.c **** }
 2207              		.loc 1 2731 1 is_stmt 0 view .LVU565
 2208 000e 7047     		bx	lr
 2209              	.L185:
2725:FWLIB/src/stm32f4xx_rcc.c ****   }
 2210              		.loc 1 2725 5 is_stmt 1 view .LVU566
 2211 0010 024A     		ldr	r2, .L186
 2212 0012 136F     		ldr	r3, [r2, #112]
 2213 0014 43F00803 		orr	r3, r3, #8
 2214 0018 1367     		str	r3, [r2, #112]
 2215 001a 7047     		bx	lr
 2216              	.L187:
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 87


 2217              		.align	2
 2218              	.L186:
 2219 001c 00380240 		.word	1073887232
 2220              		.cfi_endproc
 2221              	.LFE170:
 2223              		.section	.text.RCC_ITConfig,"ax",%progbits
 2224              		.align	1
 2225              		.global	RCC_ITConfig
 2226              		.syntax unified
 2227              		.thumb
 2228              		.thumb_func
 2229              		.fpu fpv4-sp-d16
 2231              	RCC_ITConfig:
 2232              	.LVL174:
 2233              	.LFB171:
2732:FWLIB/src/stm32f4xx_rcc.c **** 
2733:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F410xx) || defined(STM32F413_423xx)
2734:FWLIB/src/stm32f4xx_rcc.c **** /**
2735:FWLIB/src/stm32f4xx_rcc.c ****   * @brief Configures the LPTIM1 clock Source.
2736:FWLIB/src/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F410xx devices.
2737:FWLIB/src/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the LPTIM1 clock Source.
2738:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2739:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_LPTIM1CLKSOURCE_PCLK: LPTIM1 clock from APB1 selected.
2740:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_LPTIM1CLKSOURCE_HSI:  LPTIM1 clock from HSI selected.
2741:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_LPTIM1CLKSOURCE_LSI:  LPTIM1 clock from LSI selected.
2742:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_LPTIM1CLKSOURCE_LSE:  LPTIM1 clock from LSE selected.
2743:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2744:FWLIB/src/stm32f4xx_rcc.c ****   */
2745:FWLIB/src/stm32f4xx_rcc.c **** void RCC_LPTIM1ClockSourceConfig(uint32_t RCC_ClockSource)
2746:FWLIB/src/stm32f4xx_rcc.c **** {
2747:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2748:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_LPTIM1_CLOCKSOURCE(RCC_ClockSource));
2749:FWLIB/src/stm32f4xx_rcc.c **** 
2750:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear LPTIM1 clock source selection source bits */
2751:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR2 &= ~RCC_DCKCFGR2_LPTIM1SEL;
2752:FWLIB/src/stm32f4xx_rcc.c ****   /* Set new LPTIM1 clock source */
2753:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR2 |= RCC_ClockSource;
2754:FWLIB/src/stm32f4xx_rcc.c **** }
2755:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F410xx || STM32F413_423xx */
2756:FWLIB/src/stm32f4xx_rcc.c **** 
2757:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F469_479xx)
2758:FWLIB/src/stm32f4xx_rcc.c **** /**
2759:FWLIB/src/stm32f4xx_rcc.c ****   * @brief Configures the DSI clock Source.
2760:FWLIB/src/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F469_479xx devices.
2761:FWLIB/src/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the DSI clock Source.
2762:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2763:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_DSICLKSource_PHY: DSI-PHY used as DSI byte lane clock source (usual case).
2764:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_DSICLKSource_PLLR: PLL_R used as DSI byte lane clock source, used in case D
2765:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2766:FWLIB/src/stm32f4xx_rcc.c ****   */
2767:FWLIB/src/stm32f4xx_rcc.c **** void RCC_DSIClockSourceConfig(uint8_t RCC_ClockSource)
2768:FWLIB/src/stm32f4xx_rcc.c **** {
2769:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2770:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_DSI_CLOCKSOURCE(RCC_ClockSource));
2771:FWLIB/src/stm32f4xx_rcc.c ****   
2772:FWLIB/src/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_DSICLKSource_PLLR)
2773:FWLIB/src/stm32f4xx_rcc.c ****   {
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 88


2774:FWLIB/src/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR, RCC_DCKCFGR_DSISEL);
2775:FWLIB/src/stm32f4xx_rcc.c ****   }
2776:FWLIB/src/stm32f4xx_rcc.c ****   else
2777:FWLIB/src/stm32f4xx_rcc.c ****   {
2778:FWLIB/src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR, RCC_DCKCFGR_DSISEL);
2779:FWLIB/src/stm32f4xx_rcc.c ****   }
2780:FWLIB/src/stm32f4xx_rcc.c **** }
2781:FWLIB/src/stm32f4xx_rcc.c **** #endif /*  STM32F469_479xx */
2782:FWLIB/src/stm32f4xx_rcc.c **** 
2783:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_4
2784:FWLIB/src/stm32f4xx_rcc.c **** /**
2785:FWLIB/src/stm32f4xx_rcc.c ****   * @brief Configures the 48MHz clock Source.
2786:FWLIB/src/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F446xx/STM32F469_479xx devices.
2787:FWLIB/src/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the 48MHz clock Source.
2788:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2789:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_48MHZCLKSource_PLL: 48MHz from PLL selected.
2790:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_48MHZCLKSource_PLLSAI: 48MHz from PLLSAI selected.
2791:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_CK48CLKSOURCE_PLLI2SQ : 48MHz from PLLI2SQ
2792:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2793:FWLIB/src/stm32f4xx_rcc.c ****   */
2794:FWLIB/src/stm32f4xx_rcc.c **** void RCC_48MHzClockSourceConfig(uint8_t RCC_ClockSource)
2795:FWLIB/src/stm32f4xx_rcc.c **** {
2796:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2797:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_48MHZ_CLOCKSOURCE(RCC_ClockSource));
2798:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F469_479xx) 
2799:FWLIB/src/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_48MHZCLKSource_PLLSAI)
2800:FWLIB/src/stm32f4xx_rcc.c ****   {
2801:FWLIB/src/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR, RCC_DCKCFGR_CK48MSEL);
2802:FWLIB/src/stm32f4xx_rcc.c ****   }
2803:FWLIB/src/stm32f4xx_rcc.c ****   else
2804:FWLIB/src/stm32f4xx_rcc.c ****   {
2805:FWLIB/src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR, RCC_DCKCFGR_CK48MSEL);
2806:FWLIB/src/stm32f4xx_rcc.c ****   }
2807:FWLIB/src/stm32f4xx_rcc.c **** #elif  defined(STM32F446xx)
2808:FWLIB/src/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_48MHZCLKSource_PLLSAI)
2809:FWLIB/src/stm32f4xx_rcc.c ****   {
2810:FWLIB/src/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_CK48MSEL);
2811:FWLIB/src/stm32f4xx_rcc.c ****   }
2812:FWLIB/src/stm32f4xx_rcc.c ****   else
2813:FWLIB/src/stm32f4xx_rcc.c ****   {
2814:FWLIB/src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_CK48MSEL);
2815:FWLIB/src/stm32f4xx_rcc.c ****   }
2816:FWLIB/src/stm32f4xx_rcc.c **** #elif defined(STM32F412xG) || defined(STM32F413_423xx)
2817:FWLIB/src/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_CK48CLKSOURCE_PLLI2SQ)
2818:FWLIB/src/stm32f4xx_rcc.c ****   {
2819:FWLIB/src/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_CK48MSEL);
2820:FWLIB/src/stm32f4xx_rcc.c ****   }
2821:FWLIB/src/stm32f4xx_rcc.c ****   else
2822:FWLIB/src/stm32f4xx_rcc.c ****   {
2823:FWLIB/src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_CK48MSEL);
2824:FWLIB/src/stm32f4xx_rcc.c ****   }
2825:FWLIB/src/stm32f4xx_rcc.c **** #else
2826:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F469_479xx */  
2827:FWLIB/src/stm32f4xx_rcc.c **** }
2828:FWLIB/src/stm32f4xx_rcc.c **** 
2829:FWLIB/src/stm32f4xx_rcc.c **** /**
2830:FWLIB/src/stm32f4xx_rcc.c ****   * @brief Configures the SDIO clock Source.
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 89


2831:FWLIB/src/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F469_479xx/STM32F446xx devices.
2832:FWLIB/src/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the SDIO clock Source.
2833:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2834:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SDIOCLKSource_48MHZ: 48MHz clock selected.
2835:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SDIOCLKSource_SYSCLK: system clock selected.
2836:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2837:FWLIB/src/stm32f4xx_rcc.c ****   */
2838:FWLIB/src/stm32f4xx_rcc.c **** void RCC_SDIOClockSourceConfig(uint8_t RCC_ClockSource)
2839:FWLIB/src/stm32f4xx_rcc.c **** {
2840:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2841:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SDIO_CLOCKSOURCE(RCC_ClockSource));
2842:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F469_479xx)   
2843:FWLIB/src/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_SDIOCLKSource_SYSCLK)
2844:FWLIB/src/stm32f4xx_rcc.c ****   {
2845:FWLIB/src/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR, RCC_DCKCFGR_SDIOSEL);
2846:FWLIB/src/stm32f4xx_rcc.c ****   }
2847:FWLIB/src/stm32f4xx_rcc.c ****   else
2848:FWLIB/src/stm32f4xx_rcc.c ****   {
2849:FWLIB/src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR, RCC_DCKCFGR_SDIOSEL);
2850:FWLIB/src/stm32f4xx_rcc.c ****   }
2851:FWLIB/src/stm32f4xx_rcc.c **** #elif defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
2852:FWLIB/src/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_SDIOCLKSource_SYSCLK)
2853:FWLIB/src/stm32f4xx_rcc.c ****   {
2854:FWLIB/src/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_SDIOSEL);
2855:FWLIB/src/stm32f4xx_rcc.c ****   }
2856:FWLIB/src/stm32f4xx_rcc.c ****   else
2857:FWLIB/src/stm32f4xx_rcc.c ****   {
2858:FWLIB/src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_SDIOSEL);
2859:FWLIB/src/stm32f4xx_rcc.c ****   }
2860:FWLIB/src/stm32f4xx_rcc.c **** #else
2861:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F469_479xx */ 
2862:FWLIB/src/stm32f4xx_rcc.c **** }
2863:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx || STM32F469_479xx */
2864:FWLIB/src/stm32f4xx_rcc.c **** 
2865:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F446xx)
2866:FWLIB/src/stm32f4xx_rcc.c **** /**
2867:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 clock gating for the specified IPs.
2868:FWLIB/src/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F446xx devices.
2869:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB1ClockGating: specifies the AHB1 clock gating.
2870:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2871:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_APB1Bridge: AHB1 to APB1 clock
2872:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_APB2Bridge: AHB1 to APB2 clock 
2873:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_CM4DBG: Cortex M4 ETM clock
2874:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_SPARE: Spare clock
2875:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_SRAM: SRAM controller clock
2876:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_FLITF: Flash interface clock
2877:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_RCC: RCC clock
2878:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2879:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2880:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2881:FWLIB/src/stm32f4xx_rcc.c ****   */
2882:FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB1ClockGatingCmd(uint32_t RCC_AHB1ClockGating, FunctionalState NewState)
2883:FWLIB/src/stm32f4xx_rcc.c **** {
2884:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2885:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_CLOCKGATING(RCC_AHB1ClockGating));
2886:FWLIB/src/stm32f4xx_rcc.c **** 
2887:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 90


2888:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
2889:FWLIB/src/stm32f4xx_rcc.c ****   {
2890:FWLIB/src/stm32f4xx_rcc.c ****     RCC->CKGATENR &= ~RCC_AHB1ClockGating;
2891:FWLIB/src/stm32f4xx_rcc.c ****   }
2892:FWLIB/src/stm32f4xx_rcc.c ****   else
2893:FWLIB/src/stm32f4xx_rcc.c ****   {
2894:FWLIB/src/stm32f4xx_rcc.c ****     RCC->CKGATENR |= RCC_AHB1ClockGating;
2895:FWLIB/src/stm32f4xx_rcc.c ****   }
2896:FWLIB/src/stm32f4xx_rcc.c **** }
2897:FWLIB/src/stm32f4xx_rcc.c **** 
2898:FWLIB/src/stm32f4xx_rcc.c **** /**
2899:FWLIB/src/stm32f4xx_rcc.c ****   * @brief Configures the SPDIFRX clock Source.
2900:FWLIB/src/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F446xx devices.
2901:FWLIB/src/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the SPDIFRX clock Source.
2902:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2903:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SPDIFRXCLKSource_PLLR: SPDIFRX clock from PLL_R selected.
2904:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SPDIFRXCLKSource_PLLI2SP: SPDIFRX clock from PLLI2S_P selected.
2905:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2906:FWLIB/src/stm32f4xx_rcc.c ****   */
2907:FWLIB/src/stm32f4xx_rcc.c **** void RCC_SPDIFRXClockSourceConfig(uint8_t RCC_ClockSource)
2908:FWLIB/src/stm32f4xx_rcc.c **** {
2909:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2910:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SPDIFRX_CLOCKSOURCE(RCC_ClockSource));
2911:FWLIB/src/stm32f4xx_rcc.c ****   
2912:FWLIB/src/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_SPDIFRXCLKSource_PLLI2SP)
2913:FWLIB/src/stm32f4xx_rcc.c ****   {
2914:FWLIB/src/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_SPDIFRXSEL);
2915:FWLIB/src/stm32f4xx_rcc.c ****   }
2916:FWLIB/src/stm32f4xx_rcc.c ****   else
2917:FWLIB/src/stm32f4xx_rcc.c ****   {
2918:FWLIB/src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_SPDIFRXSEL);
2919:FWLIB/src/stm32f4xx_rcc.c ****   }
2920:FWLIB/src/stm32f4xx_rcc.c **** }
2921:FWLIB/src/stm32f4xx_rcc.c **** 
2922:FWLIB/src/stm32f4xx_rcc.c **** /**
2923:FWLIB/src/stm32f4xx_rcc.c ****   * @brief Configures the CEC clock Source.
2924:FWLIB/src/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F446xx devices.
2925:FWLIB/src/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the CEC clock Source.
2926:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2927:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_CECCLKSource_HSIDiv488: CEC clock from HSI/488 selected.
2928:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_CECCLKSource_LSE: CEC clock from LSE selected.
2929:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2930:FWLIB/src/stm32f4xx_rcc.c ****   */
2931:FWLIB/src/stm32f4xx_rcc.c **** void RCC_CECClockSourceConfig(uint8_t RCC_ClockSource)
2932:FWLIB/src/stm32f4xx_rcc.c **** {
2933:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2934:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CEC_CLOCKSOURCE(RCC_ClockSource));
2935:FWLIB/src/stm32f4xx_rcc.c ****   
2936:FWLIB/src/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_CECCLKSource_LSE)
2937:FWLIB/src/stm32f4xx_rcc.c ****   {
2938:FWLIB/src/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_CECSEL);
2939:FWLIB/src/stm32f4xx_rcc.c ****   }
2940:FWLIB/src/stm32f4xx_rcc.c ****   else
2941:FWLIB/src/stm32f4xx_rcc.c ****   {
2942:FWLIB/src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_CECSEL);
2943:FWLIB/src/stm32f4xx_rcc.c ****   }
2944:FWLIB/src/stm32f4xx_rcc.c **** }
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 91


2945:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F446xx */
2946:FWLIB/src/stm32f4xx_rcc.c **** 
2947:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F410xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx
2948:FWLIB/src/stm32f4xx_rcc.c **** /**
2949:FWLIB/src/stm32f4xx_rcc.c ****   * @brief Configures the FMPI2C1 clock Source.
2950:FWLIB/src/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F446xx devices.
2951:FWLIB/src/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the FMPI2C1 clock Source.
2952:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2953:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FMPI2C1CLKSource_APB1: FMPI2C1 clock from APB1 selected.
2954:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FMPI2C1CLKSource_SYSCLK: FMPI2C1 clock from Sytem clock selected.
2955:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FMPI2C1CLKSource_HSI: FMPI2C1 clock from HSI selected.
2956:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2957:FWLIB/src/stm32f4xx_rcc.c ****   */
2958:FWLIB/src/stm32f4xx_rcc.c **** void RCC_FMPI2C1ClockSourceConfig(uint32_t RCC_ClockSource)
2959:FWLIB/src/stm32f4xx_rcc.c **** {
2960:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2961:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_FMPI2C1_CLOCKSOURCE(RCC_ClockSource));
2962:FWLIB/src/stm32f4xx_rcc.c **** 
2963:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear FMPI2C1 clock source selection source bits */
2964:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR2 &= ~RCC_DCKCFGR2_FMPI2C1SEL;
2965:FWLIB/src/stm32f4xx_rcc.c ****   /* Set new FMPI2C1 clock source */
2966:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR2 |= RCC_ClockSource;
2967:FWLIB/src/stm32f4xx_rcc.c **** }
2968:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F410xx || STM32F412xG || STM32F413_423xx || STM32F446xx */
2969:FWLIB/src/stm32f4xx_rcc.c **** /**
2970:FWLIB/src/stm32f4xx_rcc.c ****   * @}
2971:FWLIB/src/stm32f4xx_rcc.c ****   */
2972:FWLIB/src/stm32f4xx_rcc.c **** 
2973:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F410xx)
2974:FWLIB/src/stm32f4xx_rcc.c **** /**
2975:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the MCO1.
2976:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the MCO1.
2977:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2978:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2979:FWLIB/src/stm32f4xx_rcc.c ****   */
2980:FWLIB/src/stm32f4xx_rcc.c **** void RCC_MCO1Cmd(FunctionalState NewState)
2981:FWLIB/src/stm32f4xx_rcc.c **** {
2982:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2983:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2984:FWLIB/src/stm32f4xx_rcc.c **** 
2985:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) RCC_CFGR_MCO1EN_BB = (uint32_t)NewState;
2986:FWLIB/src/stm32f4xx_rcc.c **** }
2987:FWLIB/src/stm32f4xx_rcc.c **** 
2988:FWLIB/src/stm32f4xx_rcc.c **** /**
2989:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the MCO2.
2990:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the MCO2.
2991:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2992:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2993:FWLIB/src/stm32f4xx_rcc.c ****   */
2994:FWLIB/src/stm32f4xx_rcc.c **** void RCC_MCO2Cmd(FunctionalState NewState)
2995:FWLIB/src/stm32f4xx_rcc.c **** {
2996:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2997:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2998:FWLIB/src/stm32f4xx_rcc.c **** 
2999:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) RCC_CFGR_MCO2EN_BB = (uint32_t)NewState;
3000:FWLIB/src/stm32f4xx_rcc.c **** }
3001:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F410xx */
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 92


3002:FWLIB/src/stm32f4xx_rcc.c **** 
3003:FWLIB/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group4 Interrupts and flags management functions
3004:FWLIB/src/stm32f4xx_rcc.c ****  *  @brief   Interrupts and flags management functions 
3005:FWLIB/src/stm32f4xx_rcc.c ****  *
3006:FWLIB/src/stm32f4xx_rcc.c **** @verbatim   
3007:FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================
3008:FWLIB/src/stm32f4xx_rcc.c ****                 ##### Interrupts and flags management functions #####
3009:FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================  
3010:FWLIB/src/stm32f4xx_rcc.c **** 
3011:FWLIB/src/stm32f4xx_rcc.c **** @endverbatim
3012:FWLIB/src/stm32f4xx_rcc.c ****   * @{
3013:FWLIB/src/stm32f4xx_rcc.c ****   */
3014:FWLIB/src/stm32f4xx_rcc.c **** 
3015:FWLIB/src/stm32f4xx_rcc.c **** /**
3016:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
3017:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
3018:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
3019:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
3020:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
3021:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
3022:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
3023:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
3024:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt
3025:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469x
3026:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
3027:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
3028:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
3029:FWLIB/src/stm32f4xx_rcc.c ****   */
3030:FWLIB/src/stm32f4xx_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
3031:FWLIB/src/stm32f4xx_rcc.c **** {
 2234              		.loc 1 3031 1 view -0
 2235              		.cfi_startproc
 2236              		@ args = 0, pretend = 0, frame = 0
 2237              		@ frame_needed = 0, uses_anonymous_args = 0
 2238              		@ link register save eliminated.
3032:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
3033:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
 2239              		.loc 1 3033 3 view .LVU568
3034:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2240              		.loc 1 3034 3 view .LVU569
3035:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2241              		.loc 1 3035 3 view .LVU570
 2242              		.loc 1 3035 6 is_stmt 0 view .LVU571
 2243 0000 21B1     		cbz	r1, .L189
3036:FWLIB/src/stm32f4xx_rcc.c ****   {
3037:FWLIB/src/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
3038:FWLIB/src/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 2244              		.loc 1 3038 5 is_stmt 1 view .LVU572
 2245              		.loc 1 3038 41 is_stmt 0 view .LVU573
 2246 0002 054A     		ldr	r2, .L191
 2247 0004 537B     		ldrb	r3, [r2, #13]	@ zero_extendqisi2
 2248 0006 1843     		orrs	r0, r0, r3
 2249              	.LVL175:
 2250              		.loc 1 3038 41 view .LVU574
 2251 0008 5073     		strb	r0, [r2, #13]
 2252 000a 7047     		bx	lr
 2253              	.LVL176:
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 93


 2254              	.L189:
3039:FWLIB/src/stm32f4xx_rcc.c ****   }
3040:FWLIB/src/stm32f4xx_rcc.c ****   else
3041:FWLIB/src/stm32f4xx_rcc.c ****   {
3042:FWLIB/src/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
3043:FWLIB/src/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 2255              		.loc 1 3043 5 is_stmt 1 view .LVU575
 2256              		.loc 1 3043 41 is_stmt 0 view .LVU576
 2257 000c 024A     		ldr	r2, .L191
 2258 000e 537B     		ldrb	r3, [r2, #13]	@ zero_extendqisi2
 2259 0010 23EA0000 		bic	r0, r3, r0
 2260              	.LVL177:
 2261              		.loc 1 3043 41 view .LVU577
 2262 0014 5073     		strb	r0, [r2, #13]
3044:FWLIB/src/stm32f4xx_rcc.c ****   }
3045:FWLIB/src/stm32f4xx_rcc.c **** }
 2263              		.loc 1 3045 1 view .LVU578
 2264 0016 7047     		bx	lr
 2265              	.L192:
 2266              		.align	2
 2267              	.L191:
 2268 0018 00380240 		.word	1073887232
 2269              		.cfi_endproc
 2270              	.LFE171:
 2272              		.section	.text.RCC_GetFlagStatus,"ax",%progbits
 2273              		.align	1
 2274              		.global	RCC_GetFlagStatus
 2275              		.syntax unified
 2276              		.thumb
 2277              		.thumb_func
 2278              		.fpu fpv4-sp-d16
 2280              	RCC_GetFlagStatus:
 2281              	.LVL178:
 2282              	.LFB172:
3046:FWLIB/src/stm32f4xx_rcc.c **** 
3047:FWLIB/src/stm32f4xx_rcc.c **** /**
3048:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
3049:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
3050:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
3051:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
3052:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
3053:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLRDY: main PLL clock ready
3054:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLI2SRDY: PLLI2S clock ready
3055:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLSAIRDY: PLLSAI clock ready (only for STM32F42xxx/43xxx/446xx/469xx/
3056:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
3057:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
3058:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_BORRST: POR/PDR or BOR reset
3059:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PINRST: Pin reset
3060:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PORRST: POR/PDR reset
3061:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_SFTRST: Software reset
3062:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
3063:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
3064:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LPWRRST: Low Power reset
3065:FWLIB/src/stm32f4xx_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
3066:FWLIB/src/stm32f4xx_rcc.c ****   */
3067:FWLIB/src/stm32f4xx_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
3068:FWLIB/src/stm32f4xx_rcc.c **** {
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 94


 2283              		.loc 1 3068 1 is_stmt 1 view -0
 2284              		.cfi_startproc
 2285              		@ args = 0, pretend = 0, frame = 0
 2286              		@ frame_needed = 0, uses_anonymous_args = 0
 2287              		@ link register save eliminated.
3069:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0;
 2288              		.loc 1 3069 3 view .LVU580
3070:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t statusreg = 0;
 2289              		.loc 1 3070 3 view .LVU581
3071:FWLIB/src/stm32f4xx_rcc.c ****   FlagStatus bitstatus = RESET;
 2290              		.loc 1 3071 3 view .LVU582
3072:FWLIB/src/stm32f4xx_rcc.c **** 
3073:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
3074:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
 2291              		.loc 1 3074 3 view .LVU583
3075:FWLIB/src/stm32f4xx_rcc.c **** 
3076:FWLIB/src/stm32f4xx_rcc.c ****   /* Get the RCC register index */
3077:FWLIB/src/stm32f4xx_rcc.c ****   tmp = RCC_FLAG >> 5;
 2292              		.loc 1 3077 3 view .LVU584
 2293              		.loc 1 3077 18 is_stmt 0 view .LVU585
 2294 0000 4309     		lsrs	r3, r0, #5
 2295              	.LVL179:
3078:FWLIB/src/stm32f4xx_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
 2296              		.loc 1 3078 3 is_stmt 1 view .LVU586
 2297              		.loc 1 3078 6 is_stmt 0 view .LVU587
 2298 0002 012B     		cmp	r3, #1
 2299 0004 0CD0     		beq	.L199
3079:FWLIB/src/stm32f4xx_rcc.c ****   {
3080:FWLIB/src/stm32f4xx_rcc.c ****     statusreg = RCC->CR;
3081:FWLIB/src/stm32f4xx_rcc.c ****   }
3082:FWLIB/src/stm32f4xx_rcc.c ****   else if (tmp == 2)          /* The flag to check is in BDCR register */
 2300              		.loc 1 3082 8 is_stmt 1 view .LVU588
 2301              		.loc 1 3082 11 is_stmt 0 view .LVU589
 2302 0006 022B     		cmp	r3, #2
 2303 0008 0DD0     		beq	.L200
3083:FWLIB/src/stm32f4xx_rcc.c ****   {
3084:FWLIB/src/stm32f4xx_rcc.c ****     statusreg = RCC->BDCR;
3085:FWLIB/src/stm32f4xx_rcc.c ****   }
3086:FWLIB/src/stm32f4xx_rcc.c ****   else                       /* The flag to check is in CSR register */
3087:FWLIB/src/stm32f4xx_rcc.c ****   {
3088:FWLIB/src/stm32f4xx_rcc.c ****     statusreg = RCC->CSR;
 2304              		.loc 1 3088 5 is_stmt 1 view .LVU590
 2305              		.loc 1 3088 15 is_stmt 0 view .LVU591
 2306 000a 094B     		ldr	r3, .L201
 2307              	.LVL180:
 2308              		.loc 1 3088 15 view .LVU592
 2309 000c 5B6F     		ldr	r3, [r3, #116]
 2310              	.LVL181:
 2311              	.L195:
3089:FWLIB/src/stm32f4xx_rcc.c ****   }
3090:FWLIB/src/stm32f4xx_rcc.c **** 
3091:FWLIB/src/stm32f4xx_rcc.c ****   /* Get the flag position */
3092:FWLIB/src/stm32f4xx_rcc.c ****   tmp = RCC_FLAG & FLAG_MASK;
 2312              		.loc 1 3092 3 is_stmt 1 view .LVU593
 2313              		.loc 1 3092 7 is_stmt 0 view .LVU594
 2314 000e 00F01F00 		and	r0, r0, #31
 2315              	.LVL182:
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 95


3093:FWLIB/src/stm32f4xx_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 2316              		.loc 1 3093 3 is_stmt 1 view .LVU595
 2317              		.loc 1 3093 42 is_stmt 0 view .LVU596
 2318 0012 23FA00F0 		lsr	r0, r3, r0
 2319              	.LVL183:
 2320              		.loc 1 3093 6 view .LVU597
 2321 0016 10F0010F 		tst	r0, #1
 2322 001a 07D0     		beq	.L198
3094:FWLIB/src/stm32f4xx_rcc.c ****   {
3095:FWLIB/src/stm32f4xx_rcc.c ****     bitstatus = SET;
 2323              		.loc 1 3095 15 view .LVU598
 2324 001c 0120     		movs	r0, #1
 2325 001e 7047     		bx	lr
 2326              	.LVL184:
 2327              	.L199:
3080:FWLIB/src/stm32f4xx_rcc.c ****   }
 2328              		.loc 1 3080 5 is_stmt 1 view .LVU599
3080:FWLIB/src/stm32f4xx_rcc.c ****   }
 2329              		.loc 1 3080 15 is_stmt 0 view .LVU600
 2330 0020 034B     		ldr	r3, .L201
 2331              	.LVL185:
3080:FWLIB/src/stm32f4xx_rcc.c ****   }
 2332              		.loc 1 3080 15 view .LVU601
 2333 0022 1B68     		ldr	r3, [r3]
 2334              	.LVL186:
3080:FWLIB/src/stm32f4xx_rcc.c ****   }
 2335              		.loc 1 3080 15 view .LVU602
 2336 0024 F3E7     		b	.L195
 2337              	.LVL187:
 2338              	.L200:
3084:FWLIB/src/stm32f4xx_rcc.c ****   }
 2339              		.loc 1 3084 5 is_stmt 1 view .LVU603
3084:FWLIB/src/stm32f4xx_rcc.c ****   }
 2340              		.loc 1 3084 15 is_stmt 0 view .LVU604
 2341 0026 024B     		ldr	r3, .L201
 2342              	.LVL188:
3084:FWLIB/src/stm32f4xx_rcc.c ****   }
 2343              		.loc 1 3084 15 view .LVU605
 2344 0028 1B6F     		ldr	r3, [r3, #112]
 2345              	.LVL189:
3084:FWLIB/src/stm32f4xx_rcc.c ****   }
 2346              		.loc 1 3084 15 view .LVU606
 2347 002a F0E7     		b	.L195
 2348              	.LVL190:
 2349              	.L198:
3096:FWLIB/src/stm32f4xx_rcc.c ****   }
3097:FWLIB/src/stm32f4xx_rcc.c ****   else
3098:FWLIB/src/stm32f4xx_rcc.c ****   {
3099:FWLIB/src/stm32f4xx_rcc.c ****     bitstatus = RESET;
 2350              		.loc 1 3099 15 view .LVU607
 2351 002c 0020     		movs	r0, #0
 2352              	.LVL191:
3100:FWLIB/src/stm32f4xx_rcc.c ****   }
3101:FWLIB/src/stm32f4xx_rcc.c ****   /* Return the flag status */
3102:FWLIB/src/stm32f4xx_rcc.c ****   return bitstatus;
 2353              		.loc 1 3102 3 is_stmt 1 view .LVU608
3103:FWLIB/src/stm32f4xx_rcc.c **** }
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 96


 2354              		.loc 1 3103 1 is_stmt 0 view .LVU609
 2355 002e 7047     		bx	lr
 2356              	.L202:
 2357              		.align	2
 2358              	.L201:
 2359 0030 00380240 		.word	1073887232
 2360              		.cfi_endproc
 2361              	.LFE172:
 2363              		.section	.text.RCC_WaitForHSEStartUp,"ax",%progbits
 2364              		.align	1
 2365              		.global	RCC_WaitForHSEStartUp
 2366              		.syntax unified
 2367              		.thumb
 2368              		.thumb_func
 2369              		.fpu fpv4-sp-d16
 2371              	RCC_WaitForHSEStartUp:
 2372              	.LFB125:
 309:FWLIB/src/stm32f4xx_rcc.c ****   __IO uint32_t startupcounter = 0;
 2373              		.loc 1 309 1 is_stmt 1 view -0
 2374              		.cfi_startproc
 2375              		@ args = 0, pretend = 0, frame = 8
 2376              		@ frame_needed = 0, uses_anonymous_args = 0
 2377 0000 00B5     		push	{lr}
 2378              	.LCFI3:
 2379              		.cfi_def_cfa_offset 4
 2380              		.cfi_offset 14, -4
 2381 0002 83B0     		sub	sp, sp, #12
 2382              	.LCFI4:
 2383              		.cfi_def_cfa_offset 16
 310:FWLIB/src/stm32f4xx_rcc.c ****   ErrorStatus status = ERROR;
 2384              		.loc 1 310 3 view .LVU611
 310:FWLIB/src/stm32f4xx_rcc.c ****   ErrorStatus status = ERROR;
 2385              		.loc 1 310 17 is_stmt 0 view .LVU612
 2386 0004 0023     		movs	r3, #0
 2387 0006 0193     		str	r3, [sp, #4]
 311:FWLIB/src/stm32f4xx_rcc.c ****   FlagStatus hsestatus = RESET;
 2388              		.loc 1 311 3 is_stmt 1 view .LVU613
 2389              	.LVL192:
 312:FWLIB/src/stm32f4xx_rcc.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 2390              		.loc 1 312 3 view .LVU614
 2391              	.L205:
 314:FWLIB/src/stm32f4xx_rcc.c ****   {
 2392              		.loc 1 314 3 discriminator 2 view .LVU615
 316:FWLIB/src/stm32f4xx_rcc.c ****     startupcounter++;
 2393              		.loc 1 316 5 discriminator 2 view .LVU616
 316:FWLIB/src/stm32f4xx_rcc.c ****     startupcounter++;
 2394              		.loc 1 316 17 is_stmt 0 discriminator 2 view .LVU617
 2395 0008 3120     		movs	r0, #49
 2396 000a FFF7FEFF 		bl	RCC_GetFlagStatus
 2397              	.LVL193:
 317:FWLIB/src/stm32f4xx_rcc.c ****   } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 2398              		.loc 1 317 5 is_stmt 1 discriminator 2 view .LVU618
 317:FWLIB/src/stm32f4xx_rcc.c ****   } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 2399              		.loc 1 317 19 is_stmt 0 discriminator 2 view .LVU619
 2400 000e 019B     		ldr	r3, [sp, #4]
 2401 0010 0133     		adds	r3, r3, #1
 2402 0012 0193     		str	r3, [sp, #4]
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 97


 318:FWLIB/src/stm32f4xx_rcc.c **** 
 2403              		.loc 1 318 10 is_stmt 1 discriminator 2 view .LVU620
 318:FWLIB/src/stm32f4xx_rcc.c **** 
 2404              		.loc 1 318 27 is_stmt 0 discriminator 2 view .LVU621
 2405 0014 019B     		ldr	r3, [sp, #4]
 318:FWLIB/src/stm32f4xx_rcc.c **** 
 2406              		.loc 1 318 3 discriminator 2 view .LVU622
 2407 0016 B3F5A04F 		cmp	r3, #20480
 2408 001a 01D0     		beq	.L204
 318:FWLIB/src/stm32f4xx_rcc.c **** 
 2409              		.loc 1 318 51 discriminator 1 view .LVU623
 2410 001c 0028     		cmp	r0, #0
 2411 001e F3D0     		beq	.L205
 2412              	.L204:
 320:FWLIB/src/stm32f4xx_rcc.c ****   {
 2413              		.loc 1 320 3 is_stmt 1 view .LVU624
 320:FWLIB/src/stm32f4xx_rcc.c ****   {
 2414              		.loc 1 320 7 is_stmt 0 view .LVU625
 2415 0020 3120     		movs	r0, #49
 2416              	.LVL194:
 320:FWLIB/src/stm32f4xx_rcc.c ****   {
 2417              		.loc 1 320 7 view .LVU626
 2418 0022 FFF7FEFF 		bl	RCC_GetFlagStatus
 2419              	.LVL195:
 320:FWLIB/src/stm32f4xx_rcc.c ****   {
 2420              		.loc 1 320 6 view .LVU627
 2421 0026 00B1     		cbz	r0, .L206
 322:FWLIB/src/stm32f4xx_rcc.c ****   }
 2422              		.loc 1 322 12 view .LVU628
 2423 0028 0120     		movs	r0, #1
 2424              	.L206:
 2425              	.LVL196:
 328:FWLIB/src/stm32f4xx_rcc.c **** }
 2426              		.loc 1 328 3 is_stmt 1 view .LVU629
 329:FWLIB/src/stm32f4xx_rcc.c **** 
 2427              		.loc 1 329 1 is_stmt 0 view .LVU630
 2428 002a 03B0     		add	sp, sp, #12
 2429              	.LCFI5:
 2430              		.cfi_def_cfa_offset 4
 2431              		@ sp needed
 2432 002c 5DF804FB 		ldr	pc, [sp], #4
 2433              		.cfi_endproc
 2434              	.LFE125:
 2436              		.section	.text.RCC_ClearFlag,"ax",%progbits
 2437              		.align	1
 2438              		.global	RCC_ClearFlag
 2439              		.syntax unified
 2440              		.thumb
 2441              		.thumb_func
 2442              		.fpu fpv4-sp-d16
 2444              	RCC_ClearFlag:
 2445              	.LFB173:
3104:FWLIB/src/stm32f4xx_rcc.c **** 
3105:FWLIB/src/stm32f4xx_rcc.c **** /**
3106:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Clears the RCC reset flags.
3107:FWLIB/src/stm32f4xx_rcc.c ****   *         The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST,  RCC_FLAG_SFTRST,
3108:FWLIB/src/stm32f4xx_rcc.c ****   *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 98


3109:FWLIB/src/stm32f4xx_rcc.c ****   * @param  None
3110:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
3111:FWLIB/src/stm32f4xx_rcc.c ****   */
3112:FWLIB/src/stm32f4xx_rcc.c **** void RCC_ClearFlag(void)
3113:FWLIB/src/stm32f4xx_rcc.c **** {
 2446              		.loc 1 3113 1 is_stmt 1 view -0
 2447              		.cfi_startproc
 2448              		@ args = 0, pretend = 0, frame = 0
 2449              		@ frame_needed = 0, uses_anonymous_args = 0
 2450              		@ link register save eliminated.
3114:FWLIB/src/stm32f4xx_rcc.c ****   /* Set RMVF bit to clear the reset flags */
3115:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CSR |= RCC_CSR_RMVF;
 2451              		.loc 1 3115 3 view .LVU632
 2452              		.loc 1 3115 12 is_stmt 0 view .LVU633
 2453 0000 024A     		ldr	r2, .L209
 2454 0002 536F     		ldr	r3, [r2, #116]
 2455 0004 43F08073 		orr	r3, r3, #16777216
 2456 0008 5367     		str	r3, [r2, #116]
3116:FWLIB/src/stm32f4xx_rcc.c **** }
 2457              		.loc 1 3116 1 view .LVU634
 2458 000a 7047     		bx	lr
 2459              	.L210:
 2460              		.align	2
 2461              	.L209:
 2462 000c 00380240 		.word	1073887232
 2463              		.cfi_endproc
 2464              	.LFE173:
 2466              		.section	.text.RCC_GetITStatus,"ax",%progbits
 2467              		.align	1
 2468              		.global	RCC_GetITStatus
 2469              		.syntax unified
 2470              		.thumb
 2471              		.thumb_func
 2472              		.fpu fpv4-sp-d16
 2474              	RCC_GetITStatus:
 2475              	.LVL197:
 2476              	.LFB174:
3117:FWLIB/src/stm32f4xx_rcc.c **** 
3118:FWLIB/src/stm32f4xx_rcc.c **** /**
3119:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
3120:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
3121:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
3122:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
3123:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
3124:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
3125:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
3126:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
3127:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt
3128:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx/446x
3129:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
3130:FWLIB/src/stm32f4xx_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
3131:FWLIB/src/stm32f4xx_rcc.c ****   */
3132:FWLIB/src/stm32f4xx_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
3133:FWLIB/src/stm32f4xx_rcc.c **** {
 2477              		.loc 1 3133 1 is_stmt 1 view -0
 2478              		.cfi_startproc
 2479              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 99


 2480              		@ frame_needed = 0, uses_anonymous_args = 0
 2481              		@ link register save eliminated.
3134:FWLIB/src/stm32f4xx_rcc.c ****   ITStatus bitstatus = RESET;
 2482              		.loc 1 3134 3 view .LVU636
3135:FWLIB/src/stm32f4xx_rcc.c **** 
3136:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
3137:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
 2483              		.loc 1 3137 3 view .LVU637
3138:FWLIB/src/stm32f4xx_rcc.c **** 
3139:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the status of the specified RCC interrupt */
3140:FWLIB/src/stm32f4xx_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 2484              		.loc 1 3140 3 view .LVU638
 2485              		.loc 1 3140 11 is_stmt 0 view .LVU639
 2486 0000 034B     		ldr	r3, .L214
 2487 0002 DB68     		ldr	r3, [r3, #12]
 2488              		.loc 1 3140 6 view .LVU640
 2489 0004 1842     		tst	r0, r3
 2490 0006 01D0     		beq	.L213
3141:FWLIB/src/stm32f4xx_rcc.c ****   {
3142:FWLIB/src/stm32f4xx_rcc.c ****     bitstatus = SET;
 2491              		.loc 1 3142 15 view .LVU641
 2492 0008 0120     		movs	r0, #1
 2493              	.LVL198:
 2494              		.loc 1 3142 15 view .LVU642
 2495 000a 7047     		bx	lr
 2496              	.LVL199:
 2497              	.L213:
3143:FWLIB/src/stm32f4xx_rcc.c ****   }
3144:FWLIB/src/stm32f4xx_rcc.c ****   else
3145:FWLIB/src/stm32f4xx_rcc.c ****   {
3146:FWLIB/src/stm32f4xx_rcc.c ****     bitstatus = RESET;
 2498              		.loc 1 3146 15 view .LVU643
 2499 000c 0020     		movs	r0, #0
 2500              	.LVL200:
3147:FWLIB/src/stm32f4xx_rcc.c ****   }
3148:FWLIB/src/stm32f4xx_rcc.c ****   /* Return the RCC_IT status */
3149:FWLIB/src/stm32f4xx_rcc.c ****   return  bitstatus;
 2501              		.loc 1 3149 3 is_stmt 1 view .LVU644
3150:FWLIB/src/stm32f4xx_rcc.c **** }
 2502              		.loc 1 3150 1 is_stmt 0 view .LVU645
 2503 000e 7047     		bx	lr
 2504              	.L215:
 2505              		.align	2
 2506              	.L214:
 2507 0010 00380240 		.word	1073887232
 2508              		.cfi_endproc
 2509              	.LFE174:
 2511              		.section	.text.RCC_ClearITPendingBit,"ax",%progbits
 2512              		.align	1
 2513              		.global	RCC_ClearITPendingBit
 2514              		.syntax unified
 2515              		.thumb
 2516              		.thumb_func
 2517              		.fpu fpv4-sp-d16
 2519              	RCC_ClearITPendingBit:
 2520              	.LVL201:
 2521              	.LFB175:
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 100


3151:FWLIB/src/stm32f4xx_rcc.c **** 
3152:FWLIB/src/stm32f4xx_rcc.c **** /**
3153:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
3154:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
3155:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
3156:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
3157:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
3158:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
3159:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
3160:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
3161:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
3162:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469x
3163:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
3164:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
3165:FWLIB/src/stm32f4xx_rcc.c ****   */
3166:FWLIB/src/stm32f4xx_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
3167:FWLIB/src/stm32f4xx_rcc.c **** {
 2522              		.loc 1 3167 1 is_stmt 1 view -0
 2523              		.cfi_startproc
 2524              		@ args = 0, pretend = 0, frame = 0
 2525              		@ frame_needed = 0, uses_anonymous_args = 0
 2526              		@ link register save eliminated.
3168:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
3169:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
 2527              		.loc 1 3169 3 view .LVU647
3170:FWLIB/src/stm32f4xx_rcc.c **** 
3171:FWLIB/src/stm32f4xx_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
3172:FWLIB/src/stm32f4xx_rcc.c ****      pending bits */
3173:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 2528              		.loc 1 3173 3 view .LVU648
 2529              		.loc 1 3173 39 is_stmt 0 view .LVU649
 2530 0000 014B     		ldr	r3, .L217
 2531 0002 9873     		strb	r0, [r3, #14]
3174:FWLIB/src/stm32f4xx_rcc.c **** }
 2532              		.loc 1 3174 1 view .LVU650
 2533 0004 7047     		bx	lr
 2534              	.L218:
 2535 0006 00BF     		.align	2
 2536              	.L217:
 2537 0008 00380240 		.word	1073887232
 2538              		.cfi_endproc
 2539              	.LFE175:
 2541              		.section	.data.APBAHBPrescTable,"aw"
 2542              		.align	2
 2543              		.set	.LANCHOR0,. + 0
 2546              	APBAHBPrescTable:
 2547 0000 00000000 		.ascii	"\000\000\000\000\001\002\003\004\001\002\003\004\006"
 2547      01020304 
 2547      01020304 
 2547      06
 2548 000d 070809   		.ascii	"\007\010\011"
 2549              		.text
 2550              	.Letext0:
 2551              		.file 2 "/usr/local/arm-none-eabi-gcc/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/mac
 2552              		.file 3 "/usr/local/arm-none-eabi-gcc/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys
 2553              		.file 4 "USER/stm32f4xx.h"
 2554              		.file 5 "FWLIB/inc/stm32f4xx_rcc.h"
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 101


ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 102


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_rcc.c
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:18     .text.RCC_DeInit:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:26     .text.RCC_DeInit:0000000000000000 RCC_DeInit
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:78     .text.RCC_DeInit:000000000000003c $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:85     .text.RCC_HSEConfig:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:92     .text.RCC_HSEConfig:0000000000000000 RCC_HSEConfig
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:114    .text.RCC_HSEConfig:000000000000000c $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:119    .text.RCC_AdjustHSICalibrationValue:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:126    .text.RCC_AdjustHSICalibrationValue:0000000000000000 RCC_AdjustHSICalibrationValue
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:157    .text.RCC_AdjustHSICalibrationValue:0000000000000010 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:162    .text.RCC_HSICmd:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:169    .text.RCC_HSICmd:0000000000000000 RCC_HSICmd
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:187    .text.RCC_HSICmd:0000000000000008 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:192    .text.RCC_LSEConfig:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:199    .text.RCC_LSEConfig:0000000000000000 RCC_LSEConfig
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:242    .text.RCC_LSEConfig:000000000000002c $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:247    .text.RCC_LSICmd:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:254    .text.RCC_LSICmd:0000000000000000 RCC_LSICmd
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:272    .text.RCC_LSICmd:0000000000000008 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:277    .text.RCC_PLLConfig:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:284    .text.RCC_PLLConfig:0000000000000000 RCC_PLLConfig
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:324    .text.RCC_PLLConfig:000000000000001c $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:329    .text.RCC_PLLCmd:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:336    .text.RCC_PLLCmd:0000000000000000 RCC_PLLCmd
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:354    .text.RCC_PLLCmd:0000000000000008 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:359    .text.RCC_PLLI2SConfig:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:366    .text.RCC_PLLI2SConfig:0000000000000000 RCC_PLLI2SConfig
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:390    .text.RCC_PLLI2SConfig:0000000000000010 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:395    .text.RCC_PLLI2SCmd:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:402    .text.RCC_PLLI2SCmd:0000000000000000 RCC_PLLI2SCmd
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:420    .text.RCC_PLLI2SCmd:0000000000000008 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:425    .text.RCC_PLLSAIConfig:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:432    .text.RCC_PLLSAIConfig:0000000000000000 RCC_PLLSAIConfig
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:459    .text.RCC_PLLSAIConfig:0000000000000014 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:464    .text.RCC_PLLSAICmd:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:471    .text.RCC_PLLSAICmd:0000000000000000 RCC_PLLSAICmd
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:489    .text.RCC_PLLSAICmd:0000000000000008 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:494    .text.RCC_ClockSecuritySystemCmd:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:501    .text.RCC_ClockSecuritySystemCmd:0000000000000000 RCC_ClockSecuritySystemCmd
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:519    .text.RCC_ClockSecuritySystemCmd:0000000000000008 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:524    .text.RCC_MCO1Config:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:531    .text.RCC_MCO1Config:0000000000000000 RCC_MCO1Config
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:566    .text.RCC_MCO1Config:0000000000000010 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:571    .text.RCC_MCO2Config:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:578    .text.RCC_MCO2Config:0000000000000000 RCC_MCO2Config
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:613    .text.RCC_MCO2Config:0000000000000010 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:618    .text.RCC_SYSCLKConfig:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:625    .text.RCC_SYSCLKConfig:0000000000000000 RCC_SYSCLKConfig
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:656    .text.RCC_SYSCLKConfig:0000000000000010 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:661    .text.RCC_GetSYSCLKSource:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:668    .text.RCC_GetSYSCLKSource:0000000000000000 RCC_GetSYSCLKSource
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:685    .text.RCC_GetSYSCLKSource:000000000000000c $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:690    .text.RCC_HCLKConfig:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:697    .text.RCC_HCLKConfig:0000000000000000 RCC_HCLKConfig
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:728    .text.RCC_HCLKConfig:0000000000000010 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:733    .text.RCC_PCLK1Config:0000000000000000 $t
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 103


/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:740    .text.RCC_PCLK1Config:0000000000000000 RCC_PCLK1Config
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:771    .text.RCC_PCLK1Config:0000000000000010 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:776    .text.RCC_PCLK2Config:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:783    .text.RCC_PCLK2Config:0000000000000000 RCC_PCLK2Config
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:814    .text.RCC_PCLK2Config:0000000000000010 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:819    .text.RCC_GetClocksFreq:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:826    .text.RCC_GetClocksFreq:0000000000000000 RCC_GetClocksFreq
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1031   .text.RCC_GetClocksFreq:00000000000000a8 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1039   .text.RCC_RTCCLKConfig:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1046   .text.RCC_RTCCLKConfig:0000000000000000 RCC_RTCCLKConfig
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1101   .text.RCC_RTCCLKConfig:0000000000000030 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1106   .text.RCC_RTCCLKCmd:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1113   .text.RCC_RTCCLKCmd:0000000000000000 RCC_RTCCLKCmd
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1131   .text.RCC_RTCCLKCmd:0000000000000008 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1136   .text.RCC_BackupResetCmd:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1143   .text.RCC_BackupResetCmd:0000000000000000 RCC_BackupResetCmd
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1161   .text.RCC_BackupResetCmd:0000000000000008 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1166   .text.RCC_I2SCLKConfig:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1173   .text.RCC_I2SCLKConfig:0000000000000000 RCC_I2SCLKConfig
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1191   .text.RCC_I2SCLKConfig:0000000000000008 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1196   .text.RCC_SAIBlockACLKConfig:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1203   .text.RCC_SAIBlockACLKConfig:0000000000000000 RCC_SAIBlockACLKConfig
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1234   .text.RCC_SAIBlockACLKConfig:0000000000000014 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1239   .text.RCC_SAIBlockBCLKConfig:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1246   .text.RCC_SAIBlockBCLKConfig:0000000000000000 RCC_SAIBlockBCLKConfig
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1277   .text.RCC_SAIBlockBCLKConfig:0000000000000014 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1282   .text.RCC_SAIPLLI2SClkDivConfig:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1289   .text.RCC_SAIPLLI2SClkDivConfig:0000000000000000 RCC_SAIPLLI2SClkDivConfig
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1323   .text.RCC_SAIPLLI2SClkDivConfig:0000000000000014 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1328   .text.RCC_SAIPLLSAIClkDivConfig:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1335   .text.RCC_SAIPLLSAIClkDivConfig:0000000000000000 RCC_SAIPLLSAIClkDivConfig
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1369   .text.RCC_SAIPLLSAIClkDivConfig:0000000000000018 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1374   .text.RCC_LTDCCLKDivConfig:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1381   .text.RCC_LTDCCLKDivConfig:0000000000000000 RCC_LTDCCLKDivConfig
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1412   .text.RCC_LTDCCLKDivConfig:0000000000000014 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1417   .text.RCC_TIMCLKPresConfig:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1424   .text.RCC_TIMCLKPresConfig:0000000000000000 RCC_TIMCLKPresConfig
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1442   .text.RCC_TIMCLKPresConfig:0000000000000008 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1447   .text.RCC_AHB1PeriphClockCmd:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1454   .text.RCC_AHB1PeriphClockCmd:0000000000000000 RCC_AHB1PeriphClockCmd
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1491   .text.RCC_AHB1PeriphClockCmd:0000000000000018 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1496   .text.RCC_AHB2PeriphClockCmd:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1503   .text.RCC_AHB2PeriphClockCmd:0000000000000000 RCC_AHB2PeriphClockCmd
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1540   .text.RCC_AHB2PeriphClockCmd:0000000000000018 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1545   .text.RCC_AHB3PeriphClockCmd:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1552   .text.RCC_AHB3PeriphClockCmd:0000000000000000 RCC_AHB3PeriphClockCmd
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1589   .text.RCC_AHB3PeriphClockCmd:0000000000000018 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1594   .text.RCC_APB1PeriphClockCmd:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1601   .text.RCC_APB1PeriphClockCmd:0000000000000000 RCC_APB1PeriphClockCmd
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1638   .text.RCC_APB1PeriphClockCmd:0000000000000018 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1643   .text.RCC_APB2PeriphClockCmd:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1650   .text.RCC_APB2PeriphClockCmd:0000000000000000 RCC_APB2PeriphClockCmd
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1687   .text.RCC_APB2PeriphClockCmd:0000000000000018 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1692   .text.RCC_AHB1PeriphResetCmd:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1699   .text.RCC_AHB1PeriphResetCmd:0000000000000000 RCC_AHB1PeriphResetCmd
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1736   .text.RCC_AHB1PeriphResetCmd:0000000000000018 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1741   .text.RCC_AHB2PeriphResetCmd:0000000000000000 $t
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s 			page 104


/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1748   .text.RCC_AHB2PeriphResetCmd:0000000000000000 RCC_AHB2PeriphResetCmd
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1785   .text.RCC_AHB2PeriphResetCmd:0000000000000018 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1790   .text.RCC_AHB3PeriphResetCmd:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1797   .text.RCC_AHB3PeriphResetCmd:0000000000000000 RCC_AHB3PeriphResetCmd
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1834   .text.RCC_AHB3PeriphResetCmd:0000000000000018 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1839   .text.RCC_APB1PeriphResetCmd:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1846   .text.RCC_APB1PeriphResetCmd:0000000000000000 RCC_APB1PeriphResetCmd
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1883   .text.RCC_APB1PeriphResetCmd:0000000000000018 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1888   .text.RCC_APB2PeriphResetCmd:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1895   .text.RCC_APB2PeriphResetCmd:0000000000000000 RCC_APB2PeriphResetCmd
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1932   .text.RCC_APB2PeriphResetCmd:0000000000000018 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1937   .text.RCC_AHB1PeriphClockLPModeCmd:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1944   .text.RCC_AHB1PeriphClockLPModeCmd:0000000000000000 RCC_AHB1PeriphClockLPModeCmd
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1981   .text.RCC_AHB1PeriphClockLPModeCmd:0000000000000018 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1986   .text.RCC_AHB2PeriphClockLPModeCmd:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:1993   .text.RCC_AHB2PeriphClockLPModeCmd:0000000000000000 RCC_AHB2PeriphClockLPModeCmd
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:2030   .text.RCC_AHB2PeriphClockLPModeCmd:0000000000000018 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:2035   .text.RCC_AHB3PeriphClockLPModeCmd:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:2042   .text.RCC_AHB3PeriphClockLPModeCmd:0000000000000000 RCC_AHB3PeriphClockLPModeCmd
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:2079   .text.RCC_AHB3PeriphClockLPModeCmd:0000000000000018 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:2084   .text.RCC_APB1PeriphClockLPModeCmd:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:2091   .text.RCC_APB1PeriphClockLPModeCmd:0000000000000000 RCC_APB1PeriphClockLPModeCmd
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:2128   .text.RCC_APB1PeriphClockLPModeCmd:0000000000000018 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:2133   .text.RCC_APB2PeriphClockLPModeCmd:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:2140   .text.RCC_APB2PeriphClockLPModeCmd:0000000000000000 RCC_APB2PeriphClockLPModeCmd
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:2177   .text.RCC_APB2PeriphClockLPModeCmd:0000000000000018 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:2182   .text.RCC_LSEModeConfig:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:2189   .text.RCC_LSEModeConfig:0000000000000000 RCC_LSEModeConfig
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:2219   .text.RCC_LSEModeConfig:000000000000001c $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:2224   .text.RCC_ITConfig:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:2231   .text.RCC_ITConfig:0000000000000000 RCC_ITConfig
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:2268   .text.RCC_ITConfig:0000000000000018 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:2273   .text.RCC_GetFlagStatus:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:2280   .text.RCC_GetFlagStatus:0000000000000000 RCC_GetFlagStatus
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:2359   .text.RCC_GetFlagStatus:0000000000000030 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:2364   .text.RCC_WaitForHSEStartUp:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:2371   .text.RCC_WaitForHSEStartUp:0000000000000000 RCC_WaitForHSEStartUp
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:2437   .text.RCC_ClearFlag:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:2444   .text.RCC_ClearFlag:0000000000000000 RCC_ClearFlag
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:2462   .text.RCC_ClearFlag:000000000000000c $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:2467   .text.RCC_GetITStatus:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:2474   .text.RCC_GetITStatus:0000000000000000 RCC_GetITStatus
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:2507   .text.RCC_GetITStatus:0000000000000010 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:2512   .text.RCC_ClearITPendingBit:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:2519   .text.RCC_ClearITPendingBit:0000000000000000 RCC_ClearITPendingBit
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:2537   .text.RCC_ClearITPendingBit:0000000000000008 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:2542   .data.APBAHBPrescTable:0000000000000000 $d
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccWEEJcn.s:2546   .data.APBAHBPrescTable:0000000000000000 APBAHBPrescTable

NO UNDEFINED SYMBOLS
