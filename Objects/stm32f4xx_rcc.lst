ARM GAS  /tmp/cc6d9lwr.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_rcc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.RCC_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	RCC_DeInit
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	RCC_DeInit:
  26              	.LFB123:
  27              		.file 1 "FWLIB/src/stm32f4xx_rcc.c"
   1:FWLIB/src/stm32f4xx_rcc.c **** /**
   2:FWLIB/src/stm32f4xx_rcc.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_rcc.c ****   * @file    stm32f4xx_rcc.c
   4:FWLIB/src/stm32f4xx_rcc.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_rcc.c ****   * @version V1.8.0
   6:FWLIB/src/stm32f4xx_rcc.c ****   * @date    04-November-2016
   7:FWLIB/src/stm32f4xx_rcc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:FWLIB/src/stm32f4xx_rcc.c ****   *          functionalities of the Reset and clock control (RCC) peripheral:
   9:FWLIB/src/stm32f4xx_rcc.c ****   *           + Internal/external clocks, PLL, CSS and MCO configuration
  10:FWLIB/src/stm32f4xx_rcc.c ****   *           + System, AHB and APB busses clocks configuration
  11:FWLIB/src/stm32f4xx_rcc.c ****   *           + Peripheral clocks configuration
  12:FWLIB/src/stm32f4xx_rcc.c ****   *           + Interrupts and flags management
  13:FWLIB/src/stm32f4xx_rcc.c ****   *
  14:FWLIB/src/stm32f4xx_rcc.c ****  @verbatim
  15:FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================
  16:FWLIB/src/stm32f4xx_rcc.c ****                       ##### RCC specific features #####
  17:FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================
  18:FWLIB/src/stm32f4xx_rcc.c ****     [..]  
  19:FWLIB/src/stm32f4xx_rcc.c ****       After reset the device is running from Internal High Speed oscillator 
  20:FWLIB/src/stm32f4xx_rcc.c ****       (HSI 16MHz) with Flash 0 wait state, Flash prefetch buffer, D-Cache 
  21:FWLIB/src/stm32f4xx_rcc.c ****       and I-Cache are disabled, and all peripherals are off except internal
  22:FWLIB/src/stm32f4xx_rcc.c ****       SRAM, Flash and JTAG.
  23:FWLIB/src/stm32f4xx_rcc.c ****       (+) There is no prescaler on High speed (AHB) and Low speed (APB) busses;
  24:FWLIB/src/stm32f4xx_rcc.c ****           all peripherals mapped on these busses are running at HSI speed.
  25:FWLIB/src/stm32f4xx_rcc.c ****       (+) The clock for all peripherals is switched off, except the SRAM and FLASH.
  26:FWLIB/src/stm32f4xx_rcc.c ****       (+) All GPIOs are in input floating state, except the JTAG pins which
  27:FWLIB/src/stm32f4xx_rcc.c ****           are assigned to be used for debug purpose.
  28:FWLIB/src/stm32f4xx_rcc.c ****     [..]          
  29:FWLIB/src/stm32f4xx_rcc.c ****       Once the device started from reset, the user application has to:
  30:FWLIB/src/stm32f4xx_rcc.c ****       (+) Configure the clock source to be used to drive the System clock
  31:FWLIB/src/stm32f4xx_rcc.c ****           (if the application needs higher frequency/performance)
ARM GAS  /tmp/cc6d9lwr.s 			page 2


  32:FWLIB/src/stm32f4xx_rcc.c ****       (+) Configure the System clock frequency and Flash settings  
  33:FWLIB/src/stm32f4xx_rcc.c ****       (+) Configure the AHB and APB busses prescalers
  34:FWLIB/src/stm32f4xx_rcc.c ****       (+) Enable the clock for the peripheral(s) to be used
  35:FWLIB/src/stm32f4xx_rcc.c ****       (+) Configure the clock source(s) for peripherals which clocks are not
  36:FWLIB/src/stm32f4xx_rcc.c ****           derived from the System clock (I2S, RTC, ADC, USB OTG FS/SDIO/RNG)
  37:FWLIB/src/stm32f4xx_rcc.c ****  @endverbatim    
  38:FWLIB/src/stm32f4xx_rcc.c ****   ******************************************************************************
  39:FWLIB/src/stm32f4xx_rcc.c ****   * @attention
  40:FWLIB/src/stm32f4xx_rcc.c ****   *
  41:FWLIB/src/stm32f4xx_rcc.c ****   * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
  42:FWLIB/src/stm32f4xx_rcc.c ****   *
  43:FWLIB/src/stm32f4xx_rcc.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  44:FWLIB/src/stm32f4xx_rcc.c ****   * You may not use this file except in compliance with the License.
  45:FWLIB/src/stm32f4xx_rcc.c ****   * You may obtain a copy of the License at:
  46:FWLIB/src/stm32f4xx_rcc.c ****   *
  47:FWLIB/src/stm32f4xx_rcc.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  48:FWLIB/src/stm32f4xx_rcc.c ****   *
  49:FWLIB/src/stm32f4xx_rcc.c ****   * Unless required by applicable law or agreed to in writing, software 
  50:FWLIB/src/stm32f4xx_rcc.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  51:FWLIB/src/stm32f4xx_rcc.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  52:FWLIB/src/stm32f4xx_rcc.c ****   * See the License for the specific language governing permissions and
  53:FWLIB/src/stm32f4xx_rcc.c ****   * limitations under the License.
  54:FWLIB/src/stm32f4xx_rcc.c ****   *
  55:FWLIB/src/stm32f4xx_rcc.c ****   ******************************************************************************
  56:FWLIB/src/stm32f4xx_rcc.c ****   */
  57:FWLIB/src/stm32f4xx_rcc.c **** 
  58:FWLIB/src/stm32f4xx_rcc.c **** /* Includes ------------------------------------------------------------------*/
  59:FWLIB/src/stm32f4xx_rcc.c **** #include "stm32f4xx_rcc.h"
  60:FWLIB/src/stm32f4xx_rcc.c **** 
  61:FWLIB/src/stm32f4xx_rcc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  62:FWLIB/src/stm32f4xx_rcc.c ****   * @{
  63:FWLIB/src/stm32f4xx_rcc.c ****   */
  64:FWLIB/src/stm32f4xx_rcc.c **** 
  65:FWLIB/src/stm32f4xx_rcc.c **** /** @defgroup RCC 
  66:FWLIB/src/stm32f4xx_rcc.c ****   * @brief RCC driver modules
  67:FWLIB/src/stm32f4xx_rcc.c ****   * @{
  68:FWLIB/src/stm32f4xx_rcc.c ****   */ 
  69:FWLIB/src/stm32f4xx_rcc.c **** 
  70:FWLIB/src/stm32f4xx_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  71:FWLIB/src/stm32f4xx_rcc.c **** /* Private define ------------------------------------------------------------*/
  72:FWLIB/src/stm32f4xx_rcc.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  73:FWLIB/src/stm32f4xx_rcc.c **** #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
  74:FWLIB/src/stm32f4xx_rcc.c **** /* --- CR Register ---*/
  75:FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of HSION bit */
  76:FWLIB/src/stm32f4xx_rcc.c **** #define CR_OFFSET                 (RCC_OFFSET + 0x00)
  77:FWLIB/src/stm32f4xx_rcc.c **** #define HSION_BitNumber           0x00
  78:FWLIB/src/stm32f4xx_rcc.c **** #define CR_HSION_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (HSION_BitNumber * 4))
  79:FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of CSSON bit */
  80:FWLIB/src/stm32f4xx_rcc.c **** #define CSSON_BitNumber           0x13
  81:FWLIB/src/stm32f4xx_rcc.c **** #define CR_CSSON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))
  82:FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of PLLON bit */
  83:FWLIB/src/stm32f4xx_rcc.c **** #define PLLON_BitNumber           0x18
  84:FWLIB/src/stm32f4xx_rcc.c **** #define CR_PLLON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))
  85:FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of PLLI2SON bit */
  86:FWLIB/src/stm32f4xx_rcc.c **** #define PLLI2SON_BitNumber        0x1A
  87:FWLIB/src/stm32f4xx_rcc.c **** #define CR_PLLI2SON_BB            (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLI2SON_BitNumber * 4))
  88:FWLIB/src/stm32f4xx_rcc.c **** 
ARM GAS  /tmp/cc6d9lwr.s 			page 3


  89:FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of PLLSAION bit */
  90:FWLIB/src/stm32f4xx_rcc.c **** #define PLLSAION_BitNumber        0x1C
  91:FWLIB/src/stm32f4xx_rcc.c **** #define CR_PLLSAION_BB            (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLSAION_BitNumber * 4))
  92:FWLIB/src/stm32f4xx_rcc.c **** 
  93:FWLIB/src/stm32f4xx_rcc.c **** /* --- CFGR Register ---*/
  94:FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of I2SSRC bit */
  95:FWLIB/src/stm32f4xx_rcc.c **** #define CFGR_OFFSET               (RCC_OFFSET + 0x08)
  96:FWLIB/src/stm32f4xx_rcc.c **** #define I2SSRC_BitNumber          0x17
  97:FWLIB/src/stm32f4xx_rcc.c **** #define CFGR_I2SSRC_BB            (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (I2SSRC_BitNumber * 4))
  98:FWLIB/src/stm32f4xx_rcc.c **** 
  99:FWLIB/src/stm32f4xx_rcc.c **** /* --- BDCR Register ---*/
 100:FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of RTCEN bit */
 101:FWLIB/src/stm32f4xx_rcc.c **** #define BDCR_OFFSET               (RCC_OFFSET + 0x70)
 102:FWLIB/src/stm32f4xx_rcc.c **** #define RTCEN_BitNumber           0x0F
 103:FWLIB/src/stm32f4xx_rcc.c **** #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
 104:FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of BDRST bit */
 105:FWLIB/src/stm32f4xx_rcc.c **** #define BDRST_BitNumber           0x10
 106:FWLIB/src/stm32f4xx_rcc.c **** #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))
 107:FWLIB/src/stm32f4xx_rcc.c **** 
 108:FWLIB/src/stm32f4xx_rcc.c **** /* --- CSR Register ---*/
 109:FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of LSION bit */
 110:FWLIB/src/stm32f4xx_rcc.c **** #define CSR_OFFSET                (RCC_OFFSET + 0x74)
 111:FWLIB/src/stm32f4xx_rcc.c **** #define LSION_BitNumber           0x00
 112:FWLIB/src/stm32f4xx_rcc.c **** #define CSR_LSION_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))
 113:FWLIB/src/stm32f4xx_rcc.c **** 
 114:FWLIB/src/stm32f4xx_rcc.c **** /* --- DCKCFGR Register ---*/
 115:FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of TIMPRE bit */
 116:FWLIB/src/stm32f4xx_rcc.c **** #define DCKCFGR_OFFSET            (RCC_OFFSET + 0x8C)
 117:FWLIB/src/stm32f4xx_rcc.c **** #define TIMPRE_BitNumber          0x18
 118:FWLIB/src/stm32f4xx_rcc.c **** #define DCKCFGR_TIMPRE_BB         (PERIPH_BB_BASE + (DCKCFGR_OFFSET * 32) + (TIMPRE_BitNumber * 4))
 119:FWLIB/src/stm32f4xx_rcc.c ****     
 120:FWLIB/src/stm32f4xx_rcc.c **** /* --- CFGR Register ---*/
 121:FWLIB/src/stm32f4xx_rcc.c **** #define RCC_CFGR_OFFSET            (RCC_OFFSET + 0x08)
 122:FWLIB/src/stm32f4xx_rcc.c ****  #if defined(STM32F410xx)
 123:FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of MCO1EN bit */
 124:FWLIB/src/stm32f4xx_rcc.c **** #define RCC_MCO1EN_BIT_NUMBER      0x8
 125:FWLIB/src/stm32f4xx_rcc.c **** #define RCC_CFGR_MCO1EN_BB         (PERIPH_BB_BASE + (RCC_CFGR_OFFSET * 32) + (RCC_MCO1EN_BIT_NUMBE
 126:FWLIB/src/stm32f4xx_rcc.c **** 
 127:FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of MCO2EN bit */
 128:FWLIB/src/stm32f4xx_rcc.c **** #define RCC_MCO2EN_BIT_NUMBER      0x9
 129:FWLIB/src/stm32f4xx_rcc.c **** #define RCC_CFGR_MCO2EN_BB         (PERIPH_BB_BASE + (RCC_CFGR_OFFSET * 32) + (RCC_MCO2EN_BIT_NUMBE
 130:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F410xx */
 131:FWLIB/src/stm32f4xx_rcc.c **** /* ---------------------- RCC registers bit mask ------------------------ */
 132:FWLIB/src/stm32f4xx_rcc.c **** /* CFGR register bit mask */
 133:FWLIB/src/stm32f4xx_rcc.c **** #define CFGR_MCO2_RESET_MASK      ((uint32_t)0x07FFFFFF)
 134:FWLIB/src/stm32f4xx_rcc.c **** #define CFGR_MCO1_RESET_MASK      ((uint32_t)0xF89FFFFF)
 135:FWLIB/src/stm32f4xx_rcc.c **** 
 136:FWLIB/src/stm32f4xx_rcc.c **** /* RCC Flag Mask */
 137:FWLIB/src/stm32f4xx_rcc.c **** #define FLAG_MASK                 ((uint8_t)0x1F)
 138:FWLIB/src/stm32f4xx_rcc.c **** 
 139:FWLIB/src/stm32f4xx_rcc.c **** /* CR register byte 3 (Bits[23:16]) base address */
 140:FWLIB/src/stm32f4xx_rcc.c **** #define CR_BYTE3_ADDRESS          ((uint32_t)0x40023802)
 141:FWLIB/src/stm32f4xx_rcc.c **** 
 142:FWLIB/src/stm32f4xx_rcc.c **** /* CIR register byte 2 (Bits[15:8]) base address */
 143:FWLIB/src/stm32f4xx_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x01))
 144:FWLIB/src/stm32f4xx_rcc.c **** 
 145:FWLIB/src/stm32f4xx_rcc.c **** /* CIR register byte 3 (Bits[23:16]) base address */
ARM GAS  /tmp/cc6d9lwr.s 			page 4


 146:FWLIB/src/stm32f4xx_rcc.c **** #define CIR_BYTE3_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x02))
 147:FWLIB/src/stm32f4xx_rcc.c **** 
 148:FWLIB/src/stm32f4xx_rcc.c **** /* BDCR register base address */
 149:FWLIB/src/stm32f4xx_rcc.c **** #define BDCR_ADDRESS              (PERIPH_BASE + BDCR_OFFSET)
 150:FWLIB/src/stm32f4xx_rcc.c **** 
 151:FWLIB/src/stm32f4xx_rcc.c **** /* Private macro -------------------------------------------------------------*/
 152:FWLIB/src/stm32f4xx_rcc.c **** /* Private variables ---------------------------------------------------------*/
 153:FWLIB/src/stm32f4xx_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 154:FWLIB/src/stm32f4xx_rcc.c **** 
 155:FWLIB/src/stm32f4xx_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 156:FWLIB/src/stm32f4xx_rcc.c **** /* Private functions ---------------------------------------------------------*/
 157:FWLIB/src/stm32f4xx_rcc.c **** 
 158:FWLIB/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Private_Functions
 159:FWLIB/src/stm32f4xx_rcc.c ****   * @{
 160:FWLIB/src/stm32f4xx_rcc.c ****   */ 
 161:FWLIB/src/stm32f4xx_rcc.c **** 
 162:FWLIB/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group1 Internal and external clocks, PLL, CSS and MCO configuration functions
 163:FWLIB/src/stm32f4xx_rcc.c ****  *  @brief   Internal and external clocks, PLL, CSS and MCO configuration functions 
 164:FWLIB/src/stm32f4xx_rcc.c ****  *
 165:FWLIB/src/stm32f4xx_rcc.c **** @verbatim   
 166:FWLIB/src/stm32f4xx_rcc.c ****  ===================================================================================
 167:FWLIB/src/stm32f4xx_rcc.c ****  ##### Internal and  external clocks, PLL, CSS and MCO configuration functions #####
 168:FWLIB/src/stm32f4xx_rcc.c ****  ===================================================================================
 169:FWLIB/src/stm32f4xx_rcc.c ****     [..]
 170:FWLIB/src/stm32f4xx_rcc.c ****       This section provide functions allowing to configure the internal/external clocks,
 171:FWLIB/src/stm32f4xx_rcc.c ****       PLLs, CSS and MCO pins.
 172:FWLIB/src/stm32f4xx_rcc.c ****   
 173:FWLIB/src/stm32f4xx_rcc.c ****       (#) HSI (high-speed internal), 16 MHz factory-trimmed RC used directly or through
 174:FWLIB/src/stm32f4xx_rcc.c ****           the PLL as System clock source.
 175:FWLIB/src/stm32f4xx_rcc.c **** 
 176:FWLIB/src/stm32f4xx_rcc.c ****       (#) LSI (low-speed internal), 32 KHz low consumption RC used as IWDG and/or RTC
 177:FWLIB/src/stm32f4xx_rcc.c ****           clock source.
 178:FWLIB/src/stm32f4xx_rcc.c **** 
 179:FWLIB/src/stm32f4xx_rcc.c ****       (#) HSE (high-speed external), 4 to 26 MHz crystal oscillator used directly or
 180:FWLIB/src/stm32f4xx_rcc.c ****           through the PLL as System clock source. Can be used also as RTC clock source.
 181:FWLIB/src/stm32f4xx_rcc.c **** 
 182:FWLIB/src/stm32f4xx_rcc.c ****       (#) LSE (low-speed external), 32 KHz oscillator used as RTC clock source.   
 183:FWLIB/src/stm32f4xx_rcc.c **** 
 184:FWLIB/src/stm32f4xx_rcc.c ****       (#) PLL (clocked by HSI or HSE), featuring two different output clocks:
 185:FWLIB/src/stm32f4xx_rcc.c ****         (++) The first output is used to generate the high speed system clock (up to 168 MHz)
 186:FWLIB/src/stm32f4xx_rcc.c ****         (++) The second output is used to generate the clock for the USB OTG FS (48 MHz),
 187:FWLIB/src/stm32f4xx_rcc.c ****              the random analog generator (<=48 MHz) and the SDIO (<= 48 MHz).
 188:FWLIB/src/stm32f4xx_rcc.c **** 
 189:FWLIB/src/stm32f4xx_rcc.c ****       (#) PLLI2S (clocked by HSI or HSE), used to generate an accurate clock to achieve 
 190:FWLIB/src/stm32f4xx_rcc.c ****           high-quality audio performance on the I2S interface or SAI interface in case 
 191:FWLIB/src/stm32f4xx_rcc.c ****           of STM32F429x/439x devices.
 192:FWLIB/src/stm32f4xx_rcc.c ****      
 193:FWLIB/src/stm32f4xx_rcc.c ****       (#) PLLSAI clocked by (HSI or HSE), used to generate an accurate clock to SAI 
 194:FWLIB/src/stm32f4xx_rcc.c ****           interface and LCD TFT controller available only for STM32F42xxx/43xxx/446xx/469xx/479xx d
 195:FWLIB/src/stm32f4xx_rcc.c ****   
 196:FWLIB/src/stm32f4xx_rcc.c ****       (#) CSS (Clock security system), once enable and if a HSE clock failure occurs 
 197:FWLIB/src/stm32f4xx_rcc.c ****          (HSE used directly or through PLL as System clock source), the System clock
 198:FWLIB/src/stm32f4xx_rcc.c ****          is automatically switched to HSI and an interrupt is generated if enabled. 
 199:FWLIB/src/stm32f4xx_rcc.c ****          The interrupt is linked to the Cortex-M4 NMI (Non-Maskable Interrupt) 
 200:FWLIB/src/stm32f4xx_rcc.c ****          exception vector.   
 201:FWLIB/src/stm32f4xx_rcc.c **** 
 202:FWLIB/src/stm32f4xx_rcc.c ****       (#) MCO1 (microcontroller clock output), used to output HSI, LSE, HSE or PLL
ARM GAS  /tmp/cc6d9lwr.s 			page 5


 203:FWLIB/src/stm32f4xx_rcc.c ****           clock (through a configurable prescaler) on PA8 pin.
 204:FWLIB/src/stm32f4xx_rcc.c **** 
 205:FWLIB/src/stm32f4xx_rcc.c ****       (#) MCO2 (microcontroller clock output), used to output HSE, PLL, SYSCLK or PLLI2S
 206:FWLIB/src/stm32f4xx_rcc.c ****           clock (through a configurable prescaler) on PC9 pin.
 207:FWLIB/src/stm32f4xx_rcc.c ****  @endverbatim
 208:FWLIB/src/stm32f4xx_rcc.c ****   * @{
 209:FWLIB/src/stm32f4xx_rcc.c ****   */
 210:FWLIB/src/stm32f4xx_rcc.c **** 
 211:FWLIB/src/stm32f4xx_rcc.c **** /**
 212:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 213:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 214:FWLIB/src/stm32f4xx_rcc.c ****   *            - HSI ON and used as system clock source
 215:FWLIB/src/stm32f4xx_rcc.c ****   *            - HSE, PLL and PLLI2S OFF
 216:FWLIB/src/stm32f4xx_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 217:FWLIB/src/stm32f4xx_rcc.c ****   *            - CSS, MCO1 and MCO2 OFF
 218:FWLIB/src/stm32f4xx_rcc.c ****   *            - All interrupts disabled
 219:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function doesn't modify the configuration of the
 220:FWLIB/src/stm32f4xx_rcc.c ****   *            - Peripheral clocks  
 221:FWLIB/src/stm32f4xx_rcc.c ****   *            - LSI, LSE and RTC clocks 
 222:FWLIB/src/stm32f4xx_rcc.c ****   * @param  None
 223:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 224:FWLIB/src/stm32f4xx_rcc.c ****   */
 225:FWLIB/src/stm32f4xx_rcc.c **** void RCC_DeInit(void)
 226:FWLIB/src/stm32f4xx_rcc.c **** {
  28              		.loc 1 226 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 227:FWLIB/src/stm32f4xx_rcc.c ****   /* Set HSION bit */
 228:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
  33              		.loc 1 228 0
  34 0000 0E4B     		ldr	r3, .L2
  35 0002 1A68     		ldr	r2, [r3]
  36 0004 42F00102 		orr	r2, r2, #1
  37 0008 1A60     		str	r2, [r3]
 229:FWLIB/src/stm32f4xx_rcc.c **** 
 230:FWLIB/src/stm32f4xx_rcc.c ****   /* Reset CFGR register */
 231:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CFGR = 0x00000000;
  38              		.loc 1 231 0
  39 000a 0021     		movs	r1, #0
  40 000c 9960     		str	r1, [r3, #8]
 232:FWLIB/src/stm32f4xx_rcc.c **** 
 233:FWLIB/src/stm32f4xx_rcc.c ****   /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits
 234:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xEAF6FFFF;
  41              		.loc 1 234 0
  42 000e 1A68     		ldr	r2, [r3]
  43 0010 22F0A852 		bic	r2, r2, #352321536
  44 0014 22F41022 		bic	r2, r2, #589824
  45 0018 1A60     		str	r2, [r3]
 235:FWLIB/src/stm32f4xx_rcc.c ****   
 236:FWLIB/src/stm32f4xx_rcc.c ****   /* Reset PLLCFGR register */
 237:FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = 0x24003010;
  46              		.loc 1 237 0
  47 001a 094A     		ldr	r2, .L2+4
  48 001c 5A60     		str	r2, [r3, #4]
 238:FWLIB/src/stm32f4xx_rcc.c **** 
ARM GAS  /tmp/cc6d9lwr.s 			page 6


 239:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
 240:FWLIB/src/stm32f4xx_rcc.c ****   /* Reset PLLI2SCFGR register */
 241:FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = 0x20003000;
  49              		.loc 1 241 0
  50 001e 094A     		ldr	r2, .L2+8
  51 0020 C3F88420 		str	r2, [r3, #132]
 242:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM
 243:FWLIB/src/stm32f4xx_rcc.c **** 
 244:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
 245:FWLIB/src/stm32f4xx_rcc.c ****   /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
 246:FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLSAICFGR = 0x24003000;
  52              		.loc 1 246 0
  53 0024 02F18062 		add	r2, r2, #67108864
  54 0028 C3F88820 		str	r2, [r3, #136]
 247:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
 248:FWLIB/src/stm32f4xx_rcc.c ****   
 249:FWLIB/src/stm32f4xx_rcc.c ****   /* Reset HSEBYP bit */
 250:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  55              		.loc 1 250 0
  56 002c 1A68     		ldr	r2, [r3]
  57 002e 22F48022 		bic	r2, r2, #262144
  58 0032 1A60     		str	r2, [r3]
 251:FWLIB/src/stm32f4xx_rcc.c **** 
 252:FWLIB/src/stm32f4xx_rcc.c ****   /* Disable all interrupts */
 253:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CIR = 0x00000000;
  59              		.loc 1 253 0
  60 0034 D960     		str	r1, [r3, #12]
 254:FWLIB/src/stm32f4xx_rcc.c **** 
 255:FWLIB/src/stm32f4xx_rcc.c ****   /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423
 256:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = 0x00000000;
  61              		.loc 1 256 0
  62 0036 C3F88C10 		str	r1, [r3, #140]
  63 003a 7047     		bx	lr
  64              	.L3:
  65              		.align	2
  66              	.L2:
  67 003c 00380240 		.word	1073887232
  68 0040 10300024 		.word	603992080
  69 0044 00300020 		.word	536883200
  70              		.cfi_endproc
  71              	.LFE123:
  73              		.section	.text.RCC_HSEConfig,"ax",%progbits
  74              		.align	1
  75              		.global	RCC_HSEConfig
  76              		.syntax unified
  77              		.thumb
  78              		.thumb_func
  79              		.fpu fpv4-sp-d16
  81              	RCC_HSEConfig:
  82              	.LFB124:
 257:FWLIB/src/stm32f4xx_rcc.c ****   
 258:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F410xx) || defined(STM32F413_423xx)
 259:FWLIB/src/stm32f4xx_rcc.c ****   /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F
 260:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR2 = 0x00000000;
 261:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F410xx || STM32F413_423xx */  
 262:FWLIB/src/stm32f4xx_rcc.c **** }
 263:FWLIB/src/stm32f4xx_rcc.c **** 
ARM GAS  /tmp/cc6d9lwr.s 			page 7


 264:FWLIB/src/stm32f4xx_rcc.c **** /**
 265:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 266:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After enabling the HSE (RCC_HSE_ON or RCC_HSE_Bypass), the application
 267:FWLIB/src/stm32f4xx_rcc.c ****   *         software should wait on HSERDY flag to be set indicating that HSE clock
 268:FWLIB/src/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the PLL and/or system clock.
 269:FWLIB/src/stm32f4xx_rcc.c ****   * @note   HSE state can not be changed if it is used directly or through the
 270:FWLIB/src/stm32f4xx_rcc.c ****   *         PLL as system clock. In this case, you have to select another source
 271:FWLIB/src/stm32f4xx_rcc.c ****   *         of the system clock then change the HSE state (ex. disable it).
 272:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The HSE is stopped by hardware when entering STOP and STANDBY modes.  
 273:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function reset the CSSON bit, so if the Clock security system(CSS)
 274:FWLIB/src/stm32f4xx_rcc.c ****   *         was previously enabled you have to enable it again after calling this
 275:FWLIB/src/stm32f4xx_rcc.c ****   *         function.    
 276:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 277:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 278:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_OFF: turn OFF the HSE oscillator, HSERDY flag goes low after
 279:FWLIB/src/stm32f4xx_rcc.c ****   *                              6 HSE oscillator clock cycles.
 280:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_ON: turn ON the HSE oscillator
 281:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 282:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 283:FWLIB/src/stm32f4xx_rcc.c ****   */
 284:FWLIB/src/stm32f4xx_rcc.c **** void RCC_HSEConfig(uint8_t RCC_HSE)
 285:FWLIB/src/stm32f4xx_rcc.c **** {
  83              		.loc 1 285 0
  84              		.cfi_startproc
  85              		@ args = 0, pretend = 0, frame = 0
  86              		@ frame_needed = 0, uses_anonymous_args = 0
  87              		@ link register save eliminated.
  88              	.LVL0:
 286:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 287:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
 288:FWLIB/src/stm32f4xx_rcc.c **** 
 289:FWLIB/src/stm32f4xx_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 290:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
  89              		.loc 1 290 0
  90 0000 024B     		ldr	r3, .L5
  91 0002 0022     		movs	r2, #0
  92 0004 1A70     		strb	r2, [r3]
 291:FWLIB/src/stm32f4xx_rcc.c **** 
 292:FWLIB/src/stm32f4xx_rcc.c ****   /* Set the new HSE configuration -------------------------------------------*/
 293:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
  93              		.loc 1 293 0
  94 0006 1870     		strb	r0, [r3]
  95 0008 7047     		bx	lr
  96              	.L6:
  97 000a 00BF     		.align	2
  98              	.L5:
  99 000c 02380240 		.word	1073887234
 100              		.cfi_endproc
 101              	.LFE124:
 103              		.section	.text.RCC_AdjustHSICalibrationValue,"ax",%progbits
 104              		.align	1
 105              		.global	RCC_AdjustHSICalibrationValue
 106              		.syntax unified
 107              		.thumb
 108              		.thumb_func
 109              		.fpu fpv4-sp-d16
 111              	RCC_AdjustHSICalibrationValue:
ARM GAS  /tmp/cc6d9lwr.s 			page 8


 112              	.LFB126:
 294:FWLIB/src/stm32f4xx_rcc.c **** }
 295:FWLIB/src/stm32f4xx_rcc.c **** 
 296:FWLIB/src/stm32f4xx_rcc.c **** /**
 297:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Waits for HSE start-up.
 298:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This functions waits on HSERDY flag to be set and return SUCCESS if 
 299:FWLIB/src/stm32f4xx_rcc.c ****   *         this flag is set, otherwise returns ERROR if the timeout is reached 
 300:FWLIB/src/stm32f4xx_rcc.c ****   *         and this flag is not set. The timeout value is defined by the constant
 301:FWLIB/src/stm32f4xx_rcc.c ****   *         HSE_STARTUP_TIMEOUT in stm32f4xx.h file. You can tailor it depending
 302:FWLIB/src/stm32f4xx_rcc.c ****   *         on the HSE crystal used in your application. 
 303:FWLIB/src/stm32f4xx_rcc.c ****   * @param  None
 304:FWLIB/src/stm32f4xx_rcc.c ****   * @retval An ErrorStatus enumeration value:
 305:FWLIB/src/stm32f4xx_rcc.c ****   *          - SUCCESS: HSE oscillator is stable and ready to use
 306:FWLIB/src/stm32f4xx_rcc.c ****   *          - ERROR: HSE oscillator not yet ready
 307:FWLIB/src/stm32f4xx_rcc.c ****   */
 308:FWLIB/src/stm32f4xx_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 309:FWLIB/src/stm32f4xx_rcc.c **** {
 310:FWLIB/src/stm32f4xx_rcc.c ****   __IO uint32_t startupcounter = 0;
 311:FWLIB/src/stm32f4xx_rcc.c ****   ErrorStatus status = ERROR;
 312:FWLIB/src/stm32f4xx_rcc.c ****   FlagStatus hsestatus = RESET;
 313:FWLIB/src/stm32f4xx_rcc.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 314:FWLIB/src/stm32f4xx_rcc.c ****   do
 315:FWLIB/src/stm32f4xx_rcc.c ****   {
 316:FWLIB/src/stm32f4xx_rcc.c ****     hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 317:FWLIB/src/stm32f4xx_rcc.c ****     startupcounter++;
 318:FWLIB/src/stm32f4xx_rcc.c ****   } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 319:FWLIB/src/stm32f4xx_rcc.c **** 
 320:FWLIB/src/stm32f4xx_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 321:FWLIB/src/stm32f4xx_rcc.c ****   {
 322:FWLIB/src/stm32f4xx_rcc.c ****     status = SUCCESS;
 323:FWLIB/src/stm32f4xx_rcc.c ****   }
 324:FWLIB/src/stm32f4xx_rcc.c ****   else
 325:FWLIB/src/stm32f4xx_rcc.c ****   {
 326:FWLIB/src/stm32f4xx_rcc.c ****     status = ERROR;
 327:FWLIB/src/stm32f4xx_rcc.c ****   }
 328:FWLIB/src/stm32f4xx_rcc.c ****   return (status);
 329:FWLIB/src/stm32f4xx_rcc.c **** }
 330:FWLIB/src/stm32f4xx_rcc.c **** 
 331:FWLIB/src/stm32f4xx_rcc.c **** /**
 332:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 333:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The calibration is used to compensate for the variations in voltage
 334:FWLIB/src/stm32f4xx_rcc.c ****   *         and temperature that influence the frequency of the internal HSI RC.
 335:FWLIB/src/stm32f4xx_rcc.c ****   * @param  HSICalibrationValue: specifies the calibration trimming value.
 336:FWLIB/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between 0 and 0x1F.
 337:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 338:FWLIB/src/stm32f4xx_rcc.c ****   */
 339:FWLIB/src/stm32f4xx_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 340:FWLIB/src/stm32f4xx_rcc.c **** {
 113              		.loc 1 340 0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117              		@ link register save eliminated.
 118              	.LVL1:
 341:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 342:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 343:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
ARM GAS  /tmp/cc6d9lwr.s 			page 9


 344:FWLIB/src/stm32f4xx_rcc.c **** 
 345:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CR;
 119              		.loc 1 345 0
 120 0000 034A     		ldr	r2, .L8
 121 0002 1368     		ldr	r3, [r2]
 122              	.LVL2:
 346:FWLIB/src/stm32f4xx_rcc.c **** 
 347:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 348:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CR_HSITRIM;
 123              		.loc 1 348 0
 124 0004 23F0F803 		bic	r3, r3, #248
 125              	.LVL3:
 349:FWLIB/src/stm32f4xx_rcc.c **** 
 350:FWLIB/src/stm32f4xx_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 351:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 126              		.loc 1 351 0
 127 0008 43EAC000 		orr	r0, r3, r0, lsl #3
 128              	.LVL4:
 352:FWLIB/src/stm32f4xx_rcc.c **** 
 353:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
 354:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CR = tmpreg;
 129              		.loc 1 354 0
 130 000c 1060     		str	r0, [r2]
 131 000e 7047     		bx	lr
 132              	.L9:
 133              		.align	2
 134              	.L8:
 135 0010 00380240 		.word	1073887232
 136              		.cfi_endproc
 137              	.LFE126:
 139              		.section	.text.RCC_HSICmd,"ax",%progbits
 140              		.align	1
 141              		.global	RCC_HSICmd
 142              		.syntax unified
 143              		.thumb
 144              		.thumb_func
 145              		.fpu fpv4-sp-d16
 147              	RCC_HSICmd:
 148              	.LFB127:
 355:FWLIB/src/stm32f4xx_rcc.c **** }
 356:FWLIB/src/stm32f4xx_rcc.c **** 
 357:FWLIB/src/stm32f4xx_rcc.c **** /**
 358:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 359:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The HSI is stopped by hardware when entering STOP and STANDBY modes.
 360:FWLIB/src/stm32f4xx_rcc.c ****   *         It is used (enabled by hardware) as system clock source after startup
 361:FWLIB/src/stm32f4xx_rcc.c ****   *         from Reset, wakeup from STOP and STANDBY mode, or in case of failure
 362:FWLIB/src/stm32f4xx_rcc.c ****   *         of the HSE used directly or indirectly as system clock (if the Clock
 363:FWLIB/src/stm32f4xx_rcc.c ****   *         Security System CSS is enabled).             
 364:FWLIB/src/stm32f4xx_rcc.c ****   * @note   HSI can not be stopped if it is used as system clock source. In this case,
 365:FWLIB/src/stm32f4xx_rcc.c ****   *         you have to select another source of the system clock then stop the HSI.  
 366:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After enabling the HSI, the application software should wait on HSIRDY
 367:FWLIB/src/stm32f4xx_rcc.c ****   *         flag to be set indicating that HSI clock is stable and can be used as
 368:FWLIB/src/stm32f4xx_rcc.c ****   *         system clock source.  
 369:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the HSI.
 370:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 371:FWLIB/src/stm32f4xx_rcc.c ****   * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
 372:FWLIB/src/stm32f4xx_rcc.c ****   *         clock cycles.  
ARM GAS  /tmp/cc6d9lwr.s 			page 10


 373:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 374:FWLIB/src/stm32f4xx_rcc.c ****   */
 375:FWLIB/src/stm32f4xx_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 376:FWLIB/src/stm32f4xx_rcc.c **** {
 149              		.loc 1 376 0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 0
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153              		@ link register save eliminated.
 154              	.LVL5:
 377:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 378:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 379:FWLIB/src/stm32f4xx_rcc.c **** 
 380:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 155              		.loc 1 380 0
 156 0000 014B     		ldr	r3, .L11
 157 0002 1860     		str	r0, [r3]
 158 0004 7047     		bx	lr
 159              	.L12:
 160 0006 00BF     		.align	2
 161              	.L11:
 162 0008 00004742 		.word	1111949312
 163              		.cfi_endproc
 164              	.LFE127:
 166              		.section	.text.RCC_LSEConfig,"ax",%progbits
 167              		.align	1
 168              		.global	RCC_LSEConfig
 169              		.syntax unified
 170              		.thumb
 171              		.thumb_func
 172              		.fpu fpv4-sp-d16
 174              	RCC_LSEConfig:
 175              	.LFB128:
 381:FWLIB/src/stm32f4xx_rcc.c **** }
 382:FWLIB/src/stm32f4xx_rcc.c **** 
 383:FWLIB/src/stm32f4xx_rcc.c **** /**
 384:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 385:FWLIB/src/stm32f4xx_rcc.c ****   * @note   As the LSE is in the Backup domain and write access is denied to
 386:FWLIB/src/stm32f4xx_rcc.c ****   *         this domain after reset, you have to enable write access using 
 387:FWLIB/src/stm32f4xx_rcc.c ****   *         PWR_BackupAccessCmd(ENABLE) function before to configure the LSE
 388:FWLIB/src/stm32f4xx_rcc.c ****   *         (to be done once after reset).  
 389:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After enabling the LSE (RCC_LSE_ON or RCC_LSE_Bypass), the application
 390:FWLIB/src/stm32f4xx_rcc.c ****   *         software should wait on LSERDY flag to be set indicating that LSE clock
 391:FWLIB/src/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the RTC.
 392:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 393:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 394:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_OFF: turn OFF the LSE oscillator, LSERDY flag goes low after
 395:FWLIB/src/stm32f4xx_rcc.c ****   *                              6 LSE oscillator clock cycles.
 396:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_ON: turn ON the LSE oscillator
 397:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 398:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 399:FWLIB/src/stm32f4xx_rcc.c ****   */
 400:FWLIB/src/stm32f4xx_rcc.c **** void RCC_LSEConfig(uint8_t RCC_LSE)
 401:FWLIB/src/stm32f4xx_rcc.c **** {
 176              		.loc 1 401 0
 177              		.cfi_startproc
 178              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc6d9lwr.s 			page 11


 179              		@ frame_needed = 0, uses_anonymous_args = 0
 180              		@ link register save eliminated.
 181              	.LVL6:
 402:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 403:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 404:FWLIB/src/stm32f4xx_rcc.c **** 
 405:FWLIB/src/stm32f4xx_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 406:FWLIB/src/stm32f4xx_rcc.c ****   /* Reset LSEON bit */
 407:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 182              		.loc 1 407 0
 183 0000 084B     		ldr	r3, .L17
 184 0002 0022     		movs	r2, #0
 185 0004 1A70     		strb	r2, [r3]
 408:FWLIB/src/stm32f4xx_rcc.c **** 
 409:FWLIB/src/stm32f4xx_rcc.c ****   /* Reset LSEBYP bit */
 410:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 186              		.loc 1 410 0
 187 0006 1A70     		strb	r2, [r3]
 411:FWLIB/src/stm32f4xx_rcc.c **** 
 412:FWLIB/src/stm32f4xx_rcc.c ****   /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
 413:FWLIB/src/stm32f4xx_rcc.c ****   switch (RCC_LSE)
 188              		.loc 1 413 0
 189 0008 0128     		cmp	r0, #1
 190 000a 02D0     		beq	.L15
 191 000c 0428     		cmp	r0, #4
 192 000e 04D0     		beq	.L16
 193 0010 7047     		bx	lr
 194              	.L15:
 414:FWLIB/src/stm32f4xx_rcc.c ****   {
 415:FWLIB/src/stm32f4xx_rcc.c ****     case RCC_LSE_ON:
 416:FWLIB/src/stm32f4xx_rcc.c ****       /* Set LSEON bit */
 417:FWLIB/src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 195              		.loc 1 417 0
 196 0012 0122     		movs	r2, #1
 197 0014 034B     		ldr	r3, .L17
 198 0016 1A70     		strb	r2, [r3]
 418:FWLIB/src/stm32f4xx_rcc.c ****       break;
 199              		.loc 1 418 0
 200 0018 7047     		bx	lr
 201              	.L16:
 419:FWLIB/src/stm32f4xx_rcc.c ****     case RCC_LSE_Bypass:
 420:FWLIB/src/stm32f4xx_rcc.c ****       /* Set LSEBYP and LSEON bits */
 421:FWLIB/src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 202              		.loc 1 421 0
 203 001a 0522     		movs	r2, #5
 204 001c 014B     		ldr	r3, .L17
 205 001e 1A70     		strb	r2, [r3]
 206 0020 7047     		bx	lr
 207              	.L18:
 208 0022 00BF     		.align	2
 209              	.L17:
 210 0024 70380240 		.word	1073887344
 211              		.cfi_endproc
 212              	.LFE128:
 214              		.section	.text.RCC_LSICmd,"ax",%progbits
 215              		.align	1
 216              		.global	RCC_LSICmd
ARM GAS  /tmp/cc6d9lwr.s 			page 12


 217              		.syntax unified
 218              		.thumb
 219              		.thumb_func
 220              		.fpu fpv4-sp-d16
 222              	RCC_LSICmd:
 223              	.LFB129:
 422:FWLIB/src/stm32f4xx_rcc.c ****       break;
 423:FWLIB/src/stm32f4xx_rcc.c ****     default:
 424:FWLIB/src/stm32f4xx_rcc.c ****       break;
 425:FWLIB/src/stm32f4xx_rcc.c ****   }
 426:FWLIB/src/stm32f4xx_rcc.c **** }
 427:FWLIB/src/stm32f4xx_rcc.c **** 
 428:FWLIB/src/stm32f4xx_rcc.c **** /**
 429:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 430:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After enabling the LSI, the application software should wait on 
 431:FWLIB/src/stm32f4xx_rcc.c ****   *         LSIRDY flag to be set indicating that LSI clock is stable and can
 432:FWLIB/src/stm32f4xx_rcc.c ****   *         be used to clock the IWDG and/or the RTC.
 433:FWLIB/src/stm32f4xx_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.  
 434:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the LSI.
 435:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 436:FWLIB/src/stm32f4xx_rcc.c ****   * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
 437:FWLIB/src/stm32f4xx_rcc.c ****   *         clock cycles. 
 438:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 439:FWLIB/src/stm32f4xx_rcc.c ****   */
 440:FWLIB/src/stm32f4xx_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 441:FWLIB/src/stm32f4xx_rcc.c **** {
 224              		.loc 1 441 0
 225              		.cfi_startproc
 226              		@ args = 0, pretend = 0, frame = 0
 227              		@ frame_needed = 0, uses_anonymous_args = 0
 228              		@ link register save eliminated.
 229              	.LVL7:
 442:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 443:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 444:FWLIB/src/stm32f4xx_rcc.c **** 
 445:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 230              		.loc 1 445 0
 231 0000 014B     		ldr	r3, .L20
 232 0002 1860     		str	r0, [r3]
 233 0004 7047     		bx	lr
 234              	.L21:
 235 0006 00BF     		.align	2
 236              	.L20:
 237 0008 800E4742 		.word	1111953024
 238              		.cfi_endproc
 239              	.LFE129:
 241              		.section	.text.RCC_PLLConfig,"ax",%progbits
 242              		.align	1
 243              		.global	RCC_PLLConfig
 244              		.syntax unified
 245              		.thumb
 246              		.thumb_func
 247              		.fpu fpv4-sp-d16
 249              	RCC_PLLConfig:
 250              	.LFB130:
 446:FWLIB/src/stm32f4xx_rcc.c **** }
 447:FWLIB/src/stm32f4xx_rcc.c **** 
ARM GAS  /tmp/cc6d9lwr.s 			page 13


 448:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F410xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx
 449:FWLIB/src/stm32f4xx_rcc.c **** /**
 450:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the main PLL clock source, multiplication and division factors.
 451:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the main PLL is disabled.
 452:FWLIB/src/stm32f4xx_rcc.c ****   *  
 453:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 454:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 455:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSI: HSI oscillator clock selected as PLL clock entry
 456:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSE: HSE oscillator clock selected as PLL clock entry
 457:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This clock source (RCC_PLLSource) is common for the main PLL and PLLI2S.  
 458:FWLIB/src/stm32f4xx_rcc.c ****   *  
 459:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLM: specifies the division factor for PLL VCO input clock
 460:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 0 and 63.
 461:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLM parameter correctly to ensure that the VCO input
 462:FWLIB/src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 463:FWLIB/src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLL jitter.
 464:FWLIB/src/stm32f4xx_rcc.c ****   *  
 465:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLN: specifies the multiplication factor for PLL VCO output clock
 466:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 467:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLN parameter correctly to ensure that the VCO
 468:FWLIB/src/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 469:FWLIB/src/stm32f4xx_rcc.c ****   *   
 470:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLP: specifies the division factor for main system clock (SYSCLK)
 471:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number in the range {2, 4, 6, or 8}.
 472:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLP parameter correctly to not exceed 168 MHz on
 473:FWLIB/src/stm32f4xx_rcc.c ****   *         the System clock frequency.
 474:FWLIB/src/stm32f4xx_rcc.c ****   *  
 475:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLQ: specifies the division factor for OTG FS, SDIO and RNG clocks
 476:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 4 and 15.
 477:FWLIB/src/stm32f4xx_rcc.c ****   *
 478:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLR: specifies the division factor for I2S, SAI, SYSTEM, SPDIF in STM32F446xx devices
 479:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 480:FWLIB/src/stm32f4xx_rcc.c ****   *
 481:FWLIB/src/stm32f4xx_rcc.c ****   * @note   If the USB OTG FS is used in your application, you have to set the
 482:FWLIB/src/stm32f4xx_rcc.c ****   *         PLLQ parameter correctly to have 48 MHz clock for the USB. However,
 483:FWLIB/src/stm32f4xx_rcc.c ****   *         the SDIO and RNG need a frequency lower than or equal to 48 MHz to work
 484:FWLIB/src/stm32f4xx_rcc.c ****   *         correctly.
 485:FWLIB/src/stm32f4xx_rcc.c ****   *   
 486:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 487:FWLIB/src/stm32f4xx_rcc.c ****   */
 488:FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PL
 489:FWLIB/src/stm32f4xx_rcc.c **** {
 490:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 491:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 492:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLM_VALUE(PLLM));
 493:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLN_VALUE(PLLN));
 494:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLP_VALUE(PLLP));
 495:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
 496:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLR_VALUE(PLLR));
 497:FWLIB/src/stm32f4xx_rcc.c ****   
 498:FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 499:FWLIB/src/stm32f4xx_rcc.c ****                  (PLLQ << 24) | (PLLR << 28);
 500:FWLIB/src/stm32f4xx_rcc.c **** }
 501:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F410xx || STM32F412xG || STM32F413_423xx || STM32F446xx || STM32F469_479xx */
 502:FWLIB/src/stm32f4xx_rcc.c **** 
 503:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
 504:FWLIB/src/stm32f4xx_rcc.c **** /**
ARM GAS  /tmp/cc6d9lwr.s 			page 14


 505:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the main PLL clock source, multiplication and division factors.
 506:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the main PLL is disabled.
 507:FWLIB/src/stm32f4xx_rcc.c ****   *  
 508:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 509:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 510:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSI: HSI oscillator clock selected as PLL clock entry
 511:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSE: HSE oscillator clock selected as PLL clock entry
 512:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This clock source (RCC_PLLSource) is common for the main PLL and PLLI2S.  
 513:FWLIB/src/stm32f4xx_rcc.c ****   *  
 514:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLM: specifies the division factor for PLL VCO input clock
 515:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 0 and 63.
 516:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLM parameter correctly to ensure that the VCO input
 517:FWLIB/src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 518:FWLIB/src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLL jitter.
 519:FWLIB/src/stm32f4xx_rcc.c ****   *  
 520:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLN: specifies the multiplication factor for PLL VCO output clock
 521:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 522:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLN parameter correctly to ensure that the VCO
 523:FWLIB/src/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 524:FWLIB/src/stm32f4xx_rcc.c ****   *   
 525:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLP: specifies the division factor for main system clock (SYSCLK)
 526:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number in the range {2, 4, 6, or 8}.
 527:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLP parameter correctly to not exceed 168 MHz on
 528:FWLIB/src/stm32f4xx_rcc.c ****   *         the System clock frequency.
 529:FWLIB/src/stm32f4xx_rcc.c ****   *  
 530:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLQ: specifies the division factor for OTG FS, SDIO and RNG clocks
 531:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 4 and 15.
 532:FWLIB/src/stm32f4xx_rcc.c ****   * @note   If the USB OTG FS is used in your application, you have to set the
 533:FWLIB/src/stm32f4xx_rcc.c ****   *         PLLQ parameter correctly to have 48 MHz clock for the USB. However,
 534:FWLIB/src/stm32f4xx_rcc.c ****   *         the SDIO and RNG need a frequency lower than or equal to 48 MHz to work
 535:FWLIB/src/stm32f4xx_rcc.c ****   *         correctly.
 536:FWLIB/src/stm32f4xx_rcc.c ****   *   
 537:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 538:FWLIB/src/stm32f4xx_rcc.c ****   */
 539:FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PL
 540:FWLIB/src/stm32f4xx_rcc.c **** {
 251              		.loc 1 540 0
 252              		.cfi_startproc
 253              		@ args = 4, pretend = 0, frame = 0
 254              		@ frame_needed = 0, uses_anonymous_args = 0
 255              		@ link register save eliminated.
 256              	.LVL8:
 541:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 542:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 543:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLM_VALUE(PLLM));
 544:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLN_VALUE(PLLN));
 545:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLP_VALUE(PLLP));
 546:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
 547:FWLIB/src/stm32f4xx_rcc.c **** 
 548:FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 257              		.loc 1 548 0
 258 0000 41EA8211 		orr	r1, r1, r2, lsl #6
 259              	.LVL9:
 260 0004 5B08     		lsrs	r3, r3, #1
 261              	.LVL10:
 262 0006 013B     		subs	r3, r3, #1
 263 0008 41EA0341 		orr	r1, r1, r3, lsl #16
ARM GAS  /tmp/cc6d9lwr.s 			page 15


 264 000c 0143     		orrs	r1, r1, r0
 265 000e 0098     		ldr	r0, [sp]
 266              	.LVL11:
 267 0010 41EA0061 		orr	r1, r1, r0, lsl #24
 268 0014 014B     		ldr	r3, .L23
 269 0016 5960     		str	r1, [r3, #4]
 270              	.LVL12:
 271 0018 7047     		bx	lr
 272              	.L24:
 273 001a 00BF     		.align	2
 274              	.L23:
 275 001c 00380240 		.word	1073887232
 276              		.cfi_endproc
 277              	.LFE130:
 279              		.section	.text.RCC_PLLCmd,"ax",%progbits
 280              		.align	1
 281              		.global	RCC_PLLCmd
 282              		.syntax unified
 283              		.thumb
 284              		.thumb_func
 285              		.fpu fpv4-sp-d16
 287              	RCC_PLLCmd:
 288              	.LFB131:
 549:FWLIB/src/stm32f4xx_rcc.c ****                  (PLLQ << 24);
 550:FWLIB/src/stm32f4xx_rcc.c **** }
 551:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE */
 552:FWLIB/src/stm32f4xx_rcc.c **** 
 553:FWLIB/src/stm32f4xx_rcc.c **** /**
 554:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the main PLL.
 555:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After enabling the main PLL, the application software should wait on 
 556:FWLIB/src/stm32f4xx_rcc.c ****   *         PLLRDY flag to be set indicating that PLL clock is stable and can
 557:FWLIB/src/stm32f4xx_rcc.c ****   *         be used as system clock source.
 558:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The main PLL can not be disabled if it is used as system clock source
 559:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
 560:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
 561:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 562:FWLIB/src/stm32f4xx_rcc.c ****   */
 563:FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 564:FWLIB/src/stm32f4xx_rcc.c **** {
 289              		.loc 1 564 0
 290              		.cfi_startproc
 291              		@ args = 0, pretend = 0, frame = 0
 292              		@ frame_needed = 0, uses_anonymous_args = 0
 293              		@ link register save eliminated.
 294              	.LVL13:
 565:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 566:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 567:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 295              		.loc 1 567 0
 296 0000 014B     		ldr	r3, .L26
 297 0002 1860     		str	r0, [r3]
 298 0004 7047     		bx	lr
 299              	.L27:
 300 0006 00BF     		.align	2
 301              	.L26:
 302 0008 60004742 		.word	1111949408
 303              		.cfi_endproc
ARM GAS  /tmp/cc6d9lwr.s 			page 16


 304              	.LFE131:
 306              		.section	.text.RCC_PLLI2SConfig,"ax",%progbits
 307              		.align	1
 308              		.global	RCC_PLLI2SConfig
 309              		.syntax unified
 310              		.thumb
 311              		.thumb_func
 312              		.fpu fpv4-sp-d16
 314              	RCC_PLLI2SConfig:
 315              	.LFB132:
 568:FWLIB/src/stm32f4xx_rcc.c **** }
 569:FWLIB/src/stm32f4xx_rcc.c **** 
 570:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F401xx)
 571:FWLIB/src/stm32f4xx_rcc.c **** /**
 572:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 573:FWLIB/src/stm32f4xx_rcc.c ****   *  
 574:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F405xx/407xx, STM32F415xx/417xx 
 575:FWLIB/src/stm32f4xx_rcc.c ****   *         or STM32F401xx devices. 
 576:FWLIB/src/stm32f4xx_rcc.c ****   *    
 577:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 578:FWLIB/src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 579:FWLIB/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 580:FWLIB/src/stm32f4xx_rcc.c ****   *             
 581:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 582:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 583:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 584:FWLIB/src/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 585:FWLIB/src/stm32f4xx_rcc.c ****   *    
 586:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 587:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 588:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 589:FWLIB/src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 590:FWLIB/src/stm32f4xx_rcc.c ****   *   
 591:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 592:FWLIB/src/stm32f4xx_rcc.c ****   */
 593:FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
 594:FWLIB/src/stm32f4xx_rcc.c **** {
 316              		.loc 1 594 0
 317              		.cfi_startproc
 318              		@ args = 0, pretend = 0, frame = 0
 319              		@ frame_needed = 0, uses_anonymous_args = 0
 320              		@ link register save eliminated.
 321              	.LVL14:
 595:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 596:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 597:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 598:FWLIB/src/stm32f4xx_rcc.c **** 
 599:FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 322              		.loc 1 599 0
 323 0000 0907     		lsls	r1, r1, #28
 324              	.LVL15:
 325 0002 41EA8011 		orr	r1, r1, r0, lsl #6
 326 0006 024B     		ldr	r3, .L29
 327 0008 C3F88410 		str	r1, [r3, #132]
 328 000c 7047     		bx	lr
 329              	.L30:
 330 000e 00BF     		.align	2
ARM GAS  /tmp/cc6d9lwr.s 			page 17


 331              	.L29:
 332 0010 00380240 		.word	1073887232
 333              		.cfi_endproc
 334              	.LFE132:
 336              		.section	.text.RCC_PLLI2SCmd,"ax",%progbits
 337              		.align	1
 338              		.global	RCC_PLLI2SCmd
 339              		.syntax unified
 340              		.thumb
 341              		.thumb_func
 342              		.fpu fpv4-sp-d16
 344              	RCC_PLLI2SCmd:
 345              	.LFB133:
 600:FWLIB/src/stm32f4xx_rcc.c **** }
 601:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F401xx */
 602:FWLIB/src/stm32f4xx_rcc.c **** 
 603:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F411xE)
 604:FWLIB/src/stm32f4xx_rcc.c **** /**
 605:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 606:FWLIB/src/stm32f4xx_rcc.c ****   *  
 607:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F411xE devices. 
 608:FWLIB/src/stm32f4xx_rcc.c ****   *    
 609:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 610:FWLIB/src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 611:FWLIB/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 612:FWLIB/src/stm32f4xx_rcc.c ****   *
 613:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SM: specifies the division factor for PLLI2S VCO input clock
 614:FWLIB/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between Min_Data = 2 and Max_Data = 63.
 615:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SM parameter correctly to ensure that the VCO input
 616:FWLIB/src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 617:FWLIB/src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLLI2S jitter.
 618:FWLIB/src/stm32f4xx_rcc.c ****   *
 619:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 620:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 621:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 622:FWLIB/src/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 623:FWLIB/src/stm32f4xx_rcc.c ****   *    
 624:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 625:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 626:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 627:FWLIB/src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 628:FWLIB/src/stm32f4xx_rcc.c ****   *   
 629:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 630:FWLIB/src/stm32f4xx_rcc.c ****   */
 631:FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR, uint32_t PLLI2SM)
 632:FWLIB/src/stm32f4xx_rcc.c **** {
 633:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 634:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 635:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SM_VALUE(PLLI2SM));
 636:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 637:FWLIB/src/stm32f4xx_rcc.c **** 
 638:FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28) | PLLI2SM;
 639:FWLIB/src/stm32f4xx_rcc.c **** }
 640:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F411xE */
 641:FWLIB/src/stm32f4xx_rcc.c **** 
 642:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F469_479xx)
 643:FWLIB/src/stm32f4xx_rcc.c **** /**
ARM GAS  /tmp/cc6d9lwr.s 			page 18


 644:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 645:FWLIB/src/stm32f4xx_rcc.c ****   * 
 646:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices 
 647:FWLIB/src/stm32f4xx_rcc.c ****   *         
 648:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 649:FWLIB/src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 650:FWLIB/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 651:FWLIB/src/stm32f4xx_rcc.c ****   *             
 652:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 653:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 654:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 655:FWLIB/src/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 656:FWLIB/src/stm32f4xx_rcc.c ****   * 
 657:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SQ: specifies the division factor for SAI1 clock
 658:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 15.
 659:FWLIB/src/stm32f4xx_rcc.c ****   *                 
 660:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 661:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 662:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 663:FWLIB/src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 664:FWLIB/src/stm32f4xx_rcc.c ****   *   
 665:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 666:FWLIB/src/stm32f4xx_rcc.c ****   */
 667:FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SQ, uint32_t PLLI2SR)
 668:FWLIB/src/stm32f4xx_rcc.c **** {
 669:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 670:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 671:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SQ));
 672:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 673:FWLIB/src/stm32f4xx_rcc.c **** 
 674:FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SQ << 24) | (PLLI2SR << 28);
 675:FWLIB/src/stm32f4xx_rcc.c **** }
 676:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F427_437xx || STM32F429_439xx || STM32F469_479xx */
 677:FWLIB/src/stm32f4xx_rcc.c **** 
 678:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F412xG ) || defined(STM32F413_423xx) || defined(STM32F446xx)
 679:FWLIB/src/stm32f4xx_rcc.c **** /**
 680:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 681:FWLIB/src/stm32f4xx_rcc.c ****   * 
 682:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F446xx devices 
 683:FWLIB/src/stm32f4xx_rcc.c ****   *         
 684:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 685:FWLIB/src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 686:FWLIB/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 687:FWLIB/src/stm32f4xx_rcc.c ****   * 
 688:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SM: specifies the division factor for PLLI2S VCO input clock
 689:FWLIB/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between Min_Data = 2 and Max_Data = 63.
 690:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SM parameter correctly to ensure that the VCO input
 691:FWLIB/src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 692:FWLIB/src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLLI2S jitter.
 693:FWLIB/src/stm32f4xx_rcc.c ****   *
 694:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 695:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 696:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 697:FWLIB/src/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 698:FWLIB/src/stm32f4xx_rcc.c ****   *
 699:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SP: specifies the division factor for PLL 48Mhz clock output
 700:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number in the range {2, 4, 6, or 8}.
ARM GAS  /tmp/cc6d9lwr.s 			page 19


 701:FWLIB/src/stm32f4xx_rcc.c ****   *
 702:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SQ: specifies the division factor for SAI1 clock
 703:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 15.
 704:FWLIB/src/stm32f4xx_rcc.c ****   *                 
 705:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 706:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 707:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 708:FWLIB/src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 709:FWLIB/src/stm32f4xx_rcc.c ****   * @note   the PLLI2SR parameter is only available with STM32F42xxx/43xxx devices.  
 710:FWLIB/src/stm32f4xx_rcc.c ****   *   
 711:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 712:FWLIB/src/stm32f4xx_rcc.c ****   */
 713:FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SM, uint32_t PLLI2SN, uint32_t PLLI2SP, uint32_t PLLI2SQ, uint3
 714:FWLIB/src/stm32f4xx_rcc.c **** {
 715:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 716:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SM_VALUE(PLLI2SM));
 717:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 718:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SP_VALUE(PLLI2SP));
 719:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SQ));
 720:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 721:FWLIB/src/stm32f4xx_rcc.c **** 
 722:FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR =  PLLI2SM | (PLLI2SN << 6) | (((PLLI2SP >> 1) -1) << 16) | (PLLI2SQ << 24) | (PL
 723:FWLIB/src/stm32f4xx_rcc.c **** }
 724:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
 725:FWLIB/src/stm32f4xx_rcc.c **** 
 726:FWLIB/src/stm32f4xx_rcc.c **** /**
 727:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the PLLI2S. 
 728:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
 729:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
 730:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 731:FWLIB/src/stm32f4xx_rcc.c ****   */
 732:FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLI2SCmd(FunctionalState NewState)
 733:FWLIB/src/stm32f4xx_rcc.c **** {
 346              		.loc 1 733 0
 347              		.cfi_startproc
 348              		@ args = 0, pretend = 0, frame = 0
 349              		@ frame_needed = 0, uses_anonymous_args = 0
 350              		@ link register save eliminated.
 351              	.LVL16:
 734:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 735:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 736:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 352              		.loc 1 736 0
 353 0000 014B     		ldr	r3, .L32
 354 0002 1860     		str	r0, [r3]
 355 0004 7047     		bx	lr
 356              	.L33:
 357 0006 00BF     		.align	2
 358              	.L32:
 359 0008 68004742 		.word	1111949416
 360              		.cfi_endproc
 361              	.LFE133:
 363              		.section	.text.RCC_PLLSAIConfig,"ax",%progbits
 364              		.align	1
 365              		.global	RCC_PLLSAIConfig
 366              		.syntax unified
 367              		.thumb
ARM GAS  /tmp/cc6d9lwr.s 			page 20


 368              		.thumb_func
 369              		.fpu fpv4-sp-d16
 371              	RCC_PLLSAIConfig:
 372              	.LFB134:
 737:FWLIB/src/stm32f4xx_rcc.c **** }
 738:FWLIB/src/stm32f4xx_rcc.c **** 
 739:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F469_479xx)
 740:FWLIB/src/stm32f4xx_rcc.c **** /**
 741:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLSAI clock multiplication and division factors.
 742:FWLIB/src/stm32f4xx_rcc.c ****   *
 743:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F469_479xx devices 
 744:FWLIB/src/stm32f4xx_rcc.c ****   *        
 745:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLSAI is disabled.
 746:FWLIB/src/stm32f4xx_rcc.c ****   * @note   PLLSAI clock source is common with the main PLL (configured in 
 747:FWLIB/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 748:FWLIB/src/stm32f4xx_rcc.c ****   *
 749:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLSAIN: specifies the multiplication factor for PLLSAI VCO output clock
 750:FWLIB/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between 50 and 432.
 751:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLSAIN parameter correctly to ensure that the VCO 
 752:FWLIB/src/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 753:FWLIB/src/stm32f4xx_rcc.c ****   *
 754:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLSAIP: specifies the division factor for PLL 48Mhz clock output
 755:FWLIB/src/stm32f4xx_rcc.c ****   *         This parameter must be a number in the range {2, 4, 6, or 8}..
 756:FWLIB/src/stm32f4xx_rcc.c ****   *           
 757:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLSAIQ: specifies the division factor for SAI1 clock
 758:FWLIB/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between 2 and 15.
 759:FWLIB/src/stm32f4xx_rcc.c ****   *            
 760:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLSAIR: specifies the division factor for LTDC clock
 761:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 762:FWLIB/src/stm32f4xx_rcc.c ****   *   
 763:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 764:FWLIB/src/stm32f4xx_rcc.c ****   */
 765:FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIP, uint32_t PLLSAIQ, uint32_t PLLSAIR)
 766:FWLIB/src/stm32f4xx_rcc.c **** {
 767:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 768:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
 769:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIP_VALUE(PLLSAIP));
 770:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
 771:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
 772:FWLIB/src/stm32f4xx_rcc.c **** 
 773:FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLSAICFGR = (PLLSAIN << 6) | (((PLLSAIP >> 1) -1) << 16) | (PLLSAIQ << 24) | (PLLSAIR << 28
 774:FWLIB/src/stm32f4xx_rcc.c **** }
 775:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F469_479xx */
 776:FWLIB/src/stm32f4xx_rcc.c **** 
 777:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F446xx)
 778:FWLIB/src/stm32f4xx_rcc.c **** /**
 779:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLSAI clock multiplication and division factors.
 780:FWLIB/src/stm32f4xx_rcc.c ****   *
 781:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F446xx devices 
 782:FWLIB/src/stm32f4xx_rcc.c ****   *        
 783:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLSAI is disabled.
 784:FWLIB/src/stm32f4xx_rcc.c ****   * @note   PLLSAI clock source is common with the main PLL (configured in 
 785:FWLIB/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 786:FWLIB/src/stm32f4xx_rcc.c ****   * 
 787:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLSAIM: specifies the division factor for PLLSAI VCO input clock
 788:FWLIB/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between Min_Data = 2 and Max_Data = 63.
 789:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLSAIM parameter correctly to ensure that the VCO input
ARM GAS  /tmp/cc6d9lwr.s 			page 21


 790:FWLIB/src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 791:FWLIB/src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLLSAI jitter.
 792:FWLIB/src/stm32f4xx_rcc.c ****   *
 793:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLSAIN: specifies the multiplication factor for PLLSAI VCO output clock
 794:FWLIB/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between 50 and 432.
 795:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLSAIN parameter correctly to ensure that the VCO 
 796:FWLIB/src/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 797:FWLIB/src/stm32f4xx_rcc.c ****   * 
 798:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLSAIP: specifies the division factor for PLL 48Mhz clock output
 799:FWLIB/src/stm32f4xx_rcc.c ****   *         This parameter must be a number in the range {2, 4, 6, or 8}.
 800:FWLIB/src/stm32f4xx_rcc.c ****   *
 801:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLSAIQ: specifies the division factor for SAI1 clock
 802:FWLIB/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between 2 and 15.
 803:FWLIB/src/stm32f4xx_rcc.c ****   *   
 804:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 805:FWLIB/src/stm32f4xx_rcc.c ****   */
 806:FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLSAIConfig(uint32_t PLLSAIM, uint32_t PLLSAIN, uint32_t PLLSAIP, uint32_t PLLSAIQ)
 807:FWLIB/src/stm32f4xx_rcc.c **** {
 808:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 809:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIM_VALUE(PLLSAIM));
 810:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
 811:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIP_VALUE(PLLSAIP));
 812:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
 813:FWLIB/src/stm32f4xx_rcc.c **** 
 814:FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLSAICFGR = PLLSAIM | (PLLSAIN << 6) | (((PLLSAIP >> 1) -1) << 16)  | (PLLSAIQ << 24);
 815:FWLIB/src/stm32f4xx_rcc.c **** }
 816:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F446xx */
 817:FWLIB/src/stm32f4xx_rcc.c **** 
 818:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
 819:FWLIB/src/stm32f4xx_rcc.c **** /**
 820:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLSAI clock multiplication and division factors.
 821:FWLIB/src/stm32f4xx_rcc.c ****   *
 822:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices 
 823:FWLIB/src/stm32f4xx_rcc.c ****   *        
 824:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLSAI is disabled.
 825:FWLIB/src/stm32f4xx_rcc.c ****   * @note   PLLSAI clock source is common with the main PLL (configured in 
 826:FWLIB/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 827:FWLIB/src/stm32f4xx_rcc.c ****   *             
 828:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLSAIN: specifies the multiplication factor for PLLSAI VCO output clock
 829:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 830:FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLSAIN parameter correctly to ensure that the VCO 
 831:FWLIB/src/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 832:FWLIB/src/stm32f4xx_rcc.c ****   *           
 833:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLSAIQ: specifies the division factor for SAI1 clock
 834:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 15.
 835:FWLIB/src/stm32f4xx_rcc.c ****   *            
 836:FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLSAIR: specifies the division factor for LTDC clock
 837:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 838:FWLIB/src/stm32f4xx_rcc.c ****   *   
 839:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 840:FWLIB/src/stm32f4xx_rcc.c ****   */
 841:FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
 842:FWLIB/src/stm32f4xx_rcc.c **** {
 373              		.loc 1 842 0
 374              		.cfi_startproc
 375              		@ args = 0, pretend = 0, frame = 0
 376              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc6d9lwr.s 			page 22


 377              		@ link register save eliminated.
 378              	.LVL17:
 843:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 844:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
 845:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
 846:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
 847:FWLIB/src/stm32f4xx_rcc.c ****   
 848:FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 379              		.loc 1 848 0
 380 0000 0906     		lsls	r1, r1, #24
 381              	.LVL18:
 382 0002 41EA8011 		orr	r1, r1, r0, lsl #6
 383 0006 41EA0271 		orr	r1, r1, r2, lsl #28
 384 000a 024B     		ldr	r3, .L35
 385 000c C3F88810 		str	r1, [r3, #136]
 386 0010 7047     		bx	lr
 387              	.L36:
 388 0012 00BF     		.align	2
 389              	.L35:
 390 0014 00380240 		.word	1073887232
 391              		.cfi_endproc
 392              	.LFE134:
 394              		.section	.text.RCC_PLLSAICmd,"ax",%progbits
 395              		.align	1
 396              		.global	RCC_PLLSAICmd
 397              		.syntax unified
 398              		.thumb
 399              		.thumb_func
 400              		.fpu fpv4-sp-d16
 402              	RCC_PLLSAICmd:
 403              	.LFB135:
 849:FWLIB/src/stm32f4xx_rcc.c **** }
 850:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE */
 851:FWLIB/src/stm32f4xx_rcc.c **** 
 852:FWLIB/src/stm32f4xx_rcc.c **** /**
 853:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the PLLSAI. 
 854:FWLIB/src/stm32f4xx_rcc.c ****   * 
 855:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx/446xx/469xx/479xx devices 
 856:FWLIB/src/stm32f4xx_rcc.c ****   *       
 857:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
 858:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
 859:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 860:FWLIB/src/stm32f4xx_rcc.c ****   */
 861:FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLSAICmd(FunctionalState NewState)
 862:FWLIB/src/stm32f4xx_rcc.c **** {
 404              		.loc 1 862 0
 405              		.cfi_startproc
 406              		@ args = 0, pretend = 0, frame = 0
 407              		@ frame_needed = 0, uses_anonymous_args = 0
 408              		@ link register save eliminated.
 409              	.LVL19:
 863:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 864:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 865:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 410              		.loc 1 865 0
 411 0000 014B     		ldr	r3, .L38
 412 0002 1860     		str	r0, [r3]
ARM GAS  /tmp/cc6d9lwr.s 			page 23


 413 0004 7047     		bx	lr
 414              	.L39:
 415 0006 00BF     		.align	2
 416              	.L38:
 417 0008 70004742 		.word	1111949424
 418              		.cfi_endproc
 419              	.LFE135:
 421              		.section	.text.RCC_ClockSecuritySystemCmd,"ax",%progbits
 422              		.align	1
 423              		.global	RCC_ClockSecuritySystemCmd
 424              		.syntax unified
 425              		.thumb
 426              		.thumb_func
 427              		.fpu fpv4-sp-d16
 429              	RCC_ClockSecuritySystemCmd:
 430              	.LFB136:
 866:FWLIB/src/stm32f4xx_rcc.c **** }
 867:FWLIB/src/stm32f4xx_rcc.c **** 
 868:FWLIB/src/stm32f4xx_rcc.c **** /**
 869:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Clock Security System.
 870:FWLIB/src/stm32f4xx_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 871:FWLIB/src/stm32f4xx_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 872:FWLIB/src/stm32f4xx_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 873:FWLIB/src/stm32f4xx_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
 874:FWLIB/src/stm32f4xx_rcc.c ****   *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
 875:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Clock Security System.
 876:FWLIB/src/stm32f4xx_rcc.c ****   *         This parameter can be: ENABLE or DISABLE.
 877:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 878:FWLIB/src/stm32f4xx_rcc.c ****   */
 879:FWLIB/src/stm32f4xx_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
 880:FWLIB/src/stm32f4xx_rcc.c **** {
 431              		.loc 1 880 0
 432              		.cfi_startproc
 433              		@ args = 0, pretend = 0, frame = 0
 434              		@ frame_needed = 0, uses_anonymous_args = 0
 435              		@ link register save eliminated.
 436              	.LVL20:
 881:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 882:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 883:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 437              		.loc 1 883 0
 438 0000 014B     		ldr	r3, .L41
 439 0002 1860     		str	r0, [r3]
 440 0004 7047     		bx	lr
 441              	.L42:
 442 0006 00BF     		.align	2
 443              	.L41:
 444 0008 4C004742 		.word	1111949388
 445              		.cfi_endproc
 446              	.LFE136:
 448              		.section	.text.RCC_MCO1Config,"ax",%progbits
 449              		.align	1
 450              		.global	RCC_MCO1Config
 451              		.syntax unified
 452              		.thumb
 453              		.thumb_func
 454              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cc6d9lwr.s 			page 24


 456              	RCC_MCO1Config:
 457              	.LFB137:
 884:FWLIB/src/stm32f4xx_rcc.c **** }
 885:FWLIB/src/stm32f4xx_rcc.c **** 
 886:FWLIB/src/stm32f4xx_rcc.c **** /**
 887:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO1 pin(PA8).
 888:FWLIB/src/stm32f4xx_rcc.c ****   * @note   PA8 should be configured in alternate function mode.
 889:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Source: specifies the clock source to output.
 890:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 891:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSI: HSI clock selected as MCO1 source
 892:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_LSE: LSE clock selected as MCO1 source
 893:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSE: HSE clock selected as MCO1 source
 894:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_PLLCLK: main PLL clock selected as MCO1 source
 895:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Div: specifies the MCO1 prescaler.
 896:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 897:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_1: no division applied to MCO1 clock
 898:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_2: division by 2 applied to MCO1 clock
 899:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_3: division by 3 applied to MCO1 clock
 900:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
 901:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
 902:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 903:FWLIB/src/stm32f4xx_rcc.c ****   */
 904:FWLIB/src/stm32f4xx_rcc.c **** void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
 905:FWLIB/src/stm32f4xx_rcc.c **** {
 458              		.loc 1 905 0
 459              		.cfi_startproc
 460              		@ args = 0, pretend = 0, frame = 0
 461              		@ frame_needed = 0, uses_anonymous_args = 0
 462              		@ link register save eliminated.
 463              	.LVL21:
 906:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 907:FWLIB/src/stm32f4xx_rcc.c ****   
 908:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 909:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
 910:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  
 911:FWLIB/src/stm32f4xx_rcc.c **** 
 912:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 464              		.loc 1 912 0
 465 0000 034A     		ldr	r2, .L44
 466 0002 9368     		ldr	r3, [r2, #8]
 467              	.LVL22:
 913:FWLIB/src/stm32f4xx_rcc.c **** 
 914:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
 915:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO1_RESET_MASK;
 468              		.loc 1 915 0
 469 0004 23F0EC63 		bic	r3, r3, #123731968
 470              	.LVL23:
 916:FWLIB/src/stm32f4xx_rcc.c **** 
 917:FWLIB/src/stm32f4xx_rcc.c ****   /* Select MCO1 clock source and prescaler */
 918:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 471              		.loc 1 918 0
 472 0008 0143     		orrs	r1, r1, r0
 473              	.LVL24:
 474 000a 0B43     		orrs	r3, r3, r1
 475              	.LVL25:
 919:FWLIB/src/stm32f4xx_rcc.c ****   
 920:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
ARM GAS  /tmp/cc6d9lwr.s 			page 25


 921:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 476              		.loc 1 921 0
 477 000c 9360     		str	r3, [r2, #8]
 478 000e 7047     		bx	lr
 479              	.L45:
 480              		.align	2
 481              	.L44:
 482 0010 00380240 		.word	1073887232
 483              		.cfi_endproc
 484              	.LFE137:
 486              		.section	.text.RCC_MCO2Config,"ax",%progbits
 487              		.align	1
 488              		.global	RCC_MCO2Config
 489              		.syntax unified
 490              		.thumb
 491              		.thumb_func
 492              		.fpu fpv4-sp-d16
 494              	RCC_MCO2Config:
 495              	.LFB138:
 922:FWLIB/src/stm32f4xx_rcc.c **** 
 923:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F410xx)
 924:FWLIB/src/stm32f4xx_rcc.c ****   RCC_MCO1Cmd(ENABLE);
 925:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F410xx */   
 926:FWLIB/src/stm32f4xx_rcc.c **** }
 927:FWLIB/src/stm32f4xx_rcc.c **** 
 928:FWLIB/src/stm32f4xx_rcc.c **** /**
 929:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO2 pin(PC9).
 930:FWLIB/src/stm32f4xx_rcc.c ****   * @note   PC9 should be configured in alternate function mode.
 931:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Source: specifies the clock source to output.
 932:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 933:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_SYSCLK: System clock (SYSCLK) selected as MCO2 source
 934:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2SOURCE_PLLI2SCLK: PLLI2S clock selected as MCO2 source, available for a
 935:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2SOURCE_I2SCLK: I2SCLK clock selected as MCO2 source, available only for
 936:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_HSE: HSE clock selected as MCO2 source
 937:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLCLK: main PLL clock selected as MCO2 source
 938:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Div: specifies the MCO2 prescaler.
 939:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 940:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_1: no division applied to MCO2 clock
 941:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_2: division by 2 applied to MCO2 clock
 942:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_3: division by 3 applied to MCO2 clock
 943:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
 944:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
 945:FWLIB/src/stm32f4xx_rcc.c ****   * @note  For STM32F410xx devices to output I2SCLK clock on MCO2 you should have
 946:FWLIB/src/stm32f4xx_rcc.c ****   *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
 947:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 948:FWLIB/src/stm32f4xx_rcc.c ****   */
 949:FWLIB/src/stm32f4xx_rcc.c **** void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
 950:FWLIB/src/stm32f4xx_rcc.c **** {
 496              		.loc 1 950 0
 497              		.cfi_startproc
 498              		@ args = 0, pretend = 0, frame = 0
 499              		@ frame_needed = 0, uses_anonymous_args = 0
 500              		@ link register save eliminated.
 501              	.LVL26:
 951:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 952:FWLIB/src/stm32f4xx_rcc.c ****   
 953:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
ARM GAS  /tmp/cc6d9lwr.s 			page 26


 954:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
 955:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
 956:FWLIB/src/stm32f4xx_rcc.c ****   
 957:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 502              		.loc 1 957 0
 503 0000 034A     		ldr	r2, .L47
 504 0002 9368     		ldr	r3, [r2, #8]
 505              	.LVL27:
 958:FWLIB/src/stm32f4xx_rcc.c ****   
 959:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear MCO2 and MCO2PRE[2:0] bits */
 960:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO2_RESET_MASK;
 506              		.loc 1 960 0
 507 0004 23F07843 		bic	r3, r3, #-134217728
 508              	.LVL28:
 961:FWLIB/src/stm32f4xx_rcc.c **** 
 962:FWLIB/src/stm32f4xx_rcc.c ****   /* Select MCO2 clock source and prescaler */
 963:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 509              		.loc 1 963 0
 510 0008 0143     		orrs	r1, r1, r0
 511              	.LVL29:
 512 000a 0B43     		orrs	r3, r3, r1
 513              	.LVL30:
 964:FWLIB/src/stm32f4xx_rcc.c ****   
 965:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
 966:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 514              		.loc 1 966 0
 515 000c 9360     		str	r3, [r2, #8]
 516 000e 7047     		bx	lr
 517              	.L48:
 518              		.align	2
 519              	.L47:
 520 0010 00380240 		.word	1073887232
 521              		.cfi_endproc
 522              	.LFE138:
 524              		.section	.text.RCC_SYSCLKConfig,"ax",%progbits
 525              		.align	1
 526              		.global	RCC_SYSCLKConfig
 527              		.syntax unified
 528              		.thumb
 529              		.thumb_func
 530              		.fpu fpv4-sp-d16
 532              	RCC_SYSCLKConfig:
 533              	.LFB139:
 967:FWLIB/src/stm32f4xx_rcc.c **** 
 968:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F410xx)
 969:FWLIB/src/stm32f4xx_rcc.c ****   RCC_MCO2Cmd(ENABLE);
 970:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F410xx */   
 971:FWLIB/src/stm32f4xx_rcc.c **** }
 972:FWLIB/src/stm32f4xx_rcc.c **** 
 973:FWLIB/src/stm32f4xx_rcc.c **** /**
 974:FWLIB/src/stm32f4xx_rcc.c ****   * @}
 975:FWLIB/src/stm32f4xx_rcc.c ****   */
 976:FWLIB/src/stm32f4xx_rcc.c **** 
 977:FWLIB/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group2 System AHB and APB busses clocks configuration functions
 978:FWLIB/src/stm32f4xx_rcc.c ****  *  @brief   System, AHB and APB busses clocks configuration functions
 979:FWLIB/src/stm32f4xx_rcc.c ****  *
 980:FWLIB/src/stm32f4xx_rcc.c **** @verbatim   
ARM GAS  /tmp/cc6d9lwr.s 			page 27


 981:FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================
 982:FWLIB/src/stm32f4xx_rcc.c ****       ##### System, AHB and APB busses clocks configuration functions #####
 983:FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================  
 984:FWLIB/src/stm32f4xx_rcc.c ****     [..]
 985:FWLIB/src/stm32f4xx_rcc.c ****       This section provide functions allowing to configure the System, AHB, APB1 and 
 986:FWLIB/src/stm32f4xx_rcc.c ****       APB2 busses clocks.
 987:FWLIB/src/stm32f4xx_rcc.c ****   
 988:FWLIB/src/stm32f4xx_rcc.c ****       (#) Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 989:FWLIB/src/stm32f4xx_rcc.c ****           HSE and PLL.
 990:FWLIB/src/stm32f4xx_rcc.c ****           The AHB clock (HCLK) is derived from System clock through configurable 
 991:FWLIB/src/stm32f4xx_rcc.c ****           prescaler and used to clock the CPU, memory and peripherals mapped 
 992:FWLIB/src/stm32f4xx_rcc.c ****           on AHB bus (DMA, GPIO...). APB1 (PCLK1) and APB2 (PCLK2) clocks are derived 
 993:FWLIB/src/stm32f4xx_rcc.c ****           from AHB clock through configurable prescalers and used to clock 
 994:FWLIB/src/stm32f4xx_rcc.c ****           the peripherals mapped on these busses. You can use 
 995:FWLIB/src/stm32f4xx_rcc.c ****           "RCC_GetClocksFreq()" function to retrieve the frequencies of these clocks.  
 996:FWLIB/src/stm32f4xx_rcc.c **** 
 997:FWLIB/src/stm32f4xx_rcc.c ****       -@- All the peripheral clocks are derived from the System clock (SYSCLK) except:
 998:FWLIB/src/stm32f4xx_rcc.c ****         (+@) I2S: the I2S clock can be derived either from a specific PLL (PLLI2S) or
 999:FWLIB/src/stm32f4xx_rcc.c ****              from an external clock mapped on the I2S_CKIN pin. 
1000:FWLIB/src/stm32f4xx_rcc.c ****              You have to use RCC_I2SCLKConfig() function to configure this clock. 
1001:FWLIB/src/stm32f4xx_rcc.c ****         (+@) RTC: the RTC clock can be derived either from the LSI, LSE or HSE clock
1002:FWLIB/src/stm32f4xx_rcc.c ****              divided by 2 to 31. You have to use RCC_RTCCLKConfig() and RCC_RTCCLKCmd()
1003:FWLIB/src/stm32f4xx_rcc.c ****              functions to configure this clock. 
1004:FWLIB/src/stm32f4xx_rcc.c ****         (+@) USB OTG FS, SDIO and RTC: USB OTG FS require a frequency equal to 48 MHz
1005:FWLIB/src/stm32f4xx_rcc.c ****              to work correctly, while the SDIO require a frequency equal or lower than
1006:FWLIB/src/stm32f4xx_rcc.c ****              to 48. This clock is derived of the main PLL through PLLQ divider.
1007:FWLIB/src/stm32f4xx_rcc.c ****         (+@) IWDG clock which is always the LSI clock.
1008:FWLIB/src/stm32f4xx_rcc.c ****        
1009:FWLIB/src/stm32f4xx_rcc.c ****       (#) For STM32F405xx/407xx and STM32F415xx/417xx devices, the maximum frequency 
1010:FWLIB/src/stm32f4xx_rcc.c ****          of the SYSCLK and HCLK is 168 MHz, PCLK2 84 MHz and PCLK1 42 MHz. Depending 
1011:FWLIB/src/stm32f4xx_rcc.c ****          on the device voltage range, the maximum frequency should be adapted accordingly:
1012:FWLIB/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1013:FWLIB/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
1014:FWLIB/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|
1015:FWLIB/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
1016:FWLIB/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
1017:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1018:FWLIB/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
1019:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1020:FWLIB/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
1021:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1022:FWLIB/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
1023:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1024:FWLIB/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |66 < HCLK <= 88  |60 < HCLK <= 80  |
1025:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1026:FWLIB/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|88 < HCLK <= 110 |80 < HCLK <= 100 |
1027:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1028:FWLIB/src/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|150< HCLK <= 168|120< HCLK <= 144|110 < HCLK <= 132|100 < HCLK <= 120|
1029:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1030:FWLIB/src/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|132 < HCLK <= 154|120 < HCLK <= 140|
1031:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1032:FWLIB/src/stm32f4xx_rcc.c ****  |7WS(8CPU cycle)|      NA        |      NA        |154 < HCLK <= 168|140 < HCLK <= 160|
1033:FWLIB/src/stm32f4xx_rcc.c ****  +---------------|----------------|----------------|-----------------|-----------------+
1034:FWLIB/src/stm32f4xx_rcc.c ****       (#) For STM32F42xxx/43xxx/469xx/479xx devices, the maximum frequency of the SYSCLK and HCLK i
1035:FWLIB/src/stm32f4xx_rcc.c ****           PCLK2 90 MHz and PCLK1 45 MHz. Depending on the device voltage range, the maximum 
1036:FWLIB/src/stm32f4xx_rcc.c ****           frequency should be adapted accordingly:
1037:FWLIB/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
ARM GAS  /tmp/cc6d9lwr.s 			page 28


1038:FWLIB/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
1039:FWLIB/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|
1040:FWLIB/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
1041:FWLIB/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
1042:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1043:FWLIB/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
1044:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1045:FWLIB/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
1046:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1047:FWLIB/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
1048:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1049:FWLIB/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |66 < HCLK <= 88  |60 < HCLK <= 80  |
1050:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1051:FWLIB/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|88 < HCLK <= 110 |80 < HCLK <= 100 |
1052:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1053:FWLIB/src/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|120< HCLK <= 180|120< HCLK <= 144|110 < HCLK <= 132|100 < HCLK <= 120|
1054:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1055:FWLIB/src/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|132 < HCLK <= 154|120 < HCLK <= 140|
1056:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1057:FWLIB/src/stm32f4xx_rcc.c ****  |7WS(8CPU cycle)|      NA        |168< HCLK <= 180|154 < HCLK <= 176|140 < HCLK <= 160|
1058:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1059:FWLIB/src/stm32f4xx_rcc.c ****  |8WS(9CPU cycle)|      NA        |      NA        |176 < HCLK <= 180|160 < HCLK <= 168|
1060:FWLIB/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1061:FWLIB/src/stm32f4xx_rcc.c ****    
1062:FWLIB/src/stm32f4xx_rcc.c ****       (#) For STM32F401xx devices, the maximum frequency of the SYSCLK and HCLK is 84 MHz, 
1063:FWLIB/src/stm32f4xx_rcc.c ****           PCLK2 84 MHz and PCLK1 42 MHz. Depending on the device voltage range, the maximum 
1064:FWLIB/src/stm32f4xx_rcc.c ****           frequency should be adapted accordingly:
1065:FWLIB/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1066:FWLIB/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
1067:FWLIB/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|
1068:FWLIB/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
1069:FWLIB/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
1070:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1071:FWLIB/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
1072:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1073:FWLIB/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
1074:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1075:FWLIB/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 84 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
1076:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1077:FWLIB/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|      NA        |72 < HCLK <= 84 |66 < HCLK <= 84  |60 < HCLK <= 80  |
1078:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1079:FWLIB/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|      NA        |      NA        |      NA         |80 < HCLK <= 84  |
1080:FWLIB/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1081:FWLIB/src/stm32f4xx_rcc.c **** 
1082:FWLIB/src/stm32f4xx_rcc.c ****       (#) For STM32F410xx/STM32F411xE devices, the maximum frequency of the SYSCLK and HCLK is 100 
1083:FWLIB/src/stm32f4xx_rcc.c ****           PCLK2 100 MHz and PCLK1 50 MHz. Depending on the device voltage range, the maximum 
1084:FWLIB/src/stm32f4xx_rcc.c ****           frequency should be adapted accordingly:
1085:FWLIB/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1086:FWLIB/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
1087:FWLIB/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|
1088:FWLIB/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
1089:FWLIB/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
1090:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1091:FWLIB/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 18   |0 < HCLK <= 16   |
1092:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1093:FWLIB/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 64 |24 < HCLK <= 48 |18 < HCLK <= 36  |16 < HCLK <= 32  |
1094:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
ARM GAS  /tmp/cc6d9lwr.s 			page 29


1095:FWLIB/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|64 < HCLK <= 90 |48 < HCLK <= 72 |36 < HCLK <= 54  |32 < HCLK <= 48  |
1096:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1097:FWLIB/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 100|72 < HCLK <= 96 |54 < HCLK <= 72  |48 < HCLK <= 64  |
1098:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1099:FWLIB/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|      NA        |96 < HCLK <= 100|72 < HCLK <= 90  |64 < HCLK <= 80  |
1100:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1101:FWLIB/src/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|      NA        |       NA       |90 < HCLK <= 100 |80 < HCLK <= 96  |
1102:FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1103:FWLIB/src/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |       NA       |        NA       |96 < HCLK <= 100 |
1104:FWLIB/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1105:FWLIB/src/stm32f4xx_rcc.c ****   
1106:FWLIB/src/stm32f4xx_rcc.c ****       -@- On STM32F405xx/407xx and STM32F415xx/417xx devices: 
1107:FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS = '0', the maximum value of fHCLK = 144MHz. 
1108:FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS = '1', the maximum value of fHCLK = 168MHz. 
1109:FWLIB/src/stm32f4xx_rcc.c ****           [..] 
1110:FWLIB/src/stm32f4xx_rcc.c ****           On STM32F42xxx/43xxx/469xx/479xx devices:
1111:FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x01', the maximum value of fHCLK is 120MHz.
1112:FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x10', the maximum value of fHCLK is 144MHz.
1113:FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x11', the maximum value of f  is 168MHz 
1114:FWLIB/src/stm32f4xx_rcc.c ****           [..]  
1115:FWLIB/src/stm32f4xx_rcc.c ****           On STM32F401x devices:
1116:FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x01', the maximum value of fHCLK is 64MHz.
1117:FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x10', the maximum value of fHCLK is 84MHz.
1118:FWLIB/src/stm32f4xx_rcc.c ****           On STM32F410xx/STM32F411xE devices:
1119:FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x01' the maximum value of fHCLK is 64MHz.
1120:FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x10' the maximum value of fHCLK is 84MHz.
1121:FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x11' the maximum value of fHCLK is 100MHz.
1122:FWLIB/src/stm32f4xx_rcc.c **** 
1123:FWLIB/src/stm32f4xx_rcc.c ****        You can use PWR_MainRegulatorModeConfig() function to control VOS bits.
1124:FWLIB/src/stm32f4xx_rcc.c **** 
1125:FWLIB/src/stm32f4xx_rcc.c **** @endverbatim
1126:FWLIB/src/stm32f4xx_rcc.c ****   * @{
1127:FWLIB/src/stm32f4xx_rcc.c ****   */
1128:FWLIB/src/stm32f4xx_rcc.c **** 
1129:FWLIB/src/stm32f4xx_rcc.c **** /**
1130:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
1131:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
1132:FWLIB/src/stm32f4xx_rcc.c ****   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
1133:FWLIB/src/stm32f4xx_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
1134:FWLIB/src/stm32f4xx_rcc.c ****   *         (if the Clock Security System CSS is enabled).
1135:FWLIB/src/stm32f4xx_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
1136:FWLIB/src/stm32f4xx_rcc.c ****   *         clock source is ready (clock stable after startup delay or PLL locked). 
1137:FWLIB/src/stm32f4xx_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
1138:FWLIB/src/stm32f4xx_rcc.c ****   *         occur when the clock source will be ready. 
1139:FWLIB/src/stm32f4xx_rcc.c ****   *         You can use RCC_GetSYSCLKSource() function to know which clock is
1140:FWLIB/src/stm32f4xx_rcc.c ****   *         currently used as system clock source. 
1141:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock.
1142:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1143:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSI: HSI selected as system clock source
1144:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSE: HSE selected as system clock source
1145:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_
1146:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F
1147:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1148:FWLIB/src/stm32f4xx_rcc.c ****   */
1149:FWLIB/src/stm32f4xx_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
1150:FWLIB/src/stm32f4xx_rcc.c **** {
 534              		.loc 1 1150 0
ARM GAS  /tmp/cc6d9lwr.s 			page 30


 535              		.cfi_startproc
 536              		@ args = 0, pretend = 0, frame = 0
 537              		@ frame_needed = 0, uses_anonymous_args = 0
 538              		@ link register save eliminated.
 539              	.LVL31:
1151:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1152:FWLIB/src/stm32f4xx_rcc.c **** 
1153:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1154:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
1155:FWLIB/src/stm32f4xx_rcc.c **** 
1156:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 540              		.loc 1 1156 0
 541 0000 034A     		ldr	r2, .L50
 542 0002 9368     		ldr	r3, [r2, #8]
 543              	.LVL32:
1157:FWLIB/src/stm32f4xx_rcc.c **** 
1158:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear SW[1:0] bits */
1159:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_SW;
 544              		.loc 1 1159 0
 545 0004 23F00303 		bic	r3, r3, #3
 546              	.LVL33:
1160:FWLIB/src/stm32f4xx_rcc.c **** 
1161:FWLIB/src/stm32f4xx_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
1162:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 547              		.loc 1 1162 0
 548 0008 1843     		orrs	r0, r0, r3
 549              	.LVL34:
1163:FWLIB/src/stm32f4xx_rcc.c **** 
1164:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1165:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 550              		.loc 1 1165 0
 551 000a 9060     		str	r0, [r2, #8]
 552 000c 7047     		bx	lr
 553              	.L51:
 554 000e 00BF     		.align	2
 555              	.L50:
 556 0010 00380240 		.word	1073887232
 557              		.cfi_endproc
 558              	.LFE139:
 560              		.section	.text.RCC_GetSYSCLKSource,"ax",%progbits
 561              		.align	1
 562              		.global	RCC_GetSYSCLKSource
 563              		.syntax unified
 564              		.thumb
 565              		.thumb_func
 566              		.fpu fpv4-sp-d16
 568              	RCC_GetSYSCLKSource:
 569              	.LFB140:
1166:FWLIB/src/stm32f4xx_rcc.c **** }
1167:FWLIB/src/stm32f4xx_rcc.c **** 
1168:FWLIB/src/stm32f4xx_rcc.c **** /**
1169:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Returns the clock source used as system clock.
1170:FWLIB/src/stm32f4xx_rcc.c ****   * @param  None
1171:FWLIB/src/stm32f4xx_rcc.c ****   * @retval The clock source used as system clock. The returned value can be one
1172:FWLIB/src/stm32f4xx_rcc.c ****   *         of the following:
1173:FWLIB/src/stm32f4xx_rcc.c ****   *              - 0x00: HSI used as system clock
1174:FWLIB/src/stm32f4xx_rcc.c ****   *              - 0x04: HSE used as system clock
ARM GAS  /tmp/cc6d9lwr.s 			page 31


1175:FWLIB/src/stm32f4xx_rcc.c ****   *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
1176:FWLIB/src/stm32f4xx_rcc.c ****   *              - 0x0C: PLL R used as system clock (only for STM32F412xG, STM32F413_423xx and STM3
1177:FWLIB/src/stm32f4xx_rcc.c ****   */
1178:FWLIB/src/stm32f4xx_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
1179:FWLIB/src/stm32f4xx_rcc.c **** {
 570              		.loc 1 1179 0
 571              		.cfi_startproc
 572              		@ args = 0, pretend = 0, frame = 0
 573              		@ frame_needed = 0, uses_anonymous_args = 0
 574              		@ link register save eliminated.
1180:FWLIB/src/stm32f4xx_rcc.c ****   return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 575              		.loc 1 1180 0
 576 0000 024B     		ldr	r3, .L53
 577 0002 9868     		ldr	r0, [r3, #8]
1181:FWLIB/src/stm32f4xx_rcc.c **** }
 578              		.loc 1 1181 0
 579 0004 00F00C00 		and	r0, r0, #12
 580 0008 7047     		bx	lr
 581              	.L54:
 582 000a 00BF     		.align	2
 583              	.L53:
 584 000c 00380240 		.word	1073887232
 585              		.cfi_endproc
 586              	.LFE140:
 588              		.section	.text.RCC_HCLKConfig,"ax",%progbits
 589              		.align	1
 590              		.global	RCC_HCLKConfig
 591              		.syntax unified
 592              		.thumb
 593              		.thumb_func
 594              		.fpu fpv4-sp-d16
 596              	RCC_HCLKConfig:
 597              	.LFB141:
1182:FWLIB/src/stm32f4xx_rcc.c **** 
1183:FWLIB/src/stm32f4xx_rcc.c **** /**
1184:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
1185:FWLIB/src/stm32f4xx_rcc.c ****   * @note   Depending on the device voltage range, the software has to set correctly
1186:FWLIB/src/stm32f4xx_rcc.c ****   *         these bits to ensure that HCLK not exceed the maximum allowed frequency
1187:FWLIB/src/stm32f4xx_rcc.c ****   *         (for more details refer to section above
1188:FWLIB/src/stm32f4xx_rcc.c ****   *           "CPU, AHB and APB busses clocks configuration functions")
1189:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
1190:FWLIB/src/stm32f4xx_rcc.c ****   *         the system clock (SYSCLK).
1191:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1192:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div1: AHB clock = SYSCLK
1193:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div2: AHB clock = SYSCLK/2
1194:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div4: AHB clock = SYSCLK/4
1195:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div8: AHB clock = SYSCLK/8
1196:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div16: AHB clock = SYSCLK/16
1197:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div64: AHB clock = SYSCLK/64
1198:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
1199:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
1200:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
1201:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1202:FWLIB/src/stm32f4xx_rcc.c ****   */
1203:FWLIB/src/stm32f4xx_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
1204:FWLIB/src/stm32f4xx_rcc.c **** {
 598              		.loc 1 1204 0
ARM GAS  /tmp/cc6d9lwr.s 			page 32


 599              		.cfi_startproc
 600              		@ args = 0, pretend = 0, frame = 0
 601              		@ frame_needed = 0, uses_anonymous_args = 0
 602              		@ link register save eliminated.
 603              	.LVL35:
1205:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1206:FWLIB/src/stm32f4xx_rcc.c ****   
1207:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1208:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
1209:FWLIB/src/stm32f4xx_rcc.c **** 
1210:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 604              		.loc 1 1210 0
 605 0000 034A     		ldr	r2, .L56
 606 0002 9368     		ldr	r3, [r2, #8]
 607              	.LVL36:
1211:FWLIB/src/stm32f4xx_rcc.c **** 
1212:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear HPRE[3:0] bits */
1213:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_HPRE;
 608              		.loc 1 1213 0
 609 0004 23F0F003 		bic	r3, r3, #240
 610              	.LVL37:
1214:FWLIB/src/stm32f4xx_rcc.c **** 
1215:FWLIB/src/stm32f4xx_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
1216:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLK;
 611              		.loc 1 1216 0
 612 0008 1843     		orrs	r0, r0, r3
 613              	.LVL38:
1217:FWLIB/src/stm32f4xx_rcc.c **** 
1218:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1219:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 614              		.loc 1 1219 0
 615 000a 9060     		str	r0, [r2, #8]
 616 000c 7047     		bx	lr
 617              	.L57:
 618 000e 00BF     		.align	2
 619              	.L56:
 620 0010 00380240 		.word	1073887232
 621              		.cfi_endproc
 622              	.LFE141:
 624              		.section	.text.RCC_PCLK1Config,"ax",%progbits
 625              		.align	1
 626              		.global	RCC_PCLK1Config
 627              		.syntax unified
 628              		.thumb
 629              		.thumb_func
 630              		.fpu fpv4-sp-d16
 632              	RCC_PCLK1Config:
 633              	.LFB142:
1220:FWLIB/src/stm32f4xx_rcc.c **** }
1221:FWLIB/src/stm32f4xx_rcc.c **** 
1222:FWLIB/src/stm32f4xx_rcc.c **** /**
1223:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the Low Speed APB clock (PCLK1).
1224:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB1 clock divider. This clock is derived from 
1225:FWLIB/src/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
1226:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1227:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB1 clock = HCLK
1228:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB1 clock = HCLK/2
ARM GAS  /tmp/cc6d9lwr.s 			page 33


1229:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB1 clock = HCLK/4
1230:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
1231:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
1232:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1233:FWLIB/src/stm32f4xx_rcc.c ****   */
1234:FWLIB/src/stm32f4xx_rcc.c **** void RCC_PCLK1Config(uint32_t RCC_HCLK)
1235:FWLIB/src/stm32f4xx_rcc.c **** {
 634              		.loc 1 1235 0
 635              		.cfi_startproc
 636              		@ args = 0, pretend = 0, frame = 0
 637              		@ frame_needed = 0, uses_anonymous_args = 0
 638              		@ link register save eliminated.
 639              	.LVL39:
1236:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1237:FWLIB/src/stm32f4xx_rcc.c **** 
1238:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1239:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
1240:FWLIB/src/stm32f4xx_rcc.c **** 
1241:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 640              		.loc 1 1241 0
 641 0000 034A     		ldr	r2, .L59
 642 0002 9368     		ldr	r3, [r2, #8]
 643              	.LVL40:
1242:FWLIB/src/stm32f4xx_rcc.c **** 
1243:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear PPRE1[2:0] bits */
1244:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE1;
 644              		.loc 1 1244 0
 645 0004 23F4E053 		bic	r3, r3, #7168
 646              	.LVL41:
1245:FWLIB/src/stm32f4xx_rcc.c **** 
1246:FWLIB/src/stm32f4xx_rcc.c ****   /* Set PPRE1[2:0] bits according to RCC_HCLK value */
1247:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK;
 647              		.loc 1 1247 0
 648 0008 1843     		orrs	r0, r0, r3
 649              	.LVL42:
1248:FWLIB/src/stm32f4xx_rcc.c **** 
1249:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1250:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 650              		.loc 1 1250 0
 651 000a 9060     		str	r0, [r2, #8]
 652 000c 7047     		bx	lr
 653              	.L60:
 654 000e 00BF     		.align	2
 655              	.L59:
 656 0010 00380240 		.word	1073887232
 657              		.cfi_endproc
 658              	.LFE142:
 660              		.section	.text.RCC_PCLK2Config,"ax",%progbits
 661              		.align	1
 662              		.global	RCC_PCLK2Config
 663              		.syntax unified
 664              		.thumb
 665              		.thumb_func
 666              		.fpu fpv4-sp-d16
 668              	RCC_PCLK2Config:
 669              	.LFB143:
1251:FWLIB/src/stm32f4xx_rcc.c **** }
ARM GAS  /tmp/cc6d9lwr.s 			page 34


1252:FWLIB/src/stm32f4xx_rcc.c **** 
1253:FWLIB/src/stm32f4xx_rcc.c **** /**
1254:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the High Speed APB clock (PCLK2).
1255:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB2 clock divider. This clock is derived from 
1256:FWLIB/src/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
1257:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1258:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB2 clock = HCLK
1259:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB2 clock = HCLK/2
1260:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB2 clock = HCLK/4
1261:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
1262:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
1263:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1264:FWLIB/src/stm32f4xx_rcc.c ****   */
1265:FWLIB/src/stm32f4xx_rcc.c **** void RCC_PCLK2Config(uint32_t RCC_HCLK)
1266:FWLIB/src/stm32f4xx_rcc.c **** {
 670              		.loc 1 1266 0
 671              		.cfi_startproc
 672              		@ args = 0, pretend = 0, frame = 0
 673              		@ frame_needed = 0, uses_anonymous_args = 0
 674              		@ link register save eliminated.
 675              	.LVL43:
1267:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1268:FWLIB/src/stm32f4xx_rcc.c **** 
1269:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1270:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
1271:FWLIB/src/stm32f4xx_rcc.c **** 
1272:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 676              		.loc 1 1272 0
 677 0000 034A     		ldr	r2, .L62
 678 0002 9368     		ldr	r3, [r2, #8]
 679              	.LVL44:
1273:FWLIB/src/stm32f4xx_rcc.c **** 
1274:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear PPRE2[2:0] bits */
1275:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE2;
 680              		.loc 1 1275 0
 681 0004 23F46043 		bic	r3, r3, #57344
 682              	.LVL45:
1276:FWLIB/src/stm32f4xx_rcc.c **** 
1277:FWLIB/src/stm32f4xx_rcc.c ****   /* Set PPRE2[2:0] bits according to RCC_HCLK value */
1278:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK << 3;
 683              		.loc 1 1278 0
 684 0008 43EAC000 		orr	r0, r3, r0, lsl #3
 685              	.LVL46:
1279:FWLIB/src/stm32f4xx_rcc.c **** 
1280:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1281:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 686              		.loc 1 1281 0
 687 000c 9060     		str	r0, [r2, #8]
 688 000e 7047     		bx	lr
 689              	.L63:
 690              		.align	2
 691              	.L62:
 692 0010 00380240 		.word	1073887232
 693              		.cfi_endproc
 694              	.LFE143:
 696              		.section	.text.RCC_GetClocksFreq,"ax",%progbits
 697              		.align	1
ARM GAS  /tmp/cc6d9lwr.s 			page 35


 698              		.global	RCC_GetClocksFreq
 699              		.syntax unified
 700              		.thumb
 701              		.thumb_func
 702              		.fpu fpv4-sp-d16
 704              	RCC_GetClocksFreq:
 705              	.LFB144:
1282:FWLIB/src/stm32f4xx_rcc.c **** }
1283:FWLIB/src/stm32f4xx_rcc.c **** 
1284:FWLIB/src/stm32f4xx_rcc.c **** /**
1285:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Returns the frequencies of different on chip clocks; SYSCLK, HCLK, 
1286:FWLIB/src/stm32f4xx_rcc.c ****   *         PCLK1 and PCLK2.
1287:FWLIB/src/stm32f4xx_rcc.c ****   * 
1288:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The system frequency computed by this function is not the real 
1289:FWLIB/src/stm32f4xx_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined 
1290:FWLIB/src/stm32f4xx_rcc.c ****   *         constant and the selected clock source:
1291:FWLIB/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
1292:FWLIB/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE(**)
1293:FWLIB/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is PLL, function returns values based on HSE_VALUE(**) 
1294:FWLIB/src/stm32f4xx_rcc.c ****   *           or HSI_VALUE(*) multiplied/divided by the PLL factors.         
1295:FWLIB/src/stm32f4xx_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f4xx.h file (default value
1296:FWLIB/src/stm32f4xx_rcc.c ****   *               16 MHz) but the real value may vary depending on the variations
1297:FWLIB/src/stm32f4xx_rcc.c ****   *               in voltage and temperature.
1298:FWLIB/src/stm32f4xx_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f4xx.h file (default value
1299:FWLIB/src/stm32f4xx_rcc.c ****   *                25 MHz), user has to ensure that HSE_VALUE is same as the real
1300:FWLIB/src/stm32f4xx_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
1301:FWLIB/src/stm32f4xx_rcc.c ****   *                have wrong result.
1302:FWLIB/src/stm32f4xx_rcc.c ****   *                
1303:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The result of this function could be not correct when using fractional
1304:FWLIB/src/stm32f4xx_rcc.c ****   *         value for HSE crystal.
1305:FWLIB/src/stm32f4xx_rcc.c ****   *   
1306:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
1307:FWLIB/src/stm32f4xx_rcc.c ****   *          the clocks frequencies.
1308:FWLIB/src/stm32f4xx_rcc.c ****   *     
1309:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used by the user application to compute the 
1310:FWLIB/src/stm32f4xx_rcc.c ****   *         baudrate for the communication peripherals or configure other parameters.
1311:FWLIB/src/stm32f4xx_rcc.c ****   * @note   Each time SYSCLK, HCLK, PCLK1 and/or PCLK2 clock changes, this function
1312:FWLIB/src/stm32f4xx_rcc.c ****   *         must be called to update the structure's field. Otherwise, any
1313:FWLIB/src/stm32f4xx_rcc.c ****   *         configuration based on this function will be incorrect.
1314:FWLIB/src/stm32f4xx_rcc.c ****   *    
1315:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1316:FWLIB/src/stm32f4xx_rcc.c ****   */
1317:FWLIB/src/stm32f4xx_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
1318:FWLIB/src/stm32f4xx_rcc.c **** {
 706              		.loc 1 1318 0
 707              		.cfi_startproc
 708              		@ args = 0, pretend = 0, frame = 0
 709              		@ frame_needed = 0, uses_anonymous_args = 0
 710              		@ link register save eliminated.
 711              	.LVL47:
 712 0000 10B4     		push	{r4}
 713              	.LCFI0:
 714              		.cfi_def_cfa_offset 4
 715              		.cfi_offset 4, -4
 716              	.LVL48:
1319:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
1320:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
ARM GAS  /tmp/cc6d9lwr.s 			page 36


1321:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t pllr = 2;
1322:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
1323:FWLIB/src/stm32f4xx_rcc.c ****   
1324:FWLIB/src/stm32f4xx_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
1325:FWLIB/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 717              		.loc 1 1325 0
 718 0002 294B     		ldr	r3, .L75
 719 0004 9B68     		ldr	r3, [r3, #8]
 720 0006 03F00C03 		and	r3, r3, #12
 721              	.LVL49:
1326:FWLIB/src/stm32f4xx_rcc.c ****   
1327:FWLIB/src/stm32f4xx_rcc.c ****   switch (tmp)
 722              		.loc 1 1327 0
 723 000a 042B     		cmp	r3, #4
 724 000c 23D0     		beq	.L66
 725 000e 082B     		cmp	r3, #8
 726 0010 24D0     		beq	.L67
 727 0012 13B1     		cbz	r3, .L74
1328:FWLIB/src/stm32f4xx_rcc.c ****   {
1329:FWLIB/src/stm32f4xx_rcc.c ****   case 0x00:  /* HSI used as system clock source */
1330:FWLIB/src/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
1331:FWLIB/src/stm32f4xx_rcc.c ****     break;
1332:FWLIB/src/stm32f4xx_rcc.c ****   case 0x04:  /* HSE used as system clock  source */
1333:FWLIB/src/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
1334:FWLIB/src/stm32f4xx_rcc.c ****     break;
1335:FWLIB/src/stm32f4xx_rcc.c ****   case 0x08:  /* PLL P used as system clock  source */
1336:FWLIB/src/stm32f4xx_rcc.c ****     
1337:FWLIB/src/stm32f4xx_rcc.c ****     /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
1338:FWLIB/src/stm32f4xx_rcc.c ****     SYSCLK = PLL_VCO / PLLP
1339:FWLIB/src/stm32f4xx_rcc.c ****     */    
1340:FWLIB/src/stm32f4xx_rcc.c ****     pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
1341:FWLIB/src/stm32f4xx_rcc.c ****     pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
1342:FWLIB/src/stm32f4xx_rcc.c ****     
1343:FWLIB/src/stm32f4xx_rcc.c ****     if (pllsource != 0)
1344:FWLIB/src/stm32f4xx_rcc.c ****     {
1345:FWLIB/src/stm32f4xx_rcc.c ****       /* HSE used as PLL clock source */
1346:FWLIB/src/stm32f4xx_rcc.c ****       pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
1347:FWLIB/src/stm32f4xx_rcc.c ****     }
1348:FWLIB/src/stm32f4xx_rcc.c ****     else
1349:FWLIB/src/stm32f4xx_rcc.c ****     {
1350:FWLIB/src/stm32f4xx_rcc.c ****       /* HSI used as PLL clock source */
1351:FWLIB/src/stm32f4xx_rcc.c ****       pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
1352:FWLIB/src/stm32f4xx_rcc.c ****     }
1353:FWLIB/src/stm32f4xx_rcc.c ****     
1354:FWLIB/src/stm32f4xx_rcc.c ****     pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
1355:FWLIB/src/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
1356:FWLIB/src/stm32f4xx_rcc.c ****     break;
1357:FWLIB/src/stm32f4xx_rcc.c **** 
1358:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
1359:FWLIB/src/stm32f4xx_rcc.c ****   case 0x0C:  /* PLL R used as system clock  source */
1360:FWLIB/src/stm32f4xx_rcc.c ****     /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
1361:FWLIB/src/stm32f4xx_rcc.c ****     SYSCLK = PLL_VCO / PLLR
1362:FWLIB/src/stm32f4xx_rcc.c ****     */    
1363:FWLIB/src/stm32f4xx_rcc.c ****     pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
1364:FWLIB/src/stm32f4xx_rcc.c ****     pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
1365:FWLIB/src/stm32f4xx_rcc.c ****     
1366:FWLIB/src/stm32f4xx_rcc.c ****     if (pllsource != 0)
ARM GAS  /tmp/cc6d9lwr.s 			page 37


1367:FWLIB/src/stm32f4xx_rcc.c ****     {
1368:FWLIB/src/stm32f4xx_rcc.c ****       /* HSE used as PLL clock source */
1369:FWLIB/src/stm32f4xx_rcc.c ****       pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
1370:FWLIB/src/stm32f4xx_rcc.c ****     }
1371:FWLIB/src/stm32f4xx_rcc.c ****     else
1372:FWLIB/src/stm32f4xx_rcc.c ****     {
1373:FWLIB/src/stm32f4xx_rcc.c ****       /* HSI used as PLL clock source */
1374:FWLIB/src/stm32f4xx_rcc.c ****       pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
1375:FWLIB/src/stm32f4xx_rcc.c ****     }
1376:FWLIB/src/stm32f4xx_rcc.c ****     
1377:FWLIB/src/stm32f4xx_rcc.c ****     pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
1378:FWLIB/src/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
1379:FWLIB/src/stm32f4xx_rcc.c ****     break;
1380:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
1381:FWLIB/src/stm32f4xx_rcc.c ****     
1382:FWLIB/src/stm32f4xx_rcc.c ****   default:
1383:FWLIB/src/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 728              		.loc 1 1383 0
 729 0014 254B     		ldr	r3, .L75+4
 730              	.LVL50:
 731 0016 0360     		str	r3, [r0]
1384:FWLIB/src/stm32f4xx_rcc.c ****     break;
 732              		.loc 1 1384 0
 733 0018 01E0     		b	.L69
 734              	.LVL51:
 735              	.L74:
1330:FWLIB/src/stm32f4xx_rcc.c ****     break;
 736              		.loc 1 1330 0
 737 001a 244B     		ldr	r3, .L75+4
 738              	.LVL52:
 739 001c 0360     		str	r3, [r0]
 740              	.LVL53:
 741              	.L69:
1385:FWLIB/src/stm32f4xx_rcc.c ****   }
1386:FWLIB/src/stm32f4xx_rcc.c ****   /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
1387:FWLIB/src/stm32f4xx_rcc.c ****   
1388:FWLIB/src/stm32f4xx_rcc.c ****   /* Get HCLK prescaler */
1389:FWLIB/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_HPRE;
 742              		.loc 1 1389 0
 743 001e 224C     		ldr	r4, .L75
 744 0020 A368     		ldr	r3, [r4, #8]
 745              	.LVL54:
1390:FWLIB/src/stm32f4xx_rcc.c ****   tmp = tmp >> 4;
 746              		.loc 1 1390 0
 747 0022 C3F30313 		ubfx	r3, r3, #4, #4
 748              	.LVL55:
1391:FWLIB/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 749              		.loc 1 1391 0
 750 0026 2249     		ldr	r1, .L75+8
 751 0028 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 752              	.LVL56:
 753 002a DAB2     		uxtb	r2, r3
 754              	.LVL57:
1392:FWLIB/src/stm32f4xx_rcc.c ****   /* HCLK clock frequency */
1393:FWLIB/src/stm32f4xx_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 755              		.loc 1 1393 0
 756 002c 0368     		ldr	r3, [r0]
ARM GAS  /tmp/cc6d9lwr.s 			page 38


 757 002e D340     		lsrs	r3, r3, r2
 758 0030 4360     		str	r3, [r0, #4]
1394:FWLIB/src/stm32f4xx_rcc.c **** 
1395:FWLIB/src/stm32f4xx_rcc.c ****   /* Get PCLK1 prescaler */
1396:FWLIB/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 759              		.loc 1 1396 0
 760 0032 A268     		ldr	r2, [r4, #8]
 761              	.LVL58:
1397:FWLIB/src/stm32f4xx_rcc.c ****   tmp = tmp >> 10;
 762              		.loc 1 1397 0
 763 0034 C2F38222 		ubfx	r2, r2, #10, #3
 764              	.LVL59:
1398:FWLIB/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 765              		.loc 1 1398 0
 766 0038 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 767              	.LVL60:
 768 003a D2B2     		uxtb	r2, r2
 769              	.LVL61:
1399:FWLIB/src/stm32f4xx_rcc.c ****   /* PCLK1 clock frequency */
1400:FWLIB/src/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 770              		.loc 1 1400 0
 771 003c 23FA02F2 		lsr	r2, r3, r2
 772              	.LVL62:
 773 0040 8260     		str	r2, [r0, #8]
1401:FWLIB/src/stm32f4xx_rcc.c **** 
1402:FWLIB/src/stm32f4xx_rcc.c ****   /* Get PCLK2 prescaler */
1403:FWLIB/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 774              		.loc 1 1403 0
 775 0042 A268     		ldr	r2, [r4, #8]
 776              	.LVL63:
1404:FWLIB/src/stm32f4xx_rcc.c ****   tmp = tmp >> 13;
 777              		.loc 1 1404 0
 778 0044 C2F34232 		ubfx	r2, r2, #13, #3
 779              	.LVL64:
1405:FWLIB/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 780              		.loc 1 1405 0
 781 0048 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 782              	.LVL65:
 783 004a D2B2     		uxtb	r2, r2
 784              	.LVL66:
1406:FWLIB/src/stm32f4xx_rcc.c ****   /* PCLK2 clock frequency */
1407:FWLIB/src/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 785              		.loc 1 1407 0
 786 004c D340     		lsrs	r3, r3, r2
 787 004e C360     		str	r3, [r0, #12]
1408:FWLIB/src/stm32f4xx_rcc.c **** }
 788              		.loc 1 1408 0
 789 0050 5DF8044B 		ldr	r4, [sp], #4
 790              	.LCFI1:
 791              		.cfi_remember_state
 792              		.cfi_restore 4
 793              		.cfi_def_cfa_offset 0
 794 0054 7047     		bx	lr
 795              	.LVL67:
 796              	.L66:
 797              	.LCFI2:
 798              		.cfi_restore_state
ARM GAS  /tmp/cc6d9lwr.s 			page 39


1333:FWLIB/src/stm32f4xx_rcc.c ****     break;
 799              		.loc 1 1333 0
 800 0056 174B     		ldr	r3, .L75+12
 801              	.LVL68:
 802 0058 0360     		str	r3, [r0]
1334:FWLIB/src/stm32f4xx_rcc.c ****   case 0x08:  /* PLL P used as system clock  source */
 803              		.loc 1 1334 0
 804 005a E0E7     		b	.L69
 805              	.LVL69:
 806              	.L67:
1340:FWLIB/src/stm32f4xx_rcc.c ****     pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 807              		.loc 1 1340 0
 808 005c 124B     		ldr	r3, .L75
 809              	.LVL70:
 810 005e 5A68     		ldr	r2, [r3, #4]
 811              	.LVL71:
1341:FWLIB/src/stm32f4xx_rcc.c ****     
 812              		.loc 1 1341 0
 813 0060 5B68     		ldr	r3, [r3, #4]
 814 0062 03F03F03 		and	r3, r3, #63
 815              	.LVL72:
1343:FWLIB/src/stm32f4xx_rcc.c ****     {
 816              		.loc 1 1343 0
 817 0066 12F4800F 		tst	r2, #4194304
 818 006a 12D0     		beq	.L70
1346:FWLIB/src/stm32f4xx_rcc.c ****     }
 819              		.loc 1 1346 0
 820 006c 114A     		ldr	r2, .L75+12
 821              	.LVL73:
 822 006e B2FBF3F2 		udiv	r2, r2, r3
 823 0072 0D4B     		ldr	r3, .L75
 824              	.LVL74:
 825 0074 5B68     		ldr	r3, [r3, #4]
 826 0076 C3F38813 		ubfx	r3, r3, #6, #9
 827 007a 03FB02F3 		mul	r3, r3, r2
 828              	.LVL75:
 829              	.L71:
1354:FWLIB/src/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 830              		.loc 1 1354 0
 831 007e 0A4A     		ldr	r2, .L75
 832 0080 5268     		ldr	r2, [r2, #4]
 833 0082 C2F30142 		ubfx	r2, r2, #16, #2
 834 0086 0132     		adds	r2, r2, #1
 835 0088 5200     		lsls	r2, r2, #1
 836              	.LVL76:
1355:FWLIB/src/stm32f4xx_rcc.c ****     break;
 837              		.loc 1 1355 0
 838 008a B3FBF2F3 		udiv	r3, r3, r2
 839              	.LVL77:
 840 008e 0360     		str	r3, [r0]
1356:FWLIB/src/stm32f4xx_rcc.c **** 
 841              		.loc 1 1356 0
 842 0090 C5E7     		b	.L69
 843              	.LVL78:
 844              	.L70:
1351:FWLIB/src/stm32f4xx_rcc.c ****     }
 845              		.loc 1 1351 0
ARM GAS  /tmp/cc6d9lwr.s 			page 40


 846 0092 064A     		ldr	r2, .L75+4
 847              	.LVL79:
 848 0094 B2FBF3F2 		udiv	r2, r2, r3
 849 0098 034B     		ldr	r3, .L75
 850              	.LVL80:
 851 009a 5B68     		ldr	r3, [r3, #4]
 852 009c C3F38813 		ubfx	r3, r3, #6, #9
 853 00a0 03FB02F3 		mul	r3, r3, r2
 854              	.LVL81:
 855 00a4 EBE7     		b	.L71
 856              	.L76:
 857 00a6 00BF     		.align	2
 858              	.L75:
 859 00a8 00380240 		.word	1073887232
 860 00ac 0024F400 		.word	16000000
 861 00b0 00000000 		.word	.LANCHOR0
 862 00b4 00127A00 		.word	8000000
 863              		.cfi_endproc
 864              	.LFE144:
 866              		.section	.text.RCC_RTCCLKConfig,"ax",%progbits
 867              		.align	1
 868              		.global	RCC_RTCCLKConfig
 869              		.syntax unified
 870              		.thumb
 871              		.thumb_func
 872              		.fpu fpv4-sp-d16
 874              	RCC_RTCCLKConfig:
 875              	.LFB145:
1409:FWLIB/src/stm32f4xx_rcc.c **** 
1410:FWLIB/src/stm32f4xx_rcc.c **** /**
1411:FWLIB/src/stm32f4xx_rcc.c ****   * @}
1412:FWLIB/src/stm32f4xx_rcc.c ****   */
1413:FWLIB/src/stm32f4xx_rcc.c **** 
1414:FWLIB/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group3 Peripheral clocks configuration functions
1415:FWLIB/src/stm32f4xx_rcc.c ****  *  @brief   Peripheral clocks configuration functions 
1416:FWLIB/src/stm32f4xx_rcc.c ****  *
1417:FWLIB/src/stm32f4xx_rcc.c **** @verbatim   
1418:FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================
1419:FWLIB/src/stm32f4xx_rcc.c ****               ##### Peripheral clocks configuration functions #####
1420:FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================  
1421:FWLIB/src/stm32f4xx_rcc.c ****     [..] This section provide functions allowing to configure the Peripheral clocks. 
1422:FWLIB/src/stm32f4xx_rcc.c ****   
1423:FWLIB/src/stm32f4xx_rcc.c ****       (#) The RTC clock which is derived from the LSI, LSE or HSE clock divided 
1424:FWLIB/src/stm32f4xx_rcc.c ****           by 2 to 31.
1425:FWLIB/src/stm32f4xx_rcc.c ****      
1426:FWLIB/src/stm32f4xx_rcc.c ****       (#) After restart from Reset or wakeup from STANDBY, all peripherals are off
1427:FWLIB/src/stm32f4xx_rcc.c ****           except internal SRAM, Flash and JTAG. Before to start using a peripheral 
1428:FWLIB/src/stm32f4xx_rcc.c ****           you have to enable its interface clock. You can do this using 
1429:FWLIB/src/stm32f4xx_rcc.c ****           RCC_AHBPeriphClockCmd(), RCC_APB2PeriphClockCmd() and RCC_APB1PeriphClockCmd() functions.
1430:FWLIB/src/stm32f4xx_rcc.c **** 
1431:FWLIB/src/stm32f4xx_rcc.c ****       (#) To reset the peripherals configuration (to the default state after device reset)
1432:FWLIB/src/stm32f4xx_rcc.c ****           you can use RCC_AHBPeriphResetCmd(), RCC_APB2PeriphResetCmd() and 
1433:FWLIB/src/stm32f4xx_rcc.c ****           RCC_APB1PeriphResetCmd() functions.
1434:FWLIB/src/stm32f4xx_rcc.c ****      
1435:FWLIB/src/stm32f4xx_rcc.c ****       (#) To further reduce power consumption in SLEEP mode the peripheral clocks 
1436:FWLIB/src/stm32f4xx_rcc.c ****           can be disabled prior to executing the WFI or WFE instructions. 
1437:FWLIB/src/stm32f4xx_rcc.c ****           You can do this using RCC_AHBPeriphClockLPModeCmd(), 
ARM GAS  /tmp/cc6d9lwr.s 			page 41


1438:FWLIB/src/stm32f4xx_rcc.c ****           RCC_APB2PeriphClockLPModeCmd() and RCC_APB1PeriphClockLPModeCmd() functions.  
1439:FWLIB/src/stm32f4xx_rcc.c **** 
1440:FWLIB/src/stm32f4xx_rcc.c **** @endverbatim
1441:FWLIB/src/stm32f4xx_rcc.c ****   * @{
1442:FWLIB/src/stm32f4xx_rcc.c ****   */
1443:FWLIB/src/stm32f4xx_rcc.c **** 
1444:FWLIB/src/stm32f4xx_rcc.c **** /**
1445:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
1446:FWLIB/src/stm32f4xx_rcc.c ****   * @note   As the RTC clock configuration bits are in the Backup domain and write
1447:FWLIB/src/stm32f4xx_rcc.c ****   *         access is denied to this domain after reset, you have to enable write
1448:FWLIB/src/stm32f4xx_rcc.c ****   *         access using PWR_BackupAccessCmd(ENABLE) function before to configure
1449:FWLIB/src/stm32f4xx_rcc.c ****   *         the RTC clock source (to be done once after reset).    
1450:FWLIB/src/stm32f4xx_rcc.c ****   * @note   Once the RTC clock is configured it can't be changed unless the  
1451:FWLIB/src/stm32f4xx_rcc.c ****   *         Backup domain is reset using RCC_BackupResetCmd() function, or by
1452:FWLIB/src/stm32f4xx_rcc.c ****   *         a Power On Reset (POR).
1453:FWLIB/src/stm32f4xx_rcc.c ****   *    
1454:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
1455:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1456:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
1457:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
1458:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_HSE_Divx: HSE clock divided by x selected
1459:FWLIB/src/stm32f4xx_rcc.c ****   *                                            as RTC clock, where x:[2,31]
1460:FWLIB/src/stm32f4xx_rcc.c ****   *  
1461:FWLIB/src/stm32f4xx_rcc.c ****   * @note   If the LSE or LSI is used as RTC clock source, the RTC continues to
1462:FWLIB/src/stm32f4xx_rcc.c ****   *         work in STOP and STANDBY modes, and can be used as wakeup source.
1463:FWLIB/src/stm32f4xx_rcc.c ****   *         However, when the HSE clock is used as RTC clock source, the RTC
1464:FWLIB/src/stm32f4xx_rcc.c ****   *         cannot be used in STOP and STANDBY modes.    
1465:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The maximum input clock frequency for RTC is 1MHz (when using HSE as
1466:FWLIB/src/stm32f4xx_rcc.c ****   *         RTC clock source).
1467:FWLIB/src/stm32f4xx_rcc.c ****   *  
1468:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1469:FWLIB/src/stm32f4xx_rcc.c ****   */
1470:FWLIB/src/stm32f4xx_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
1471:FWLIB/src/stm32f4xx_rcc.c **** {
 876              		.loc 1 1471 0
 877              		.cfi_startproc
 878              		@ args = 0, pretend = 0, frame = 0
 879              		@ frame_needed = 0, uses_anonymous_args = 0
 880              		@ link register save eliminated.
 881              	.LVL82:
1472:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1473:FWLIB/src/stm32f4xx_rcc.c **** 
1474:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1475:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
1476:FWLIB/src/stm32f4xx_rcc.c **** 
1477:FWLIB/src/stm32f4xx_rcc.c ****   if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 882              		.loc 1 1477 0
 883 0000 00F44073 		and	r3, r0, #768
 884 0004 B3F5407F 		cmp	r3, #768
 885 0008 06D0     		beq	.L79
 886              	.LVL83:
 887              	.L78:
1478:FWLIB/src/stm32f4xx_rcc.c ****   { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
1479:FWLIB/src/stm32f4xx_rcc.c ****     tmpreg = RCC->CFGR;
1480:FWLIB/src/stm32f4xx_rcc.c **** 
1481:FWLIB/src/stm32f4xx_rcc.c ****     /* Clear RTCPRE[4:0] bits */
1482:FWLIB/src/stm32f4xx_rcc.c ****     tmpreg &= ~RCC_CFGR_RTCPRE;
ARM GAS  /tmp/cc6d9lwr.s 			page 42


1483:FWLIB/src/stm32f4xx_rcc.c **** 
1484:FWLIB/src/stm32f4xx_rcc.c ****     /* Configure HSE division factor for RTC clock */
1485:FWLIB/src/stm32f4xx_rcc.c ****     tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
1486:FWLIB/src/stm32f4xx_rcc.c **** 
1487:FWLIB/src/stm32f4xx_rcc.c ****     /* Store the new value */
1488:FWLIB/src/stm32f4xx_rcc.c ****     RCC->CFGR = tmpreg;
1489:FWLIB/src/stm32f4xx_rcc.c ****   }
1490:FWLIB/src/stm32f4xx_rcc.c ****     
1491:FWLIB/src/stm32f4xx_rcc.c ****   /* Select the RTC clock source */
1492:FWLIB/src/stm32f4xx_rcc.c ****   RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 888              		.loc 1 1492 0
 889 000a 094A     		ldr	r2, .L80
 890 000c 136F     		ldr	r3, [r2, #112]
 891 000e C0F30B00 		ubfx	r0, r0, #0, #12
 892              	.LVL84:
 893 0012 1843     		orrs	r0, r0, r3
 894 0014 1067     		str	r0, [r2, #112]
 895 0016 7047     		bx	lr
 896              	.LVL85:
 897              	.L79:
1479:FWLIB/src/stm32f4xx_rcc.c **** 
 898              		.loc 1 1479 0
 899 0018 0549     		ldr	r1, .L80
 900 001a 8B68     		ldr	r3, [r1, #8]
 901              	.LVL86:
1482:FWLIB/src/stm32f4xx_rcc.c **** 
 902              		.loc 1 1482 0
 903 001c 23F4F813 		bic	r3, r3, #2031616
 904              	.LVL87:
1485:FWLIB/src/stm32f4xx_rcc.c **** 
 905              		.loc 1 1485 0
 906 0020 20F07042 		bic	r2, r0, #-268435456
 907 0024 22F44072 		bic	r2, r2, #768
 908 0028 1343     		orrs	r3, r3, r2
 909              	.LVL88:
1488:FWLIB/src/stm32f4xx_rcc.c ****   }
 910              		.loc 1 1488 0
 911 002a 8B60     		str	r3, [r1, #8]
 912 002c EDE7     		b	.L78
 913              	.L81:
 914 002e 00BF     		.align	2
 915              	.L80:
 916 0030 00380240 		.word	1073887232
 917              		.cfi_endproc
 918              	.LFE145:
 920              		.section	.text.RCC_RTCCLKCmd,"ax",%progbits
 921              		.align	1
 922              		.global	RCC_RTCCLKCmd
 923              		.syntax unified
 924              		.thumb
 925              		.thumb_func
 926              		.fpu fpv4-sp-d16
 928              	RCC_RTCCLKCmd:
 929              	.LFB146:
1493:FWLIB/src/stm32f4xx_rcc.c **** }
1494:FWLIB/src/stm32f4xx_rcc.c **** 
1495:FWLIB/src/stm32f4xx_rcc.c **** /**
ARM GAS  /tmp/cc6d9lwr.s 			page 43


1496:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the RTC clock.
1497:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be used only after the RTC clock source was selected
1498:FWLIB/src/stm32f4xx_rcc.c ****   *         using the RCC_RTCCLKConfig function.
1499:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
1500:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1501:FWLIB/src/stm32f4xx_rcc.c ****   */
1502:FWLIB/src/stm32f4xx_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
1503:FWLIB/src/stm32f4xx_rcc.c **** {
 930              		.loc 1 1503 0
 931              		.cfi_startproc
 932              		@ args = 0, pretend = 0, frame = 0
 933              		@ frame_needed = 0, uses_anonymous_args = 0
 934              		@ link register save eliminated.
 935              	.LVL89:
1504:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1505:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1506:FWLIB/src/stm32f4xx_rcc.c **** 
1507:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 936              		.loc 1 1507 0
 937 0000 014B     		ldr	r3, .L83
 938 0002 1860     		str	r0, [r3]
 939 0004 7047     		bx	lr
 940              	.L84:
 941 0006 00BF     		.align	2
 942              	.L83:
 943 0008 3C0E4742 		.word	1111952956
 944              		.cfi_endproc
 945              	.LFE146:
 947              		.section	.text.RCC_BackupResetCmd,"ax",%progbits
 948              		.align	1
 949              		.global	RCC_BackupResetCmd
 950              		.syntax unified
 951              		.thumb
 952              		.thumb_func
 953              		.fpu fpv4-sp-d16
 955              	RCC_BackupResetCmd:
 956              	.LFB147:
1508:FWLIB/src/stm32f4xx_rcc.c **** }
1509:FWLIB/src/stm32f4xx_rcc.c **** 
1510:FWLIB/src/stm32f4xx_rcc.c **** /**
1511:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1512:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function resets the RTC peripheral (including the backup registers)
1513:FWLIB/src/stm32f4xx_rcc.c ****   *         and the RTC clock source selection in RCC_CSR register.
1514:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The BKPSRAM is not affected by this reset.    
1515:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1516:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1517:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1518:FWLIB/src/stm32f4xx_rcc.c ****   */
1519:FWLIB/src/stm32f4xx_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1520:FWLIB/src/stm32f4xx_rcc.c **** {
 957              		.loc 1 1520 0
 958              		.cfi_startproc
 959              		@ args = 0, pretend = 0, frame = 0
 960              		@ frame_needed = 0, uses_anonymous_args = 0
 961              		@ link register save eliminated.
 962              	.LVL90:
1521:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
ARM GAS  /tmp/cc6d9lwr.s 			page 44


1522:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1523:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 963              		.loc 1 1523 0
 964 0000 014B     		ldr	r3, .L86
 965 0002 1860     		str	r0, [r3]
 966 0004 7047     		bx	lr
 967              	.L87:
 968 0006 00BF     		.align	2
 969              	.L86:
 970 0008 400E4742 		.word	1111952960
 971              		.cfi_endproc
 972              	.LFE147:
 974              		.section	.text.RCC_I2SCLKConfig,"ax",%progbits
 975              		.align	1
 976              		.global	RCC_I2SCLKConfig
 977              		.syntax unified
 978              		.thumb
 979              		.thumb_func
 980              		.fpu fpv4-sp-d16
 982              	RCC_I2SCLKConfig:
 983              	.LFB148:
1524:FWLIB/src/stm32f4xx_rcc.c **** }
1525:FWLIB/src/stm32f4xx_rcc.c **** 
1526:FWLIB/src/stm32f4xx_rcc.c **** #if defined (STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
1527:FWLIB/src/stm32f4xx_rcc.c **** /**
1528:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the I2S clock source (I2SCLK).
1529:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the I2S APB clock.
1530:FWLIB/src/stm32f4xx_rcc.c ****   *
1531:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_I2SAPBx: specifies the APBx I2S clock source.
1532:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1533:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SBus_APB1: I2S peripheral instance is on APB1 Bus
1534:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SBus_APB2: I2S peripheral instance is on APB2 Bus
1535:FWLIB/src/stm32f4xx_rcc.c ****   *
1536:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_I2SCLKSource: specifies the I2S clock source.
1537:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1538:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SCLKSource_PLLI2S: PLLI2S clock used as I2S clock source
1539:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SCLKSource_Ext: External clock mapped on the I2S_CKIN pin
1540:FWLIB/src/stm32f4xx_rcc.c ****   *                                        used as I2S clock source
1541:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SCLKSource_PLL: PLL clock used as I2S clock source
1542:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SCLKSource_HSI_HSE: HSI or HSE depends on PLLSRC used as I2S clock source
1543:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1544:FWLIB/src/stm32f4xx_rcc.c ****   */
1545:FWLIB/src/stm32f4xx_rcc.c **** void RCC_I2SCLKConfig(uint32_t RCC_I2SAPBx, uint32_t RCC_I2SCLKSource)
1546:FWLIB/src/stm32f4xx_rcc.c **** {
1547:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1548:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
1549:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2S_APBx(RCC_I2SAPBx));
1550:FWLIB/src/stm32f4xx_rcc.c ****   
1551:FWLIB/src/stm32f4xx_rcc.c ****   if(RCC_I2SAPBx == RCC_I2SBus_APB1)
1552:FWLIB/src/stm32f4xx_rcc.c ****   {
1553:FWLIB/src/stm32f4xx_rcc.c ****     /* Clear APB1 I2Sx clock source selection bits */
1554:FWLIB/src/stm32f4xx_rcc.c ****     RCC->DCKCFGR &= ~RCC_DCKCFGR_I2S1SRC;
1555:FWLIB/src/stm32f4xx_rcc.c ****     /* Set new APB1 I2Sx clock source*/
1556:FWLIB/src/stm32f4xx_rcc.c ****     RCC->DCKCFGR |= RCC_I2SCLKSource;
1557:FWLIB/src/stm32f4xx_rcc.c ****   }
1558:FWLIB/src/stm32f4xx_rcc.c ****   else
1559:FWLIB/src/stm32f4xx_rcc.c ****   {
ARM GAS  /tmp/cc6d9lwr.s 			page 45


1560:FWLIB/src/stm32f4xx_rcc.c ****     /* Clear APB2 I2Sx clock source selection  bits */
1561:FWLIB/src/stm32f4xx_rcc.c ****     RCC->DCKCFGR &= ~RCC_DCKCFGR_I2S2SRC;
1562:FWLIB/src/stm32f4xx_rcc.c ****     /* Set new APB2 I2Sx clock source */
1563:FWLIB/src/stm32f4xx_rcc.c ****     RCC->DCKCFGR |= (RCC_I2SCLKSource << 2);
1564:FWLIB/src/stm32f4xx_rcc.c ****   }
1565:FWLIB/src/stm32f4xx_rcc.c **** }
1566:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F446xx)
1567:FWLIB/src/stm32f4xx_rcc.c **** /**
1568:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the SAIx clock source (SAIxCLK).
1569:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the SAIx APB clock.
1570:FWLIB/src/stm32f4xx_rcc.c ****   *
1571:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_SAIInstance: specifies the SAIx clock source.
1572:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1573:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIInstance_SAI1: SAI1 clock source selection
1574:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIInstance_SAI2: SAI2 clock source selections
1575:FWLIB/src/stm32f4xx_rcc.c ****   *
1576:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_SAICLKSource: specifies the SAI clock source.
1577:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1578:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAICLKSource_PLLSAI: PLLSAI clock used as SAI clock source
1579:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAICLKSource_PLLI2S: PLLI2S clock used as SAI clock source
1580:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAICLKSource_PLL: PLL clock used as SAI clock source
1581:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAICLKSource_HSI_HSE: HSI or HSE depends on PLLSRC used as SAI clock source
1582:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1583:FWLIB/src/stm32f4xx_rcc.c ****   */
1584:FWLIB/src/stm32f4xx_rcc.c **** void RCC_SAICLKConfig(uint32_t RCC_SAIInstance, uint32_t RCC_SAICLKSource)
1585:FWLIB/src/stm32f4xx_rcc.c **** {
1586:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1587:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAICLK_SOURCE(RCC_SAICLKSource));
1588:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAI_INSTANCE(RCC_SAIInstance));
1589:FWLIB/src/stm32f4xx_rcc.c ****   
1590:FWLIB/src/stm32f4xx_rcc.c ****   if(RCC_SAIInstance == RCC_SAIInstance_SAI1)
1591:FWLIB/src/stm32f4xx_rcc.c ****   {
1592:FWLIB/src/stm32f4xx_rcc.c ****     /* Clear SAI1 clock source selection bits */
1593:FWLIB/src/stm32f4xx_rcc.c ****     RCC->DCKCFGR &= ~RCC_DCKCFGR_SAI1SRC;
1594:FWLIB/src/stm32f4xx_rcc.c ****     /* Set new SAI1 clock source */
1595:FWLIB/src/stm32f4xx_rcc.c ****     RCC->DCKCFGR |= RCC_SAICLKSource;
1596:FWLIB/src/stm32f4xx_rcc.c ****   }
1597:FWLIB/src/stm32f4xx_rcc.c ****   else
1598:FWLIB/src/stm32f4xx_rcc.c ****   {
1599:FWLIB/src/stm32f4xx_rcc.c ****     /* Clear SAI2 clock source selection bits */
1600:FWLIB/src/stm32f4xx_rcc.c ****     RCC->DCKCFGR &= ~RCC_DCKCFGR_SAI2SRC;
1601:FWLIB/src/stm32f4xx_rcc.c ****     /* Set new SAI2 clock source */
1602:FWLIB/src/stm32f4xx_rcc.c ****     RCC->DCKCFGR |= (RCC_SAICLKSource << 2);
1603:FWLIB/src/stm32f4xx_rcc.c ****   }
1604:FWLIB/src/stm32f4xx_rcc.c **** }
1605:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F446xx */
1606:FWLIB/src/stm32f4xx_rcc.c **** 
1607:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F413_423xx)
1608:FWLIB/src/stm32f4xx_rcc.c **** /**
1609:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures SAI1BlockA clock source selection.      
1610:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling PLLSAI, PLLI2S and  
1611:FWLIB/src/stm32f4xx_rcc.c ****   *         the SAI clock.
1612:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_SAIBlockACLKSource: specifies the SAI Block A clock source.
1613:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1614:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLLI2SR: PLLI2SR clock used as SAI clock source
1615:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLLI2S: PLLI2S clock used as SAI clock source
1616:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLL: PLL clock used as SAI clock source
ARM GAS  /tmp/cc6d9lwr.s 			page 46


1617:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_HSI_HSE: HSI or HSE depends on PLLSRC used as SAI clock sourc
1618:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1619:FWLIB/src/stm32f4xx_rcc.c ****   */
1620:FWLIB/src/stm32f4xx_rcc.c **** void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
1621:FWLIB/src/stm32f4xx_rcc.c **** {
1622:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1623:FWLIB/src/stm32f4xx_rcc.c ****   
1624:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1625:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
1626:FWLIB/src/stm32f4xx_rcc.c ****   
1627:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1628:FWLIB/src/stm32f4xx_rcc.c **** 
1629:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
1630:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
1631:FWLIB/src/stm32f4xx_rcc.c **** 
1632:FWLIB/src/stm32f4xx_rcc.c ****   /* Set SAI Block A source selection value */
1633:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SAIBlockACLKSource;
1634:FWLIB/src/stm32f4xx_rcc.c **** 
1635:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1636:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1637:FWLIB/src/stm32f4xx_rcc.c **** }
1638:FWLIB/src/stm32f4xx_rcc.c **** 
1639:FWLIB/src/stm32f4xx_rcc.c **** /**
1640:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures SAI1BlockB clock source selection.      
1641:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling PLLSAI, PLLI2S and  
1642:FWLIB/src/stm32f4xx_rcc.c ****   *         the SAI clock.
1643:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_SAIBlockBCLKSource: specifies the SAI Block B clock source.
1644:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1645:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLLI2SR: PLLI2SR clock used as SAI clock source
1646:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLLI2S: PLLI2S clock used as SAI clock source
1647:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLL: PLL clock used as SAI clock source
1648:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_HSI_HSE: HSI or HSE depends on PLLSRC used as SAI clock sourc
1649:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1650:FWLIB/src/stm32f4xx_rcc.c ****   */
1651:FWLIB/src/stm32f4xx_rcc.c **** void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
1652:FWLIB/src/stm32f4xx_rcc.c **** {
1653:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1654:FWLIB/src/stm32f4xx_rcc.c ****   
1655:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1656:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
1657:FWLIB/src/stm32f4xx_rcc.c ****   
1658:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1659:FWLIB/src/stm32f4xx_rcc.c **** 
1660:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
1661:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
1662:FWLIB/src/stm32f4xx_rcc.c **** 
1663:FWLIB/src/stm32f4xx_rcc.c ****   /* Set SAI Block B source selection value */
1664:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SAIBlockBCLKSource;
1665:FWLIB/src/stm32f4xx_rcc.c **** 
1666:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1667:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1668:FWLIB/src/stm32f4xx_rcc.c **** }
1669:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F413_423xx */
1670:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
1671:FWLIB/src/stm32f4xx_rcc.c **** 
1672:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F410xx)
1673:FWLIB/src/stm32f4xx_rcc.c **** /**
ARM GAS  /tmp/cc6d9lwr.s 			page 47


1674:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the I2S clock source (I2SCLK).
1675:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the I2S clock.
1676:FWLIB/src/stm32f4xx_rcc.c ****   *
1677:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_I2SCLKSource: specifies the I2S clock source.
1678:FWLIB/src/stm32f4xx_rcc.c ****   *         This parameter can be one of the following values:
1679:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SAPBCLKSOURCE_PLLR: PLL VCO output clock divided by PLLR.
1680:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SAPBCLKSOURCE_EXT: External clock mapped on the I2S_CKIN pin.
1681:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SAPBCLKSOURCE_PLLSRC: HSI/HSE depends on PLLSRC.
1682:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1683:FWLIB/src/stm32f4xx_rcc.c ****   */
1684:FWLIB/src/stm32f4xx_rcc.c **** void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
1685:FWLIB/src/stm32f4xx_rcc.c **** {
1686:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1687:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
1688:FWLIB/src/stm32f4xx_rcc.c ****   
1689:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear I2Sx clock source selection bits */
1690:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR &= ~RCC_DCKCFGR_I2SSRC;
1691:FWLIB/src/stm32f4xx_rcc.c ****   /* Set new I2Sx clock source*/
1692:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR |= RCC_I2SCLKSource;
1693:FWLIB/src/stm32f4xx_rcc.c **** }
1694:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F410xx */
1695:FWLIB/src/stm32f4xx_rcc.c **** 
1696:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
1697:FWLIB/src/stm32f4xx_rcc.c **** /**
1698:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the I2S clock source (I2SCLK).
1699:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the I2S APB clock.
1700:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_I2SCLKSource: specifies the I2S clock source.
1701:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1702:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_PLLI2S: PLLI2S clock used as I2S clock source
1703:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
1704:FWLIB/src/stm32f4xx_rcc.c ****   *                                        used as I2S clock source
1705:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1706:FWLIB/src/stm32f4xx_rcc.c ****   */
1707:FWLIB/src/stm32f4xx_rcc.c **** void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
1708:FWLIB/src/stm32f4xx_rcc.c **** {
 984              		.loc 1 1708 0
 985              		.cfi_startproc
 986              		@ args = 0, pretend = 0, frame = 0
 987              		@ frame_needed = 0, uses_anonymous_args = 0
 988              		@ link register save eliminated.
 989              	.LVL91:
1709:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1710:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
1711:FWLIB/src/stm32f4xx_rcc.c **** 
1712:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;  
 990              		.loc 1 1712 0
 991 0000 014B     		ldr	r3, .L89
 992 0002 1860     		str	r0, [r3]
 993 0004 7047     		bx	lr
 994              	.L90:
 995 0006 00BF     		.align	2
 996              	.L89:
 997 0008 5C014742 		.word	1111949660
 998              		.cfi_endproc
 999              	.LFE148:
 1001              		.section	.text.RCC_SAIBlockACLKConfig,"ax",%progbits
 1002              		.align	1
ARM GAS  /tmp/cc6d9lwr.s 			page 48


 1003              		.global	RCC_SAIBlockACLKConfig
 1004              		.syntax unified
 1005              		.thumb
 1006              		.thumb_func
 1007              		.fpu fpv4-sp-d16
 1009              	RCC_SAIBlockACLKConfig:
 1010              	.LFB149:
1713:FWLIB/src/stm32f4xx_rcc.c **** }
1714:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM
1715:FWLIB/src/stm32f4xx_rcc.c **** 
1716:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
1717:FWLIB/src/stm32f4xx_rcc.c **** /**
1718:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures SAI1BlockA clock source selection.
1719:FWLIB/src/stm32f4xx_rcc.c ****   * 
1720:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx/469xx/479xx devices.
1721:FWLIB/src/stm32f4xx_rcc.c ****   *       
1722:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling PLLSAI, PLLI2S and  
1723:FWLIB/src/stm32f4xx_rcc.c ****   *         the SAI clock.
1724:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_SAIBlockACLKSource: specifies the SAI Block A clock source.
1725:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1726:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLLI2S: PLLI2S_Q clock divided by PLLI2SDIVQ used 
1727:FWLIB/src/stm32f4xx_rcc.c ****   *                                           as SAI1 Block A clock 
1728:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLLSAI: PLLISAI_Q clock divided by PLLSAIDIVQ used 
1729:FWLIB/src/stm32f4xx_rcc.c ****   *                                           as SAI1 Block A clock 
1730:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
1731:FWLIB/src/stm32f4xx_rcc.c ****   *                                        used as SAI1 Block A clock
1732:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1733:FWLIB/src/stm32f4xx_rcc.c ****   */
1734:FWLIB/src/stm32f4xx_rcc.c **** void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
1735:FWLIB/src/stm32f4xx_rcc.c **** {
 1011              		.loc 1 1735 0
 1012              		.cfi_startproc
 1013              		@ args = 0, pretend = 0, frame = 0
 1014              		@ frame_needed = 0, uses_anonymous_args = 0
 1015              		@ link register save eliminated.
 1016              	.LVL92:
1736:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1737:FWLIB/src/stm32f4xx_rcc.c ****   
1738:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1739:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
1740:FWLIB/src/stm32f4xx_rcc.c ****   
1741:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 1017              		.loc 1 1741 0
 1018 0000 044A     		ldr	r2, .L92
 1019 0002 D2F88C30 		ldr	r3, [r2, #140]
 1020              	.LVL93:
1742:FWLIB/src/stm32f4xx_rcc.c **** 
1743:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
1744:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
 1021              		.loc 1 1744 0
 1022 0006 23F44013 		bic	r3, r3, #3145728
 1023              	.LVL94:
1745:FWLIB/src/stm32f4xx_rcc.c **** 
1746:FWLIB/src/stm32f4xx_rcc.c ****   /* Set SAI Block A source selection value */
1747:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SAIBlockACLKSource;
 1024              		.loc 1 1747 0
 1025 000a 1843     		orrs	r0, r0, r3
ARM GAS  /tmp/cc6d9lwr.s 			page 49


 1026              	.LVL95:
1748:FWLIB/src/stm32f4xx_rcc.c **** 
1749:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1750:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 1027              		.loc 1 1750 0
 1028 000c C2F88C00 		str	r0, [r2, #140]
 1029 0010 7047     		bx	lr
 1030              	.L93:
 1031 0012 00BF     		.align	2
 1032              	.L92:
 1033 0014 00380240 		.word	1073887232
 1034              		.cfi_endproc
 1035              	.LFE149:
 1037              		.section	.text.RCC_SAIBlockBCLKConfig,"ax",%progbits
 1038              		.align	1
 1039              		.global	RCC_SAIBlockBCLKConfig
 1040              		.syntax unified
 1041              		.thumb
 1042              		.thumb_func
 1043              		.fpu fpv4-sp-d16
 1045              	RCC_SAIBlockBCLKConfig:
 1046              	.LFB150:
1751:FWLIB/src/stm32f4xx_rcc.c **** }
1752:FWLIB/src/stm32f4xx_rcc.c **** 
1753:FWLIB/src/stm32f4xx_rcc.c **** /**
1754:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures SAI1BlockB clock source selection.
1755:FWLIB/src/stm32f4xx_rcc.c ****   * 
1756:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx/469xx/479xx devices.
1757:FWLIB/src/stm32f4xx_rcc.c ****   *       
1758:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling PLLSAI, PLLI2S and  
1759:FWLIB/src/stm32f4xx_rcc.c ****   *         the SAI clock.
1760:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_SAIBlockBCLKSource: specifies the SAI Block B clock source.
1761:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1762:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLLI2S: PLLI2S_Q clock divided by PLLI2SDIVQ used 
1763:FWLIB/src/stm32f4xx_rcc.c ****   *                                           as SAI1 Block B clock 
1764:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLLSAI: PLLISAI_Q clock divided by PLLSAIDIVQ used 
1765:FWLIB/src/stm32f4xx_rcc.c ****   *                                           as SAI1 Block B clock 
1766:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
1767:FWLIB/src/stm32f4xx_rcc.c ****   *                                        used as SAI1 Block B clock
1768:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1769:FWLIB/src/stm32f4xx_rcc.c ****   */
1770:FWLIB/src/stm32f4xx_rcc.c **** void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
1771:FWLIB/src/stm32f4xx_rcc.c **** {
 1047              		.loc 1 1771 0
 1048              		.cfi_startproc
 1049              		@ args = 0, pretend = 0, frame = 0
 1050              		@ frame_needed = 0, uses_anonymous_args = 0
 1051              		@ link register save eliminated.
 1052              	.LVL96:
1772:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1773:FWLIB/src/stm32f4xx_rcc.c ****   
1774:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1775:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
1776:FWLIB/src/stm32f4xx_rcc.c ****   
1777:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 1053              		.loc 1 1777 0
 1054 0000 044A     		ldr	r2, .L95
ARM GAS  /tmp/cc6d9lwr.s 			page 50


 1055 0002 D2F88C30 		ldr	r3, [r2, #140]
 1056              	.LVL97:
1778:FWLIB/src/stm32f4xx_rcc.c **** 
1779:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
1780:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
 1057              		.loc 1 1780 0
 1058 0006 23F44003 		bic	r3, r3, #12582912
 1059              	.LVL98:
1781:FWLIB/src/stm32f4xx_rcc.c **** 
1782:FWLIB/src/stm32f4xx_rcc.c ****   /* Set SAI Block B source selection value */
1783:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SAIBlockBCLKSource;
 1060              		.loc 1 1783 0
 1061 000a 1843     		orrs	r0, r0, r3
 1062              	.LVL99:
1784:FWLIB/src/stm32f4xx_rcc.c **** 
1785:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1786:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 1063              		.loc 1 1786 0
 1064 000c C2F88C00 		str	r0, [r2, #140]
 1065 0010 7047     		bx	lr
 1066              	.L96:
 1067 0012 00BF     		.align	2
 1068              	.L95:
 1069 0014 00380240 		.word	1073887232
 1070              		.cfi_endproc
 1071              	.LFE150:
 1073              		.section	.text.RCC_SAIPLLI2SClkDivConfig,"ax",%progbits
 1074              		.align	1
 1075              		.global	RCC_SAIPLLI2SClkDivConfig
 1076              		.syntax unified
 1077              		.thumb
 1078              		.thumb_func
 1079              		.fpu fpv4-sp-d16
 1081              	RCC_SAIPLLI2SClkDivConfig:
 1082              	.LFB151:
1787:FWLIB/src/stm32f4xx_rcc.c **** }
1788:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F469_479xx */
1789:FWLIB/src/stm32f4xx_rcc.c **** 
1790:FWLIB/src/stm32f4xx_rcc.c **** /**
1791:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the SAI clock Divider coming from PLLI2S.
1792:FWLIB/src/stm32f4xx_rcc.c ****   * 
1793:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx/446xx/469xx/479xx devices.
1794:FWLIB/src/stm32f4xx_rcc.c ****   *   
1795:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLI2S.
1796:FWLIB/src/stm32f4xx_rcc.c ****   *              
1797:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLI2SDivQ: specifies the PLLI2S division factor for SAI1 clock .
1798:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 1 and 32.
1799:FWLIB/src/stm32f4xx_rcc.c ****   *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
1800:FWLIB/src/stm32f4xx_rcc.c ****   *              
1801:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1802:FWLIB/src/stm32f4xx_rcc.c ****   */
1803:FWLIB/src/stm32f4xx_rcc.c **** void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
1804:FWLIB/src/stm32f4xx_rcc.c **** {
 1083              		.loc 1 1804 0
 1084              		.cfi_startproc
 1085              		@ args = 0, pretend = 0, frame = 0
 1086              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc6d9lwr.s 			page 51


 1087              		@ link register save eliminated.
 1088              	.LVL100:
1805:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1806:FWLIB/src/stm32f4xx_rcc.c ****   
1807:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1808:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
1809:FWLIB/src/stm32f4xx_rcc.c ****   
1810:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 1089              		.loc 1 1810 0
 1090 0000 044A     		ldr	r2, .L98
 1091 0002 D2F88C30 		ldr	r3, [r2, #140]
 1092              	.LVL101:
1811:FWLIB/src/stm32f4xx_rcc.c **** 
1812:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear PLLI2SDIVQ[4:0] bits */
1813:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
 1093              		.loc 1 1813 0
 1094 0006 23F01F03 		bic	r3, r3, #31
 1095              	.LVL102:
1814:FWLIB/src/stm32f4xx_rcc.c **** 
1815:FWLIB/src/stm32f4xx_rcc.c ****   /* Set PLLI2SDIVQ values */
1816:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= (RCC_PLLI2SDivQ - 1);
 1096              		.loc 1 1816 0
 1097 000a 0138     		subs	r0, r0, #1
 1098              	.LVL103:
 1099 000c 0343     		orrs	r3, r3, r0
 1100              	.LVL104:
1817:FWLIB/src/stm32f4xx_rcc.c **** 
1818:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1819:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 1101              		.loc 1 1819 0
 1102 000e C2F88C30 		str	r3, [r2, #140]
 1103 0012 7047     		bx	lr
 1104              	.L99:
 1105              		.align	2
 1106              	.L98:
 1107 0014 00380240 		.word	1073887232
 1108              		.cfi_endproc
 1109              	.LFE151:
 1111              		.section	.text.RCC_SAIPLLSAIClkDivConfig,"ax",%progbits
 1112              		.align	1
 1113              		.global	RCC_SAIPLLSAIClkDivConfig
 1114              		.syntax unified
 1115              		.thumb
 1116              		.thumb_func
 1117              		.fpu fpv4-sp-d16
 1119              	RCC_SAIPLLSAIClkDivConfig:
 1120              	.LFB152:
1820:FWLIB/src/stm32f4xx_rcc.c **** }
1821:FWLIB/src/stm32f4xx_rcc.c **** 
1822:FWLIB/src/stm32f4xx_rcc.c **** /**
1823:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the SAI clock Divider coming from PLLSAI.
1824:FWLIB/src/stm32f4xx_rcc.c ****   * 
1825:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx/446xx/469xx/479xx devices.
1826:FWLIB/src/stm32f4xx_rcc.c ****   *        
1827:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLSAI.
1828:FWLIB/src/stm32f4xx_rcc.c ****   *   
1829:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSAIDivQ: specifies the PLLSAI division factor for SAI1 clock .
ARM GAS  /tmp/cc6d9lwr.s 			page 52


1830:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 1 and 32.
1831:FWLIB/src/stm32f4xx_rcc.c ****   *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
1832:FWLIB/src/stm32f4xx_rcc.c ****   *              
1833:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1834:FWLIB/src/stm32f4xx_rcc.c ****   */
1835:FWLIB/src/stm32f4xx_rcc.c **** void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
1836:FWLIB/src/stm32f4xx_rcc.c **** {
 1121              		.loc 1 1836 0
 1122              		.cfi_startproc
 1123              		@ args = 0, pretend = 0, frame = 0
 1124              		@ frame_needed = 0, uses_anonymous_args = 0
 1125              		@ link register save eliminated.
 1126              	.LVL105:
1837:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1838:FWLIB/src/stm32f4xx_rcc.c ****   
1839:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1840:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
1841:FWLIB/src/stm32f4xx_rcc.c ****   
1842:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 1127              		.loc 1 1842 0
 1128 0000 054A     		ldr	r2, .L101
 1129 0002 D2F88C30 		ldr	r3, [r2, #140]
 1130              	.LVL106:
1843:FWLIB/src/stm32f4xx_rcc.c **** 
1844:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
1845:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
 1131              		.loc 1 1845 0
 1132 0006 23F4F853 		bic	r3, r3, #7936
 1133              	.LVL107:
1846:FWLIB/src/stm32f4xx_rcc.c **** 
1847:FWLIB/src/stm32f4xx_rcc.c ****   /* Set PLLSAIDIVQ values */
1848:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 1134              		.loc 1 1848 0
 1135 000a 0138     		subs	r0, r0, #1
 1136              	.LVL108:
 1137 000c 43EA0023 		orr	r3, r3, r0, lsl #8
 1138              	.LVL109:
1849:FWLIB/src/stm32f4xx_rcc.c **** 
1850:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1851:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 1139              		.loc 1 1851 0
 1140 0010 C2F88C30 		str	r3, [r2, #140]
 1141 0014 7047     		bx	lr
 1142              	.L102:
 1143 0016 00BF     		.align	2
 1144              	.L101:
 1145 0018 00380240 		.word	1073887232
 1146              		.cfi_endproc
 1147              	.LFE152:
 1149              		.section	.text.RCC_LTDCCLKDivConfig,"ax",%progbits
 1150              		.align	1
 1151              		.global	RCC_LTDCCLKDivConfig
 1152              		.syntax unified
 1153              		.thumb
 1154              		.thumb_func
 1155              		.fpu fpv4-sp-d16
 1157              	RCC_LTDCCLKDivConfig:
ARM GAS  /tmp/cc6d9lwr.s 			page 53


 1158              	.LFB153:
1852:FWLIB/src/stm32f4xx_rcc.c **** }
1853:FWLIB/src/stm32f4xx_rcc.c **** 
1854:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F413_423xx)
1855:FWLIB/src/stm32f4xx_rcc.c **** /**
1856:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the SAI clock Divider coming from PLLI2S.
1857:FWLIB/src/stm32f4xx_rcc.c ****   * 
1858:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F413_423xx
1859:FWLIB/src/stm32f4xx_rcc.c ****   *   
1860:FWLIB/src/stm32f4xx_rcc.c ****   * @param   RCC_PLLI2SDivR: specifies the PLLI2S division factor for SAI1 clock.
1861:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 1 and 32.
1862:FWLIB/src/stm32f4xx_rcc.c ****   *          SAI1 clock frequency = f(PLLI2SR) / RCC_PLLI2SDivR 
1863:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1864:FWLIB/src/stm32f4xx_rcc.c ****   */
1865:FWLIB/src/stm32f4xx_rcc.c **** void RCC_SAIPLLI2SRClkDivConfig(uint32_t RCC_PLLI2SDivR)  
1866:FWLIB/src/stm32f4xx_rcc.c **** {
1867:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1868:FWLIB/src/stm32f4xx_rcc.c ****   
1869:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1870:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2S_DIVR_VALUE(RCC_PLLI2SDivR));
1871:FWLIB/src/stm32f4xx_rcc.c ****   
1872:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1873:FWLIB/src/stm32f4xx_rcc.c **** 
1874:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear PLLI2SDIVR[4:0] bits */
1875:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVR);
1876:FWLIB/src/stm32f4xx_rcc.c **** 
1877:FWLIB/src/stm32f4xx_rcc.c ****   /* Set PLLI2SDIVR values */
1878:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= (RCC_PLLI2SDivR-1);
1879:FWLIB/src/stm32f4xx_rcc.c **** 
1880:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1881:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1882:FWLIB/src/stm32f4xx_rcc.c **** }
1883:FWLIB/src/stm32f4xx_rcc.c **** 
1884:FWLIB/src/stm32f4xx_rcc.c **** /**
1885:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the SAI clock Divider coming from PLL.
1886:FWLIB/src/stm32f4xx_rcc.c ****   * 
1887:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F413_423xx
1888:FWLIB/src/stm32f4xx_rcc.c ****   *        
1889:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLSAI.
1890:FWLIB/src/stm32f4xx_rcc.c ****   *   
1891:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLDivR: specifies the PLL division factor for SAI1 clock.
1892:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 1 and 32.
1893:FWLIB/src/stm32f4xx_rcc.c ****   *          SAI1 clock frequency = f(PLLR) / RCC_PLLDivR 
1894:FWLIB/src/stm32f4xx_rcc.c ****   *              
1895:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1896:FWLIB/src/stm32f4xx_rcc.c ****   */
1897:FWLIB/src/stm32f4xx_rcc.c **** void RCC_SAIPLLRClkDivConfig(uint32_t RCC_PLLDivR)  
1898:FWLIB/src/stm32f4xx_rcc.c **** {
1899:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1900:FWLIB/src/stm32f4xx_rcc.c ****   
1901:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1902:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_PLLDivR));
1903:FWLIB/src/stm32f4xx_rcc.c ****   
1904:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1905:FWLIB/src/stm32f4xx_rcc.c **** 
1906:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear PLLDIVR[12:8] */
1907:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~(RCC_DCKCFGR_PLLDIVR);
ARM GAS  /tmp/cc6d9lwr.s 			page 54


1908:FWLIB/src/stm32f4xx_rcc.c **** 
1909:FWLIB/src/stm32f4xx_rcc.c ****   /* Set PLLDivR values */
1910:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= ((RCC_PLLDivR - 1 ) << 8);
1911:FWLIB/src/stm32f4xx_rcc.c **** 
1912:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1913:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1914:FWLIB/src/stm32f4xx_rcc.c **** }
1915:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F413_423xx */
1916:FWLIB/src/stm32f4xx_rcc.c **** 
1917:FWLIB/src/stm32f4xx_rcc.c **** /**
1918:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the LTDC clock Divider coming from PLLSAI.
1919:FWLIB/src/stm32f4xx_rcc.c ****   * 
1920:FWLIB/src/stm32f4xx_rcc.c ****   * @note   The LTDC peripheral is only available with STM32F42xxx/43xxx/446xx/469xx/479xx Devices.
1921:FWLIB/src/stm32f4xx_rcc.c ****   *      
1922:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLSAI.
1923:FWLIB/src/stm32f4xx_rcc.c ****   *   
1924:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSAIDivR: specifies the PLLSAI division factor for LTDC clock .
1925:FWLIB/src/stm32f4xx_rcc.c ****   *          LTDC clock frequency = f(PLLSAI_R) / RCC_PLLSAIDivR  
1926:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1927:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSAIDivR_Div2: LTDC clock = f(PLLSAI_R)/2
1928:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSAIDivR_Div4: LTDC clock = f(PLLSAI_R)/4
1929:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSAIDivR_Div8: LTDC clock = f(PLLSAI_R)/8
1930:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSAIDivR_Div16: LTDC clock = f(PLLSAI_R)/16
1931:FWLIB/src/stm32f4xx_rcc.c ****   *            
1932:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1933:FWLIB/src/stm32f4xx_rcc.c ****   */
1934:FWLIB/src/stm32f4xx_rcc.c **** void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
1935:FWLIB/src/stm32f4xx_rcc.c **** {
 1159              		.loc 1 1935 0
 1160              		.cfi_startproc
 1161              		@ args = 0, pretend = 0, frame = 0
 1162              		@ frame_needed = 0, uses_anonymous_args = 0
 1163              		@ link register save eliminated.
 1164              	.LVL110:
1936:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1937:FWLIB/src/stm32f4xx_rcc.c ****   
1938:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1939:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
1940:FWLIB/src/stm32f4xx_rcc.c ****   
1941:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 1165              		.loc 1 1941 0
 1166 0000 044A     		ldr	r2, .L104
 1167 0002 D2F88C30 		ldr	r3, [r2, #140]
 1168              	.LVL111:
1942:FWLIB/src/stm32f4xx_rcc.c **** 
1943:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear PLLSAIDIVR[2:0] bits */
1944:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
 1169              		.loc 1 1944 0
 1170 0006 23F44033 		bic	r3, r3, #196608
 1171              	.LVL112:
1945:FWLIB/src/stm32f4xx_rcc.c **** 
1946:FWLIB/src/stm32f4xx_rcc.c ****   /* Set PLLSAIDIVR values */
1947:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_PLLSAIDivR;
 1172              		.loc 1 1947 0
 1173 000a 1843     		orrs	r0, r0, r3
 1174              	.LVL113:
1948:FWLIB/src/stm32f4xx_rcc.c **** 
ARM GAS  /tmp/cc6d9lwr.s 			page 55


1949:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1950:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 1175              		.loc 1 1950 0
 1176 000c C2F88C00 		str	r0, [r2, #140]
 1177 0010 7047     		bx	lr
 1178              	.L105:
 1179 0012 00BF     		.align	2
 1180              	.L104:
 1181 0014 00380240 		.word	1073887232
 1182              		.cfi_endproc
 1183              	.LFE153:
 1185              		.section	.text.RCC_TIMCLKPresConfig,"ax",%progbits
 1186              		.align	1
 1187              		.global	RCC_TIMCLKPresConfig
 1188              		.syntax unified
 1189              		.thumb
 1190              		.thumb_func
 1191              		.fpu fpv4-sp-d16
 1193              	RCC_TIMCLKPresConfig:
 1194              	.LFB154:
1951:FWLIB/src/stm32f4xx_rcc.c **** }
1952:FWLIB/src/stm32f4xx_rcc.c **** 
1953:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F412xG) || defined(STM32F413_423xx)
1954:FWLIB/src/stm32f4xx_rcc.c **** /**
1955:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the DFSDM clock source (DFSDMCLK).
1956:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the DFSDM APB clock.
1957:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_DFSDMCLKSource: specifies the DFSDM clock source.
1958:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1959:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_DFSDMCLKSource_APB: APB clock used as DFSDM clock source.
1960:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_DFSDMCLKSource_SYS: System clock used as DFSDM clock source.
1961:FWLIB/src/stm32f4xx_rcc.c ****   *                                        
1962:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1963:FWLIB/src/stm32f4xx_rcc.c ****   */
1964:FWLIB/src/stm32f4xx_rcc.c **** void RCC_DFSDM1CLKConfig(uint32_t RCC_DFSDMCLKSource)
1965:FWLIB/src/stm32f4xx_rcc.c **** {
1966:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1967:FWLIB/src/stm32f4xx_rcc.c ****   
1968:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1969:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_DFSDM1CLK_SOURCE(RCC_DFSDMCLKSource));
1970:FWLIB/src/stm32f4xx_rcc.c ****   
1971:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1972:FWLIB/src/stm32f4xx_rcc.c **** 
1973:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear CKDFSDM-SEL  bit */
1974:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_CKDFSDM1SEL;
1975:FWLIB/src/stm32f4xx_rcc.c **** 
1976:FWLIB/src/stm32f4xx_rcc.c ****   /* Set CKDFSDM-SEL bit according to RCC_DFSDMCLKSource value */
1977:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= (RCC_DFSDMCLKSource << 31) ;
1978:FWLIB/src/stm32f4xx_rcc.c **** 
1979:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1980:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1981:FWLIB/src/stm32f4xx_rcc.c **** }
1982:FWLIB/src/stm32f4xx_rcc.c **** 
1983:FWLIB/src/stm32f4xx_rcc.c **** /**
1984:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the DFSDM Audio clock source (DFSDMACLK).
1985:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the DFSDM APB clock.
1986:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_DFSDM1ACLKSource: specifies the DFSDM clock source.
1987:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
ARM GAS  /tmp/cc6d9lwr.s 			page 56


1988:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_DFSDM1AUDIOCLKSOURCE_I2SAPB1: APB clock used as DFSDM clock source.
1989:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_DFSDM1AUDIOCLKSOURCE_I2SAPB2: System clock used as DFSDM clock source.
1990:FWLIB/src/stm32f4xx_rcc.c ****   *                                        
1991:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1992:FWLIB/src/stm32f4xx_rcc.c ****   */
1993:FWLIB/src/stm32f4xx_rcc.c **** void RCC_DFSDM1ACLKConfig(uint32_t RCC_DFSDM1ACLKSource)
1994:FWLIB/src/stm32f4xx_rcc.c **** {
1995:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1996:FWLIB/src/stm32f4xx_rcc.c ****   
1997:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1998:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_DFSDMACLK_SOURCE(RCC_DFSDM1ACLKSource));
1999:FWLIB/src/stm32f4xx_rcc.c ****   
2000:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
2001:FWLIB/src/stm32f4xx_rcc.c **** 
2002:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear CKDFSDMA SEL  bit */
2003:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_CKDFSDM1ASEL;
2004:FWLIB/src/stm32f4xx_rcc.c **** 
2005:FWLIB/src/stm32f4xx_rcc.c ****   /* Set CKDFSDM-SEL   bt according to RCC_DFSDMCLKSource value */
2006:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_DFSDM1ACLKSource;
2007:FWLIB/src/stm32f4xx_rcc.c **** 
2008:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
2009:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
2010:FWLIB/src/stm32f4xx_rcc.c **** }
2011:FWLIB/src/stm32f4xx_rcc.c **** 
2012:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F413_423xx)
2013:FWLIB/src/stm32f4xx_rcc.c **** /**
2014:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the DFSDM Audio clock source (DFSDMACLK).
2015:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the DFSDM APB clock.
2016:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_DFSDM2ACLKSource: specifies the DFSDM clock source.
2017:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2018:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_DFSDM2AUDIOCLKSOURCE_I2SAPB1: APB clock used as DFSDM clock source.
2019:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_DFSDM2AUDIOCLKSOURCE_I2SAPB2: System clock used as DFSDM clock source.
2020:FWLIB/src/stm32f4xx_rcc.c ****   *                                        
2021:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2022:FWLIB/src/stm32f4xx_rcc.c ****   */
2023:FWLIB/src/stm32f4xx_rcc.c **** void RCC_DFSDM2ACLKConfig(uint32_t RCC_DFSDMACLKSource)
2024:FWLIB/src/stm32f4xx_rcc.c **** {
2025:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
2026:FWLIB/src/stm32f4xx_rcc.c ****   
2027:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2028:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_DFSDMCLK_SOURCE(RCC_DFSDMACLKSource));
2029:FWLIB/src/stm32f4xx_rcc.c ****   
2030:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
2031:FWLIB/src/stm32f4xx_rcc.c **** 
2032:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear CKDFSDMA SEL  bit */
2033:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_CKDFSDM1ASEL;
2034:FWLIB/src/stm32f4xx_rcc.c **** 
2035:FWLIB/src/stm32f4xx_rcc.c ****   /* Set CKDFSDM-SEL   bt according to RCC_DFSDMCLKSource value */
2036:FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_DFSDMACLKSource;
2037:FWLIB/src/stm32f4xx_rcc.c **** 
2038:FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
2039:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
2040:FWLIB/src/stm32f4xx_rcc.c **** }
2041:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F413_423xx */
2042:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F412xG || STM32F413_423xx */
2043:FWLIB/src/stm32f4xx_rcc.c **** 
2044:FWLIB/src/stm32f4xx_rcc.c **** /**
ARM GAS  /tmp/cc6d9lwr.s 			page 57


2045:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the Timers clocks prescalers selection.
2046:FWLIB/src/stm32f4xx_rcc.c ****   * 
2047:FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx and STM32F401xx/411xE devices. 
2048:FWLIB/src/stm32f4xx_rcc.c ****   *   
2049:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_TIMCLKPrescaler : specifies the Timers clocks prescalers selection
2050:FWLIB/src/stm32f4xx_rcc.c ****   *         This parameter can be one of the following values:
2051:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_TIMPrescDesactivated: The Timers kernels clocks prescaler is 
2052:FWLIB/src/stm32f4xx_rcc.c ****   *                 equal to HPRE if PPREx is corresponding to division by 1 or 2, 
2053:FWLIB/src/stm32f4xx_rcc.c ****   *                 else it is equal to [(HPRE * PPREx) / 2] if PPREx is corresponding to 
2054:FWLIB/src/stm32f4xx_rcc.c ****   *                 division by 4 or more.
2055:FWLIB/src/stm32f4xx_rcc.c ****   *                   
2056:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_TIMPrescActivated: The Timers kernels clocks prescaler is 
2057:FWLIB/src/stm32f4xx_rcc.c ****   *                 equal to HPRE if PPREx is corresponding to division by 1, 2 or 4, 
2058:FWLIB/src/stm32f4xx_rcc.c ****   *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
2059:FWLIB/src/stm32f4xx_rcc.c ****   *                 to division by 8 or more.
2060:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2061:FWLIB/src/stm32f4xx_rcc.c ****   */
2062:FWLIB/src/stm32f4xx_rcc.c **** void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
2063:FWLIB/src/stm32f4xx_rcc.c **** {
 1195              		.loc 1 2063 0
 1196              		.cfi_startproc
 1197              		@ args = 0, pretend = 0, frame = 0
 1198              		@ frame_needed = 0, uses_anonymous_args = 0
 1199              		@ link register save eliminated.
 1200              	.LVL114:
2064:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2065:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));
2066:FWLIB/src/stm32f4xx_rcc.c **** 
2067:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 1201              		.loc 1 2067 0
 1202 0000 014B     		ldr	r3, .L107
 1203 0002 1860     		str	r0, [r3]
 1204 0004 7047     		bx	lr
 1205              	.L108:
 1206 0006 00BF     		.align	2
 1207              	.L107:
 1208 0008 E0114742 		.word	1111953888
 1209              		.cfi_endproc
 1210              	.LFE154:
 1212              		.section	.text.RCC_AHB1PeriphClockCmd,"ax",%progbits
 1213              		.align	1
 1214              		.global	RCC_AHB1PeriphClockCmd
 1215              		.syntax unified
 1216              		.thumb
 1217              		.thumb_func
 1218              		.fpu fpv4-sp-d16
 1220              	RCC_AHB1PeriphClockCmd:
 1221              	.LFB155:
2068:FWLIB/src/stm32f4xx_rcc.c **** }
2069:FWLIB/src/stm32f4xx_rcc.c **** 
2070:FWLIB/src/stm32f4xx_rcc.c **** /**
2071:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock.
2072:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
2073:FWLIB/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
2074:FWLIB/src/stm32f4xx_rcc.c ****   *         using it.   
2075:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
2076:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
ARM GAS  /tmp/cc6d9lwr.s 			page 58


2077:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
2078:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
2079:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
2080:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
2081:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
2082:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
2083:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
2084:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
2085:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
2086:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOJ:       GPIOJ clock (STM32F42xxx/43xxx devices) 
2087:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOK:       GPIOK clock (STM32F42xxx/43xxx devices)  
2088:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
2089:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
2090:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CCMDATARAMEN CCM data RAM interface clock
2091:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
2092:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
2093:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2D:       DMA2D clock (STM32F429xx/439xx devices)  
2094:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
2095:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
2096:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
2097:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
2098:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
2099:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
2100:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2101:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2102:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2103:FWLIB/src/stm32f4xx_rcc.c ****   */
2104:FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
2105:FWLIB/src/stm32f4xx_rcc.c **** {
 1222              		.loc 1 2105 0
 1223              		.cfi_startproc
 1224              		@ args = 0, pretend = 0, frame = 0
 1225              		@ frame_needed = 0, uses_anonymous_args = 0
 1226              		@ link register save eliminated.
 1227              	.LVL115:
2106:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2107:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
2108:FWLIB/src/stm32f4xx_rcc.c **** 
2109:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2110:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1228              		.loc 1 2110 0
 1229 0000 29B9     		cbnz	r1, .L112
2111:FWLIB/src/stm32f4xx_rcc.c ****   {
2112:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB1ENR |= RCC_AHB1Periph;
2113:FWLIB/src/stm32f4xx_rcc.c ****   }
2114:FWLIB/src/stm32f4xx_rcc.c ****   else
2115:FWLIB/src/stm32f4xx_rcc.c ****   {
2116:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB1ENR &= ~RCC_AHB1Periph;
 1230              		.loc 1 2116 0
 1231 0002 054A     		ldr	r2, .L113
 1232 0004 136B     		ldr	r3, [r2, #48]
 1233 0006 23EA0000 		bic	r0, r3, r0
 1234              	.LVL116:
 1235 000a 1063     		str	r0, [r2, #48]
 1236 000c 7047     		bx	lr
 1237              	.LVL117:
 1238              	.L112:
ARM GAS  /tmp/cc6d9lwr.s 			page 59


2112:FWLIB/src/stm32f4xx_rcc.c ****   }
 1239              		.loc 1 2112 0
 1240 000e 024A     		ldr	r2, .L113
 1241 0010 136B     		ldr	r3, [r2, #48]
 1242 0012 1843     		orrs	r0, r0, r3
 1243              	.LVL118:
 1244 0014 1063     		str	r0, [r2, #48]
 1245 0016 7047     		bx	lr
 1246              	.L114:
 1247              		.align	2
 1248              	.L113:
 1249 0018 00380240 		.word	1073887232
 1250              		.cfi_endproc
 1251              	.LFE155:
 1253              		.section	.text.RCC_AHB2PeriphClockCmd,"ax",%progbits
 1254              		.align	1
 1255              		.global	RCC_AHB2PeriphClockCmd
 1256              		.syntax unified
 1257              		.thumb
 1258              		.thumb_func
 1259              		.fpu fpv4-sp-d16
 1261              	RCC_AHB2PeriphClockCmd:
 1262              	.LFB156:
2117:FWLIB/src/stm32f4xx_rcc.c ****   }
2118:FWLIB/src/stm32f4xx_rcc.c **** }
2119:FWLIB/src/stm32f4xx_rcc.c **** 
2120:FWLIB/src/stm32f4xx_rcc.c **** /**
2121:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock.
2122:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
2123:FWLIB/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
2124:FWLIB/src/stm32f4xx_rcc.c ****   *         using it. 
2125:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
2126:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2127:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
2128:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
2129:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
2130:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
2131:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
2132:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2133:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2134:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2135:FWLIB/src/stm32f4xx_rcc.c ****   */
2136:FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
2137:FWLIB/src/stm32f4xx_rcc.c **** {
 1263              		.loc 1 2137 0
 1264              		.cfi_startproc
 1265              		@ args = 0, pretend = 0, frame = 0
 1266              		@ frame_needed = 0, uses_anonymous_args = 0
 1267              		@ link register save eliminated.
 1268              	.LVL119:
2138:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2139:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
2140:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2141:FWLIB/src/stm32f4xx_rcc.c **** 
2142:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1269              		.loc 1 2142 0
 1270 0000 29B9     		cbnz	r1, .L118
ARM GAS  /tmp/cc6d9lwr.s 			page 60


2143:FWLIB/src/stm32f4xx_rcc.c ****   {
2144:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB2ENR |= RCC_AHB2Periph;
2145:FWLIB/src/stm32f4xx_rcc.c ****   }
2146:FWLIB/src/stm32f4xx_rcc.c ****   else
2147:FWLIB/src/stm32f4xx_rcc.c ****   {
2148:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB2ENR &= ~RCC_AHB2Periph;
 1271              		.loc 1 2148 0
 1272 0002 054A     		ldr	r2, .L119
 1273 0004 536B     		ldr	r3, [r2, #52]
 1274 0006 23EA0000 		bic	r0, r3, r0
 1275              	.LVL120:
 1276 000a 5063     		str	r0, [r2, #52]
 1277 000c 7047     		bx	lr
 1278              	.LVL121:
 1279              	.L118:
2144:FWLIB/src/stm32f4xx_rcc.c ****   }
 1280              		.loc 1 2144 0
 1281 000e 024A     		ldr	r2, .L119
 1282 0010 536B     		ldr	r3, [r2, #52]
 1283 0012 1843     		orrs	r0, r0, r3
 1284              	.LVL122:
 1285 0014 5063     		str	r0, [r2, #52]
 1286 0016 7047     		bx	lr
 1287              	.L120:
 1288              		.align	2
 1289              	.L119:
 1290 0018 00380240 		.word	1073887232
 1291              		.cfi_endproc
 1292              	.LFE156:
 1294              		.section	.text.RCC_AHB3PeriphClockCmd,"ax",%progbits
 1295              		.align	1
 1296              		.global	RCC_AHB3PeriphClockCmd
 1297              		.syntax unified
 1298              		.thumb
 1299              		.thumb_func
 1300              		.fpu fpv4-sp-d16
 1302              	RCC_AHB3PeriphClockCmd:
 1303              	.LFB157:
2149:FWLIB/src/stm32f4xx_rcc.c ****   }
2150:FWLIB/src/stm32f4xx_rcc.c **** }
2151:FWLIB/src/stm32f4xx_rcc.c **** 
2152:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F42
2153:FWLIB/src/stm32f4xx_rcc.c **** /**
2154:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock.
2155:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
2156:FWLIB/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
2157:FWLIB/src/stm32f4xx_rcc.c ****   *         using it. 
2158:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
2159:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be: 
2160:FWLIB/src/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_FSMC or RCC_AHB3Periph_FMC (STM32F412xG/STM32F413_423xx/STM32F429x/4
2161:FWLIB/src/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_QSPI (STM32F412xG/STM32F413_423xx/STM32F446xx/STM32F469_479xx device
2162:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2163:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2164:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2165:FWLIB/src/stm32f4xx_rcc.c ****   */
2166:FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
2167:FWLIB/src/stm32f4xx_rcc.c **** {
ARM GAS  /tmp/cc6d9lwr.s 			page 61


 1304              		.loc 1 2167 0
 1305              		.cfi_startproc
 1306              		@ args = 0, pretend = 0, frame = 0
 1307              		@ frame_needed = 0, uses_anonymous_args = 0
 1308              		@ link register save eliminated.
 1309              	.LVL123:
2168:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2169:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
2170:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2171:FWLIB/src/stm32f4xx_rcc.c **** 
2172:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1310              		.loc 1 2172 0
 1311 0000 29B9     		cbnz	r1, .L124
2173:FWLIB/src/stm32f4xx_rcc.c ****   {
2174:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB3ENR |= RCC_AHB3Periph;
2175:FWLIB/src/stm32f4xx_rcc.c ****   }
2176:FWLIB/src/stm32f4xx_rcc.c ****   else
2177:FWLIB/src/stm32f4xx_rcc.c ****   {
2178:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB3ENR &= ~RCC_AHB3Periph;
 1312              		.loc 1 2178 0
 1313 0002 054A     		ldr	r2, .L125
 1314 0004 936B     		ldr	r3, [r2, #56]
 1315 0006 23EA0000 		bic	r0, r3, r0
 1316              	.LVL124:
 1317 000a 9063     		str	r0, [r2, #56]
 1318 000c 7047     		bx	lr
 1319              	.LVL125:
 1320              	.L124:
2174:FWLIB/src/stm32f4xx_rcc.c ****   }
 1321              		.loc 1 2174 0
 1322 000e 024A     		ldr	r2, .L125
 1323 0010 936B     		ldr	r3, [r2, #56]
 1324 0012 1843     		orrs	r0, r0, r3
 1325              	.LVL126:
 1326 0014 9063     		str	r0, [r2, #56]
 1327 0016 7047     		bx	lr
 1328              	.L126:
 1329              		.align	2
 1330              	.L125:
 1331 0018 00380240 		.word	1073887232
 1332              		.cfi_endproc
 1333              	.LFE157:
 1335              		.section	.text.RCC_APB1PeriphClockCmd,"ax",%progbits
 1336              		.align	1
 1337              		.global	RCC_APB1PeriphClockCmd
 1338              		.syntax unified
 1339              		.thumb
 1340              		.thumb_func
 1341              		.fpu fpv4-sp-d16
 1343              	RCC_APB1PeriphClockCmd:
 1344              	.LFB158:
2179:FWLIB/src/stm32f4xx_rcc.c ****   }
2180:FWLIB/src/stm32f4xx_rcc.c **** }
2181:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F412xG || STM32F413_423xx || STM32F427_437xx || STM32F429_439xx ||
2182:FWLIB/src/stm32f4xx_rcc.c **** 
2183:FWLIB/src/stm32f4xx_rcc.c **** /**
2184:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
ARM GAS  /tmp/cc6d9lwr.s 			page 62


2185:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
2186:FWLIB/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
2187:FWLIB/src/stm32f4xx_rcc.c ****   *         using it. 
2188:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
2189:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2190:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
2191:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
2192:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
2193:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
2194:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
2195:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
2196:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
2197:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
2198:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
2199:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_LPTIM1: LPTIM1 clock (STM32F410xx and STM32F413_423xx devices) 
2200:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
2201:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
2202:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
2203:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPDIF:  SPDIF RX clock (STM32F446xx devices) 
2204:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
2205:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
2206:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
2207:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
2208:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
2209:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
2210:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
2211:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_FMPI2C1:FMPI2C1 clock
2212:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
2213:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
2214:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CEC:    CEC clock (STM32F446xx devices)
2215:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
2216:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
2217:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART7:  UART7 clock
2218:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART8:  UART8 clock
2219:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2220:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2221:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2222:FWLIB/src/stm32f4xx_rcc.c ****   */
2223:FWLIB/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
2224:FWLIB/src/stm32f4xx_rcc.c **** {
 1345              		.loc 1 2224 0
 1346              		.cfi_startproc
 1347              		@ args = 0, pretend = 0, frame = 0
 1348              		@ frame_needed = 0, uses_anonymous_args = 0
 1349              		@ link register save eliminated.
 1350              	.LVL127:
2225:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2226:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
2227:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2228:FWLIB/src/stm32f4xx_rcc.c **** 
2229:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1351              		.loc 1 2229 0
 1352 0000 29B9     		cbnz	r1, .L130
2230:FWLIB/src/stm32f4xx_rcc.c ****   {
2231:FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
2232:FWLIB/src/stm32f4xx_rcc.c ****   }
2233:FWLIB/src/stm32f4xx_rcc.c ****   else
ARM GAS  /tmp/cc6d9lwr.s 			page 63


2234:FWLIB/src/stm32f4xx_rcc.c ****   {
2235:FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
 1353              		.loc 1 2235 0
 1354 0002 054A     		ldr	r2, .L131
 1355 0004 136C     		ldr	r3, [r2, #64]
 1356 0006 23EA0000 		bic	r0, r3, r0
 1357              	.LVL128:
 1358 000a 1064     		str	r0, [r2, #64]
 1359 000c 7047     		bx	lr
 1360              	.LVL129:
 1361              	.L130:
2231:FWLIB/src/stm32f4xx_rcc.c ****   }
 1362              		.loc 1 2231 0
 1363 000e 024A     		ldr	r2, .L131
 1364 0010 136C     		ldr	r3, [r2, #64]
 1365 0012 1843     		orrs	r0, r0, r3
 1366              	.LVL130:
 1367 0014 1064     		str	r0, [r2, #64]
 1368 0016 7047     		bx	lr
 1369              	.L132:
 1370              		.align	2
 1371              	.L131:
 1372 0018 00380240 		.word	1073887232
 1373              		.cfi_endproc
 1374              	.LFE158:
 1376              		.section	.text.RCC_APB2PeriphClockCmd,"ax",%progbits
 1377              		.align	1
 1378              		.global	RCC_APB2PeriphClockCmd
 1379              		.syntax unified
 1380              		.thumb
 1381              		.thumb_func
 1382              		.fpu fpv4-sp-d16
 1384              	RCC_APB2PeriphClockCmd:
 1385              	.LFB159:
2236:FWLIB/src/stm32f4xx_rcc.c ****   }
2237:FWLIB/src/stm32f4xx_rcc.c **** }
2238:FWLIB/src/stm32f4xx_rcc.c **** 
2239:FWLIB/src/stm32f4xx_rcc.c **** /**
2240:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
2241:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
2242:FWLIB/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
2243:FWLIB/src/stm32f4xx_rcc.c ****   *         using it.
2244:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
2245:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2246:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
2247:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
2248:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
2249:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
2250:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
2251:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
2252:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
2253:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
2254:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
2255:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI4:   SPI4 clock
2256:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
2257:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_EXTIT:  EXTIIT clock
2258:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
ARM GAS  /tmp/cc6d9lwr.s 			page 64


2259:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
2260:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
2261:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI5:   SPI5 clock
2262:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI6:   SPI6 clock
2263:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI1:   SAI1 clock (STM32F42xxx/43xxx/446xx/469xx/479xx/413_423x
2264:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI2:   SAI2 clock (STM32F446xx devices) 
2265:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_LTDC:   LTDC clock (STM32F429xx/439xx devices)
2266:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DSI:    DSI clock (STM32F469_479xx devices)
2267:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DFSDM1: DFSDM Clock (STM32F412xG and STM32F413_423xx Devices)
2268:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DFSDM2: DFSDM2 Clock (STM32F413_423xx Devices)
2269:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_UART9:  UART9 Clock (STM32F413_423xx Devices)
2270:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_UART10: UART10 Clock (STM32F413_423xx Devices)
2271:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2272:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2273:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2274:FWLIB/src/stm32f4xx_rcc.c ****   */
2275:FWLIB/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
2276:FWLIB/src/stm32f4xx_rcc.c **** {
 1386              		.loc 1 2276 0
 1387              		.cfi_startproc
 1388              		@ args = 0, pretend = 0, frame = 0
 1389              		@ frame_needed = 0, uses_anonymous_args = 0
 1390              		@ link register save eliminated.
 1391              	.LVL131:
2277:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2278:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
2279:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2280:FWLIB/src/stm32f4xx_rcc.c **** 
2281:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1392              		.loc 1 2281 0
 1393 0000 29B9     		cbnz	r1, .L136
2282:FWLIB/src/stm32f4xx_rcc.c ****   {
2283:FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
2284:FWLIB/src/stm32f4xx_rcc.c ****   }
2285:FWLIB/src/stm32f4xx_rcc.c ****   else
2286:FWLIB/src/stm32f4xx_rcc.c ****   {
2287:FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
 1394              		.loc 1 2287 0
 1395 0002 054A     		ldr	r2, .L137
 1396 0004 536C     		ldr	r3, [r2, #68]
 1397 0006 23EA0000 		bic	r0, r3, r0
 1398              	.LVL132:
 1399 000a 5064     		str	r0, [r2, #68]
 1400 000c 7047     		bx	lr
 1401              	.LVL133:
 1402              	.L136:
2283:FWLIB/src/stm32f4xx_rcc.c ****   }
 1403              		.loc 1 2283 0
 1404 000e 024A     		ldr	r2, .L137
 1405 0010 536C     		ldr	r3, [r2, #68]
 1406 0012 1843     		orrs	r0, r0, r3
 1407              	.LVL134:
 1408 0014 5064     		str	r0, [r2, #68]
 1409 0016 7047     		bx	lr
 1410              	.L138:
 1411              		.align	2
 1412              	.L137:
ARM GAS  /tmp/cc6d9lwr.s 			page 65


 1413 0018 00380240 		.word	1073887232
 1414              		.cfi_endproc
 1415              	.LFE159:
 1417              		.section	.text.RCC_AHB1PeriphResetCmd,"ax",%progbits
 1418              		.align	1
 1419              		.global	RCC_AHB1PeriphResetCmd
 1420              		.syntax unified
 1421              		.thumb
 1422              		.thumb_func
 1423              		.fpu fpv4-sp-d16
 1425              	RCC_AHB1PeriphResetCmd:
 1426              	.LFB160:
2288:FWLIB/src/stm32f4xx_rcc.c ****   }
2289:FWLIB/src/stm32f4xx_rcc.c **** }
2290:FWLIB/src/stm32f4xx_rcc.c **** 
2291:FWLIB/src/stm32f4xx_rcc.c **** /**
2292:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB1 peripheral reset.
2293:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB1Periph: specifies the AHB1 peripheral to reset.
2294:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2295:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:   GPIOA clock
2296:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:   GPIOB clock 
2297:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:   GPIOC clock
2298:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:   GPIOD clock
2299:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:   GPIOE clock
2300:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:   GPIOF clock
2301:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
2302:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
2303:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:   GPIOI clock
2304:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOJ:   GPIOJ clock (STM32F42xxx/43xxx devices) 
2305:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOK:   GPIOK clock (STM32F42xxx/43xxxdevices)   
2306:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:     CRC clock
2307:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:    DMA1 clock
2308:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:    DMA2 clock
2309:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2D:   DMA2D clock (STM32F429xx/439xx devices)   
2310:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC: Ethernet MAC clock
2311:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:  USB OTG HS clock
2312:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_RNG:     RNG clock for STM32F410xx devices   
2313:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
2314:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2315:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2316:FWLIB/src/stm32f4xx_rcc.c ****   */
2317:FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
2318:FWLIB/src/stm32f4xx_rcc.c **** {
 1427              		.loc 1 2318 0
 1428              		.cfi_startproc
 1429              		@ args = 0, pretend = 0, frame = 0
 1430              		@ frame_needed = 0, uses_anonymous_args = 0
 1431              		@ link register save eliminated.
 1432              	.LVL135:
2319:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2320:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
2321:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2322:FWLIB/src/stm32f4xx_rcc.c **** 
2323:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1433              		.loc 1 2323 0
 1434 0000 29B9     		cbnz	r1, .L142
2324:FWLIB/src/stm32f4xx_rcc.c ****   {
ARM GAS  /tmp/cc6d9lwr.s 			page 66


2325:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB1RSTR |= RCC_AHB1Periph;
2326:FWLIB/src/stm32f4xx_rcc.c ****   }
2327:FWLIB/src/stm32f4xx_rcc.c ****   else
2328:FWLIB/src/stm32f4xx_rcc.c ****   {
2329:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 1435              		.loc 1 2329 0
 1436 0002 054A     		ldr	r2, .L143
 1437 0004 1369     		ldr	r3, [r2, #16]
 1438 0006 23EA0000 		bic	r0, r3, r0
 1439              	.LVL136:
 1440 000a 1061     		str	r0, [r2, #16]
 1441 000c 7047     		bx	lr
 1442              	.LVL137:
 1443              	.L142:
2325:FWLIB/src/stm32f4xx_rcc.c ****   }
 1444              		.loc 1 2325 0
 1445 000e 024A     		ldr	r2, .L143
 1446 0010 1369     		ldr	r3, [r2, #16]
 1447 0012 1843     		orrs	r0, r0, r3
 1448              	.LVL138:
 1449 0014 1061     		str	r0, [r2, #16]
 1450 0016 7047     		bx	lr
 1451              	.L144:
 1452              		.align	2
 1453              	.L143:
 1454 0018 00380240 		.word	1073887232
 1455              		.cfi_endproc
 1456              	.LFE160:
 1458              		.section	.text.RCC_AHB2PeriphResetCmd,"ax",%progbits
 1459              		.align	1
 1460              		.global	RCC_AHB2PeriphResetCmd
 1461              		.syntax unified
 1462              		.thumb
 1463              		.thumb_func
 1464              		.fpu fpv4-sp-d16
 1466              	RCC_AHB2PeriphResetCmd:
 1467              	.LFB161:
2330:FWLIB/src/stm32f4xx_rcc.c ****   }
2331:FWLIB/src/stm32f4xx_rcc.c **** }
2332:FWLIB/src/stm32f4xx_rcc.c **** 
2333:FWLIB/src/stm32f4xx_rcc.c **** /**
2334:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB2 peripheral reset.
2335:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB2Periph: specifies the AHB2 peripheral to reset.
2336:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2337:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
2338:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
2339:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
2340:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock for STM32F40_41xxx/STM32F412xG/STM32F413_423xx
2341:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
2342:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
2343:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2344:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2345:FWLIB/src/stm32f4xx_rcc.c ****   */
2346:FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
2347:FWLIB/src/stm32f4xx_rcc.c **** {
 1468              		.loc 1 2347 0
 1469              		.cfi_startproc
ARM GAS  /tmp/cc6d9lwr.s 			page 67


 1470              		@ args = 0, pretend = 0, frame = 0
 1471              		@ frame_needed = 0, uses_anonymous_args = 0
 1472              		@ link register save eliminated.
 1473              	.LVL139:
2348:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2349:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
2350:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2351:FWLIB/src/stm32f4xx_rcc.c **** 
2352:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1474              		.loc 1 2352 0
 1475 0000 29B9     		cbnz	r1, .L148
2353:FWLIB/src/stm32f4xx_rcc.c ****   {
2354:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB2RSTR |= RCC_AHB2Periph;
2355:FWLIB/src/stm32f4xx_rcc.c ****   }
2356:FWLIB/src/stm32f4xx_rcc.c ****   else
2357:FWLIB/src/stm32f4xx_rcc.c ****   {
2358:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 1476              		.loc 1 2358 0
 1477 0002 054A     		ldr	r2, .L149
 1478 0004 5369     		ldr	r3, [r2, #20]
 1479 0006 23EA0000 		bic	r0, r3, r0
 1480              	.LVL140:
 1481 000a 5061     		str	r0, [r2, #20]
 1482 000c 7047     		bx	lr
 1483              	.LVL141:
 1484              	.L148:
2354:FWLIB/src/stm32f4xx_rcc.c ****   }
 1485              		.loc 1 2354 0
 1486 000e 024A     		ldr	r2, .L149
 1487 0010 5369     		ldr	r3, [r2, #20]
 1488 0012 1843     		orrs	r0, r0, r3
 1489              	.LVL142:
 1490 0014 5061     		str	r0, [r2, #20]
 1491 0016 7047     		bx	lr
 1492              	.L150:
 1493              		.align	2
 1494              	.L149:
 1495 0018 00380240 		.word	1073887232
 1496              		.cfi_endproc
 1497              	.LFE161:
 1499              		.section	.text.RCC_AHB3PeriphResetCmd,"ax",%progbits
 1500              		.align	1
 1501              		.global	RCC_AHB3PeriphResetCmd
 1502              		.syntax unified
 1503              		.thumb
 1504              		.thumb_func
 1505              		.fpu fpv4-sp-d16
 1507              	RCC_AHB3PeriphResetCmd:
 1508              	.LFB162:
2359:FWLIB/src/stm32f4xx_rcc.c ****   }
2360:FWLIB/src/stm32f4xx_rcc.c **** }
2361:FWLIB/src/stm32f4xx_rcc.c **** 
2362:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F42
2363:FWLIB/src/stm32f4xx_rcc.c **** /**
2364:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB3 peripheral reset.
2365:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB3Periph: specifies the AHB3 peripheral to reset.
2366:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be: 
ARM GAS  /tmp/cc6d9lwr.s 			page 68


2367:FWLIB/src/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_FSMC or RCC_AHB3Periph_FMC (STM32F412xG, STM32F413_423xx and STM32F4
2368:FWLIB/src/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_QSPI (STM32F412xG/STM32F446xx/STM32F469_479xx devices)
2369:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
2370:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2371:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2372:FWLIB/src/stm32f4xx_rcc.c ****   */
2373:FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
2374:FWLIB/src/stm32f4xx_rcc.c **** {
 1509              		.loc 1 2374 0
 1510              		.cfi_startproc
 1511              		@ args = 0, pretend = 0, frame = 0
 1512              		@ frame_needed = 0, uses_anonymous_args = 0
 1513              		@ link register save eliminated.
 1514              	.LVL143:
2375:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2376:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
2377:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2378:FWLIB/src/stm32f4xx_rcc.c **** 
2379:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1515              		.loc 1 2379 0
 1516 0000 29B9     		cbnz	r1, .L154
2380:FWLIB/src/stm32f4xx_rcc.c ****   {
2381:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB3RSTR |= RCC_AHB3Periph;
2382:FWLIB/src/stm32f4xx_rcc.c ****   }
2383:FWLIB/src/stm32f4xx_rcc.c ****   else
2384:FWLIB/src/stm32f4xx_rcc.c ****   {
2385:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 1517              		.loc 1 2385 0
 1518 0002 054A     		ldr	r2, .L155
 1519 0004 9369     		ldr	r3, [r2, #24]
 1520 0006 23EA0000 		bic	r0, r3, r0
 1521              	.LVL144:
 1522 000a 9061     		str	r0, [r2, #24]
 1523 000c 7047     		bx	lr
 1524              	.LVL145:
 1525              	.L154:
2381:FWLIB/src/stm32f4xx_rcc.c ****   }
 1526              		.loc 1 2381 0
 1527 000e 024A     		ldr	r2, .L155
 1528 0010 9369     		ldr	r3, [r2, #24]
 1529 0012 1843     		orrs	r0, r0, r3
 1530              	.LVL146:
 1531 0014 9061     		str	r0, [r2, #24]
 1532 0016 7047     		bx	lr
 1533              	.L156:
 1534              		.align	2
 1535              	.L155:
 1536 0018 00380240 		.word	1073887232
 1537              		.cfi_endproc
 1538              	.LFE162:
 1540              		.section	.text.RCC_APB1PeriphResetCmd,"ax",%progbits
 1541              		.align	1
 1542              		.global	RCC_APB1PeriphResetCmd
 1543              		.syntax unified
 1544              		.thumb
 1545              		.thumb_func
 1546              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cc6d9lwr.s 			page 69


 1548              	RCC_APB1PeriphResetCmd:
 1549              	.LFB163:
2386:FWLIB/src/stm32f4xx_rcc.c ****   }
2387:FWLIB/src/stm32f4xx_rcc.c **** }
2388:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F412xG || STM32F413_423xx || STM32F427_437xx || STM32F429_439xx ||
2389:FWLIB/src/stm32f4xx_rcc.c **** 
2390:FWLIB/src/stm32f4xx_rcc.c **** /**
2391:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
2392:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
2393:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2394:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
2395:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
2396:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
2397:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
2398:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
2399:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
2400:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
2401:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
2402:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
2403:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_LPTIM1: LPTIM1 clock (STM32F410xx and STM32F413_423xx devices) 
2404:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
2405:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
2406:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
2407:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPDIF:  SPDIF RX clock (STM32F446xx devices) 
2408:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
2409:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
2410:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
2411:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
2412:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
2413:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
2414:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
2415:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_FMPI2C1:FMPI2C1 clock
2416:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
2417:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
2418:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CEC:    CEC clock(STM32F446xx devices)
2419:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
2420:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
2421:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART7:  UART7 clock
2422:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART8:  UART8 clock  
2423:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
2424:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2425:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2426:FWLIB/src/stm32f4xx_rcc.c ****   */
2427:FWLIB/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
2428:FWLIB/src/stm32f4xx_rcc.c **** {
 1550              		.loc 1 2428 0
 1551              		.cfi_startproc
 1552              		@ args = 0, pretend = 0, frame = 0
 1553              		@ frame_needed = 0, uses_anonymous_args = 0
 1554              		@ link register save eliminated.
 1555              	.LVL147:
2429:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2430:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
2431:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2432:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1556              		.loc 1 2432 0
 1557 0000 29B9     		cbnz	r1, .L160
ARM GAS  /tmp/cc6d9lwr.s 			page 70


2433:FWLIB/src/stm32f4xx_rcc.c ****   {
2434:FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
2435:FWLIB/src/stm32f4xx_rcc.c ****   }
2436:FWLIB/src/stm32f4xx_rcc.c ****   else
2437:FWLIB/src/stm32f4xx_rcc.c ****   {
2438:FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
 1558              		.loc 1 2438 0
 1559 0002 054A     		ldr	r2, .L161
 1560 0004 136A     		ldr	r3, [r2, #32]
 1561 0006 23EA0000 		bic	r0, r3, r0
 1562              	.LVL148:
 1563 000a 1062     		str	r0, [r2, #32]
 1564 000c 7047     		bx	lr
 1565              	.LVL149:
 1566              	.L160:
2434:FWLIB/src/stm32f4xx_rcc.c ****   }
 1567              		.loc 1 2434 0
 1568 000e 024A     		ldr	r2, .L161
 1569 0010 136A     		ldr	r3, [r2, #32]
 1570 0012 1843     		orrs	r0, r0, r3
 1571              	.LVL150:
 1572 0014 1062     		str	r0, [r2, #32]
 1573 0016 7047     		bx	lr
 1574              	.L162:
 1575              		.align	2
 1576              	.L161:
 1577 0018 00380240 		.word	1073887232
 1578              		.cfi_endproc
 1579              	.LFE163:
 1581              		.section	.text.RCC_APB2PeriphResetCmd,"ax",%progbits
 1582              		.align	1
 1583              		.global	RCC_APB2PeriphResetCmd
 1584              		.syntax unified
 1585              		.thumb
 1586              		.thumb_func
 1587              		.fpu fpv4-sp-d16
 1589              	RCC_APB2PeriphResetCmd:
 1590              	.LFB164:
2439:FWLIB/src/stm32f4xx_rcc.c ****   }
2440:FWLIB/src/stm32f4xx_rcc.c **** }
2441:FWLIB/src/stm32f4xx_rcc.c **** 
2442:FWLIB/src/stm32f4xx_rcc.c **** /**
2443:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
2444:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
2445:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2446:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
2447:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
2448:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
2449:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
2450:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
2451:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
2452:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
2453:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
2454:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
2455:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI4:   SPI4 clock  
2456:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
2457:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
ARM GAS  /tmp/cc6d9lwr.s 			page 71


2458:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
2459:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
2460:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI5:   SPI5 clock
2461:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI6:   SPI6 clock
2462:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI1:   SAI1 clock (STM32F42xxx/43xxx/446xx/469xx/479xx/413_423x
2463:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI2:   SAI2 clock (STM32F446xx devices) 
2464:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_LTDC:   LTDC clock (STM32F429xx/439xx devices)
2465:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DSI:    DSI clock (STM32F469_479xx devices)
2466:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DFSDM1: DFSDM Clock (STM32F412xG and STM32F413_423xx Devices)
2467:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DFSDM2: DFSDM2 Clock (STM32F413_423xx Devices)
2468:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_UART9:  UART9 Clock (STM32F413_423xx Devices)
2469:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_UART10: UART10 Clock (STM32F413_423xx Devices)
2470:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
2471:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2472:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2473:FWLIB/src/stm32f4xx_rcc.c ****   */
2474:FWLIB/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
2475:FWLIB/src/stm32f4xx_rcc.c **** {
 1591              		.loc 1 2475 0
 1592              		.cfi_startproc
 1593              		@ args = 0, pretend = 0, frame = 0
 1594              		@ frame_needed = 0, uses_anonymous_args = 0
 1595              		@ link register save eliminated.
 1596              	.LVL151:
2476:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2477:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
2478:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2479:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1597              		.loc 1 2479 0
 1598 0000 29B9     		cbnz	r1, .L166
2480:FWLIB/src/stm32f4xx_rcc.c ****   {
2481:FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
2482:FWLIB/src/stm32f4xx_rcc.c ****   }
2483:FWLIB/src/stm32f4xx_rcc.c ****   else
2484:FWLIB/src/stm32f4xx_rcc.c ****   {
2485:FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
 1599              		.loc 1 2485 0
 1600 0002 054A     		ldr	r2, .L167
 1601 0004 536A     		ldr	r3, [r2, #36]
 1602 0006 23EA0000 		bic	r0, r3, r0
 1603              	.LVL152:
 1604 000a 5062     		str	r0, [r2, #36]
 1605 000c 7047     		bx	lr
 1606              	.LVL153:
 1607              	.L166:
2481:FWLIB/src/stm32f4xx_rcc.c ****   }
 1608              		.loc 1 2481 0
 1609 000e 024A     		ldr	r2, .L167
 1610 0010 536A     		ldr	r3, [r2, #36]
 1611 0012 1843     		orrs	r0, r0, r3
 1612              	.LVL154:
 1613 0014 5062     		str	r0, [r2, #36]
 1614 0016 7047     		bx	lr
 1615              	.L168:
 1616              		.align	2
 1617              	.L167:
 1618 0018 00380240 		.word	1073887232
ARM GAS  /tmp/cc6d9lwr.s 			page 72


 1619              		.cfi_endproc
 1620              	.LFE164:
 1622              		.section	.text.RCC_AHB1PeriphClockLPModeCmd,"ax",%progbits
 1623              		.align	1
 1624              		.global	RCC_AHB1PeriphClockLPModeCmd
 1625              		.syntax unified
 1626              		.thumb
 1627              		.thumb_func
 1628              		.fpu fpv4-sp-d16
 1630              	RCC_AHB1PeriphClockLPModeCmd:
 1631              	.LFB165:
2486:FWLIB/src/stm32f4xx_rcc.c ****   }
2487:FWLIB/src/stm32f4xx_rcc.c **** }
2488:FWLIB/src/stm32f4xx_rcc.c **** 
2489:FWLIB/src/stm32f4xx_rcc.c **** /**
2490:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock during Low Power (Sleep) mode.
2491:FWLIB/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
2492:FWLIB/src/stm32f4xx_rcc.c ****   *         power consumption.
2493:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
2494:FWLIB/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
2495:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
2496:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2497:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
2498:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
2499:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
2500:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
2501:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
2502:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
2503:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
2504:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
2505:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
2506:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOJ:       GPIOJ clock (STM32F42xxx/43xxx devices) 
2507:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOK:       GPIOK clock (STM32F42xxx/43xxx devices)   
2508:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
2509:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
2510:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
2511:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
2512:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2D:       DMA2D clock (STM32F429xx/439xx devices) 
2513:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
2514:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
2515:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
2516:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
2517:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
2518:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
2519:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2520:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2521:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2522:FWLIB/src/stm32f4xx_rcc.c ****   */
2523:FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
2524:FWLIB/src/stm32f4xx_rcc.c **** {
 1632              		.loc 1 2524 0
 1633              		.cfi_startproc
 1634              		@ args = 0, pretend = 0, frame = 0
 1635              		@ frame_needed = 0, uses_anonymous_args = 0
 1636              		@ link register save eliminated.
 1637              	.LVL155:
2525:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
ARM GAS  /tmp/cc6d9lwr.s 			page 73


2526:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
2527:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2528:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1638              		.loc 1 2528 0
 1639 0000 29B9     		cbnz	r1, .L172
2529:FWLIB/src/stm32f4xx_rcc.c ****   {
2530:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB1LPENR |= RCC_AHB1Periph;
2531:FWLIB/src/stm32f4xx_rcc.c ****   }
2532:FWLIB/src/stm32f4xx_rcc.c ****   else
2533:FWLIB/src/stm32f4xx_rcc.c ****   {
2534:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 1640              		.loc 1 2534 0
 1641 0002 054A     		ldr	r2, .L173
 1642 0004 136D     		ldr	r3, [r2, #80]
 1643 0006 23EA0000 		bic	r0, r3, r0
 1644              	.LVL156:
 1645 000a 1065     		str	r0, [r2, #80]
 1646 000c 7047     		bx	lr
 1647              	.LVL157:
 1648              	.L172:
2530:FWLIB/src/stm32f4xx_rcc.c ****   }
 1649              		.loc 1 2530 0
 1650 000e 024A     		ldr	r2, .L173
 1651 0010 136D     		ldr	r3, [r2, #80]
 1652 0012 1843     		orrs	r0, r0, r3
 1653              	.LVL158:
 1654 0014 1065     		str	r0, [r2, #80]
 1655 0016 7047     		bx	lr
 1656              	.L174:
 1657              		.align	2
 1658              	.L173:
 1659 0018 00380240 		.word	1073887232
 1660              		.cfi_endproc
 1661              	.LFE165:
 1663              		.section	.text.RCC_AHB2PeriphClockLPModeCmd,"ax",%progbits
 1664              		.align	1
 1665              		.global	RCC_AHB2PeriphClockLPModeCmd
 1666              		.syntax unified
 1667              		.thumb
 1668              		.thumb_func
 1669              		.fpu fpv4-sp-d16
 1671              	RCC_AHB2PeriphClockLPModeCmd:
 1672              	.LFB166:
2535:FWLIB/src/stm32f4xx_rcc.c ****   }
2536:FWLIB/src/stm32f4xx_rcc.c **** }
2537:FWLIB/src/stm32f4xx_rcc.c **** 
2538:FWLIB/src/stm32f4xx_rcc.c **** /**
2539:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock during Low Power (Sleep) mode.
2540:FWLIB/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
2541:FWLIB/src/stm32f4xx_rcc.c ****   *           power consumption.
2542:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
2543:FWLIB/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
2544:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
2545:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2546:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
2547:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
2548:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
ARM GAS  /tmp/cc6d9lwr.s 			page 74


2549:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
2550:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock  
2551:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2552:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2553:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2554:FWLIB/src/stm32f4xx_rcc.c ****   */
2555:FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
2556:FWLIB/src/stm32f4xx_rcc.c **** {
 1673              		.loc 1 2556 0
 1674              		.cfi_startproc
 1675              		@ args = 0, pretend = 0, frame = 0
 1676              		@ frame_needed = 0, uses_anonymous_args = 0
 1677              		@ link register save eliminated.
 1678              	.LVL159:
2557:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2558:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
2559:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2560:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1679              		.loc 1 2560 0
 1680 0000 29B9     		cbnz	r1, .L178
2561:FWLIB/src/stm32f4xx_rcc.c ****   {
2562:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB2LPENR |= RCC_AHB2Periph;
2563:FWLIB/src/stm32f4xx_rcc.c ****   }
2564:FWLIB/src/stm32f4xx_rcc.c ****   else
2565:FWLIB/src/stm32f4xx_rcc.c ****   {
2566:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 1681              		.loc 1 2566 0
 1682 0002 054A     		ldr	r2, .L179
 1683 0004 536D     		ldr	r3, [r2, #84]
 1684 0006 23EA0000 		bic	r0, r3, r0
 1685              	.LVL160:
 1686 000a 5065     		str	r0, [r2, #84]
 1687 000c 7047     		bx	lr
 1688              	.LVL161:
 1689              	.L178:
2562:FWLIB/src/stm32f4xx_rcc.c ****   }
 1690              		.loc 1 2562 0
 1691 000e 024A     		ldr	r2, .L179
 1692 0010 536D     		ldr	r3, [r2, #84]
 1693 0012 1843     		orrs	r0, r0, r3
 1694              	.LVL162:
 1695 0014 5065     		str	r0, [r2, #84]
 1696 0016 7047     		bx	lr
 1697              	.L180:
 1698              		.align	2
 1699              	.L179:
 1700 0018 00380240 		.word	1073887232
 1701              		.cfi_endproc
 1702              	.LFE166:
 1704              		.section	.text.RCC_AHB3PeriphClockLPModeCmd,"ax",%progbits
 1705              		.align	1
 1706              		.global	RCC_AHB3PeriphClockLPModeCmd
 1707              		.syntax unified
 1708              		.thumb
 1709              		.thumb_func
 1710              		.fpu fpv4-sp-d16
 1712              	RCC_AHB3PeriphClockLPModeCmd:
ARM GAS  /tmp/cc6d9lwr.s 			page 75


 1713              	.LFB167:
2567:FWLIB/src/stm32f4xx_rcc.c ****   }
2568:FWLIB/src/stm32f4xx_rcc.c **** }
2569:FWLIB/src/stm32f4xx_rcc.c **** 
2570:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F42
2571:FWLIB/src/stm32f4xx_rcc.c **** /**
2572:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock during Low Power (Sleep) mode.
2573:FWLIB/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
2574:FWLIB/src/stm32f4xx_rcc.c ****   *         power consumption.
2575:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
2576:FWLIB/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
2577:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
2578:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be: 
2579:FWLIB/src/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_FSMC or RCC_AHB3Periph_FMC (STM32F412xG/STM32F413_423xx/STM32F429x/4
2580:FWLIB/src/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_QSPI (STM32F412xG/STM32F413_423xx/STM32F446xx/STM32F469_479xx device
2581:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2582:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2583:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2584:FWLIB/src/stm32f4xx_rcc.c ****   */
2585:FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
2586:FWLIB/src/stm32f4xx_rcc.c **** {
 1714              		.loc 1 2586 0
 1715              		.cfi_startproc
 1716              		@ args = 0, pretend = 0, frame = 0
 1717              		@ frame_needed = 0, uses_anonymous_args = 0
 1718              		@ link register save eliminated.
 1719              	.LVL163:
2587:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2588:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
2589:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2590:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1720              		.loc 1 2590 0
 1721 0000 29B9     		cbnz	r1, .L184
2591:FWLIB/src/stm32f4xx_rcc.c ****   {
2592:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB3LPENR |= RCC_AHB3Periph;
2593:FWLIB/src/stm32f4xx_rcc.c ****   }
2594:FWLIB/src/stm32f4xx_rcc.c ****   else
2595:FWLIB/src/stm32f4xx_rcc.c ****   {
2596:FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 1722              		.loc 1 2596 0
 1723 0002 054A     		ldr	r2, .L185
 1724 0004 936D     		ldr	r3, [r2, #88]
 1725 0006 23EA0000 		bic	r0, r3, r0
 1726              	.LVL164:
 1727 000a 9065     		str	r0, [r2, #88]
 1728 000c 7047     		bx	lr
 1729              	.LVL165:
 1730              	.L184:
2592:FWLIB/src/stm32f4xx_rcc.c ****   }
 1731              		.loc 1 2592 0
 1732 000e 024A     		ldr	r2, .L185
 1733 0010 936D     		ldr	r3, [r2, #88]
 1734 0012 1843     		orrs	r0, r0, r3
 1735              	.LVL166:
 1736 0014 9065     		str	r0, [r2, #88]
 1737 0016 7047     		bx	lr
 1738              	.L186:
ARM GAS  /tmp/cc6d9lwr.s 			page 76


 1739              		.align	2
 1740              	.L185:
 1741 0018 00380240 		.word	1073887232
 1742              		.cfi_endproc
 1743              	.LFE167:
 1745              		.section	.text.RCC_APB1PeriphClockLPModeCmd,"ax",%progbits
 1746              		.align	1
 1747              		.global	RCC_APB1PeriphClockLPModeCmd
 1748              		.syntax unified
 1749              		.thumb
 1750              		.thumb_func
 1751              		.fpu fpv4-sp-d16
 1753              	RCC_APB1PeriphClockLPModeCmd:
 1754              	.LFB168:
2597:FWLIB/src/stm32f4xx_rcc.c ****   }
2598:FWLIB/src/stm32f4xx_rcc.c **** }
2599:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F412xG || STM32F413_423xx || STM32F427_437xx || STM32F429_439xx ||
2600:FWLIB/src/stm32f4xx_rcc.c **** 
2601:FWLIB/src/stm32f4xx_rcc.c **** /**
2602:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB1 peripheral clock during Low Power (Sleep) mode.
2603:FWLIB/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
2604:FWLIB/src/stm32f4xx_rcc.c ****   *         power consumption.
2605:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
2606:FWLIB/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
2607:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
2608:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2609:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
2610:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
2611:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
2612:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
2613:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
2614:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
2615:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
2616:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
2617:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
2618:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_LPTIM1: LPTIM1 clock (STM32F410xx and STM32F413_423xx devices) 
2619:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
2620:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
2621:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
2622:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPDIF:   SPDIF RX clock (STM32F446xx devices) 
2623:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
2624:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
2625:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
2626:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
2627:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
2628:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
2629:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
2630:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_FMPI2C1:   FMPI2C1 clock
2631:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
2632:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
2633:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CEC:    CEC clock (STM32F446xx devices)
2634:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
2635:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
2636:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART7:  UART7 clock
2637:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART8:  UART8 clock
2638:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2639:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
ARM GAS  /tmp/cc6d9lwr.s 			page 77


2640:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2641:FWLIB/src/stm32f4xx_rcc.c ****   */
2642:FWLIB/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
2643:FWLIB/src/stm32f4xx_rcc.c **** {
 1755              		.loc 1 2643 0
 1756              		.cfi_startproc
 1757              		@ args = 0, pretend = 0, frame = 0
 1758              		@ frame_needed = 0, uses_anonymous_args = 0
 1759              		@ link register save eliminated.
 1760              	.LVL167:
2644:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2645:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
2646:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2647:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1761              		.loc 1 2647 0
 1762 0000 29B9     		cbnz	r1, .L190
2648:FWLIB/src/stm32f4xx_rcc.c ****   {
2649:FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB1LPENR |= RCC_APB1Periph;
2650:FWLIB/src/stm32f4xx_rcc.c ****   }
2651:FWLIB/src/stm32f4xx_rcc.c ****   else
2652:FWLIB/src/stm32f4xx_rcc.c ****   {
2653:FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB1LPENR &= ~RCC_APB1Periph;
 1763              		.loc 1 2653 0
 1764 0002 054A     		ldr	r2, .L191
 1765 0004 136E     		ldr	r3, [r2, #96]
 1766 0006 23EA0000 		bic	r0, r3, r0
 1767              	.LVL168:
 1768 000a 1066     		str	r0, [r2, #96]
 1769 000c 7047     		bx	lr
 1770              	.LVL169:
 1771              	.L190:
2649:FWLIB/src/stm32f4xx_rcc.c ****   }
 1772              		.loc 1 2649 0
 1773 000e 024A     		ldr	r2, .L191
 1774 0010 136E     		ldr	r3, [r2, #96]
 1775 0012 1843     		orrs	r0, r0, r3
 1776              	.LVL170:
 1777 0014 1066     		str	r0, [r2, #96]
 1778 0016 7047     		bx	lr
 1779              	.L192:
 1780              		.align	2
 1781              	.L191:
 1782 0018 00380240 		.word	1073887232
 1783              		.cfi_endproc
 1784              	.LFE168:
 1786              		.section	.text.RCC_APB2PeriphClockLPModeCmd,"ax",%progbits
 1787              		.align	1
 1788              		.global	RCC_APB2PeriphClockLPModeCmd
 1789              		.syntax unified
 1790              		.thumb
 1791              		.thumb_func
 1792              		.fpu fpv4-sp-d16
 1794              	RCC_APB2PeriphClockLPModeCmd:
 1795              	.LFB169:
2654:FWLIB/src/stm32f4xx_rcc.c ****   }
2655:FWLIB/src/stm32f4xx_rcc.c **** }
2656:FWLIB/src/stm32f4xx_rcc.c **** 
ARM GAS  /tmp/cc6d9lwr.s 			page 78


2657:FWLIB/src/stm32f4xx_rcc.c **** /**
2658:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB2 peripheral clock during Low Power (Sleep) mode.
2659:FWLIB/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
2660:FWLIB/src/stm32f4xx_rcc.c ****   *         power consumption.
2661:FWLIB/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
2662:FWLIB/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
2663:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
2664:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2665:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
2666:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
2667:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
2668:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
2669:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
2670:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
2671:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
2672:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
2673:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
2674:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI4:   SPI4 clock
2675:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
2676:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_EXTIT:  EXTIIT clock
2677:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
2678:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
2679:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
2680:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI5:   SPI5 clock
2681:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI6:   SPI6 clock
2682:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI1:   SAI1 clock (STM32F42xxx/43xxx/446xx/469xx/479xx/413_423x
2683:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI2:   SAI2 clock (STM32F446xx devices)
2684:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_LTDC:   LTDC clock (STM32F429xx/439xx devices)
2685:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DSI:    DSI clock (STM32F469_479xx devices)
2686:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DFSDM1: DFSDM Clock (STM32F412xG and STM32F413_423xx Devices)
2687:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DFSDM2: DFSDM2 Clock (STM32F413_423xx Devices)
2688:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_UART9:  UART9 Clock (STM32F413_423xx Devices)
2689:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_UART10: UART10 Clock (STM32F413_423xx Devices)
2690:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2691:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2692:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2693:FWLIB/src/stm32f4xx_rcc.c ****   */
2694:FWLIB/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
2695:FWLIB/src/stm32f4xx_rcc.c **** {
 1796              		.loc 1 2695 0
 1797              		.cfi_startproc
 1798              		@ args = 0, pretend = 0, frame = 0
 1799              		@ frame_needed = 0, uses_anonymous_args = 0
 1800              		@ link register save eliminated.
 1801              	.LVL171:
2696:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2697:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
2698:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2699:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1802              		.loc 1 2699 0
 1803 0000 29B9     		cbnz	r1, .L196
2700:FWLIB/src/stm32f4xx_rcc.c ****   {
2701:FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB2LPENR |= RCC_APB2Periph;
2702:FWLIB/src/stm32f4xx_rcc.c ****   }
2703:FWLIB/src/stm32f4xx_rcc.c ****   else
2704:FWLIB/src/stm32f4xx_rcc.c ****   {
2705:FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB2LPENR &= ~RCC_APB2Periph;
ARM GAS  /tmp/cc6d9lwr.s 			page 79


 1804              		.loc 1 2705 0
 1805 0002 054A     		ldr	r2, .L197
 1806 0004 536E     		ldr	r3, [r2, #100]
 1807 0006 23EA0000 		bic	r0, r3, r0
 1808              	.LVL172:
 1809 000a 5066     		str	r0, [r2, #100]
 1810 000c 7047     		bx	lr
 1811              	.LVL173:
 1812              	.L196:
2701:FWLIB/src/stm32f4xx_rcc.c ****   }
 1813              		.loc 1 2701 0
 1814 000e 024A     		ldr	r2, .L197
 1815 0010 536E     		ldr	r3, [r2, #100]
 1816 0012 1843     		orrs	r0, r0, r3
 1817              	.LVL174:
 1818 0014 5066     		str	r0, [r2, #100]
 1819 0016 7047     		bx	lr
 1820              	.L198:
 1821              		.align	2
 1822              	.L197:
 1823 0018 00380240 		.word	1073887232
 1824              		.cfi_endproc
 1825              	.LFE169:
 1827              		.section	.text.RCC_LSEModeConfig,"ax",%progbits
 1828              		.align	1
 1829              		.global	RCC_LSEModeConfig
 1830              		.syntax unified
 1831              		.thumb
 1832              		.thumb_func
 1833              		.fpu fpv4-sp-d16
 1835              	RCC_LSEModeConfig:
 1836              	.LFB170:
2706:FWLIB/src/stm32f4xx_rcc.c ****   }
2707:FWLIB/src/stm32f4xx_rcc.c **** }
2708:FWLIB/src/stm32f4xx_rcc.c **** 
2709:FWLIB/src/stm32f4xx_rcc.c **** /**
2710:FWLIB/src/stm32f4xx_rcc.c ****   * @brief Configures the External Low Speed oscillator mode (LSE mode).
2711:FWLIB/src/stm32f4xx_rcc.c ****   * @note This mode is only available for STM32F410xx/STM32F411xx/STM32F446xx/STM32F469_479xx devic
2712:FWLIB/src/stm32f4xx_rcc.c ****   * @param  Mode: specifies the LSE mode.
2713:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2714:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode.
2715:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode.
2716:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2717:FWLIB/src/stm32f4xx_rcc.c ****   */
2718:FWLIB/src/stm32f4xx_rcc.c **** void RCC_LSEModeConfig(uint8_t RCC_Mode)
2719:FWLIB/src/stm32f4xx_rcc.c **** {
 1837              		.loc 1 2719 0
 1838              		.cfi_startproc
 1839              		@ args = 0, pretend = 0, frame = 0
 1840              		@ frame_needed = 0, uses_anonymous_args = 0
 1841              		@ link register save eliminated.
 1842              	.LVL175:
2720:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2721:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_LSE_MODE(RCC_Mode));
2722:FWLIB/src/stm32f4xx_rcc.c ****   
2723:FWLIB/src/stm32f4xx_rcc.c ****   if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
 1843              		.loc 1 2723 0
ARM GAS  /tmp/cc6d9lwr.s 			page 80


 1844 0000 0128     		cmp	r0, #1
 1845 0002 05D0     		beq	.L202
2724:FWLIB/src/stm32f4xx_rcc.c ****   {
2725:FWLIB/src/stm32f4xx_rcc.c ****     SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
2726:FWLIB/src/stm32f4xx_rcc.c ****   }
2727:FWLIB/src/stm32f4xx_rcc.c ****   else
2728:FWLIB/src/stm32f4xx_rcc.c ****   {
2729:FWLIB/src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
 1846              		.loc 1 2729 0
 1847 0004 054A     		ldr	r2, .L203
 1848 0006 136F     		ldr	r3, [r2, #112]
 1849 0008 23F00803 		bic	r3, r3, #8
 1850 000c 1367     		str	r3, [r2, #112]
 1851 000e 7047     		bx	lr
 1852              	.L202:
2725:FWLIB/src/stm32f4xx_rcc.c ****   }
 1853              		.loc 1 2725 0
 1854 0010 024A     		ldr	r2, .L203
 1855 0012 136F     		ldr	r3, [r2, #112]
 1856 0014 43F00803 		orr	r3, r3, #8
 1857 0018 1367     		str	r3, [r2, #112]
 1858 001a 7047     		bx	lr
 1859              	.L204:
 1860              		.align	2
 1861              	.L203:
 1862 001c 00380240 		.word	1073887232
 1863              		.cfi_endproc
 1864              	.LFE170:
 1866              		.section	.text.RCC_ITConfig,"ax",%progbits
 1867              		.align	1
 1868              		.global	RCC_ITConfig
 1869              		.syntax unified
 1870              		.thumb
 1871              		.thumb_func
 1872              		.fpu fpv4-sp-d16
 1874              	RCC_ITConfig:
 1875              	.LFB171:
2730:FWLIB/src/stm32f4xx_rcc.c ****   }
2731:FWLIB/src/stm32f4xx_rcc.c **** }
2732:FWLIB/src/stm32f4xx_rcc.c **** 
2733:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F410xx) || defined(STM32F413_423xx)
2734:FWLIB/src/stm32f4xx_rcc.c **** /**
2735:FWLIB/src/stm32f4xx_rcc.c ****   * @brief Configures the LPTIM1 clock Source.
2736:FWLIB/src/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F410xx devices.
2737:FWLIB/src/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the LPTIM1 clock Source.
2738:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2739:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_LPTIM1CLKSOURCE_PCLK: LPTIM1 clock from APB1 selected.
2740:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_LPTIM1CLKSOURCE_HSI:  LPTIM1 clock from HSI selected.
2741:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_LPTIM1CLKSOURCE_LSI:  LPTIM1 clock from LSI selected.
2742:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_LPTIM1CLKSOURCE_LSE:  LPTIM1 clock from LSE selected.
2743:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2744:FWLIB/src/stm32f4xx_rcc.c ****   */
2745:FWLIB/src/stm32f4xx_rcc.c **** void RCC_LPTIM1ClockSourceConfig(uint32_t RCC_ClockSource)
2746:FWLIB/src/stm32f4xx_rcc.c **** {
2747:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2748:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_LPTIM1_CLOCKSOURCE(RCC_ClockSource));
2749:FWLIB/src/stm32f4xx_rcc.c **** 
ARM GAS  /tmp/cc6d9lwr.s 			page 81


2750:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear LPTIM1 clock source selection source bits */
2751:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR2 &= ~RCC_DCKCFGR2_LPTIM1SEL;
2752:FWLIB/src/stm32f4xx_rcc.c ****   /* Set new LPTIM1 clock source */
2753:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR2 |= RCC_ClockSource;
2754:FWLIB/src/stm32f4xx_rcc.c **** }
2755:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F410xx || STM32F413_423xx */
2756:FWLIB/src/stm32f4xx_rcc.c **** 
2757:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F469_479xx)
2758:FWLIB/src/stm32f4xx_rcc.c **** /**
2759:FWLIB/src/stm32f4xx_rcc.c ****   * @brief Configures the DSI clock Source.
2760:FWLIB/src/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F469_479xx devices.
2761:FWLIB/src/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the DSI clock Source.
2762:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2763:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_DSICLKSource_PHY: DSI-PHY used as DSI byte lane clock source (usual case).
2764:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_DSICLKSource_PLLR: PLL_R used as DSI byte lane clock source, used in case D
2765:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2766:FWLIB/src/stm32f4xx_rcc.c ****   */
2767:FWLIB/src/stm32f4xx_rcc.c **** void RCC_DSIClockSourceConfig(uint8_t RCC_ClockSource)
2768:FWLIB/src/stm32f4xx_rcc.c **** {
2769:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2770:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_DSI_CLOCKSOURCE(RCC_ClockSource));
2771:FWLIB/src/stm32f4xx_rcc.c ****   
2772:FWLIB/src/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_DSICLKSource_PLLR)
2773:FWLIB/src/stm32f4xx_rcc.c ****   {
2774:FWLIB/src/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR, RCC_DCKCFGR_DSISEL);
2775:FWLIB/src/stm32f4xx_rcc.c ****   }
2776:FWLIB/src/stm32f4xx_rcc.c ****   else
2777:FWLIB/src/stm32f4xx_rcc.c ****   {
2778:FWLIB/src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR, RCC_DCKCFGR_DSISEL);
2779:FWLIB/src/stm32f4xx_rcc.c ****   }
2780:FWLIB/src/stm32f4xx_rcc.c **** }
2781:FWLIB/src/stm32f4xx_rcc.c **** #endif /*  STM32F469_479xx */
2782:FWLIB/src/stm32f4xx_rcc.c **** 
2783:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_4
2784:FWLIB/src/stm32f4xx_rcc.c **** /**
2785:FWLIB/src/stm32f4xx_rcc.c ****   * @brief Configures the 48MHz clock Source.
2786:FWLIB/src/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F446xx/STM32F469_479xx devices.
2787:FWLIB/src/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the 48MHz clock Source.
2788:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2789:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_48MHZCLKSource_PLL: 48MHz from PLL selected.
2790:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_48MHZCLKSource_PLLSAI: 48MHz from PLLSAI selected.
2791:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_CK48CLKSOURCE_PLLI2SQ : 48MHz from PLLI2SQ
2792:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2793:FWLIB/src/stm32f4xx_rcc.c ****   */
2794:FWLIB/src/stm32f4xx_rcc.c **** void RCC_48MHzClockSourceConfig(uint8_t RCC_ClockSource)
2795:FWLIB/src/stm32f4xx_rcc.c **** {
2796:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2797:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_48MHZ_CLOCKSOURCE(RCC_ClockSource));
2798:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F469_479xx) 
2799:FWLIB/src/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_48MHZCLKSource_PLLSAI)
2800:FWLIB/src/stm32f4xx_rcc.c ****   {
2801:FWLIB/src/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR, RCC_DCKCFGR_CK48MSEL);
2802:FWLIB/src/stm32f4xx_rcc.c ****   }
2803:FWLIB/src/stm32f4xx_rcc.c ****   else
2804:FWLIB/src/stm32f4xx_rcc.c ****   {
2805:FWLIB/src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR, RCC_DCKCFGR_CK48MSEL);
2806:FWLIB/src/stm32f4xx_rcc.c ****   }
ARM GAS  /tmp/cc6d9lwr.s 			page 82


2807:FWLIB/src/stm32f4xx_rcc.c **** #elif  defined(STM32F446xx)
2808:FWLIB/src/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_48MHZCLKSource_PLLSAI)
2809:FWLIB/src/stm32f4xx_rcc.c ****   {
2810:FWLIB/src/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_CK48MSEL);
2811:FWLIB/src/stm32f4xx_rcc.c ****   }
2812:FWLIB/src/stm32f4xx_rcc.c ****   else
2813:FWLIB/src/stm32f4xx_rcc.c ****   {
2814:FWLIB/src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_CK48MSEL);
2815:FWLIB/src/stm32f4xx_rcc.c ****   }
2816:FWLIB/src/stm32f4xx_rcc.c **** #elif defined(STM32F412xG) || defined(STM32F413_423xx)
2817:FWLIB/src/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_CK48CLKSOURCE_PLLI2SQ)
2818:FWLIB/src/stm32f4xx_rcc.c ****   {
2819:FWLIB/src/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_CK48MSEL);
2820:FWLIB/src/stm32f4xx_rcc.c ****   }
2821:FWLIB/src/stm32f4xx_rcc.c ****   else
2822:FWLIB/src/stm32f4xx_rcc.c ****   {
2823:FWLIB/src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_CK48MSEL);
2824:FWLIB/src/stm32f4xx_rcc.c ****   }
2825:FWLIB/src/stm32f4xx_rcc.c **** #else
2826:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F469_479xx */  
2827:FWLIB/src/stm32f4xx_rcc.c **** }
2828:FWLIB/src/stm32f4xx_rcc.c **** 
2829:FWLIB/src/stm32f4xx_rcc.c **** /**
2830:FWLIB/src/stm32f4xx_rcc.c ****   * @brief Configures the SDIO clock Source.
2831:FWLIB/src/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F469_479xx/STM32F446xx devices.
2832:FWLIB/src/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the SDIO clock Source.
2833:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2834:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SDIOCLKSource_48MHZ: 48MHz clock selected.
2835:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SDIOCLKSource_SYSCLK: system clock selected.
2836:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2837:FWLIB/src/stm32f4xx_rcc.c ****   */
2838:FWLIB/src/stm32f4xx_rcc.c **** void RCC_SDIOClockSourceConfig(uint8_t RCC_ClockSource)
2839:FWLIB/src/stm32f4xx_rcc.c **** {
2840:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2841:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SDIO_CLOCKSOURCE(RCC_ClockSource));
2842:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F469_479xx)   
2843:FWLIB/src/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_SDIOCLKSource_SYSCLK)
2844:FWLIB/src/stm32f4xx_rcc.c ****   {
2845:FWLIB/src/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR, RCC_DCKCFGR_SDIOSEL);
2846:FWLIB/src/stm32f4xx_rcc.c ****   }
2847:FWLIB/src/stm32f4xx_rcc.c ****   else
2848:FWLIB/src/stm32f4xx_rcc.c ****   {
2849:FWLIB/src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR, RCC_DCKCFGR_SDIOSEL);
2850:FWLIB/src/stm32f4xx_rcc.c ****   }
2851:FWLIB/src/stm32f4xx_rcc.c **** #elif defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
2852:FWLIB/src/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_SDIOCLKSource_SYSCLK)
2853:FWLIB/src/stm32f4xx_rcc.c ****   {
2854:FWLIB/src/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_SDIOSEL);
2855:FWLIB/src/stm32f4xx_rcc.c ****   }
2856:FWLIB/src/stm32f4xx_rcc.c ****   else
2857:FWLIB/src/stm32f4xx_rcc.c ****   {
2858:FWLIB/src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_SDIOSEL);
2859:FWLIB/src/stm32f4xx_rcc.c ****   }
2860:FWLIB/src/stm32f4xx_rcc.c **** #else
2861:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F469_479xx */ 
2862:FWLIB/src/stm32f4xx_rcc.c **** }
2863:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx || STM32F469_479xx */
ARM GAS  /tmp/cc6d9lwr.s 			page 83


2864:FWLIB/src/stm32f4xx_rcc.c **** 
2865:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F446xx)
2866:FWLIB/src/stm32f4xx_rcc.c **** /**
2867:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 clock gating for the specified IPs.
2868:FWLIB/src/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F446xx devices.
2869:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB1ClockGating: specifies the AHB1 clock gating.
2870:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2871:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_APB1Bridge: AHB1 to APB1 clock
2872:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_APB2Bridge: AHB1 to APB2 clock 
2873:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_CM4DBG: Cortex M4 ETM clock
2874:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_SPARE: Spare clock
2875:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_SRAM: SRAM controller clock
2876:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_FLITF: Flash interface clock
2877:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_RCC: RCC clock
2878:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2879:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2880:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2881:FWLIB/src/stm32f4xx_rcc.c ****   */
2882:FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB1ClockGatingCmd(uint32_t RCC_AHB1ClockGating, FunctionalState NewState)
2883:FWLIB/src/stm32f4xx_rcc.c **** {
2884:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2885:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_CLOCKGATING(RCC_AHB1ClockGating));
2886:FWLIB/src/stm32f4xx_rcc.c **** 
2887:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2888:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
2889:FWLIB/src/stm32f4xx_rcc.c ****   {
2890:FWLIB/src/stm32f4xx_rcc.c ****     RCC->CKGATENR &= ~RCC_AHB1ClockGating;
2891:FWLIB/src/stm32f4xx_rcc.c ****   }
2892:FWLIB/src/stm32f4xx_rcc.c ****   else
2893:FWLIB/src/stm32f4xx_rcc.c ****   {
2894:FWLIB/src/stm32f4xx_rcc.c ****     RCC->CKGATENR |= RCC_AHB1ClockGating;
2895:FWLIB/src/stm32f4xx_rcc.c ****   }
2896:FWLIB/src/stm32f4xx_rcc.c **** }
2897:FWLIB/src/stm32f4xx_rcc.c **** 
2898:FWLIB/src/stm32f4xx_rcc.c **** /**
2899:FWLIB/src/stm32f4xx_rcc.c ****   * @brief Configures the SPDIFRX clock Source.
2900:FWLIB/src/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F446xx devices.
2901:FWLIB/src/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the SPDIFRX clock Source.
2902:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2903:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SPDIFRXCLKSource_PLLR: SPDIFRX clock from PLL_R selected.
2904:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SPDIFRXCLKSource_PLLI2SP: SPDIFRX clock from PLLI2S_P selected.
2905:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2906:FWLIB/src/stm32f4xx_rcc.c ****   */
2907:FWLIB/src/stm32f4xx_rcc.c **** void RCC_SPDIFRXClockSourceConfig(uint8_t RCC_ClockSource)
2908:FWLIB/src/stm32f4xx_rcc.c **** {
2909:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2910:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SPDIFRX_CLOCKSOURCE(RCC_ClockSource));
2911:FWLIB/src/stm32f4xx_rcc.c ****   
2912:FWLIB/src/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_SPDIFRXCLKSource_PLLI2SP)
2913:FWLIB/src/stm32f4xx_rcc.c ****   {
2914:FWLIB/src/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_SPDIFRXSEL);
2915:FWLIB/src/stm32f4xx_rcc.c ****   }
2916:FWLIB/src/stm32f4xx_rcc.c ****   else
2917:FWLIB/src/stm32f4xx_rcc.c ****   {
2918:FWLIB/src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_SPDIFRXSEL);
2919:FWLIB/src/stm32f4xx_rcc.c ****   }
2920:FWLIB/src/stm32f4xx_rcc.c **** }
ARM GAS  /tmp/cc6d9lwr.s 			page 84


2921:FWLIB/src/stm32f4xx_rcc.c **** 
2922:FWLIB/src/stm32f4xx_rcc.c **** /**
2923:FWLIB/src/stm32f4xx_rcc.c ****   * @brief Configures the CEC clock Source.
2924:FWLIB/src/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F446xx devices.
2925:FWLIB/src/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the CEC clock Source.
2926:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2927:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_CECCLKSource_HSIDiv488: CEC clock from HSI/488 selected.
2928:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_CECCLKSource_LSE: CEC clock from LSE selected.
2929:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2930:FWLIB/src/stm32f4xx_rcc.c ****   */
2931:FWLIB/src/stm32f4xx_rcc.c **** void RCC_CECClockSourceConfig(uint8_t RCC_ClockSource)
2932:FWLIB/src/stm32f4xx_rcc.c **** {
2933:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2934:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CEC_CLOCKSOURCE(RCC_ClockSource));
2935:FWLIB/src/stm32f4xx_rcc.c ****   
2936:FWLIB/src/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_CECCLKSource_LSE)
2937:FWLIB/src/stm32f4xx_rcc.c ****   {
2938:FWLIB/src/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_CECSEL);
2939:FWLIB/src/stm32f4xx_rcc.c ****   }
2940:FWLIB/src/stm32f4xx_rcc.c ****   else
2941:FWLIB/src/stm32f4xx_rcc.c ****   {
2942:FWLIB/src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_CECSEL);
2943:FWLIB/src/stm32f4xx_rcc.c ****   }
2944:FWLIB/src/stm32f4xx_rcc.c **** }
2945:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F446xx */
2946:FWLIB/src/stm32f4xx_rcc.c **** 
2947:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F410xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx
2948:FWLIB/src/stm32f4xx_rcc.c **** /**
2949:FWLIB/src/stm32f4xx_rcc.c ****   * @brief Configures the FMPI2C1 clock Source.
2950:FWLIB/src/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F446xx devices.
2951:FWLIB/src/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the FMPI2C1 clock Source.
2952:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2953:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FMPI2C1CLKSource_APB1: FMPI2C1 clock from APB1 selected.
2954:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FMPI2C1CLKSource_SYSCLK: FMPI2C1 clock from Sytem clock selected.
2955:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FMPI2C1CLKSource_HSI: FMPI2C1 clock from HSI selected.
2956:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2957:FWLIB/src/stm32f4xx_rcc.c ****   */
2958:FWLIB/src/stm32f4xx_rcc.c **** void RCC_FMPI2C1ClockSourceConfig(uint32_t RCC_ClockSource)
2959:FWLIB/src/stm32f4xx_rcc.c **** {
2960:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2961:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_FMPI2C1_CLOCKSOURCE(RCC_ClockSource));
2962:FWLIB/src/stm32f4xx_rcc.c **** 
2963:FWLIB/src/stm32f4xx_rcc.c ****   /* Clear FMPI2C1 clock source selection source bits */
2964:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR2 &= ~RCC_DCKCFGR2_FMPI2C1SEL;
2965:FWLIB/src/stm32f4xx_rcc.c ****   /* Set new FMPI2C1 clock source */
2966:FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR2 |= RCC_ClockSource;
2967:FWLIB/src/stm32f4xx_rcc.c **** }
2968:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F410xx || STM32F412xG || STM32F413_423xx || STM32F446xx */
2969:FWLIB/src/stm32f4xx_rcc.c **** /**
2970:FWLIB/src/stm32f4xx_rcc.c ****   * @}
2971:FWLIB/src/stm32f4xx_rcc.c ****   */
2972:FWLIB/src/stm32f4xx_rcc.c **** 
2973:FWLIB/src/stm32f4xx_rcc.c **** #if defined(STM32F410xx)
2974:FWLIB/src/stm32f4xx_rcc.c **** /**
2975:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the MCO1.
2976:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the MCO1.
2977:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
ARM GAS  /tmp/cc6d9lwr.s 			page 85


2978:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2979:FWLIB/src/stm32f4xx_rcc.c ****   */
2980:FWLIB/src/stm32f4xx_rcc.c **** void RCC_MCO1Cmd(FunctionalState NewState)
2981:FWLIB/src/stm32f4xx_rcc.c **** {
2982:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2983:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2984:FWLIB/src/stm32f4xx_rcc.c **** 
2985:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) RCC_CFGR_MCO1EN_BB = (uint32_t)NewState;
2986:FWLIB/src/stm32f4xx_rcc.c **** }
2987:FWLIB/src/stm32f4xx_rcc.c **** 
2988:FWLIB/src/stm32f4xx_rcc.c **** /**
2989:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the MCO2.
2990:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the MCO2.
2991:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2992:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2993:FWLIB/src/stm32f4xx_rcc.c ****   */
2994:FWLIB/src/stm32f4xx_rcc.c **** void RCC_MCO2Cmd(FunctionalState NewState)
2995:FWLIB/src/stm32f4xx_rcc.c **** {
2996:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2997:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2998:FWLIB/src/stm32f4xx_rcc.c **** 
2999:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) RCC_CFGR_MCO2EN_BB = (uint32_t)NewState;
3000:FWLIB/src/stm32f4xx_rcc.c **** }
3001:FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F410xx */
3002:FWLIB/src/stm32f4xx_rcc.c **** 
3003:FWLIB/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group4 Interrupts and flags management functions
3004:FWLIB/src/stm32f4xx_rcc.c ****  *  @brief   Interrupts and flags management functions 
3005:FWLIB/src/stm32f4xx_rcc.c ****  *
3006:FWLIB/src/stm32f4xx_rcc.c **** @verbatim   
3007:FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================
3008:FWLIB/src/stm32f4xx_rcc.c ****                 ##### Interrupts and flags management functions #####
3009:FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================  
3010:FWLIB/src/stm32f4xx_rcc.c **** 
3011:FWLIB/src/stm32f4xx_rcc.c **** @endverbatim
3012:FWLIB/src/stm32f4xx_rcc.c ****   * @{
3013:FWLIB/src/stm32f4xx_rcc.c ****   */
3014:FWLIB/src/stm32f4xx_rcc.c **** 
3015:FWLIB/src/stm32f4xx_rcc.c **** /**
3016:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
3017:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
3018:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
3019:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
3020:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
3021:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
3022:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
3023:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
3024:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt
3025:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469x
3026:FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
3027:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
3028:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
3029:FWLIB/src/stm32f4xx_rcc.c ****   */
3030:FWLIB/src/stm32f4xx_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
3031:FWLIB/src/stm32f4xx_rcc.c **** {
 1876              		.loc 1 3031 0
 1877              		.cfi_startproc
 1878              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc6d9lwr.s 			page 86


 1879              		@ frame_needed = 0, uses_anonymous_args = 0
 1880              		@ link register save eliminated.
 1881              	.LVL176:
3032:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
3033:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
3034:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
3035:FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1882              		.loc 1 3035 0
 1883 0000 29B9     		cbnz	r1, .L208
3036:FWLIB/src/stm32f4xx_rcc.c ****   {
3037:FWLIB/src/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
3038:FWLIB/src/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
3039:FWLIB/src/stm32f4xx_rcc.c ****   }
3040:FWLIB/src/stm32f4xx_rcc.c ****   else
3041:FWLIB/src/stm32f4xx_rcc.c ****   {
3042:FWLIB/src/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
3043:FWLIB/src/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 1884              		.loc 1 3043 0
 1885 0002 054A     		ldr	r2, .L209
 1886 0004 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1887 0006 23EA0000 		bic	r0, r3, r0
 1888              	.LVL177:
 1889 000a 1070     		strb	r0, [r2]
 1890 000c 7047     		bx	lr
 1891              	.LVL178:
 1892              	.L208:
3038:FWLIB/src/stm32f4xx_rcc.c ****   }
 1893              		.loc 1 3038 0
 1894 000e 024A     		ldr	r2, .L209
 1895 0010 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1896 0012 1843     		orrs	r0, r0, r3
 1897              	.LVL179:
 1898 0014 1070     		strb	r0, [r2]
 1899 0016 7047     		bx	lr
 1900              	.L210:
 1901              		.align	2
 1902              	.L209:
 1903 0018 0D380240 		.word	1073887245
 1904              		.cfi_endproc
 1905              	.LFE171:
 1907              		.section	.text.RCC_GetFlagStatus,"ax",%progbits
 1908              		.align	1
 1909              		.global	RCC_GetFlagStatus
 1910              		.syntax unified
 1911              		.thumb
 1912              		.thumb_func
 1913              		.fpu fpv4-sp-d16
 1915              	RCC_GetFlagStatus:
 1916              	.LFB172:
3044:FWLIB/src/stm32f4xx_rcc.c ****   }
3045:FWLIB/src/stm32f4xx_rcc.c **** }
3046:FWLIB/src/stm32f4xx_rcc.c **** 
3047:FWLIB/src/stm32f4xx_rcc.c **** /**
3048:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
3049:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
3050:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
3051:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
ARM GAS  /tmp/cc6d9lwr.s 			page 87


3052:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
3053:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLRDY: main PLL clock ready
3054:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLI2SRDY: PLLI2S clock ready
3055:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLSAIRDY: PLLSAI clock ready (only for STM32F42xxx/43xxx/446xx/469xx/
3056:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
3057:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
3058:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_BORRST: POR/PDR or BOR reset
3059:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PINRST: Pin reset
3060:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PORRST: POR/PDR reset
3061:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_SFTRST: Software reset
3062:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
3063:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
3064:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LPWRRST: Low Power reset
3065:FWLIB/src/stm32f4xx_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
3066:FWLIB/src/stm32f4xx_rcc.c ****   */
3067:FWLIB/src/stm32f4xx_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
3068:FWLIB/src/stm32f4xx_rcc.c **** {
 1917              		.loc 1 3068 0
 1918              		.cfi_startproc
 1919              		@ args = 0, pretend = 0, frame = 0
 1920              		@ frame_needed = 0, uses_anonymous_args = 0
 1921              		@ link register save eliminated.
 1922              	.LVL180:
3069:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0;
3070:FWLIB/src/stm32f4xx_rcc.c ****   uint32_t statusreg = 0;
3071:FWLIB/src/stm32f4xx_rcc.c ****   FlagStatus bitstatus = RESET;
3072:FWLIB/src/stm32f4xx_rcc.c **** 
3073:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
3074:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
3075:FWLIB/src/stm32f4xx_rcc.c **** 
3076:FWLIB/src/stm32f4xx_rcc.c ****   /* Get the RCC register index */
3077:FWLIB/src/stm32f4xx_rcc.c ****   tmp = RCC_FLAG >> 5;
 1923              		.loc 1 3077 0
 1924 0000 4309     		lsrs	r3, r0, #5
 1925              	.LVL181:
3078:FWLIB/src/stm32f4xx_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
 1926              		.loc 1 3078 0
 1927 0002 012B     		cmp	r3, #1
 1928 0004 0CD0     		beq	.L217
3079:FWLIB/src/stm32f4xx_rcc.c ****   {
3080:FWLIB/src/stm32f4xx_rcc.c ****     statusreg = RCC->CR;
3081:FWLIB/src/stm32f4xx_rcc.c ****   }
3082:FWLIB/src/stm32f4xx_rcc.c ****   else if (tmp == 2)          /* The flag to check is in BDCR register */
 1929              		.loc 1 3082 0
 1930 0006 022B     		cmp	r3, #2
 1931 0008 0DD0     		beq	.L218
3083:FWLIB/src/stm32f4xx_rcc.c ****   {
3084:FWLIB/src/stm32f4xx_rcc.c ****     statusreg = RCC->BDCR;
3085:FWLIB/src/stm32f4xx_rcc.c ****   }
3086:FWLIB/src/stm32f4xx_rcc.c ****   else                       /* The flag to check is in CSR register */
3087:FWLIB/src/stm32f4xx_rcc.c ****   {
3088:FWLIB/src/stm32f4xx_rcc.c ****     statusreg = RCC->CSR;
 1932              		.loc 1 3088 0
 1933 000a 094B     		ldr	r3, .L220
 1934              	.LVL182:
 1935 000c 5B6F     		ldr	r3, [r3, #116]
 1936              	.LVL183:
ARM GAS  /tmp/cc6d9lwr.s 			page 88


 1937              	.L213:
3089:FWLIB/src/stm32f4xx_rcc.c ****   }
3090:FWLIB/src/stm32f4xx_rcc.c **** 
3091:FWLIB/src/stm32f4xx_rcc.c ****   /* Get the flag position */
3092:FWLIB/src/stm32f4xx_rcc.c ****   tmp = RCC_FLAG & FLAG_MASK;
 1938              		.loc 1 3092 0
 1939 000e 00F01F00 		and	r0, r0, #31
 1940              	.LVL184:
3093:FWLIB/src/stm32f4xx_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 1941              		.loc 1 3093 0
 1942 0012 23FA00F0 		lsr	r0, r3, r0
 1943              	.LVL185:
 1944 0016 10F0010F 		tst	r0, #1
 1945 001a 07D1     		bne	.L219
3094:FWLIB/src/stm32f4xx_rcc.c ****   {
3095:FWLIB/src/stm32f4xx_rcc.c ****     bitstatus = SET;
3096:FWLIB/src/stm32f4xx_rcc.c ****   }
3097:FWLIB/src/stm32f4xx_rcc.c ****   else
3098:FWLIB/src/stm32f4xx_rcc.c ****   {
3099:FWLIB/src/stm32f4xx_rcc.c ****     bitstatus = RESET;
 1946              		.loc 1 3099 0
 1947 001c 0020     		movs	r0, #0
 1948              	.LVL186:
3100:FWLIB/src/stm32f4xx_rcc.c ****   }
3101:FWLIB/src/stm32f4xx_rcc.c ****   /* Return the flag status */
3102:FWLIB/src/stm32f4xx_rcc.c ****   return bitstatus;
3103:FWLIB/src/stm32f4xx_rcc.c **** }
 1949              		.loc 1 3103 0
 1950 001e 7047     		bx	lr
 1951              	.LVL187:
 1952              	.L217:
3080:FWLIB/src/stm32f4xx_rcc.c ****   }
 1953              		.loc 1 3080 0
 1954 0020 034B     		ldr	r3, .L220
 1955              	.LVL188:
 1956 0022 1B68     		ldr	r3, [r3]
 1957              	.LVL189:
 1958 0024 F3E7     		b	.L213
 1959              	.LVL190:
 1960              	.L218:
3084:FWLIB/src/stm32f4xx_rcc.c ****   }
 1961              		.loc 1 3084 0
 1962 0026 024B     		ldr	r3, .L220
 1963              	.LVL191:
 1964 0028 1B6F     		ldr	r3, [r3, #112]
 1965              	.LVL192:
 1966 002a F0E7     		b	.L213
 1967              	.LVL193:
 1968              	.L219:
3095:FWLIB/src/stm32f4xx_rcc.c ****   }
 1969              		.loc 1 3095 0
 1970 002c 0120     		movs	r0, #1
 1971 002e 7047     		bx	lr
 1972              	.L221:
 1973              		.align	2
 1974              	.L220:
 1975 0030 00380240 		.word	1073887232
ARM GAS  /tmp/cc6d9lwr.s 			page 89


 1976              		.cfi_endproc
 1977              	.LFE172:
 1979              		.section	.text.RCC_WaitForHSEStartUp,"ax",%progbits
 1980              		.align	1
 1981              		.global	RCC_WaitForHSEStartUp
 1982              		.syntax unified
 1983              		.thumb
 1984              		.thumb_func
 1985              		.fpu fpv4-sp-d16
 1987              	RCC_WaitForHSEStartUp:
 1988              	.LFB125:
 309:FWLIB/src/stm32f4xx_rcc.c ****   __IO uint32_t startupcounter = 0;
 1989              		.loc 1 309 0
 1990              		.cfi_startproc
 1991              		@ args = 0, pretend = 0, frame = 8
 1992              		@ frame_needed = 0, uses_anonymous_args = 0
 1993 0000 00B5     		push	{lr}
 1994              	.LCFI3:
 1995              		.cfi_def_cfa_offset 4
 1996              		.cfi_offset 14, -4
 1997 0002 83B0     		sub	sp, sp, #12
 1998              	.LCFI4:
 1999              		.cfi_def_cfa_offset 16
 310:FWLIB/src/stm32f4xx_rcc.c ****   ErrorStatus status = ERROR;
 2000              		.loc 1 310 0
 2001 0004 0023     		movs	r3, #0
 2002 0006 0193     		str	r3, [sp, #4]
 2003              	.LVL194:
 2004              	.L224:
 316:FWLIB/src/stm32f4xx_rcc.c ****     startupcounter++;
 2005              		.loc 1 316 0 discriminator 2
 2006 0008 3120     		movs	r0, #49
 2007 000a FFF7FEFF 		bl	RCC_GetFlagStatus
 2008              	.LVL195:
 317:FWLIB/src/stm32f4xx_rcc.c ****   } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 2009              		.loc 1 317 0 discriminator 2
 2010 000e 019B     		ldr	r3, [sp, #4]
 2011 0010 0133     		adds	r3, r3, #1
 2012 0012 0193     		str	r3, [sp, #4]
 318:FWLIB/src/stm32f4xx_rcc.c **** 
 2013              		.loc 1 318 0 discriminator 2
 2014 0014 019B     		ldr	r3, [sp, #4]
 2015 0016 B3F5A04F 		cmp	r3, #20480
 2016 001a 01D0     		beq	.L223
 318:FWLIB/src/stm32f4xx_rcc.c **** 
 2017              		.loc 1 318 0 is_stmt 0 discriminator 1
 2018 001c 0028     		cmp	r0, #0
 2019 001e F3D0     		beq	.L224
 2020              	.L223:
 320:FWLIB/src/stm32f4xx_rcc.c ****   {
 2021              		.loc 1 320 0 is_stmt 1
 2022 0020 3120     		movs	r0, #49
 2023              	.LVL196:
 2024 0022 FFF7FEFF 		bl	RCC_GetFlagStatus
 2025              	.LVL197:
 2026 0026 18B9     		cbnz	r0, .L228
 326:FWLIB/src/stm32f4xx_rcc.c ****   }
ARM GAS  /tmp/cc6d9lwr.s 			page 90


 2027              		.loc 1 326 0
 2028 0028 0020     		movs	r0, #0
 2029              	.L225:
 2030              	.LVL198:
 329:FWLIB/src/stm32f4xx_rcc.c **** 
 2031              		.loc 1 329 0
 2032 002a 03B0     		add	sp, sp, #12
 2033              	.LCFI5:
 2034              		.cfi_remember_state
 2035              		.cfi_def_cfa_offset 4
 2036              		@ sp needed
 2037 002c 5DF804FB 		ldr	pc, [sp], #4
 2038              	.LVL199:
 2039              	.L228:
 2040              	.LCFI6:
 2041              		.cfi_restore_state
 322:FWLIB/src/stm32f4xx_rcc.c ****   }
 2042              		.loc 1 322 0
 2043 0030 0120     		movs	r0, #1
 2044 0032 FAE7     		b	.L225
 2045              		.cfi_endproc
 2046              	.LFE125:
 2048              		.section	.text.RCC_ClearFlag,"ax",%progbits
 2049              		.align	1
 2050              		.global	RCC_ClearFlag
 2051              		.syntax unified
 2052              		.thumb
 2053              		.thumb_func
 2054              		.fpu fpv4-sp-d16
 2056              	RCC_ClearFlag:
 2057              	.LFB173:
3104:FWLIB/src/stm32f4xx_rcc.c **** 
3105:FWLIB/src/stm32f4xx_rcc.c **** /**
3106:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Clears the RCC reset flags.
3107:FWLIB/src/stm32f4xx_rcc.c ****   *         The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST,  RCC_FLAG_SFTRST,
3108:FWLIB/src/stm32f4xx_rcc.c ****   *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
3109:FWLIB/src/stm32f4xx_rcc.c ****   * @param  None
3110:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
3111:FWLIB/src/stm32f4xx_rcc.c ****   */
3112:FWLIB/src/stm32f4xx_rcc.c **** void RCC_ClearFlag(void)
3113:FWLIB/src/stm32f4xx_rcc.c **** {
 2058              		.loc 1 3113 0
 2059              		.cfi_startproc
 2060              		@ args = 0, pretend = 0, frame = 0
 2061              		@ frame_needed = 0, uses_anonymous_args = 0
 2062              		@ link register save eliminated.
3114:FWLIB/src/stm32f4xx_rcc.c ****   /* Set RMVF bit to clear the reset flags */
3115:FWLIB/src/stm32f4xx_rcc.c ****   RCC->CSR |= RCC_CSR_RMVF;
 2063              		.loc 1 3115 0
 2064 0000 024A     		ldr	r2, .L230
 2065 0002 536F     		ldr	r3, [r2, #116]
 2066 0004 43F08073 		orr	r3, r3, #16777216
 2067 0008 5367     		str	r3, [r2, #116]
 2068 000a 7047     		bx	lr
 2069              	.L231:
 2070              		.align	2
 2071              	.L230:
ARM GAS  /tmp/cc6d9lwr.s 			page 91


 2072 000c 00380240 		.word	1073887232
 2073              		.cfi_endproc
 2074              	.LFE173:
 2076              		.section	.text.RCC_GetITStatus,"ax",%progbits
 2077              		.align	1
 2078              		.global	RCC_GetITStatus
 2079              		.syntax unified
 2080              		.thumb
 2081              		.thumb_func
 2082              		.fpu fpv4-sp-d16
 2084              	RCC_GetITStatus:
 2085              	.LFB174:
3116:FWLIB/src/stm32f4xx_rcc.c **** }
3117:FWLIB/src/stm32f4xx_rcc.c **** 
3118:FWLIB/src/stm32f4xx_rcc.c **** /**
3119:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
3120:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
3121:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
3122:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
3123:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
3124:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
3125:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
3126:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
3127:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt
3128:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx/446x
3129:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
3130:FWLIB/src/stm32f4xx_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
3131:FWLIB/src/stm32f4xx_rcc.c ****   */
3132:FWLIB/src/stm32f4xx_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
3133:FWLIB/src/stm32f4xx_rcc.c **** {
 2086              		.loc 1 3133 0
 2087              		.cfi_startproc
 2088              		@ args = 0, pretend = 0, frame = 0
 2089              		@ frame_needed = 0, uses_anonymous_args = 0
 2090              		@ link register save eliminated.
 2091              	.LVL200:
3134:FWLIB/src/stm32f4xx_rcc.c ****   ITStatus bitstatus = RESET;
3135:FWLIB/src/stm32f4xx_rcc.c **** 
3136:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
3137:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
3138:FWLIB/src/stm32f4xx_rcc.c **** 
3139:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the status of the specified RCC interrupt */
3140:FWLIB/src/stm32f4xx_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 2092              		.loc 1 3140 0
 2093 0000 034B     		ldr	r3, .L236
 2094 0002 DB68     		ldr	r3, [r3, #12]
 2095 0004 1842     		tst	r0, r3
 2096 0006 01D1     		bne	.L235
3141:FWLIB/src/stm32f4xx_rcc.c ****   {
3142:FWLIB/src/stm32f4xx_rcc.c ****     bitstatus = SET;
3143:FWLIB/src/stm32f4xx_rcc.c ****   }
3144:FWLIB/src/stm32f4xx_rcc.c ****   else
3145:FWLIB/src/stm32f4xx_rcc.c ****   {
3146:FWLIB/src/stm32f4xx_rcc.c ****     bitstatus = RESET;
 2097              		.loc 1 3146 0
 2098 0008 0020     		movs	r0, #0
 2099              	.LVL201:
ARM GAS  /tmp/cc6d9lwr.s 			page 92


3147:FWLIB/src/stm32f4xx_rcc.c ****   }
3148:FWLIB/src/stm32f4xx_rcc.c ****   /* Return the RCC_IT status */
3149:FWLIB/src/stm32f4xx_rcc.c ****   return  bitstatus;
3150:FWLIB/src/stm32f4xx_rcc.c **** }
 2100              		.loc 1 3150 0
 2101 000a 7047     		bx	lr
 2102              	.LVL202:
 2103              	.L235:
3142:FWLIB/src/stm32f4xx_rcc.c ****   }
 2104              		.loc 1 3142 0
 2105 000c 0120     		movs	r0, #1
 2106              	.LVL203:
 2107 000e 7047     		bx	lr
 2108              	.L237:
 2109              		.align	2
 2110              	.L236:
 2111 0010 00380240 		.word	1073887232
 2112              		.cfi_endproc
 2113              	.LFE174:
 2115              		.section	.text.RCC_ClearITPendingBit,"ax",%progbits
 2116              		.align	1
 2117              		.global	RCC_ClearITPendingBit
 2118              		.syntax unified
 2119              		.thumb
 2120              		.thumb_func
 2121              		.fpu fpv4-sp-d16
 2123              	RCC_ClearITPendingBit:
 2124              	.LFB175:
3151:FWLIB/src/stm32f4xx_rcc.c **** 
3152:FWLIB/src/stm32f4xx_rcc.c **** /**
3153:FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
3154:FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
3155:FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
3156:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
3157:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
3158:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
3159:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
3160:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
3161:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
3162:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469x
3163:FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
3164:FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
3165:FWLIB/src/stm32f4xx_rcc.c ****   */
3166:FWLIB/src/stm32f4xx_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
3167:FWLIB/src/stm32f4xx_rcc.c **** {
 2125              		.loc 1 3167 0
 2126              		.cfi_startproc
 2127              		@ args = 0, pretend = 0, frame = 0
 2128              		@ frame_needed = 0, uses_anonymous_args = 0
 2129              		@ link register save eliminated.
 2130              	.LVL204:
3168:FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
3169:FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
3170:FWLIB/src/stm32f4xx_rcc.c **** 
3171:FWLIB/src/stm32f4xx_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
3172:FWLIB/src/stm32f4xx_rcc.c ****      pending bits */
3173:FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
ARM GAS  /tmp/cc6d9lwr.s 			page 93


 2131              		.loc 1 3173 0
 2132 0000 014B     		ldr	r3, .L239
 2133 0002 1870     		strb	r0, [r3]
 2134 0004 7047     		bx	lr
 2135              	.L240:
 2136 0006 00BF     		.align	2
 2137              	.L239:
 2138 0008 0E380240 		.word	1073887246
 2139              		.cfi_endproc
 2140              	.LFE175:
 2142              		.section	.data.APBAHBPrescTable,"aw",%progbits
 2143              		.align	2
 2144              		.set	.LANCHOR0,. + 0
 2147              	APBAHBPrescTable:
 2148 0000 00       		.byte	0
 2149 0001 00       		.byte	0
 2150 0002 00       		.byte	0
 2151 0003 00       		.byte	0
 2152 0004 01       		.byte	1
 2153 0005 02       		.byte	2
 2154 0006 03       		.byte	3
 2155 0007 04       		.byte	4
 2156 0008 01       		.byte	1
 2157 0009 02       		.byte	2
 2158 000a 03       		.byte	3
 2159 000b 04       		.byte	4
 2160 000c 06       		.byte	6
 2161 000d 07       		.byte	7
 2162 000e 08       		.byte	8
 2163 000f 09       		.byte	9
 2164              		.text
 2165              	.Letext0:
 2166              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 2167              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 2168              		.file 4 "F4_CORE/core_cm4.h"
 2169              		.file 5 "USER/system_stm32f4xx.h"
 2170              		.file 6 "USER/stm32f4xx.h"
 2171              		.file 7 "FWLIB/inc/stm32f4xx_rcc.h"
ARM GAS  /tmp/cc6d9lwr.s 			page 94


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_rcc.c
     /tmp/cc6d9lwr.s:18     .text.RCC_DeInit:0000000000000000 $t
     /tmp/cc6d9lwr.s:25     .text.RCC_DeInit:0000000000000000 RCC_DeInit
     /tmp/cc6d9lwr.s:67     .text.RCC_DeInit:000000000000003c $d
     /tmp/cc6d9lwr.s:74     .text.RCC_HSEConfig:0000000000000000 $t
     /tmp/cc6d9lwr.s:81     .text.RCC_HSEConfig:0000000000000000 RCC_HSEConfig
     /tmp/cc6d9lwr.s:99     .text.RCC_HSEConfig:000000000000000c $d
     /tmp/cc6d9lwr.s:104    .text.RCC_AdjustHSICalibrationValue:0000000000000000 $t
     /tmp/cc6d9lwr.s:111    .text.RCC_AdjustHSICalibrationValue:0000000000000000 RCC_AdjustHSICalibrationValue
     /tmp/cc6d9lwr.s:135    .text.RCC_AdjustHSICalibrationValue:0000000000000010 $d
     /tmp/cc6d9lwr.s:140    .text.RCC_HSICmd:0000000000000000 $t
     /tmp/cc6d9lwr.s:147    .text.RCC_HSICmd:0000000000000000 RCC_HSICmd
     /tmp/cc6d9lwr.s:162    .text.RCC_HSICmd:0000000000000008 $d
     /tmp/cc6d9lwr.s:167    .text.RCC_LSEConfig:0000000000000000 $t
     /tmp/cc6d9lwr.s:174    .text.RCC_LSEConfig:0000000000000000 RCC_LSEConfig
     /tmp/cc6d9lwr.s:210    .text.RCC_LSEConfig:0000000000000024 $d
     /tmp/cc6d9lwr.s:215    .text.RCC_LSICmd:0000000000000000 $t
     /tmp/cc6d9lwr.s:222    .text.RCC_LSICmd:0000000000000000 RCC_LSICmd
     /tmp/cc6d9lwr.s:237    .text.RCC_LSICmd:0000000000000008 $d
     /tmp/cc6d9lwr.s:242    .text.RCC_PLLConfig:0000000000000000 $t
     /tmp/cc6d9lwr.s:249    .text.RCC_PLLConfig:0000000000000000 RCC_PLLConfig
     /tmp/cc6d9lwr.s:275    .text.RCC_PLLConfig:000000000000001c $d
     /tmp/cc6d9lwr.s:280    .text.RCC_PLLCmd:0000000000000000 $t
     /tmp/cc6d9lwr.s:287    .text.RCC_PLLCmd:0000000000000000 RCC_PLLCmd
     /tmp/cc6d9lwr.s:302    .text.RCC_PLLCmd:0000000000000008 $d
     /tmp/cc6d9lwr.s:307    .text.RCC_PLLI2SConfig:0000000000000000 $t
     /tmp/cc6d9lwr.s:314    .text.RCC_PLLI2SConfig:0000000000000000 RCC_PLLI2SConfig
     /tmp/cc6d9lwr.s:332    .text.RCC_PLLI2SConfig:0000000000000010 $d
     /tmp/cc6d9lwr.s:337    .text.RCC_PLLI2SCmd:0000000000000000 $t
     /tmp/cc6d9lwr.s:344    .text.RCC_PLLI2SCmd:0000000000000000 RCC_PLLI2SCmd
     /tmp/cc6d9lwr.s:359    .text.RCC_PLLI2SCmd:0000000000000008 $d
     /tmp/cc6d9lwr.s:364    .text.RCC_PLLSAIConfig:0000000000000000 $t
     /tmp/cc6d9lwr.s:371    .text.RCC_PLLSAIConfig:0000000000000000 RCC_PLLSAIConfig
     /tmp/cc6d9lwr.s:390    .text.RCC_PLLSAIConfig:0000000000000014 $d
     /tmp/cc6d9lwr.s:395    .text.RCC_PLLSAICmd:0000000000000000 $t
     /tmp/cc6d9lwr.s:402    .text.RCC_PLLSAICmd:0000000000000000 RCC_PLLSAICmd
     /tmp/cc6d9lwr.s:417    .text.RCC_PLLSAICmd:0000000000000008 $d
     /tmp/cc6d9lwr.s:422    .text.RCC_ClockSecuritySystemCmd:0000000000000000 $t
     /tmp/cc6d9lwr.s:429    .text.RCC_ClockSecuritySystemCmd:0000000000000000 RCC_ClockSecuritySystemCmd
     /tmp/cc6d9lwr.s:444    .text.RCC_ClockSecuritySystemCmd:0000000000000008 $d
     /tmp/cc6d9lwr.s:449    .text.RCC_MCO1Config:0000000000000000 $t
     /tmp/cc6d9lwr.s:456    .text.RCC_MCO1Config:0000000000000000 RCC_MCO1Config
     /tmp/cc6d9lwr.s:482    .text.RCC_MCO1Config:0000000000000010 $d
     /tmp/cc6d9lwr.s:487    .text.RCC_MCO2Config:0000000000000000 $t
     /tmp/cc6d9lwr.s:494    .text.RCC_MCO2Config:0000000000000000 RCC_MCO2Config
     /tmp/cc6d9lwr.s:520    .text.RCC_MCO2Config:0000000000000010 $d
     /tmp/cc6d9lwr.s:525    .text.RCC_SYSCLKConfig:0000000000000000 $t
     /tmp/cc6d9lwr.s:532    .text.RCC_SYSCLKConfig:0000000000000000 RCC_SYSCLKConfig
     /tmp/cc6d9lwr.s:556    .text.RCC_SYSCLKConfig:0000000000000010 $d
     /tmp/cc6d9lwr.s:561    .text.RCC_GetSYSCLKSource:0000000000000000 $t
     /tmp/cc6d9lwr.s:568    .text.RCC_GetSYSCLKSource:0000000000000000 RCC_GetSYSCLKSource
     /tmp/cc6d9lwr.s:584    .text.RCC_GetSYSCLKSource:000000000000000c $d
     /tmp/cc6d9lwr.s:589    .text.RCC_HCLKConfig:0000000000000000 $t
     /tmp/cc6d9lwr.s:596    .text.RCC_HCLKConfig:0000000000000000 RCC_HCLKConfig
     /tmp/cc6d9lwr.s:620    .text.RCC_HCLKConfig:0000000000000010 $d
     /tmp/cc6d9lwr.s:625    .text.RCC_PCLK1Config:0000000000000000 $t
ARM GAS  /tmp/cc6d9lwr.s 			page 95


     /tmp/cc6d9lwr.s:632    .text.RCC_PCLK1Config:0000000000000000 RCC_PCLK1Config
     /tmp/cc6d9lwr.s:656    .text.RCC_PCLK1Config:0000000000000010 $d
     /tmp/cc6d9lwr.s:661    .text.RCC_PCLK2Config:0000000000000000 $t
     /tmp/cc6d9lwr.s:668    .text.RCC_PCLK2Config:0000000000000000 RCC_PCLK2Config
     /tmp/cc6d9lwr.s:692    .text.RCC_PCLK2Config:0000000000000010 $d
     /tmp/cc6d9lwr.s:697    .text.RCC_GetClocksFreq:0000000000000000 $t
     /tmp/cc6d9lwr.s:704    .text.RCC_GetClocksFreq:0000000000000000 RCC_GetClocksFreq
     /tmp/cc6d9lwr.s:859    .text.RCC_GetClocksFreq:00000000000000a8 $d
     /tmp/cc6d9lwr.s:867    .text.RCC_RTCCLKConfig:0000000000000000 $t
     /tmp/cc6d9lwr.s:874    .text.RCC_RTCCLKConfig:0000000000000000 RCC_RTCCLKConfig
     /tmp/cc6d9lwr.s:916    .text.RCC_RTCCLKConfig:0000000000000030 $d
     /tmp/cc6d9lwr.s:921    .text.RCC_RTCCLKCmd:0000000000000000 $t
     /tmp/cc6d9lwr.s:928    .text.RCC_RTCCLKCmd:0000000000000000 RCC_RTCCLKCmd
     /tmp/cc6d9lwr.s:943    .text.RCC_RTCCLKCmd:0000000000000008 $d
     /tmp/cc6d9lwr.s:948    .text.RCC_BackupResetCmd:0000000000000000 $t
     /tmp/cc6d9lwr.s:955    .text.RCC_BackupResetCmd:0000000000000000 RCC_BackupResetCmd
     /tmp/cc6d9lwr.s:970    .text.RCC_BackupResetCmd:0000000000000008 $d
     /tmp/cc6d9lwr.s:975    .text.RCC_I2SCLKConfig:0000000000000000 $t
     /tmp/cc6d9lwr.s:982    .text.RCC_I2SCLKConfig:0000000000000000 RCC_I2SCLKConfig
     /tmp/cc6d9lwr.s:997    .text.RCC_I2SCLKConfig:0000000000000008 $d
     /tmp/cc6d9lwr.s:1002   .text.RCC_SAIBlockACLKConfig:0000000000000000 $t
     /tmp/cc6d9lwr.s:1009   .text.RCC_SAIBlockACLKConfig:0000000000000000 RCC_SAIBlockACLKConfig
     /tmp/cc6d9lwr.s:1033   .text.RCC_SAIBlockACLKConfig:0000000000000014 $d
     /tmp/cc6d9lwr.s:1038   .text.RCC_SAIBlockBCLKConfig:0000000000000000 $t
     /tmp/cc6d9lwr.s:1045   .text.RCC_SAIBlockBCLKConfig:0000000000000000 RCC_SAIBlockBCLKConfig
     /tmp/cc6d9lwr.s:1069   .text.RCC_SAIBlockBCLKConfig:0000000000000014 $d
     /tmp/cc6d9lwr.s:1074   .text.RCC_SAIPLLI2SClkDivConfig:0000000000000000 $t
     /tmp/cc6d9lwr.s:1081   .text.RCC_SAIPLLI2SClkDivConfig:0000000000000000 RCC_SAIPLLI2SClkDivConfig
     /tmp/cc6d9lwr.s:1107   .text.RCC_SAIPLLI2SClkDivConfig:0000000000000014 $d
     /tmp/cc6d9lwr.s:1112   .text.RCC_SAIPLLSAIClkDivConfig:0000000000000000 $t
     /tmp/cc6d9lwr.s:1119   .text.RCC_SAIPLLSAIClkDivConfig:0000000000000000 RCC_SAIPLLSAIClkDivConfig
     /tmp/cc6d9lwr.s:1145   .text.RCC_SAIPLLSAIClkDivConfig:0000000000000018 $d
     /tmp/cc6d9lwr.s:1150   .text.RCC_LTDCCLKDivConfig:0000000000000000 $t
     /tmp/cc6d9lwr.s:1157   .text.RCC_LTDCCLKDivConfig:0000000000000000 RCC_LTDCCLKDivConfig
     /tmp/cc6d9lwr.s:1181   .text.RCC_LTDCCLKDivConfig:0000000000000014 $d
     /tmp/cc6d9lwr.s:1186   .text.RCC_TIMCLKPresConfig:0000000000000000 $t
     /tmp/cc6d9lwr.s:1193   .text.RCC_TIMCLKPresConfig:0000000000000000 RCC_TIMCLKPresConfig
     /tmp/cc6d9lwr.s:1208   .text.RCC_TIMCLKPresConfig:0000000000000008 $d
     /tmp/cc6d9lwr.s:1213   .text.RCC_AHB1PeriphClockCmd:0000000000000000 $t
     /tmp/cc6d9lwr.s:1220   .text.RCC_AHB1PeriphClockCmd:0000000000000000 RCC_AHB1PeriphClockCmd
     /tmp/cc6d9lwr.s:1249   .text.RCC_AHB1PeriphClockCmd:0000000000000018 $d
     /tmp/cc6d9lwr.s:1254   .text.RCC_AHB2PeriphClockCmd:0000000000000000 $t
     /tmp/cc6d9lwr.s:1261   .text.RCC_AHB2PeriphClockCmd:0000000000000000 RCC_AHB2PeriphClockCmd
     /tmp/cc6d9lwr.s:1290   .text.RCC_AHB2PeriphClockCmd:0000000000000018 $d
     /tmp/cc6d9lwr.s:1295   .text.RCC_AHB3PeriphClockCmd:0000000000000000 $t
     /tmp/cc6d9lwr.s:1302   .text.RCC_AHB3PeriphClockCmd:0000000000000000 RCC_AHB3PeriphClockCmd
     /tmp/cc6d9lwr.s:1331   .text.RCC_AHB3PeriphClockCmd:0000000000000018 $d
     /tmp/cc6d9lwr.s:1336   .text.RCC_APB1PeriphClockCmd:0000000000000000 $t
     /tmp/cc6d9lwr.s:1343   .text.RCC_APB1PeriphClockCmd:0000000000000000 RCC_APB1PeriphClockCmd
     /tmp/cc6d9lwr.s:1372   .text.RCC_APB1PeriphClockCmd:0000000000000018 $d
     /tmp/cc6d9lwr.s:1377   .text.RCC_APB2PeriphClockCmd:0000000000000000 $t
     /tmp/cc6d9lwr.s:1384   .text.RCC_APB2PeriphClockCmd:0000000000000000 RCC_APB2PeriphClockCmd
     /tmp/cc6d9lwr.s:1413   .text.RCC_APB2PeriphClockCmd:0000000000000018 $d
     /tmp/cc6d9lwr.s:1418   .text.RCC_AHB1PeriphResetCmd:0000000000000000 $t
     /tmp/cc6d9lwr.s:1425   .text.RCC_AHB1PeriphResetCmd:0000000000000000 RCC_AHB1PeriphResetCmd
     /tmp/cc6d9lwr.s:1454   .text.RCC_AHB1PeriphResetCmd:0000000000000018 $d
     /tmp/cc6d9lwr.s:1459   .text.RCC_AHB2PeriphResetCmd:0000000000000000 $t
ARM GAS  /tmp/cc6d9lwr.s 			page 96


     /tmp/cc6d9lwr.s:1466   .text.RCC_AHB2PeriphResetCmd:0000000000000000 RCC_AHB2PeriphResetCmd
     /tmp/cc6d9lwr.s:1495   .text.RCC_AHB2PeriphResetCmd:0000000000000018 $d
     /tmp/cc6d9lwr.s:1500   .text.RCC_AHB3PeriphResetCmd:0000000000000000 $t
     /tmp/cc6d9lwr.s:1507   .text.RCC_AHB3PeriphResetCmd:0000000000000000 RCC_AHB3PeriphResetCmd
     /tmp/cc6d9lwr.s:1536   .text.RCC_AHB3PeriphResetCmd:0000000000000018 $d
     /tmp/cc6d9lwr.s:1541   .text.RCC_APB1PeriphResetCmd:0000000000000000 $t
     /tmp/cc6d9lwr.s:1548   .text.RCC_APB1PeriphResetCmd:0000000000000000 RCC_APB1PeriphResetCmd
     /tmp/cc6d9lwr.s:1577   .text.RCC_APB1PeriphResetCmd:0000000000000018 $d
     /tmp/cc6d9lwr.s:1582   .text.RCC_APB2PeriphResetCmd:0000000000000000 $t
     /tmp/cc6d9lwr.s:1589   .text.RCC_APB2PeriphResetCmd:0000000000000000 RCC_APB2PeriphResetCmd
     /tmp/cc6d9lwr.s:1618   .text.RCC_APB2PeriphResetCmd:0000000000000018 $d
     /tmp/cc6d9lwr.s:1623   .text.RCC_AHB1PeriphClockLPModeCmd:0000000000000000 $t
     /tmp/cc6d9lwr.s:1630   .text.RCC_AHB1PeriphClockLPModeCmd:0000000000000000 RCC_AHB1PeriphClockLPModeCmd
     /tmp/cc6d9lwr.s:1659   .text.RCC_AHB1PeriphClockLPModeCmd:0000000000000018 $d
     /tmp/cc6d9lwr.s:1664   .text.RCC_AHB2PeriphClockLPModeCmd:0000000000000000 $t
     /tmp/cc6d9lwr.s:1671   .text.RCC_AHB2PeriphClockLPModeCmd:0000000000000000 RCC_AHB2PeriphClockLPModeCmd
     /tmp/cc6d9lwr.s:1700   .text.RCC_AHB2PeriphClockLPModeCmd:0000000000000018 $d
     /tmp/cc6d9lwr.s:1705   .text.RCC_AHB3PeriphClockLPModeCmd:0000000000000000 $t
     /tmp/cc6d9lwr.s:1712   .text.RCC_AHB3PeriphClockLPModeCmd:0000000000000000 RCC_AHB3PeriphClockLPModeCmd
     /tmp/cc6d9lwr.s:1741   .text.RCC_AHB3PeriphClockLPModeCmd:0000000000000018 $d
     /tmp/cc6d9lwr.s:1746   .text.RCC_APB1PeriphClockLPModeCmd:0000000000000000 $t
     /tmp/cc6d9lwr.s:1753   .text.RCC_APB1PeriphClockLPModeCmd:0000000000000000 RCC_APB1PeriphClockLPModeCmd
     /tmp/cc6d9lwr.s:1782   .text.RCC_APB1PeriphClockLPModeCmd:0000000000000018 $d
     /tmp/cc6d9lwr.s:1787   .text.RCC_APB2PeriphClockLPModeCmd:0000000000000000 $t
     /tmp/cc6d9lwr.s:1794   .text.RCC_APB2PeriphClockLPModeCmd:0000000000000000 RCC_APB2PeriphClockLPModeCmd
     /tmp/cc6d9lwr.s:1823   .text.RCC_APB2PeriphClockLPModeCmd:0000000000000018 $d
     /tmp/cc6d9lwr.s:1828   .text.RCC_LSEModeConfig:0000000000000000 $t
     /tmp/cc6d9lwr.s:1835   .text.RCC_LSEModeConfig:0000000000000000 RCC_LSEModeConfig
     /tmp/cc6d9lwr.s:1862   .text.RCC_LSEModeConfig:000000000000001c $d
     /tmp/cc6d9lwr.s:1867   .text.RCC_ITConfig:0000000000000000 $t
     /tmp/cc6d9lwr.s:1874   .text.RCC_ITConfig:0000000000000000 RCC_ITConfig
     /tmp/cc6d9lwr.s:1903   .text.RCC_ITConfig:0000000000000018 $d
     /tmp/cc6d9lwr.s:1908   .text.RCC_GetFlagStatus:0000000000000000 $t
     /tmp/cc6d9lwr.s:1915   .text.RCC_GetFlagStatus:0000000000000000 RCC_GetFlagStatus
     /tmp/cc6d9lwr.s:1975   .text.RCC_GetFlagStatus:0000000000000030 $d
     /tmp/cc6d9lwr.s:1980   .text.RCC_WaitForHSEStartUp:0000000000000000 $t
     /tmp/cc6d9lwr.s:1987   .text.RCC_WaitForHSEStartUp:0000000000000000 RCC_WaitForHSEStartUp
     /tmp/cc6d9lwr.s:2049   .text.RCC_ClearFlag:0000000000000000 $t
     /tmp/cc6d9lwr.s:2056   .text.RCC_ClearFlag:0000000000000000 RCC_ClearFlag
     /tmp/cc6d9lwr.s:2072   .text.RCC_ClearFlag:000000000000000c $d
     /tmp/cc6d9lwr.s:2077   .text.RCC_GetITStatus:0000000000000000 $t
     /tmp/cc6d9lwr.s:2084   .text.RCC_GetITStatus:0000000000000000 RCC_GetITStatus
     /tmp/cc6d9lwr.s:2111   .text.RCC_GetITStatus:0000000000000010 $d
     /tmp/cc6d9lwr.s:2116   .text.RCC_ClearITPendingBit:0000000000000000 $t
     /tmp/cc6d9lwr.s:2123   .text.RCC_ClearITPendingBit:0000000000000000 RCC_ClearITPendingBit
     /tmp/cc6d9lwr.s:2138   .text.RCC_ClearITPendingBit:0000000000000008 $d
     /tmp/cc6d9lwr.s:2143   .data.APBAHBPrescTable:0000000000000000 $d
     /tmp/cc6d9lwr.s:2147   .data.APBAHBPrescTable:0000000000000000 APBAHBPrescTable
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
