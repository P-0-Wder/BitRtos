ARM GAS  /tmp/ccgZHmNt.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_spi.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.SPI_I2S_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	SPI_I2S_DeInit
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	SPI_I2S_DeInit:
  26              	.LFB123:
  27              		.file 1 "FWLIB/src/stm32f4xx_spi.c"
   1:FWLIB/src/stm32f4xx_spi.c **** /**
   2:FWLIB/src/stm32f4xx_spi.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_spi.c ****   * @file    stm32f4xx_spi.c
   4:FWLIB/src/stm32f4xx_spi.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_spi.c ****   * @version V1.8.0
   6:FWLIB/src/stm32f4xx_spi.c ****   * @date    04-November-2016
   7:FWLIB/src/stm32f4xx_spi.c ****   * @brief   This file provides firmware functions to manage the following 
   8:FWLIB/src/stm32f4xx_spi.c ****   *          functionalities of the Serial peripheral interface (SPI):
   9:FWLIB/src/stm32f4xx_spi.c ****   *           + Initialization and Configuration
  10:FWLIB/src/stm32f4xx_spi.c ****   *           + Data transfers functions
  11:FWLIB/src/stm32f4xx_spi.c ****   *           + Hardware CRC Calculation
  12:FWLIB/src/stm32f4xx_spi.c ****   *           + DMA transfers management
  13:FWLIB/src/stm32f4xx_spi.c ****   *           + Interrupts and flags management 
  14:FWLIB/src/stm32f4xx_spi.c ****   *           
  15:FWLIB/src/stm32f4xx_spi.c **** @verbatim
  16:FWLIB/src/stm32f4xx_spi.c **** 
  17:FWLIB/src/stm32f4xx_spi.c ****  ===================================================================
  18:FWLIB/src/stm32f4xx_spi.c ****                   ##### How to use this driver #####
  19:FWLIB/src/stm32f4xx_spi.c ****  ===================================================================
  20:FWLIB/src/stm32f4xx_spi.c ****  [..]
  21:FWLIB/src/stm32f4xx_spi.c ****    (#) Enable peripheral clock using the following functions 
  22:FWLIB/src/stm32f4xx_spi.c ****        RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE) for SPI1
  23:FWLIB/src/stm32f4xx_spi.c ****        RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE) for SPI2
  24:FWLIB/src/stm32f4xx_spi.c ****        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE) for SPI3
  25:FWLIB/src/stm32f4xx_spi.c ****        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE) for SPI4
  26:FWLIB/src/stm32f4xx_spi.c ****        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE) for SPI5
  27:FWLIB/src/stm32f4xx_spi.c ****        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE) for SPI6.
  28:FWLIB/src/stm32f4xx_spi.c ****   
  29:FWLIB/src/stm32f4xx_spi.c ****    (#) Enable SCK, MOSI, MISO and NSS GPIO clocks using RCC_AHB1PeriphClockCmd()
  30:FWLIB/src/stm32f4xx_spi.c ****        function. In I2S mode, if an external clock source is used then the I2S 
  31:FWLIB/src/stm32f4xx_spi.c ****        CKIN pin GPIO clock should also be enabled.
ARM GAS  /tmp/ccgZHmNt.s 			page 2


  32:FWLIB/src/stm32f4xx_spi.c ****   
  33:FWLIB/src/stm32f4xx_spi.c ****    (#) Peripherals alternate function: 
  34:FWLIB/src/stm32f4xx_spi.c ****        (++) Connect the pin to the desired peripherals' Alternate Function (AF) 
  35:FWLIB/src/stm32f4xx_spi.c ****             using GPIO_PinAFConfig() function
  36:FWLIB/src/stm32f4xx_spi.c ****        (++) Configure the desired pin in alternate function by: 
  37:FWLIB/src/stm32f4xx_spi.c ****             GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  38:FWLIB/src/stm32f4xx_spi.c ****        (++) Select the type, pull-up/pull-down and output speed via GPIO_PuPd, 
  39:FWLIB/src/stm32f4xx_spi.c ****             GPIO_OType and GPIO_Speed members
  40:FWLIB/src/stm32f4xx_spi.c ****        (++) Call GPIO_Init() function In I2S mode, if an external clock source is 
  41:FWLIB/src/stm32f4xx_spi.c ****             used then the I2S CKIN pin should be also configured in Alternate 
  42:FWLIB/src/stm32f4xx_spi.c ****             function Push-pull pull-up mode. 
  43:FWLIB/src/stm32f4xx_spi.c ****           
  44:FWLIB/src/stm32f4xx_spi.c ****    (#) Program the Polarity, Phase, First Data, Baud Rate Prescaler, Slave 
  45:FWLIB/src/stm32f4xx_spi.c ****        Management, Peripheral Mode and CRC Polynomial values using the SPI_Init()
  46:FWLIB/src/stm32f4xx_spi.c ****        function.
  47:FWLIB/src/stm32f4xx_spi.c ****        In I2S mode, program the Mode, Standard, Data Format, MCLK Output, Audio 
  48:FWLIB/src/stm32f4xx_spi.c ****        frequency and Polarity using I2S_Init() function. For I2S mode, make sure 
  49:FWLIB/src/stm32f4xx_spi.c ****        that either:
  50:FWLIB/src/stm32f4xx_spi.c ****        (++) I2S PLL is configured using the functions 
  51:FWLIB/src/stm32f4xx_spi.c ****             RCC_I2SCLKConfig(RCC_I2S2CLKSource_PLLI2S), RCC_PLLI2SCmd(ENABLE) and 
  52:FWLIB/src/stm32f4xx_spi.c ****             RCC_GetFlagStatus(RCC_FLAG_PLLI2SRDY); or 
  53:FWLIB/src/stm32f4xx_spi.c ****        (++) External clock source is configured using the function 
  54:FWLIB/src/stm32f4xx_spi.c ****             RCC_I2SCLKConfig(RCC_I2S2CLKSource_Ext) and after setting correctly 
  55:FWLIB/src/stm32f4xx_spi.c ****             the define constant I2S_EXTERNAL_CLOCK_VAL in the stm32f4xx_conf.h file. 
  56:FWLIB/src/stm32f4xx_spi.c ****   
  57:FWLIB/src/stm32f4xx_spi.c ****    (#) Enable the NVIC and the corresponding interrupt using the function 
  58:FWLIB/src/stm32f4xx_spi.c ****        SPI_ITConfig() if you need to use interrupt mode. 
  59:FWLIB/src/stm32f4xx_spi.c ****   
  60:FWLIB/src/stm32f4xx_spi.c ****    (#) When using the DMA mode 
  61:FWLIB/src/stm32f4xx_spi.c ****        (++) Configure the DMA using DMA_Init() function
  62:FWLIB/src/stm32f4xx_spi.c ****        (++) Active the needed channel Request using SPI_I2S_DMACmd() function
  63:FWLIB/src/stm32f4xx_spi.c ****    
  64:FWLIB/src/stm32f4xx_spi.c ****    (#) Enable the SPI using the SPI_Cmd() function or enable the I2S using
  65:FWLIB/src/stm32f4xx_spi.c ****        I2S_Cmd().
  66:FWLIB/src/stm32f4xx_spi.c ****    
  67:FWLIB/src/stm32f4xx_spi.c ****    (#) Enable the DMA using the DMA_Cmd() function when using DMA mode. 
  68:FWLIB/src/stm32f4xx_spi.c ****   
  69:FWLIB/src/stm32f4xx_spi.c ****    (#) Optionally, you can enable/configure the following parameters without
  70:FWLIB/src/stm32f4xx_spi.c ****        re-initialization (i.e there is no need to call again SPI_Init() function):
  71:FWLIB/src/stm32f4xx_spi.c ****        (++) When bidirectional mode (SPI_Direction_1Line_Rx or SPI_Direction_1Line_Tx)
  72:FWLIB/src/stm32f4xx_spi.c ****             is programmed as Data direction parameter using the SPI_Init() function
  73:FWLIB/src/stm32f4xx_spi.c ****             it can be possible to switch between SPI_Direction_Tx or SPI_Direction_Rx
  74:FWLIB/src/stm32f4xx_spi.c ****             using the SPI_BiDirectionalLineConfig() function.
  75:FWLIB/src/stm32f4xx_spi.c ****        (++) When SPI_NSS_Soft is selected as Slave Select Management parameter 
  76:FWLIB/src/stm32f4xx_spi.c ****             using the SPI_Init() function it can be possible to manage the 
  77:FWLIB/src/stm32f4xx_spi.c ****             NSS internal signal using the SPI_NSSInternalSoftwareConfig() function.
  78:FWLIB/src/stm32f4xx_spi.c ****        (++) Reconfigure the data size using the SPI_DataSizeConfig() function  
  79:FWLIB/src/stm32f4xx_spi.c ****        (++) Enable or disable the SS output using the SPI_SSOutputCmd() function  
  80:FWLIB/src/stm32f4xx_spi.c ****             
  81:FWLIB/src/stm32f4xx_spi.c ****     (#) To use the CRC Hardware calculation feature refer to the Peripheral 
  82:FWLIB/src/stm32f4xx_spi.c ****         CRC hardware Calculation subsection.
  83:FWLIB/src/stm32f4xx_spi.c ****      
  84:FWLIB/src/stm32f4xx_spi.c ****   
  85:FWLIB/src/stm32f4xx_spi.c ****  [..] It is possible to use SPI in I2S full duplex mode, in this case, each SPI 
  86:FWLIB/src/stm32f4xx_spi.c ****       peripheral is able to manage sending and receiving data simultaneously
  87:FWLIB/src/stm32f4xx_spi.c ****       using two data lines. Each SPI peripheral has an extended block called I2Sxext
  88:FWLIB/src/stm32f4xx_spi.c ****       (ie. I2S2ext for SPI2 and I2S3ext for SPI3).
ARM GAS  /tmp/ccgZHmNt.s 			page 3


  89:FWLIB/src/stm32f4xx_spi.c ****       The extension block is not a full SPI IP, it is used only as I2S slave to
  90:FWLIB/src/stm32f4xx_spi.c ****       implement full duplex mode. The extension block uses the same clock sources
  91:FWLIB/src/stm32f4xx_spi.c ****       as its master.          
  92:FWLIB/src/stm32f4xx_spi.c ****       To configure I2S full duplex you have to:
  93:FWLIB/src/stm32f4xx_spi.c ****               
  94:FWLIB/src/stm32f4xx_spi.c ****       (#) Configure SPIx in I2S mode (I2S_Init() function) as described above. 
  95:FWLIB/src/stm32f4xx_spi.c ****              
  96:FWLIB/src/stm32f4xx_spi.c ****       (#) Call the I2S_FullDuplexConfig() function using the same structure passed to  
  97:FWLIB/src/stm32f4xx_spi.c ****           I2S_Init() function.
  98:FWLIB/src/stm32f4xx_spi.c ****               
  99:FWLIB/src/stm32f4xx_spi.c ****       (#) Call I2S_Cmd() for SPIx then for its extended block.
 100:FWLIB/src/stm32f4xx_spi.c ****             
 101:FWLIB/src/stm32f4xx_spi.c ****       (#) To configure interrupts or DMA requests and to get/clear flag status, 
 102:FWLIB/src/stm32f4xx_spi.c ****           use I2Sxext instance for the extension block.
 103:FWLIB/src/stm32f4xx_spi.c ****                
 104:FWLIB/src/stm32f4xx_spi.c ****  [..] Functions that can be called with I2Sxext instances are: I2S_Cmd(), 
 105:FWLIB/src/stm32f4xx_spi.c ****       I2S_FullDuplexConfig(), SPI_I2S_ReceiveData(), SPI_I2S_SendData(), 
 106:FWLIB/src/stm32f4xx_spi.c ****       SPI_I2S_DMACmd(), SPI_I2S_ITConfig(), SPI_I2S_GetFlagStatus(), 
 107:FWLIB/src/stm32f4xx_spi.c ****       SPI_I2S_ClearFlag(), SPI_I2S_GetITStatus() and SPI_I2S_ClearITPendingBit().
 108:FWLIB/src/stm32f4xx_spi.c ****                    
 109:FWLIB/src/stm32f4xx_spi.c ****       Example: To use SPI3 in Full duplex mode (SPI3 is Master Tx, I2S3ext is Slave Rx):
 110:FWLIB/src/stm32f4xx_spi.c ****               
 111:FWLIB/src/stm32f4xx_spi.c ****       RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3, ENABLE);   
 112:FWLIB/src/stm32f4xx_spi.c ****       I2S_StructInit(&I2SInitStruct);
 113:FWLIB/src/stm32f4xx_spi.c ****       I2SInitStruct.Mode = I2S_Mode_MasterTx;     
 114:FWLIB/src/stm32f4xx_spi.c ****       I2S_Init(SPI3, &I2SInitStruct);
 115:FWLIB/src/stm32f4xx_spi.c ****       I2S_FullDuplexConfig(SPI3ext, &I2SInitStruct)
 116:FWLIB/src/stm32f4xx_spi.c ****       I2S_Cmd(SPI3, ENABLE);
 117:FWLIB/src/stm32f4xx_spi.c ****       I2S_Cmd(SPI3ext, ENABLE);
 118:FWLIB/src/stm32f4xx_spi.c ****       ...
 119:FWLIB/src/stm32f4xx_spi.c ****       while (SPI_I2S_GetFlagStatus(SPI2, SPI_FLAG_TXE) == RESET)
 120:FWLIB/src/stm32f4xx_spi.c ****       {}
 121:FWLIB/src/stm32f4xx_spi.c ****       SPI_I2S_SendData(SPI3, txdata[i]);
 122:FWLIB/src/stm32f4xx_spi.c ****       ...  
 123:FWLIB/src/stm32f4xx_spi.c ****       while (SPI_I2S_GetFlagStatus(I2S3ext, SPI_FLAG_RXNE) == RESET)
 124:FWLIB/src/stm32f4xx_spi.c ****       {}
 125:FWLIB/src/stm32f4xx_spi.c ****       rxdata[i] = SPI_I2S_ReceiveData(I2S3ext);
 126:FWLIB/src/stm32f4xx_spi.c ****       ...          
 127:FWLIB/src/stm32f4xx_spi.c ****                 
 128:FWLIB/src/stm32f4xx_spi.c ****  [..]       
 129:FWLIB/src/stm32f4xx_spi.c ****    (@) In I2S mode: if an external clock is used as source clock for the I2S,  
 130:FWLIB/src/stm32f4xx_spi.c ****        then the define I2S_EXTERNAL_CLOCK_VAL in file stm32f4xx_conf.h should 
 131:FWLIB/src/stm32f4xx_spi.c ****        be enabled and set to the value of the source clock frequency (in Hz).
 132:FWLIB/src/stm32f4xx_spi.c ****    
 133:FWLIB/src/stm32f4xx_spi.c ****    (@) In SPI mode: To use the SPI TI mode, call the function SPI_TIModeCmd() 
 134:FWLIB/src/stm32f4xx_spi.c ****        just after calling the function SPI_Init().
 135:FWLIB/src/stm32f4xx_spi.c ****   
 136:FWLIB/src/stm32f4xx_spi.c **** @endverbatim  
 137:FWLIB/src/stm32f4xx_spi.c ****   *                                  
 138:FWLIB/src/stm32f4xx_spi.c ****   ******************************************************************************
 139:FWLIB/src/stm32f4xx_spi.c ****   * @attention
 140:FWLIB/src/stm32f4xx_spi.c ****   *
 141:FWLIB/src/stm32f4xx_spi.c ****   * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
 142:FWLIB/src/stm32f4xx_spi.c ****   *
 143:FWLIB/src/stm32f4xx_spi.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
 144:FWLIB/src/stm32f4xx_spi.c ****   * You may not use this file except in compliance with the License.
 145:FWLIB/src/stm32f4xx_spi.c ****   * You may obtain a copy of the License at:
ARM GAS  /tmp/ccgZHmNt.s 			page 4


 146:FWLIB/src/stm32f4xx_spi.c ****   *
 147:FWLIB/src/stm32f4xx_spi.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
 148:FWLIB/src/stm32f4xx_spi.c ****   *
 149:FWLIB/src/stm32f4xx_spi.c ****   * Unless required by applicable law or agreed to in writing, software 
 150:FWLIB/src/stm32f4xx_spi.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
 151:FWLIB/src/stm32f4xx_spi.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 152:FWLIB/src/stm32f4xx_spi.c ****   * See the License for the specific language governing permissions and
 153:FWLIB/src/stm32f4xx_spi.c ****   * limitations under the License.
 154:FWLIB/src/stm32f4xx_spi.c ****   *
 155:FWLIB/src/stm32f4xx_spi.c ****   ******************************************************************************  
 156:FWLIB/src/stm32f4xx_spi.c ****   */ 
 157:FWLIB/src/stm32f4xx_spi.c **** 
 158:FWLIB/src/stm32f4xx_spi.c **** /* Includes ------------------------------------------------------------------*/
 159:FWLIB/src/stm32f4xx_spi.c **** #include "stm32f4xx_spi.h"
 160:FWLIB/src/stm32f4xx_spi.c **** #include "stm32f4xx_rcc.h"
 161:FWLIB/src/stm32f4xx_spi.c **** 
 162:FWLIB/src/stm32f4xx_spi.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 163:FWLIB/src/stm32f4xx_spi.c ****   * @{
 164:FWLIB/src/stm32f4xx_spi.c ****   */
 165:FWLIB/src/stm32f4xx_spi.c **** 
 166:FWLIB/src/stm32f4xx_spi.c **** /** @defgroup SPI 
 167:FWLIB/src/stm32f4xx_spi.c ****   * @brief SPI driver modules
 168:FWLIB/src/stm32f4xx_spi.c ****   * @{
 169:FWLIB/src/stm32f4xx_spi.c ****   */ 
 170:FWLIB/src/stm32f4xx_spi.c **** 
 171:FWLIB/src/stm32f4xx_spi.c **** /* Private typedef -----------------------------------------------------------*/
 172:FWLIB/src/stm32f4xx_spi.c **** /* Private define ------------------------------------------------------------*/
 173:FWLIB/src/stm32f4xx_spi.c **** 
 174:FWLIB/src/stm32f4xx_spi.c **** /* SPI registers Masks */
 175:FWLIB/src/stm32f4xx_spi.c **** #define CR1_CLEAR_MASK            ((uint16_t)0x3040)
 176:FWLIB/src/stm32f4xx_spi.c **** #define I2SCFGR_CLEAR_MASK        ((uint16_t)0xF040)
 177:FWLIB/src/stm32f4xx_spi.c **** 
 178:FWLIB/src/stm32f4xx_spi.c **** /* RCC PLLs masks */
 179:FWLIB/src/stm32f4xx_spi.c **** #define PLLCFGR_PPLR_MASK         ((uint32_t)0x70000000)
 180:FWLIB/src/stm32f4xx_spi.c **** #define PLLCFGR_PPLN_MASK         ((uint32_t)0x00007FC0)
 181:FWLIB/src/stm32f4xx_spi.c **** 
 182:FWLIB/src/stm32f4xx_spi.c **** #define SPI_CR2_FRF               ((uint16_t)0x0010)
 183:FWLIB/src/stm32f4xx_spi.c **** #define SPI_SR_TIFRFE             ((uint16_t)0x0100)
 184:FWLIB/src/stm32f4xx_spi.c **** 
 185:FWLIB/src/stm32f4xx_spi.c **** /* Private macro -------------------------------------------------------------*/
 186:FWLIB/src/stm32f4xx_spi.c **** /* Private variables ---------------------------------------------------------*/
 187:FWLIB/src/stm32f4xx_spi.c **** /* Private function prototypes -----------------------------------------------*/
 188:FWLIB/src/stm32f4xx_spi.c **** /* Private functions ---------------------------------------------------------*/
 189:FWLIB/src/stm32f4xx_spi.c **** 
 190:FWLIB/src/stm32f4xx_spi.c **** /** @defgroup SPI_Private_Functions
 191:FWLIB/src/stm32f4xx_spi.c ****   * @{
 192:FWLIB/src/stm32f4xx_spi.c ****   */
 193:FWLIB/src/stm32f4xx_spi.c **** 
 194:FWLIB/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group1 Initialization and Configuration functions
 195:FWLIB/src/stm32f4xx_spi.c ****  *  @brief   Initialization and Configuration functions 
 196:FWLIB/src/stm32f4xx_spi.c ****  *
 197:FWLIB/src/stm32f4xx_spi.c **** @verbatim   
 198:FWLIB/src/stm32f4xx_spi.c ****  ===============================================================================
 199:FWLIB/src/stm32f4xx_spi.c ****              ##### Initialization and Configuration functions ##### 
 200:FWLIB/src/stm32f4xx_spi.c ****  ===============================================================================  
 201:FWLIB/src/stm32f4xx_spi.c ****  [..] This section provides a set of functions allowing to initialize the SPI 
 202:FWLIB/src/stm32f4xx_spi.c ****       Direction, SPI Mode, SPI Data Size, SPI Polarity, SPI Phase, SPI NSS 
ARM GAS  /tmp/ccgZHmNt.s 			page 5


 203:FWLIB/src/stm32f4xx_spi.c ****       Management, SPI Baud Rate Prescaler, SPI First Bit and SPI CRC Polynomial.
 204:FWLIB/src/stm32f4xx_spi.c ****   
 205:FWLIB/src/stm32f4xx_spi.c ****  [..] The SPI_Init() function follows the SPI configuration procedures for Master 
 206:FWLIB/src/stm32f4xx_spi.c ****       mode and Slave mode (details for these procedures are available in reference 
 207:FWLIB/src/stm32f4xx_spi.c ****       manual (RM0090)).
 208:FWLIB/src/stm32f4xx_spi.c ****   
 209:FWLIB/src/stm32f4xx_spi.c **** @endverbatim
 210:FWLIB/src/stm32f4xx_spi.c ****   * @{
 211:FWLIB/src/stm32f4xx_spi.c ****   */
 212:FWLIB/src/stm32f4xx_spi.c **** 
 213:FWLIB/src/stm32f4xx_spi.c **** /**
 214:FWLIB/src/stm32f4xx_spi.c ****   * @brief  De-initialize the SPIx peripheral registers to their default reset values.
 215:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
 216:FWLIB/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode.   
 217:FWLIB/src/stm32f4xx_spi.c ****   *         
 218:FWLIB/src/stm32f4xx_spi.c ****   * @note   The extended I2S blocks (ie. I2S2ext and I2S3ext blocks) are de-initialized
 219:FWLIB/src/stm32f4xx_spi.c ****   *         when the relative I2S peripheral is de-initialized (the extended block's clock
 220:FWLIB/src/stm32f4xx_spi.c ****   *         is managed by the I2S peripheral clock).
 221:FWLIB/src/stm32f4xx_spi.c ****   *             
 222:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 223:FWLIB/src/stm32f4xx_spi.c ****   */
 224:FWLIB/src/stm32f4xx_spi.c **** void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
 225:FWLIB/src/stm32f4xx_spi.c **** {
  28              		.loc 1 225 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 08B5     		push	{r3, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 3, -8
  37              		.cfi_offset 14, -4
 226:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 227:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 228:FWLIB/src/stm32f4xx_spi.c **** 
 229:FWLIB/src/stm32f4xx_spi.c ****   if (SPIx == SPI1)
  38              		.loc 1 229 0
  39 0002 2A4B     		ldr	r3, .L15
  40 0004 9842     		cmp	r0, r3
  41 0006 0FD0     		beq	.L9
 230:FWLIB/src/stm32f4xx_spi.c ****   {
 231:FWLIB/src/stm32f4xx_spi.c ****     /* Enable SPI1 reset state */
 232:FWLIB/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 233:FWLIB/src/stm32f4xx_spi.c ****     /* Release SPI1 from reset state */
 234:FWLIB/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 235:FWLIB/src/stm32f4xx_spi.c ****   }
 236:FWLIB/src/stm32f4xx_spi.c ****   else if (SPIx == SPI2)
  42              		.loc 1 236 0
  43 0008 294B     		ldr	r3, .L15+4
  44 000a 9842     		cmp	r0, r3
  45 000c 17D0     		beq	.L10
 237:FWLIB/src/stm32f4xx_spi.c ****   {
 238:FWLIB/src/stm32f4xx_spi.c ****     /* Enable SPI2 reset state */
 239:FWLIB/src/stm32f4xx_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 240:FWLIB/src/stm32f4xx_spi.c ****     /* Release SPI2 from reset state */
 241:FWLIB/src/stm32f4xx_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
ARM GAS  /tmp/ccgZHmNt.s 			page 6


 242:FWLIB/src/stm32f4xx_spi.c ****   }
 243:FWLIB/src/stm32f4xx_spi.c ****   else if (SPIx == SPI3)
  46              		.loc 1 243 0
  47 000e 294B     		ldr	r3, .L15+8
  48 0010 9842     		cmp	r0, r3
  49 0012 1FD0     		beq	.L11
 244:FWLIB/src/stm32f4xx_spi.c ****   {
 245:FWLIB/src/stm32f4xx_spi.c ****     /* Enable SPI3 reset state */
 246:FWLIB/src/stm32f4xx_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 247:FWLIB/src/stm32f4xx_spi.c ****     /* Release SPI3 from reset state */
 248:FWLIB/src/stm32f4xx_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 249:FWLIB/src/stm32f4xx_spi.c ****   }
 250:FWLIB/src/stm32f4xx_spi.c ****   else if (SPIx == SPI4)
  50              		.loc 1 250 0
  51 0014 284B     		ldr	r3, .L15+12
  52 0016 9842     		cmp	r0, r3
  53 0018 27D0     		beq	.L12
 251:FWLIB/src/stm32f4xx_spi.c ****   {
 252:FWLIB/src/stm32f4xx_spi.c ****     /* Enable SPI4 reset state */
 253:FWLIB/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 254:FWLIB/src/stm32f4xx_spi.c ****     /* Release SPI4 from reset state */
 255:FWLIB/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 256:FWLIB/src/stm32f4xx_spi.c ****   }
 257:FWLIB/src/stm32f4xx_spi.c ****   else if (SPIx == SPI5)
  54              		.loc 1 257 0
  55 001a 284B     		ldr	r3, .L15+16
  56 001c 9842     		cmp	r0, r3
  57 001e 2FD0     		beq	.L13
 258:FWLIB/src/stm32f4xx_spi.c ****   {
 259:FWLIB/src/stm32f4xx_spi.c ****     /* Enable SPI5 reset state */
 260:FWLIB/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 261:FWLIB/src/stm32f4xx_spi.c ****     /* Release SPI5 from reset state */
 262:FWLIB/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 263:FWLIB/src/stm32f4xx_spi.c ****   }
 264:FWLIB/src/stm32f4xx_spi.c ****   else 
 265:FWLIB/src/stm32f4xx_spi.c ****   {
 266:FWLIB/src/stm32f4xx_spi.c ****     if (SPIx == SPI6)
  58              		.loc 1 266 0
  59 0020 274B     		ldr	r3, .L15+20
  60 0022 9842     		cmp	r0, r3
  61 0024 37D0     		beq	.L14
  62              	.LVL1:
  63              	.L1:
  64 0026 08BD     		pop	{r3, pc}
  65              	.LVL2:
  66              	.L9:
 232:FWLIB/src/stm32f4xx_spi.c ****     /* Release SPI1 from reset state */
  67              		.loc 1 232 0
  68 0028 0121     		movs	r1, #1
  69 002a 4FF48050 		mov	r0, #4096
  70              	.LVL3:
  71 002e FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  72              	.LVL4:
 234:FWLIB/src/stm32f4xx_spi.c ****   }
  73              		.loc 1 234 0
  74 0032 0021     		movs	r1, #0
  75 0034 4FF48050 		mov	r0, #4096
ARM GAS  /tmp/ccgZHmNt.s 			page 7


  76 0038 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  77              	.LVL5:
  78 003c 08BD     		pop	{r3, pc}
  79              	.LVL6:
  80              	.L10:
 239:FWLIB/src/stm32f4xx_spi.c ****     /* Release SPI2 from reset state */
  81              		.loc 1 239 0
  82 003e 0121     		movs	r1, #1
  83 0040 4FF48040 		mov	r0, #16384
  84              	.LVL7:
  85 0044 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  86              	.LVL8:
 241:FWLIB/src/stm32f4xx_spi.c ****   }
  87              		.loc 1 241 0
  88 0048 0021     		movs	r1, #0
  89 004a 4FF48040 		mov	r0, #16384
  90 004e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  91              	.LVL9:
  92 0052 08BD     		pop	{r3, pc}
  93              	.LVL10:
  94              	.L11:
 246:FWLIB/src/stm32f4xx_spi.c ****     /* Release SPI3 from reset state */
  95              		.loc 1 246 0
  96 0054 0121     		movs	r1, #1
  97 0056 4FF40040 		mov	r0, #32768
  98              	.LVL11:
  99 005a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 100              	.LVL12:
 248:FWLIB/src/stm32f4xx_spi.c ****   }
 101              		.loc 1 248 0
 102 005e 0021     		movs	r1, #0
 103 0060 4FF40040 		mov	r0, #32768
 104 0064 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 105              	.LVL13:
 106 0068 08BD     		pop	{r3, pc}
 107              	.LVL14:
 108              	.L12:
 253:FWLIB/src/stm32f4xx_spi.c ****     /* Release SPI4 from reset state */
 109              		.loc 1 253 0
 110 006a 0121     		movs	r1, #1
 111 006c 4FF40050 		mov	r0, #8192
 112              	.LVL15:
 113 0070 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 114              	.LVL16:
 255:FWLIB/src/stm32f4xx_spi.c ****   }
 115              		.loc 1 255 0
 116 0074 0021     		movs	r1, #0
 117 0076 4FF40050 		mov	r0, #8192
 118 007a FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 119              	.LVL17:
 120 007e 08BD     		pop	{r3, pc}
 121              	.LVL18:
 122              	.L13:
 260:FWLIB/src/stm32f4xx_spi.c ****     /* Release SPI5 from reset state */
 123              		.loc 1 260 0
 124 0080 0121     		movs	r1, #1
 125 0082 4FF48010 		mov	r0, #1048576
ARM GAS  /tmp/ccgZHmNt.s 			page 8


 126              	.LVL19:
 127 0086 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 128              	.LVL20:
 262:FWLIB/src/stm32f4xx_spi.c ****   }
 129              		.loc 1 262 0
 130 008a 0021     		movs	r1, #0
 131 008c 4FF48010 		mov	r0, #1048576
 132 0090 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 133              	.LVL21:
 134 0094 08BD     		pop	{r3, pc}
 135              	.LVL22:
 136              	.L14:
 267:FWLIB/src/stm32f4xx_spi.c ****     {
 268:FWLIB/src/stm32f4xx_spi.c ****       /* Enable SPI6 reset state */
 269:FWLIB/src/stm32f4xx_spi.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 137              		.loc 1 269 0
 138 0096 0121     		movs	r1, #1
 139 0098 4FF40010 		mov	r0, #2097152
 140              	.LVL23:
 141 009c FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 142              	.LVL24:
 270:FWLIB/src/stm32f4xx_spi.c ****       /* Release SPI6 from reset state */
 271:FWLIB/src/stm32f4xx_spi.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 143              		.loc 1 271 0
 144 00a0 0021     		movs	r1, #0
 145 00a2 4FF40010 		mov	r0, #2097152
 146 00a6 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 147              	.LVL25:
 272:FWLIB/src/stm32f4xx_spi.c ****     }
 273:FWLIB/src/stm32f4xx_spi.c ****   }
 274:FWLIB/src/stm32f4xx_spi.c **** }
 148              		.loc 1 274 0
 149 00aa BCE7     		b	.L1
 150              	.L16:
 151              		.align	2
 152              	.L15:
 153 00ac 00300140 		.word	1073819648
 154 00b0 00380040 		.word	1073756160
 155 00b4 003C0040 		.word	1073757184
 156 00b8 00340140 		.word	1073820672
 157 00bc 00500140 		.word	1073827840
 158 00c0 00540140 		.word	1073828864
 159              		.cfi_endproc
 160              	.LFE123:
 162              		.section	.text.SPI_Init,"ax",%progbits
 163              		.align	1
 164              		.global	SPI_Init
 165              		.syntax unified
 166              		.thumb
 167              		.thumb_func
 168              		.fpu fpv4-sp-d16
 170              	SPI_Init:
 171              	.LFB124:
 275:FWLIB/src/stm32f4xx_spi.c **** 
 276:FWLIB/src/stm32f4xx_spi.c **** /**
 277:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 278:FWLIB/src/stm32f4xx_spi.c ****   *         parameters in the SPI_InitStruct.
ARM GAS  /tmp/ccgZHmNt.s 			page 9


 279:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 280:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
 281:FWLIB/src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified SPI peripheral.
 282:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 283:FWLIB/src/stm32f4xx_spi.c ****   */
 284:FWLIB/src/stm32f4xx_spi.c **** void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
 285:FWLIB/src/stm32f4xx_spi.c **** {
 172              		.loc 1 285 0
 173              		.cfi_startproc
 174              		@ args = 0, pretend = 0, frame = 0
 175              		@ frame_needed = 0, uses_anonymous_args = 0
 176              	.LVL26:
 177 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 178              	.LCFI1:
 179              		.cfi_def_cfa_offset 24
 180              		.cfi_offset 4, -24
 181              		.cfi_offset 5, -20
 182              		.cfi_offset 6, -16
 183              		.cfi_offset 7, -12
 184              		.cfi_offset 8, -8
 185              		.cfi_offset 14, -4
 186              	.LVL27:
 286:FWLIB/src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0;
 287:FWLIB/src/stm32f4xx_spi.c ****   
 288:FWLIB/src/stm32f4xx_spi.c ****   /* check the parameters */
 289:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 290:FWLIB/src/stm32f4xx_spi.c ****   
 291:FWLIB/src/stm32f4xx_spi.c ****   /* Check the SPI parameters */
 292:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
 293:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
 294:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
 295:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
 296:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
 297:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
 298:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
 299:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
 300:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
 301:FWLIB/src/stm32f4xx_spi.c **** 
 302:FWLIB/src/stm32f4xx_spi.c **** /*---------------------------- SPIx CR1 Configuration ------------------------*/
 303:FWLIB/src/stm32f4xx_spi.c ****   /* Get the SPIx CR1 value */
 304:FWLIB/src/stm32f4xx_spi.c ****   tmpreg = SPIx->CR1;
 187              		.loc 1 304 0
 188 0004 0388     		ldrh	r3, [r0]
 189              	.LVL28:
 305:FWLIB/src/stm32f4xx_spi.c ****   /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
 306:FWLIB/src/stm32f4xx_spi.c ****   tmpreg &= CR1_CLEAR_MASK;
 190              		.loc 1 306 0
 191 0006 03F44153 		and	r3, r3, #12352
 192              	.LVL29:
 307:FWLIB/src/stm32f4xx_spi.c ****   /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
 308:FWLIB/src/stm32f4xx_spi.c ****      master/salve mode, CPOL and CPHA */
 309:FWLIB/src/stm32f4xx_spi.c ****   /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
 310:FWLIB/src/stm32f4xx_spi.c ****   /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
 311:FWLIB/src/stm32f4xx_spi.c ****   /* Set LSBFirst bit according to SPI_FirstBit value */
 312:FWLIB/src/stm32f4xx_spi.c ****   /* Set BR bits according to SPI_BaudRatePrescaler value */
 313:FWLIB/src/stm32f4xx_spi.c ****   /* Set CPOL bit according to SPI_CPOL value */
 314:FWLIB/src/stm32f4xx_spi.c ****   /* Set CPHA bit according to SPI_CPHA value */
ARM GAS  /tmp/ccgZHmNt.s 			page 10


 315:FWLIB/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 193              		.loc 1 315 0
 194 000a B1F800C0 		ldrh	ip, [r1]
 195 000e B1F80280 		ldrh	r8, [r1, #2]
 316:FWLIB/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 196              		.loc 1 316 0
 197 0012 B1F804E0 		ldrh	lr, [r1, #4]
 198 0016 CF88     		ldrh	r7, [r1, #6]
 317:FWLIB/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 199              		.loc 1 317 0
 200 0018 0E89     		ldrh	r6, [r1, #8]
 201 001a 4D89     		ldrh	r5, [r1, #10]
 318:FWLIB/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 202              		.loc 1 318 0
 203 001c 8C89     		ldrh	r4, [r1, #12]
 204 001e CA89     		ldrh	r2, [r1, #14]
 315:FWLIB/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 205              		.loc 1 315 0
 206 0020 4CEA080C 		orr	ip, ip, r8
 207 0024 4EEA0C0E 		orr	lr, lr, ip
 208 0028 47EA0E07 		orr	r7, r7, lr
 209 002c 3E43     		orrs	r6, r6, r7
 210 002e 3543     		orrs	r5, r5, r6
 211 0030 2C43     		orrs	r4, r4, r5
 212 0032 2243     		orrs	r2, r2, r4
 213 0034 1343     		orrs	r3, r3, r2
 214              	.LVL30:
 319:FWLIB/src/stm32f4xx_spi.c ****   /* Write to SPIx CR1 */
 320:FWLIB/src/stm32f4xx_spi.c ****   SPIx->CR1 = tmpreg;
 215              		.loc 1 320 0
 216 0036 0380     		strh	r3, [r0]	@ movhi
 321:FWLIB/src/stm32f4xx_spi.c **** 
 322:FWLIB/src/stm32f4xx_spi.c ****   /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
 323:FWLIB/src/stm32f4xx_spi.c ****   SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 217              		.loc 1 323 0
 218 0038 838B     		ldrh	r3, [r0, #28]
 219              	.LVL31:
 220 003a 9BB2     		uxth	r3, r3
 221 003c 23F40063 		bic	r3, r3, #2048
 222 0040 9BB2     		uxth	r3, r3
 223 0042 8383     		strh	r3, [r0, #28]	@ movhi
 224              	.LVL32:
 324:FWLIB/src/stm32f4xx_spi.c **** /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
 325:FWLIB/src/stm32f4xx_spi.c ****   /* Write to SPIx CRCPOLY */
 326:FWLIB/src/stm32f4xx_spi.c ****   SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 225              		.loc 1 326 0
 226 0044 0B8A     		ldrh	r3, [r1, #16]
 227 0046 0382     		strh	r3, [r0, #16]	@ movhi
 228 0048 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 229              		.cfi_endproc
 230              	.LFE124:
 232              		.section	.text.I2S_Init,"ax",%progbits
 233              		.align	1
 234              		.global	I2S_Init
 235              		.syntax unified
 236              		.thumb
 237              		.thumb_func
ARM GAS  /tmp/ccgZHmNt.s 			page 11


 238              		.fpu fpv4-sp-d16
 240              	I2S_Init:
 241              	.LFB125:
 327:FWLIB/src/stm32f4xx_spi.c **** }
 328:FWLIB/src/stm32f4xx_spi.c **** 
 329:FWLIB/src/stm32f4xx_spi.c **** /**
 330:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 331:FWLIB/src/stm32f4xx_spi.c ****   *         parameters in the I2S_InitStruct.
 332:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be  2 or 3 to select the SPI peripheral (configured in I2S mode).
 333:FWLIB/src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to an I2S_InitTypeDef structure that
 334:FWLIB/src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified SPI peripheral
 335:FWLIB/src/stm32f4xx_spi.c ****   *         configured in I2S mode.
 336:FWLIB/src/stm32f4xx_spi.c ****   *           
 337:FWLIB/src/stm32f4xx_spi.c ****   * @note   The function calculates the optimal prescaler needed to obtain the most 
 338:FWLIB/src/stm32f4xx_spi.c ****   *         accurate audio frequency (depending on the I2S clock source, the PLL values 
 339:FWLIB/src/stm32f4xx_spi.c ****   *         and the product configuration). But in case the prescaler value is greater 
 340:FWLIB/src/stm32f4xx_spi.c ****   *         than 511, the default value (0x02) will be configured instead.    
 341:FWLIB/src/stm32f4xx_spi.c ****   * 
 342:FWLIB/src/stm32f4xx_spi.c ****   * @note   if an external clock is used as source clock for the I2S, then the define
 343:FWLIB/src/stm32f4xx_spi.c ****   *         I2S_EXTERNAL_CLOCK_VAL in file stm32f4xx_conf.h should be enabled and set
 344:FWLIB/src/stm32f4xx_spi.c ****   *         to the value of the source clock frequency (in Hz).
 345:FWLIB/src/stm32f4xx_spi.c ****   *  
 346:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 347:FWLIB/src/stm32f4xx_spi.c ****   */
 348:FWLIB/src/stm32f4xx_spi.c **** void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
 349:FWLIB/src/stm32f4xx_spi.c **** {
 242              		.loc 1 349 0
 243              		.cfi_startproc
 244              		@ args = 0, pretend = 0, frame = 0
 245              		@ frame_needed = 0, uses_anonymous_args = 0
 246              	.LVL33:
 247 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 248              	.LCFI2:
 249              		.cfi_def_cfa_offset 20
 250              		.cfi_offset 4, -20
 251              		.cfi_offset 5, -16
 252              		.cfi_offset 6, -12
 253              		.cfi_offset 7, -8
 254              		.cfi_offset 14, -4
 255              	.LVL34:
 350:FWLIB/src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 351:FWLIB/src/stm32f4xx_spi.c ****   uint32_t tmp = 0, i2sclk = 0;
 352:FWLIB/src/stm32f4xx_spi.c **** #ifndef I2S_EXTERNAL_CLOCK_VAL
 353:FWLIB/src/stm32f4xx_spi.c ****   uint32_t pllm = 0, plln = 0, pllr = 0;
 354:FWLIB/src/stm32f4xx_spi.c **** #endif /* I2S_EXTERNAL_CLOCK_VAL */
 355:FWLIB/src/stm32f4xx_spi.c ****   
 356:FWLIB/src/stm32f4xx_spi.c ****   /* Check the I2S parameters */
 357:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_23_PERIPH(SPIx));
 358:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
 359:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
 360:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
 361:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
 362:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
 363:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
 364:FWLIB/src/stm32f4xx_spi.c **** 
 365:FWLIB/src/stm32f4xx_spi.c **** /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
 366:FWLIB/src/stm32f4xx_spi.c ****   /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
ARM GAS  /tmp/ccgZHmNt.s 			page 12


 367:FWLIB/src/stm32f4xx_spi.c ****   SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 256              		.loc 1 367 0
 257 0002 838B     		ldrh	r3, [r0, #28]
 258 0004 9BB2     		uxth	r3, r3
 259 0006 23F47B63 		bic	r3, r3, #4016
 260 000a 23F00F03 		bic	r3, r3, #15
 261 000e 9BB2     		uxth	r3, r3
 262 0010 8383     		strh	r3, [r0, #28]	@ movhi
 368:FWLIB/src/stm32f4xx_spi.c ****   SPIx->I2SPR = 0x0002;
 263              		.loc 1 368 0
 264 0012 0223     		movs	r3, #2
 265 0014 0384     		strh	r3, [r0, #32]	@ movhi
 369:FWLIB/src/stm32f4xx_spi.c ****   
 370:FWLIB/src/stm32f4xx_spi.c ****   /* Get the I2SCFGR register value */
 371:FWLIB/src/stm32f4xx_spi.c ****   tmpreg = SPIx->I2SCFGR;
 266              		.loc 1 371 0
 267 0016 828B     		ldrh	r2, [r0, #28]
 268 0018 92B2     		uxth	r2, r2
 269              	.LVL35:
 372:FWLIB/src/stm32f4xx_spi.c ****   
 373:FWLIB/src/stm32f4xx_spi.c ****   /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
 374:FWLIB/src/stm32f4xx_spi.c ****   if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 270              		.loc 1 374 0
 271 001a 8B68     		ldr	r3, [r1, #8]
 272 001c 022B     		cmp	r3, #2
 273 001e 6AD0     		beq	.L28
 375:FWLIB/src/stm32f4xx_spi.c ****   {
 376:FWLIB/src/stm32f4xx_spi.c ****     i2sodd = (uint16_t)0;
 377:FWLIB/src/stm32f4xx_spi.c ****     i2sdiv = (uint16_t)2;   
 378:FWLIB/src/stm32f4xx_spi.c ****   }
 379:FWLIB/src/stm32f4xx_spi.c ****   /* If the requested audio frequency is not the default, compute the prescaler */
 380:FWLIB/src/stm32f4xx_spi.c ****   else
 381:FWLIB/src/stm32f4xx_spi.c ****   {
 382:FWLIB/src/stm32f4xx_spi.c ****     /* Check the frame length (For the Prescaler computing) *******************/
 383:FWLIB/src/stm32f4xx_spi.c ****     if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 274              		.loc 1 383 0
 275 0020 8B88     		ldrh	r3, [r1, #4]
 276 0022 002B     		cmp	r3, #0
 277 0024 52D1     		bne	.L29
 384:FWLIB/src/stm32f4xx_spi.c ****     {
 385:FWLIB/src/stm32f4xx_spi.c ****       /* Packet length is 16 bits */
 386:FWLIB/src/stm32f4xx_spi.c ****       packetlength = 1;
 278              		.loc 1 386 0
 279 0026 4FF0010E 		mov	lr, #1
 280              	.L21:
 281              	.LVL36:
 387:FWLIB/src/stm32f4xx_spi.c ****     }
 388:FWLIB/src/stm32f4xx_spi.c ****     else
 389:FWLIB/src/stm32f4xx_spi.c ****     {
 390:FWLIB/src/stm32f4xx_spi.c ****       /* Packet length is 32 bits */
 391:FWLIB/src/stm32f4xx_spi.c ****       packetlength = 2;
 392:FWLIB/src/stm32f4xx_spi.c ****     }
 393:FWLIB/src/stm32f4xx_spi.c **** 
 394:FWLIB/src/stm32f4xx_spi.c ****     /* Get I2S source Clock frequency  ****************************************/
 395:FWLIB/src/stm32f4xx_spi.c ****       
 396:FWLIB/src/stm32f4xx_spi.c ****     /* If an external I2S clock has to be used, this define should be set  
 397:FWLIB/src/stm32f4xx_spi.c ****        in the project configuration or in the stm32f4xx_conf.h file */
ARM GAS  /tmp/ccgZHmNt.s 			page 13


 398:FWLIB/src/stm32f4xx_spi.c ****   #ifdef I2S_EXTERNAL_CLOCK_VAL     
 399:FWLIB/src/stm32f4xx_spi.c ****     /* Set external clock as I2S clock source */
 400:FWLIB/src/stm32f4xx_spi.c ****     if ((RCC->CFGR & RCC_CFGR_I2SSRC) == 0)
 401:FWLIB/src/stm32f4xx_spi.c ****     {
 402:FWLIB/src/stm32f4xx_spi.c ****       RCC->CFGR |= (uint32_t)RCC_CFGR_I2SSRC;
 403:FWLIB/src/stm32f4xx_spi.c ****     }
 404:FWLIB/src/stm32f4xx_spi.c ****     
 405:FWLIB/src/stm32f4xx_spi.c ****     /* Set the I2S clock to the external clock  value */
 406:FWLIB/src/stm32f4xx_spi.c ****     i2sclk = I2S_EXTERNAL_CLOCK_VAL;
 407:FWLIB/src/stm32f4xx_spi.c **** 
 408:FWLIB/src/stm32f4xx_spi.c ****   #else /* There is no define for External I2S clock source */
 409:FWLIB/src/stm32f4xx_spi.c ****     /* Set PLLI2S as I2S clock source */
 410:FWLIB/src/stm32f4xx_spi.c ****     if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 282              		.loc 1 410 0
 283 002a 344B     		ldr	r3, .L33
 284 002c 9B68     		ldr	r3, [r3, #8]
 285 002e 13F4000F 		tst	r3, #8388608
 286 0032 04D0     		beq	.L22
 411:FWLIB/src/stm32f4xx_spi.c ****     {
 412:FWLIB/src/stm32f4xx_spi.c ****       RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 287              		.loc 1 412 0
 288 0034 314C     		ldr	r4, .L33
 289 0036 A368     		ldr	r3, [r4, #8]
 290 0038 23F40003 		bic	r3, r3, #8388608
 291 003c A360     		str	r3, [r4, #8]
 292              	.L22:
 413:FWLIB/src/stm32f4xx_spi.c ****     }    
 414:FWLIB/src/stm32f4xx_spi.c ****     
 415:FWLIB/src/stm32f4xx_spi.c ****     /* Get the PLLI2SN value */
 416:FWLIB/src/stm32f4xx_spi.c ****     plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 293              		.loc 1 416 0
 294 003e 2F4D     		ldr	r5, .L33
 295 0040 D5F88460 		ldr	r6, [r5, #132]
 296 0044 C6F38816 		ubfx	r6, r6, #6, #9
 297              	.LVL37:
 417:FWLIB/src/stm32f4xx_spi.c ****                       (RCC_PLLI2SCFGR_PLLI2SN >> 6));
 418:FWLIB/src/stm32f4xx_spi.c ****     
 419:FWLIB/src/stm32f4xx_spi.c ****     /* Get the PLLI2SR value */
 420:FWLIB/src/stm32f4xx_spi.c ****     pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 298              		.loc 1 420 0
 299 0048 D5F88430 		ldr	r3, [r5, #132]
 300 004c C3F30273 		ubfx	r3, r3, #28, #3
 301              	.LVL38:
 421:FWLIB/src/stm32f4xx_spi.c ****                       (RCC_PLLI2SCFGR_PLLI2SR >> 28));
 422:FWLIB/src/stm32f4xx_spi.c ****     
 423:FWLIB/src/stm32f4xx_spi.c ****     /* Get the PLLM value */
 424:FWLIB/src/stm32f4xx_spi.c ****     pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 302              		.loc 1 424 0
 303 0050 6F68     		ldr	r7, [r5, #4]
 304 0052 07F03F07 		and	r7, r7, #63
 305              	.LVL39:
 425:FWLIB/src/stm32f4xx_spi.c **** 
 426:FWLIB/src/stm32f4xx_spi.c ****     if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)
 306              		.loc 1 426 0
 307 0056 6C68     		ldr	r4, [r5, #4]
 308 0058 14F4800F 		tst	r4, #4194304
 309 005c 39D0     		beq	.L23
ARM GAS  /tmp/ccgZHmNt.s 			page 14


 427:FWLIB/src/stm32f4xx_spi.c ****     {
 428:FWLIB/src/stm32f4xx_spi.c ****       /* Get the I2S source clock value */
 429:FWLIB/src/stm32f4xx_spi.c ****       i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 310              		.loc 1 429 0
 311 005e 284C     		ldr	r4, .L33+4
 312 0060 B4FBF7F4 		udiv	r4, r4, r7
 313 0064 04FB06F4 		mul	r4, r4, r6
 314 0068 B4FBF3F4 		udiv	r4, r4, r3
 315              	.LVL40:
 316              	.L24:
 430:FWLIB/src/stm32f4xx_spi.c ****     }
 431:FWLIB/src/stm32f4xx_spi.c ****     else
 432:FWLIB/src/stm32f4xx_spi.c ****     { /* Get the I2S source clock value */
 433:FWLIB/src/stm32f4xx_spi.c ****       i2sclk = (uint32_t)(((HSI_VALUE / pllm) * plln) / pllr);
 434:FWLIB/src/stm32f4xx_spi.c ****     }
 435:FWLIB/src/stm32f4xx_spi.c ****   #endif /* I2S_EXTERNAL_CLOCK_VAL */
 436:FWLIB/src/stm32f4xx_spi.c ****     
 437:FWLIB/src/stm32f4xx_spi.c ****     /* Compute the Real divider depending on the MCLK output state, with a floating point */
 438:FWLIB/src/stm32f4xx_spi.c ****     if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 317              		.loc 1 438 0
 318 006c CB88     		ldrh	r3, [r1, #6]
 319              	.LVL41:
 320 006e B3F5007F 		cmp	r3, #512
 321 0072 36D0     		beq	.L32
 439:FWLIB/src/stm32f4xx_spi.c ****     {
 440:FWLIB/src/stm32f4xx_spi.c ****       /* MCLK output is enabled */
 441:FWLIB/src/stm32f4xx_spi.c ****       tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 442:FWLIB/src/stm32f4xx_spi.c ****     }
 443:FWLIB/src/stm32f4xx_spi.c ****     else
 444:FWLIB/src/stm32f4xx_spi.c ****     {
 445:FWLIB/src/stm32f4xx_spi.c ****       /* MCLK output is disabled */
 446:FWLIB/src/stm32f4xx_spi.c ****       tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 
 322              		.loc 1 446 0
 323 0074 4FEA4E1E 		lsl	lr, lr, #5
 324              	.LVL42:
 325 0078 B4FBFEF4 		udiv	r4, r4, lr
 326              	.LVL43:
 327 007c 04EB8404 		add	r4, r4, r4, lsl #2
 328 0080 6300     		lsls	r3, r4, #1
 329 0082 8C68     		ldr	r4, [r1, #8]
 330 0084 B3FBF4F3 		udiv	r3, r3, r4
 331 0088 0533     		adds	r3, r3, #5
 332 008a 9BB2     		uxth	r3, r3
 333              	.LVL44:
 334              	.L26:
 447:FWLIB/src/stm32f4xx_spi.c ****     }
 448:FWLIB/src/stm32f4xx_spi.c ****     
 449:FWLIB/src/stm32f4xx_spi.c ****     /* Remove the flatting point */
 450:FWLIB/src/stm32f4xx_spi.c ****     tmp = tmp / 10;  
 335              		.loc 1 450 0
 336 008c 1D4C     		ldr	r4, .L33+8
 337 008e A4FB0343 		umull	r4, r3, r4, r3
 338              	.LVL45:
 339 0092 DB08     		lsrs	r3, r3, #3
 340              	.LVL46:
 451:FWLIB/src/stm32f4xx_spi.c ****       
 452:FWLIB/src/stm32f4xx_spi.c ****     /* Check the parity of the divider */
ARM GAS  /tmp/ccgZHmNt.s 			page 15


 453:FWLIB/src/stm32f4xx_spi.c ****     i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 341              		.loc 1 453 0
 342 0094 03F00104 		and	r4, r3, #1
 343              	.LVL47:
 454:FWLIB/src/stm32f4xx_spi.c ****    
 455:FWLIB/src/stm32f4xx_spi.c ****     /* Compute the i2sdiv prescaler */
 456:FWLIB/src/stm32f4xx_spi.c ****     i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 344              		.loc 1 456 0
 345 0098 1B1B     		subs	r3, r3, r4
 346              	.LVL48:
 347 009a C3F34F03 		ubfx	r3, r3, #1, #16
 348              	.LVL49:
 457:FWLIB/src/stm32f4xx_spi.c ****    
 458:FWLIB/src/stm32f4xx_spi.c ****     /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
 459:FWLIB/src/stm32f4xx_spi.c ****     i2sodd = (uint16_t) (i2sodd << 8);
 349              		.loc 1 459 0
 350 009e 2402     		lsls	r4, r4, #8
 351              	.LVL50:
 352              	.L20:
 460:FWLIB/src/stm32f4xx_spi.c ****   }
 461:FWLIB/src/stm32f4xx_spi.c **** 
 462:FWLIB/src/stm32f4xx_spi.c ****   /* Test if the divider is 1 or 0 or greater than 0xFF */
 463:FWLIB/src/stm32f4xx_spi.c ****   if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 353              		.loc 1 463 0
 354 00a0 9D1E     		subs	r5, r3, #2
 355 00a2 ADB2     		uxth	r5, r5
 356 00a4 FD2D     		cmp	r5, #253
 357 00a6 01D9     		bls	.L27
 464:FWLIB/src/stm32f4xx_spi.c ****   {
 465:FWLIB/src/stm32f4xx_spi.c ****     /* Set the default values */
 466:FWLIB/src/stm32f4xx_spi.c ****     i2sdiv = 2;
 467:FWLIB/src/stm32f4xx_spi.c ****     i2sodd = 0;
 358              		.loc 1 467 0
 359 00a8 0024     		movs	r4, #0
 360              	.LVL51:
 466:FWLIB/src/stm32f4xx_spi.c ****     i2sodd = 0;
 361              		.loc 1 466 0
 362 00aa 0223     		movs	r3, #2
 363              	.LVL52:
 364              	.L27:
 468:FWLIB/src/stm32f4xx_spi.c ****   }
 469:FWLIB/src/stm32f4xx_spi.c **** 
 470:FWLIB/src/stm32f4xx_spi.c ****   /* Write to SPIx I2SPR register the computed value */
 471:FWLIB/src/stm32f4xx_spi.c ****   SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCL
 365              		.loc 1 471 0
 366 00ac CD88     		ldrh	r5, [r1, #6]
 367 00ae 2C43     		orrs	r4, r4, r5
 368              	.LVL53:
 369 00b0 2343     		orrs	r3, r3, r4
 370              	.LVL54:
 371 00b2 0384     		strh	r3, [r0, #32]	@ movhi
 472:FWLIB/src/stm32f4xx_spi.c ****  
 473:FWLIB/src/stm32f4xx_spi.c ****   /* Configure the I2S with the SPI_InitStruct values */
 474:FWLIB/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 372              		.loc 1 474 0
 373 00b4 0B88     		ldrh	r3, [r1]
 475:FWLIB/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
ARM GAS  /tmp/ccgZHmNt.s 			page 16


 374              		.loc 1 475 0
 375 00b6 4C88     		ldrh	r4, [r1, #2]
 376 00b8 8D88     		ldrh	r5, [r1, #4]
 476:FWLIB/src/stm32f4xx_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 377              		.loc 1 476 0
 378 00ba 8989     		ldrh	r1, [r1, #12]
 379              	.LVL55:
 475:FWLIB/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 380              		.loc 1 475 0
 381 00bc 2943     		orrs	r1, r1, r5
 382 00be 2143     		orrs	r1, r1, r4
 474:FWLIB/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 383              		.loc 1 474 0
 384 00c0 0B43     		orrs	r3, r3, r1
 385 00c2 1A43     		orrs	r2, r2, r3
 386              	.LVL56:
 387 00c4 42F40062 		orr	r2, r2, #2048
 388              	.LVL57:
 477:FWLIB/src/stm32f4xx_spi.c ****  
 478:FWLIB/src/stm32f4xx_spi.c **** #if defined(SPI_I2SCFGR_ASTRTEN)
 479:FWLIB/src/stm32f4xx_spi.c ****   if((I2S_InitStruct->I2S_Standard  == I2S_Standard_PCMShort) || (I2S_InitStruct->I2S_Standard  == 
 480:FWLIB/src/stm32f4xx_spi.c ****   {
 481:FWLIB/src/stm32f4xx_spi.c ****     /* Write to SPIx I2SCFGR */  
 482:FWLIB/src/stm32f4xx_spi.c ****     SPIx->I2SCFGR = tmpreg | SPI_I2SCFGR_ASTRTEN;
 483:FWLIB/src/stm32f4xx_spi.c ****   }
 484:FWLIB/src/stm32f4xx_spi.c **** #else
 485:FWLIB/src/stm32f4xx_spi.c ****   /* Write to SPIx I2SCFGR */  
 486:FWLIB/src/stm32f4xx_spi.c ****   SPIx->I2SCFGR = tmpreg ;
 389              		.loc 1 486 0
 390 00c8 8283     		strh	r2, [r0, #28]	@ movhi
 391 00ca F0BD     		pop	{r4, r5, r6, r7, pc}
 392              	.LVL58:
 393              	.L29:
 391:FWLIB/src/stm32f4xx_spi.c ****     }
 394              		.loc 1 391 0
 395 00cc 4FF0020E 		mov	lr, #2
 396 00d0 ABE7     		b	.L21
 397              	.LVL59:
 398              	.L23:
 433:FWLIB/src/stm32f4xx_spi.c ****     }
 399              		.loc 1 433 0
 400 00d2 0D4C     		ldr	r4, .L33+12
 401 00d4 B4FBF7F4 		udiv	r4, r4, r7
 402 00d8 04FB06F4 		mul	r4, r4, r6
 403 00dc B4FBF3F4 		udiv	r4, r4, r3
 404              	.LVL60:
 405 00e0 C4E7     		b	.L24
 406              	.LVL61:
 407              	.L32:
 441:FWLIB/src/stm32f4xx_spi.c ****     }
 408              		.loc 1 441 0
 409 00e2 240A     		lsrs	r4, r4, #8
 410              	.LVL62:
 411 00e4 04EB8404 		add	r4, r4, r4, lsl #2
 412 00e8 6300     		lsls	r3, r4, #1
 413 00ea 8C68     		ldr	r4, [r1, #8]
 414 00ec B3FBF4F3 		udiv	r3, r3, r4
ARM GAS  /tmp/ccgZHmNt.s 			page 17


 415 00f0 0533     		adds	r3, r3, #5
 416 00f2 9BB2     		uxth	r3, r3
 417              	.LVL63:
 418 00f4 CAE7     		b	.L26
 419              	.LVL64:
 420              	.L28:
 376:FWLIB/src/stm32f4xx_spi.c ****     i2sdiv = (uint16_t)2;   
 421              		.loc 1 376 0
 422 00f6 0024     		movs	r4, #0
 377:FWLIB/src/stm32f4xx_spi.c ****   }
 423              		.loc 1 377 0
 424 00f8 0223     		movs	r3, #2
 425 00fa D1E7     		b	.L20
 426              	.L34:
 427              		.align	2
 428              	.L33:
 429 00fc 00380240 		.word	1073887232
 430 0100 00127A00 		.word	8000000
 431 0104 CDCCCCCC 		.word	-858993459
 432 0108 0024F400 		.word	16000000
 433              		.cfi_endproc
 434              	.LFE125:
 436              		.section	.text.SPI_StructInit,"ax",%progbits
 437              		.align	1
 438              		.global	SPI_StructInit
 439              		.syntax unified
 440              		.thumb
 441              		.thumb_func
 442              		.fpu fpv4-sp-d16
 444              	SPI_StructInit:
 445              	.LFB126:
 487:FWLIB/src/stm32f4xx_spi.c **** #endif 
 488:FWLIB/src/stm32f4xx_spi.c **** }
 489:FWLIB/src/stm32f4xx_spi.c **** 
 490:FWLIB/src/stm32f4xx_spi.c **** /**
 491:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Fills each SPI_InitStruct member with its default value.
 492:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
 493:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 494:FWLIB/src/stm32f4xx_spi.c ****   */
 495:FWLIB/src/stm32f4xx_spi.c **** void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
 496:FWLIB/src/stm32f4xx_spi.c **** {
 446              		.loc 1 496 0
 447              		.cfi_startproc
 448              		@ args = 0, pretend = 0, frame = 0
 449              		@ frame_needed = 0, uses_anonymous_args = 0
 450              		@ link register save eliminated.
 451              	.LVL65:
 497:FWLIB/src/stm32f4xx_spi.c **** /*--------------- Reset SPI init structure parameters values -----------------*/
 498:FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the SPI_Direction member */
 499:FWLIB/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 452              		.loc 1 499 0
 453 0000 0023     		movs	r3, #0
 454 0002 0380     		strh	r3, [r0]	@ movhi
 500:FWLIB/src/stm32f4xx_spi.c ****   /* initialize the SPI_Mode member */
 501:FWLIB/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 455              		.loc 1 501 0
 456 0004 4380     		strh	r3, [r0, #2]	@ movhi
ARM GAS  /tmp/ccgZHmNt.s 			page 18


 502:FWLIB/src/stm32f4xx_spi.c ****   /* initialize the SPI_DataSize member */
 503:FWLIB/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 457              		.loc 1 503 0
 458 0006 8380     		strh	r3, [r0, #4]	@ movhi
 504:FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CPOL member */
 505:FWLIB/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 459              		.loc 1 505 0
 460 0008 C380     		strh	r3, [r0, #6]	@ movhi
 506:FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CPHA member */
 507:FWLIB/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 461              		.loc 1 507 0
 462 000a 0381     		strh	r3, [r0, #8]	@ movhi
 508:FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the SPI_NSS member */
 509:FWLIB/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 463              		.loc 1 509 0
 464 000c 4381     		strh	r3, [r0, #10]	@ movhi
 510:FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the SPI_BaudRatePrescaler member */
 511:FWLIB/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 465              		.loc 1 511 0
 466 000e 8381     		strh	r3, [r0, #12]	@ movhi
 512:FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the SPI_FirstBit member */
 513:FWLIB/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 467              		.loc 1 513 0
 468 0010 C381     		strh	r3, [r0, #14]	@ movhi
 514:FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CRCPolynomial member */
 515:FWLIB/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CRCPolynomial = 7;
 469              		.loc 1 515 0
 470 0012 0723     		movs	r3, #7
 471 0014 0382     		strh	r3, [r0, #16]	@ movhi
 472 0016 7047     		bx	lr
 473              		.cfi_endproc
 474              	.LFE126:
 476              		.section	.text.I2S_StructInit,"ax",%progbits
 477              		.align	1
 478              		.global	I2S_StructInit
 479              		.syntax unified
 480              		.thumb
 481              		.thumb_func
 482              		.fpu fpv4-sp-d16
 484              	I2S_StructInit:
 485              	.LFB127:
 516:FWLIB/src/stm32f4xx_spi.c **** }
 517:FWLIB/src/stm32f4xx_spi.c **** 
 518:FWLIB/src/stm32f4xx_spi.c **** /**
 519:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Fills each I2S_InitStruct member with its default value.
 520:FWLIB/src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to a I2S_InitTypeDef structure which will be initialized.
 521:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 522:FWLIB/src/stm32f4xx_spi.c ****   */
 523:FWLIB/src/stm32f4xx_spi.c **** void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
 524:FWLIB/src/stm32f4xx_spi.c **** {
 486              		.loc 1 524 0
 487              		.cfi_startproc
 488              		@ args = 0, pretend = 0, frame = 0
 489              		@ frame_needed = 0, uses_anonymous_args = 0
 490              		@ link register save eliminated.
 491              	.LVL66:
 525:FWLIB/src/stm32f4xx_spi.c **** /*--------------- Reset I2S init structure parameters values -----------------*/
ARM GAS  /tmp/ccgZHmNt.s 			page 19


 526:FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the I2S_Mode member */
 527:FWLIB/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 492              		.loc 1 527 0
 493 0000 0023     		movs	r3, #0
 494 0002 0380     		strh	r3, [r0]	@ movhi
 528:FWLIB/src/stm32f4xx_spi.c ****   
 529:FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the I2S_Standard member */
 530:FWLIB/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 495              		.loc 1 530 0
 496 0004 4380     		strh	r3, [r0, #2]	@ movhi
 531:FWLIB/src/stm32f4xx_spi.c ****   
 532:FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the I2S_DataFormat member */
 533:FWLIB/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 497              		.loc 1 533 0
 498 0006 8380     		strh	r3, [r0, #4]	@ movhi
 534:FWLIB/src/stm32f4xx_spi.c ****   
 535:FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the I2S_MCLKOutput member */
 536:FWLIB/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 499              		.loc 1 536 0
 500 0008 C380     		strh	r3, [r0, #6]	@ movhi
 537:FWLIB/src/stm32f4xx_spi.c ****   
 538:FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the I2S_AudioFreq member */
 539:FWLIB/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 501              		.loc 1 539 0
 502 000a 0222     		movs	r2, #2
 503 000c 8260     		str	r2, [r0, #8]
 540:FWLIB/src/stm32f4xx_spi.c ****   
 541:FWLIB/src/stm32f4xx_spi.c ****   /* Initialize the I2S_CPOL member */
 542:FWLIB/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 504              		.loc 1 542 0
 505 000e 8381     		strh	r3, [r0, #12]	@ movhi
 506 0010 7047     		bx	lr
 507              		.cfi_endproc
 508              	.LFE127:
 510              		.section	.text.SPI_Cmd,"ax",%progbits
 511              		.align	1
 512              		.global	SPI_Cmd
 513              		.syntax unified
 514              		.thumb
 515              		.thumb_func
 516              		.fpu fpv4-sp-d16
 518              	SPI_Cmd:
 519              	.LFB128:
 543:FWLIB/src/stm32f4xx_spi.c **** }
 544:FWLIB/src/stm32f4xx_spi.c **** 
 545:FWLIB/src/stm32f4xx_spi.c **** /**
 546:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI peripheral.
 547:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 548:FWLIB/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 549:FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 550:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 551:FWLIB/src/stm32f4xx_spi.c ****   */
 552:FWLIB/src/stm32f4xx_spi.c **** void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 553:FWLIB/src/stm32f4xx_spi.c **** {
 520              		.loc 1 553 0
 521              		.cfi_startproc
 522              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccgZHmNt.s 			page 20


 523              		@ frame_needed = 0, uses_anonymous_args = 0
 524              		@ link register save eliminated.
 525              	.LVL67:
 554:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 555:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 556:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 557:FWLIB/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 526              		.loc 1 557 0
 527 0000 31B9     		cbnz	r1, .L40
 558:FWLIB/src/stm32f4xx_spi.c ****   {
 559:FWLIB/src/stm32f4xx_spi.c ****     /* Enable the selected SPI peripheral */
 560:FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_CR1_SPE;
 561:FWLIB/src/stm32f4xx_spi.c ****   }
 562:FWLIB/src/stm32f4xx_spi.c ****   else
 563:FWLIB/src/stm32f4xx_spi.c ****   {
 564:FWLIB/src/stm32f4xx_spi.c ****     /* Disable the selected SPI peripheral */
 565:FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 528              		.loc 1 565 0
 529 0002 0388     		ldrh	r3, [r0]
 530 0004 9BB2     		uxth	r3, r3
 531 0006 23F04003 		bic	r3, r3, #64
 532 000a 9BB2     		uxth	r3, r3
 533 000c 0380     		strh	r3, [r0]	@ movhi
 534 000e 7047     		bx	lr
 535              	.L40:
 560:FWLIB/src/stm32f4xx_spi.c ****   }
 536              		.loc 1 560 0
 537 0010 0388     		ldrh	r3, [r0]
 538 0012 9BB2     		uxth	r3, r3
 539 0014 43F04003 		orr	r3, r3, #64
 540 0018 0380     		strh	r3, [r0]	@ movhi
 541 001a 7047     		bx	lr
 542              		.cfi_endproc
 543              	.LFE128:
 545              		.section	.text.I2S_Cmd,"ax",%progbits
 546              		.align	1
 547              		.global	I2S_Cmd
 548              		.syntax unified
 549              		.thumb
 550              		.thumb_func
 551              		.fpu fpv4-sp-d16
 553              	I2S_Cmd:
 554              	.LFB129:
 566:FWLIB/src/stm32f4xx_spi.c ****   }
 567:FWLIB/src/stm32f4xx_spi.c **** }
 568:FWLIB/src/stm32f4xx_spi.c **** 
 569:FWLIB/src/stm32f4xx_spi.c **** /**
 570:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI peripheral (in I2S mode).
 571:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 2 or 3 to select the SPI peripheral (or I2Sxext 
 572:FWLIB/src/stm32f4xx_spi.c ****   *         for full duplex mode).
 573:FWLIB/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 574:FWLIB/src/stm32f4xx_spi.c ****   *         This parameter can be: ENABLE or DISABLE.
 575:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 576:FWLIB/src/stm32f4xx_spi.c ****   */
 577:FWLIB/src/stm32f4xx_spi.c **** void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 578:FWLIB/src/stm32f4xx_spi.c **** {
 555              		.loc 1 578 0
ARM GAS  /tmp/ccgZHmNt.s 			page 21


 556              		.cfi_startproc
 557              		@ args = 0, pretend = 0, frame = 0
 558              		@ frame_needed = 0, uses_anonymous_args = 0
 559              		@ link register save eliminated.
 560              	.LVL68:
 579:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 580:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
 581:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 582:FWLIB/src/stm32f4xx_spi.c ****   
 583:FWLIB/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 561              		.loc 1 583 0
 562 0000 31B9     		cbnz	r1, .L44
 584:FWLIB/src/stm32f4xx_spi.c ****   {
 585:FWLIB/src/stm32f4xx_spi.c ****     /* Enable the selected SPI peripheral (in I2S mode) */
 586:FWLIB/src/stm32f4xx_spi.c ****     SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 587:FWLIB/src/stm32f4xx_spi.c ****   }
 588:FWLIB/src/stm32f4xx_spi.c ****   else
 589:FWLIB/src/stm32f4xx_spi.c ****   {
 590:FWLIB/src/stm32f4xx_spi.c ****     /* Disable the selected SPI peripheral in I2S mode */
 591:FWLIB/src/stm32f4xx_spi.c ****     SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 563              		.loc 1 591 0
 564 0002 838B     		ldrh	r3, [r0, #28]
 565 0004 9BB2     		uxth	r3, r3
 566 0006 23F48063 		bic	r3, r3, #1024
 567 000a 9BB2     		uxth	r3, r3
 568 000c 8383     		strh	r3, [r0, #28]	@ movhi
 569 000e 7047     		bx	lr
 570              	.L44:
 586:FWLIB/src/stm32f4xx_spi.c ****   }
 571              		.loc 1 586 0
 572 0010 838B     		ldrh	r3, [r0, #28]
 573 0012 9BB2     		uxth	r3, r3
 574 0014 43F48063 		orr	r3, r3, #1024
 575 0018 8383     		strh	r3, [r0, #28]	@ movhi
 576 001a 7047     		bx	lr
 577              		.cfi_endproc
 578              	.LFE129:
 580              		.section	.text.SPI_DataSizeConfig,"ax",%progbits
 581              		.align	1
 582              		.global	SPI_DataSizeConfig
 583              		.syntax unified
 584              		.thumb
 585              		.thumb_func
 586              		.fpu fpv4-sp-d16
 588              	SPI_DataSizeConfig:
 589              	.LFB130:
 592:FWLIB/src/stm32f4xx_spi.c ****   }
 593:FWLIB/src/stm32f4xx_spi.c **** }
 594:FWLIB/src/stm32f4xx_spi.c **** 
 595:FWLIB/src/stm32f4xx_spi.c **** /**
 596:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Configures the data size for the selected SPI.
 597:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 598:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPI_DataSize: specifies the SPI data size.
 599:FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 600:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_DataSize_16b: Set data frame format to 16bit
 601:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_DataSize_8b: Set data frame format to 8bit
 602:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
ARM GAS  /tmp/ccgZHmNt.s 			page 22


 603:FWLIB/src/stm32f4xx_spi.c ****   */
 604:FWLIB/src/stm32f4xx_spi.c **** void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
 605:FWLIB/src/stm32f4xx_spi.c **** {
 590              		.loc 1 605 0
 591              		.cfi_startproc
 592              		@ args = 0, pretend = 0, frame = 0
 593              		@ frame_needed = 0, uses_anonymous_args = 0
 594              		@ link register save eliminated.
 595              	.LVL69:
 606:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 607:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 608:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DATASIZE(SPI_DataSize));
 609:FWLIB/src/stm32f4xx_spi.c ****   /* Clear DFF bit */
 610:FWLIB/src/stm32f4xx_spi.c ****   SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 596              		.loc 1 610 0
 597 0000 0388     		ldrh	r3, [r0]
 598 0002 9BB2     		uxth	r3, r3
 599 0004 23F40063 		bic	r3, r3, #2048
 600 0008 9BB2     		uxth	r3, r3
 601 000a 0380     		strh	r3, [r0]	@ movhi
 611:FWLIB/src/stm32f4xx_spi.c ****   /* Set new DFF bit value */
 612:FWLIB/src/stm32f4xx_spi.c ****   SPIx->CR1 |= SPI_DataSize;
 602              		.loc 1 612 0
 603 000c 0388     		ldrh	r3, [r0]
 604 000e 9BB2     		uxth	r3, r3
 605 0010 1943     		orrs	r1, r1, r3
 606              	.LVL70:
 607 0012 0180     		strh	r1, [r0]	@ movhi
 608 0014 7047     		bx	lr
 609              		.cfi_endproc
 610              	.LFE130:
 612              		.section	.text.SPI_BiDirectionalLineConfig,"ax",%progbits
 613              		.align	1
 614              		.global	SPI_BiDirectionalLineConfig
 615              		.syntax unified
 616              		.thumb
 617              		.thumb_func
 618              		.fpu fpv4-sp-d16
 620              	SPI_BiDirectionalLineConfig:
 621              	.LFB131:
 613:FWLIB/src/stm32f4xx_spi.c **** }
 614:FWLIB/src/stm32f4xx_spi.c **** 
 615:FWLIB/src/stm32f4xx_spi.c **** /**
 616:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Selects the data transfer direction in bidirectional mode for the specified SPI.
 617:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 618:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPI_Direction: specifies the data transfer direction in bidirectional mode. 
 619:FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 620:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_Direction_Tx: Selects Tx transmission direction
 621:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_Direction_Rx: Selects Rx receive direction
 622:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 623:FWLIB/src/stm32f4xx_spi.c ****   */
 624:FWLIB/src/stm32f4xx_spi.c **** void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
 625:FWLIB/src/stm32f4xx_spi.c **** {
 622              		.loc 1 625 0
 623              		.cfi_startproc
 624              		@ args = 0, pretend = 0, frame = 0
 625              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccgZHmNt.s 			page 23


 626              		@ link register save eliminated.
 627              	.LVL71:
 626:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 627:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 628:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DIRECTION(SPI_Direction));
 629:FWLIB/src/stm32f4xx_spi.c ****   if (SPI_Direction == SPI_Direction_Tx)
 628              		.loc 1 629 0
 629 0000 B1F5804F 		cmp	r1, #16384
 630 0004 06D0     		beq	.L49
 630:FWLIB/src/stm32f4xx_spi.c ****   {
 631:FWLIB/src/stm32f4xx_spi.c ****     /* Set the Tx only mode */
 632:FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_Direction_Tx;
 633:FWLIB/src/stm32f4xx_spi.c ****   }
 634:FWLIB/src/stm32f4xx_spi.c ****   else
 635:FWLIB/src/stm32f4xx_spi.c ****   {
 636:FWLIB/src/stm32f4xx_spi.c ****     /* Set the Rx only mode */
 637:FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR1 &= SPI_Direction_Rx;
 631              		.loc 1 637 0
 632 0006 0388     		ldrh	r3, [r0]
 633 0008 9BB2     		uxth	r3, r3
 634 000a 23F48043 		bic	r3, r3, #16384
 635 000e 9BB2     		uxth	r3, r3
 636 0010 0380     		strh	r3, [r0]	@ movhi
 637 0012 7047     		bx	lr
 638              	.L49:
 632:FWLIB/src/stm32f4xx_spi.c ****   }
 639              		.loc 1 632 0
 640 0014 0388     		ldrh	r3, [r0]
 641 0016 9BB2     		uxth	r3, r3
 642 0018 43F48043 		orr	r3, r3, #16384
 643 001c 0380     		strh	r3, [r0]	@ movhi
 644 001e 7047     		bx	lr
 645              		.cfi_endproc
 646              	.LFE131:
 648              		.section	.text.SPI_NSSInternalSoftwareConfig,"ax",%progbits
 649              		.align	1
 650              		.global	SPI_NSSInternalSoftwareConfig
 651              		.syntax unified
 652              		.thumb
 653              		.thumb_func
 654              		.fpu fpv4-sp-d16
 656              	SPI_NSSInternalSoftwareConfig:
 657              	.LFB132:
 638:FWLIB/src/stm32f4xx_spi.c ****   }
 639:FWLIB/src/stm32f4xx_spi.c **** }
 640:FWLIB/src/stm32f4xx_spi.c **** 
 641:FWLIB/src/stm32f4xx_spi.c **** /**
 642:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Configures internally by software the NSS pin for the selected SPI.
 643:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 644:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPI_NSSInternalSoft: specifies the SPI NSS internal state.
 645:FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 646:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
 647:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
 648:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 649:FWLIB/src/stm32f4xx_spi.c ****   */
 650:FWLIB/src/stm32f4xx_spi.c **** void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
 651:FWLIB/src/stm32f4xx_spi.c **** {
ARM GAS  /tmp/ccgZHmNt.s 			page 24


 658              		.loc 1 651 0
 659              		.cfi_startproc
 660              		@ args = 0, pretend = 0, frame = 0
 661              		@ frame_needed = 0, uses_anonymous_args = 0
 662              		@ link register save eliminated.
 663              	.LVL72:
 652:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 653:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 654:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
 655:FWLIB/src/stm32f4xx_spi.c ****   if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 664              		.loc 1 655 0
 665 0000 4FF6FF63 		movw	r3, #65279
 666 0004 9942     		cmp	r1, r3
 667 0006 05D0     		beq	.L51
 656:FWLIB/src/stm32f4xx_spi.c ****   {
 657:FWLIB/src/stm32f4xx_spi.c ****     /* Set NSS pin internally by software */
 658:FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 668              		.loc 1 658 0
 669 0008 0388     		ldrh	r3, [r0]
 670 000a 9BB2     		uxth	r3, r3
 671 000c 43F48073 		orr	r3, r3, #256
 672 0010 0380     		strh	r3, [r0]	@ movhi
 673 0012 7047     		bx	lr
 674              	.L51:
 659:FWLIB/src/stm32f4xx_spi.c ****   }
 660:FWLIB/src/stm32f4xx_spi.c ****   else
 661:FWLIB/src/stm32f4xx_spi.c ****   {
 662:FWLIB/src/stm32f4xx_spi.c ****     /* Reset NSS pin internally by software */
 663:FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 675              		.loc 1 663 0
 676 0014 0388     		ldrh	r3, [r0]
 677 0016 9BB2     		uxth	r3, r3
 678 0018 23F48073 		bic	r3, r3, #256
 679 001c 9BB2     		uxth	r3, r3
 680 001e 0380     		strh	r3, [r0]	@ movhi
 681 0020 7047     		bx	lr
 682              		.cfi_endproc
 683              	.LFE132:
 685              		.section	.text.SPI_SSOutputCmd,"ax",%progbits
 686              		.align	1
 687              		.global	SPI_SSOutputCmd
 688              		.syntax unified
 689              		.thumb
 690              		.thumb_func
 691              		.fpu fpv4-sp-d16
 693              	SPI_SSOutputCmd:
 694              	.LFB133:
 664:FWLIB/src/stm32f4xx_spi.c ****   }
 665:FWLIB/src/stm32f4xx_spi.c **** }
 666:FWLIB/src/stm32f4xx_spi.c **** 
 667:FWLIB/src/stm32f4xx_spi.c **** /**
 668:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SS output for the selected SPI.
 669:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 670:FWLIB/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx SS output. 
 671:FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 672:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 673:FWLIB/src/stm32f4xx_spi.c ****   */
ARM GAS  /tmp/ccgZHmNt.s 			page 25


 674:FWLIB/src/stm32f4xx_spi.c **** void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 675:FWLIB/src/stm32f4xx_spi.c **** {
 695              		.loc 1 675 0
 696              		.cfi_startproc
 697              		@ args = 0, pretend = 0, frame = 0
 698              		@ frame_needed = 0, uses_anonymous_args = 0
 699              		@ link register save eliminated.
 700              	.LVL73:
 676:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 677:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 678:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 679:FWLIB/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 701              		.loc 1 679 0
 702 0000 31B9     		cbnz	r1, .L56
 680:FWLIB/src/stm32f4xx_spi.c ****   {
 681:FWLIB/src/stm32f4xx_spi.c ****     /* Enable the selected SPI SS output */
 682:FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 683:FWLIB/src/stm32f4xx_spi.c ****   }
 684:FWLIB/src/stm32f4xx_spi.c ****   else
 685:FWLIB/src/stm32f4xx_spi.c ****   {
 686:FWLIB/src/stm32f4xx_spi.c ****     /* Disable the selected SPI SS output */
 687:FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 703              		.loc 1 687 0
 704 0002 8388     		ldrh	r3, [r0, #4]
 705 0004 9BB2     		uxth	r3, r3
 706 0006 23F00403 		bic	r3, r3, #4
 707 000a 9BB2     		uxth	r3, r3
 708 000c 8380     		strh	r3, [r0, #4]	@ movhi
 709 000e 7047     		bx	lr
 710              	.L56:
 682:FWLIB/src/stm32f4xx_spi.c ****   }
 711              		.loc 1 682 0
 712 0010 8388     		ldrh	r3, [r0, #4]
 713 0012 9BB2     		uxth	r3, r3
 714 0014 43F00403 		orr	r3, r3, #4
 715 0018 8380     		strh	r3, [r0, #4]	@ movhi
 716 001a 7047     		bx	lr
 717              		.cfi_endproc
 718              	.LFE133:
 720              		.section	.text.SPI_TIModeCmd,"ax",%progbits
 721              		.align	1
 722              		.global	SPI_TIModeCmd
 723              		.syntax unified
 724              		.thumb
 725              		.thumb_func
 726              		.fpu fpv4-sp-d16
 728              	SPI_TIModeCmd:
 729              	.LFB134:
 688:FWLIB/src/stm32f4xx_spi.c ****   }
 689:FWLIB/src/stm32f4xx_spi.c **** }
 690:FWLIB/src/stm32f4xx_spi.c **** 
 691:FWLIB/src/stm32f4xx_spi.c **** /**
 692:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SPIx/I2Sx DMA interface.
 693:FWLIB/src/stm32f4xx_spi.c ****   *   
 694:FWLIB/src/stm32f4xx_spi.c ****   * @note   This function can be called only after the SPI_Init() function has 
 695:FWLIB/src/stm32f4xx_spi.c ****   *         been called. 
 696:FWLIB/src/stm32f4xx_spi.c ****   * @note   When TI mode is selected, the control bits SSM, SSI, CPOL and CPHA 
ARM GAS  /tmp/ccgZHmNt.s 			page 26


 697:FWLIB/src/stm32f4xx_spi.c ****   *         are not taken into consideration and are configured by hardware
 698:FWLIB/src/stm32f4xx_spi.c ****   *         respectively to the TI mode requirements.  
 699:FWLIB/src/stm32f4xx_spi.c ****   * 
 700:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 
 701:FWLIB/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the selected SPI TI communication mode.
 702:FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 703:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 704:FWLIB/src/stm32f4xx_spi.c ****   */
 705:FWLIB/src/stm32f4xx_spi.c **** void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 706:FWLIB/src/stm32f4xx_spi.c **** {
 730              		.loc 1 706 0
 731              		.cfi_startproc
 732              		@ args = 0, pretend = 0, frame = 0
 733              		@ frame_needed = 0, uses_anonymous_args = 0
 734              		@ link register save eliminated.
 735              	.LVL74:
 707:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 708:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 709:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 710:FWLIB/src/stm32f4xx_spi.c **** 
 711:FWLIB/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 736              		.loc 1 711 0
 737 0000 31B9     		cbnz	r1, .L60
 712:FWLIB/src/stm32f4xx_spi.c ****   {
 713:FWLIB/src/stm32f4xx_spi.c ****     /* Enable the TI mode for the selected SPI peripheral */
 714:FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR2 |= SPI_CR2_FRF;
 715:FWLIB/src/stm32f4xx_spi.c ****   }
 716:FWLIB/src/stm32f4xx_spi.c ****   else
 717:FWLIB/src/stm32f4xx_spi.c ****   {
 718:FWLIB/src/stm32f4xx_spi.c ****     /* Disable the TI mode for the selected SPI peripheral */
 719:FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 738              		.loc 1 719 0
 739 0002 8388     		ldrh	r3, [r0, #4]
 740 0004 9BB2     		uxth	r3, r3
 741 0006 23F01003 		bic	r3, r3, #16
 742 000a 9BB2     		uxth	r3, r3
 743 000c 8380     		strh	r3, [r0, #4]	@ movhi
 744 000e 7047     		bx	lr
 745              	.L60:
 714:FWLIB/src/stm32f4xx_spi.c ****   }
 746              		.loc 1 714 0
 747 0010 8388     		ldrh	r3, [r0, #4]
 748 0012 9BB2     		uxth	r3, r3
 749 0014 43F01003 		orr	r3, r3, #16
 750 0018 8380     		strh	r3, [r0, #4]	@ movhi
 751 001a 7047     		bx	lr
 752              		.cfi_endproc
 753              	.LFE134:
 755              		.section	.text.I2S_FullDuplexConfig,"ax",%progbits
 756              		.align	1
 757              		.global	I2S_FullDuplexConfig
 758              		.syntax unified
 759              		.thumb
 760              		.thumb_func
 761              		.fpu fpv4-sp-d16
 763              	I2S_FullDuplexConfig:
 764              	.LFB135:
ARM GAS  /tmp/ccgZHmNt.s 			page 27


 720:FWLIB/src/stm32f4xx_spi.c ****   }
 721:FWLIB/src/stm32f4xx_spi.c **** }
 722:FWLIB/src/stm32f4xx_spi.c **** 
 723:FWLIB/src/stm32f4xx_spi.c **** /**
 724:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Configures the full duplex mode for the I2Sx peripheral using its
 725:FWLIB/src/stm32f4xx_spi.c ****   *         extension I2Sxext according to the specified parameters in the 
 726:FWLIB/src/stm32f4xx_spi.c ****   *         I2S_InitStruct.
 727:FWLIB/src/stm32f4xx_spi.c ****   * @param  I2Sxext: where x can be  2 or 3 to select the I2S peripheral extension block.
 728:FWLIB/src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to an I2S_InitTypeDef structure that
 729:FWLIB/src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified I2S peripheral
 730:FWLIB/src/stm32f4xx_spi.c ****   *         extension.
 731:FWLIB/src/stm32f4xx_spi.c ****   * 
 732:FWLIB/src/stm32f4xx_spi.c ****   * @note   The structure pointed by I2S_InitStruct parameter should be the same
 733:FWLIB/src/stm32f4xx_spi.c ****   *         used for the master I2S peripheral. In this case, if the master is 
 734:FWLIB/src/stm32f4xx_spi.c ****   *         configured as transmitter, the slave will be receiver and vice versa.
 735:FWLIB/src/stm32f4xx_spi.c ****   *         Or you can force a different mode by modifying the field I2S_Mode to the
 736:FWLIB/src/stm32f4xx_spi.c ****   *         value I2S_SlaveRx or I2S_SlaveTx independently of the master configuration.    
 737:FWLIB/src/stm32f4xx_spi.c ****   *         
 738:FWLIB/src/stm32f4xx_spi.c ****   * @note   The I2S full duplex extension can be configured in slave mode only.    
 739:FWLIB/src/stm32f4xx_spi.c ****   *  
 740:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 741:FWLIB/src/stm32f4xx_spi.c ****   */
 742:FWLIB/src/stm32f4xx_spi.c **** void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
 743:FWLIB/src/stm32f4xx_spi.c **** {
 765              		.loc 1 743 0
 766              		.cfi_startproc
 767              		@ args = 0, pretend = 0, frame = 0
 768              		@ frame_needed = 0, uses_anonymous_args = 0
 769              		@ link register save eliminated.
 770              	.LVL75:
 771 0000 30B4     		push	{r4, r5}
 772              	.LCFI3:
 773              		.cfi_def_cfa_offset 8
 774              		.cfi_offset 4, -8
 775              		.cfi_offset 5, -4
 776              	.LVL76:
 744:FWLIB/src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0, tmp = 0;
 745:FWLIB/src/stm32f4xx_spi.c ****   
 746:FWLIB/src/stm32f4xx_spi.c ****   /* Check the I2S parameters */
 747:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_EXT_PERIPH(I2Sxext));
 748:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
 749:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
 750:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
 751:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
 752:FWLIB/src/stm32f4xx_spi.c **** 
 753:FWLIB/src/stm32f4xx_spi.c **** /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
 754:FWLIB/src/stm32f4xx_spi.c ****   /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
 755:FWLIB/src/stm32f4xx_spi.c ****   I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 777              		.loc 1 755 0
 778 0002 838B     		ldrh	r3, [r0, #28]
 779 0004 9BB2     		uxth	r3, r3
 780 0006 23F47B63 		bic	r3, r3, #4016
 781 000a 23F00F03 		bic	r3, r3, #15
 782 000e 9BB2     		uxth	r3, r3
 783 0010 8383     		strh	r3, [r0, #28]	@ movhi
 756:FWLIB/src/stm32f4xx_spi.c ****   I2Sxext->I2SPR = 0x0002;
 784              		.loc 1 756 0
ARM GAS  /tmp/ccgZHmNt.s 			page 28


 785 0012 0223     		movs	r3, #2
 786 0014 0384     		strh	r3, [r0, #32]	@ movhi
 757:FWLIB/src/stm32f4xx_spi.c ****   
 758:FWLIB/src/stm32f4xx_spi.c ****   /* Get the I2SCFGR register value */
 759:FWLIB/src/stm32f4xx_spi.c ****   tmpreg = I2Sxext->I2SCFGR;
 787              		.loc 1 759 0
 788 0016 838B     		ldrh	r3, [r0, #28]
 789 0018 9BB2     		uxth	r3, r3
 790              	.LVL77:
 760:FWLIB/src/stm32f4xx_spi.c ****   
 761:FWLIB/src/stm32f4xx_spi.c ****   /* Get the mode to be configured for the extended I2S */
 762:FWLIB/src/stm32f4xx_spi.c ****   if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_Slav
 791              		.loc 1 762 0
 792 001a 0A88     		ldrh	r2, [r1]
 793 001c B2F5007F 		cmp	r2, #512
 794 0020 10D0     		beq	.L63
 795              		.loc 1 762 0 is_stmt 0 discriminator 1
 796 0022 62B1     		cbz	r2, .L66
 763:FWLIB/src/stm32f4xx_spi.c ****   {
 764:FWLIB/src/stm32f4xx_spi.c ****     tmp = I2S_Mode_SlaveRx;
 765:FWLIB/src/stm32f4xx_spi.c ****   }
 766:FWLIB/src/stm32f4xx_spi.c ****   else
 767:FWLIB/src/stm32f4xx_spi.c ****   {
 768:FWLIB/src/stm32f4xx_spi.c ****     if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_Sl
 769:FWLIB/src/stm32f4xx_spi.c ****     {
 770:FWLIB/src/stm32f4xx_spi.c ****       tmp = I2S_Mode_SlaveTx;
 797              		.loc 1 770 0 is_stmt 1
 798 0024 0025     		movs	r5, #0
 799              	.L62:
 800              	.LVL78:
 771:FWLIB/src/stm32f4xx_spi.c ****     }
 772:FWLIB/src/stm32f4xx_spi.c ****   }
 773:FWLIB/src/stm32f4xx_spi.c **** 
 774:FWLIB/src/stm32f4xx_spi.c ****  
 775:FWLIB/src/stm32f4xx_spi.c ****   /* Configure the I2S with the SPI_InitStruct values */
 776:FWLIB/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 777:FWLIB/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 801              		.loc 1 777 0
 802 0026 4A88     		ldrh	r2, [r1, #2]
 803 0028 8C88     		ldrh	r4, [r1, #4]
 778:FWLIB/src/stm32f4xx_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 804              		.loc 1 778 0
 805 002a 8989     		ldrh	r1, [r1, #12]
 806              	.LVL79:
 777:FWLIB/src/stm32f4xx_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 807              		.loc 1 777 0
 808 002c 2143     		orrs	r1, r1, r4
 809 002e 0A43     		orrs	r2, r2, r1
 776:FWLIB/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 810              		.loc 1 776 0
 811 0030 2A43     		orrs	r2, r2, r5
 812 0032 1343     		orrs	r3, r3, r2
 813              	.LVL80:
 814 0034 43F40063 		orr	r3, r3, #2048
 815              	.LVL81:
 779:FWLIB/src/stm32f4xx_spi.c ****  
 780:FWLIB/src/stm32f4xx_spi.c ****   /* Write to SPIx I2SCFGR */  
ARM GAS  /tmp/ccgZHmNt.s 			page 29


 781:FWLIB/src/stm32f4xx_spi.c ****   I2Sxext->I2SCFGR = tmpreg;
 816              		.loc 1 781 0
 817 0038 8383     		strh	r3, [r0, #28]	@ movhi
 782:FWLIB/src/stm32f4xx_spi.c **** }
 818              		.loc 1 782 0
 819 003a 30BC     		pop	{r4, r5}
 820              	.LCFI4:
 821              		.cfi_remember_state
 822              		.cfi_restore 5
 823              		.cfi_restore 4
 824              		.cfi_def_cfa_offset 0
 825              	.LVL82:
 826 003c 7047     		bx	lr
 827              	.LVL83:
 828              	.L66:
 829              	.LCFI5:
 830              		.cfi_restore_state
 764:FWLIB/src/stm32f4xx_spi.c ****   }
 831              		.loc 1 764 0
 832 003e 4FF48075 		mov	r5, #256
 833 0042 F0E7     		b	.L62
 834              	.L63:
 835 0044 4FF48075 		mov	r5, #256
 836 0048 EDE7     		b	.L62
 837              		.cfi_endproc
 838              	.LFE135:
 840              		.section	.text.SPI_I2S_ReceiveData,"ax",%progbits
 841              		.align	1
 842              		.global	SPI_I2S_ReceiveData
 843              		.syntax unified
 844              		.thumb
 845              		.thumb_func
 846              		.fpu fpv4-sp-d16
 848              	SPI_I2S_ReceiveData:
 849              	.LFB136:
 783:FWLIB/src/stm32f4xx_spi.c **** 
 784:FWLIB/src/stm32f4xx_spi.c **** /**
 785:FWLIB/src/stm32f4xx_spi.c ****   * @}
 786:FWLIB/src/stm32f4xx_spi.c ****   */
 787:FWLIB/src/stm32f4xx_spi.c **** 
 788:FWLIB/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group2 Data transfers functions
 789:FWLIB/src/stm32f4xx_spi.c ****  *  @brief   Data transfers functions
 790:FWLIB/src/stm32f4xx_spi.c ****  *
 791:FWLIB/src/stm32f4xx_spi.c **** @verbatim   
 792:FWLIB/src/stm32f4xx_spi.c ****  ===============================================================================
 793:FWLIB/src/stm32f4xx_spi.c ****                       ##### Data transfers functions #####
 794:FWLIB/src/stm32f4xx_spi.c ****  ===============================================================================  
 795:FWLIB/src/stm32f4xx_spi.c **** 
 796:FWLIB/src/stm32f4xx_spi.c ****  [..] This section provides a set of functions allowing to manage the SPI data 
 797:FWLIB/src/stm32f4xx_spi.c ****       transfers. In reception, data are received and then stored into an internal 
 798:FWLIB/src/stm32f4xx_spi.c ****       Rx buffer while. In transmission, data are first stored into an internal Tx 
 799:FWLIB/src/stm32f4xx_spi.c ****       buffer before being transmitted.
 800:FWLIB/src/stm32f4xx_spi.c **** 
 801:FWLIB/src/stm32f4xx_spi.c ****  [..] The read access of the SPI_DR register can be done using the SPI_I2S_ReceiveData()
 802:FWLIB/src/stm32f4xx_spi.c ****       function and returns the Rx buffered value. Whereas a write access to the SPI_DR 
 803:FWLIB/src/stm32f4xx_spi.c ****       can be done using SPI_I2S_SendData() function and stores the written data into 
 804:FWLIB/src/stm32f4xx_spi.c ****       Tx buffer.
ARM GAS  /tmp/ccgZHmNt.s 			page 30


 805:FWLIB/src/stm32f4xx_spi.c **** 
 806:FWLIB/src/stm32f4xx_spi.c **** @endverbatim
 807:FWLIB/src/stm32f4xx_spi.c ****   * @{
 808:FWLIB/src/stm32f4xx_spi.c ****   */
 809:FWLIB/src/stm32f4xx_spi.c **** 
 810:FWLIB/src/stm32f4xx_spi.c **** /**
 811:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Returns the most recent received data by the SPIx/I2Sx peripheral. 
 812:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
 813:FWLIB/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
 814:FWLIB/src/stm32f4xx_spi.c ****   * @retval The value of the received data.
 815:FWLIB/src/stm32f4xx_spi.c ****   */
 816:FWLIB/src/stm32f4xx_spi.c **** uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
 817:FWLIB/src/stm32f4xx_spi.c **** {
 850              		.loc 1 817 0
 851              		.cfi_startproc
 852              		@ args = 0, pretend = 0, frame = 0
 853              		@ frame_needed = 0, uses_anonymous_args = 0
 854              		@ link register save eliminated.
 855              	.LVL84:
 818:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 819:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 820:FWLIB/src/stm32f4xx_spi.c ****   
 821:FWLIB/src/stm32f4xx_spi.c ****   /* Return the data in the DR register */
 822:FWLIB/src/stm32f4xx_spi.c ****   return SPIx->DR;
 856              		.loc 1 822 0
 857 0000 8089     		ldrh	r0, [r0, #12]
 858              	.LVL85:
 823:FWLIB/src/stm32f4xx_spi.c **** }
 859              		.loc 1 823 0
 860 0002 80B2     		uxth	r0, r0
 861 0004 7047     		bx	lr
 862              		.cfi_endproc
 863              	.LFE136:
 865              		.section	.text.SPI_I2S_SendData,"ax",%progbits
 866              		.align	1
 867              		.global	SPI_I2S_SendData
 868              		.syntax unified
 869              		.thumb
 870              		.thumb_func
 871              		.fpu fpv4-sp-d16
 873              	SPI_I2S_SendData:
 874              	.LFB137:
 824:FWLIB/src/stm32f4xx_spi.c **** 
 825:FWLIB/src/stm32f4xx_spi.c **** /**
 826:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Transmits a Data through the SPIx/I2Sx peripheral.
 827:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
 828:FWLIB/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
 829:FWLIB/src/stm32f4xx_spi.c ****   * @param  Data: Data to be transmitted.
 830:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 831:FWLIB/src/stm32f4xx_spi.c ****   */
 832:FWLIB/src/stm32f4xx_spi.c **** void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
 833:FWLIB/src/stm32f4xx_spi.c **** {
 875              		.loc 1 833 0
 876              		.cfi_startproc
 877              		@ args = 0, pretend = 0, frame = 0
 878              		@ frame_needed = 0, uses_anonymous_args = 0
 879              		@ link register save eliminated.
ARM GAS  /tmp/ccgZHmNt.s 			page 31


 880              	.LVL86:
 834:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 835:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 836:FWLIB/src/stm32f4xx_spi.c ****   
 837:FWLIB/src/stm32f4xx_spi.c ****   /* Write in the DR register the data to be sent */
 838:FWLIB/src/stm32f4xx_spi.c ****   SPIx->DR = Data;
 881              		.loc 1 838 0
 882 0000 8181     		strh	r1, [r0, #12]	@ movhi
 883 0002 7047     		bx	lr
 884              		.cfi_endproc
 885              	.LFE137:
 887              		.section	.text.SPI_CalculateCRC,"ax",%progbits
 888              		.align	1
 889              		.global	SPI_CalculateCRC
 890              		.syntax unified
 891              		.thumb
 892              		.thumb_func
 893              		.fpu fpv4-sp-d16
 895              	SPI_CalculateCRC:
 896              	.LFB138:
 839:FWLIB/src/stm32f4xx_spi.c **** }
 840:FWLIB/src/stm32f4xx_spi.c **** 
 841:FWLIB/src/stm32f4xx_spi.c **** /**
 842:FWLIB/src/stm32f4xx_spi.c ****   * @}
 843:FWLIB/src/stm32f4xx_spi.c ****   */
 844:FWLIB/src/stm32f4xx_spi.c **** 
 845:FWLIB/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group3 Hardware CRC Calculation functions
 846:FWLIB/src/stm32f4xx_spi.c ****  *  @brief   Hardware CRC Calculation functions
 847:FWLIB/src/stm32f4xx_spi.c ****  *
 848:FWLIB/src/stm32f4xx_spi.c **** @verbatim   
 849:FWLIB/src/stm32f4xx_spi.c ****  ===============================================================================
 850:FWLIB/src/stm32f4xx_spi.c ****                  ##### Hardware CRC Calculation functions #####
 851:FWLIB/src/stm32f4xx_spi.c ****  ===============================================================================  
 852:FWLIB/src/stm32f4xx_spi.c **** 
 853:FWLIB/src/stm32f4xx_spi.c ****  [..] This section provides a set of functions allowing to manage the SPI CRC hardware 
 854:FWLIB/src/stm32f4xx_spi.c ****       calculation
 855:FWLIB/src/stm32f4xx_spi.c **** 
 856:FWLIB/src/stm32f4xx_spi.c ****  [..] SPI communication using CRC is possible through the following procedure:
 857:FWLIB/src/stm32f4xx_spi.c ****    (#) Program the Data direction, Polarity, Phase, First Data, Baud Rate Prescaler, 
 858:FWLIB/src/stm32f4xx_spi.c ****        Slave Management, Peripheral Mode and CRC Polynomial values using the SPI_Init()
 859:FWLIB/src/stm32f4xx_spi.c ****        function.
 860:FWLIB/src/stm32f4xx_spi.c ****    (#) Enable the CRC calculation using the SPI_CalculateCRC() function.
 861:FWLIB/src/stm32f4xx_spi.c ****    (#) Enable the SPI using the SPI_Cmd() function
 862:FWLIB/src/stm32f4xx_spi.c ****    (#) Before writing the last data to the TX buffer, set the CRCNext bit using the 
 863:FWLIB/src/stm32f4xx_spi.c ****        SPI_TransmitCRC() function to indicate that after transmission of the last 
 864:FWLIB/src/stm32f4xx_spi.c ****        data, the CRC should be transmitted.
 865:FWLIB/src/stm32f4xx_spi.c ****    (#) After transmitting the last data, the SPI transmits the CRC. The SPI_CR1_CRCNEXT
 866:FWLIB/src/stm32f4xx_spi.c ****         bit is reset. The CRC is also received and compared against the SPI_RXCRCR 
 867:FWLIB/src/stm32f4xx_spi.c ****         value. 
 868:FWLIB/src/stm32f4xx_spi.c ****         If the value does not match, the SPI_FLAG_CRCERR flag is set and an interrupt
 869:FWLIB/src/stm32f4xx_spi.c ****         can be generated when the SPI_I2S_IT_ERR interrupt is enabled.
 870:FWLIB/src/stm32f4xx_spi.c **** 
 871:FWLIB/src/stm32f4xx_spi.c ****  [..]
 872:FWLIB/src/stm32f4xx_spi.c ****    (@) It is advised not to read the calculated CRC values during the communication.
 873:FWLIB/src/stm32f4xx_spi.c **** 
 874:FWLIB/src/stm32f4xx_spi.c ****    (@) When the SPI is in slave mode, be careful to enable CRC calculation only 
 875:FWLIB/src/stm32f4xx_spi.c ****        when the clock is stable, that is, when the clock is in the steady state. 
ARM GAS  /tmp/ccgZHmNt.s 			page 32


 876:FWLIB/src/stm32f4xx_spi.c ****        If not, a wrong CRC calculation may be done. In fact, the CRC is sensitive 
 877:FWLIB/src/stm32f4xx_spi.c ****        to the SCK slave input clock as soon as CRCEN is set, and this, whatever 
 878:FWLIB/src/stm32f4xx_spi.c ****        the value of the SPE bit.
 879:FWLIB/src/stm32f4xx_spi.c **** 
 880:FWLIB/src/stm32f4xx_spi.c ****    (@) With high bitrate frequencies, be careful when transmitting the CRC.
 881:FWLIB/src/stm32f4xx_spi.c ****        As the number of used CPU cycles has to be as low as possible in the CRC 
 882:FWLIB/src/stm32f4xx_spi.c ****        transfer phase, it is forbidden to call software functions in the CRC 
 883:FWLIB/src/stm32f4xx_spi.c ****        transmission sequence to avoid errors in the last data and CRC reception. 
 884:FWLIB/src/stm32f4xx_spi.c ****        In fact, CRCNEXT bit has to be written before the end of the transmission/reception 
 885:FWLIB/src/stm32f4xx_spi.c ****        of the last data.
 886:FWLIB/src/stm32f4xx_spi.c **** 
 887:FWLIB/src/stm32f4xx_spi.c ****    (@) For high bit rate frequencies, it is advised to use the DMA mode to avoid the
 888:FWLIB/src/stm32f4xx_spi.c ****        degradation of the SPI speed performance due to CPU accesses impacting the 
 889:FWLIB/src/stm32f4xx_spi.c ****        SPI bandwidth.
 890:FWLIB/src/stm32f4xx_spi.c **** 
 891:FWLIB/src/stm32f4xx_spi.c ****    (@) When the STM32F4xx is configured as slave and the NSS hardware mode is 
 892:FWLIB/src/stm32f4xx_spi.c ****        used, the NSS pin needs to be kept low between the data phase and the CRC 
 893:FWLIB/src/stm32f4xx_spi.c ****        phase.
 894:FWLIB/src/stm32f4xx_spi.c **** 
 895:FWLIB/src/stm32f4xx_spi.c ****    (@) When the SPI is configured in slave mode with the CRC feature enabled, CRC
 896:FWLIB/src/stm32f4xx_spi.c ****        calculation takes place even if a high level is applied on the NSS pin. 
 897:FWLIB/src/stm32f4xx_spi.c ****        This may happen for example in case of a multi-slave environment where the 
 898:FWLIB/src/stm32f4xx_spi.c ****        communication master addresses slaves alternately.
 899:FWLIB/src/stm32f4xx_spi.c **** 
 900:FWLIB/src/stm32f4xx_spi.c ****    (@) Between a slave de-selection (high level on NSS) and a new slave selection 
 901:FWLIB/src/stm32f4xx_spi.c ****        (low level on NSS), the CRC value should be cleared on both master and slave
 902:FWLIB/src/stm32f4xx_spi.c ****        sides in order to resynchronize the master and slave for their respective 
 903:FWLIB/src/stm32f4xx_spi.c ****        CRC calculation.
 904:FWLIB/src/stm32f4xx_spi.c **** 
 905:FWLIB/src/stm32f4xx_spi.c ****    (@) To clear the CRC, follow the procedure below:
 906:FWLIB/src/stm32f4xx_spi.c ****        (#@) Disable SPI using the SPI_Cmd() function
 907:FWLIB/src/stm32f4xx_spi.c ****        (#@) Disable the CRC calculation using the SPI_CalculateCRC() function.
 908:FWLIB/src/stm32f4xx_spi.c ****        (#@) Enable the CRC calculation using the SPI_CalculateCRC() function.
 909:FWLIB/src/stm32f4xx_spi.c ****        (#@) Enable SPI using the SPI_Cmd() function.
 910:FWLIB/src/stm32f4xx_spi.c **** 
 911:FWLIB/src/stm32f4xx_spi.c **** @endverbatim
 912:FWLIB/src/stm32f4xx_spi.c ****   * @{
 913:FWLIB/src/stm32f4xx_spi.c ****   */
 914:FWLIB/src/stm32f4xx_spi.c **** 
 915:FWLIB/src/stm32f4xx_spi.c **** /**
 916:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the CRC value calculation of the transferred bytes.
 917:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 918:FWLIB/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx CRC value calculation.
 919:FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 920:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 921:FWLIB/src/stm32f4xx_spi.c ****   */
 922:FWLIB/src/stm32f4xx_spi.c **** void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
 923:FWLIB/src/stm32f4xx_spi.c **** {
 897              		.loc 1 923 0
 898              		.cfi_startproc
 899              		@ args = 0, pretend = 0, frame = 0
 900              		@ frame_needed = 0, uses_anonymous_args = 0
 901              		@ link register save eliminated.
 902              	.LVL87:
 924:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 925:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 926:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
ARM GAS  /tmp/ccgZHmNt.s 			page 33


 927:FWLIB/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 903              		.loc 1 927 0
 904 0000 31B9     		cbnz	r1, .L72
 928:FWLIB/src/stm32f4xx_spi.c ****   {
 929:FWLIB/src/stm32f4xx_spi.c ****     /* Enable the selected SPI CRC calculation */
 930:FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_CR1_CRCEN;
 931:FWLIB/src/stm32f4xx_spi.c ****   }
 932:FWLIB/src/stm32f4xx_spi.c ****   else
 933:FWLIB/src/stm32f4xx_spi.c ****   {
 934:FWLIB/src/stm32f4xx_spi.c ****     /* Disable the selected SPI CRC calculation */
 935:FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 905              		.loc 1 935 0
 906 0002 0388     		ldrh	r3, [r0]
 907 0004 9BB2     		uxth	r3, r3
 908 0006 23F40053 		bic	r3, r3, #8192
 909 000a 9BB2     		uxth	r3, r3
 910 000c 0380     		strh	r3, [r0]	@ movhi
 911 000e 7047     		bx	lr
 912              	.L72:
 930:FWLIB/src/stm32f4xx_spi.c ****   }
 913              		.loc 1 930 0
 914 0010 0388     		ldrh	r3, [r0]
 915 0012 9BB2     		uxth	r3, r3
 916 0014 43F40053 		orr	r3, r3, #8192
 917 0018 0380     		strh	r3, [r0]	@ movhi
 918 001a 7047     		bx	lr
 919              		.cfi_endproc
 920              	.LFE138:
 922              		.section	.text.SPI_TransmitCRC,"ax",%progbits
 923              		.align	1
 924              		.global	SPI_TransmitCRC
 925              		.syntax unified
 926              		.thumb
 927              		.thumb_func
 928              		.fpu fpv4-sp-d16
 930              	SPI_TransmitCRC:
 931              	.LFB139:
 936:FWLIB/src/stm32f4xx_spi.c ****   }
 937:FWLIB/src/stm32f4xx_spi.c **** }
 938:FWLIB/src/stm32f4xx_spi.c **** 
 939:FWLIB/src/stm32f4xx_spi.c **** /**
 940:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Transmit the SPIx CRC value.
 941:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 942:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
 943:FWLIB/src/stm32f4xx_spi.c ****   */
 944:FWLIB/src/stm32f4xx_spi.c **** void SPI_TransmitCRC(SPI_TypeDef* SPIx)
 945:FWLIB/src/stm32f4xx_spi.c **** {
 932              		.loc 1 945 0
 933              		.cfi_startproc
 934              		@ args = 0, pretend = 0, frame = 0
 935              		@ frame_needed = 0, uses_anonymous_args = 0
 936              		@ link register save eliminated.
 937              	.LVL88:
 946:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 947:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 948:FWLIB/src/stm32f4xx_spi.c ****   
 949:FWLIB/src/stm32f4xx_spi.c ****   /* Enable the selected SPI CRC transmission */
ARM GAS  /tmp/ccgZHmNt.s 			page 34


 950:FWLIB/src/stm32f4xx_spi.c ****   SPIx->CR1 |= SPI_CR1_CRCNEXT;
 938              		.loc 1 950 0
 939 0000 0388     		ldrh	r3, [r0]
 940 0002 9BB2     		uxth	r3, r3
 941 0004 43F48053 		orr	r3, r3, #4096
 942 0008 0380     		strh	r3, [r0]	@ movhi
 943 000a 7047     		bx	lr
 944              		.cfi_endproc
 945              	.LFE139:
 947              		.section	.text.SPI_GetCRC,"ax",%progbits
 948              		.align	1
 949              		.global	SPI_GetCRC
 950              		.syntax unified
 951              		.thumb
 952              		.thumb_func
 953              		.fpu fpv4-sp-d16
 955              	SPI_GetCRC:
 956              	.LFB140:
 951:FWLIB/src/stm32f4xx_spi.c **** }
 952:FWLIB/src/stm32f4xx_spi.c **** 
 953:FWLIB/src/stm32f4xx_spi.c **** /**
 954:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Returns the transmit or the receive CRC register value for the specified SPI.
 955:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 956:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPI_CRC: specifies the CRC register to be read.
 957:FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 958:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_CRC_Tx: Selects Tx CRC register
 959:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_CRC_Rx: Selects Rx CRC register
 960:FWLIB/src/stm32f4xx_spi.c ****   * @retval The selected CRC register value..
 961:FWLIB/src/stm32f4xx_spi.c ****   */
 962:FWLIB/src/stm32f4xx_spi.c **** uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
 963:FWLIB/src/stm32f4xx_spi.c **** {
 957              		.loc 1 963 0
 958              		.cfi_startproc
 959              		@ args = 0, pretend = 0, frame = 0
 960              		@ frame_needed = 0, uses_anonymous_args = 0
 961              		@ link register save eliminated.
 962              	.LVL89:
 964:FWLIB/src/stm32f4xx_spi.c ****   uint16_t crcreg = 0;
 965:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 966:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 967:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CRC(SPI_CRC));
 968:FWLIB/src/stm32f4xx_spi.c ****   if (SPI_CRC != SPI_CRC_Rx)
 963              		.loc 1 968 0
 964 0000 0129     		cmp	r1, #1
 965 0002 02D0     		beq	.L75
 969:FWLIB/src/stm32f4xx_spi.c ****   {
 970:FWLIB/src/stm32f4xx_spi.c ****     /* Get the Tx CRC register */
 971:FWLIB/src/stm32f4xx_spi.c ****     crcreg = SPIx->TXCRCR;
 966              		.loc 1 971 0
 967 0004 008B     		ldrh	r0, [r0, #24]
 968              	.LVL90:
 969 0006 80B2     		uxth	r0, r0
 970              	.LVL91:
 971 0008 7047     		bx	lr
 972              	.LVL92:
 973              	.L75:
 972:FWLIB/src/stm32f4xx_spi.c ****   }
ARM GAS  /tmp/ccgZHmNt.s 			page 35


 973:FWLIB/src/stm32f4xx_spi.c ****   else
 974:FWLIB/src/stm32f4xx_spi.c ****   {
 975:FWLIB/src/stm32f4xx_spi.c ****     /* Get the Rx CRC register */
 976:FWLIB/src/stm32f4xx_spi.c ****     crcreg = SPIx->RXCRCR;
 974              		.loc 1 976 0
 975 000a 808A     		ldrh	r0, [r0, #20]
 976              	.LVL93:
 977 000c 80B2     		uxth	r0, r0
 978              	.LVL94:
 977:FWLIB/src/stm32f4xx_spi.c ****   }
 978:FWLIB/src/stm32f4xx_spi.c ****   /* Return the selected CRC register */
 979:FWLIB/src/stm32f4xx_spi.c ****   return crcreg;
 980:FWLIB/src/stm32f4xx_spi.c **** }
 979              		.loc 1 980 0
 980 000e 7047     		bx	lr
 981              		.cfi_endproc
 982              	.LFE140:
 984              		.section	.text.SPI_GetCRCPolynomial,"ax",%progbits
 985              		.align	1
 986              		.global	SPI_GetCRCPolynomial
 987              		.syntax unified
 988              		.thumb
 989              		.thumb_func
 990              		.fpu fpv4-sp-d16
 992              	SPI_GetCRCPolynomial:
 993              	.LFB141:
 981:FWLIB/src/stm32f4xx_spi.c **** 
 982:FWLIB/src/stm32f4xx_spi.c **** /**
 983:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Returns the CRC Polynomial register value for the specified SPI.
 984:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 985:FWLIB/src/stm32f4xx_spi.c ****   * @retval The CRC Polynomial register value.
 986:FWLIB/src/stm32f4xx_spi.c ****   */
 987:FWLIB/src/stm32f4xx_spi.c **** uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
 988:FWLIB/src/stm32f4xx_spi.c **** {
 994              		.loc 1 988 0
 995              		.cfi_startproc
 996              		@ args = 0, pretend = 0, frame = 0
 997              		@ frame_needed = 0, uses_anonymous_args = 0
 998              		@ link register save eliminated.
 999              	.LVL95:
 989:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
 990:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 991:FWLIB/src/stm32f4xx_spi.c ****   
 992:FWLIB/src/stm32f4xx_spi.c ****   /* Return the CRC polynomial register */
 993:FWLIB/src/stm32f4xx_spi.c ****   return SPIx->CRCPR;
 1000              		.loc 1 993 0
 1001 0000 008A     		ldrh	r0, [r0, #16]
 1002              	.LVL96:
 994:FWLIB/src/stm32f4xx_spi.c **** }
 1003              		.loc 1 994 0
 1004 0002 80B2     		uxth	r0, r0
 1005 0004 7047     		bx	lr
 1006              		.cfi_endproc
 1007              	.LFE141:
 1009              		.section	.text.SPI_I2S_DMACmd,"ax",%progbits
 1010              		.align	1
 1011              		.global	SPI_I2S_DMACmd
ARM GAS  /tmp/ccgZHmNt.s 			page 36


 1012              		.syntax unified
 1013              		.thumb
 1014              		.thumb_func
 1015              		.fpu fpv4-sp-d16
 1017              	SPI_I2S_DMACmd:
 1018              	.LFB142:
 995:FWLIB/src/stm32f4xx_spi.c **** 
 996:FWLIB/src/stm32f4xx_spi.c **** /**
 997:FWLIB/src/stm32f4xx_spi.c ****   * @}
 998:FWLIB/src/stm32f4xx_spi.c ****   */
 999:FWLIB/src/stm32f4xx_spi.c **** 
1000:FWLIB/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group4 DMA transfers management functions
1001:FWLIB/src/stm32f4xx_spi.c ****  *  @brief   DMA transfers management functions
1002:FWLIB/src/stm32f4xx_spi.c ****   *
1003:FWLIB/src/stm32f4xx_spi.c **** @verbatim   
1004:FWLIB/src/stm32f4xx_spi.c ****  ===============================================================================
1005:FWLIB/src/stm32f4xx_spi.c ****                    ##### DMA transfers management functions #####
1006:FWLIB/src/stm32f4xx_spi.c ****  ===============================================================================  
1007:FWLIB/src/stm32f4xx_spi.c **** 
1008:FWLIB/src/stm32f4xx_spi.c **** @endverbatim
1009:FWLIB/src/stm32f4xx_spi.c ****   * @{
1010:FWLIB/src/stm32f4xx_spi.c ****   */
1011:FWLIB/src/stm32f4xx_spi.c **** 
1012:FWLIB/src/stm32f4xx_spi.c **** /**
1013:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SPIx/I2Sx DMA interface.
1014:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
1015:FWLIB/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1016:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_DMAReq: specifies the SPI DMA transfer request to be enabled or disabled. 
1017:FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be any combination of the following values:
1018:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_DMAReq_Tx: Tx buffer DMA transfer request
1019:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_DMAReq_Rx: Rx buffer DMA transfer request
1020:FWLIB/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the selected SPI DMA transfer request.
1021:FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
1022:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
1023:FWLIB/src/stm32f4xx_spi.c ****   */
1024:FWLIB/src/stm32f4xx_spi.c **** void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
1025:FWLIB/src/stm32f4xx_spi.c **** {
 1019              		.loc 1 1025 0
 1020              		.cfi_startproc
 1021              		@ args = 0, pretend = 0, frame = 0
 1022              		@ frame_needed = 0, uses_anonymous_args = 0
 1023              		@ link register save eliminated.
 1024              	.LVL97:
1026:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
1027:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1028:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1029:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
1030:FWLIB/src/stm32f4xx_spi.c **** 
1031:FWLIB/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 1025              		.loc 1 1031 0
 1026 0000 2AB9     		cbnz	r2, .L81
1032:FWLIB/src/stm32f4xx_spi.c ****   {
1033:FWLIB/src/stm32f4xx_spi.c ****     /* Enable the selected SPI DMA requests */
1034:FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR2 |= SPI_I2S_DMAReq;
1035:FWLIB/src/stm32f4xx_spi.c ****   }
1036:FWLIB/src/stm32f4xx_spi.c ****   else
1037:FWLIB/src/stm32f4xx_spi.c ****   {
ARM GAS  /tmp/ccgZHmNt.s 			page 37


1038:FWLIB/src/stm32f4xx_spi.c ****     /* Disable the selected SPI DMA requests */
1039:FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 1027              		.loc 1 1039 0
 1028 0002 8388     		ldrh	r3, [r0, #4]
 1029 0004 C943     		mvns	r1, r1
 1030              	.LVL98:
 1031 0006 89B2     		uxth	r1, r1
 1032 0008 1940     		ands	r1, r1, r3
 1033 000a 8180     		strh	r1, [r0, #4]	@ movhi
 1034 000c 7047     		bx	lr
 1035              	.LVL99:
 1036              	.L81:
1034:FWLIB/src/stm32f4xx_spi.c ****   }
 1037              		.loc 1 1034 0
 1038 000e 8388     		ldrh	r3, [r0, #4]
 1039 0010 9BB2     		uxth	r3, r3
 1040 0012 1943     		orrs	r1, r1, r3
 1041              	.LVL100:
 1042 0014 8180     		strh	r1, [r0, #4]	@ movhi
 1043 0016 7047     		bx	lr
 1044              		.cfi_endproc
 1045              	.LFE142:
 1047              		.section	.text.SPI_I2S_ITConfig,"ax",%progbits
 1048              		.align	1
 1049              		.global	SPI_I2S_ITConfig
 1050              		.syntax unified
 1051              		.thumb
 1052              		.thumb_func
 1053              		.fpu fpv4-sp-d16
 1055              	SPI_I2S_ITConfig:
 1056              	.LFB143:
1040:FWLIB/src/stm32f4xx_spi.c ****   }
1041:FWLIB/src/stm32f4xx_spi.c **** }
1042:FWLIB/src/stm32f4xx_spi.c **** 
1043:FWLIB/src/stm32f4xx_spi.c **** /**
1044:FWLIB/src/stm32f4xx_spi.c ****   * @}
1045:FWLIB/src/stm32f4xx_spi.c ****   */
1046:FWLIB/src/stm32f4xx_spi.c **** 
1047:FWLIB/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group5 Interrupts and flags management functions
1048:FWLIB/src/stm32f4xx_spi.c ****  *  @brief   Interrupts and flags management functions
1049:FWLIB/src/stm32f4xx_spi.c ****   *
1050:FWLIB/src/stm32f4xx_spi.c **** @verbatim   
1051:FWLIB/src/stm32f4xx_spi.c ****  ===============================================================================
1052:FWLIB/src/stm32f4xx_spi.c ****             ##### Interrupts and flags management functions #####
1053:FWLIB/src/stm32f4xx_spi.c ****  ===============================================================================  
1054:FWLIB/src/stm32f4xx_spi.c ****  
1055:FWLIB/src/stm32f4xx_spi.c ****  [..] This section provides a set of functions allowing to configure the SPI Interrupts 
1056:FWLIB/src/stm32f4xx_spi.c ****       sources and check or clear the flags or pending bits status.
1057:FWLIB/src/stm32f4xx_spi.c ****       The user should identify which mode will be used in his application to manage 
1058:FWLIB/src/stm32f4xx_spi.c ****       the communication: Polling mode, Interrupt mode or DMA mode. 
1059:FWLIB/src/stm32f4xx_spi.c ****     
1060:FWLIB/src/stm32f4xx_spi.c ****  *** Polling Mode ***
1061:FWLIB/src/stm32f4xx_spi.c ****  ====================
1062:FWLIB/src/stm32f4xx_spi.c **** [..] In Polling Mode, the SPI/I2S communication can be managed by 9 flags:
1063:FWLIB/src/stm32f4xx_spi.c ****   (#) SPI_I2S_FLAG_TXE : to indicate the status of the transmit buffer register
1064:FWLIB/src/stm32f4xx_spi.c ****   (#) SPI_I2S_FLAG_RXNE : to indicate the status of the receive buffer register
1065:FWLIB/src/stm32f4xx_spi.c ****   (#) SPI_I2S_FLAG_BSY : to indicate the state of the communication layer of the SPI.
ARM GAS  /tmp/ccgZHmNt.s 			page 38


1066:FWLIB/src/stm32f4xx_spi.c ****   (#) SPI_FLAG_CRCERR : to indicate if a CRC Calculation error occur              
1067:FWLIB/src/stm32f4xx_spi.c ****   (#) SPI_FLAG_MODF : to indicate if a Mode Fault error occur
1068:FWLIB/src/stm32f4xx_spi.c ****   (#) SPI_I2S_FLAG_OVR : to indicate if an Overrun error occur
1069:FWLIB/src/stm32f4xx_spi.c ****   (#) I2S_FLAG_TIFRFE: to indicate a Frame Format error occurs.
1070:FWLIB/src/stm32f4xx_spi.c ****   (#) I2S_FLAG_UDR: to indicate an Underrun error occurs.
1071:FWLIB/src/stm32f4xx_spi.c ****   (#) I2S_FLAG_CHSIDE: to indicate Channel Side.
1072:FWLIB/src/stm32f4xx_spi.c **** 
1073:FWLIB/src/stm32f4xx_spi.c ****   (@) Do not use the BSY flag to handle each data transmission or reception. It is
1074:FWLIB/src/stm32f4xx_spi.c ****       better to use the TXE and RXNE flags instead.
1075:FWLIB/src/stm32f4xx_spi.c **** 
1076:FWLIB/src/stm32f4xx_spi.c ****  [..] In this Mode it is advised to use the following functions:
1077:FWLIB/src/stm32f4xx_spi.c ****    (+) FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
1078:FWLIB/src/stm32f4xx_spi.c ****    (+) void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
1079:FWLIB/src/stm32f4xx_spi.c **** 
1080:FWLIB/src/stm32f4xx_spi.c ****  *** Interrupt Mode ***
1081:FWLIB/src/stm32f4xx_spi.c ****  ======================
1082:FWLIB/src/stm32f4xx_spi.c ****  [..] In Interrupt Mode, the SPI communication can be managed by 3 interrupt sources
1083:FWLIB/src/stm32f4xx_spi.c ****       and 7 pending bits: 
1084:FWLIB/src/stm32f4xx_spi.c ****    (+) Pending Bits:
1085:FWLIB/src/stm32f4xx_spi.c ****        (##) SPI_I2S_IT_TXE : to indicate the status of the transmit buffer register
1086:FWLIB/src/stm32f4xx_spi.c ****        (##) SPI_I2S_IT_RXNE : to indicate the status of the receive buffer register
1087:FWLIB/src/stm32f4xx_spi.c ****        (##) SPI_IT_CRCERR : to indicate if a CRC Calculation error occur (available in SPI mode onl
1088:FWLIB/src/stm32f4xx_spi.c ****        (##) SPI_IT_MODF : to indicate if a Mode Fault error occur (available in SPI mode only)
1089:FWLIB/src/stm32f4xx_spi.c ****        (##) SPI_I2S_IT_OVR : to indicate if an Overrun error occur
1090:FWLIB/src/stm32f4xx_spi.c ****        (##) I2S_IT_UDR : to indicate an Underrun Error occurs (available in I2S mode only).
1091:FWLIB/src/stm32f4xx_spi.c ****        (##) I2S_FLAG_TIFRFE : to indicate a Frame Format error occurs (available in TI mode only).
1092:FWLIB/src/stm32f4xx_spi.c **** 
1093:FWLIB/src/stm32f4xx_spi.c ****    (+) Interrupt Source:
1094:FWLIB/src/stm32f4xx_spi.c ****        (##) SPI_I2S_IT_TXE: specifies the interrupt source for the Tx buffer empty 
1095:FWLIB/src/stm32f4xx_spi.c ****             interrupt.  
1096:FWLIB/src/stm32f4xx_spi.c ****        (##) SPI_I2S_IT_RXNE : specifies the interrupt source for the Rx buffer not 
1097:FWLIB/src/stm32f4xx_spi.c ****             empty interrupt.
1098:FWLIB/src/stm32f4xx_spi.c ****        (##) SPI_I2S_IT_ERR : specifies the interrupt source for the errors interrupt.
1099:FWLIB/src/stm32f4xx_spi.c **** 
1100:FWLIB/src/stm32f4xx_spi.c ****  [..] In this Mode it is advised to use the following functions:
1101:FWLIB/src/stm32f4xx_spi.c ****    (+) void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState);
1102:FWLIB/src/stm32f4xx_spi.c ****    (+) ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT);
1103:FWLIB/src/stm32f4xx_spi.c ****    (+) void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT);
1104:FWLIB/src/stm32f4xx_spi.c **** 
1105:FWLIB/src/stm32f4xx_spi.c ****  *** DMA Mode ***
1106:FWLIB/src/stm32f4xx_spi.c ****  ================
1107:FWLIB/src/stm32f4xx_spi.c ****  [..] In DMA Mode, the SPI communication can be managed by 2 DMA Channel requests:
1108:FWLIB/src/stm32f4xx_spi.c ****    (#) SPI_I2S_DMAReq_Tx: specifies the Tx buffer DMA transfer request
1109:FWLIB/src/stm32f4xx_spi.c ****    (#) SPI_I2S_DMAReq_Rx: specifies the Rx buffer DMA transfer request
1110:FWLIB/src/stm32f4xx_spi.c **** 
1111:FWLIB/src/stm32f4xx_spi.c ****  [..] In this Mode it is advised to use the following function:
1112:FWLIB/src/stm32f4xx_spi.c ****    (+) void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState 
1113:FWLIB/src/stm32f4xx_spi.c ****        NewState);
1114:FWLIB/src/stm32f4xx_spi.c **** 
1115:FWLIB/src/stm32f4xx_spi.c **** @endverbatim
1116:FWLIB/src/stm32f4xx_spi.c ****   * @{
1117:FWLIB/src/stm32f4xx_spi.c ****   */
1118:FWLIB/src/stm32f4xx_spi.c **** 
1119:FWLIB/src/stm32f4xx_spi.c **** /**
1120:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI/I2S interrupts.
1121:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
1122:FWLIB/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
ARM GAS  /tmp/ccgZHmNt.s 			page 39


1123:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt source to be enabled or disabled. 
1124:FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1125:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TXE: Tx buffer empty interrupt mask
1126:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_RXNE: Rx buffer not empty interrupt mask
1127:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_ERR: Error interrupt mask
1128:FWLIB/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the specified SPI interrupt.
1129:FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
1130:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
1131:FWLIB/src/stm32f4xx_spi.c ****   */
1132:FWLIB/src/stm32f4xx_spi.c **** void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
1133:FWLIB/src/stm32f4xx_spi.c **** {
 1057              		.loc 1 1133 0
 1058              		.cfi_startproc
 1059              		@ args = 0, pretend = 0, frame = 0
 1060              		@ frame_needed = 0, uses_anonymous_args = 0
 1061              		@ link register save eliminated.
 1062              	.LVL101:
1134:FWLIB/src/stm32f4xx_spi.c ****   uint16_t itpos = 0, itmask = 0 ;
1135:FWLIB/src/stm32f4xx_spi.c ****   
1136:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
1137:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1138:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1139:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
1140:FWLIB/src/stm32f4xx_spi.c **** 
1141:FWLIB/src/stm32f4xx_spi.c ****   /* Get the SPI IT index */
1142:FWLIB/src/stm32f4xx_spi.c ****   itpos = SPI_I2S_IT >> 4;
 1063              		.loc 1 1142 0
 1064 0000 0B09     		lsrs	r3, r1, #4
 1065              	.LVL102:
1143:FWLIB/src/stm32f4xx_spi.c **** 
1144:FWLIB/src/stm32f4xx_spi.c ****   /* Set the IT mask */
1145:FWLIB/src/stm32f4xx_spi.c ****   itmask = (uint16_t)1 << (uint16_t)itpos;
 1066              		.loc 1 1145 0
 1067 0002 0121     		movs	r1, #1
 1068              	.LVL103:
 1069 0004 9940     		lsls	r1, r1, r3
 1070 0006 89B2     		uxth	r1, r1
 1071              	.LVL104:
1146:FWLIB/src/stm32f4xx_spi.c **** 
1147:FWLIB/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 1072              		.loc 1 1147 0
 1073 0008 2AB9     		cbnz	r2, .L85
1148:FWLIB/src/stm32f4xx_spi.c ****   {
1149:FWLIB/src/stm32f4xx_spi.c ****     /* Enable the selected SPI interrupt */
1150:FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR2 |= itmask;
1151:FWLIB/src/stm32f4xx_spi.c ****   }
1152:FWLIB/src/stm32f4xx_spi.c ****   else
1153:FWLIB/src/stm32f4xx_spi.c ****   {
1154:FWLIB/src/stm32f4xx_spi.c ****     /* Disable the selected SPI interrupt */
1155:FWLIB/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~itmask;
 1074              		.loc 1 1155 0
 1075 000a 8388     		ldrh	r3, [r0, #4]
 1076              	.LVL105:
 1077 000c C943     		mvns	r1, r1
 1078              	.LVL106:
 1079 000e 89B2     		uxth	r1, r1
 1080              	.LVL107:
ARM GAS  /tmp/ccgZHmNt.s 			page 40


 1081 0010 1940     		ands	r1, r1, r3
 1082 0012 8180     		strh	r1, [r0, #4]	@ movhi
 1083 0014 7047     		bx	lr
 1084              	.LVL108:
 1085              	.L85:
1150:FWLIB/src/stm32f4xx_spi.c ****   }
 1086              		.loc 1 1150 0
 1087 0016 8388     		ldrh	r3, [r0, #4]
 1088              	.LVL109:
 1089 0018 9BB2     		uxth	r3, r3
 1090 001a 1943     		orrs	r1, r1, r3
 1091              	.LVL110:
 1092 001c 8180     		strh	r1, [r0, #4]	@ movhi
 1093 001e 7047     		bx	lr
 1094              		.cfi_endproc
 1095              	.LFE143:
 1097              		.section	.text.SPI_I2S_GetFlagStatus,"ax",%progbits
 1098              		.align	1
 1099              		.global	SPI_I2S_GetFlagStatus
 1100              		.syntax unified
 1101              		.thumb
 1102              		.thumb_func
 1103              		.fpu fpv4-sp-d16
 1105              	SPI_I2S_GetFlagStatus:
 1106              	.LFB144:
1156:FWLIB/src/stm32f4xx_spi.c ****   }
1157:FWLIB/src/stm32f4xx_spi.c **** }
1158:FWLIB/src/stm32f4xx_spi.c **** 
1159:FWLIB/src/stm32f4xx_spi.c **** /**
1160:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Checks whether the specified SPIx/I2Sx flag is set or not.
1161:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
1162:FWLIB/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1163:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI flag to check. 
1164:FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1165:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_TXE: Transmit buffer empty flag.
1166:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_RXNE: Receive buffer not empty flag.
1167:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_BSY: Busy flag.
1168:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_OVR: Overrun flag.
1169:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_MODF: Mode Fault flag.
1170:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_CRCERR: CRC Error flag.
1171:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_TIFRFE: Format Error.
1172:FWLIB/src/stm32f4xx_spi.c ****   *            @arg I2S_FLAG_UDR: Underrun Error flag.
1173:FWLIB/src/stm32f4xx_spi.c ****   *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
1174:FWLIB/src/stm32f4xx_spi.c ****   * @retval The new state of SPI_I2S_FLAG (SET or RESET).
1175:FWLIB/src/stm32f4xx_spi.c ****   */
1176:FWLIB/src/stm32f4xx_spi.c **** FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
1177:FWLIB/src/stm32f4xx_spi.c **** {
 1107              		.loc 1 1177 0
 1108              		.cfi_startproc
 1109              		@ args = 0, pretend = 0, frame = 0
 1110              		@ frame_needed = 0, uses_anonymous_args = 0
 1111              		@ link register save eliminated.
 1112              	.LVL111:
1178:FWLIB/src/stm32f4xx_spi.c ****   FlagStatus bitstatus = RESET;
1179:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
1180:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1181:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
ARM GAS  /tmp/ccgZHmNt.s 			page 41


1182:FWLIB/src/stm32f4xx_spi.c ****   
1183:FWLIB/src/stm32f4xx_spi.c ****   /* Check the status of the specified SPI flag */
1184:FWLIB/src/stm32f4xx_spi.c ****   if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 1113              		.loc 1 1184 0
 1114 0000 0389     		ldrh	r3, [r0, #8]
 1115 0002 1942     		tst	r1, r3
 1116 0004 01D1     		bne	.L89
1185:FWLIB/src/stm32f4xx_spi.c ****   {
1186:FWLIB/src/stm32f4xx_spi.c ****     /* SPI_I2S_FLAG is set */
1187:FWLIB/src/stm32f4xx_spi.c ****     bitstatus = SET;
1188:FWLIB/src/stm32f4xx_spi.c ****   }
1189:FWLIB/src/stm32f4xx_spi.c ****   else
1190:FWLIB/src/stm32f4xx_spi.c ****   {
1191:FWLIB/src/stm32f4xx_spi.c ****     /* SPI_I2S_FLAG is reset */
1192:FWLIB/src/stm32f4xx_spi.c ****     bitstatus = RESET;
 1117              		.loc 1 1192 0
 1118 0006 0020     		movs	r0, #0
 1119              	.LVL112:
1193:FWLIB/src/stm32f4xx_spi.c ****   }
1194:FWLIB/src/stm32f4xx_spi.c ****   /* Return the SPI_I2S_FLAG status */
1195:FWLIB/src/stm32f4xx_spi.c ****   return  bitstatus;
1196:FWLIB/src/stm32f4xx_spi.c **** }
 1120              		.loc 1 1196 0
 1121 0008 7047     		bx	lr
 1122              	.LVL113:
 1123              	.L89:
1187:FWLIB/src/stm32f4xx_spi.c ****   }
 1124              		.loc 1 1187 0
 1125 000a 0120     		movs	r0, #1
 1126              	.LVL114:
 1127 000c 7047     		bx	lr
 1128              		.cfi_endproc
 1129              	.LFE144:
 1131              		.section	.text.SPI_I2S_ClearFlag,"ax",%progbits
 1132              		.align	1
 1133              		.global	SPI_I2S_ClearFlag
 1134              		.syntax unified
 1135              		.thumb
 1136              		.thumb_func
 1137              		.fpu fpv4-sp-d16
 1139              	SPI_I2S_ClearFlag:
 1140              	.LFB145:
1197:FWLIB/src/stm32f4xx_spi.c **** 
1198:FWLIB/src/stm32f4xx_spi.c **** /**
1199:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Clears the SPIx CRC Error (CRCERR) flag.
1200:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
1201:FWLIB/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1202:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI flag to clear. 
1203:FWLIB/src/stm32f4xx_spi.c ****   *          This function clears only CRCERR flag.
1204:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_CRCERR: CRC Error flag.  
1205:FWLIB/src/stm32f4xx_spi.c ****   *  
1206:FWLIB/src/stm32f4xx_spi.c ****   * @note   OVR (OverRun error) flag is cleared by software sequence: a read 
1207:FWLIB/src/stm32f4xx_spi.c ****   *          operation to SPI_DR register (SPI_I2S_ReceiveData()) followed by a read 
1208:FWLIB/src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetFlagStatus()).
1209:FWLIB/src/stm32f4xx_spi.c ****   * @note   UDR (UnderRun error) flag is cleared by a read operation to 
1210:FWLIB/src/stm32f4xx_spi.c ****   *          SPI_SR register (SPI_I2S_GetFlagStatus()).   
1211:FWLIB/src/stm32f4xx_spi.c ****   * @note   MODF (Mode Fault) flag is cleared by software sequence: a read/write 
ARM GAS  /tmp/ccgZHmNt.s 			page 42


1212:FWLIB/src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetFlagStatus()) followed by a 
1213:FWLIB/src/stm32f4xx_spi.c ****   *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
1214:FWLIB/src/stm32f4xx_spi.c ****   *  
1215:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
1216:FWLIB/src/stm32f4xx_spi.c ****   */
1217:FWLIB/src/stm32f4xx_spi.c **** void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
1218:FWLIB/src/stm32f4xx_spi.c **** {
 1141              		.loc 1 1218 0
 1142              		.cfi_startproc
 1143              		@ args = 0, pretend = 0, frame = 0
 1144              		@ frame_needed = 0, uses_anonymous_args = 0
 1145              		@ link register save eliminated.
 1146              	.LVL115:
1219:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
1220:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1221:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
1222:FWLIB/src/stm32f4xx_spi.c ****     
1223:FWLIB/src/stm32f4xx_spi.c ****   /* Clear the selected SPI CRC Error (CRCERR) flag */
1224:FWLIB/src/stm32f4xx_spi.c ****   SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 1147              		.loc 1 1224 0
 1148 0000 C943     		mvns	r1, r1
 1149              	.LVL116:
 1150 0002 89B2     		uxth	r1, r1
 1151 0004 0181     		strh	r1, [r0, #8]	@ movhi
 1152 0006 7047     		bx	lr
 1153              		.cfi_endproc
 1154              	.LFE145:
 1156              		.section	.text.SPI_I2S_GetITStatus,"ax",%progbits
 1157              		.align	1
 1158              		.global	SPI_I2S_GetITStatus
 1159              		.syntax unified
 1160              		.thumb
 1161              		.thumb_func
 1162              		.fpu fpv4-sp-d16
 1164              	SPI_I2S_GetITStatus:
 1165              	.LFB146:
1225:FWLIB/src/stm32f4xx_spi.c **** }
1226:FWLIB/src/stm32f4xx_spi.c **** 
1227:FWLIB/src/stm32f4xx_spi.c **** /**
1228:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Checks whether the specified SPIx/I2Sx interrupt has occurred or not.
1229:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
1230:FWLIB/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
1231:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt source to check. 
1232:FWLIB/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1233:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TXE: Transmit buffer empty interrupt.
1234:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_RXNE: Receive buffer not empty interrupt.
1235:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_OVR: Overrun interrupt.
1236:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_IT_MODF: Mode Fault interrupt.
1237:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_IT_CRCERR: CRC Error interrupt.
1238:FWLIB/src/stm32f4xx_spi.c ****   *            @arg I2S_IT_UDR: Underrun interrupt.  
1239:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
1240:FWLIB/src/stm32f4xx_spi.c ****   * @retval The new state of SPI_I2S_IT (SET or RESET).
1241:FWLIB/src/stm32f4xx_spi.c ****   */
1242:FWLIB/src/stm32f4xx_spi.c **** ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
1243:FWLIB/src/stm32f4xx_spi.c **** {
 1166              		.loc 1 1243 0
 1167              		.cfi_startproc
ARM GAS  /tmp/ccgZHmNt.s 			page 43


 1168              		@ args = 0, pretend = 0, frame = 0
 1169              		@ frame_needed = 0, uses_anonymous_args = 0
 1170              		@ link register save eliminated.
 1171              	.LVL117:
 1172 0000 10B4     		push	{r4}
 1173              	.LCFI6:
 1174              		.cfi_def_cfa_offset 4
 1175              		.cfi_offset 4, -4
 1176              	.LVL118:
1244:FWLIB/src/stm32f4xx_spi.c ****   ITStatus bitstatus = RESET;
1245:FWLIB/src/stm32f4xx_spi.c ****   uint16_t itpos = 0, itmask = 0, enablestatus = 0;
1246:FWLIB/src/stm32f4xx_spi.c **** 
1247:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
1248:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1249:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
1250:FWLIB/src/stm32f4xx_spi.c **** 
1251:FWLIB/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT index */
1252:FWLIB/src/stm32f4xx_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 1177              		.loc 1 1252 0
 1178 0002 01F00F04 		and	r4, r1, #15
 1179 0006 0123     		movs	r3, #1
 1180 0008 03FA04F4 		lsl	r4, r3, r4
 1181              	.LVL119:
1253:FWLIB/src/stm32f4xx_spi.c **** 
1254:FWLIB/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT IT mask */
1255:FWLIB/src/stm32f4xx_spi.c ****   itmask = SPI_I2S_IT >> 4;
 1182              		.loc 1 1255 0
 1183 000c 0909     		lsrs	r1, r1, #4
 1184              	.LVL120:
1256:FWLIB/src/stm32f4xx_spi.c **** 
1257:FWLIB/src/stm32f4xx_spi.c ****   /* Set the IT mask */
1258:FWLIB/src/stm32f4xx_spi.c ****   itmask = 0x01 << itmask;
 1185              		.loc 1 1258 0
 1186 000e 8B40     		lsls	r3, r3, r1
 1187              	.LVL121:
1259:FWLIB/src/stm32f4xx_spi.c **** 
1260:FWLIB/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT enable bit status */
1261:FWLIB/src/stm32f4xx_spi.c ****   enablestatus = (SPIx->CR2 & itmask) ;
 1188              		.loc 1 1261 0
 1189 0010 8188     		ldrh	r1, [r0, #4]
 1190 0012 89B2     		uxth	r1, r1
 1191 0014 0B40     		ands	r3, r3, r1
 1192              	.LVL122:
1262:FWLIB/src/stm32f4xx_spi.c **** 
1263:FWLIB/src/stm32f4xx_spi.c ****   /* Check the status of the specified SPI interrupt */
1264:FWLIB/src/stm32f4xx_spi.c ****   if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 1193              		.loc 1 1264 0
 1194 0016 0289     		ldrh	r2, [r0, #8]
 1195 0018 92B2     		uxth	r2, r2
 1196 001a 1442     		tst	r4, r2
 1197 001c 02D0     		beq	.L93
 1198              		.loc 1 1264 0 is_stmt 0 discriminator 1
 1199 001e 2BB9     		cbnz	r3, .L94
1265:FWLIB/src/stm32f4xx_spi.c ****   {
1266:FWLIB/src/stm32f4xx_spi.c ****     /* SPI_I2S_IT is set */
1267:FWLIB/src/stm32f4xx_spi.c ****     bitstatus = SET;
1268:FWLIB/src/stm32f4xx_spi.c ****   }
ARM GAS  /tmp/ccgZHmNt.s 			page 44


1269:FWLIB/src/stm32f4xx_spi.c ****   else
1270:FWLIB/src/stm32f4xx_spi.c ****   {
1271:FWLIB/src/stm32f4xx_spi.c ****     /* SPI_I2S_IT is reset */
1272:FWLIB/src/stm32f4xx_spi.c ****     bitstatus = RESET;
 1200              		.loc 1 1272 0 is_stmt 1
 1201 0020 0020     		movs	r0, #0
 1202              	.LVL123:
 1203 0022 00E0     		b	.L92
 1204              	.LVL124:
 1205              	.L93:
 1206 0024 0020     		movs	r0, #0
 1207              	.LVL125:
 1208              	.L92:
1273:FWLIB/src/stm32f4xx_spi.c ****   }
1274:FWLIB/src/stm32f4xx_spi.c ****   /* Return the SPI_I2S_IT status */
1275:FWLIB/src/stm32f4xx_spi.c ****   return bitstatus;
1276:FWLIB/src/stm32f4xx_spi.c **** }
 1209              		.loc 1 1276 0
 1210 0026 5DF8044B 		ldr	r4, [sp], #4
 1211              	.LCFI7:
 1212              		.cfi_remember_state
 1213              		.cfi_restore 4
 1214              		.cfi_def_cfa_offset 0
 1215              	.LVL126:
 1216 002a 7047     		bx	lr
 1217              	.LVL127:
 1218              	.L94:
 1219              	.LCFI8:
 1220              		.cfi_restore_state
1267:FWLIB/src/stm32f4xx_spi.c ****   }
 1221              		.loc 1 1267 0
 1222 002c 0120     		movs	r0, #1
 1223              	.LVL128:
 1224 002e FAE7     		b	.L92
 1225              		.cfi_endproc
 1226              	.LFE146:
 1228              		.section	.text.SPI_I2S_ClearITPendingBit,"ax",%progbits
 1229              		.align	1
 1230              		.global	SPI_I2S_ClearITPendingBit
 1231              		.syntax unified
 1232              		.thumb
 1233              		.thumb_func
 1234              		.fpu fpv4-sp-d16
 1236              	SPI_I2S_ClearITPendingBit:
 1237              	.LFB147:
1277:FWLIB/src/stm32f4xx_spi.c **** 
1278:FWLIB/src/stm32f4xx_spi.c **** /**
1279:FWLIB/src/stm32f4xx_spi.c ****   * @brief  Clears the SPIx CRC Error (CRCERR) interrupt pending bit.
1280:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
1281:FWLIB/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
1282:FWLIB/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt pending bit to clear.
1283:FWLIB/src/stm32f4xx_spi.c ****   *         This function clears only CRCERR interrupt pending bit.   
1284:FWLIB/src/stm32f4xx_spi.c ****   *            @arg SPI_IT_CRCERR: CRC Error interrupt.
1285:FWLIB/src/stm32f4xx_spi.c ****   *   
1286:FWLIB/src/stm32f4xx_spi.c ****   * @note   OVR (OverRun Error) interrupt pending bit is cleared by software 
1287:FWLIB/src/stm32f4xx_spi.c ****   *          sequence: a read operation to SPI_DR register (SPI_I2S_ReceiveData()) 
1288:FWLIB/src/stm32f4xx_spi.c ****   *          followed by a read operation to SPI_SR register (SPI_I2S_GetITStatus()).
ARM GAS  /tmp/ccgZHmNt.s 			page 45


1289:FWLIB/src/stm32f4xx_spi.c ****   * @note   UDR (UnderRun Error) interrupt pending bit is cleared by a read 
1290:FWLIB/src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetITStatus()).   
1291:FWLIB/src/stm32f4xx_spi.c ****   * @note   MODF (Mode Fault) interrupt pending bit is cleared by software sequence:
1292:FWLIB/src/stm32f4xx_spi.c ****   *          a read/write operation to SPI_SR register (SPI_I2S_GetITStatus()) 
1293:FWLIB/src/stm32f4xx_spi.c ****   *          followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
1294:FWLIB/src/stm32f4xx_spi.c ****   *          the SPI).
1295:FWLIB/src/stm32f4xx_spi.c ****   * @retval None
1296:FWLIB/src/stm32f4xx_spi.c ****   */
1297:FWLIB/src/stm32f4xx_spi.c **** void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
1298:FWLIB/src/stm32f4xx_spi.c **** {
 1238              		.loc 1 1298 0
 1239              		.cfi_startproc
 1240              		@ args = 0, pretend = 0, frame = 0
 1241              		@ frame_needed = 0, uses_anonymous_args = 0
 1242              		@ link register save eliminated.
 1243              	.LVL129:
1299:FWLIB/src/stm32f4xx_spi.c ****   uint16_t itpos = 0;
1300:FWLIB/src/stm32f4xx_spi.c ****   /* Check the parameters */
1301:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1302:FWLIB/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));
1303:FWLIB/src/stm32f4xx_spi.c **** 
1304:FWLIB/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S IT index */
1305:FWLIB/src/stm32f4xx_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 1244              		.loc 1 1305 0
 1245 0000 01F00F01 		and	r1, r1, #15
 1246              	.LVL130:
 1247 0004 0123     		movs	r3, #1
 1248 0006 8B40     		lsls	r3, r3, r1
 1249 0008 9BB2     		uxth	r3, r3
 1250              	.LVL131:
1306:FWLIB/src/stm32f4xx_spi.c **** 
1307:FWLIB/src/stm32f4xx_spi.c ****   /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
1308:FWLIB/src/stm32f4xx_spi.c ****   SPIx->SR = (uint16_t)~itpos;
 1251              		.loc 1 1308 0
 1252 000a DB43     		mvns	r3, r3
 1253              	.LVL132:
 1254 000c 9BB2     		uxth	r3, r3
 1255              	.LVL133:
 1256 000e 0381     		strh	r3, [r0, #8]	@ movhi
 1257 0010 7047     		bx	lr
 1258              		.cfi_endproc
 1259              	.LFE147:
 1261              		.text
 1262              	.Letext0:
 1263              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1264              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1265              		.file 4 "F4_CORE/core_cm4.h"
 1266              		.file 5 "USER/system_stm32f4xx.h"
 1267              		.file 6 "USER/stm32f4xx.h"
 1268              		.file 7 "FWLIB/inc/stm32f4xx_spi.h"
 1269              		.file 8 "FWLIB/inc/stm32f4xx_rcc.h"
ARM GAS  /tmp/ccgZHmNt.s 			page 46


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_spi.c
     /tmp/ccgZHmNt.s:18     .text.SPI_I2S_DeInit:0000000000000000 $t
     /tmp/ccgZHmNt.s:25     .text.SPI_I2S_DeInit:0000000000000000 SPI_I2S_DeInit
     /tmp/ccgZHmNt.s:153    .text.SPI_I2S_DeInit:00000000000000ac $d
     /tmp/ccgZHmNt.s:163    .text.SPI_Init:0000000000000000 $t
     /tmp/ccgZHmNt.s:170    .text.SPI_Init:0000000000000000 SPI_Init
     /tmp/ccgZHmNt.s:233    .text.I2S_Init:0000000000000000 $t
     /tmp/ccgZHmNt.s:240    .text.I2S_Init:0000000000000000 I2S_Init
     /tmp/ccgZHmNt.s:429    .text.I2S_Init:00000000000000fc $d
     /tmp/ccgZHmNt.s:437    .text.SPI_StructInit:0000000000000000 $t
     /tmp/ccgZHmNt.s:444    .text.SPI_StructInit:0000000000000000 SPI_StructInit
     /tmp/ccgZHmNt.s:477    .text.I2S_StructInit:0000000000000000 $t
     /tmp/ccgZHmNt.s:484    .text.I2S_StructInit:0000000000000000 I2S_StructInit
     /tmp/ccgZHmNt.s:511    .text.SPI_Cmd:0000000000000000 $t
     /tmp/ccgZHmNt.s:518    .text.SPI_Cmd:0000000000000000 SPI_Cmd
     /tmp/ccgZHmNt.s:546    .text.I2S_Cmd:0000000000000000 $t
     /tmp/ccgZHmNt.s:553    .text.I2S_Cmd:0000000000000000 I2S_Cmd
     /tmp/ccgZHmNt.s:581    .text.SPI_DataSizeConfig:0000000000000000 $t
     /tmp/ccgZHmNt.s:588    .text.SPI_DataSizeConfig:0000000000000000 SPI_DataSizeConfig
     /tmp/ccgZHmNt.s:613    .text.SPI_BiDirectionalLineConfig:0000000000000000 $t
     /tmp/ccgZHmNt.s:620    .text.SPI_BiDirectionalLineConfig:0000000000000000 SPI_BiDirectionalLineConfig
     /tmp/ccgZHmNt.s:649    .text.SPI_NSSInternalSoftwareConfig:0000000000000000 $t
     /tmp/ccgZHmNt.s:656    .text.SPI_NSSInternalSoftwareConfig:0000000000000000 SPI_NSSInternalSoftwareConfig
     /tmp/ccgZHmNt.s:686    .text.SPI_SSOutputCmd:0000000000000000 $t
     /tmp/ccgZHmNt.s:693    .text.SPI_SSOutputCmd:0000000000000000 SPI_SSOutputCmd
     /tmp/ccgZHmNt.s:721    .text.SPI_TIModeCmd:0000000000000000 $t
     /tmp/ccgZHmNt.s:728    .text.SPI_TIModeCmd:0000000000000000 SPI_TIModeCmd
     /tmp/ccgZHmNt.s:756    .text.I2S_FullDuplexConfig:0000000000000000 $t
     /tmp/ccgZHmNt.s:763    .text.I2S_FullDuplexConfig:0000000000000000 I2S_FullDuplexConfig
     /tmp/ccgZHmNt.s:841    .text.SPI_I2S_ReceiveData:0000000000000000 $t
     /tmp/ccgZHmNt.s:848    .text.SPI_I2S_ReceiveData:0000000000000000 SPI_I2S_ReceiveData
     /tmp/ccgZHmNt.s:866    .text.SPI_I2S_SendData:0000000000000000 $t
     /tmp/ccgZHmNt.s:873    .text.SPI_I2S_SendData:0000000000000000 SPI_I2S_SendData
     /tmp/ccgZHmNt.s:888    .text.SPI_CalculateCRC:0000000000000000 $t
     /tmp/ccgZHmNt.s:895    .text.SPI_CalculateCRC:0000000000000000 SPI_CalculateCRC
     /tmp/ccgZHmNt.s:923    .text.SPI_TransmitCRC:0000000000000000 $t
     /tmp/ccgZHmNt.s:930    .text.SPI_TransmitCRC:0000000000000000 SPI_TransmitCRC
     /tmp/ccgZHmNt.s:948    .text.SPI_GetCRC:0000000000000000 $t
     /tmp/ccgZHmNt.s:955    .text.SPI_GetCRC:0000000000000000 SPI_GetCRC
     /tmp/ccgZHmNt.s:985    .text.SPI_GetCRCPolynomial:0000000000000000 $t
     /tmp/ccgZHmNt.s:992    .text.SPI_GetCRCPolynomial:0000000000000000 SPI_GetCRCPolynomial
     /tmp/ccgZHmNt.s:1010   .text.SPI_I2S_DMACmd:0000000000000000 $t
     /tmp/ccgZHmNt.s:1017   .text.SPI_I2S_DMACmd:0000000000000000 SPI_I2S_DMACmd
     /tmp/ccgZHmNt.s:1048   .text.SPI_I2S_ITConfig:0000000000000000 $t
     /tmp/ccgZHmNt.s:1055   .text.SPI_I2S_ITConfig:0000000000000000 SPI_I2S_ITConfig
     /tmp/ccgZHmNt.s:1098   .text.SPI_I2S_GetFlagStatus:0000000000000000 $t
     /tmp/ccgZHmNt.s:1105   .text.SPI_I2S_GetFlagStatus:0000000000000000 SPI_I2S_GetFlagStatus
     /tmp/ccgZHmNt.s:1132   .text.SPI_I2S_ClearFlag:0000000000000000 $t
     /tmp/ccgZHmNt.s:1139   .text.SPI_I2S_ClearFlag:0000000000000000 SPI_I2S_ClearFlag
     /tmp/ccgZHmNt.s:1157   .text.SPI_I2S_GetITStatus:0000000000000000 $t
     /tmp/ccgZHmNt.s:1164   .text.SPI_I2S_GetITStatus:0000000000000000 SPI_I2S_GetITStatus
     /tmp/ccgZHmNt.s:1229   .text.SPI_I2S_ClearITPendingBit:0000000000000000 $t
     /tmp/ccgZHmNt.s:1236   .text.SPI_I2S_ClearITPendingBit:0000000000000000 SPI_I2S_ClearITPendingBit
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
ARM GAS  /tmp/ccgZHmNt.s 			page 47


RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
