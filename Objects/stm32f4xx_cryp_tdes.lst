ARM GAS  /tmp/ccSqQPCW.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_cryp_tdes.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.CRYP_TDES_ECB,"ax",%progbits
  18              		.align	1
  19              		.global	CRYP_TDES_ECB
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	CRYP_TDES_ECB:
  26              	.LFB123:
  27              		.file 1 "FWLIB/src/stm32f4xx_cryp_tdes.c"
   1:FWLIB/src/stm32f4xx_cryp_tdes.c **** /**
   2:FWLIB/src/stm32f4xx_cryp_tdes.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @file    stm32f4xx_cryp_tdes.c
   4:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @version V1.8.0
   6:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @date    04-November-2016
   7:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @brief   This file provides high level functions to encrypt and decrypt an 
   8:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *          input message using TDES in ECB/CBC modes .
   9:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *          It uses the stm32f4xx_cryp.c/.h drivers to access the STM32F4xx CRYP
  10:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *          peripheral.
  11:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *
  12:FWLIB/src/stm32f4xx_cryp_tdes.c **** @verbatim
  13:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  14:FWLIB/src/stm32f4xx_cryp_tdes.c ****  ===============================================================================
  15:FWLIB/src/stm32f4xx_cryp_tdes.c ****                            ##### How to use this driver #####
  16:FWLIB/src/stm32f4xx_cryp_tdes.c ****  ===============================================================================
  17:FWLIB/src/stm32f4xx_cryp_tdes.c ****  [..]
  18:FWLIB/src/stm32f4xx_cryp_tdes.c ****    (#) Enable The CRYP controller clock using 
  19:FWLIB/src/stm32f4xx_cryp_tdes.c ****        RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_CRYP, ENABLE); function.
  20:FWLIB/src/stm32f4xx_cryp_tdes.c ****   
  21:FWLIB/src/stm32f4xx_cryp_tdes.c ****    (#) Encrypt and decrypt using TDES in ECB Mode using CRYP_TDES_ECB() function.
  22:FWLIB/src/stm32f4xx_cryp_tdes.c ****   
  23:FWLIB/src/stm32f4xx_cryp_tdes.c ****    (#) Encrypt and decrypt using TDES in CBC Mode using CRYP_TDES_CBC() function.
  24:FWLIB/src/stm32f4xx_cryp_tdes.c ****   
  25:FWLIB/src/stm32f4xx_cryp_tdes.c **** @endverbatim
  26:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *
  27:FWLIB/src/stm32f4xx_cryp_tdes.c ****   ******************************************************************************
  28:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @attention
  29:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *
  30:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
  31:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *
ARM GAS  /tmp/ccSqQPCW.s 			page 2


  32:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  33:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * You may not use this file except in compliance with the License.
  34:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * You may obtain a copy of the License at:
  35:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *
  36:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  37:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *
  38:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * Unless required by applicable law or agreed to in writing, software 
  39:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  40:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  41:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * See the License for the specific language governing permissions and
  42:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * limitations under the License.
  43:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *
  44:FWLIB/src/stm32f4xx_cryp_tdes.c ****   ******************************************************************************
  45:FWLIB/src/stm32f4xx_cryp_tdes.c ****   */ 
  46:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  47:FWLIB/src/stm32f4xx_cryp_tdes.c **** /* Includes ------------------------------------------------------------------*/
  48:FWLIB/src/stm32f4xx_cryp_tdes.c **** #include "stm32f4xx_cryp.h"
  49:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  50:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  51:FWLIB/src/stm32f4xx_cryp_tdes.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  52:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @{
  53:FWLIB/src/stm32f4xx_cryp_tdes.c ****   */
  54:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  55:FWLIB/src/stm32f4xx_cryp_tdes.c **** /** @defgroup CRYP 
  56:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @brief CRYP driver modules
  57:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @{
  58:FWLIB/src/stm32f4xx_cryp_tdes.c ****   */
  59:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  60:FWLIB/src/stm32f4xx_cryp_tdes.c **** /* Private typedef -----------------------------------------------------------*/
  61:FWLIB/src/stm32f4xx_cryp_tdes.c **** /* Private define ------------------------------------------------------------*/
  62:FWLIB/src/stm32f4xx_cryp_tdes.c **** #define TDESBUSY_TIMEOUT    ((uint32_t) 0x00010000)
  63:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  64:FWLIB/src/stm32f4xx_cryp_tdes.c **** /* Private macro -------------------------------------------------------------*/
  65:FWLIB/src/stm32f4xx_cryp_tdes.c **** /* Private variables ---------------------------------------------------------*/
  66:FWLIB/src/stm32f4xx_cryp_tdes.c **** /* Private function prototypes -----------------------------------------------*/
  67:FWLIB/src/stm32f4xx_cryp_tdes.c **** /* Private functions ---------------------------------------------------------*/
  68:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  69:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  70:FWLIB/src/stm32f4xx_cryp_tdes.c **** /** @defgroup CRYP_Private_Functions
  71:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @{
  72:FWLIB/src/stm32f4xx_cryp_tdes.c ****   */ 
  73:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  74:FWLIB/src/stm32f4xx_cryp_tdes.c **** /** @defgroup CRYP_Group7 High Level TDES functions
  75:FWLIB/src/stm32f4xx_cryp_tdes.c ****  *  @brief   High Level TDES functions 
  76:FWLIB/src/stm32f4xx_cryp_tdes.c ****  *
  77:FWLIB/src/stm32f4xx_cryp_tdes.c **** @verbatim   
  78:FWLIB/src/stm32f4xx_cryp_tdes.c ****  ===============================================================================
  79:FWLIB/src/stm32f4xx_cryp_tdes.c ****                       ##### High Level TDES functions #####
  80:FWLIB/src/stm32f4xx_cryp_tdes.c ****  ===============================================================================
  81:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  82:FWLIB/src/stm32f4xx_cryp_tdes.c **** @endverbatim
  83:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @{
  84:FWLIB/src/stm32f4xx_cryp_tdes.c ****   */
  85:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  86:FWLIB/src/stm32f4xx_cryp_tdes.c **** /**
  87:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @brief  Encrypt and decrypt using TDES in ECB Mode
  88:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Mode: encryption or decryption Mode.
ARM GAS  /tmp/ccSqQPCW.s 			page 3


  89:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *           This parameter can be one of the following values:
  90:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *            @arg MODE_ENCRYPT: Encryption
  91:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *            @arg MODE_DECRYPT: Decryption
  92:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Key: Key used for TDES algorithm.
  93:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 8.
  94:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Input: pointer to the Input buffer.
  95:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Output: pointer to the returned buffer.
  96:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @retval An ErrorStatus enumeration value:
  97:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *          - SUCCESS: Operation done
  98:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *          - ERROR: Operation failed
  99:FWLIB/src/stm32f4xx_cryp_tdes.c ****   */
 100:FWLIB/src/stm32f4xx_cryp_tdes.c **** ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
 101:FWLIB/src/stm32f4xx_cryp_tdes.c ****                           uint32_t Ilength, uint8_t *Output)
 102:FWLIB/src/stm32f4xx_cryp_tdes.c **** {
  28              		.loc 1 102 0
  29              		.cfi_startproc
  30              		@ args = 4, pretend = 0, frame = 56
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 24
  36              		.cfi_offset 4, -24
  37              		.cfi_offset 5, -20
  38              		.cfi_offset 6, -16
  39              		.cfi_offset 7, -12
  40              		.cfi_offset 8, -8
  41              		.cfi_offset 14, -4
  42 0004 8EB0     		sub	sp, sp, #56
  43              	.LCFI1:
  44              		.cfi_def_cfa_offset 80
  45 0006 0646     		mov	r6, r0
  46 0008 0D46     		mov	r5, r1
  47 000a 9846     		mov	r8, r3
 103:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_InitTypeDef TDES_CRYP_InitStructure;
 104:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
 105:FWLIB/src/stm32f4xx_cryp_tdes.c ****   __IO uint32_t counter = 0;
  48              		.loc 1 105 0
  49 000c 0023     		movs	r3, #0
  50              	.LVL1:
  51 000e 0193     		str	r3, [sp, #4]
  52              	.LVL2:
 106:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t busystatus = 0;
 107:FWLIB/src/stm32f4xx_cryp_tdes.c ****   ErrorStatus status = SUCCESS;
 108:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 109:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t inputaddr  = (uint32_t)Input;
  53              		.loc 1 109 0
  54 0010 1446     		mov	r4, r2
  55              	.LVL3:
 110:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t outputaddr = (uint32_t)Output;
  56              		.loc 1 110 0
  57 0012 149F     		ldr	r7, [sp, #80]
  58              	.LVL4:
 111:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t i = 0;
 112:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 113:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Crypto structures initialisation*/
 114:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
ARM GAS  /tmp/ccSqQPCW.s 			page 4


  59              		.loc 1 114 0
  60 0014 02A8     		add	r0, sp, #8
  61              	.LVL5:
  62 0016 FFF7FEFF 		bl	CRYP_KeyStructInit
  63              	.LVL6:
 115:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 116:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Crypto Init for Encryption process */
 117:FWLIB/src/stm32f4xx_cryp_tdes.c ****   if(Mode == MODE_ENCRYPT) /* TDES encryption */
  64              		.loc 1 117 0
  65 001a 012E     		cmp	r6, #1
  66 001c 28D0     		beq	.L14
 118:FWLIB/src/stm32f4xx_cryp_tdes.c ****   {
 119:FWLIB/src/stm32f4xx_cryp_tdes.c ****      TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 120:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 121:FWLIB/src/stm32f4xx_cryp_tdes.c ****   else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
 122:FWLIB/src/stm32f4xx_cryp_tdes.c ****   {
 123:FWLIB/src/stm32f4xx_cryp_tdes.c ****      TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
  67              		.loc 1 123 0
  68 001e 0423     		movs	r3, #4
  69 0020 0A93     		str	r3, [sp, #40]
  70              	.L3:
 124:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 125:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 126:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
  71              		.loc 1 126 0
  72 0022 0023     		movs	r3, #0
  73 0024 0B93     		str	r3, [sp, #44]
 127:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  74              		.loc 1 127 0
  75 0026 8023     		movs	r3, #128
  76 0028 0C93     		str	r3, [sp, #48]
 128:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_Init(&TDES_CRYP_InitStructure);
  77              		.loc 1 128 0
  78 002a 0AA8     		add	r0, sp, #40
  79 002c FFF7FEFF 		bl	CRYP_Init
  80              	.LVL7:
 129:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 130:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Key Initialisation */
 131:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
  81              		.loc 1 131 0
  82 0030 2B68     		ldr	r3, [r5]
  83              	.LVL8:
  84              	.LBB30:
  85              	.LBB31:
  86              		.file 2 "F4_CORE/core_cmInstr.h"
   1:F4_CORE/core_cmInstr.h **** /**************************************************************************//**
   2:F4_CORE/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:F4_CORE/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:F4_CORE/core_cmInstr.h ****  * @version  V4.10
   5:F4_CORE/core_cmInstr.h ****  * @date     18. March 2015
   6:F4_CORE/core_cmInstr.h ****  *
   7:F4_CORE/core_cmInstr.h ****  * @note
   8:F4_CORE/core_cmInstr.h ****  *
   9:F4_CORE/core_cmInstr.h ****  ******************************************************************************/
  10:F4_CORE/core_cmInstr.h **** /* Copyright (c) 2009 - 2014 ARM LIMITED
  11:F4_CORE/core_cmInstr.h **** 
  12:F4_CORE/core_cmInstr.h ****    All rights reserved.
ARM GAS  /tmp/ccSqQPCW.s 			page 5


  13:F4_CORE/core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:F4_CORE/core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:F4_CORE/core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:F4_CORE/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:F4_CORE/core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:F4_CORE/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:F4_CORE/core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:F4_CORE/core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:F4_CORE/core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:F4_CORE/core_cmInstr.h ****      specific prior written permission.
  23:F4_CORE/core_cmInstr.h ****    *
  24:F4_CORE/core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:F4_CORE/core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:F4_CORE/core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:F4_CORE/core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:F4_CORE/core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:F4_CORE/core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:F4_CORE/core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:F4_CORE/core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:F4_CORE/core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:F4_CORE/core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:F4_CORE/core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:F4_CORE/core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:F4_CORE/core_cmInstr.h **** 
  37:F4_CORE/core_cmInstr.h **** 
  38:F4_CORE/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:F4_CORE/core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:F4_CORE/core_cmInstr.h **** 
  41:F4_CORE/core_cmInstr.h **** 
  42:F4_CORE/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:F4_CORE/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:F4_CORE/core_cmInstr.h ****   Access to dedicated instructions
  45:F4_CORE/core_cmInstr.h ****   @{
  46:F4_CORE/core_cmInstr.h **** */
  47:F4_CORE/core_cmInstr.h **** 
  48:F4_CORE/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:F4_CORE/core_cmInstr.h **** /* ARM armcc specific functions */
  50:F4_CORE/core_cmInstr.h **** 
  51:F4_CORE/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:F4_CORE/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:F4_CORE/core_cmInstr.h **** #endif
  54:F4_CORE/core_cmInstr.h **** 
  55:F4_CORE/core_cmInstr.h **** 
  56:F4_CORE/core_cmInstr.h **** /** \brief  No Operation
  57:F4_CORE/core_cmInstr.h **** 
  58:F4_CORE/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:F4_CORE/core_cmInstr.h ****  */
  60:F4_CORE/core_cmInstr.h **** #define __NOP                             __nop
  61:F4_CORE/core_cmInstr.h **** 
  62:F4_CORE/core_cmInstr.h **** 
  63:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:F4_CORE/core_cmInstr.h **** 
  65:F4_CORE/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:F4_CORE/core_cmInstr.h ****     until one of a number of events occurs.
  67:F4_CORE/core_cmInstr.h ****  */
  68:F4_CORE/core_cmInstr.h **** #define __WFI                             __wfi
  69:F4_CORE/core_cmInstr.h **** 
ARM GAS  /tmp/ccSqQPCW.s 			page 6


  70:F4_CORE/core_cmInstr.h **** 
  71:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Event
  72:F4_CORE/core_cmInstr.h **** 
  73:F4_CORE/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:F4_CORE/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:F4_CORE/core_cmInstr.h ****  */
  76:F4_CORE/core_cmInstr.h **** #define __WFE                             __wfe
  77:F4_CORE/core_cmInstr.h **** 
  78:F4_CORE/core_cmInstr.h **** 
  79:F4_CORE/core_cmInstr.h **** /** \brief  Send Event
  80:F4_CORE/core_cmInstr.h **** 
  81:F4_CORE/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:F4_CORE/core_cmInstr.h ****  */
  83:F4_CORE/core_cmInstr.h **** #define __SEV                             __sev
  84:F4_CORE/core_cmInstr.h **** 
  85:F4_CORE/core_cmInstr.h **** 
  86:F4_CORE/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:F4_CORE/core_cmInstr.h **** 
  88:F4_CORE/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:F4_CORE/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:F4_CORE/core_cmInstr.h ****     memory, after the instruction has been completed.
  91:F4_CORE/core_cmInstr.h ****  */
  92:F4_CORE/core_cmInstr.h **** #define __ISB() do {\
  93:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
  94:F4_CORE/core_cmInstr.h ****                    __isb(0xF);\
  95:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
  96:F4_CORE/core_cmInstr.h ****                 } while (0)
  97:F4_CORE/core_cmInstr.h **** 
  98:F4_CORE/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  99:F4_CORE/core_cmInstr.h **** 
 100:F4_CORE/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 101:F4_CORE/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 102:F4_CORE/core_cmInstr.h ****  */
 103:F4_CORE/core_cmInstr.h **** #define __DSB() do {\
 104:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 105:F4_CORE/core_cmInstr.h ****                    __dsb(0xF);\
 106:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 107:F4_CORE/core_cmInstr.h ****                 } while (0)
 108:F4_CORE/core_cmInstr.h **** 
 109:F4_CORE/core_cmInstr.h **** /** \brief  Data Memory Barrier
 110:F4_CORE/core_cmInstr.h **** 
 111:F4_CORE/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 112:F4_CORE/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 113:F4_CORE/core_cmInstr.h ****  */
 114:F4_CORE/core_cmInstr.h **** #define __DMB() do {\
 115:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 116:F4_CORE/core_cmInstr.h ****                    __dmb(0xF);\
 117:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 118:F4_CORE/core_cmInstr.h ****                 } while (0)
 119:F4_CORE/core_cmInstr.h **** 
 120:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 121:F4_CORE/core_cmInstr.h **** 
 122:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in integer value.
 123:F4_CORE/core_cmInstr.h **** 
 124:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 125:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 126:F4_CORE/core_cmInstr.h ****  */
ARM GAS  /tmp/ccSqQPCW.s 			page 7


 127:F4_CORE/core_cmInstr.h **** #define __REV                             __rev
 128:F4_CORE/core_cmInstr.h **** 
 129:F4_CORE/core_cmInstr.h **** 
 130:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 131:F4_CORE/core_cmInstr.h **** 
 132:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 133:F4_CORE/core_cmInstr.h **** 
 134:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 135:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 136:F4_CORE/core_cmInstr.h ****  */
 137:F4_CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 138:F4_CORE/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 139:F4_CORE/core_cmInstr.h **** {
 140:F4_CORE/core_cmInstr.h ****   rev16 r0, r0
 141:F4_CORE/core_cmInstr.h ****   bx lr
 142:F4_CORE/core_cmInstr.h **** }
 143:F4_CORE/core_cmInstr.h **** #endif
 144:F4_CORE/core_cmInstr.h **** 
 145:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 146:F4_CORE/core_cmInstr.h **** 
 147:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 148:F4_CORE/core_cmInstr.h **** 
 149:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 150:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 151:F4_CORE/core_cmInstr.h ****  */
 152:F4_CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 153:F4_CORE/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 154:F4_CORE/core_cmInstr.h **** {
 155:F4_CORE/core_cmInstr.h ****   revsh r0, r0
 156:F4_CORE/core_cmInstr.h ****   bx lr
 157:F4_CORE/core_cmInstr.h **** }
 158:F4_CORE/core_cmInstr.h **** #endif
 159:F4_CORE/core_cmInstr.h **** 
 160:F4_CORE/core_cmInstr.h **** 
 161:F4_CORE/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 162:F4_CORE/core_cmInstr.h **** 
 163:F4_CORE/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 164:F4_CORE/core_cmInstr.h **** 
 165:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to rotate
 166:F4_CORE/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 167:F4_CORE/core_cmInstr.h ****     \return               Rotated value
 168:F4_CORE/core_cmInstr.h ****  */
 169:F4_CORE/core_cmInstr.h **** #define __ROR                             __ror
 170:F4_CORE/core_cmInstr.h **** 
 171:F4_CORE/core_cmInstr.h **** 
 172:F4_CORE/core_cmInstr.h **** /** \brief  Breakpoint
 173:F4_CORE/core_cmInstr.h **** 
 174:F4_CORE/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 175:F4_CORE/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 176:F4_CORE/core_cmInstr.h **** 
 177:F4_CORE/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 178:F4_CORE/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 179:F4_CORE/core_cmInstr.h ****  */
 180:F4_CORE/core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 181:F4_CORE/core_cmInstr.h **** 
 182:F4_CORE/core_cmInstr.h **** 
 183:F4_CORE/core_cmInstr.h **** /** \brief  Reverse bit order of value
ARM GAS  /tmp/ccSqQPCW.s 			page 8


 184:F4_CORE/core_cmInstr.h **** 
 185:F4_CORE/core_cmInstr.h ****     This function reverses the bit order of the given value.
 186:F4_CORE/core_cmInstr.h **** 
 187:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 188:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 189:F4_CORE/core_cmInstr.h ****  */
 190:F4_CORE/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 191:F4_CORE/core_cmInstr.h ****   #define __RBIT                          __rbit
 192:F4_CORE/core_cmInstr.h **** #else
 193:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 194:F4_CORE/core_cmInstr.h **** {
 195:F4_CORE/core_cmInstr.h ****   uint32_t result;
 196:F4_CORE/core_cmInstr.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; // extra shift needed at end
 197:F4_CORE/core_cmInstr.h **** 
 198:F4_CORE/core_cmInstr.h ****   result = value;                      // r will be reversed bits of v; first get LSB of v
 199:F4_CORE/core_cmInstr.h ****   for (value >>= 1; value; value >>= 1)
 200:F4_CORE/core_cmInstr.h ****   {
 201:F4_CORE/core_cmInstr.h ****     result <<= 1;
 202:F4_CORE/core_cmInstr.h ****     result |= value & 1;
 203:F4_CORE/core_cmInstr.h ****     s--;
 204:F4_CORE/core_cmInstr.h ****   }
 205:F4_CORE/core_cmInstr.h ****   result <<= s;                       // shift when v's highest bits are zero
 206:F4_CORE/core_cmInstr.h ****   return(result);
 207:F4_CORE/core_cmInstr.h **** }
 208:F4_CORE/core_cmInstr.h **** #endif
 209:F4_CORE/core_cmInstr.h **** 
 210:F4_CORE/core_cmInstr.h **** 
 211:F4_CORE/core_cmInstr.h **** /** \brief  Count leading zeros
 212:F4_CORE/core_cmInstr.h **** 
 213:F4_CORE/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 214:F4_CORE/core_cmInstr.h **** 
 215:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 216:F4_CORE/core_cmInstr.h ****     \return             number of leading zeros in value
 217:F4_CORE/core_cmInstr.h ****  */
 218:F4_CORE/core_cmInstr.h **** #define __CLZ                             __clz
 219:F4_CORE/core_cmInstr.h **** 
 220:F4_CORE/core_cmInstr.h **** 
 221:F4_CORE/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 222:F4_CORE/core_cmInstr.h **** 
 223:F4_CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 224:F4_CORE/core_cmInstr.h **** 
 225:F4_CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 8 bit value.
 226:F4_CORE/core_cmInstr.h **** 
 227:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 228:F4_CORE/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 229:F4_CORE/core_cmInstr.h ****  */
 230:F4_CORE/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 231:F4_CORE/core_cmInstr.h **** 
 232:F4_CORE/core_cmInstr.h **** 
 233:F4_CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 234:F4_CORE/core_cmInstr.h **** 
 235:F4_CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 16 bit values.
 236:F4_CORE/core_cmInstr.h **** 
 237:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 238:F4_CORE/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 239:F4_CORE/core_cmInstr.h ****  */
 240:F4_CORE/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
ARM GAS  /tmp/ccSqQPCW.s 			page 9


 241:F4_CORE/core_cmInstr.h **** 
 242:F4_CORE/core_cmInstr.h **** 
 243:F4_CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 244:F4_CORE/core_cmInstr.h **** 
 245:F4_CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 32 bit values.
 246:F4_CORE/core_cmInstr.h **** 
 247:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 248:F4_CORE/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 249:F4_CORE/core_cmInstr.h ****  */
 250:F4_CORE/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 251:F4_CORE/core_cmInstr.h **** 
 252:F4_CORE/core_cmInstr.h **** 
 253:F4_CORE/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 254:F4_CORE/core_cmInstr.h **** 
 255:F4_CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 8 bit values.
 256:F4_CORE/core_cmInstr.h **** 
 257:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 258:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 259:F4_CORE/core_cmInstr.h ****     \return          0  Function succeeded
 260:F4_CORE/core_cmInstr.h ****     \return          1  Function failed
 261:F4_CORE/core_cmInstr.h ****  */
 262:F4_CORE/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 263:F4_CORE/core_cmInstr.h **** 
 264:F4_CORE/core_cmInstr.h **** 
 265:F4_CORE/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 266:F4_CORE/core_cmInstr.h **** 
 267:F4_CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 16 bit values.
 268:F4_CORE/core_cmInstr.h **** 
 269:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 270:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 271:F4_CORE/core_cmInstr.h ****     \return          0  Function succeeded
 272:F4_CORE/core_cmInstr.h ****     \return          1  Function failed
 273:F4_CORE/core_cmInstr.h ****  */
 274:F4_CORE/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 275:F4_CORE/core_cmInstr.h **** 
 276:F4_CORE/core_cmInstr.h **** 
 277:F4_CORE/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 278:F4_CORE/core_cmInstr.h **** 
 279:F4_CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 32 bit values.
 280:F4_CORE/core_cmInstr.h **** 
 281:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 282:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 283:F4_CORE/core_cmInstr.h ****     \return          0  Function succeeded
 284:F4_CORE/core_cmInstr.h ****     \return          1  Function failed
 285:F4_CORE/core_cmInstr.h ****  */
 286:F4_CORE/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 287:F4_CORE/core_cmInstr.h **** 
 288:F4_CORE/core_cmInstr.h **** 
 289:F4_CORE/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 290:F4_CORE/core_cmInstr.h **** 
 291:F4_CORE/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 292:F4_CORE/core_cmInstr.h **** 
 293:F4_CORE/core_cmInstr.h ****  */
 294:F4_CORE/core_cmInstr.h **** #define __CLREX                           __clrex
 295:F4_CORE/core_cmInstr.h **** 
 296:F4_CORE/core_cmInstr.h **** 
 297:F4_CORE/core_cmInstr.h **** /** \brief  Signed Saturate
ARM GAS  /tmp/ccSqQPCW.s 			page 10


 298:F4_CORE/core_cmInstr.h **** 
 299:F4_CORE/core_cmInstr.h ****     This function saturates a signed value.
 300:F4_CORE/core_cmInstr.h **** 
 301:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 302:F4_CORE/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 303:F4_CORE/core_cmInstr.h ****     \return             Saturated value
 304:F4_CORE/core_cmInstr.h ****  */
 305:F4_CORE/core_cmInstr.h **** #define __SSAT                            __ssat
 306:F4_CORE/core_cmInstr.h **** 
 307:F4_CORE/core_cmInstr.h **** 
 308:F4_CORE/core_cmInstr.h **** /** \brief  Unsigned Saturate
 309:F4_CORE/core_cmInstr.h **** 
 310:F4_CORE/core_cmInstr.h ****     This function saturates an unsigned value.
 311:F4_CORE/core_cmInstr.h **** 
 312:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 313:F4_CORE/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 314:F4_CORE/core_cmInstr.h ****     \return             Saturated value
 315:F4_CORE/core_cmInstr.h ****  */
 316:F4_CORE/core_cmInstr.h **** #define __USAT                            __usat
 317:F4_CORE/core_cmInstr.h **** 
 318:F4_CORE/core_cmInstr.h **** 
 319:F4_CORE/core_cmInstr.h **** /** \brief  Rotate Right with Extend (32 bit)
 320:F4_CORE/core_cmInstr.h **** 
 321:F4_CORE/core_cmInstr.h ****     This function moves each bit of a bitstring right by one bit.
 322:F4_CORE/core_cmInstr.h ****     The carry input is shifted in at the left end of the bitstring.
 323:F4_CORE/core_cmInstr.h **** 
 324:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to rotate
 325:F4_CORE/core_cmInstr.h ****     \return               Rotated value
 326:F4_CORE/core_cmInstr.h ****  */
 327:F4_CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 328:F4_CORE/core_cmInstr.h **** __attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
 329:F4_CORE/core_cmInstr.h **** {
 330:F4_CORE/core_cmInstr.h ****   rrx r0, r0
 331:F4_CORE/core_cmInstr.h ****   bx lr
 332:F4_CORE/core_cmInstr.h **** }
 333:F4_CORE/core_cmInstr.h **** #endif
 334:F4_CORE/core_cmInstr.h **** 
 335:F4_CORE/core_cmInstr.h **** 
 336:F4_CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (8 bit)
 337:F4_CORE/core_cmInstr.h **** 
 338:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 8 bit value.
 339:F4_CORE/core_cmInstr.h **** 
 340:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 341:F4_CORE/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 342:F4_CORE/core_cmInstr.h ****  */
 343:F4_CORE/core_cmInstr.h **** #define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
 344:F4_CORE/core_cmInstr.h **** 
 345:F4_CORE/core_cmInstr.h **** 
 346:F4_CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (16 bit)
 347:F4_CORE/core_cmInstr.h **** 
 348:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 16 bit values.
 349:F4_CORE/core_cmInstr.h **** 
 350:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 351:F4_CORE/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 352:F4_CORE/core_cmInstr.h ****  */
 353:F4_CORE/core_cmInstr.h **** #define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
 354:F4_CORE/core_cmInstr.h **** 
ARM GAS  /tmp/ccSqQPCW.s 			page 11


 355:F4_CORE/core_cmInstr.h **** 
 356:F4_CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (32 bit)
 357:F4_CORE/core_cmInstr.h **** 
 358:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 32 bit values.
 359:F4_CORE/core_cmInstr.h **** 
 360:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 361:F4_CORE/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 362:F4_CORE/core_cmInstr.h ****  */
 363:F4_CORE/core_cmInstr.h **** #define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
 364:F4_CORE/core_cmInstr.h **** 
 365:F4_CORE/core_cmInstr.h **** 
 366:F4_CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (8 bit)
 367:F4_CORE/core_cmInstr.h **** 
 368:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 8 bit values.
 369:F4_CORE/core_cmInstr.h **** 
 370:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 371:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 372:F4_CORE/core_cmInstr.h ****  */
 373:F4_CORE/core_cmInstr.h **** #define __STRBT(value, ptr)               __strt(value, ptr)
 374:F4_CORE/core_cmInstr.h **** 
 375:F4_CORE/core_cmInstr.h **** 
 376:F4_CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (16 bit)
 377:F4_CORE/core_cmInstr.h **** 
 378:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 16 bit values.
 379:F4_CORE/core_cmInstr.h **** 
 380:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 381:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 382:F4_CORE/core_cmInstr.h ****  */
 383:F4_CORE/core_cmInstr.h **** #define __STRHT(value, ptr)               __strt(value, ptr)
 384:F4_CORE/core_cmInstr.h **** 
 385:F4_CORE/core_cmInstr.h **** 
 386:F4_CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (32 bit)
 387:F4_CORE/core_cmInstr.h **** 
 388:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 32 bit values.
 389:F4_CORE/core_cmInstr.h **** 
 390:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 391:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 392:F4_CORE/core_cmInstr.h ****  */
 393:F4_CORE/core_cmInstr.h **** #define __STRT(value, ptr)                __strt(value, ptr)
 394:F4_CORE/core_cmInstr.h **** 
 395:F4_CORE/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300) */
 396:F4_CORE/core_cmInstr.h **** 
 397:F4_CORE/core_cmInstr.h **** 
 398:F4_CORE/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 399:F4_CORE/core_cmInstr.h **** /* GNU gcc specific functions */
 400:F4_CORE/core_cmInstr.h **** 
 401:F4_CORE/core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 402:F4_CORE/core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 403:F4_CORE/core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 404:F4_CORE/core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 405:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 406:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 407:F4_CORE/core_cmInstr.h **** #else
 408:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 409:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 410:F4_CORE/core_cmInstr.h **** #endif
 411:F4_CORE/core_cmInstr.h **** 
ARM GAS  /tmp/ccSqQPCW.s 			page 12


 412:F4_CORE/core_cmInstr.h **** /** \brief  No Operation
 413:F4_CORE/core_cmInstr.h **** 
 414:F4_CORE/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 415:F4_CORE/core_cmInstr.h ****  */
 416:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 417:F4_CORE/core_cmInstr.h **** {
 418:F4_CORE/core_cmInstr.h ****   __ASM volatile ("nop");
 419:F4_CORE/core_cmInstr.h **** }
 420:F4_CORE/core_cmInstr.h **** 
 421:F4_CORE/core_cmInstr.h **** 
 422:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Interrupt
 423:F4_CORE/core_cmInstr.h **** 
 424:F4_CORE/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 425:F4_CORE/core_cmInstr.h ****     until one of a number of events occurs.
 426:F4_CORE/core_cmInstr.h ****  */
 427:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 428:F4_CORE/core_cmInstr.h **** {
 429:F4_CORE/core_cmInstr.h ****   __ASM volatile ("wfi");
 430:F4_CORE/core_cmInstr.h **** }
 431:F4_CORE/core_cmInstr.h **** 
 432:F4_CORE/core_cmInstr.h **** 
 433:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Event
 434:F4_CORE/core_cmInstr.h **** 
 435:F4_CORE/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 436:F4_CORE/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 437:F4_CORE/core_cmInstr.h ****  */
 438:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 439:F4_CORE/core_cmInstr.h **** {
 440:F4_CORE/core_cmInstr.h ****   __ASM volatile ("wfe");
 441:F4_CORE/core_cmInstr.h **** }
 442:F4_CORE/core_cmInstr.h **** 
 443:F4_CORE/core_cmInstr.h **** 
 444:F4_CORE/core_cmInstr.h **** /** \brief  Send Event
 445:F4_CORE/core_cmInstr.h **** 
 446:F4_CORE/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 447:F4_CORE/core_cmInstr.h ****  */
 448:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 449:F4_CORE/core_cmInstr.h **** {
 450:F4_CORE/core_cmInstr.h ****   __ASM volatile ("sev");
 451:F4_CORE/core_cmInstr.h **** }
 452:F4_CORE/core_cmInstr.h **** 
 453:F4_CORE/core_cmInstr.h **** 
 454:F4_CORE/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 455:F4_CORE/core_cmInstr.h **** 
 456:F4_CORE/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 457:F4_CORE/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 458:F4_CORE/core_cmInstr.h ****     memory, after the instruction has been completed.
 459:F4_CORE/core_cmInstr.h ****  */
 460:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 461:F4_CORE/core_cmInstr.h **** {
 462:F4_CORE/core_cmInstr.h ****   __ASM volatile ("isb 0xF":::"memory");
 463:F4_CORE/core_cmInstr.h **** }
 464:F4_CORE/core_cmInstr.h **** 
 465:F4_CORE/core_cmInstr.h **** 
 466:F4_CORE/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 467:F4_CORE/core_cmInstr.h **** 
 468:F4_CORE/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
ARM GAS  /tmp/ccSqQPCW.s 			page 13


 469:F4_CORE/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 470:F4_CORE/core_cmInstr.h ****  */
 471:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 472:F4_CORE/core_cmInstr.h **** {
 473:F4_CORE/core_cmInstr.h ****   __ASM volatile ("dsb 0xF":::"memory");
 474:F4_CORE/core_cmInstr.h **** }
 475:F4_CORE/core_cmInstr.h **** 
 476:F4_CORE/core_cmInstr.h **** 
 477:F4_CORE/core_cmInstr.h **** /** \brief  Data Memory Barrier
 478:F4_CORE/core_cmInstr.h **** 
 479:F4_CORE/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 480:F4_CORE/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 481:F4_CORE/core_cmInstr.h ****  */
 482:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 483:F4_CORE/core_cmInstr.h **** {
 484:F4_CORE/core_cmInstr.h ****   __ASM volatile ("dmb 0xF":::"memory");
 485:F4_CORE/core_cmInstr.h **** }
 486:F4_CORE/core_cmInstr.h **** 
 487:F4_CORE/core_cmInstr.h **** 
 488:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 489:F4_CORE/core_cmInstr.h **** 
 490:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in integer value.
 491:F4_CORE/core_cmInstr.h **** 
 492:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 493:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 494:F4_CORE/core_cmInstr.h ****  */
 495:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 496:F4_CORE/core_cmInstr.h **** {
 497:F4_CORE/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 498:F4_CORE/core_cmInstr.h ****   return __builtin_bswap32(value);
  87              		.loc 2 498 0
  88 0032 1BBA     		rev	r3, r3
  89              	.LVL9:
  90              	.LBE31:
  91              	.LBE30:
  92              		.loc 1 131 0
  93 0034 0493     		str	r3, [sp, #16]
  94              	.LVL10:
 132:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 133:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
  95              		.loc 1 133 0
  96 0036 6B68     		ldr	r3, [r5, #4]
  97              	.LVL11:
  98              	.LBB32:
  99              	.LBB33:
 100              		.loc 2 498 0
 101 0038 1BBA     		rev	r3, r3
 102              	.LVL12:
 103              	.LBE33:
 104              	.LBE32:
 105              		.loc 1 133 0
 106 003a 0593     		str	r3, [sp, #20]
 107              	.LVL13:
 134:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 135:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 108              		.loc 1 135 0
 109 003c AB68     		ldr	r3, [r5, #8]
ARM GAS  /tmp/ccSqQPCW.s 			page 14


 110              	.LVL14:
 111              	.LBB34:
 112              	.LBB35:
 113              		.loc 2 498 0
 114 003e 1BBA     		rev	r3, r3
 115              	.LVL15:
 116              	.LBE35:
 117              	.LBE34:
 118              		.loc 1 135 0
 119 0040 0693     		str	r3, [sp, #24]
 120              	.LVL16:
 136:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 137:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 121              		.loc 1 137 0
 122 0042 EB68     		ldr	r3, [r5, #12]
 123              	.LVL17:
 124              	.LBB36:
 125              	.LBB37:
 126              		.loc 2 498 0
 127 0044 1BBA     		rev	r3, r3
 128              	.LVL18:
 129              	.LBE37:
 130              	.LBE36:
 131              		.loc 1 137 0
 132 0046 0793     		str	r3, [sp, #28]
 133              	.LVL19:
 138:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 139:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 134              		.loc 1 139 0
 135 0048 2B69     		ldr	r3, [r5, #16]
 136              	.LVL20:
 137              	.LBB38:
 138              	.LBB39:
 139              		.loc 2 498 0
 140 004a 1BBA     		rev	r3, r3
 141              	.LVL21:
 142              	.LBE39:
 143              	.LBE38:
 144              		.loc 1 139 0
 145 004c 0893     		str	r3, [sp, #32]
 146              	.LVL22:
 140:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 141:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 147              		.loc 1 141 0
 148 004e 6B69     		ldr	r3, [r5, #20]
 149              	.LVL23:
 150              	.LBB40:
 151              	.LBB41:
 152              		.loc 2 498 0
 153 0050 1BBA     		rev	r3, r3
 154              	.LVL24:
 155              	.LBE41:
 156              	.LBE40:
 157              		.loc 1 141 0
 158 0052 0993     		str	r3, [sp, #36]
 142:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 159              		.loc 1 142 0
ARM GAS  /tmp/ccSqQPCW.s 			page 15


 160 0054 02A8     		add	r0, sp, #8
 161 0056 FFF7FEFF 		bl	CRYP_KeyInit
 162              	.LVL25:
 143:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 144:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Flush IN/OUT FIFO */
 145:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_FIFOFlush();
 163              		.loc 1 145 0
 164 005a FFF7FEFF 		bl	CRYP_FIFOFlush
 165              	.LVL26:
 146:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 147:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Enable Crypto processor */
 148:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_Cmd(ENABLE);
 166              		.loc 1 148 0
 167 005e 0120     		movs	r0, #1
 168 0060 FFF7FEFF 		bl	CRYP_Cmd
 169              	.LVL27:
 149:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 150:FWLIB/src/stm32f4xx_cryp_tdes.c ****   if(CRYP_GetCmdStatus() == DISABLE)
 170              		.loc 1 150 0
 171 0064 FFF7FEFF 		bl	CRYP_GetCmdStatus
 172              	.LVL28:
 173 0068 88B3     		cbz	r0, .L11
 174 006a 0025     		movs	r5, #0
 175              	.LVL29:
 176 006c 0126     		movs	r6, #1
 177 006e 05E0     		b	.L5
 178              	.LVL30:
 179              	.L14:
 119:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 180              		.loc 1 119 0
 181 0070 0023     		movs	r3, #0
 182 0072 0A93     		str	r3, [sp, #40]
 183 0074 D5E7     		b	.L3
 184              	.LVL31:
 185              	.L6:
 151:FWLIB/src/stm32f4xx_cryp_tdes.c ****   {
 152:FWLIB/src/stm32f4xx_cryp_tdes.c ****     /* The CRYP peripheral clock is not enabled or the device doesn't embed 
 153:FWLIB/src/stm32f4xx_cryp_tdes.c ****     the CRYP peripheral (please check the device sales type. */
 154:FWLIB/src/stm32f4xx_cryp_tdes.c ****     status = ERROR;
 155:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 156:FWLIB/src/stm32f4xx_cryp_tdes.c ****   else
 157:FWLIB/src/stm32f4xx_cryp_tdes.c ****   {
 158:FWLIB/src/stm32f4xx_cryp_tdes.c ****     for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 159:FWLIB/src/stm32f4xx_cryp_tdes.c ****     {
 160:FWLIB/src/stm32f4xx_cryp_tdes.c ****       /* Write the Input block in the Input FIFO */
 161:FWLIB/src/stm32f4xx_cryp_tdes.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 162:FWLIB/src/stm32f4xx_cryp_tdes.c ****       inputaddr+=4;
 163:FWLIB/src/stm32f4xx_cryp_tdes.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 164:FWLIB/src/stm32f4xx_cryp_tdes.c ****       inputaddr+=4;
 165:FWLIB/src/stm32f4xx_cryp_tdes.c ****       
 166:FWLIB/src/stm32f4xx_cryp_tdes.c ****       /* Wait until the complete message has been processed */
 167:FWLIB/src/stm32f4xx_cryp_tdes.c ****       counter = 0;
 168:FWLIB/src/stm32f4xx_cryp_tdes.c ****       do
 169:FWLIB/src/stm32f4xx_cryp_tdes.c ****       {
 170:FWLIB/src/stm32f4xx_cryp_tdes.c ****         busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 171:FWLIB/src/stm32f4xx_cryp_tdes.c ****         counter++;
 172:FWLIB/src/stm32f4xx_cryp_tdes.c ****       }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
ARM GAS  /tmp/ccSqQPCW.s 			page 16


 173:FWLIB/src/stm32f4xx_cryp_tdes.c ****       
 174:FWLIB/src/stm32f4xx_cryp_tdes.c ****       if (busystatus != RESET)
 186              		.loc 1 174 0
 187 0076 DAB1     		cbz	r2, .L15
 175:FWLIB/src/stm32f4xx_cryp_tdes.c ****       {
 176:FWLIB/src/stm32f4xx_cryp_tdes.c ****         status = ERROR;
 188              		.loc 1 176 0
 189 0078 0026     		movs	r6, #0
 190              	.LVL32:
 191              	.L8:
 158:FWLIB/src/stm32f4xx_cryp_tdes.c ****     {
 192              		.loc 1 158 0 discriminator 2
 193 007a 0835     		adds	r5, r5, #8
 194              	.LVL33:
 195              	.L5:
 158:FWLIB/src/stm32f4xx_cryp_tdes.c ****     {
 196              		.loc 1 158 0 is_stmt 0 discriminator 1
 197 007c 4545     		cmp	r5, r8
 198 007e 1FD2     		bcs	.L9
 158:FWLIB/src/stm32f4xx_cryp_tdes.c ****     {
 199              		.loc 1 158 0 discriminator 3
 200 0080 F6B1     		cbz	r6, .L9
 161:FWLIB/src/stm32f4xx_cryp_tdes.c ****       inputaddr+=4;
 201              		.loc 1 161 0 is_stmt 1
 202 0082 2068     		ldr	r0, [r4]
 203 0084 FFF7FEFF 		bl	CRYP_DataIn
 204              	.LVL34:
 163:FWLIB/src/stm32f4xx_cryp_tdes.c ****       inputaddr+=4;
 205              		.loc 1 163 0
 206 0088 6068     		ldr	r0, [r4, #4]
 207 008a FFF7FEFF 		bl	CRYP_DataIn
 208              	.LVL35:
 164:FWLIB/src/stm32f4xx_cryp_tdes.c ****       
 209              		.loc 1 164 0
 210 008e 0834     		adds	r4, r4, #8
 211              	.LVL36:
 167:FWLIB/src/stm32f4xx_cryp_tdes.c ****       do
 212              		.loc 1 167 0
 213 0090 0023     		movs	r3, #0
 214 0092 0193     		str	r3, [sp, #4]
 215              	.L7:
 170:FWLIB/src/stm32f4xx_cryp_tdes.c ****         counter++;
 216              		.loc 1 170 0 discriminator 2
 217 0094 1020     		movs	r0, #16
 218 0096 FFF7FEFF 		bl	CRYP_GetFlagStatus
 219              	.LVL37:
 220 009a 0246     		mov	r2, r0
 221              	.LVL38:
 171:FWLIB/src/stm32f4xx_cryp_tdes.c ****       }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 222              		.loc 1 171 0 discriminator 2
 223 009c 019B     		ldr	r3, [sp, #4]
 224 009e 0133     		adds	r3, r3, #1
 225 00a0 0193     		str	r3, [sp, #4]
 172:FWLIB/src/stm32f4xx_cryp_tdes.c ****       
 226              		.loc 1 172 0 discriminator 2
 227 00a2 019B     		ldr	r3, [sp, #4]
 228 00a4 B3F5803F 		cmp	r3, #65536
ARM GAS  /tmp/ccSqQPCW.s 			page 17


 229 00a8 E5D0     		beq	.L6
 172:FWLIB/src/stm32f4xx_cryp_tdes.c ****       
 230              		.loc 1 172 0 is_stmt 0 discriminator 1
 231 00aa 0028     		cmp	r0, #0
 232 00ac F2D1     		bne	.L7
 233 00ae E2E7     		b	.L6
 234              	.L15:
 177:FWLIB/src/stm32f4xx_cryp_tdes.c ****       }
 178:FWLIB/src/stm32f4xx_cryp_tdes.c ****       else
 179:FWLIB/src/stm32f4xx_cryp_tdes.c ****       {
 180:FWLIB/src/stm32f4xx_cryp_tdes.c ****         
 181:FWLIB/src/stm32f4xx_cryp_tdes.c ****         /* Read the Output block from the Output FIFO */
 182:FWLIB/src/stm32f4xx_cryp_tdes.c ****         *(uint32_t*)(outputaddr) = CRYP_DataOut();
 235              		.loc 1 182 0 is_stmt 1
 236 00b0 FFF7FEFF 		bl	CRYP_DataOut
 237              	.LVL39:
 238 00b4 3860     		str	r0, [r7]
 239              	.LVL40:
 183:FWLIB/src/stm32f4xx_cryp_tdes.c ****         outputaddr+=4;
 184:FWLIB/src/stm32f4xx_cryp_tdes.c ****         *(uint32_t*)(outputaddr) = CRYP_DataOut();
 240              		.loc 1 184 0
 241 00b6 FFF7FEFF 		bl	CRYP_DataOut
 242              	.LVL41:
 243 00ba 7860     		str	r0, [r7, #4]
 185:FWLIB/src/stm32f4xx_cryp_tdes.c ****         outputaddr+=4;
 244              		.loc 1 185 0
 245 00bc 0837     		adds	r7, r7, #8
 246              	.LVL42:
 247 00be DCE7     		b	.L8
 248              	.L9:
 186:FWLIB/src/stm32f4xx_cryp_tdes.c ****       }
 187:FWLIB/src/stm32f4xx_cryp_tdes.c ****     }
 188:FWLIB/src/stm32f4xx_cryp_tdes.c ****     
 189:FWLIB/src/stm32f4xx_cryp_tdes.c ****     /* Disable Crypto */
 190:FWLIB/src/stm32f4xx_cryp_tdes.c ****     CRYP_Cmd(DISABLE);
 249              		.loc 1 190 0
 250 00c0 0020     		movs	r0, #0
 251 00c2 FFF7FEFF 		bl	CRYP_Cmd
 252              	.LVL43:
 253              	.L4:
 191:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 192:FWLIB/src/stm32f4xx_cryp_tdes.c ****   return status; 
 193:FWLIB/src/stm32f4xx_cryp_tdes.c **** }
 254              		.loc 1 193 0
 255 00c6 3046     		mov	r0, r6
 256 00c8 0EB0     		add	sp, sp, #56
 257              	.LCFI2:
 258              		.cfi_remember_state
 259              		.cfi_def_cfa_offset 24
 260              		@ sp needed
 261 00ca BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 262              	.LVL44:
 263              	.L11:
 264              	.LCFI3:
 265              		.cfi_restore_state
 154:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 266              		.loc 1 154 0
ARM GAS  /tmp/ccSqQPCW.s 			page 18


 267 00ce 0026     		movs	r6, #0
 268 00d0 F9E7     		b	.L4
 269              		.cfi_endproc
 270              	.LFE123:
 272              		.section	.text.CRYP_TDES_CBC,"ax",%progbits
 273              		.align	1
 274              		.global	CRYP_TDES_CBC
 275              		.syntax unified
 276              		.thumb
 277              		.thumb_func
 278              		.fpu fpv4-sp-d16
 280              	CRYP_TDES_CBC:
 281              	.LFB124:
 194:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 195:FWLIB/src/stm32f4xx_cryp_tdes.c **** /**
 196:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @brief  Encrypt and decrypt using TDES in CBC Mode
 197:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Mode: encryption or decryption Mode.
 198:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *           This parameter can be one of the following values:
 199:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *            @arg MODE_ENCRYPT: Encryption
 200:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *            @arg MODE_DECRYPT: Decryption
 201:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Key: Key used for TDES algorithm.
 202:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  InitVectors: Initialisation Vectors used for TDES algorithm.
 203:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Input: pointer to the Input buffer.
 204:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 8.
 205:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Output: pointer to the returned buffer.
 206:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @retval An ErrorStatus enumeration value:
 207:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *          - SUCCESS: Operation done
 208:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *          - ERROR: Operation failed
 209:FWLIB/src/stm32f4xx_cryp_tdes.c ****   */
 210:FWLIB/src/stm32f4xx_cryp_tdes.c **** ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
 211:FWLIB/src/stm32f4xx_cryp_tdes.c ****                           uint8_t *Input, uint32_t Ilength, uint8_t *Output)
 212:FWLIB/src/stm32f4xx_cryp_tdes.c **** {
 282              		.loc 1 212 0
 283              		.cfi_startproc
 284              		@ args = 8, pretend = 0, frame = 72
 285              		@ frame_needed = 0, uses_anonymous_args = 0
 286              	.LVL45:
 287 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 288              	.LCFI4:
 289              		.cfi_def_cfa_offset 28
 290              		.cfi_offset 4, -28
 291              		.cfi_offset 5, -24
 292              		.cfi_offset 6, -20
 293              		.cfi_offset 7, -16
 294              		.cfi_offset 8, -12
 295              		.cfi_offset 9, -8
 296              		.cfi_offset 14, -4
 297 0004 93B0     		sub	sp, sp, #76
 298              	.LCFI5:
 299              		.cfi_def_cfa_offset 104
 300 0006 8146     		mov	r9, r0
 301 0008 0D46     		mov	r5, r1
 302 000a 1646     		mov	r6, r2
 303 000c DDF86880 		ldr	r8, [sp, #104]
 213:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_InitTypeDef TDES_CRYP_InitStructure;
 214:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
 215:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
ARM GAS  /tmp/ccSqQPCW.s 			page 19


 216:FWLIB/src/stm32f4xx_cryp_tdes.c ****   __IO uint32_t counter = 0;
 304              		.loc 1 216 0
 305 0010 0022     		movs	r2, #0
 306              	.LVL46:
 307 0012 0192     		str	r2, [sp, #4]
 308              	.LVL47:
 217:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t busystatus = 0;
 218:FWLIB/src/stm32f4xx_cryp_tdes.c ****   ErrorStatus status = SUCCESS;
 219:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 220:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t inputaddr  = (uint32_t)Input;
 309              		.loc 1 220 0
 310 0014 1C46     		mov	r4, r3
 311              	.LVL48:
 221:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t outputaddr = (uint32_t)Output;
 312              		.loc 1 221 0
 313 0016 1B9F     		ldr	r7, [sp, #108]
 314              	.LVL49:
 222:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t ivaddr     = (uint32_t)InitVectors;
 223:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t i = 0;
 224:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 225:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Crypto structures initialisation*/
 226:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 315              		.loc 1 226 0
 316 0018 06A8     		add	r0, sp, #24
 317              	.LVL50:
 318 001a FFF7FEFF 		bl	CRYP_KeyStructInit
 319              	.LVL51:
 227:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 228:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Crypto Init for Encryption process */
 229:FWLIB/src/stm32f4xx_cryp_tdes.c ****   if(Mode == MODE_ENCRYPT) /* TDES encryption */
 320              		.loc 1 229 0
 321 001e B9F1010F 		cmp	r9, #1
 322 0022 31D0     		beq	.L29
 230:FWLIB/src/stm32f4xx_cryp_tdes.c ****   {
 231:FWLIB/src/stm32f4xx_cryp_tdes.c ****     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 232:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 233:FWLIB/src/stm32f4xx_cryp_tdes.c ****   else
 234:FWLIB/src/stm32f4xx_cryp_tdes.c ****   {
 235:FWLIB/src/stm32f4xx_cryp_tdes.c ****     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 323              		.loc 1 235 0
 324 0024 0423     		movs	r3, #4
 325 0026 0E93     		str	r3, [sp, #56]
 326              	.L18:
 236:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 237:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
 327              		.loc 1 237 0
 328 0028 0823     		movs	r3, #8
 329 002a 0F93     		str	r3, [sp, #60]
 238:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 330              		.loc 1 238 0
 331 002c 8023     		movs	r3, #128
 332 002e 1093     		str	r3, [sp, #64]
 239:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 240:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_Init(&TDES_CRYP_InitStructure);
 333              		.loc 1 240 0
 334 0030 0EA8     		add	r0, sp, #56
 335 0032 FFF7FEFF 		bl	CRYP_Init
ARM GAS  /tmp/ccSqQPCW.s 			page 20


 336              	.LVL52:
 241:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 242:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Key Initialisation */
 243:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 337              		.loc 1 243 0
 338 0036 2B68     		ldr	r3, [r5]
 339              	.LVL53:
 340              	.LBB42:
 341              	.LBB43:
 342              		.loc 2 498 0
 343 0038 1BBA     		rev	r3, r3
 344              	.LVL54:
 345              	.LBE43:
 346              	.LBE42:
 347              		.loc 1 243 0
 348 003a 0893     		str	r3, [sp, #32]
 349              	.LVL55:
 244:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 245:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 350              		.loc 1 245 0
 351 003c 6B68     		ldr	r3, [r5, #4]
 352              	.LVL56:
 353              	.LBB44:
 354              	.LBB45:
 355              		.loc 2 498 0
 356 003e 1BBA     		rev	r3, r3
 357              	.LVL57:
 358              	.LBE45:
 359              	.LBE44:
 360              		.loc 1 245 0
 361 0040 0993     		str	r3, [sp, #36]
 362              	.LVL58:
 246:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 247:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 363              		.loc 1 247 0
 364 0042 AB68     		ldr	r3, [r5, #8]
 365              	.LVL59:
 366              	.LBB46:
 367              	.LBB47:
 368              		.loc 2 498 0
 369 0044 1BBA     		rev	r3, r3
 370              	.LVL60:
 371              	.LBE47:
 372              	.LBE46:
 373              		.loc 1 247 0
 374 0046 0A93     		str	r3, [sp, #40]
 375              	.LVL61:
 248:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 249:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 376              		.loc 1 249 0
 377 0048 EB68     		ldr	r3, [r5, #12]
 378              	.LVL62:
 379              	.LBB48:
 380              	.LBB49:
 381              		.loc 2 498 0
 382 004a 1BBA     		rev	r3, r3
 383              	.LVL63:
ARM GAS  /tmp/ccSqQPCW.s 			page 21


 384              	.LBE49:
 385              	.LBE48:
 386              		.loc 1 249 0
 387 004c 0B93     		str	r3, [sp, #44]
 388              	.LVL64:
 250:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 251:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 389              		.loc 1 251 0
 390 004e 2B69     		ldr	r3, [r5, #16]
 391              	.LVL65:
 392              	.LBB50:
 393              	.LBB51:
 394              		.loc 2 498 0
 395 0050 1BBA     		rev	r3, r3
 396              	.LVL66:
 397              	.LBE51:
 398              	.LBE50:
 399              		.loc 1 251 0
 400 0052 0C93     		str	r3, [sp, #48]
 401              	.LVL67:
 252:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 253:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 402              		.loc 1 253 0
 403 0054 6B69     		ldr	r3, [r5, #20]
 404              	.LVL68:
 405              	.LBB52:
 406              	.LBB53:
 407              		.loc 2 498 0
 408 0056 1BBA     		rev	r3, r3
 409              	.LVL69:
 410              	.LBE53:
 411              	.LBE52:
 412              		.loc 1 253 0
 413 0058 0D93     		str	r3, [sp, #52]
 254:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 414              		.loc 1 254 0
 415 005a 06A8     		add	r0, sp, #24
 416 005c FFF7FEFF 		bl	CRYP_KeyInit
 417              	.LVL70:
 255:FWLIB/src/stm32f4xx_cryp_tdes.c ****   
 256:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Initialization Vectors */
 257:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 418              		.loc 1 257 0
 419 0060 3368     		ldr	r3, [r6]
 420              	.LVL71:
 421              	.LBB54:
 422              	.LBB55:
 423              		.loc 2 498 0
 424 0062 1BBA     		rev	r3, r3
 425              	.LVL72:
 426              	.LBE55:
 427              	.LBE54:
 428              		.loc 1 257 0
 429 0064 0293     		str	r3, [sp, #8]
 430              	.LVL73:
 258:FWLIB/src/stm32f4xx_cryp_tdes.c ****   ivaddr+=4;
 259:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
ARM GAS  /tmp/ccSqQPCW.s 			page 22


 431              		.loc 1 259 0
 432 0066 7368     		ldr	r3, [r6, #4]
 433              	.LVL74:
 434              	.LBB56:
 435              	.LBB57:
 436              		.loc 2 498 0
 437 0068 1BBA     		rev	r3, r3
 438              	.LVL75:
 439              	.LBE57:
 440              	.LBE56:
 441              		.loc 1 259 0
 442 006a 0393     		str	r3, [sp, #12]
 260:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_IVInit(&TDES_CRYP_IVInitStructure);
 443              		.loc 1 260 0
 444 006c 02A8     		add	r0, sp, #8
 445 006e FFF7FEFF 		bl	CRYP_IVInit
 446              	.LVL76:
 261:FWLIB/src/stm32f4xx_cryp_tdes.c ****   
 262:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Flush IN/OUT FIFO */
 263:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_FIFOFlush();
 447              		.loc 1 263 0
 448 0072 FFF7FEFF 		bl	CRYP_FIFOFlush
 449              	.LVL77:
 264:FWLIB/src/stm32f4xx_cryp_tdes.c ****   
 265:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Enable Crypto processor */
 266:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_Cmd(ENABLE);
 450              		.loc 1 266 0
 451 0076 0120     		movs	r0, #1
 452 0078 FFF7FEFF 		bl	CRYP_Cmd
 453              	.LVL78:
 267:FWLIB/src/stm32f4xx_cryp_tdes.c ****   
 268:FWLIB/src/stm32f4xx_cryp_tdes.c ****   if(CRYP_GetCmdStatus() == DISABLE)
 454              		.loc 1 268 0
 455 007c FFF7FEFF 		bl	CRYP_GetCmdStatus
 456              	.LVL79:
 457 0080 88B3     		cbz	r0, .L26
 458 0082 0025     		movs	r5, #0
 459              	.LVL80:
 460 0084 0126     		movs	r6, #1
 461              	.LVL81:
 462 0086 05E0     		b	.L20
 463              	.LVL82:
 464              	.L29:
 231:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 465              		.loc 1 231 0
 466 0088 0023     		movs	r3, #0
 467 008a 0E93     		str	r3, [sp, #56]
 468 008c CCE7     		b	.L18
 469              	.LVL83:
 470              	.L21:
 269:FWLIB/src/stm32f4xx_cryp_tdes.c ****   {
 270:FWLIB/src/stm32f4xx_cryp_tdes.c ****     /* The CRYP peripheral clock is not enabled or the device doesn't embed 
 271:FWLIB/src/stm32f4xx_cryp_tdes.c ****     the CRYP peripheral (please check the device sales type. */
 272:FWLIB/src/stm32f4xx_cryp_tdes.c ****     status = ERROR;
 273:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 274:FWLIB/src/stm32f4xx_cryp_tdes.c ****   else
 275:FWLIB/src/stm32f4xx_cryp_tdes.c ****   {
ARM GAS  /tmp/ccSqQPCW.s 			page 23


 276:FWLIB/src/stm32f4xx_cryp_tdes.c ****     for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 277:FWLIB/src/stm32f4xx_cryp_tdes.c ****     {
 278:FWLIB/src/stm32f4xx_cryp_tdes.c ****       /* Write the Input block in the Input FIFO */
 279:FWLIB/src/stm32f4xx_cryp_tdes.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 280:FWLIB/src/stm32f4xx_cryp_tdes.c ****       inputaddr+=4;
 281:FWLIB/src/stm32f4xx_cryp_tdes.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 282:FWLIB/src/stm32f4xx_cryp_tdes.c ****       inputaddr+=4;
 283:FWLIB/src/stm32f4xx_cryp_tdes.c ****       
 284:FWLIB/src/stm32f4xx_cryp_tdes.c ****       /* Wait until the complete message has been processed */
 285:FWLIB/src/stm32f4xx_cryp_tdes.c ****       counter = 0;
 286:FWLIB/src/stm32f4xx_cryp_tdes.c ****       do
 287:FWLIB/src/stm32f4xx_cryp_tdes.c ****       {
 288:FWLIB/src/stm32f4xx_cryp_tdes.c ****         busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 289:FWLIB/src/stm32f4xx_cryp_tdes.c ****         counter++;
 290:FWLIB/src/stm32f4xx_cryp_tdes.c ****       }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 291:FWLIB/src/stm32f4xx_cryp_tdes.c ****       
 292:FWLIB/src/stm32f4xx_cryp_tdes.c ****       if (busystatus != RESET)
 471              		.loc 1 292 0
 472 008e DAB1     		cbz	r2, .L30
 293:FWLIB/src/stm32f4xx_cryp_tdes.c ****       {
 294:FWLIB/src/stm32f4xx_cryp_tdes.c ****         status = ERROR;
 473              		.loc 1 294 0
 474 0090 0026     		movs	r6, #0
 475              	.LVL84:
 476              	.L23:
 276:FWLIB/src/stm32f4xx_cryp_tdes.c ****     {
 477              		.loc 1 276 0 discriminator 2
 478 0092 0835     		adds	r5, r5, #8
 479              	.LVL85:
 480              	.L20:
 276:FWLIB/src/stm32f4xx_cryp_tdes.c ****     {
 481              		.loc 1 276 0 is_stmt 0 discriminator 1
 482 0094 4545     		cmp	r5, r8
 483 0096 1FD2     		bcs	.L24
 276:FWLIB/src/stm32f4xx_cryp_tdes.c ****     {
 484              		.loc 1 276 0 discriminator 3
 485 0098 F6B1     		cbz	r6, .L24
 279:FWLIB/src/stm32f4xx_cryp_tdes.c ****       inputaddr+=4;
 486              		.loc 1 279 0 is_stmt 1
 487 009a 2068     		ldr	r0, [r4]
 488 009c FFF7FEFF 		bl	CRYP_DataIn
 489              	.LVL86:
 281:FWLIB/src/stm32f4xx_cryp_tdes.c ****       inputaddr+=4;
 490              		.loc 1 281 0
 491 00a0 6068     		ldr	r0, [r4, #4]
 492 00a2 FFF7FEFF 		bl	CRYP_DataIn
 493              	.LVL87:
 282:FWLIB/src/stm32f4xx_cryp_tdes.c ****       
 494              		.loc 1 282 0
 495 00a6 0834     		adds	r4, r4, #8
 496              	.LVL88:
 285:FWLIB/src/stm32f4xx_cryp_tdes.c ****       do
 497              		.loc 1 285 0
 498 00a8 0023     		movs	r3, #0
 499 00aa 0193     		str	r3, [sp, #4]
 500              	.L22:
 288:FWLIB/src/stm32f4xx_cryp_tdes.c ****         counter++;
ARM GAS  /tmp/ccSqQPCW.s 			page 24


 501              		.loc 1 288 0 discriminator 2
 502 00ac 1020     		movs	r0, #16
 503 00ae FFF7FEFF 		bl	CRYP_GetFlagStatus
 504              	.LVL89:
 505 00b2 0246     		mov	r2, r0
 506              	.LVL90:
 289:FWLIB/src/stm32f4xx_cryp_tdes.c ****       }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 507              		.loc 1 289 0 discriminator 2
 508 00b4 019B     		ldr	r3, [sp, #4]
 509 00b6 0133     		adds	r3, r3, #1
 510 00b8 0193     		str	r3, [sp, #4]
 290:FWLIB/src/stm32f4xx_cryp_tdes.c ****       
 511              		.loc 1 290 0 discriminator 2
 512 00ba 019B     		ldr	r3, [sp, #4]
 513 00bc B3F5803F 		cmp	r3, #65536
 514 00c0 E5D0     		beq	.L21
 290:FWLIB/src/stm32f4xx_cryp_tdes.c ****       
 515              		.loc 1 290 0 is_stmt 0 discriminator 1
 516 00c2 0028     		cmp	r0, #0
 517 00c4 F2D1     		bne	.L22
 518 00c6 E2E7     		b	.L21
 519              	.L30:
 295:FWLIB/src/stm32f4xx_cryp_tdes.c ****       }
 296:FWLIB/src/stm32f4xx_cryp_tdes.c ****       else
 297:FWLIB/src/stm32f4xx_cryp_tdes.c ****       {
 298:FWLIB/src/stm32f4xx_cryp_tdes.c ****         
 299:FWLIB/src/stm32f4xx_cryp_tdes.c ****         /* Read the Output block from the Output FIFO */
 300:FWLIB/src/stm32f4xx_cryp_tdes.c ****         *(uint32_t*)(outputaddr) = CRYP_DataOut();
 520              		.loc 1 300 0 is_stmt 1
 521 00c8 FFF7FEFF 		bl	CRYP_DataOut
 522              	.LVL91:
 523 00cc 3860     		str	r0, [r7]
 524              	.LVL92:
 301:FWLIB/src/stm32f4xx_cryp_tdes.c ****         outputaddr+=4;
 302:FWLIB/src/stm32f4xx_cryp_tdes.c ****         *(uint32_t*)(outputaddr) = CRYP_DataOut();
 525              		.loc 1 302 0
 526 00ce FFF7FEFF 		bl	CRYP_DataOut
 527              	.LVL93:
 528 00d2 7860     		str	r0, [r7, #4]
 303:FWLIB/src/stm32f4xx_cryp_tdes.c ****         outputaddr+=4;
 529              		.loc 1 303 0
 530 00d4 0837     		adds	r7, r7, #8
 531              	.LVL94:
 532 00d6 DCE7     		b	.L23
 533              	.L24:
 304:FWLIB/src/stm32f4xx_cryp_tdes.c ****       }
 305:FWLIB/src/stm32f4xx_cryp_tdes.c ****     }
 306:FWLIB/src/stm32f4xx_cryp_tdes.c ****     
 307:FWLIB/src/stm32f4xx_cryp_tdes.c ****     /* Disable Crypto */
 308:FWLIB/src/stm32f4xx_cryp_tdes.c ****     CRYP_Cmd(DISABLE);
 534              		.loc 1 308 0
 535 00d8 0020     		movs	r0, #0
 536 00da FFF7FEFF 		bl	CRYP_Cmd
 537              	.LVL95:
 538              	.L19:
 309:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 310:FWLIB/src/stm32f4xx_cryp_tdes.c ****   return status; 
ARM GAS  /tmp/ccSqQPCW.s 			page 25


 311:FWLIB/src/stm32f4xx_cryp_tdes.c **** }
 539              		.loc 1 311 0
 540 00de 3046     		mov	r0, r6
 541 00e0 13B0     		add	sp, sp, #76
 542              	.LCFI6:
 543              		.cfi_remember_state
 544              		.cfi_def_cfa_offset 28
 545              		@ sp needed
 546 00e2 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 547              	.LVL96:
 548              	.L26:
 549              	.LCFI7:
 550              		.cfi_restore_state
 272:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 551              		.loc 1 272 0
 552 00e6 0026     		movs	r6, #0
 553              	.LVL97:
 554 00e8 F9E7     		b	.L19
 555              		.cfi_endproc
 556              	.LFE124:
 558              		.text
 559              	.Letext0:
 560              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 561              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 562              		.file 5 "F4_CORE/core_cm4.h"
 563              		.file 6 "USER/system_stm32f4xx.h"
 564              		.file 7 "USER/stm32f4xx.h"
 565              		.file 8 "FWLIB/inc/stm32f4xx_cryp.h"
ARM GAS  /tmp/ccSqQPCW.s 			page 26


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_cryp_tdes.c
     /tmp/ccSqQPCW.s:18     .text.CRYP_TDES_ECB:0000000000000000 $t
     /tmp/ccSqQPCW.s:25     .text.CRYP_TDES_ECB:0000000000000000 CRYP_TDES_ECB
     /tmp/ccSqQPCW.s:273    .text.CRYP_TDES_CBC:0000000000000000 $t
     /tmp/ccSqQPCW.s:280    .text.CRYP_TDES_CBC:0000000000000000 CRYP_TDES_CBC
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
CRYP_KeyStructInit
CRYP_Init
CRYP_KeyInit
CRYP_FIFOFlush
CRYP_Cmd
CRYP_GetCmdStatus
CRYP_DataIn
CRYP_GetFlagStatus
CRYP_DataOut
CRYP_IVInit
