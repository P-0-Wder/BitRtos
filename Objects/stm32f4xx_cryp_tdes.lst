ARM GAS  C:\Users\why\AppData\Local\Temp\cclZkDGG.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"stm32f4xx_cryp_tdes.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.CRYP_TDES_ECB,"ax",%progbits
  22              		.align	2
  23              		.global	CRYP_TDES_ECB
  24              		.thumb
  25              		.thumb_func
  27              	CRYP_TDES_ECB:
  28              	.LFB123:
  29              		.file 1 "FWLIB/src/stm32f4xx_cryp_tdes.c"
   1:FWLIB/src/stm32f4xx_cryp_tdes.c **** /**
   2:FWLIB/src/stm32f4xx_cryp_tdes.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @file    stm32f4xx_cryp_tdes.c
   4:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @version V1.8.0
   6:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @date    04-November-2016
   7:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @brief   This file provides high level functions to encrypt and decrypt an 
   8:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *          input message using TDES in ECB/CBC modes .
   9:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *          It uses the stm32f4xx_cryp.c/.h drivers to access the STM32F4xx CRYP
  10:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *          peripheral.
  11:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *
  12:FWLIB/src/stm32f4xx_cryp_tdes.c **** @verbatim
  13:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  14:FWLIB/src/stm32f4xx_cryp_tdes.c ****  ===============================================================================
  15:FWLIB/src/stm32f4xx_cryp_tdes.c ****                            ##### How to use this driver #####
  16:FWLIB/src/stm32f4xx_cryp_tdes.c ****  ===============================================================================
  17:FWLIB/src/stm32f4xx_cryp_tdes.c ****  [..]
  18:FWLIB/src/stm32f4xx_cryp_tdes.c ****    (#) Enable The CRYP controller clock using 
  19:FWLIB/src/stm32f4xx_cryp_tdes.c ****        RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_CRYP, ENABLE); function.
  20:FWLIB/src/stm32f4xx_cryp_tdes.c ****   
  21:FWLIB/src/stm32f4xx_cryp_tdes.c ****    (#) Encrypt and decrypt using TDES in ECB Mode using CRYP_TDES_ECB() function.
  22:FWLIB/src/stm32f4xx_cryp_tdes.c ****   
  23:FWLIB/src/stm32f4xx_cryp_tdes.c ****    (#) Encrypt and decrypt using TDES in CBC Mode using CRYP_TDES_CBC() function.
  24:FWLIB/src/stm32f4xx_cryp_tdes.c ****   
  25:FWLIB/src/stm32f4xx_cryp_tdes.c **** @endverbatim
  26:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *
  27:FWLIB/src/stm32f4xx_cryp_tdes.c ****   ******************************************************************************
  28:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @attention
  29:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *
ARM GAS  C:\Users\why\AppData\Local\Temp\cclZkDGG.s 			page 2


  30:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
  31:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *
  32:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  33:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * You may not use this file except in compliance with the License.
  34:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * You may obtain a copy of the License at:
  35:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *
  36:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  37:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *
  38:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * Unless required by applicable law or agreed to in writing, software 
  39:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  40:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  41:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * See the License for the specific language governing permissions and
  42:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * limitations under the License.
  43:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *
  44:FWLIB/src/stm32f4xx_cryp_tdes.c ****   ******************************************************************************
  45:FWLIB/src/stm32f4xx_cryp_tdes.c ****   */ 
  46:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  47:FWLIB/src/stm32f4xx_cryp_tdes.c **** /* Includes ------------------------------------------------------------------*/
  48:FWLIB/src/stm32f4xx_cryp_tdes.c **** #include "stm32f4xx_cryp.h"
  49:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  50:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  51:FWLIB/src/stm32f4xx_cryp_tdes.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  52:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @{
  53:FWLIB/src/stm32f4xx_cryp_tdes.c ****   */
  54:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  55:FWLIB/src/stm32f4xx_cryp_tdes.c **** /** @defgroup CRYP 
  56:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @brief CRYP driver modules
  57:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @{
  58:FWLIB/src/stm32f4xx_cryp_tdes.c ****   */
  59:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  60:FWLIB/src/stm32f4xx_cryp_tdes.c **** /* Private typedef -----------------------------------------------------------*/
  61:FWLIB/src/stm32f4xx_cryp_tdes.c **** /* Private define ------------------------------------------------------------*/
  62:FWLIB/src/stm32f4xx_cryp_tdes.c **** #define TDESBUSY_TIMEOUT    ((uint32_t) 0x00010000)
  63:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  64:FWLIB/src/stm32f4xx_cryp_tdes.c **** /* Private macro -------------------------------------------------------------*/
  65:FWLIB/src/stm32f4xx_cryp_tdes.c **** /* Private variables ---------------------------------------------------------*/
  66:FWLIB/src/stm32f4xx_cryp_tdes.c **** /* Private function prototypes -----------------------------------------------*/
  67:FWLIB/src/stm32f4xx_cryp_tdes.c **** /* Private functions ---------------------------------------------------------*/
  68:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  69:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  70:FWLIB/src/stm32f4xx_cryp_tdes.c **** /** @defgroup CRYP_Private_Functions
  71:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @{
  72:FWLIB/src/stm32f4xx_cryp_tdes.c ****   */ 
  73:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  74:FWLIB/src/stm32f4xx_cryp_tdes.c **** /** @defgroup CRYP_Group7 High Level TDES functions
  75:FWLIB/src/stm32f4xx_cryp_tdes.c ****  *  @brief   High Level TDES functions 
  76:FWLIB/src/stm32f4xx_cryp_tdes.c ****  *
  77:FWLIB/src/stm32f4xx_cryp_tdes.c **** @verbatim   
  78:FWLIB/src/stm32f4xx_cryp_tdes.c ****  ===============================================================================
  79:FWLIB/src/stm32f4xx_cryp_tdes.c ****                       ##### High Level TDES functions #####
  80:FWLIB/src/stm32f4xx_cryp_tdes.c ****  ===============================================================================
  81:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  82:FWLIB/src/stm32f4xx_cryp_tdes.c **** @endverbatim
  83:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @{
  84:FWLIB/src/stm32f4xx_cryp_tdes.c ****   */
  85:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  86:FWLIB/src/stm32f4xx_cryp_tdes.c **** /**
ARM GAS  C:\Users\why\AppData\Local\Temp\cclZkDGG.s 			page 3


  87:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @brief  Encrypt and decrypt using TDES in ECB Mode
  88:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Mode: encryption or decryption Mode.
  89:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *           This parameter can be one of the following values:
  90:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *            @arg MODE_ENCRYPT: Encryption
  91:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *            @arg MODE_DECRYPT: Decryption
  92:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Key: Key used for TDES algorithm.
  93:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 8.
  94:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Input: pointer to the Input buffer.
  95:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Output: pointer to the returned buffer.
  96:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @retval An ErrorStatus enumeration value:
  97:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *          - SUCCESS: Operation done
  98:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *          - ERROR: Operation failed
  99:FWLIB/src/stm32f4xx_cryp_tdes.c ****   */
 100:FWLIB/src/stm32f4xx_cryp_tdes.c **** ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
 101:FWLIB/src/stm32f4xx_cryp_tdes.c ****                           uint32_t Ilength, uint8_t *Output)
 102:FWLIB/src/stm32f4xx_cryp_tdes.c **** {
  30              		.loc 1 102 0
  31              		.cfi_startproc
  32              		@ args = 4, pretend = 0, frame = 56
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              	.LVL0:
  35 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 24
  38              		.cfi_offset 4, -24
  39              		.cfi_offset 5, -20
  40              		.cfi_offset 6, -16
  41              		.cfi_offset 7, -12
  42              		.cfi_offset 8, -8
  43              		.cfi_offset 14, -4
  44 0004 8EB0     		sub	sp, sp, #56
  45              	.LCFI1:
  46              		.cfi_def_cfa_offset 80
  47 0006 0646     		mov	r6, r0
  48 0008 0D46     		mov	r5, r1
  49 000a 9846     		mov	r8, r3
 103:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_InitTypeDef TDES_CRYP_InitStructure;
 104:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
 105:FWLIB/src/stm32f4xx_cryp_tdes.c ****   __IO uint32_t counter = 0;
  50              		.loc 1 105 0
  51 000c 0023     		movs	r3, #0
  52              	.LVL1:
  53 000e 0193     		str	r3, [sp, #4]
  54              	.LVL2:
 106:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t busystatus = 0;
 107:FWLIB/src/stm32f4xx_cryp_tdes.c ****   ErrorStatus status = SUCCESS;
 108:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 109:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t inputaddr  = (uint32_t)Input;
  55              		.loc 1 109 0
  56 0010 1446     		mov	r4, r2
  57              	.LVL3:
 110:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t outputaddr = (uint32_t)Output;
  58              		.loc 1 110 0
  59 0012 149F     		ldr	r7, [sp, #80]
  60              	.LVL4:
 111:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t i = 0;
 112:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
ARM GAS  C:\Users\why\AppData\Local\Temp\cclZkDGG.s 			page 4


 113:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Crypto structures initialisation*/
 114:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
  61              		.loc 1 114 0
  62 0014 02A8     		add	r0, sp, #8
  63              	.LVL5:
  64 0016 FFF7FEFF 		bl	CRYP_KeyStructInit
  65              	.LVL6:
 115:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 116:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Crypto Init for Encryption process */
 117:FWLIB/src/stm32f4xx_cryp_tdes.c ****   if(Mode == MODE_ENCRYPT) /* TDES encryption */
  66              		.loc 1 117 0
  67 001a 012E     		cmp	r6, #1
  68 001c 02D1     		bne	.L2
 118:FWLIB/src/stm32f4xx_cryp_tdes.c ****   {
 119:FWLIB/src/stm32f4xx_cryp_tdes.c ****      TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
  69              		.loc 1 119 0
  70 001e 0023     		movs	r3, #0
  71 0020 0A93     		str	r3, [sp, #40]
  72 0022 01E0     		b	.L3
  73              	.L2:
 120:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 121:FWLIB/src/stm32f4xx_cryp_tdes.c ****   else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
 122:FWLIB/src/stm32f4xx_cryp_tdes.c ****   {
 123:FWLIB/src/stm32f4xx_cryp_tdes.c ****      TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
  74              		.loc 1 123 0
  75 0024 0423     		movs	r3, #4
  76 0026 0A93     		str	r3, [sp, #40]
  77              	.L3:
 124:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 125:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 126:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
  78              		.loc 1 126 0
  79 0028 0023     		movs	r3, #0
  80 002a 0B93     		str	r3, [sp, #44]
 127:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  81              		.loc 1 127 0
  82 002c 8023     		movs	r3, #128
  83 002e 0C93     		str	r3, [sp, #48]
 128:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_Init(&TDES_CRYP_InitStructure);
  84              		.loc 1 128 0
  85 0030 0AA8     		add	r0, sp, #40
  86 0032 FFF7FEFF 		bl	CRYP_Init
  87              	.LVL7:
 129:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 130:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Key Initialisation */
 131:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
  88              		.loc 1 131 0
  89 0036 2B68     		ldr	r3, [r5]
  90              	.LVL8:
  91              	.LBB30:
  92              	.LBB31:
  93              		.file 2 "F4_CORE/core_cmInstr.h"
   1:F4_CORE/core_cmInstr.h **** /**************************************************************************//**
   2:F4_CORE/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:F4_CORE/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:F4_CORE/core_cmInstr.h ****  * @version  V4.10
   5:F4_CORE/core_cmInstr.h ****  * @date     18. March 2015
ARM GAS  C:\Users\why\AppData\Local\Temp\cclZkDGG.s 			page 5


   6:F4_CORE/core_cmInstr.h ****  *
   7:F4_CORE/core_cmInstr.h ****  * @note
   8:F4_CORE/core_cmInstr.h ****  *
   9:F4_CORE/core_cmInstr.h ****  ******************************************************************************/
  10:F4_CORE/core_cmInstr.h **** /* Copyright (c) 2009 - 2014 ARM LIMITED
  11:F4_CORE/core_cmInstr.h **** 
  12:F4_CORE/core_cmInstr.h ****    All rights reserved.
  13:F4_CORE/core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:F4_CORE/core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:F4_CORE/core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:F4_CORE/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:F4_CORE/core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:F4_CORE/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:F4_CORE/core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:F4_CORE/core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:F4_CORE/core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:F4_CORE/core_cmInstr.h ****      specific prior written permission.
  23:F4_CORE/core_cmInstr.h ****    *
  24:F4_CORE/core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:F4_CORE/core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:F4_CORE/core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:F4_CORE/core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:F4_CORE/core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:F4_CORE/core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:F4_CORE/core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:F4_CORE/core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:F4_CORE/core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:F4_CORE/core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:F4_CORE/core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:F4_CORE/core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:F4_CORE/core_cmInstr.h **** 
  37:F4_CORE/core_cmInstr.h **** 
  38:F4_CORE/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:F4_CORE/core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:F4_CORE/core_cmInstr.h **** 
  41:F4_CORE/core_cmInstr.h **** 
  42:F4_CORE/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:F4_CORE/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:F4_CORE/core_cmInstr.h ****   Access to dedicated instructions
  45:F4_CORE/core_cmInstr.h ****   @{
  46:F4_CORE/core_cmInstr.h **** */
  47:F4_CORE/core_cmInstr.h **** 
  48:F4_CORE/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:F4_CORE/core_cmInstr.h **** /* ARM armcc specific functions */
  50:F4_CORE/core_cmInstr.h **** 
  51:F4_CORE/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:F4_CORE/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:F4_CORE/core_cmInstr.h **** #endif
  54:F4_CORE/core_cmInstr.h **** 
  55:F4_CORE/core_cmInstr.h **** 
  56:F4_CORE/core_cmInstr.h **** /** \brief  No Operation
  57:F4_CORE/core_cmInstr.h **** 
  58:F4_CORE/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:F4_CORE/core_cmInstr.h ****  */
  60:F4_CORE/core_cmInstr.h **** #define __NOP                             __nop
  61:F4_CORE/core_cmInstr.h **** 
  62:F4_CORE/core_cmInstr.h **** 
ARM GAS  C:\Users\why\AppData\Local\Temp\cclZkDGG.s 			page 6


  63:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:F4_CORE/core_cmInstr.h **** 
  65:F4_CORE/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:F4_CORE/core_cmInstr.h ****     until one of a number of events occurs.
  67:F4_CORE/core_cmInstr.h ****  */
  68:F4_CORE/core_cmInstr.h **** #define __WFI                             __wfi
  69:F4_CORE/core_cmInstr.h **** 
  70:F4_CORE/core_cmInstr.h **** 
  71:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Event
  72:F4_CORE/core_cmInstr.h **** 
  73:F4_CORE/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:F4_CORE/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:F4_CORE/core_cmInstr.h ****  */
  76:F4_CORE/core_cmInstr.h **** #define __WFE                             __wfe
  77:F4_CORE/core_cmInstr.h **** 
  78:F4_CORE/core_cmInstr.h **** 
  79:F4_CORE/core_cmInstr.h **** /** \brief  Send Event
  80:F4_CORE/core_cmInstr.h **** 
  81:F4_CORE/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:F4_CORE/core_cmInstr.h ****  */
  83:F4_CORE/core_cmInstr.h **** #define __SEV                             __sev
  84:F4_CORE/core_cmInstr.h **** 
  85:F4_CORE/core_cmInstr.h **** 
  86:F4_CORE/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:F4_CORE/core_cmInstr.h **** 
  88:F4_CORE/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:F4_CORE/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:F4_CORE/core_cmInstr.h ****     memory, after the instruction has been completed.
  91:F4_CORE/core_cmInstr.h ****  */
  92:F4_CORE/core_cmInstr.h **** #define __ISB() do {\
  93:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
  94:F4_CORE/core_cmInstr.h ****                    __isb(0xF);\
  95:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
  96:F4_CORE/core_cmInstr.h ****                 } while (0)
  97:F4_CORE/core_cmInstr.h **** 
  98:F4_CORE/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  99:F4_CORE/core_cmInstr.h **** 
 100:F4_CORE/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 101:F4_CORE/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 102:F4_CORE/core_cmInstr.h ****  */
 103:F4_CORE/core_cmInstr.h **** #define __DSB() do {\
 104:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 105:F4_CORE/core_cmInstr.h ****                    __dsb(0xF);\
 106:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 107:F4_CORE/core_cmInstr.h ****                 } while (0)
 108:F4_CORE/core_cmInstr.h **** 
 109:F4_CORE/core_cmInstr.h **** /** \brief  Data Memory Barrier
 110:F4_CORE/core_cmInstr.h **** 
 111:F4_CORE/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 112:F4_CORE/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 113:F4_CORE/core_cmInstr.h ****  */
 114:F4_CORE/core_cmInstr.h **** #define __DMB() do {\
 115:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 116:F4_CORE/core_cmInstr.h ****                    __dmb(0xF);\
 117:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 118:F4_CORE/core_cmInstr.h ****                 } while (0)
 119:F4_CORE/core_cmInstr.h **** 
ARM GAS  C:\Users\why\AppData\Local\Temp\cclZkDGG.s 			page 7


 120:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 121:F4_CORE/core_cmInstr.h **** 
 122:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in integer value.
 123:F4_CORE/core_cmInstr.h **** 
 124:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 125:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 126:F4_CORE/core_cmInstr.h ****  */
 127:F4_CORE/core_cmInstr.h **** #define __REV                             __rev
 128:F4_CORE/core_cmInstr.h **** 
 129:F4_CORE/core_cmInstr.h **** 
 130:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 131:F4_CORE/core_cmInstr.h **** 
 132:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 133:F4_CORE/core_cmInstr.h **** 
 134:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 135:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 136:F4_CORE/core_cmInstr.h ****  */
 137:F4_CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 138:F4_CORE/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 139:F4_CORE/core_cmInstr.h **** {
 140:F4_CORE/core_cmInstr.h ****   rev16 r0, r0
 141:F4_CORE/core_cmInstr.h ****   bx lr
 142:F4_CORE/core_cmInstr.h **** }
 143:F4_CORE/core_cmInstr.h **** #endif
 144:F4_CORE/core_cmInstr.h **** 
 145:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 146:F4_CORE/core_cmInstr.h **** 
 147:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 148:F4_CORE/core_cmInstr.h **** 
 149:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 150:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 151:F4_CORE/core_cmInstr.h ****  */
 152:F4_CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 153:F4_CORE/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 154:F4_CORE/core_cmInstr.h **** {
 155:F4_CORE/core_cmInstr.h ****   revsh r0, r0
 156:F4_CORE/core_cmInstr.h ****   bx lr
 157:F4_CORE/core_cmInstr.h **** }
 158:F4_CORE/core_cmInstr.h **** #endif
 159:F4_CORE/core_cmInstr.h **** 
 160:F4_CORE/core_cmInstr.h **** 
 161:F4_CORE/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 162:F4_CORE/core_cmInstr.h **** 
 163:F4_CORE/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 164:F4_CORE/core_cmInstr.h **** 
 165:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to rotate
 166:F4_CORE/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 167:F4_CORE/core_cmInstr.h ****     \return               Rotated value
 168:F4_CORE/core_cmInstr.h ****  */
 169:F4_CORE/core_cmInstr.h **** #define __ROR                             __ror
 170:F4_CORE/core_cmInstr.h **** 
 171:F4_CORE/core_cmInstr.h **** 
 172:F4_CORE/core_cmInstr.h **** /** \brief  Breakpoint
 173:F4_CORE/core_cmInstr.h **** 
 174:F4_CORE/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 175:F4_CORE/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 176:F4_CORE/core_cmInstr.h **** 
ARM GAS  C:\Users\why\AppData\Local\Temp\cclZkDGG.s 			page 8


 177:F4_CORE/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 178:F4_CORE/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 179:F4_CORE/core_cmInstr.h ****  */
 180:F4_CORE/core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 181:F4_CORE/core_cmInstr.h **** 
 182:F4_CORE/core_cmInstr.h **** 
 183:F4_CORE/core_cmInstr.h **** /** \brief  Reverse bit order of value
 184:F4_CORE/core_cmInstr.h **** 
 185:F4_CORE/core_cmInstr.h ****     This function reverses the bit order of the given value.
 186:F4_CORE/core_cmInstr.h **** 
 187:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 188:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 189:F4_CORE/core_cmInstr.h ****  */
 190:F4_CORE/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 191:F4_CORE/core_cmInstr.h ****   #define __RBIT                          __rbit
 192:F4_CORE/core_cmInstr.h **** #else
 193:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 194:F4_CORE/core_cmInstr.h **** {
 195:F4_CORE/core_cmInstr.h ****   uint32_t result;
 196:F4_CORE/core_cmInstr.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; // extra shift needed at end
 197:F4_CORE/core_cmInstr.h **** 
 198:F4_CORE/core_cmInstr.h ****   result = value;                      // r will be reversed bits of v; first get LSB of v
 199:F4_CORE/core_cmInstr.h ****   for (value >>= 1; value; value >>= 1)
 200:F4_CORE/core_cmInstr.h ****   {
 201:F4_CORE/core_cmInstr.h ****     result <<= 1;
 202:F4_CORE/core_cmInstr.h ****     result |= value & 1;
 203:F4_CORE/core_cmInstr.h ****     s--;
 204:F4_CORE/core_cmInstr.h ****   }
 205:F4_CORE/core_cmInstr.h ****   result <<= s;                       // shift when v's highest bits are zero
 206:F4_CORE/core_cmInstr.h ****   return(result);
 207:F4_CORE/core_cmInstr.h **** }
 208:F4_CORE/core_cmInstr.h **** #endif
 209:F4_CORE/core_cmInstr.h **** 
 210:F4_CORE/core_cmInstr.h **** 
 211:F4_CORE/core_cmInstr.h **** /** \brief  Count leading zeros
 212:F4_CORE/core_cmInstr.h **** 
 213:F4_CORE/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 214:F4_CORE/core_cmInstr.h **** 
 215:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 216:F4_CORE/core_cmInstr.h ****     \return             number of leading zeros in value
 217:F4_CORE/core_cmInstr.h ****  */
 218:F4_CORE/core_cmInstr.h **** #define __CLZ                             __clz
 219:F4_CORE/core_cmInstr.h **** 
 220:F4_CORE/core_cmInstr.h **** 
 221:F4_CORE/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 222:F4_CORE/core_cmInstr.h **** 
 223:F4_CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 224:F4_CORE/core_cmInstr.h **** 
 225:F4_CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 8 bit value.
 226:F4_CORE/core_cmInstr.h **** 
 227:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 228:F4_CORE/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 229:F4_CORE/core_cmInstr.h ****  */
 230:F4_CORE/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 231:F4_CORE/core_cmInstr.h **** 
 232:F4_CORE/core_cmInstr.h **** 
 233:F4_CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
ARM GAS  C:\Users\why\AppData\Local\Temp\cclZkDGG.s 			page 9


 234:F4_CORE/core_cmInstr.h **** 
 235:F4_CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 16 bit values.
 236:F4_CORE/core_cmInstr.h **** 
 237:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 238:F4_CORE/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 239:F4_CORE/core_cmInstr.h ****  */
 240:F4_CORE/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 241:F4_CORE/core_cmInstr.h **** 
 242:F4_CORE/core_cmInstr.h **** 
 243:F4_CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 244:F4_CORE/core_cmInstr.h **** 
 245:F4_CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 32 bit values.
 246:F4_CORE/core_cmInstr.h **** 
 247:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 248:F4_CORE/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 249:F4_CORE/core_cmInstr.h ****  */
 250:F4_CORE/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 251:F4_CORE/core_cmInstr.h **** 
 252:F4_CORE/core_cmInstr.h **** 
 253:F4_CORE/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 254:F4_CORE/core_cmInstr.h **** 
 255:F4_CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 8 bit values.
 256:F4_CORE/core_cmInstr.h **** 
 257:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 258:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 259:F4_CORE/core_cmInstr.h ****     \return          0  Function succeeded
 260:F4_CORE/core_cmInstr.h ****     \return          1  Function failed
 261:F4_CORE/core_cmInstr.h ****  */
 262:F4_CORE/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 263:F4_CORE/core_cmInstr.h **** 
 264:F4_CORE/core_cmInstr.h **** 
 265:F4_CORE/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 266:F4_CORE/core_cmInstr.h **** 
 267:F4_CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 16 bit values.
 268:F4_CORE/core_cmInstr.h **** 
 269:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 270:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 271:F4_CORE/core_cmInstr.h ****     \return          0  Function succeeded
 272:F4_CORE/core_cmInstr.h ****     \return          1  Function failed
 273:F4_CORE/core_cmInstr.h ****  */
 274:F4_CORE/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 275:F4_CORE/core_cmInstr.h **** 
 276:F4_CORE/core_cmInstr.h **** 
 277:F4_CORE/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 278:F4_CORE/core_cmInstr.h **** 
 279:F4_CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 32 bit values.
 280:F4_CORE/core_cmInstr.h **** 
 281:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 282:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 283:F4_CORE/core_cmInstr.h ****     \return          0  Function succeeded
 284:F4_CORE/core_cmInstr.h ****     \return          1  Function failed
 285:F4_CORE/core_cmInstr.h ****  */
 286:F4_CORE/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 287:F4_CORE/core_cmInstr.h **** 
 288:F4_CORE/core_cmInstr.h **** 
 289:F4_CORE/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 290:F4_CORE/core_cmInstr.h **** 
ARM GAS  C:\Users\why\AppData\Local\Temp\cclZkDGG.s 			page 10


 291:F4_CORE/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 292:F4_CORE/core_cmInstr.h **** 
 293:F4_CORE/core_cmInstr.h ****  */
 294:F4_CORE/core_cmInstr.h **** #define __CLREX                           __clrex
 295:F4_CORE/core_cmInstr.h **** 
 296:F4_CORE/core_cmInstr.h **** 
 297:F4_CORE/core_cmInstr.h **** /** \brief  Signed Saturate
 298:F4_CORE/core_cmInstr.h **** 
 299:F4_CORE/core_cmInstr.h ****     This function saturates a signed value.
 300:F4_CORE/core_cmInstr.h **** 
 301:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 302:F4_CORE/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 303:F4_CORE/core_cmInstr.h ****     \return             Saturated value
 304:F4_CORE/core_cmInstr.h ****  */
 305:F4_CORE/core_cmInstr.h **** #define __SSAT                            __ssat
 306:F4_CORE/core_cmInstr.h **** 
 307:F4_CORE/core_cmInstr.h **** 
 308:F4_CORE/core_cmInstr.h **** /** \brief  Unsigned Saturate
 309:F4_CORE/core_cmInstr.h **** 
 310:F4_CORE/core_cmInstr.h ****     This function saturates an unsigned value.
 311:F4_CORE/core_cmInstr.h **** 
 312:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 313:F4_CORE/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 314:F4_CORE/core_cmInstr.h ****     \return             Saturated value
 315:F4_CORE/core_cmInstr.h ****  */
 316:F4_CORE/core_cmInstr.h **** #define __USAT                            __usat
 317:F4_CORE/core_cmInstr.h **** 
 318:F4_CORE/core_cmInstr.h **** 
 319:F4_CORE/core_cmInstr.h **** /** \brief  Rotate Right with Extend (32 bit)
 320:F4_CORE/core_cmInstr.h **** 
 321:F4_CORE/core_cmInstr.h ****     This function moves each bit of a bitstring right by one bit.
 322:F4_CORE/core_cmInstr.h ****     The carry input is shifted in at the left end of the bitstring.
 323:F4_CORE/core_cmInstr.h **** 
 324:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to rotate
 325:F4_CORE/core_cmInstr.h ****     \return               Rotated value
 326:F4_CORE/core_cmInstr.h ****  */
 327:F4_CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 328:F4_CORE/core_cmInstr.h **** __attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
 329:F4_CORE/core_cmInstr.h **** {
 330:F4_CORE/core_cmInstr.h ****   rrx r0, r0
 331:F4_CORE/core_cmInstr.h ****   bx lr
 332:F4_CORE/core_cmInstr.h **** }
 333:F4_CORE/core_cmInstr.h **** #endif
 334:F4_CORE/core_cmInstr.h **** 
 335:F4_CORE/core_cmInstr.h **** 
 336:F4_CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (8 bit)
 337:F4_CORE/core_cmInstr.h **** 
 338:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 8 bit value.
 339:F4_CORE/core_cmInstr.h **** 
 340:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 341:F4_CORE/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 342:F4_CORE/core_cmInstr.h ****  */
 343:F4_CORE/core_cmInstr.h **** #define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
 344:F4_CORE/core_cmInstr.h **** 
 345:F4_CORE/core_cmInstr.h **** 
 346:F4_CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (16 bit)
 347:F4_CORE/core_cmInstr.h **** 
ARM GAS  C:\Users\why\AppData\Local\Temp\cclZkDGG.s 			page 11


 348:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 16 bit values.
 349:F4_CORE/core_cmInstr.h **** 
 350:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 351:F4_CORE/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 352:F4_CORE/core_cmInstr.h ****  */
 353:F4_CORE/core_cmInstr.h **** #define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
 354:F4_CORE/core_cmInstr.h **** 
 355:F4_CORE/core_cmInstr.h **** 
 356:F4_CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (32 bit)
 357:F4_CORE/core_cmInstr.h **** 
 358:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 32 bit values.
 359:F4_CORE/core_cmInstr.h **** 
 360:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 361:F4_CORE/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 362:F4_CORE/core_cmInstr.h ****  */
 363:F4_CORE/core_cmInstr.h **** #define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
 364:F4_CORE/core_cmInstr.h **** 
 365:F4_CORE/core_cmInstr.h **** 
 366:F4_CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (8 bit)
 367:F4_CORE/core_cmInstr.h **** 
 368:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 8 bit values.
 369:F4_CORE/core_cmInstr.h **** 
 370:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 371:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 372:F4_CORE/core_cmInstr.h ****  */
 373:F4_CORE/core_cmInstr.h **** #define __STRBT(value, ptr)               __strt(value, ptr)
 374:F4_CORE/core_cmInstr.h **** 
 375:F4_CORE/core_cmInstr.h **** 
 376:F4_CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (16 bit)
 377:F4_CORE/core_cmInstr.h **** 
 378:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 16 bit values.
 379:F4_CORE/core_cmInstr.h **** 
 380:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 381:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 382:F4_CORE/core_cmInstr.h ****  */
 383:F4_CORE/core_cmInstr.h **** #define __STRHT(value, ptr)               __strt(value, ptr)
 384:F4_CORE/core_cmInstr.h **** 
 385:F4_CORE/core_cmInstr.h **** 
 386:F4_CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (32 bit)
 387:F4_CORE/core_cmInstr.h **** 
 388:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 32 bit values.
 389:F4_CORE/core_cmInstr.h **** 
 390:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 391:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 392:F4_CORE/core_cmInstr.h ****  */
 393:F4_CORE/core_cmInstr.h **** #define __STRT(value, ptr)                __strt(value, ptr)
 394:F4_CORE/core_cmInstr.h **** 
 395:F4_CORE/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300) */
 396:F4_CORE/core_cmInstr.h **** 
 397:F4_CORE/core_cmInstr.h **** 
 398:F4_CORE/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 399:F4_CORE/core_cmInstr.h **** /* GNU gcc specific functions */
 400:F4_CORE/core_cmInstr.h **** 
 401:F4_CORE/core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 402:F4_CORE/core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 403:F4_CORE/core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 404:F4_CORE/core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
ARM GAS  C:\Users\why\AppData\Local\Temp\cclZkDGG.s 			page 12


 405:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 406:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 407:F4_CORE/core_cmInstr.h **** #else
 408:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 409:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 410:F4_CORE/core_cmInstr.h **** #endif
 411:F4_CORE/core_cmInstr.h **** 
 412:F4_CORE/core_cmInstr.h **** /** \brief  No Operation
 413:F4_CORE/core_cmInstr.h **** 
 414:F4_CORE/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 415:F4_CORE/core_cmInstr.h ****  */
 416:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 417:F4_CORE/core_cmInstr.h **** {
 418:F4_CORE/core_cmInstr.h ****   __ASM volatile ("nop");
 419:F4_CORE/core_cmInstr.h **** }
 420:F4_CORE/core_cmInstr.h **** 
 421:F4_CORE/core_cmInstr.h **** 
 422:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Interrupt
 423:F4_CORE/core_cmInstr.h **** 
 424:F4_CORE/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 425:F4_CORE/core_cmInstr.h ****     until one of a number of events occurs.
 426:F4_CORE/core_cmInstr.h ****  */
 427:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 428:F4_CORE/core_cmInstr.h **** {
 429:F4_CORE/core_cmInstr.h ****   __ASM volatile ("wfi");
 430:F4_CORE/core_cmInstr.h **** }
 431:F4_CORE/core_cmInstr.h **** 
 432:F4_CORE/core_cmInstr.h **** 
 433:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Event
 434:F4_CORE/core_cmInstr.h **** 
 435:F4_CORE/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 436:F4_CORE/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 437:F4_CORE/core_cmInstr.h ****  */
 438:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 439:F4_CORE/core_cmInstr.h **** {
 440:F4_CORE/core_cmInstr.h ****   __ASM volatile ("wfe");
 441:F4_CORE/core_cmInstr.h **** }
 442:F4_CORE/core_cmInstr.h **** 
 443:F4_CORE/core_cmInstr.h **** 
 444:F4_CORE/core_cmInstr.h **** /** \brief  Send Event
 445:F4_CORE/core_cmInstr.h **** 
 446:F4_CORE/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 447:F4_CORE/core_cmInstr.h ****  */
 448:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 449:F4_CORE/core_cmInstr.h **** {
 450:F4_CORE/core_cmInstr.h ****   __ASM volatile ("sev");
 451:F4_CORE/core_cmInstr.h **** }
 452:F4_CORE/core_cmInstr.h **** 
 453:F4_CORE/core_cmInstr.h **** 
 454:F4_CORE/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 455:F4_CORE/core_cmInstr.h **** 
 456:F4_CORE/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 457:F4_CORE/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 458:F4_CORE/core_cmInstr.h ****     memory, after the instruction has been completed.
 459:F4_CORE/core_cmInstr.h ****  */
 460:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 461:F4_CORE/core_cmInstr.h **** {
ARM GAS  C:\Users\why\AppData\Local\Temp\cclZkDGG.s 			page 13


 462:F4_CORE/core_cmInstr.h ****   __ASM volatile ("isb 0xF":::"memory");
 463:F4_CORE/core_cmInstr.h **** }
 464:F4_CORE/core_cmInstr.h **** 
 465:F4_CORE/core_cmInstr.h **** 
 466:F4_CORE/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 467:F4_CORE/core_cmInstr.h **** 
 468:F4_CORE/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 469:F4_CORE/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 470:F4_CORE/core_cmInstr.h ****  */
 471:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 472:F4_CORE/core_cmInstr.h **** {
 473:F4_CORE/core_cmInstr.h ****   __ASM volatile ("dsb 0xF":::"memory");
 474:F4_CORE/core_cmInstr.h **** }
 475:F4_CORE/core_cmInstr.h **** 
 476:F4_CORE/core_cmInstr.h **** 
 477:F4_CORE/core_cmInstr.h **** /** \brief  Data Memory Barrier
 478:F4_CORE/core_cmInstr.h **** 
 479:F4_CORE/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 480:F4_CORE/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 481:F4_CORE/core_cmInstr.h ****  */
 482:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 483:F4_CORE/core_cmInstr.h **** {
 484:F4_CORE/core_cmInstr.h ****   __ASM volatile ("dmb 0xF":::"memory");
 485:F4_CORE/core_cmInstr.h **** }
 486:F4_CORE/core_cmInstr.h **** 
 487:F4_CORE/core_cmInstr.h **** 
 488:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 489:F4_CORE/core_cmInstr.h **** 
 490:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in integer value.
 491:F4_CORE/core_cmInstr.h **** 
 492:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 493:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 494:F4_CORE/core_cmInstr.h ****  */
 495:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 496:F4_CORE/core_cmInstr.h **** {
 497:F4_CORE/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 498:F4_CORE/core_cmInstr.h ****   return __builtin_bswap32(value);
  94              		.loc 2 498 0
  95 0038 1BBA     		rev	r3, r3
  96              	.LVL9:
  97              	.LBE31:
  98              	.LBE30:
  99              		.loc 1 131 0
 100 003a 0493     		str	r3, [sp, #16]
 101              	.LVL10:
 132:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 133:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 102              		.loc 1 133 0
 103 003c 6B68     		ldr	r3, [r5, #4]
 104              	.LVL11:
 105              	.LBB32:
 106              	.LBB33:
 107              		.loc 2 498 0
 108 003e 1BBA     		rev	r3, r3
 109              	.LVL12:
 110              	.LBE33:
 111              	.LBE32:
ARM GAS  C:\Users\why\AppData\Local\Temp\cclZkDGG.s 			page 14


 112              		.loc 1 133 0
 113 0040 0593     		str	r3, [sp, #20]
 114              	.LVL13:
 134:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 135:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 115              		.loc 1 135 0
 116 0042 AB68     		ldr	r3, [r5, #8]
 117              	.LVL14:
 118              	.LBB34:
 119              	.LBB35:
 120              		.loc 2 498 0
 121 0044 1BBA     		rev	r3, r3
 122              	.LVL15:
 123              	.LBE35:
 124              	.LBE34:
 125              		.loc 1 135 0
 126 0046 0693     		str	r3, [sp, #24]
 127              	.LVL16:
 136:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 137:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 128              		.loc 1 137 0
 129 0048 EB68     		ldr	r3, [r5, #12]
 130              	.LVL17:
 131              	.LBB36:
 132              	.LBB37:
 133              		.loc 2 498 0
 134 004a 1BBA     		rev	r3, r3
 135              	.LVL18:
 136              	.LBE37:
 137              	.LBE36:
 138              		.loc 1 137 0
 139 004c 0793     		str	r3, [sp, #28]
 140              	.LVL19:
 138:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 139:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 141              		.loc 1 139 0
 142 004e 2B69     		ldr	r3, [r5, #16]
 143              	.LVL20:
 144              	.LBB38:
 145              	.LBB39:
 146              		.loc 2 498 0
 147 0050 1BBA     		rev	r3, r3
 148              	.LVL21:
 149              	.LBE39:
 150              	.LBE38:
 151              		.loc 1 139 0
 152 0052 0893     		str	r3, [sp, #32]
 153              	.LVL22:
 140:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 141:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 154              		.loc 1 141 0
 155 0054 6B69     		ldr	r3, [r5, #20]
 156              	.LVL23:
 157              	.LBB40:
 158              	.LBB41:
 159              		.loc 2 498 0
 160 0056 1BBA     		rev	r3, r3
ARM GAS  C:\Users\why\AppData\Local\Temp\cclZkDGG.s 			page 15


 161              	.LVL24:
 162              	.LBE41:
 163              	.LBE40:
 164              		.loc 1 141 0
 165 0058 0993     		str	r3, [sp, #36]
 142:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 166              		.loc 1 142 0
 167 005a 02A8     		add	r0, sp, #8
 168 005c FFF7FEFF 		bl	CRYP_KeyInit
 169              	.LVL25:
 143:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 144:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Flush IN/OUT FIFO */
 145:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_FIFOFlush();
 170              		.loc 1 145 0
 171 0060 FFF7FEFF 		bl	CRYP_FIFOFlush
 172              	.LVL26:
 146:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 147:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Enable Crypto processor */
 148:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_Cmd(ENABLE);
 173              		.loc 1 148 0
 174 0064 0120     		movs	r0, #1
 175 0066 FFF7FEFF 		bl	CRYP_Cmd
 176              	.LVL27:
 149:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 150:FWLIB/src/stm32f4xx_cryp_tdes.c ****   if(CRYP_GetCmdStatus() == DISABLE)
 177              		.loc 1 150 0
 178 006a FFF7FEFF 		bl	CRYP_GetCmdStatus
 179              	.LVL28:
 180 006e 58B3     		cbz	r0, .L11
 181 0070 0025     		movs	r5, #0
 182              	.LVL29:
 183 0072 0126     		movs	r6, #1
 184 0074 20E0     		b	.L5
 185              	.LVL30:
 186              	.L10:
 151:FWLIB/src/stm32f4xx_cryp_tdes.c ****   {
 152:FWLIB/src/stm32f4xx_cryp_tdes.c ****     /* The CRYP peripheral clock is not enabled or the device doesn't embed 
 153:FWLIB/src/stm32f4xx_cryp_tdes.c ****     the CRYP peripheral (please check the device sales type. */
 154:FWLIB/src/stm32f4xx_cryp_tdes.c ****     status = ERROR;
 155:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 156:FWLIB/src/stm32f4xx_cryp_tdes.c ****   else
 157:FWLIB/src/stm32f4xx_cryp_tdes.c ****   {
 158:FWLIB/src/stm32f4xx_cryp_tdes.c ****     for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 159:FWLIB/src/stm32f4xx_cryp_tdes.c ****     {
 160:FWLIB/src/stm32f4xx_cryp_tdes.c ****       /* Write the Input block in the Input FIFO */
 161:FWLIB/src/stm32f4xx_cryp_tdes.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 187              		.loc 1 161 0
 188 0076 2068     		ldr	r0, [r4]
 189 0078 FFF7FEFF 		bl	CRYP_DataIn
 190              	.LVL31:
 162:FWLIB/src/stm32f4xx_cryp_tdes.c ****       inputaddr+=4;
 163:FWLIB/src/stm32f4xx_cryp_tdes.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 191              		.loc 1 163 0
 192 007c 6068     		ldr	r0, [r4, #4]
 193 007e FFF7FEFF 		bl	CRYP_DataIn
 194              	.LVL32:
 164:FWLIB/src/stm32f4xx_cryp_tdes.c ****       inputaddr+=4;
ARM GAS  C:\Users\why\AppData\Local\Temp\cclZkDGG.s 			page 16


 195              		.loc 1 164 0
 196 0082 0834     		adds	r4, r4, #8
 197              	.LVL33:
 165:FWLIB/src/stm32f4xx_cryp_tdes.c ****       
 166:FWLIB/src/stm32f4xx_cryp_tdes.c ****       /* Wait until the complete message has been processed */
 167:FWLIB/src/stm32f4xx_cryp_tdes.c ****       counter = 0;
 198              		.loc 1 167 0
 199 0084 0023     		movs	r3, #0
 200 0086 0193     		str	r3, [sp, #4]
 201              	.L7:
 168:FWLIB/src/stm32f4xx_cryp_tdes.c ****       do
 169:FWLIB/src/stm32f4xx_cryp_tdes.c ****       {
 170:FWLIB/src/stm32f4xx_cryp_tdes.c ****         busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 202              		.loc 1 170 0 discriminator 2
 203 0088 1020     		movs	r0, #16
 204 008a FFF7FEFF 		bl	CRYP_GetFlagStatus
 205              	.LVL34:
 206 008e 0246     		mov	r2, r0
 207              	.LVL35:
 171:FWLIB/src/stm32f4xx_cryp_tdes.c ****         counter++;
 208              		.loc 1 171 0 discriminator 2
 209 0090 019B     		ldr	r3, [sp, #4]
 210 0092 0133     		adds	r3, r3, #1
 211 0094 0193     		str	r3, [sp, #4]
 172:FWLIB/src/stm32f4xx_cryp_tdes.c ****       }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 212              		.loc 1 172 0 discriminator 2
 213 0096 019B     		ldr	r3, [sp, #4]
 214 0098 B3F5803F 		cmp	r3, #65536
 215 009c 01D0     		beq	.L6
 216              		.loc 1 172 0 is_stmt 0 discriminator 1
 217 009e 0028     		cmp	r0, #0
 218 00a0 F2D1     		bne	.L7
 219              	.L6:
 173:FWLIB/src/stm32f4xx_cryp_tdes.c ****       
 174:FWLIB/src/stm32f4xx_cryp_tdes.c ****       if (busystatus != RESET)
 220              		.loc 1 174 0 is_stmt 1
 221 00a2 3AB9     		cbnz	r2, .L12
 175:FWLIB/src/stm32f4xx_cryp_tdes.c ****       {
 176:FWLIB/src/stm32f4xx_cryp_tdes.c ****         status = ERROR;
 177:FWLIB/src/stm32f4xx_cryp_tdes.c ****       }
 178:FWLIB/src/stm32f4xx_cryp_tdes.c ****       else
 179:FWLIB/src/stm32f4xx_cryp_tdes.c ****       {
 180:FWLIB/src/stm32f4xx_cryp_tdes.c ****         
 181:FWLIB/src/stm32f4xx_cryp_tdes.c ****         /* Read the Output block from the Output FIFO */
 182:FWLIB/src/stm32f4xx_cryp_tdes.c ****         *(uint32_t*)(outputaddr) = CRYP_DataOut();
 222              		.loc 1 182 0
 223 00a4 FFF7FEFF 		bl	CRYP_DataOut
 224              	.LVL36:
 225 00a8 3860     		str	r0, [r7]
 226              	.LVL37:
 183:FWLIB/src/stm32f4xx_cryp_tdes.c ****         outputaddr+=4;
 184:FWLIB/src/stm32f4xx_cryp_tdes.c ****         *(uint32_t*)(outputaddr) = CRYP_DataOut();
 227              		.loc 1 184 0
 228 00aa FFF7FEFF 		bl	CRYP_DataOut
 229              	.LVL38:
 230 00ae 7860     		str	r0, [r7, #4]
 185:FWLIB/src/stm32f4xx_cryp_tdes.c ****         outputaddr+=4;
ARM GAS  C:\Users\why\AppData\Local\Temp\cclZkDGG.s 			page 17


 231              		.loc 1 185 0
 232 00b0 0837     		adds	r7, r7, #8
 233              	.LVL39:
 234 00b2 00E0     		b	.L8
 235              	.LVL40:
 236              	.L12:
 176:FWLIB/src/stm32f4xx_cryp_tdes.c ****       }
 237              		.loc 1 176 0
 238 00b4 0026     		movs	r6, #0
 239              	.LVL41:
 240              	.L8:
 158:FWLIB/src/stm32f4xx_cryp_tdes.c ****     {
 241              		.loc 1 158 0 discriminator 2
 242 00b6 0835     		adds	r5, r5, #8
 243              	.LVL42:
 244              	.L5:
 158:FWLIB/src/stm32f4xx_cryp_tdes.c ****     {
 245              		.loc 1 158 0 is_stmt 0 discriminator 1
 246 00b8 4545     		cmp	r5, r8
 247 00ba 01D2     		bcs	.L9
 158:FWLIB/src/stm32f4xx_cryp_tdes.c ****     {
 248              		.loc 1 158 0 discriminator 3
 249 00bc 002E     		cmp	r6, #0
 250 00be DAD1     		bne	.L10
 251              	.L9:
 186:FWLIB/src/stm32f4xx_cryp_tdes.c ****       }
 187:FWLIB/src/stm32f4xx_cryp_tdes.c ****     }
 188:FWLIB/src/stm32f4xx_cryp_tdes.c ****     
 189:FWLIB/src/stm32f4xx_cryp_tdes.c ****     /* Disable Crypto */
 190:FWLIB/src/stm32f4xx_cryp_tdes.c ****     CRYP_Cmd(DISABLE);
 252              		.loc 1 190 0 is_stmt 1
 253 00c0 0020     		movs	r0, #0
 254 00c2 FFF7FEFF 		bl	CRYP_Cmd
 255              	.LVL43:
 256 00c6 00E0     		b	.L4
 257              	.LVL44:
 258              	.L11:
 154:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 259              		.loc 1 154 0
 260 00c8 0026     		movs	r6, #0
 261              	.LVL45:
 262              	.L4:
 191:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 192:FWLIB/src/stm32f4xx_cryp_tdes.c ****   return status; 
 193:FWLIB/src/stm32f4xx_cryp_tdes.c **** }
 263              		.loc 1 193 0
 264 00ca 3046     		mov	r0, r6
 265 00cc 0EB0     		add	sp, sp, #56
 266              	.LCFI2:
 267              		.cfi_def_cfa_offset 24
 268              		@ sp needed
 269 00ce BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 270              		.cfi_endproc
 271              	.LFE123:
 273 00d2 00BF     		.section	.text.CRYP_TDES_CBC,"ax",%progbits
 274              		.align	2
 275              		.global	CRYP_TDES_CBC
ARM GAS  C:\Users\why\AppData\Local\Temp\cclZkDGG.s 			page 18


 276              		.thumb
 277              		.thumb_func
 279              	CRYP_TDES_CBC:
 280              	.LFB124:
 194:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 195:FWLIB/src/stm32f4xx_cryp_tdes.c **** /**
 196:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @brief  Encrypt and decrypt using TDES in CBC Mode
 197:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Mode: encryption or decryption Mode.
 198:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *           This parameter can be one of the following values:
 199:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *            @arg MODE_ENCRYPT: Encryption
 200:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *            @arg MODE_DECRYPT: Decryption
 201:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Key: Key used for TDES algorithm.
 202:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  InitVectors: Initialisation Vectors used for TDES algorithm.
 203:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Input: pointer to the Input buffer.
 204:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 8.
 205:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Output: pointer to the returned buffer.
 206:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @retval An ErrorStatus enumeration value:
 207:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *          - SUCCESS: Operation done
 208:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *          - ERROR: Operation failed
 209:FWLIB/src/stm32f4xx_cryp_tdes.c ****   */
 210:FWLIB/src/stm32f4xx_cryp_tdes.c **** ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
 211:FWLIB/src/stm32f4xx_cryp_tdes.c ****                           uint8_t *Input, uint32_t Ilength, uint8_t *Output)
 212:FWLIB/src/stm32f4xx_cryp_tdes.c **** {
 281              		.loc 1 212 0
 282              		.cfi_startproc
 283              		@ args = 8, pretend = 0, frame = 72
 284              		@ frame_needed = 0, uses_anonymous_args = 0
 285              	.LVL46:
 286 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 287              	.LCFI3:
 288              		.cfi_def_cfa_offset 28
 289              		.cfi_offset 4, -28
 290              		.cfi_offset 5, -24
 291              		.cfi_offset 6, -20
 292              		.cfi_offset 7, -16
 293              		.cfi_offset 8, -12
 294              		.cfi_offset 9, -8
 295              		.cfi_offset 14, -4
 296 0004 93B0     		sub	sp, sp, #76
 297              	.LCFI4:
 298              		.cfi_def_cfa_offset 104
 299 0006 8146     		mov	r9, r0
 300 0008 0D46     		mov	r5, r1
 301 000a 1646     		mov	r6, r2
 302 000c DDF86880 		ldr	r8, [sp, #104]
 213:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_InitTypeDef TDES_CRYP_InitStructure;
 214:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
 215:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
 216:FWLIB/src/stm32f4xx_cryp_tdes.c ****   __IO uint32_t counter = 0;
 303              		.loc 1 216 0
 304 0010 0022     		movs	r2, #0
 305              	.LVL47:
 306 0012 0192     		str	r2, [sp, #4]
 307              	.LVL48:
 217:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t busystatus = 0;
 218:FWLIB/src/stm32f4xx_cryp_tdes.c ****   ErrorStatus status = SUCCESS;
 219:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t keyaddr    = (uint32_t)Key;
ARM GAS  C:\Users\why\AppData\Local\Temp\cclZkDGG.s 			page 19


 220:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t inputaddr  = (uint32_t)Input;
 308              		.loc 1 220 0
 309 0014 1C46     		mov	r4, r3
 310              	.LVL49:
 221:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t outputaddr = (uint32_t)Output;
 311              		.loc 1 221 0
 312 0016 1B9F     		ldr	r7, [sp, #108]
 313              	.LVL50:
 222:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t ivaddr     = (uint32_t)InitVectors;
 223:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t i = 0;
 224:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 225:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Crypto structures initialisation*/
 226:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 314              		.loc 1 226 0
 315 0018 06A8     		add	r0, sp, #24
 316              	.LVL51:
 317 001a FFF7FEFF 		bl	CRYP_KeyStructInit
 318              	.LVL52:
 227:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 228:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Crypto Init for Encryption process */
 229:FWLIB/src/stm32f4xx_cryp_tdes.c ****   if(Mode == MODE_ENCRYPT) /* TDES encryption */
 319              		.loc 1 229 0
 320 001e B9F1010F 		cmp	r9, #1
 321 0022 02D1     		bne	.L15
 230:FWLIB/src/stm32f4xx_cryp_tdes.c ****   {
 231:FWLIB/src/stm32f4xx_cryp_tdes.c ****     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 322              		.loc 1 231 0
 323 0024 0023     		movs	r3, #0
 324 0026 0E93     		str	r3, [sp, #56]
 325 0028 01E0     		b	.L16
 326              	.L15:
 232:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 233:FWLIB/src/stm32f4xx_cryp_tdes.c ****   else
 234:FWLIB/src/stm32f4xx_cryp_tdes.c ****   {
 235:FWLIB/src/stm32f4xx_cryp_tdes.c ****     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 327              		.loc 1 235 0
 328 002a 0423     		movs	r3, #4
 329 002c 0E93     		str	r3, [sp, #56]
 330              	.L16:
 236:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 237:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
 331              		.loc 1 237 0
 332 002e 0823     		movs	r3, #8
 333 0030 0F93     		str	r3, [sp, #60]
 238:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 334              		.loc 1 238 0
 335 0032 8023     		movs	r3, #128
 336 0034 1093     		str	r3, [sp, #64]
 239:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 240:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_Init(&TDES_CRYP_InitStructure);
 337              		.loc 1 240 0
 338 0036 0EA8     		add	r0, sp, #56
 339 0038 FFF7FEFF 		bl	CRYP_Init
 340              	.LVL53:
 241:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 242:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Key Initialisation */
 243:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
ARM GAS  C:\Users\why\AppData\Local\Temp\cclZkDGG.s 			page 20


 341              		.loc 1 243 0
 342 003c 2B68     		ldr	r3, [r5]
 343              	.LVL54:
 344              	.LBB42:
 345              	.LBB43:
 346              		.loc 2 498 0
 347 003e 1BBA     		rev	r3, r3
 348              	.LVL55:
 349              	.LBE43:
 350              	.LBE42:
 351              		.loc 1 243 0
 352 0040 0893     		str	r3, [sp, #32]
 353              	.LVL56:
 244:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 245:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 354              		.loc 1 245 0
 355 0042 6B68     		ldr	r3, [r5, #4]
 356              	.LVL57:
 357              	.LBB44:
 358              	.LBB45:
 359              		.loc 2 498 0
 360 0044 1BBA     		rev	r3, r3
 361              	.LVL58:
 362              	.LBE45:
 363              	.LBE44:
 364              		.loc 1 245 0
 365 0046 0993     		str	r3, [sp, #36]
 366              	.LVL59:
 246:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 247:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 367              		.loc 1 247 0
 368 0048 AB68     		ldr	r3, [r5, #8]
 369              	.LVL60:
 370              	.LBB46:
 371              	.LBB47:
 372              		.loc 2 498 0
 373 004a 1BBA     		rev	r3, r3
 374              	.LVL61:
 375              	.LBE47:
 376              	.LBE46:
 377              		.loc 1 247 0
 378 004c 0A93     		str	r3, [sp, #40]
 379              	.LVL62:
 248:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 249:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 380              		.loc 1 249 0
 381 004e EB68     		ldr	r3, [r5, #12]
 382              	.LVL63:
 383              	.LBB48:
 384              	.LBB49:
 385              		.loc 2 498 0
 386 0050 1BBA     		rev	r3, r3
 387              	.LVL64:
 388              	.LBE49:
 389              	.LBE48:
 390              		.loc 1 249 0
 391 0052 0B93     		str	r3, [sp, #44]
ARM GAS  C:\Users\why\AppData\Local\Temp\cclZkDGG.s 			page 21


 392              	.LVL65:
 250:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 251:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 393              		.loc 1 251 0
 394 0054 2B69     		ldr	r3, [r5, #16]
 395              	.LVL66:
 396              	.LBB50:
 397              	.LBB51:
 398              		.loc 2 498 0
 399 0056 1BBA     		rev	r3, r3
 400              	.LVL67:
 401              	.LBE51:
 402              	.LBE50:
 403              		.loc 1 251 0
 404 0058 0C93     		str	r3, [sp, #48]
 405              	.LVL68:
 252:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 253:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 406              		.loc 1 253 0
 407 005a 6B69     		ldr	r3, [r5, #20]
 408              	.LVL69:
 409              	.LBB52:
 410              	.LBB53:
 411              		.loc 2 498 0
 412 005c 1BBA     		rev	r3, r3
 413              	.LVL70:
 414              	.LBE53:
 415              	.LBE52:
 416              		.loc 1 253 0
 417 005e 0D93     		str	r3, [sp, #52]
 254:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 418              		.loc 1 254 0
 419 0060 06A8     		add	r0, sp, #24
 420 0062 FFF7FEFF 		bl	CRYP_KeyInit
 421              	.LVL71:
 255:FWLIB/src/stm32f4xx_cryp_tdes.c ****   
 256:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Initialization Vectors */
 257:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 422              		.loc 1 257 0
 423 0066 3368     		ldr	r3, [r6]
 424              	.LVL72:
 425              	.LBB54:
 426              	.LBB55:
 427              		.loc 2 498 0
 428 0068 1BBA     		rev	r3, r3
 429              	.LVL73:
 430              	.LBE55:
 431              	.LBE54:
 432              		.loc 1 257 0
 433 006a 0293     		str	r3, [sp, #8]
 434              	.LVL74:
 258:FWLIB/src/stm32f4xx_cryp_tdes.c ****   ivaddr+=4;
 259:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 435              		.loc 1 259 0
 436 006c 7368     		ldr	r3, [r6, #4]
 437              	.LVL75:
 438              	.LBB56:
ARM GAS  C:\Users\why\AppData\Local\Temp\cclZkDGG.s 			page 22


 439              	.LBB57:
 440              		.loc 2 498 0
 441 006e 1BBA     		rev	r3, r3
 442              	.LVL76:
 443              	.LBE57:
 444              	.LBE56:
 445              		.loc 1 259 0
 446 0070 0393     		str	r3, [sp, #12]
 260:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_IVInit(&TDES_CRYP_IVInitStructure);
 447              		.loc 1 260 0
 448 0072 02A8     		add	r0, sp, #8
 449 0074 FFF7FEFF 		bl	CRYP_IVInit
 450              	.LVL77:
 261:FWLIB/src/stm32f4xx_cryp_tdes.c ****   
 262:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Flush IN/OUT FIFO */
 263:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_FIFOFlush();
 451              		.loc 1 263 0
 452 0078 FFF7FEFF 		bl	CRYP_FIFOFlush
 453              	.LVL78:
 264:FWLIB/src/stm32f4xx_cryp_tdes.c ****   
 265:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Enable Crypto processor */
 266:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_Cmd(ENABLE);
 454              		.loc 1 266 0
 455 007c 0120     		movs	r0, #1
 456 007e FFF7FEFF 		bl	CRYP_Cmd
 457              	.LVL79:
 267:FWLIB/src/stm32f4xx_cryp_tdes.c ****   
 268:FWLIB/src/stm32f4xx_cryp_tdes.c ****   if(CRYP_GetCmdStatus() == DISABLE)
 458              		.loc 1 268 0
 459 0082 FFF7FEFF 		bl	CRYP_GetCmdStatus
 460              	.LVL80:
 461 0086 58B3     		cbz	r0, .L24
 462 0088 0025     		movs	r5, #0
 463              	.LVL81:
 464 008a 0126     		movs	r6, #1
 465              	.LVL82:
 466 008c 20E0     		b	.L18
 467              	.LVL83:
 468              	.L23:
 269:FWLIB/src/stm32f4xx_cryp_tdes.c ****   {
 270:FWLIB/src/stm32f4xx_cryp_tdes.c ****     /* The CRYP peripheral clock is not enabled or the device doesn't embed 
 271:FWLIB/src/stm32f4xx_cryp_tdes.c ****     the CRYP peripheral (please check the device sales type. */
 272:FWLIB/src/stm32f4xx_cryp_tdes.c ****     status = ERROR;
 273:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 274:FWLIB/src/stm32f4xx_cryp_tdes.c ****   else
 275:FWLIB/src/stm32f4xx_cryp_tdes.c ****   {
 276:FWLIB/src/stm32f4xx_cryp_tdes.c ****     for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 277:FWLIB/src/stm32f4xx_cryp_tdes.c ****     {
 278:FWLIB/src/stm32f4xx_cryp_tdes.c ****       /* Write the Input block in the Input FIFO */
 279:FWLIB/src/stm32f4xx_cryp_tdes.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 469              		.loc 1 279 0
 470 008e 2068     		ldr	r0, [r4]
 471 0090 FFF7FEFF 		bl	CRYP_DataIn
 472              	.LVL84:
 280:FWLIB/src/stm32f4xx_cryp_tdes.c ****       inputaddr+=4;
 281:FWLIB/src/stm32f4xx_cryp_tdes.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 473              		.loc 1 281 0
ARM GAS  C:\Users\why\AppData\Local\Temp\cclZkDGG.s 			page 23


 474 0094 6068     		ldr	r0, [r4, #4]
 475 0096 FFF7FEFF 		bl	CRYP_DataIn
 476              	.LVL85:
 282:FWLIB/src/stm32f4xx_cryp_tdes.c ****       inputaddr+=4;
 477              		.loc 1 282 0
 478 009a 0834     		adds	r4, r4, #8
 479              	.LVL86:
 283:FWLIB/src/stm32f4xx_cryp_tdes.c ****       
 284:FWLIB/src/stm32f4xx_cryp_tdes.c ****       /* Wait until the complete message has been processed */
 285:FWLIB/src/stm32f4xx_cryp_tdes.c ****       counter = 0;
 480              		.loc 1 285 0
 481 009c 0023     		movs	r3, #0
 482 009e 0193     		str	r3, [sp, #4]
 483              	.L20:
 286:FWLIB/src/stm32f4xx_cryp_tdes.c ****       do
 287:FWLIB/src/stm32f4xx_cryp_tdes.c ****       {
 288:FWLIB/src/stm32f4xx_cryp_tdes.c ****         busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 484              		.loc 1 288 0 discriminator 2
 485 00a0 1020     		movs	r0, #16
 486 00a2 FFF7FEFF 		bl	CRYP_GetFlagStatus
 487              	.LVL87:
 488 00a6 0246     		mov	r2, r0
 489              	.LVL88:
 289:FWLIB/src/stm32f4xx_cryp_tdes.c ****         counter++;
 490              		.loc 1 289 0 discriminator 2
 491 00a8 019B     		ldr	r3, [sp, #4]
 492 00aa 0133     		adds	r3, r3, #1
 493 00ac 0193     		str	r3, [sp, #4]
 290:FWLIB/src/stm32f4xx_cryp_tdes.c ****       }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 494              		.loc 1 290 0 discriminator 2
 495 00ae 019B     		ldr	r3, [sp, #4]
 496 00b0 B3F5803F 		cmp	r3, #65536
 497 00b4 01D0     		beq	.L19
 498              		.loc 1 290 0 is_stmt 0 discriminator 1
 499 00b6 0028     		cmp	r0, #0
 500 00b8 F2D1     		bne	.L20
 501              	.L19:
 291:FWLIB/src/stm32f4xx_cryp_tdes.c ****       
 292:FWLIB/src/stm32f4xx_cryp_tdes.c ****       if (busystatus != RESET)
 502              		.loc 1 292 0 is_stmt 1
 503 00ba 3AB9     		cbnz	r2, .L25
 293:FWLIB/src/stm32f4xx_cryp_tdes.c ****       {
 294:FWLIB/src/stm32f4xx_cryp_tdes.c ****         status = ERROR;
 295:FWLIB/src/stm32f4xx_cryp_tdes.c ****       }
 296:FWLIB/src/stm32f4xx_cryp_tdes.c ****       else
 297:FWLIB/src/stm32f4xx_cryp_tdes.c ****       {
 298:FWLIB/src/stm32f4xx_cryp_tdes.c ****         
 299:FWLIB/src/stm32f4xx_cryp_tdes.c ****         /* Read the Output block from the Output FIFO */
 300:FWLIB/src/stm32f4xx_cryp_tdes.c ****         *(uint32_t*)(outputaddr) = CRYP_DataOut();
 504              		.loc 1 300 0
 505 00bc FFF7FEFF 		bl	CRYP_DataOut
 506              	.LVL89:
 507 00c0 3860     		str	r0, [r7]
 508              	.LVL90:
 301:FWLIB/src/stm32f4xx_cryp_tdes.c ****         outputaddr+=4;
 302:FWLIB/src/stm32f4xx_cryp_tdes.c ****         *(uint32_t*)(outputaddr) = CRYP_DataOut();
 509              		.loc 1 302 0
ARM GAS  C:\Users\why\AppData\Local\Temp\cclZkDGG.s 			page 24


 510 00c2 FFF7FEFF 		bl	CRYP_DataOut
 511              	.LVL91:
 512 00c6 7860     		str	r0, [r7, #4]
 303:FWLIB/src/stm32f4xx_cryp_tdes.c ****         outputaddr+=4;
 513              		.loc 1 303 0
 514 00c8 0837     		adds	r7, r7, #8
 515              	.LVL92:
 516 00ca 00E0     		b	.L21
 517              	.LVL93:
 518              	.L25:
 294:FWLIB/src/stm32f4xx_cryp_tdes.c ****       }
 519              		.loc 1 294 0
 520 00cc 0026     		movs	r6, #0
 521              	.LVL94:
 522              	.L21:
 276:FWLIB/src/stm32f4xx_cryp_tdes.c ****     {
 523              		.loc 1 276 0 discriminator 2
 524 00ce 0835     		adds	r5, r5, #8
 525              	.LVL95:
 526              	.L18:
 276:FWLIB/src/stm32f4xx_cryp_tdes.c ****     {
 527              		.loc 1 276 0 is_stmt 0 discriminator 1
 528 00d0 4545     		cmp	r5, r8
 529 00d2 01D2     		bcs	.L22
 276:FWLIB/src/stm32f4xx_cryp_tdes.c ****     {
 530              		.loc 1 276 0 discriminator 3
 531 00d4 002E     		cmp	r6, #0
 532 00d6 DAD1     		bne	.L23
 533              	.L22:
 304:FWLIB/src/stm32f4xx_cryp_tdes.c ****       }
 305:FWLIB/src/stm32f4xx_cryp_tdes.c ****     }
 306:FWLIB/src/stm32f4xx_cryp_tdes.c ****     
 307:FWLIB/src/stm32f4xx_cryp_tdes.c ****     /* Disable Crypto */
 308:FWLIB/src/stm32f4xx_cryp_tdes.c ****     CRYP_Cmd(DISABLE);
 534              		.loc 1 308 0 is_stmt 1
 535 00d8 0020     		movs	r0, #0
 536 00da FFF7FEFF 		bl	CRYP_Cmd
 537              	.LVL96:
 538 00de 00E0     		b	.L17
 539              	.LVL97:
 540              	.L24:
 272:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 541              		.loc 1 272 0
 542 00e0 0026     		movs	r6, #0
 543              	.LVL98:
 544              	.L17:
 309:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 310:FWLIB/src/stm32f4xx_cryp_tdes.c ****   return status; 
 311:FWLIB/src/stm32f4xx_cryp_tdes.c **** }
 545              		.loc 1 311 0
 546 00e2 3046     		mov	r0, r6
 547 00e4 13B0     		add	sp, sp, #76
 548              	.LCFI5:
 549              		.cfi_def_cfa_offset 28
 550              		@ sp needed
 551 00e6 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 552              		.cfi_endproc
ARM GAS  C:\Users\why\AppData\Local\Temp\cclZkDGG.s 			page 25


 553              	.LFE124:
 555 00ea 00BF     		.text
 556              	.Letext0:
 557              		.file 3 "d:\\gcc_arm\\5.4 2016q3\\arm-none-eabi\\include\\machine\\_default_types.h"
 558              		.file 4 "d:\\gcc_arm\\5.4 2016q3\\arm-none-eabi\\include\\sys\\_stdint.h"
 559              		.file 5 "USER/stm32f4xx.h"
 560              		.file 6 "FWLIB/inc/stm32f4xx_cryp.h"
 561              		.file 7 "F4_CORE/core_cm4.h"
ARM GAS  C:\Users\why\AppData\Local\Temp\cclZkDGG.s 			page 26


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_cryp_tdes.c
C:\Users\why\AppData\Local\Temp\cclZkDGG.s:22     .text.CRYP_TDES_ECB:00000000 $t
C:\Users\why\AppData\Local\Temp\cclZkDGG.s:27     .text.CRYP_TDES_ECB:00000000 CRYP_TDES_ECB
C:\Users\why\AppData\Local\Temp\cclZkDGG.s:274    .text.CRYP_TDES_CBC:00000000 $t
C:\Users\why\AppData\Local\Temp\cclZkDGG.s:279    .text.CRYP_TDES_CBC:00000000 CRYP_TDES_CBC
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
CRYP_KeyStructInit
CRYP_Init
CRYP_KeyInit
CRYP_FIFOFlush
CRYP_Cmd
CRYP_GetCmdStatus
CRYP_DataIn
CRYP_GetFlagStatus
CRYP_DataOut
CRYP_IVInit
