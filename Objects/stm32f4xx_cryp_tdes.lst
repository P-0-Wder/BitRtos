ARM GAS  /tmp/ccxRCCeu.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_cryp_tdes.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.CRYP_TDES_ECB,"ax",%progbits
  18              		.align	1
  19              		.global	CRYP_TDES_ECB
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	CRYP_TDES_ECB:
  27              	.LVL0:
  28              	.LFB123:
  29              		.file 1 "FWLIB/src/stm32f4xx_cryp_tdes.c"
   1:FWLIB/src/stm32f4xx_cryp_tdes.c **** /**
   2:FWLIB/src/stm32f4xx_cryp_tdes.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @file    stm32f4xx_cryp_tdes.c
   4:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @version V1.8.0
   6:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @date    04-November-2016
   7:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @brief   This file provides high level functions to encrypt and decrypt an 
   8:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *          input message using TDES in ECB/CBC modes .
   9:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *          It uses the stm32f4xx_cryp.c/.h drivers to access the STM32F4xx CRYP
  10:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *          peripheral.
  11:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *
  12:FWLIB/src/stm32f4xx_cryp_tdes.c **** @verbatim
  13:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  14:FWLIB/src/stm32f4xx_cryp_tdes.c ****  ===============================================================================
  15:FWLIB/src/stm32f4xx_cryp_tdes.c ****                            ##### How to use this driver #####
  16:FWLIB/src/stm32f4xx_cryp_tdes.c ****  ===============================================================================
  17:FWLIB/src/stm32f4xx_cryp_tdes.c ****  [..]
  18:FWLIB/src/stm32f4xx_cryp_tdes.c ****    (#) Enable The CRYP controller clock using 
  19:FWLIB/src/stm32f4xx_cryp_tdes.c ****        RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_CRYP, ENABLE); function.
  20:FWLIB/src/stm32f4xx_cryp_tdes.c ****   
  21:FWLIB/src/stm32f4xx_cryp_tdes.c ****    (#) Encrypt and decrypt using TDES in ECB Mode using CRYP_TDES_ECB() function.
  22:FWLIB/src/stm32f4xx_cryp_tdes.c ****   
  23:FWLIB/src/stm32f4xx_cryp_tdes.c ****    (#) Encrypt and decrypt using TDES in CBC Mode using CRYP_TDES_CBC() function.
  24:FWLIB/src/stm32f4xx_cryp_tdes.c ****   
  25:FWLIB/src/stm32f4xx_cryp_tdes.c **** @endverbatim
  26:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *
  27:FWLIB/src/stm32f4xx_cryp_tdes.c ****   ******************************************************************************
  28:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @attention
  29:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *
ARM GAS  /tmp/ccxRCCeu.s 			page 2


  30:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
  31:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *
  32:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  33:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * You may not use this file except in compliance with the License.
  34:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * You may obtain a copy of the License at:
  35:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *
  36:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  37:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *
  38:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * Unless required by applicable law or agreed to in writing, software 
  39:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  40:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  41:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * See the License for the specific language governing permissions and
  42:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * limitations under the License.
  43:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *
  44:FWLIB/src/stm32f4xx_cryp_tdes.c ****   ******************************************************************************
  45:FWLIB/src/stm32f4xx_cryp_tdes.c ****   */ 
  46:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  47:FWLIB/src/stm32f4xx_cryp_tdes.c **** /* Includes ------------------------------------------------------------------*/
  48:FWLIB/src/stm32f4xx_cryp_tdes.c **** #include "stm32f4xx_cryp.h"
  49:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  50:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  51:FWLIB/src/stm32f4xx_cryp_tdes.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  52:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @{
  53:FWLIB/src/stm32f4xx_cryp_tdes.c ****   */
  54:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  55:FWLIB/src/stm32f4xx_cryp_tdes.c **** /** @defgroup CRYP 
  56:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @brief CRYP driver modules
  57:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @{
  58:FWLIB/src/stm32f4xx_cryp_tdes.c ****   */
  59:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  60:FWLIB/src/stm32f4xx_cryp_tdes.c **** /* Private typedef -----------------------------------------------------------*/
  61:FWLIB/src/stm32f4xx_cryp_tdes.c **** /* Private define ------------------------------------------------------------*/
  62:FWLIB/src/stm32f4xx_cryp_tdes.c **** #define TDESBUSY_TIMEOUT    ((uint32_t) 0x00010000)
  63:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  64:FWLIB/src/stm32f4xx_cryp_tdes.c **** /* Private macro -------------------------------------------------------------*/
  65:FWLIB/src/stm32f4xx_cryp_tdes.c **** /* Private variables ---------------------------------------------------------*/
  66:FWLIB/src/stm32f4xx_cryp_tdes.c **** /* Private function prototypes -----------------------------------------------*/
  67:FWLIB/src/stm32f4xx_cryp_tdes.c **** /* Private functions ---------------------------------------------------------*/
  68:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  69:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  70:FWLIB/src/stm32f4xx_cryp_tdes.c **** /** @defgroup CRYP_Private_Functions
  71:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @{
  72:FWLIB/src/stm32f4xx_cryp_tdes.c ****   */ 
  73:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  74:FWLIB/src/stm32f4xx_cryp_tdes.c **** /** @defgroup CRYP_Group7 High Level TDES functions
  75:FWLIB/src/stm32f4xx_cryp_tdes.c ****  *  @brief   High Level TDES functions 
  76:FWLIB/src/stm32f4xx_cryp_tdes.c ****  *
  77:FWLIB/src/stm32f4xx_cryp_tdes.c **** @verbatim   
  78:FWLIB/src/stm32f4xx_cryp_tdes.c ****  ===============================================================================
  79:FWLIB/src/stm32f4xx_cryp_tdes.c ****                       ##### High Level TDES functions #####
  80:FWLIB/src/stm32f4xx_cryp_tdes.c ****  ===============================================================================
  81:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  82:FWLIB/src/stm32f4xx_cryp_tdes.c **** @endverbatim
  83:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @{
  84:FWLIB/src/stm32f4xx_cryp_tdes.c ****   */
  85:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
  86:FWLIB/src/stm32f4xx_cryp_tdes.c **** /**
ARM GAS  /tmp/ccxRCCeu.s 			page 3


  87:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @brief  Encrypt and decrypt using TDES in ECB Mode
  88:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Mode: encryption or decryption Mode.
  89:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *           This parameter can be one of the following values:
  90:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *            @arg MODE_ENCRYPT: Encryption
  91:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *            @arg MODE_DECRYPT: Decryption
  92:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Key: Key used for TDES algorithm.
  93:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 8.
  94:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Input: pointer to the Input buffer.
  95:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Output: pointer to the returned buffer.
  96:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @retval An ErrorStatus enumeration value:
  97:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *          - SUCCESS: Operation done
  98:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *          - ERROR: Operation failed
  99:FWLIB/src/stm32f4xx_cryp_tdes.c ****   */
 100:FWLIB/src/stm32f4xx_cryp_tdes.c **** ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
 101:FWLIB/src/stm32f4xx_cryp_tdes.c ****                           uint32_t Ilength, uint8_t *Output)
 102:FWLIB/src/stm32f4xx_cryp_tdes.c **** {
  30              		.loc 1 102 1 view -0
  31              		.cfi_startproc
  32              		@ args = 4, pretend = 0, frame = 56
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 102 1 is_stmt 0 view .LVU1
  35 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 24
  38              		.cfi_offset 4, -24
  39              		.cfi_offset 5, -20
  40              		.cfi_offset 6, -16
  41              		.cfi_offset 7, -12
  42              		.cfi_offset 8, -8
  43              		.cfi_offset 14, -4
  44 0004 8EB0     		sub	sp, sp, #56
  45              	.LCFI1:
  46              		.cfi_def_cfa_offset 80
  47 0006 0646     		mov	r6, r0
  48 0008 0D46     		mov	r5, r1
  49 000a 9846     		mov	r8, r3
 103:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_InitTypeDef TDES_CRYP_InitStructure;
  50              		.loc 1 103 3 is_stmt 1 view .LVU2
 104:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  51              		.loc 1 104 3 view .LVU3
 105:FWLIB/src/stm32f4xx_cryp_tdes.c ****   __IO uint32_t counter = 0;
  52              		.loc 1 105 3 view .LVU4
  53              		.loc 1 105 17 is_stmt 0 view .LVU5
  54 000c 0023     		movs	r3, #0
  55              	.LVL1:
  56              		.loc 1 105 17 view .LVU6
  57 000e 0193     		str	r3, [sp, #4]
 106:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t busystatus = 0;
  58              		.loc 1 106 3 is_stmt 1 view .LVU7
  59              	.LVL2:
 107:FWLIB/src/stm32f4xx_cryp_tdes.c ****   ErrorStatus status = SUCCESS;
  60              		.loc 1 107 3 view .LVU8
 108:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t keyaddr    = (uint32_t)Key;
  61              		.loc 1 108 3 view .LVU9
 109:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t inputaddr  = (uint32_t)Input;
  62              		.loc 1 109 3 view .LVU10
  63              		.loc 1 109 12 is_stmt 0 view .LVU11
ARM GAS  /tmp/ccxRCCeu.s 			page 4


  64 0010 1446     		mov	r4, r2
  65              	.LVL3:
 110:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t outputaddr = (uint32_t)Output;
  66              		.loc 1 110 3 is_stmt 1 view .LVU12
  67              		.loc 1 110 12 is_stmt 0 view .LVU13
  68 0012 149F     		ldr	r7, [sp, #80]
  69              	.LVL4:
 111:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t i = 0;
  70              		.loc 1 111 3 is_stmt 1 view .LVU14
 112:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 113:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Crypto structures initialisation*/
 114:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
  71              		.loc 1 114 3 view .LVU15
  72 0014 02A8     		add	r0, sp, #8
  73              	.LVL5:
  74              		.loc 1 114 3 is_stmt 0 view .LVU16
  75 0016 FFF7FEFF 		bl	CRYP_KeyStructInit
  76              	.LVL6:
 115:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 116:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Crypto Init for Encryption process */
 117:FWLIB/src/stm32f4xx_cryp_tdes.c ****   if(Mode == MODE_ENCRYPT) /* TDES encryption */
  77              		.loc 1 117 3 is_stmt 1 view .LVU17
  78              		.loc 1 117 5 is_stmt 0 view .LVU18
  79 001a 012E     		cmp	r6, #1
  80 001c 28D0     		beq	.L14
 118:FWLIB/src/stm32f4xx_cryp_tdes.c ****   {
 119:FWLIB/src/stm32f4xx_cryp_tdes.c ****      TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 120:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 121:FWLIB/src/stm32f4xx_cryp_tdes.c ****   else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
 122:FWLIB/src/stm32f4xx_cryp_tdes.c ****   {
 123:FWLIB/src/stm32f4xx_cryp_tdes.c ****      TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
  81              		.loc 1 123 6 is_stmt 1 view .LVU19
  82              		.loc 1 123 43 is_stmt 0 view .LVU20
  83 001e 0423     		movs	r3, #4
  84 0020 0A93     		str	r3, [sp, #40]
  85              	.L3:
 124:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 125:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 126:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
  86              		.loc 1 126 3 is_stmt 1 view .LVU21
  87              		.loc 1 126 41 is_stmt 0 view .LVU22
  88 0022 0023     		movs	r3, #0
  89 0024 0B93     		str	r3, [sp, #44]
 127:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  90              		.loc 1 127 3 is_stmt 1 view .LVU23
  91              		.loc 1 127 41 is_stmt 0 view .LVU24
  92 0026 8023     		movs	r3, #128
  93 0028 0C93     		str	r3, [sp, #48]
 128:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_Init(&TDES_CRYP_InitStructure);
  94              		.loc 1 128 3 is_stmt 1 view .LVU25
  95 002a 0AA8     		add	r0, sp, #40
  96 002c FFF7FEFF 		bl	CRYP_Init
  97              	.LVL7:
 129:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 130:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Key Initialisation */
 131:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
  98              		.loc 1 131 3 view .LVU26
ARM GAS  /tmp/ccxRCCeu.s 			page 5


  99              		.loc 1 131 46 is_stmt 0 view .LVU27
 100 0030 2B68     		ldr	r3, [r5]
 101              	.LVL8:
 102              	.LBB30:
 103              	.LBI30:
 104              		.file 2 "F4_CORE/core_cmInstr.h"
   1:F4_CORE/core_cmInstr.h **** /**************************************************************************//**
   2:F4_CORE/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:F4_CORE/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:F4_CORE/core_cmInstr.h ****  * @version  V4.10
   5:F4_CORE/core_cmInstr.h ****  * @date     18. March 2015
   6:F4_CORE/core_cmInstr.h ****  *
   7:F4_CORE/core_cmInstr.h ****  * @note
   8:F4_CORE/core_cmInstr.h ****  *
   9:F4_CORE/core_cmInstr.h ****  ******************************************************************************/
  10:F4_CORE/core_cmInstr.h **** /* Copyright (c) 2009 - 2014 ARM LIMITED
  11:F4_CORE/core_cmInstr.h **** 
  12:F4_CORE/core_cmInstr.h ****    All rights reserved.
  13:F4_CORE/core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:F4_CORE/core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:F4_CORE/core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:F4_CORE/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:F4_CORE/core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:F4_CORE/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:F4_CORE/core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:F4_CORE/core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:F4_CORE/core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:F4_CORE/core_cmInstr.h ****      specific prior written permission.
  23:F4_CORE/core_cmInstr.h ****    *
  24:F4_CORE/core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:F4_CORE/core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:F4_CORE/core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:F4_CORE/core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:F4_CORE/core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:F4_CORE/core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:F4_CORE/core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:F4_CORE/core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:F4_CORE/core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:F4_CORE/core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:F4_CORE/core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:F4_CORE/core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:F4_CORE/core_cmInstr.h **** 
  37:F4_CORE/core_cmInstr.h **** 
  38:F4_CORE/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:F4_CORE/core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:F4_CORE/core_cmInstr.h **** 
  41:F4_CORE/core_cmInstr.h **** 
  42:F4_CORE/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:F4_CORE/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:F4_CORE/core_cmInstr.h ****   Access to dedicated instructions
  45:F4_CORE/core_cmInstr.h ****   @{
  46:F4_CORE/core_cmInstr.h **** */
  47:F4_CORE/core_cmInstr.h **** 
  48:F4_CORE/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:F4_CORE/core_cmInstr.h **** /* ARM armcc specific functions */
  50:F4_CORE/core_cmInstr.h **** 
  51:F4_CORE/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
ARM GAS  /tmp/ccxRCCeu.s 			page 6


  52:F4_CORE/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:F4_CORE/core_cmInstr.h **** #endif
  54:F4_CORE/core_cmInstr.h **** 
  55:F4_CORE/core_cmInstr.h **** 
  56:F4_CORE/core_cmInstr.h **** /** \brief  No Operation
  57:F4_CORE/core_cmInstr.h **** 
  58:F4_CORE/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:F4_CORE/core_cmInstr.h ****  */
  60:F4_CORE/core_cmInstr.h **** #define __NOP                             __nop
  61:F4_CORE/core_cmInstr.h **** 
  62:F4_CORE/core_cmInstr.h **** 
  63:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:F4_CORE/core_cmInstr.h **** 
  65:F4_CORE/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:F4_CORE/core_cmInstr.h ****     until one of a number of events occurs.
  67:F4_CORE/core_cmInstr.h ****  */
  68:F4_CORE/core_cmInstr.h **** #define __WFI                             __wfi
  69:F4_CORE/core_cmInstr.h **** 
  70:F4_CORE/core_cmInstr.h **** 
  71:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Event
  72:F4_CORE/core_cmInstr.h **** 
  73:F4_CORE/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:F4_CORE/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:F4_CORE/core_cmInstr.h ****  */
  76:F4_CORE/core_cmInstr.h **** #define __WFE                             __wfe
  77:F4_CORE/core_cmInstr.h **** 
  78:F4_CORE/core_cmInstr.h **** 
  79:F4_CORE/core_cmInstr.h **** /** \brief  Send Event
  80:F4_CORE/core_cmInstr.h **** 
  81:F4_CORE/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:F4_CORE/core_cmInstr.h ****  */
  83:F4_CORE/core_cmInstr.h **** #define __SEV                             __sev
  84:F4_CORE/core_cmInstr.h **** 
  85:F4_CORE/core_cmInstr.h **** 
  86:F4_CORE/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:F4_CORE/core_cmInstr.h **** 
  88:F4_CORE/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:F4_CORE/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:F4_CORE/core_cmInstr.h ****     memory, after the instruction has been completed.
  91:F4_CORE/core_cmInstr.h ****  */
  92:F4_CORE/core_cmInstr.h **** #define __ISB() do {\
  93:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
  94:F4_CORE/core_cmInstr.h ****                    __isb(0xF);\
  95:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
  96:F4_CORE/core_cmInstr.h ****                 } while (0)
  97:F4_CORE/core_cmInstr.h **** 
  98:F4_CORE/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  99:F4_CORE/core_cmInstr.h **** 
 100:F4_CORE/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 101:F4_CORE/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 102:F4_CORE/core_cmInstr.h ****  */
 103:F4_CORE/core_cmInstr.h **** #define __DSB() do {\
 104:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 105:F4_CORE/core_cmInstr.h ****                    __dsb(0xF);\
 106:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 107:F4_CORE/core_cmInstr.h ****                 } while (0)
 108:F4_CORE/core_cmInstr.h **** 
ARM GAS  /tmp/ccxRCCeu.s 			page 7


 109:F4_CORE/core_cmInstr.h **** /** \brief  Data Memory Barrier
 110:F4_CORE/core_cmInstr.h **** 
 111:F4_CORE/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 112:F4_CORE/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 113:F4_CORE/core_cmInstr.h ****  */
 114:F4_CORE/core_cmInstr.h **** #define __DMB() do {\
 115:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 116:F4_CORE/core_cmInstr.h ****                    __dmb(0xF);\
 117:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 118:F4_CORE/core_cmInstr.h ****                 } while (0)
 119:F4_CORE/core_cmInstr.h **** 
 120:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 121:F4_CORE/core_cmInstr.h **** 
 122:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in integer value.
 123:F4_CORE/core_cmInstr.h **** 
 124:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 125:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 126:F4_CORE/core_cmInstr.h ****  */
 127:F4_CORE/core_cmInstr.h **** #define __REV                             __rev
 128:F4_CORE/core_cmInstr.h **** 
 129:F4_CORE/core_cmInstr.h **** 
 130:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 131:F4_CORE/core_cmInstr.h **** 
 132:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 133:F4_CORE/core_cmInstr.h **** 
 134:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 135:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 136:F4_CORE/core_cmInstr.h ****  */
 137:F4_CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 138:F4_CORE/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 139:F4_CORE/core_cmInstr.h **** {
 140:F4_CORE/core_cmInstr.h ****   rev16 r0, r0
 141:F4_CORE/core_cmInstr.h ****   bx lr
 142:F4_CORE/core_cmInstr.h **** }
 143:F4_CORE/core_cmInstr.h **** #endif
 144:F4_CORE/core_cmInstr.h **** 
 145:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 146:F4_CORE/core_cmInstr.h **** 
 147:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 148:F4_CORE/core_cmInstr.h **** 
 149:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 150:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 151:F4_CORE/core_cmInstr.h ****  */
 152:F4_CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 153:F4_CORE/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 154:F4_CORE/core_cmInstr.h **** {
 155:F4_CORE/core_cmInstr.h ****   revsh r0, r0
 156:F4_CORE/core_cmInstr.h ****   bx lr
 157:F4_CORE/core_cmInstr.h **** }
 158:F4_CORE/core_cmInstr.h **** #endif
 159:F4_CORE/core_cmInstr.h **** 
 160:F4_CORE/core_cmInstr.h **** 
 161:F4_CORE/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 162:F4_CORE/core_cmInstr.h **** 
 163:F4_CORE/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 164:F4_CORE/core_cmInstr.h **** 
 165:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to rotate
ARM GAS  /tmp/ccxRCCeu.s 			page 8


 166:F4_CORE/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 167:F4_CORE/core_cmInstr.h ****     \return               Rotated value
 168:F4_CORE/core_cmInstr.h ****  */
 169:F4_CORE/core_cmInstr.h **** #define __ROR                             __ror
 170:F4_CORE/core_cmInstr.h **** 
 171:F4_CORE/core_cmInstr.h **** 
 172:F4_CORE/core_cmInstr.h **** /** \brief  Breakpoint
 173:F4_CORE/core_cmInstr.h **** 
 174:F4_CORE/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 175:F4_CORE/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 176:F4_CORE/core_cmInstr.h **** 
 177:F4_CORE/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 178:F4_CORE/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 179:F4_CORE/core_cmInstr.h ****  */
 180:F4_CORE/core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 181:F4_CORE/core_cmInstr.h **** 
 182:F4_CORE/core_cmInstr.h **** 
 183:F4_CORE/core_cmInstr.h **** /** \brief  Reverse bit order of value
 184:F4_CORE/core_cmInstr.h **** 
 185:F4_CORE/core_cmInstr.h ****     This function reverses the bit order of the given value.
 186:F4_CORE/core_cmInstr.h **** 
 187:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 188:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 189:F4_CORE/core_cmInstr.h ****  */
 190:F4_CORE/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 191:F4_CORE/core_cmInstr.h ****   #define __RBIT                          __rbit
 192:F4_CORE/core_cmInstr.h **** #else
 193:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 194:F4_CORE/core_cmInstr.h **** {
 195:F4_CORE/core_cmInstr.h ****   uint32_t result;
 196:F4_CORE/core_cmInstr.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; // extra shift needed at end
 197:F4_CORE/core_cmInstr.h **** 
 198:F4_CORE/core_cmInstr.h ****   result = value;                      // r will be reversed bits of v; first get LSB of v
 199:F4_CORE/core_cmInstr.h ****   for (value >>= 1; value; value >>= 1)
 200:F4_CORE/core_cmInstr.h ****   {
 201:F4_CORE/core_cmInstr.h ****     result <<= 1;
 202:F4_CORE/core_cmInstr.h ****     result |= value & 1;
 203:F4_CORE/core_cmInstr.h ****     s--;
 204:F4_CORE/core_cmInstr.h ****   }
 205:F4_CORE/core_cmInstr.h ****   result <<= s;                       // shift when v's highest bits are zero
 206:F4_CORE/core_cmInstr.h ****   return(result);
 207:F4_CORE/core_cmInstr.h **** }
 208:F4_CORE/core_cmInstr.h **** #endif
 209:F4_CORE/core_cmInstr.h **** 
 210:F4_CORE/core_cmInstr.h **** 
 211:F4_CORE/core_cmInstr.h **** /** \brief  Count leading zeros
 212:F4_CORE/core_cmInstr.h **** 
 213:F4_CORE/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 214:F4_CORE/core_cmInstr.h **** 
 215:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 216:F4_CORE/core_cmInstr.h ****     \return             number of leading zeros in value
 217:F4_CORE/core_cmInstr.h ****  */
 218:F4_CORE/core_cmInstr.h **** #define __CLZ                             __clz
 219:F4_CORE/core_cmInstr.h **** 
 220:F4_CORE/core_cmInstr.h **** 
 221:F4_CORE/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 222:F4_CORE/core_cmInstr.h **** 
ARM GAS  /tmp/ccxRCCeu.s 			page 9


 223:F4_CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 224:F4_CORE/core_cmInstr.h **** 
 225:F4_CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 8 bit value.
 226:F4_CORE/core_cmInstr.h **** 
 227:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 228:F4_CORE/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 229:F4_CORE/core_cmInstr.h ****  */
 230:F4_CORE/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 231:F4_CORE/core_cmInstr.h **** 
 232:F4_CORE/core_cmInstr.h **** 
 233:F4_CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 234:F4_CORE/core_cmInstr.h **** 
 235:F4_CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 16 bit values.
 236:F4_CORE/core_cmInstr.h **** 
 237:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 238:F4_CORE/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 239:F4_CORE/core_cmInstr.h ****  */
 240:F4_CORE/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 241:F4_CORE/core_cmInstr.h **** 
 242:F4_CORE/core_cmInstr.h **** 
 243:F4_CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 244:F4_CORE/core_cmInstr.h **** 
 245:F4_CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 32 bit values.
 246:F4_CORE/core_cmInstr.h **** 
 247:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 248:F4_CORE/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 249:F4_CORE/core_cmInstr.h ****  */
 250:F4_CORE/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 251:F4_CORE/core_cmInstr.h **** 
 252:F4_CORE/core_cmInstr.h **** 
 253:F4_CORE/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 254:F4_CORE/core_cmInstr.h **** 
 255:F4_CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 8 bit values.
 256:F4_CORE/core_cmInstr.h **** 
 257:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 258:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 259:F4_CORE/core_cmInstr.h ****     \return          0  Function succeeded
 260:F4_CORE/core_cmInstr.h ****     \return          1  Function failed
 261:F4_CORE/core_cmInstr.h ****  */
 262:F4_CORE/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 263:F4_CORE/core_cmInstr.h **** 
 264:F4_CORE/core_cmInstr.h **** 
 265:F4_CORE/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 266:F4_CORE/core_cmInstr.h **** 
 267:F4_CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 16 bit values.
 268:F4_CORE/core_cmInstr.h **** 
 269:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 270:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 271:F4_CORE/core_cmInstr.h ****     \return          0  Function succeeded
 272:F4_CORE/core_cmInstr.h ****     \return          1  Function failed
 273:F4_CORE/core_cmInstr.h ****  */
 274:F4_CORE/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 275:F4_CORE/core_cmInstr.h **** 
 276:F4_CORE/core_cmInstr.h **** 
 277:F4_CORE/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 278:F4_CORE/core_cmInstr.h **** 
 279:F4_CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 32 bit values.
ARM GAS  /tmp/ccxRCCeu.s 			page 10


 280:F4_CORE/core_cmInstr.h **** 
 281:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 282:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 283:F4_CORE/core_cmInstr.h ****     \return          0  Function succeeded
 284:F4_CORE/core_cmInstr.h ****     \return          1  Function failed
 285:F4_CORE/core_cmInstr.h ****  */
 286:F4_CORE/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 287:F4_CORE/core_cmInstr.h **** 
 288:F4_CORE/core_cmInstr.h **** 
 289:F4_CORE/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 290:F4_CORE/core_cmInstr.h **** 
 291:F4_CORE/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 292:F4_CORE/core_cmInstr.h **** 
 293:F4_CORE/core_cmInstr.h ****  */
 294:F4_CORE/core_cmInstr.h **** #define __CLREX                           __clrex
 295:F4_CORE/core_cmInstr.h **** 
 296:F4_CORE/core_cmInstr.h **** 
 297:F4_CORE/core_cmInstr.h **** /** \brief  Signed Saturate
 298:F4_CORE/core_cmInstr.h **** 
 299:F4_CORE/core_cmInstr.h ****     This function saturates a signed value.
 300:F4_CORE/core_cmInstr.h **** 
 301:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 302:F4_CORE/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 303:F4_CORE/core_cmInstr.h ****     \return             Saturated value
 304:F4_CORE/core_cmInstr.h ****  */
 305:F4_CORE/core_cmInstr.h **** #define __SSAT                            __ssat
 306:F4_CORE/core_cmInstr.h **** 
 307:F4_CORE/core_cmInstr.h **** 
 308:F4_CORE/core_cmInstr.h **** /** \brief  Unsigned Saturate
 309:F4_CORE/core_cmInstr.h **** 
 310:F4_CORE/core_cmInstr.h ****     This function saturates an unsigned value.
 311:F4_CORE/core_cmInstr.h **** 
 312:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 313:F4_CORE/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 314:F4_CORE/core_cmInstr.h ****     \return             Saturated value
 315:F4_CORE/core_cmInstr.h ****  */
 316:F4_CORE/core_cmInstr.h **** #define __USAT                            __usat
 317:F4_CORE/core_cmInstr.h **** 
 318:F4_CORE/core_cmInstr.h **** 
 319:F4_CORE/core_cmInstr.h **** /** \brief  Rotate Right with Extend (32 bit)
 320:F4_CORE/core_cmInstr.h **** 
 321:F4_CORE/core_cmInstr.h ****     This function moves each bit of a bitstring right by one bit.
 322:F4_CORE/core_cmInstr.h ****     The carry input is shifted in at the left end of the bitstring.
 323:F4_CORE/core_cmInstr.h **** 
 324:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to rotate
 325:F4_CORE/core_cmInstr.h ****     \return               Rotated value
 326:F4_CORE/core_cmInstr.h ****  */
 327:F4_CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 328:F4_CORE/core_cmInstr.h **** __attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
 329:F4_CORE/core_cmInstr.h **** {
 330:F4_CORE/core_cmInstr.h ****   rrx r0, r0
 331:F4_CORE/core_cmInstr.h ****   bx lr
 332:F4_CORE/core_cmInstr.h **** }
 333:F4_CORE/core_cmInstr.h **** #endif
 334:F4_CORE/core_cmInstr.h **** 
 335:F4_CORE/core_cmInstr.h **** 
 336:F4_CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (8 bit)
ARM GAS  /tmp/ccxRCCeu.s 			page 11


 337:F4_CORE/core_cmInstr.h **** 
 338:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 8 bit value.
 339:F4_CORE/core_cmInstr.h **** 
 340:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 341:F4_CORE/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 342:F4_CORE/core_cmInstr.h ****  */
 343:F4_CORE/core_cmInstr.h **** #define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
 344:F4_CORE/core_cmInstr.h **** 
 345:F4_CORE/core_cmInstr.h **** 
 346:F4_CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (16 bit)
 347:F4_CORE/core_cmInstr.h **** 
 348:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 16 bit values.
 349:F4_CORE/core_cmInstr.h **** 
 350:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 351:F4_CORE/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 352:F4_CORE/core_cmInstr.h ****  */
 353:F4_CORE/core_cmInstr.h **** #define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
 354:F4_CORE/core_cmInstr.h **** 
 355:F4_CORE/core_cmInstr.h **** 
 356:F4_CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (32 bit)
 357:F4_CORE/core_cmInstr.h **** 
 358:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 32 bit values.
 359:F4_CORE/core_cmInstr.h **** 
 360:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 361:F4_CORE/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 362:F4_CORE/core_cmInstr.h ****  */
 363:F4_CORE/core_cmInstr.h **** #define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
 364:F4_CORE/core_cmInstr.h **** 
 365:F4_CORE/core_cmInstr.h **** 
 366:F4_CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (8 bit)
 367:F4_CORE/core_cmInstr.h **** 
 368:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 8 bit values.
 369:F4_CORE/core_cmInstr.h **** 
 370:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 371:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 372:F4_CORE/core_cmInstr.h ****  */
 373:F4_CORE/core_cmInstr.h **** #define __STRBT(value, ptr)               __strt(value, ptr)
 374:F4_CORE/core_cmInstr.h **** 
 375:F4_CORE/core_cmInstr.h **** 
 376:F4_CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (16 bit)
 377:F4_CORE/core_cmInstr.h **** 
 378:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 16 bit values.
 379:F4_CORE/core_cmInstr.h **** 
 380:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 381:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 382:F4_CORE/core_cmInstr.h ****  */
 383:F4_CORE/core_cmInstr.h **** #define __STRHT(value, ptr)               __strt(value, ptr)
 384:F4_CORE/core_cmInstr.h **** 
 385:F4_CORE/core_cmInstr.h **** 
 386:F4_CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (32 bit)
 387:F4_CORE/core_cmInstr.h **** 
 388:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 32 bit values.
 389:F4_CORE/core_cmInstr.h **** 
 390:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 391:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 392:F4_CORE/core_cmInstr.h ****  */
 393:F4_CORE/core_cmInstr.h **** #define __STRT(value, ptr)                __strt(value, ptr)
ARM GAS  /tmp/ccxRCCeu.s 			page 12


 394:F4_CORE/core_cmInstr.h **** 
 395:F4_CORE/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300) */
 396:F4_CORE/core_cmInstr.h **** 
 397:F4_CORE/core_cmInstr.h **** 
 398:F4_CORE/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 399:F4_CORE/core_cmInstr.h **** /* GNU gcc specific functions */
 400:F4_CORE/core_cmInstr.h **** 
 401:F4_CORE/core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 402:F4_CORE/core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 403:F4_CORE/core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 404:F4_CORE/core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 405:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 406:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 407:F4_CORE/core_cmInstr.h **** #else
 408:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 409:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 410:F4_CORE/core_cmInstr.h **** #endif
 411:F4_CORE/core_cmInstr.h **** 
 412:F4_CORE/core_cmInstr.h **** /** \brief  No Operation
 413:F4_CORE/core_cmInstr.h **** 
 414:F4_CORE/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 415:F4_CORE/core_cmInstr.h ****  */
 416:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 417:F4_CORE/core_cmInstr.h **** {
 418:F4_CORE/core_cmInstr.h ****   __ASM volatile ("nop");
 419:F4_CORE/core_cmInstr.h **** }
 420:F4_CORE/core_cmInstr.h **** 
 421:F4_CORE/core_cmInstr.h **** 
 422:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Interrupt
 423:F4_CORE/core_cmInstr.h **** 
 424:F4_CORE/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 425:F4_CORE/core_cmInstr.h ****     until one of a number of events occurs.
 426:F4_CORE/core_cmInstr.h ****  */
 427:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 428:F4_CORE/core_cmInstr.h **** {
 429:F4_CORE/core_cmInstr.h ****   __ASM volatile ("wfi");
 430:F4_CORE/core_cmInstr.h **** }
 431:F4_CORE/core_cmInstr.h **** 
 432:F4_CORE/core_cmInstr.h **** 
 433:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Event
 434:F4_CORE/core_cmInstr.h **** 
 435:F4_CORE/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 436:F4_CORE/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 437:F4_CORE/core_cmInstr.h ****  */
 438:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 439:F4_CORE/core_cmInstr.h **** {
 440:F4_CORE/core_cmInstr.h ****   __ASM volatile ("wfe");
 441:F4_CORE/core_cmInstr.h **** }
 442:F4_CORE/core_cmInstr.h **** 
 443:F4_CORE/core_cmInstr.h **** 
 444:F4_CORE/core_cmInstr.h **** /** \brief  Send Event
 445:F4_CORE/core_cmInstr.h **** 
 446:F4_CORE/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 447:F4_CORE/core_cmInstr.h ****  */
 448:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 449:F4_CORE/core_cmInstr.h **** {
 450:F4_CORE/core_cmInstr.h ****   __ASM volatile ("sev");
ARM GAS  /tmp/ccxRCCeu.s 			page 13


 451:F4_CORE/core_cmInstr.h **** }
 452:F4_CORE/core_cmInstr.h **** 
 453:F4_CORE/core_cmInstr.h **** 
 454:F4_CORE/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 455:F4_CORE/core_cmInstr.h **** 
 456:F4_CORE/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 457:F4_CORE/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 458:F4_CORE/core_cmInstr.h ****     memory, after the instruction has been completed.
 459:F4_CORE/core_cmInstr.h ****  */
 460:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 461:F4_CORE/core_cmInstr.h **** {
 462:F4_CORE/core_cmInstr.h ****   __ASM volatile ("isb 0xF":::"memory");
 463:F4_CORE/core_cmInstr.h **** }
 464:F4_CORE/core_cmInstr.h **** 
 465:F4_CORE/core_cmInstr.h **** 
 466:F4_CORE/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 467:F4_CORE/core_cmInstr.h **** 
 468:F4_CORE/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 469:F4_CORE/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 470:F4_CORE/core_cmInstr.h ****  */
 471:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 472:F4_CORE/core_cmInstr.h **** {
 473:F4_CORE/core_cmInstr.h ****   __ASM volatile ("dsb 0xF":::"memory");
 474:F4_CORE/core_cmInstr.h **** }
 475:F4_CORE/core_cmInstr.h **** 
 476:F4_CORE/core_cmInstr.h **** 
 477:F4_CORE/core_cmInstr.h **** /** \brief  Data Memory Barrier
 478:F4_CORE/core_cmInstr.h **** 
 479:F4_CORE/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 480:F4_CORE/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 481:F4_CORE/core_cmInstr.h ****  */
 482:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 483:F4_CORE/core_cmInstr.h **** {
 484:F4_CORE/core_cmInstr.h ****   __ASM volatile ("dmb 0xF":::"memory");
 485:F4_CORE/core_cmInstr.h **** }
 486:F4_CORE/core_cmInstr.h **** 
 487:F4_CORE/core_cmInstr.h **** 
 488:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 489:F4_CORE/core_cmInstr.h **** 
 490:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in integer value.
 491:F4_CORE/core_cmInstr.h **** 
 492:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 493:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 494:F4_CORE/core_cmInstr.h ****  */
 495:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 105              		.loc 2 495 57 is_stmt 1 view .LVU28
 106              	.LBB31:
 496:F4_CORE/core_cmInstr.h **** {
 497:F4_CORE/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 498:F4_CORE/core_cmInstr.h ****   return __builtin_bswap32(value);
 107              		.loc 2 498 3 view .LVU29
 108              		.loc 2 498 10 is_stmt 0 view .LVU30
 109 0032 1BBA     		rev	r3, r3
 110              	.LVL9:
 111              		.loc 2 498 10 view .LVU31
 112              	.LBE31:
 113              	.LBE30:
ARM GAS  /tmp/ccxRCCeu.s 			page 14


 114              		.loc 1 131 44 view .LVU32
 115 0034 0493     		str	r3, [sp, #16]
 132:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 116              		.loc 1 132 3 is_stmt 1 view .LVU33
 117              	.LVL10:
 133:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 118              		.loc 1 133 3 view .LVU34
 119              		.loc 1 133 46 is_stmt 0 view .LVU35
 120 0036 6B68     		ldr	r3, [r5, #4]
 121              	.LVL11:
 122              	.LBB32:
 123              	.LBI32:
 495:F4_CORE/core_cmInstr.h **** {
 124              		.loc 2 495 57 is_stmt 1 view .LVU36
 125              	.LBB33:
 126              		.loc 2 498 3 view .LVU37
 127              		.loc 2 498 10 is_stmt 0 view .LVU38
 128 0038 1BBA     		rev	r3, r3
 129              	.LVL12:
 130              		.loc 2 498 10 view .LVU39
 131              	.LBE33:
 132              	.LBE32:
 133              		.loc 1 133 44 view .LVU40
 134 003a 0593     		str	r3, [sp, #20]
 134:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 135              		.loc 1 134 3 is_stmt 1 view .LVU41
 136              	.LVL13:
 135:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 137              		.loc 1 135 3 view .LVU42
 138              		.loc 1 135 46 is_stmt 0 view .LVU43
 139 003c AB68     		ldr	r3, [r5, #8]
 140              	.LVL14:
 141              	.LBB34:
 142              	.LBI34:
 495:F4_CORE/core_cmInstr.h **** {
 143              		.loc 2 495 57 is_stmt 1 view .LVU44
 144              	.LBB35:
 145              		.loc 2 498 3 view .LVU45
 146              		.loc 2 498 10 is_stmt 0 view .LVU46
 147 003e 1BBA     		rev	r3, r3
 148              	.LVL15:
 149              		.loc 2 498 10 view .LVU47
 150              	.LBE35:
 151              	.LBE34:
 152              		.loc 1 135 44 view .LVU48
 153 0040 0693     		str	r3, [sp, #24]
 136:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 154              		.loc 1 136 3 is_stmt 1 view .LVU49
 155              	.LVL16:
 137:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 156              		.loc 1 137 3 view .LVU50
 157              		.loc 1 137 46 is_stmt 0 view .LVU51
 158 0042 EB68     		ldr	r3, [r5, #12]
 159              	.LVL17:
 160              	.LBB36:
 161              	.LBI36:
 495:F4_CORE/core_cmInstr.h **** {
ARM GAS  /tmp/ccxRCCeu.s 			page 15


 162              		.loc 2 495 57 is_stmt 1 view .LVU52
 163              	.LBB37:
 164              		.loc 2 498 3 view .LVU53
 165              		.loc 2 498 10 is_stmt 0 view .LVU54
 166 0044 1BBA     		rev	r3, r3
 167              	.LVL18:
 168              		.loc 2 498 10 view .LVU55
 169              	.LBE37:
 170              	.LBE36:
 171              		.loc 1 137 44 view .LVU56
 172 0046 0793     		str	r3, [sp, #28]
 138:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 173              		.loc 1 138 3 is_stmt 1 view .LVU57
 174              	.LVL19:
 139:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 175              		.loc 1 139 3 view .LVU58
 176              		.loc 1 139 46 is_stmt 0 view .LVU59
 177 0048 2B69     		ldr	r3, [r5, #16]
 178              	.LVL20:
 179              	.LBB38:
 180              	.LBI38:
 495:F4_CORE/core_cmInstr.h **** {
 181              		.loc 2 495 57 is_stmt 1 view .LVU60
 182              	.LBB39:
 183              		.loc 2 498 3 view .LVU61
 184              		.loc 2 498 10 is_stmt 0 view .LVU62
 185 004a 1BBA     		rev	r3, r3
 186              	.LVL21:
 187              		.loc 2 498 10 view .LVU63
 188              	.LBE39:
 189              	.LBE38:
 190              		.loc 1 139 44 view .LVU64
 191 004c 0893     		str	r3, [sp, #32]
 140:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 192              		.loc 1 140 3 is_stmt 1 view .LVU65
 193              	.LVL22:
 141:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 194              		.loc 1 141 3 view .LVU66
 195              		.loc 1 141 46 is_stmt 0 view .LVU67
 196 004e 6B69     		ldr	r3, [r5, #20]
 197              	.LVL23:
 198              	.LBB40:
 199              	.LBI40:
 495:F4_CORE/core_cmInstr.h **** {
 200              		.loc 2 495 57 is_stmt 1 view .LVU68
 201              	.LBB41:
 202              		.loc 2 498 3 view .LVU69
 203              		.loc 2 498 10 is_stmt 0 view .LVU70
 204 0050 1BBA     		rev	r3, r3
 205              	.LVL24:
 206              		.loc 2 498 10 view .LVU71
 207              	.LBE41:
 208              	.LBE40:
 209              		.loc 1 141 44 view .LVU72
 210 0052 0993     		str	r3, [sp, #36]
 142:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 211              		.loc 1 142 3 is_stmt 1 view .LVU73
ARM GAS  /tmp/ccxRCCeu.s 			page 16


 212 0054 02A8     		add	r0, sp, #8
 213 0056 FFF7FEFF 		bl	CRYP_KeyInit
 214              	.LVL25:
 143:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 144:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Flush IN/OUT FIFO */
 145:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_FIFOFlush();
 215              		.loc 1 145 3 view .LVU74
 216 005a FFF7FEFF 		bl	CRYP_FIFOFlush
 217              	.LVL26:
 146:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 147:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Enable Crypto processor */
 148:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_Cmd(ENABLE);
 218              		.loc 1 148 3 view .LVU75
 219 005e 0120     		movs	r0, #1
 220 0060 FFF7FEFF 		bl	CRYP_Cmd
 221              	.LVL27:
 149:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 150:FWLIB/src/stm32f4xx_cryp_tdes.c ****   if(CRYP_GetCmdStatus() == DISABLE)
 222              		.loc 1 150 3 view .LVU76
 223              		.loc 1 150 6 is_stmt 0 view .LVU77
 224 0064 FFF7FEFF 		bl	CRYP_GetCmdStatus
 225              	.LVL28:
 226              		.loc 1 150 5 view .LVU78
 227 0068 70B3     		cbz	r0, .L11
 151:FWLIB/src/stm32f4xx_cryp_tdes.c ****   {
 152:FWLIB/src/stm32f4xx_cryp_tdes.c ****     /* The CRYP peripheral clock is not enabled or the device doesn't embed 
 153:FWLIB/src/stm32f4xx_cryp_tdes.c ****     the CRYP peripheral (please check the device sales type. */
 154:FWLIB/src/stm32f4xx_cryp_tdes.c ****     status = ERROR;
 155:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 156:FWLIB/src/stm32f4xx_cryp_tdes.c ****   else
 157:FWLIB/src/stm32f4xx_cryp_tdes.c ****   {
 158:FWLIB/src/stm32f4xx_cryp_tdes.c ****     for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 228              		.loc 1 158 10 view .LVU79
 229 006a 0025     		movs	r5, #0
 230              	.LVL29:
 107:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 231              		.loc 1 107 15 view .LVU80
 232 006c 0126     		movs	r6, #1
 233 006e 05E0     		b	.L5
 234              	.LVL30:
 235              	.L14:
 119:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 236              		.loc 1 119 6 is_stmt 1 view .LVU81
 119:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 237              		.loc 1 119 43 is_stmt 0 view .LVU82
 238 0070 0023     		movs	r3, #0
 239 0072 0A93     		str	r3, [sp, #40]
 240 0074 D5E7     		b	.L3
 241              	.LVL31:
 242              	.L6:
 159:FWLIB/src/stm32f4xx_cryp_tdes.c ****     {
 160:FWLIB/src/stm32f4xx_cryp_tdes.c ****       /* Write the Input block in the Input FIFO */
 161:FWLIB/src/stm32f4xx_cryp_tdes.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 162:FWLIB/src/stm32f4xx_cryp_tdes.c ****       inputaddr+=4;
 163:FWLIB/src/stm32f4xx_cryp_tdes.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 164:FWLIB/src/stm32f4xx_cryp_tdes.c ****       inputaddr+=4;
 165:FWLIB/src/stm32f4xx_cryp_tdes.c ****       
ARM GAS  /tmp/ccxRCCeu.s 			page 17


 166:FWLIB/src/stm32f4xx_cryp_tdes.c ****       /* Wait until the complete message has been processed */
 167:FWLIB/src/stm32f4xx_cryp_tdes.c ****       counter = 0;
 168:FWLIB/src/stm32f4xx_cryp_tdes.c ****       do
 169:FWLIB/src/stm32f4xx_cryp_tdes.c ****       {
 170:FWLIB/src/stm32f4xx_cryp_tdes.c ****         busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 171:FWLIB/src/stm32f4xx_cryp_tdes.c ****         counter++;
 172:FWLIB/src/stm32f4xx_cryp_tdes.c ****       }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 173:FWLIB/src/stm32f4xx_cryp_tdes.c ****       
 174:FWLIB/src/stm32f4xx_cryp_tdes.c ****       if (busystatus != RESET)
 243              		.loc 1 174 7 is_stmt 1 view .LVU83
 244              		.loc 1 174 10 is_stmt 0 view .LVU84
 245 0076 DAB1     		cbz	r2, .L15
 175:FWLIB/src/stm32f4xx_cryp_tdes.c ****       {
 176:FWLIB/src/stm32f4xx_cryp_tdes.c ****         status = ERROR;
 246              		.loc 1 176 16 view .LVU85
 247 0078 0026     		movs	r6, #0
 248              	.LVL32:
 249              	.L8:
 158:FWLIB/src/stm32f4xx_cryp_tdes.c ****     {
 250              		.loc 1 158 51 discriminator 2 view .LVU86
 251 007a 0835     		adds	r5, r5, #8
 252              	.LVL33:
 253              	.L5:
 158:FWLIB/src/stm32f4xx_cryp_tdes.c ****     {
 254              		.loc 1 158 5 discriminator 1 view .LVU87
 255 007c 4545     		cmp	r5, r8
 256 007e 1FD2     		bcs	.L9
 158:FWLIB/src/stm32f4xx_cryp_tdes.c ****     {
 257              		.loc 1 158 27 discriminator 3 view .LVU88
 258 0080 F6B1     		cbz	r6, .L9
 161:FWLIB/src/stm32f4xx_cryp_tdes.c ****       inputaddr+=4;
 259              		.loc 1 161 7 is_stmt 1 view .LVU89
 260 0082 2068     		ldr	r0, [r4]
 261 0084 FFF7FEFF 		bl	CRYP_DataIn
 262              	.LVL34:
 162:FWLIB/src/stm32f4xx_cryp_tdes.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 263              		.loc 1 162 7 view .LVU90
 163:FWLIB/src/stm32f4xx_cryp_tdes.c ****       inputaddr+=4;
 264              		.loc 1 163 7 view .LVU91
 265 0088 6068     		ldr	r0, [r4, #4]
 266 008a FFF7FEFF 		bl	CRYP_DataIn
 267              	.LVL35:
 164:FWLIB/src/stm32f4xx_cryp_tdes.c ****       
 268              		.loc 1 164 7 view .LVU92
 164:FWLIB/src/stm32f4xx_cryp_tdes.c ****       
 269              		.loc 1 164 16 is_stmt 0 view .LVU93
 270 008e 0834     		adds	r4, r4, #8
 271              	.LVL36:
 167:FWLIB/src/stm32f4xx_cryp_tdes.c ****       do
 272              		.loc 1 167 7 is_stmt 1 view .LVU94
 167:FWLIB/src/stm32f4xx_cryp_tdes.c ****       do
 273              		.loc 1 167 15 is_stmt 0 view .LVU95
 274 0090 0023     		movs	r3, #0
 275 0092 0193     		str	r3, [sp, #4]
 276              	.L7:
 168:FWLIB/src/stm32f4xx_cryp_tdes.c ****       {
 277              		.loc 1 168 7 is_stmt 1 discriminator 2 view .LVU96
ARM GAS  /tmp/ccxRCCeu.s 			page 18


 170:FWLIB/src/stm32f4xx_cryp_tdes.c ****         counter++;
 278              		.loc 1 170 9 discriminator 2 view .LVU97
 170:FWLIB/src/stm32f4xx_cryp_tdes.c ****         counter++;
 279              		.loc 1 170 22 is_stmt 0 discriminator 2 view .LVU98
 280 0094 1020     		movs	r0, #16
 281 0096 FFF7FEFF 		bl	CRYP_GetFlagStatus
 282              	.LVL37:
 170:FWLIB/src/stm32f4xx_cryp_tdes.c ****         counter++;
 283              		.loc 1 170 20 discriminator 2 view .LVU99
 284 009a 0246     		mov	r2, r0
 285              	.LVL38:
 171:FWLIB/src/stm32f4xx_cryp_tdes.c ****       }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 286              		.loc 1 171 9 is_stmt 1 discriminator 2 view .LVU100
 171:FWLIB/src/stm32f4xx_cryp_tdes.c ****       }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 287              		.loc 1 171 16 is_stmt 0 discriminator 2 view .LVU101
 288 009c 019B     		ldr	r3, [sp, #4]
 289 009e 0133     		adds	r3, r3, #1
 290 00a0 0193     		str	r3, [sp, #4]
 172:FWLIB/src/stm32f4xx_cryp_tdes.c ****       
 291              		.loc 1 172 24 discriminator 2 view .LVU102
 292 00a2 019B     		ldr	r3, [sp, #4]
 172:FWLIB/src/stm32f4xx_cryp_tdes.c ****       
 293              		.loc 1 172 7 discriminator 2 view .LVU103
 294 00a4 B3F5803F 		cmp	r3, #65536
 295 00a8 E5D0     		beq	.L6
 172:FWLIB/src/stm32f4xx_cryp_tdes.c ****       
 296              		.loc 1 172 45 discriminator 1 view .LVU104
 297 00aa 0028     		cmp	r0, #0
 298 00ac F2D1     		bne	.L7
 299 00ae E2E7     		b	.L6
 300              	.L15:
 177:FWLIB/src/stm32f4xx_cryp_tdes.c ****       }
 178:FWLIB/src/stm32f4xx_cryp_tdes.c ****       else
 179:FWLIB/src/stm32f4xx_cryp_tdes.c ****       {
 180:FWLIB/src/stm32f4xx_cryp_tdes.c ****         
 181:FWLIB/src/stm32f4xx_cryp_tdes.c ****         /* Read the Output block from the Output FIFO */
 182:FWLIB/src/stm32f4xx_cryp_tdes.c ****         *(uint32_t*)(outputaddr) = CRYP_DataOut();
 301              		.loc 1 182 9 is_stmt 1 view .LVU105
 302              		.loc 1 182 36 is_stmt 0 view .LVU106
 303 00b0 FFF7FEFF 		bl	CRYP_DataOut
 304              	.LVL39:
 305              		.loc 1 182 34 view .LVU107
 306 00b4 3860     		str	r0, [r7]
 183:FWLIB/src/stm32f4xx_cryp_tdes.c ****         outputaddr+=4;
 307              		.loc 1 183 9 is_stmt 1 view .LVU108
 308              	.LVL40:
 184:FWLIB/src/stm32f4xx_cryp_tdes.c ****         *(uint32_t*)(outputaddr) = CRYP_DataOut();
 309              		.loc 1 184 9 view .LVU109
 310              		.loc 1 184 36 is_stmt 0 view .LVU110
 311 00b6 FFF7FEFF 		bl	CRYP_DataOut
 312              	.LVL41:
 313              		.loc 1 184 34 view .LVU111
 314 00ba 7860     		str	r0, [r7, #4]
 185:FWLIB/src/stm32f4xx_cryp_tdes.c ****         outputaddr+=4;
 315              		.loc 1 185 9 is_stmt 1 view .LVU112
 316              		.loc 1 185 19 is_stmt 0 view .LVU113
 317 00bc 0837     		adds	r7, r7, #8
ARM GAS  /tmp/ccxRCCeu.s 			page 19


 318              	.LVL42:
 319              		.loc 1 185 19 view .LVU114
 320 00be DCE7     		b	.L8
 321              	.L9:
 186:FWLIB/src/stm32f4xx_cryp_tdes.c ****       }
 187:FWLIB/src/stm32f4xx_cryp_tdes.c ****     }
 188:FWLIB/src/stm32f4xx_cryp_tdes.c ****     
 189:FWLIB/src/stm32f4xx_cryp_tdes.c ****     /* Disable Crypto */
 190:FWLIB/src/stm32f4xx_cryp_tdes.c ****     CRYP_Cmd(DISABLE);
 322              		.loc 1 190 5 is_stmt 1 view .LVU115
 323 00c0 0020     		movs	r0, #0
 324 00c2 FFF7FEFF 		bl	CRYP_Cmd
 325              	.LVL43:
 326 00c6 00E0     		b	.L4
 327              	.LVL44:
 328              	.L11:
 154:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 329              		.loc 1 154 12 is_stmt 0 view .LVU116
 330 00c8 0026     		movs	r6, #0
 331              	.LVL45:
 332              	.L4:
 191:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 192:FWLIB/src/stm32f4xx_cryp_tdes.c ****   return status; 
 333              		.loc 1 192 3 is_stmt 1 view .LVU117
 193:FWLIB/src/stm32f4xx_cryp_tdes.c **** }
 334              		.loc 1 193 1 is_stmt 0 view .LVU118
 335 00ca 3046     		mov	r0, r6
 336 00cc 0EB0     		add	sp, sp, #56
 337              	.LCFI2:
 338              		.cfi_def_cfa_offset 24
 339              		@ sp needed
 340 00ce BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 341              		.loc 1 193 1 view .LVU119
 342              		.cfi_endproc
 343              	.LFE123:
 345              		.section	.text.CRYP_TDES_CBC,"ax",%progbits
 346              		.align	1
 347              		.global	CRYP_TDES_CBC
 348              		.syntax unified
 349              		.thumb
 350              		.thumb_func
 351              		.fpu fpv4-sp-d16
 353              	CRYP_TDES_CBC:
 354              	.LVL46:
 355              	.LFB124:
 194:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 195:FWLIB/src/stm32f4xx_cryp_tdes.c **** /**
 196:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @brief  Encrypt and decrypt using TDES in CBC Mode
 197:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Mode: encryption or decryption Mode.
 198:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *           This parameter can be one of the following values:
 199:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *            @arg MODE_ENCRYPT: Encryption
 200:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *            @arg MODE_DECRYPT: Decryption
 201:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Key: Key used for TDES algorithm.
 202:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  InitVectors: Initialisation Vectors used for TDES algorithm.
 203:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Input: pointer to the Input buffer.
 204:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 8.
 205:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @param  Output: pointer to the returned buffer.
ARM GAS  /tmp/ccxRCCeu.s 			page 20


 206:FWLIB/src/stm32f4xx_cryp_tdes.c ****   * @retval An ErrorStatus enumeration value:
 207:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *          - SUCCESS: Operation done
 208:FWLIB/src/stm32f4xx_cryp_tdes.c ****   *          - ERROR: Operation failed
 209:FWLIB/src/stm32f4xx_cryp_tdes.c ****   */
 210:FWLIB/src/stm32f4xx_cryp_tdes.c **** ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
 211:FWLIB/src/stm32f4xx_cryp_tdes.c ****                           uint8_t *Input, uint32_t Ilength, uint8_t *Output)
 212:FWLIB/src/stm32f4xx_cryp_tdes.c **** {
 356              		.loc 1 212 1 is_stmt 1 view -0
 357              		.cfi_startproc
 358              		@ args = 8, pretend = 0, frame = 72
 359              		@ frame_needed = 0, uses_anonymous_args = 0
 360              		.loc 1 212 1 is_stmt 0 view .LVU121
 361 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 362              	.LCFI3:
 363              		.cfi_def_cfa_offset 28
 364              		.cfi_offset 4, -28
 365              		.cfi_offset 5, -24
 366              		.cfi_offset 6, -20
 367              		.cfi_offset 7, -16
 368              		.cfi_offset 8, -12
 369              		.cfi_offset 9, -8
 370              		.cfi_offset 14, -4
 371 0004 93B0     		sub	sp, sp, #76
 372              	.LCFI4:
 373              		.cfi_def_cfa_offset 104
 374 0006 8146     		mov	r9, r0
 375 0008 0D46     		mov	r5, r1
 376 000a 1646     		mov	r6, r2
 377 000c DDF86880 		ldr	r8, [sp, #104]
 213:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_InitTypeDef TDES_CRYP_InitStructure;
 378              		.loc 1 213 3 is_stmt 1 view .LVU122
 214:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
 379              		.loc 1 214 3 view .LVU123
 215:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
 380              		.loc 1 215 3 view .LVU124
 216:FWLIB/src/stm32f4xx_cryp_tdes.c ****   __IO uint32_t counter = 0;
 381              		.loc 1 216 3 view .LVU125
 382              		.loc 1 216 17 is_stmt 0 view .LVU126
 383 0010 0022     		movs	r2, #0
 384              	.LVL47:
 385              		.loc 1 216 17 view .LVU127
 386 0012 0192     		str	r2, [sp, #4]
 217:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t busystatus = 0;
 387              		.loc 1 217 3 is_stmt 1 view .LVU128
 388              	.LVL48:
 218:FWLIB/src/stm32f4xx_cryp_tdes.c ****   ErrorStatus status = SUCCESS;
 389              		.loc 1 218 3 view .LVU129
 219:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 390              		.loc 1 219 3 view .LVU130
 220:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t inputaddr  = (uint32_t)Input;
 391              		.loc 1 220 3 view .LVU131
 392              		.loc 1 220 12 is_stmt 0 view .LVU132
 393 0014 1C46     		mov	r4, r3
 394              	.LVL49:
 221:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t outputaddr = (uint32_t)Output;
 395              		.loc 1 221 3 is_stmt 1 view .LVU133
 396              		.loc 1 221 12 is_stmt 0 view .LVU134
ARM GAS  /tmp/ccxRCCeu.s 			page 21


 397 0016 1B9F     		ldr	r7, [sp, #108]
 398              	.LVL50:
 222:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t ivaddr     = (uint32_t)InitVectors;
 399              		.loc 1 222 3 is_stmt 1 view .LVU135
 223:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t i = 0;
 400              		.loc 1 223 3 view .LVU136
 224:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 225:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Crypto structures initialisation*/
 226:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 401              		.loc 1 226 3 view .LVU137
 402 0018 06A8     		add	r0, sp, #24
 403              	.LVL51:
 404              		.loc 1 226 3 is_stmt 0 view .LVU138
 405 001a FFF7FEFF 		bl	CRYP_KeyStructInit
 406              	.LVL52:
 227:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 228:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Crypto Init for Encryption process */
 229:FWLIB/src/stm32f4xx_cryp_tdes.c ****   if(Mode == MODE_ENCRYPT) /* TDES encryption */
 407              		.loc 1 229 3 is_stmt 1 view .LVU139
 408              		.loc 1 229 5 is_stmt 0 view .LVU140
 409 001e B9F1010F 		cmp	r9, #1
 410 0022 31D0     		beq	.L29
 230:FWLIB/src/stm32f4xx_cryp_tdes.c ****   {
 231:FWLIB/src/stm32f4xx_cryp_tdes.c ****     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 232:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 233:FWLIB/src/stm32f4xx_cryp_tdes.c ****   else
 234:FWLIB/src/stm32f4xx_cryp_tdes.c ****   {
 235:FWLIB/src/stm32f4xx_cryp_tdes.c ****     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 411              		.loc 1 235 5 is_stmt 1 view .LVU141
 412              		.loc 1 235 42 is_stmt 0 view .LVU142
 413 0024 0423     		movs	r3, #4
 414 0026 0E93     		str	r3, [sp, #56]
 415              	.L18:
 236:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 237:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
 416              		.loc 1 237 3 is_stmt 1 view .LVU143
 417              		.loc 1 237 41 is_stmt 0 view .LVU144
 418 0028 0823     		movs	r3, #8
 419 002a 0F93     		str	r3, [sp, #60]
 238:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 420              		.loc 1 238 3 is_stmt 1 view .LVU145
 421              		.loc 1 238 41 is_stmt 0 view .LVU146
 422 002c 8023     		movs	r3, #128
 423 002e 1093     		str	r3, [sp, #64]
 239:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 240:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_Init(&TDES_CRYP_InitStructure);
 424              		.loc 1 240 3 is_stmt 1 view .LVU147
 425 0030 0EA8     		add	r0, sp, #56
 426 0032 FFF7FEFF 		bl	CRYP_Init
 427              	.LVL53:
 241:FWLIB/src/stm32f4xx_cryp_tdes.c **** 
 242:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Key Initialisation */
 243:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 428              		.loc 1 243 3 view .LVU148
 429              		.loc 1 243 46 is_stmt 0 view .LVU149
 430 0036 2B68     		ldr	r3, [r5]
 431              	.LVL54:
ARM GAS  /tmp/ccxRCCeu.s 			page 22


 432              	.LBB42:
 433              	.LBI42:
 495:F4_CORE/core_cmInstr.h **** {
 434              		.loc 2 495 57 is_stmt 1 view .LVU150
 435              	.LBB43:
 436              		.loc 2 498 3 view .LVU151
 437              		.loc 2 498 10 is_stmt 0 view .LVU152
 438 0038 1BBA     		rev	r3, r3
 439              	.LVL55:
 440              		.loc 2 498 10 view .LVU153
 441              	.LBE43:
 442              	.LBE42:
 443              		.loc 1 243 44 view .LVU154
 444 003a 0893     		str	r3, [sp, #32]
 244:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 445              		.loc 1 244 3 is_stmt 1 view .LVU155
 446              	.LVL56:
 245:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 447              		.loc 1 245 3 view .LVU156
 448              		.loc 1 245 46 is_stmt 0 view .LVU157
 449 003c 6B68     		ldr	r3, [r5, #4]
 450              	.LVL57:
 451              	.LBB44:
 452              	.LBI44:
 495:F4_CORE/core_cmInstr.h **** {
 453              		.loc 2 495 57 is_stmt 1 view .LVU158
 454              	.LBB45:
 455              		.loc 2 498 3 view .LVU159
 456              		.loc 2 498 10 is_stmt 0 view .LVU160
 457 003e 1BBA     		rev	r3, r3
 458              	.LVL58:
 459              		.loc 2 498 10 view .LVU161
 460              	.LBE45:
 461              	.LBE44:
 462              		.loc 1 245 44 view .LVU162
 463 0040 0993     		str	r3, [sp, #36]
 246:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 464              		.loc 1 246 3 is_stmt 1 view .LVU163
 465              	.LVL59:
 247:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 466              		.loc 1 247 3 view .LVU164
 467              		.loc 1 247 46 is_stmt 0 view .LVU165
 468 0042 AB68     		ldr	r3, [r5, #8]
 469              	.LVL60:
 470              	.LBB46:
 471              	.LBI46:
 495:F4_CORE/core_cmInstr.h **** {
 472              		.loc 2 495 57 is_stmt 1 view .LVU166
 473              	.LBB47:
 474              		.loc 2 498 3 view .LVU167
 475              		.loc 2 498 10 is_stmt 0 view .LVU168
 476 0044 1BBA     		rev	r3, r3
 477              	.LVL61:
 478              		.loc 2 498 10 view .LVU169
 479              	.LBE47:
 480              	.LBE46:
 481              		.loc 1 247 44 view .LVU170
ARM GAS  /tmp/ccxRCCeu.s 			page 23


 482 0046 0A93     		str	r3, [sp, #40]
 248:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 483              		.loc 1 248 3 is_stmt 1 view .LVU171
 484              	.LVL62:
 249:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 485              		.loc 1 249 3 view .LVU172
 486              		.loc 1 249 46 is_stmt 0 view .LVU173
 487 0048 EB68     		ldr	r3, [r5, #12]
 488              	.LVL63:
 489              	.LBB48:
 490              	.LBI48:
 495:F4_CORE/core_cmInstr.h **** {
 491              		.loc 2 495 57 is_stmt 1 view .LVU174
 492              	.LBB49:
 493              		.loc 2 498 3 view .LVU175
 494              		.loc 2 498 10 is_stmt 0 view .LVU176
 495 004a 1BBA     		rev	r3, r3
 496              	.LVL64:
 497              		.loc 2 498 10 view .LVU177
 498              	.LBE49:
 499              	.LBE48:
 500              		.loc 1 249 44 view .LVU178
 501 004c 0B93     		str	r3, [sp, #44]
 250:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 502              		.loc 1 250 3 is_stmt 1 view .LVU179
 503              	.LVL65:
 251:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 504              		.loc 1 251 3 view .LVU180
 505              		.loc 1 251 46 is_stmt 0 view .LVU181
 506 004e 2B69     		ldr	r3, [r5, #16]
 507              	.LVL66:
 508              	.LBB50:
 509              	.LBI50:
 495:F4_CORE/core_cmInstr.h **** {
 510              		.loc 2 495 57 is_stmt 1 view .LVU182
 511              	.LBB51:
 512              		.loc 2 498 3 view .LVU183
 513              		.loc 2 498 10 is_stmt 0 view .LVU184
 514 0050 1BBA     		rev	r3, r3
 515              	.LVL67:
 516              		.loc 2 498 10 view .LVU185
 517              	.LBE51:
 518              	.LBE50:
 519              		.loc 1 251 44 view .LVU186
 520 0052 0C93     		str	r3, [sp, #48]
 252:FWLIB/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 521              		.loc 1 252 3 is_stmt 1 view .LVU187
 522              	.LVL68:
 253:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 523              		.loc 1 253 3 view .LVU188
 524              		.loc 1 253 46 is_stmt 0 view .LVU189
 525 0054 6B69     		ldr	r3, [r5, #20]
 526              	.LVL69:
 527              	.LBB52:
 528              	.LBI52:
 495:F4_CORE/core_cmInstr.h **** {
 529              		.loc 2 495 57 is_stmt 1 view .LVU190
ARM GAS  /tmp/ccxRCCeu.s 			page 24


 530              	.LBB53:
 531              		.loc 2 498 3 view .LVU191
 532              		.loc 2 498 10 is_stmt 0 view .LVU192
 533 0056 1BBA     		rev	r3, r3
 534              	.LVL70:
 535              		.loc 2 498 10 view .LVU193
 536              	.LBE53:
 537              	.LBE52:
 538              		.loc 1 253 44 view .LVU194
 539 0058 0D93     		str	r3, [sp, #52]
 254:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 540              		.loc 1 254 3 is_stmt 1 view .LVU195
 541 005a 06A8     		add	r0, sp, #24
 542 005c FFF7FEFF 		bl	CRYP_KeyInit
 543              	.LVL71:
 255:FWLIB/src/stm32f4xx_cryp_tdes.c ****   
 256:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Initialization Vectors */
 257:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 544              		.loc 1 257 3 view .LVU196
 545              		.loc 1 257 44 is_stmt 0 view .LVU197
 546 0060 3368     		ldr	r3, [r6]
 547              	.LVL72:
 548              	.LBB54:
 549              	.LBI54:
 495:F4_CORE/core_cmInstr.h **** {
 550              		.loc 2 495 57 is_stmt 1 view .LVU198
 551              	.LBB55:
 552              		.loc 2 498 3 view .LVU199
 553              		.loc 2 498 10 is_stmt 0 view .LVU200
 554 0062 1BBA     		rev	r3, r3
 555              	.LVL73:
 556              		.loc 2 498 10 view .LVU201
 557              	.LBE55:
 558              	.LBE54:
 559              		.loc 1 257 42 view .LVU202
 560 0064 0293     		str	r3, [sp, #8]
 258:FWLIB/src/stm32f4xx_cryp_tdes.c ****   ivaddr+=4;
 561              		.loc 1 258 3 is_stmt 1 view .LVU203
 562              	.LVL74:
 259:FWLIB/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 563              		.loc 1 259 3 view .LVU204
 564              		.loc 1 259 44 is_stmt 0 view .LVU205
 565 0066 7368     		ldr	r3, [r6, #4]
 566              	.LVL75:
 567              	.LBB56:
 568              	.LBI56:
 495:F4_CORE/core_cmInstr.h **** {
 569              		.loc 2 495 57 is_stmt 1 view .LVU206
 570              	.LBB57:
 571              		.loc 2 498 3 view .LVU207
 572              		.loc 2 498 10 is_stmt 0 view .LVU208
 573 0068 1BBA     		rev	r3, r3
 574              	.LVL76:
 575              		.loc 2 498 10 view .LVU209
 576              	.LBE57:
 577              	.LBE56:
 578              		.loc 1 259 42 view .LVU210
ARM GAS  /tmp/ccxRCCeu.s 			page 25


 579 006a 0393     		str	r3, [sp, #12]
 260:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_IVInit(&TDES_CRYP_IVInitStructure);
 580              		.loc 1 260 3 is_stmt 1 view .LVU211
 581 006c 02A8     		add	r0, sp, #8
 582 006e FFF7FEFF 		bl	CRYP_IVInit
 583              	.LVL77:
 261:FWLIB/src/stm32f4xx_cryp_tdes.c ****   
 262:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Flush IN/OUT FIFO */
 263:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_FIFOFlush();
 584              		.loc 1 263 3 view .LVU212
 585 0072 FFF7FEFF 		bl	CRYP_FIFOFlush
 586              	.LVL78:
 264:FWLIB/src/stm32f4xx_cryp_tdes.c ****   
 265:FWLIB/src/stm32f4xx_cryp_tdes.c ****   /* Enable Crypto processor */
 266:FWLIB/src/stm32f4xx_cryp_tdes.c ****   CRYP_Cmd(ENABLE);
 587              		.loc 1 266 3 view .LVU213
 588 0076 0120     		movs	r0, #1
 589 0078 FFF7FEFF 		bl	CRYP_Cmd
 590              	.LVL79:
 267:FWLIB/src/stm32f4xx_cryp_tdes.c ****   
 268:FWLIB/src/stm32f4xx_cryp_tdes.c ****   if(CRYP_GetCmdStatus() == DISABLE)
 591              		.loc 1 268 3 view .LVU214
 592              		.loc 1 268 6 is_stmt 0 view .LVU215
 593 007c FFF7FEFF 		bl	CRYP_GetCmdStatus
 594              	.LVL80:
 595              		.loc 1 268 5 view .LVU216
 596 0080 70B3     		cbz	r0, .L26
 269:FWLIB/src/stm32f4xx_cryp_tdes.c ****   {
 270:FWLIB/src/stm32f4xx_cryp_tdes.c ****     /* The CRYP peripheral clock is not enabled or the device doesn't embed 
 271:FWLIB/src/stm32f4xx_cryp_tdes.c ****     the CRYP peripheral (please check the device sales type. */
 272:FWLIB/src/stm32f4xx_cryp_tdes.c ****     status = ERROR;
 273:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 274:FWLIB/src/stm32f4xx_cryp_tdes.c ****   else
 275:FWLIB/src/stm32f4xx_cryp_tdes.c ****   {
 276:FWLIB/src/stm32f4xx_cryp_tdes.c ****     for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 597              		.loc 1 276 10 view .LVU217
 598 0082 0025     		movs	r5, #0
 599              	.LVL81:
 218:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 600              		.loc 1 218 15 view .LVU218
 601 0084 0126     		movs	r6, #1
 602              	.LVL82:
 218:FWLIB/src/stm32f4xx_cryp_tdes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 603              		.loc 1 218 15 view .LVU219
 604 0086 05E0     		b	.L20
 605              	.LVL83:
 606              	.L29:
 231:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 607              		.loc 1 231 5 is_stmt 1 view .LVU220
 231:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 608              		.loc 1 231 42 is_stmt 0 view .LVU221
 609 0088 0023     		movs	r3, #0
 610 008a 0E93     		str	r3, [sp, #56]
 611 008c CCE7     		b	.L18
 612              	.LVL84:
 613              	.L21:
 277:FWLIB/src/stm32f4xx_cryp_tdes.c ****     {
ARM GAS  /tmp/ccxRCCeu.s 			page 26


 278:FWLIB/src/stm32f4xx_cryp_tdes.c ****       /* Write the Input block in the Input FIFO */
 279:FWLIB/src/stm32f4xx_cryp_tdes.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 280:FWLIB/src/stm32f4xx_cryp_tdes.c ****       inputaddr+=4;
 281:FWLIB/src/stm32f4xx_cryp_tdes.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 282:FWLIB/src/stm32f4xx_cryp_tdes.c ****       inputaddr+=4;
 283:FWLIB/src/stm32f4xx_cryp_tdes.c ****       
 284:FWLIB/src/stm32f4xx_cryp_tdes.c ****       /* Wait until the complete message has been processed */
 285:FWLIB/src/stm32f4xx_cryp_tdes.c ****       counter = 0;
 286:FWLIB/src/stm32f4xx_cryp_tdes.c ****       do
 287:FWLIB/src/stm32f4xx_cryp_tdes.c ****       {
 288:FWLIB/src/stm32f4xx_cryp_tdes.c ****         busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 289:FWLIB/src/stm32f4xx_cryp_tdes.c ****         counter++;
 290:FWLIB/src/stm32f4xx_cryp_tdes.c ****       }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 291:FWLIB/src/stm32f4xx_cryp_tdes.c ****       
 292:FWLIB/src/stm32f4xx_cryp_tdes.c ****       if (busystatus != RESET)
 614              		.loc 1 292 7 is_stmt 1 view .LVU222
 615              		.loc 1 292 10 is_stmt 0 view .LVU223
 616 008e DAB1     		cbz	r2, .L30
 293:FWLIB/src/stm32f4xx_cryp_tdes.c ****       {
 294:FWLIB/src/stm32f4xx_cryp_tdes.c ****         status = ERROR;
 617              		.loc 1 294 16 view .LVU224
 618 0090 0026     		movs	r6, #0
 619              	.LVL85:
 620              	.L23:
 276:FWLIB/src/stm32f4xx_cryp_tdes.c ****     {
 621              		.loc 1 276 51 discriminator 2 view .LVU225
 622 0092 0835     		adds	r5, r5, #8
 623              	.LVL86:
 624              	.L20:
 276:FWLIB/src/stm32f4xx_cryp_tdes.c ****     {
 625              		.loc 1 276 5 discriminator 1 view .LVU226
 626 0094 4545     		cmp	r5, r8
 627 0096 1FD2     		bcs	.L24
 276:FWLIB/src/stm32f4xx_cryp_tdes.c ****     {
 628              		.loc 1 276 27 discriminator 3 view .LVU227
 629 0098 F6B1     		cbz	r6, .L24
 279:FWLIB/src/stm32f4xx_cryp_tdes.c ****       inputaddr+=4;
 630              		.loc 1 279 7 is_stmt 1 view .LVU228
 631 009a 2068     		ldr	r0, [r4]
 632 009c FFF7FEFF 		bl	CRYP_DataIn
 633              	.LVL87:
 280:FWLIB/src/stm32f4xx_cryp_tdes.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 634              		.loc 1 280 7 view .LVU229
 281:FWLIB/src/stm32f4xx_cryp_tdes.c ****       inputaddr+=4;
 635              		.loc 1 281 7 view .LVU230
 636 00a0 6068     		ldr	r0, [r4, #4]
 637 00a2 FFF7FEFF 		bl	CRYP_DataIn
 638              	.LVL88:
 282:FWLIB/src/stm32f4xx_cryp_tdes.c ****       
 639              		.loc 1 282 7 view .LVU231
 282:FWLIB/src/stm32f4xx_cryp_tdes.c ****       
 640              		.loc 1 282 16 is_stmt 0 view .LVU232
 641 00a6 0834     		adds	r4, r4, #8
 642              	.LVL89:
 285:FWLIB/src/stm32f4xx_cryp_tdes.c ****       do
 643              		.loc 1 285 7 is_stmt 1 view .LVU233
 285:FWLIB/src/stm32f4xx_cryp_tdes.c ****       do
ARM GAS  /tmp/ccxRCCeu.s 			page 27


 644              		.loc 1 285 15 is_stmt 0 view .LVU234
 645 00a8 0023     		movs	r3, #0
 646 00aa 0193     		str	r3, [sp, #4]
 647              	.L22:
 286:FWLIB/src/stm32f4xx_cryp_tdes.c ****       {
 648              		.loc 1 286 7 is_stmt 1 discriminator 2 view .LVU235
 288:FWLIB/src/stm32f4xx_cryp_tdes.c ****         counter++;
 649              		.loc 1 288 9 discriminator 2 view .LVU236
 288:FWLIB/src/stm32f4xx_cryp_tdes.c ****         counter++;
 650              		.loc 1 288 22 is_stmt 0 discriminator 2 view .LVU237
 651 00ac 1020     		movs	r0, #16
 652 00ae FFF7FEFF 		bl	CRYP_GetFlagStatus
 653              	.LVL90:
 288:FWLIB/src/stm32f4xx_cryp_tdes.c ****         counter++;
 654              		.loc 1 288 20 discriminator 2 view .LVU238
 655 00b2 0246     		mov	r2, r0
 656              	.LVL91:
 289:FWLIB/src/stm32f4xx_cryp_tdes.c ****       }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 657              		.loc 1 289 9 is_stmt 1 discriminator 2 view .LVU239
 289:FWLIB/src/stm32f4xx_cryp_tdes.c ****       }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 658              		.loc 1 289 16 is_stmt 0 discriminator 2 view .LVU240
 659 00b4 019B     		ldr	r3, [sp, #4]
 660 00b6 0133     		adds	r3, r3, #1
 661 00b8 0193     		str	r3, [sp, #4]
 290:FWLIB/src/stm32f4xx_cryp_tdes.c ****       
 662              		.loc 1 290 24 discriminator 2 view .LVU241
 663 00ba 019B     		ldr	r3, [sp, #4]
 290:FWLIB/src/stm32f4xx_cryp_tdes.c ****       
 664              		.loc 1 290 7 discriminator 2 view .LVU242
 665 00bc B3F5803F 		cmp	r3, #65536
 666 00c0 E5D0     		beq	.L21
 290:FWLIB/src/stm32f4xx_cryp_tdes.c ****       
 667              		.loc 1 290 45 discriminator 1 view .LVU243
 668 00c2 0028     		cmp	r0, #0
 669 00c4 F2D1     		bne	.L22
 670 00c6 E2E7     		b	.L21
 671              	.L30:
 295:FWLIB/src/stm32f4xx_cryp_tdes.c ****       }
 296:FWLIB/src/stm32f4xx_cryp_tdes.c ****       else
 297:FWLIB/src/stm32f4xx_cryp_tdes.c ****       {
 298:FWLIB/src/stm32f4xx_cryp_tdes.c ****         
 299:FWLIB/src/stm32f4xx_cryp_tdes.c ****         /* Read the Output block from the Output FIFO */
 300:FWLIB/src/stm32f4xx_cryp_tdes.c ****         *(uint32_t*)(outputaddr) = CRYP_DataOut();
 672              		.loc 1 300 9 is_stmt 1 view .LVU244
 673              		.loc 1 300 36 is_stmt 0 view .LVU245
 674 00c8 FFF7FEFF 		bl	CRYP_DataOut
 675              	.LVL92:
 676              		.loc 1 300 34 view .LVU246
 677 00cc 3860     		str	r0, [r7]
 301:FWLIB/src/stm32f4xx_cryp_tdes.c ****         outputaddr+=4;
 678              		.loc 1 301 9 is_stmt 1 view .LVU247
 679              	.LVL93:
 302:FWLIB/src/stm32f4xx_cryp_tdes.c ****         *(uint32_t*)(outputaddr) = CRYP_DataOut();
 680              		.loc 1 302 9 view .LVU248
 681              		.loc 1 302 36 is_stmt 0 view .LVU249
 682 00ce FFF7FEFF 		bl	CRYP_DataOut
 683              	.LVL94:
ARM GAS  /tmp/ccxRCCeu.s 			page 28


 684              		.loc 1 302 34 view .LVU250
 685 00d2 7860     		str	r0, [r7, #4]
 303:FWLIB/src/stm32f4xx_cryp_tdes.c ****         outputaddr+=4;
 686              		.loc 1 303 9 is_stmt 1 view .LVU251
 687              		.loc 1 303 19 is_stmt 0 view .LVU252
 688 00d4 0837     		adds	r7, r7, #8
 689              	.LVL95:
 690              		.loc 1 303 19 view .LVU253
 691 00d6 DCE7     		b	.L23
 692              	.L24:
 304:FWLIB/src/stm32f4xx_cryp_tdes.c ****       }
 305:FWLIB/src/stm32f4xx_cryp_tdes.c ****     }
 306:FWLIB/src/stm32f4xx_cryp_tdes.c ****     
 307:FWLIB/src/stm32f4xx_cryp_tdes.c ****     /* Disable Crypto */
 308:FWLIB/src/stm32f4xx_cryp_tdes.c ****     CRYP_Cmd(DISABLE);
 693              		.loc 1 308 5 is_stmt 1 view .LVU254
 694 00d8 0020     		movs	r0, #0
 695 00da FFF7FEFF 		bl	CRYP_Cmd
 696              	.LVL96:
 697 00de 00E0     		b	.L19
 698              	.LVL97:
 699              	.L26:
 272:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 700              		.loc 1 272 12 is_stmt 0 view .LVU255
 701 00e0 0026     		movs	r6, #0
 702              	.LVL98:
 703              	.L19:
 309:FWLIB/src/stm32f4xx_cryp_tdes.c ****   }
 310:FWLIB/src/stm32f4xx_cryp_tdes.c ****   return status; 
 704              		.loc 1 310 3 is_stmt 1 view .LVU256
 311:FWLIB/src/stm32f4xx_cryp_tdes.c **** }
 705              		.loc 1 311 1 is_stmt 0 view .LVU257
 706 00e2 3046     		mov	r0, r6
 707 00e4 13B0     		add	sp, sp, #76
 708              	.LCFI5:
 709              		.cfi_def_cfa_offset 28
 710              		@ sp needed
 711 00e6 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 712              		.loc 1 311 1 view .LVU258
 713              		.cfi_endproc
 714              	.LFE124:
 716              		.text
 717              	.Letext0:
 718              		.file 3 "/home/bt0/stm32/compile-tool/gcc-arm-none-eabi-8-2018-q4-major-linux/gcc-arm-none-eabi-8-
 719              		.file 4 "/home/bt0/stm32/compile-tool/gcc-arm-none-eabi-8-2018-q4-major-linux/gcc-arm-none-eabi-8-
 720              		.file 5 "F4_CORE/core_cm4.h"
 721              		.file 6 "USER/system_stm32f4xx.h"
 722              		.file 7 "USER/stm32f4xx.h"
 723              		.file 8 "FWLIB/inc/stm32f4xx_cryp.h"
ARM GAS  /tmp/ccxRCCeu.s 			page 29


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_cryp_tdes.c
     /tmp/ccxRCCeu.s:18     .text.CRYP_TDES_ECB:0000000000000000 $t
     /tmp/ccxRCCeu.s:26     .text.CRYP_TDES_ECB:0000000000000000 CRYP_TDES_ECB
     /tmp/ccxRCCeu.s:346    .text.CRYP_TDES_CBC:0000000000000000 $t
     /tmp/ccxRCCeu.s:353    .text.CRYP_TDES_CBC:0000000000000000 CRYP_TDES_CBC

UNDEFINED SYMBOLS
CRYP_KeyStructInit
CRYP_Init
CRYP_KeyInit
CRYP_FIFOFlush
CRYP_Cmd
CRYP_GetCmdStatus
CRYP_DataIn
CRYP_GetFlagStatus
CRYP_DataOut
CRYP_IVInit
