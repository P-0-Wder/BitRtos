ARM GAS  /tmp/ccKAqqXO.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_cryp_des.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.CRYP_DES_ECB,"ax",%progbits
  18              		.align	1
  19              		.global	CRYP_DES_ECB
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	CRYP_DES_ECB:
  26              	.LFB123:
  27              		.file 1 "FWLIB/src/stm32f4xx_cryp_des.c"
   1:FWLIB/src/stm32f4xx_cryp_des.c **** /**
   2:FWLIB/src/stm32f4xx_cryp_des.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_cryp_des.c ****   * @file    stm32f4xx_cryp_des.c
   4:FWLIB/src/stm32f4xx_cryp_des.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_cryp_des.c ****   * @version V1.8.0
   6:FWLIB/src/stm32f4xx_cryp_des.c ****   * @date    04-November-2016
   7:FWLIB/src/stm32f4xx_cryp_des.c ****   * @brief   This file provides high level functions to encrypt and decrypt an 
   8:FWLIB/src/stm32f4xx_cryp_des.c ****   *          input message using DES in ECB/CBC modes.
   9:FWLIB/src/stm32f4xx_cryp_des.c ****   *          It uses the stm32f4xx_cryp.c/.h drivers to access the STM32F4xx CRYP
  10:FWLIB/src/stm32f4xx_cryp_des.c ****   *          peripheral.
  11:FWLIB/src/stm32f4xx_cryp_des.c ****   *
  12:FWLIB/src/stm32f4xx_cryp_des.c **** @verbatim
  13:FWLIB/src/stm32f4xx_cryp_des.c ****   
  14:FWLIB/src/stm32f4xx_cryp_des.c ****  ===================================================================
  15:FWLIB/src/stm32f4xx_cryp_des.c ****                   ##### How to use this driver #####
  16:FWLIB/src/stm32f4xx_cryp_des.c ****  ===================================================================
  17:FWLIB/src/stm32f4xx_cryp_des.c ****  [..] 
  18:FWLIB/src/stm32f4xx_cryp_des.c ****    (#) Enable The CRYP controller clock using 
  19:FWLIB/src/stm32f4xx_cryp_des.c ****        RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_CRYP, ENABLE); function.
  20:FWLIB/src/stm32f4xx_cryp_des.c ****   
  21:FWLIB/src/stm32f4xx_cryp_des.c ****    (#) Encrypt and decrypt using DES in ECB Mode using CRYP_DES_ECB() function.
  22:FWLIB/src/stm32f4xx_cryp_des.c ****   
  23:FWLIB/src/stm32f4xx_cryp_des.c ****    (#) Encrypt and decrypt using DES in CBC Mode using CRYP_DES_CBC() function.
  24:FWLIB/src/stm32f4xx_cryp_des.c ****   
  25:FWLIB/src/stm32f4xx_cryp_des.c **** @endverbatim
  26:FWLIB/src/stm32f4xx_cryp_des.c ****   *
  27:FWLIB/src/stm32f4xx_cryp_des.c ****   ******************************************************************************
  28:FWLIB/src/stm32f4xx_cryp_des.c ****   * @attention
  29:FWLIB/src/stm32f4xx_cryp_des.c ****   *
  30:FWLIB/src/stm32f4xx_cryp_des.c ****   * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
  31:FWLIB/src/stm32f4xx_cryp_des.c ****   *
ARM GAS  /tmp/ccKAqqXO.s 			page 2


  32:FWLIB/src/stm32f4xx_cryp_des.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  33:FWLIB/src/stm32f4xx_cryp_des.c ****   * You may not use this file except in compliance with the License.
  34:FWLIB/src/stm32f4xx_cryp_des.c ****   * You may obtain a copy of the License at:
  35:FWLIB/src/stm32f4xx_cryp_des.c ****   *
  36:FWLIB/src/stm32f4xx_cryp_des.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  37:FWLIB/src/stm32f4xx_cryp_des.c ****   *
  38:FWLIB/src/stm32f4xx_cryp_des.c ****   * Unless required by applicable law or agreed to in writing, software 
  39:FWLIB/src/stm32f4xx_cryp_des.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  40:FWLIB/src/stm32f4xx_cryp_des.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  41:FWLIB/src/stm32f4xx_cryp_des.c ****   * See the License for the specific language governing permissions and
  42:FWLIB/src/stm32f4xx_cryp_des.c ****   * limitations under the License.
  43:FWLIB/src/stm32f4xx_cryp_des.c ****   *
  44:FWLIB/src/stm32f4xx_cryp_des.c ****   ******************************************************************************
  45:FWLIB/src/stm32f4xx_cryp_des.c ****   */
  46:FWLIB/src/stm32f4xx_cryp_des.c **** 
  47:FWLIB/src/stm32f4xx_cryp_des.c **** /* Includes ------------------------------------------------------------------*/
  48:FWLIB/src/stm32f4xx_cryp_des.c **** #include "stm32f4xx_cryp.h"
  49:FWLIB/src/stm32f4xx_cryp_des.c **** 
  50:FWLIB/src/stm32f4xx_cryp_des.c **** 
  51:FWLIB/src/stm32f4xx_cryp_des.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  52:FWLIB/src/stm32f4xx_cryp_des.c ****   * @{
  53:FWLIB/src/stm32f4xx_cryp_des.c ****   */
  54:FWLIB/src/stm32f4xx_cryp_des.c **** 
  55:FWLIB/src/stm32f4xx_cryp_des.c **** /** @defgroup CRYP 
  56:FWLIB/src/stm32f4xx_cryp_des.c ****   * @brief CRYP driver modules
  57:FWLIB/src/stm32f4xx_cryp_des.c ****   * @{
  58:FWLIB/src/stm32f4xx_cryp_des.c ****   */
  59:FWLIB/src/stm32f4xx_cryp_des.c **** 
  60:FWLIB/src/stm32f4xx_cryp_des.c **** /* Private typedef -----------------------------------------------------------*/
  61:FWLIB/src/stm32f4xx_cryp_des.c **** /* Private define ------------------------------------------------------------*/
  62:FWLIB/src/stm32f4xx_cryp_des.c **** #define DESBUSY_TIMEOUT    ((uint32_t) 0x00010000)
  63:FWLIB/src/stm32f4xx_cryp_des.c **** 
  64:FWLIB/src/stm32f4xx_cryp_des.c **** /* Private macro -------------------------------------------------------------*/
  65:FWLIB/src/stm32f4xx_cryp_des.c **** /* Private variables ---------------------------------------------------------*/
  66:FWLIB/src/stm32f4xx_cryp_des.c **** /* Private function prototypes -----------------------------------------------*/
  67:FWLIB/src/stm32f4xx_cryp_des.c **** /* Private functions ---------------------------------------------------------*/
  68:FWLIB/src/stm32f4xx_cryp_des.c **** 
  69:FWLIB/src/stm32f4xx_cryp_des.c **** 
  70:FWLIB/src/stm32f4xx_cryp_des.c **** /** @defgroup CRYP_Private_Functions
  71:FWLIB/src/stm32f4xx_cryp_des.c ****   * @{
  72:FWLIB/src/stm32f4xx_cryp_des.c ****   */ 
  73:FWLIB/src/stm32f4xx_cryp_des.c **** 
  74:FWLIB/src/stm32f4xx_cryp_des.c **** /** @defgroup CRYP_Group8 High Level DES functions
  75:FWLIB/src/stm32f4xx_cryp_des.c ****  *  @brief   High Level DES functions 
  76:FWLIB/src/stm32f4xx_cryp_des.c ****  *
  77:FWLIB/src/stm32f4xx_cryp_des.c **** @verbatim   
  78:FWLIB/src/stm32f4xx_cryp_des.c ****  ===============================================================================
  79:FWLIB/src/stm32f4xx_cryp_des.c ****                        ##### High Level DES functions #####
  80:FWLIB/src/stm32f4xx_cryp_des.c ****  ===============================================================================
  81:FWLIB/src/stm32f4xx_cryp_des.c **** @endverbatim
  82:FWLIB/src/stm32f4xx_cryp_des.c ****   * @{
  83:FWLIB/src/stm32f4xx_cryp_des.c ****   */
  84:FWLIB/src/stm32f4xx_cryp_des.c **** 
  85:FWLIB/src/stm32f4xx_cryp_des.c **** /**
  86:FWLIB/src/stm32f4xx_cryp_des.c ****   * @brief  Encrypt and decrypt using DES in ECB Mode
  87:FWLIB/src/stm32f4xx_cryp_des.c ****   * @param  Mode: encryption or decryption Mode.
  88:FWLIB/src/stm32f4xx_cryp_des.c ****   *           This parameter can be one of the following values:
ARM GAS  /tmp/ccKAqqXO.s 			page 3


  89:FWLIB/src/stm32f4xx_cryp_des.c ****   *            @arg MODE_ENCRYPT: Encryption
  90:FWLIB/src/stm32f4xx_cryp_des.c ****   *            @arg MODE_DECRYPT: Decryption
  91:FWLIB/src/stm32f4xx_cryp_des.c ****   * @param  Key: Key used for DES algorithm.
  92:FWLIB/src/stm32f4xx_cryp_des.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 8.
  93:FWLIB/src/stm32f4xx_cryp_des.c ****   * @param  Input: pointer to the Input buffer.
  94:FWLIB/src/stm32f4xx_cryp_des.c ****   * @param  Output: pointer to the returned buffer.
  95:FWLIB/src/stm32f4xx_cryp_des.c ****   * @retval An ErrorStatus enumeration value:
  96:FWLIB/src/stm32f4xx_cryp_des.c ****   *          - SUCCESS: Operation done
  97:FWLIB/src/stm32f4xx_cryp_des.c ****   *          - ERROR: Operation failed
  98:FWLIB/src/stm32f4xx_cryp_des.c ****   */
  99:FWLIB/src/stm32f4xx_cryp_des.c **** ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
 100:FWLIB/src/stm32f4xx_cryp_des.c ****                          uint32_t Ilength, uint8_t *Output)
 101:FWLIB/src/stm32f4xx_cryp_des.c **** {
  28              		.loc 1 101 0
  29              		.cfi_startproc
  30              		@ args = 4, pretend = 0, frame = 56
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 24
  36              		.cfi_offset 4, -24
  37              		.cfi_offset 5, -20
  38              		.cfi_offset 6, -16
  39              		.cfi_offset 7, -12
  40              		.cfi_offset 8, -8
  41              		.cfi_offset 14, -4
  42 0004 8EB0     		sub	sp, sp, #56
  43              	.LCFI1:
  44              		.cfi_def_cfa_offset 80
  45 0006 0646     		mov	r6, r0
  46 0008 0D46     		mov	r5, r1
  47 000a 9846     		mov	r8, r3
 102:FWLIB/src/stm32f4xx_cryp_des.c ****   CRYP_InitTypeDef DES_CRYP_InitStructure;
 103:FWLIB/src/stm32f4xx_cryp_des.c ****   CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
 104:FWLIB/src/stm32f4xx_cryp_des.c ****   __IO uint32_t counter = 0;
  48              		.loc 1 104 0
  49 000c 0023     		movs	r3, #0
  50              	.LVL1:
  51 000e 0193     		str	r3, [sp, #4]
  52              	.LVL2:
 105:FWLIB/src/stm32f4xx_cryp_des.c ****   uint32_t busystatus = 0;
 106:FWLIB/src/stm32f4xx_cryp_des.c ****   ErrorStatus status = SUCCESS;
 107:FWLIB/src/stm32f4xx_cryp_des.c ****   uint32_t keyaddr    = (uint32_t)Key;
 108:FWLIB/src/stm32f4xx_cryp_des.c ****   uint32_t inputaddr  = (uint32_t)Input;
  53              		.loc 1 108 0
  54 0010 1446     		mov	r4, r2
  55              	.LVL3:
 109:FWLIB/src/stm32f4xx_cryp_des.c ****   uint32_t outputaddr = (uint32_t)Output;
  56              		.loc 1 109 0
  57 0012 149F     		ldr	r7, [sp, #80]
  58              	.LVL4:
 110:FWLIB/src/stm32f4xx_cryp_des.c ****   uint32_t i = 0;
 111:FWLIB/src/stm32f4xx_cryp_des.c **** 
 112:FWLIB/src/stm32f4xx_cryp_des.c ****   /* Crypto structures initialisation*/
 113:FWLIB/src/stm32f4xx_cryp_des.c ****   CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
  59              		.loc 1 113 0
ARM GAS  /tmp/ccKAqqXO.s 			page 4


  60 0014 02A8     		add	r0, sp, #8
  61              	.LVL5:
  62 0016 FFF7FEFF 		bl	CRYP_KeyStructInit
  63              	.LVL6:
 114:FWLIB/src/stm32f4xx_cryp_des.c **** 
 115:FWLIB/src/stm32f4xx_cryp_des.c ****   /* Crypto Init for Encryption process */
 116:FWLIB/src/stm32f4xx_cryp_des.c ****   if( Mode == MODE_ENCRYPT ) /* DES encryption */
  64              		.loc 1 116 0
  65 001a 012E     		cmp	r6, #1
  66 001c 1CD0     		beq	.L14
 117:FWLIB/src/stm32f4xx_cryp_des.c ****   {
 118:FWLIB/src/stm32f4xx_cryp_des.c ****      DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 119:FWLIB/src/stm32f4xx_cryp_des.c ****   }
 120:FWLIB/src/stm32f4xx_cryp_des.c ****   else/* if( Mode == MODE_DECRYPT )*/ /* DES decryption */
 121:FWLIB/src/stm32f4xx_cryp_des.c ****   {      
 122:FWLIB/src/stm32f4xx_cryp_des.c ****      DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
  67              		.loc 1 122 0
  68 001e 0423     		movs	r3, #4
  69 0020 0A93     		str	r3, [sp, #40]
  70              	.L3:
 123:FWLIB/src/stm32f4xx_cryp_des.c ****   }
 124:FWLIB/src/stm32f4xx_cryp_des.c **** 
 125:FWLIB/src/stm32f4xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
  71              		.loc 1 125 0
  72 0022 1023     		movs	r3, #16
  73 0024 0B93     		str	r3, [sp, #44]
 126:FWLIB/src/stm32f4xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  74              		.loc 1 126 0
  75 0026 8023     		movs	r3, #128
  76 0028 0C93     		str	r3, [sp, #48]
 127:FWLIB/src/stm32f4xx_cryp_des.c ****   CRYP_Init(&DES_CRYP_InitStructure);
  77              		.loc 1 127 0
  78 002a 0AA8     		add	r0, sp, #40
  79 002c FFF7FEFF 		bl	CRYP_Init
  80              	.LVL7:
 128:FWLIB/src/stm32f4xx_cryp_des.c **** 
 129:FWLIB/src/stm32f4xx_cryp_des.c ****   /* Key Initialisation */
 130:FWLIB/src/stm32f4xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
  81              		.loc 1 130 0
  82 0030 2B68     		ldr	r3, [r5]
  83              	.LVL8:
  84              	.LBB14:
  85              	.LBB15:
  86              		.file 2 "F4_CORE/core_cmInstr.h"
   1:F4_CORE/core_cmInstr.h **** /**************************************************************************//**
   2:F4_CORE/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:F4_CORE/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:F4_CORE/core_cmInstr.h ****  * @version  V4.10
   5:F4_CORE/core_cmInstr.h ****  * @date     18. March 2015
   6:F4_CORE/core_cmInstr.h ****  *
   7:F4_CORE/core_cmInstr.h ****  * @note
   8:F4_CORE/core_cmInstr.h ****  *
   9:F4_CORE/core_cmInstr.h ****  ******************************************************************************/
  10:F4_CORE/core_cmInstr.h **** /* Copyright (c) 2009 - 2014 ARM LIMITED
  11:F4_CORE/core_cmInstr.h **** 
  12:F4_CORE/core_cmInstr.h ****    All rights reserved.
  13:F4_CORE/core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
ARM GAS  /tmp/ccKAqqXO.s 			page 5


  14:F4_CORE/core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:F4_CORE/core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:F4_CORE/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:F4_CORE/core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:F4_CORE/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:F4_CORE/core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:F4_CORE/core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:F4_CORE/core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:F4_CORE/core_cmInstr.h ****      specific prior written permission.
  23:F4_CORE/core_cmInstr.h ****    *
  24:F4_CORE/core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:F4_CORE/core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:F4_CORE/core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:F4_CORE/core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:F4_CORE/core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:F4_CORE/core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:F4_CORE/core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:F4_CORE/core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:F4_CORE/core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:F4_CORE/core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:F4_CORE/core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:F4_CORE/core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:F4_CORE/core_cmInstr.h **** 
  37:F4_CORE/core_cmInstr.h **** 
  38:F4_CORE/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:F4_CORE/core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:F4_CORE/core_cmInstr.h **** 
  41:F4_CORE/core_cmInstr.h **** 
  42:F4_CORE/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:F4_CORE/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:F4_CORE/core_cmInstr.h ****   Access to dedicated instructions
  45:F4_CORE/core_cmInstr.h ****   @{
  46:F4_CORE/core_cmInstr.h **** */
  47:F4_CORE/core_cmInstr.h **** 
  48:F4_CORE/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:F4_CORE/core_cmInstr.h **** /* ARM armcc specific functions */
  50:F4_CORE/core_cmInstr.h **** 
  51:F4_CORE/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:F4_CORE/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:F4_CORE/core_cmInstr.h **** #endif
  54:F4_CORE/core_cmInstr.h **** 
  55:F4_CORE/core_cmInstr.h **** 
  56:F4_CORE/core_cmInstr.h **** /** \brief  No Operation
  57:F4_CORE/core_cmInstr.h **** 
  58:F4_CORE/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:F4_CORE/core_cmInstr.h ****  */
  60:F4_CORE/core_cmInstr.h **** #define __NOP                             __nop
  61:F4_CORE/core_cmInstr.h **** 
  62:F4_CORE/core_cmInstr.h **** 
  63:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:F4_CORE/core_cmInstr.h **** 
  65:F4_CORE/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:F4_CORE/core_cmInstr.h ****     until one of a number of events occurs.
  67:F4_CORE/core_cmInstr.h ****  */
  68:F4_CORE/core_cmInstr.h **** #define __WFI                             __wfi
  69:F4_CORE/core_cmInstr.h **** 
  70:F4_CORE/core_cmInstr.h **** 
ARM GAS  /tmp/ccKAqqXO.s 			page 6


  71:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Event
  72:F4_CORE/core_cmInstr.h **** 
  73:F4_CORE/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:F4_CORE/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:F4_CORE/core_cmInstr.h ****  */
  76:F4_CORE/core_cmInstr.h **** #define __WFE                             __wfe
  77:F4_CORE/core_cmInstr.h **** 
  78:F4_CORE/core_cmInstr.h **** 
  79:F4_CORE/core_cmInstr.h **** /** \brief  Send Event
  80:F4_CORE/core_cmInstr.h **** 
  81:F4_CORE/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:F4_CORE/core_cmInstr.h ****  */
  83:F4_CORE/core_cmInstr.h **** #define __SEV                             __sev
  84:F4_CORE/core_cmInstr.h **** 
  85:F4_CORE/core_cmInstr.h **** 
  86:F4_CORE/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:F4_CORE/core_cmInstr.h **** 
  88:F4_CORE/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:F4_CORE/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:F4_CORE/core_cmInstr.h ****     memory, after the instruction has been completed.
  91:F4_CORE/core_cmInstr.h ****  */
  92:F4_CORE/core_cmInstr.h **** #define __ISB() do {\
  93:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
  94:F4_CORE/core_cmInstr.h ****                    __isb(0xF);\
  95:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
  96:F4_CORE/core_cmInstr.h ****                 } while (0)
  97:F4_CORE/core_cmInstr.h **** 
  98:F4_CORE/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  99:F4_CORE/core_cmInstr.h **** 
 100:F4_CORE/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 101:F4_CORE/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 102:F4_CORE/core_cmInstr.h ****  */
 103:F4_CORE/core_cmInstr.h **** #define __DSB() do {\
 104:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 105:F4_CORE/core_cmInstr.h ****                    __dsb(0xF);\
 106:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 107:F4_CORE/core_cmInstr.h ****                 } while (0)
 108:F4_CORE/core_cmInstr.h **** 
 109:F4_CORE/core_cmInstr.h **** /** \brief  Data Memory Barrier
 110:F4_CORE/core_cmInstr.h **** 
 111:F4_CORE/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 112:F4_CORE/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 113:F4_CORE/core_cmInstr.h ****  */
 114:F4_CORE/core_cmInstr.h **** #define __DMB() do {\
 115:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 116:F4_CORE/core_cmInstr.h ****                    __dmb(0xF);\
 117:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 118:F4_CORE/core_cmInstr.h ****                 } while (0)
 119:F4_CORE/core_cmInstr.h **** 
 120:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 121:F4_CORE/core_cmInstr.h **** 
 122:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in integer value.
 123:F4_CORE/core_cmInstr.h **** 
 124:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 125:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 126:F4_CORE/core_cmInstr.h ****  */
 127:F4_CORE/core_cmInstr.h **** #define __REV                             __rev
ARM GAS  /tmp/ccKAqqXO.s 			page 7


 128:F4_CORE/core_cmInstr.h **** 
 129:F4_CORE/core_cmInstr.h **** 
 130:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 131:F4_CORE/core_cmInstr.h **** 
 132:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 133:F4_CORE/core_cmInstr.h **** 
 134:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 135:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 136:F4_CORE/core_cmInstr.h ****  */
 137:F4_CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 138:F4_CORE/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 139:F4_CORE/core_cmInstr.h **** {
 140:F4_CORE/core_cmInstr.h ****   rev16 r0, r0
 141:F4_CORE/core_cmInstr.h ****   bx lr
 142:F4_CORE/core_cmInstr.h **** }
 143:F4_CORE/core_cmInstr.h **** #endif
 144:F4_CORE/core_cmInstr.h **** 
 145:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 146:F4_CORE/core_cmInstr.h **** 
 147:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 148:F4_CORE/core_cmInstr.h **** 
 149:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 150:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 151:F4_CORE/core_cmInstr.h ****  */
 152:F4_CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 153:F4_CORE/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 154:F4_CORE/core_cmInstr.h **** {
 155:F4_CORE/core_cmInstr.h ****   revsh r0, r0
 156:F4_CORE/core_cmInstr.h ****   bx lr
 157:F4_CORE/core_cmInstr.h **** }
 158:F4_CORE/core_cmInstr.h **** #endif
 159:F4_CORE/core_cmInstr.h **** 
 160:F4_CORE/core_cmInstr.h **** 
 161:F4_CORE/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 162:F4_CORE/core_cmInstr.h **** 
 163:F4_CORE/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 164:F4_CORE/core_cmInstr.h **** 
 165:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to rotate
 166:F4_CORE/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 167:F4_CORE/core_cmInstr.h ****     \return               Rotated value
 168:F4_CORE/core_cmInstr.h ****  */
 169:F4_CORE/core_cmInstr.h **** #define __ROR                             __ror
 170:F4_CORE/core_cmInstr.h **** 
 171:F4_CORE/core_cmInstr.h **** 
 172:F4_CORE/core_cmInstr.h **** /** \brief  Breakpoint
 173:F4_CORE/core_cmInstr.h **** 
 174:F4_CORE/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 175:F4_CORE/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 176:F4_CORE/core_cmInstr.h **** 
 177:F4_CORE/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 178:F4_CORE/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 179:F4_CORE/core_cmInstr.h ****  */
 180:F4_CORE/core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 181:F4_CORE/core_cmInstr.h **** 
 182:F4_CORE/core_cmInstr.h **** 
 183:F4_CORE/core_cmInstr.h **** /** \brief  Reverse bit order of value
 184:F4_CORE/core_cmInstr.h **** 
ARM GAS  /tmp/ccKAqqXO.s 			page 8


 185:F4_CORE/core_cmInstr.h ****     This function reverses the bit order of the given value.
 186:F4_CORE/core_cmInstr.h **** 
 187:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 188:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 189:F4_CORE/core_cmInstr.h ****  */
 190:F4_CORE/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 191:F4_CORE/core_cmInstr.h ****   #define __RBIT                          __rbit
 192:F4_CORE/core_cmInstr.h **** #else
 193:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 194:F4_CORE/core_cmInstr.h **** {
 195:F4_CORE/core_cmInstr.h ****   uint32_t result;
 196:F4_CORE/core_cmInstr.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; // extra shift needed at end
 197:F4_CORE/core_cmInstr.h **** 
 198:F4_CORE/core_cmInstr.h ****   result = value;                      // r will be reversed bits of v; first get LSB of v
 199:F4_CORE/core_cmInstr.h ****   for (value >>= 1; value; value >>= 1)
 200:F4_CORE/core_cmInstr.h ****   {
 201:F4_CORE/core_cmInstr.h ****     result <<= 1;
 202:F4_CORE/core_cmInstr.h ****     result |= value & 1;
 203:F4_CORE/core_cmInstr.h ****     s--;
 204:F4_CORE/core_cmInstr.h ****   }
 205:F4_CORE/core_cmInstr.h ****   result <<= s;                       // shift when v's highest bits are zero
 206:F4_CORE/core_cmInstr.h ****   return(result);
 207:F4_CORE/core_cmInstr.h **** }
 208:F4_CORE/core_cmInstr.h **** #endif
 209:F4_CORE/core_cmInstr.h **** 
 210:F4_CORE/core_cmInstr.h **** 
 211:F4_CORE/core_cmInstr.h **** /** \brief  Count leading zeros
 212:F4_CORE/core_cmInstr.h **** 
 213:F4_CORE/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 214:F4_CORE/core_cmInstr.h **** 
 215:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 216:F4_CORE/core_cmInstr.h ****     \return             number of leading zeros in value
 217:F4_CORE/core_cmInstr.h ****  */
 218:F4_CORE/core_cmInstr.h **** #define __CLZ                             __clz
 219:F4_CORE/core_cmInstr.h **** 
 220:F4_CORE/core_cmInstr.h **** 
 221:F4_CORE/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 222:F4_CORE/core_cmInstr.h **** 
 223:F4_CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 224:F4_CORE/core_cmInstr.h **** 
 225:F4_CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 8 bit value.
 226:F4_CORE/core_cmInstr.h **** 
 227:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 228:F4_CORE/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 229:F4_CORE/core_cmInstr.h ****  */
 230:F4_CORE/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 231:F4_CORE/core_cmInstr.h **** 
 232:F4_CORE/core_cmInstr.h **** 
 233:F4_CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 234:F4_CORE/core_cmInstr.h **** 
 235:F4_CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 16 bit values.
 236:F4_CORE/core_cmInstr.h **** 
 237:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 238:F4_CORE/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 239:F4_CORE/core_cmInstr.h ****  */
 240:F4_CORE/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 241:F4_CORE/core_cmInstr.h **** 
ARM GAS  /tmp/ccKAqqXO.s 			page 9


 242:F4_CORE/core_cmInstr.h **** 
 243:F4_CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 244:F4_CORE/core_cmInstr.h **** 
 245:F4_CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 32 bit values.
 246:F4_CORE/core_cmInstr.h **** 
 247:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 248:F4_CORE/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 249:F4_CORE/core_cmInstr.h ****  */
 250:F4_CORE/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 251:F4_CORE/core_cmInstr.h **** 
 252:F4_CORE/core_cmInstr.h **** 
 253:F4_CORE/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 254:F4_CORE/core_cmInstr.h **** 
 255:F4_CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 8 bit values.
 256:F4_CORE/core_cmInstr.h **** 
 257:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 258:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 259:F4_CORE/core_cmInstr.h ****     \return          0  Function succeeded
 260:F4_CORE/core_cmInstr.h ****     \return          1  Function failed
 261:F4_CORE/core_cmInstr.h ****  */
 262:F4_CORE/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 263:F4_CORE/core_cmInstr.h **** 
 264:F4_CORE/core_cmInstr.h **** 
 265:F4_CORE/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 266:F4_CORE/core_cmInstr.h **** 
 267:F4_CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 16 bit values.
 268:F4_CORE/core_cmInstr.h **** 
 269:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 270:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 271:F4_CORE/core_cmInstr.h ****     \return          0  Function succeeded
 272:F4_CORE/core_cmInstr.h ****     \return          1  Function failed
 273:F4_CORE/core_cmInstr.h ****  */
 274:F4_CORE/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 275:F4_CORE/core_cmInstr.h **** 
 276:F4_CORE/core_cmInstr.h **** 
 277:F4_CORE/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 278:F4_CORE/core_cmInstr.h **** 
 279:F4_CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 32 bit values.
 280:F4_CORE/core_cmInstr.h **** 
 281:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 282:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 283:F4_CORE/core_cmInstr.h ****     \return          0  Function succeeded
 284:F4_CORE/core_cmInstr.h ****     \return          1  Function failed
 285:F4_CORE/core_cmInstr.h ****  */
 286:F4_CORE/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 287:F4_CORE/core_cmInstr.h **** 
 288:F4_CORE/core_cmInstr.h **** 
 289:F4_CORE/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 290:F4_CORE/core_cmInstr.h **** 
 291:F4_CORE/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 292:F4_CORE/core_cmInstr.h **** 
 293:F4_CORE/core_cmInstr.h ****  */
 294:F4_CORE/core_cmInstr.h **** #define __CLREX                           __clrex
 295:F4_CORE/core_cmInstr.h **** 
 296:F4_CORE/core_cmInstr.h **** 
 297:F4_CORE/core_cmInstr.h **** /** \brief  Signed Saturate
 298:F4_CORE/core_cmInstr.h **** 
ARM GAS  /tmp/ccKAqqXO.s 			page 10


 299:F4_CORE/core_cmInstr.h ****     This function saturates a signed value.
 300:F4_CORE/core_cmInstr.h **** 
 301:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 302:F4_CORE/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 303:F4_CORE/core_cmInstr.h ****     \return             Saturated value
 304:F4_CORE/core_cmInstr.h ****  */
 305:F4_CORE/core_cmInstr.h **** #define __SSAT                            __ssat
 306:F4_CORE/core_cmInstr.h **** 
 307:F4_CORE/core_cmInstr.h **** 
 308:F4_CORE/core_cmInstr.h **** /** \brief  Unsigned Saturate
 309:F4_CORE/core_cmInstr.h **** 
 310:F4_CORE/core_cmInstr.h ****     This function saturates an unsigned value.
 311:F4_CORE/core_cmInstr.h **** 
 312:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 313:F4_CORE/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 314:F4_CORE/core_cmInstr.h ****     \return             Saturated value
 315:F4_CORE/core_cmInstr.h ****  */
 316:F4_CORE/core_cmInstr.h **** #define __USAT                            __usat
 317:F4_CORE/core_cmInstr.h **** 
 318:F4_CORE/core_cmInstr.h **** 
 319:F4_CORE/core_cmInstr.h **** /** \brief  Rotate Right with Extend (32 bit)
 320:F4_CORE/core_cmInstr.h **** 
 321:F4_CORE/core_cmInstr.h ****     This function moves each bit of a bitstring right by one bit.
 322:F4_CORE/core_cmInstr.h ****     The carry input is shifted in at the left end of the bitstring.
 323:F4_CORE/core_cmInstr.h **** 
 324:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to rotate
 325:F4_CORE/core_cmInstr.h ****     \return               Rotated value
 326:F4_CORE/core_cmInstr.h ****  */
 327:F4_CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 328:F4_CORE/core_cmInstr.h **** __attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
 329:F4_CORE/core_cmInstr.h **** {
 330:F4_CORE/core_cmInstr.h ****   rrx r0, r0
 331:F4_CORE/core_cmInstr.h ****   bx lr
 332:F4_CORE/core_cmInstr.h **** }
 333:F4_CORE/core_cmInstr.h **** #endif
 334:F4_CORE/core_cmInstr.h **** 
 335:F4_CORE/core_cmInstr.h **** 
 336:F4_CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (8 bit)
 337:F4_CORE/core_cmInstr.h **** 
 338:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 8 bit value.
 339:F4_CORE/core_cmInstr.h **** 
 340:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 341:F4_CORE/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 342:F4_CORE/core_cmInstr.h ****  */
 343:F4_CORE/core_cmInstr.h **** #define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
 344:F4_CORE/core_cmInstr.h **** 
 345:F4_CORE/core_cmInstr.h **** 
 346:F4_CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (16 bit)
 347:F4_CORE/core_cmInstr.h **** 
 348:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 16 bit values.
 349:F4_CORE/core_cmInstr.h **** 
 350:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 351:F4_CORE/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 352:F4_CORE/core_cmInstr.h ****  */
 353:F4_CORE/core_cmInstr.h **** #define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
 354:F4_CORE/core_cmInstr.h **** 
 355:F4_CORE/core_cmInstr.h **** 
ARM GAS  /tmp/ccKAqqXO.s 			page 11


 356:F4_CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (32 bit)
 357:F4_CORE/core_cmInstr.h **** 
 358:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 32 bit values.
 359:F4_CORE/core_cmInstr.h **** 
 360:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 361:F4_CORE/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 362:F4_CORE/core_cmInstr.h ****  */
 363:F4_CORE/core_cmInstr.h **** #define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
 364:F4_CORE/core_cmInstr.h **** 
 365:F4_CORE/core_cmInstr.h **** 
 366:F4_CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (8 bit)
 367:F4_CORE/core_cmInstr.h **** 
 368:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 8 bit values.
 369:F4_CORE/core_cmInstr.h **** 
 370:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 371:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 372:F4_CORE/core_cmInstr.h ****  */
 373:F4_CORE/core_cmInstr.h **** #define __STRBT(value, ptr)               __strt(value, ptr)
 374:F4_CORE/core_cmInstr.h **** 
 375:F4_CORE/core_cmInstr.h **** 
 376:F4_CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (16 bit)
 377:F4_CORE/core_cmInstr.h **** 
 378:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 16 bit values.
 379:F4_CORE/core_cmInstr.h **** 
 380:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 381:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 382:F4_CORE/core_cmInstr.h ****  */
 383:F4_CORE/core_cmInstr.h **** #define __STRHT(value, ptr)               __strt(value, ptr)
 384:F4_CORE/core_cmInstr.h **** 
 385:F4_CORE/core_cmInstr.h **** 
 386:F4_CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (32 bit)
 387:F4_CORE/core_cmInstr.h **** 
 388:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 32 bit values.
 389:F4_CORE/core_cmInstr.h **** 
 390:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 391:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 392:F4_CORE/core_cmInstr.h ****  */
 393:F4_CORE/core_cmInstr.h **** #define __STRT(value, ptr)                __strt(value, ptr)
 394:F4_CORE/core_cmInstr.h **** 
 395:F4_CORE/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300) */
 396:F4_CORE/core_cmInstr.h **** 
 397:F4_CORE/core_cmInstr.h **** 
 398:F4_CORE/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 399:F4_CORE/core_cmInstr.h **** /* GNU gcc specific functions */
 400:F4_CORE/core_cmInstr.h **** 
 401:F4_CORE/core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 402:F4_CORE/core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 403:F4_CORE/core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 404:F4_CORE/core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 405:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 406:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 407:F4_CORE/core_cmInstr.h **** #else
 408:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 409:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 410:F4_CORE/core_cmInstr.h **** #endif
 411:F4_CORE/core_cmInstr.h **** 
 412:F4_CORE/core_cmInstr.h **** /** \brief  No Operation
ARM GAS  /tmp/ccKAqqXO.s 			page 12


 413:F4_CORE/core_cmInstr.h **** 
 414:F4_CORE/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 415:F4_CORE/core_cmInstr.h ****  */
 416:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 417:F4_CORE/core_cmInstr.h **** {
 418:F4_CORE/core_cmInstr.h ****   __ASM volatile ("nop");
 419:F4_CORE/core_cmInstr.h **** }
 420:F4_CORE/core_cmInstr.h **** 
 421:F4_CORE/core_cmInstr.h **** 
 422:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Interrupt
 423:F4_CORE/core_cmInstr.h **** 
 424:F4_CORE/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 425:F4_CORE/core_cmInstr.h ****     until one of a number of events occurs.
 426:F4_CORE/core_cmInstr.h ****  */
 427:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 428:F4_CORE/core_cmInstr.h **** {
 429:F4_CORE/core_cmInstr.h ****   __ASM volatile ("wfi");
 430:F4_CORE/core_cmInstr.h **** }
 431:F4_CORE/core_cmInstr.h **** 
 432:F4_CORE/core_cmInstr.h **** 
 433:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Event
 434:F4_CORE/core_cmInstr.h **** 
 435:F4_CORE/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 436:F4_CORE/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 437:F4_CORE/core_cmInstr.h ****  */
 438:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 439:F4_CORE/core_cmInstr.h **** {
 440:F4_CORE/core_cmInstr.h ****   __ASM volatile ("wfe");
 441:F4_CORE/core_cmInstr.h **** }
 442:F4_CORE/core_cmInstr.h **** 
 443:F4_CORE/core_cmInstr.h **** 
 444:F4_CORE/core_cmInstr.h **** /** \brief  Send Event
 445:F4_CORE/core_cmInstr.h **** 
 446:F4_CORE/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 447:F4_CORE/core_cmInstr.h ****  */
 448:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 449:F4_CORE/core_cmInstr.h **** {
 450:F4_CORE/core_cmInstr.h ****   __ASM volatile ("sev");
 451:F4_CORE/core_cmInstr.h **** }
 452:F4_CORE/core_cmInstr.h **** 
 453:F4_CORE/core_cmInstr.h **** 
 454:F4_CORE/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 455:F4_CORE/core_cmInstr.h **** 
 456:F4_CORE/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 457:F4_CORE/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 458:F4_CORE/core_cmInstr.h ****     memory, after the instruction has been completed.
 459:F4_CORE/core_cmInstr.h ****  */
 460:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 461:F4_CORE/core_cmInstr.h **** {
 462:F4_CORE/core_cmInstr.h ****   __ASM volatile ("isb 0xF":::"memory");
 463:F4_CORE/core_cmInstr.h **** }
 464:F4_CORE/core_cmInstr.h **** 
 465:F4_CORE/core_cmInstr.h **** 
 466:F4_CORE/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 467:F4_CORE/core_cmInstr.h **** 
 468:F4_CORE/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 469:F4_CORE/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
ARM GAS  /tmp/ccKAqqXO.s 			page 13


 470:F4_CORE/core_cmInstr.h ****  */
 471:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 472:F4_CORE/core_cmInstr.h **** {
 473:F4_CORE/core_cmInstr.h ****   __ASM volatile ("dsb 0xF":::"memory");
 474:F4_CORE/core_cmInstr.h **** }
 475:F4_CORE/core_cmInstr.h **** 
 476:F4_CORE/core_cmInstr.h **** 
 477:F4_CORE/core_cmInstr.h **** /** \brief  Data Memory Barrier
 478:F4_CORE/core_cmInstr.h **** 
 479:F4_CORE/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 480:F4_CORE/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 481:F4_CORE/core_cmInstr.h ****  */
 482:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 483:F4_CORE/core_cmInstr.h **** {
 484:F4_CORE/core_cmInstr.h ****   __ASM volatile ("dmb 0xF":::"memory");
 485:F4_CORE/core_cmInstr.h **** }
 486:F4_CORE/core_cmInstr.h **** 
 487:F4_CORE/core_cmInstr.h **** 
 488:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 489:F4_CORE/core_cmInstr.h **** 
 490:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in integer value.
 491:F4_CORE/core_cmInstr.h **** 
 492:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 493:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 494:F4_CORE/core_cmInstr.h ****  */
 495:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 496:F4_CORE/core_cmInstr.h **** {
 497:F4_CORE/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 498:F4_CORE/core_cmInstr.h ****   return __builtin_bswap32(value);
  87              		.loc 2 498 0
  88 0032 1BBA     		rev	r3, r3
  89              	.LVL9:
  90              	.LBE15:
  91              	.LBE14:
  92              		.loc 1 130 0
  93 0034 0493     		str	r3, [sp, #16]
  94              	.LVL10:
 131:FWLIB/src/stm32f4xx_cryp_des.c ****   keyaddr+=4;
 132:FWLIB/src/stm32f4xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
  95              		.loc 1 132 0
  96 0036 6B68     		ldr	r3, [r5, #4]
  97              	.LVL11:
  98              	.LBB16:
  99              	.LBB17:
 100              		.loc 2 498 0
 101 0038 1BBA     		rev	r3, r3
 102              	.LVL12:
 103              	.LBE17:
 104              	.LBE16:
 105              		.loc 1 132 0
 106 003a 0593     		str	r3, [sp, #20]
 133:FWLIB/src/stm32f4xx_cryp_des.c ****   CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 107              		.loc 1 133 0
 108 003c 02A8     		add	r0, sp, #8
 109 003e FFF7FEFF 		bl	CRYP_KeyInit
 110              	.LVL13:
 134:FWLIB/src/stm32f4xx_cryp_des.c **** 
ARM GAS  /tmp/ccKAqqXO.s 			page 14


 135:FWLIB/src/stm32f4xx_cryp_des.c ****   /* Flush IN/OUT FIFO */
 136:FWLIB/src/stm32f4xx_cryp_des.c ****   CRYP_FIFOFlush();
 111              		.loc 1 136 0
 112 0042 FFF7FEFF 		bl	CRYP_FIFOFlush
 113              	.LVL14:
 137:FWLIB/src/stm32f4xx_cryp_des.c **** 
 138:FWLIB/src/stm32f4xx_cryp_des.c ****   /* Enable Crypto processor */
 139:FWLIB/src/stm32f4xx_cryp_des.c ****   CRYP_Cmd(ENABLE);
 114              		.loc 1 139 0
 115 0046 0120     		movs	r0, #1
 116 0048 FFF7FEFF 		bl	CRYP_Cmd
 117              	.LVL15:
 140:FWLIB/src/stm32f4xx_cryp_des.c **** 
 141:FWLIB/src/stm32f4xx_cryp_des.c ****   if(CRYP_GetCmdStatus() == DISABLE)
 118              		.loc 1 141 0
 119 004c FFF7FEFF 		bl	CRYP_GetCmdStatus
 120              	.LVL16:
 121 0050 88B3     		cbz	r0, .L11
 122 0052 0025     		movs	r5, #0
 123              	.LVL17:
 124 0054 0126     		movs	r6, #1
 125 0056 05E0     		b	.L5
 126              	.LVL18:
 127              	.L14:
 118:FWLIB/src/stm32f4xx_cryp_des.c ****   }
 128              		.loc 1 118 0
 129 0058 0023     		movs	r3, #0
 130 005a 0A93     		str	r3, [sp, #40]
 131 005c E1E7     		b	.L3
 132              	.LVL19:
 133              	.L6:
 142:FWLIB/src/stm32f4xx_cryp_des.c ****   {
 143:FWLIB/src/stm32f4xx_cryp_des.c ****     /* The CRYP peripheral clock is not enabled or the device doesn't embed 
 144:FWLIB/src/stm32f4xx_cryp_des.c ****     the CRYP peripheral (please check the device sales type. */
 145:FWLIB/src/stm32f4xx_cryp_des.c ****     status = ERROR;
 146:FWLIB/src/stm32f4xx_cryp_des.c ****   }
 147:FWLIB/src/stm32f4xx_cryp_des.c ****   else
 148:FWLIB/src/stm32f4xx_cryp_des.c ****   {
 149:FWLIB/src/stm32f4xx_cryp_des.c ****     for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 150:FWLIB/src/stm32f4xx_cryp_des.c ****     {
 151:FWLIB/src/stm32f4xx_cryp_des.c ****       
 152:FWLIB/src/stm32f4xx_cryp_des.c ****       /* Write the Input block in the Input FIFO */
 153:FWLIB/src/stm32f4xx_cryp_des.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 154:FWLIB/src/stm32f4xx_cryp_des.c ****       inputaddr+=4;
 155:FWLIB/src/stm32f4xx_cryp_des.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 156:FWLIB/src/stm32f4xx_cryp_des.c ****       inputaddr+=4;
 157:FWLIB/src/stm32f4xx_cryp_des.c ****       
 158:FWLIB/src/stm32f4xx_cryp_des.c ****       /* Wait until the complete message has been processed */
 159:FWLIB/src/stm32f4xx_cryp_des.c ****       counter = 0;
 160:FWLIB/src/stm32f4xx_cryp_des.c ****       do
 161:FWLIB/src/stm32f4xx_cryp_des.c ****       {
 162:FWLIB/src/stm32f4xx_cryp_des.c ****         busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 163:FWLIB/src/stm32f4xx_cryp_des.c ****         counter++;
 164:FWLIB/src/stm32f4xx_cryp_des.c ****       }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 165:FWLIB/src/stm32f4xx_cryp_des.c ****       
 166:FWLIB/src/stm32f4xx_cryp_des.c ****       if (busystatus != RESET)
 134              		.loc 1 166 0
ARM GAS  /tmp/ccKAqqXO.s 			page 15


 135 005e DAB1     		cbz	r2, .L15
 167:FWLIB/src/stm32f4xx_cryp_des.c ****       {
 168:FWLIB/src/stm32f4xx_cryp_des.c ****         status = ERROR;
 136              		.loc 1 168 0
 137 0060 0026     		movs	r6, #0
 138              	.LVL20:
 139              	.L8:
 149:FWLIB/src/stm32f4xx_cryp_des.c ****     {
 140              		.loc 1 149 0 discriminator 2
 141 0062 0835     		adds	r5, r5, #8
 142              	.LVL21:
 143              	.L5:
 149:FWLIB/src/stm32f4xx_cryp_des.c ****     {
 144              		.loc 1 149 0 is_stmt 0 discriminator 1
 145 0064 4545     		cmp	r5, r8
 146 0066 1FD2     		bcs	.L9
 149:FWLIB/src/stm32f4xx_cryp_des.c ****     {
 147              		.loc 1 149 0 discriminator 3
 148 0068 F6B1     		cbz	r6, .L9
 153:FWLIB/src/stm32f4xx_cryp_des.c ****       inputaddr+=4;
 149              		.loc 1 153 0 is_stmt 1
 150 006a 2068     		ldr	r0, [r4]
 151 006c FFF7FEFF 		bl	CRYP_DataIn
 152              	.LVL22:
 155:FWLIB/src/stm32f4xx_cryp_des.c ****       inputaddr+=4;
 153              		.loc 1 155 0
 154 0070 6068     		ldr	r0, [r4, #4]
 155 0072 FFF7FEFF 		bl	CRYP_DataIn
 156              	.LVL23:
 156:FWLIB/src/stm32f4xx_cryp_des.c ****       
 157              		.loc 1 156 0
 158 0076 0834     		adds	r4, r4, #8
 159              	.LVL24:
 159:FWLIB/src/stm32f4xx_cryp_des.c ****       do
 160              		.loc 1 159 0
 161 0078 0023     		movs	r3, #0
 162 007a 0193     		str	r3, [sp, #4]
 163              	.L7:
 162:FWLIB/src/stm32f4xx_cryp_des.c ****         counter++;
 164              		.loc 1 162 0 discriminator 2
 165 007c 1020     		movs	r0, #16
 166 007e FFF7FEFF 		bl	CRYP_GetFlagStatus
 167              	.LVL25:
 168 0082 0246     		mov	r2, r0
 169              	.LVL26:
 163:FWLIB/src/stm32f4xx_cryp_des.c ****       }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 170              		.loc 1 163 0 discriminator 2
 171 0084 019B     		ldr	r3, [sp, #4]
 172 0086 0133     		adds	r3, r3, #1
 173 0088 0193     		str	r3, [sp, #4]
 164:FWLIB/src/stm32f4xx_cryp_des.c ****       
 174              		.loc 1 164 0 discriminator 2
 175 008a 019B     		ldr	r3, [sp, #4]
 176 008c B3F5803F 		cmp	r3, #65536
 177 0090 E5D0     		beq	.L6
 164:FWLIB/src/stm32f4xx_cryp_des.c ****       
 178              		.loc 1 164 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccKAqqXO.s 			page 16


 179 0092 0028     		cmp	r0, #0
 180 0094 F2D1     		bne	.L7
 181 0096 E2E7     		b	.L6
 182              	.L15:
 169:FWLIB/src/stm32f4xx_cryp_des.c ****       }
 170:FWLIB/src/stm32f4xx_cryp_des.c ****       else
 171:FWLIB/src/stm32f4xx_cryp_des.c ****       {
 172:FWLIB/src/stm32f4xx_cryp_des.c ****         
 173:FWLIB/src/stm32f4xx_cryp_des.c ****         /* Read the Output block from the Output FIFO */
 174:FWLIB/src/stm32f4xx_cryp_des.c ****         *(uint32_t*)(outputaddr) = CRYP_DataOut();
 183              		.loc 1 174 0 is_stmt 1
 184 0098 FFF7FEFF 		bl	CRYP_DataOut
 185              	.LVL27:
 186 009c 3860     		str	r0, [r7]
 187              	.LVL28:
 175:FWLIB/src/stm32f4xx_cryp_des.c ****         outputaddr+=4;
 176:FWLIB/src/stm32f4xx_cryp_des.c ****         *(uint32_t*)(outputaddr) = CRYP_DataOut();
 188              		.loc 1 176 0
 189 009e FFF7FEFF 		bl	CRYP_DataOut
 190              	.LVL29:
 191 00a2 7860     		str	r0, [r7, #4]
 177:FWLIB/src/stm32f4xx_cryp_des.c ****         outputaddr+=4;
 192              		.loc 1 177 0
 193 00a4 0837     		adds	r7, r7, #8
 194              	.LVL30:
 195 00a6 DCE7     		b	.L8
 196              	.L9:
 178:FWLIB/src/stm32f4xx_cryp_des.c ****       }
 179:FWLIB/src/stm32f4xx_cryp_des.c ****     }
 180:FWLIB/src/stm32f4xx_cryp_des.c ****     
 181:FWLIB/src/stm32f4xx_cryp_des.c ****     /* Disable Crypto */
 182:FWLIB/src/stm32f4xx_cryp_des.c ****     CRYP_Cmd(DISABLE);
 197              		.loc 1 182 0
 198 00a8 0020     		movs	r0, #0
 199 00aa FFF7FEFF 		bl	CRYP_Cmd
 200              	.LVL31:
 201              	.L4:
 183:FWLIB/src/stm32f4xx_cryp_des.c ****   }
 184:FWLIB/src/stm32f4xx_cryp_des.c ****   return status; 
 185:FWLIB/src/stm32f4xx_cryp_des.c **** }
 202              		.loc 1 185 0
 203 00ae 3046     		mov	r0, r6
 204 00b0 0EB0     		add	sp, sp, #56
 205              	.LCFI2:
 206              		.cfi_remember_state
 207              		.cfi_def_cfa_offset 24
 208              		@ sp needed
 209 00b2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 210              	.LVL32:
 211              	.L11:
 212              	.LCFI3:
 213              		.cfi_restore_state
 145:FWLIB/src/stm32f4xx_cryp_des.c ****   }
 214              		.loc 1 145 0
 215 00b6 0026     		movs	r6, #0
 216 00b8 F9E7     		b	.L4
 217              		.cfi_endproc
ARM GAS  /tmp/ccKAqqXO.s 			page 17


 218              	.LFE123:
 220              		.section	.text.CRYP_DES_CBC,"ax",%progbits
 221              		.align	1
 222              		.global	CRYP_DES_CBC
 223              		.syntax unified
 224              		.thumb
 225              		.thumb_func
 226              		.fpu fpv4-sp-d16
 228              	CRYP_DES_CBC:
 229              	.LFB124:
 186:FWLIB/src/stm32f4xx_cryp_des.c **** 
 187:FWLIB/src/stm32f4xx_cryp_des.c **** /**
 188:FWLIB/src/stm32f4xx_cryp_des.c ****   * @brief  Encrypt and decrypt using DES in CBC Mode
 189:FWLIB/src/stm32f4xx_cryp_des.c ****   * @param  Mode: encryption or decryption Mode.
 190:FWLIB/src/stm32f4xx_cryp_des.c ****   *          This parameter can be one of the following values:
 191:FWLIB/src/stm32f4xx_cryp_des.c ****   *            @arg MODE_ENCRYPT: Encryption
 192:FWLIB/src/stm32f4xx_cryp_des.c ****   *            @arg MODE_DECRYPT: Decryption
 193:FWLIB/src/stm32f4xx_cryp_des.c ****   * @param  Key: Key used for DES algorithm.
 194:FWLIB/src/stm32f4xx_cryp_des.c ****   * @param  InitVectors: Initialisation Vectors used for DES algorithm.
 195:FWLIB/src/stm32f4xx_cryp_des.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 8.
 196:FWLIB/src/stm32f4xx_cryp_des.c ****   * @param  Input: pointer to the Input buffer.
 197:FWLIB/src/stm32f4xx_cryp_des.c ****   * @param  Output: pointer to the returned buffer.
 198:FWLIB/src/stm32f4xx_cryp_des.c ****   * @retval An ErrorStatus enumeration value:
 199:FWLIB/src/stm32f4xx_cryp_des.c ****   *          - SUCCESS: Operation done
 200:FWLIB/src/stm32f4xx_cryp_des.c ****   *          - ERROR: Operation failed
 201:FWLIB/src/stm32f4xx_cryp_des.c ****   */
 202:FWLIB/src/stm32f4xx_cryp_des.c **** ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
 203:FWLIB/src/stm32f4xx_cryp_des.c ****                          uint8_t *Input, uint32_t Ilength, uint8_t *Output)
 204:FWLIB/src/stm32f4xx_cryp_des.c **** {
 230              		.loc 1 204 0
 231              		.cfi_startproc
 232              		@ args = 8, pretend = 0, frame = 72
 233              		@ frame_needed = 0, uses_anonymous_args = 0
 234              	.LVL33:
 235 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 236              	.LCFI4:
 237              		.cfi_def_cfa_offset 28
 238              		.cfi_offset 4, -28
 239              		.cfi_offset 5, -24
 240              		.cfi_offset 6, -20
 241              		.cfi_offset 7, -16
 242              		.cfi_offset 8, -12
 243              		.cfi_offset 9, -8
 244              		.cfi_offset 14, -4
 245 0004 93B0     		sub	sp, sp, #76
 246              	.LCFI5:
 247              		.cfi_def_cfa_offset 104
 248 0006 8146     		mov	r9, r0
 249 0008 0E46     		mov	r6, r1
 250 000a 1546     		mov	r5, r2
 251 000c DDF86880 		ldr	r8, [sp, #104]
 205:FWLIB/src/stm32f4xx_cryp_des.c ****   CRYP_InitTypeDef DES_CRYP_InitStructure;
 206:FWLIB/src/stm32f4xx_cryp_des.c ****   CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
 207:FWLIB/src/stm32f4xx_cryp_des.c ****   CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
 208:FWLIB/src/stm32f4xx_cryp_des.c ****   __IO uint32_t counter = 0;
 252              		.loc 1 208 0
 253 0010 0022     		movs	r2, #0
ARM GAS  /tmp/ccKAqqXO.s 			page 18


 254              	.LVL34:
 255 0012 0192     		str	r2, [sp, #4]
 256              	.LVL35:
 209:FWLIB/src/stm32f4xx_cryp_des.c ****   uint32_t busystatus = 0;
 210:FWLIB/src/stm32f4xx_cryp_des.c ****   ErrorStatus status = SUCCESS;
 211:FWLIB/src/stm32f4xx_cryp_des.c ****   uint32_t keyaddr    = (uint32_t)Key;
 212:FWLIB/src/stm32f4xx_cryp_des.c ****   uint32_t inputaddr  = (uint32_t)Input;
 257              		.loc 1 212 0
 258 0014 1C46     		mov	r4, r3
 259              	.LVL36:
 213:FWLIB/src/stm32f4xx_cryp_des.c ****   uint32_t outputaddr = (uint32_t)Output;
 260              		.loc 1 213 0
 261 0016 1B9F     		ldr	r7, [sp, #108]
 262              	.LVL37:
 214:FWLIB/src/stm32f4xx_cryp_des.c ****   uint32_t ivaddr     = (uint32_t)InitVectors;
 215:FWLIB/src/stm32f4xx_cryp_des.c ****   uint32_t i = 0;
 216:FWLIB/src/stm32f4xx_cryp_des.c **** 
 217:FWLIB/src/stm32f4xx_cryp_des.c ****   /* Crypto structures initialisation*/
 218:FWLIB/src/stm32f4xx_cryp_des.c ****   CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 263              		.loc 1 218 0
 264 0018 06A8     		add	r0, sp, #24
 265              	.LVL38:
 266 001a FFF7FEFF 		bl	CRYP_KeyStructInit
 267              	.LVL39:
 219:FWLIB/src/stm32f4xx_cryp_des.c **** 
 220:FWLIB/src/stm32f4xx_cryp_des.c ****   /* Crypto Init for Encryption process */
 221:FWLIB/src/stm32f4xx_cryp_des.c ****   if(Mode == MODE_ENCRYPT) /* DES encryption */
 268              		.loc 1 221 0
 269 001e B9F1010F 		cmp	r9, #1
 270 0022 25D0     		beq	.L29
 222:FWLIB/src/stm32f4xx_cryp_des.c ****   {
 223:FWLIB/src/stm32f4xx_cryp_des.c ****      DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 224:FWLIB/src/stm32f4xx_cryp_des.c ****   }
 225:FWLIB/src/stm32f4xx_cryp_des.c ****   else /*if(Mode == MODE_DECRYPT)*/ /* DES decryption */
 226:FWLIB/src/stm32f4xx_cryp_des.c ****   {
 227:FWLIB/src/stm32f4xx_cryp_des.c ****      DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 271              		.loc 1 227 0
 272 0024 0423     		movs	r3, #4
 273 0026 0E93     		str	r3, [sp, #56]
 274              	.L18:
 228:FWLIB/src/stm32f4xx_cryp_des.c ****   }
 229:FWLIB/src/stm32f4xx_cryp_des.c **** 
 230:FWLIB/src/stm32f4xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
 275              		.loc 1 230 0
 276 0028 1823     		movs	r3, #24
 277 002a 0F93     		str	r3, [sp, #60]
 231:FWLIB/src/stm32f4xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 278              		.loc 1 231 0
 279 002c 8023     		movs	r3, #128
 280 002e 1093     		str	r3, [sp, #64]
 232:FWLIB/src/stm32f4xx_cryp_des.c ****   CRYP_Init(&DES_CRYP_InitStructure);
 281              		.loc 1 232 0
 282 0030 0EA8     		add	r0, sp, #56
 283 0032 FFF7FEFF 		bl	CRYP_Init
 284              	.LVL40:
 233:FWLIB/src/stm32f4xx_cryp_des.c **** 
 234:FWLIB/src/stm32f4xx_cryp_des.c ****   /* Key Initialisation */
ARM GAS  /tmp/ccKAqqXO.s 			page 19


 235:FWLIB/src/stm32f4xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 285              		.loc 1 235 0
 286 0036 3368     		ldr	r3, [r6]
 287              	.LVL41:
 288              	.LBB18:
 289              	.LBB19:
 290              		.loc 2 498 0
 291 0038 1BBA     		rev	r3, r3
 292              	.LVL42:
 293              	.LBE19:
 294              	.LBE18:
 295              		.loc 1 235 0
 296 003a 0893     		str	r3, [sp, #32]
 297              	.LVL43:
 236:FWLIB/src/stm32f4xx_cryp_des.c ****   keyaddr+=4;
 237:FWLIB/src/stm32f4xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 298              		.loc 1 237 0
 299 003c 7368     		ldr	r3, [r6, #4]
 300              	.LVL44:
 301              	.LBB20:
 302              	.LBB21:
 303              		.loc 2 498 0
 304 003e 1BBA     		rev	r3, r3
 305              	.LVL45:
 306              	.LBE21:
 307              	.LBE20:
 308              		.loc 1 237 0
 309 0040 0993     		str	r3, [sp, #36]
 238:FWLIB/src/stm32f4xx_cryp_des.c ****   CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 310              		.loc 1 238 0
 311 0042 06A8     		add	r0, sp, #24
 312 0044 FFF7FEFF 		bl	CRYP_KeyInit
 313              	.LVL46:
 239:FWLIB/src/stm32f4xx_cryp_des.c **** 
 240:FWLIB/src/stm32f4xx_cryp_des.c ****   /* Initialization Vectors */
 241:FWLIB/src/stm32f4xx_cryp_des.c ****   DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 314              		.loc 1 241 0
 315 0048 2B68     		ldr	r3, [r5]
 316              	.LVL47:
 317              	.LBB22:
 318              	.LBB23:
 319              		.loc 2 498 0
 320 004a 1BBA     		rev	r3, r3
 321              	.LVL48:
 322              	.LBE23:
 323              	.LBE22:
 324              		.loc 1 241 0
 325 004c 0293     		str	r3, [sp, #8]
 326              	.LVL49:
 242:FWLIB/src/stm32f4xx_cryp_des.c ****   ivaddr+=4;
 243:FWLIB/src/stm32f4xx_cryp_des.c ****   DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 327              		.loc 1 243 0
 328 004e 6B68     		ldr	r3, [r5, #4]
 329              	.LVL50:
 330              	.LBB24:
 331              	.LBB25:
 332              		.loc 2 498 0
ARM GAS  /tmp/ccKAqqXO.s 			page 20


 333 0050 1BBA     		rev	r3, r3
 334              	.LVL51:
 335              	.LBE25:
 336              	.LBE24:
 337              		.loc 1 243 0
 338 0052 0393     		str	r3, [sp, #12]
 244:FWLIB/src/stm32f4xx_cryp_des.c ****   CRYP_IVInit(&DES_CRYP_IVInitStructure);
 339              		.loc 1 244 0
 340 0054 02A8     		add	r0, sp, #8
 341 0056 FFF7FEFF 		bl	CRYP_IVInit
 342              	.LVL52:
 245:FWLIB/src/stm32f4xx_cryp_des.c **** 
 246:FWLIB/src/stm32f4xx_cryp_des.c ****   /* Flush IN/OUT FIFO */
 247:FWLIB/src/stm32f4xx_cryp_des.c ****   CRYP_FIFOFlush();
 343              		.loc 1 247 0
 344 005a FFF7FEFF 		bl	CRYP_FIFOFlush
 345              	.LVL53:
 248:FWLIB/src/stm32f4xx_cryp_des.c ****   
 249:FWLIB/src/stm32f4xx_cryp_des.c ****   /* Enable Crypto processor */
 250:FWLIB/src/stm32f4xx_cryp_des.c ****   CRYP_Cmd(ENABLE);
 346              		.loc 1 250 0
 347 005e 0120     		movs	r0, #1
 348 0060 FFF7FEFF 		bl	CRYP_Cmd
 349              	.LVL54:
 251:FWLIB/src/stm32f4xx_cryp_des.c **** 
 252:FWLIB/src/stm32f4xx_cryp_des.c ****   if(CRYP_GetCmdStatus() == DISABLE)
 350              		.loc 1 252 0
 351 0064 FFF7FEFF 		bl	CRYP_GetCmdStatus
 352              	.LVL55:
 353 0068 88B3     		cbz	r0, .L26
 354 006a 0025     		movs	r5, #0
 355              	.LVL56:
 356 006c 0126     		movs	r6, #1
 357              	.LVL57:
 358 006e 05E0     		b	.L20
 359              	.LVL58:
 360              	.L29:
 223:FWLIB/src/stm32f4xx_cryp_des.c ****   }
 361              		.loc 1 223 0
 362 0070 0023     		movs	r3, #0
 363 0072 0E93     		str	r3, [sp, #56]
 364 0074 D8E7     		b	.L18
 365              	.LVL59:
 366              	.L21:
 253:FWLIB/src/stm32f4xx_cryp_des.c ****   {
 254:FWLIB/src/stm32f4xx_cryp_des.c ****     /* The CRYP peripheral clock is not enabled or the device doesn't embed 
 255:FWLIB/src/stm32f4xx_cryp_des.c ****     the CRYP peripheral (please check the device sales type. */
 256:FWLIB/src/stm32f4xx_cryp_des.c ****     status = ERROR;
 257:FWLIB/src/stm32f4xx_cryp_des.c ****   }
 258:FWLIB/src/stm32f4xx_cryp_des.c ****   else
 259:FWLIB/src/stm32f4xx_cryp_des.c ****   {
 260:FWLIB/src/stm32f4xx_cryp_des.c ****     for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 261:FWLIB/src/stm32f4xx_cryp_des.c ****     {
 262:FWLIB/src/stm32f4xx_cryp_des.c ****       /* Write the Input block in the Input FIFO */
 263:FWLIB/src/stm32f4xx_cryp_des.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 264:FWLIB/src/stm32f4xx_cryp_des.c ****       inputaddr+=4;
 265:FWLIB/src/stm32f4xx_cryp_des.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
ARM GAS  /tmp/ccKAqqXO.s 			page 21


 266:FWLIB/src/stm32f4xx_cryp_des.c ****       inputaddr+=4;
 267:FWLIB/src/stm32f4xx_cryp_des.c ****       
 268:FWLIB/src/stm32f4xx_cryp_des.c ****       /* Wait until the complete message has been processed */
 269:FWLIB/src/stm32f4xx_cryp_des.c ****       counter = 0;
 270:FWLIB/src/stm32f4xx_cryp_des.c ****       do
 271:FWLIB/src/stm32f4xx_cryp_des.c ****       {
 272:FWLIB/src/stm32f4xx_cryp_des.c ****         busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 273:FWLIB/src/stm32f4xx_cryp_des.c ****         counter++;
 274:FWLIB/src/stm32f4xx_cryp_des.c ****       }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 275:FWLIB/src/stm32f4xx_cryp_des.c ****       
 276:FWLIB/src/stm32f4xx_cryp_des.c ****       if (busystatus != RESET)
 367              		.loc 1 276 0
 368 0076 DAB1     		cbz	r2, .L30
 277:FWLIB/src/stm32f4xx_cryp_des.c ****       {
 278:FWLIB/src/stm32f4xx_cryp_des.c ****         status = ERROR;
 369              		.loc 1 278 0
 370 0078 0026     		movs	r6, #0
 371              	.LVL60:
 372              	.L23:
 260:FWLIB/src/stm32f4xx_cryp_des.c ****     {
 373              		.loc 1 260 0 discriminator 2
 374 007a 0835     		adds	r5, r5, #8
 375              	.LVL61:
 376              	.L20:
 260:FWLIB/src/stm32f4xx_cryp_des.c ****     {
 377              		.loc 1 260 0 is_stmt 0 discriminator 1
 378 007c 4545     		cmp	r5, r8
 379 007e 1FD2     		bcs	.L24
 260:FWLIB/src/stm32f4xx_cryp_des.c ****     {
 380              		.loc 1 260 0 discriminator 3
 381 0080 F6B1     		cbz	r6, .L24
 263:FWLIB/src/stm32f4xx_cryp_des.c ****       inputaddr+=4;
 382              		.loc 1 263 0 is_stmt 1
 383 0082 2068     		ldr	r0, [r4]
 384 0084 FFF7FEFF 		bl	CRYP_DataIn
 385              	.LVL62:
 265:FWLIB/src/stm32f4xx_cryp_des.c ****       inputaddr+=4;
 386              		.loc 1 265 0
 387 0088 6068     		ldr	r0, [r4, #4]
 388 008a FFF7FEFF 		bl	CRYP_DataIn
 389              	.LVL63:
 266:FWLIB/src/stm32f4xx_cryp_des.c ****       
 390              		.loc 1 266 0
 391 008e 0834     		adds	r4, r4, #8
 392              	.LVL64:
 269:FWLIB/src/stm32f4xx_cryp_des.c ****       do
 393              		.loc 1 269 0
 394 0090 0023     		movs	r3, #0
 395 0092 0193     		str	r3, [sp, #4]
 396              	.L22:
 272:FWLIB/src/stm32f4xx_cryp_des.c ****         counter++;
 397              		.loc 1 272 0 discriminator 2
 398 0094 1020     		movs	r0, #16
 399 0096 FFF7FEFF 		bl	CRYP_GetFlagStatus
 400              	.LVL65:
 401 009a 0246     		mov	r2, r0
 402              	.LVL66:
ARM GAS  /tmp/ccKAqqXO.s 			page 22


 273:FWLIB/src/stm32f4xx_cryp_des.c ****       }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 403              		.loc 1 273 0 discriminator 2
 404 009c 019B     		ldr	r3, [sp, #4]
 405 009e 0133     		adds	r3, r3, #1
 406 00a0 0193     		str	r3, [sp, #4]
 274:FWLIB/src/stm32f4xx_cryp_des.c ****       
 407              		.loc 1 274 0 discriminator 2
 408 00a2 019B     		ldr	r3, [sp, #4]
 409 00a4 B3F5803F 		cmp	r3, #65536
 410 00a8 E5D0     		beq	.L21
 274:FWLIB/src/stm32f4xx_cryp_des.c ****       
 411              		.loc 1 274 0 is_stmt 0 discriminator 1
 412 00aa 0028     		cmp	r0, #0
 413 00ac F2D1     		bne	.L22
 414 00ae E2E7     		b	.L21
 415              	.L30:
 279:FWLIB/src/stm32f4xx_cryp_des.c ****       }
 280:FWLIB/src/stm32f4xx_cryp_des.c ****       else
 281:FWLIB/src/stm32f4xx_cryp_des.c ****       {
 282:FWLIB/src/stm32f4xx_cryp_des.c ****         /* Read the Output block from the Output FIFO */
 283:FWLIB/src/stm32f4xx_cryp_des.c ****         *(uint32_t*)(outputaddr) = CRYP_DataOut();
 416              		.loc 1 283 0 is_stmt 1
 417 00b0 FFF7FEFF 		bl	CRYP_DataOut
 418              	.LVL67:
 419 00b4 3860     		str	r0, [r7]
 420              	.LVL68:
 284:FWLIB/src/stm32f4xx_cryp_des.c ****         outputaddr+=4;
 285:FWLIB/src/stm32f4xx_cryp_des.c ****         *(uint32_t*)(outputaddr) = CRYP_DataOut();
 421              		.loc 1 285 0
 422 00b6 FFF7FEFF 		bl	CRYP_DataOut
 423              	.LVL69:
 424 00ba 7860     		str	r0, [r7, #4]
 286:FWLIB/src/stm32f4xx_cryp_des.c ****         outputaddr+=4;
 425              		.loc 1 286 0
 426 00bc 0837     		adds	r7, r7, #8
 427              	.LVL70:
 428 00be DCE7     		b	.L23
 429              	.L24:
 287:FWLIB/src/stm32f4xx_cryp_des.c ****       }
 288:FWLIB/src/stm32f4xx_cryp_des.c ****     }
 289:FWLIB/src/stm32f4xx_cryp_des.c ****     
 290:FWLIB/src/stm32f4xx_cryp_des.c ****     /* Disable Crypto */
 291:FWLIB/src/stm32f4xx_cryp_des.c ****     CRYP_Cmd(DISABLE);
 430              		.loc 1 291 0
 431 00c0 0020     		movs	r0, #0
 432 00c2 FFF7FEFF 		bl	CRYP_Cmd
 433              	.LVL71:
 434              	.L19:
 292:FWLIB/src/stm32f4xx_cryp_des.c ****   }
 293:FWLIB/src/stm32f4xx_cryp_des.c ****   return status; 
 294:FWLIB/src/stm32f4xx_cryp_des.c **** }
 435              		.loc 1 294 0
 436 00c6 3046     		mov	r0, r6
 437 00c8 13B0     		add	sp, sp, #76
 438              	.LCFI6:
 439              		.cfi_remember_state
 440              		.cfi_def_cfa_offset 28
ARM GAS  /tmp/ccKAqqXO.s 			page 23


 441              		@ sp needed
 442 00ca BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 443              	.LVL72:
 444              	.L26:
 445              	.LCFI7:
 446              		.cfi_restore_state
 256:FWLIB/src/stm32f4xx_cryp_des.c ****   }
 447              		.loc 1 256 0
 448 00ce 0026     		movs	r6, #0
 449              	.LVL73:
 450 00d0 F9E7     		b	.L19
 451              		.cfi_endproc
 452              	.LFE124:
 454              		.text
 455              	.Letext0:
 456              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 457              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 458              		.file 5 "F4_CORE/core_cm4.h"
 459              		.file 6 "USER/system_stm32f4xx.h"
 460              		.file 7 "USER/stm32f4xx.h"
 461              		.file 8 "FWLIB/inc/stm32f4xx_cryp.h"
ARM GAS  /tmp/ccKAqqXO.s 			page 24


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_cryp_des.c
     /tmp/ccKAqqXO.s:18     .text.CRYP_DES_ECB:0000000000000000 $t
     /tmp/ccKAqqXO.s:25     .text.CRYP_DES_ECB:0000000000000000 CRYP_DES_ECB
     /tmp/ccKAqqXO.s:221    .text.CRYP_DES_CBC:0000000000000000 $t
     /tmp/ccKAqqXO.s:228    .text.CRYP_DES_CBC:0000000000000000 CRYP_DES_CBC
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
CRYP_KeyStructInit
CRYP_Init
CRYP_KeyInit
CRYP_FIFOFlush
CRYP_Cmd
CRYP_GetCmdStatus
CRYP_DataIn
CRYP_GetFlagStatus
CRYP_DataOut
CRYP_IVInit
