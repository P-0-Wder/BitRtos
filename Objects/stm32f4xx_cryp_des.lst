ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccaqBq0S.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_cryp_des.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.CRYP_DES_ECB,"ax",%progbits
  18              		.align	1
  19              		.global	CRYP_DES_ECB
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	CRYP_DES_ECB:
  27              	.LVL0:
  28              	.LFB123:
  29              		.file 1 "FWLIB/src/stm32f4xx_cryp_des.c"
   1:FWLIB/src/stm32f4xx_cryp_des.c **** /**
   2:FWLIB/src/stm32f4xx_cryp_des.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_cryp_des.c ****   * @file    stm32f4xx_cryp_des.c
   4:FWLIB/src/stm32f4xx_cryp_des.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_cryp_des.c ****   * @version V1.8.0
   6:FWLIB/src/stm32f4xx_cryp_des.c ****   * @date    04-November-2016
   7:FWLIB/src/stm32f4xx_cryp_des.c ****   * @brief   This file provides high level functions to encrypt and decrypt an 
   8:FWLIB/src/stm32f4xx_cryp_des.c ****   *          input message using DES in ECB/CBC modes.
   9:FWLIB/src/stm32f4xx_cryp_des.c ****   *          It uses the stm32f4xx_cryp.c/.h drivers to access the STM32F4xx CRYP
  10:FWLIB/src/stm32f4xx_cryp_des.c ****   *          peripheral.
  11:FWLIB/src/stm32f4xx_cryp_des.c ****   *
  12:FWLIB/src/stm32f4xx_cryp_des.c **** @verbatim
  13:FWLIB/src/stm32f4xx_cryp_des.c ****   
  14:FWLIB/src/stm32f4xx_cryp_des.c ****  ===================================================================
  15:FWLIB/src/stm32f4xx_cryp_des.c ****                   ##### How to use this driver #####
  16:FWLIB/src/stm32f4xx_cryp_des.c ****  ===================================================================
  17:FWLIB/src/stm32f4xx_cryp_des.c ****  [..] 
  18:FWLIB/src/stm32f4xx_cryp_des.c ****    (#) Enable The CRYP controller clock using 
  19:FWLIB/src/stm32f4xx_cryp_des.c ****        RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_CRYP, ENABLE); function.
  20:FWLIB/src/stm32f4xx_cryp_des.c ****   
  21:FWLIB/src/stm32f4xx_cryp_des.c ****    (#) Encrypt and decrypt using DES in ECB Mode using CRYP_DES_ECB() function.
  22:FWLIB/src/stm32f4xx_cryp_des.c ****   
  23:FWLIB/src/stm32f4xx_cryp_des.c ****    (#) Encrypt and decrypt using DES in CBC Mode using CRYP_DES_CBC() function.
  24:FWLIB/src/stm32f4xx_cryp_des.c ****   
  25:FWLIB/src/stm32f4xx_cryp_des.c **** @endverbatim
  26:FWLIB/src/stm32f4xx_cryp_des.c ****   *
  27:FWLIB/src/stm32f4xx_cryp_des.c ****   ******************************************************************************
  28:FWLIB/src/stm32f4xx_cryp_des.c ****   * @attention
  29:FWLIB/src/stm32f4xx_cryp_des.c ****   *
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccaqBq0S.s 			page 2


  30:FWLIB/src/stm32f4xx_cryp_des.c ****   * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
  31:FWLIB/src/stm32f4xx_cryp_des.c ****   *
  32:FWLIB/src/stm32f4xx_cryp_des.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  33:FWLIB/src/stm32f4xx_cryp_des.c ****   * You may not use this file except in compliance with the License.
  34:FWLIB/src/stm32f4xx_cryp_des.c ****   * You may obtain a copy of the License at:
  35:FWLIB/src/stm32f4xx_cryp_des.c ****   *
  36:FWLIB/src/stm32f4xx_cryp_des.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  37:FWLIB/src/stm32f4xx_cryp_des.c ****   *
  38:FWLIB/src/stm32f4xx_cryp_des.c ****   * Unless required by applicable law or agreed to in writing, software 
  39:FWLIB/src/stm32f4xx_cryp_des.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  40:FWLIB/src/stm32f4xx_cryp_des.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  41:FWLIB/src/stm32f4xx_cryp_des.c ****   * See the License for the specific language governing permissions and
  42:FWLIB/src/stm32f4xx_cryp_des.c ****   * limitations under the License.
  43:FWLIB/src/stm32f4xx_cryp_des.c ****   *
  44:FWLIB/src/stm32f4xx_cryp_des.c ****   ******************************************************************************
  45:FWLIB/src/stm32f4xx_cryp_des.c ****   */
  46:FWLIB/src/stm32f4xx_cryp_des.c **** 
  47:FWLIB/src/stm32f4xx_cryp_des.c **** /* Includes ------------------------------------------------------------------*/
  48:FWLIB/src/stm32f4xx_cryp_des.c **** #include "stm32f4xx_cryp.h"
  49:FWLIB/src/stm32f4xx_cryp_des.c **** 
  50:FWLIB/src/stm32f4xx_cryp_des.c **** 
  51:FWLIB/src/stm32f4xx_cryp_des.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  52:FWLIB/src/stm32f4xx_cryp_des.c ****   * @{
  53:FWLIB/src/stm32f4xx_cryp_des.c ****   */
  54:FWLIB/src/stm32f4xx_cryp_des.c **** 
  55:FWLIB/src/stm32f4xx_cryp_des.c **** /** @defgroup CRYP 
  56:FWLIB/src/stm32f4xx_cryp_des.c ****   * @brief CRYP driver modules
  57:FWLIB/src/stm32f4xx_cryp_des.c ****   * @{
  58:FWLIB/src/stm32f4xx_cryp_des.c ****   */
  59:FWLIB/src/stm32f4xx_cryp_des.c **** 
  60:FWLIB/src/stm32f4xx_cryp_des.c **** /* Private typedef -----------------------------------------------------------*/
  61:FWLIB/src/stm32f4xx_cryp_des.c **** /* Private define ------------------------------------------------------------*/
  62:FWLIB/src/stm32f4xx_cryp_des.c **** #define DESBUSY_TIMEOUT    ((uint32_t) 0x00010000)
  63:FWLIB/src/stm32f4xx_cryp_des.c **** 
  64:FWLIB/src/stm32f4xx_cryp_des.c **** /* Private macro -------------------------------------------------------------*/
  65:FWLIB/src/stm32f4xx_cryp_des.c **** /* Private variables ---------------------------------------------------------*/
  66:FWLIB/src/stm32f4xx_cryp_des.c **** /* Private function prototypes -----------------------------------------------*/
  67:FWLIB/src/stm32f4xx_cryp_des.c **** /* Private functions ---------------------------------------------------------*/
  68:FWLIB/src/stm32f4xx_cryp_des.c **** 
  69:FWLIB/src/stm32f4xx_cryp_des.c **** 
  70:FWLIB/src/stm32f4xx_cryp_des.c **** /** @defgroup CRYP_Private_Functions
  71:FWLIB/src/stm32f4xx_cryp_des.c ****   * @{
  72:FWLIB/src/stm32f4xx_cryp_des.c ****   */ 
  73:FWLIB/src/stm32f4xx_cryp_des.c **** 
  74:FWLIB/src/stm32f4xx_cryp_des.c **** /** @defgroup CRYP_Group8 High Level DES functions
  75:FWLIB/src/stm32f4xx_cryp_des.c ****  *  @brief   High Level DES functions 
  76:FWLIB/src/stm32f4xx_cryp_des.c ****  *
  77:FWLIB/src/stm32f4xx_cryp_des.c **** @verbatim   
  78:FWLIB/src/stm32f4xx_cryp_des.c ****  ===============================================================================
  79:FWLIB/src/stm32f4xx_cryp_des.c ****                        ##### High Level DES functions #####
  80:FWLIB/src/stm32f4xx_cryp_des.c ****  ===============================================================================
  81:FWLIB/src/stm32f4xx_cryp_des.c **** @endverbatim
  82:FWLIB/src/stm32f4xx_cryp_des.c ****   * @{
  83:FWLIB/src/stm32f4xx_cryp_des.c ****   */
  84:FWLIB/src/stm32f4xx_cryp_des.c **** 
  85:FWLIB/src/stm32f4xx_cryp_des.c **** /**
  86:FWLIB/src/stm32f4xx_cryp_des.c ****   * @brief  Encrypt and decrypt using DES in ECB Mode
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccaqBq0S.s 			page 3


  87:FWLIB/src/stm32f4xx_cryp_des.c ****   * @param  Mode: encryption or decryption Mode.
  88:FWLIB/src/stm32f4xx_cryp_des.c ****   *           This parameter can be one of the following values:
  89:FWLIB/src/stm32f4xx_cryp_des.c ****   *            @arg MODE_ENCRYPT: Encryption
  90:FWLIB/src/stm32f4xx_cryp_des.c ****   *            @arg MODE_DECRYPT: Decryption
  91:FWLIB/src/stm32f4xx_cryp_des.c ****   * @param  Key: Key used for DES algorithm.
  92:FWLIB/src/stm32f4xx_cryp_des.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 8.
  93:FWLIB/src/stm32f4xx_cryp_des.c ****   * @param  Input: pointer to the Input buffer.
  94:FWLIB/src/stm32f4xx_cryp_des.c ****   * @param  Output: pointer to the returned buffer.
  95:FWLIB/src/stm32f4xx_cryp_des.c ****   * @retval An ErrorStatus enumeration value:
  96:FWLIB/src/stm32f4xx_cryp_des.c ****   *          - SUCCESS: Operation done
  97:FWLIB/src/stm32f4xx_cryp_des.c ****   *          - ERROR: Operation failed
  98:FWLIB/src/stm32f4xx_cryp_des.c ****   */
  99:FWLIB/src/stm32f4xx_cryp_des.c **** ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
 100:FWLIB/src/stm32f4xx_cryp_des.c ****                          uint32_t Ilength, uint8_t *Output)
 101:FWLIB/src/stm32f4xx_cryp_des.c **** {
  30              		.loc 1 101 1 view -0
  31              		.cfi_startproc
  32              		@ args = 4, pretend = 0, frame = 56
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 101 1 is_stmt 0 view .LVU1
  35 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 24
  38              		.cfi_offset 4, -24
  39              		.cfi_offset 5, -20
  40              		.cfi_offset 6, -16
  41              		.cfi_offset 7, -12
  42              		.cfi_offset 8, -8
  43              		.cfi_offset 14, -4
  44 0004 8EB0     		sub	sp, sp, #56
  45              	.LCFI1:
  46              		.cfi_def_cfa_offset 80
  47 0006 0646     		mov	r6, r0
  48 0008 0D46     		mov	r5, r1
  49 000a 1F46     		mov	r7, r3
 102:FWLIB/src/stm32f4xx_cryp_des.c ****   CRYP_InitTypeDef DES_CRYP_InitStructure;
  50              		.loc 1 102 3 is_stmt 1 view .LVU2
 103:FWLIB/src/stm32f4xx_cryp_des.c ****   CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  51              		.loc 1 103 3 view .LVU3
 104:FWLIB/src/stm32f4xx_cryp_des.c ****   __IO uint32_t counter = 0;
  52              		.loc 1 104 3 view .LVU4
  53              		.loc 1 104 17 is_stmt 0 view .LVU5
  54 000c 0023     		movs	r3, #0
  55              	.LVL1:
  56              		.loc 1 104 17 view .LVU6
  57 000e 0193     		str	r3, [sp, #4]
 105:FWLIB/src/stm32f4xx_cryp_des.c ****   uint32_t busystatus = 0;
  58              		.loc 1 105 3 is_stmt 1 view .LVU7
  59              	.LVL2:
 106:FWLIB/src/stm32f4xx_cryp_des.c ****   ErrorStatus status = SUCCESS;
  60              		.loc 1 106 3 view .LVU8
 107:FWLIB/src/stm32f4xx_cryp_des.c ****   uint32_t keyaddr    = (uint32_t)Key;
  61              		.loc 1 107 3 view .LVU9
 108:FWLIB/src/stm32f4xx_cryp_des.c ****   uint32_t inputaddr  = (uint32_t)Input;
  62              		.loc 1 108 3 view .LVU10
  63              		.loc 1 108 12 is_stmt 0 view .LVU11
  64 0010 1446     		mov	r4, r2
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccaqBq0S.s 			page 4


  65              	.LVL3:
 109:FWLIB/src/stm32f4xx_cryp_des.c ****   uint32_t outputaddr = (uint32_t)Output;
  66              		.loc 1 109 3 is_stmt 1 view .LVU12
  67              		.loc 1 109 12 is_stmt 0 view .LVU13
  68 0012 DDF85080 		ldr	r8, [sp, #80]
  69              	.LVL4:
 110:FWLIB/src/stm32f4xx_cryp_des.c ****   uint32_t i = 0;
  70              		.loc 1 110 3 is_stmt 1 view .LVU14
 111:FWLIB/src/stm32f4xx_cryp_des.c **** 
 112:FWLIB/src/stm32f4xx_cryp_des.c ****   /* Crypto structures initialisation*/
 113:FWLIB/src/stm32f4xx_cryp_des.c ****   CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
  71              		.loc 1 113 3 view .LVU15
  72 0016 02A8     		add	r0, sp, #8
  73              	.LVL5:
  74              		.loc 1 113 3 is_stmt 0 view .LVU16
  75 0018 FFF7FEFF 		bl	CRYP_KeyStructInit
  76              	.LVL6:
 114:FWLIB/src/stm32f4xx_cryp_des.c **** 
 115:FWLIB/src/stm32f4xx_cryp_des.c ****   /* Crypto Init for Encryption process */
 116:FWLIB/src/stm32f4xx_cryp_des.c ****   if( Mode == MODE_ENCRYPT ) /* DES encryption */
  77              		.loc 1 116 3 is_stmt 1 view .LVU17
  78              		.loc 1 116 5 is_stmt 0 view .LVU18
  79 001c 012E     		cmp	r6, #1
  80 001e 1DD0     		beq	.L13
 117:FWLIB/src/stm32f4xx_cryp_des.c ****   {
 118:FWLIB/src/stm32f4xx_cryp_des.c ****      DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 119:FWLIB/src/stm32f4xx_cryp_des.c ****   }
 120:FWLIB/src/stm32f4xx_cryp_des.c ****   else/* if( Mode == MODE_DECRYPT )*/ /* DES decryption */
 121:FWLIB/src/stm32f4xx_cryp_des.c ****   {      
 122:FWLIB/src/stm32f4xx_cryp_des.c ****      DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
  81              		.loc 1 122 6 is_stmt 1 view .LVU19
  82              		.loc 1 122 43 is_stmt 0 view .LVU20
  83 0020 0423     		movs	r3, #4
  84 0022 0A93     		str	r3, [sp, #40]
  85              	.L3:
 123:FWLIB/src/stm32f4xx_cryp_des.c ****   }
 124:FWLIB/src/stm32f4xx_cryp_des.c **** 
 125:FWLIB/src/stm32f4xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
  86              		.loc 1 125 3 is_stmt 1 view .LVU21
  87              		.loc 1 125 40 is_stmt 0 view .LVU22
  88 0024 1023     		movs	r3, #16
  89 0026 0B93     		str	r3, [sp, #44]
 126:FWLIB/src/stm32f4xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  90              		.loc 1 126 3 is_stmt 1 view .LVU23
  91              		.loc 1 126 40 is_stmt 0 view .LVU24
  92 0028 8023     		movs	r3, #128
  93 002a 0C93     		str	r3, [sp, #48]
 127:FWLIB/src/stm32f4xx_cryp_des.c ****   CRYP_Init(&DES_CRYP_InitStructure);
  94              		.loc 1 127 3 is_stmt 1 view .LVU25
  95 002c 0AA8     		add	r0, sp, #40
  96 002e FFF7FEFF 		bl	CRYP_Init
  97              	.LVL7:
 128:FWLIB/src/stm32f4xx_cryp_des.c **** 
 129:FWLIB/src/stm32f4xx_cryp_des.c ****   /* Key Initialisation */
 130:FWLIB/src/stm32f4xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
  98              		.loc 1 130 3 view .LVU26
  99              		.loc 1 130 45 is_stmt 0 view .LVU27
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccaqBq0S.s 			page 5


 100 0032 2B68     		ldr	r3, [r5]
 101              	.LVL8:
 102              	.LBB14:
 103              	.LBI14:
 104              		.file 2 "F4_CORE/core_cmInstr.h"
   1:F4_CORE/core_cmInstr.h **** /**************************************************************************//**
   2:F4_CORE/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:F4_CORE/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:F4_CORE/core_cmInstr.h ****  * @version  V4.10
   5:F4_CORE/core_cmInstr.h ****  * @date     18. March 2015
   6:F4_CORE/core_cmInstr.h ****  *
   7:F4_CORE/core_cmInstr.h ****  * @note
   8:F4_CORE/core_cmInstr.h ****  *
   9:F4_CORE/core_cmInstr.h ****  ******************************************************************************/
  10:F4_CORE/core_cmInstr.h **** /* Copyright (c) 2009 - 2014 ARM LIMITED
  11:F4_CORE/core_cmInstr.h **** 
  12:F4_CORE/core_cmInstr.h ****    All rights reserved.
  13:F4_CORE/core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:F4_CORE/core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:F4_CORE/core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:F4_CORE/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:F4_CORE/core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:F4_CORE/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:F4_CORE/core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:F4_CORE/core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:F4_CORE/core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:F4_CORE/core_cmInstr.h ****      specific prior written permission.
  23:F4_CORE/core_cmInstr.h ****    *
  24:F4_CORE/core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:F4_CORE/core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:F4_CORE/core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:F4_CORE/core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:F4_CORE/core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:F4_CORE/core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:F4_CORE/core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:F4_CORE/core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:F4_CORE/core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:F4_CORE/core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:F4_CORE/core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:F4_CORE/core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:F4_CORE/core_cmInstr.h **** 
  37:F4_CORE/core_cmInstr.h **** 
  38:F4_CORE/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:F4_CORE/core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:F4_CORE/core_cmInstr.h **** 
  41:F4_CORE/core_cmInstr.h **** 
  42:F4_CORE/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:F4_CORE/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:F4_CORE/core_cmInstr.h ****   Access to dedicated instructions
  45:F4_CORE/core_cmInstr.h ****   @{
  46:F4_CORE/core_cmInstr.h **** */
  47:F4_CORE/core_cmInstr.h **** 
  48:F4_CORE/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:F4_CORE/core_cmInstr.h **** /* ARM armcc specific functions */
  50:F4_CORE/core_cmInstr.h **** 
  51:F4_CORE/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:F4_CORE/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccaqBq0S.s 			page 6


  53:F4_CORE/core_cmInstr.h **** #endif
  54:F4_CORE/core_cmInstr.h **** 
  55:F4_CORE/core_cmInstr.h **** 
  56:F4_CORE/core_cmInstr.h **** /** \brief  No Operation
  57:F4_CORE/core_cmInstr.h **** 
  58:F4_CORE/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:F4_CORE/core_cmInstr.h ****  */
  60:F4_CORE/core_cmInstr.h **** #define __NOP                             __nop
  61:F4_CORE/core_cmInstr.h **** 
  62:F4_CORE/core_cmInstr.h **** 
  63:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:F4_CORE/core_cmInstr.h **** 
  65:F4_CORE/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:F4_CORE/core_cmInstr.h ****     until one of a number of events occurs.
  67:F4_CORE/core_cmInstr.h ****  */
  68:F4_CORE/core_cmInstr.h **** #define __WFI                             __wfi
  69:F4_CORE/core_cmInstr.h **** 
  70:F4_CORE/core_cmInstr.h **** 
  71:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Event
  72:F4_CORE/core_cmInstr.h **** 
  73:F4_CORE/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:F4_CORE/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:F4_CORE/core_cmInstr.h ****  */
  76:F4_CORE/core_cmInstr.h **** #define __WFE                             __wfe
  77:F4_CORE/core_cmInstr.h **** 
  78:F4_CORE/core_cmInstr.h **** 
  79:F4_CORE/core_cmInstr.h **** /** \brief  Send Event
  80:F4_CORE/core_cmInstr.h **** 
  81:F4_CORE/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:F4_CORE/core_cmInstr.h ****  */
  83:F4_CORE/core_cmInstr.h **** #define __SEV                             __sev
  84:F4_CORE/core_cmInstr.h **** 
  85:F4_CORE/core_cmInstr.h **** 
  86:F4_CORE/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:F4_CORE/core_cmInstr.h **** 
  88:F4_CORE/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:F4_CORE/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:F4_CORE/core_cmInstr.h ****     memory, after the instruction has been completed.
  91:F4_CORE/core_cmInstr.h ****  */
  92:F4_CORE/core_cmInstr.h **** #define __ISB() do {\
  93:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
  94:F4_CORE/core_cmInstr.h ****                    __isb(0xF);\
  95:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
  96:F4_CORE/core_cmInstr.h ****                 } while (0)
  97:F4_CORE/core_cmInstr.h **** 
  98:F4_CORE/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  99:F4_CORE/core_cmInstr.h **** 
 100:F4_CORE/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 101:F4_CORE/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 102:F4_CORE/core_cmInstr.h ****  */
 103:F4_CORE/core_cmInstr.h **** #define __DSB() do {\
 104:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 105:F4_CORE/core_cmInstr.h ****                    __dsb(0xF);\
 106:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 107:F4_CORE/core_cmInstr.h ****                 } while (0)
 108:F4_CORE/core_cmInstr.h **** 
 109:F4_CORE/core_cmInstr.h **** /** \brief  Data Memory Barrier
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccaqBq0S.s 			page 7


 110:F4_CORE/core_cmInstr.h **** 
 111:F4_CORE/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 112:F4_CORE/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 113:F4_CORE/core_cmInstr.h ****  */
 114:F4_CORE/core_cmInstr.h **** #define __DMB() do {\
 115:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 116:F4_CORE/core_cmInstr.h ****                    __dmb(0xF);\
 117:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 118:F4_CORE/core_cmInstr.h ****                 } while (0)
 119:F4_CORE/core_cmInstr.h **** 
 120:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 121:F4_CORE/core_cmInstr.h **** 
 122:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in integer value.
 123:F4_CORE/core_cmInstr.h **** 
 124:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 125:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 126:F4_CORE/core_cmInstr.h ****  */
 127:F4_CORE/core_cmInstr.h **** #define __REV                             __rev
 128:F4_CORE/core_cmInstr.h **** 
 129:F4_CORE/core_cmInstr.h **** 
 130:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 131:F4_CORE/core_cmInstr.h **** 
 132:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 133:F4_CORE/core_cmInstr.h **** 
 134:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 135:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 136:F4_CORE/core_cmInstr.h ****  */
 137:F4_CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 138:F4_CORE/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 139:F4_CORE/core_cmInstr.h **** {
 140:F4_CORE/core_cmInstr.h ****   rev16 r0, r0
 141:F4_CORE/core_cmInstr.h ****   bx lr
 142:F4_CORE/core_cmInstr.h **** }
 143:F4_CORE/core_cmInstr.h **** #endif
 144:F4_CORE/core_cmInstr.h **** 
 145:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 146:F4_CORE/core_cmInstr.h **** 
 147:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 148:F4_CORE/core_cmInstr.h **** 
 149:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 150:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 151:F4_CORE/core_cmInstr.h ****  */
 152:F4_CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 153:F4_CORE/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 154:F4_CORE/core_cmInstr.h **** {
 155:F4_CORE/core_cmInstr.h ****   revsh r0, r0
 156:F4_CORE/core_cmInstr.h ****   bx lr
 157:F4_CORE/core_cmInstr.h **** }
 158:F4_CORE/core_cmInstr.h **** #endif
 159:F4_CORE/core_cmInstr.h **** 
 160:F4_CORE/core_cmInstr.h **** 
 161:F4_CORE/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 162:F4_CORE/core_cmInstr.h **** 
 163:F4_CORE/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 164:F4_CORE/core_cmInstr.h **** 
 165:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to rotate
 166:F4_CORE/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccaqBq0S.s 			page 8


 167:F4_CORE/core_cmInstr.h ****     \return               Rotated value
 168:F4_CORE/core_cmInstr.h ****  */
 169:F4_CORE/core_cmInstr.h **** #define __ROR                             __ror
 170:F4_CORE/core_cmInstr.h **** 
 171:F4_CORE/core_cmInstr.h **** 
 172:F4_CORE/core_cmInstr.h **** /** \brief  Breakpoint
 173:F4_CORE/core_cmInstr.h **** 
 174:F4_CORE/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 175:F4_CORE/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 176:F4_CORE/core_cmInstr.h **** 
 177:F4_CORE/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 178:F4_CORE/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 179:F4_CORE/core_cmInstr.h ****  */
 180:F4_CORE/core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 181:F4_CORE/core_cmInstr.h **** 
 182:F4_CORE/core_cmInstr.h **** 
 183:F4_CORE/core_cmInstr.h **** /** \brief  Reverse bit order of value
 184:F4_CORE/core_cmInstr.h **** 
 185:F4_CORE/core_cmInstr.h ****     This function reverses the bit order of the given value.
 186:F4_CORE/core_cmInstr.h **** 
 187:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 188:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 189:F4_CORE/core_cmInstr.h ****  */
 190:F4_CORE/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 191:F4_CORE/core_cmInstr.h ****   #define __RBIT                          __rbit
 192:F4_CORE/core_cmInstr.h **** #else
 193:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 194:F4_CORE/core_cmInstr.h **** {
 195:F4_CORE/core_cmInstr.h ****   uint32_t result;
 196:F4_CORE/core_cmInstr.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; // extra shift needed at end
 197:F4_CORE/core_cmInstr.h **** 
 198:F4_CORE/core_cmInstr.h ****   result = value;                      // r will be reversed bits of v; first get LSB of v
 199:F4_CORE/core_cmInstr.h ****   for (value >>= 1; value; value >>= 1)
 200:F4_CORE/core_cmInstr.h ****   {
 201:F4_CORE/core_cmInstr.h ****     result <<= 1;
 202:F4_CORE/core_cmInstr.h ****     result |= value & 1;
 203:F4_CORE/core_cmInstr.h ****     s--;
 204:F4_CORE/core_cmInstr.h ****   }
 205:F4_CORE/core_cmInstr.h ****   result <<= s;                       // shift when v's highest bits are zero
 206:F4_CORE/core_cmInstr.h ****   return(result);
 207:F4_CORE/core_cmInstr.h **** }
 208:F4_CORE/core_cmInstr.h **** #endif
 209:F4_CORE/core_cmInstr.h **** 
 210:F4_CORE/core_cmInstr.h **** 
 211:F4_CORE/core_cmInstr.h **** /** \brief  Count leading zeros
 212:F4_CORE/core_cmInstr.h **** 
 213:F4_CORE/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 214:F4_CORE/core_cmInstr.h **** 
 215:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 216:F4_CORE/core_cmInstr.h ****     \return             number of leading zeros in value
 217:F4_CORE/core_cmInstr.h ****  */
 218:F4_CORE/core_cmInstr.h **** #define __CLZ                             __clz
 219:F4_CORE/core_cmInstr.h **** 
 220:F4_CORE/core_cmInstr.h **** 
 221:F4_CORE/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 222:F4_CORE/core_cmInstr.h **** 
 223:F4_CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccaqBq0S.s 			page 9


 224:F4_CORE/core_cmInstr.h **** 
 225:F4_CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 8 bit value.
 226:F4_CORE/core_cmInstr.h **** 
 227:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 228:F4_CORE/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 229:F4_CORE/core_cmInstr.h ****  */
 230:F4_CORE/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 231:F4_CORE/core_cmInstr.h **** 
 232:F4_CORE/core_cmInstr.h **** 
 233:F4_CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 234:F4_CORE/core_cmInstr.h **** 
 235:F4_CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 16 bit values.
 236:F4_CORE/core_cmInstr.h **** 
 237:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 238:F4_CORE/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 239:F4_CORE/core_cmInstr.h ****  */
 240:F4_CORE/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 241:F4_CORE/core_cmInstr.h **** 
 242:F4_CORE/core_cmInstr.h **** 
 243:F4_CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 244:F4_CORE/core_cmInstr.h **** 
 245:F4_CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 32 bit values.
 246:F4_CORE/core_cmInstr.h **** 
 247:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 248:F4_CORE/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 249:F4_CORE/core_cmInstr.h ****  */
 250:F4_CORE/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 251:F4_CORE/core_cmInstr.h **** 
 252:F4_CORE/core_cmInstr.h **** 
 253:F4_CORE/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 254:F4_CORE/core_cmInstr.h **** 
 255:F4_CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 8 bit values.
 256:F4_CORE/core_cmInstr.h **** 
 257:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 258:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 259:F4_CORE/core_cmInstr.h ****     \return          0  Function succeeded
 260:F4_CORE/core_cmInstr.h ****     \return          1  Function failed
 261:F4_CORE/core_cmInstr.h ****  */
 262:F4_CORE/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 263:F4_CORE/core_cmInstr.h **** 
 264:F4_CORE/core_cmInstr.h **** 
 265:F4_CORE/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 266:F4_CORE/core_cmInstr.h **** 
 267:F4_CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 16 bit values.
 268:F4_CORE/core_cmInstr.h **** 
 269:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 270:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 271:F4_CORE/core_cmInstr.h ****     \return          0  Function succeeded
 272:F4_CORE/core_cmInstr.h ****     \return          1  Function failed
 273:F4_CORE/core_cmInstr.h ****  */
 274:F4_CORE/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 275:F4_CORE/core_cmInstr.h **** 
 276:F4_CORE/core_cmInstr.h **** 
 277:F4_CORE/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 278:F4_CORE/core_cmInstr.h **** 
 279:F4_CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 32 bit values.
 280:F4_CORE/core_cmInstr.h **** 
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccaqBq0S.s 			page 10


 281:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 282:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 283:F4_CORE/core_cmInstr.h ****     \return          0  Function succeeded
 284:F4_CORE/core_cmInstr.h ****     \return          1  Function failed
 285:F4_CORE/core_cmInstr.h ****  */
 286:F4_CORE/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 287:F4_CORE/core_cmInstr.h **** 
 288:F4_CORE/core_cmInstr.h **** 
 289:F4_CORE/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 290:F4_CORE/core_cmInstr.h **** 
 291:F4_CORE/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 292:F4_CORE/core_cmInstr.h **** 
 293:F4_CORE/core_cmInstr.h ****  */
 294:F4_CORE/core_cmInstr.h **** #define __CLREX                           __clrex
 295:F4_CORE/core_cmInstr.h **** 
 296:F4_CORE/core_cmInstr.h **** 
 297:F4_CORE/core_cmInstr.h **** /** \brief  Signed Saturate
 298:F4_CORE/core_cmInstr.h **** 
 299:F4_CORE/core_cmInstr.h ****     This function saturates a signed value.
 300:F4_CORE/core_cmInstr.h **** 
 301:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 302:F4_CORE/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 303:F4_CORE/core_cmInstr.h ****     \return             Saturated value
 304:F4_CORE/core_cmInstr.h ****  */
 305:F4_CORE/core_cmInstr.h **** #define __SSAT                            __ssat
 306:F4_CORE/core_cmInstr.h **** 
 307:F4_CORE/core_cmInstr.h **** 
 308:F4_CORE/core_cmInstr.h **** /** \brief  Unsigned Saturate
 309:F4_CORE/core_cmInstr.h **** 
 310:F4_CORE/core_cmInstr.h ****     This function saturates an unsigned value.
 311:F4_CORE/core_cmInstr.h **** 
 312:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 313:F4_CORE/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 314:F4_CORE/core_cmInstr.h ****     \return             Saturated value
 315:F4_CORE/core_cmInstr.h ****  */
 316:F4_CORE/core_cmInstr.h **** #define __USAT                            __usat
 317:F4_CORE/core_cmInstr.h **** 
 318:F4_CORE/core_cmInstr.h **** 
 319:F4_CORE/core_cmInstr.h **** /** \brief  Rotate Right with Extend (32 bit)
 320:F4_CORE/core_cmInstr.h **** 
 321:F4_CORE/core_cmInstr.h ****     This function moves each bit of a bitstring right by one bit.
 322:F4_CORE/core_cmInstr.h ****     The carry input is shifted in at the left end of the bitstring.
 323:F4_CORE/core_cmInstr.h **** 
 324:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to rotate
 325:F4_CORE/core_cmInstr.h ****     \return               Rotated value
 326:F4_CORE/core_cmInstr.h ****  */
 327:F4_CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 328:F4_CORE/core_cmInstr.h **** __attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
 329:F4_CORE/core_cmInstr.h **** {
 330:F4_CORE/core_cmInstr.h ****   rrx r0, r0
 331:F4_CORE/core_cmInstr.h ****   bx lr
 332:F4_CORE/core_cmInstr.h **** }
 333:F4_CORE/core_cmInstr.h **** #endif
 334:F4_CORE/core_cmInstr.h **** 
 335:F4_CORE/core_cmInstr.h **** 
 336:F4_CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (8 bit)
 337:F4_CORE/core_cmInstr.h **** 
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccaqBq0S.s 			page 11


 338:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 8 bit value.
 339:F4_CORE/core_cmInstr.h **** 
 340:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 341:F4_CORE/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 342:F4_CORE/core_cmInstr.h ****  */
 343:F4_CORE/core_cmInstr.h **** #define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
 344:F4_CORE/core_cmInstr.h **** 
 345:F4_CORE/core_cmInstr.h **** 
 346:F4_CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (16 bit)
 347:F4_CORE/core_cmInstr.h **** 
 348:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 16 bit values.
 349:F4_CORE/core_cmInstr.h **** 
 350:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 351:F4_CORE/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 352:F4_CORE/core_cmInstr.h ****  */
 353:F4_CORE/core_cmInstr.h **** #define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
 354:F4_CORE/core_cmInstr.h **** 
 355:F4_CORE/core_cmInstr.h **** 
 356:F4_CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (32 bit)
 357:F4_CORE/core_cmInstr.h **** 
 358:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 32 bit values.
 359:F4_CORE/core_cmInstr.h **** 
 360:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 361:F4_CORE/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 362:F4_CORE/core_cmInstr.h ****  */
 363:F4_CORE/core_cmInstr.h **** #define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
 364:F4_CORE/core_cmInstr.h **** 
 365:F4_CORE/core_cmInstr.h **** 
 366:F4_CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (8 bit)
 367:F4_CORE/core_cmInstr.h **** 
 368:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 8 bit values.
 369:F4_CORE/core_cmInstr.h **** 
 370:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 371:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 372:F4_CORE/core_cmInstr.h ****  */
 373:F4_CORE/core_cmInstr.h **** #define __STRBT(value, ptr)               __strt(value, ptr)
 374:F4_CORE/core_cmInstr.h **** 
 375:F4_CORE/core_cmInstr.h **** 
 376:F4_CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (16 bit)
 377:F4_CORE/core_cmInstr.h **** 
 378:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 16 bit values.
 379:F4_CORE/core_cmInstr.h **** 
 380:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 381:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 382:F4_CORE/core_cmInstr.h ****  */
 383:F4_CORE/core_cmInstr.h **** #define __STRHT(value, ptr)               __strt(value, ptr)
 384:F4_CORE/core_cmInstr.h **** 
 385:F4_CORE/core_cmInstr.h **** 
 386:F4_CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (32 bit)
 387:F4_CORE/core_cmInstr.h **** 
 388:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 32 bit values.
 389:F4_CORE/core_cmInstr.h **** 
 390:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 391:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 392:F4_CORE/core_cmInstr.h ****  */
 393:F4_CORE/core_cmInstr.h **** #define __STRT(value, ptr)                __strt(value, ptr)
 394:F4_CORE/core_cmInstr.h **** 
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccaqBq0S.s 			page 12


 395:F4_CORE/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300) */
 396:F4_CORE/core_cmInstr.h **** 
 397:F4_CORE/core_cmInstr.h **** 
 398:F4_CORE/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 399:F4_CORE/core_cmInstr.h **** /* GNU gcc specific functions */
 400:F4_CORE/core_cmInstr.h **** 
 401:F4_CORE/core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 402:F4_CORE/core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 403:F4_CORE/core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 404:F4_CORE/core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 405:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 406:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 407:F4_CORE/core_cmInstr.h **** #else
 408:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 409:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 410:F4_CORE/core_cmInstr.h **** #endif
 411:F4_CORE/core_cmInstr.h **** 
 412:F4_CORE/core_cmInstr.h **** /** \brief  No Operation
 413:F4_CORE/core_cmInstr.h **** 
 414:F4_CORE/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 415:F4_CORE/core_cmInstr.h ****  */
 416:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 417:F4_CORE/core_cmInstr.h **** {
 418:F4_CORE/core_cmInstr.h ****   __ASM volatile ("nop");
 419:F4_CORE/core_cmInstr.h **** }
 420:F4_CORE/core_cmInstr.h **** 
 421:F4_CORE/core_cmInstr.h **** 
 422:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Interrupt
 423:F4_CORE/core_cmInstr.h **** 
 424:F4_CORE/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 425:F4_CORE/core_cmInstr.h ****     until one of a number of events occurs.
 426:F4_CORE/core_cmInstr.h ****  */
 427:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 428:F4_CORE/core_cmInstr.h **** {
 429:F4_CORE/core_cmInstr.h ****   __ASM volatile ("wfi");
 430:F4_CORE/core_cmInstr.h **** }
 431:F4_CORE/core_cmInstr.h **** 
 432:F4_CORE/core_cmInstr.h **** 
 433:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Event
 434:F4_CORE/core_cmInstr.h **** 
 435:F4_CORE/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 436:F4_CORE/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 437:F4_CORE/core_cmInstr.h ****  */
 438:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 439:F4_CORE/core_cmInstr.h **** {
 440:F4_CORE/core_cmInstr.h ****   __ASM volatile ("wfe");
 441:F4_CORE/core_cmInstr.h **** }
 442:F4_CORE/core_cmInstr.h **** 
 443:F4_CORE/core_cmInstr.h **** 
 444:F4_CORE/core_cmInstr.h **** /** \brief  Send Event
 445:F4_CORE/core_cmInstr.h **** 
 446:F4_CORE/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 447:F4_CORE/core_cmInstr.h ****  */
 448:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 449:F4_CORE/core_cmInstr.h **** {
 450:F4_CORE/core_cmInstr.h ****   __ASM volatile ("sev");
 451:F4_CORE/core_cmInstr.h **** }
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccaqBq0S.s 			page 13


 452:F4_CORE/core_cmInstr.h **** 
 453:F4_CORE/core_cmInstr.h **** 
 454:F4_CORE/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 455:F4_CORE/core_cmInstr.h **** 
 456:F4_CORE/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 457:F4_CORE/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 458:F4_CORE/core_cmInstr.h ****     memory, after the instruction has been completed.
 459:F4_CORE/core_cmInstr.h ****  */
 460:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 461:F4_CORE/core_cmInstr.h **** {
 462:F4_CORE/core_cmInstr.h ****   __ASM volatile ("isb 0xF":::"memory");
 463:F4_CORE/core_cmInstr.h **** }
 464:F4_CORE/core_cmInstr.h **** 
 465:F4_CORE/core_cmInstr.h **** 
 466:F4_CORE/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 467:F4_CORE/core_cmInstr.h **** 
 468:F4_CORE/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 469:F4_CORE/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 470:F4_CORE/core_cmInstr.h ****  */
 471:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 472:F4_CORE/core_cmInstr.h **** {
 473:F4_CORE/core_cmInstr.h ****   __ASM volatile ("dsb 0xF":::"memory");
 474:F4_CORE/core_cmInstr.h **** }
 475:F4_CORE/core_cmInstr.h **** 
 476:F4_CORE/core_cmInstr.h **** 
 477:F4_CORE/core_cmInstr.h **** /** \brief  Data Memory Barrier
 478:F4_CORE/core_cmInstr.h **** 
 479:F4_CORE/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 480:F4_CORE/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 481:F4_CORE/core_cmInstr.h ****  */
 482:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 483:F4_CORE/core_cmInstr.h **** {
 484:F4_CORE/core_cmInstr.h ****   __ASM volatile ("dmb 0xF":::"memory");
 485:F4_CORE/core_cmInstr.h **** }
 486:F4_CORE/core_cmInstr.h **** 
 487:F4_CORE/core_cmInstr.h **** 
 488:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 489:F4_CORE/core_cmInstr.h **** 
 490:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in integer value.
 491:F4_CORE/core_cmInstr.h **** 
 492:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 493:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 494:F4_CORE/core_cmInstr.h ****  */
 495:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 105              		.loc 2 495 57 is_stmt 1 view .LVU28
 106              	.LBB15:
 496:F4_CORE/core_cmInstr.h **** {
 497:F4_CORE/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 498:F4_CORE/core_cmInstr.h ****   return __builtin_bswap32(value);
 107              		.loc 2 498 3 view .LVU29
 108              		.loc 2 498 10 is_stmt 0 view .LVU30
 109 0034 1BBA     		rev	r3, r3
 110              	.LVL9:
 111              		.loc 2 498 10 view .LVU31
 112              	.LBE15:
 113              	.LBE14:
 114              		.loc 1 130 43 view .LVU32
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccaqBq0S.s 			page 14


 115 0036 0493     		str	r3, [sp, #16]
 131:FWLIB/src/stm32f4xx_cryp_des.c ****   keyaddr+=4;
 116              		.loc 1 131 3 is_stmt 1 view .LVU33
 117              	.LVL10:
 132:FWLIB/src/stm32f4xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 118              		.loc 1 132 3 view .LVU34
 119              		.loc 1 132 45 is_stmt 0 view .LVU35
 120 0038 6B68     		ldr	r3, [r5, #4]
 121              	.LVL11:
 122              	.LBB16:
 123              	.LBI16:
 495:F4_CORE/core_cmInstr.h **** {
 124              		.loc 2 495 57 is_stmt 1 view .LVU36
 125              	.LBB17:
 126              		.loc 2 498 3 view .LVU37
 127              		.loc 2 498 10 is_stmt 0 view .LVU38
 128 003a 1BBA     		rev	r3, r3
 129              	.LVL12:
 130              		.loc 2 498 10 view .LVU39
 131              	.LBE17:
 132              	.LBE16:
 133              		.loc 1 132 43 view .LVU40
 134 003c 0593     		str	r3, [sp, #20]
 133:FWLIB/src/stm32f4xx_cryp_des.c ****   CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 135              		.loc 1 133 3 is_stmt 1 view .LVU41
 136 003e 02A8     		add	r0, sp, #8
 137 0040 FFF7FEFF 		bl	CRYP_KeyInit
 138              	.LVL13:
 134:FWLIB/src/stm32f4xx_cryp_des.c **** 
 135:FWLIB/src/stm32f4xx_cryp_des.c ****   /* Flush IN/OUT FIFO */
 136:FWLIB/src/stm32f4xx_cryp_des.c ****   CRYP_FIFOFlush();
 139              		.loc 1 136 3 view .LVU42
 140 0044 FFF7FEFF 		bl	CRYP_FIFOFlush
 141              	.LVL14:
 137:FWLIB/src/stm32f4xx_cryp_des.c **** 
 138:FWLIB/src/stm32f4xx_cryp_des.c ****   /* Enable Crypto processor */
 139:FWLIB/src/stm32f4xx_cryp_des.c ****   CRYP_Cmd(ENABLE);
 142              		.loc 1 139 3 view .LVU43
 143 0048 0120     		movs	r0, #1
 144 004a FFF7FEFF 		bl	CRYP_Cmd
 145              	.LVL15:
 140:FWLIB/src/stm32f4xx_cryp_des.c **** 
 141:FWLIB/src/stm32f4xx_cryp_des.c ****   if(CRYP_GetCmdStatus() == DISABLE)
 146              		.loc 1 141 3 view .LVU44
 147              		.loc 1 141 6 is_stmt 0 view .LVU45
 148 004e FFF7FEFF 		bl	CRYP_GetCmdStatus
 149              	.LVL16:
 150              		.loc 1 141 5 view .LVU46
 151 0052 0646     		mov	r6, r0
 152 0054 78B3     		cbz	r0, .L4
 142:FWLIB/src/stm32f4xx_cryp_des.c ****   {
 143:FWLIB/src/stm32f4xx_cryp_des.c ****     /* The CRYP peripheral clock is not enabled or the device doesn't embed 
 144:FWLIB/src/stm32f4xx_cryp_des.c ****     the CRYP peripheral (please check the device sales type. */
 145:FWLIB/src/stm32f4xx_cryp_des.c ****     status = ERROR;
 146:FWLIB/src/stm32f4xx_cryp_des.c ****   }
 147:FWLIB/src/stm32f4xx_cryp_des.c ****   else
 148:FWLIB/src/stm32f4xx_cryp_des.c ****   {
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccaqBq0S.s 			page 15


 149:FWLIB/src/stm32f4xx_cryp_des.c ****     for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 153              		.loc 1 149 10 view .LVU47
 154 0056 0025     		movs	r5, #0
 155              	.LVL17:
 106:FWLIB/src/stm32f4xx_cryp_des.c ****   uint32_t keyaddr    = (uint32_t)Key;
 156              		.loc 1 106 15 view .LVU48
 157 0058 0126     		movs	r6, #1
 158 005a 05E0     		b	.L5
 159              	.LVL18:
 160              	.L13:
 118:FWLIB/src/stm32f4xx_cryp_des.c ****   }
 161              		.loc 1 118 6 is_stmt 1 view .LVU49
 118:FWLIB/src/stm32f4xx_cryp_des.c ****   }
 162              		.loc 1 118 43 is_stmt 0 view .LVU50
 163 005c 0023     		movs	r3, #0
 164 005e 0A93     		str	r3, [sp, #40]
 165 0060 E0E7     		b	.L3
 166              	.LVL19:
 167              	.L6:
 150:FWLIB/src/stm32f4xx_cryp_des.c ****     {
 151:FWLIB/src/stm32f4xx_cryp_des.c ****       
 152:FWLIB/src/stm32f4xx_cryp_des.c ****       /* Write the Input block in the Input FIFO */
 153:FWLIB/src/stm32f4xx_cryp_des.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 154:FWLIB/src/stm32f4xx_cryp_des.c ****       inputaddr+=4;
 155:FWLIB/src/stm32f4xx_cryp_des.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 156:FWLIB/src/stm32f4xx_cryp_des.c ****       inputaddr+=4;
 157:FWLIB/src/stm32f4xx_cryp_des.c ****       
 158:FWLIB/src/stm32f4xx_cryp_des.c ****       /* Wait until the complete message has been processed */
 159:FWLIB/src/stm32f4xx_cryp_des.c ****       counter = 0;
 160:FWLIB/src/stm32f4xx_cryp_des.c ****       do
 161:FWLIB/src/stm32f4xx_cryp_des.c ****       {
 162:FWLIB/src/stm32f4xx_cryp_des.c ****         busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 163:FWLIB/src/stm32f4xx_cryp_des.c ****         counter++;
 164:FWLIB/src/stm32f4xx_cryp_des.c ****       }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 165:FWLIB/src/stm32f4xx_cryp_des.c ****       
 166:FWLIB/src/stm32f4xx_cryp_des.c ****       if (busystatus != RESET)
 168              		.loc 1 166 7 is_stmt 1 view .LVU51
 169              		.loc 1 166 10 is_stmt 0 view .LVU52
 170 0062 D0B1     		cbz	r0, .L14
 167:FWLIB/src/stm32f4xx_cryp_des.c ****       {
 168:FWLIB/src/stm32f4xx_cryp_des.c ****         status = ERROR;
 171              		.loc 1 168 16 view .LVU53
 172 0064 0026     		movs	r6, #0
 173              	.LVL20:
 174              	.L8:
 149:FWLIB/src/stm32f4xx_cryp_des.c ****     {
 175              		.loc 1 149 50 is_stmt 1 discriminator 2 view .LVU54
 149:FWLIB/src/stm32f4xx_cryp_des.c ****     {
 176              		.loc 1 149 51 is_stmt 0 discriminator 2 view .LVU55
 177 0066 0835     		adds	r5, r5, #8
 178              	.LVL21:
 179              	.L5:
 149:FWLIB/src/stm32f4xx_cryp_des.c ****     {
 180              		.loc 1 149 14 is_stmt 1 discriminator 1 view .LVU56
 149:FWLIB/src/stm32f4xx_cryp_des.c ****     {
 181              		.loc 1 149 5 is_stmt 0 discriminator 1 view .LVU57
 182 0068 BD42     		cmp	r5, r7
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccaqBq0S.s 			page 16


 183 006a 21D2     		bcs	.L9
 149:FWLIB/src/stm32f4xx_cryp_des.c ****     {
 184              		.loc 1 149 27 discriminator 3 view .LVU58
 185 006c 06B3     		cbz	r6, .L9
 153:FWLIB/src/stm32f4xx_cryp_des.c ****       inputaddr+=4;
 186              		.loc 1 153 7 is_stmt 1 view .LVU59
 187 006e 2068     		ldr	r0, [r4]
 188 0070 FFF7FEFF 		bl	CRYP_DataIn
 189              	.LVL22:
 154:FWLIB/src/stm32f4xx_cryp_des.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 190              		.loc 1 154 7 view .LVU60
 155:FWLIB/src/stm32f4xx_cryp_des.c ****       inputaddr+=4;
 191              		.loc 1 155 7 view .LVU61
 192 0074 6068     		ldr	r0, [r4, #4]
 193 0076 FFF7FEFF 		bl	CRYP_DataIn
 194              	.LVL23:
 156:FWLIB/src/stm32f4xx_cryp_des.c ****       
 195              		.loc 1 156 7 view .LVU62
 156:FWLIB/src/stm32f4xx_cryp_des.c ****       
 196              		.loc 1 156 16 is_stmt 0 view .LVU63
 197 007a 0834     		adds	r4, r4, #8
 198              	.LVL24:
 159:FWLIB/src/stm32f4xx_cryp_des.c ****       do
 199              		.loc 1 159 7 is_stmt 1 view .LVU64
 159:FWLIB/src/stm32f4xx_cryp_des.c ****       do
 200              		.loc 1 159 15 is_stmt 0 view .LVU65
 201 007c 0023     		movs	r3, #0
 202 007e 0193     		str	r3, [sp, #4]
 203              	.L7:
 160:FWLIB/src/stm32f4xx_cryp_des.c ****       {
 204              		.loc 1 160 7 is_stmt 1 discriminator 2 view .LVU66
 162:FWLIB/src/stm32f4xx_cryp_des.c ****         counter++;
 205              		.loc 1 162 9 discriminator 2 view .LVU67
 162:FWLIB/src/stm32f4xx_cryp_des.c ****         counter++;
 206              		.loc 1 162 22 is_stmt 0 discriminator 2 view .LVU68
 207 0080 1020     		movs	r0, #16
 208 0082 FFF7FEFF 		bl	CRYP_GetFlagStatus
 209              	.LVL25:
 163:FWLIB/src/stm32f4xx_cryp_des.c ****       }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 210              		.loc 1 163 9 is_stmt 1 discriminator 2 view .LVU69
 163:FWLIB/src/stm32f4xx_cryp_des.c ****       }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 211              		.loc 1 163 16 is_stmt 0 discriminator 2 view .LVU70
 212 0086 0199     		ldr	r1, [sp, #4]
 213 0088 0131     		adds	r1, r1, #1
 214 008a 0191     		str	r1, [sp, #4]
 164:FWLIB/src/stm32f4xx_cryp_des.c ****       
 215              		.loc 1 164 14 is_stmt 1 discriminator 2 view .LVU71
 164:FWLIB/src/stm32f4xx_cryp_des.c ****       
 216              		.loc 1 164 24 is_stmt 0 discriminator 2 view .LVU72
 217 008c 019B     		ldr	r3, [sp, #4]
 164:FWLIB/src/stm32f4xx_cryp_des.c ****       
 218              		.loc 1 164 7 discriminator 2 view .LVU73
 219 008e B3F5803F 		cmp	r3, #65536
 220 0092 E6D0     		beq	.L6
 164:FWLIB/src/stm32f4xx_cryp_des.c ****       
 221              		.loc 1 164 44 discriminator 1 view .LVU74
 222 0094 0028     		cmp	r0, #0
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccaqBq0S.s 			page 17


 223 0096 F3D1     		bne	.L7
 224 0098 E3E7     		b	.L6
 225              	.L14:
 169:FWLIB/src/stm32f4xx_cryp_des.c ****       }
 170:FWLIB/src/stm32f4xx_cryp_des.c ****       else
 171:FWLIB/src/stm32f4xx_cryp_des.c ****       {
 172:FWLIB/src/stm32f4xx_cryp_des.c ****         
 173:FWLIB/src/stm32f4xx_cryp_des.c ****         /* Read the Output block from the Output FIFO */
 174:FWLIB/src/stm32f4xx_cryp_des.c ****         *(uint32_t*)(outputaddr) = CRYP_DataOut();
 226              		.loc 1 174 9 is_stmt 1 view .LVU75
 227              		.loc 1 174 36 is_stmt 0 view .LVU76
 228 009a FFF7FEFF 		bl	CRYP_DataOut
 229              	.LVL26:
 230              		.loc 1 174 34 view .LVU77
 231 009e C8F80000 		str	r0, [r8]
 175:FWLIB/src/stm32f4xx_cryp_des.c ****         outputaddr+=4;
 232              		.loc 1 175 9 is_stmt 1 view .LVU78
 233              	.LVL27:
 176:FWLIB/src/stm32f4xx_cryp_des.c ****         *(uint32_t*)(outputaddr) = CRYP_DataOut();
 234              		.loc 1 176 9 view .LVU79
 235              		.loc 1 176 36 is_stmt 0 view .LVU80
 236 00a2 FFF7FEFF 		bl	CRYP_DataOut
 237              	.LVL28:
 238              		.loc 1 176 34 view .LVU81
 239 00a6 C8F80400 		str	r0, [r8, #4]
 177:FWLIB/src/stm32f4xx_cryp_des.c ****         outputaddr+=4;
 240              		.loc 1 177 9 is_stmt 1 view .LVU82
 241              		.loc 1 177 19 is_stmt 0 view .LVU83
 242 00aa 08F10808 		add	r8, r8, #8
 243              	.LVL29:
 244              		.loc 1 177 19 view .LVU84
 245 00ae DAE7     		b	.L8
 246              	.L9:
 178:FWLIB/src/stm32f4xx_cryp_des.c ****       }
 179:FWLIB/src/stm32f4xx_cryp_des.c ****     }
 180:FWLIB/src/stm32f4xx_cryp_des.c ****     
 181:FWLIB/src/stm32f4xx_cryp_des.c ****     /* Disable Crypto */
 182:FWLIB/src/stm32f4xx_cryp_des.c ****     CRYP_Cmd(DISABLE);
 247              		.loc 1 182 5 is_stmt 1 view .LVU85
 248 00b0 0020     		movs	r0, #0
 249 00b2 FFF7FEFF 		bl	CRYP_Cmd
 250              	.LVL30:
 251              	.L4:
 183:FWLIB/src/stm32f4xx_cryp_des.c ****   }
 184:FWLIB/src/stm32f4xx_cryp_des.c ****   return status; 
 252              		.loc 1 184 3 view .LVU86
 185:FWLIB/src/stm32f4xx_cryp_des.c **** }
 253              		.loc 1 185 1 is_stmt 0 view .LVU87
 254 00b6 3046     		mov	r0, r6
 255 00b8 0EB0     		add	sp, sp, #56
 256              	.LCFI2:
 257              		.cfi_def_cfa_offset 24
 258              		@ sp needed
 259 00ba BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 260              		.loc 1 185 1 view .LVU88
 261              		.cfi_endproc
 262              	.LFE123:
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccaqBq0S.s 			page 18


 264              		.section	.text.CRYP_DES_CBC,"ax",%progbits
 265              		.align	1
 266              		.global	CRYP_DES_CBC
 267              		.syntax unified
 268              		.thumb
 269              		.thumb_func
 270              		.fpu fpv4-sp-d16
 272              	CRYP_DES_CBC:
 273              	.LVL31:
 274              	.LFB124:
 186:FWLIB/src/stm32f4xx_cryp_des.c **** 
 187:FWLIB/src/stm32f4xx_cryp_des.c **** /**
 188:FWLIB/src/stm32f4xx_cryp_des.c ****   * @brief  Encrypt and decrypt using DES in CBC Mode
 189:FWLIB/src/stm32f4xx_cryp_des.c ****   * @param  Mode: encryption or decryption Mode.
 190:FWLIB/src/stm32f4xx_cryp_des.c ****   *          This parameter can be one of the following values:
 191:FWLIB/src/stm32f4xx_cryp_des.c ****   *            @arg MODE_ENCRYPT: Encryption
 192:FWLIB/src/stm32f4xx_cryp_des.c ****   *            @arg MODE_DECRYPT: Decryption
 193:FWLIB/src/stm32f4xx_cryp_des.c ****   * @param  Key: Key used for DES algorithm.
 194:FWLIB/src/stm32f4xx_cryp_des.c ****   * @param  InitVectors: Initialisation Vectors used for DES algorithm.
 195:FWLIB/src/stm32f4xx_cryp_des.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 8.
 196:FWLIB/src/stm32f4xx_cryp_des.c ****   * @param  Input: pointer to the Input buffer.
 197:FWLIB/src/stm32f4xx_cryp_des.c ****   * @param  Output: pointer to the returned buffer.
 198:FWLIB/src/stm32f4xx_cryp_des.c ****   * @retval An ErrorStatus enumeration value:
 199:FWLIB/src/stm32f4xx_cryp_des.c ****   *          - SUCCESS: Operation done
 200:FWLIB/src/stm32f4xx_cryp_des.c ****   *          - ERROR: Operation failed
 201:FWLIB/src/stm32f4xx_cryp_des.c ****   */
 202:FWLIB/src/stm32f4xx_cryp_des.c **** ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
 203:FWLIB/src/stm32f4xx_cryp_des.c ****                          uint8_t *Input, uint32_t Ilength, uint8_t *Output)
 204:FWLIB/src/stm32f4xx_cryp_des.c **** {
 275              		.loc 1 204 1 is_stmt 1 view -0
 276              		.cfi_startproc
 277              		@ args = 8, pretend = 0, frame = 72
 278              		@ frame_needed = 0, uses_anonymous_args = 0
 279              		.loc 1 204 1 is_stmt 0 view .LVU90
 280 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 281              	.LCFI3:
 282              		.cfi_def_cfa_offset 28
 283              		.cfi_offset 4, -28
 284              		.cfi_offset 5, -24
 285              		.cfi_offset 6, -20
 286              		.cfi_offset 7, -16
 287              		.cfi_offset 8, -12
 288              		.cfi_offset 9, -8
 289              		.cfi_offset 14, -4
 290 0004 93B0     		sub	sp, sp, #76
 291              	.LCFI4:
 292              		.cfi_def_cfa_offset 104
 293 0006 8146     		mov	r9, r0
 294 0008 0E46     		mov	r6, r1
 295 000a 1546     		mov	r5, r2
 296 000c DDF86880 		ldr	r8, [sp, #104]
 205:FWLIB/src/stm32f4xx_cryp_des.c ****   CRYP_InitTypeDef DES_CRYP_InitStructure;
 297              		.loc 1 205 3 is_stmt 1 view .LVU91
 206:FWLIB/src/stm32f4xx_cryp_des.c ****   CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
 298              		.loc 1 206 3 view .LVU92
 207:FWLIB/src/stm32f4xx_cryp_des.c ****   CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
 299              		.loc 1 207 3 view .LVU93
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccaqBq0S.s 			page 19


 208:FWLIB/src/stm32f4xx_cryp_des.c ****   __IO uint32_t counter = 0;
 300              		.loc 1 208 3 view .LVU94
 301              		.loc 1 208 17 is_stmt 0 view .LVU95
 302 0010 0022     		movs	r2, #0
 303              	.LVL32:
 304              		.loc 1 208 17 view .LVU96
 305 0012 0192     		str	r2, [sp, #4]
 209:FWLIB/src/stm32f4xx_cryp_des.c ****   uint32_t busystatus = 0;
 306              		.loc 1 209 3 is_stmt 1 view .LVU97
 307              	.LVL33:
 210:FWLIB/src/stm32f4xx_cryp_des.c ****   ErrorStatus status = SUCCESS;
 308              		.loc 1 210 3 view .LVU98
 211:FWLIB/src/stm32f4xx_cryp_des.c ****   uint32_t keyaddr    = (uint32_t)Key;
 309              		.loc 1 211 3 view .LVU99
 212:FWLIB/src/stm32f4xx_cryp_des.c ****   uint32_t inputaddr  = (uint32_t)Input;
 310              		.loc 1 212 3 view .LVU100
 311              		.loc 1 212 12 is_stmt 0 view .LVU101
 312 0014 1C46     		mov	r4, r3
 313              	.LVL34:
 213:FWLIB/src/stm32f4xx_cryp_des.c ****   uint32_t outputaddr = (uint32_t)Output;
 314              		.loc 1 213 3 is_stmt 1 view .LVU102
 315              		.loc 1 213 12 is_stmt 0 view .LVU103
 316 0016 1B9F     		ldr	r7, [sp, #108]
 317              	.LVL35:
 214:FWLIB/src/stm32f4xx_cryp_des.c ****   uint32_t ivaddr     = (uint32_t)InitVectors;
 318              		.loc 1 214 3 is_stmt 1 view .LVU104
 215:FWLIB/src/stm32f4xx_cryp_des.c ****   uint32_t i = 0;
 319              		.loc 1 215 3 view .LVU105
 216:FWLIB/src/stm32f4xx_cryp_des.c **** 
 217:FWLIB/src/stm32f4xx_cryp_des.c ****   /* Crypto structures initialisation*/
 218:FWLIB/src/stm32f4xx_cryp_des.c ****   CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 320              		.loc 1 218 3 view .LVU106
 321 0018 06A8     		add	r0, sp, #24
 322              	.LVL36:
 323              		.loc 1 218 3 is_stmt 0 view .LVU107
 324 001a FFF7FEFF 		bl	CRYP_KeyStructInit
 325              	.LVL37:
 219:FWLIB/src/stm32f4xx_cryp_des.c **** 
 220:FWLIB/src/stm32f4xx_cryp_des.c ****   /* Crypto Init for Encryption process */
 221:FWLIB/src/stm32f4xx_cryp_des.c ****   if(Mode == MODE_ENCRYPT) /* DES encryption */
 326              		.loc 1 221 3 is_stmt 1 view .LVU108
 327              		.loc 1 221 5 is_stmt 0 view .LVU109
 328 001e B9F1010F 		cmp	r9, #1
 329 0022 26D0     		beq	.L27
 222:FWLIB/src/stm32f4xx_cryp_des.c ****   {
 223:FWLIB/src/stm32f4xx_cryp_des.c ****      DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 224:FWLIB/src/stm32f4xx_cryp_des.c ****   }
 225:FWLIB/src/stm32f4xx_cryp_des.c ****   else /*if(Mode == MODE_DECRYPT)*/ /* DES decryption */
 226:FWLIB/src/stm32f4xx_cryp_des.c ****   {
 227:FWLIB/src/stm32f4xx_cryp_des.c ****      DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 330              		.loc 1 227 6 is_stmt 1 view .LVU110
 331              		.loc 1 227 43 is_stmt 0 view .LVU111
 332 0024 0423     		movs	r3, #4
 333 0026 0E93     		str	r3, [sp, #56]
 334              	.L17:
 228:FWLIB/src/stm32f4xx_cryp_des.c ****   }
 229:FWLIB/src/stm32f4xx_cryp_des.c **** 
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccaqBq0S.s 			page 20


 230:FWLIB/src/stm32f4xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
 335              		.loc 1 230 3 is_stmt 1 view .LVU112
 336              		.loc 1 230 40 is_stmt 0 view .LVU113
 337 0028 1823     		movs	r3, #24
 338 002a 0F93     		str	r3, [sp, #60]
 231:FWLIB/src/stm32f4xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 339              		.loc 1 231 3 is_stmt 1 view .LVU114
 340              		.loc 1 231 40 is_stmt 0 view .LVU115
 341 002c 8023     		movs	r3, #128
 342 002e 1093     		str	r3, [sp, #64]
 232:FWLIB/src/stm32f4xx_cryp_des.c ****   CRYP_Init(&DES_CRYP_InitStructure);
 343              		.loc 1 232 3 is_stmt 1 view .LVU116
 344 0030 0EA8     		add	r0, sp, #56
 345 0032 FFF7FEFF 		bl	CRYP_Init
 346              	.LVL38:
 233:FWLIB/src/stm32f4xx_cryp_des.c **** 
 234:FWLIB/src/stm32f4xx_cryp_des.c ****   /* Key Initialisation */
 235:FWLIB/src/stm32f4xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 347              		.loc 1 235 3 view .LVU117
 348              		.loc 1 235 45 is_stmt 0 view .LVU118
 349 0036 3368     		ldr	r3, [r6]
 350              	.LVL39:
 351              	.LBB18:
 352              	.LBI18:
 495:F4_CORE/core_cmInstr.h **** {
 353              		.loc 2 495 57 is_stmt 1 view .LVU119
 354              	.LBB19:
 355              		.loc 2 498 3 view .LVU120
 356              		.loc 2 498 10 is_stmt 0 view .LVU121
 357 0038 1BBA     		rev	r3, r3
 358              	.LVL40:
 359              		.loc 2 498 10 view .LVU122
 360              	.LBE19:
 361              	.LBE18:
 362              		.loc 1 235 43 view .LVU123
 363 003a 0893     		str	r3, [sp, #32]
 236:FWLIB/src/stm32f4xx_cryp_des.c ****   keyaddr+=4;
 364              		.loc 1 236 3 is_stmt 1 view .LVU124
 365              	.LVL41:
 237:FWLIB/src/stm32f4xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 366              		.loc 1 237 3 view .LVU125
 367              		.loc 1 237 45 is_stmt 0 view .LVU126
 368 003c 7368     		ldr	r3, [r6, #4]
 369              	.LVL42:
 370              	.LBB20:
 371              	.LBI20:
 495:F4_CORE/core_cmInstr.h **** {
 372              		.loc 2 495 57 is_stmt 1 view .LVU127
 373              	.LBB21:
 374              		.loc 2 498 3 view .LVU128
 375              		.loc 2 498 10 is_stmt 0 view .LVU129
 376 003e 1BBA     		rev	r3, r3
 377              	.LVL43:
 378              		.loc 2 498 10 view .LVU130
 379              	.LBE21:
 380              	.LBE20:
 381              		.loc 1 237 43 view .LVU131
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccaqBq0S.s 			page 21


 382 0040 0993     		str	r3, [sp, #36]
 238:FWLIB/src/stm32f4xx_cryp_des.c ****   CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 383              		.loc 1 238 3 is_stmt 1 view .LVU132
 384 0042 06A8     		add	r0, sp, #24
 385 0044 FFF7FEFF 		bl	CRYP_KeyInit
 386              	.LVL44:
 239:FWLIB/src/stm32f4xx_cryp_des.c **** 
 240:FWLIB/src/stm32f4xx_cryp_des.c ****   /* Initialization Vectors */
 241:FWLIB/src/stm32f4xx_cryp_des.c ****   DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 387              		.loc 1 241 3 view .LVU133
 388              		.loc 1 241 43 is_stmt 0 view .LVU134
 389 0048 2B68     		ldr	r3, [r5]
 390              	.LVL45:
 391              	.LBB22:
 392              	.LBI22:
 495:F4_CORE/core_cmInstr.h **** {
 393              		.loc 2 495 57 is_stmt 1 view .LVU135
 394              	.LBB23:
 395              		.loc 2 498 3 view .LVU136
 396              		.loc 2 498 10 is_stmt 0 view .LVU137
 397 004a 1BBA     		rev	r3, r3
 398              	.LVL46:
 399              		.loc 2 498 10 view .LVU138
 400              	.LBE23:
 401              	.LBE22:
 402              		.loc 1 241 41 view .LVU139
 403 004c 0293     		str	r3, [sp, #8]
 242:FWLIB/src/stm32f4xx_cryp_des.c ****   ivaddr+=4;
 404              		.loc 1 242 3 is_stmt 1 view .LVU140
 405              	.LVL47:
 243:FWLIB/src/stm32f4xx_cryp_des.c ****   DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 406              		.loc 1 243 3 view .LVU141
 407              		.loc 1 243 43 is_stmt 0 view .LVU142
 408 004e 6B68     		ldr	r3, [r5, #4]
 409              	.LVL48:
 410              	.LBB24:
 411              	.LBI24:
 495:F4_CORE/core_cmInstr.h **** {
 412              		.loc 2 495 57 is_stmt 1 view .LVU143
 413              	.LBB25:
 414              		.loc 2 498 3 view .LVU144
 415              		.loc 2 498 10 is_stmt 0 view .LVU145
 416 0050 1BBA     		rev	r3, r3
 417              	.LVL49:
 418              		.loc 2 498 10 view .LVU146
 419              	.LBE25:
 420              	.LBE24:
 421              		.loc 1 243 41 view .LVU147
 422 0052 0393     		str	r3, [sp, #12]
 244:FWLIB/src/stm32f4xx_cryp_des.c ****   CRYP_IVInit(&DES_CRYP_IVInitStructure);
 423              		.loc 1 244 3 is_stmt 1 view .LVU148
 424 0054 02A8     		add	r0, sp, #8
 425 0056 FFF7FEFF 		bl	CRYP_IVInit
 426              	.LVL50:
 245:FWLIB/src/stm32f4xx_cryp_des.c **** 
 246:FWLIB/src/stm32f4xx_cryp_des.c ****   /* Flush IN/OUT FIFO */
 247:FWLIB/src/stm32f4xx_cryp_des.c ****   CRYP_FIFOFlush();
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccaqBq0S.s 			page 22


 427              		.loc 1 247 3 view .LVU149
 428 005a FFF7FEFF 		bl	CRYP_FIFOFlush
 429              	.LVL51:
 248:FWLIB/src/stm32f4xx_cryp_des.c ****   
 249:FWLIB/src/stm32f4xx_cryp_des.c ****   /* Enable Crypto processor */
 250:FWLIB/src/stm32f4xx_cryp_des.c ****   CRYP_Cmd(ENABLE);
 430              		.loc 1 250 3 view .LVU150
 431 005e 0120     		movs	r0, #1
 432 0060 FFF7FEFF 		bl	CRYP_Cmd
 433              	.LVL52:
 251:FWLIB/src/stm32f4xx_cryp_des.c **** 
 252:FWLIB/src/stm32f4xx_cryp_des.c ****   if(CRYP_GetCmdStatus() == DISABLE)
 434              		.loc 1 252 3 view .LVU151
 435              		.loc 1 252 6 is_stmt 0 view .LVU152
 436 0064 FFF7FEFF 		bl	CRYP_GetCmdStatus
 437              	.LVL53:
 438              		.loc 1 252 5 view .LVU153
 439 0068 0646     		mov	r6, r0
 440              	.LVL54:
 441              		.loc 1 252 5 view .LVU154
 442 006a 60B3     		cbz	r0, .L18
 253:FWLIB/src/stm32f4xx_cryp_des.c ****   {
 254:FWLIB/src/stm32f4xx_cryp_des.c ****     /* The CRYP peripheral clock is not enabled or the device doesn't embed 
 255:FWLIB/src/stm32f4xx_cryp_des.c ****     the CRYP peripheral (please check the device sales type. */
 256:FWLIB/src/stm32f4xx_cryp_des.c ****     status = ERROR;
 257:FWLIB/src/stm32f4xx_cryp_des.c ****   }
 258:FWLIB/src/stm32f4xx_cryp_des.c ****   else
 259:FWLIB/src/stm32f4xx_cryp_des.c ****   {
 260:FWLIB/src/stm32f4xx_cryp_des.c ****     for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 443              		.loc 1 260 10 view .LVU155
 444 006c 0025     		movs	r5, #0
 445              	.LVL55:
 210:FWLIB/src/stm32f4xx_cryp_des.c ****   uint32_t keyaddr    = (uint32_t)Key;
 446              		.loc 1 210 15 view .LVU156
 447 006e 0126     		movs	r6, #1
 448 0070 05E0     		b	.L19
 449              	.LVL56:
 450              	.L27:
 223:FWLIB/src/stm32f4xx_cryp_des.c ****   }
 451              		.loc 1 223 6 is_stmt 1 view .LVU157
 223:FWLIB/src/stm32f4xx_cryp_des.c ****   }
 452              		.loc 1 223 43 is_stmt 0 view .LVU158
 453 0072 0023     		movs	r3, #0
 454 0074 0E93     		str	r3, [sp, #56]
 455 0076 D7E7     		b	.L17
 456              	.LVL57:
 457              	.L20:
 261:FWLIB/src/stm32f4xx_cryp_des.c ****     {
 262:FWLIB/src/stm32f4xx_cryp_des.c ****       /* Write the Input block in the Input FIFO */
 263:FWLIB/src/stm32f4xx_cryp_des.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 264:FWLIB/src/stm32f4xx_cryp_des.c ****       inputaddr+=4;
 265:FWLIB/src/stm32f4xx_cryp_des.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 266:FWLIB/src/stm32f4xx_cryp_des.c ****       inputaddr+=4;
 267:FWLIB/src/stm32f4xx_cryp_des.c ****       
 268:FWLIB/src/stm32f4xx_cryp_des.c ****       /* Wait until the complete message has been processed */
 269:FWLIB/src/stm32f4xx_cryp_des.c ****       counter = 0;
 270:FWLIB/src/stm32f4xx_cryp_des.c ****       do
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccaqBq0S.s 			page 23


 271:FWLIB/src/stm32f4xx_cryp_des.c ****       {
 272:FWLIB/src/stm32f4xx_cryp_des.c ****         busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 273:FWLIB/src/stm32f4xx_cryp_des.c ****         counter++;
 274:FWLIB/src/stm32f4xx_cryp_des.c ****       }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 275:FWLIB/src/stm32f4xx_cryp_des.c ****       
 276:FWLIB/src/stm32f4xx_cryp_des.c ****       if (busystatus != RESET)
 458              		.loc 1 276 7 is_stmt 1 view .LVU159
 459              		.loc 1 276 10 is_stmt 0 view .LVU160
 460 0078 D0B1     		cbz	r0, .L28
 277:FWLIB/src/stm32f4xx_cryp_des.c ****       {
 278:FWLIB/src/stm32f4xx_cryp_des.c ****         status = ERROR;
 461              		.loc 1 278 16 view .LVU161
 462 007a 0026     		movs	r6, #0
 463              	.LVL58:
 464              	.L22:
 260:FWLIB/src/stm32f4xx_cryp_des.c ****     {
 465              		.loc 1 260 50 is_stmt 1 discriminator 2 view .LVU162
 260:FWLIB/src/stm32f4xx_cryp_des.c ****     {
 466              		.loc 1 260 51 is_stmt 0 discriminator 2 view .LVU163
 467 007c 0835     		adds	r5, r5, #8
 468              	.LVL59:
 469              	.L19:
 260:FWLIB/src/stm32f4xx_cryp_des.c ****     {
 470              		.loc 1 260 14 is_stmt 1 discriminator 1 view .LVU164
 260:FWLIB/src/stm32f4xx_cryp_des.c ****     {
 471              		.loc 1 260 5 is_stmt 0 discriminator 1 view .LVU165
 472 007e 4545     		cmp	r5, r8
 473 0080 1ED2     		bcs	.L23
 260:FWLIB/src/stm32f4xx_cryp_des.c ****     {
 474              		.loc 1 260 27 discriminator 3 view .LVU166
 475 0082 EEB1     		cbz	r6, .L23
 263:FWLIB/src/stm32f4xx_cryp_des.c ****       inputaddr+=4;
 476              		.loc 1 263 7 is_stmt 1 view .LVU167
 477 0084 2068     		ldr	r0, [r4]
 478 0086 FFF7FEFF 		bl	CRYP_DataIn
 479              	.LVL60:
 264:FWLIB/src/stm32f4xx_cryp_des.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 480              		.loc 1 264 7 view .LVU168
 265:FWLIB/src/stm32f4xx_cryp_des.c ****       inputaddr+=4;
 481              		.loc 1 265 7 view .LVU169
 482 008a 6068     		ldr	r0, [r4, #4]
 483 008c FFF7FEFF 		bl	CRYP_DataIn
 484              	.LVL61:
 266:FWLIB/src/stm32f4xx_cryp_des.c ****       
 485              		.loc 1 266 7 view .LVU170
 266:FWLIB/src/stm32f4xx_cryp_des.c ****       
 486              		.loc 1 266 16 is_stmt 0 view .LVU171
 487 0090 0834     		adds	r4, r4, #8
 488              	.LVL62:
 269:FWLIB/src/stm32f4xx_cryp_des.c ****       do
 489              		.loc 1 269 7 is_stmt 1 view .LVU172
 269:FWLIB/src/stm32f4xx_cryp_des.c ****       do
 490              		.loc 1 269 15 is_stmt 0 view .LVU173
 491 0092 0023     		movs	r3, #0
 492 0094 0193     		str	r3, [sp, #4]
 493              	.L21:
 270:FWLIB/src/stm32f4xx_cryp_des.c ****       {
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccaqBq0S.s 			page 24


 494              		.loc 1 270 7 is_stmt 1 discriminator 2 view .LVU174
 272:FWLIB/src/stm32f4xx_cryp_des.c ****         counter++;
 495              		.loc 1 272 9 discriminator 2 view .LVU175
 272:FWLIB/src/stm32f4xx_cryp_des.c ****         counter++;
 496              		.loc 1 272 22 is_stmt 0 discriminator 2 view .LVU176
 497 0096 1020     		movs	r0, #16
 498 0098 FFF7FEFF 		bl	CRYP_GetFlagStatus
 499              	.LVL63:
 273:FWLIB/src/stm32f4xx_cryp_des.c ****       }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 500              		.loc 1 273 9 is_stmt 1 discriminator 2 view .LVU177
 273:FWLIB/src/stm32f4xx_cryp_des.c ****       }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 501              		.loc 1 273 16 is_stmt 0 discriminator 2 view .LVU178
 502 009c 019A     		ldr	r2, [sp, #4]
 503 009e 0132     		adds	r2, r2, #1
 504 00a0 0192     		str	r2, [sp, #4]
 274:FWLIB/src/stm32f4xx_cryp_des.c ****       
 505              		.loc 1 274 14 is_stmt 1 discriminator 2 view .LVU179
 274:FWLIB/src/stm32f4xx_cryp_des.c ****       
 506              		.loc 1 274 24 is_stmt 0 discriminator 2 view .LVU180
 507 00a2 019B     		ldr	r3, [sp, #4]
 274:FWLIB/src/stm32f4xx_cryp_des.c ****       
 508              		.loc 1 274 7 discriminator 2 view .LVU181
 509 00a4 B3F5803F 		cmp	r3, #65536
 510 00a8 E6D0     		beq	.L20
 274:FWLIB/src/stm32f4xx_cryp_des.c ****       
 511              		.loc 1 274 44 discriminator 1 view .LVU182
 512 00aa 0028     		cmp	r0, #0
 513 00ac F3D1     		bne	.L21
 514 00ae E3E7     		b	.L20
 515              	.L28:
 279:FWLIB/src/stm32f4xx_cryp_des.c ****       }
 280:FWLIB/src/stm32f4xx_cryp_des.c ****       else
 281:FWLIB/src/stm32f4xx_cryp_des.c ****       {
 282:FWLIB/src/stm32f4xx_cryp_des.c ****         /* Read the Output block from the Output FIFO */
 283:FWLIB/src/stm32f4xx_cryp_des.c ****         *(uint32_t*)(outputaddr) = CRYP_DataOut();
 516              		.loc 1 283 9 is_stmt 1 view .LVU183
 517              		.loc 1 283 36 is_stmt 0 view .LVU184
 518 00b0 FFF7FEFF 		bl	CRYP_DataOut
 519              	.LVL64:
 520              		.loc 1 283 34 view .LVU185
 521 00b4 3860     		str	r0, [r7]
 284:FWLIB/src/stm32f4xx_cryp_des.c ****         outputaddr+=4;
 522              		.loc 1 284 9 is_stmt 1 view .LVU186
 523              	.LVL65:
 285:FWLIB/src/stm32f4xx_cryp_des.c ****         *(uint32_t*)(outputaddr) = CRYP_DataOut();
 524              		.loc 1 285 9 view .LVU187
 525              		.loc 1 285 36 is_stmt 0 view .LVU188
 526 00b6 FFF7FEFF 		bl	CRYP_DataOut
 527              	.LVL66:
 528              		.loc 1 285 34 view .LVU189
 529 00ba 7860     		str	r0, [r7, #4]
 286:FWLIB/src/stm32f4xx_cryp_des.c ****         outputaddr+=4;
 530              		.loc 1 286 9 is_stmt 1 view .LVU190
 531              		.loc 1 286 19 is_stmt 0 view .LVU191
 532 00bc 0837     		adds	r7, r7, #8
 533              	.LVL67:
 534              		.loc 1 286 19 view .LVU192
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccaqBq0S.s 			page 25


 535 00be DDE7     		b	.L22
 536              	.L23:
 287:FWLIB/src/stm32f4xx_cryp_des.c ****       }
 288:FWLIB/src/stm32f4xx_cryp_des.c ****     }
 289:FWLIB/src/stm32f4xx_cryp_des.c ****     
 290:FWLIB/src/stm32f4xx_cryp_des.c ****     /* Disable Crypto */
 291:FWLIB/src/stm32f4xx_cryp_des.c ****     CRYP_Cmd(DISABLE);
 537              		.loc 1 291 5 is_stmt 1 view .LVU193
 538 00c0 0020     		movs	r0, #0
 539 00c2 FFF7FEFF 		bl	CRYP_Cmd
 540              	.LVL68:
 541              	.L18:
 292:FWLIB/src/stm32f4xx_cryp_des.c ****   }
 293:FWLIB/src/stm32f4xx_cryp_des.c ****   return status; 
 542              		.loc 1 293 3 view .LVU194
 294:FWLIB/src/stm32f4xx_cryp_des.c **** }
 543              		.loc 1 294 1 is_stmt 0 view .LVU195
 544 00c6 3046     		mov	r0, r6
 545 00c8 13B0     		add	sp, sp, #76
 546              	.LCFI5:
 547              		.cfi_def_cfa_offset 28
 548              		@ sp needed
 549 00ca BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 550              		.loc 1 294 1 view .LVU196
 551              		.cfi_endproc
 552              	.LFE124:
 554              		.text
 555              	.Letext0:
 556              		.file 3 "/usr/local/arm-none-eabi-gcc/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/mac
 557              		.file 4 "/usr/local/arm-none-eabi-gcc/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys
 558              		.file 5 "USER/stm32f4xx.h"
 559              		.file 6 "FWLIB/inc/stm32f4xx_cryp.h"
ARM GAS  /var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccaqBq0S.s 			page 26


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_cryp_des.c
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccaqBq0S.s:18     .text.CRYP_DES_ECB:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccaqBq0S.s:26     .text.CRYP_DES_ECB:0000000000000000 CRYP_DES_ECB
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccaqBq0S.s:265    .text.CRYP_DES_CBC:0000000000000000 $t
/var/folders/lx/hc4sn_b53233_zkc9xbbl97r0000gp/T//ccaqBq0S.s:272    .text.CRYP_DES_CBC:0000000000000000 CRYP_DES_CBC

UNDEFINED SYMBOLS
CRYP_KeyStructInit
CRYP_Init
CRYP_KeyInit
CRYP_FIFOFlush
CRYP_Cmd
CRYP_GetCmdStatus
CRYP_DataIn
CRYP_GetFlagStatus
CRYP_DataOut
CRYP_IVInit
