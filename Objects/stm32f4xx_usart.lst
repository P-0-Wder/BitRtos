ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_usart.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.USART_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	USART_DeInit
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	USART_DeInit:
  27              	.LVL0:
  28              	.LFB123:
  29              		.file 1 "FWLIB/src/stm32f4xx_usart.c"
   1:FWLIB/src/stm32f4xx_usart.c **** /**
   2:FWLIB/src/stm32f4xx_usart.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_usart.c ****   * @file    stm32f4xx_usart.c
   4:FWLIB/src/stm32f4xx_usart.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_usart.c ****   * @version V1.8.0
   6:FWLIB/src/stm32f4xx_usart.c ****   * @date    04-November-2016
   7:FWLIB/src/stm32f4xx_usart.c ****   * @brief   This file provides firmware functions to manage the following 
   8:FWLIB/src/stm32f4xx_usart.c ****   *          functionalities of the Universal synchronous asynchronous receiver
   9:FWLIB/src/stm32f4xx_usart.c ****   *          transmitter (USART):           
  10:FWLIB/src/stm32f4xx_usart.c ****   *           + Initialization and Configuration
  11:FWLIB/src/stm32f4xx_usart.c ****   *           + Data transfers
  12:FWLIB/src/stm32f4xx_usart.c ****   *           + Multi-Processor Communication
  13:FWLIB/src/stm32f4xx_usart.c ****   *           + LIN mode
  14:FWLIB/src/stm32f4xx_usart.c ****   *           + Half-duplex mode
  15:FWLIB/src/stm32f4xx_usart.c ****   *           + Smartcard mode
  16:FWLIB/src/stm32f4xx_usart.c ****   *           + IrDA mode
  17:FWLIB/src/stm32f4xx_usart.c ****   *           + DMA transfers management
  18:FWLIB/src/stm32f4xx_usart.c ****   *           + Interrupts and flags management 
  19:FWLIB/src/stm32f4xx_usart.c ****   *           
  20:FWLIB/src/stm32f4xx_usart.c ****   @verbatim       
  21:FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================
  22:FWLIB/src/stm32f4xx_usart.c ****                         ##### How to use this driver #####
  23:FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================
  24:FWLIB/src/stm32f4xx_usart.c ****     [..]
  25:FWLIB/src/stm32f4xx_usart.c ****       (#) Enable peripheral clock using the following functions
  26:FWLIB/src/stm32f4xx_usart.c ****           RCC_APB2PeriphClockCmd(RCC_APB2Periph_USARTx, ENABLE) for USART1 and USART6 
  27:FWLIB/src/stm32f4xx_usart.c ****           RCC_APB1PeriphClockCmd(RCC_APB1Periph_USARTx, ENABLE) for USART2, USART3, 
  28:FWLIB/src/stm32f4xx_usart.c ****           UART4 or UART5.
  29:FWLIB/src/stm32f4xx_usart.c ****   
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 2


  30:FWLIB/src/stm32f4xx_usart.c ****       (#) According to the USART mode, enable the GPIO clocks using 
  31:FWLIB/src/stm32f4xx_usart.c ****           RCC_AHB1PeriphClockCmd() function. (The I/O can be TX, RX, CTS, 
  32:FWLIB/src/stm32f4xx_usart.c ****           or/and SCLK). 
  33:FWLIB/src/stm32f4xx_usart.c ****   
  34:FWLIB/src/stm32f4xx_usart.c ****       (#) Peripheral's alternate function: 
  35:FWLIB/src/stm32f4xx_usart.c ****         (++) Connect the pin to the desired peripherals' Alternate 
  36:FWLIB/src/stm32f4xx_usart.c ****             Function (AF) using GPIO_PinAFConfig() function
  37:FWLIB/src/stm32f4xx_usart.c ****         (++) Configure the desired pin in alternate function by:
  38:FWLIB/src/stm32f4xx_usart.c ****             GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  39:FWLIB/src/stm32f4xx_usart.c ****         (++) Select the type, pull-up/pull-down and output speed via 
  40:FWLIB/src/stm32f4xx_usart.c ****             GPIO_PuPd, GPIO_OType and GPIO_Speed members
  41:FWLIB/src/stm32f4xx_usart.c ****         (++) Call GPIO_Init() function
  42:FWLIB/src/stm32f4xx_usart.c ****           
  43:FWLIB/src/stm32f4xx_usart.c ****       (#) Program the Baud Rate, Word Length , Stop Bit, Parity, Hardware 
  44:FWLIB/src/stm32f4xx_usart.c ****           flow control and Mode(Receiver/Transmitter) using the USART_Init()
  45:FWLIB/src/stm32f4xx_usart.c ****           function.
  46:FWLIB/src/stm32f4xx_usart.c ****   
  47:FWLIB/src/stm32f4xx_usart.c ****       (#) For synchronous mode, enable the clock and program the polarity,
  48:FWLIB/src/stm32f4xx_usart.c ****           phase and last bit using the USART_ClockInit() function.
  49:FWLIB/src/stm32f4xx_usart.c ****   
  50:FWLIB/src/stm32f4xx_usart.c ****       (#) Enable the NVIC and the corresponding interrupt using the function 
  51:FWLIB/src/stm32f4xx_usart.c ****          USART_ITConfig() if you need to use interrupt mode. 
  52:FWLIB/src/stm32f4xx_usart.c ****   
  53:FWLIB/src/stm32f4xx_usart.c ****       (#) When using the DMA mode 
  54:FWLIB/src/stm32f4xx_usart.c ****         (++) Configure the DMA using DMA_Init() function
  55:FWLIB/src/stm32f4xx_usart.c ****         (++) Active the needed channel Request using USART_DMACmd() function
  56:FWLIB/src/stm32f4xx_usart.c ****    
  57:FWLIB/src/stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
  58:FWLIB/src/stm32f4xx_usart.c ****    
  59:FWLIB/src/stm32f4xx_usart.c ****       (#) Enable the DMA using the DMA_Cmd() function, when using DMA mode. 
  60:FWLIB/src/stm32f4xx_usart.c ****     
  61:FWLIB/src/stm32f4xx_usart.c ****       -@- Refer to Multi-Processor, LIN, half-duplex, Smartcard, IrDA sub-sections
  62:FWLIB/src/stm32f4xx_usart.c ****           for more details
  63:FWLIB/src/stm32f4xx_usart.c ****     
  64:FWLIB/src/stm32f4xx_usart.c ****     [..]        
  65:FWLIB/src/stm32f4xx_usart.c ****     In order to reach higher communication baudrates, it is possible to
  66:FWLIB/src/stm32f4xx_usart.c ****     enable the oversampling by 8 mode using the function USART_OverSampling8Cmd().
  67:FWLIB/src/stm32f4xx_usart.c ****     This function should be called after enabling the USART clock (RCC_APBxPeriphClockCmd())
  68:FWLIB/src/stm32f4xx_usart.c ****     and before calling the function USART_Init().
  69:FWLIB/src/stm32f4xx_usart.c ****             
  70:FWLIB/src/stm32f4xx_usart.c ****     @endverbatim        
  71:FWLIB/src/stm32f4xx_usart.c ****   ******************************************************************************
  72:FWLIB/src/stm32f4xx_usart.c ****   * @attention
  73:FWLIB/src/stm32f4xx_usart.c ****   *
  74:FWLIB/src/stm32f4xx_usart.c ****   * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
  75:FWLIB/src/stm32f4xx_usart.c ****   *
  76:FWLIB/src/stm32f4xx_usart.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  77:FWLIB/src/stm32f4xx_usart.c ****   * You may not use this file except in compliance with the License.
  78:FWLIB/src/stm32f4xx_usart.c ****   * You may obtain a copy of the License at:
  79:FWLIB/src/stm32f4xx_usart.c ****   *
  80:FWLIB/src/stm32f4xx_usart.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  81:FWLIB/src/stm32f4xx_usart.c ****   *
  82:FWLIB/src/stm32f4xx_usart.c ****   * Unless required by applicable law or agreed to in writing, software 
  83:FWLIB/src/stm32f4xx_usart.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  84:FWLIB/src/stm32f4xx_usart.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  85:FWLIB/src/stm32f4xx_usart.c ****   * See the License for the specific language governing permissions and
  86:FWLIB/src/stm32f4xx_usart.c ****   * limitations under the License.
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 3


  87:FWLIB/src/stm32f4xx_usart.c ****   *
  88:FWLIB/src/stm32f4xx_usart.c ****   ******************************************************************************  
  89:FWLIB/src/stm32f4xx_usart.c ****   */ 
  90:FWLIB/src/stm32f4xx_usart.c **** 
  91:FWLIB/src/stm32f4xx_usart.c **** /* Includes ------------------------------------------------------------------*/
  92:FWLIB/src/stm32f4xx_usart.c **** #include "stm32f4xx_usart.h"
  93:FWLIB/src/stm32f4xx_usart.c **** #include "stm32f4xx_rcc.h"
  94:FWLIB/src/stm32f4xx_usart.c **** 
  95:FWLIB/src/stm32f4xx_usart.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  96:FWLIB/src/stm32f4xx_usart.c ****   * @{
  97:FWLIB/src/stm32f4xx_usart.c ****   */
  98:FWLIB/src/stm32f4xx_usart.c **** 
  99:FWLIB/src/stm32f4xx_usart.c **** /** @defgroup USART 
 100:FWLIB/src/stm32f4xx_usart.c ****   * @brief USART driver modules
 101:FWLIB/src/stm32f4xx_usart.c ****   * @{
 102:FWLIB/src/stm32f4xx_usart.c ****   */
 103:FWLIB/src/stm32f4xx_usart.c **** 
 104:FWLIB/src/stm32f4xx_usart.c **** /* Private typedef -----------------------------------------------------------*/
 105:FWLIB/src/stm32f4xx_usart.c **** /* Private define ------------------------------------------------------------*/
 106:FWLIB/src/stm32f4xx_usart.c **** 
 107:FWLIB/src/stm32f4xx_usart.c **** /*!< USART CR1 register clear Mask ((~(uint16_t)0xE9F3)) */
 108:FWLIB/src/stm32f4xx_usart.c **** #define CR1_CLEAR_MASK            ((uint16_t)(USART_CR1_M | USART_CR1_PCE | \
 109:FWLIB/src/stm32f4xx_usart.c ****                                               USART_CR1_PS | USART_CR1_TE | \
 110:FWLIB/src/stm32f4xx_usart.c ****                                               USART_CR1_RE))
 111:FWLIB/src/stm32f4xx_usart.c **** 
 112:FWLIB/src/stm32f4xx_usart.c **** /*!< USART CR2 register clock bits clear Mask ((~(uint16_t)0xF0FF)) */
 113:FWLIB/src/stm32f4xx_usart.c **** #define CR2_CLOCK_CLEAR_MASK      ((uint16_t)(USART_CR2_CLKEN | USART_CR2_CPOL | \
 114:FWLIB/src/stm32f4xx_usart.c ****                                               USART_CR2_CPHA | USART_CR2_LBCL))
 115:FWLIB/src/stm32f4xx_usart.c **** 
 116:FWLIB/src/stm32f4xx_usart.c **** /*!< USART CR3 register clear Mask ((~(uint16_t)0xFCFF)) */
 117:FWLIB/src/stm32f4xx_usart.c **** #define CR3_CLEAR_MASK            ((uint16_t)(USART_CR3_RTSE | USART_CR3_CTSE))
 118:FWLIB/src/stm32f4xx_usart.c **** 
 119:FWLIB/src/stm32f4xx_usart.c **** /*!< USART Interrupts mask */
 120:FWLIB/src/stm32f4xx_usart.c **** #define IT_MASK                   ((uint16_t)0x001F)
 121:FWLIB/src/stm32f4xx_usart.c **** 
 122:FWLIB/src/stm32f4xx_usart.c **** /* Private macro -------------------------------------------------------------*/
 123:FWLIB/src/stm32f4xx_usart.c **** /* Private variables ---------------------------------------------------------*/
 124:FWLIB/src/stm32f4xx_usart.c **** /* Private function prototypes -----------------------------------------------*/
 125:FWLIB/src/stm32f4xx_usart.c **** /* Private functions ---------------------------------------------------------*/
 126:FWLIB/src/stm32f4xx_usart.c **** 
 127:FWLIB/src/stm32f4xx_usart.c **** /** @defgroup USART_Private_Functions
 128:FWLIB/src/stm32f4xx_usart.c ****   * @{
 129:FWLIB/src/stm32f4xx_usart.c ****   */
 130:FWLIB/src/stm32f4xx_usart.c **** 
 131:FWLIB/src/stm32f4xx_usart.c **** /** @defgroup USART_Group1 Initialization and Configuration functions
 132:FWLIB/src/stm32f4xx_usart.c ****  *  @brief   Initialization and Configuration functions 
 133:FWLIB/src/stm32f4xx_usart.c ****  *
 134:FWLIB/src/stm32f4xx_usart.c **** @verbatim   
 135:FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================
 136:FWLIB/src/stm32f4xx_usart.c ****             ##### Initialization and Configuration functions #####
 137:FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================  
 138:FWLIB/src/stm32f4xx_usart.c ****     [..]
 139:FWLIB/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to initialize the USART 
 140:FWLIB/src/stm32f4xx_usart.c ****     in asynchronous and in synchronous modes.
 141:FWLIB/src/stm32f4xx_usart.c ****       (+) For the asynchronous mode only these parameters can be configured: 
 142:FWLIB/src/stm32f4xx_usart.c ****         (++) Baud Rate
 143:FWLIB/src/stm32f4xx_usart.c ****         (++) Word Length 
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 4


 144:FWLIB/src/stm32f4xx_usart.c ****         (++) Stop Bit
 145:FWLIB/src/stm32f4xx_usart.c ****         (++) Parity: If the parity is enabled, then the MSB bit of the data written
 146:FWLIB/src/stm32f4xx_usart.c ****              in the data register is transmitted but is changed by the parity bit.
 147:FWLIB/src/stm32f4xx_usart.c ****              Depending on the frame length defined by the M bit (8-bits or 9-bits),
 148:FWLIB/src/stm32f4xx_usart.c ****              the possible USART frame formats are as listed in the following table:
 149:FWLIB/src/stm32f4xx_usart.c ****    +-------------------------------------------------------------+     
 150:FWLIB/src/stm32f4xx_usart.c ****    |   M bit |  PCE bit  |            USART frame                |
 151:FWLIB/src/stm32f4xx_usart.c ****    |---------------------|---------------------------------------|             
 152:FWLIB/src/stm32f4xx_usart.c ****    |    0    |    0      |    | SB | 8 bit data | STB |          |
 153:FWLIB/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 154:FWLIB/src/stm32f4xx_usart.c ****    |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 155:FWLIB/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 156:FWLIB/src/stm32f4xx_usart.c ****    |    1    |    0      |    | SB | 9 bit data | STB |          |
 157:FWLIB/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 158:FWLIB/src/stm32f4xx_usart.c ****    |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 159:FWLIB/src/stm32f4xx_usart.c ****    +-------------------------------------------------------------+            
 160:FWLIB/src/stm32f4xx_usart.c ****         (++) Hardware flow control
 161:FWLIB/src/stm32f4xx_usart.c ****         (++) Receiver/transmitter modes
 162:FWLIB/src/stm32f4xx_usart.c **** 
 163:FWLIB/src/stm32f4xx_usart.c ****     [..]
 164:FWLIB/src/stm32f4xx_usart.c ****     The USART_Init() function follows the USART  asynchronous configuration 
 165:FWLIB/src/stm32f4xx_usart.c ****     procedure (details for the procedure are available in reference manual (RM0090)).
 166:FWLIB/src/stm32f4xx_usart.c **** 
 167:FWLIB/src/stm32f4xx_usart.c ****      (+) For the synchronous mode in addition to the asynchronous mode parameters these 
 168:FWLIB/src/stm32f4xx_usart.c ****          parameters should be also configured:
 169:FWLIB/src/stm32f4xx_usart.c ****         (++) USART Clock Enabled
 170:FWLIB/src/stm32f4xx_usart.c ****         (++) USART polarity
 171:FWLIB/src/stm32f4xx_usart.c ****         (++) USART phase
 172:FWLIB/src/stm32f4xx_usart.c ****         (++) USART LastBit
 173:FWLIB/src/stm32f4xx_usart.c ****   
 174:FWLIB/src/stm32f4xx_usart.c ****     [..]
 175:FWLIB/src/stm32f4xx_usart.c ****     These parameters can be configured using the USART_ClockInit() function.
 176:FWLIB/src/stm32f4xx_usart.c **** 
 177:FWLIB/src/stm32f4xx_usart.c **** @endverbatim
 178:FWLIB/src/stm32f4xx_usart.c ****   * @{
 179:FWLIB/src/stm32f4xx_usart.c ****   */
 180:FWLIB/src/stm32f4xx_usart.c ****   
 181:FWLIB/src/stm32f4xx_usart.c **** /**
 182:FWLIB/src/stm32f4xx_usart.c ****   * @brief  Deinitializes the USARTx peripheral registers to their default reset values.
 183:FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 184:FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
 185:FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 186:FWLIB/src/stm32f4xx_usart.c ****   */
 187:FWLIB/src/stm32f4xx_usart.c **** void USART_DeInit(USART_TypeDef* USARTx)
 188:FWLIB/src/stm32f4xx_usart.c **** {
  30              		.loc 1 188 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 188 1 is_stmt 0 view .LVU1
  35 0000 08B5     		push	{r3, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 3, -8
  39              		.cfi_offset 14, -4
 189:FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
 190:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 5


  40              		.loc 1 190 3 is_stmt 1 view .LVU2
 191:FWLIB/src/stm32f4xx_usart.c **** 
 192:FWLIB/src/stm32f4xx_usart.c ****   if (USARTx == USART1)
  41              		.loc 1 192 3 view .LVU3
  42              		.loc 1 192 6 is_stmt 0 view .LVU4
  43 0002 364B     		ldr	r3, .L19
  44 0004 9842     		cmp	r0, r3
  45 0006 15D0     		beq	.L11
 193:FWLIB/src/stm32f4xx_usart.c ****   {
 194:FWLIB/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 195:FWLIB/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 196:FWLIB/src/stm32f4xx_usart.c ****   }
 197:FWLIB/src/stm32f4xx_usart.c ****   else if (USARTx == USART2)
  46              		.loc 1 197 8 is_stmt 1 view .LVU5
  47              		.loc 1 197 11 is_stmt 0 view .LVU6
  48 0008 354B     		ldr	r3, .L19+4
  49 000a 9842     		cmp	r0, r3
  50 000c 1BD0     		beq	.L12
 198:FWLIB/src/stm32f4xx_usart.c ****   {
 199:FWLIB/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 200:FWLIB/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 201:FWLIB/src/stm32f4xx_usart.c ****   }
 202:FWLIB/src/stm32f4xx_usart.c ****   else if (USARTx == USART3)
  51              		.loc 1 202 8 is_stmt 1 view .LVU7
  52              		.loc 1 202 11 is_stmt 0 view .LVU8
  53 000e 354B     		ldr	r3, .L19+8
  54 0010 9842     		cmp	r0, r3
  55 0012 23D0     		beq	.L13
 203:FWLIB/src/stm32f4xx_usart.c ****   {
 204:FWLIB/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 205:FWLIB/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 206:FWLIB/src/stm32f4xx_usart.c ****   }    
 207:FWLIB/src/stm32f4xx_usart.c ****   else if (USARTx == UART4)
  56              		.loc 1 207 8 is_stmt 1 view .LVU9
  57              		.loc 1 207 11 is_stmt 0 view .LVU10
  58 0014 344B     		ldr	r3, .L19+12
  59 0016 9842     		cmp	r0, r3
  60 0018 2BD0     		beq	.L14
 208:FWLIB/src/stm32f4xx_usart.c ****   {
 209:FWLIB/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 210:FWLIB/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 211:FWLIB/src/stm32f4xx_usart.c ****   }
 212:FWLIB/src/stm32f4xx_usart.c ****   else if (USARTx == UART5)
  61              		.loc 1 212 8 is_stmt 1 view .LVU11
  62              		.loc 1 212 11 is_stmt 0 view .LVU12
  63 001a 344B     		ldr	r3, .L19+16
  64 001c 9842     		cmp	r0, r3
  65 001e 33D0     		beq	.L15
 213:FWLIB/src/stm32f4xx_usart.c ****   {
 214:FWLIB/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 215:FWLIB/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 216:FWLIB/src/stm32f4xx_usart.c ****   }  
 217:FWLIB/src/stm32f4xx_usart.c ****   else if (USARTx == USART6)
  66              		.loc 1 217 8 is_stmt 1 view .LVU13
  67              		.loc 1 217 11 is_stmt 0 view .LVU14
  68 0020 334B     		ldr	r3, .L19+20
  69 0022 9842     		cmp	r0, r3
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 6


  70 0024 3BD0     		beq	.L16
 218:FWLIB/src/stm32f4xx_usart.c ****   {
 219:FWLIB/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 220:FWLIB/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 221:FWLIB/src/stm32f4xx_usart.c ****   }
 222:FWLIB/src/stm32f4xx_usart.c ****   else if (USARTx == UART7)
  71              		.loc 1 222 8 is_stmt 1 view .LVU15
  72              		.loc 1 222 11 is_stmt 0 view .LVU16
  73 0026 334B     		ldr	r3, .L19+24
  74 0028 9842     		cmp	r0, r3
  75 002a 41D0     		beq	.L17
 223:FWLIB/src/stm32f4xx_usart.c ****   {
 224:FWLIB/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
 225:FWLIB/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 226:FWLIB/src/stm32f4xx_usart.c ****   }     
 227:FWLIB/src/stm32f4xx_usart.c ****   else
 228:FWLIB/src/stm32f4xx_usart.c ****   {
 229:FWLIB/src/stm32f4xx_usart.c ****     if (USARTx == UART8)
  76              		.loc 1 229 5 is_stmt 1 view .LVU17
  77              		.loc 1 229 8 is_stmt 0 view .LVU18
  78 002c 324B     		ldr	r3, .L19+28
  79 002e 9842     		cmp	r0, r3
  80 0030 49D0     		beq	.L18
  81              	.LVL1:
  82              	.L1:
 230:FWLIB/src/stm32f4xx_usart.c ****     { 
 231:FWLIB/src/stm32f4xx_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
 232:FWLIB/src/stm32f4xx_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 233:FWLIB/src/stm32f4xx_usart.c ****     }
 234:FWLIB/src/stm32f4xx_usart.c ****   }
 235:FWLIB/src/stm32f4xx_usart.c **** }
  83              		.loc 1 235 1 view .LVU19
  84 0032 08BD     		pop	{r3, pc}
  85              	.LVL2:
  86              	.L11:
 194:FWLIB/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  87              		.loc 1 194 5 is_stmt 1 view .LVU20
  88 0034 0121     		movs	r1, #1
  89 0036 1020     		movs	r0, #16
  90              	.LVL3:
 194:FWLIB/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  91              		.loc 1 194 5 is_stmt 0 view .LVU21
  92 0038 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  93              	.LVL4:
 195:FWLIB/src/stm32f4xx_usart.c ****   }
  94              		.loc 1 195 5 is_stmt 1 view .LVU22
  95 003c 0021     		movs	r1, #0
  96 003e 1020     		movs	r0, #16
  97 0040 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  98              	.LVL5:
  99 0044 F5E7     		b	.L1
 100              	.LVL6:
 101              	.L12:
 199:FWLIB/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 102              		.loc 1 199 5 view .LVU23
 103 0046 0121     		movs	r1, #1
 104 0048 4FF40030 		mov	r0, #131072
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 7


 105              	.LVL7:
 199:FWLIB/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 106              		.loc 1 199 5 is_stmt 0 view .LVU24
 107 004c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 108              	.LVL8:
 200:FWLIB/src/stm32f4xx_usart.c ****   }
 109              		.loc 1 200 5 is_stmt 1 view .LVU25
 110 0050 0021     		movs	r1, #0
 111 0052 4FF40030 		mov	r0, #131072
 112 0056 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 113              	.LVL9:
 114 005a EAE7     		b	.L1
 115              	.LVL10:
 116              	.L13:
 204:FWLIB/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 117              		.loc 1 204 5 view .LVU26
 118 005c 0121     		movs	r1, #1
 119 005e 4FF48020 		mov	r0, #262144
 120              	.LVL11:
 204:FWLIB/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 121              		.loc 1 204 5 is_stmt 0 view .LVU27
 122 0062 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 123              	.LVL12:
 205:FWLIB/src/stm32f4xx_usart.c ****   }    
 124              		.loc 1 205 5 is_stmt 1 view .LVU28
 125 0066 0021     		movs	r1, #0
 126 0068 4FF48020 		mov	r0, #262144
 127 006c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 128              	.LVL13:
 129 0070 DFE7     		b	.L1
 130              	.LVL14:
 131              	.L14:
 209:FWLIB/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 132              		.loc 1 209 5 view .LVU29
 133 0072 0121     		movs	r1, #1
 134 0074 4FF40020 		mov	r0, #524288
 135              	.LVL15:
 209:FWLIB/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 136              		.loc 1 209 5 is_stmt 0 view .LVU30
 137 0078 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 138              	.LVL16:
 210:FWLIB/src/stm32f4xx_usart.c ****   }
 139              		.loc 1 210 5 is_stmt 1 view .LVU31
 140 007c 0021     		movs	r1, #0
 141 007e 4FF40020 		mov	r0, #524288
 142 0082 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 143              	.LVL17:
 144 0086 D4E7     		b	.L1
 145              	.LVL18:
 146              	.L15:
 214:FWLIB/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 147              		.loc 1 214 5 view .LVU32
 148 0088 0121     		movs	r1, #1
 149 008a 4FF48010 		mov	r0, #1048576
 150              	.LVL19:
 214:FWLIB/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 151              		.loc 1 214 5 is_stmt 0 view .LVU33
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 8


 152 008e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 153              	.LVL20:
 215:FWLIB/src/stm32f4xx_usart.c ****   }  
 154              		.loc 1 215 5 is_stmt 1 view .LVU34
 155 0092 0021     		movs	r1, #0
 156 0094 4FF48010 		mov	r0, #1048576
 157 0098 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 158              	.LVL21:
 159 009c C9E7     		b	.L1
 160              	.LVL22:
 161              	.L16:
 219:FWLIB/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 162              		.loc 1 219 5 view .LVU35
 163 009e 0121     		movs	r1, #1
 164 00a0 2020     		movs	r0, #32
 165              	.LVL23:
 219:FWLIB/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 166              		.loc 1 219 5 is_stmt 0 view .LVU36
 167 00a2 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 168              	.LVL24:
 220:FWLIB/src/stm32f4xx_usart.c ****   }
 169              		.loc 1 220 5 is_stmt 1 view .LVU37
 170 00a6 0021     		movs	r1, #0
 171 00a8 2020     		movs	r0, #32
 172 00aa FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 173              	.LVL25:
 174 00ae C0E7     		b	.L1
 175              	.LVL26:
 176              	.L17:
 224:FWLIB/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 177              		.loc 1 224 5 view .LVU38
 178 00b0 0121     		movs	r1, #1
 179 00b2 4FF08040 		mov	r0, #1073741824
 180              	.LVL27:
 224:FWLIB/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 181              		.loc 1 224 5 is_stmt 0 view .LVU39
 182 00b6 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 183              	.LVL28:
 225:FWLIB/src/stm32f4xx_usart.c ****   }     
 184              		.loc 1 225 5 is_stmt 1 view .LVU40
 185 00ba 0021     		movs	r1, #0
 186 00bc 4FF08040 		mov	r0, #1073741824
 187 00c0 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 188              	.LVL29:
 189 00c4 B5E7     		b	.L1
 190              	.LVL30:
 191              	.L18:
 231:FWLIB/src/stm32f4xx_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 192              		.loc 1 231 7 view .LVU41
 193 00c6 0121     		movs	r1, #1
 194 00c8 4FF00040 		mov	r0, #-2147483648
 195              	.LVL31:
 231:FWLIB/src/stm32f4xx_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 196              		.loc 1 231 7 is_stmt 0 view .LVU42
 197 00cc FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 198              	.LVL32:
 232:FWLIB/src/stm32f4xx_usart.c ****     }
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 9


 199              		.loc 1 232 7 is_stmt 1 view .LVU43
 200 00d0 0021     		movs	r1, #0
 201 00d2 4FF00040 		mov	r0, #-2147483648
 202 00d6 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 203              	.LVL33:
 204              		.loc 1 235 1 is_stmt 0 view .LVU44
 205 00da AAE7     		b	.L1
 206              	.L20:
 207              		.align	2
 208              	.L19:
 209 00dc 00100140 		.word	1073811456
 210 00e0 00440040 		.word	1073759232
 211 00e4 00480040 		.word	1073760256
 212 00e8 004C0040 		.word	1073761280
 213 00ec 00500040 		.word	1073762304
 214 00f0 00140140 		.word	1073812480
 215 00f4 00780040 		.word	1073772544
 216 00f8 007C0040 		.word	1073773568
 217              		.cfi_endproc
 218              	.LFE123:
 220              		.section	.text.USART_Init,"ax",%progbits
 221              		.align	1
 222              		.global	USART_Init
 223              		.syntax unified
 224              		.thumb
 225              		.thumb_func
 226              		.fpu fpv4-sp-d16
 228              	USART_Init:
 229              	.LVL34:
 230              	.LFB124:
 236:FWLIB/src/stm32f4xx_usart.c **** 
 237:FWLIB/src/stm32f4xx_usart.c **** /**
 238:FWLIB/src/stm32f4xx_usart.c ****   * @brief  Initializes the USARTx peripheral according to the specified
 239:FWLIB/src/stm32f4xx_usart.c ****   *         parameters in the USART_InitStruct .
 240:FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 241:FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
 242:FWLIB/src/stm32f4xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
 243:FWLIB/src/stm32f4xx_usart.c ****   *         the configuration information for the specified USART peripheral.
 244:FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 245:FWLIB/src/stm32f4xx_usart.c ****   */
 246:FWLIB/src/stm32f4xx_usart.c **** void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
 247:FWLIB/src/stm32f4xx_usart.c **** {
 231              		.loc 1 247 1 is_stmt 1 view -0
 232              		.cfi_startproc
 233              		@ args = 0, pretend = 0, frame = 16
 234              		@ frame_needed = 0, uses_anonymous_args = 0
 235              		.loc 1 247 1 is_stmt 0 view .LVU46
 236 0000 30B5     		push	{r4, r5, lr}
 237              	.LCFI1:
 238              		.cfi_def_cfa_offset 12
 239              		.cfi_offset 4, -12
 240              		.cfi_offset 5, -8
 241              		.cfi_offset 14, -4
 242 0002 85B0     		sub	sp, sp, #20
 243              	.LCFI2:
 244              		.cfi_def_cfa_offset 32
 245 0004 0446     		mov	r4, r0
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 10


 246 0006 0D46     		mov	r5, r1
 248:FWLIB/src/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00, apbclock = 0x00;
 247              		.loc 1 248 3 is_stmt 1 view .LVU47
 248              	.LVL35:
 249:FWLIB/src/stm32f4xx_usart.c ****   uint32_t integerdivider = 0x00;
 249              		.loc 1 249 3 view .LVU48
 250:FWLIB/src/stm32f4xx_usart.c ****   uint32_t fractionaldivider = 0x00;
 250              		.loc 1 250 3 view .LVU49
 251:FWLIB/src/stm32f4xx_usart.c ****   RCC_ClocksTypeDef RCC_ClocksStatus;
 251              		.loc 1 251 3 view .LVU50
 252:FWLIB/src/stm32f4xx_usart.c **** 
 253:FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
 254:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 252              		.loc 1 254 3 view .LVU51
 255:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 253              		.loc 1 255 3 view .LVU52
 256:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 254              		.loc 1 256 3 view .LVU53
 257:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 255              		.loc 1 257 3 view .LVU54
 258:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 256              		.loc 1 258 3 view .LVU55
 259:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 257              		.loc 1 259 3 view .LVU56
 260:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 258              		.loc 1 260 3 view .LVU57
 261:FWLIB/src/stm32f4xx_usart.c **** 
 262:FWLIB/src/stm32f4xx_usart.c ****   /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
 263:FWLIB/src/stm32f4xx_usart.c ****   if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 259              		.loc 1 263 3 view .LVU58
 264:FWLIB/src/stm32f4xx_usart.c ****   {
 265:FWLIB/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
 260              		.loc 1 265 5 view .LVU59
 266:FWLIB/src/stm32f4xx_usart.c ****   }
 267:FWLIB/src/stm32f4xx_usart.c **** 
 268:FWLIB/src/stm32f4xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 269:FWLIB/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR2;
 261              		.loc 1 269 3 view .LVU60
 262              		.loc 1 269 18 is_stmt 0 view .LVU61
 263 0008 038A     		ldrh	r3, [r0, #16]
 264 000a 9BB2     		uxth	r3, r3
 265              	.LVL36:
 270:FWLIB/src/stm32f4xx_usart.c **** 
 271:FWLIB/src/stm32f4xx_usart.c ****   /* Clear STOP[13:12] bits */
 272:FWLIB/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 266              		.loc 1 272 3 is_stmt 1 view .LVU62
 267              		.loc 1 272 10 is_stmt 0 view .LVU63
 268 000c 23F44053 		bic	r3, r3, #12288
 269              	.LVL37:
 273:FWLIB/src/stm32f4xx_usart.c **** 
 274:FWLIB/src/stm32f4xx_usart.c ****   /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
 275:FWLIB/src/stm32f4xx_usart.c ****       Set STOP[13:12] bits according to USART_StopBits value */
 276:FWLIB/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 270              		.loc 1 276 3 is_stmt 1 view .LVU64
 271              		.loc 1 276 39 is_stmt 0 view .LVU65
 272 0010 CA88     		ldrh	r2, [r1, #6]
 273              	.LVL38:
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 11


 277:FWLIB/src/stm32f4xx_usart.c ****   
 278:FWLIB/src/stm32f4xx_usart.c ****   /* Write to USART CR2 */
 279:FWLIB/src/stm32f4xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 274              		.loc 1 279 3 is_stmt 1 view .LVU66
 275              		.loc 1 279 17 is_stmt 0 view .LVU67
 276 0012 1343     		orrs	r3, r3, r2
 277              	.LVL39:
 278              		.loc 1 279 15 view .LVU68
 279 0014 0382     		strh	r3, [r0, #16]	@ movhi
 280:FWLIB/src/stm32f4xx_usart.c **** 
 281:FWLIB/src/stm32f4xx_usart.c **** /*---------------------------- USART CR1 Configuration -----------------------*/
 282:FWLIB/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR1;
 280              		.loc 1 282 3 is_stmt 1 view .LVU69
 281              		.loc 1 282 18 is_stmt 0 view .LVU70
 282 0016 8389     		ldrh	r3, [r0, #12]
 283              	.LVL40:
 284              		.loc 1 282 18 view .LVU71
 285 0018 9BB2     		uxth	r3, r3
 286              	.LVL41:
 283:FWLIB/src/stm32f4xx_usart.c **** 
 284:FWLIB/src/stm32f4xx_usart.c ****   /* Clear M, PCE, PS, TE and RE bits */
 285:FWLIB/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 287              		.loc 1 285 3 is_stmt 1 view .LVU72
 288              		.loc 1 285 10 is_stmt 0 view .LVU73
 289 001a 23F4B053 		bic	r3, r3, #5632
 290              	.LVL42:
 291              		.loc 1 285 10 view .LVU74
 292 001e 23F00C03 		bic	r3, r3, #12
 293              	.LVL43:
 286:FWLIB/src/stm32f4xx_usart.c **** 
 287:FWLIB/src/stm32f4xx_usart.c ****   /* Configure the USART Word Length, Parity and mode: 
 288:FWLIB/src/stm32f4xx_usart.c ****      Set the M bits according to USART_WordLength value 
 289:FWLIB/src/stm32f4xx_usart.c ****      Set PCE and PS bits according to USART_Parity value
 290:FWLIB/src/stm32f4xx_usart.c ****      Set TE and RE bits according to USART_Mode value */
 291:FWLIB/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 294              		.loc 1 291 3 is_stmt 1 view .LVU75
 295              		.loc 1 291 39 is_stmt 0 view .LVU76
 296 0022 8988     		ldrh	r1, [r1, #4]
 297              	.LVL44:
 298              		.loc 1 291 76 view .LVU77
 299 0024 2889     		ldrh	r0, [r5, #8]
 300              	.LVL45:
 292:FWLIB/src/stm32f4xx_usart.c ****             USART_InitStruct->USART_Mode;
 301              		.loc 1 292 29 view .LVU78
 302 0026 6A89     		ldrh	r2, [r5, #10]
 291:FWLIB/src/stm32f4xx_usart.c ****             USART_InitStruct->USART_Mode;
 303              		.loc 1 291 91 view .LVU79
 304 0028 0143     		orrs	r1, r1, r0
 305 002a 0A43     		orrs	r2, r2, r1
 306              	.LVL46:
 293:FWLIB/src/stm32f4xx_usart.c **** 
 294:FWLIB/src/stm32f4xx_usart.c ****   /* Write to USART CR1 */
 295:FWLIB/src/stm32f4xx_usart.c ****   USARTx->CR1 = (uint16_t)tmpreg;
 307              		.loc 1 295 3 is_stmt 1 view .LVU80
 308              		.loc 1 295 17 is_stmt 0 view .LVU81
 309 002c 1343     		orrs	r3, r3, r2
 310              	.LVL47:
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 12


 311              		.loc 1 295 15 view .LVU82
 312 002e A381     		strh	r3, [r4, #12]	@ movhi
 296:FWLIB/src/stm32f4xx_usart.c **** 
 297:FWLIB/src/stm32f4xx_usart.c **** /*---------------------------- USART CR3 Configuration -----------------------*/  
 298:FWLIB/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR3;
 313              		.loc 1 298 3 is_stmt 1 view .LVU83
 314              		.loc 1 298 18 is_stmt 0 view .LVU84
 315 0030 A38A     		ldrh	r3, [r4, #20]
 316              	.LVL48:
 317              		.loc 1 298 18 view .LVU85
 318 0032 9BB2     		uxth	r3, r3
 319              	.LVL49:
 299:FWLIB/src/stm32f4xx_usart.c **** 
 300:FWLIB/src/stm32f4xx_usart.c ****   /* Clear CTSE and RTSE bits */
 301:FWLIB/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 320              		.loc 1 301 3 is_stmt 1 view .LVU86
 321              		.loc 1 301 10 is_stmt 0 view .LVU87
 322 0034 23F44073 		bic	r3, r3, #768
 323              	.LVL50:
 302:FWLIB/src/stm32f4xx_usart.c **** 
 303:FWLIB/src/stm32f4xx_usart.c ****   /* Configure the USART HFC : 
 304:FWLIB/src/stm32f4xx_usart.c ****       Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
 305:FWLIB/src/stm32f4xx_usart.c ****   tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 324              		.loc 1 305 3 is_stmt 1 view .LVU88
 325              		.loc 1 305 29 is_stmt 0 view .LVU89
 326 0038 AA89     		ldrh	r2, [r5, #12]
 327              	.LVL51:
 306:FWLIB/src/stm32f4xx_usart.c **** 
 307:FWLIB/src/stm32f4xx_usart.c ****   /* Write to USART CR3 */
 308:FWLIB/src/stm32f4xx_usart.c ****   USARTx->CR3 = (uint16_t)tmpreg;
 328              		.loc 1 308 3 is_stmt 1 view .LVU90
 329              		.loc 1 308 17 is_stmt 0 view .LVU91
 330 003a 1343     		orrs	r3, r3, r2
 331              	.LVL52:
 332              		.loc 1 308 15 view .LVU92
 333 003c A382     		strh	r3, [r4, #20]	@ movhi
 309:FWLIB/src/stm32f4xx_usart.c **** 
 310:FWLIB/src/stm32f4xx_usart.c **** /*---------------------------- USART BRR Configuration -----------------------*/
 311:FWLIB/src/stm32f4xx_usart.c ****   /* Configure the USART Baud Rate */
 312:FWLIB/src/stm32f4xx_usart.c ****   RCC_GetClocksFreq(&RCC_ClocksStatus);
 334              		.loc 1 312 3 is_stmt 1 view .LVU93
 335 003e 6846     		mov	r0, sp
 336 0040 FFF7FEFF 		bl	RCC_GetClocksFreq
 337              	.LVL53:
 313:FWLIB/src/stm32f4xx_usart.c **** 
 314:FWLIB/src/stm32f4xx_usart.c ****   if ((USARTx == USART1) || (USARTx == USART6))
 338              		.loc 1 314 3 view .LVU94
 339              		.loc 1 314 6 is_stmt 0 view .LVU95
 340 0044 1F4B     		ldr	r3, .L32
 341 0046 9C42     		cmp	r4, r3
 342 0048 05D0     		beq	.L22
 343              		.loc 1 314 26 discriminator 1 view .LVU96
 344 004a 03F58063 		add	r3, r3, #1024
 345 004e 9C42     		cmp	r4, r3
 346 0050 01D0     		beq	.L22
 315:FWLIB/src/stm32f4xx_usart.c ****   {
 316:FWLIB/src/stm32f4xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK2_Frequency;
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 13


 317:FWLIB/src/stm32f4xx_usart.c ****   }
 318:FWLIB/src/stm32f4xx_usart.c ****   else
 319:FWLIB/src/stm32f4xx_usart.c ****   {
 320:FWLIB/src/stm32f4xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 347              		.loc 1 320 5 is_stmt 1 view .LVU97
 348              		.loc 1 320 14 is_stmt 0 view .LVU98
 349 0052 029B     		ldr	r3, [sp, #8]
 350              	.LVL54:
 351              		.loc 1 320 14 view .LVU99
 352 0054 00E0     		b	.L24
 353              	.LVL55:
 354              	.L22:
 316:FWLIB/src/stm32f4xx_usart.c ****   }
 355              		.loc 1 316 5 is_stmt 1 view .LVU100
 316:FWLIB/src/stm32f4xx_usart.c ****   }
 356              		.loc 1 316 14 is_stmt 0 view .LVU101
 357 0056 039B     		ldr	r3, [sp, #12]
 358              	.LVL56:
 359              	.L24:
 321:FWLIB/src/stm32f4xx_usart.c ****   }
 322:FWLIB/src/stm32f4xx_usart.c ****   
 323:FWLIB/src/stm32f4xx_usart.c ****   /* Determine the integer part */
 324:FWLIB/src/stm32f4xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 360              		.loc 1 324 3 is_stmt 1 view .LVU102
 361              		.loc 1 324 14 is_stmt 0 view .LVU103
 362 0058 A289     		ldrh	r2, [r4, #12]
 363              		.loc 1 324 6 view .LVU104
 364 005a 12F4004F 		tst	r2, #32768
 365 005e 1FD1     		bne	.L30
 325:FWLIB/src/stm32f4xx_usart.c ****   {
 326:FWLIB/src/stm32f4xx_usart.c ****     /* Integer part computing in case Oversampling mode is 8 Samples */
 327:FWLIB/src/stm32f4xx_usart.c ****     integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 328:FWLIB/src/stm32f4xx_usart.c ****   }
 329:FWLIB/src/stm32f4xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 330:FWLIB/src/stm32f4xx_usart.c ****   {
 331:FWLIB/src/stm32f4xx_usart.c ****     /* Integer part computing in case Oversampling mode is 16 Samples */
 332:FWLIB/src/stm32f4xx_usart.c ****     integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 366              		.loc 1 332 5 is_stmt 1 view .LVU105
 367              		.loc 1 332 27 is_stmt 0 view .LVU106
 368 0060 03EB8303 		add	r3, r3, r3, lsl #2
 369              	.LVL57:
 370              		.loc 1 332 27 view .LVU107
 371 0064 03EB8303 		add	r3, r3, r3, lsl #2
 372              		.loc 1 332 63 view .LVU108
 373 0068 2A68     		ldr	r2, [r5]
 374              		.loc 1 332 44 view .LVU109
 375 006a 9200     		lsls	r2, r2, #2
 376              		.loc 1 332 20 view .LVU110
 377 006c B3FBF2F3 		udiv	r3, r3, r2
 378              	.LVL58:
 379              	.L26:
 333:FWLIB/src/stm32f4xx_usart.c ****   }
 334:FWLIB/src/stm32f4xx_usart.c ****   tmpreg = (integerdivider / 100) << 4;
 380              		.loc 1 334 3 is_stmt 1 view .LVU111
 381              		.loc 1 334 28 is_stmt 0 view .LVU112
 382 0070 154A     		ldr	r2, .L32+4
 383 0072 A2FB0312 		umull	r1, r2, r2, r3
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 14


 384 0076 5209     		lsrs	r2, r2, #5
 385              		.loc 1 334 10 view .LVU113
 386 0078 1101     		lsls	r1, r2, #4
 387              	.LVL59:
 335:FWLIB/src/stm32f4xx_usart.c **** 
 336:FWLIB/src/stm32f4xx_usart.c ****   /* Determine the fractional part */
 337:FWLIB/src/stm32f4xx_usart.c ****   fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 388              		.loc 1 337 3 is_stmt 1 view .LVU114
 389              		.loc 1 337 21 is_stmt 0 view .LVU115
 390 007a 6420     		movs	r0, #100
 391 007c 02FB1033 		mls	r3, r2, r0, r3
 392              	.LVL60:
 338:FWLIB/src/stm32f4xx_usart.c **** 
 339:FWLIB/src/stm32f4xx_usart.c ****   /* Implement the fractional part in the register */
 340:FWLIB/src/stm32f4xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 393              		.loc 1 340 3 is_stmt 1 view .LVU116
 394              		.loc 1 340 14 is_stmt 0 view .LVU117
 395 0080 A289     		ldrh	r2, [r4, #12]
 396              		.loc 1 340 6 view .LVU118
 397 0082 12F4004F 		tst	r2, #32768
 398 0086 14D1     		bne	.L31
 341:FWLIB/src/stm32f4xx_usart.c ****   {
 342:FWLIB/src/stm32f4xx_usart.c ****     tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 343:FWLIB/src/stm32f4xx_usart.c ****   }
 344:FWLIB/src/stm32f4xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 345:FWLIB/src/stm32f4xx_usart.c ****   {
 346:FWLIB/src/stm32f4xx_usart.c ****     tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 399              		.loc 1 346 5 is_stmt 1 view .LVU119
 400              		.loc 1 346 37 is_stmt 0 view .LVU120
 401 0088 1B01     		lsls	r3, r3, #4
 402              	.LVL61:
 403              		.loc 1 346 43 view .LVU121
 404 008a 3233     		adds	r3, r3, #50
 405              		.loc 1 346 49 view .LVU122
 406 008c 0E4A     		ldr	r2, .L32+4
 407 008e A2FB0323 		umull	r2, r3, r2, r3
 408              		.loc 1 346 57 view .LVU123
 409 0092 C3F34313 		ubfx	r3, r3, #5, #4
 410              		.loc 1 346 12 view .LVU124
 411 0096 0B43     		orrs	r3, r3, r1
 412              	.LVL62:
 413              	.L28:
 347:FWLIB/src/stm32f4xx_usart.c ****   }
 348:FWLIB/src/stm32f4xx_usart.c ****   
 349:FWLIB/src/stm32f4xx_usart.c ****   /* Write to USART BRR register */
 350:FWLIB/src/stm32f4xx_usart.c ****   USARTx->BRR = (uint16_t)tmpreg;
 414              		.loc 1 350 3 is_stmt 1 view .LVU125
 415              		.loc 1 350 17 is_stmt 0 view .LVU126
 416 0098 9BB2     		uxth	r3, r3
 417              	.LVL63:
 418              		.loc 1 350 15 view .LVU127
 419 009a 2381     		strh	r3, [r4, #8]	@ movhi
 351:FWLIB/src/stm32f4xx_usart.c **** }
 420              		.loc 1 351 1 view .LVU128
 421 009c 05B0     		add	sp, sp, #20
 422              	.LCFI3:
 423              		.cfi_remember_state
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 15


 424              		.cfi_def_cfa_offset 12
 425              		@ sp needed
 426 009e 30BD     		pop	{r4, r5, pc}
 427              	.LVL64:
 428              	.L30:
 429              	.LCFI4:
 430              		.cfi_restore_state
 327:FWLIB/src/stm32f4xx_usart.c ****   }
 431              		.loc 1 327 5 is_stmt 1 view .LVU129
 327:FWLIB/src/stm32f4xx_usart.c ****   }
 432              		.loc 1 327 27 is_stmt 0 view .LVU130
 433 00a0 03EB8303 		add	r3, r3, r3, lsl #2
 434              	.LVL65:
 327:FWLIB/src/stm32f4xx_usart.c ****   }
 435              		.loc 1 327 27 view .LVU131
 436 00a4 03EB8303 		add	r3, r3, r3, lsl #2
 327:FWLIB/src/stm32f4xx_usart.c ****   }
 437              		.loc 1 327 63 view .LVU132
 438 00a8 2A68     		ldr	r2, [r5]
 327:FWLIB/src/stm32f4xx_usart.c ****   }
 439              		.loc 1 327 44 view .LVU133
 440 00aa 5200     		lsls	r2, r2, #1
 327:FWLIB/src/stm32f4xx_usart.c ****   }
 441              		.loc 1 327 20 view .LVU134
 442 00ac B3FBF2F3 		udiv	r3, r3, r2
 443              	.LVL66:
 327:FWLIB/src/stm32f4xx_usart.c ****   }
 444              		.loc 1 327 20 view .LVU135
 445 00b0 DEE7     		b	.L26
 446              	.LVL67:
 447              	.L31:
 342:FWLIB/src/stm32f4xx_usart.c ****   }
 448              		.loc 1 342 5 is_stmt 1 view .LVU136
 342:FWLIB/src/stm32f4xx_usart.c ****   }
 449              		.loc 1 342 37 is_stmt 0 view .LVU137
 450 00b2 DB00     		lsls	r3, r3, #3
 451              	.LVL68:
 342:FWLIB/src/stm32f4xx_usart.c ****   }
 452              		.loc 1 342 42 view .LVU138
 453 00b4 3233     		adds	r3, r3, #50
 342:FWLIB/src/stm32f4xx_usart.c ****   }
 454              		.loc 1 342 48 view .LVU139
 455 00b6 044A     		ldr	r2, .L32+4
 456 00b8 A2FB0323 		umull	r2, r3, r2, r3
 342:FWLIB/src/stm32f4xx_usart.c ****   }
 457              		.loc 1 342 56 view .LVU140
 458 00bc C3F34213 		ubfx	r3, r3, #5, #3
 342:FWLIB/src/stm32f4xx_usart.c ****   }
 459              		.loc 1 342 12 view .LVU141
 460 00c0 0B43     		orrs	r3, r3, r1
 461              	.LVL69:
 342:FWLIB/src/stm32f4xx_usart.c ****   }
 462              		.loc 1 342 12 view .LVU142
 463 00c2 E9E7     		b	.L28
 464              	.L33:
 465              		.align	2
 466              	.L32:
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 16


 467 00c4 00100140 		.word	1073811456
 468 00c8 1F85EB51 		.word	1374389535
 469              		.cfi_endproc
 470              	.LFE124:
 472              		.section	.text.USART_StructInit,"ax",%progbits
 473              		.align	1
 474              		.global	USART_StructInit
 475              		.syntax unified
 476              		.thumb
 477              		.thumb_func
 478              		.fpu fpv4-sp-d16
 480              	USART_StructInit:
 481              	.LVL70:
 482              	.LFB125:
 352:FWLIB/src/stm32f4xx_usart.c **** 
 353:FWLIB/src/stm32f4xx_usart.c **** /**
 354:FWLIB/src/stm32f4xx_usart.c ****   * @brief  Fills each USART_InitStruct member with its default value.
 355:FWLIB/src/stm32f4xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
 356:FWLIB/src/stm32f4xx_usart.c ****   *         be initialized.
 357:FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 358:FWLIB/src/stm32f4xx_usart.c ****   */
 359:FWLIB/src/stm32f4xx_usart.c **** void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
 360:FWLIB/src/stm32f4xx_usart.c **** {
 483              		.loc 1 360 1 is_stmt 1 view -0
 484              		.cfi_startproc
 485              		@ args = 0, pretend = 0, frame = 0
 486              		@ frame_needed = 0, uses_anonymous_args = 0
 487              		@ link register save eliminated.
 361:FWLIB/src/stm32f4xx_usart.c ****   /* USART_InitStruct members default value */
 362:FWLIB/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_BaudRate = 9600;
 488              		.loc 1 362 3 view .LVU144
 489              		.loc 1 362 36 is_stmt 0 view .LVU145
 490 0000 4FF41653 		mov	r3, #9600
 491 0004 0360     		str	r3, [r0]
 363:FWLIB/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 492              		.loc 1 363 3 is_stmt 1 view .LVU146
 493              		.loc 1 363 38 is_stmt 0 view .LVU147
 494 0006 0023     		movs	r3, #0
 495 0008 8380     		strh	r3, [r0, #4]	@ movhi
 364:FWLIB/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_StopBits = USART_StopBits_1;
 496              		.loc 1 364 3 is_stmt 1 view .LVU148
 497              		.loc 1 364 36 is_stmt 0 view .LVU149
 498 000a C380     		strh	r3, [r0, #6]	@ movhi
 365:FWLIB/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_Parity = USART_Parity_No ;
 499              		.loc 1 365 3 is_stmt 1 view .LVU150
 500              		.loc 1 365 34 is_stmt 0 view .LVU151
 501 000c 0381     		strh	r3, [r0, #8]	@ movhi
 366:FWLIB/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 502              		.loc 1 366 3 is_stmt 1 view .LVU152
 503              		.loc 1 366 32 is_stmt 0 view .LVU153
 504 000e 0C22     		movs	r2, #12
 505 0010 4281     		strh	r2, [r0, #10]	@ movhi
 367:FWLIB/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 506              		.loc 1 367 3 is_stmt 1 view .LVU154
 507              		.loc 1 367 47 is_stmt 0 view .LVU155
 508 0012 8381     		strh	r3, [r0, #12]	@ movhi
 368:FWLIB/src/stm32f4xx_usart.c **** }
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 17


 509              		.loc 1 368 1 view .LVU156
 510 0014 7047     		bx	lr
 511              		.cfi_endproc
 512              	.LFE125:
 514              		.section	.text.USART_ClockInit,"ax",%progbits
 515              		.align	1
 516              		.global	USART_ClockInit
 517              		.syntax unified
 518              		.thumb
 519              		.thumb_func
 520              		.fpu fpv4-sp-d16
 522              	USART_ClockInit:
 523              	.LVL71:
 524              	.LFB126:
 369:FWLIB/src/stm32f4xx_usart.c **** 
 370:FWLIB/src/stm32f4xx_usart.c **** /**
 371:FWLIB/src/stm32f4xx_usart.c ****   * @brief  Initializes the USARTx peripheral Clock according to the 
 372:FWLIB/src/stm32f4xx_usart.c ****   *         specified parameters in the USART_ClockInitStruct .
 373:FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART peripheral.
 374:FWLIB/src/stm32f4xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure that
 375:FWLIB/src/stm32f4xx_usart.c ****   *         contains the configuration information for the specified  USART peripheral.
 376:FWLIB/src/stm32f4xx_usart.c ****   * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
 377:FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 378:FWLIB/src/stm32f4xx_usart.c ****   */
 379:FWLIB/src/stm32f4xx_usart.c **** void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
 380:FWLIB/src/stm32f4xx_usart.c **** {
 525              		.loc 1 380 1 is_stmt 1 view -0
 526              		.cfi_startproc
 527              		@ args = 0, pretend = 0, frame = 0
 528              		@ frame_needed = 0, uses_anonymous_args = 0
 529              		.loc 1 380 1 is_stmt 0 view .LVU158
 530 0000 10B5     		push	{r4, lr}
 531              	.LCFI5:
 532              		.cfi_def_cfa_offset 8
 533              		.cfi_offset 4, -8
 534              		.cfi_offset 14, -4
 381:FWLIB/src/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00;
 535              		.loc 1 381 3 is_stmt 1 view .LVU159
 536              	.LVL72:
 382:FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
 383:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 537              		.loc 1 383 3 view .LVU160
 384:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
 538              		.loc 1 384 3 view .LVU161
 385:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
 539              		.loc 1 385 3 view .LVU162
 386:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
 540              		.loc 1 386 3 view .LVU163
 387:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
 541              		.loc 1 387 3 view .LVU164
 388:FWLIB/src/stm32f4xx_usart.c ****   
 389:FWLIB/src/stm32f4xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 390:FWLIB/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR2;
 542              		.loc 1 390 3 view .LVU165
 543              		.loc 1 390 18 is_stmt 0 view .LVU166
 544 0002 038A     		ldrh	r3, [r0, #16]
 545 0004 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 18


 546              	.LVL73:
 391:FWLIB/src/stm32f4xx_usart.c ****   /* Clear CLKEN, CPOL, CPHA and LBCL bits */
 392:FWLIB/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 547              		.loc 1 392 3 is_stmt 1 view .LVU167
 548              		.loc 1 392 10 is_stmt 0 view .LVU168
 549 0006 23F47062 		bic	r2, r3, #3840
 550              	.LVL74:
 393:FWLIB/src/stm32f4xx_usart.c ****   /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
 394:FWLIB/src/stm32f4xx_usart.c ****   /* Set CLKEN bit according to USART_Clock value */
 395:FWLIB/src/stm32f4xx_usart.c ****   /* Set CPOL bit according to USART_CPOL value */
 396:FWLIB/src/stm32f4xx_usart.c ****   /* Set CPHA bit according to USART_CPHA value */
 397:FWLIB/src/stm32f4xx_usart.c ****   /* Set LBCL bit according to USART_LastBit value */
 398:FWLIB/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 551              		.loc 1 398 3 is_stmt 1 view .LVU169
 552              		.loc 1 398 44 is_stmt 0 view .LVU170
 553 000a B1F800E0 		ldrh	lr, [r1]
 554              		.loc 1 398 81 view .LVU171
 555 000e 4C88     		ldrh	r4, [r1, #2]
 399:FWLIB/src/stm32f4xx_usart.c ****                  USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 556              		.loc 1 399 39 view .LVU172
 557 0010 B1F804C0 		ldrh	ip, [r1, #4]
 558              		.loc 1 399 75 view .LVU173
 559 0014 CB88     		ldrh	r3, [r1, #6]
 560              		.loc 1 399 52 view .LVU174
 561 0016 4EEA0401 		orr	r1, lr, r4
 562              	.LVL75:
 563              		.loc 1 399 52 view .LVU175
 564 001a 4CEA0101 		orr	r1, ip, r1
 565 001e 0B43     		orrs	r3, r3, r1
 566              	.LVL76:
 400:FWLIB/src/stm32f4xx_usart.c ****   /* Write to USART CR2 */
 401:FWLIB/src/stm32f4xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 567              		.loc 1 401 3 is_stmt 1 view .LVU176
 568              		.loc 1 401 17 is_stmt 0 view .LVU177
 569 0020 1343     		orrs	r3, r3, r2
 570              	.LVL77:
 571              		.loc 1 401 15 view .LVU178
 572 0022 0382     		strh	r3, [r0, #16]	@ movhi
 402:FWLIB/src/stm32f4xx_usart.c **** }
 573              		.loc 1 402 1 view .LVU179
 574 0024 10BD     		pop	{r4, pc}
 575              		.cfi_endproc
 576              	.LFE126:
 578              		.section	.text.USART_ClockStructInit,"ax",%progbits
 579              		.align	1
 580              		.global	USART_ClockStructInit
 581              		.syntax unified
 582              		.thumb
 583              		.thumb_func
 584              		.fpu fpv4-sp-d16
 586              	USART_ClockStructInit:
 587              	.LVL78:
 588              	.LFB127:
 403:FWLIB/src/stm32f4xx_usart.c **** 
 404:FWLIB/src/stm32f4xx_usart.c **** /**
 405:FWLIB/src/stm32f4xx_usart.c ****   * @brief  Fills each USART_ClockInitStruct member with its default value.
 406:FWLIB/src/stm32f4xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 19


 407:FWLIB/src/stm32f4xx_usart.c ****   *         which will be initialized.
 408:FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 409:FWLIB/src/stm32f4xx_usart.c ****   */
 410:FWLIB/src/stm32f4xx_usart.c **** void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
 411:FWLIB/src/stm32f4xx_usart.c **** {
 589              		.loc 1 411 1 is_stmt 1 view -0
 590              		.cfi_startproc
 591              		@ args = 0, pretend = 0, frame = 0
 592              		@ frame_needed = 0, uses_anonymous_args = 0
 593              		@ link register save eliminated.
 412:FWLIB/src/stm32f4xx_usart.c ****   /* USART_ClockInitStruct members default value */
 413:FWLIB/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 594              		.loc 1 413 3 view .LVU181
 595              		.loc 1 413 38 is_stmt 0 view .LVU182
 596 0000 0023     		movs	r3, #0
 597 0002 0380     		strh	r3, [r0]	@ movhi
 414:FWLIB/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 598              		.loc 1 414 3 is_stmt 1 view .LVU183
 599              		.loc 1 414 37 is_stmt 0 view .LVU184
 600 0004 4380     		strh	r3, [r0, #2]	@ movhi
 415:FWLIB/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 601              		.loc 1 415 3 is_stmt 1 view .LVU185
 602              		.loc 1 415 37 is_stmt 0 view .LVU186
 603 0006 8380     		strh	r3, [r0, #4]	@ movhi
 416:FWLIB/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 604              		.loc 1 416 3 is_stmt 1 view .LVU187
 605              		.loc 1 416 40 is_stmt 0 view .LVU188
 606 0008 C380     		strh	r3, [r0, #6]	@ movhi
 417:FWLIB/src/stm32f4xx_usart.c **** }
 607              		.loc 1 417 1 view .LVU189
 608 000a 7047     		bx	lr
 609              		.cfi_endproc
 610              	.LFE127:
 612              		.section	.text.USART_Cmd,"ax",%progbits
 613              		.align	1
 614              		.global	USART_Cmd
 615              		.syntax unified
 616              		.thumb
 617              		.thumb_func
 618              		.fpu fpv4-sp-d16
 620              	USART_Cmd:
 621              	.LVL79:
 622              	.LFB128:
 418:FWLIB/src/stm32f4xx_usart.c **** 
 419:FWLIB/src/stm32f4xx_usart.c **** /**
 420:FWLIB/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the specified USART peripheral.
 421:FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 422:FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
 423:FWLIB/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USARTx peripheral.
 424:FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 425:FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 426:FWLIB/src/stm32f4xx_usart.c ****   */
 427:FWLIB/src/stm32f4xx_usart.c **** void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 428:FWLIB/src/stm32f4xx_usart.c **** {
 623              		.loc 1 428 1 is_stmt 1 view -0
 624              		.cfi_startproc
 625              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 20


 626              		@ frame_needed = 0, uses_anonymous_args = 0
 627              		@ link register save eliminated.
 429:FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
 430:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 628              		.loc 1 430 3 view .LVU191
 431:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 629              		.loc 1 431 3 view .LVU192
 432:FWLIB/src/stm32f4xx_usart.c ****   
 433:FWLIB/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 630              		.loc 1 433 3 view .LVU193
 631              		.loc 1 433 6 is_stmt 0 view .LVU194
 632 0000 29B1     		cbz	r1, .L39
 434:FWLIB/src/stm32f4xx_usart.c ****   {
 435:FWLIB/src/stm32f4xx_usart.c ****     /* Enable the selected USART by setting the UE bit in the CR1 register */
 436:FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_UE;
 633              		.loc 1 436 5 is_stmt 1 view .LVU195
 634              		.loc 1 436 17 is_stmt 0 view .LVU196
 635 0002 8389     		ldrh	r3, [r0, #12]
 636 0004 9BB2     		uxth	r3, r3
 637 0006 43F40053 		orr	r3, r3, #8192
 638 000a 8381     		strh	r3, [r0, #12]	@ movhi
 639 000c 7047     		bx	lr
 640              	.L39:
 437:FWLIB/src/stm32f4xx_usart.c ****   }
 438:FWLIB/src/stm32f4xx_usart.c ****   else
 439:FWLIB/src/stm32f4xx_usart.c ****   {
 440:FWLIB/src/stm32f4xx_usart.c ****     /* Disable the selected USART by clearing the UE bit in the CR1 register */
 441:FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 641              		.loc 1 441 5 is_stmt 1 view .LVU197
 642              		.loc 1 441 17 is_stmt 0 view .LVU198
 643 000e 8389     		ldrh	r3, [r0, #12]
 644 0010 9BB2     		uxth	r3, r3
 645 0012 23F40053 		bic	r3, r3, #8192
 646 0016 9BB2     		uxth	r3, r3
 647 0018 8381     		strh	r3, [r0, #12]	@ movhi
 442:FWLIB/src/stm32f4xx_usart.c ****   }
 443:FWLIB/src/stm32f4xx_usart.c **** }
 648              		.loc 1 443 1 view .LVU199
 649 001a 7047     		bx	lr
 650              		.cfi_endproc
 651              	.LFE128:
 653              		.section	.text.USART_SetPrescaler,"ax",%progbits
 654              		.align	1
 655              		.global	USART_SetPrescaler
 656              		.syntax unified
 657              		.thumb
 658              		.thumb_func
 659              		.fpu fpv4-sp-d16
 661              	USART_SetPrescaler:
 662              	.LVL80:
 663              	.LFB129:
 444:FWLIB/src/stm32f4xx_usart.c **** 
 445:FWLIB/src/stm32f4xx_usart.c **** /**
 446:FWLIB/src/stm32f4xx_usart.c ****   * @brief  Sets the system clock prescaler.
 447:FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 448:FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
 449:FWLIB/src/stm32f4xx_usart.c ****   * @param  USART_Prescaler: specifies the prescaler clock. 
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 21


 450:FWLIB/src/stm32f4xx_usart.c ****   * @note   The function is used for IrDA mode with UART4 and UART5.   
 451:FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 452:FWLIB/src/stm32f4xx_usart.c ****   */
 453:FWLIB/src/stm32f4xx_usart.c **** void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
 454:FWLIB/src/stm32f4xx_usart.c **** { 
 664              		.loc 1 454 1 is_stmt 1 view -0
 665              		.cfi_startproc
 666              		@ args = 0, pretend = 0, frame = 0
 667              		@ frame_needed = 0, uses_anonymous_args = 0
 668              		@ link register save eliminated.
 455:FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
 456:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 669              		.loc 1 456 3 view .LVU201
 457:FWLIB/src/stm32f4xx_usart.c ****   
 458:FWLIB/src/stm32f4xx_usart.c ****   /* Clear the USART prescaler */
 459:FWLIB/src/stm32f4xx_usart.c ****   USARTx->GTPR &= USART_GTPR_GT;
 670              		.loc 1 459 3 view .LVU202
 671              		.loc 1 459 16 is_stmt 0 view .LVU203
 672 0000 028B     		ldrh	r2, [r0, #24]
 673 0002 02F47F42 		and	r2, r2, #65280
 674 0006 0283     		strh	r2, [r0, #24]	@ movhi
 460:FWLIB/src/stm32f4xx_usart.c ****   /* Set the USART prescaler */
 461:FWLIB/src/stm32f4xx_usart.c ****   USARTx->GTPR |= USART_Prescaler;
 675              		.loc 1 461 3 is_stmt 1 view .LVU204
 676              		.loc 1 461 16 is_stmt 0 view .LVU205
 677 0008 038B     		ldrh	r3, [r0, #24]
 678 000a 9BB2     		uxth	r3, r3
 679 000c 0B43     		orrs	r3, r3, r1
 680 000e 0383     		strh	r3, [r0, #24]	@ movhi
 462:FWLIB/src/stm32f4xx_usart.c **** }
 681              		.loc 1 462 1 view .LVU206
 682 0010 7047     		bx	lr
 683              		.cfi_endproc
 684              	.LFE129:
 686              		.section	.text.USART_OverSampling8Cmd,"ax",%progbits
 687              		.align	1
 688              		.global	USART_OverSampling8Cmd
 689              		.syntax unified
 690              		.thumb
 691              		.thumb_func
 692              		.fpu fpv4-sp-d16
 694              	USART_OverSampling8Cmd:
 695              	.LVL81:
 696              	.LFB130:
 463:FWLIB/src/stm32f4xx_usart.c **** 
 464:FWLIB/src/stm32f4xx_usart.c **** /**
 465:FWLIB/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's 8x oversampling mode.
 466:FWLIB/src/stm32f4xx_usart.c ****   * @note   This function has to be called before calling USART_Init() function
 467:FWLIB/src/stm32f4xx_usart.c ****   *         in order to have correct baudrate Divider value.
 468:FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 469:FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
 470:FWLIB/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART 8x oversampling mode.
 471:FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 472:FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 473:FWLIB/src/stm32f4xx_usart.c ****   */
 474:FWLIB/src/stm32f4xx_usart.c **** void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 475:FWLIB/src/stm32f4xx_usart.c **** {
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 22


 697              		.loc 1 475 1 is_stmt 1 view -0
 698              		.cfi_startproc
 699              		@ args = 0, pretend = 0, frame = 0
 700              		@ frame_needed = 0, uses_anonymous_args = 0
 701              		@ link register save eliminated.
 476:FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
 477:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 702              		.loc 1 477 3 view .LVU208
 478:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 703              		.loc 1 478 3 view .LVU209
 479:FWLIB/src/stm32f4xx_usart.c ****   
 480:FWLIB/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 704              		.loc 1 480 3 view .LVU210
 705              		.loc 1 480 6 is_stmt 0 view .LVU211
 706 0000 39B1     		cbz	r1, .L43
 481:FWLIB/src/stm32f4xx_usart.c ****   {
 482:FWLIB/src/stm32f4xx_usart.c ****     /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
 483:FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_OVER8;
 707              		.loc 1 483 5 is_stmt 1 view .LVU212
 708              		.loc 1 483 17 is_stmt 0 view .LVU213
 709 0002 8389     		ldrh	r3, [r0, #12]
 710 0004 6FEA4343 		mvn	r3, r3, lsl #17
 711 0008 6FEA5343 		mvn	r3, r3, lsr #17
 712 000c 9BB2     		uxth	r3, r3
 713 000e 8381     		strh	r3, [r0, #12]	@ movhi
 714 0010 7047     		bx	lr
 715              	.L43:
 484:FWLIB/src/stm32f4xx_usart.c ****   }
 485:FWLIB/src/stm32f4xx_usart.c ****   else
 486:FWLIB/src/stm32f4xx_usart.c ****   {
 487:FWLIB/src/stm32f4xx_usart.c ****     /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
 488:FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 716              		.loc 1 488 5 is_stmt 1 view .LVU214
 717              		.loc 1 488 17 is_stmt 0 view .LVU215
 718 0012 8389     		ldrh	r3, [r0, #12]
 719 0014 C3F30E03 		ubfx	r3, r3, #0, #15
 720 0018 8381     		strh	r3, [r0, #12]	@ movhi
 489:FWLIB/src/stm32f4xx_usart.c ****   }
 490:FWLIB/src/stm32f4xx_usart.c **** }  
 721              		.loc 1 490 1 view .LVU216
 722 001a 7047     		bx	lr
 723              		.cfi_endproc
 724              	.LFE130:
 726              		.section	.text.USART_OneBitMethodCmd,"ax",%progbits
 727              		.align	1
 728              		.global	USART_OneBitMethodCmd
 729              		.syntax unified
 730              		.thumb
 731              		.thumb_func
 732              		.fpu fpv4-sp-d16
 734              	USART_OneBitMethodCmd:
 735              	.LVL82:
 736              	.LFB131:
 491:FWLIB/src/stm32f4xx_usart.c **** 
 492:FWLIB/src/stm32f4xx_usart.c **** /**
 493:FWLIB/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's one bit sampling method.
 494:FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 23


 495:FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
 496:FWLIB/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART one bit sampling method.
 497:FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 498:FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 499:FWLIB/src/stm32f4xx_usart.c ****   */
 500:FWLIB/src/stm32f4xx_usart.c **** void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 501:FWLIB/src/stm32f4xx_usart.c **** {
 737              		.loc 1 501 1 is_stmt 1 view -0
 738              		.cfi_startproc
 739              		@ args = 0, pretend = 0, frame = 0
 740              		@ frame_needed = 0, uses_anonymous_args = 0
 741              		@ link register save eliminated.
 502:FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
 503:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 742              		.loc 1 503 3 view .LVU218
 504:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 743              		.loc 1 504 3 view .LVU219
 505:FWLIB/src/stm32f4xx_usart.c ****   
 506:FWLIB/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 744              		.loc 1 506 3 view .LVU220
 745              		.loc 1 506 6 is_stmt 0 view .LVU221
 746 0000 29B1     		cbz	r1, .L46
 507:FWLIB/src/stm32f4xx_usart.c ****   {
 508:FWLIB/src/stm32f4xx_usart.c ****     /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
 509:FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_ONEBIT;
 747              		.loc 1 509 5 is_stmt 1 view .LVU222
 748              		.loc 1 509 17 is_stmt 0 view .LVU223
 749 0002 838A     		ldrh	r3, [r0, #20]
 750 0004 9BB2     		uxth	r3, r3
 751 0006 43F40063 		orr	r3, r3, #2048
 752 000a 8382     		strh	r3, [r0, #20]	@ movhi
 753 000c 7047     		bx	lr
 754              	.L46:
 510:FWLIB/src/stm32f4xx_usart.c ****   }
 511:FWLIB/src/stm32f4xx_usart.c ****   else
 512:FWLIB/src/stm32f4xx_usart.c ****   {
 513:FWLIB/src/stm32f4xx_usart.c ****     /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
 514:FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 755              		.loc 1 514 5 is_stmt 1 view .LVU224
 756              		.loc 1 514 17 is_stmt 0 view .LVU225
 757 000e 838A     		ldrh	r3, [r0, #20]
 758 0010 9BB2     		uxth	r3, r3
 759 0012 23F40063 		bic	r3, r3, #2048
 760 0016 9BB2     		uxth	r3, r3
 761 0018 8382     		strh	r3, [r0, #20]	@ movhi
 515:FWLIB/src/stm32f4xx_usart.c ****   }
 516:FWLIB/src/stm32f4xx_usart.c **** }
 762              		.loc 1 516 1 view .LVU226
 763 001a 7047     		bx	lr
 764              		.cfi_endproc
 765              	.LFE131:
 767              		.section	.text.USART_SendData,"ax",%progbits
 768              		.align	1
 769              		.global	USART_SendData
 770              		.syntax unified
 771              		.thumb
 772              		.thumb_func
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 24


 773              		.fpu fpv4-sp-d16
 775              	USART_SendData:
 776              	.LVL83:
 777              	.LFB132:
 517:FWLIB/src/stm32f4xx_usart.c **** 
 518:FWLIB/src/stm32f4xx_usart.c **** /**
 519:FWLIB/src/stm32f4xx_usart.c ****   * @}
 520:FWLIB/src/stm32f4xx_usart.c ****   */
 521:FWLIB/src/stm32f4xx_usart.c **** 
 522:FWLIB/src/stm32f4xx_usart.c **** /** @defgroup USART_Group2 Data transfers functions
 523:FWLIB/src/stm32f4xx_usart.c ****  *  @brief   Data transfers functions 
 524:FWLIB/src/stm32f4xx_usart.c ****  *
 525:FWLIB/src/stm32f4xx_usart.c **** @verbatim   
 526:FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================
 527:FWLIB/src/stm32f4xx_usart.c ****                       ##### Data transfers functions #####
 528:FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================  
 529:FWLIB/src/stm32f4xx_usart.c ****     [..]
 530:FWLIB/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART data 
 531:FWLIB/src/stm32f4xx_usart.c ****     transfers.
 532:FWLIB/src/stm32f4xx_usart.c ****     [..]
 533:FWLIB/src/stm32f4xx_usart.c ****     During an USART reception, data shifts in least significant bit first through 
 534:FWLIB/src/stm32f4xx_usart.c ****     the RX pin. In this mode, the USART_DR register consists of a buffer (RDR) 
 535:FWLIB/src/stm32f4xx_usart.c ****     between the internal bus and the received shift register.
 536:FWLIB/src/stm32f4xx_usart.c ****     [..]
 537:FWLIB/src/stm32f4xx_usart.c ****     When a transmission is taking place, a write instruction to the USART_DR register 
 538:FWLIB/src/stm32f4xx_usart.c ****     stores the data in the TDR register and which is copied in the shift register 
 539:FWLIB/src/stm32f4xx_usart.c ****     at the end of the current transmission.
 540:FWLIB/src/stm32f4xx_usart.c ****     [..]
 541:FWLIB/src/stm32f4xx_usart.c ****     The read access of the USART_DR register can be done using the USART_ReceiveData()
 542:FWLIB/src/stm32f4xx_usart.c ****     function and returns the RDR buffered value. Whereas a write access to the USART_DR 
 543:FWLIB/src/stm32f4xx_usart.c ****     can be done using USART_SendData() function and stores the written data into 
 544:FWLIB/src/stm32f4xx_usart.c ****     TDR buffer.
 545:FWLIB/src/stm32f4xx_usart.c **** 
 546:FWLIB/src/stm32f4xx_usart.c **** @endverbatim
 547:FWLIB/src/stm32f4xx_usart.c ****   * @{
 548:FWLIB/src/stm32f4xx_usart.c ****   */
 549:FWLIB/src/stm32f4xx_usart.c **** 
 550:FWLIB/src/stm32f4xx_usart.c **** /**
 551:FWLIB/src/stm32f4xx_usart.c ****   * @brief  Transmits single data through the USARTx peripheral.
 552:FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 553:FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
 554:FWLIB/src/stm32f4xx_usart.c ****   * @param  Data: the data to transmit.
 555:FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 556:FWLIB/src/stm32f4xx_usart.c ****   */
 557:FWLIB/src/stm32f4xx_usart.c **** void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
 558:FWLIB/src/stm32f4xx_usart.c **** {
 778              		.loc 1 558 1 is_stmt 1 view -0
 779              		.cfi_startproc
 780              		@ args = 0, pretend = 0, frame = 0
 781              		@ frame_needed = 0, uses_anonymous_args = 0
 782              		@ link register save eliminated.
 559:FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
 560:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 783              		.loc 1 560 3 view .LVU228
 561:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_DATA(Data)); 
 784              		.loc 1 561 3 view .LVU229
 562:FWLIB/src/stm32f4xx_usart.c ****     
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 25


 563:FWLIB/src/stm32f4xx_usart.c ****   /* Transmit Data */
 564:FWLIB/src/stm32f4xx_usart.c ****   USARTx->DR = (Data & (uint16_t)0x01FF);
 785              		.loc 1 564 3 view .LVU230
 786              		.loc 1 564 22 is_stmt 0 view .LVU231
 787 0000 C1F30801 		ubfx	r1, r1, #0, #9
 788              	.LVL84:
 789              		.loc 1 564 14 view .LVU232
 790 0004 8180     		strh	r1, [r0, #4]	@ movhi
 565:FWLIB/src/stm32f4xx_usart.c **** }
 791              		.loc 1 565 1 view .LVU233
 792 0006 7047     		bx	lr
 793              		.cfi_endproc
 794              	.LFE132:
 796              		.section	.text.USART_ReceiveData,"ax",%progbits
 797              		.align	1
 798              		.global	USART_ReceiveData
 799              		.syntax unified
 800              		.thumb
 801              		.thumb_func
 802              		.fpu fpv4-sp-d16
 804              	USART_ReceiveData:
 805              	.LVL85:
 806              	.LFB133:
 566:FWLIB/src/stm32f4xx_usart.c **** 
 567:FWLIB/src/stm32f4xx_usart.c **** /**
 568:FWLIB/src/stm32f4xx_usart.c ****   * @brief  Returns the most recent received data by the USARTx peripheral.
 569:FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 570:FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
 571:FWLIB/src/stm32f4xx_usart.c ****   * @retval The received data.
 572:FWLIB/src/stm32f4xx_usart.c ****   */
 573:FWLIB/src/stm32f4xx_usart.c **** uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
 574:FWLIB/src/stm32f4xx_usart.c **** {
 807              		.loc 1 574 1 is_stmt 1 view -0
 808              		.cfi_startproc
 809              		@ args = 0, pretend = 0, frame = 0
 810              		@ frame_needed = 0, uses_anonymous_args = 0
 811              		@ link register save eliminated.
 575:FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
 576:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 812              		.loc 1 576 3 view .LVU235
 577:FWLIB/src/stm32f4xx_usart.c ****   
 578:FWLIB/src/stm32f4xx_usart.c ****   /* Receive Data */
 579:FWLIB/src/stm32f4xx_usart.c ****   return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 813              		.loc 1 579 3 view .LVU236
 814              		.loc 1 579 27 is_stmt 0 view .LVU237
 815 0000 8088     		ldrh	r0, [r0, #4]
 816              	.LVL86:
 580:FWLIB/src/stm32f4xx_usart.c **** }
 817              		.loc 1 580 1 view .LVU238
 818 0002 C0F30800 		ubfx	r0, r0, #0, #9
 819 0006 7047     		bx	lr
 820              		.cfi_endproc
 821              	.LFE133:
 823              		.section	.text.USART_SetAddress,"ax",%progbits
 824              		.align	1
 825              		.global	USART_SetAddress
 826              		.syntax unified
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 26


 827              		.thumb
 828              		.thumb_func
 829              		.fpu fpv4-sp-d16
 831              	USART_SetAddress:
 832              	.LVL87:
 833              	.LFB134:
 581:FWLIB/src/stm32f4xx_usart.c **** 
 582:FWLIB/src/stm32f4xx_usart.c **** /**
 583:FWLIB/src/stm32f4xx_usart.c ****   * @}
 584:FWLIB/src/stm32f4xx_usart.c ****   */
 585:FWLIB/src/stm32f4xx_usart.c **** 
 586:FWLIB/src/stm32f4xx_usart.c **** /** @defgroup USART_Group3 MultiProcessor Communication functions
 587:FWLIB/src/stm32f4xx_usart.c ****  *  @brief   Multi-Processor Communication functions 
 588:FWLIB/src/stm32f4xx_usart.c ****  *
 589:FWLIB/src/stm32f4xx_usart.c **** @verbatim   
 590:FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================
 591:FWLIB/src/stm32f4xx_usart.c ****               ##### Multi-Processor Communication functions #####
 592:FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================  
 593:FWLIB/src/stm32f4xx_usart.c ****     [..]
 594:FWLIB/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART 
 595:FWLIB/src/stm32f4xx_usart.c ****     multiprocessor communication.
 596:FWLIB/src/stm32f4xx_usart.c ****     [..]
 597:FWLIB/src/stm32f4xx_usart.c ****     For instance one of the USARTs can be the master, its TX output is connected 
 598:FWLIB/src/stm32f4xx_usart.c ****     to the RX input of the other USART. The others are slaves, their respective 
 599:FWLIB/src/stm32f4xx_usart.c ****     TX outputs are logically ANDed together and connected to the RX input of the 
 600:FWLIB/src/stm32f4xx_usart.c ****     master.
 601:FWLIB/src/stm32f4xx_usart.c ****     [..]
 602:FWLIB/src/stm32f4xx_usart.c ****     USART multiprocessor communication is possible through the following procedure:
 603:FWLIB/src/stm32f4xx_usart.c ****       (#) Program the Baud rate, Word length = 9 bits, Stop bits, Parity, Mode 
 604:FWLIB/src/stm32f4xx_usart.c ****           transmitter or Mode receiver and hardware flow control values using 
 605:FWLIB/src/stm32f4xx_usart.c ****           the USART_Init() function.
 606:FWLIB/src/stm32f4xx_usart.c ****       (#) Configures the USART address using the USART_SetAddress() function.
 607:FWLIB/src/stm32f4xx_usart.c ****       (#) Configures the wake up method (USART_WakeUp_IdleLine or USART_WakeUp_AddressMark)
 608:FWLIB/src/stm32f4xx_usart.c ****           using USART_WakeUpConfig() function only for the slaves.
 609:FWLIB/src/stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
 610:FWLIB/src/stm32f4xx_usart.c ****       (#) Enter the USART slaves in mute mode using USART_ReceiverWakeUpCmd() function.
 611:FWLIB/src/stm32f4xx_usart.c ****     [..]
 612:FWLIB/src/stm32f4xx_usart.c ****     The USART Slave exit from mute mode when receive the wake up condition.
 613:FWLIB/src/stm32f4xx_usart.c **** 
 614:FWLIB/src/stm32f4xx_usart.c **** @endverbatim
 615:FWLIB/src/stm32f4xx_usart.c ****   * @{
 616:FWLIB/src/stm32f4xx_usart.c ****   */
 617:FWLIB/src/stm32f4xx_usart.c **** 
 618:FWLIB/src/stm32f4xx_usart.c **** /**
 619:FWLIB/src/stm32f4xx_usart.c ****   * @brief  Sets the address of the USART node.
 620:FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 621:FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
 622:FWLIB/src/stm32f4xx_usart.c ****   * @param  USART_Address: Indicates the address of the USART node.
 623:FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 624:FWLIB/src/stm32f4xx_usart.c ****   */
 625:FWLIB/src/stm32f4xx_usart.c **** void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
 626:FWLIB/src/stm32f4xx_usart.c **** {
 834              		.loc 1 626 1 is_stmt 1 view -0
 835              		.cfi_startproc
 836              		@ args = 0, pretend = 0, frame = 0
 837              		@ frame_needed = 0, uses_anonymous_args = 0
 838              		@ link register save eliminated.
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 27


 627:FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
 628:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 839              		.loc 1 628 3 view .LVU240
 629:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ADDRESS(USART_Address)); 
 840              		.loc 1 629 3 view .LVU241
 630:FWLIB/src/stm32f4xx_usart.c ****     
 631:FWLIB/src/stm32f4xx_usart.c ****   /* Clear the USART address */
 632:FWLIB/src/stm32f4xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 841              		.loc 1 632 3 view .LVU242
 842              		.loc 1 632 15 is_stmt 0 view .LVU243
 843 0000 038A     		ldrh	r3, [r0, #16]
 844 0002 9BB2     		uxth	r3, r3
 845 0004 23F00F03 		bic	r3, r3, #15
 846 0008 9BB2     		uxth	r3, r3
 847 000a 0382     		strh	r3, [r0, #16]	@ movhi
 633:FWLIB/src/stm32f4xx_usart.c ****   /* Set the USART address node */
 634:FWLIB/src/stm32f4xx_usart.c ****   USARTx->CR2 |= USART_Address;
 848              		.loc 1 634 3 is_stmt 1 view .LVU244
 849              		.loc 1 634 15 is_stmt 0 view .LVU245
 850 000c 038A     		ldrh	r3, [r0, #16]
 851 000e 9BB2     		uxth	r3, r3
 852 0010 0B43     		orrs	r3, r3, r1
 853 0012 0382     		strh	r3, [r0, #16]	@ movhi
 635:FWLIB/src/stm32f4xx_usart.c **** }
 854              		.loc 1 635 1 view .LVU246
 855 0014 7047     		bx	lr
 856              		.cfi_endproc
 857              	.LFE134:
 859              		.section	.text.USART_ReceiverWakeUpCmd,"ax",%progbits
 860              		.align	1
 861              		.global	USART_ReceiverWakeUpCmd
 862              		.syntax unified
 863              		.thumb
 864              		.thumb_func
 865              		.fpu fpv4-sp-d16
 867              	USART_ReceiverWakeUpCmd:
 868              	.LVL88:
 869              	.LFB135:
 636:FWLIB/src/stm32f4xx_usart.c **** 
 637:FWLIB/src/stm32f4xx_usart.c **** /**
 638:FWLIB/src/stm32f4xx_usart.c ****   * @brief  Determines if the USART is in mute mode or not.
 639:FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 640:FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
 641:FWLIB/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART mute mode.
 642:FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 643:FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 644:FWLIB/src/stm32f4xx_usart.c ****   */
 645:FWLIB/src/stm32f4xx_usart.c **** void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 646:FWLIB/src/stm32f4xx_usart.c **** {
 870              		.loc 1 646 1 is_stmt 1 view -0
 871              		.cfi_startproc
 872              		@ args = 0, pretend = 0, frame = 0
 873              		@ frame_needed = 0, uses_anonymous_args = 0
 874              		@ link register save eliminated.
 647:FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
 648:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 875              		.loc 1 648 3 view .LVU248
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 28


 649:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 876              		.loc 1 649 3 view .LVU249
 650:FWLIB/src/stm32f4xx_usart.c ****   
 651:FWLIB/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 877              		.loc 1 651 3 view .LVU250
 878              		.loc 1 651 6 is_stmt 0 view .LVU251
 879 0000 29B1     		cbz	r1, .L52
 652:FWLIB/src/stm32f4xx_usart.c ****   {
 653:FWLIB/src/stm32f4xx_usart.c ****     /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
 654:FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_RWU;
 880              		.loc 1 654 5 is_stmt 1 view .LVU252
 881              		.loc 1 654 17 is_stmt 0 view .LVU253
 882 0002 8389     		ldrh	r3, [r0, #12]
 883 0004 9BB2     		uxth	r3, r3
 884 0006 43F00203 		orr	r3, r3, #2
 885 000a 8381     		strh	r3, [r0, #12]	@ movhi
 886 000c 7047     		bx	lr
 887              	.L52:
 655:FWLIB/src/stm32f4xx_usart.c ****   }
 656:FWLIB/src/stm32f4xx_usart.c ****   else
 657:FWLIB/src/stm32f4xx_usart.c ****   {
 658:FWLIB/src/stm32f4xx_usart.c ****     /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
 659:FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 888              		.loc 1 659 5 is_stmt 1 view .LVU254
 889              		.loc 1 659 17 is_stmt 0 view .LVU255
 890 000e 8389     		ldrh	r3, [r0, #12]
 891 0010 9BB2     		uxth	r3, r3
 892 0012 23F00203 		bic	r3, r3, #2
 893 0016 9BB2     		uxth	r3, r3
 894 0018 8381     		strh	r3, [r0, #12]	@ movhi
 660:FWLIB/src/stm32f4xx_usart.c ****   }
 661:FWLIB/src/stm32f4xx_usart.c **** }
 895              		.loc 1 661 1 view .LVU256
 896 001a 7047     		bx	lr
 897              		.cfi_endproc
 898              	.LFE135:
 900              		.section	.text.USART_WakeUpConfig,"ax",%progbits
 901              		.align	1
 902              		.global	USART_WakeUpConfig
 903              		.syntax unified
 904              		.thumb
 905              		.thumb_func
 906              		.fpu fpv4-sp-d16
 908              	USART_WakeUpConfig:
 909              	.LVL89:
 910              	.LFB136:
 662:FWLIB/src/stm32f4xx_usart.c **** /**
 663:FWLIB/src/stm32f4xx_usart.c ****   * @brief  Selects the USART WakeUp method.
 664:FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 665:FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
 666:FWLIB/src/stm32f4xx_usart.c ****   * @param  USART_WakeUp: specifies the USART wakeup method.
 667:FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
 668:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
 669:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
 670:FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 671:FWLIB/src/stm32f4xx_usart.c ****   */
 672:FWLIB/src/stm32f4xx_usart.c **** void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 29


 673:FWLIB/src/stm32f4xx_usart.c **** {
 911              		.loc 1 673 1 is_stmt 1 view -0
 912              		.cfi_startproc
 913              		@ args = 0, pretend = 0, frame = 0
 914              		@ frame_needed = 0, uses_anonymous_args = 0
 915              		@ link register save eliminated.
 674:FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
 675:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 916              		.loc 1 675 3 view .LVU258
 676:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_WAKEUP(USART_WakeUp));
 917              		.loc 1 676 3 view .LVU259
 677:FWLIB/src/stm32f4xx_usart.c ****   
 678:FWLIB/src/stm32f4xx_usart.c ****   USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 918              		.loc 1 678 3 view .LVU260
 919              		.loc 1 678 15 is_stmt 0 view .LVU261
 920 0000 8389     		ldrh	r3, [r0, #12]
 921 0002 9BB2     		uxth	r3, r3
 922 0004 23F40063 		bic	r3, r3, #2048
 923 0008 9BB2     		uxth	r3, r3
 924 000a 8381     		strh	r3, [r0, #12]	@ movhi
 679:FWLIB/src/stm32f4xx_usart.c ****   USARTx->CR1 |= USART_WakeUp;
 925              		.loc 1 679 3 is_stmt 1 view .LVU262
 926              		.loc 1 679 15 is_stmt 0 view .LVU263
 927 000c 8389     		ldrh	r3, [r0, #12]
 928 000e 9BB2     		uxth	r3, r3
 929 0010 0B43     		orrs	r3, r3, r1
 930 0012 8381     		strh	r3, [r0, #12]	@ movhi
 680:FWLIB/src/stm32f4xx_usart.c **** }
 931              		.loc 1 680 1 view .LVU264
 932 0014 7047     		bx	lr
 933              		.cfi_endproc
 934              	.LFE136:
 936              		.section	.text.USART_LINBreakDetectLengthConfig,"ax",%progbits
 937              		.align	1
 938              		.global	USART_LINBreakDetectLengthConfig
 939              		.syntax unified
 940              		.thumb
 941              		.thumb_func
 942              		.fpu fpv4-sp-d16
 944              	USART_LINBreakDetectLengthConfig:
 945              	.LVL90:
 946              	.LFB137:
 681:FWLIB/src/stm32f4xx_usart.c **** 
 682:FWLIB/src/stm32f4xx_usart.c **** /**
 683:FWLIB/src/stm32f4xx_usart.c ****   * @}
 684:FWLIB/src/stm32f4xx_usart.c ****   */
 685:FWLIB/src/stm32f4xx_usart.c **** 
 686:FWLIB/src/stm32f4xx_usart.c **** /** @defgroup USART_Group4 LIN mode functions
 687:FWLIB/src/stm32f4xx_usart.c ****  *  @brief   LIN mode functions 
 688:FWLIB/src/stm32f4xx_usart.c ****  *
 689:FWLIB/src/stm32f4xx_usart.c **** @verbatim   
 690:FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================
 691:FWLIB/src/stm32f4xx_usart.c ****                         ##### LIN mode functions #####
 692:FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================  
 693:FWLIB/src/stm32f4xx_usart.c ****     [..]
 694:FWLIB/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART LIN 
 695:FWLIB/src/stm32f4xx_usart.c ****     Mode communication.
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 30


 696:FWLIB/src/stm32f4xx_usart.c ****     [..]
 697:FWLIB/src/stm32f4xx_usart.c ****     In LIN mode, 8-bit data format with 1 stop bit is required in accordance with 
 698:FWLIB/src/stm32f4xx_usart.c ****     the LIN standard.
 699:FWLIB/src/stm32f4xx_usart.c ****     [..]
 700:FWLIB/src/stm32f4xx_usart.c ****     Only this LIN Feature is supported by the USART IP:
 701:FWLIB/src/stm32f4xx_usart.c ****       (+) LIN Master Synchronous Break send capability and LIN slave break detection
 702:FWLIB/src/stm32f4xx_usart.c ****           capability :  13-bit break generation and 10/11 bit break detection
 703:FWLIB/src/stm32f4xx_usart.c **** 
 704:FWLIB/src/stm32f4xx_usart.c ****     [..]
 705:FWLIB/src/stm32f4xx_usart.c ****     USART LIN Master transmitter communication is possible through the following 
 706:FWLIB/src/stm32f4xx_usart.c ****     procedure:
 707:FWLIB/src/stm32f4xx_usart.c ****       (#) Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 708:FWLIB/src/stm32f4xx_usart.c ****         Mode transmitter or Mode receiver and hardware flow control values using 
 709:FWLIB/src/stm32f4xx_usart.c ****         the USART_Init() function.
 710:FWLIB/src/stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
 711:FWLIB/src/stm32f4xx_usart.c ****       (#) Enable the LIN mode using the USART_LINCmd() function.
 712:FWLIB/src/stm32f4xx_usart.c ****       (#) Send the break character using USART_SendBreak() function.
 713:FWLIB/src/stm32f4xx_usart.c ****     [..]
 714:FWLIB/src/stm32f4xx_usart.c ****     USART LIN Master receiver communication is possible through the following procedure:
 715:FWLIB/src/stm32f4xx_usart.c ****       (#) Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 716:FWLIB/src/stm32f4xx_usart.c ****           Mode transmitter or Mode receiver and hardware flow control values using 
 717:FWLIB/src/stm32f4xx_usart.c ****           the USART_Init() function.
 718:FWLIB/src/stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
 719:FWLIB/src/stm32f4xx_usart.c ****       (#) Configures the break detection length using the USART_LINBreakDetectLengthConfig()
 720:FWLIB/src/stm32f4xx_usart.c ****           function.
 721:FWLIB/src/stm32f4xx_usart.c ****       (#) Enable the LIN mode using the USART_LINCmd() function.
 722:FWLIB/src/stm32f4xx_usart.c **** 
 723:FWLIB/src/stm32f4xx_usart.c ****       -@- In LIN mode, the following bits must be kept cleared:
 724:FWLIB/src/stm32f4xx_usart.c ****        (+@) CLKEN in the USART_CR2 register,
 725:FWLIB/src/stm32f4xx_usart.c ****        (+@) STOP[1:0], SCEN, HDSEL and IREN in the USART_CR3 register.
 726:FWLIB/src/stm32f4xx_usart.c **** 
 727:FWLIB/src/stm32f4xx_usart.c **** @endverbatim
 728:FWLIB/src/stm32f4xx_usart.c ****   * @{
 729:FWLIB/src/stm32f4xx_usart.c ****   */
 730:FWLIB/src/stm32f4xx_usart.c **** 
 731:FWLIB/src/stm32f4xx_usart.c **** /**
 732:FWLIB/src/stm32f4xx_usart.c ****   * @brief  Sets the USART LIN Break detection length.
 733:FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 734:FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
 735:FWLIB/src/stm32f4xx_usart.c ****   * @param  USART_LINBreakDetectLength: specifies the LIN break detection length.
 736:FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
 737:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
 738:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
 739:FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 740:FWLIB/src/stm32f4xx_usart.c ****   */
 741:FWLIB/src/stm32f4xx_usart.c **** void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
 742:FWLIB/src/stm32f4xx_usart.c **** {
 947              		.loc 1 742 1 is_stmt 1 view -0
 948              		.cfi_startproc
 949              		@ args = 0, pretend = 0, frame = 0
 950              		@ frame_needed = 0, uses_anonymous_args = 0
 951              		@ link register save eliminated.
 743:FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
 744:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 952              		.loc 1 744 3 view .LVU266
 745:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
 953              		.loc 1 745 3 view .LVU267
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 31


 746:FWLIB/src/stm32f4xx_usart.c ****   
 747:FWLIB/src/stm32f4xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 954              		.loc 1 747 3 view .LVU268
 955              		.loc 1 747 15 is_stmt 0 view .LVU269
 956 0000 038A     		ldrh	r3, [r0, #16]
 957 0002 9BB2     		uxth	r3, r3
 958 0004 23F02003 		bic	r3, r3, #32
 959 0008 9BB2     		uxth	r3, r3
 960 000a 0382     		strh	r3, [r0, #16]	@ movhi
 748:FWLIB/src/stm32f4xx_usart.c ****   USARTx->CR2 |= USART_LINBreakDetectLength;  
 961              		.loc 1 748 3 is_stmt 1 view .LVU270
 962              		.loc 1 748 15 is_stmt 0 view .LVU271
 963 000c 038A     		ldrh	r3, [r0, #16]
 964 000e 9BB2     		uxth	r3, r3
 965 0010 0B43     		orrs	r3, r3, r1
 966 0012 0382     		strh	r3, [r0, #16]	@ movhi
 749:FWLIB/src/stm32f4xx_usart.c **** }
 967              		.loc 1 749 1 view .LVU272
 968 0014 7047     		bx	lr
 969              		.cfi_endproc
 970              	.LFE137:
 972              		.section	.text.USART_LINCmd,"ax",%progbits
 973              		.align	1
 974              		.global	USART_LINCmd
 975              		.syntax unified
 976              		.thumb
 977              		.thumb_func
 978              		.fpu fpv4-sp-d16
 980              	USART_LINCmd:
 981              	.LVL91:
 982              	.LFB138:
 750:FWLIB/src/stm32f4xx_usart.c **** 
 751:FWLIB/src/stm32f4xx_usart.c **** /**
 752:FWLIB/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's LIN mode.
 753:FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 754:FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
 755:FWLIB/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART LIN mode.
 756:FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 757:FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 758:FWLIB/src/stm32f4xx_usart.c ****   */
 759:FWLIB/src/stm32f4xx_usart.c **** void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 760:FWLIB/src/stm32f4xx_usart.c **** {
 983              		.loc 1 760 1 is_stmt 1 view -0
 984              		.cfi_startproc
 985              		@ args = 0, pretend = 0, frame = 0
 986              		@ frame_needed = 0, uses_anonymous_args = 0
 987              		@ link register save eliminated.
 761:FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
 762:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 988              		.loc 1 762 3 view .LVU274
 763:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 989              		.loc 1 763 3 view .LVU275
 764:FWLIB/src/stm32f4xx_usart.c ****   
 765:FWLIB/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 990              		.loc 1 765 3 view .LVU276
 991              		.loc 1 765 6 is_stmt 0 view .LVU277
 992 0000 29B1     		cbz	r1, .L57
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 32


 766:FWLIB/src/stm32f4xx_usart.c ****   {
 767:FWLIB/src/stm32f4xx_usart.c ****     /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 768:FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR2 |= USART_CR2_LINEN;
 993              		.loc 1 768 5 is_stmt 1 view .LVU278
 994              		.loc 1 768 17 is_stmt 0 view .LVU279
 995 0002 038A     		ldrh	r3, [r0, #16]
 996 0004 9BB2     		uxth	r3, r3
 997 0006 43F48043 		orr	r3, r3, #16384
 998 000a 0382     		strh	r3, [r0, #16]	@ movhi
 999 000c 7047     		bx	lr
 1000              	.L57:
 769:FWLIB/src/stm32f4xx_usart.c ****   }
 770:FWLIB/src/stm32f4xx_usart.c ****   else
 771:FWLIB/src/stm32f4xx_usart.c ****   {
 772:FWLIB/src/stm32f4xx_usart.c ****     /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
 773:FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 1001              		.loc 1 773 5 is_stmt 1 view .LVU280
 1002              		.loc 1 773 17 is_stmt 0 view .LVU281
 1003 000e 038A     		ldrh	r3, [r0, #16]
 1004 0010 9BB2     		uxth	r3, r3
 1005 0012 23F48043 		bic	r3, r3, #16384
 1006 0016 9BB2     		uxth	r3, r3
 1007 0018 0382     		strh	r3, [r0, #16]	@ movhi
 774:FWLIB/src/stm32f4xx_usart.c ****   }
 775:FWLIB/src/stm32f4xx_usart.c **** }
 1008              		.loc 1 775 1 view .LVU282
 1009 001a 7047     		bx	lr
 1010              		.cfi_endproc
 1011              	.LFE138:
 1013              		.section	.text.USART_SendBreak,"ax",%progbits
 1014              		.align	1
 1015              		.global	USART_SendBreak
 1016              		.syntax unified
 1017              		.thumb
 1018              		.thumb_func
 1019              		.fpu fpv4-sp-d16
 1021              	USART_SendBreak:
 1022              	.LVL92:
 1023              	.LFB139:
 776:FWLIB/src/stm32f4xx_usart.c **** 
 777:FWLIB/src/stm32f4xx_usart.c **** /**
 778:FWLIB/src/stm32f4xx_usart.c ****   * @brief  Transmits break characters.
 779:FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 780:FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
 781:FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 782:FWLIB/src/stm32f4xx_usart.c ****   */
 783:FWLIB/src/stm32f4xx_usart.c **** void USART_SendBreak(USART_TypeDef* USARTx)
 784:FWLIB/src/stm32f4xx_usart.c **** {
 1024              		.loc 1 784 1 is_stmt 1 view -0
 1025              		.cfi_startproc
 1026              		@ args = 0, pretend = 0, frame = 0
 1027              		@ frame_needed = 0, uses_anonymous_args = 0
 1028              		@ link register save eliminated.
 785:FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
 786:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1029              		.loc 1 786 3 view .LVU284
 787:FWLIB/src/stm32f4xx_usart.c ****   
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 33


 788:FWLIB/src/stm32f4xx_usart.c ****   /* Send break characters */
 789:FWLIB/src/stm32f4xx_usart.c ****   USARTx->CR1 |= USART_CR1_SBK;
 1030              		.loc 1 789 3 view .LVU285
 1031              		.loc 1 789 15 is_stmt 0 view .LVU286
 1032 0000 8389     		ldrh	r3, [r0, #12]
 1033 0002 9BB2     		uxth	r3, r3
 1034 0004 43F00103 		orr	r3, r3, #1
 1035 0008 8381     		strh	r3, [r0, #12]	@ movhi
 790:FWLIB/src/stm32f4xx_usart.c **** }
 1036              		.loc 1 790 1 view .LVU287
 1037 000a 7047     		bx	lr
 1038              		.cfi_endproc
 1039              	.LFE139:
 1041              		.section	.text.USART_HalfDuplexCmd,"ax",%progbits
 1042              		.align	1
 1043              		.global	USART_HalfDuplexCmd
 1044              		.syntax unified
 1045              		.thumb
 1046              		.thumb_func
 1047              		.fpu fpv4-sp-d16
 1049              	USART_HalfDuplexCmd:
 1050              	.LVL93:
 1051              	.LFB140:
 791:FWLIB/src/stm32f4xx_usart.c **** 
 792:FWLIB/src/stm32f4xx_usart.c **** /**
 793:FWLIB/src/stm32f4xx_usart.c ****   * @}
 794:FWLIB/src/stm32f4xx_usart.c ****   */
 795:FWLIB/src/stm32f4xx_usart.c **** 
 796:FWLIB/src/stm32f4xx_usart.c **** /** @defgroup USART_Group5 Halfduplex mode function
 797:FWLIB/src/stm32f4xx_usart.c ****  *  @brief   Half-duplex mode function 
 798:FWLIB/src/stm32f4xx_usart.c ****  *
 799:FWLIB/src/stm32f4xx_usart.c **** @verbatim   
 800:FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================
 801:FWLIB/src/stm32f4xx_usart.c ****                     ##### Half-duplex mode function #####
 802:FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================  
 803:FWLIB/src/stm32f4xx_usart.c ****     [..]
 804:FWLIB/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART 
 805:FWLIB/src/stm32f4xx_usart.c ****     Half-duplex communication.
 806:FWLIB/src/stm32f4xx_usart.c ****     [..]
 807:FWLIB/src/stm32f4xx_usart.c ****     The USART can be configured to follow a single-wire half-duplex protocol where 
 808:FWLIB/src/stm32f4xx_usart.c ****     the TX and RX lines are internally connected.
 809:FWLIB/src/stm32f4xx_usart.c ****     [..]
 810:FWLIB/src/stm32f4xx_usart.c ****     USART Half duplex communication is possible through the following procedure:
 811:FWLIB/src/stm32f4xx_usart.c ****       (#) Program the Baud rate, Word length, Stop bits, Parity, Mode transmitter 
 812:FWLIB/src/stm32f4xx_usart.c ****           or Mode receiver and hardware flow control values using the USART_Init()
 813:FWLIB/src/stm32f4xx_usart.c ****           function.
 814:FWLIB/src/stm32f4xx_usart.c ****       (#) Configures the USART address using the USART_SetAddress() function.
 815:FWLIB/src/stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
 816:FWLIB/src/stm32f4xx_usart.c ****       (#) Enable the half duplex mode using USART_HalfDuplexCmd() function.
 817:FWLIB/src/stm32f4xx_usart.c **** 
 818:FWLIB/src/stm32f4xx_usart.c **** 
 819:FWLIB/src/stm32f4xx_usart.c ****     -@- The RX pin is no longer used
 820:FWLIB/src/stm32f4xx_usart.c ****     -@- In Half-duplex mode the following bits must be kept cleared:
 821:FWLIB/src/stm32f4xx_usart.c ****       (+@) LINEN and CLKEN bits in the USART_CR2 register.
 822:FWLIB/src/stm32f4xx_usart.c ****       (+@) SCEN and IREN bits in the USART_CR3 register.
 823:FWLIB/src/stm32f4xx_usart.c **** 
 824:FWLIB/src/stm32f4xx_usart.c **** @endverbatim
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 34


 825:FWLIB/src/stm32f4xx_usart.c ****   * @{
 826:FWLIB/src/stm32f4xx_usart.c ****   */
 827:FWLIB/src/stm32f4xx_usart.c **** 
 828:FWLIB/src/stm32f4xx_usart.c **** /**
 829:FWLIB/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's Half Duplex communication.
 830:FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 831:FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
 832:FWLIB/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART Communication.
 833:FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 834:FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 835:FWLIB/src/stm32f4xx_usart.c ****   */
 836:FWLIB/src/stm32f4xx_usart.c **** void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 837:FWLIB/src/stm32f4xx_usart.c **** {
 1052              		.loc 1 837 1 is_stmt 1 view -0
 1053              		.cfi_startproc
 1054              		@ args = 0, pretend = 0, frame = 0
 1055              		@ frame_needed = 0, uses_anonymous_args = 0
 1056              		@ link register save eliminated.
 838:FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
 839:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1057              		.loc 1 839 3 view .LVU289
 840:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1058              		.loc 1 840 3 view .LVU290
 841:FWLIB/src/stm32f4xx_usart.c ****   
 842:FWLIB/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1059              		.loc 1 842 3 view .LVU291
 1060              		.loc 1 842 6 is_stmt 0 view .LVU292
 1061 0000 29B1     		cbz	r1, .L61
 843:FWLIB/src/stm32f4xx_usart.c ****   {
 844:FWLIB/src/stm32f4xx_usart.c ****     /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 845:FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_HDSEL;
 1062              		.loc 1 845 5 is_stmt 1 view .LVU293
 1063              		.loc 1 845 17 is_stmt 0 view .LVU294
 1064 0002 838A     		ldrh	r3, [r0, #20]
 1065 0004 9BB2     		uxth	r3, r3
 1066 0006 43F00803 		orr	r3, r3, #8
 1067 000a 8382     		strh	r3, [r0, #20]	@ movhi
 1068 000c 7047     		bx	lr
 1069              	.L61:
 846:FWLIB/src/stm32f4xx_usart.c ****   }
 847:FWLIB/src/stm32f4xx_usart.c ****   else
 848:FWLIB/src/stm32f4xx_usart.c ****   {
 849:FWLIB/src/stm32f4xx_usart.c ****     /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
 850:FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 1070              		.loc 1 850 5 is_stmt 1 view .LVU295
 1071              		.loc 1 850 17 is_stmt 0 view .LVU296
 1072 000e 838A     		ldrh	r3, [r0, #20]
 1073 0010 9BB2     		uxth	r3, r3
 1074 0012 23F00803 		bic	r3, r3, #8
 1075 0016 9BB2     		uxth	r3, r3
 1076 0018 8382     		strh	r3, [r0, #20]	@ movhi
 851:FWLIB/src/stm32f4xx_usart.c ****   }
 852:FWLIB/src/stm32f4xx_usart.c **** }
 1077              		.loc 1 852 1 view .LVU297
 1078 001a 7047     		bx	lr
 1079              		.cfi_endproc
 1080              	.LFE140:
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 35


 1082              		.section	.text.USART_SetGuardTime,"ax",%progbits
 1083              		.align	1
 1084              		.global	USART_SetGuardTime
 1085              		.syntax unified
 1086              		.thumb
 1087              		.thumb_func
 1088              		.fpu fpv4-sp-d16
 1090              	USART_SetGuardTime:
 1091              	.LVL94:
 1092              	.LFB141:
 853:FWLIB/src/stm32f4xx_usart.c **** 
 854:FWLIB/src/stm32f4xx_usart.c **** /**
 855:FWLIB/src/stm32f4xx_usart.c ****   * @}
 856:FWLIB/src/stm32f4xx_usart.c ****   */
 857:FWLIB/src/stm32f4xx_usart.c **** 
 858:FWLIB/src/stm32f4xx_usart.c **** 
 859:FWLIB/src/stm32f4xx_usart.c **** /** @defgroup USART_Group6 Smartcard mode functions
 860:FWLIB/src/stm32f4xx_usart.c ****  *  @brief   Smartcard mode functions 
 861:FWLIB/src/stm32f4xx_usart.c ****  *
 862:FWLIB/src/stm32f4xx_usart.c **** @verbatim   
 863:FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================
 864:FWLIB/src/stm32f4xx_usart.c ****                               ##### Smartcard mode functions #####
 865:FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================  
 866:FWLIB/src/stm32f4xx_usart.c ****     [..]
 867:FWLIB/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART 
 868:FWLIB/src/stm32f4xx_usart.c ****     Smartcard communication.
 869:FWLIB/src/stm32f4xx_usart.c ****     [..]
 870:FWLIB/src/stm32f4xx_usart.c ****     The Smartcard interface is designed to support asynchronous protocol Smartcards as
 871:FWLIB/src/stm32f4xx_usart.c ****     defined in the ISO 7816-3 standard.
 872:FWLIB/src/stm32f4xx_usart.c ****     [..]
 873:FWLIB/src/stm32f4xx_usart.c ****     The USART can provide a clock to the smartcard through the SCLK output.
 874:FWLIB/src/stm32f4xx_usart.c ****     In smartcard mode, SCLK is not associated to the communication but is simply derived 
 875:FWLIB/src/stm32f4xx_usart.c ****     from the internal peripheral input clock through a 5-bit prescaler.
 876:FWLIB/src/stm32f4xx_usart.c ****     [..]
 877:FWLIB/src/stm32f4xx_usart.c ****     Smartcard communication is possible through the following procedure:
 878:FWLIB/src/stm32f4xx_usart.c ****       (#) Configures the Smartcard Prescaler using the USART_SetPrescaler() function.
 879:FWLIB/src/stm32f4xx_usart.c ****       (#) Configures the Smartcard Guard Time using the USART_SetGuardTime() function.
 880:FWLIB/src/stm32f4xx_usart.c ****       (#) Program the USART clock using the USART_ClockInit() function as following:
 881:FWLIB/src/stm32f4xx_usart.c ****         (++) USART Clock enabled
 882:FWLIB/src/stm32f4xx_usart.c ****         (++) USART CPOL Low
 883:FWLIB/src/stm32f4xx_usart.c ****         (++) USART CPHA on first edge
 884:FWLIB/src/stm32f4xx_usart.c ****         (++) USART Last Bit Clock Enabled
 885:FWLIB/src/stm32f4xx_usart.c ****       (#) Program the Smartcard interface using the USART_Init() function as following:
 886:FWLIB/src/stm32f4xx_usart.c ****         (++) Word Length = 9 Bits
 887:FWLIB/src/stm32f4xx_usart.c ****         (++) 1.5 Stop Bit
 888:FWLIB/src/stm32f4xx_usart.c ****         (++) Even parity
 889:FWLIB/src/stm32f4xx_usart.c ****         (++) BaudRate = 12096 baud
 890:FWLIB/src/stm32f4xx_usart.c ****         (++) Hardware flow control disabled (RTS and CTS signals)
 891:FWLIB/src/stm32f4xx_usart.c ****         (++) Tx and Rx enabled
 892:FWLIB/src/stm32f4xx_usart.c ****       (#) POptionally you can enable the parity error interrupt using the USART_ITConfig()
 893:FWLIB/src/stm32f4xx_usart.c ****           function
 894:FWLIB/src/stm32f4xx_usart.c ****       (#) PEnable the USART using the USART_Cmd() function.
 895:FWLIB/src/stm32f4xx_usart.c ****       (#) PEnable the Smartcard NACK using the USART_SmartCardNACKCmd() function.
 896:FWLIB/src/stm32f4xx_usart.c ****       (#) PEnable the Smartcard interface using the USART_SmartCardCmd() function.
 897:FWLIB/src/stm32f4xx_usart.c **** 
 898:FWLIB/src/stm32f4xx_usart.c ****     Please refer to the ISO 7816-3 specification for more details.
 899:FWLIB/src/stm32f4xx_usart.c **** 
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 36


 900:FWLIB/src/stm32f4xx_usart.c ****       -@- It is also possible to choose 0.5 stop bit for receiving but it is recommended 
 901:FWLIB/src/stm32f4xx_usart.c ****           to use 1.5 stop bits for both transmitting and receiving to avoid switching 
 902:FWLIB/src/stm32f4xx_usart.c ****           between the two configurations.
 903:FWLIB/src/stm32f4xx_usart.c ****       -@- In smartcard mode, the following bits must be kept cleared:
 904:FWLIB/src/stm32f4xx_usart.c ****         (+@) LINEN bit in the USART_CR2 register.
 905:FWLIB/src/stm32f4xx_usart.c ****         (+@) HDSEL and IREN bits in the USART_CR3 register.
 906:FWLIB/src/stm32f4xx_usart.c ****       -@- Smartcard mode is available on USART peripherals only (not available on UART4 
 907:FWLIB/src/stm32f4xx_usart.c ****           and UART5 peripherals).
 908:FWLIB/src/stm32f4xx_usart.c **** 
 909:FWLIB/src/stm32f4xx_usart.c **** @endverbatim
 910:FWLIB/src/stm32f4xx_usart.c ****   * @{
 911:FWLIB/src/stm32f4xx_usart.c ****   */
 912:FWLIB/src/stm32f4xx_usart.c **** 
 913:FWLIB/src/stm32f4xx_usart.c **** /**
 914:FWLIB/src/stm32f4xx_usart.c ****   * @brief  Sets the specified USART guard time.
 915:FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 916:FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
 917:FWLIB/src/stm32f4xx_usart.c ****   * @param  USART_GuardTime: specifies the guard time.   
 918:FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 919:FWLIB/src/stm32f4xx_usart.c ****   */
 920:FWLIB/src/stm32f4xx_usart.c **** void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
 921:FWLIB/src/stm32f4xx_usart.c **** {    
 1093              		.loc 1 921 1 is_stmt 1 view -0
 1094              		.cfi_startproc
 1095              		@ args = 0, pretend = 0, frame = 0
 1096              		@ frame_needed = 0, uses_anonymous_args = 0
 1097              		@ link register save eliminated.
 922:FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
 923:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 1098              		.loc 1 923 3 view .LVU299
 924:FWLIB/src/stm32f4xx_usart.c ****   
 925:FWLIB/src/stm32f4xx_usart.c ****   /* Clear the USART Guard time */
 926:FWLIB/src/stm32f4xx_usart.c ****   USARTx->GTPR &= USART_GTPR_PSC;
 1099              		.loc 1 926 3 view .LVU300
 1100              		.loc 1 926 16 is_stmt 0 view .LVU301
 1101 0000 028B     		ldrh	r2, [r0, #24]
 1102 0002 D2B2     		uxtb	r2, r2
 1103 0004 0283     		strh	r2, [r0, #24]	@ movhi
 927:FWLIB/src/stm32f4xx_usart.c ****   /* Set the USART guard time */
 928:FWLIB/src/stm32f4xx_usart.c ****   USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 1104              		.loc 1 928 3 is_stmt 1 view .LVU302
 1105              		.loc 1 928 16 is_stmt 0 view .LVU303
 1106 0006 038B     		ldrh	r3, [r0, #24]
 1107 0008 9BB2     		uxth	r3, r3
 1108 000a 43EA0123 		orr	r3, r3, r1, lsl #8
 1109 000e 0383     		strh	r3, [r0, #24]	@ movhi
 929:FWLIB/src/stm32f4xx_usart.c **** }
 1110              		.loc 1 929 1 view .LVU304
 1111 0010 7047     		bx	lr
 1112              		.cfi_endproc
 1113              	.LFE141:
 1115              		.section	.text.USART_SmartCardCmd,"ax",%progbits
 1116              		.align	1
 1117              		.global	USART_SmartCardCmd
 1118              		.syntax unified
 1119              		.thumb
 1120              		.thumb_func
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 37


 1121              		.fpu fpv4-sp-d16
 1123              	USART_SmartCardCmd:
 1124              	.LVL95:
 1125              	.LFB142:
 930:FWLIB/src/stm32f4xx_usart.c **** 
 931:FWLIB/src/stm32f4xx_usart.c **** /**
 932:FWLIB/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's Smart Card mode.
 933:FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 934:FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
 935:FWLIB/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the Smart Card mode.
 936:FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.      
 937:FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 938:FWLIB/src/stm32f4xx_usart.c ****   */
 939:FWLIB/src/stm32f4xx_usart.c **** void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 940:FWLIB/src/stm32f4xx_usart.c **** {
 1126              		.loc 1 940 1 is_stmt 1 view -0
 1127              		.cfi_startproc
 1128              		@ args = 0, pretend = 0, frame = 0
 1129              		@ frame_needed = 0, uses_anonymous_args = 0
 1130              		@ link register save eliminated.
 941:FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
 942:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 1131              		.loc 1 942 3 view .LVU306
 943:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1132              		.loc 1 943 3 view .LVU307
 944:FWLIB/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1133              		.loc 1 944 3 view .LVU308
 1134              		.loc 1 944 6 is_stmt 0 view .LVU309
 1135 0000 29B1     		cbz	r1, .L65
 945:FWLIB/src/stm32f4xx_usart.c ****   {
 946:FWLIB/src/stm32f4xx_usart.c ****     /* Enable the SC mode by setting the SCEN bit in the CR3 register */
 947:FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_SCEN;
 1136              		.loc 1 947 5 is_stmt 1 view .LVU310
 1137              		.loc 1 947 17 is_stmt 0 view .LVU311
 1138 0002 838A     		ldrh	r3, [r0, #20]
 1139 0004 9BB2     		uxth	r3, r3
 1140 0006 43F02003 		orr	r3, r3, #32
 1141 000a 8382     		strh	r3, [r0, #20]	@ movhi
 1142 000c 7047     		bx	lr
 1143              	.L65:
 948:FWLIB/src/stm32f4xx_usart.c ****   }
 949:FWLIB/src/stm32f4xx_usart.c ****   else
 950:FWLIB/src/stm32f4xx_usart.c ****   {
 951:FWLIB/src/stm32f4xx_usart.c ****     /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
 952:FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 1144              		.loc 1 952 5 is_stmt 1 view .LVU312
 1145              		.loc 1 952 17 is_stmt 0 view .LVU313
 1146 000e 838A     		ldrh	r3, [r0, #20]
 1147 0010 9BB2     		uxth	r3, r3
 1148 0012 23F02003 		bic	r3, r3, #32
 1149 0016 9BB2     		uxth	r3, r3
 1150 0018 8382     		strh	r3, [r0, #20]	@ movhi
 953:FWLIB/src/stm32f4xx_usart.c ****   }
 954:FWLIB/src/stm32f4xx_usart.c **** }
 1151              		.loc 1 954 1 view .LVU314
 1152 001a 7047     		bx	lr
 1153              		.cfi_endproc
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 38


 1154              	.LFE142:
 1156              		.section	.text.USART_SmartCardNACKCmd,"ax",%progbits
 1157              		.align	1
 1158              		.global	USART_SmartCardNACKCmd
 1159              		.syntax unified
 1160              		.thumb
 1161              		.thumb_func
 1162              		.fpu fpv4-sp-d16
 1164              	USART_SmartCardNACKCmd:
 1165              	.LVL96:
 1166              	.LFB143:
 955:FWLIB/src/stm32f4xx_usart.c **** 
 956:FWLIB/src/stm32f4xx_usart.c **** /**
 957:FWLIB/src/stm32f4xx_usart.c ****   * @brief  Enables or disables NACK transmission.
 958:FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 959:FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
 960:FWLIB/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the NACK transmission.
 961:FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.  
 962:FWLIB/src/stm32f4xx_usart.c ****   * @retval None
 963:FWLIB/src/stm32f4xx_usart.c ****   */
 964:FWLIB/src/stm32f4xx_usart.c **** void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 965:FWLIB/src/stm32f4xx_usart.c **** {
 1167              		.loc 1 965 1 is_stmt 1 view -0
 1168              		.cfi_startproc
 1169              		@ args = 0, pretend = 0, frame = 0
 1170              		@ frame_needed = 0, uses_anonymous_args = 0
 1171              		@ link register save eliminated.
 966:FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
 967:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx)); 
 1172              		.loc 1 967 3 view .LVU316
 968:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1173              		.loc 1 968 3 view .LVU317
 969:FWLIB/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1174              		.loc 1 969 3 view .LVU318
 1175              		.loc 1 969 6 is_stmt 0 view .LVU319
 1176 0000 29B1     		cbz	r1, .L68
 970:FWLIB/src/stm32f4xx_usart.c ****   {
 971:FWLIB/src/stm32f4xx_usart.c ****     /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
 972:FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_NACK;
 1177              		.loc 1 972 5 is_stmt 1 view .LVU320
 1178              		.loc 1 972 17 is_stmt 0 view .LVU321
 1179 0002 838A     		ldrh	r3, [r0, #20]
 1180 0004 9BB2     		uxth	r3, r3
 1181 0006 43F01003 		orr	r3, r3, #16
 1182 000a 8382     		strh	r3, [r0, #20]	@ movhi
 1183 000c 7047     		bx	lr
 1184              	.L68:
 973:FWLIB/src/stm32f4xx_usart.c ****   }
 974:FWLIB/src/stm32f4xx_usart.c ****   else
 975:FWLIB/src/stm32f4xx_usart.c ****   {
 976:FWLIB/src/stm32f4xx_usart.c ****     /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
 977:FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 1185              		.loc 1 977 5 is_stmt 1 view .LVU322
 1186              		.loc 1 977 17 is_stmt 0 view .LVU323
 1187 000e 838A     		ldrh	r3, [r0, #20]
 1188 0010 9BB2     		uxth	r3, r3
 1189 0012 23F01003 		bic	r3, r3, #16
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 39


 1190 0016 9BB2     		uxth	r3, r3
 1191 0018 8382     		strh	r3, [r0, #20]	@ movhi
 978:FWLIB/src/stm32f4xx_usart.c ****   }
 979:FWLIB/src/stm32f4xx_usart.c **** }
 1192              		.loc 1 979 1 view .LVU324
 1193 001a 7047     		bx	lr
 1194              		.cfi_endproc
 1195              	.LFE143:
 1197              		.section	.text.USART_IrDAConfig,"ax",%progbits
 1198              		.align	1
 1199              		.global	USART_IrDAConfig
 1200              		.syntax unified
 1201              		.thumb
 1202              		.thumb_func
 1203              		.fpu fpv4-sp-d16
 1205              	USART_IrDAConfig:
 1206              	.LVL97:
 1207              	.LFB144:
 980:FWLIB/src/stm32f4xx_usart.c **** 
 981:FWLIB/src/stm32f4xx_usart.c **** /**
 982:FWLIB/src/stm32f4xx_usart.c ****   * @}
 983:FWLIB/src/stm32f4xx_usart.c ****   */
 984:FWLIB/src/stm32f4xx_usart.c **** 
 985:FWLIB/src/stm32f4xx_usart.c **** /** @defgroup USART_Group7 IrDA mode functions
 986:FWLIB/src/stm32f4xx_usart.c ****  *  @brief   IrDA mode functions 
 987:FWLIB/src/stm32f4xx_usart.c ****  *
 988:FWLIB/src/stm32f4xx_usart.c **** @verbatim   
 989:FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================
 990:FWLIB/src/stm32f4xx_usart.c ****                         ##### IrDA mode functions #####
 991:FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================  
 992:FWLIB/src/stm32f4xx_usart.c ****     [..]
 993:FWLIB/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART 
 994:FWLIB/src/stm32f4xx_usart.c ****     IrDA communication.
 995:FWLIB/src/stm32f4xx_usart.c ****     [..]
 996:FWLIB/src/stm32f4xx_usart.c ****     IrDA is a half duplex communication protocol. If the Transmitter is busy, any data
 997:FWLIB/src/stm32f4xx_usart.c ****     on the IrDA receive line will be ignored by the IrDA decoder and if the Receiver 
 998:FWLIB/src/stm32f4xx_usart.c ****     is busy, data on the TX from the USART to IrDA will not be encoded by IrDA.
 999:FWLIB/src/stm32f4xx_usart.c ****     While receiving data, transmission should be avoided as the data to be transmitted
1000:FWLIB/src/stm32f4xx_usart.c ****     could be corrupted.
1001:FWLIB/src/stm32f4xx_usart.c ****     [..]
1002:FWLIB/src/stm32f4xx_usart.c ****     IrDA communication is possible through the following procedure:
1003:FWLIB/src/stm32f4xx_usart.c ****       (#) Program the Baud rate, Word length = 8 bits, Stop bits, Parity, Transmitter/Receiver 
1004:FWLIB/src/stm32f4xx_usart.c ****           modes and hardware flow control values using the USART_Init() function.
1005:FWLIB/src/stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
1006:FWLIB/src/stm32f4xx_usart.c ****       (#) Configures the IrDA pulse width by configuring the prescaler using  
1007:FWLIB/src/stm32f4xx_usart.c ****           the USART_SetPrescaler() function.
1008:FWLIB/src/stm32f4xx_usart.c ****       (#) Configures the IrDA  USART_IrDAMode_LowPower or USART_IrDAMode_Normal mode
1009:FWLIB/src/stm32f4xx_usart.c ****           using the USART_IrDAConfig() function.
1010:FWLIB/src/stm32f4xx_usart.c ****       (#) Enable the IrDA using the USART_IrDACmd() function.
1011:FWLIB/src/stm32f4xx_usart.c **** 
1012:FWLIB/src/stm32f4xx_usart.c ****       -@- A pulse of width less than two and greater than one PSC period(s) may or may
1013:FWLIB/src/stm32f4xx_usart.c ****           not be rejected.
1014:FWLIB/src/stm32f4xx_usart.c ****       -@- The receiver set up time should be managed by software. The IrDA physical layer
1015:FWLIB/src/stm32f4xx_usart.c ****           specification specifies a minimum of 10 ms delay between transmission and 
1016:FWLIB/src/stm32f4xx_usart.c ****           reception (IrDA is a half duplex protocol).
1017:FWLIB/src/stm32f4xx_usart.c ****       -@- In IrDA mode, the following bits must be kept cleared:
1018:FWLIB/src/stm32f4xx_usart.c ****         (+@) LINEN, STOP and CLKEN bits in the USART_CR2 register.
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 40


1019:FWLIB/src/stm32f4xx_usart.c ****         (+@) SCEN and HDSEL bits in the USART_CR3 register.
1020:FWLIB/src/stm32f4xx_usart.c **** 
1021:FWLIB/src/stm32f4xx_usart.c **** @endverbatim
1022:FWLIB/src/stm32f4xx_usart.c ****   * @{
1023:FWLIB/src/stm32f4xx_usart.c ****   */
1024:FWLIB/src/stm32f4xx_usart.c **** 
1025:FWLIB/src/stm32f4xx_usart.c **** /**
1026:FWLIB/src/stm32f4xx_usart.c ****   * @brief  Configures the USART's IrDA interface.
1027:FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1028:FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
1029:FWLIB/src/stm32f4xx_usart.c ****   * @param  USART_IrDAMode: specifies the IrDA mode.
1030:FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1031:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IrDAMode_LowPower
1032:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IrDAMode_Normal
1033:FWLIB/src/stm32f4xx_usart.c ****   * @retval None
1034:FWLIB/src/stm32f4xx_usart.c ****   */
1035:FWLIB/src/stm32f4xx_usart.c **** void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
1036:FWLIB/src/stm32f4xx_usart.c **** {
 1208              		.loc 1 1036 1 is_stmt 1 view -0
 1209              		.cfi_startproc
 1210              		@ args = 0, pretend = 0, frame = 0
 1211              		@ frame_needed = 0, uses_anonymous_args = 0
 1212              		@ link register save eliminated.
1037:FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
1038:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1213              		.loc 1 1038 3 view .LVU326
1039:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
 1214              		.loc 1 1039 3 view .LVU327
1040:FWLIB/src/stm32f4xx_usart.c ****     
1041:FWLIB/src/stm32f4xx_usart.c ****   USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 1215              		.loc 1 1041 3 view .LVU328
 1216              		.loc 1 1041 15 is_stmt 0 view .LVU329
 1217 0000 838A     		ldrh	r3, [r0, #20]
 1218 0002 9BB2     		uxth	r3, r3
 1219 0004 23F00403 		bic	r3, r3, #4
 1220 0008 9BB2     		uxth	r3, r3
 1221 000a 8382     		strh	r3, [r0, #20]	@ movhi
1042:FWLIB/src/stm32f4xx_usart.c ****   USARTx->CR3 |= USART_IrDAMode;
 1222              		.loc 1 1042 3 is_stmt 1 view .LVU330
 1223              		.loc 1 1042 15 is_stmt 0 view .LVU331
 1224 000c 838A     		ldrh	r3, [r0, #20]
 1225 000e 9BB2     		uxth	r3, r3
 1226 0010 0B43     		orrs	r3, r3, r1
 1227 0012 8382     		strh	r3, [r0, #20]	@ movhi
1043:FWLIB/src/stm32f4xx_usart.c **** }
 1228              		.loc 1 1043 1 view .LVU332
 1229 0014 7047     		bx	lr
 1230              		.cfi_endproc
 1231              	.LFE144:
 1233              		.section	.text.USART_IrDACmd,"ax",%progbits
 1234              		.align	1
 1235              		.global	USART_IrDACmd
 1236              		.syntax unified
 1237              		.thumb
 1238              		.thumb_func
 1239              		.fpu fpv4-sp-d16
 1241              	USART_IrDACmd:
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 41


 1242              	.LVL98:
 1243              	.LFB145:
1044:FWLIB/src/stm32f4xx_usart.c **** 
1045:FWLIB/src/stm32f4xx_usart.c **** /**
1046:FWLIB/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's IrDA interface.
1047:FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1048:FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
1049:FWLIB/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the IrDA mode.
1050:FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1051:FWLIB/src/stm32f4xx_usart.c ****   * @retval None
1052:FWLIB/src/stm32f4xx_usart.c ****   */
1053:FWLIB/src/stm32f4xx_usart.c **** void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
1054:FWLIB/src/stm32f4xx_usart.c **** {
 1244              		.loc 1 1054 1 is_stmt 1 view -0
 1245              		.cfi_startproc
 1246              		@ args = 0, pretend = 0, frame = 0
 1247              		@ frame_needed = 0, uses_anonymous_args = 0
 1248              		@ link register save eliminated.
1055:FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
1056:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1249              		.loc 1 1056 3 view .LVU334
1057:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1250              		.loc 1 1057 3 view .LVU335
1058:FWLIB/src/stm32f4xx_usart.c ****     
1059:FWLIB/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1251              		.loc 1 1059 3 view .LVU336
 1252              		.loc 1 1059 6 is_stmt 0 view .LVU337
 1253 0000 29B1     		cbz	r1, .L72
1060:FWLIB/src/stm32f4xx_usart.c ****   {
1061:FWLIB/src/stm32f4xx_usart.c ****     /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
1062:FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_IREN;
 1254              		.loc 1 1062 5 is_stmt 1 view .LVU338
 1255              		.loc 1 1062 17 is_stmt 0 view .LVU339
 1256 0002 838A     		ldrh	r3, [r0, #20]
 1257 0004 9BB2     		uxth	r3, r3
 1258 0006 43F00203 		orr	r3, r3, #2
 1259 000a 8382     		strh	r3, [r0, #20]	@ movhi
 1260 000c 7047     		bx	lr
 1261              	.L72:
1063:FWLIB/src/stm32f4xx_usart.c ****   }
1064:FWLIB/src/stm32f4xx_usart.c ****   else
1065:FWLIB/src/stm32f4xx_usart.c ****   {
1066:FWLIB/src/stm32f4xx_usart.c ****     /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
1067:FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 1262              		.loc 1 1067 5 is_stmt 1 view .LVU340
 1263              		.loc 1 1067 17 is_stmt 0 view .LVU341
 1264 000e 838A     		ldrh	r3, [r0, #20]
 1265 0010 9BB2     		uxth	r3, r3
 1266 0012 23F00203 		bic	r3, r3, #2
 1267 0016 9BB2     		uxth	r3, r3
 1268 0018 8382     		strh	r3, [r0, #20]	@ movhi
1068:FWLIB/src/stm32f4xx_usart.c ****   }
1069:FWLIB/src/stm32f4xx_usart.c **** }
 1269              		.loc 1 1069 1 view .LVU342
 1270 001a 7047     		bx	lr
 1271              		.cfi_endproc
 1272              	.LFE145:
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 42


 1274              		.section	.text.USART_DMACmd,"ax",%progbits
 1275              		.align	1
 1276              		.global	USART_DMACmd
 1277              		.syntax unified
 1278              		.thumb
 1279              		.thumb_func
 1280              		.fpu fpv4-sp-d16
 1282              	USART_DMACmd:
 1283              	.LVL99:
 1284              	.LFB146:
1070:FWLIB/src/stm32f4xx_usart.c **** 
1071:FWLIB/src/stm32f4xx_usart.c **** /**
1072:FWLIB/src/stm32f4xx_usart.c ****   * @}
1073:FWLIB/src/stm32f4xx_usart.c ****   */
1074:FWLIB/src/stm32f4xx_usart.c **** 
1075:FWLIB/src/stm32f4xx_usart.c **** /** @defgroup USART_Group8 DMA transfers management functions
1076:FWLIB/src/stm32f4xx_usart.c ****  *  @brief   DMA transfers management functions
1077:FWLIB/src/stm32f4xx_usart.c ****  *
1078:FWLIB/src/stm32f4xx_usart.c **** @verbatim   
1079:FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================
1080:FWLIB/src/stm32f4xx_usart.c ****               ##### DMA transfers management functions #####
1081:FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================  
1082:FWLIB/src/stm32f4xx_usart.c **** 
1083:FWLIB/src/stm32f4xx_usart.c **** @endverbatim
1084:FWLIB/src/stm32f4xx_usart.c ****   * @{
1085:FWLIB/src/stm32f4xx_usart.c ****   */
1086:FWLIB/src/stm32f4xx_usart.c ****   
1087:FWLIB/src/stm32f4xx_usart.c **** /**
1088:FWLIB/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's DMA interface.
1089:FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1090:FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
1091:FWLIB/src/stm32f4xx_usart.c ****   * @param  USART_DMAReq: specifies the DMA request.
1092:FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be any combination of the following values:
1093:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_DMAReq_Tx: USART DMA transmit request
1094:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_DMAReq_Rx: USART DMA receive request
1095:FWLIB/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the DMA Request sources.
1096:FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.   
1097:FWLIB/src/stm32f4xx_usart.c ****   * @retval None
1098:FWLIB/src/stm32f4xx_usart.c ****   */
1099:FWLIB/src/stm32f4xx_usart.c **** void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
1100:FWLIB/src/stm32f4xx_usart.c **** {
 1285              		.loc 1 1100 1 is_stmt 1 view -0
 1286              		.cfi_startproc
 1287              		@ args = 0, pretend = 0, frame = 0
 1288              		@ frame_needed = 0, uses_anonymous_args = 0
 1289              		@ link register save eliminated.
1101:FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
1102:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1290              		.loc 1 1102 3 view .LVU344
1103:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_DMAREQ(USART_DMAReq));  
 1291              		.loc 1 1103 3 view .LVU345
1104:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 1292              		.loc 1 1104 3 view .LVU346
1105:FWLIB/src/stm32f4xx_usart.c **** 
1106:FWLIB/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1293              		.loc 1 1106 3 view .LVU347
 1294              		.loc 1 1106 6 is_stmt 0 view .LVU348
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 43


 1295 0000 22B1     		cbz	r2, .L75
1107:FWLIB/src/stm32f4xx_usart.c ****   {
1108:FWLIB/src/stm32f4xx_usart.c ****     /* Enable the DMA transfer for selected requests by setting the DMAT and/or
1109:FWLIB/src/stm32f4xx_usart.c ****        DMAR bits in the USART CR3 register */
1110:FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_DMAReq;
 1296              		.loc 1 1110 5 is_stmt 1 view .LVU349
 1297              		.loc 1 1110 17 is_stmt 0 view .LVU350
 1298 0002 838A     		ldrh	r3, [r0, #20]
 1299 0004 9BB2     		uxth	r3, r3
 1300 0006 1943     		orrs	r1, r1, r3
 1301              	.LVL100:
 1302              		.loc 1 1110 17 view .LVU351
 1303 0008 8182     		strh	r1, [r0, #20]	@ movhi
 1304 000a 7047     		bx	lr
 1305              	.LVL101:
 1306              	.L75:
1111:FWLIB/src/stm32f4xx_usart.c ****   }
1112:FWLIB/src/stm32f4xx_usart.c ****   else
1113:FWLIB/src/stm32f4xx_usart.c ****   {
1114:FWLIB/src/stm32f4xx_usart.c ****     /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
1115:FWLIB/src/stm32f4xx_usart.c ****        DMAR bits in the USART CR3 register */
1116:FWLIB/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 1307              		.loc 1 1116 5 is_stmt 1 view .LVU352
 1308              		.loc 1 1116 17 is_stmt 0 view .LVU353
 1309 000c 838A     		ldrh	r3, [r0, #20]
 1310              		.loc 1 1116 20 view .LVU354
 1311 000e C943     		mvns	r1, r1
 1312              	.LVL102:
 1313              		.loc 1 1116 20 view .LVU355
 1314 0010 89B2     		uxth	r1, r1
 1315              		.loc 1 1116 17 view .LVU356
 1316 0012 1940     		ands	r1, r1, r3
 1317 0014 8182     		strh	r1, [r0, #20]	@ movhi
1117:FWLIB/src/stm32f4xx_usart.c ****   }
1118:FWLIB/src/stm32f4xx_usart.c **** }
 1318              		.loc 1 1118 1 view .LVU357
 1319 0016 7047     		bx	lr
 1320              		.cfi_endproc
 1321              	.LFE146:
 1323              		.section	.text.USART_ITConfig,"ax",%progbits
 1324              		.align	1
 1325              		.global	USART_ITConfig
 1326              		.syntax unified
 1327              		.thumb
 1328              		.thumb_func
 1329              		.fpu fpv4-sp-d16
 1331              	USART_ITConfig:
 1332              	.LVL103:
 1333              	.LFB147:
1119:FWLIB/src/stm32f4xx_usart.c **** 
1120:FWLIB/src/stm32f4xx_usart.c **** /**
1121:FWLIB/src/stm32f4xx_usart.c ****   * @}
1122:FWLIB/src/stm32f4xx_usart.c ****   */
1123:FWLIB/src/stm32f4xx_usart.c ****   
1124:FWLIB/src/stm32f4xx_usart.c **** /** @defgroup USART_Group9 Interrupts and flags management functions
1125:FWLIB/src/stm32f4xx_usart.c ****  *  @brief   Interrupts and flags management functions 
1126:FWLIB/src/stm32f4xx_usart.c ****  *
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 44


1127:FWLIB/src/stm32f4xx_usart.c **** @verbatim   
1128:FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================
1129:FWLIB/src/stm32f4xx_usart.c ****             ##### Interrupts and flags management functions #####
1130:FWLIB/src/stm32f4xx_usart.c ****  ===============================================================================  
1131:FWLIB/src/stm32f4xx_usart.c ****     [..]
1132:FWLIB/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to configure the USART 
1133:FWLIB/src/stm32f4xx_usart.c ****     Interrupts sources, DMA channels requests and check or clear the flags or 
1134:FWLIB/src/stm32f4xx_usart.c ****     pending bits status.
1135:FWLIB/src/stm32f4xx_usart.c ****     The user should identify which mode will be used in his application to manage 
1136:FWLIB/src/stm32f4xx_usart.c ****     the communication: Polling mode, Interrupt mode or DMA mode. 
1137:FWLIB/src/stm32f4xx_usart.c ****     
1138:FWLIB/src/stm32f4xx_usart.c ****     *** Polling Mode ***
1139:FWLIB/src/stm32f4xx_usart.c ****     ====================
1140:FWLIB/src/stm32f4xx_usart.c ****     [..]
1141:FWLIB/src/stm32f4xx_usart.c ****     In Polling Mode, the SPI communication can be managed by 10 flags:
1142:FWLIB/src/stm32f4xx_usart.c ****       (#) USART_FLAG_TXE : to indicate the status of the transmit buffer register
1143:FWLIB/src/stm32f4xx_usart.c ****       (#) USART_FLAG_RXNE : to indicate the status of the receive buffer register
1144:FWLIB/src/stm32f4xx_usart.c ****       (#) USART_FLAG_TC : to indicate the status of the transmit operation
1145:FWLIB/src/stm32f4xx_usart.c ****       (#) USART_FLAG_IDLE : to indicate the status of the Idle Line             
1146:FWLIB/src/stm32f4xx_usart.c ****       (#) USART_FLAG_CTS : to indicate the status of the nCTS input
1147:FWLIB/src/stm32f4xx_usart.c ****       (#) USART_FLAG_LBD : to indicate the status of the LIN break detection
1148:FWLIB/src/stm32f4xx_usart.c ****       (#) USART_FLAG_NE : to indicate if a noise error occur
1149:FWLIB/src/stm32f4xx_usart.c ****       (#) USART_FLAG_FE : to indicate if a frame error occur
1150:FWLIB/src/stm32f4xx_usart.c ****       (#) USART_FLAG_PE : to indicate if a parity error occur
1151:FWLIB/src/stm32f4xx_usart.c ****       (#) USART_FLAG_ORE : to indicate if an Overrun error occur
1152:FWLIB/src/stm32f4xx_usart.c ****     [..]
1153:FWLIB/src/stm32f4xx_usart.c ****     In this Mode it is advised to use the following functions:
1154:FWLIB/src/stm32f4xx_usart.c ****       (+) FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1155:FWLIB/src/stm32f4xx_usart.c ****       (+) void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1156:FWLIB/src/stm32f4xx_usart.c **** 
1157:FWLIB/src/stm32f4xx_usart.c ****     *** Interrupt Mode ***
1158:FWLIB/src/stm32f4xx_usart.c ****     ======================
1159:FWLIB/src/stm32f4xx_usart.c ****     [..]
1160:FWLIB/src/stm32f4xx_usart.c ****     In Interrupt Mode, the USART communication can be managed by 8 interrupt sources
1161:FWLIB/src/stm32f4xx_usart.c ****     and 10 pending bits: 
1162:FWLIB/src/stm32f4xx_usart.c **** 
1163:FWLIB/src/stm32f4xx_usart.c ****       (#) Pending Bits:
1164:FWLIB/src/stm32f4xx_usart.c **** 
1165:FWLIB/src/stm32f4xx_usart.c ****         (##) USART_IT_TXE : to indicate the status of the transmit buffer register
1166:FWLIB/src/stm32f4xx_usart.c ****         (##) USART_IT_RXNE : to indicate the status of the receive buffer register
1167:FWLIB/src/stm32f4xx_usart.c ****         (##) USART_IT_TC : to indicate the status of the transmit operation
1168:FWLIB/src/stm32f4xx_usart.c ****         (##) USART_IT_IDLE : to indicate the status of the Idle Line             
1169:FWLIB/src/stm32f4xx_usart.c ****         (##) USART_IT_CTS : to indicate the status of the nCTS input
1170:FWLIB/src/stm32f4xx_usart.c ****         (##) USART_IT_LBD : to indicate the status of the LIN break detection
1171:FWLIB/src/stm32f4xx_usart.c ****         (##) USART_IT_NE : to indicate if a noise error occur
1172:FWLIB/src/stm32f4xx_usart.c ****         (##) USART_IT_FE : to indicate if a frame error occur
1173:FWLIB/src/stm32f4xx_usart.c ****         (##) USART_IT_PE : to indicate if a parity error occur
1174:FWLIB/src/stm32f4xx_usart.c ****         (##) USART_IT_ORE : to indicate if an Overrun error occur
1175:FWLIB/src/stm32f4xx_usart.c **** 
1176:FWLIB/src/stm32f4xx_usart.c ****       (#) Interrupt Source:
1177:FWLIB/src/stm32f4xx_usart.c **** 
1178:FWLIB/src/stm32f4xx_usart.c ****         (##) USART_IT_TXE : specifies the interrupt source for the Tx buffer empty 
1179:FWLIB/src/stm32f4xx_usart.c ****                             interrupt. 
1180:FWLIB/src/stm32f4xx_usart.c ****         (##) USART_IT_RXNE : specifies the interrupt source for the Rx buffer not 
1181:FWLIB/src/stm32f4xx_usart.c ****                              empty interrupt.
1182:FWLIB/src/stm32f4xx_usart.c ****         (##) USART_IT_TC : specifies the interrupt source for the Transmit complete 
1183:FWLIB/src/stm32f4xx_usart.c ****                            interrupt. 
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 45


1184:FWLIB/src/stm32f4xx_usart.c ****         (##) USART_IT_IDLE : specifies the interrupt source for the Idle Line interrupt.           
1185:FWLIB/src/stm32f4xx_usart.c ****         (##) USART_IT_CTS : specifies the interrupt source for the CTS interrupt. 
1186:FWLIB/src/stm32f4xx_usart.c ****         (##) USART_IT_LBD : specifies the interrupt source for the LIN break detection
1187:FWLIB/src/stm32f4xx_usart.c ****                             interrupt. 
1188:FWLIB/src/stm32f4xx_usart.c ****         (##) USART_IT_PE : specifies the interrupt source for the parity error interrupt. 
1189:FWLIB/src/stm32f4xx_usart.c ****         (##) USART_IT_ERR :  specifies the interrupt source for the errors interrupt.
1190:FWLIB/src/stm32f4xx_usart.c **** 
1191:FWLIB/src/stm32f4xx_usart.c ****       -@@- Some parameters are coded in order to use them as interrupt source 
1192:FWLIB/src/stm32f4xx_usart.c ****           or as pending bits.
1193:FWLIB/src/stm32f4xx_usart.c ****     [..]
1194:FWLIB/src/stm32f4xx_usart.c ****     In this Mode it is advised to use the following functions:
1195:FWLIB/src/stm32f4xx_usart.c ****       (+) void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState);
1196:FWLIB/src/stm32f4xx_usart.c ****       (+) ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT);
1197:FWLIB/src/stm32f4xx_usart.c ****       (+) void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT);
1198:FWLIB/src/stm32f4xx_usart.c **** 
1199:FWLIB/src/stm32f4xx_usart.c ****     *** DMA Mode ***
1200:FWLIB/src/stm32f4xx_usart.c ****     ================
1201:FWLIB/src/stm32f4xx_usart.c ****     [..]
1202:FWLIB/src/stm32f4xx_usart.c ****     In DMA Mode, the USART communication can be managed by 2 DMA Channel requests:
1203:FWLIB/src/stm32f4xx_usart.c ****       (#) USART_DMAReq_Tx: specifies the Tx buffer DMA transfer request
1204:FWLIB/src/stm32f4xx_usart.c ****       (#) USART_DMAReq_Rx: specifies the Rx buffer DMA transfer request
1205:FWLIB/src/stm32f4xx_usart.c ****     [..]
1206:FWLIB/src/stm32f4xx_usart.c ****     In this Mode it is advised to use the following function:
1207:FWLIB/src/stm32f4xx_usart.c ****       (+) void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
1208:FWLIB/src/stm32f4xx_usart.c **** 
1209:FWLIB/src/stm32f4xx_usart.c **** @endverbatim
1210:FWLIB/src/stm32f4xx_usart.c ****   * @{
1211:FWLIB/src/stm32f4xx_usart.c ****   */
1212:FWLIB/src/stm32f4xx_usart.c **** 
1213:FWLIB/src/stm32f4xx_usart.c **** /**
1214:FWLIB/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the specified USART interrupts.
1215:FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1216:FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
1217:FWLIB/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt sources to be enabled or disabled.
1218:FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1219:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt
1220:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1221:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1222:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1223:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1224:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1225:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1226:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ERR:  Error interrupt(Frame error, noise error, overrun error)
1227:FWLIB/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the specified USARTx interrupts.
1228:FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1229:FWLIB/src/stm32f4xx_usart.c ****   * @retval None
1230:FWLIB/src/stm32f4xx_usart.c ****   */
1231:FWLIB/src/stm32f4xx_usart.c **** void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
1232:FWLIB/src/stm32f4xx_usart.c **** {
 1334              		.loc 1 1232 1 is_stmt 1 view -0
 1335              		.cfi_startproc
 1336              		@ args = 0, pretend = 0, frame = 0
 1337              		@ frame_needed = 0, uses_anonymous_args = 0
 1338              		@ link register save eliminated.
1233:FWLIB/src/stm32f4xx_usart.c ****   uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 1339              		.loc 1 1233 3 view .LVU359
1234:FWLIB/src/stm32f4xx_usart.c ****   uint32_t usartxbase = 0x00;
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 46


 1340              		.loc 1 1234 3 view .LVU360
1235:FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
1236:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1341              		.loc 1 1236 3 view .LVU361
1237:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CONFIG_IT(USART_IT));
 1342              		.loc 1 1237 3 view .LVU362
1238:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1343              		.loc 1 1238 3 view .LVU363
1239:FWLIB/src/stm32f4xx_usart.c **** 
1240:FWLIB/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1241:FWLIB/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
 1344              		.loc 1 1241 3 view .LVU364
1242:FWLIB/src/stm32f4xx_usart.c ****   {
1243:FWLIB/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
 1345              		.loc 1 1243 5 view .LVU365
1244:FWLIB/src/stm32f4xx_usart.c ****   } 
1245:FWLIB/src/stm32f4xx_usart.c ****     
1246:FWLIB/src/stm32f4xx_usart.c ****   usartxbase = (uint32_t)USARTx;
 1346              		.loc 1 1246 3 view .LVU366
1247:FWLIB/src/stm32f4xx_usart.c **** 
1248:FWLIB/src/stm32f4xx_usart.c ****   /* Get the USART register index */
1249:FWLIB/src/stm32f4xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 1347              		.loc 1 1249 3 view .LVU367
 1348              		.loc 1 1249 35 is_stmt 0 view .LVU368
 1349 0000 C1F3421C 		ubfx	ip, r1, #5, #3
 1350              	.LVL104:
1250:FWLIB/src/stm32f4xx_usart.c **** 
1251:FWLIB/src/stm32f4xx_usart.c ****   /* Get the interrupt position */
1252:FWLIB/src/stm32f4xx_usart.c ****   itpos = USART_IT & IT_MASK;
 1351              		.loc 1 1252 3 is_stmt 1 view .LVU369
 1352              		.loc 1 1252 9 is_stmt 0 view .LVU370
 1353 0004 01F01F01 		and	r1, r1, #31
 1354              	.LVL105:
1253:FWLIB/src/stm32f4xx_usart.c ****   itmask = (((uint32_t)0x01) << itpos);
 1355              		.loc 1 1253 3 is_stmt 1 view .LVU371
 1356              		.loc 1 1253 10 is_stmt 0 view .LVU372
 1357 0008 0123     		movs	r3, #1
 1358 000a 03FA01F1 		lsl	r1, r3, r1
 1359              	.LVL106:
1254:FWLIB/src/stm32f4xx_usart.c ****     
1255:FWLIB/src/stm32f4xx_usart.c ****   if (usartreg == 0x01) /* The IT is in CR1 register */
 1360              		.loc 1 1255 3 is_stmt 1 view .LVU373
 1361              		.loc 1 1255 6 is_stmt 0 view .LVU374
 1362 000e 9C45     		cmp	ip, r3
 1363 0010 08D0     		beq	.L83
1256:FWLIB/src/stm32f4xx_usart.c ****   {
1257:FWLIB/src/stm32f4xx_usart.c ****     usartxbase += 0x0C;
1258:FWLIB/src/stm32f4xx_usart.c ****   }
1259:FWLIB/src/stm32f4xx_usart.c ****   else if (usartreg == 0x02) /* The IT is in CR2 register */
 1364              		.loc 1 1259 8 is_stmt 1 view .LVU375
 1365              		.loc 1 1259 11 is_stmt 0 view .LVU376
 1366 0012 BCF1020F 		cmp	ip, #2
 1367 0016 07D0     		beq	.L84
1260:FWLIB/src/stm32f4xx_usart.c ****   {
1261:FWLIB/src/stm32f4xx_usart.c ****     usartxbase += 0x10;
1262:FWLIB/src/stm32f4xx_usart.c ****   }
1263:FWLIB/src/stm32f4xx_usart.c ****   else /* The IT is in CR3 register */
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 47


1264:FWLIB/src/stm32f4xx_usart.c ****   {
1265:FWLIB/src/stm32f4xx_usart.c ****     usartxbase += 0x14; 
 1368              		.loc 1 1265 5 is_stmt 1 view .LVU377
 1369              		.loc 1 1265 16 is_stmt 0 view .LVU378
 1370 0018 1430     		adds	r0, r0, #20
 1371              	.LVL107:
 1372              	.L79:
1266:FWLIB/src/stm32f4xx_usart.c ****   }
1267:FWLIB/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1373              		.loc 1 1267 3 is_stmt 1 view .LVU379
 1374              		.loc 1 1267 6 is_stmt 0 view .LVU380
 1375 001a 3AB1     		cbz	r2, .L81
1268:FWLIB/src/stm32f4xx_usart.c ****   {
1269:FWLIB/src/stm32f4xx_usart.c ****     *(__IO uint32_t*)usartxbase  |= itmask;
 1376              		.loc 1 1269 5 is_stmt 1 view .LVU381
 1377              		.loc 1 1269 34 is_stmt 0 view .LVU382
 1378 001c 0368     		ldr	r3, [r0]
 1379 001e 1943     		orrs	r1, r1, r3
 1380              	.LVL108:
 1381              		.loc 1 1269 34 view .LVU383
 1382 0020 0160     		str	r1, [r0]
 1383 0022 7047     		bx	lr
 1384              	.LVL109:
 1385              	.L83:
1257:FWLIB/src/stm32f4xx_usart.c ****   }
 1386              		.loc 1 1257 5 is_stmt 1 view .LVU384
1257:FWLIB/src/stm32f4xx_usart.c ****   }
 1387              		.loc 1 1257 16 is_stmt 0 view .LVU385
 1388 0024 0C30     		adds	r0, r0, #12
 1389              	.LVL110:
1257:FWLIB/src/stm32f4xx_usart.c ****   }
 1390              		.loc 1 1257 16 view .LVU386
 1391 0026 F8E7     		b	.L79
 1392              	.LVL111:
 1393              	.L84:
1261:FWLIB/src/stm32f4xx_usart.c ****   }
 1394              		.loc 1 1261 5 is_stmt 1 view .LVU387
1261:FWLIB/src/stm32f4xx_usart.c ****   }
 1395              		.loc 1 1261 16 is_stmt 0 view .LVU388
 1396 0028 1030     		adds	r0, r0, #16
 1397              	.LVL112:
1261:FWLIB/src/stm32f4xx_usart.c ****   }
 1398              		.loc 1 1261 16 view .LVU389
 1399 002a F6E7     		b	.L79
 1400              	.LVL113:
 1401              	.L81:
1270:FWLIB/src/stm32f4xx_usart.c ****   }
1271:FWLIB/src/stm32f4xx_usart.c ****   else
1272:FWLIB/src/stm32f4xx_usart.c ****   {
1273:FWLIB/src/stm32f4xx_usart.c ****     *(__IO uint32_t*)usartxbase &= ~itmask;
 1402              		.loc 1 1273 5 is_stmt 1 view .LVU390
 1403              		.loc 1 1273 33 is_stmt 0 view .LVU391
 1404 002c 0368     		ldr	r3, [r0]
 1405 002e 23EA0101 		bic	r1, r3, r1
 1406              	.LVL114:
 1407              		.loc 1 1273 33 view .LVU392
 1408 0032 0160     		str	r1, [r0]
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 48


1274:FWLIB/src/stm32f4xx_usart.c ****   }
1275:FWLIB/src/stm32f4xx_usart.c **** }
 1409              		.loc 1 1275 1 view .LVU393
 1410 0034 7047     		bx	lr
 1411              		.cfi_endproc
 1412              	.LFE147:
 1414              		.section	.text.USART_GetFlagStatus,"ax",%progbits
 1415              		.align	1
 1416              		.global	USART_GetFlagStatus
 1417              		.syntax unified
 1418              		.thumb
 1419              		.thumb_func
 1420              		.fpu fpv4-sp-d16
 1422              	USART_GetFlagStatus:
 1423              	.LVL115:
 1424              	.LFB148:
1276:FWLIB/src/stm32f4xx_usart.c **** 
1277:FWLIB/src/stm32f4xx_usart.c **** /**
1278:FWLIB/src/stm32f4xx_usart.c ****   * @brief  Checks whether the specified USART flag is set or not.
1279:FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1280:FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
1281:FWLIB/src/stm32f4xx_usart.c ****   * @param  USART_FLAG: specifies the flag to check.
1282:FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1283:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5)
1284:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag
1285:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TXE:  Transmit data register empty flag
1286:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag
1287:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag
1288:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_IDLE: Idle Line detection flag
1289:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_ORE:  OverRun Error flag
1290:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_NE:   Noise Error flag
1291:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_FE:   Framing Error flag
1292:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_PE:   Parity Error flag
1293:FWLIB/src/stm32f4xx_usart.c ****   * @retval The new state of USART_FLAG (SET or RESET).
1294:FWLIB/src/stm32f4xx_usart.c ****   */
1295:FWLIB/src/stm32f4xx_usart.c **** FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1296:FWLIB/src/stm32f4xx_usart.c **** {
 1425              		.loc 1 1296 1 is_stmt 1 view -0
 1426              		.cfi_startproc
 1427              		@ args = 0, pretend = 0, frame = 0
 1428              		@ frame_needed = 0, uses_anonymous_args = 0
 1429              		@ link register save eliminated.
1297:FWLIB/src/stm32f4xx_usart.c ****   FlagStatus bitstatus = RESET;
 1430              		.loc 1 1297 3 view .LVU395
1298:FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
1299:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1431              		.loc 1 1299 3 view .LVU396
1300:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_FLAG(USART_FLAG));
 1432              		.loc 1 1300 3 view .LVU397
1301:FWLIB/src/stm32f4xx_usart.c **** 
1302:FWLIB/src/stm32f4xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1303:FWLIB/src/stm32f4xx_usart.c ****   if (USART_FLAG == USART_FLAG_CTS)
 1433              		.loc 1 1303 3 view .LVU398
1304:FWLIB/src/stm32f4xx_usart.c ****   {
1305:FWLIB/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
 1434              		.loc 1 1305 5 view .LVU399
1306:FWLIB/src/stm32f4xx_usart.c ****   } 
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 49


1307:FWLIB/src/stm32f4xx_usart.c ****     
1308:FWLIB/src/stm32f4xx_usart.c ****   if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 1435              		.loc 1 1308 3 view .LVU400
 1436              		.loc 1 1308 14 is_stmt 0 view .LVU401
 1437 0000 0388     		ldrh	r3, [r0]
 1438              		.loc 1 1308 6 view .LVU402
 1439 0002 1942     		tst	r1, r3
 1440 0004 01D0     		beq	.L87
1309:FWLIB/src/stm32f4xx_usart.c ****   {
1310:FWLIB/src/stm32f4xx_usart.c ****     bitstatus = SET;
 1441              		.loc 1 1310 15 view .LVU403
 1442 0006 0120     		movs	r0, #1
 1443              	.LVL116:
 1444              		.loc 1 1310 15 view .LVU404
 1445 0008 7047     		bx	lr
 1446              	.LVL117:
 1447              	.L87:
1311:FWLIB/src/stm32f4xx_usart.c ****   }
1312:FWLIB/src/stm32f4xx_usart.c ****   else
1313:FWLIB/src/stm32f4xx_usart.c ****   {
1314:FWLIB/src/stm32f4xx_usart.c ****     bitstatus = RESET;
 1448              		.loc 1 1314 15 view .LVU405
 1449 000a 0020     		movs	r0, #0
 1450              	.LVL118:
1315:FWLIB/src/stm32f4xx_usart.c ****   }
1316:FWLIB/src/stm32f4xx_usart.c ****   return bitstatus;
 1451              		.loc 1 1316 3 is_stmt 1 view .LVU406
1317:FWLIB/src/stm32f4xx_usart.c **** }
 1452              		.loc 1 1317 1 is_stmt 0 view .LVU407
 1453 000c 7047     		bx	lr
 1454              		.cfi_endproc
 1455              	.LFE148:
 1457              		.section	.text.USART_ClearFlag,"ax",%progbits
 1458              		.align	1
 1459              		.global	USART_ClearFlag
 1460              		.syntax unified
 1461              		.thumb
 1462              		.thumb_func
 1463              		.fpu fpv4-sp-d16
 1465              	USART_ClearFlag:
 1466              	.LVL119:
 1467              	.LFB149:
1318:FWLIB/src/stm32f4xx_usart.c **** 
1319:FWLIB/src/stm32f4xx_usart.c **** /**
1320:FWLIB/src/stm32f4xx_usart.c ****   * @brief  Clears the USARTx's pending flags.
1321:FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1322:FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
1323:FWLIB/src/stm32f4xx_usart.c ****   * @param  USART_FLAG: specifies the flag to clear.
1324:FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be any combination of the following values:
1325:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5).
1326:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag.
1327:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag.
1328:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag.
1329:FWLIB/src/stm32f4xx_usart.c ****   *   
1330:FWLIB/src/stm32f4xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1331:FWLIB/src/stm32f4xx_usart.c ****   *          error) and IDLE (Idle line detected) flags are cleared by software 
1332:FWLIB/src/stm32f4xx_usart.c ****   *          sequence: a read operation to USART_SR register (USART_GetFlagStatus()) 
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 50


1333:FWLIB/src/stm32f4xx_usart.c ****   *          followed by a read operation to USART_DR register (USART_ReceiveData()).
1334:FWLIB/src/stm32f4xx_usart.c ****   * @note   RXNE flag can be also cleared by a read to the USART_DR register 
1335:FWLIB/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1336:FWLIB/src/stm32f4xx_usart.c ****   * @note   TC flag can be also cleared by software sequence: a read operation to 
1337:FWLIB/src/stm32f4xx_usart.c ****   *          USART_SR register (USART_GetFlagStatus()) followed by a write operation
1338:FWLIB/src/stm32f4xx_usart.c ****   *          to USART_DR register (USART_SendData()).
1339:FWLIB/src/stm32f4xx_usart.c ****   * @note   TXE flag is cleared only by a write to the USART_DR register 
1340:FWLIB/src/stm32f4xx_usart.c ****   *          (USART_SendData()).
1341:FWLIB/src/stm32f4xx_usart.c ****   *   
1342:FWLIB/src/stm32f4xx_usart.c ****   * @retval None
1343:FWLIB/src/stm32f4xx_usart.c ****   */
1344:FWLIB/src/stm32f4xx_usart.c **** void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1345:FWLIB/src/stm32f4xx_usart.c **** {
 1468              		.loc 1 1345 1 is_stmt 1 view -0
 1469              		.cfi_startproc
 1470              		@ args = 0, pretend = 0, frame = 0
 1471              		@ frame_needed = 0, uses_anonymous_args = 0
 1472              		@ link register save eliminated.
1346:FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
1347:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1473              		.loc 1 1347 3 view .LVU409
1348:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
 1474              		.loc 1 1348 3 view .LVU410
1349:FWLIB/src/stm32f4xx_usart.c **** 
1350:FWLIB/src/stm32f4xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1351:FWLIB/src/stm32f4xx_usart.c ****   if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
 1475              		.loc 1 1351 3 view .LVU411
1352:FWLIB/src/stm32f4xx_usart.c ****   {
1353:FWLIB/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
 1476              		.loc 1 1353 5 view .LVU412
1354:FWLIB/src/stm32f4xx_usart.c ****   } 
1355:FWLIB/src/stm32f4xx_usart.c ****        
1356:FWLIB/src/stm32f4xx_usart.c ****   USARTx->SR = (uint16_t)~USART_FLAG;
 1477              		.loc 1 1356 3 view .LVU413
 1478              		.loc 1 1356 16 is_stmt 0 view .LVU414
 1479 0000 C943     		mvns	r1, r1
 1480              	.LVL120:
 1481              		.loc 1 1356 16 view .LVU415
 1482 0002 89B2     		uxth	r1, r1
 1483              		.loc 1 1356 14 view .LVU416
 1484 0004 0180     		strh	r1, [r0]	@ movhi
1357:FWLIB/src/stm32f4xx_usart.c **** }
 1485              		.loc 1 1357 1 view .LVU417
 1486 0006 7047     		bx	lr
 1487              		.cfi_endproc
 1488              	.LFE149:
 1490              		.section	.text.USART_GetITStatus,"ax",%progbits
 1491              		.align	1
 1492              		.global	USART_GetITStatus
 1493              		.syntax unified
 1494              		.thumb
 1495              		.thumb_func
 1496              		.fpu fpv4-sp-d16
 1498              	USART_GetITStatus:
 1499              	.LVL121:
 1500              	.LFB150:
1358:FWLIB/src/stm32f4xx_usart.c **** 
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 51


1359:FWLIB/src/stm32f4xx_usart.c **** /**
1360:FWLIB/src/stm32f4xx_usart.c ****   * @brief  Checks whether the specified USART interrupt has occurred or not.
1361:FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1362:FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
1363:FWLIB/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt source to check.
1364:FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1365:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1366:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1367:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1368:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1369:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1370:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1371:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ORE_RX : OverRun Error interrupt if the RXNEIE bit is set
1372:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ORE_ER : OverRun Error interrupt if the EIE bit is set  
1373:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_NE:   Noise Error interrupt
1374:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_FE:   Framing Error interrupt
1375:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1376:FWLIB/src/stm32f4xx_usart.c ****   * @retval The new state of USART_IT (SET or RESET).
1377:FWLIB/src/stm32f4xx_usart.c ****   */
1378:FWLIB/src/stm32f4xx_usart.c **** ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
1379:FWLIB/src/stm32f4xx_usart.c **** {
 1501              		.loc 1 1379 1 is_stmt 1 view -0
 1502              		.cfi_startproc
 1503              		@ args = 0, pretend = 0, frame = 0
 1504              		@ frame_needed = 0, uses_anonymous_args = 0
 1505              		@ link register save eliminated.
1380:FWLIB/src/stm32f4xx_usart.c ****   uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 1506              		.loc 1 1380 3 view .LVU419
1381:FWLIB/src/stm32f4xx_usart.c ****   ITStatus bitstatus = RESET;
 1507              		.loc 1 1381 3 view .LVU420
1382:FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
1383:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1508              		.loc 1 1383 3 view .LVU421
1384:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_GET_IT(USART_IT)); 
 1509              		.loc 1 1384 3 view .LVU422
1385:FWLIB/src/stm32f4xx_usart.c **** 
1386:FWLIB/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */ 
1387:FWLIB/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
 1510              		.loc 1 1387 3 view .LVU423
1388:FWLIB/src/stm32f4xx_usart.c ****   {
1389:FWLIB/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
 1511              		.loc 1 1389 5 view .LVU424
1390:FWLIB/src/stm32f4xx_usart.c ****   } 
1391:FWLIB/src/stm32f4xx_usart.c ****     
1392:FWLIB/src/stm32f4xx_usart.c ****   /* Get the USART register index */
1393:FWLIB/src/stm32f4xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 1512              		.loc 1 1393 3 view .LVU425
 1513              		.loc 1 1393 35 is_stmt 0 view .LVU426
 1514 0000 C1F34212 		ubfx	r2, r1, #5, #3
 1515              	.LVL122:
1394:FWLIB/src/stm32f4xx_usart.c ****   /* Get the interrupt position */
1395:FWLIB/src/stm32f4xx_usart.c ****   itmask = USART_IT & IT_MASK;
 1516              		.loc 1 1395 3 is_stmt 1 view .LVU427
 1517              		.loc 1 1395 10 is_stmt 0 view .LVU428
 1518 0004 01F01F0C 		and	ip, r1, #31
 1519              	.LVL123:
1396:FWLIB/src/stm32f4xx_usart.c ****   itmask = (uint32_t)0x01 << itmask;
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 52


 1520              		.loc 1 1396 3 is_stmt 1 view .LVU429
 1521              		.loc 1 1396 10 is_stmt 0 view .LVU430
 1522 0008 0123     		movs	r3, #1
 1523 000a 03FA0CF3 		lsl	r3, r3, ip
 1524              	.LVL124:
1397:FWLIB/src/stm32f4xx_usart.c ****   
1398:FWLIB/src/stm32f4xx_usart.c ****   if (usartreg == 0x01) /* The IT  is in CR1 register */
 1525              		.loc 1 1398 3 is_stmt 1 view .LVU431
 1526              		.loc 1 1398 6 is_stmt 0 view .LVU432
 1527 000e 012A     		cmp	r2, #1
 1528 0010 0FD0     		beq	.L96
1399:FWLIB/src/stm32f4xx_usart.c ****   {
1400:FWLIB/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR1;
1401:FWLIB/src/stm32f4xx_usart.c ****   }
1402:FWLIB/src/stm32f4xx_usart.c ****   else if (usartreg == 0x02) /* The IT  is in CR2 register */
 1529              		.loc 1 1402 8 is_stmt 1 view .LVU433
 1530              		.loc 1 1402 11 is_stmt 0 view .LVU434
 1531 0012 022A     		cmp	r2, #2
 1532 0014 11D0     		beq	.L97
1403:FWLIB/src/stm32f4xx_usart.c ****   {
1404:FWLIB/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR2;
1405:FWLIB/src/stm32f4xx_usart.c ****   }
1406:FWLIB/src/stm32f4xx_usart.c ****   else /* The IT  is in CR3 register */
1407:FWLIB/src/stm32f4xx_usart.c ****   {
1408:FWLIB/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR3;
 1533              		.loc 1 1408 5 is_stmt 1 view .LVU435
 1534              		.loc 1 1408 21 is_stmt 0 view .LVU436
 1535 0016 828A     		ldrh	r2, [r0, #20]
 1536              	.LVL125:
 1537              		.loc 1 1408 21 view .LVU437
 1538 0018 92B2     		uxth	r2, r2
 1539              		.loc 1 1408 12 view .LVU438
 1540 001a 1340     		ands	r3, r3, r2
 1541              	.LVL126:
 1542              	.L91:
1409:FWLIB/src/stm32f4xx_usart.c ****   }
1410:FWLIB/src/stm32f4xx_usart.c ****   
1411:FWLIB/src/stm32f4xx_usart.c ****   bitpos = USART_IT >> 0x08;
 1543              		.loc 1 1411 3 is_stmt 1 view .LVU439
 1544              		.loc 1 1411 21 is_stmt 0 view .LVU440
 1545 001c 090A     		lsrs	r1, r1, #8
 1546              	.LVL127:
1412:FWLIB/src/stm32f4xx_usart.c ****   bitpos = (uint32_t)0x01 << bitpos;
 1547              		.loc 1 1412 3 is_stmt 1 view .LVU441
 1548              		.loc 1 1412 10 is_stmt 0 view .LVU442
 1549 001e 0122     		movs	r2, #1
 1550 0020 02FA01F1 		lsl	r1, r2, r1
 1551              	.LVL128:
1413:FWLIB/src/stm32f4xx_usart.c ****   bitpos &= USARTx->SR;
 1552              		.loc 1 1413 3 is_stmt 1 view .LVU443
 1553              		.loc 1 1413 19 is_stmt 0 view .LVU444
 1554 0024 0288     		ldrh	r2, [r0]
 1555 0026 92B2     		uxth	r2, r2
 1556              		.loc 1 1413 10 view .LVU445
 1557 0028 0A40     		ands	r2, r2, r1
 1558              	.LVL129:
1414:FWLIB/src/stm32f4xx_usart.c ****   if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 53


 1559              		.loc 1 1414 3 is_stmt 1 view .LVU446
 1560              		.loc 1 1414 6 is_stmt 0 view .LVU447
 1561 002a 53B1     		cbz	r3, .L94
 1562              		.loc 1 1414 34 discriminator 1 view .LVU448
 1563 002c 5AB9     		cbnz	r2, .L95
1415:FWLIB/src/stm32f4xx_usart.c ****   {
1416:FWLIB/src/stm32f4xx_usart.c ****     bitstatus = SET;
1417:FWLIB/src/stm32f4xx_usart.c ****   }
1418:FWLIB/src/stm32f4xx_usart.c ****   else
1419:FWLIB/src/stm32f4xx_usart.c ****   {
1420:FWLIB/src/stm32f4xx_usart.c ****     bitstatus = RESET;
 1564              		.loc 1 1420 15 view .LVU449
 1565 002e 0020     		movs	r0, #0
 1566              	.LVL130:
 1567              		.loc 1 1420 15 view .LVU450
 1568 0030 7047     		bx	lr
 1569              	.LVL131:
 1570              	.L96:
1400:FWLIB/src/stm32f4xx_usart.c ****   }
 1571              		.loc 1 1400 5 is_stmt 1 view .LVU451
1400:FWLIB/src/stm32f4xx_usart.c ****   }
 1572              		.loc 1 1400 21 is_stmt 0 view .LVU452
 1573 0032 8289     		ldrh	r2, [r0, #12]
 1574              	.LVL132:
1400:FWLIB/src/stm32f4xx_usart.c ****   }
 1575              		.loc 1 1400 21 view .LVU453
 1576 0034 92B2     		uxth	r2, r2
1400:FWLIB/src/stm32f4xx_usart.c ****   }
 1577              		.loc 1 1400 12 view .LVU454
 1578 0036 1340     		ands	r3, r3, r2
 1579              	.LVL133:
1400:FWLIB/src/stm32f4xx_usart.c ****   }
 1580              		.loc 1 1400 12 view .LVU455
 1581 0038 F0E7     		b	.L91
 1582              	.LVL134:
 1583              	.L97:
1404:FWLIB/src/stm32f4xx_usart.c ****   }
 1584              		.loc 1 1404 5 is_stmt 1 view .LVU456
1404:FWLIB/src/stm32f4xx_usart.c ****   }
 1585              		.loc 1 1404 21 is_stmt 0 view .LVU457
 1586 003a 028A     		ldrh	r2, [r0, #16]
 1587              	.LVL135:
1404:FWLIB/src/stm32f4xx_usart.c ****   }
 1588              		.loc 1 1404 21 view .LVU458
 1589 003c 92B2     		uxth	r2, r2
1404:FWLIB/src/stm32f4xx_usart.c ****   }
 1590              		.loc 1 1404 12 view .LVU459
 1591 003e 1340     		ands	r3, r3, r2
 1592              	.LVL136:
1404:FWLIB/src/stm32f4xx_usart.c ****   }
 1593              		.loc 1 1404 12 view .LVU460
 1594 0040 ECE7     		b	.L91
 1595              	.LVL137:
 1596              	.L94:
 1597              		.loc 1 1420 15 view .LVU461
 1598 0042 0020     		movs	r0, #0
 1599              	.LVL138:
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 54


 1600              		.loc 1 1420 15 view .LVU462
 1601 0044 7047     		bx	lr
 1602              	.LVL139:
 1603              	.L95:
1416:FWLIB/src/stm32f4xx_usart.c ****   }
 1604              		.loc 1 1416 15 view .LVU463
 1605 0046 0120     		movs	r0, #1
 1606              	.LVL140:
1421:FWLIB/src/stm32f4xx_usart.c ****   }
1422:FWLIB/src/stm32f4xx_usart.c ****   
1423:FWLIB/src/stm32f4xx_usart.c ****   return bitstatus;  
 1607              		.loc 1 1423 3 is_stmt 1 view .LVU464
1424:FWLIB/src/stm32f4xx_usart.c **** }
 1608              		.loc 1 1424 1 is_stmt 0 view .LVU465
 1609 0048 7047     		bx	lr
 1610              		.cfi_endproc
 1611              	.LFE150:
 1613              		.section	.text.USART_ClearITPendingBit,"ax",%progbits
 1614              		.align	1
 1615              		.global	USART_ClearITPendingBit
 1616              		.syntax unified
 1617              		.thumb
 1618              		.thumb_func
 1619              		.fpu fpv4-sp-d16
 1621              	USART_ClearITPendingBit:
 1622              	.LVL141:
 1623              	.LFB151:
1425:FWLIB/src/stm32f4xx_usart.c **** 
1426:FWLIB/src/stm32f4xx_usart.c **** /**
1427:FWLIB/src/stm32f4xx_usart.c ****   * @brief  Clears the USARTx's interrupt pending bits.
1428:FWLIB/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1429:FWLIB/src/stm32f4xx_usart.c ****   *         UART peripheral.
1430:FWLIB/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the interrupt pending bit to clear.
1431:FWLIB/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1432:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1433:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1434:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt. 
1435:FWLIB/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt.
1436:FWLIB/src/stm32f4xx_usart.c ****   *
1437:FWLIB/src/stm32f4xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1438:FWLIB/src/stm32f4xx_usart.c ****   *          error) and IDLE (Idle line detected) pending bits are cleared by 
1439:FWLIB/src/stm32f4xx_usart.c ****   *          software sequence: a read operation to USART_SR register 
1440:FWLIB/src/stm32f4xx_usart.c ****   *          (USART_GetITStatus()) followed by a read operation to USART_DR register 
1441:FWLIB/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1442:FWLIB/src/stm32f4xx_usart.c ****   * @note   RXNE pending bit can be also cleared by a read to the USART_DR register 
1443:FWLIB/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1444:FWLIB/src/stm32f4xx_usart.c ****   * @note   TC pending bit can be also cleared by software sequence: a read 
1445:FWLIB/src/stm32f4xx_usart.c ****   *          operation to USART_SR register (USART_GetITStatus()) followed by a write 
1446:FWLIB/src/stm32f4xx_usart.c ****   *          operation to USART_DR register (USART_SendData()).
1447:FWLIB/src/stm32f4xx_usart.c ****   * @note   TXE pending bit is cleared only by a write to the USART_DR register 
1448:FWLIB/src/stm32f4xx_usart.c ****   *          (USART_SendData()).
1449:FWLIB/src/stm32f4xx_usart.c ****   *  
1450:FWLIB/src/stm32f4xx_usart.c ****   * @retval None
1451:FWLIB/src/stm32f4xx_usart.c ****   */
1452:FWLIB/src/stm32f4xx_usart.c **** void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
1453:FWLIB/src/stm32f4xx_usart.c **** {
 1624              		.loc 1 1453 1 is_stmt 1 view -0
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 55


 1625              		.cfi_startproc
 1626              		@ args = 0, pretend = 0, frame = 0
 1627              		@ frame_needed = 0, uses_anonymous_args = 0
 1628              		@ link register save eliminated.
1454:FWLIB/src/stm32f4xx_usart.c ****   uint16_t bitpos = 0x00, itmask = 0x00;
 1629              		.loc 1 1454 3 view .LVU467
1455:FWLIB/src/stm32f4xx_usart.c ****   /* Check the parameters */
1456:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1630              		.loc 1 1456 3 view .LVU468
1457:FWLIB/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLEAR_IT(USART_IT)); 
 1631              		.loc 1 1457 3 view .LVU469
1458:FWLIB/src/stm32f4xx_usart.c **** 
1459:FWLIB/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1460:FWLIB/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
 1632              		.loc 1 1460 3 view .LVU470
1461:FWLIB/src/stm32f4xx_usart.c ****   {
1462:FWLIB/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
 1633              		.loc 1 1462 5 view .LVU471
1463:FWLIB/src/stm32f4xx_usart.c ****   } 
1464:FWLIB/src/stm32f4xx_usart.c ****     
1465:FWLIB/src/stm32f4xx_usart.c ****   bitpos = USART_IT >> 0x08;
 1634              		.loc 1 1465 3 view .LVU472
 1635              		.loc 1 1465 10 is_stmt 0 view .LVU473
 1636 0000 090A     		lsrs	r1, r1, #8
 1637              	.LVL142:
1466:FWLIB/src/stm32f4xx_usart.c ****   itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 1638              		.loc 1 1466 3 is_stmt 1 view .LVU474
 1639              		.loc 1 1466 28 is_stmt 0 view .LVU475
 1640 0002 0123     		movs	r3, #1
 1641 0004 8B40     		lsls	r3, r3, r1
 1642              		.loc 1 1466 10 view .LVU476
 1643 0006 9BB2     		uxth	r3, r3
 1644              	.LVL143:
1467:FWLIB/src/stm32f4xx_usart.c ****   USARTx->SR = (uint16_t)~itmask;
 1645              		.loc 1 1467 3 is_stmt 1 view .LVU477
 1646              		.loc 1 1467 16 is_stmt 0 view .LVU478
 1647 0008 DB43     		mvns	r3, r3
 1648              	.LVL144:
 1649              		.loc 1 1467 16 view .LVU479
 1650 000a 9BB2     		uxth	r3, r3
 1651              	.LVL145:
 1652              		.loc 1 1467 14 view .LVU480
 1653 000c 0380     		strh	r3, [r0]	@ movhi
1468:FWLIB/src/stm32f4xx_usart.c **** }
 1654              		.loc 1 1468 1 view .LVU481
 1655 000e 7047     		bx	lr
 1656              		.cfi_endproc
 1657              	.LFE151:
 1659              		.text
 1660              	.Letext0:
 1661              		.file 2 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2020-q4-major\\arm-none-eabi\\inc
 1662              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2020-q4-major\\arm-none-eabi\\inc
 1663              		.file 4 "USER/stm32f4xx.h"
 1664              		.file 5 "FWLIB/inc/stm32f4xx_rcc.h"
 1665              		.file 6 "FWLIB/inc/stm32f4xx_usart.h"
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 56


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_usart.c
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:18     .text.USART_DeInit:00000000 $t
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:26     .text.USART_DeInit:00000000 USART_DeInit
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:209    .text.USART_DeInit:000000dc $d
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:221    .text.USART_Init:00000000 $t
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:228    .text.USART_Init:00000000 USART_Init
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:467    .text.USART_Init:000000c4 $d
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:473    .text.USART_StructInit:00000000 $t
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:480    .text.USART_StructInit:00000000 USART_StructInit
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:515    .text.USART_ClockInit:00000000 $t
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:522    .text.USART_ClockInit:00000000 USART_ClockInit
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:579    .text.USART_ClockStructInit:00000000 $t
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:586    .text.USART_ClockStructInit:00000000 USART_ClockStructInit
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:613    .text.USART_Cmd:00000000 $t
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:620    .text.USART_Cmd:00000000 USART_Cmd
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:654    .text.USART_SetPrescaler:00000000 $t
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:661    .text.USART_SetPrescaler:00000000 USART_SetPrescaler
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:687    .text.USART_OverSampling8Cmd:00000000 $t
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:694    .text.USART_OverSampling8Cmd:00000000 USART_OverSampling8Cmd
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:727    .text.USART_OneBitMethodCmd:00000000 $t
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:734    .text.USART_OneBitMethodCmd:00000000 USART_OneBitMethodCmd
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:768    .text.USART_SendData:00000000 $t
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:775    .text.USART_SendData:00000000 USART_SendData
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:797    .text.USART_ReceiveData:00000000 $t
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:804    .text.USART_ReceiveData:00000000 USART_ReceiveData
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:824    .text.USART_SetAddress:00000000 $t
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:831    .text.USART_SetAddress:00000000 USART_SetAddress
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:860    .text.USART_ReceiverWakeUpCmd:00000000 $t
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:867    .text.USART_ReceiverWakeUpCmd:00000000 USART_ReceiverWakeUpCmd
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:901    .text.USART_WakeUpConfig:00000000 $t
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:908    .text.USART_WakeUpConfig:00000000 USART_WakeUpConfig
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:937    .text.USART_LINBreakDetectLengthConfig:00000000 $t
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:944    .text.USART_LINBreakDetectLengthConfig:00000000 USART_LINBreakDetectLengthConfig
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:973    .text.USART_LINCmd:00000000 $t
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:980    .text.USART_LINCmd:00000000 USART_LINCmd
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:1014   .text.USART_SendBreak:00000000 $t
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:1021   .text.USART_SendBreak:00000000 USART_SendBreak
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:1042   .text.USART_HalfDuplexCmd:00000000 $t
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:1049   .text.USART_HalfDuplexCmd:00000000 USART_HalfDuplexCmd
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:1083   .text.USART_SetGuardTime:00000000 $t
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:1090   .text.USART_SetGuardTime:00000000 USART_SetGuardTime
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:1116   .text.USART_SmartCardCmd:00000000 $t
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:1123   .text.USART_SmartCardCmd:00000000 USART_SmartCardCmd
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:1157   .text.USART_SmartCardNACKCmd:00000000 $t
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:1164   .text.USART_SmartCardNACKCmd:00000000 USART_SmartCardNACKCmd
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:1198   .text.USART_IrDAConfig:00000000 $t
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:1205   .text.USART_IrDAConfig:00000000 USART_IrDAConfig
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:1234   .text.USART_IrDACmd:00000000 $t
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:1241   .text.USART_IrDACmd:00000000 USART_IrDACmd
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:1275   .text.USART_DMACmd:00000000 $t
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:1282   .text.USART_DMACmd:00000000 USART_DMACmd
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:1324   .text.USART_ITConfig:00000000 $t
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:1331   .text.USART_ITConfig:00000000 USART_ITConfig
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:1415   .text.USART_GetFlagStatus:00000000 $t
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:1422   .text.USART_GetFlagStatus:00000000 USART_GetFlagStatus
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:1458   .text.USART_ClearFlag:00000000 $t
ARM GAS  C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s 			page 57


C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:1465   .text.USART_ClearFlag:00000000 USART_ClearFlag
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:1491   .text.USART_GetITStatus:00000000 $t
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:1498   .text.USART_GetITStatus:00000000 USART_GetITStatus
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:1614   .text.USART_ClearITPendingBit:00000000 $t
C:\Users\huav\AppData\Local\Temp\cc8o3Osb.s:1621   .text.USART_ClearITPendingBit:00000000 USART_ClearITPendingBit

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
