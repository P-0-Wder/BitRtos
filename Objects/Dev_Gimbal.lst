ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccqlbdTj.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"Dev_Gimbal.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.DevGimbal_Obj_Clear,"ax",%progbits
  22              		.align	2
  23              		.thumb
  24              		.thumb_func
  26              	DevGimbal_Obj_Clear:
  27              	.LFB123:
  28              		.file 1 "Dev/Dev_Gimbal.c"
   1:Dev/Dev_Gimbal.c **** #include <string.h>
   2:Dev/Dev_Gimbal.c **** #include "Dev_Gimbal.h"
   3:Dev/Dev_Gimbal.c **** #include "drv_adc.h"
   4:Dev/Dev_Gimbal.c **** #include "drv_gpio.h"
   5:Dev/Dev_Gimbal.c **** 
   6:Dev/Dev_Gimbal.c **** /* internal variable */
   7:Dev/Dev_Gimbal.c **** static uint8_t Gimbal_Num = 0;
   8:Dev/Dev_Gimbal.c **** 
   9:Dev/Dev_Gimbal.c **** /* external function */
  10:Dev/Dev_Gimbal.c **** static bool DevGimbal_Obj_Clear(DevGimbal_Obj_TypeDef *obj);
  11:Dev/Dev_Gimbal.c **** static bool DevGimbal_Open(DevGimbal_Obj_TypeDef *obj);
  12:Dev/Dev_Gimbal.c **** static bool DevGimbal_Invert(DevGimbal_Obj_TypeDef *obj, uint8_t invert_reg);
  13:Dev/Dev_Gimbal.c **** static DevGimbal_Val_TypeDef DevGimbal_Get(DevGimbal_Obj_TypeDef *obj);
  14:Dev/Dev_Gimbal.c **** static uint8_t DrvGimbal_GetNum(void);
  15:Dev/Dev_Gimbal.c **** 
  16:Dev/Dev_Gimbal.c **** /* external variable */
  17:Dev/Dev_Gimbal.c **** DevGimbal_TypeDef DevGimbal = {
  18:Dev/Dev_Gimbal.c ****     .obj_clear = DevGimbal_Obj_Clear,
  19:Dev/Dev_Gimbal.c ****     .open = DevGimbal_Open,
  20:Dev/Dev_Gimbal.c ****     .invert = DevGimbal_Invert,
  21:Dev/Dev_Gimbal.c ****     .get = DevGimbal_Get,
  22:Dev/Dev_Gimbal.c ****     .get_gimbal_num = DrvGimbal_GetNum,
  23:Dev/Dev_Gimbal.c **** };
  24:Dev/Dev_Gimbal.c **** 
  25:Dev/Dev_Gimbal.c **** static bool DevGimbal_Obj_Clear(DevGimbal_Obj_TypeDef *obj)
  26:Dev/Dev_Gimbal.c **** {
  29              		.loc 1 26 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccqlbdTj.s 			page 2


  33              		@ link register save eliminated.
  34              	.LVL0:
  27:Dev/Dev_Gimbal.c ****     if (obj == NULL)
  35              		.loc 1 27 0
  36 0000 30B1     		cbz	r0, .L3
  28:Dev/Dev_Gimbal.c ****         return false;
  29:Dev/Dev_Gimbal.c **** 
  30:Dev/Dev_Gimbal.c ****     obj->Ch_X = ADC1_Channel_None;
  37              		.loc 1 30 0
  38 0002 FF22     		movs	r2, #255
  39 0004 4270     		strb	r2, [r0, #1]
  31:Dev/Dev_Gimbal.c ****     obj->Ch_Y = ADC1_Channel_None;
  40              		.loc 1 31 0
  41 0006 8270     		strb	r2, [r0, #2]
  32:Dev/Dev_Gimbal.c **** 
  33:Dev/Dev_Gimbal.c ****     obj->invert_reg = Gimbal_NoneAxis_Invert;
  42              		.loc 1 33 0
  43 0008 0022     		movs	r2, #0
  44 000a 0270     		strb	r2, [r0]
  34:Dev/Dev_Gimbal.c **** 
  35:Dev/Dev_Gimbal.c ****     return true;
  45              		.loc 1 35 0
  46 000c 0120     		movs	r0, #1
  47              	.LVL1:
  48 000e 7047     		bx	lr
  49              	.LVL2:
  50              	.L3:
  28:Dev/Dev_Gimbal.c **** 
  51              		.loc 1 28 0
  52 0010 0020     		movs	r0, #0
  53              	.LVL3:
  36:Dev/Dev_Gimbal.c **** }
  54              		.loc 1 36 0
  55 0012 7047     		bx	lr
  56              		.cfi_endproc
  57              	.LFE123:
  59              		.section	.text.DrvGimbal_GetNum,"ax",%progbits
  60              		.align	2
  61              		.thumb
  62              		.thumb_func
  64              	DrvGimbal_GetNum:
  65              	.LFB124:
  37:Dev/Dev_Gimbal.c **** 
  38:Dev/Dev_Gimbal.c **** static uint8_t DrvGimbal_GetNum(void)
  39:Dev/Dev_Gimbal.c **** {
  66              		.loc 1 39 0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 0
  69              		@ frame_needed = 0, uses_anonymous_args = 0
  70              		@ link register save eliminated.
  40:Dev/Dev_Gimbal.c ****     return Gimbal_Num;
  41:Dev/Dev_Gimbal.c **** }
  71              		.loc 1 41 0
  72 0000 014B     		ldr	r3, .L5
  73 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
  74 0004 7047     		bx	lr
  75              	.L6:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccqlbdTj.s 			page 3


  76 0006 00BF     		.align	2
  77              	.L5:
  78 0008 00000000 		.word	.LANCHOR0
  79              		.cfi_endproc
  80              	.LFE124:
  82              		.section	.text.DevGimbal_Open,"ax",%progbits
  83              		.align	2
  84              		.thumb
  85              		.thumb_func
  87              	DevGimbal_Open:
  88              	.LFB125:
  42:Dev/Dev_Gimbal.c **** 
  43:Dev/Dev_Gimbal.c **** static bool DevGimbal_Open(DevGimbal_Obj_TypeDef *obj)
  44:Dev/Dev_Gimbal.c **** {
  89              		.loc 1 44 0
  90              		.cfi_startproc
  91              		@ args = 0, pretend = 0, frame = 0
  92              		@ frame_needed = 0, uses_anonymous_args = 0
  93              	.LVL4:
  45:Dev/Dev_Gimbal.c ****     if ((obj == NULL) || (obj->Ch_X == ADC1_Channel_None) || (obj->Ch_Y == ADC1_Channel_None) || (o
  94              		.loc 1 45 0
  95 0000 B8B1     		cbz	r0, .L9
  44:Dev/Dev_Gimbal.c ****     if ((obj == NULL) || (obj->Ch_X == ADC1_Channel_None) || (obj->Ch_Y == ADC1_Channel_None) || (o
  96              		.loc 1 44 0 discriminator 1
  97 0002 38B5     		push	{r3, r4, r5, lr}
  98              	.LCFI0:
  99              		.cfi_def_cfa_offset 16
 100              		.cfi_offset 3, -16
 101              		.cfi_offset 4, -12
 102              		.cfi_offset 5, -8
 103              		.cfi_offset 14, -4
 104              		.loc 1 45 0 discriminator 1
 105 0004 4178     		ldrb	r1, [r0, #1]	@ zero_extendqisi2
 106 0006 FF29     		cmp	r1, #255
 107 0008 15D0     		beq	.L10
 108              		.loc 1 45 0 is_stmt 0 discriminator 2
 109 000a 8278     		ldrb	r2, [r0, #2]	@ zero_extendqisi2
 110 000c FF2A     		cmp	r2, #255
 111 000e 14D0     		beq	.L11
 112              		.loc 1 45 0 discriminator 3
 113 0010 9142     		cmp	r1, r2
 114 0012 14D0     		beq	.L12
 115 0014 0446     		mov	r4, r0
  46:Dev/Dev_Gimbal.c ****         return false;
  47:Dev/Dev_Gimbal.c **** 
  48:Dev/Dev_Gimbal.c ****     DrvADC.ctl(ADC_Open, obj->Ch_X);
 116              		.loc 1 48 0 is_stmt 1
 117 0016 0B4D     		ldr	r5, .L14
 118 0018 2B68     		ldr	r3, [r5]
 119 001a 0020     		movs	r0, #0
 120              	.LVL5:
 121 001c 9847     		blx	r3
 122              	.LVL6:
  49:Dev/Dev_Gimbal.c ****     DrvADC.ctl(ADC_Open, obj->Ch_Y);
 123              		.loc 1 49 0
 124 001e 2B68     		ldr	r3, [r5]
 125 0020 A178     		ldrb	r1, [r4, #2]	@ zero_extendqisi2
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccqlbdTj.s 			page 4


 126 0022 0020     		movs	r0, #0
 127 0024 9847     		blx	r3
 128              	.LVL7:
  50:Dev/Dev_Gimbal.c **** 
  51:Dev/Dev_Gimbal.c ****     Gimbal_Num++;
 129              		.loc 1 51 0
 130 0026 084A     		ldr	r2, .L14+4
 131 0028 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 132 002a 0133     		adds	r3, r3, #1
 133 002c 1370     		strb	r3, [r2]
  52:Dev/Dev_Gimbal.c **** 
  53:Dev/Dev_Gimbal.c ****     return true;
 134              		.loc 1 53 0
 135 002e 0120     		movs	r0, #1
 136 0030 38BD     		pop	{r3, r4, r5, pc}
 137              	.LVL8:
 138              	.L9:
 139              	.LCFI1:
 140              		.cfi_def_cfa_offset 0
 141              		.cfi_restore 3
 142              		.cfi_restore 4
 143              		.cfi_restore 5
 144              		.cfi_restore 14
  46:Dev/Dev_Gimbal.c **** 
 145              		.loc 1 46 0
 146 0032 0020     		movs	r0, #0
 147              	.LVL9:
  54:Dev/Dev_Gimbal.c **** }
 148              		.loc 1 54 0
 149 0034 7047     		bx	lr
 150              	.LVL10:
 151              	.L10:
 152              	.LCFI2:
 153              		.cfi_def_cfa_offset 16
 154              		.cfi_offset 3, -16
 155              		.cfi_offset 4, -12
 156              		.cfi_offset 5, -8
 157              		.cfi_offset 14, -4
  46:Dev/Dev_Gimbal.c **** 
 158              		.loc 1 46 0
 159 0036 0020     		movs	r0, #0
 160              	.LVL11:
 161 0038 38BD     		pop	{r3, r4, r5, pc}
 162              	.LVL12:
 163              	.L11:
 164 003a 0020     		movs	r0, #0
 165              	.LVL13:
 166 003c 38BD     		pop	{r3, r4, r5, pc}
 167              	.LVL14:
 168              	.L12:
 169 003e 0020     		movs	r0, #0
 170              	.LVL15:
 171              		.loc 1 54 0
 172 0040 38BD     		pop	{r3, r4, r5, pc}
 173              	.L15:
 174 0042 00BF     		.align	2
 175              	.L14:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccqlbdTj.s 			page 5


 176 0044 00000000 		.word	DrvADC
 177 0048 00000000 		.word	.LANCHOR0
 178              		.cfi_endproc
 179              	.LFE125:
 181              		.section	.text.DevGimbal_Invert,"ax",%progbits
 182              		.align	2
 183              		.thumb
 184              		.thumb_func
 186              	DevGimbal_Invert:
 187              	.LFB126:
  55:Dev/Dev_Gimbal.c **** 
  56:Dev/Dev_Gimbal.c **** static bool DevGimbal_Invert(DevGimbal_Obj_TypeDef *obj, uint8_t invert_reg)
  57:Dev/Dev_Gimbal.c **** {
 188              		.loc 1 57 0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 0
 191              		@ frame_needed = 0, uses_anonymous_args = 0
 192              		@ link register save eliminated.
 193              	.LVL16:
  58:Dev/Dev_Gimbal.c ****     if (obj == NULL)
 194              		.loc 1 58 0
 195 0000 10B1     		cbz	r0, .L18
  59:Dev/Dev_Gimbal.c ****         return false;
  60:Dev/Dev_Gimbal.c **** 
  61:Dev/Dev_Gimbal.c ****     obj->invert_reg = invert_reg;
 196              		.loc 1 61 0
 197 0002 0170     		strb	r1, [r0]
  62:Dev/Dev_Gimbal.c **** 
  63:Dev/Dev_Gimbal.c ****     return true;
 198              		.loc 1 63 0
 199 0004 0120     		movs	r0, #1
 200              	.LVL17:
 201 0006 7047     		bx	lr
 202              	.LVL18:
 203              	.L18:
  59:Dev/Dev_Gimbal.c ****         return false;
 204              		.loc 1 59 0
 205 0008 0020     		movs	r0, #0
 206              	.LVL19:
  64:Dev/Dev_Gimbal.c **** }
 207              		.loc 1 64 0
 208 000a 7047     		bx	lr
 209              		.cfi_endproc
 210              	.LFE126:
 212              		.section	.text.DevGimbal_Get,"ax",%progbits
 213              		.align	2
 214              		.thumb
 215              		.thumb_func
 217              	DevGimbal_Get:
 218              	.LFB127:
  65:Dev/Dev_Gimbal.c **** 
  66:Dev/Dev_Gimbal.c **** static DevGimbal_Val_TypeDef DevGimbal_Get(DevGimbal_Obj_TypeDef *obj)
  67:Dev/Dev_Gimbal.c **** {
 219              		.loc 1 67 0
 220              		.cfi_startproc
 221              		@ args = 0, pretend = 0, frame = 0
 222              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccqlbdTj.s 			page 6


 223              	.LVL20:
 224 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 225              	.LCFI3:
 226              		.cfi_def_cfa_offset 24
 227              		.cfi_offset 3, -24
 228              		.cfi_offset 4, -20
 229              		.cfi_offset 5, -16
 230              		.cfi_offset 6, -12
 231              		.cfi_offset 7, -8
 232              		.cfi_offset 14, -4
 233 0002 0446     		mov	r4, r0
  68:Dev/Dev_Gimbal.c ****     DevGimbal_Val_TypeDef Val_tmp;
  69:Dev/Dev_Gimbal.c **** 
  70:Dev/Dev_Gimbal.c ****     Val_tmp.error = false;
 234              		.loc 1 70 0
 235 0004 0023     		movs	r3, #0
 236 0006 0370     		strb	r3, [r0]
  71:Dev/Dev_Gimbal.c ****     Val_tmp.Gim_X = 0;
 237              		.loc 1 71 0
 238 0008 4380     		strh	r3, [r0, #2]	@ movhi
  72:Dev/Dev_Gimbal.c ****     Val_tmp.Gim_Y = 0;
 239              		.loc 1 72 0
 240 000a 8380     		strh	r3, [r0, #4]	@ movhi
  73:Dev/Dev_Gimbal.c **** 
  74:Dev/Dev_Gimbal.c ****     if (obj == NULL)
 241              		.loc 1 74 0
 242 000c 11B9     		cbnz	r1, .L20
  75:Dev/Dev_Gimbal.c ****     {
  76:Dev/Dev_Gimbal.c ****         Val_tmp.error = true;
 243              		.loc 1 76 0
 244 000e 0123     		movs	r3, #1
 245 0010 0370     		strb	r3, [r0]
 246 0012 15E0     		b	.L19
 247              	.L20:
 248 0014 0D46     		mov	r5, r1
  77:Dev/Dev_Gimbal.c ****     }
  78:Dev/Dev_Gimbal.c ****     else
  79:Dev/Dev_Gimbal.c ****     {
  80:Dev/Dev_Gimbal.c ****         Val_tmp.Gim_X = DrvADC.read((uint32_t)obj->Ch_X);
 249              		.loc 1 80 0
 250 0016 0B4F     		ldr	r7, .L24
 251 0018 7B68     		ldr	r3, [r7, #4]
 252 001a 4878     		ldrb	r0, [r1, #1]	@ zero_extendqisi2
 253              	.LVL21:
 254 001c 9847     		blx	r3
 255              	.LVL22:
 256 001e 0646     		mov	r6, r0
 257 0020 6080     		strh	r0, [r4, #2]	@ movhi
  81:Dev/Dev_Gimbal.c ****         Val_tmp.Gim_Y = DrvADC.read((uint32_t)obj->Ch_Y);
 258              		.loc 1 81 0
 259 0022 7B68     		ldr	r3, [r7, #4]
 260 0024 A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 261 0026 9847     		blx	r3
 262              	.LVL23:
 263 0028 A080     		strh	r0, [r4, #4]	@ movhi
  82:Dev/Dev_Gimbal.c **** 
  83:Dev/Dev_Gimbal.c ****         if (obj->invert_reg & Gimbal_AxisX_Invert)
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccqlbdTj.s 			page 7


 264              		.loc 1 83 0
 265 002a 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 266 002c 13F0010F 		tst	r3, #1
 267 0030 01D0     		beq	.L22
  84:Dev/Dev_Gimbal.c ****         {
  85:Dev/Dev_Gimbal.c ****             Val_tmp.Gim_X *= -1;
 268              		.loc 1 85 0
 269 0032 7642     		negs	r6, r6
 270 0034 6680     		strh	r6, [r4, #2]	@ movhi
 271              	.L22:
  86:Dev/Dev_Gimbal.c ****         }
  87:Dev/Dev_Gimbal.c **** 
  88:Dev/Dev_Gimbal.c ****         if (obj->invert_reg & Gimbal_AxisY_Invert)
 272              		.loc 1 88 0
 273 0036 13F0020F 		tst	r3, #2
 274 003a 01D0     		beq	.L19
  89:Dev/Dev_Gimbal.c ****         {
  90:Dev/Dev_Gimbal.c ****             Val_tmp.Gim_Y *= -1;
 275              		.loc 1 90 0
 276 003c 4042     		negs	r0, r0
 277 003e A080     		strh	r0, [r4, #4]	@ movhi
 278              	.LVL24:
 279              	.L19:
  91:Dev/Dev_Gimbal.c ****         }
  92:Dev/Dev_Gimbal.c ****     }
  93:Dev/Dev_Gimbal.c **** 
  94:Dev/Dev_Gimbal.c ****     return Val_tmp;
  95:Dev/Dev_Gimbal.c **** }
 280              		.loc 1 95 0
 281 0040 2046     		mov	r0, r4
 282 0042 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 283              	.LVL25:
 284              	.L25:
 285              		.align	2
 286              	.L24:
 287 0044 00000000 		.word	DrvADC
 288              		.cfi_endproc
 289              	.LFE127:
 291              		.global	DevGimbal
 292              		.section	.data.DevGimbal,"aw",%progbits
 293              		.align	2
 296              	DevGimbal:
 297 0000 00000000 		.word	DevGimbal_Obj_Clear
 298 0004 00000000 		.word	DevGimbal_Open
 299 0008 00000000 		.word	DevGimbal_Invert
 300 000c 00000000 		.word	DrvGimbal_GetNum
 301 0010 00000000 		.word	DevGimbal_Get
 302              		.section	.bss.Gimbal_Num,"aw",%nobits
 303              		.set	.LANCHOR0,. + 0
 306              	Gimbal_Num:
 307 0000 00       		.space	1
 308              		.text
 309              	.Letext0:
 310              		.file 2 "d:\\gcc_arm\\5.4 2016q3\\arm-none-eabi\\include\\machine\\_default_types.h"
 311              		.file 3 "d:\\gcc_arm\\5.4 2016q3\\arm-none-eabi\\include\\sys\\_stdint.h"
 312              		.file 4 "Bsp/periph_adc.h"
 313              		.file 5 "Dev/Dev_Gimbal.h"
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccqlbdTj.s 			page 8


 314              		.file 6 "Drv/drv_adc.h"
 315              		.file 7 "F4_CORE/core_cm4.h"
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccqlbdTj.s 			page 9


DEFINED SYMBOLS
                            *ABS*:00000000 Dev_Gimbal.c
C:\Users\ADMINI~1\AppData\Local\Temp\ccqlbdTj.s:22     .text.DevGimbal_Obj_Clear:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccqlbdTj.s:26     .text.DevGimbal_Obj_Clear:00000000 DevGimbal_Obj_Clear
C:\Users\ADMINI~1\AppData\Local\Temp\ccqlbdTj.s:60     .text.DrvGimbal_GetNum:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccqlbdTj.s:64     .text.DrvGimbal_GetNum:00000000 DrvGimbal_GetNum
C:\Users\ADMINI~1\AppData\Local\Temp\ccqlbdTj.s:78     .text.DrvGimbal_GetNum:00000008 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccqlbdTj.s:83     .text.DevGimbal_Open:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccqlbdTj.s:87     .text.DevGimbal_Open:00000000 DevGimbal_Open
C:\Users\ADMINI~1\AppData\Local\Temp\ccqlbdTj.s:176    .text.DevGimbal_Open:00000044 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccqlbdTj.s:182    .text.DevGimbal_Invert:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccqlbdTj.s:186    .text.DevGimbal_Invert:00000000 DevGimbal_Invert
C:\Users\ADMINI~1\AppData\Local\Temp\ccqlbdTj.s:213    .text.DevGimbal_Get:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccqlbdTj.s:217    .text.DevGimbal_Get:00000000 DevGimbal_Get
C:\Users\ADMINI~1\AppData\Local\Temp\ccqlbdTj.s:287    .text.DevGimbal_Get:00000044 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccqlbdTj.s:296    .data.DevGimbal:00000000 DevGimbal
C:\Users\ADMINI~1\AppData\Local\Temp\ccqlbdTj.s:293    .data.DevGimbal:00000000 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccqlbdTj.s:306    .bss.Gimbal_Num:00000000 Gimbal_Num
C:\Users\ADMINI~1\AppData\Local\Temp\ccqlbdTj.s:307    .bss.Gimbal_Num:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
DrvADC
