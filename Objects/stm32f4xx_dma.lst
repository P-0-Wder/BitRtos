ARM GAS  /tmp/ccF492tC.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_dma.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.DMA_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	DMA_DeInit
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	DMA_DeInit:
  27              	.LVL0:
  28              	.LFB123:
  29              		.file 1 "FWLIB/src/stm32f4xx_dma.c"
   1:FWLIB/src/stm32f4xx_dma.c **** /**
   2:FWLIB/src/stm32f4xx_dma.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_dma.c ****   * @file    stm32f4xx_dma.c
   4:FWLIB/src/stm32f4xx_dma.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_dma.c ****   * @version V1.8.0
   6:FWLIB/src/stm32f4xx_dma.c ****   * @date    04-November-2016
   7:FWLIB/src/stm32f4xx_dma.c ****   * @brief   This file provides firmware functions to manage the following 
   8:FWLIB/src/stm32f4xx_dma.c ****   *          functionalities of the Direct Memory Access controller (DMA):           
   9:FWLIB/src/stm32f4xx_dma.c ****   *           + Initialization and Configuration
  10:FWLIB/src/stm32f4xx_dma.c ****   *           + Data Counter
  11:FWLIB/src/stm32f4xx_dma.c ****   *           + Double Buffer mode configuration and command  
  12:FWLIB/src/stm32f4xx_dma.c ****   *           + Interrupts and flags management
  13:FWLIB/src/stm32f4xx_dma.c ****   *           
  14:FWLIB/src/stm32f4xx_dma.c ****   @verbatim      
  15:FWLIB/src/stm32f4xx_dma.c ****  ===============================================================================      
  16:FWLIB/src/stm32f4xx_dma.c ****                        ##### How to use this driver #####
  17:FWLIB/src/stm32f4xx_dma.c ****  ===============================================================================
  18:FWLIB/src/stm32f4xx_dma.c ****     [..] 
  19:FWLIB/src/stm32f4xx_dma.c ****       (#) Enable The DMA controller clock using RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA1, ENABLE)
  20:FWLIB/src/stm32f4xx_dma.c ****           function for DMA1 or using RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2, ENABLE)
  21:FWLIB/src/stm32f4xx_dma.c ****           function for DMA2.
  22:FWLIB/src/stm32f4xx_dma.c ****   
  23:FWLIB/src/stm32f4xx_dma.c ****       (#) Enable and configure the peripheral to be connected to the DMA Stream
  24:FWLIB/src/stm32f4xx_dma.c ****           (except for internal SRAM / FLASH memories: no initialization is 
  25:FWLIB/src/stm32f4xx_dma.c ****           necessary). 
  26:FWLIB/src/stm32f4xx_dma.c ****           
  27:FWLIB/src/stm32f4xx_dma.c ****       (#) For a given Stream, program the required configuration through following parameters:   
  28:FWLIB/src/stm32f4xx_dma.c ****           Source and Destination addresses, Transfer Direction, Transfer size, Source and Destinati
  29:FWLIB/src/stm32f4xx_dma.c ****           data formats, Circular or Normal mode, Stream Priority level, Source and Destination 
ARM GAS  /tmp/ccF492tC.s 			page 2


  30:FWLIB/src/stm32f4xx_dma.c ****           Incrementation mode, FIFO mode and its Threshold (if needed), Burst 
  31:FWLIB/src/stm32f4xx_dma.c ****           mode for Source and/or Destination (if needed) using the DMA_Init() function.
  32:FWLIB/src/stm32f4xx_dma.c ****           To avoid filling unnecessary fields, you can call DMA_StructInit() function
  33:FWLIB/src/stm32f4xx_dma.c ****           to initialize a given structure with default values (reset values), the modify
  34:FWLIB/src/stm32f4xx_dma.c ****           only necessary fields 
  35:FWLIB/src/stm32f4xx_dma.c ****           (ie. Source and Destination addresses, Transfer size and Data Formats).
  36:FWLIB/src/stm32f4xx_dma.c ****   
  37:FWLIB/src/stm32f4xx_dma.c ****       (#) Enable the NVIC and the corresponding interrupt(s) using the function 
  38:FWLIB/src/stm32f4xx_dma.c ****           DMA_ITConfig() if you need to use DMA interrupts. 
  39:FWLIB/src/stm32f4xx_dma.c ****   
  40:FWLIB/src/stm32f4xx_dma.c ****       (#) Optionally, if the Circular mode is enabled, you can use the Double buffer mode by config
  41:FWLIB/src/stm32f4xx_dma.c ****           the second Memory address and the first Memory to be used through the function 
  42:FWLIB/src/stm32f4xx_dma.c ****           DMA_DoubleBufferModeConfig(). Then enable the Double buffer mode through the function
  43:FWLIB/src/stm32f4xx_dma.c ****           DMA_DoubleBufferModeCmd(). These operations must be done before step 6.
  44:FWLIB/src/stm32f4xx_dma.c ****       
  45:FWLIB/src/stm32f4xx_dma.c ****       (#) Enable the DMA stream using the DMA_Cmd() function. 
  46:FWLIB/src/stm32f4xx_dma.c ****                   
  47:FWLIB/src/stm32f4xx_dma.c ****       (#) Activate the needed Stream Request using PPP_DMACmd() function for
  48:FWLIB/src/stm32f4xx_dma.c ****           any PPP peripheral except internal SRAM and FLASH (ie. SPI, USART ...)
  49:FWLIB/src/stm32f4xx_dma.c ****           The function allowing this operation is provided in each PPP peripheral
  50:FWLIB/src/stm32f4xx_dma.c ****           driver (ie. SPI_DMACmd for SPI peripheral).
  51:FWLIB/src/stm32f4xx_dma.c ****           Once the Stream is enabled, it is not possible to modify its configuration
  52:FWLIB/src/stm32f4xx_dma.c ****           unless the stream is stopped and disabled.
  53:FWLIB/src/stm32f4xx_dma.c ****           After enabling the Stream, it is advised to monitor the EN bit status using
  54:FWLIB/src/stm32f4xx_dma.c ****           the function DMA_GetCmdStatus(). In case of configuration errors or bus errors
  55:FWLIB/src/stm32f4xx_dma.c ****           this bit will remain reset and all transfers on this Stream will remain on hold.      
  56:FWLIB/src/stm32f4xx_dma.c ****   
  57:FWLIB/src/stm32f4xx_dma.c ****       (#) Optionally, you can configure the number of data to be transferred
  58:FWLIB/src/stm32f4xx_dma.c ****           when the Stream is disabled (ie. after each Transfer Complete event
  59:FWLIB/src/stm32f4xx_dma.c ****           or when a Transfer Error occurs) using the function DMA_SetCurrDataCounter().
  60:FWLIB/src/stm32f4xx_dma.c ****           And you can get the number of remaining data to be transferred using 
  61:FWLIB/src/stm32f4xx_dma.c ****           the function DMA_GetCurrDataCounter() at run time (when the DMA Stream is
  62:FWLIB/src/stm32f4xx_dma.c ****           enabled and running).  
  63:FWLIB/src/stm32f4xx_dma.c ****                      
  64:FWLIB/src/stm32f4xx_dma.c ****       (#) To control DMA events you can use one of the following two methods:
  65:FWLIB/src/stm32f4xx_dma.c ****         (##) Check on DMA Stream flags using the function DMA_GetFlagStatus().  
  66:FWLIB/src/stm32f4xx_dma.c ****         (##) Use DMA interrupts through the function DMA_ITConfig() at initialization
  67:FWLIB/src/stm32f4xx_dma.c ****              phase and DMA_GetITStatus() function into interrupt routines in
  68:FWLIB/src/stm32f4xx_dma.c ****              communication phase.
  69:FWLIB/src/stm32f4xx_dma.c ****     [..]     
  70:FWLIB/src/stm32f4xx_dma.c ****           After checking on a flag you should clear it using DMA_ClearFlag()
  71:FWLIB/src/stm32f4xx_dma.c ****           function. And after checking on an interrupt event you should 
  72:FWLIB/src/stm32f4xx_dma.c ****           clear it using DMA_ClearITPendingBit() function.    
  73:FWLIB/src/stm32f4xx_dma.c ****                 
  74:FWLIB/src/stm32f4xx_dma.c ****       (#) Optionally, if Circular mode and Double Buffer mode are enabled, you can modify
  75:FWLIB/src/stm32f4xx_dma.c ****           the Memory Addresses using the function DMA_MemoryTargetConfig(). Make sure that
  76:FWLIB/src/stm32f4xx_dma.c ****           the Memory Address to be modified is not the one currently in use by DMA Stream.
  77:FWLIB/src/stm32f4xx_dma.c ****           This condition can be monitored using the function DMA_GetCurrentMemoryTarget().
  78:FWLIB/src/stm32f4xx_dma.c ****                 
  79:FWLIB/src/stm32f4xx_dma.c ****       (#) Optionally, Pause-Resume operations may be performed:
  80:FWLIB/src/stm32f4xx_dma.c ****           The DMA_Cmd() function may be used to perform Pause-Resume operation. 
  81:FWLIB/src/stm32f4xx_dma.c ****           When a transfer is ongoing, calling this function to disable the 
  82:FWLIB/src/stm32f4xx_dma.c ****           Stream will cause the transfer to be paused. All configuration registers 
  83:FWLIB/src/stm32f4xx_dma.c ****           and the number of remaining data will be preserved. When calling again 
  84:FWLIB/src/stm32f4xx_dma.c ****           this function to re-enable the Stream, the transfer will be resumed from 
  85:FWLIB/src/stm32f4xx_dma.c ****           the point where it was paused.          
  86:FWLIB/src/stm32f4xx_dma.c ****                    
ARM GAS  /tmp/ccF492tC.s 			page 3


  87:FWLIB/src/stm32f4xx_dma.c ****       -@- Memory-to-Memory transfer is possible by setting the address of the memory into
  88:FWLIB/src/stm32f4xx_dma.c ****            the Peripheral registers. In this mode, Circular mode and Double Buffer mode
  89:FWLIB/src/stm32f4xx_dma.c ****            are not allowed.
  90:FWLIB/src/stm32f4xx_dma.c ****     
  91:FWLIB/src/stm32f4xx_dma.c ****       -@- The FIFO is used mainly to reduce bus usage and to allow data 
  92:FWLIB/src/stm32f4xx_dma.c ****            packing/unpacking: it is possible to set different Data Sizes for 
  93:FWLIB/src/stm32f4xx_dma.c ****            the Peripheral and the Memory (ie. you can set Half-Word data size 
  94:FWLIB/src/stm32f4xx_dma.c ****            for the peripheral to access its data register and set Word data size
  95:FWLIB/src/stm32f4xx_dma.c ****            for the Memory to gain in access time. Each two Half-words will be 
  96:FWLIB/src/stm32f4xx_dma.c ****            packed and written in a single access to a Word in the Memory).
  97:FWLIB/src/stm32f4xx_dma.c ****       
  98:FWLIB/src/stm32f4xx_dma.c ****       -@- When FIFO is disabled, it is not allowed to configure different 
  99:FWLIB/src/stm32f4xx_dma.c ****            Data Sizes for Source and Destination. In this case the Peripheral 
 100:FWLIB/src/stm32f4xx_dma.c ****            Data Size will be applied to both Source and Destination.               
 101:FWLIB/src/stm32f4xx_dma.c ****   
 102:FWLIB/src/stm32f4xx_dma.c ****   @endverbatim
 103:FWLIB/src/stm32f4xx_dma.c ****   ******************************************************************************
 104:FWLIB/src/stm32f4xx_dma.c ****   * @attention
 105:FWLIB/src/stm32f4xx_dma.c ****   *
 106:FWLIB/src/stm32f4xx_dma.c ****   * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
 107:FWLIB/src/stm32f4xx_dma.c ****   *
 108:FWLIB/src/stm32f4xx_dma.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
 109:FWLIB/src/stm32f4xx_dma.c ****   * You may not use this file except in compliance with the License.
 110:FWLIB/src/stm32f4xx_dma.c ****   * You may obtain a copy of the License at:
 111:FWLIB/src/stm32f4xx_dma.c ****   *
 112:FWLIB/src/stm32f4xx_dma.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
 113:FWLIB/src/stm32f4xx_dma.c ****   *
 114:FWLIB/src/stm32f4xx_dma.c ****   * Unless required by applicable law or agreed to in writing, software 
 115:FWLIB/src/stm32f4xx_dma.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
 116:FWLIB/src/stm32f4xx_dma.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 117:FWLIB/src/stm32f4xx_dma.c ****   * See the License for the specific language governing permissions and
 118:FWLIB/src/stm32f4xx_dma.c ****   * limitations under the License.
 119:FWLIB/src/stm32f4xx_dma.c ****   *
 120:FWLIB/src/stm32f4xx_dma.c ****   ******************************************************************************  
 121:FWLIB/src/stm32f4xx_dma.c ****   */ 
 122:FWLIB/src/stm32f4xx_dma.c **** 
 123:FWLIB/src/stm32f4xx_dma.c **** /* Includes ------------------------------------------------------------------*/
 124:FWLIB/src/stm32f4xx_dma.c **** #include "stm32f4xx_dma.h"
 125:FWLIB/src/stm32f4xx_dma.c **** #include "stm32f4xx_rcc.h"
 126:FWLIB/src/stm32f4xx_dma.c **** 
 127:FWLIB/src/stm32f4xx_dma.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 128:FWLIB/src/stm32f4xx_dma.c ****   * @{
 129:FWLIB/src/stm32f4xx_dma.c ****   */
 130:FWLIB/src/stm32f4xx_dma.c **** 
 131:FWLIB/src/stm32f4xx_dma.c **** /** @defgroup DMA 
 132:FWLIB/src/stm32f4xx_dma.c ****   * @brief DMA driver modules
 133:FWLIB/src/stm32f4xx_dma.c ****   * @{
 134:FWLIB/src/stm32f4xx_dma.c ****   */ 
 135:FWLIB/src/stm32f4xx_dma.c **** 
 136:FWLIB/src/stm32f4xx_dma.c **** /* Private typedef -----------------------------------------------------------*/
 137:FWLIB/src/stm32f4xx_dma.c **** /* Private define ------------------------------------------------------------*/
 138:FWLIB/src/stm32f4xx_dma.c **** 
 139:FWLIB/src/stm32f4xx_dma.c **** /* Masks Definition */
 140:FWLIB/src/stm32f4xx_dma.c **** #define TRANSFER_IT_ENABLE_MASK (uint32_t)(DMA_SxCR_TCIE | DMA_SxCR_HTIE | \
 141:FWLIB/src/stm32f4xx_dma.c ****                                            DMA_SxCR_TEIE | DMA_SxCR_DMEIE)
 142:FWLIB/src/stm32f4xx_dma.c **** 
 143:FWLIB/src/stm32f4xx_dma.c **** #define DMA_Stream0_IT_MASK     (uint32_t)(DMA_LISR_FEIF0 | DMA_LISR_DMEIF0 | \
ARM GAS  /tmp/ccF492tC.s 			page 4


 144:FWLIB/src/stm32f4xx_dma.c ****                                            DMA_LISR_TEIF0 | DMA_LISR_HTIF0 | \
 145:FWLIB/src/stm32f4xx_dma.c ****                                            DMA_LISR_TCIF0)
 146:FWLIB/src/stm32f4xx_dma.c **** 
 147:FWLIB/src/stm32f4xx_dma.c **** #define DMA_Stream1_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 6)
 148:FWLIB/src/stm32f4xx_dma.c **** #define DMA_Stream2_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 16)
 149:FWLIB/src/stm32f4xx_dma.c **** #define DMA_Stream3_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 22)
 150:FWLIB/src/stm32f4xx_dma.c **** #define DMA_Stream4_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK | (uint32_t)0x20000000)
 151:FWLIB/src/stm32f4xx_dma.c **** #define DMA_Stream5_IT_MASK     (uint32_t)(DMA_Stream1_IT_MASK | (uint32_t)0x20000000)
 152:FWLIB/src/stm32f4xx_dma.c **** #define DMA_Stream6_IT_MASK     (uint32_t)(DMA_Stream2_IT_MASK | (uint32_t)0x20000000)
 153:FWLIB/src/stm32f4xx_dma.c **** #define DMA_Stream7_IT_MASK     (uint32_t)(DMA_Stream3_IT_MASK | (uint32_t)0x20000000)
 154:FWLIB/src/stm32f4xx_dma.c **** #define TRANSFER_IT_MASK        (uint32_t)0x0F3C0F3C
 155:FWLIB/src/stm32f4xx_dma.c **** #define HIGH_ISR_MASK           (uint32_t)0x20000000
 156:FWLIB/src/stm32f4xx_dma.c **** #define RESERVED_MASK           (uint32_t)0x0F7D0F7D  
 157:FWLIB/src/stm32f4xx_dma.c **** 
 158:FWLIB/src/stm32f4xx_dma.c **** /* Private macro -------------------------------------------------------------*/
 159:FWLIB/src/stm32f4xx_dma.c **** /* Private variables ---------------------------------------------------------*/
 160:FWLIB/src/stm32f4xx_dma.c **** /* Private function prototypes -----------------------------------------------*/
 161:FWLIB/src/stm32f4xx_dma.c **** /* Private functions ---------------------------------------------------------*/
 162:FWLIB/src/stm32f4xx_dma.c **** 
 163:FWLIB/src/stm32f4xx_dma.c **** 
 164:FWLIB/src/stm32f4xx_dma.c **** /** @defgroup DMA_Private_Functions
 165:FWLIB/src/stm32f4xx_dma.c ****   * @{
 166:FWLIB/src/stm32f4xx_dma.c ****   */
 167:FWLIB/src/stm32f4xx_dma.c **** 
 168:FWLIB/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group1 Initialization and Configuration functions
 169:FWLIB/src/stm32f4xx_dma.c ****  *  @brief   Initialization and Configuration functions
 170:FWLIB/src/stm32f4xx_dma.c ****  *
 171:FWLIB/src/stm32f4xx_dma.c **** @verbatim   
 172:FWLIB/src/stm32f4xx_dma.c ****  ===============================================================================
 173:FWLIB/src/stm32f4xx_dma.c ****                 ##### Initialization and Configuration functions #####
 174:FWLIB/src/stm32f4xx_dma.c ****  ===============================================================================  
 175:FWLIB/src/stm32f4xx_dma.c ****     [..]
 176:FWLIB/src/stm32f4xx_dma.c ****     This subsection provides functions allowing to initialize the DMA Stream source
 177:FWLIB/src/stm32f4xx_dma.c ****     and destination addresses, incrementation and data sizes, transfer direction, 
 178:FWLIB/src/stm32f4xx_dma.c ****     buffer size, circular/normal mode selection, memory-to-memory mode selection 
 179:FWLIB/src/stm32f4xx_dma.c ****     and Stream priority value.
 180:FWLIB/src/stm32f4xx_dma.c ****     [..]
 181:FWLIB/src/stm32f4xx_dma.c ****     The DMA_Init() function follows the DMA configuration procedures as described in
 182:FWLIB/src/stm32f4xx_dma.c ****     reference manual (RM0090) except the first point: waiting on EN bit to be reset.
 183:FWLIB/src/stm32f4xx_dma.c ****     This condition should be checked by user application using the function DMA_GetCmdStatus()
 184:FWLIB/src/stm32f4xx_dma.c ****     before calling the DMA_Init() function.
 185:FWLIB/src/stm32f4xx_dma.c **** 
 186:FWLIB/src/stm32f4xx_dma.c **** @endverbatim
 187:FWLIB/src/stm32f4xx_dma.c ****   * @{
 188:FWLIB/src/stm32f4xx_dma.c ****   */
 189:FWLIB/src/stm32f4xx_dma.c **** 
 190:FWLIB/src/stm32f4xx_dma.c **** /**
 191:FWLIB/src/stm32f4xx_dma.c ****   * @brief  Deinitialize the DMAy Streamx registers to their default reset values.
 192:FWLIB/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 193:FWLIB/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 194:FWLIB/src/stm32f4xx_dma.c ****   * @retval None
 195:FWLIB/src/stm32f4xx_dma.c ****   */
 196:FWLIB/src/stm32f4xx_dma.c **** void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
 197:FWLIB/src/stm32f4xx_dma.c **** {
  30              		.loc 1 197 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccF492tC.s 			page 5


  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 198:FWLIB/src/stm32f4xx_dma.c ****   /* Check the parameters */
 199:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  35              		.loc 1 199 3 view .LVU1
 200:FWLIB/src/stm32f4xx_dma.c **** 
 201:FWLIB/src/stm32f4xx_dma.c ****   /* Disable the selected DMAy Streamx */
 202:FWLIB/src/stm32f4xx_dma.c ****   DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
  36              		.loc 1 202 3 view .LVU2
  37              		.loc 1 202 20 is_stmt 0 view .LVU3
  38 0000 0368     		ldr	r3, [r0]
  39 0002 23F00103 		bic	r3, r3, #1
  40 0006 0360     		str	r3, [r0]
 203:FWLIB/src/stm32f4xx_dma.c **** 
 204:FWLIB/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx control register */
 205:FWLIB/src/stm32f4xx_dma.c ****   DMAy_Streamx->CR  = 0;
  41              		.loc 1 205 3 is_stmt 1 view .LVU4
  42              		.loc 1 205 21 is_stmt 0 view .LVU5
  43 0008 0023     		movs	r3, #0
  44 000a 0360     		str	r3, [r0]
 206:FWLIB/src/stm32f4xx_dma.c ****   
 207:FWLIB/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx Number of Data to Transfer register */
 208:FWLIB/src/stm32f4xx_dma.c ****   DMAy_Streamx->NDTR = 0;
  45              		.loc 1 208 3 is_stmt 1 view .LVU6
  46              		.loc 1 208 22 is_stmt 0 view .LVU7
  47 000c 4360     		str	r3, [r0, #4]
 209:FWLIB/src/stm32f4xx_dma.c ****   
 210:FWLIB/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx peripheral address register */
 211:FWLIB/src/stm32f4xx_dma.c ****   DMAy_Streamx->PAR  = 0;
  48              		.loc 1 211 3 is_stmt 1 view .LVU8
  49              		.loc 1 211 22 is_stmt 0 view .LVU9
  50 000e 8360     		str	r3, [r0, #8]
 212:FWLIB/src/stm32f4xx_dma.c ****   
 213:FWLIB/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx memory 0 address register */
 214:FWLIB/src/stm32f4xx_dma.c ****   DMAy_Streamx->M0AR = 0;
  51              		.loc 1 214 3 is_stmt 1 view .LVU10
  52              		.loc 1 214 22 is_stmt 0 view .LVU11
  53 0010 C360     		str	r3, [r0, #12]
 215:FWLIB/src/stm32f4xx_dma.c **** 
 216:FWLIB/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx memory 1 address register */
 217:FWLIB/src/stm32f4xx_dma.c ****   DMAy_Streamx->M1AR = 0;
  54              		.loc 1 217 3 is_stmt 1 view .LVU12
  55              		.loc 1 217 22 is_stmt 0 view .LVU13
  56 0012 0361     		str	r3, [r0, #16]
 218:FWLIB/src/stm32f4xx_dma.c **** 
 219:FWLIB/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx FIFO control register */
 220:FWLIB/src/stm32f4xx_dma.c ****   DMAy_Streamx->FCR = (uint32_t)0x00000021; 
  57              		.loc 1 220 3 is_stmt 1 view .LVU14
  58              		.loc 1 220 21 is_stmt 0 view .LVU15
  59 0014 2123     		movs	r3, #33
  60 0016 4361     		str	r3, [r0, #20]
 221:FWLIB/src/stm32f4xx_dma.c **** 
 222:FWLIB/src/stm32f4xx_dma.c ****   /* Reset interrupt pending bits for the selected stream */
 223:FWLIB/src/stm32f4xx_dma.c ****   if (DMAy_Streamx == DMA1_Stream0)
  61              		.loc 1 223 3 is_stmt 1 view .LVU16
  62              		.loc 1 223 6 is_stmt 0 view .LVU17
  63 0018 3C4B     		ldr	r3, .L34
ARM GAS  /tmp/ccF492tC.s 			page 6


  64 001a 9842     		cmp	r0, r3
  65 001c 2DD0     		beq	.L18
 224:FWLIB/src/stm32f4xx_dma.c ****   {
 225:FWLIB/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream0 */
 226:FWLIB/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream0_IT_MASK;
 227:FWLIB/src/stm32f4xx_dma.c ****   }
 228:FWLIB/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream1)
  66              		.loc 1 228 8 is_stmt 1 view .LVU18
  67              		.loc 1 228 11 is_stmt 0 view .LVU19
  68 001e 3C4B     		ldr	r3, .L34+4
  69 0020 9842     		cmp	r0, r3
  70 0022 2ED0     		beq	.L19
 229:FWLIB/src/stm32f4xx_dma.c ****   {
 230:FWLIB/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream1 */
 231:FWLIB/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream1_IT_MASK;
 232:FWLIB/src/stm32f4xx_dma.c ****   }
 233:FWLIB/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream2)
  71              		.loc 1 233 8 is_stmt 1 view .LVU20
  72              		.loc 1 233 11 is_stmt 0 view .LVU21
  73 0024 3B4B     		ldr	r3, .L34+8
  74 0026 9842     		cmp	r0, r3
  75 0028 30D0     		beq	.L20
 234:FWLIB/src/stm32f4xx_dma.c ****   {
 235:FWLIB/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream2 */
 236:FWLIB/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream2_IT_MASK;
 237:FWLIB/src/stm32f4xx_dma.c ****   }
 238:FWLIB/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream3)
  76              		.loc 1 238 8 is_stmt 1 view .LVU22
  77              		.loc 1 238 11 is_stmt 0 view .LVU23
  78 002a 3B4B     		ldr	r3, .L34+12
  79 002c 9842     		cmp	r0, r3
  80 002e 32D0     		beq	.L21
 239:FWLIB/src/stm32f4xx_dma.c ****   {
 240:FWLIB/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream3 */
 241:FWLIB/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream3_IT_MASK;
 242:FWLIB/src/stm32f4xx_dma.c ****   }
 243:FWLIB/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream4)
  81              		.loc 1 243 8 is_stmt 1 view .LVU24
  82              		.loc 1 243 11 is_stmt 0 view .LVU25
  83 0030 3A4B     		ldr	r3, .L34+16
  84 0032 9842     		cmp	r0, r3
  85 0034 34D0     		beq	.L22
 244:FWLIB/src/stm32f4xx_dma.c ****   {
 245:FWLIB/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream4 */
 246:FWLIB/src/stm32f4xx_dma.c ****     DMA1->HIFCR = DMA_Stream4_IT_MASK;
 247:FWLIB/src/stm32f4xx_dma.c ****   }
 248:FWLIB/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream5)
  86              		.loc 1 248 8 is_stmt 1 view .LVU26
  87              		.loc 1 248 11 is_stmt 0 view .LVU27
  88 0036 3A4B     		ldr	r3, .L34+20
  89 0038 9842     		cmp	r0, r3
  90 003a 35D0     		beq	.L23
 249:FWLIB/src/stm32f4xx_dma.c ****   {
 250:FWLIB/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream5 */
 251:FWLIB/src/stm32f4xx_dma.c ****     DMA1->HIFCR = DMA_Stream5_IT_MASK;
 252:FWLIB/src/stm32f4xx_dma.c ****   }
 253:FWLIB/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream6)
ARM GAS  /tmp/ccF492tC.s 			page 7


  91              		.loc 1 253 8 is_stmt 1 view .LVU28
  92              		.loc 1 253 11 is_stmt 0 view .LVU29
  93 003c 394B     		ldr	r3, .L34+24
  94 003e 9842     		cmp	r0, r3
  95 0040 36D0     		beq	.L24
 254:FWLIB/src/stm32f4xx_dma.c ****   {
 255:FWLIB/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream6 */
 256:FWLIB/src/stm32f4xx_dma.c ****     DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 257:FWLIB/src/stm32f4xx_dma.c ****   }
 258:FWLIB/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream7)
  96              		.loc 1 258 8 is_stmt 1 view .LVU30
  97              		.loc 1 258 11 is_stmt 0 view .LVU31
  98 0042 394B     		ldr	r3, .L34+28
  99 0044 9842     		cmp	r0, r3
 100 0046 37D0     		beq	.L25
 259:FWLIB/src/stm32f4xx_dma.c ****   {
 260:FWLIB/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream7 */
 261:FWLIB/src/stm32f4xx_dma.c ****     DMA1->HIFCR = DMA_Stream7_IT_MASK;
 262:FWLIB/src/stm32f4xx_dma.c ****   }
 263:FWLIB/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream0)
 101              		.loc 1 263 8 is_stmt 1 view .LVU32
 102              		.loc 1 263 11 is_stmt 0 view .LVU33
 103 0048 384B     		ldr	r3, .L34+32
 104 004a 9842     		cmp	r0, r3
 105 004c 39D0     		beq	.L26
 264:FWLIB/src/stm32f4xx_dma.c ****   {
 265:FWLIB/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream0 */
 266:FWLIB/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream0_IT_MASK;
 267:FWLIB/src/stm32f4xx_dma.c ****   }
 268:FWLIB/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream1)
 106              		.loc 1 268 8 is_stmt 1 view .LVU34
 107              		.loc 1 268 11 is_stmt 0 view .LVU35
 108 004e 384B     		ldr	r3, .L34+36
 109 0050 9842     		cmp	r0, r3
 110 0052 3AD0     		beq	.L27
 269:FWLIB/src/stm32f4xx_dma.c ****   {
 270:FWLIB/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream1 */
 271:FWLIB/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream1_IT_MASK;
 272:FWLIB/src/stm32f4xx_dma.c ****   }
 273:FWLIB/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream2)
 111              		.loc 1 273 8 is_stmt 1 view .LVU36
 112              		.loc 1 273 11 is_stmt 0 view .LVU37
 113 0054 374B     		ldr	r3, .L34+40
 114 0056 9842     		cmp	r0, r3
 115 0058 3CD0     		beq	.L28
 274:FWLIB/src/stm32f4xx_dma.c ****   {
 275:FWLIB/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream2 */
 276:FWLIB/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream2_IT_MASK;
 277:FWLIB/src/stm32f4xx_dma.c ****   }
 278:FWLIB/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream3)
 116              		.loc 1 278 8 is_stmt 1 view .LVU38
 117              		.loc 1 278 11 is_stmt 0 view .LVU39
 118 005a 374B     		ldr	r3, .L34+44
 119 005c 9842     		cmp	r0, r3
 120 005e 3ED0     		beq	.L29
 279:FWLIB/src/stm32f4xx_dma.c ****   {
 280:FWLIB/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream3 */
ARM GAS  /tmp/ccF492tC.s 			page 8


 281:FWLIB/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream3_IT_MASK;
 282:FWLIB/src/stm32f4xx_dma.c ****   }
 283:FWLIB/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream4)
 121              		.loc 1 283 8 is_stmt 1 view .LVU40
 122              		.loc 1 283 11 is_stmt 0 view .LVU41
 123 0060 364B     		ldr	r3, .L34+48
 124 0062 9842     		cmp	r0, r3
 125 0064 40D0     		beq	.L30
 284:FWLIB/src/stm32f4xx_dma.c ****   {
 285:FWLIB/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream4 */
 286:FWLIB/src/stm32f4xx_dma.c ****     DMA2->HIFCR = DMA_Stream4_IT_MASK;
 287:FWLIB/src/stm32f4xx_dma.c ****   }
 288:FWLIB/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream5)
 126              		.loc 1 288 8 is_stmt 1 view .LVU42
 127              		.loc 1 288 11 is_stmt 0 view .LVU43
 128 0066 364B     		ldr	r3, .L34+52
 129 0068 9842     		cmp	r0, r3
 130 006a 41D0     		beq	.L31
 289:FWLIB/src/stm32f4xx_dma.c ****   {
 290:FWLIB/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream5 */
 291:FWLIB/src/stm32f4xx_dma.c ****     DMA2->HIFCR = DMA_Stream5_IT_MASK;
 292:FWLIB/src/stm32f4xx_dma.c ****   }
 293:FWLIB/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream6)
 131              		.loc 1 293 8 is_stmt 1 view .LVU44
 132              		.loc 1 293 11 is_stmt 0 view .LVU45
 133 006c 354B     		ldr	r3, .L34+56
 134 006e 9842     		cmp	r0, r3
 135 0070 42D0     		beq	.L32
 294:FWLIB/src/stm32f4xx_dma.c ****   {
 295:FWLIB/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream6 */
 296:FWLIB/src/stm32f4xx_dma.c ****     DMA2->HIFCR = DMA_Stream6_IT_MASK;
 297:FWLIB/src/stm32f4xx_dma.c ****   }
 298:FWLIB/src/stm32f4xx_dma.c ****   else 
 299:FWLIB/src/stm32f4xx_dma.c ****   {
 300:FWLIB/src/stm32f4xx_dma.c ****     if (DMAy_Streamx == DMA2_Stream7)
 136              		.loc 1 300 5 is_stmt 1 view .LVU46
 137              		.loc 1 300 8 is_stmt 0 view .LVU47
 138 0072 354B     		ldr	r3, .L34+60
 139 0074 9842     		cmp	r0, r3
 140 0076 43D0     		beq	.L33
 141              	.L1:
 301:FWLIB/src/stm32f4xx_dma.c ****     {
 302:FWLIB/src/stm32f4xx_dma.c ****       /* Reset interrupt pending bits for DMA2 Stream7 */
 303:FWLIB/src/stm32f4xx_dma.c ****       DMA2->HIFCR = DMA_Stream7_IT_MASK;
 304:FWLIB/src/stm32f4xx_dma.c ****     }
 305:FWLIB/src/stm32f4xx_dma.c ****   }
 306:FWLIB/src/stm32f4xx_dma.c **** }
 142              		.loc 1 306 1 view .LVU48
 143 0078 7047     		bx	lr
 144              	.L18:
 226:FWLIB/src/stm32f4xx_dma.c ****   }
 145              		.loc 1 226 5 is_stmt 1 view .LVU49
 226:FWLIB/src/stm32f4xx_dma.c ****   }
 146              		.loc 1 226 17 is_stmt 0 view .LVU50
 147 007a 103B     		subs	r3, r3, #16
 148 007c 3D22     		movs	r2, #61
 149 007e 9A60     		str	r2, [r3, #8]
ARM GAS  /tmp/ccF492tC.s 			page 9


 150 0080 7047     		bx	lr
 151              	.L19:
 231:FWLIB/src/stm32f4xx_dma.c ****   }
 152              		.loc 1 231 5 is_stmt 1 view .LVU51
 231:FWLIB/src/stm32f4xx_dma.c ****   }
 153              		.loc 1 231 17 is_stmt 0 view .LVU52
 154 0082 283B     		subs	r3, r3, #40
 155 0084 4FF47462 		mov	r2, #3904
 156 0088 9A60     		str	r2, [r3, #8]
 157 008a 7047     		bx	lr
 158              	.L20:
 236:FWLIB/src/stm32f4xx_dma.c ****   }
 159              		.loc 1 236 5 is_stmt 1 view .LVU53
 236:FWLIB/src/stm32f4xx_dma.c ****   }
 160              		.loc 1 236 17 is_stmt 0 view .LVU54
 161 008c 403B     		subs	r3, r3, #64
 162 008e 4FF47412 		mov	r2, #3997696
 163 0092 9A60     		str	r2, [r3, #8]
 164 0094 7047     		bx	lr
 165              	.L21:
 241:FWLIB/src/stm32f4xx_dma.c ****   }
 166              		.loc 1 241 5 is_stmt 1 view .LVU55
 241:FWLIB/src/stm32f4xx_dma.c ****   }
 167              		.loc 1 241 17 is_stmt 0 view .LVU56
 168 0096 583B     		subs	r3, r3, #88
 169 0098 4FF07462 		mov	r2, #255852544
 170 009c 9A60     		str	r2, [r3, #8]
 171 009e 7047     		bx	lr
 172              	.L22:
 246:FWLIB/src/stm32f4xx_dma.c ****   }
 173              		.loc 1 246 5 is_stmt 1 view .LVU57
 246:FWLIB/src/stm32f4xx_dma.c ****   }
 174              		.loc 1 246 17 is_stmt 0 view .LVU58
 175 00a0 703B     		subs	r3, r3, #112
 176 00a2 2A4A     		ldr	r2, .L34+64
 177 00a4 DA60     		str	r2, [r3, #12]
 178 00a6 7047     		bx	lr
 179              	.L23:
 251:FWLIB/src/stm32f4xx_dma.c ****   }
 180              		.loc 1 251 5 is_stmt 1 view .LVU59
 251:FWLIB/src/stm32f4xx_dma.c ****   }
 181              		.loc 1 251 17 is_stmt 0 view .LVU60
 182 00a8 883B     		subs	r3, r3, #136
 183 00aa 294A     		ldr	r2, .L34+68
 184 00ac DA60     		str	r2, [r3, #12]
 185 00ae 7047     		bx	lr
 186              	.L24:
 256:FWLIB/src/stm32f4xx_dma.c ****   }
 187              		.loc 1 256 5 is_stmt 1 view .LVU61
 256:FWLIB/src/stm32f4xx_dma.c ****   }
 188              		.loc 1 256 17 is_stmt 0 view .LVU62
 189 00b0 A03B     		subs	r3, r3, #160
 190 00b2 284A     		ldr	r2, .L34+72
 191 00b4 DA60     		str	r2, [r3, #12]
 192 00b6 7047     		bx	lr
 193              	.L25:
 261:FWLIB/src/stm32f4xx_dma.c ****   }
ARM GAS  /tmp/ccF492tC.s 			page 10


 194              		.loc 1 261 5 is_stmt 1 view .LVU63
 261:FWLIB/src/stm32f4xx_dma.c ****   }
 195              		.loc 1 261 17 is_stmt 0 view .LVU64
 196 00b8 B83B     		subs	r3, r3, #184
 197 00ba 4FF03D52 		mov	r2, #792723456
 198 00be DA60     		str	r2, [r3, #12]
 199 00c0 7047     		bx	lr
 200              	.L26:
 266:FWLIB/src/stm32f4xx_dma.c ****   }
 201              		.loc 1 266 5 is_stmt 1 view .LVU65
 266:FWLIB/src/stm32f4xx_dma.c ****   }
 202              		.loc 1 266 17 is_stmt 0 view .LVU66
 203 00c2 103B     		subs	r3, r3, #16
 204 00c4 3D22     		movs	r2, #61
 205 00c6 9A60     		str	r2, [r3, #8]
 206 00c8 7047     		bx	lr
 207              	.L27:
 271:FWLIB/src/stm32f4xx_dma.c ****   }
 208              		.loc 1 271 5 is_stmt 1 view .LVU67
 271:FWLIB/src/stm32f4xx_dma.c ****   }
 209              		.loc 1 271 17 is_stmt 0 view .LVU68
 210 00ca 283B     		subs	r3, r3, #40
 211 00cc 4FF47462 		mov	r2, #3904
 212 00d0 9A60     		str	r2, [r3, #8]
 213 00d2 7047     		bx	lr
 214              	.L28:
 276:FWLIB/src/stm32f4xx_dma.c ****   }
 215              		.loc 1 276 5 is_stmt 1 view .LVU69
 276:FWLIB/src/stm32f4xx_dma.c ****   }
 216              		.loc 1 276 17 is_stmt 0 view .LVU70
 217 00d4 403B     		subs	r3, r3, #64
 218 00d6 4FF47412 		mov	r2, #3997696
 219 00da 9A60     		str	r2, [r3, #8]
 220 00dc 7047     		bx	lr
 221              	.L29:
 281:FWLIB/src/stm32f4xx_dma.c ****   }
 222              		.loc 1 281 5 is_stmt 1 view .LVU71
 281:FWLIB/src/stm32f4xx_dma.c ****   }
 223              		.loc 1 281 17 is_stmt 0 view .LVU72
 224 00de 583B     		subs	r3, r3, #88
 225 00e0 4FF07462 		mov	r2, #255852544
 226 00e4 9A60     		str	r2, [r3, #8]
 227 00e6 7047     		bx	lr
 228              	.L30:
 286:FWLIB/src/stm32f4xx_dma.c ****   }
 229              		.loc 1 286 5 is_stmt 1 view .LVU73
 286:FWLIB/src/stm32f4xx_dma.c ****   }
 230              		.loc 1 286 17 is_stmt 0 view .LVU74
 231 00e8 703B     		subs	r3, r3, #112
 232 00ea 184A     		ldr	r2, .L34+64
 233 00ec DA60     		str	r2, [r3, #12]
 234 00ee 7047     		bx	lr
 235              	.L31:
 291:FWLIB/src/stm32f4xx_dma.c ****   }
 236              		.loc 1 291 5 is_stmt 1 view .LVU75
 291:FWLIB/src/stm32f4xx_dma.c ****   }
 237              		.loc 1 291 17 is_stmt 0 view .LVU76
ARM GAS  /tmp/ccF492tC.s 			page 11


 238 00f0 883B     		subs	r3, r3, #136
 239 00f2 174A     		ldr	r2, .L34+68
 240 00f4 DA60     		str	r2, [r3, #12]
 241 00f6 7047     		bx	lr
 242              	.L32:
 296:FWLIB/src/stm32f4xx_dma.c ****   }
 243              		.loc 1 296 5 is_stmt 1 view .LVU77
 296:FWLIB/src/stm32f4xx_dma.c ****   }
 244              		.loc 1 296 17 is_stmt 0 view .LVU78
 245 00f8 A03B     		subs	r3, r3, #160
 246 00fa 164A     		ldr	r2, .L34+72
 247 00fc DA60     		str	r2, [r3, #12]
 248 00fe 7047     		bx	lr
 249              	.L33:
 303:FWLIB/src/stm32f4xx_dma.c ****     }
 250              		.loc 1 303 7 is_stmt 1 view .LVU79
 303:FWLIB/src/stm32f4xx_dma.c ****     }
 251              		.loc 1 303 19 is_stmt 0 view .LVU80
 252 0100 B83B     		subs	r3, r3, #184
 253 0102 4FF03D52 		mov	r2, #792723456
 254 0106 DA60     		str	r2, [r3, #12]
 255              		.loc 1 306 1 view .LVU81
 256 0108 B6E7     		b	.L1
 257              	.L35:
 258 010a 00BF     		.align	2
 259              	.L34:
 260 010c 10600240 		.word	1073897488
 261 0110 28600240 		.word	1073897512
 262 0114 40600240 		.word	1073897536
 263 0118 58600240 		.word	1073897560
 264 011c 70600240 		.word	1073897584
 265 0120 88600240 		.word	1073897608
 266 0124 A0600240 		.word	1073897632
 267 0128 B8600240 		.word	1073897656
 268 012c 10640240 		.word	1073898512
 269 0130 28640240 		.word	1073898536
 270 0134 40640240 		.word	1073898560
 271 0138 58640240 		.word	1073898584
 272 013c 70640240 		.word	1073898608
 273 0140 88640240 		.word	1073898632
 274 0144 A0640240 		.word	1073898656
 275 0148 B8640240 		.word	1073898680
 276 014c 3D000020 		.word	536870973
 277 0150 400F0020 		.word	536874816
 278 0154 00003D20 		.word	540868608
 279              		.cfi_endproc
 280              	.LFE123:
 282              		.section	.text.DMA_Init,"ax",%progbits
 283              		.align	1
 284              		.global	DMA_Init
 285              		.syntax unified
 286              		.thumb
 287              		.thumb_func
 288              		.fpu fpv4-sp-d16
 290              	DMA_Init:
 291              	.LVL1:
 292              	.LFB124:
ARM GAS  /tmp/ccF492tC.s 			page 12


 307:FWLIB/src/stm32f4xx_dma.c **** 
 308:FWLIB/src/stm32f4xx_dma.c **** /**
 309:FWLIB/src/stm32f4xx_dma.c ****   * @brief  Initializes the DMAy Streamx according to the specified parameters in 
 310:FWLIB/src/stm32f4xx_dma.c ****   *         the DMA_InitStruct structure.
 311:FWLIB/src/stm32f4xx_dma.c ****   * @note   Before calling this function, it is recommended to check that the Stream 
 312:FWLIB/src/stm32f4xx_dma.c ****   *         is actually disabled using the function DMA_GetCmdStatus().  
 313:FWLIB/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 314:FWLIB/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 315:FWLIB/src/stm32f4xx_dma.c ****   * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
 316:FWLIB/src/stm32f4xx_dma.c ****   *         the configuration information for the specified DMA Stream.  
 317:FWLIB/src/stm32f4xx_dma.c ****   * @retval None
 318:FWLIB/src/stm32f4xx_dma.c ****   */
 319:FWLIB/src/stm32f4xx_dma.c **** void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
 320:FWLIB/src/stm32f4xx_dma.c **** {
 293              		.loc 1 320 1 is_stmt 1 view -0
 294              		.cfi_startproc
 295              		@ args = 0, pretend = 0, frame = 0
 296              		@ frame_needed = 0, uses_anonymous_args = 0
 297              		@ link register save eliminated.
 298              		.loc 1 320 1 is_stmt 0 view .LVU83
 299 0000 10B4     		push	{r4}
 300              	.LCFI0:
 301              		.cfi_def_cfa_offset 4
 302              		.cfi_offset 4, -4
 321:FWLIB/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0;
 303              		.loc 1 321 3 is_stmt 1 view .LVU84
 304              	.LVL2:
 322:FWLIB/src/stm32f4xx_dma.c **** 
 323:FWLIB/src/stm32f4xx_dma.c ****   /* Check the parameters */
 324:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 305              		.loc 1 324 3 view .LVU85
 325:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CHANNEL(DMA_InitStruct->DMA_Channel));
 306              		.loc 1 325 3 view .LVU86
 326:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_DIRECTION(DMA_InitStruct->DMA_DIR));
 307              		.loc 1 326 3 view .LVU87
 327:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
 308              		.loc 1 327 3 view .LVU88
 328:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
 309              		.loc 1 328 3 view .LVU89
 329:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));
 310              		.loc 1 329 3 view .LVU90
 330:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
 311              		.loc 1 330 3 view .LVU91
 331:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
 312              		.loc 1 331 3 view .LVU92
 332:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
 313              		.loc 1 332 3 view .LVU93
 333:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
 314              		.loc 1 333 3 view .LVU94
 334:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_FIFO_MODE_STATE(DMA_InitStruct->DMA_FIFOMode));
 315              		.loc 1 334 3 view .LVU95
 335:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_FIFO_THRESHOLD(DMA_InitStruct->DMA_FIFOThreshold));
 316              		.loc 1 335 3 view .LVU96
 336:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
 317              		.loc 1 336 3 view .LVU97
 337:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));
 318              		.loc 1 337 3 view .LVU98
ARM GAS  /tmp/ccF492tC.s 			page 13


 338:FWLIB/src/stm32f4xx_dma.c **** 
 339:FWLIB/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx CR Configuration ------------------*/
 340:FWLIB/src/stm32f4xx_dma.c ****   /* Get the DMAy_Streamx CR value */
 341:FWLIB/src/stm32f4xx_dma.c ****   tmpreg = DMAy_Streamx->CR;
 319              		.loc 1 341 3 view .LVU99
 320              		.loc 1 341 10 is_stmt 0 view .LVU100
 321 0002 0368     		ldr	r3, [r0]
 322              	.LVL3:
 342:FWLIB/src/stm32f4xx_dma.c **** 
 343:FWLIB/src/stm32f4xx_dma.c ****   /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
 344:FWLIB/src/stm32f4xx_dma.c ****   tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 323              		.loc 1 344 3 is_stmt 1 view .LVU101
 324              		.loc 1 344 10 is_stmt 0 view .LVU102
 325 0004 134A     		ldr	r2, .L38
 326 0006 1A40     		ands	r2, r2, r3
 327              	.LVL4:
 345:FWLIB/src/stm32f4xx_dma.c ****                          DMA_SxCR_PL | DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | \
 346:FWLIB/src/stm32f4xx_dma.c ****                          DMA_SxCR_MINC | DMA_SxCR_PINC | DMA_SxCR_CIRC | \
 347:FWLIB/src/stm32f4xx_dma.c ****                          DMA_SxCR_DIR));
 348:FWLIB/src/stm32f4xx_dma.c **** 
 349:FWLIB/src/stm32f4xx_dma.c ****   /* Configure DMAy Streamx: */
 350:FWLIB/src/stm32f4xx_dma.c ****   /* Set CHSEL bits according to DMA_CHSEL value */
 351:FWLIB/src/stm32f4xx_dma.c ****   /* Set DIR bits according to DMA_DIR value */
 352:FWLIB/src/stm32f4xx_dma.c ****   /* Set PINC bit according to DMA_PeripheralInc value */
 353:FWLIB/src/stm32f4xx_dma.c ****   /* Set MINC bit according to DMA_MemoryInc value */
 354:FWLIB/src/stm32f4xx_dma.c ****   /* Set PSIZE bits according to DMA_PeripheralDataSize value */
 355:FWLIB/src/stm32f4xx_dma.c ****   /* Set MSIZE bits according to DMA_MemoryDataSize value */
 356:FWLIB/src/stm32f4xx_dma.c ****   /* Set CIRC bit according to DMA_Mode value */
 357:FWLIB/src/stm32f4xx_dma.c ****   /* Set PL bits according to DMA_Priority value */
 358:FWLIB/src/stm32f4xx_dma.c ****   /* Set MBURST bits according to DMA_MemoryBurst value */
 359:FWLIB/src/stm32f4xx_dma.c ****   /* Set PBURST bits according to DMA_PeripheralBurst value */
 360:FWLIB/src/stm32f4xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 328              		.loc 1 360 3 is_stmt 1 view .LVU103
 329              		.loc 1 360 27 is_stmt 0 view .LVU104
 330 0008 0B68     		ldr	r3, [r1]
 331              		.loc 1 360 57 view .LVU105
 332 000a CC68     		ldr	r4, [r1, #12]
 333              		.loc 1 360 41 view .LVU106
 334 000c 2343     		orrs	r3, r3, r4
 361:FWLIB/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 335              		.loc 1 361 27 view .LVU107
 336 000e 4C69     		ldr	r4, [r1, #20]
 360:FWLIB/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 337              		.loc 1 360 67 view .LVU108
 338 0010 2343     		orrs	r3, r3, r4
 339              		.loc 1 361 63 view .LVU109
 340 0012 8C69     		ldr	r4, [r1, #24]
 341              		.loc 1 361 47 view .LVU110
 342 0014 2343     		orrs	r3, r3, r4
 362:FWLIB/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 343              		.loc 1 362 27 view .LVU111
 344 0016 CC69     		ldr	r4, [r1, #28]
 361:FWLIB/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 345              		.loc 1 361 79 view .LVU112
 346 0018 2343     		orrs	r3, r3, r4
 347              		.loc 1 362 68 view .LVU113
 348 001a 0C6A     		ldr	r4, [r1, #32]
ARM GAS  /tmp/ccF492tC.s 			page 14


 349              		.loc 1 362 52 view .LVU114
 350 001c 2343     		orrs	r3, r3, r4
 363:FWLIB/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 351              		.loc 1 363 27 view .LVU115
 352 001e 4C6A     		ldr	r4, [r1, #36]
 362:FWLIB/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 353              		.loc 1 362 89 view .LVU116
 354 0020 2343     		orrs	r3, r3, r4
 355              		.loc 1 363 54 view .LVU117
 356 0022 8C6A     		ldr	r4, [r1, #40]
 357              		.loc 1 363 38 view .LVU118
 358 0024 2343     		orrs	r3, r3, r4
 364:FWLIB/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 359              		.loc 1 364 27 view .LVU119
 360 0026 4C6B     		ldr	r4, [r1, #52]
 363:FWLIB/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 361              		.loc 1 363 69 view .LVU120
 362 0028 2343     		orrs	r3, r3, r4
 363              		.loc 1 364 61 view .LVU121
 364 002a 8C6B     		ldr	r4, [r1, #56]
 365              		.loc 1 364 45 view .LVU122
 366 002c 2343     		orrs	r3, r3, r4
 360:FWLIB/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 367              		.loc 1 360 10 view .LVU123
 368 002e 1343     		orrs	r3, r3, r2
 369              	.LVL5:
 365:FWLIB/src/stm32f4xx_dma.c **** 
 366:FWLIB/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx CR register */
 367:FWLIB/src/stm32f4xx_dma.c ****   DMAy_Streamx->CR = tmpreg;
 370              		.loc 1 367 3 is_stmt 1 view .LVU124
 371              		.loc 1 367 20 is_stmt 0 view .LVU125
 372 0030 0360     		str	r3, [r0]
 368:FWLIB/src/stm32f4xx_dma.c **** 
 369:FWLIB/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx FCR Configuration -----------------*/
 370:FWLIB/src/stm32f4xx_dma.c ****   /* Get the DMAy_Streamx FCR value */
 371:FWLIB/src/stm32f4xx_dma.c ****   tmpreg = DMAy_Streamx->FCR;
 373              		.loc 1 371 3 is_stmt 1 view .LVU126
 374              		.loc 1 371 10 is_stmt 0 view .LVU127
 375 0032 4269     		ldr	r2, [r0, #20]
 376              	.LVL6:
 372:FWLIB/src/stm32f4xx_dma.c **** 
 373:FWLIB/src/stm32f4xx_dma.c ****   /* Clear DMDIS and FTH bits */
 374:FWLIB/src/stm32f4xx_dma.c ****   tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 377              		.loc 1 374 3 is_stmt 1 view .LVU128
 378              		.loc 1 374 10 is_stmt 0 view .LVU129
 379 0034 22F00702 		bic	r2, r2, #7
 380              	.LVL7:
 375:FWLIB/src/stm32f4xx_dma.c **** 
 376:FWLIB/src/stm32f4xx_dma.c ****   /* Configure DMAy Streamx FIFO: 
 377:FWLIB/src/stm32f4xx_dma.c ****     Set DMDIS bits according to DMA_FIFOMode value 
 378:FWLIB/src/stm32f4xx_dma.c ****     Set FTH bits according to DMA_FIFOThreshold value */
 379:FWLIB/src/stm32f4xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 381              		.loc 1 379 3 is_stmt 1 view .LVU130
 382              		.loc 1 379 27 is_stmt 0 view .LVU131
 383 0038 CB6A     		ldr	r3, [r1, #44]
 384              		.loc 1 379 58 view .LVU132
 385 003a 0C6B     		ldr	r4, [r1, #48]
ARM GAS  /tmp/ccF492tC.s 			page 15


 386              		.loc 1 379 42 view .LVU133
 387 003c 2343     		orrs	r3, r3, r4
 388              		.loc 1 379 10 view .LVU134
 389 003e 1343     		orrs	r3, r3, r2
 390              	.LVL8:
 380:FWLIB/src/stm32f4xx_dma.c **** 
 381:FWLIB/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx CR */
 382:FWLIB/src/stm32f4xx_dma.c ****   DMAy_Streamx->FCR = tmpreg;
 391              		.loc 1 382 3 is_stmt 1 view .LVU135
 392              		.loc 1 382 21 is_stmt 0 view .LVU136
 393 0040 4361     		str	r3, [r0, #20]
 383:FWLIB/src/stm32f4xx_dma.c **** 
 384:FWLIB/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
 385:FWLIB/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx NDTR register */
 386:FWLIB/src/stm32f4xx_dma.c ****   DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 394              		.loc 1 386 3 is_stmt 1 view .LVU137
 395              		.loc 1 386 38 is_stmt 0 view .LVU138
 396 0042 0B69     		ldr	r3, [r1, #16]
 397              	.LVL9:
 398              		.loc 1 386 22 view .LVU139
 399 0044 4360     		str	r3, [r0, #4]
 400              	.LVL10:
 387:FWLIB/src/stm32f4xx_dma.c **** 
 388:FWLIB/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx PAR Configuration -----------------*/
 389:FWLIB/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx PAR */
 390:FWLIB/src/stm32f4xx_dma.c ****   DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 401              		.loc 1 390 3 is_stmt 1 view .LVU140
 402              		.loc 1 390 37 is_stmt 0 view .LVU141
 403 0046 4B68     		ldr	r3, [r1, #4]
 404              		.loc 1 390 21 view .LVU142
 405 0048 8360     		str	r3, [r0, #8]
 391:FWLIB/src/stm32f4xx_dma.c **** 
 392:FWLIB/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
 393:FWLIB/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx M0AR */
 394:FWLIB/src/stm32f4xx_dma.c ****   DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 406              		.loc 1 394 3 is_stmt 1 view .LVU143
 407              		.loc 1 394 38 is_stmt 0 view .LVU144
 408 004a 8B68     		ldr	r3, [r1, #8]
 409              		.loc 1 394 22 view .LVU145
 410 004c C360     		str	r3, [r0, #12]
 395:FWLIB/src/stm32f4xx_dma.c **** }
 411              		.loc 1 395 1 view .LVU146
 412 004e 5DF8044B 		ldr	r4, [sp], #4
 413              	.LCFI1:
 414              		.cfi_restore 4
 415              		.cfi_def_cfa_offset 0
 416 0052 7047     		bx	lr
 417              	.L39:
 418              		.align	2
 419              	.L38:
 420 0054 3F801CF0 		.word	-266567617
 421              		.cfi_endproc
 422              	.LFE124:
 424              		.section	.text.DMA_StructInit,"ax",%progbits
 425              		.align	1
 426              		.global	DMA_StructInit
 427              		.syntax unified
ARM GAS  /tmp/ccF492tC.s 			page 16


 428              		.thumb
 429              		.thumb_func
 430              		.fpu fpv4-sp-d16
 432              	DMA_StructInit:
 433              	.LVL11:
 434              	.LFB125:
 396:FWLIB/src/stm32f4xx_dma.c **** 
 397:FWLIB/src/stm32f4xx_dma.c **** /**
 398:FWLIB/src/stm32f4xx_dma.c ****   * @brief  Fills each DMA_InitStruct member with its default value.
 399:FWLIB/src/stm32f4xx_dma.c ****   * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
 400:FWLIB/src/stm32f4xx_dma.c ****   *         be initialized.
 401:FWLIB/src/stm32f4xx_dma.c ****   * @retval None
 402:FWLIB/src/stm32f4xx_dma.c ****   */
 403:FWLIB/src/stm32f4xx_dma.c **** void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
 404:FWLIB/src/stm32f4xx_dma.c **** {
 435              		.loc 1 404 1 is_stmt 1 view -0
 436              		.cfi_startproc
 437              		@ args = 0, pretend = 0, frame = 0
 438              		@ frame_needed = 0, uses_anonymous_args = 0
 439              		@ link register save eliminated.
 405:FWLIB/src/stm32f4xx_dma.c ****   /*-------------- Reset DMA init structure parameters values ----------------*/
 406:FWLIB/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Channel member */
 407:FWLIB/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Channel = 0;
 440              		.loc 1 407 3 view .LVU148
 441              		.loc 1 407 31 is_stmt 0 view .LVU149
 442 0000 0023     		movs	r3, #0
 443 0002 0360     		str	r3, [r0]
 408:FWLIB/src/stm32f4xx_dma.c **** 
 409:FWLIB/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralBaseAddr member */
 410:FWLIB/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 444              		.loc 1 410 3 is_stmt 1 view .LVU150
 445              		.loc 1 410 42 is_stmt 0 view .LVU151
 446 0004 4360     		str	r3, [r0, #4]
 411:FWLIB/src/stm32f4xx_dma.c **** 
 412:FWLIB/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Memory0BaseAddr member */
 413:FWLIB/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 447              		.loc 1 413 3 is_stmt 1 view .LVU152
 448              		.loc 1 413 39 is_stmt 0 view .LVU153
 449 0006 8360     		str	r3, [r0, #8]
 414:FWLIB/src/stm32f4xx_dma.c **** 
 415:FWLIB/src/stm32f4xx_dma.c ****   /* Initialize the DMA_DIR member */
 416:FWLIB/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 450              		.loc 1 416 3 is_stmt 1 view .LVU154
 451              		.loc 1 416 27 is_stmt 0 view .LVU155
 452 0008 C360     		str	r3, [r0, #12]
 417:FWLIB/src/stm32f4xx_dma.c **** 
 418:FWLIB/src/stm32f4xx_dma.c ****   /* Initialize the DMA_BufferSize member */
 419:FWLIB/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_BufferSize = 0;
 453              		.loc 1 419 3 is_stmt 1 view .LVU156
 454              		.loc 1 419 34 is_stmt 0 view .LVU157
 455 000a 0361     		str	r3, [r0, #16]
 420:FWLIB/src/stm32f4xx_dma.c **** 
 421:FWLIB/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralInc member */
 422:FWLIB/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 456              		.loc 1 422 3 is_stmt 1 view .LVU158
 457              		.loc 1 422 37 is_stmt 0 view .LVU159
 458 000c 4361     		str	r3, [r0, #20]
ARM GAS  /tmp/ccF492tC.s 			page 17


 423:FWLIB/src/stm32f4xx_dma.c **** 
 424:FWLIB/src/stm32f4xx_dma.c ****   /* Initialize the DMA_MemoryInc member */
 425:FWLIB/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 459              		.loc 1 425 3 is_stmt 1 view .LVU160
 460              		.loc 1 425 33 is_stmt 0 view .LVU161
 461 000e 8361     		str	r3, [r0, #24]
 426:FWLIB/src/stm32f4xx_dma.c **** 
 427:FWLIB/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralDataSize member */
 428:FWLIB/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 462              		.loc 1 428 3 is_stmt 1 view .LVU162
 463              		.loc 1 428 42 is_stmt 0 view .LVU163
 464 0010 C361     		str	r3, [r0, #28]
 429:FWLIB/src/stm32f4xx_dma.c **** 
 430:FWLIB/src/stm32f4xx_dma.c ****   /* Initialize the DMA_MemoryDataSize member */
 431:FWLIB/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 465              		.loc 1 431 3 is_stmt 1 view .LVU164
 466              		.loc 1 431 38 is_stmt 0 view .LVU165
 467 0012 0362     		str	r3, [r0, #32]
 432:FWLIB/src/stm32f4xx_dma.c **** 
 433:FWLIB/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Mode member */
 434:FWLIB/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 468              		.loc 1 434 3 is_stmt 1 view .LVU166
 469              		.loc 1 434 28 is_stmt 0 view .LVU167
 470 0014 4362     		str	r3, [r0, #36]
 435:FWLIB/src/stm32f4xx_dma.c **** 
 436:FWLIB/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Priority member */
 437:FWLIB/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 471              		.loc 1 437 3 is_stmt 1 view .LVU168
 472              		.loc 1 437 32 is_stmt 0 view .LVU169
 473 0016 8362     		str	r3, [r0, #40]
 438:FWLIB/src/stm32f4xx_dma.c **** 
 439:FWLIB/src/stm32f4xx_dma.c ****   /* Initialize the DMA_FIFOMode member */
 440:FWLIB/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 474              		.loc 1 440 3 is_stmt 1 view .LVU170
 475              		.loc 1 440 32 is_stmt 0 view .LVU171
 476 0018 C362     		str	r3, [r0, #44]
 441:FWLIB/src/stm32f4xx_dma.c **** 
 442:FWLIB/src/stm32f4xx_dma.c ****   /* Initialize the DMA_FIFOThreshold member */
 443:FWLIB/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 477              		.loc 1 443 3 is_stmt 1 view .LVU172
 478              		.loc 1 443 37 is_stmt 0 view .LVU173
 479 001a 0363     		str	r3, [r0, #48]
 444:FWLIB/src/stm32f4xx_dma.c **** 
 445:FWLIB/src/stm32f4xx_dma.c ****   /* Initialize the DMA_MemoryBurst member */
 446:FWLIB/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 480              		.loc 1 446 3 is_stmt 1 view .LVU174
 481              		.loc 1 446 35 is_stmt 0 view .LVU175
 482 001c 4363     		str	r3, [r0, #52]
 447:FWLIB/src/stm32f4xx_dma.c **** 
 448:FWLIB/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralBurst member */
 449:FWLIB/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 483              		.loc 1 449 3 is_stmt 1 view .LVU176
 484              		.loc 1 449 39 is_stmt 0 view .LVU177
 485 001e 8363     		str	r3, [r0, #56]
 450:FWLIB/src/stm32f4xx_dma.c **** }
 486              		.loc 1 450 1 view .LVU178
 487 0020 7047     		bx	lr
ARM GAS  /tmp/ccF492tC.s 			page 18


 488              		.cfi_endproc
 489              	.LFE125:
 491              		.section	.text.DMA_Cmd,"ax",%progbits
 492              		.align	1
 493              		.global	DMA_Cmd
 494              		.syntax unified
 495              		.thumb
 496              		.thumb_func
 497              		.fpu fpv4-sp-d16
 499              	DMA_Cmd:
 500              	.LVL12:
 501              	.LFB126:
 451:FWLIB/src/stm32f4xx_dma.c **** 
 452:FWLIB/src/stm32f4xx_dma.c **** /**
 453:FWLIB/src/stm32f4xx_dma.c ****   * @brief  Enables or disables the specified DMAy Streamx.
 454:FWLIB/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 455:FWLIB/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 456:FWLIB/src/stm32f4xx_dma.c ****   * @param  NewState: new state of the DMAy Streamx. 
 457:FWLIB/src/stm32f4xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
 458:FWLIB/src/stm32f4xx_dma.c ****   *
 459:FWLIB/src/stm32f4xx_dma.c ****   * @note  This function may be used to perform Pause-Resume operation. When a
 460:FWLIB/src/stm32f4xx_dma.c ****   *        transfer is ongoing, calling this function to disable the Stream will
 461:FWLIB/src/stm32f4xx_dma.c ****   *        cause the transfer to be paused. All configuration registers and the
 462:FWLIB/src/stm32f4xx_dma.c ****   *        number of remaining data will be preserved. When calling again this
 463:FWLIB/src/stm32f4xx_dma.c ****   *        function to re-enable the Stream, the transfer will be resumed from
 464:FWLIB/src/stm32f4xx_dma.c ****   *        the point where it was paused.          
 465:FWLIB/src/stm32f4xx_dma.c ****   *    
 466:FWLIB/src/stm32f4xx_dma.c ****   * @note  After configuring the DMA Stream (DMA_Init() function) and enabling the
 467:FWLIB/src/stm32f4xx_dma.c ****   *        stream, it is recommended to check (or wait until) the DMA Stream is
 468:FWLIB/src/stm32f4xx_dma.c ****   *        effectively enabled. A Stream may remain disabled if a configuration 
 469:FWLIB/src/stm32f4xx_dma.c ****   *        parameter is wrong.
 470:FWLIB/src/stm32f4xx_dma.c ****   *        After disabling a DMA Stream, it is also recommended to check (or wait
 471:FWLIB/src/stm32f4xx_dma.c ****   *        until) the DMA Stream is effectively disabled. If a Stream is disabled 
 472:FWLIB/src/stm32f4xx_dma.c ****   *        while a data transfer is ongoing, the current data will be transferred
 473:FWLIB/src/stm32f4xx_dma.c ****   *        and the Stream will be effectively disabled only after the transfer of
 474:FWLIB/src/stm32f4xx_dma.c ****   *        this single data is finished.            
 475:FWLIB/src/stm32f4xx_dma.c ****   *    
 476:FWLIB/src/stm32f4xx_dma.c ****   * @retval None
 477:FWLIB/src/stm32f4xx_dma.c ****   */
 478:FWLIB/src/stm32f4xx_dma.c **** void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
 479:FWLIB/src/stm32f4xx_dma.c **** {
 502              		.loc 1 479 1 is_stmt 1 view -0
 503              		.cfi_startproc
 504              		@ args = 0, pretend = 0, frame = 0
 505              		@ frame_needed = 0, uses_anonymous_args = 0
 506              		@ link register save eliminated.
 480:FWLIB/src/stm32f4xx_dma.c ****   /* Check the parameters */
 481:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 507              		.loc 1 481 3 view .LVU180
 482:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 508              		.loc 1 482 3 view .LVU181
 483:FWLIB/src/stm32f4xx_dma.c **** 
 484:FWLIB/src/stm32f4xx_dma.c ****   if (NewState != DISABLE)
 509              		.loc 1 484 3 view .LVU182
 510              		.loc 1 484 6 is_stmt 0 view .LVU183
 511 0000 21B1     		cbz	r1, .L42
 485:FWLIB/src/stm32f4xx_dma.c ****   {
ARM GAS  /tmp/ccF492tC.s 			page 19


 486:FWLIB/src/stm32f4xx_dma.c ****     /* Enable the selected DMAy Streamx by setting EN bit */
 487:FWLIB/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 512              		.loc 1 487 5 is_stmt 1 view .LVU184
 513              		.loc 1 487 22 is_stmt 0 view .LVU185
 514 0002 0368     		ldr	r3, [r0]
 515 0004 43F00103 		orr	r3, r3, #1
 516 0008 0360     		str	r3, [r0]
 517 000a 7047     		bx	lr
 518              	.L42:
 488:FWLIB/src/stm32f4xx_dma.c ****   }
 489:FWLIB/src/stm32f4xx_dma.c ****   else
 490:FWLIB/src/stm32f4xx_dma.c ****   {
 491:FWLIB/src/stm32f4xx_dma.c ****     /* Disable the selected DMAy Streamx by clearing EN bit */
 492:FWLIB/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 519              		.loc 1 492 5 is_stmt 1 view .LVU186
 520              		.loc 1 492 22 is_stmt 0 view .LVU187
 521 000c 0368     		ldr	r3, [r0]
 522 000e 23F00103 		bic	r3, r3, #1
 523 0012 0360     		str	r3, [r0]
 493:FWLIB/src/stm32f4xx_dma.c ****   }
 494:FWLIB/src/stm32f4xx_dma.c **** }
 524              		.loc 1 494 1 view .LVU188
 525 0014 7047     		bx	lr
 526              		.cfi_endproc
 527              	.LFE126:
 529              		.section	.text.DMA_PeriphIncOffsetSizeConfig,"ax",%progbits
 530              		.align	1
 531              		.global	DMA_PeriphIncOffsetSizeConfig
 532              		.syntax unified
 533              		.thumb
 534              		.thumb_func
 535              		.fpu fpv4-sp-d16
 537              	DMA_PeriphIncOffsetSizeConfig:
 538              	.LVL13:
 539              	.LFB127:
 495:FWLIB/src/stm32f4xx_dma.c **** 
 496:FWLIB/src/stm32f4xx_dma.c **** /**
 497:FWLIB/src/stm32f4xx_dma.c ****   * @brief  Configures, when the PINC (Peripheral Increment address mode) bit is
 498:FWLIB/src/stm32f4xx_dma.c ****   *         set, if the peripheral address should be incremented with the data 
 499:FWLIB/src/stm32f4xx_dma.c ****   *         size (configured with PSIZE bits) or by a fixed offset equal to 4
 500:FWLIB/src/stm32f4xx_dma.c ****   *         (32-bit aligned addresses).
 501:FWLIB/src/stm32f4xx_dma.c ****   *   
 502:FWLIB/src/stm32f4xx_dma.c ****   * @note   This function has no effect if the Peripheral Increment mode is disabled.
 503:FWLIB/src/stm32f4xx_dma.c ****   *     
 504:FWLIB/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 505:FWLIB/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 506:FWLIB/src/stm32f4xx_dma.c ****   * @param  DMA_Pincos: specifies the Peripheral increment offset size.
 507:FWLIB/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 508:FWLIB/src/stm32f4xx_dma.c ****   *            @arg DMA_PINCOS_Psize: Peripheral address increment is done  
 509:FWLIB/src/stm32f4xx_dma.c ****   *                                   accordingly to PSIZE parameter.
 510:FWLIB/src/stm32f4xx_dma.c ****   *            @arg DMA_PINCOS_WordAligned: Peripheral address increment offset is 
 511:FWLIB/src/stm32f4xx_dma.c ****   *                                         fixed to 4 (32-bit aligned addresses). 
 512:FWLIB/src/stm32f4xx_dma.c ****   * @retval None
 513:FWLIB/src/stm32f4xx_dma.c ****   */
 514:FWLIB/src/stm32f4xx_dma.c **** void DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos)
 515:FWLIB/src/stm32f4xx_dma.c **** {
 540              		.loc 1 515 1 is_stmt 1 view -0
ARM GAS  /tmp/ccF492tC.s 			page 20


 541              		.cfi_startproc
 542              		@ args = 0, pretend = 0, frame = 0
 543              		@ frame_needed = 0, uses_anonymous_args = 0
 544              		@ link register save eliminated.
 516:FWLIB/src/stm32f4xx_dma.c ****   /* Check the parameters */
 517:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 545              		.loc 1 517 3 view .LVU190
 518:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));
 546              		.loc 1 518 3 view .LVU191
 519:FWLIB/src/stm32f4xx_dma.c **** 
 520:FWLIB/src/stm32f4xx_dma.c ****   /* Check the needed Peripheral increment offset */
 521:FWLIB/src/stm32f4xx_dma.c ****   if(DMA_Pincos != DMA_PINCOS_Psize)
 547              		.loc 1 521 3 view .LVU192
 548              		.loc 1 521 5 is_stmt 0 view .LVU193
 549 0000 21B1     		cbz	r1, .L45
 522:FWLIB/src/stm32f4xx_dma.c ****   {
 523:FWLIB/src/stm32f4xx_dma.c ****     /* Configure DMA_SxCR_PINCOS bit with the input parameter */
 524:FWLIB/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 550              		.loc 1 524 5 is_stmt 1 view .LVU194
 551              		.loc 1 524 22 is_stmt 0 view .LVU195
 552 0002 0368     		ldr	r3, [r0]
 553 0004 43F40043 		orr	r3, r3, #32768
 554 0008 0360     		str	r3, [r0]
 555 000a 7047     		bx	lr
 556              	.L45:
 525:FWLIB/src/stm32f4xx_dma.c ****   }
 526:FWLIB/src/stm32f4xx_dma.c ****   else
 527:FWLIB/src/stm32f4xx_dma.c ****   {
 528:FWLIB/src/stm32f4xx_dma.c ****     /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
 529:FWLIB/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 557              		.loc 1 529 5 is_stmt 1 view .LVU196
 558              		.loc 1 529 22 is_stmt 0 view .LVU197
 559 000c 0368     		ldr	r3, [r0]
 560 000e 23F40043 		bic	r3, r3, #32768
 561 0012 0360     		str	r3, [r0]
 530:FWLIB/src/stm32f4xx_dma.c ****   }
 531:FWLIB/src/stm32f4xx_dma.c **** }
 562              		.loc 1 531 1 view .LVU198
 563 0014 7047     		bx	lr
 564              		.cfi_endproc
 565              	.LFE127:
 567              		.section	.text.DMA_FlowControllerConfig,"ax",%progbits
 568              		.align	1
 569              		.global	DMA_FlowControllerConfig
 570              		.syntax unified
 571              		.thumb
 572              		.thumb_func
 573              		.fpu fpv4-sp-d16
 575              	DMA_FlowControllerConfig:
 576              	.LVL14:
 577              	.LFB128:
 532:FWLIB/src/stm32f4xx_dma.c **** 
 533:FWLIB/src/stm32f4xx_dma.c **** /**
 534:FWLIB/src/stm32f4xx_dma.c ****   * @brief  Configures, when the DMAy Streamx is disabled, the flow controller for
 535:FWLIB/src/stm32f4xx_dma.c ****   *         the next transactions (Peripheral or Memory).
 536:FWLIB/src/stm32f4xx_dma.c ****   *       
 537:FWLIB/src/stm32f4xx_dma.c ****   * @note   Before enabling this feature, check if the used peripheral supports 
ARM GAS  /tmp/ccF492tC.s 			page 21


 538:FWLIB/src/stm32f4xx_dma.c ****   *         the Flow Controller mode or not.    
 539:FWLIB/src/stm32f4xx_dma.c ****   *  
 540:FWLIB/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 541:FWLIB/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 542:FWLIB/src/stm32f4xx_dma.c ****   * @param  DMA_FlowCtrl: specifies the DMA flow controller.
 543:FWLIB/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 544:FWLIB/src/stm32f4xx_dma.c ****   *            @arg DMA_FlowCtrl_Memory: DMAy_Streamx transactions flow controller is 
 545:FWLIB/src/stm32f4xx_dma.c ****   *                                      the DMA controller.
 546:FWLIB/src/stm32f4xx_dma.c ****   *            @arg DMA_FlowCtrl_Peripheral: DMAy_Streamx transactions flow controller 
 547:FWLIB/src/stm32f4xx_dma.c ****   *                                          is the peripheral.    
 548:FWLIB/src/stm32f4xx_dma.c ****   * @retval None
 549:FWLIB/src/stm32f4xx_dma.c ****   */
 550:FWLIB/src/stm32f4xx_dma.c **** void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
 551:FWLIB/src/stm32f4xx_dma.c **** {
 578              		.loc 1 551 1 is_stmt 1 view -0
 579              		.cfi_startproc
 580              		@ args = 0, pretend = 0, frame = 0
 581              		@ frame_needed = 0, uses_anonymous_args = 0
 582              		@ link register save eliminated.
 552:FWLIB/src/stm32f4xx_dma.c ****   /* Check the parameters */
 553:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 583              		.loc 1 553 3 view .LVU200
 554:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));
 584              		.loc 1 554 3 view .LVU201
 555:FWLIB/src/stm32f4xx_dma.c **** 
 556:FWLIB/src/stm32f4xx_dma.c ****   /* Check the needed flow controller  */
 557:FWLIB/src/stm32f4xx_dma.c ****   if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 585              		.loc 1 557 3 view .LVU202
 586              		.loc 1 557 5 is_stmt 0 view .LVU203
 587 0000 21B1     		cbz	r1, .L48
 558:FWLIB/src/stm32f4xx_dma.c ****   {
 559:FWLIB/src/stm32f4xx_dma.c ****     /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
 560:FWLIB/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 588              		.loc 1 560 5 is_stmt 1 view .LVU204
 589              		.loc 1 560 22 is_stmt 0 view .LVU205
 590 0002 0368     		ldr	r3, [r0]
 591 0004 43F02003 		orr	r3, r3, #32
 592 0008 0360     		str	r3, [r0]
 593 000a 7047     		bx	lr
 594              	.L48:
 561:FWLIB/src/stm32f4xx_dma.c ****   }
 562:FWLIB/src/stm32f4xx_dma.c ****   else
 563:FWLIB/src/stm32f4xx_dma.c ****   {
 564:FWLIB/src/stm32f4xx_dma.c ****     /* Clear the PFCTRL bit: Memory is the flow controller */
 565:FWLIB/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 595              		.loc 1 565 5 is_stmt 1 view .LVU206
 596              		.loc 1 565 22 is_stmt 0 view .LVU207
 597 000c 0368     		ldr	r3, [r0]
 598 000e 23F02003 		bic	r3, r3, #32
 599 0012 0360     		str	r3, [r0]
 566:FWLIB/src/stm32f4xx_dma.c ****   }
 567:FWLIB/src/stm32f4xx_dma.c **** }
 600              		.loc 1 567 1 view .LVU208
 601 0014 7047     		bx	lr
 602              		.cfi_endproc
 603              	.LFE128:
 605              		.section	.text.DMA_SetCurrDataCounter,"ax",%progbits
ARM GAS  /tmp/ccF492tC.s 			page 22


 606              		.align	1
 607              		.global	DMA_SetCurrDataCounter
 608              		.syntax unified
 609              		.thumb
 610              		.thumb_func
 611              		.fpu fpv4-sp-d16
 613              	DMA_SetCurrDataCounter:
 614              	.LVL15:
 615              	.LFB129:
 568:FWLIB/src/stm32f4xx_dma.c **** /**
 569:FWLIB/src/stm32f4xx_dma.c ****   * @}
 570:FWLIB/src/stm32f4xx_dma.c ****   */
 571:FWLIB/src/stm32f4xx_dma.c **** 
 572:FWLIB/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group2 Data Counter functions
 573:FWLIB/src/stm32f4xx_dma.c ****  *  @brief   Data Counter functions 
 574:FWLIB/src/stm32f4xx_dma.c ****  *
 575:FWLIB/src/stm32f4xx_dma.c **** @verbatim   
 576:FWLIB/src/stm32f4xx_dma.c ****  ===============================================================================
 577:FWLIB/src/stm32f4xx_dma.c ****                       ##### Data Counter functions #####
 578:FWLIB/src/stm32f4xx_dma.c ****  ===============================================================================  
 579:FWLIB/src/stm32f4xx_dma.c ****     [..]
 580:FWLIB/src/stm32f4xx_dma.c ****     This subsection provides function allowing to configure and read the buffer size
 581:FWLIB/src/stm32f4xx_dma.c ****     (number of data to be transferred). 
 582:FWLIB/src/stm32f4xx_dma.c ****     [..]
 583:FWLIB/src/stm32f4xx_dma.c ****     The DMA data counter can be written only when the DMA Stream is disabled 
 584:FWLIB/src/stm32f4xx_dma.c ****     (ie. after transfer complete event).
 585:FWLIB/src/stm32f4xx_dma.c ****     [..]
 586:FWLIB/src/stm32f4xx_dma.c ****     The following function can be used to write the Stream data counter value:
 587:FWLIB/src/stm32f4xx_dma.c ****       (+) void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter);
 588:FWLIB/src/stm32f4xx_dma.c ****       -@- It is advised to use this function rather than DMA_Init() in situations 
 589:FWLIB/src/stm32f4xx_dma.c ****           where only the Data buffer needs to be reloaded.
 590:FWLIB/src/stm32f4xx_dma.c ****       -@- If the Source and Destination Data Sizes are different, then the value 
 591:FWLIB/src/stm32f4xx_dma.c ****           written in data counter, expressing the number of transfers, is relative 
 592:FWLIB/src/stm32f4xx_dma.c ****           to the number of transfers from the Peripheral point of view.
 593:FWLIB/src/stm32f4xx_dma.c ****           ie. If Memory data size is Word, Peripheral data size is Half-Words, 
 594:FWLIB/src/stm32f4xx_dma.c ****           then the value to be configured in the data counter is the number 
 595:FWLIB/src/stm32f4xx_dma.c ****           of Half-Words to be transferred from/to the peripheral.
 596:FWLIB/src/stm32f4xx_dma.c ****     [..]
 597:FWLIB/src/stm32f4xx_dma.c ****     The DMA data counter can be read to indicate the number of remaining transfers for
 598:FWLIB/src/stm32f4xx_dma.c ****     the relative DMA Stream. This counter is decremented at the end of each data 
 599:FWLIB/src/stm32f4xx_dma.c ****     transfer and when the transfer is complete: 
 600:FWLIB/src/stm32f4xx_dma.c ****       (+) If Normal mode is selected: the counter is set to 0.
 601:FWLIB/src/stm32f4xx_dma.c ****       (+) If Circular mode is selected: the counter is reloaded with the initial value
 602:FWLIB/src/stm32f4xx_dma.c ****           (configured before enabling the DMA Stream)
 603:FWLIB/src/stm32f4xx_dma.c ****      [..]
 604:FWLIB/src/stm32f4xx_dma.c ****      The following function can be used to read the Stream data counter value:
 605:FWLIB/src/stm32f4xx_dma.c ****        (+) uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx);
 606:FWLIB/src/stm32f4xx_dma.c **** 
 607:FWLIB/src/stm32f4xx_dma.c **** @endverbatim
 608:FWLIB/src/stm32f4xx_dma.c ****   * @{
 609:FWLIB/src/stm32f4xx_dma.c ****   */
 610:FWLIB/src/stm32f4xx_dma.c **** 
 611:FWLIB/src/stm32f4xx_dma.c **** /**
 612:FWLIB/src/stm32f4xx_dma.c ****   * @brief  Writes the number of data units to be transferred on the DMAy Streamx.
 613:FWLIB/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 614:FWLIB/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 615:FWLIB/src/stm32f4xx_dma.c ****   * @param  Counter: Number of data units to be transferred (from 0 to 65535) 
ARM GAS  /tmp/ccF492tC.s 			page 23


 616:FWLIB/src/stm32f4xx_dma.c ****   *          Number of data items depends only on the Peripheral data format.
 617:FWLIB/src/stm32f4xx_dma.c ****   *            
 618:FWLIB/src/stm32f4xx_dma.c ****   * @note   If Peripheral data format is Bytes: number of data units is equal 
 619:FWLIB/src/stm32f4xx_dma.c ****   *         to total number of bytes to be transferred.
 620:FWLIB/src/stm32f4xx_dma.c ****   *           
 621:FWLIB/src/stm32f4xx_dma.c ****   * @note   If Peripheral data format is Half-Word: number of data units is  
 622:FWLIB/src/stm32f4xx_dma.c ****   *         equal to total number of bytes to be transferred / 2.
 623:FWLIB/src/stm32f4xx_dma.c ****   *           
 624:FWLIB/src/stm32f4xx_dma.c ****   * @note   If Peripheral data format is Word: number of data units is equal 
 625:FWLIB/src/stm32f4xx_dma.c ****   *         to total  number of bytes to be transferred / 4.
 626:FWLIB/src/stm32f4xx_dma.c ****   *      
 627:FWLIB/src/stm32f4xx_dma.c ****   * @note   In Memory-to-Memory transfer mode, the memory buffer pointed by 
 628:FWLIB/src/stm32f4xx_dma.c ****   *         DMAy_SxPAR register is considered as Peripheral.
 629:FWLIB/src/stm32f4xx_dma.c ****   *      
 630:FWLIB/src/stm32f4xx_dma.c ****   * @retval The number of remaining data units in the current DMAy Streamx transfer.
 631:FWLIB/src/stm32f4xx_dma.c ****   */
 632:FWLIB/src/stm32f4xx_dma.c **** void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
 633:FWLIB/src/stm32f4xx_dma.c **** {
 616              		.loc 1 633 1 is_stmt 1 view -0
 617              		.cfi_startproc
 618              		@ args = 0, pretend = 0, frame = 0
 619              		@ frame_needed = 0, uses_anonymous_args = 0
 620              		@ link register save eliminated.
 634:FWLIB/src/stm32f4xx_dma.c ****   /* Check the parameters */
 635:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 621              		.loc 1 635 3 view .LVU210
 636:FWLIB/src/stm32f4xx_dma.c **** 
 637:FWLIB/src/stm32f4xx_dma.c ****   /* Write the number of data units to be transferred */
 638:FWLIB/src/stm32f4xx_dma.c ****   DMAy_Streamx->NDTR = (uint16_t)Counter;
 622              		.loc 1 638 3 view .LVU211
 623              		.loc 1 638 22 is_stmt 0 view .LVU212
 624 0000 4160     		str	r1, [r0, #4]
 639:FWLIB/src/stm32f4xx_dma.c **** }
 625              		.loc 1 639 1 view .LVU213
 626 0002 7047     		bx	lr
 627              		.cfi_endproc
 628              	.LFE129:
 630              		.section	.text.DMA_GetCurrDataCounter,"ax",%progbits
 631              		.align	1
 632              		.global	DMA_GetCurrDataCounter
 633              		.syntax unified
 634              		.thumb
 635              		.thumb_func
 636              		.fpu fpv4-sp-d16
 638              	DMA_GetCurrDataCounter:
 639              	.LVL16:
 640              	.LFB130:
 640:FWLIB/src/stm32f4xx_dma.c **** 
 641:FWLIB/src/stm32f4xx_dma.c **** /**
 642:FWLIB/src/stm32f4xx_dma.c ****   * @brief  Returns the number of remaining data units in the current DMAy Streamx transfer.
 643:FWLIB/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 644:FWLIB/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 645:FWLIB/src/stm32f4xx_dma.c ****   * @retval The number of remaining data units in the current DMAy Streamx transfer.
 646:FWLIB/src/stm32f4xx_dma.c ****   */
 647:FWLIB/src/stm32f4xx_dma.c **** uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
 648:FWLIB/src/stm32f4xx_dma.c **** {
 641              		.loc 1 648 1 is_stmt 1 view -0
ARM GAS  /tmp/ccF492tC.s 			page 24


 642              		.cfi_startproc
 643              		@ args = 0, pretend = 0, frame = 0
 644              		@ frame_needed = 0, uses_anonymous_args = 0
 645              		@ link register save eliminated.
 649:FWLIB/src/stm32f4xx_dma.c ****   /* Check the parameters */
 650:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 646              		.loc 1 650 3 view .LVU215
 651:FWLIB/src/stm32f4xx_dma.c **** 
 652:FWLIB/src/stm32f4xx_dma.c ****   /* Return the number of remaining data units for DMAy Streamx */
 653:FWLIB/src/stm32f4xx_dma.c ****   return ((uint16_t)(DMAy_Streamx->NDTR));
 647              		.loc 1 653 3 view .LVU216
 648              		.loc 1 653 34 is_stmt 0 view .LVU217
 649 0000 4068     		ldr	r0, [r0, #4]
 650              	.LVL17:
 654:FWLIB/src/stm32f4xx_dma.c **** }
 651              		.loc 1 654 1 view .LVU218
 652 0002 80B2     		uxth	r0, r0
 653 0004 7047     		bx	lr
 654              		.cfi_endproc
 655              	.LFE130:
 657              		.section	.text.DMA_DoubleBufferModeConfig,"ax",%progbits
 658              		.align	1
 659              		.global	DMA_DoubleBufferModeConfig
 660              		.syntax unified
 661              		.thumb
 662              		.thumb_func
 663              		.fpu fpv4-sp-d16
 665              	DMA_DoubleBufferModeConfig:
 666              	.LVL18:
 667              	.LFB131:
 655:FWLIB/src/stm32f4xx_dma.c **** /**
 656:FWLIB/src/stm32f4xx_dma.c ****   * @}
 657:FWLIB/src/stm32f4xx_dma.c ****   */
 658:FWLIB/src/stm32f4xx_dma.c **** 
 659:FWLIB/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group3 Double Buffer mode functions
 660:FWLIB/src/stm32f4xx_dma.c ****  *  @brief   Double Buffer mode functions 
 661:FWLIB/src/stm32f4xx_dma.c ****  *
 662:FWLIB/src/stm32f4xx_dma.c **** @verbatim   
 663:FWLIB/src/stm32f4xx_dma.c ****  ===============================================================================
 664:FWLIB/src/stm32f4xx_dma.c ****                     ##### Double Buffer mode functions #####
 665:FWLIB/src/stm32f4xx_dma.c ****  ===============================================================================  
 666:FWLIB/src/stm32f4xx_dma.c ****     [..]
 667:FWLIB/src/stm32f4xx_dma.c ****     This subsection provides function allowing to configure and control the double 
 668:FWLIB/src/stm32f4xx_dma.c ****     buffer mode parameters.
 669:FWLIB/src/stm32f4xx_dma.c ****     
 670:FWLIB/src/stm32f4xx_dma.c ****     [..]
 671:FWLIB/src/stm32f4xx_dma.c ****     The Double Buffer mode can be used only when Circular mode is enabled.
 672:FWLIB/src/stm32f4xx_dma.c ****     The Double Buffer mode cannot be used when transferring data from Memory to Memory.
 673:FWLIB/src/stm32f4xx_dma.c ****     
 674:FWLIB/src/stm32f4xx_dma.c ****     [..]
 675:FWLIB/src/stm32f4xx_dma.c ****     The Double Buffer mode allows to set two different Memory addresses from/to which
 676:FWLIB/src/stm32f4xx_dma.c ****     the DMA controller will access alternatively (after completing transfer to/from 
 677:FWLIB/src/stm32f4xx_dma.c ****     target memory 0, it will start transfer to/from target memory 1).
 678:FWLIB/src/stm32f4xx_dma.c ****     This allows to reduce software overhead for double buffering and reduce the CPU
 679:FWLIB/src/stm32f4xx_dma.c ****     access time.
 680:FWLIB/src/stm32f4xx_dma.c ****     
 681:FWLIB/src/stm32f4xx_dma.c ****     [..]
ARM GAS  /tmp/ccF492tC.s 			page 25


 682:FWLIB/src/stm32f4xx_dma.c ****     Two functions must be called before calling the DMA_Init() function:
 683:FWLIB/src/stm32f4xx_dma.c ****       (+) void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, 
 684:FWLIB/src/stm32f4xx_dma.c ****           uint32_t Memory1BaseAddr, uint32_t DMA_CurrentMemory);
 685:FWLIB/src/stm32f4xx_dma.c ****       (+) void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState);
 686:FWLIB/src/stm32f4xx_dma.c ****       
 687:FWLIB/src/stm32f4xx_dma.c ****     [..]
 688:FWLIB/src/stm32f4xx_dma.c ****     DMA_DoubleBufferModeConfig() is called to configure the Memory 1 base address 
 689:FWLIB/src/stm32f4xx_dma.c ****     and the first Memory target from/to which the transfer will start after 
 690:FWLIB/src/stm32f4xx_dma.c ****     enabling the DMA Stream. Then DMA_DoubleBufferModeCmd() must be called 
 691:FWLIB/src/stm32f4xx_dma.c ****     to enable the Double Buffer mode (or disable it when it should not be used).
 692:FWLIB/src/stm32f4xx_dma.c ****   
 693:FWLIB/src/stm32f4xx_dma.c ****     [..]
 694:FWLIB/src/stm32f4xx_dma.c ****     Two functions can be called dynamically when the transfer is ongoing (or when the DMA Stream is
 695:FWLIB/src/stm32f4xx_dma.c ****     stopped) to modify on of the target Memories addresses or to check which Memory target is curre
 696:FWLIB/src/stm32f4xx_dma.c ****     used:
 697:FWLIB/src/stm32f4xx_dma.c ****       (+) void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, 
 698:FWLIB/src/stm32f4xx_dma.c ****                 uint32_t MemoryBaseAddr, uint32_t DMA_MemoryTarget);
 699:FWLIB/src/stm32f4xx_dma.c ****       (+) uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx);
 700:FWLIB/src/stm32f4xx_dma.c ****       
 701:FWLIB/src/stm32f4xx_dma.c ****     [..]
 702:FWLIB/src/stm32f4xx_dma.c ****     DMA_MemoryTargetConfig() can be called to modify the base address of one of 
 703:FWLIB/src/stm32f4xx_dma.c ****     the two target Memories.
 704:FWLIB/src/stm32f4xx_dma.c ****     The Memory of which the base address will be modified must not be currently 
 705:FWLIB/src/stm32f4xx_dma.c ****     be used by the DMA Stream (ie. if the DMA Stream is currently transferring 
 706:FWLIB/src/stm32f4xx_dma.c ****     from Memory 1 then you can only modify base address of target Memory 0 and vice versa).
 707:FWLIB/src/stm32f4xx_dma.c ****     To check this condition, it is recommended to use the function DMA_GetCurrentMemoryTarget() whi
 708:FWLIB/src/stm32f4xx_dma.c ****     returns the index of the Memory target currently in use by the DMA Stream.
 709:FWLIB/src/stm32f4xx_dma.c **** 
 710:FWLIB/src/stm32f4xx_dma.c **** @endverbatim
 711:FWLIB/src/stm32f4xx_dma.c ****   * @{
 712:FWLIB/src/stm32f4xx_dma.c ****   */
 713:FWLIB/src/stm32f4xx_dma.c ****   
 714:FWLIB/src/stm32f4xx_dma.c **** /**
 715:FWLIB/src/stm32f4xx_dma.c ****   * @brief  Configures, when the DMAy Streamx is disabled, the double buffer mode 
 716:FWLIB/src/stm32f4xx_dma.c ****   *         and the current memory target.
 717:FWLIB/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 718:FWLIB/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 719:FWLIB/src/stm32f4xx_dma.c ****   * @param  Memory1BaseAddr: the base address of the second buffer (Memory 1)  
 720:FWLIB/src/stm32f4xx_dma.c ****   * @param  DMA_CurrentMemory: specifies which memory will be first buffer for
 721:FWLIB/src/stm32f4xx_dma.c ****   *         the transactions when the Stream will be enabled. 
 722:FWLIB/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 723:FWLIB/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_0: Memory 0 is the current buffer.
 724:FWLIB/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_1: Memory 1 is the current buffer.  
 725:FWLIB/src/stm32f4xx_dma.c ****   *       
 726:FWLIB/src/stm32f4xx_dma.c ****   * @note   Memory0BaseAddr is set by the DMA structure configuration in DMA_Init().
 727:FWLIB/src/stm32f4xx_dma.c ****   *   
 728:FWLIB/src/stm32f4xx_dma.c ****   * @retval None
 729:FWLIB/src/stm32f4xx_dma.c ****   */
 730:FWLIB/src/stm32f4xx_dma.c **** void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
 731:FWLIB/src/stm32f4xx_dma.c ****                                 uint32_t DMA_CurrentMemory)
 732:FWLIB/src/stm32f4xx_dma.c **** {  
 668              		.loc 1 732 1 is_stmt 1 view -0
 669              		.cfi_startproc
 670              		@ args = 0, pretend = 0, frame = 0
 671              		@ frame_needed = 0, uses_anonymous_args = 0
 672              		@ link register save eliminated.
 733:FWLIB/src/stm32f4xx_dma.c ****   /* Check the parameters */
ARM GAS  /tmp/ccF492tC.s 			page 26


 734:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 673              		.loc 1 734 3 view .LVU220
 735:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));
 674              		.loc 1 735 3 view .LVU221
 736:FWLIB/src/stm32f4xx_dma.c **** 
 737:FWLIB/src/stm32f4xx_dma.c ****   if (DMA_CurrentMemory != DMA_Memory_0)
 675              		.loc 1 737 3 view .LVU222
 676              		.loc 1 737 6 is_stmt 0 view .LVU223
 677 0000 2AB1     		cbz	r2, .L53
 738:FWLIB/src/stm32f4xx_dma.c ****   {
 739:FWLIB/src/stm32f4xx_dma.c ****     /* Set Memory 1 as current memory address */
 740:FWLIB/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 678              		.loc 1 740 5 is_stmt 1 view .LVU224
 679              		.loc 1 740 22 is_stmt 0 view .LVU225
 680 0002 0368     		ldr	r3, [r0]
 681 0004 43F40023 		orr	r3, r3, #524288
 682 0008 0360     		str	r3, [r0]
 683              	.L54:
 741:FWLIB/src/stm32f4xx_dma.c ****   }
 742:FWLIB/src/stm32f4xx_dma.c ****   else
 743:FWLIB/src/stm32f4xx_dma.c ****   {
 744:FWLIB/src/stm32f4xx_dma.c ****     /* Set Memory 0 as current memory address */
 745:FWLIB/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 746:FWLIB/src/stm32f4xx_dma.c ****   }
 747:FWLIB/src/stm32f4xx_dma.c **** 
 748:FWLIB/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx M1AR */
 749:FWLIB/src/stm32f4xx_dma.c ****   DMAy_Streamx->M1AR = Memory1BaseAddr;
 684              		.loc 1 749 3 is_stmt 1 view .LVU226
 685              		.loc 1 749 22 is_stmt 0 view .LVU227
 686 000a 0161     		str	r1, [r0, #16]
 750:FWLIB/src/stm32f4xx_dma.c **** }
 687              		.loc 1 750 1 view .LVU228
 688 000c 7047     		bx	lr
 689              	.L53:
 745:FWLIB/src/stm32f4xx_dma.c ****   }
 690              		.loc 1 745 5 is_stmt 1 view .LVU229
 745:FWLIB/src/stm32f4xx_dma.c ****   }
 691              		.loc 1 745 22 is_stmt 0 view .LVU230
 692 000e 0368     		ldr	r3, [r0]
 693 0010 23F40023 		bic	r3, r3, #524288
 694 0014 0360     		str	r3, [r0]
 695 0016 F8E7     		b	.L54
 696              		.cfi_endproc
 697              	.LFE131:
 699              		.section	.text.DMA_DoubleBufferModeCmd,"ax",%progbits
 700              		.align	1
 701              		.global	DMA_DoubleBufferModeCmd
 702              		.syntax unified
 703              		.thumb
 704              		.thumb_func
 705              		.fpu fpv4-sp-d16
 707              	DMA_DoubleBufferModeCmd:
 708              	.LVL19:
 709              	.LFB132:
 751:FWLIB/src/stm32f4xx_dma.c **** 
 752:FWLIB/src/stm32f4xx_dma.c **** /**
 753:FWLIB/src/stm32f4xx_dma.c ****   * @brief  Enables or disables the double buffer mode for the selected DMA stream.
ARM GAS  /tmp/ccF492tC.s 			page 27


 754:FWLIB/src/stm32f4xx_dma.c ****   * @note   This function can be called only when the DMA Stream is disabled.  
 755:FWLIB/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 756:FWLIB/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 757:FWLIB/src/stm32f4xx_dma.c ****   * @param  NewState: new state of the DMAy Streamx double buffer mode. 
 758:FWLIB/src/stm32f4xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
 759:FWLIB/src/stm32f4xx_dma.c ****   * @retval None
 760:FWLIB/src/stm32f4xx_dma.c ****   */
 761:FWLIB/src/stm32f4xx_dma.c **** void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
 762:FWLIB/src/stm32f4xx_dma.c **** {  
 710              		.loc 1 762 1 is_stmt 1 view -0
 711              		.cfi_startproc
 712              		@ args = 0, pretend = 0, frame = 0
 713              		@ frame_needed = 0, uses_anonymous_args = 0
 714              		@ link register save eliminated.
 763:FWLIB/src/stm32f4xx_dma.c ****   /* Check the parameters */
 764:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 715              		.loc 1 764 3 view .LVU232
 765:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 716              		.loc 1 765 3 view .LVU233
 766:FWLIB/src/stm32f4xx_dma.c **** 
 767:FWLIB/src/stm32f4xx_dma.c ****   /* Configure the Double Buffer mode */
 768:FWLIB/src/stm32f4xx_dma.c ****   if (NewState != DISABLE)
 717              		.loc 1 768 3 view .LVU234
 718              		.loc 1 768 6 is_stmt 0 view .LVU235
 719 0000 21B1     		cbz	r1, .L56
 769:FWLIB/src/stm32f4xx_dma.c ****   {
 770:FWLIB/src/stm32f4xx_dma.c ****     /* Enable the Double buffer mode */
 771:FWLIB/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 720              		.loc 1 771 5 is_stmt 1 view .LVU236
 721              		.loc 1 771 22 is_stmt 0 view .LVU237
 722 0002 0368     		ldr	r3, [r0]
 723 0004 43F48023 		orr	r3, r3, #262144
 724 0008 0360     		str	r3, [r0]
 725 000a 7047     		bx	lr
 726              	.L56:
 772:FWLIB/src/stm32f4xx_dma.c ****   }
 773:FWLIB/src/stm32f4xx_dma.c ****   else
 774:FWLIB/src/stm32f4xx_dma.c ****   {
 775:FWLIB/src/stm32f4xx_dma.c ****     /* Disable the Double buffer mode */
 776:FWLIB/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 727              		.loc 1 776 5 is_stmt 1 view .LVU238
 728              		.loc 1 776 22 is_stmt 0 view .LVU239
 729 000c 0368     		ldr	r3, [r0]
 730 000e 23F48023 		bic	r3, r3, #262144
 731 0012 0360     		str	r3, [r0]
 777:FWLIB/src/stm32f4xx_dma.c ****   }
 778:FWLIB/src/stm32f4xx_dma.c **** }
 732              		.loc 1 778 1 view .LVU240
 733 0014 7047     		bx	lr
 734              		.cfi_endproc
 735              	.LFE132:
 737              		.section	.text.DMA_MemoryTargetConfig,"ax",%progbits
 738              		.align	1
 739              		.global	DMA_MemoryTargetConfig
 740              		.syntax unified
 741              		.thumb
 742              		.thumb_func
ARM GAS  /tmp/ccF492tC.s 			page 28


 743              		.fpu fpv4-sp-d16
 745              	DMA_MemoryTargetConfig:
 746              	.LVL20:
 747              	.LFB133:
 779:FWLIB/src/stm32f4xx_dma.c **** 
 780:FWLIB/src/stm32f4xx_dma.c **** /**
 781:FWLIB/src/stm32f4xx_dma.c ****   * @brief  Configures the Memory address for the next buffer transfer in double
 782:FWLIB/src/stm32f4xx_dma.c ****   *         buffer mode (for dynamic use). This function can be called when the
 783:FWLIB/src/stm32f4xx_dma.c ****   *         DMA Stream is enabled and when the transfer is ongoing.  
 784:FWLIB/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 785:FWLIB/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 786:FWLIB/src/stm32f4xx_dma.c ****   * @param  MemoryBaseAddr: The base address of the target memory buffer
 787:FWLIB/src/stm32f4xx_dma.c ****   * @param  DMA_MemoryTarget: Next memory target to be used. 
 788:FWLIB/src/stm32f4xx_dma.c ****   *         This parameter can be one of the following values:
 789:FWLIB/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_0: To use the memory address 0
 790:FWLIB/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_1: To use the memory address 1
 791:FWLIB/src/stm32f4xx_dma.c ****   * 
 792:FWLIB/src/stm32f4xx_dma.c ****   * @note    It is not allowed to modify the Base Address of a target Memory when
 793:FWLIB/src/stm32f4xx_dma.c ****   *          this target is involved in the current transfer. ie. If the DMA Stream
 794:FWLIB/src/stm32f4xx_dma.c ****   *          is currently transferring to/from Memory 1, then it not possible to
 795:FWLIB/src/stm32f4xx_dma.c ****   *          modify Base address of Memory 1, but it is possible to modify Base
 796:FWLIB/src/stm32f4xx_dma.c ****   *          address of Memory 0.
 797:FWLIB/src/stm32f4xx_dma.c ****   *          To know which Memory is currently used, you can use the function
 798:FWLIB/src/stm32f4xx_dma.c ****   *          DMA_GetCurrentMemoryTarget().             
 799:FWLIB/src/stm32f4xx_dma.c ****   *  
 800:FWLIB/src/stm32f4xx_dma.c ****   * @retval None
 801:FWLIB/src/stm32f4xx_dma.c ****   */
 802:FWLIB/src/stm32f4xx_dma.c **** void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
 803:FWLIB/src/stm32f4xx_dma.c ****                            uint32_t DMA_MemoryTarget)
 804:FWLIB/src/stm32f4xx_dma.c **** {
 748              		.loc 1 804 1 is_stmt 1 view -0
 749              		.cfi_startproc
 750              		@ args = 0, pretend = 0, frame = 0
 751              		@ frame_needed = 0, uses_anonymous_args = 0
 752              		@ link register save eliminated.
 805:FWLIB/src/stm32f4xx_dma.c ****   /* Check the parameters */
 806:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 753              		.loc 1 806 3 view .LVU242
 807:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
 754              		.loc 1 807 3 view .LVU243
 808:FWLIB/src/stm32f4xx_dma.c ****     
 809:FWLIB/src/stm32f4xx_dma.c ****   /* Check the Memory target to be configured */
 810:FWLIB/src/stm32f4xx_dma.c ****   if (DMA_MemoryTarget != DMA_Memory_0)
 755              		.loc 1 810 3 view .LVU244
 756              		.loc 1 810 6 is_stmt 0 view .LVU245
 757 0000 0AB1     		cbz	r2, .L59
 811:FWLIB/src/stm32f4xx_dma.c ****   {
 812:FWLIB/src/stm32f4xx_dma.c ****     /* Write to DMAy Streamx M1AR */
 813:FWLIB/src/stm32f4xx_dma.c ****     DMAy_Streamx->M1AR = MemoryBaseAddr;    
 758              		.loc 1 813 5 is_stmt 1 view .LVU246
 759              		.loc 1 813 24 is_stmt 0 view .LVU247
 760 0002 0161     		str	r1, [r0, #16]
 761 0004 7047     		bx	lr
 762              	.L59:
 814:FWLIB/src/stm32f4xx_dma.c ****   }  
 815:FWLIB/src/stm32f4xx_dma.c ****   else
 816:FWLIB/src/stm32f4xx_dma.c ****   {
ARM GAS  /tmp/ccF492tC.s 			page 29


 817:FWLIB/src/stm32f4xx_dma.c ****     /* Write to DMAy Streamx M0AR */
 818:FWLIB/src/stm32f4xx_dma.c ****     DMAy_Streamx->M0AR = MemoryBaseAddr;  
 763              		.loc 1 818 5 is_stmt 1 view .LVU248
 764              		.loc 1 818 24 is_stmt 0 view .LVU249
 765 0006 C160     		str	r1, [r0, #12]
 819:FWLIB/src/stm32f4xx_dma.c ****   }
 820:FWLIB/src/stm32f4xx_dma.c **** }
 766              		.loc 1 820 1 view .LVU250
 767 0008 7047     		bx	lr
 768              		.cfi_endproc
 769              	.LFE133:
 771              		.section	.text.DMA_GetCurrentMemoryTarget,"ax",%progbits
 772              		.align	1
 773              		.global	DMA_GetCurrentMemoryTarget
 774              		.syntax unified
 775              		.thumb
 776              		.thumb_func
 777              		.fpu fpv4-sp-d16
 779              	DMA_GetCurrentMemoryTarget:
 780              	.LVL21:
 781              	.LFB134:
 821:FWLIB/src/stm32f4xx_dma.c **** 
 822:FWLIB/src/stm32f4xx_dma.c **** /**
 823:FWLIB/src/stm32f4xx_dma.c ****   * @brief  Returns the current memory target used by double buffer transfer.
 824:FWLIB/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 825:FWLIB/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 826:FWLIB/src/stm32f4xx_dma.c ****   * @retval The memory target number: 0 for Memory0 or 1 for Memory1. 
 827:FWLIB/src/stm32f4xx_dma.c ****   */
 828:FWLIB/src/stm32f4xx_dma.c **** uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
 829:FWLIB/src/stm32f4xx_dma.c **** {
 782              		.loc 1 829 1 is_stmt 1 view -0
 783              		.cfi_startproc
 784              		@ args = 0, pretend = 0, frame = 0
 785              		@ frame_needed = 0, uses_anonymous_args = 0
 786              		@ link register save eliminated.
 830:FWLIB/src/stm32f4xx_dma.c ****   uint32_t tmp = 0;
 787              		.loc 1 830 3 view .LVU252
 831:FWLIB/src/stm32f4xx_dma.c ****   
 832:FWLIB/src/stm32f4xx_dma.c ****   /* Check the parameters */
 833:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 788              		.loc 1 833 3 view .LVU253
 834:FWLIB/src/stm32f4xx_dma.c **** 
 835:FWLIB/src/stm32f4xx_dma.c ****   /* Get the current memory target */
 836:FWLIB/src/stm32f4xx_dma.c ****   if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 789              		.loc 1 836 3 view .LVU254
 790              		.loc 1 836 20 is_stmt 0 view .LVU255
 791 0000 0368     		ldr	r3, [r0]
 792              		.loc 1 836 6 view .LVU256
 793 0002 13F4002F 		tst	r3, #524288
 794 0006 01D0     		beq	.L63
 837:FWLIB/src/stm32f4xx_dma.c ****   {
 838:FWLIB/src/stm32f4xx_dma.c ****     /* Current memory buffer used is Memory 1 */
 839:FWLIB/src/stm32f4xx_dma.c ****     tmp = 1;
 795              		.loc 1 839 9 view .LVU257
 796 0008 0120     		movs	r0, #1
 797              	.LVL22:
 798              		.loc 1 839 9 view .LVU258
ARM GAS  /tmp/ccF492tC.s 			page 30


 799 000a 7047     		bx	lr
 800              	.LVL23:
 801              	.L63:
 840:FWLIB/src/stm32f4xx_dma.c ****   }  
 841:FWLIB/src/stm32f4xx_dma.c ****   else
 842:FWLIB/src/stm32f4xx_dma.c ****   {
 843:FWLIB/src/stm32f4xx_dma.c ****     /* Current memory buffer used is Memory 0 */
 844:FWLIB/src/stm32f4xx_dma.c ****     tmp = 0;    
 802              		.loc 1 844 9 view .LVU259
 803 000c 0020     		movs	r0, #0
 804              	.LVL24:
 845:FWLIB/src/stm32f4xx_dma.c ****   }
 846:FWLIB/src/stm32f4xx_dma.c ****   return tmp;
 805              		.loc 1 846 3 is_stmt 1 view .LVU260
 847:FWLIB/src/stm32f4xx_dma.c **** }
 806              		.loc 1 847 1 is_stmt 0 view .LVU261
 807 000e 7047     		bx	lr
 808              		.cfi_endproc
 809              	.LFE134:
 811              		.section	.text.DMA_GetCmdStatus,"ax",%progbits
 812              		.align	1
 813              		.global	DMA_GetCmdStatus
 814              		.syntax unified
 815              		.thumb
 816              		.thumb_func
 817              		.fpu fpv4-sp-d16
 819              	DMA_GetCmdStatus:
 820              	.LVL25:
 821              	.LFB135:
 848:FWLIB/src/stm32f4xx_dma.c **** /**
 849:FWLIB/src/stm32f4xx_dma.c ****   * @}
 850:FWLIB/src/stm32f4xx_dma.c ****   */
 851:FWLIB/src/stm32f4xx_dma.c **** 
 852:FWLIB/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group4 Interrupts and flags management functions
 853:FWLIB/src/stm32f4xx_dma.c ****  *  @brief   Interrupts and flags management functions 
 854:FWLIB/src/stm32f4xx_dma.c ****  *
 855:FWLIB/src/stm32f4xx_dma.c **** @verbatim   
 856:FWLIB/src/stm32f4xx_dma.c ****  ===============================================================================
 857:FWLIB/src/stm32f4xx_dma.c ****               ##### Interrupts and flags management functions #####
 858:FWLIB/src/stm32f4xx_dma.c ****  ===============================================================================  
 859:FWLIB/src/stm32f4xx_dma.c ****     [..]
 860:FWLIB/src/stm32f4xx_dma.c ****     This subsection provides functions allowing to
 861:FWLIB/src/stm32f4xx_dma.c ****       (+) Check the DMA enable status
 862:FWLIB/src/stm32f4xx_dma.c ****       (+) Check the FIFO status 
 863:FWLIB/src/stm32f4xx_dma.c ****       (+) Configure the DMA Interrupts sources and check or clear the flags or 
 864:FWLIB/src/stm32f4xx_dma.c ****           pending bits status.  
 865:FWLIB/src/stm32f4xx_dma.c ****            
 866:FWLIB/src/stm32f4xx_dma.c ****     [..]
 867:FWLIB/src/stm32f4xx_dma.c ****       (#) DMA Enable status:
 868:FWLIB/src/stm32f4xx_dma.c ****           After configuring the DMA Stream (DMA_Init() function) and enabling 
 869:FWLIB/src/stm32f4xx_dma.c ****           the stream, it is recommended to check (or wait until) the DMA Stream 
 870:FWLIB/src/stm32f4xx_dma.c ****           is effectively enabled. A Stream may remain disabled if a configuration 
 871:FWLIB/src/stm32f4xx_dma.c ****           parameter is wrong. After disabling a DMA Stream, it is also recommended 
 872:FWLIB/src/stm32f4xx_dma.c ****           to check (or wait until) the DMA Stream is effectively disabled. 
 873:FWLIB/src/stm32f4xx_dma.c ****           If a Stream is disabled while a data transfer is ongoing, the current 
 874:FWLIB/src/stm32f4xx_dma.c ****           data will be transferred and the Stream will be effectively disabled 
 875:FWLIB/src/stm32f4xx_dma.c ****           only after this data transfer completion.
ARM GAS  /tmp/ccF492tC.s 			page 31


 876:FWLIB/src/stm32f4xx_dma.c ****           To monitor this state it is possible to use the following function:
 877:FWLIB/src/stm32f4xx_dma.c ****         (++) FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx); 
 878:FWLIB/src/stm32f4xx_dma.c ****  
 879:FWLIB/src/stm32f4xx_dma.c ****       (#) FIFO Status:
 880:FWLIB/src/stm32f4xx_dma.c ****           It is possible to monitor the FIFO status when a transfer is ongoing 
 881:FWLIB/src/stm32f4xx_dma.c ****           using the following function:
 882:FWLIB/src/stm32f4xx_dma.c ****         (++) uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx); 
 883:FWLIB/src/stm32f4xx_dma.c ****  
 884:FWLIB/src/stm32f4xx_dma.c ****       (#) DMA Interrupts and Flags:
 885:FWLIB/src/stm32f4xx_dma.c ****           The user should identify which mode will be used in his application 
 886:FWLIB/src/stm32f4xx_dma.c ****           to manage the DMA controller events: Polling mode or Interrupt mode. 
 887:FWLIB/src/stm32f4xx_dma.c ****     
 888:FWLIB/src/stm32f4xx_dma.c ****     *** Polling Mode ***
 889:FWLIB/src/stm32f4xx_dma.c ****     ====================
 890:FWLIB/src/stm32f4xx_dma.c ****     [..]
 891:FWLIB/src/stm32f4xx_dma.c ****     Each DMA stream can be managed through 4 event Flags:
 892:FWLIB/src/stm32f4xx_dma.c ****     (x : DMA Stream number )
 893:FWLIB/src/stm32f4xx_dma.c ****       (#) DMA_FLAG_FEIFx  : to indicate that a FIFO Mode Transfer Error event occurred.
 894:FWLIB/src/stm32f4xx_dma.c ****       (#) DMA_FLAG_DMEIFx : to indicate that a Direct Mode Transfer Error event occurred.
 895:FWLIB/src/stm32f4xx_dma.c ****       (#) DMA_FLAG_TEIFx  : to indicate that a Transfer Error event occurred.
 896:FWLIB/src/stm32f4xx_dma.c ****       (#) DMA_FLAG_HTIFx  : to indicate that a Half-Transfer Complete event occurred.
 897:FWLIB/src/stm32f4xx_dma.c ****       (#) DMA_FLAG_TCIFx  : to indicate that a Transfer Complete event occurred .       
 898:FWLIB/src/stm32f4xx_dma.c ****     [..]
 899:FWLIB/src/stm32f4xx_dma.c ****     In this Mode it is advised to use the following functions:
 900:FWLIB/src/stm32f4xx_dma.c ****       (+) FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG);
 901:FWLIB/src/stm32f4xx_dma.c ****       (+) void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG);
 902:FWLIB/src/stm32f4xx_dma.c **** 
 903:FWLIB/src/stm32f4xx_dma.c ****     *** Interrupt Mode ***
 904:FWLIB/src/stm32f4xx_dma.c ****     ======================
 905:FWLIB/src/stm32f4xx_dma.c ****     [..]
 906:FWLIB/src/stm32f4xx_dma.c ****     Each DMA Stream can be managed through 4 Interrupts:
 907:FWLIB/src/stm32f4xx_dma.c **** 
 908:FWLIB/src/stm32f4xx_dma.c ****     *** Interrupt Source ***
 909:FWLIB/src/stm32f4xx_dma.c ****     ========================
 910:FWLIB/src/stm32f4xx_dma.c ****     [..]
 911:FWLIB/src/stm32f4xx_dma.c ****       (#) DMA_IT_FEIFx  : specifies the interrupt source for the  FIFO Mode Transfer Error event.
 912:FWLIB/src/stm32f4xx_dma.c ****       (#) DMA_IT_DMEIFx : specifies the interrupt source for the Direct Mode Transfer Error event.
 913:FWLIB/src/stm32f4xx_dma.c ****       (#) DMA_IT_TEIFx  : specifies the interrupt source for the Transfer Error event.
 914:FWLIB/src/stm32f4xx_dma.c ****       (#) DMA_IT_HTIFx  : specifies the interrupt source for the Half-Transfer Complete event.
 915:FWLIB/src/stm32f4xx_dma.c ****       (#) DMA_IT_TCIFx  : specifies the interrupt source for the a Transfer Complete event. 
 916:FWLIB/src/stm32f4xx_dma.c ****     [..]
 917:FWLIB/src/stm32f4xx_dma.c ****     In this Mode it is advised to use the following functions:
 918:FWLIB/src/stm32f4xx_dma.c ****       (+) void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewS
 919:FWLIB/src/stm32f4xx_dma.c ****       (+) ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT);
 920:FWLIB/src/stm32f4xx_dma.c ****       (+) void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT);
 921:FWLIB/src/stm32f4xx_dma.c **** 
 922:FWLIB/src/stm32f4xx_dma.c **** @endverbatim
 923:FWLIB/src/stm32f4xx_dma.c ****   * @{
 924:FWLIB/src/stm32f4xx_dma.c ****   */
 925:FWLIB/src/stm32f4xx_dma.c **** 
 926:FWLIB/src/stm32f4xx_dma.c **** /**
 927:FWLIB/src/stm32f4xx_dma.c ****   * @brief  Returns the status of EN bit for the specified DMAy Streamx.
 928:FWLIB/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 929:FWLIB/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 930:FWLIB/src/stm32f4xx_dma.c ****   *   
 931:FWLIB/src/stm32f4xx_dma.c ****   * @note    After configuring the DMA Stream (DMA_Init() function) and enabling
 932:FWLIB/src/stm32f4xx_dma.c ****   *          the stream, it is recommended to check (or wait until) the DMA Stream
ARM GAS  /tmp/ccF492tC.s 			page 32


 933:FWLIB/src/stm32f4xx_dma.c ****   *          is effectively enabled. A Stream may remain disabled if a configuration
 934:FWLIB/src/stm32f4xx_dma.c ****   *          parameter is wrong.
 935:FWLIB/src/stm32f4xx_dma.c ****   *          After disabling a DMA Stream, it is also recommended to check (or wait 
 936:FWLIB/src/stm32f4xx_dma.c ****   *          until) the DMA Stream is effectively disabled. If a Stream is disabled
 937:FWLIB/src/stm32f4xx_dma.c ****   *          while a data transfer is ongoing, the current data will be transferred
 938:FWLIB/src/stm32f4xx_dma.c ****   *          and the Stream will be effectively disabled only after the transfer
 939:FWLIB/src/stm32f4xx_dma.c ****   *          of this single data is finished.  
 940:FWLIB/src/stm32f4xx_dma.c ****   *      
 941:FWLIB/src/stm32f4xx_dma.c ****   * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
 942:FWLIB/src/stm32f4xx_dma.c ****   */
 943:FWLIB/src/stm32f4xx_dma.c **** FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
 944:FWLIB/src/stm32f4xx_dma.c **** {
 822              		.loc 1 944 1 is_stmt 1 view -0
 823              		.cfi_startproc
 824              		@ args = 0, pretend = 0, frame = 0
 825              		@ frame_needed = 0, uses_anonymous_args = 0
 826              		@ link register save eliminated.
 945:FWLIB/src/stm32f4xx_dma.c ****   FunctionalState state = DISABLE;
 827              		.loc 1 945 3 view .LVU263
 946:FWLIB/src/stm32f4xx_dma.c **** 
 947:FWLIB/src/stm32f4xx_dma.c ****   /* Check the parameters */
 948:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 828              		.loc 1 948 3 view .LVU264
 949:FWLIB/src/stm32f4xx_dma.c **** 
 950:FWLIB/src/stm32f4xx_dma.c ****   if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 829              		.loc 1 950 3 view .LVU265
 830              		.loc 1 950 20 is_stmt 0 view .LVU266
 831 0000 0368     		ldr	r3, [r0]
 832              		.loc 1 950 6 view .LVU267
 833 0002 13F0010F 		tst	r3, #1
 834 0006 01D0     		beq	.L66
 951:FWLIB/src/stm32f4xx_dma.c ****   {
 952:FWLIB/src/stm32f4xx_dma.c ****     /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
 953:FWLIB/src/stm32f4xx_dma.c ****     state = ENABLE;
 835              		.loc 1 953 11 view .LVU268
 836 0008 0120     		movs	r0, #1
 837              	.LVL26:
 838              		.loc 1 953 11 view .LVU269
 839 000a 7047     		bx	lr
 840              	.LVL27:
 841              	.L66:
 954:FWLIB/src/stm32f4xx_dma.c ****   }
 955:FWLIB/src/stm32f4xx_dma.c ****   else
 956:FWLIB/src/stm32f4xx_dma.c ****   {
 957:FWLIB/src/stm32f4xx_dma.c ****     /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
 958:FWLIB/src/stm32f4xx_dma.c ****         all transfers are complete) */
 959:FWLIB/src/stm32f4xx_dma.c ****     state = DISABLE;
 842              		.loc 1 959 11 view .LVU270
 843 000c 0020     		movs	r0, #0
 844              	.LVL28:
 960:FWLIB/src/stm32f4xx_dma.c ****   }
 961:FWLIB/src/stm32f4xx_dma.c ****   return state;
 845              		.loc 1 961 3 is_stmt 1 view .LVU271
 962:FWLIB/src/stm32f4xx_dma.c **** }
 846              		.loc 1 962 1 is_stmt 0 view .LVU272
 847 000e 7047     		bx	lr
 848              		.cfi_endproc
ARM GAS  /tmp/ccF492tC.s 			page 33


 849              	.LFE135:
 851              		.section	.text.DMA_GetFIFOStatus,"ax",%progbits
 852              		.align	1
 853              		.global	DMA_GetFIFOStatus
 854              		.syntax unified
 855              		.thumb
 856              		.thumb_func
 857              		.fpu fpv4-sp-d16
 859              	DMA_GetFIFOStatus:
 860              	.LVL29:
 861              	.LFB136:
 963:FWLIB/src/stm32f4xx_dma.c **** 
 964:FWLIB/src/stm32f4xx_dma.c **** /**
 965:FWLIB/src/stm32f4xx_dma.c ****   * @brief  Returns the current DMAy Streamx FIFO filled level.
 966:FWLIB/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0 
 967:FWLIB/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 968:FWLIB/src/stm32f4xx_dma.c ****   * @retval The FIFO filling state.
 969:FWLIB/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_Less1QuarterFull: when FIFO is less than 1 quarter-full 
 970:FWLIB/src/stm32f4xx_dma.c ****   *                                               and not empty.
 971:FWLIB/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_1QuarterFull: if more than 1 quarter-full.
 972:FWLIB/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_HalfFull: if more than 1 half-full.
 973:FWLIB/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
 974:FWLIB/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_Empty: when FIFO is empty
 975:FWLIB/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_Full: when FIFO is full
 976:FWLIB/src/stm32f4xx_dma.c ****   */
 977:FWLIB/src/stm32f4xx_dma.c **** uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx)
 978:FWLIB/src/stm32f4xx_dma.c **** {
 862              		.loc 1 978 1 is_stmt 1 view -0
 863              		.cfi_startproc
 864              		@ args = 0, pretend = 0, frame = 0
 865              		@ frame_needed = 0, uses_anonymous_args = 0
 866              		@ link register save eliminated.
 979:FWLIB/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0;
 867              		.loc 1 979 3 view .LVU274
 980:FWLIB/src/stm32f4xx_dma.c ****  
 981:FWLIB/src/stm32f4xx_dma.c ****   /* Check the parameters */
 982:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 868              		.loc 1 982 3 view .LVU275
 983:FWLIB/src/stm32f4xx_dma.c ****   
 984:FWLIB/src/stm32f4xx_dma.c ****   /* Get the FIFO level bits */
 985:FWLIB/src/stm32f4xx_dma.c ****   tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 869              		.loc 1 985 3 view .LVU276
 870              		.loc 1 985 36 is_stmt 0 view .LVU277
 871 0000 4069     		ldr	r0, [r0, #20]
 872              	.LVL30:
 986:FWLIB/src/stm32f4xx_dma.c ****   
 987:FWLIB/src/stm32f4xx_dma.c ****   return tmpreg;
 873              		.loc 1 987 3 is_stmt 1 view .LVU278
 988:FWLIB/src/stm32f4xx_dma.c **** }
 874              		.loc 1 988 1 is_stmt 0 view .LVU279
 875 0002 00F03800 		and	r0, r0, #56
 876              	.LVL31:
 877              		.loc 1 988 1 view .LVU280
 878 0006 7047     		bx	lr
 879              		.cfi_endproc
 880              	.LFE136:
 882              		.section	.text.DMA_GetFlagStatus,"ax",%progbits
ARM GAS  /tmp/ccF492tC.s 			page 34


 883              		.align	1
 884              		.global	DMA_GetFlagStatus
 885              		.syntax unified
 886              		.thumb
 887              		.thumb_func
 888              		.fpu fpv4-sp-d16
 890              	DMA_GetFlagStatus:
 891              	.LVL32:
 892              	.LFB137:
 989:FWLIB/src/stm32f4xx_dma.c **** 
 990:FWLIB/src/stm32f4xx_dma.c **** /**
 991:FWLIB/src/stm32f4xx_dma.c ****   * @brief  Checks whether the specified DMAy Streamx flag is set or not.
 992:FWLIB/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 993:FWLIB/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 994:FWLIB/src/stm32f4xx_dma.c ****   * @param  DMA_FLAG: specifies the flag to check.
 995:FWLIB/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 996:FWLIB/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TCIFx:  Streamx transfer complete flag
 997:FWLIB/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_HTIFx:  Streamx half transfer complete flag
 998:FWLIB/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TEIFx:  Streamx transfer error flag
 999:FWLIB/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_DMEIFx: Streamx direct mode error flag
1000:FWLIB/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
1001:FWLIB/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
1002:FWLIB/src/stm32f4xx_dma.c ****   * @retval The new state of DMA_FLAG (SET or RESET).
1003:FWLIB/src/stm32f4xx_dma.c ****   */
1004:FWLIB/src/stm32f4xx_dma.c **** FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
1005:FWLIB/src/stm32f4xx_dma.c **** {
 893              		.loc 1 1005 1 is_stmt 1 view -0
 894              		.cfi_startproc
 895              		@ args = 0, pretend = 0, frame = 0
 896              		@ frame_needed = 0, uses_anonymous_args = 0
 897              		@ link register save eliminated.
1006:FWLIB/src/stm32f4xx_dma.c ****   FlagStatus bitstatus = RESET;
 898              		.loc 1 1006 3 view .LVU282
1007:FWLIB/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
 899              		.loc 1 1007 3 view .LVU283
1008:FWLIB/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0;
 900              		.loc 1 1008 3 view .LVU284
1009:FWLIB/src/stm32f4xx_dma.c **** 
1010:FWLIB/src/stm32f4xx_dma.c ****   /* Check the parameters */
1011:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 901              		.loc 1 1011 3 view .LVU285
1012:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_GET_FLAG(DMA_FLAG));
 902              		.loc 1 1012 3 view .LVU286
1013:FWLIB/src/stm32f4xx_dma.c **** 
1014:FWLIB/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1015:FWLIB/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 903              		.loc 1 1015 3 view .LVU287
 904              		.loc 1 1015 6 is_stmt 0 view .LVU288
 905 0000 0B4B     		ldr	r3, .L75
 906 0002 9842     		cmp	r0, r3
 907 0004 0DD8     		bhi	.L73
1016:FWLIB/src/stm32f4xx_dma.c ****   {
1017:FWLIB/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1018:FWLIB/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 908              		.loc 1 1018 10 view .LVU289
 909 0006 A3F20F43 		subw	r3, r3, #1039
 910              	.L69:
ARM GAS  /tmp/ccF492tC.s 			page 35


 911              	.LVL33:
1019:FWLIB/src/stm32f4xx_dma.c ****   } 
1020:FWLIB/src/stm32f4xx_dma.c ****   else 
1021:FWLIB/src/stm32f4xx_dma.c ****   {
1022:FWLIB/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1023:FWLIB/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
1024:FWLIB/src/stm32f4xx_dma.c ****   }
1025:FWLIB/src/stm32f4xx_dma.c **** 
1026:FWLIB/src/stm32f4xx_dma.c ****   /* Check if the flag is in HISR or LISR */
1027:FWLIB/src/stm32f4xx_dma.c ****   if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 912              		.loc 1 1027 3 is_stmt 1 view .LVU290
 913              		.loc 1 1027 6 is_stmt 0 view .LVU291
 914 000a 11F0005F 		tst	r1, #536870912
 915 000e 0AD0     		beq	.L70
1028:FWLIB/src/stm32f4xx_dma.c ****   {
1029:FWLIB/src/stm32f4xx_dma.c ****     /* Get DMAy HISR register value */
1030:FWLIB/src/stm32f4xx_dma.c ****     tmpreg = DMAy->HISR;
 916              		.loc 1 1030 5 is_stmt 1 view .LVU292
 917              		.loc 1 1030 12 is_stmt 0 view .LVU293
 918 0010 5B68     		ldr	r3, [r3, #4]
 919              	.LVL34:
 920              	.L71:
1031:FWLIB/src/stm32f4xx_dma.c ****   }
1032:FWLIB/src/stm32f4xx_dma.c ****   else
1033:FWLIB/src/stm32f4xx_dma.c ****   {
1034:FWLIB/src/stm32f4xx_dma.c ****     /* Get DMAy LISR register value */
1035:FWLIB/src/stm32f4xx_dma.c ****     tmpreg = DMAy->LISR;
1036:FWLIB/src/stm32f4xx_dma.c ****   }   
1037:FWLIB/src/stm32f4xx_dma.c ****  
1038:FWLIB/src/stm32f4xx_dma.c ****   /* Mask the reserved bits */
1039:FWLIB/src/stm32f4xx_dma.c ****   tmpreg &= (uint32_t)RESERVED_MASK;
 921              		.loc 1 1039 3 is_stmt 1 view .LVU294
 922              		.loc 1 1039 10 is_stmt 0 view .LVU295
 923 0012 23F0F023 		bic	r3, r3, #-268374016
 924              	.LVL35:
 925              		.loc 1 1039 10 view .LVU296
 926 0016 23F08213 		bic	r3, r3, #8519810
 927              	.LVL36:
1040:FWLIB/src/stm32f4xx_dma.c **** 
1041:FWLIB/src/stm32f4xx_dma.c ****   /* Check the status of the specified DMA flag */
1042:FWLIB/src/stm32f4xx_dma.c ****   if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 928              		.loc 1 1042 3 is_stmt 1 view .LVU297
 929              		.loc 1 1042 6 is_stmt 0 view .LVU298
 930 001a 1942     		tst	r1, r3
 931 001c 05D0     		beq	.L74
1043:FWLIB/src/stm32f4xx_dma.c ****   {
1044:FWLIB/src/stm32f4xx_dma.c ****     /* DMA_FLAG is set */
1045:FWLIB/src/stm32f4xx_dma.c ****     bitstatus = SET;
 932              		.loc 1 1045 15 view .LVU299
 933 001e 0120     		movs	r0, #1
 934              	.LVL37:
 935              		.loc 1 1045 15 view .LVU300
 936 0020 7047     		bx	lr
 937              	.LVL38:
 938              	.L73:
1023:FWLIB/src/stm32f4xx_dma.c ****   }
 939              		.loc 1 1023 10 view .LVU301
ARM GAS  /tmp/ccF492tC.s 			page 36


 940 0022 044B     		ldr	r3, .L75+4
 941 0024 F1E7     		b	.L69
 942              	.LVL39:
 943              	.L70:
1035:FWLIB/src/stm32f4xx_dma.c ****   }   
 944              		.loc 1 1035 5 is_stmt 1 view .LVU302
1035:FWLIB/src/stm32f4xx_dma.c ****   }   
 945              		.loc 1 1035 12 is_stmt 0 view .LVU303
 946 0026 1B68     		ldr	r3, [r3]
 947              	.LVL40:
1035:FWLIB/src/stm32f4xx_dma.c ****   }   
 948              		.loc 1 1035 12 view .LVU304
 949 0028 F3E7     		b	.L71
 950              	.L74:
1046:FWLIB/src/stm32f4xx_dma.c ****   }
1047:FWLIB/src/stm32f4xx_dma.c ****   else
1048:FWLIB/src/stm32f4xx_dma.c ****   {
1049:FWLIB/src/stm32f4xx_dma.c ****     /* DMA_FLAG is reset */
1050:FWLIB/src/stm32f4xx_dma.c ****     bitstatus = RESET;
 951              		.loc 1 1050 15 view .LVU305
 952 002a 0020     		movs	r0, #0
 953              	.LVL41:
1051:FWLIB/src/stm32f4xx_dma.c ****   }
1052:FWLIB/src/stm32f4xx_dma.c **** 
1053:FWLIB/src/stm32f4xx_dma.c ****   /* Return the DMA_FLAG status */
1054:FWLIB/src/stm32f4xx_dma.c ****   return  bitstatus;
 954              		.loc 1 1054 3 is_stmt 1 view .LVU306
1055:FWLIB/src/stm32f4xx_dma.c **** }
 955              		.loc 1 1055 1 is_stmt 0 view .LVU307
 956 002c 7047     		bx	lr
 957              	.L76:
 958 002e 00BF     		.align	2
 959              	.L75:
 960 0030 0F640240 		.word	1073898511
 961 0034 00640240 		.word	1073898496
 962              		.cfi_endproc
 963              	.LFE137:
 965              		.section	.text.DMA_ClearFlag,"ax",%progbits
 966              		.align	1
 967              		.global	DMA_ClearFlag
 968              		.syntax unified
 969              		.thumb
 970              		.thumb_func
 971              		.fpu fpv4-sp-d16
 973              	DMA_ClearFlag:
 974              	.LVL42:
 975              	.LFB138:
1056:FWLIB/src/stm32f4xx_dma.c **** 
1057:FWLIB/src/stm32f4xx_dma.c **** /**
1058:FWLIB/src/stm32f4xx_dma.c ****   * @brief  Clears the DMAy Streamx's pending flags.
1059:FWLIB/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1060:FWLIB/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1061:FWLIB/src/stm32f4xx_dma.c ****   * @param  DMA_FLAG: specifies the flag to clear.
1062:FWLIB/src/stm32f4xx_dma.c ****   *          This parameter can be any combination of the following values:
1063:FWLIB/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TCIFx:  Streamx transfer complete flag
1064:FWLIB/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_HTIFx:  Streamx half transfer complete flag
1065:FWLIB/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TEIFx:  Streamx transfer error flag
ARM GAS  /tmp/ccF492tC.s 			page 37


1066:FWLIB/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_DMEIFx: Streamx direct mode error flag
1067:FWLIB/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
1068:FWLIB/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.   
1069:FWLIB/src/stm32f4xx_dma.c ****   * @retval None
1070:FWLIB/src/stm32f4xx_dma.c ****   */
1071:FWLIB/src/stm32f4xx_dma.c **** void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
1072:FWLIB/src/stm32f4xx_dma.c **** {
 976              		.loc 1 1072 1 is_stmt 1 view -0
 977              		.cfi_startproc
 978              		@ args = 0, pretend = 0, frame = 0
 979              		@ frame_needed = 0, uses_anonymous_args = 0
 980              		@ link register save eliminated.
1073:FWLIB/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
 981              		.loc 1 1073 3 view .LVU309
1074:FWLIB/src/stm32f4xx_dma.c **** 
1075:FWLIB/src/stm32f4xx_dma.c ****   /* Check the parameters */
1076:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 982              		.loc 1 1076 3 view .LVU310
1077:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));
 983              		.loc 1 1077 3 view .LVU311
1078:FWLIB/src/stm32f4xx_dma.c **** 
1079:FWLIB/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1080:FWLIB/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 984              		.loc 1 1080 3 view .LVU312
 985              		.loc 1 1080 6 is_stmt 0 view .LVU313
 986 0000 0A4B     		ldr	r3, .L82
 987 0002 9842     		cmp	r0, r3
 988 0004 0AD8     		bhi	.L81
1081:FWLIB/src/stm32f4xx_dma.c ****   {
1082:FWLIB/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1083:FWLIB/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 989              		.loc 1 1083 10 view .LVU314
 990 0006 A3F20F43 		subw	r3, r3, #1039
 991              	.L78:
 992              	.LVL43:
1084:FWLIB/src/stm32f4xx_dma.c ****   } 
1085:FWLIB/src/stm32f4xx_dma.c ****   else 
1086:FWLIB/src/stm32f4xx_dma.c ****   {
1087:FWLIB/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1088:FWLIB/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
1089:FWLIB/src/stm32f4xx_dma.c ****   }
1090:FWLIB/src/stm32f4xx_dma.c **** 
1091:FWLIB/src/stm32f4xx_dma.c ****   /* Check if LIFCR or HIFCR register is targeted */
1092:FWLIB/src/stm32f4xx_dma.c ****   if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 993              		.loc 1 1092 3 is_stmt 1 view .LVU315
 994              		.loc 1 1092 6 is_stmt 0 view .LVU316
 995 000a 11F0005F 		tst	r1, #536870912
 996 000e 07D0     		beq	.L79
1093:FWLIB/src/stm32f4xx_dma.c ****   {
1094:FWLIB/src/stm32f4xx_dma.c ****     /* Set DMAy HIFCR register clear flag bits */
1095:FWLIB/src/stm32f4xx_dma.c ****     DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 997              		.loc 1 1095 5 is_stmt 1 view .LVU317
 998              		.loc 1 1095 19 is_stmt 0 view .LVU318
 999 0010 21F0F021 		bic	r1, r1, #-268374016
 1000              	.LVL44:
 1001              		.loc 1 1095 19 view .LVU319
 1002 0014 21F08211 		bic	r1, r1, #8519810
ARM GAS  /tmp/ccF492tC.s 			page 38


 1003              		.loc 1 1095 17 view .LVU320
 1004 0018 D960     		str	r1, [r3, #12]
 1005 001a 7047     		bx	lr
 1006              	.LVL45:
 1007              	.L81:
1088:FWLIB/src/stm32f4xx_dma.c ****   }
 1008              		.loc 1 1088 10 view .LVU321
 1009 001c 044B     		ldr	r3, .L82+4
 1010 001e F4E7     		b	.L78
 1011              	.LVL46:
 1012              	.L79:
1096:FWLIB/src/stm32f4xx_dma.c ****   }
1097:FWLIB/src/stm32f4xx_dma.c ****   else 
1098:FWLIB/src/stm32f4xx_dma.c ****   {
1099:FWLIB/src/stm32f4xx_dma.c ****     /* Set DMAy LIFCR register clear flag bits */
1100:FWLIB/src/stm32f4xx_dma.c ****     DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 1013              		.loc 1 1100 5 is_stmt 1 view .LVU322
 1014              		.loc 1 1100 19 is_stmt 0 view .LVU323
 1015 0020 21F0F021 		bic	r1, r1, #-268374016
 1016              	.LVL47:
 1017              		.loc 1 1100 19 view .LVU324
 1018 0024 21F08211 		bic	r1, r1, #8519810
 1019              		.loc 1 1100 17 view .LVU325
 1020 0028 9960     		str	r1, [r3, #8]
1101:FWLIB/src/stm32f4xx_dma.c ****   }    
1102:FWLIB/src/stm32f4xx_dma.c **** }
 1021              		.loc 1 1102 1 view .LVU326
 1022 002a 7047     		bx	lr
 1023              	.L83:
 1024              		.align	2
 1025              	.L82:
 1026 002c 0F640240 		.word	1073898511
 1027 0030 00640240 		.word	1073898496
 1028              		.cfi_endproc
 1029              	.LFE138:
 1031              		.section	.text.DMA_ITConfig,"ax",%progbits
 1032              		.align	1
 1033              		.global	DMA_ITConfig
 1034              		.syntax unified
 1035              		.thumb
 1036              		.thumb_func
 1037              		.fpu fpv4-sp-d16
 1039              	DMA_ITConfig:
 1040              	.LVL48:
 1041              	.LFB139:
1103:FWLIB/src/stm32f4xx_dma.c **** 
1104:FWLIB/src/stm32f4xx_dma.c **** /**
1105:FWLIB/src/stm32f4xx_dma.c ****   * @brief  Enables or disables the specified DMAy Streamx interrupts.
1106:FWLIB/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1107:FWLIB/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1108:FWLIB/src/stm32f4xx_dma.c ****   * @param DMA_IT: specifies the DMA interrupt sources to be enabled or disabled. 
1109:FWLIB/src/stm32f4xx_dma.c ****   *          This parameter can be any combination of the following values:
1110:FWLIB/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TC:  Transfer complete interrupt mask
1111:FWLIB/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_HT:  Half transfer complete interrupt mask
1112:FWLIB/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TE:  Transfer error interrupt mask
1113:FWLIB/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_FE:  FIFO error interrupt mask
1114:FWLIB/src/stm32f4xx_dma.c ****   * @param  NewState: new state of the specified DMA interrupts.
ARM GAS  /tmp/ccF492tC.s 			page 39


1115:FWLIB/src/stm32f4xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
1116:FWLIB/src/stm32f4xx_dma.c ****   * @retval None
1117:FWLIB/src/stm32f4xx_dma.c ****   */
1118:FWLIB/src/stm32f4xx_dma.c **** void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
1119:FWLIB/src/stm32f4xx_dma.c **** {
 1042              		.loc 1 1119 1 is_stmt 1 view -0
 1043              		.cfi_startproc
 1044              		@ args = 0, pretend = 0, frame = 0
 1045              		@ frame_needed = 0, uses_anonymous_args = 0
 1046              		@ link register save eliminated.
1120:FWLIB/src/stm32f4xx_dma.c ****   /* Check the parameters */
1121:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 1047              		.loc 1 1121 3 view .LVU328
1122:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CONFIG_IT(DMA_IT));
 1048              		.loc 1 1122 3 view .LVU329
1123:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1049              		.loc 1 1123 3 view .LVU330
1124:FWLIB/src/stm32f4xx_dma.c **** 
1125:FWLIB/src/stm32f4xx_dma.c ****   /* Check if the DMA_IT parameter contains a FIFO interrupt */
1126:FWLIB/src/stm32f4xx_dma.c ****   if ((DMA_IT & DMA_IT_FE) != 0)
 1050              		.loc 1 1126 3 view .LVU331
 1051              		.loc 1 1126 6 is_stmt 0 view .LVU332
 1052 0000 11F0800F 		tst	r1, #128
 1053 0004 04D0     		beq	.L85
1127:FWLIB/src/stm32f4xx_dma.c ****   {
1128:FWLIB/src/stm32f4xx_dma.c ****     if (NewState != DISABLE)
 1054              		.loc 1 1128 5 is_stmt 1 view .LVU333
 1055              		.loc 1 1128 8 is_stmt 0 view .LVU334
 1056 0006 62B1     		cbz	r2, .L86
1129:FWLIB/src/stm32f4xx_dma.c ****     {
1130:FWLIB/src/stm32f4xx_dma.c ****       /* Enable the selected DMA FIFO interrupts */
1131:FWLIB/src/stm32f4xx_dma.c ****       DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 1057              		.loc 1 1131 7 is_stmt 1 view .LVU335
 1058              		.loc 1 1131 25 is_stmt 0 view .LVU336
 1059 0008 4369     		ldr	r3, [r0, #20]
 1060 000a 43F08003 		orr	r3, r3, #128
 1061 000e 4361     		str	r3, [r0, #20]
 1062              	.L85:
1132:FWLIB/src/stm32f4xx_dma.c ****     }    
1133:FWLIB/src/stm32f4xx_dma.c ****     else 
1134:FWLIB/src/stm32f4xx_dma.c ****     {
1135:FWLIB/src/stm32f4xx_dma.c ****       /* Disable the selected DMA FIFO interrupts */
1136:FWLIB/src/stm32f4xx_dma.c ****       DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
1137:FWLIB/src/stm32f4xx_dma.c ****     }
1138:FWLIB/src/stm32f4xx_dma.c ****   }
1139:FWLIB/src/stm32f4xx_dma.c **** 
1140:FWLIB/src/stm32f4xx_dma.c ****   /* Check if the DMA_IT parameter contains a Transfer interrupt */
1141:FWLIB/src/stm32f4xx_dma.c ****   if (DMA_IT != DMA_IT_FE)
 1063              		.loc 1 1141 3 is_stmt 1 view .LVU337
 1064              		.loc 1 1141 6 is_stmt 0 view .LVU338
 1065 0010 8029     		cmp	r1, #128
 1066 0012 11D0     		beq	.L84
1142:FWLIB/src/stm32f4xx_dma.c ****   {
1143:FWLIB/src/stm32f4xx_dma.c ****     if (NewState != DISABLE)
 1067              		.loc 1 1143 5 is_stmt 1 view .LVU339
 1068              		.loc 1 1143 8 is_stmt 0 view .LVU340
 1069 0014 52B1     		cbz	r2, .L88
ARM GAS  /tmp/ccF492tC.s 			page 40


1144:FWLIB/src/stm32f4xx_dma.c ****     {
1145:FWLIB/src/stm32f4xx_dma.c ****       /* Enable the selected DMA transfer interrupts */
1146:FWLIB/src/stm32f4xx_dma.c ****       DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 1070              		.loc 1 1146 7 is_stmt 1 view .LVU341
 1071              		.loc 1 1146 24 is_stmt 0 view .LVU342
 1072 0016 0368     		ldr	r3, [r0]
 1073              		.loc 1 1146 27 view .LVU343
 1074 0018 01F01E01 		and	r1, r1, #30
 1075              	.LVL49:
 1076              		.loc 1 1146 24 view .LVU344
 1077 001c 1943     		orrs	r1, r1, r3
 1078 001e 0160     		str	r1, [r0]
 1079 0020 7047     		bx	lr
 1080              	.LVL50:
 1081              	.L86:
1136:FWLIB/src/stm32f4xx_dma.c ****     }
 1082              		.loc 1 1136 7 is_stmt 1 view .LVU345
1136:FWLIB/src/stm32f4xx_dma.c ****     }
 1083              		.loc 1 1136 25 is_stmt 0 view .LVU346
 1084 0022 4369     		ldr	r3, [r0, #20]
 1085 0024 23F08003 		bic	r3, r3, #128
 1086 0028 4361     		str	r3, [r0, #20]
 1087 002a F1E7     		b	.L85
 1088              	.L88:
1147:FWLIB/src/stm32f4xx_dma.c ****     }
1148:FWLIB/src/stm32f4xx_dma.c ****     else
1149:FWLIB/src/stm32f4xx_dma.c ****     {
1150:FWLIB/src/stm32f4xx_dma.c ****       /* Disable the selected DMA transfer interrupts */
1151:FWLIB/src/stm32f4xx_dma.c ****       DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 1089              		.loc 1 1151 7 is_stmt 1 view .LVU347
 1090              		.loc 1 1151 24 is_stmt 0 view .LVU348
 1091 002c 0368     		ldr	r3, [r0]
 1092              		.loc 1 1151 28 view .LVU349
 1093 002e 01F01E01 		and	r1, r1, #30
 1094              	.LVL51:
 1095              		.loc 1 1151 24 view .LVU350
 1096 0032 23EA0101 		bic	r1, r3, r1
 1097 0036 0160     		str	r1, [r0]
 1098              	.L84:
1152:FWLIB/src/stm32f4xx_dma.c ****     }    
1153:FWLIB/src/stm32f4xx_dma.c ****   }
1154:FWLIB/src/stm32f4xx_dma.c **** }
 1099              		.loc 1 1154 1 view .LVU351
 1100 0038 7047     		bx	lr
 1101              		.cfi_endproc
 1102              	.LFE139:
 1104              		.section	.text.DMA_GetITStatus,"ax",%progbits
 1105              		.align	1
 1106              		.global	DMA_GetITStatus
 1107              		.syntax unified
 1108              		.thumb
 1109              		.thumb_func
 1110              		.fpu fpv4-sp-d16
 1112              	DMA_GetITStatus:
 1113              	.LVL52:
 1114              	.LFB140:
1155:FWLIB/src/stm32f4xx_dma.c **** 
ARM GAS  /tmp/ccF492tC.s 			page 41


1156:FWLIB/src/stm32f4xx_dma.c **** /**
1157:FWLIB/src/stm32f4xx_dma.c ****   * @brief  Checks whether the specified DMAy Streamx interrupt has occurred or not.
1158:FWLIB/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1159:FWLIB/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1160:FWLIB/src/stm32f4xx_dma.c ****   * @param  DMA_IT: specifies the DMA interrupt source to check.
1161:FWLIB/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
1162:FWLIB/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TCIFx:  Streamx transfer complete interrupt
1163:FWLIB/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_HTIFx:  Streamx half transfer complete interrupt
1164:FWLIB/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TEIFx:  Streamx transfer error interrupt
1165:FWLIB/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_DMEIFx: Streamx direct mode error interrupt
1166:FWLIB/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
1167:FWLIB/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
1168:FWLIB/src/stm32f4xx_dma.c ****   * @retval The new state of DMA_IT (SET or RESET).
1169:FWLIB/src/stm32f4xx_dma.c ****   */
1170:FWLIB/src/stm32f4xx_dma.c **** ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
1171:FWLIB/src/stm32f4xx_dma.c **** {
 1115              		.loc 1 1171 1 is_stmt 1 view -0
 1116              		.cfi_startproc
 1117              		@ args = 0, pretend = 0, frame = 0
 1118              		@ frame_needed = 0, uses_anonymous_args = 0
 1119              		@ link register save eliminated.
 1120              		.loc 1 1171 1 is_stmt 0 view .LVU353
 1121 0000 10B4     		push	{r4}
 1122              	.LCFI2:
 1123              		.cfi_def_cfa_offset 4
 1124              		.cfi_offset 4, -4
1172:FWLIB/src/stm32f4xx_dma.c ****   ITStatus bitstatus = RESET;
 1125              		.loc 1 1172 3 is_stmt 1 view .LVU354
 1126              	.LVL53:
1173:FWLIB/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
 1127              		.loc 1 1173 3 view .LVU355
1174:FWLIB/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0, enablestatus = 0;
 1128              		.loc 1 1174 3 view .LVU356
1175:FWLIB/src/stm32f4xx_dma.c **** 
1176:FWLIB/src/stm32f4xx_dma.c ****   /* Check the parameters */
1177:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 1129              		.loc 1 1177 3 view .LVU357
1178:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_GET_IT(DMA_IT));
 1130              		.loc 1 1178 3 view .LVU358
1179:FWLIB/src/stm32f4xx_dma.c ****  
1180:FWLIB/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1181:FWLIB/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 1131              		.loc 1 1181 3 view .LVU359
 1132              		.loc 1 1181 6 is_stmt 0 view .LVU360
 1133 0002 144B     		ldr	r3, .L100
 1134 0004 9842     		cmp	r0, r3
 1135 0006 17D8     		bhi	.L96
1182:FWLIB/src/stm32f4xx_dma.c ****   {
1183:FWLIB/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1184:FWLIB/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 1136              		.loc 1 1184 10 view .LVU361
 1137 0008 134C     		ldr	r4, .L100+4
 1138              	.L90:
 1139              	.LVL54:
1185:FWLIB/src/stm32f4xx_dma.c ****   } 
1186:FWLIB/src/stm32f4xx_dma.c ****   else 
1187:FWLIB/src/stm32f4xx_dma.c ****   {
ARM GAS  /tmp/ccF492tC.s 			page 42


1188:FWLIB/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1189:FWLIB/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
1190:FWLIB/src/stm32f4xx_dma.c ****   }
1191:FWLIB/src/stm32f4xx_dma.c **** 
1192:FWLIB/src/stm32f4xx_dma.c ****   /* Check if the interrupt enable bit is in the CR or FCR register */
1193:FWLIB/src/stm32f4xx_dma.c ****   if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 1140              		.loc 1 1193 3 is_stmt 1 view .LVU362
 1141              		.loc 1 1193 15 is_stmt 0 view .LVU363
 1142 000a 21F0F023 		bic	r3, r1, #-268374016
 1143 000e 23F0C313 		bic	r3, r3, #12779715
 1144              		.loc 1 1193 6 view .LVU364
 1145 0012 9BB1     		cbz	r3, .L91
1194:FWLIB/src/stm32f4xx_dma.c ****   {
1195:FWLIB/src/stm32f4xx_dma.c ****     /* Get the interrupt enable position mask in CR register */
1196:FWLIB/src/stm32f4xx_dma.c ****     tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 1146              		.loc 1 1196 5 is_stmt 1 view .LVU365
 1147              		.loc 1 1196 33 is_stmt 0 view .LVU366
 1148 0014 CA0A     		lsrs	r2, r1, #11
 1149              		.loc 1 1196 12 view .LVU367
 1150 0016 02F01E03 		and	r3, r2, #30
 1151              	.LVL55:
1197:FWLIB/src/stm32f4xx_dma.c ****     
1198:FWLIB/src/stm32f4xx_dma.c ****     /* Check the enable bit in CR register */
1199:FWLIB/src/stm32f4xx_dma.c ****     enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 1152              		.loc 1 1199 5 is_stmt 1 view .LVU368
 1153              		.loc 1 1199 43 is_stmt 0 view .LVU369
 1154 001a 0268     		ldr	r2, [r0]
 1155              		.loc 1 1199 18 view .LVU370
 1156 001c 1A40     		ands	r2, r2, r3
 1157              	.LVL56:
 1158              	.L92:
1200:FWLIB/src/stm32f4xx_dma.c ****   }
1201:FWLIB/src/stm32f4xx_dma.c ****   else 
1202:FWLIB/src/stm32f4xx_dma.c ****   {
1203:FWLIB/src/stm32f4xx_dma.c ****     /* Check the enable bit in FCR register */
1204:FWLIB/src/stm32f4xx_dma.c ****     enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
1205:FWLIB/src/stm32f4xx_dma.c ****   }
1206:FWLIB/src/stm32f4xx_dma.c ****  
1207:FWLIB/src/stm32f4xx_dma.c ****   /* Check if the interrupt pending flag is in LISR or HISR */
1208:FWLIB/src/stm32f4xx_dma.c ****   if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 1159              		.loc 1 1208 3 is_stmt 1 view .LVU371
 1160              		.loc 1 1208 6 is_stmt 0 view .LVU372
 1161 001e 11F0005F 		tst	r1, #536870912
 1162 0022 0FD0     		beq	.L93
1209:FWLIB/src/stm32f4xx_dma.c ****   {
1210:FWLIB/src/stm32f4xx_dma.c ****     /* Get DMAy HISR register value */
1211:FWLIB/src/stm32f4xx_dma.c ****     tmpreg = DMAy->HISR ;
 1163              		.loc 1 1211 5 is_stmt 1 view .LVU373
 1164              		.loc 1 1211 12 is_stmt 0 view .LVU374
 1165 0024 6368     		ldr	r3, [r4, #4]
 1166              	.LVL57:
 1167              	.L94:
1212:FWLIB/src/stm32f4xx_dma.c ****   }
1213:FWLIB/src/stm32f4xx_dma.c ****   else
1214:FWLIB/src/stm32f4xx_dma.c ****   {
1215:FWLIB/src/stm32f4xx_dma.c ****     /* Get DMAy LISR register value */
1216:FWLIB/src/stm32f4xx_dma.c ****     tmpreg = DMAy->LISR ;
ARM GAS  /tmp/ccF492tC.s 			page 43


1217:FWLIB/src/stm32f4xx_dma.c ****   } 
1218:FWLIB/src/stm32f4xx_dma.c **** 
1219:FWLIB/src/stm32f4xx_dma.c ****   /* mask all reserved bits */
1220:FWLIB/src/stm32f4xx_dma.c ****   tmpreg &= (uint32_t)RESERVED_MASK;
 1168              		.loc 1 1220 3 is_stmt 1 view .LVU375
 1169              		.loc 1 1220 10 is_stmt 0 view .LVU376
 1170 0026 23F0F023 		bic	r3, r3, #-268374016
 1171              	.LVL58:
 1172              		.loc 1 1220 10 view .LVU377
 1173 002a 23F08213 		bic	r3, r3, #8519810
 1174              	.LVL59:
1221:FWLIB/src/stm32f4xx_dma.c **** 
1222:FWLIB/src/stm32f4xx_dma.c ****   /* Check the status of the specified DMA interrupt */
1223:FWLIB/src/stm32f4xx_dma.c ****   if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 1175              		.loc 1 1223 3 is_stmt 1 view .LVU378
 1176              		.loc 1 1223 6 is_stmt 0 view .LVU379
 1177 002e 1942     		tst	r1, r3
 1178 0030 0AD0     		beq	.L97
 1179              		.loc 1 1223 46 discriminator 1 view .LVU380
 1180 0032 6AB9     		cbnz	r2, .L98
1224:FWLIB/src/stm32f4xx_dma.c ****   {
1225:FWLIB/src/stm32f4xx_dma.c ****     /* DMA_IT is set */
1226:FWLIB/src/stm32f4xx_dma.c ****     bitstatus = SET;
1227:FWLIB/src/stm32f4xx_dma.c ****   }
1228:FWLIB/src/stm32f4xx_dma.c ****   else
1229:FWLIB/src/stm32f4xx_dma.c ****   {
1230:FWLIB/src/stm32f4xx_dma.c ****     /* DMA_IT is reset */
1231:FWLIB/src/stm32f4xx_dma.c ****     bitstatus = RESET;
 1181              		.loc 1 1231 15 view .LVU381
 1182 0034 0020     		movs	r0, #0
 1183              	.LVL60:
 1184              		.loc 1 1231 15 view .LVU382
 1185 0036 08E0     		b	.L95
 1186              	.LVL61:
 1187              	.L96:
1189:FWLIB/src/stm32f4xx_dma.c ****   }
 1188              		.loc 1 1189 10 view .LVU383
 1189 0038 084C     		ldr	r4, .L100+8
 1190 003a E6E7     		b	.L90
 1191              	.LVL62:
 1192              	.L91:
1204:FWLIB/src/stm32f4xx_dma.c ****   }
 1193              		.loc 1 1204 5 is_stmt 1 view .LVU384
1204:FWLIB/src/stm32f4xx_dma.c ****   }
 1194              		.loc 1 1204 43 is_stmt 0 view .LVU385
 1195 003c 4269     		ldr	r2, [r0, #20]
1204:FWLIB/src/stm32f4xx_dma.c ****   }
 1196              		.loc 1 1204 18 view .LVU386
 1197 003e 02F08002 		and	r2, r2, #128
 1198              	.LVL63:
1204:FWLIB/src/stm32f4xx_dma.c ****   }
 1199              		.loc 1 1204 18 view .LVU387
 1200 0042 ECE7     		b	.L92
 1201              	.LVL64:
 1202              	.L93:
1216:FWLIB/src/stm32f4xx_dma.c ****   } 
 1203              		.loc 1 1216 5 is_stmt 1 view .LVU388
ARM GAS  /tmp/ccF492tC.s 			page 44


1216:FWLIB/src/stm32f4xx_dma.c ****   } 
 1204              		.loc 1 1216 12 is_stmt 0 view .LVU389
 1205 0044 2368     		ldr	r3, [r4]
 1206              	.LVL65:
1216:FWLIB/src/stm32f4xx_dma.c ****   } 
 1207              		.loc 1 1216 12 view .LVU390
 1208 0046 EEE7     		b	.L94
 1209              	.L97:
 1210              		.loc 1 1231 15 view .LVU391
 1211 0048 0020     		movs	r0, #0
 1212              	.LVL66:
 1213              	.L95:
1232:FWLIB/src/stm32f4xx_dma.c ****   }
1233:FWLIB/src/stm32f4xx_dma.c **** 
1234:FWLIB/src/stm32f4xx_dma.c ****   /* Return the DMA_IT status */
1235:FWLIB/src/stm32f4xx_dma.c ****   return  bitstatus;
 1214              		.loc 1 1235 3 is_stmt 1 view .LVU392
1236:FWLIB/src/stm32f4xx_dma.c **** }
 1215              		.loc 1 1236 1 is_stmt 0 view .LVU393
 1216 004a 5DF8044B 		ldr	r4, [sp], #4
 1217              	.LCFI3:
 1218              		.cfi_remember_state
 1219              		.cfi_restore 4
 1220              		.cfi_def_cfa_offset 0
 1221              	.LVL67:
 1222              		.loc 1 1236 1 view .LVU394
 1223 004e 7047     		bx	lr
 1224              	.LVL68:
 1225              	.L98:
 1226              	.LCFI4:
 1227              		.cfi_restore_state
1226:FWLIB/src/stm32f4xx_dma.c ****   }
 1228              		.loc 1 1226 15 view .LVU395
 1229 0050 0120     		movs	r0, #1
 1230              	.LVL69:
1226:FWLIB/src/stm32f4xx_dma.c ****   }
 1231              		.loc 1 1226 15 view .LVU396
 1232 0052 FAE7     		b	.L95
 1233              	.L101:
 1234              		.align	2
 1235              	.L100:
 1236 0054 0F640240 		.word	1073898511
 1237 0058 00600240 		.word	1073897472
 1238 005c 00640240 		.word	1073898496
 1239              		.cfi_endproc
 1240              	.LFE140:
 1242              		.section	.text.DMA_ClearITPendingBit,"ax",%progbits
 1243              		.align	1
 1244              		.global	DMA_ClearITPendingBit
 1245              		.syntax unified
 1246              		.thumb
 1247              		.thumb_func
 1248              		.fpu fpv4-sp-d16
 1250              	DMA_ClearITPendingBit:
 1251              	.LVL70:
 1252              	.LFB141:
1237:FWLIB/src/stm32f4xx_dma.c **** 
ARM GAS  /tmp/ccF492tC.s 			page 45


1238:FWLIB/src/stm32f4xx_dma.c **** /**
1239:FWLIB/src/stm32f4xx_dma.c ****   * @brief  Clears the DMAy Streamx's interrupt pending bits.
1240:FWLIB/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1241:FWLIB/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1242:FWLIB/src/stm32f4xx_dma.c ****   * @param  DMA_IT: specifies the DMA interrupt pending bit to clear.
1243:FWLIB/src/stm32f4xx_dma.c ****   *          This parameter can be any combination of the following values:
1244:FWLIB/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TCIFx:  Streamx transfer complete interrupt
1245:FWLIB/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_HTIFx:  Streamx half transfer complete interrupt
1246:FWLIB/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TEIFx:  Streamx transfer error interrupt
1247:FWLIB/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_DMEIFx: Streamx direct mode error interrupt
1248:FWLIB/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
1249:FWLIB/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
1250:FWLIB/src/stm32f4xx_dma.c ****   * @retval None
1251:FWLIB/src/stm32f4xx_dma.c ****   */
1252:FWLIB/src/stm32f4xx_dma.c **** void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
1253:FWLIB/src/stm32f4xx_dma.c **** {
 1253              		.loc 1 1253 1 is_stmt 1 view -0
 1254              		.cfi_startproc
 1255              		@ args = 0, pretend = 0, frame = 0
 1256              		@ frame_needed = 0, uses_anonymous_args = 0
 1257              		@ link register save eliminated.
1254:FWLIB/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
 1258              		.loc 1 1254 3 view .LVU398
1255:FWLIB/src/stm32f4xx_dma.c **** 
1256:FWLIB/src/stm32f4xx_dma.c ****   /* Check the parameters */
1257:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 1259              		.loc 1 1257 3 view .LVU399
1258:FWLIB/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CLEAR_IT(DMA_IT));
 1260              		.loc 1 1258 3 view .LVU400
1259:FWLIB/src/stm32f4xx_dma.c **** 
1260:FWLIB/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1261:FWLIB/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 1261              		.loc 1 1261 3 view .LVU401
 1262              		.loc 1 1261 6 is_stmt 0 view .LVU402
 1263 0000 0A4B     		ldr	r3, .L107
 1264 0002 9842     		cmp	r0, r3
 1265 0004 0AD8     		bhi	.L106
1262:FWLIB/src/stm32f4xx_dma.c ****   {
1263:FWLIB/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1264:FWLIB/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 1266              		.loc 1 1264 10 view .LVU403
 1267 0006 A3F20F43 		subw	r3, r3, #1039
 1268              	.L103:
 1269              	.LVL71:
1265:FWLIB/src/stm32f4xx_dma.c ****   } 
1266:FWLIB/src/stm32f4xx_dma.c ****   else 
1267:FWLIB/src/stm32f4xx_dma.c ****   {
1268:FWLIB/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1269:FWLIB/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
1270:FWLIB/src/stm32f4xx_dma.c ****   }
1271:FWLIB/src/stm32f4xx_dma.c **** 
1272:FWLIB/src/stm32f4xx_dma.c ****   /* Check if LIFCR or HIFCR register is targeted */
1273:FWLIB/src/stm32f4xx_dma.c ****   if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 1270              		.loc 1 1273 3 is_stmt 1 view .LVU404
 1271              		.loc 1 1273 6 is_stmt 0 view .LVU405
 1272 000a 11F0005F 		tst	r1, #536870912
 1273 000e 07D0     		beq	.L104
ARM GAS  /tmp/ccF492tC.s 			page 46


1274:FWLIB/src/stm32f4xx_dma.c ****   {
1275:FWLIB/src/stm32f4xx_dma.c ****     /* Set DMAy HIFCR register clear interrupt bits */
1276:FWLIB/src/stm32f4xx_dma.c ****     DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 1274              		.loc 1 1276 5 is_stmt 1 view .LVU406
 1275              		.loc 1 1276 19 is_stmt 0 view .LVU407
 1276 0010 21F0F021 		bic	r1, r1, #-268374016
 1277              	.LVL72:
 1278              		.loc 1 1276 19 view .LVU408
 1279 0014 21F08211 		bic	r1, r1, #8519810
 1280              		.loc 1 1276 17 view .LVU409
 1281 0018 D960     		str	r1, [r3, #12]
 1282 001a 7047     		bx	lr
 1283              	.LVL73:
 1284              	.L106:
1269:FWLIB/src/stm32f4xx_dma.c ****   }
 1285              		.loc 1 1269 10 view .LVU410
 1286 001c 044B     		ldr	r3, .L107+4
 1287 001e F4E7     		b	.L103
 1288              	.LVL74:
 1289              	.L104:
1277:FWLIB/src/stm32f4xx_dma.c ****   }
1278:FWLIB/src/stm32f4xx_dma.c ****   else 
1279:FWLIB/src/stm32f4xx_dma.c ****   {
1280:FWLIB/src/stm32f4xx_dma.c ****     /* Set DMAy LIFCR register clear interrupt bits */
1281:FWLIB/src/stm32f4xx_dma.c ****     DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 1290              		.loc 1 1281 5 is_stmt 1 view .LVU411
 1291              		.loc 1 1281 19 is_stmt 0 view .LVU412
 1292 0020 21F0F021 		bic	r1, r1, #-268374016
 1293              	.LVL75:
 1294              		.loc 1 1281 19 view .LVU413
 1295 0024 21F08211 		bic	r1, r1, #8519810
 1296              		.loc 1 1281 17 view .LVU414
 1297 0028 9960     		str	r1, [r3, #8]
1282:FWLIB/src/stm32f4xx_dma.c ****   }   
1283:FWLIB/src/stm32f4xx_dma.c **** }
 1298              		.loc 1 1283 1 view .LVU415
 1299 002a 7047     		bx	lr
 1300              	.L108:
 1301              		.align	2
 1302              	.L107:
 1303 002c 0F640240 		.word	1073898511
 1304 0030 00640240 		.word	1073898496
 1305              		.cfi_endproc
 1306              	.LFE141:
 1308              		.text
 1309              	.Letext0:
 1310              		.file 2 "/home/bt0/stm32/compile-tool/gcc-arm-none-eabi-8-2018-q4-major-linux/gcc-arm-none-eabi-8-
 1311              		.file 3 "/home/bt0/stm32/compile-tool/gcc-arm-none-eabi-8-2018-q4-major-linux/gcc-arm-none-eabi-8-
 1312              		.file 4 "F4_CORE/core_cm4.h"
 1313              		.file 5 "USER/system_stm32f4xx.h"
 1314              		.file 6 "USER/stm32f4xx.h"
 1315              		.file 7 "FWLIB/inc/stm32f4xx_dma.h"
ARM GAS  /tmp/ccF492tC.s 			page 47


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_dma.c
     /tmp/ccF492tC.s:18     .text.DMA_DeInit:0000000000000000 $t
     /tmp/ccF492tC.s:26     .text.DMA_DeInit:0000000000000000 DMA_DeInit
     /tmp/ccF492tC.s:260    .text.DMA_DeInit:000000000000010c $d
     /tmp/ccF492tC.s:283    .text.DMA_Init:0000000000000000 $t
     /tmp/ccF492tC.s:290    .text.DMA_Init:0000000000000000 DMA_Init
     /tmp/ccF492tC.s:420    .text.DMA_Init:0000000000000054 $d
     /tmp/ccF492tC.s:425    .text.DMA_StructInit:0000000000000000 $t
     /tmp/ccF492tC.s:432    .text.DMA_StructInit:0000000000000000 DMA_StructInit
     /tmp/ccF492tC.s:492    .text.DMA_Cmd:0000000000000000 $t
     /tmp/ccF492tC.s:499    .text.DMA_Cmd:0000000000000000 DMA_Cmd
     /tmp/ccF492tC.s:530    .text.DMA_PeriphIncOffsetSizeConfig:0000000000000000 $t
     /tmp/ccF492tC.s:537    .text.DMA_PeriphIncOffsetSizeConfig:0000000000000000 DMA_PeriphIncOffsetSizeConfig
     /tmp/ccF492tC.s:568    .text.DMA_FlowControllerConfig:0000000000000000 $t
     /tmp/ccF492tC.s:575    .text.DMA_FlowControllerConfig:0000000000000000 DMA_FlowControllerConfig
     /tmp/ccF492tC.s:606    .text.DMA_SetCurrDataCounter:0000000000000000 $t
     /tmp/ccF492tC.s:613    .text.DMA_SetCurrDataCounter:0000000000000000 DMA_SetCurrDataCounter
     /tmp/ccF492tC.s:631    .text.DMA_GetCurrDataCounter:0000000000000000 $t
     /tmp/ccF492tC.s:638    .text.DMA_GetCurrDataCounter:0000000000000000 DMA_GetCurrDataCounter
     /tmp/ccF492tC.s:658    .text.DMA_DoubleBufferModeConfig:0000000000000000 $t
     /tmp/ccF492tC.s:665    .text.DMA_DoubleBufferModeConfig:0000000000000000 DMA_DoubleBufferModeConfig
     /tmp/ccF492tC.s:700    .text.DMA_DoubleBufferModeCmd:0000000000000000 $t
     /tmp/ccF492tC.s:707    .text.DMA_DoubleBufferModeCmd:0000000000000000 DMA_DoubleBufferModeCmd
     /tmp/ccF492tC.s:738    .text.DMA_MemoryTargetConfig:0000000000000000 $t
     /tmp/ccF492tC.s:745    .text.DMA_MemoryTargetConfig:0000000000000000 DMA_MemoryTargetConfig
     /tmp/ccF492tC.s:772    .text.DMA_GetCurrentMemoryTarget:0000000000000000 $t
     /tmp/ccF492tC.s:779    .text.DMA_GetCurrentMemoryTarget:0000000000000000 DMA_GetCurrentMemoryTarget
     /tmp/ccF492tC.s:812    .text.DMA_GetCmdStatus:0000000000000000 $t
     /tmp/ccF492tC.s:819    .text.DMA_GetCmdStatus:0000000000000000 DMA_GetCmdStatus
     /tmp/ccF492tC.s:852    .text.DMA_GetFIFOStatus:0000000000000000 $t
     /tmp/ccF492tC.s:859    .text.DMA_GetFIFOStatus:0000000000000000 DMA_GetFIFOStatus
     /tmp/ccF492tC.s:883    .text.DMA_GetFlagStatus:0000000000000000 $t
     /tmp/ccF492tC.s:890    .text.DMA_GetFlagStatus:0000000000000000 DMA_GetFlagStatus
     /tmp/ccF492tC.s:960    .text.DMA_GetFlagStatus:0000000000000030 $d
     /tmp/ccF492tC.s:966    .text.DMA_ClearFlag:0000000000000000 $t
     /tmp/ccF492tC.s:973    .text.DMA_ClearFlag:0000000000000000 DMA_ClearFlag
     /tmp/ccF492tC.s:1026   .text.DMA_ClearFlag:000000000000002c $d
     /tmp/ccF492tC.s:1032   .text.DMA_ITConfig:0000000000000000 $t
     /tmp/ccF492tC.s:1039   .text.DMA_ITConfig:0000000000000000 DMA_ITConfig
     /tmp/ccF492tC.s:1105   .text.DMA_GetITStatus:0000000000000000 $t
     /tmp/ccF492tC.s:1112   .text.DMA_GetITStatus:0000000000000000 DMA_GetITStatus
     /tmp/ccF492tC.s:1236   .text.DMA_GetITStatus:0000000000000054 $d
     /tmp/ccF492tC.s:1243   .text.DMA_ClearITPendingBit:0000000000000000 $t
     /tmp/ccF492tC.s:1250   .text.DMA_ClearITPendingBit:0000000000000000 DMA_ClearITPendingBit
     /tmp/ccF492tC.s:1303   .text.DMA_ClearITPendingBit:000000000000002c $d

NO UNDEFINED SYMBOLS
