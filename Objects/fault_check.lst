ARM GAS  C:\Users\why\AppData\Local\Temp\ccNIM6Vw.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"fault_check.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.Get_CfsrReg_Value,"ax",%progbits
  22              		.align	2
  23              		.global	Get_CfsrReg_Value
  24              		.thumb
  25              		.thumb_func
  27              	Get_CfsrReg_Value:
  28              	.LFB123:
  29              		.file 1 "SYS/faultcheck/fault_check.c"
   1:SYS/faultcheck/fault_check.c **** #include "fault_check.h"
   2:SYS/faultcheck/fault_check.c **** 
   3:SYS/faultcheck/fault_check.c **** uint32_t hardfault_reg_val = 0;
   4:SYS/faultcheck/fault_check.c **** uint32_t cfsr_reg_val = 0;
   5:SYS/faultcheck/fault_check.c **** 
   6:SYS/faultcheck/fault_check.c **** cfsr_item Get_CfsrReg_Value(void)
   7:SYS/faultcheck/fault_check.c **** {
  30              		.loc 1 7 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
   8:SYS/faultcheck/fault_check.c ****     cfsr_item cfsr_item_tmp;
   9:SYS/faultcheck/fault_check.c **** 
  10:SYS/faultcheck/fault_check.c ****     cfsr_item_tmp.value = 0;
  11:SYS/faultcheck/fault_check.c **** 
  12:SYS/faultcheck/fault_check.c ****     __ASM(".equ CFSRFAULT_REG, 0xE000ED28");
  35              		.loc 1 12 0
  36              		.syntax unified
  37              	@ 12 "SYS/faultcheck/fault_check.c" 1
  38              		.equ CFSRFAULT_REG, 0xE000ED28
  39              	@ 0 "" 2
  13:SYS/faultcheck/fault_check.c **** 
  14:SYS/faultcheck/fault_check.c ****     __ASM("LDR      R1, =CFSRFAULT_REG");
  40              		.loc 1 14 0
  41              	@ 14 "SYS/faultcheck/fault_check.c" 1
  42 0000 0249     		LDR      R1, =CFSRFAULT_REG
  43              	@ 0 "" 2
  15:SYS/faultcheck/fault_check.c ****     __ASM("LDR      R3, =cfsr_reg_val");
ARM GAS  C:\Users\why\AppData\Local\Temp\ccNIM6Vw.s 			page 2


  44              		.loc 1 15 0
  45              	@ 15 "SYS/faultcheck/fault_check.c" 1
  46 0002 034B     		LDR      R3, =cfsr_reg_val
  47              	@ 0 "" 2
  16:SYS/faultcheck/fault_check.c **** 
  17:SYS/faultcheck/fault_check.c ****     __ASM("LDR      R2, [R1]");
  48              		.loc 1 17 0
  49              	@ 17 "SYS/faultcheck/fault_check.c" 1
  50 0004 0A68     		LDR      R2, [R1]
  51              	@ 0 "" 2
  18:SYS/faultcheck/fault_check.c ****     __ASM("STR      R2, [R3]");
  52              		.loc 1 18 0
  53              	@ 18 "SYS/faultcheck/fault_check.c" 1
  54 0006 1A60     		STR      R2, [R3]
  55              	@ 0 "" 2
  19:SYS/faultcheck/fault_check.c **** 
  20:SYS/faultcheck/fault_check.c ****     cfsr_item_tmp.value = cfsr_reg_val;
  21:SYS/faultcheck/fault_check.c **** }
  56              		.loc 1 21 0
  57              		.thumb
  58              		.syntax unified
  59 0008 7047     		bx	lr
  60              		.cfi_endproc
  61              	.LFE123:
  63 000a 0000     		.section	.text.Get_FaultReg_Value,"ax",%progbits
  64              		.align	2
  65              		.global	Get_FaultReg_Value
  66              		.thumb
  67              		.thumb_func
  69              	Get_FaultReg_Value:
  70              	.LFB124:
  22:SYS/faultcheck/fault_check.c **** 
  23:SYS/faultcheck/fault_check.c **** fault_item Get_FaultReg_Value(void)
  24:SYS/faultcheck/fault_check.c **** {
  71              		.loc 1 24 0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 8
  74              		@ frame_needed = 0, uses_anonymous_args = 0
  75 0000 10B5     		push	{r4, lr}
  76              	.LCFI0:
  77              		.cfi_def_cfa_offset 8
  78              		.cfi_offset 4, -8
  79              		.cfi_offset 14, -4
  80 0002 82B0     		sub	sp, sp, #8
  81              	.LCFI1:
  82              		.cfi_def_cfa_offset 16
  83              	.LVL0:
  25:SYS/faultcheck/fault_check.c ****     uint32_t Sp_Val = 0;
  26:SYS/faultcheck/fault_check.c ****     fault_item fault_item_tmp;
  27:SYS/faultcheck/fault_check.c ****     volatile cfsr_item cfsr_val;
  28:SYS/faultcheck/fault_check.c **** 
  29:SYS/faultcheck/fault_check.c ****     cfsr_val.value = 0;
  84              		.loc 1 29 0
  85 0004 0024     		movs	r4, #0
  86 0006 0194     		str	r4, [sp, #4]
  30:SYS/faultcheck/fault_check.c ****     fault_item_tmp.value = 0;
  31:SYS/faultcheck/fault_check.c **** 
ARM GAS  C:\Users\why\AppData\Local\Temp\ccNIM6Vw.s 			page 3


  32:SYS/faultcheck/fault_check.c ****     __ASM(".equ HARDFAULT_REG, 0xE000ED2C");
  87              		.loc 1 32 0
  88              		.syntax unified
  89              	@ 32 "SYS/faultcheck/fault_check.c" 1
  90              		.equ HARDFAULT_REG, 0xE000ED2C
  91              	@ 0 "" 2
  33:SYS/faultcheck/fault_check.c **** 
  34:SYS/faultcheck/fault_check.c ****     __ASM("LDR      R1, =HARDFAULT_REG");
  92              		.loc 1 34 0
  93              	@ 34 "SYS/faultcheck/fault_check.c" 1
  94 0008 1249     		LDR      R1, =HARDFAULT_REG
  95              	@ 0 "" 2
  35:SYS/faultcheck/fault_check.c ****     __ASM("LDR      R3, =hardfault_reg_val");
  96              		.loc 1 35 0
  97              	@ 35 "SYS/faultcheck/fault_check.c" 1
  98 000a 134B     		LDR      R3, =hardfault_reg_val
  99              	@ 0 "" 2
  36:SYS/faultcheck/fault_check.c **** 
  37:SYS/faultcheck/fault_check.c ****     __ASM("LDR      R2, [R1]");
 100              		.loc 1 37 0
 101              	@ 37 "SYS/faultcheck/fault_check.c" 1
 102 000c 0A68     		LDR      R2, [R1]
 103              	@ 0 "" 2
  38:SYS/faultcheck/fault_check.c ****     __ASM("STR      R2, [R3]");
 104              		.loc 1 38 0
 105              	@ 38 "SYS/faultcheck/fault_check.c" 1
 106 000e 1A60     		STR      R2, [R3]
 107              	@ 0 "" 2
 108              		.thumb
 109              		.syntax unified
 110              	.LBB8:
 111              	.LBB9:
 112              		.file 2 "F4_CORE/core_cmFunc.h"
   1:F4_CORE/core_cmFunc.h **** /**************************************************************************//**
   2:F4_CORE/core_cmFunc.h ****  * @file     core_cmFunc.h
   3:F4_CORE/core_cmFunc.h ****  * @brief    CMSIS Cortex-M Core Function Access Header File
   4:F4_CORE/core_cmFunc.h ****  * @version  V4.10
   5:F4_CORE/core_cmFunc.h ****  * @date     18. March 2015
   6:F4_CORE/core_cmFunc.h ****  *
   7:F4_CORE/core_cmFunc.h ****  * @note
   8:F4_CORE/core_cmFunc.h ****  *
   9:F4_CORE/core_cmFunc.h ****  ******************************************************************************/
  10:F4_CORE/core_cmFunc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
  11:F4_CORE/core_cmFunc.h **** 
  12:F4_CORE/core_cmFunc.h ****    All rights reserved.
  13:F4_CORE/core_cmFunc.h ****    Redistribution and use in source and binary forms, with or without
  14:F4_CORE/core_cmFunc.h ****    modification, are permitted provided that the following conditions are met:
  15:F4_CORE/core_cmFunc.h ****    - Redistributions of source code must retain the above copyright
  16:F4_CORE/core_cmFunc.h ****      notice, this list of conditions and the following disclaimer.
  17:F4_CORE/core_cmFunc.h ****    - Redistributions in binary form must reproduce the above copyright
  18:F4_CORE/core_cmFunc.h ****      notice, this list of conditions and the following disclaimer in the
  19:F4_CORE/core_cmFunc.h ****      documentation and/or other materials provided with the distribution.
  20:F4_CORE/core_cmFunc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:F4_CORE/core_cmFunc.h ****      to endorse or promote products derived from this software without
  22:F4_CORE/core_cmFunc.h ****      specific prior written permission.
  23:F4_CORE/core_cmFunc.h ****    *
  24:F4_CORE/core_cmFunc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
ARM GAS  C:\Users\why\AppData\Local\Temp\ccNIM6Vw.s 			page 4


  25:F4_CORE/core_cmFunc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:F4_CORE/core_cmFunc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:F4_CORE/core_cmFunc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:F4_CORE/core_cmFunc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:F4_CORE/core_cmFunc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:F4_CORE/core_cmFunc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:F4_CORE/core_cmFunc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:F4_CORE/core_cmFunc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:F4_CORE/core_cmFunc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:F4_CORE/core_cmFunc.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:F4_CORE/core_cmFunc.h ****    ---------------------------------------------------------------------------*/
  36:F4_CORE/core_cmFunc.h **** 
  37:F4_CORE/core_cmFunc.h **** 
  38:F4_CORE/core_cmFunc.h **** #ifndef __CORE_CMFUNC_H
  39:F4_CORE/core_cmFunc.h **** #define __CORE_CMFUNC_H
  40:F4_CORE/core_cmFunc.h **** 
  41:F4_CORE/core_cmFunc.h **** 
  42:F4_CORE/core_cmFunc.h **** /* ###########################  Core Function Access  ########################### */
  43:F4_CORE/core_cmFunc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  44:F4_CORE/core_cmFunc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  45:F4_CORE/core_cmFunc.h ****   @{
  46:F4_CORE/core_cmFunc.h ****  */
  47:F4_CORE/core_cmFunc.h **** 
  48:F4_CORE/core_cmFunc.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:F4_CORE/core_cmFunc.h **** /* ARM armcc specific functions */
  50:F4_CORE/core_cmFunc.h **** 
  51:F4_CORE/core_cmFunc.h **** #if (__ARMCC_VERSION < 400677)
  52:F4_CORE/core_cmFunc.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:F4_CORE/core_cmFunc.h **** #endif
  54:F4_CORE/core_cmFunc.h **** 
  55:F4_CORE/core_cmFunc.h **** /* intrinsic void __enable_irq();     */
  56:F4_CORE/core_cmFunc.h **** /* intrinsic void __disable_irq();    */
  57:F4_CORE/core_cmFunc.h **** 
  58:F4_CORE/core_cmFunc.h **** /** \brief  Get Control Register
  59:F4_CORE/core_cmFunc.h **** 
  60:F4_CORE/core_cmFunc.h ****     This function returns the content of the Control Register.
  61:F4_CORE/core_cmFunc.h **** 
  62:F4_CORE/core_cmFunc.h ****     \return               Control Register value
  63:F4_CORE/core_cmFunc.h ****  */
  64:F4_CORE/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_CONTROL(void)
  65:F4_CORE/core_cmFunc.h **** {
  66:F4_CORE/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  67:F4_CORE/core_cmFunc.h ****   return(__regControl);
  68:F4_CORE/core_cmFunc.h **** }
  69:F4_CORE/core_cmFunc.h **** 
  70:F4_CORE/core_cmFunc.h **** 
  71:F4_CORE/core_cmFunc.h **** /** \brief  Set Control Register
  72:F4_CORE/core_cmFunc.h **** 
  73:F4_CORE/core_cmFunc.h ****     This function writes the given value to the Control Register.
  74:F4_CORE/core_cmFunc.h **** 
  75:F4_CORE/core_cmFunc.h ****     \param [in]    control  Control Register value to set
  76:F4_CORE/core_cmFunc.h ****  */
  77:F4_CORE/core_cmFunc.h **** __STATIC_INLINE void __set_CONTROL(uint32_t control)
  78:F4_CORE/core_cmFunc.h **** {
  79:F4_CORE/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  80:F4_CORE/core_cmFunc.h ****   __regControl = control;
  81:F4_CORE/core_cmFunc.h **** }
ARM GAS  C:\Users\why\AppData\Local\Temp\ccNIM6Vw.s 			page 5


  82:F4_CORE/core_cmFunc.h **** 
  83:F4_CORE/core_cmFunc.h **** 
  84:F4_CORE/core_cmFunc.h **** /** \brief  Get IPSR Register
  85:F4_CORE/core_cmFunc.h **** 
  86:F4_CORE/core_cmFunc.h ****     This function returns the content of the IPSR Register.
  87:F4_CORE/core_cmFunc.h **** 
  88:F4_CORE/core_cmFunc.h ****     \return               IPSR Register value
  89:F4_CORE/core_cmFunc.h ****  */
  90:F4_CORE/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_IPSR(void)
  91:F4_CORE/core_cmFunc.h **** {
  92:F4_CORE/core_cmFunc.h ****   register uint32_t __regIPSR          __ASM("ipsr");
  93:F4_CORE/core_cmFunc.h ****   return(__regIPSR);
  94:F4_CORE/core_cmFunc.h **** }
  95:F4_CORE/core_cmFunc.h **** 
  96:F4_CORE/core_cmFunc.h **** 
  97:F4_CORE/core_cmFunc.h **** /** \brief  Get APSR Register
  98:F4_CORE/core_cmFunc.h **** 
  99:F4_CORE/core_cmFunc.h ****     This function returns the content of the APSR Register.
 100:F4_CORE/core_cmFunc.h **** 
 101:F4_CORE/core_cmFunc.h ****     \return               APSR Register value
 102:F4_CORE/core_cmFunc.h ****  */
 103:F4_CORE/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_APSR(void)
 104:F4_CORE/core_cmFunc.h **** {
 105:F4_CORE/core_cmFunc.h ****   register uint32_t __regAPSR          __ASM("apsr");
 106:F4_CORE/core_cmFunc.h ****   return(__regAPSR);
 107:F4_CORE/core_cmFunc.h **** }
 108:F4_CORE/core_cmFunc.h **** 
 109:F4_CORE/core_cmFunc.h **** 
 110:F4_CORE/core_cmFunc.h **** /** \brief  Get xPSR Register
 111:F4_CORE/core_cmFunc.h **** 
 112:F4_CORE/core_cmFunc.h ****     This function returns the content of the xPSR Register.
 113:F4_CORE/core_cmFunc.h **** 
 114:F4_CORE/core_cmFunc.h ****     \return               xPSR Register value
 115:F4_CORE/core_cmFunc.h ****  */
 116:F4_CORE/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_xPSR(void)
 117:F4_CORE/core_cmFunc.h **** {
 118:F4_CORE/core_cmFunc.h ****   register uint32_t __regXPSR          __ASM("xpsr");
 119:F4_CORE/core_cmFunc.h ****   return(__regXPSR);
 120:F4_CORE/core_cmFunc.h **** }
 121:F4_CORE/core_cmFunc.h **** 
 122:F4_CORE/core_cmFunc.h **** 
 123:F4_CORE/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 124:F4_CORE/core_cmFunc.h **** 
 125:F4_CORE/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 126:F4_CORE/core_cmFunc.h **** 
 127:F4_CORE/core_cmFunc.h ****     \return               PSP Register value
 128:F4_CORE/core_cmFunc.h ****  */
 129:F4_CORE/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PSP(void)
 130:F4_CORE/core_cmFunc.h **** {
 131:F4_CORE/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 132:F4_CORE/core_cmFunc.h ****   return(__regProcessStackPointer);
 133:F4_CORE/core_cmFunc.h **** }
 134:F4_CORE/core_cmFunc.h **** 
 135:F4_CORE/core_cmFunc.h **** 
 136:F4_CORE/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 137:F4_CORE/core_cmFunc.h **** 
 138:F4_CORE/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
ARM GAS  C:\Users\why\AppData\Local\Temp\ccNIM6Vw.s 			page 6


 139:F4_CORE/core_cmFunc.h **** 
 140:F4_CORE/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 141:F4_CORE/core_cmFunc.h ****  */
 142:F4_CORE/core_cmFunc.h **** __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 143:F4_CORE/core_cmFunc.h **** {
 144:F4_CORE/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 145:F4_CORE/core_cmFunc.h ****   __regProcessStackPointer = topOfProcStack;
 146:F4_CORE/core_cmFunc.h **** }
 147:F4_CORE/core_cmFunc.h **** 
 148:F4_CORE/core_cmFunc.h **** 
 149:F4_CORE/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 150:F4_CORE/core_cmFunc.h **** 
 151:F4_CORE/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 152:F4_CORE/core_cmFunc.h **** 
 153:F4_CORE/core_cmFunc.h ****     \return               MSP Register value
 154:F4_CORE/core_cmFunc.h ****  */
 155:F4_CORE/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_MSP(void)
 156:F4_CORE/core_cmFunc.h **** {
 157:F4_CORE/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 158:F4_CORE/core_cmFunc.h ****   return(__regMainStackPointer);
 159:F4_CORE/core_cmFunc.h **** }
 160:F4_CORE/core_cmFunc.h **** 
 161:F4_CORE/core_cmFunc.h **** 
 162:F4_CORE/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 163:F4_CORE/core_cmFunc.h **** 
 164:F4_CORE/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 165:F4_CORE/core_cmFunc.h **** 
 166:F4_CORE/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 167:F4_CORE/core_cmFunc.h ****  */
 168:F4_CORE/core_cmFunc.h **** __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 169:F4_CORE/core_cmFunc.h **** {
 170:F4_CORE/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 171:F4_CORE/core_cmFunc.h ****   __regMainStackPointer = topOfMainStack;
 172:F4_CORE/core_cmFunc.h **** }
 173:F4_CORE/core_cmFunc.h **** 
 174:F4_CORE/core_cmFunc.h **** 
 175:F4_CORE/core_cmFunc.h **** /** \brief  Get Priority Mask
 176:F4_CORE/core_cmFunc.h **** 
 177:F4_CORE/core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 178:F4_CORE/core_cmFunc.h **** 
 179:F4_CORE/core_cmFunc.h ****     \return               Priority Mask value
 180:F4_CORE/core_cmFunc.h ****  */
 181:F4_CORE/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PRIMASK(void)
 182:F4_CORE/core_cmFunc.h **** {
 183:F4_CORE/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 184:F4_CORE/core_cmFunc.h ****   return(__regPriMask);
 185:F4_CORE/core_cmFunc.h **** }
 186:F4_CORE/core_cmFunc.h **** 
 187:F4_CORE/core_cmFunc.h **** 
 188:F4_CORE/core_cmFunc.h **** /** \brief  Set Priority Mask
 189:F4_CORE/core_cmFunc.h **** 
 190:F4_CORE/core_cmFunc.h ****     This function assigns the given value to the Priority Mask Register.
 191:F4_CORE/core_cmFunc.h **** 
 192:F4_CORE/core_cmFunc.h ****     \param [in]    priMask  Priority Mask
 193:F4_CORE/core_cmFunc.h ****  */
 194:F4_CORE/core_cmFunc.h **** __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 195:F4_CORE/core_cmFunc.h **** {
ARM GAS  C:\Users\why\AppData\Local\Temp\ccNIM6Vw.s 			page 7


 196:F4_CORE/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 197:F4_CORE/core_cmFunc.h ****   __regPriMask = (priMask);
 198:F4_CORE/core_cmFunc.h **** }
 199:F4_CORE/core_cmFunc.h **** 
 200:F4_CORE/core_cmFunc.h **** 
 201:F4_CORE/core_cmFunc.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 202:F4_CORE/core_cmFunc.h **** 
 203:F4_CORE/core_cmFunc.h **** /** \brief  Enable FIQ
 204:F4_CORE/core_cmFunc.h **** 
 205:F4_CORE/core_cmFunc.h ****     This function enables FIQ interrupts by clearing the F-bit in the CPSR.
 206:F4_CORE/core_cmFunc.h ****     Can only be executed in Privileged modes.
 207:F4_CORE/core_cmFunc.h ****  */
 208:F4_CORE/core_cmFunc.h **** #define __enable_fault_irq                __enable_fiq
 209:F4_CORE/core_cmFunc.h **** 
 210:F4_CORE/core_cmFunc.h **** 
 211:F4_CORE/core_cmFunc.h **** /** \brief  Disable FIQ
 212:F4_CORE/core_cmFunc.h **** 
 213:F4_CORE/core_cmFunc.h ****     This function disables FIQ interrupts by setting the F-bit in the CPSR.
 214:F4_CORE/core_cmFunc.h ****     Can only be executed in Privileged modes.
 215:F4_CORE/core_cmFunc.h ****  */
 216:F4_CORE/core_cmFunc.h **** #define __disable_fault_irq               __disable_fiq
 217:F4_CORE/core_cmFunc.h **** 
 218:F4_CORE/core_cmFunc.h **** 
 219:F4_CORE/core_cmFunc.h **** /** \brief  Get Base Priority
 220:F4_CORE/core_cmFunc.h **** 
 221:F4_CORE/core_cmFunc.h ****     This function returns the current value of the Base Priority register.
 222:F4_CORE/core_cmFunc.h **** 
 223:F4_CORE/core_cmFunc.h ****     \return               Base Priority register value
 224:F4_CORE/core_cmFunc.h ****  */
 225:F4_CORE/core_cmFunc.h **** __STATIC_INLINE uint32_t  __get_BASEPRI(void)
 226:F4_CORE/core_cmFunc.h **** {
 227:F4_CORE/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 228:F4_CORE/core_cmFunc.h ****   return(__regBasePri);
 229:F4_CORE/core_cmFunc.h **** }
 230:F4_CORE/core_cmFunc.h **** 
 231:F4_CORE/core_cmFunc.h **** 
 232:F4_CORE/core_cmFunc.h **** /** \brief  Set Base Priority
 233:F4_CORE/core_cmFunc.h **** 
 234:F4_CORE/core_cmFunc.h ****     This function assigns the given value to the Base Priority register.
 235:F4_CORE/core_cmFunc.h **** 
 236:F4_CORE/core_cmFunc.h ****     \param [in]    basePri  Base Priority value to set
 237:F4_CORE/core_cmFunc.h ****  */
 238:F4_CORE/core_cmFunc.h **** __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 239:F4_CORE/core_cmFunc.h **** {
 240:F4_CORE/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 241:F4_CORE/core_cmFunc.h ****   __regBasePri = (basePri & 0xff);
 242:F4_CORE/core_cmFunc.h **** }
 243:F4_CORE/core_cmFunc.h **** 
 244:F4_CORE/core_cmFunc.h **** 
 245:F4_CORE/core_cmFunc.h **** /** \brief  Set Base Priority with condition
 246:F4_CORE/core_cmFunc.h **** 
 247:F4_CORE/core_cmFunc.h ****     This function assigns the given value to the Base Priority register only if BASEPRI masking is 
 248:F4_CORE/core_cmFunc.h ****     or the new value increases the BASEPRI priority level.
 249:F4_CORE/core_cmFunc.h **** 
 250:F4_CORE/core_cmFunc.h ****     \param [in]    basePri  Base Priority value to set
 251:F4_CORE/core_cmFunc.h ****  */
 252:F4_CORE/core_cmFunc.h **** __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t basePri)
ARM GAS  C:\Users\why\AppData\Local\Temp\ccNIM6Vw.s 			page 8


 253:F4_CORE/core_cmFunc.h **** {
 254:F4_CORE/core_cmFunc.h ****   register uint32_t __regBasePriMax      __ASM("basepri_max");
 255:F4_CORE/core_cmFunc.h ****   __regBasePriMax = (basePri & 0xff);
 256:F4_CORE/core_cmFunc.h **** }
 257:F4_CORE/core_cmFunc.h **** 
 258:F4_CORE/core_cmFunc.h **** 
 259:F4_CORE/core_cmFunc.h **** /** \brief  Get Fault Mask
 260:F4_CORE/core_cmFunc.h **** 
 261:F4_CORE/core_cmFunc.h ****     This function returns the current value of the Fault Mask register.
 262:F4_CORE/core_cmFunc.h **** 
 263:F4_CORE/core_cmFunc.h ****     \return               Fault Mask register value
 264:F4_CORE/core_cmFunc.h ****  */
 265:F4_CORE/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 266:F4_CORE/core_cmFunc.h **** {
 267:F4_CORE/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 268:F4_CORE/core_cmFunc.h ****   return(__regFaultMask);
 269:F4_CORE/core_cmFunc.h **** }
 270:F4_CORE/core_cmFunc.h **** 
 271:F4_CORE/core_cmFunc.h **** 
 272:F4_CORE/core_cmFunc.h **** /** \brief  Set Fault Mask
 273:F4_CORE/core_cmFunc.h **** 
 274:F4_CORE/core_cmFunc.h ****     This function assigns the given value to the Fault Mask register.
 275:F4_CORE/core_cmFunc.h **** 
 276:F4_CORE/core_cmFunc.h ****     \param [in]    faultMask  Fault Mask value to set
 277:F4_CORE/core_cmFunc.h ****  */
 278:F4_CORE/core_cmFunc.h **** __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 279:F4_CORE/core_cmFunc.h **** {
 280:F4_CORE/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 281:F4_CORE/core_cmFunc.h ****   __regFaultMask = (faultMask & (uint32_t)1);
 282:F4_CORE/core_cmFunc.h **** }
 283:F4_CORE/core_cmFunc.h **** 
 284:F4_CORE/core_cmFunc.h **** #endif /* (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300) */
 285:F4_CORE/core_cmFunc.h **** 
 286:F4_CORE/core_cmFunc.h **** 
 287:F4_CORE/core_cmFunc.h **** #if       (__CORTEX_M == 0x04) || (__CORTEX_M == 0x07)
 288:F4_CORE/core_cmFunc.h **** 
 289:F4_CORE/core_cmFunc.h **** /** \brief  Get FPSCR
 290:F4_CORE/core_cmFunc.h **** 
 291:F4_CORE/core_cmFunc.h ****     This function returns the current value of the Floating Point Status/Control register.
 292:F4_CORE/core_cmFunc.h **** 
 293:F4_CORE/core_cmFunc.h ****     \return               Floating Point Status/Control register value
 294:F4_CORE/core_cmFunc.h ****  */
 295:F4_CORE/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FPSCR(void)
 296:F4_CORE/core_cmFunc.h **** {
 297:F4_CORE/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 298:F4_CORE/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 299:F4_CORE/core_cmFunc.h ****   return(__regfpscr);
 300:F4_CORE/core_cmFunc.h **** #else
 301:F4_CORE/core_cmFunc.h ****    return(0);
 302:F4_CORE/core_cmFunc.h **** #endif
 303:F4_CORE/core_cmFunc.h **** }
 304:F4_CORE/core_cmFunc.h **** 
 305:F4_CORE/core_cmFunc.h **** 
 306:F4_CORE/core_cmFunc.h **** /** \brief  Set FPSCR
 307:F4_CORE/core_cmFunc.h **** 
 308:F4_CORE/core_cmFunc.h ****     This function assigns the given value to the Floating Point Status/Control register.
 309:F4_CORE/core_cmFunc.h **** 
ARM GAS  C:\Users\why\AppData\Local\Temp\ccNIM6Vw.s 			page 9


 310:F4_CORE/core_cmFunc.h ****     \param [in]    fpscr  Floating Point Status/Control value to set
 311:F4_CORE/core_cmFunc.h ****  */
 312:F4_CORE/core_cmFunc.h **** __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 313:F4_CORE/core_cmFunc.h **** {
 314:F4_CORE/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 315:F4_CORE/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 316:F4_CORE/core_cmFunc.h ****   __regfpscr = (fpscr);
 317:F4_CORE/core_cmFunc.h **** #endif
 318:F4_CORE/core_cmFunc.h **** }
 319:F4_CORE/core_cmFunc.h **** 
 320:F4_CORE/core_cmFunc.h **** #endif /* (__CORTEX_M == 0x04) || (__CORTEX_M == 0x07) */
 321:F4_CORE/core_cmFunc.h **** 
 322:F4_CORE/core_cmFunc.h **** 
 323:F4_CORE/core_cmFunc.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 324:F4_CORE/core_cmFunc.h **** /* GNU gcc specific functions */
 325:F4_CORE/core_cmFunc.h **** 
 326:F4_CORE/core_cmFunc.h **** /** \brief  Enable IRQ Interrupts
 327:F4_CORE/core_cmFunc.h **** 
 328:F4_CORE/core_cmFunc.h ****   This function enables IRQ interrupts by clearing the I-bit in the CPSR.
 329:F4_CORE/core_cmFunc.h ****   Can only be executed in Privileged modes.
 330:F4_CORE/core_cmFunc.h ****  */
 331:F4_CORE/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
 332:F4_CORE/core_cmFunc.h **** {
 333:F4_CORE/core_cmFunc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 334:F4_CORE/core_cmFunc.h **** }
 335:F4_CORE/core_cmFunc.h **** 
 336:F4_CORE/core_cmFunc.h **** 
 337:F4_CORE/core_cmFunc.h **** /** \brief  Disable IRQ Interrupts
 338:F4_CORE/core_cmFunc.h **** 
 339:F4_CORE/core_cmFunc.h ****   This function disables IRQ interrupts by setting the I-bit in the CPSR.
 340:F4_CORE/core_cmFunc.h ****   Can only be executed in Privileged modes.
 341:F4_CORE/core_cmFunc.h ****  */
 342:F4_CORE/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
 343:F4_CORE/core_cmFunc.h **** {
 344:F4_CORE/core_cmFunc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 345:F4_CORE/core_cmFunc.h **** }
 346:F4_CORE/core_cmFunc.h **** 
 347:F4_CORE/core_cmFunc.h **** 
 348:F4_CORE/core_cmFunc.h **** /** \brief  Get Control Register
 349:F4_CORE/core_cmFunc.h **** 
 350:F4_CORE/core_cmFunc.h ****     This function returns the content of the Control Register.
 351:F4_CORE/core_cmFunc.h **** 
 352:F4_CORE/core_cmFunc.h ****     \return               Control Register value
 353:F4_CORE/core_cmFunc.h ****  */
 354:F4_CORE/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
 355:F4_CORE/core_cmFunc.h **** {
 356:F4_CORE/core_cmFunc.h ****   uint32_t result;
 357:F4_CORE/core_cmFunc.h **** 
 358:F4_CORE/core_cmFunc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 359:F4_CORE/core_cmFunc.h ****   return(result);
 360:F4_CORE/core_cmFunc.h **** }
 361:F4_CORE/core_cmFunc.h **** 
 362:F4_CORE/core_cmFunc.h **** 
 363:F4_CORE/core_cmFunc.h **** /** \brief  Set Control Register
 364:F4_CORE/core_cmFunc.h **** 
 365:F4_CORE/core_cmFunc.h ****     This function writes the given value to the Control Register.
 366:F4_CORE/core_cmFunc.h **** 
ARM GAS  C:\Users\why\AppData\Local\Temp\ccNIM6Vw.s 			page 10


 367:F4_CORE/core_cmFunc.h ****     \param [in]    control  Control Register value to set
 368:F4_CORE/core_cmFunc.h ****  */
 369:F4_CORE/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
 370:F4_CORE/core_cmFunc.h **** {
 371:F4_CORE/core_cmFunc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 372:F4_CORE/core_cmFunc.h **** }
 373:F4_CORE/core_cmFunc.h **** 
 374:F4_CORE/core_cmFunc.h **** 
 375:F4_CORE/core_cmFunc.h **** /** \brief  Get IPSR Register
 376:F4_CORE/core_cmFunc.h **** 
 377:F4_CORE/core_cmFunc.h ****     This function returns the content of the IPSR Register.
 378:F4_CORE/core_cmFunc.h **** 
 379:F4_CORE/core_cmFunc.h ****     \return               IPSR Register value
 380:F4_CORE/core_cmFunc.h ****  */
 381:F4_CORE/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 382:F4_CORE/core_cmFunc.h **** {
 383:F4_CORE/core_cmFunc.h ****   uint32_t result;
 384:F4_CORE/core_cmFunc.h **** 
 385:F4_CORE/core_cmFunc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 386:F4_CORE/core_cmFunc.h ****   return(result);
 387:F4_CORE/core_cmFunc.h **** }
 388:F4_CORE/core_cmFunc.h **** 
 389:F4_CORE/core_cmFunc.h **** 
 390:F4_CORE/core_cmFunc.h **** /** \brief  Get APSR Register
 391:F4_CORE/core_cmFunc.h **** 
 392:F4_CORE/core_cmFunc.h ****     This function returns the content of the APSR Register.
 393:F4_CORE/core_cmFunc.h **** 
 394:F4_CORE/core_cmFunc.h ****     \return               APSR Register value
 395:F4_CORE/core_cmFunc.h ****  */
 396:F4_CORE/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 397:F4_CORE/core_cmFunc.h **** {
 398:F4_CORE/core_cmFunc.h ****   uint32_t result;
 399:F4_CORE/core_cmFunc.h **** 
 400:F4_CORE/core_cmFunc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 401:F4_CORE/core_cmFunc.h ****   return(result);
 402:F4_CORE/core_cmFunc.h **** }
 403:F4_CORE/core_cmFunc.h **** 
 404:F4_CORE/core_cmFunc.h **** 
 405:F4_CORE/core_cmFunc.h **** /** \brief  Get xPSR Register
 406:F4_CORE/core_cmFunc.h **** 
 407:F4_CORE/core_cmFunc.h ****     This function returns the content of the xPSR Register.
 408:F4_CORE/core_cmFunc.h **** 
 409:F4_CORE/core_cmFunc.h ****     \return               xPSR Register value
 410:F4_CORE/core_cmFunc.h ****  */
 411:F4_CORE/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 412:F4_CORE/core_cmFunc.h **** {
 413:F4_CORE/core_cmFunc.h ****   uint32_t result;
 414:F4_CORE/core_cmFunc.h **** 
 415:F4_CORE/core_cmFunc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 416:F4_CORE/core_cmFunc.h ****   return(result);
 417:F4_CORE/core_cmFunc.h **** }
 418:F4_CORE/core_cmFunc.h **** 
 419:F4_CORE/core_cmFunc.h **** 
 420:F4_CORE/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 421:F4_CORE/core_cmFunc.h **** 
 422:F4_CORE/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 423:F4_CORE/core_cmFunc.h **** 
ARM GAS  C:\Users\why\AppData\Local\Temp\ccNIM6Vw.s 			page 11


 424:F4_CORE/core_cmFunc.h ****     \return               PSP Register value
 425:F4_CORE/core_cmFunc.h ****  */
 426:F4_CORE/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 427:F4_CORE/core_cmFunc.h **** {
 428:F4_CORE/core_cmFunc.h ****   register uint32_t result;
 429:F4_CORE/core_cmFunc.h **** 
 430:F4_CORE/core_cmFunc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 113              		.loc 2 430 0
 114              		.syntax unified
 115              	@ 430 "F4_CORE/core_cmFunc.h" 1
 116 0010 EFF30983 		MRS r3, psp
 117              	
 118              	@ 0 "" 2
 119              		.thumb
 120              		.syntax unified
 121              	.LBE9:
 122              	.LBE8:
  39:SYS/faultcheck/fault_check.c **** 
  40:SYS/faultcheck/fault_check.c ****     if (!__get_PSP())
 123              		.loc 1 40 0
 124 0014 13B9     		cbnz	r3, .L3
 125              	.LBB10:
 126              	.LBB11:
 127              		.loc 2 430 0
 128              		.syntax unified
 129              	@ 430 "F4_CORE/core_cmFunc.h" 1
 130 0016 EFF30983 		MRS r3, psp
 131              	
 132              	@ 0 "" 2
 133              	.LVL1:
 134              		.thumb
 135              		.syntax unified
 136              	.LBE11:
 137              	.LBE10:
 138 001a 01E0     		b	.L4
 139              	.LVL2:
 140              	.L3:
 141              	.LBB12:
 142              	.LBB13:
 431:F4_CORE/core_cmFunc.h ****   return(result);
 432:F4_CORE/core_cmFunc.h **** }
 433:F4_CORE/core_cmFunc.h **** 
 434:F4_CORE/core_cmFunc.h **** 
 435:F4_CORE/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 436:F4_CORE/core_cmFunc.h **** 
 437:F4_CORE/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 438:F4_CORE/core_cmFunc.h **** 
 439:F4_CORE/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 440:F4_CORE/core_cmFunc.h ****  */
 441:F4_CORE/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 442:F4_CORE/core_cmFunc.h **** {
 443:F4_CORE/core_cmFunc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 444:F4_CORE/core_cmFunc.h **** }
 445:F4_CORE/core_cmFunc.h **** 
 446:F4_CORE/core_cmFunc.h **** 
 447:F4_CORE/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 448:F4_CORE/core_cmFunc.h **** 
ARM GAS  C:\Users\why\AppData\Local\Temp\ccNIM6Vw.s 			page 12


 449:F4_CORE/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 450:F4_CORE/core_cmFunc.h **** 
 451:F4_CORE/core_cmFunc.h ****     \return               MSP Register value
 452:F4_CORE/core_cmFunc.h ****  */
 453:F4_CORE/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 454:F4_CORE/core_cmFunc.h **** {
 455:F4_CORE/core_cmFunc.h ****   register uint32_t result;
 456:F4_CORE/core_cmFunc.h **** 
 457:F4_CORE/core_cmFunc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 143              		.loc 2 457 0
 144              		.syntax unified
 145              	@ 457 "F4_CORE/core_cmFunc.h" 1
 146 001c EFF30883 		MRS r3, msp
 147              	
 148              	@ 0 "" 2
 149              	.LVL3:
 150              		.thumb
 151              		.syntax unified
 152              	.L4:
 153              	.LBE13:
 154              	.LBE12:
  41:SYS/faultcheck/fault_check.c ****     {
  42:SYS/faultcheck/fault_check.c ****         Sp_Val = __get_PSP();
  43:SYS/faultcheck/fault_check.c ****     }
  44:SYS/faultcheck/fault_check.c ****     else
  45:SYS/faultcheck/fault_check.c ****     {
  46:SYS/faultcheck/fault_check.c ****         Sp_Val = __get_MSP();
  47:SYS/faultcheck/fault_check.c ****     }
  48:SYS/faultcheck/fault_check.c **** 
  49:SYS/faultcheck/fault_check.c ****     if (hardfault_reg_val & DEBUGEVT_FAULT_SET)
 155              		.loc 1 49 0
 156 0020 0B4B     		ldr	r3, .L9
 157 0022 1B68     		ldr	r3, [r3]
 158 0024 002B     		cmp	r3, #0
 159 0026 01DA     		bge	.L5
  50:SYS/faultcheck/fault_check.c ****     {
  51:SYS/faultcheck/fault_check.c ****         fault_item_tmp.reg.debugevt = 1;
 160              		.loc 1 51 0
 161 0028 4FF00104 		mov	r4, #1
 162              	.LVL4:
 163              	.L5:
  52:SYS/faultcheck/fault_check.c ****     }
  53:SYS/faultcheck/fault_check.c **** 
  54:SYS/faultcheck/fault_check.c ****     if (hardfault_reg_val & FORCED___FAULT_SET)
 164              		.loc 1 54 0
 165 002c 13F0804F 		tst	r3, #1073741824
 166 0030 04D0     		beq	.L6
 167              	.LVL5:
  55:SYS/faultcheck/fault_check.c ****     {
  56:SYS/faultcheck/fault_check.c ****         fault_item_tmp.reg.forced = 1;
 168              		.loc 1 56 0
 169 0032 44F00204 		orr	r4, r4, #2
 170              	.LVL6:
  57:SYS/faultcheck/fault_check.c **** 
  58:SYS/faultcheck/fault_check.c ****         //check cfsr
  59:SYS/faultcheck/fault_check.c ****         cfsr_val = Get_CfsrReg_Value();
 171              		.loc 1 59 0
ARM GAS  C:\Users\why\AppData\Local\Temp\ccNIM6Vw.s 			page 13


 172 0036 FFF7FEFF 		bl	Get_CfsrReg_Value
 173              	.LVL7:
 174 003a 0190     		str	r0, [sp, #4]
 175              	.L6:
  60:SYS/faultcheck/fault_check.c ****     }
  61:SYS/faultcheck/fault_check.c **** 
  62:SYS/faultcheck/fault_check.c ****     if (hardfault_reg_val & VECTTBL__FAULT_SET)
 176              		.loc 1 62 0
 177 003c 044B     		ldr	r3, .L9
 178 003e 1B68     		ldr	r3, [r3]
 179 0040 13F0020F 		tst	r3, #2
 180 0044 01D0     		beq	.L7
 181              	.LVL8:
  63:SYS/faultcheck/fault_check.c ****     {
  64:SYS/faultcheck/fault_check.c ****         fault_item_tmp.reg.forced = 1;
 182              		.loc 1 64 0
 183 0046 44F00204 		orr	r4, r4, #2
 184              	.LVL9:
 185              	.L7:
  65:SYS/faultcheck/fault_check.c ****     }
  66:SYS/faultcheck/fault_check.c **** 
  67:SYS/faultcheck/fault_check.c ****     return fault_item_tmp;
  68:SYS/faultcheck/fault_check.c **** }
 186              		.loc 1 68 0
 187 004a 2046     		mov	r0, r4
 188 004c 02B0     		add	sp, sp, #8
 189              	.LCFI2:
 190              		.cfi_def_cfa_offset 8
 191              		@ sp needed
 192 004e 10BD     		pop	{r4, pc}
 193              	.LVL10:
 194              	.L10:
 195              		.align	2
 196              	.L9:
 197 0050 00000000 		.word	.LANCHOR0
 198              		.cfi_endproc
 199              	.LFE124:
 201              		.global	cfsr_reg_val
 202              		.global	hardfault_reg_val
 203              		.section	.bss.cfsr_reg_val,"aw",%nobits
 204              		.align	2
 207              	cfsr_reg_val:
 208 0000 00000000 		.space	4
 209              		.section	.bss.hardfault_reg_val,"aw",%nobits
 210              		.align	2
 211              		.set	.LANCHOR0,. + 0
 214              	hardfault_reg_val:
 215 0000 00000000 		.space	4
 216              		.text
 217              	.Letext0:
 218              		.file 3 "d:\\gcc_arm\\5.4 2016q3\\arm-none-eabi\\include\\machine\\_default_types.h"
 219              		.file 4 "d:\\gcc_arm\\5.4 2016q3\\arm-none-eabi\\include\\sys\\_stdint.h"
 220              		.file 5 "SYS/faultcheck/fault_check.h"
 221              		.file 6 "F4_CORE/core_cm4.h"
ARM GAS  C:\Users\why\AppData\Local\Temp\ccNIM6Vw.s 			page 14


DEFINED SYMBOLS
                            *ABS*:00000000 fault_check.c
C:\Users\why\AppData\Local\Temp\ccNIM6Vw.s:22     .text.Get_CfsrReg_Value:00000000 $t
C:\Users\why\AppData\Local\Temp\ccNIM6Vw.s:27     .text.Get_CfsrReg_Value:00000000 Get_CfsrReg_Value
C:\Users\why\AppData\Local\Temp\ccNIM6Vw.s:38     *ABS*:e000ed28 CFSRFAULT_REG
C:\Users\why\AppData\Local\Temp\ccNIM6Vw.s:207    .bss.cfsr_reg_val:00000000 cfsr_reg_val
C:\Users\why\AppData\Local\Temp\ccNIM6Vw.s:64     .text.Get_FaultReg_Value:00000000 $t
C:\Users\why\AppData\Local\Temp\ccNIM6Vw.s:69     .text.Get_FaultReg_Value:00000000 Get_FaultReg_Value
C:\Users\why\AppData\Local\Temp\ccNIM6Vw.s:90     *ABS*:e000ed2c HARDFAULT_REG
C:\Users\why\AppData\Local\Temp\ccNIM6Vw.s:214    .bss.hardfault_reg_val:00000000 hardfault_reg_val
C:\Users\why\AppData\Local\Temp\ccNIM6Vw.s:197    .text.Get_FaultReg_Value:00000050 $d
C:\Users\why\AppData\Local\Temp\ccNIM6Vw.s:204    .bss.cfsr_reg_val:00000000 $d
C:\Users\why\AppData\Local\Temp\ccNIM6Vw.s:210    .bss.hardfault_reg_val:00000000 $d
C:\Users\why\AppData\Local\Temp\ccNIM6Vw.s:1356   .text.Get_FaultReg_Value:00000054 $d
C:\Users\why\AppData\Local\Temp\ccNIM6Vw.s:63     .text.Get_CfsrReg_Value:0000000a $d
C:\Users\why\AppData\Local\Temp\ccNIM6Vw.s:1356   .text.Get_CfsrReg_Value:0000000c $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
