ARM GAS  /tmp/ccvVZSph.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"Dev_Toggle.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.Toggle_Get_2Level_Sum,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	Toggle_Get_2Level_Sum:
  25              	.LFB123:
  26              		.file 1 "Dev/Dev_Toggle.c"
   1:Dev/Dev_Toggle.c **** #include "Dev_Toggle.h"
   2:Dev/Dev_Toggle.c **** #include "drv_gpio.h"
   3:Dev/Dev_Toggle.c **** #include <string.h>
   4:Dev/Dev_Toggle.c **** 
   5:Dev/Dev_Toggle.c **** /* internal variable */
   6:Dev/Dev_Toggle.c **** static uint8_t toggle_2level_sum = 0;
   7:Dev/Dev_Toggle.c **** static uint8_t toggle_3level_sum = 0;
   8:Dev/Dev_Toggle.c **** 
   9:Dev/Dev_Toggle.c **** /* internal function */
  10:Dev/Dev_Toggle.c **** 
  11:Dev/Dev_Toggle.c **** /* external variable */
  12:Dev/Dev_Toggle.c **** static bool Toggle_Open(Toggle_Obj_TypeDef *obj, DevToggle_Type_List type, DrvGPIO_Obj_TypeDef *io)
  13:Dev/Dev_Toggle.c **** static bool Toggle_Invert(Toggle_Obj_TypeDef *obj);
  14:Dev/Dev_Toggle.c **** static DevToggle_Pos_List Toggle_Get(Toggle_Obj_TypeDef *obj);
  15:Dev/Dev_Toggle.c **** static uint8_t Toggle_Get_2Level_Sum(void);
  16:Dev/Dev_Toggle.c **** static uint8_t Toggle_Get_3Level_Sum(void);
  17:Dev/Dev_Toggle.c **** 
  18:Dev/Dev_Toggle.c **** /* external function */
  19:Dev/Dev_Toggle.c **** DevToggle_TypeDef DevToggle = {
  20:Dev/Dev_Toggle.c ****     .Open = Toggle_Open,
  21:Dev/Dev_Toggle.c ****     .Get = Toggle_Get,
  22:Dev/Dev_Toggle.c ****     .Invert = Toggle_Invert,
  23:Dev/Dev_Toggle.c ****     .get_2level_toggle_num = Toggle_Get_2Level_Sum,
  24:Dev/Dev_Toggle.c ****     .get_3level_toggle_num = Toggle_Get_3Level_Sum,
  25:Dev/Dev_Toggle.c **** };
  26:Dev/Dev_Toggle.c **** 
  27:Dev/Dev_Toggle.c **** static uint8_t Toggle_Get_2Level_Sum(void)
  28:Dev/Dev_Toggle.c **** {
  27              		.loc 1 28 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccvVZSph.s 			page 2


  31              		@ link register save eliminated.
  29:Dev/Dev_Toggle.c ****     return toggle_2level_sum;
  30:Dev/Dev_Toggle.c **** }
  32              		.loc 1 30 0
  33 0000 014B     		ldr	r3, .L2
  34 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
  35 0004 7047     		bx	lr
  36              	.L3:
  37 0006 00BF     		.align	2
  38              	.L2:
  39 0008 00000000 		.word	.LANCHOR0
  40              		.cfi_endproc
  41              	.LFE123:
  43              		.section	.text.Toggle_Get_3Level_Sum,"ax",%progbits
  44              		.align	1
  45              		.syntax unified
  46              		.thumb
  47              		.thumb_func
  48              		.fpu fpv4-sp-d16
  50              	Toggle_Get_3Level_Sum:
  51              	.LFB124:
  31:Dev/Dev_Toggle.c **** 
  32:Dev/Dev_Toggle.c **** static uint8_t Toggle_Get_3Level_Sum(void)
  33:Dev/Dev_Toggle.c **** {
  52              		.loc 1 33 0
  53              		.cfi_startproc
  54              		@ args = 0, pretend = 0, frame = 0
  55              		@ frame_needed = 0, uses_anonymous_args = 0
  56              		@ link register save eliminated.
  34:Dev/Dev_Toggle.c ****     return toggle_3level_sum;
  35:Dev/Dev_Toggle.c **** }
  57              		.loc 1 35 0
  58 0000 014B     		ldr	r3, .L5
  59 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
  60 0004 7047     		bx	lr
  61              	.L6:
  62 0006 00BF     		.align	2
  63              	.L5:
  64 0008 00000000 		.word	.LANCHOR1
  65              		.cfi_endproc
  66              	.LFE124:
  68              		.section	.text.Toggle_Invert,"ax",%progbits
  69              		.align	1
  70              		.syntax unified
  71              		.thumb
  72              		.thumb_func
  73              		.fpu fpv4-sp-d16
  75              	Toggle_Invert:
  76              	.LFB126:
  36:Dev/Dev_Toggle.c **** 
  37:Dev/Dev_Toggle.c **** static bool Toggle_Open(Toggle_Obj_TypeDef *obj, DevToggle_Type_List type, DrvGPIO_Obj_TypeDef *io)
  38:Dev/Dev_Toggle.c **** {
  39:Dev/Dev_Toggle.c ****     if ((obj == NULL) || ((type < Toggle_2Level) || (Toggle_2Level > Toggle_3Level)))
  40:Dev/Dev_Toggle.c ****     {
  41:Dev/Dev_Toggle.c ****         obj->init_state = false;
  42:Dev/Dev_Toggle.c ****         return false;
  43:Dev/Dev_Toggle.c ****     }
ARM GAS  /tmp/ccvVZSph.s 			page 3


  44:Dev/Dev_Toggle.c **** 
  45:Dev/Dev_Toggle.c ****     obj->level = type;
  46:Dev/Dev_Toggle.c ****     obj->invert = false;
  47:Dev/Dev_Toggle.c **** 
  48:Dev/Dev_Toggle.c ****     memset(obj->IO_Ptr, NULL, sizeof(obj->IO_Ptr));
  49:Dev/Dev_Toggle.c **** 
  50:Dev/Dev_Toggle.c ****     /* set io data structure */
  51:Dev/Dev_Toggle.c ****     for (uint8_t i = 0; i < (uint8_t)type; i++)
  52:Dev/Dev_Toggle.c ****     {
  53:Dev/Dev_Toggle.c ****         obj->IO_Ptr[i] = &io[i];
  54:Dev/Dev_Toggle.c **** 
  55:Dev/Dev_Toggle.c ****         /* ToDo IO init */
  56:Dev/Dev_Toggle.c ****         DrvGPIO.open(&obj->IO_Ptr[i], GPIO_Input, NULL);
  57:Dev/Dev_Toggle.c ****     }
  58:Dev/Dev_Toggle.c **** 
  59:Dev/Dev_Toggle.c ****     if (type == Toggle_2Level)
  60:Dev/Dev_Toggle.c ****     {
  61:Dev/Dev_Toggle.c ****         toggle_2level_sum++;
  62:Dev/Dev_Toggle.c ****     }
  63:Dev/Dev_Toggle.c ****     else if (type == Toggle_3Level)
  64:Dev/Dev_Toggle.c ****         toggle_3level_sum++;
  65:Dev/Dev_Toggle.c **** 
  66:Dev/Dev_Toggle.c ****     obj->init_state = true;
  67:Dev/Dev_Toggle.c ****     return true;
  68:Dev/Dev_Toggle.c **** }
  69:Dev/Dev_Toggle.c **** 
  70:Dev/Dev_Toggle.c **** static bool Toggle_Invert(Toggle_Obj_TypeDef *obj)
  71:Dev/Dev_Toggle.c **** {
  77              		.loc 1 71 0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 0
  80              		@ frame_needed = 0, uses_anonymous_args = 0
  81              		@ link register save eliminated.
  82              	.LVL0:
  72:Dev/Dev_Toggle.c ****     if ((obj == NULL) || (!obj->init_state))
  83              		.loc 1 72 0
  84 0000 0346     		mov	r3, r0
  85 0002 30B1     		cbz	r0, .L9
  86              		.loc 1 72 0 is_stmt 0 discriminator 1
  87 0004 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
  88              	.LVL1:
  89 0006 28B1     		cbz	r0, .L8
  73:Dev/Dev_Toggle.c ****         return false;
  74:Dev/Dev_Toggle.c **** 
  75:Dev/Dev_Toggle.c ****     obj->invert = !obj->invert;
  90              		.loc 1 75 0 is_stmt 1
  91 0008 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
  92 000a 82F00102 		eor	r2, r2, #1
  93 000e 9A70     		strb	r2, [r3, #2]
  76:Dev/Dev_Toggle.c **** 
  77:Dev/Dev_Toggle.c ****     return true;
  94              		.loc 1 77 0
  95 0010 7047     		bx	lr
  96              	.LVL2:
  97              	.L9:
  73:Dev/Dev_Toggle.c ****         return false;
  98              		.loc 1 73 0
ARM GAS  /tmp/ccvVZSph.s 			page 4


  99 0012 0020     		movs	r0, #0
 100              	.LVL3:
 101              	.L8:
  78:Dev/Dev_Toggle.c **** }
 102              		.loc 1 78 0
 103 0014 7047     		bx	lr
 104              		.cfi_endproc
 105              	.LFE126:
 107              		.section	.text.Toggle_Get,"ax",%progbits
 108              		.align	1
 109              		.syntax unified
 110              		.thumb
 111              		.thumb_func
 112              		.fpu fpv4-sp-d16
 114              	Toggle_Get:
 115              	.LFB127:
  79:Dev/Dev_Toggle.c **** 
  80:Dev/Dev_Toggle.c **** static DevToggle_Pos_List Toggle_Get(Toggle_Obj_TypeDef *obj)
  81:Dev/Dev_Toggle.c **** {
 116              		.loc 1 81 0
 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 0
 119              		@ frame_needed = 0, uses_anonymous_args = 0
 120              	.LVL4:
  82:Dev/Dev_Toggle.c ****     DevToggle_Pos_List val = Toggle_Err;
  83:Dev/Dev_Toggle.c ****     uint8_t io_read = 0;
  84:Dev/Dev_Toggle.c **** 
  85:Dev/Dev_Toggle.c ****     if ((obj == NULL) || (!obj->init_state))
 121              		.loc 1 85 0
 122 0000 0028     		cmp	r0, #0
 123 0002 2FD0     		beq	.L20
  81:Dev/Dev_Toggle.c ****     DevToggle_Pos_List val = Toggle_Err;
 124              		.loc 1 81 0 discriminator 1
 125 0004 70B5     		push	{r4, r5, r6, lr}
 126              	.LCFI0:
 127              		.cfi_def_cfa_offset 16
 128              		.cfi_offset 4, -16
 129              		.cfi_offset 5, -12
 130              		.cfi_offset 6, -8
 131              		.cfi_offset 14, -4
 132 0006 0546     		mov	r5, r0
 133              		.loc 1 85 0 discriminator 1
 134 0008 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 135 000a 13B1     		cbz	r3, .L31
 136 000c 0024     		movs	r4, #0
 137 000e 2646     		mov	r6, r4
 138 0010 03E0     		b	.L12
 139              	.L31:
  86:Dev/Dev_Toggle.c ****         return Toggle_Err;
 140              		.loc 1 86 0
 141 0012 0320     		movs	r0, #3
 142              	.LVL5:
 143 0014 70BD     		pop	{r4, r5, r6, pc}
 144              	.LVL6:
 145              	.L13:
 146              	.LBB2:
  87:Dev/Dev_Toggle.c **** 
ARM GAS  /tmp/ccvVZSph.s 			page 5


  88:Dev/Dev_Toggle.c ****     for (uint8_t i = 0; i < obj->level; i++)
 147              		.loc 1 88 0 discriminator 2
 148 0016 0134     		adds	r4, r4, #1
 149              	.LVL7:
 150 0018 E4B2     		uxtb	r4, r4
 151              	.LVL8:
 152              	.L12:
 153              		.loc 1 88 0 is_stmt 0 discriminator 1
 154 001a 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 155 001c 9C42     		cmp	r4, r3
 156 001e 0AD2     		bcs	.L32
  89:Dev/Dev_Toggle.c ****     {
  90:Dev/Dev_Toggle.c ****         if (DrvGPIO.get(obj) == GPIO_HIGH)
 157              		.loc 1 90 0 is_stmt 1
 158 0020 154B     		ldr	r3, .L34
 159 0022 DB68     		ldr	r3, [r3, #12]
 160 0024 2846     		mov	r0, r5
 161 0026 9847     		blx	r3
 162              	.LVL9:
 163 0028 0228     		cmp	r0, #2
 164 002a F4D1     		bne	.L13
  91:Dev/Dev_Toggle.c ****         {
  92:Dev/Dev_Toggle.c ****             io_read |= 1 << i;
 165              		.loc 1 92 0
 166 002c 0123     		movs	r3, #1
 167 002e A340     		lsls	r3, r3, r4
 168 0030 3343     		orrs	r3, r3, r6
 169 0032 DEB2     		uxtb	r6, r3
 170              	.LVL10:
 171 0034 EFE7     		b	.L13
 172              	.L32:
 173              	.LBE2:
  93:Dev/Dev_Toggle.c ****         }
  94:Dev/Dev_Toggle.c ****     }
  95:Dev/Dev_Toggle.c **** 
  96:Dev/Dev_Toggle.c ****     switch (io_read)
 174              		.loc 1 96 0
 175 0036 032E     		cmp	r6, #3
 176 0038 13D8     		bhi	.L15
 177 003a DFE806F0 		tbb	[pc, r6]
 178              	.L17:
 179 003e 02       		.byte	(.L16-.L17)/2
 180 003f 0A       		.byte	(.L18-.L17)/2
 181 0040 0E       		.byte	(.L19-.L17)/2
 182 0041 15       		.byte	(.L22-.L17)/2
 183              		.p2align 1
 184              	.L16:
  97:Dev/Dev_Toggle.c ****     {
  98:Dev/Dev_Toggle.c ****     case 0x03:
  99:Dev/Dev_Toggle.c ****         return val;
 100:Dev/Dev_Toggle.c **** 
 101:Dev/Dev_Toggle.c ****     case 0x00:
 102:Dev/Dev_Toggle.c ****         if (obj->level == Toggle_2Level)
 185              		.loc 1 102 0
 186 0042 012B     		cmp	r3, #1
 187 0044 01D0     		beq	.L33
 103:Dev/Dev_Toggle.c ****         {
ARM GAS  /tmp/ccvVZSph.s 			page 6


 104:Dev/Dev_Toggle.c ****             if (!obj->invert)
 105:Dev/Dev_Toggle.c ****             {
 106:Dev/Dev_Toggle.c ****                 return Toggle_Dwn;
 107:Dev/Dev_Toggle.c ****             }
 108:Dev/Dev_Toggle.c ****             else
 109:Dev/Dev_Toggle.c ****                 return Toggle_Up;
 110:Dev/Dev_Toggle.c ****         }
 111:Dev/Dev_Toggle.c ****         else
 112:Dev/Dev_Toggle.c ****             return Toggle_Mid;
 188              		.loc 1 112 0
 189 0046 0220     		movs	r0, #2
 190 0048 70BD     		pop	{r4, r5, r6, pc}
 191              	.LVL11:
 192              	.L33:
 104:Dev/Dev_Toggle.c ****             {
 193              		.loc 1 104 0
 194 004a AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 195 004c 73B9     		cbnz	r3, .L24
 106:Dev/Dev_Toggle.c ****             }
 196              		.loc 1 106 0
 197 004e 0120     		movs	r0, #1
 198 0050 70BD     		pop	{r4, r5, r6, pc}
 199              	.LVL12:
 200              	.L18:
 113:Dev/Dev_Toggle.c **** 
 114:Dev/Dev_Toggle.c ****     case 0x01:
 115:Dev/Dev_Toggle.c ****         if (!obj->invert)
 201              		.loc 1 115 0
 202 0052 AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 203 0054 63B9     		cbnz	r3, .L25
 116:Dev/Dev_Toggle.c ****         {
 117:Dev/Dev_Toggle.c ****             return Toggle_Up;
 204              		.loc 1 117 0
 205 0056 0020     		movs	r0, #0
 206 0058 70BD     		pop	{r4, r5, r6, pc}
 207              	.LVL13:
 208              	.L19:
 118:Dev/Dev_Toggle.c ****         }
 119:Dev/Dev_Toggle.c ****         else
 120:Dev/Dev_Toggle.c ****             return Toggle_Dwn;
 121:Dev/Dev_Toggle.c **** 
 122:Dev/Dev_Toggle.c ****     case 0x02:
 123:Dev/Dev_Toggle.c ****         if (!obj->invert)
 209              		.loc 1 123 0
 210 005a AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 211 005c 53B9     		cbnz	r3, .L26
 124:Dev/Dev_Toggle.c ****         {
 125:Dev/Dev_Toggle.c ****             return Toggle_Dwn;
 212              		.loc 1 125 0
 213 005e 0120     		movs	r0, #1
 214 0060 70BD     		pop	{r4, r5, r6, pc}
 215              	.LVL14:
 216              	.L15:
 126:Dev/Dev_Toggle.c ****         }
 127:Dev/Dev_Toggle.c ****         else
 128:Dev/Dev_Toggle.c ****             return Toggle_Up;
 129:Dev/Dev_Toggle.c ****     }
ARM GAS  /tmp/ccvVZSph.s 			page 7


 130:Dev/Dev_Toggle.c **** }
 217              		.loc 1 130 0
 218 0062 70BD     		pop	{r4, r5, r6, pc}
 219              	.LVL15:
 220              	.L20:
 221              	.LCFI1:
 222              		.cfi_def_cfa_offset 0
 223              		.cfi_restore 4
 224              		.cfi_restore 5
 225              		.cfi_restore 6
 226              		.cfi_restore 14
  86:Dev/Dev_Toggle.c **** 
 227              		.loc 1 86 0
 228 0064 0320     		movs	r0, #3
 229              	.LVL16:
 230 0066 7047     		bx	lr
 231              	.LVL17:
 232              	.L22:
 233              	.LCFI2:
 234              		.cfi_def_cfa_offset 16
 235              		.cfi_offset 4, -16
 236              		.cfi_offset 5, -12
 237              		.cfi_offset 6, -8
 238              		.cfi_offset 14, -4
  99:Dev/Dev_Toggle.c **** 
 239              		.loc 1 99 0
 240 0068 0320     		movs	r0, #3
 241 006a 70BD     		pop	{r4, r5, r6, pc}
 242              	.LVL18:
 243              	.L24:
 109:Dev/Dev_Toggle.c ****         }
 244              		.loc 1 109 0
 245 006c 0020     		movs	r0, #0
 246 006e 70BD     		pop	{r4, r5, r6, pc}
 247              	.LVL19:
 248              	.L25:
 120:Dev/Dev_Toggle.c **** 
 249              		.loc 1 120 0
 250 0070 0120     		movs	r0, #1
 251 0072 70BD     		pop	{r4, r5, r6, pc}
 252              	.LVL20:
 253              	.L26:
 128:Dev/Dev_Toggle.c ****     }
 254              		.loc 1 128 0
 255 0074 0020     		movs	r0, #0
 256              		.loc 1 130 0
 257 0076 70BD     		pop	{r4, r5, r6, pc}
 258              	.LVL21:
 259              	.L35:
 260              		.align	2
 261              	.L34:
 262 0078 00000000 		.word	DrvGPIO
 263              		.cfi_endproc
 264              	.LFE127:
 266              		.section	.text.Toggle_Open,"ax",%progbits
 267              		.align	1
 268              		.syntax unified
ARM GAS  /tmp/ccvVZSph.s 			page 8


 269              		.thumb
 270              		.thumb_func
 271              		.fpu fpv4-sp-d16
 273              	Toggle_Open:
 274              	.LFB125:
  38:Dev/Dev_Toggle.c ****     if ((obj == NULL) || ((type < Toggle_2Level) || (Toggle_2Level > Toggle_3Level)))
 275              		.loc 1 38 0
 276              		.cfi_startproc
 277              		@ args = 0, pretend = 0, frame = 0
 278              		@ frame_needed = 0, uses_anonymous_args = 0
 279              	.LVL22:
 280 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 281              	.LCFI3:
 282              		.cfi_def_cfa_offset 24
 283              		.cfi_offset 3, -24
 284              		.cfi_offset 4, -20
 285              		.cfi_offset 5, -16
 286              		.cfi_offset 6, -12
 287              		.cfi_offset 7, -8
 288              		.cfi_offset 14, -4
  39:Dev/Dev_Toggle.c ****     {
 289              		.loc 1 39 0
 290 0002 0546     		mov	r5, r0
 291 0004 00B1     		cbz	r0, .L37
  39:Dev/Dev_Toggle.c ****     {
 292              		.loc 1 39 0 is_stmt 0 discriminator 1
 293 0006 11B9     		cbnz	r1, .L38
 294              	.L37:
  41:Dev/Dev_Toggle.c ****         return false;
 295              		.loc 1 41 0 is_stmt 1
 296 0008 0020     		movs	r0, #0
 297              	.LVL23:
 298 000a 2870     		strb	r0, [r5]
  42:Dev/Dev_Toggle.c ****     }
 299              		.loc 1 42 0
 300 000c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 301              	.LVL24:
 302              	.L38:
 303 000e 1746     		mov	r7, r2
 304 0010 0E46     		mov	r6, r1
  45:Dev/Dev_Toggle.c ****     obj->invert = false;
 305              		.loc 1 45 0
 306 0012 6970     		strb	r1, [r5, #1]
  46:Dev/Dev_Toggle.c **** 
 307              		.loc 1 46 0
 308 0014 0024     		movs	r4, #0
 309 0016 8470     		strb	r4, [r0, #2]
  48:Dev/Dev_Toggle.c **** 
 310              		.loc 1 48 0
 311 0018 4460     		str	r4, [r0, #4]	@ unaligned
 312 001a 8460     		str	r4, [r0, #8]	@ unaligned
 313              	.LVL25:
 314              	.LBB3:
  51:Dev/Dev_Toggle.c ****     {
 315              		.loc 1 51 0
 316 001c 0CE0     		b	.L40
 317              	.LVL26:
ARM GAS  /tmp/ccvVZSph.s 			page 9


 318              	.L41:
  53:Dev/Dev_Toggle.c **** 
 319              		.loc 1 53 0 discriminator 3
 320 001e 07EB0413 		add	r3, r7, r4, lsl #4
 321 0022 05EB8400 		add	r0, r5, r4, lsl #2
 322 0026 40F8043F 		str	r3, [r0, #4]!
  56:Dev/Dev_Toggle.c ****     }
 323              		.loc 1 56 0 discriminator 3
 324 002a 0D4B     		ldr	r3, .L47
 325 002c 1B68     		ldr	r3, [r3]
 326 002e 0022     		movs	r2, #0
 327 0030 0121     		movs	r1, #1
 328 0032 9847     		blx	r3
 329              	.LVL27:
  51:Dev/Dev_Toggle.c ****     {
 330              		.loc 1 51 0 discriminator 3
 331 0034 0134     		adds	r4, r4, #1
 332              	.LVL28:
 333 0036 E4B2     		uxtb	r4, r4
 334              	.LVL29:
 335              	.L40:
  51:Dev/Dev_Toggle.c ****     {
 336              		.loc 1 51 0 is_stmt 0 discriminator 1
 337 0038 B442     		cmp	r4, r6
 338 003a F0D3     		bcc	.L41
 339              	.LBE3:
  59:Dev/Dev_Toggle.c ****     {
 340              		.loc 1 59 0 is_stmt 1
 341 003c 012E     		cmp	r6, #1
 342 003e 04D0     		beq	.L45
  63:Dev/Dev_Toggle.c ****         toggle_3level_sum++;
 343              		.loc 1 63 0
 344 0040 022E     		cmp	r6, #2
 345 0042 07D0     		beq	.L46
 346              	.L43:
  66:Dev/Dev_Toggle.c ****     return true;
 347              		.loc 1 66 0
 348 0044 0120     		movs	r0, #1
 349 0046 2870     		strb	r0, [r5]
  68:Dev/Dev_Toggle.c **** 
 350              		.loc 1 68 0
 351 0048 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 352              	.LVL30:
 353              	.L45:
  61:Dev/Dev_Toggle.c ****     }
 354              		.loc 1 61 0
 355 004a 064A     		ldr	r2, .L47+4
 356 004c 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 357 004e 0133     		adds	r3, r3, #1
 358 0050 1370     		strb	r3, [r2]
 359 0052 F7E7     		b	.L43
 360              	.L46:
  64:Dev/Dev_Toggle.c **** 
 361              		.loc 1 64 0
 362 0054 044A     		ldr	r2, .L47+8
 363 0056 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 364 0058 0133     		adds	r3, r3, #1
ARM GAS  /tmp/ccvVZSph.s 			page 10


 365 005a 1370     		strb	r3, [r2]
 366 005c F2E7     		b	.L43
 367              	.L48:
 368 005e 00BF     		.align	2
 369              	.L47:
 370 0060 00000000 		.word	DrvGPIO
 371 0064 00000000 		.word	.LANCHOR0
 372 0068 00000000 		.word	.LANCHOR1
 373              		.cfi_endproc
 374              	.LFE125:
 376              		.global	DevToggle
 377              		.section	.bss.toggle_2level_sum,"aw",%nobits
 378              		.set	.LANCHOR0,. + 0
 381              	toggle_2level_sum:
 382 0000 00       		.space	1
 383              		.section	.bss.toggle_3level_sum,"aw",%nobits
 384              		.set	.LANCHOR1,. + 0
 387              	toggle_3level_sum:
 388 0000 00       		.space	1
 389              		.section	.data.DevToggle,"aw",%progbits
 390              		.align	2
 393              	DevToggle:
 394 0000 00000000 		.word	Toggle_Open
 395 0004 00000000 		.word	Toggle_Invert
 396 0008 00000000 		.word	Toggle_Get
 397 000c 00000000 		.word	Toggle_Get_2Level_Sum
 398 0010 00000000 		.word	Toggle_Get_3Level_Sum
 399              		.text
 400              	.Letext0:
 401              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 402              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 403              		.file 4 "F4_CORE/core_cm4.h"
 404              		.file 5 "USER/system_stm32f4xx.h"
 405              		.file 6 "Bsp/periph_gpio.h"
 406              		.file 7 "Drv/drv_gpio.h"
 407              		.file 8 "Dev/Dev_Toggle.h"
 408              		.file 9 "/usr/include/newlib/sys/lock.h"
 409              		.file 10 "/usr/include/newlib/sys/_types.h"
 410              		.file 11 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 411              		.file 12 "/usr/include/newlib/sys/reent.h"
ARM GAS  /tmp/ccvVZSph.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Dev_Toggle.c
     /tmp/ccvVZSph.s:18     .text.Toggle_Get_2Level_Sum:0000000000000000 $t
     /tmp/ccvVZSph.s:24     .text.Toggle_Get_2Level_Sum:0000000000000000 Toggle_Get_2Level_Sum
     /tmp/ccvVZSph.s:39     .text.Toggle_Get_2Level_Sum:0000000000000008 $d
     /tmp/ccvVZSph.s:44     .text.Toggle_Get_3Level_Sum:0000000000000000 $t
     /tmp/ccvVZSph.s:50     .text.Toggle_Get_3Level_Sum:0000000000000000 Toggle_Get_3Level_Sum
     /tmp/ccvVZSph.s:64     .text.Toggle_Get_3Level_Sum:0000000000000008 $d
     /tmp/ccvVZSph.s:69     .text.Toggle_Invert:0000000000000000 $t
     /tmp/ccvVZSph.s:75     .text.Toggle_Invert:0000000000000000 Toggle_Invert
     /tmp/ccvVZSph.s:108    .text.Toggle_Get:0000000000000000 $t
     /tmp/ccvVZSph.s:114    .text.Toggle_Get:0000000000000000 Toggle_Get
     /tmp/ccvVZSph.s:179    .text.Toggle_Get:000000000000003e $d
     /tmp/ccvVZSph.s:183    .text.Toggle_Get:0000000000000042 $t
     /tmp/ccvVZSph.s:262    .text.Toggle_Get:0000000000000078 $d
     /tmp/ccvVZSph.s:267    .text.Toggle_Open:0000000000000000 $t
     /tmp/ccvVZSph.s:273    .text.Toggle_Open:0000000000000000 Toggle_Open
     /tmp/ccvVZSph.s:370    .text.Toggle_Open:0000000000000060 $d
     /tmp/ccvVZSph.s:393    .data.DevToggle:0000000000000000 DevToggle
     /tmp/ccvVZSph.s:381    .bss.toggle_2level_sum:0000000000000000 toggle_2level_sum
     /tmp/ccvVZSph.s:382    .bss.toggle_2level_sum:0000000000000000 $d
     /tmp/ccvVZSph.s:387    .bss.toggle_3level_sum:0000000000000000 toggle_3level_sum
     /tmp/ccvVZSph.s:388    .bss.toggle_3level_sum:0000000000000000 $d
     /tmp/ccvVZSph.s:390    .data.DevToggle:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
DrvGPIO
