ARM GAS  C:\Users\huav\AppData\Local\Temp\ccIiOVvc.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_hash_md5.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HASH_MD5,"ax",%progbits
  18              		.align	1
  19              		.global	HASH_MD5
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	HASH_MD5:
  27              	.LVL0:
  28              	.LFB123:
  29              		.file 1 "FWLIB/src/stm32f4xx_hash_md5.c"
   1:FWLIB/src/stm32f4xx_hash_md5.c **** /**
   2:FWLIB/src/stm32f4xx_hash_md5.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_hash_md5.c ****   * @file    stm32f4xx_hash_md5.c
   4:FWLIB/src/stm32f4xx_hash_md5.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_hash_md5.c ****   * @version V1.8.0
   6:FWLIB/src/stm32f4xx_hash_md5.c ****   * @date    04-November-2016
   7:FWLIB/src/stm32f4xx_hash_md5.c ****   * @brief   This file provides high level functions to compute the HASH MD5 and
   8:FWLIB/src/stm32f4xx_hash_md5.c ****   *          HMAC MD5 Digest of an input message.
   9:FWLIB/src/stm32f4xx_hash_md5.c ****   *          It uses the stm32f4xx_hash.c/.h drivers to access the STM32F4xx HASH
  10:FWLIB/src/stm32f4xx_hash_md5.c ****   *          peripheral.
  11:FWLIB/src/stm32f4xx_hash_md5.c ****   *
  12:FWLIB/src/stm32f4xx_hash_md5.c **** @verbatim
  13:FWLIB/src/stm32f4xx_hash_md5.c ****  ===================================================================
  14:FWLIB/src/stm32f4xx_hash_md5.c ****                   ##### How to use this driver #####
  15:FWLIB/src/stm32f4xx_hash_md5.c ****  ===================================================================
  16:FWLIB/src/stm32f4xx_hash_md5.c ****  [..]
  17:FWLIB/src/stm32f4xx_hash_md5.c ****    (#) Enable The HASH controller clock using 
  18:FWLIB/src/stm32f4xx_hash_md5.c ****        RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_HASH, ENABLE); function.
  19:FWLIB/src/stm32f4xx_hash_md5.c ****   
  20:FWLIB/src/stm32f4xx_hash_md5.c ****    (#) Calculate the HASH MD5 Digest using HASH_MD5() function.
  21:FWLIB/src/stm32f4xx_hash_md5.c ****   
  22:FWLIB/src/stm32f4xx_hash_md5.c ****    (#) Calculate the HMAC MD5 Digest using HMAC_MD5() function.
  23:FWLIB/src/stm32f4xx_hash_md5.c ****   
  24:FWLIB/src/stm32f4xx_hash_md5.c **** @endverbatim
  25:FWLIB/src/stm32f4xx_hash_md5.c ****   *
  26:FWLIB/src/stm32f4xx_hash_md5.c ****   ******************************************************************************
  27:FWLIB/src/stm32f4xx_hash_md5.c ****   * @attention
  28:FWLIB/src/stm32f4xx_hash_md5.c ****   *
  29:FWLIB/src/stm32f4xx_hash_md5.c ****   * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccIiOVvc.s 			page 2


  30:FWLIB/src/stm32f4xx_hash_md5.c ****   *
  31:FWLIB/src/stm32f4xx_hash_md5.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  32:FWLIB/src/stm32f4xx_hash_md5.c ****   * You may not use this file except in compliance with the License.
  33:FWLIB/src/stm32f4xx_hash_md5.c ****   * You may obtain a copy of the License at:
  34:FWLIB/src/stm32f4xx_hash_md5.c ****   *
  35:FWLIB/src/stm32f4xx_hash_md5.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  36:FWLIB/src/stm32f4xx_hash_md5.c ****   *
  37:FWLIB/src/stm32f4xx_hash_md5.c ****   * Unless required by applicable law or agreed to in writing, software 
  38:FWLIB/src/stm32f4xx_hash_md5.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  39:FWLIB/src/stm32f4xx_hash_md5.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  40:FWLIB/src/stm32f4xx_hash_md5.c ****   * See the License for the specific language governing permissions and
  41:FWLIB/src/stm32f4xx_hash_md5.c ****   * limitations under the License.
  42:FWLIB/src/stm32f4xx_hash_md5.c ****   *
  43:FWLIB/src/stm32f4xx_hash_md5.c ****   ******************************************************************************
  44:FWLIB/src/stm32f4xx_hash_md5.c ****   */
  45:FWLIB/src/stm32f4xx_hash_md5.c **** 
  46:FWLIB/src/stm32f4xx_hash_md5.c **** /* Includes ------------------------------------------------------------------*/
  47:FWLIB/src/stm32f4xx_hash_md5.c **** #include "stm32f4xx_hash.h"
  48:FWLIB/src/stm32f4xx_hash_md5.c **** 
  49:FWLIB/src/stm32f4xx_hash_md5.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  50:FWLIB/src/stm32f4xx_hash_md5.c ****   * @{
  51:FWLIB/src/stm32f4xx_hash_md5.c ****   */
  52:FWLIB/src/stm32f4xx_hash_md5.c **** 
  53:FWLIB/src/stm32f4xx_hash_md5.c **** /** @defgroup HASH 
  54:FWLIB/src/stm32f4xx_hash_md5.c ****   * @brief HASH driver modules
  55:FWLIB/src/stm32f4xx_hash_md5.c ****   * @{
  56:FWLIB/src/stm32f4xx_hash_md5.c ****   */
  57:FWLIB/src/stm32f4xx_hash_md5.c **** 
  58:FWLIB/src/stm32f4xx_hash_md5.c **** /* Private typedef -----------------------------------------------------------*/
  59:FWLIB/src/stm32f4xx_hash_md5.c **** /* Private define ------------------------------------------------------------*/
  60:FWLIB/src/stm32f4xx_hash_md5.c **** #define MD5BUSY_TIMEOUT    ((uint32_t) 0x00010000)
  61:FWLIB/src/stm32f4xx_hash_md5.c **** 
  62:FWLIB/src/stm32f4xx_hash_md5.c **** /* Private macro -------------------------------------------------------------*/
  63:FWLIB/src/stm32f4xx_hash_md5.c **** /* Private variables ---------------------------------------------------------*/
  64:FWLIB/src/stm32f4xx_hash_md5.c **** /* Private function prototypes -----------------------------------------------*/
  65:FWLIB/src/stm32f4xx_hash_md5.c **** /* Private functions ---------------------------------------------------------*/
  66:FWLIB/src/stm32f4xx_hash_md5.c **** 
  67:FWLIB/src/stm32f4xx_hash_md5.c **** /** @defgroup HASH_Private_Functions
  68:FWLIB/src/stm32f4xx_hash_md5.c ****   * @{
  69:FWLIB/src/stm32f4xx_hash_md5.c ****   */ 
  70:FWLIB/src/stm32f4xx_hash_md5.c **** 
  71:FWLIB/src/stm32f4xx_hash_md5.c **** /** @defgroup HASH_Group7 High Level MD5 functions
  72:FWLIB/src/stm32f4xx_hash_md5.c ****  *  @brief   High Level MD5 Hash and HMAC functions 
  73:FWLIB/src/stm32f4xx_hash_md5.c ****  *
  74:FWLIB/src/stm32f4xx_hash_md5.c **** @verbatim   
  75:FWLIB/src/stm32f4xx_hash_md5.c ****  ===============================================================================
  76:FWLIB/src/stm32f4xx_hash_md5.c ****               ##### High Level MD5 Hash and HMAC functions #####
  77:FWLIB/src/stm32f4xx_hash_md5.c ****  ===============================================================================
  78:FWLIB/src/stm32f4xx_hash_md5.c **** 
  79:FWLIB/src/stm32f4xx_hash_md5.c **** 
  80:FWLIB/src/stm32f4xx_hash_md5.c **** @endverbatim
  81:FWLIB/src/stm32f4xx_hash_md5.c ****   * @{
  82:FWLIB/src/stm32f4xx_hash_md5.c ****   */
  83:FWLIB/src/stm32f4xx_hash_md5.c **** 
  84:FWLIB/src/stm32f4xx_hash_md5.c **** /**
  85:FWLIB/src/stm32f4xx_hash_md5.c ****   * @brief  Compute the HASH MD5 digest.
  86:FWLIB/src/stm32f4xx_hash_md5.c ****   * @param  Input: pointer to the Input buffer to be treated.
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccIiOVvc.s 			page 3


  87:FWLIB/src/stm32f4xx_hash_md5.c ****   * @param  Ilen: length of the Input buffer.
  88:FWLIB/src/stm32f4xx_hash_md5.c ****   * @param  Output: the returned digest
  89:FWLIB/src/stm32f4xx_hash_md5.c ****   * @retval An ErrorStatus enumeration value:
  90:FWLIB/src/stm32f4xx_hash_md5.c ****   *          - SUCCESS: digest computation done
  91:FWLIB/src/stm32f4xx_hash_md5.c ****   *          - ERROR: digest computation failed
  92:FWLIB/src/stm32f4xx_hash_md5.c ****   */
  93:FWLIB/src/stm32f4xx_hash_md5.c **** ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
  94:FWLIB/src/stm32f4xx_hash_md5.c **** {
  30              		.loc 1 94 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 56
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 94 1 is_stmt 0 view .LVU1
  35 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 20
  38              		.cfi_offset 4, -20
  39              		.cfi_offset 5, -16
  40              		.cfi_offset 6, -12
  41              		.cfi_offset 7, -8
  42              		.cfi_offset 14, -4
  43 0002 8FB0     		sub	sp, sp, #60
  44              	.LCFI1:
  45              		.cfi_def_cfa_offset 80
  46 0004 0F46     		mov	r7, r1
  47 0006 1646     		mov	r6, r2
  95:FWLIB/src/stm32f4xx_hash_md5.c ****   HASH_InitTypeDef MD5_HASH_InitStructure;
  48              		.loc 1 95 3 is_stmt 1 view .LVU2
  96:FWLIB/src/stm32f4xx_hash_md5.c ****   HASH_MsgDigest MD5_MessageDigest;
  49              		.loc 1 96 3 view .LVU3
  97:FWLIB/src/stm32f4xx_hash_md5.c ****   __IO uint16_t nbvalidbitsdata = 0;
  50              		.loc 1 97 3 view .LVU4
  51              		.loc 1 97 17 is_stmt 0 view .LVU5
  52 0008 0024     		movs	r4, #0
  53 000a ADF80640 		strh	r4, [sp, #6]	@ movhi
  98:FWLIB/src/stm32f4xx_hash_md5.c ****   uint32_t i = 0;
  54              		.loc 1 98 3 is_stmt 1 view .LVU6
  55              	.LVL1:
  99:FWLIB/src/stm32f4xx_hash_md5.c ****   __IO uint32_t counter = 0;
  56              		.loc 1 99 3 view .LVU7
  57              		.loc 1 99 17 is_stmt 0 view .LVU8
  58 000e 0094     		str	r4, [sp]
 100:FWLIB/src/stm32f4xx_hash_md5.c ****   uint32_t busystatus = 0;
  59              		.loc 1 100 3 is_stmt 1 view .LVU9
  60              	.LVL2:
 101:FWLIB/src/stm32f4xx_hash_md5.c ****   ErrorStatus status = SUCCESS;
  61              		.loc 1 101 3 view .LVU10
 102:FWLIB/src/stm32f4xx_hash_md5.c ****   uint32_t inputaddr  = (uint32_t)Input;
  62              		.loc 1 102 3 view .LVU11
  63              		.loc 1 102 12 is_stmt 0 view .LVU12
  64 0010 0546     		mov	r5, r0
  65              	.LVL3:
 103:FWLIB/src/stm32f4xx_hash_md5.c ****   uint32_t outputaddr = (uint32_t)Output;
  66              		.loc 1 103 3 is_stmt 1 view .LVU13
 104:FWLIB/src/stm32f4xx_hash_md5.c **** 
 105:FWLIB/src/stm32f4xx_hash_md5.c **** 
 106:FWLIB/src/stm32f4xx_hash_md5.c ****   /* Number of valid bits in last word of the Input data */
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccIiOVvc.s 			page 4


 107:FWLIB/src/stm32f4xx_hash_md5.c ****   nbvalidbitsdata = 8 * (Ilen % 4);
  67              		.loc 1 107 3 view .LVU14
  68              		.loc 1 107 19 is_stmt 0 view .LVU15
  69 0012 01F00303 		and	r3, r1, #3
  70 0016 DB00     		lsls	r3, r3, #3
  71 0018 ADF80630 		strh	r3, [sp, #6]	@ movhi
 108:FWLIB/src/stm32f4xx_hash_md5.c **** 
 109:FWLIB/src/stm32f4xx_hash_md5.c ****   /* HASH peripheral initialization */
 110:FWLIB/src/stm32f4xx_hash_md5.c ****   HASH_DeInit();
  72              		.loc 1 110 3 is_stmt 1 view .LVU16
  73 001c FFF7FEFF 		bl	HASH_DeInit
  74              	.LVL4:
 111:FWLIB/src/stm32f4xx_hash_md5.c **** 
 112:FWLIB/src/stm32f4xx_hash_md5.c ****   /* HASH Configuration */
 113:FWLIB/src/stm32f4xx_hash_md5.c ****   MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
  75              		.loc 1 113 3 view .LVU17
  76              		.loc 1 113 45 is_stmt 0 view .LVU18
  77 0020 8023     		movs	r3, #128
  78 0022 0A93     		str	r3, [sp, #40]
 114:FWLIB/src/stm32f4xx_hash_md5.c ****   MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
  79              		.loc 1 114 3 is_stmt 1 view .LVU19
  80              		.loc 1 114 40 is_stmt 0 view .LVU20
  81 0024 0B94     		str	r4, [sp, #44]
 115:FWLIB/src/stm32f4xx_hash_md5.c ****   MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
  82              		.loc 1 115 3 is_stmt 1 view .LVU21
  83              		.loc 1 115 40 is_stmt 0 view .LVU22
  84 0026 2023     		movs	r3, #32
  85 0028 0C93     		str	r3, [sp, #48]
 116:FWLIB/src/stm32f4xx_hash_md5.c ****   HASH_Init(&MD5_HASH_InitStructure);
  86              		.loc 1 116 3 is_stmt 1 view .LVU23
  87 002a 0AA8     		add	r0, sp, #40
  88 002c FFF7FEFF 		bl	HASH_Init
  89              	.LVL5:
 117:FWLIB/src/stm32f4xx_hash_md5.c **** 
 118:FWLIB/src/stm32f4xx_hash_md5.c ****   /* Configure the number of valid bits in last word of the data */
 119:FWLIB/src/stm32f4xx_hash_md5.c ****   HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
  90              		.loc 1 119 3 view .LVU24
  91 0030 BDF80600 		ldrh	r0, [sp, #6]
  92 0034 80B2     		uxth	r0, r0
  93 0036 FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
  94              	.LVL6:
 120:FWLIB/src/stm32f4xx_hash_md5.c **** 
 121:FWLIB/src/stm32f4xx_hash_md5.c ****   /* Write the Input block in the IN FIFO */
 122:FWLIB/src/stm32f4xx_hash_md5.c ****   for(i=0; i<Ilen; i+=4)
  95              		.loc 1 122 3 view .LVU25
  96              		.loc 1 122 3 is_stmt 0 view .LVU26
  97 003a 04E0     		b	.L2
  98              	.LVL7:
  99              	.L3:
 123:FWLIB/src/stm32f4xx_hash_md5.c ****   {
 124:FWLIB/src/stm32f4xx_hash_md5.c ****     HASH_DataIn(*(uint32_t*)inputaddr);
 100              		.loc 1 124 5 is_stmt 1 discriminator 3 view .LVU27
 101 003c 55F8040B 		ldr	r0, [r5], #4
 102              	.LVL8:
 103              		.loc 1 124 5 is_stmt 0 discriminator 3 view .LVU28
 104 0040 FFF7FEFF 		bl	HASH_DataIn
 105              	.LVL9:
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccIiOVvc.s 			page 5


 125:FWLIB/src/stm32f4xx_hash_md5.c ****     inputaddr+=4;
 106              		.loc 1 125 5 is_stmt 1 discriminator 3 view .LVU29
 122:FWLIB/src/stm32f4xx_hash_md5.c ****   {
 107              		.loc 1 122 20 discriminator 3 view .LVU30
 122:FWLIB/src/stm32f4xx_hash_md5.c ****   {
 108              		.loc 1 122 21 is_stmt 0 discriminator 3 view .LVU31
 109 0044 0434     		adds	r4, r4, #4
 110              	.LVL10:
 111              	.L2:
 122:FWLIB/src/stm32f4xx_hash_md5.c ****   {
 112              		.loc 1 122 12 is_stmt 1 discriminator 1 view .LVU32
 122:FWLIB/src/stm32f4xx_hash_md5.c ****   {
 113              		.loc 1 122 3 is_stmt 0 discriminator 1 view .LVU33
 114 0046 BC42     		cmp	r4, r7
 115 0048 F8D3     		bcc	.L3
 126:FWLIB/src/stm32f4xx_hash_md5.c ****   }
 127:FWLIB/src/stm32f4xx_hash_md5.c **** 
 128:FWLIB/src/stm32f4xx_hash_md5.c ****   /* Start the HASH processor */
 129:FWLIB/src/stm32f4xx_hash_md5.c ****   HASH_StartDigest();
 116              		.loc 1 129 3 is_stmt 1 view .LVU34
 117 004a FFF7FEFF 		bl	HASH_StartDigest
 118              	.LVL11:
 119              	.L5:
 130:FWLIB/src/stm32f4xx_hash_md5.c **** 
 131:FWLIB/src/stm32f4xx_hash_md5.c ****   /* wait until the Busy flag is RESET */
 132:FWLIB/src/stm32f4xx_hash_md5.c ****   do
 120              		.loc 1 132 3 discriminator 2 view .LVU35
 133:FWLIB/src/stm32f4xx_hash_md5.c ****   {
 134:FWLIB/src/stm32f4xx_hash_md5.c ****     busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 121              		.loc 1 134 5 discriminator 2 view .LVU36
 122              		.loc 1 134 18 is_stmt 0 discriminator 2 view .LVU37
 123 004e 0820     		movs	r0, #8
 124 0050 FFF7FEFF 		bl	HASH_GetFlagStatus
 125              	.LVL12:
 135:FWLIB/src/stm32f4xx_hash_md5.c ****     counter++;
 126              		.loc 1 135 5 is_stmt 1 discriminator 2 view .LVU38
 127              		.loc 1 135 12 is_stmt 0 discriminator 2 view .LVU39
 128 0054 009B     		ldr	r3, [sp]
 129 0056 0133     		adds	r3, r3, #1
 130 0058 0093     		str	r3, [sp]
 136:FWLIB/src/stm32f4xx_hash_md5.c ****   }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 131              		.loc 1 136 10 is_stmt 1 discriminator 2 view .LVU40
 132              		.loc 1 136 20 is_stmt 0 discriminator 2 view .LVU41
 133 005a 009B     		ldr	r3, [sp]
 134              		.loc 1 136 3 discriminator 2 view .LVU42
 135 005c B3F5803F 		cmp	r3, #65536
 136 0060 01D0     		beq	.L4
 137              		.loc 1 136 40 discriminator 1 view .LVU43
 138 0062 0028     		cmp	r0, #0
 139 0064 F3D1     		bne	.L5
 140              	.L4:
 137:FWLIB/src/stm32f4xx_hash_md5.c **** 
 138:FWLIB/src/stm32f4xx_hash_md5.c ****   if (busystatus != RESET)
 141              		.loc 1 138 3 is_stmt 1 view .LVU44
 142              		.loc 1 138 6 is_stmt 0 view .LVU45
 143 0066 10B1     		cbz	r0, .L9
 139:FWLIB/src/stm32f4xx_hash_md5.c ****   {
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccIiOVvc.s 			page 6


 140:FWLIB/src/stm32f4xx_hash_md5.c ****      status = ERROR;
 144              		.loc 1 140 13 view .LVU46
 145 0068 0020     		movs	r0, #0
 146              	.LVL13:
 147              	.L6:
 141:FWLIB/src/stm32f4xx_hash_md5.c ****   }
 142:FWLIB/src/stm32f4xx_hash_md5.c ****   else
 143:FWLIB/src/stm32f4xx_hash_md5.c ****   {
 144:FWLIB/src/stm32f4xx_hash_md5.c ****     /* Read the message digest */
 145:FWLIB/src/stm32f4xx_hash_md5.c ****     HASH_GetDigest(&MD5_MessageDigest);
 146:FWLIB/src/stm32f4xx_hash_md5.c ****     *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 147:FWLIB/src/stm32f4xx_hash_md5.c ****     outputaddr+=4;
 148:FWLIB/src/stm32f4xx_hash_md5.c ****     *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 149:FWLIB/src/stm32f4xx_hash_md5.c ****     outputaddr+=4;
 150:FWLIB/src/stm32f4xx_hash_md5.c ****     *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 151:FWLIB/src/stm32f4xx_hash_md5.c ****     outputaddr+=4;
 152:FWLIB/src/stm32f4xx_hash_md5.c ****     *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 153:FWLIB/src/stm32f4xx_hash_md5.c ****   }
 154:FWLIB/src/stm32f4xx_hash_md5.c ****   return status; 
 148              		.loc 1 154 3 is_stmt 1 view .LVU47
 155:FWLIB/src/stm32f4xx_hash_md5.c **** }
 149              		.loc 1 155 1 is_stmt 0 view .LVU48
 150 006a 0FB0     		add	sp, sp, #60
 151              	.LCFI2:
 152              		.cfi_remember_state
 153              		.cfi_def_cfa_offset 20
 154              		@ sp needed
 155 006c F0BD     		pop	{r4, r5, r6, r7, pc}
 156              	.LVL14:
 157              	.L9:
 158              	.LCFI3:
 159              		.cfi_restore_state
 145:FWLIB/src/stm32f4xx_hash_md5.c ****     *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 160              		.loc 1 145 5 is_stmt 1 view .LVU49
 161 006e 02A8     		add	r0, sp, #8
 162              	.LVL15:
 145:FWLIB/src/stm32f4xx_hash_md5.c ****     *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 163              		.loc 1 145 5 is_stmt 0 view .LVU50
 164 0070 FFF7FEFF 		bl	HASH_GetDigest
 165              	.LVL16:
 146:FWLIB/src/stm32f4xx_hash_md5.c ****     outputaddr+=4;
 166              		.loc 1 146 5 is_stmt 1 view .LVU51
 146:FWLIB/src/stm32f4xx_hash_md5.c ****     outputaddr+=4;
 167              		.loc 1 146 33 is_stmt 0 view .LVU52
 168 0074 029B     		ldr	r3, [sp, #8]
 169              	.LVL17:
 170              	.LBB18:
 171              	.LBI18:
 172              		.file 2 "F4_CORE/core_cmInstr.h"
   1:F4_CORE/core_cmInstr.h **** /**************************************************************************//**
   2:F4_CORE/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:F4_CORE/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:F4_CORE/core_cmInstr.h ****  * @version  V4.10
   5:F4_CORE/core_cmInstr.h ****  * @date     18. March 2015
   6:F4_CORE/core_cmInstr.h ****  *
   7:F4_CORE/core_cmInstr.h ****  * @note
   8:F4_CORE/core_cmInstr.h ****  *
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccIiOVvc.s 			page 7


   9:F4_CORE/core_cmInstr.h ****  ******************************************************************************/
  10:F4_CORE/core_cmInstr.h **** /* Copyright (c) 2009 - 2014 ARM LIMITED
  11:F4_CORE/core_cmInstr.h **** 
  12:F4_CORE/core_cmInstr.h ****    All rights reserved.
  13:F4_CORE/core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:F4_CORE/core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:F4_CORE/core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:F4_CORE/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:F4_CORE/core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:F4_CORE/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:F4_CORE/core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:F4_CORE/core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:F4_CORE/core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:F4_CORE/core_cmInstr.h ****      specific prior written permission.
  23:F4_CORE/core_cmInstr.h ****    *
  24:F4_CORE/core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:F4_CORE/core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:F4_CORE/core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:F4_CORE/core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:F4_CORE/core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:F4_CORE/core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:F4_CORE/core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:F4_CORE/core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:F4_CORE/core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:F4_CORE/core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:F4_CORE/core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:F4_CORE/core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:F4_CORE/core_cmInstr.h **** 
  37:F4_CORE/core_cmInstr.h **** 
  38:F4_CORE/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:F4_CORE/core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:F4_CORE/core_cmInstr.h **** 
  41:F4_CORE/core_cmInstr.h **** 
  42:F4_CORE/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:F4_CORE/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:F4_CORE/core_cmInstr.h ****   Access to dedicated instructions
  45:F4_CORE/core_cmInstr.h ****   @{
  46:F4_CORE/core_cmInstr.h **** */
  47:F4_CORE/core_cmInstr.h **** 
  48:F4_CORE/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:F4_CORE/core_cmInstr.h **** /* ARM armcc specific functions */
  50:F4_CORE/core_cmInstr.h **** 
  51:F4_CORE/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:F4_CORE/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:F4_CORE/core_cmInstr.h **** #endif
  54:F4_CORE/core_cmInstr.h **** 
  55:F4_CORE/core_cmInstr.h **** 
  56:F4_CORE/core_cmInstr.h **** /** \brief  No Operation
  57:F4_CORE/core_cmInstr.h **** 
  58:F4_CORE/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:F4_CORE/core_cmInstr.h ****  */
  60:F4_CORE/core_cmInstr.h **** #define __NOP                             __nop
  61:F4_CORE/core_cmInstr.h **** 
  62:F4_CORE/core_cmInstr.h **** 
  63:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:F4_CORE/core_cmInstr.h **** 
  65:F4_CORE/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccIiOVvc.s 			page 8


  66:F4_CORE/core_cmInstr.h ****     until one of a number of events occurs.
  67:F4_CORE/core_cmInstr.h ****  */
  68:F4_CORE/core_cmInstr.h **** #define __WFI                             __wfi
  69:F4_CORE/core_cmInstr.h **** 
  70:F4_CORE/core_cmInstr.h **** 
  71:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Event
  72:F4_CORE/core_cmInstr.h **** 
  73:F4_CORE/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:F4_CORE/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:F4_CORE/core_cmInstr.h ****  */
  76:F4_CORE/core_cmInstr.h **** #define __WFE                             __wfe
  77:F4_CORE/core_cmInstr.h **** 
  78:F4_CORE/core_cmInstr.h **** 
  79:F4_CORE/core_cmInstr.h **** /** \brief  Send Event
  80:F4_CORE/core_cmInstr.h **** 
  81:F4_CORE/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:F4_CORE/core_cmInstr.h ****  */
  83:F4_CORE/core_cmInstr.h **** #define __SEV                             __sev
  84:F4_CORE/core_cmInstr.h **** 
  85:F4_CORE/core_cmInstr.h **** 
  86:F4_CORE/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:F4_CORE/core_cmInstr.h **** 
  88:F4_CORE/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:F4_CORE/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:F4_CORE/core_cmInstr.h ****     memory, after the instruction has been completed.
  91:F4_CORE/core_cmInstr.h ****  */
  92:F4_CORE/core_cmInstr.h **** #define __ISB() do {\
  93:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
  94:F4_CORE/core_cmInstr.h ****                    __isb(0xF);\
  95:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
  96:F4_CORE/core_cmInstr.h ****                 } while (0)
  97:F4_CORE/core_cmInstr.h **** 
  98:F4_CORE/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  99:F4_CORE/core_cmInstr.h **** 
 100:F4_CORE/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 101:F4_CORE/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 102:F4_CORE/core_cmInstr.h ****  */
 103:F4_CORE/core_cmInstr.h **** #define __DSB() do {\
 104:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 105:F4_CORE/core_cmInstr.h ****                    __dsb(0xF);\
 106:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 107:F4_CORE/core_cmInstr.h ****                 } while (0)
 108:F4_CORE/core_cmInstr.h **** 
 109:F4_CORE/core_cmInstr.h **** /** \brief  Data Memory Barrier
 110:F4_CORE/core_cmInstr.h **** 
 111:F4_CORE/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 112:F4_CORE/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 113:F4_CORE/core_cmInstr.h ****  */
 114:F4_CORE/core_cmInstr.h **** #define __DMB() do {\
 115:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 116:F4_CORE/core_cmInstr.h ****                    __dmb(0xF);\
 117:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 118:F4_CORE/core_cmInstr.h ****                 } while (0)
 119:F4_CORE/core_cmInstr.h **** 
 120:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 121:F4_CORE/core_cmInstr.h **** 
 122:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in integer value.
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccIiOVvc.s 			page 9


 123:F4_CORE/core_cmInstr.h **** 
 124:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 125:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 126:F4_CORE/core_cmInstr.h ****  */
 127:F4_CORE/core_cmInstr.h **** #define __REV                             __rev
 128:F4_CORE/core_cmInstr.h **** 
 129:F4_CORE/core_cmInstr.h **** 
 130:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 131:F4_CORE/core_cmInstr.h **** 
 132:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 133:F4_CORE/core_cmInstr.h **** 
 134:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 135:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 136:F4_CORE/core_cmInstr.h ****  */
 137:F4_CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 138:F4_CORE/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 139:F4_CORE/core_cmInstr.h **** {
 140:F4_CORE/core_cmInstr.h ****   rev16 r0, r0
 141:F4_CORE/core_cmInstr.h ****   bx lr
 142:F4_CORE/core_cmInstr.h **** }
 143:F4_CORE/core_cmInstr.h **** #endif
 144:F4_CORE/core_cmInstr.h **** 
 145:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 146:F4_CORE/core_cmInstr.h **** 
 147:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 148:F4_CORE/core_cmInstr.h **** 
 149:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 150:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 151:F4_CORE/core_cmInstr.h ****  */
 152:F4_CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 153:F4_CORE/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 154:F4_CORE/core_cmInstr.h **** {
 155:F4_CORE/core_cmInstr.h ****   revsh r0, r0
 156:F4_CORE/core_cmInstr.h ****   bx lr
 157:F4_CORE/core_cmInstr.h **** }
 158:F4_CORE/core_cmInstr.h **** #endif
 159:F4_CORE/core_cmInstr.h **** 
 160:F4_CORE/core_cmInstr.h **** 
 161:F4_CORE/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 162:F4_CORE/core_cmInstr.h **** 
 163:F4_CORE/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 164:F4_CORE/core_cmInstr.h **** 
 165:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to rotate
 166:F4_CORE/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 167:F4_CORE/core_cmInstr.h ****     \return               Rotated value
 168:F4_CORE/core_cmInstr.h ****  */
 169:F4_CORE/core_cmInstr.h **** #define __ROR                             __ror
 170:F4_CORE/core_cmInstr.h **** 
 171:F4_CORE/core_cmInstr.h **** 
 172:F4_CORE/core_cmInstr.h **** /** \brief  Breakpoint
 173:F4_CORE/core_cmInstr.h **** 
 174:F4_CORE/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 175:F4_CORE/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 176:F4_CORE/core_cmInstr.h **** 
 177:F4_CORE/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 178:F4_CORE/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 179:F4_CORE/core_cmInstr.h ****  */
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccIiOVvc.s 			page 10


 180:F4_CORE/core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 181:F4_CORE/core_cmInstr.h **** 
 182:F4_CORE/core_cmInstr.h **** 
 183:F4_CORE/core_cmInstr.h **** /** \brief  Reverse bit order of value
 184:F4_CORE/core_cmInstr.h **** 
 185:F4_CORE/core_cmInstr.h ****     This function reverses the bit order of the given value.
 186:F4_CORE/core_cmInstr.h **** 
 187:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 188:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 189:F4_CORE/core_cmInstr.h ****  */
 190:F4_CORE/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 191:F4_CORE/core_cmInstr.h ****   #define __RBIT                          __rbit
 192:F4_CORE/core_cmInstr.h **** #else
 193:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 194:F4_CORE/core_cmInstr.h **** {
 195:F4_CORE/core_cmInstr.h ****   uint32_t result;
 196:F4_CORE/core_cmInstr.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; // extra shift needed at end
 197:F4_CORE/core_cmInstr.h **** 
 198:F4_CORE/core_cmInstr.h ****   result = value;                      // r will be reversed bits of v; first get LSB of v
 199:F4_CORE/core_cmInstr.h ****   for (value >>= 1; value; value >>= 1)
 200:F4_CORE/core_cmInstr.h ****   {
 201:F4_CORE/core_cmInstr.h ****     result <<= 1;
 202:F4_CORE/core_cmInstr.h ****     result |= value & 1;
 203:F4_CORE/core_cmInstr.h ****     s--;
 204:F4_CORE/core_cmInstr.h ****   }
 205:F4_CORE/core_cmInstr.h ****   result <<= s;                       // shift when v's highest bits are zero
 206:F4_CORE/core_cmInstr.h ****   return(result);
 207:F4_CORE/core_cmInstr.h **** }
 208:F4_CORE/core_cmInstr.h **** #endif
 209:F4_CORE/core_cmInstr.h **** 
 210:F4_CORE/core_cmInstr.h **** 
 211:F4_CORE/core_cmInstr.h **** /** \brief  Count leading zeros
 212:F4_CORE/core_cmInstr.h **** 
 213:F4_CORE/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 214:F4_CORE/core_cmInstr.h **** 
 215:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 216:F4_CORE/core_cmInstr.h ****     \return             number of leading zeros in value
 217:F4_CORE/core_cmInstr.h ****  */
 218:F4_CORE/core_cmInstr.h **** #define __CLZ                             __clz
 219:F4_CORE/core_cmInstr.h **** 
 220:F4_CORE/core_cmInstr.h **** 
 221:F4_CORE/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 222:F4_CORE/core_cmInstr.h **** 
 223:F4_CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 224:F4_CORE/core_cmInstr.h **** 
 225:F4_CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 8 bit value.
 226:F4_CORE/core_cmInstr.h **** 
 227:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 228:F4_CORE/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 229:F4_CORE/core_cmInstr.h ****  */
 230:F4_CORE/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 231:F4_CORE/core_cmInstr.h **** 
 232:F4_CORE/core_cmInstr.h **** 
 233:F4_CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 234:F4_CORE/core_cmInstr.h **** 
 235:F4_CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 16 bit values.
 236:F4_CORE/core_cmInstr.h **** 
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccIiOVvc.s 			page 11


 237:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 238:F4_CORE/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 239:F4_CORE/core_cmInstr.h ****  */
 240:F4_CORE/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 241:F4_CORE/core_cmInstr.h **** 
 242:F4_CORE/core_cmInstr.h **** 
 243:F4_CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 244:F4_CORE/core_cmInstr.h **** 
 245:F4_CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 32 bit values.
 246:F4_CORE/core_cmInstr.h **** 
 247:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 248:F4_CORE/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 249:F4_CORE/core_cmInstr.h ****  */
 250:F4_CORE/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 251:F4_CORE/core_cmInstr.h **** 
 252:F4_CORE/core_cmInstr.h **** 
 253:F4_CORE/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 254:F4_CORE/core_cmInstr.h **** 
 255:F4_CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 8 bit values.
 256:F4_CORE/core_cmInstr.h **** 
 257:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 258:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 259:F4_CORE/core_cmInstr.h ****     \return          0  Function succeeded
 260:F4_CORE/core_cmInstr.h ****     \return          1  Function failed
 261:F4_CORE/core_cmInstr.h ****  */
 262:F4_CORE/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 263:F4_CORE/core_cmInstr.h **** 
 264:F4_CORE/core_cmInstr.h **** 
 265:F4_CORE/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 266:F4_CORE/core_cmInstr.h **** 
 267:F4_CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 16 bit values.
 268:F4_CORE/core_cmInstr.h **** 
 269:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 270:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 271:F4_CORE/core_cmInstr.h ****     \return          0  Function succeeded
 272:F4_CORE/core_cmInstr.h ****     \return          1  Function failed
 273:F4_CORE/core_cmInstr.h ****  */
 274:F4_CORE/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 275:F4_CORE/core_cmInstr.h **** 
 276:F4_CORE/core_cmInstr.h **** 
 277:F4_CORE/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 278:F4_CORE/core_cmInstr.h **** 
 279:F4_CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 32 bit values.
 280:F4_CORE/core_cmInstr.h **** 
 281:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 282:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 283:F4_CORE/core_cmInstr.h ****     \return          0  Function succeeded
 284:F4_CORE/core_cmInstr.h ****     \return          1  Function failed
 285:F4_CORE/core_cmInstr.h ****  */
 286:F4_CORE/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 287:F4_CORE/core_cmInstr.h **** 
 288:F4_CORE/core_cmInstr.h **** 
 289:F4_CORE/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 290:F4_CORE/core_cmInstr.h **** 
 291:F4_CORE/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 292:F4_CORE/core_cmInstr.h **** 
 293:F4_CORE/core_cmInstr.h ****  */
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccIiOVvc.s 			page 12


 294:F4_CORE/core_cmInstr.h **** #define __CLREX                           __clrex
 295:F4_CORE/core_cmInstr.h **** 
 296:F4_CORE/core_cmInstr.h **** 
 297:F4_CORE/core_cmInstr.h **** /** \brief  Signed Saturate
 298:F4_CORE/core_cmInstr.h **** 
 299:F4_CORE/core_cmInstr.h ****     This function saturates a signed value.
 300:F4_CORE/core_cmInstr.h **** 
 301:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 302:F4_CORE/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 303:F4_CORE/core_cmInstr.h ****     \return             Saturated value
 304:F4_CORE/core_cmInstr.h ****  */
 305:F4_CORE/core_cmInstr.h **** #define __SSAT                            __ssat
 306:F4_CORE/core_cmInstr.h **** 
 307:F4_CORE/core_cmInstr.h **** 
 308:F4_CORE/core_cmInstr.h **** /** \brief  Unsigned Saturate
 309:F4_CORE/core_cmInstr.h **** 
 310:F4_CORE/core_cmInstr.h ****     This function saturates an unsigned value.
 311:F4_CORE/core_cmInstr.h **** 
 312:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 313:F4_CORE/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 314:F4_CORE/core_cmInstr.h ****     \return             Saturated value
 315:F4_CORE/core_cmInstr.h ****  */
 316:F4_CORE/core_cmInstr.h **** #define __USAT                            __usat
 317:F4_CORE/core_cmInstr.h **** 
 318:F4_CORE/core_cmInstr.h **** 
 319:F4_CORE/core_cmInstr.h **** /** \brief  Rotate Right with Extend (32 bit)
 320:F4_CORE/core_cmInstr.h **** 
 321:F4_CORE/core_cmInstr.h ****     This function moves each bit of a bitstring right by one bit.
 322:F4_CORE/core_cmInstr.h ****     The carry input is shifted in at the left end of the bitstring.
 323:F4_CORE/core_cmInstr.h **** 
 324:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to rotate
 325:F4_CORE/core_cmInstr.h ****     \return               Rotated value
 326:F4_CORE/core_cmInstr.h ****  */
 327:F4_CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 328:F4_CORE/core_cmInstr.h **** __attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
 329:F4_CORE/core_cmInstr.h **** {
 330:F4_CORE/core_cmInstr.h ****   rrx r0, r0
 331:F4_CORE/core_cmInstr.h ****   bx lr
 332:F4_CORE/core_cmInstr.h **** }
 333:F4_CORE/core_cmInstr.h **** #endif
 334:F4_CORE/core_cmInstr.h **** 
 335:F4_CORE/core_cmInstr.h **** 
 336:F4_CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (8 bit)
 337:F4_CORE/core_cmInstr.h **** 
 338:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 8 bit value.
 339:F4_CORE/core_cmInstr.h **** 
 340:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 341:F4_CORE/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 342:F4_CORE/core_cmInstr.h ****  */
 343:F4_CORE/core_cmInstr.h **** #define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
 344:F4_CORE/core_cmInstr.h **** 
 345:F4_CORE/core_cmInstr.h **** 
 346:F4_CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (16 bit)
 347:F4_CORE/core_cmInstr.h **** 
 348:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 16 bit values.
 349:F4_CORE/core_cmInstr.h **** 
 350:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccIiOVvc.s 			page 13


 351:F4_CORE/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 352:F4_CORE/core_cmInstr.h ****  */
 353:F4_CORE/core_cmInstr.h **** #define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
 354:F4_CORE/core_cmInstr.h **** 
 355:F4_CORE/core_cmInstr.h **** 
 356:F4_CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (32 bit)
 357:F4_CORE/core_cmInstr.h **** 
 358:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 32 bit values.
 359:F4_CORE/core_cmInstr.h **** 
 360:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 361:F4_CORE/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 362:F4_CORE/core_cmInstr.h ****  */
 363:F4_CORE/core_cmInstr.h **** #define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
 364:F4_CORE/core_cmInstr.h **** 
 365:F4_CORE/core_cmInstr.h **** 
 366:F4_CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (8 bit)
 367:F4_CORE/core_cmInstr.h **** 
 368:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 8 bit values.
 369:F4_CORE/core_cmInstr.h **** 
 370:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 371:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 372:F4_CORE/core_cmInstr.h ****  */
 373:F4_CORE/core_cmInstr.h **** #define __STRBT(value, ptr)               __strt(value, ptr)
 374:F4_CORE/core_cmInstr.h **** 
 375:F4_CORE/core_cmInstr.h **** 
 376:F4_CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (16 bit)
 377:F4_CORE/core_cmInstr.h **** 
 378:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 16 bit values.
 379:F4_CORE/core_cmInstr.h **** 
 380:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 381:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 382:F4_CORE/core_cmInstr.h ****  */
 383:F4_CORE/core_cmInstr.h **** #define __STRHT(value, ptr)               __strt(value, ptr)
 384:F4_CORE/core_cmInstr.h **** 
 385:F4_CORE/core_cmInstr.h **** 
 386:F4_CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (32 bit)
 387:F4_CORE/core_cmInstr.h **** 
 388:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 32 bit values.
 389:F4_CORE/core_cmInstr.h **** 
 390:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 391:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 392:F4_CORE/core_cmInstr.h ****  */
 393:F4_CORE/core_cmInstr.h **** #define __STRT(value, ptr)                __strt(value, ptr)
 394:F4_CORE/core_cmInstr.h **** 
 395:F4_CORE/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300) */
 396:F4_CORE/core_cmInstr.h **** 
 397:F4_CORE/core_cmInstr.h **** 
 398:F4_CORE/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 399:F4_CORE/core_cmInstr.h **** /* GNU gcc specific functions */
 400:F4_CORE/core_cmInstr.h **** 
 401:F4_CORE/core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 402:F4_CORE/core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 403:F4_CORE/core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 404:F4_CORE/core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 405:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 406:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 407:F4_CORE/core_cmInstr.h **** #else
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccIiOVvc.s 			page 14


 408:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 409:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 410:F4_CORE/core_cmInstr.h **** #endif
 411:F4_CORE/core_cmInstr.h **** 
 412:F4_CORE/core_cmInstr.h **** /** \brief  No Operation
 413:F4_CORE/core_cmInstr.h **** 
 414:F4_CORE/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 415:F4_CORE/core_cmInstr.h ****  */
 416:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 417:F4_CORE/core_cmInstr.h **** {
 418:F4_CORE/core_cmInstr.h ****   __ASM volatile ("nop");
 419:F4_CORE/core_cmInstr.h **** }
 420:F4_CORE/core_cmInstr.h **** 
 421:F4_CORE/core_cmInstr.h **** 
 422:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Interrupt
 423:F4_CORE/core_cmInstr.h **** 
 424:F4_CORE/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 425:F4_CORE/core_cmInstr.h ****     until one of a number of events occurs.
 426:F4_CORE/core_cmInstr.h ****  */
 427:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 428:F4_CORE/core_cmInstr.h **** {
 429:F4_CORE/core_cmInstr.h ****   __ASM volatile ("wfi");
 430:F4_CORE/core_cmInstr.h **** }
 431:F4_CORE/core_cmInstr.h **** 
 432:F4_CORE/core_cmInstr.h **** 
 433:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Event
 434:F4_CORE/core_cmInstr.h **** 
 435:F4_CORE/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 436:F4_CORE/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 437:F4_CORE/core_cmInstr.h ****  */
 438:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 439:F4_CORE/core_cmInstr.h **** {
 440:F4_CORE/core_cmInstr.h ****   __ASM volatile ("wfe");
 441:F4_CORE/core_cmInstr.h **** }
 442:F4_CORE/core_cmInstr.h **** 
 443:F4_CORE/core_cmInstr.h **** 
 444:F4_CORE/core_cmInstr.h **** /** \brief  Send Event
 445:F4_CORE/core_cmInstr.h **** 
 446:F4_CORE/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 447:F4_CORE/core_cmInstr.h ****  */
 448:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 449:F4_CORE/core_cmInstr.h **** {
 450:F4_CORE/core_cmInstr.h ****   __ASM volatile ("sev");
 451:F4_CORE/core_cmInstr.h **** }
 452:F4_CORE/core_cmInstr.h **** 
 453:F4_CORE/core_cmInstr.h **** 
 454:F4_CORE/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 455:F4_CORE/core_cmInstr.h **** 
 456:F4_CORE/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 457:F4_CORE/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 458:F4_CORE/core_cmInstr.h ****     memory, after the instruction has been completed.
 459:F4_CORE/core_cmInstr.h ****  */
 460:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 461:F4_CORE/core_cmInstr.h **** {
 462:F4_CORE/core_cmInstr.h ****   __ASM volatile ("isb 0xF":::"memory");
 463:F4_CORE/core_cmInstr.h **** }
 464:F4_CORE/core_cmInstr.h **** 
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccIiOVvc.s 			page 15


 465:F4_CORE/core_cmInstr.h **** 
 466:F4_CORE/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 467:F4_CORE/core_cmInstr.h **** 
 468:F4_CORE/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 469:F4_CORE/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 470:F4_CORE/core_cmInstr.h ****  */
 471:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 472:F4_CORE/core_cmInstr.h **** {
 473:F4_CORE/core_cmInstr.h ****   __ASM volatile ("dsb 0xF":::"memory");
 474:F4_CORE/core_cmInstr.h **** }
 475:F4_CORE/core_cmInstr.h **** 
 476:F4_CORE/core_cmInstr.h **** 
 477:F4_CORE/core_cmInstr.h **** /** \brief  Data Memory Barrier
 478:F4_CORE/core_cmInstr.h **** 
 479:F4_CORE/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 480:F4_CORE/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 481:F4_CORE/core_cmInstr.h ****  */
 482:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 483:F4_CORE/core_cmInstr.h **** {
 484:F4_CORE/core_cmInstr.h ****   __ASM volatile ("dmb 0xF":::"memory");
 485:F4_CORE/core_cmInstr.h **** }
 486:F4_CORE/core_cmInstr.h **** 
 487:F4_CORE/core_cmInstr.h **** 
 488:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 489:F4_CORE/core_cmInstr.h **** 
 490:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in integer value.
 491:F4_CORE/core_cmInstr.h **** 
 492:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 493:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 494:F4_CORE/core_cmInstr.h ****  */
 495:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 173              		.loc 2 495 57 is_stmt 1 view .LVU53
 174              	.LBB19:
 496:F4_CORE/core_cmInstr.h **** {
 497:F4_CORE/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 498:F4_CORE/core_cmInstr.h ****   return __builtin_bswap32(value);
 175              		.loc 2 498 3 view .LVU54
 176              		.loc 2 498 10 is_stmt 0 view .LVU55
 177 0076 1BBA     		rev	r3, r3
 178              	.LVL18:
 179              		.loc 2 498 10 view .LVU56
 180              	.LBE19:
 181              	.LBE18:
 146:FWLIB/src/stm32f4xx_hash_md5.c ****     outputaddr+=4;
 182              		.loc 1 146 31 view .LVU57
 183 0078 3360     		str	r3, [r6]
 147:FWLIB/src/stm32f4xx_hash_md5.c ****     *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 184              		.loc 1 147 5 is_stmt 1 view .LVU58
 185              	.LVL19:
 148:FWLIB/src/stm32f4xx_hash_md5.c ****     outputaddr+=4;
 186              		.loc 1 148 5 view .LVU59
 148:FWLIB/src/stm32f4xx_hash_md5.c ****     outputaddr+=4;
 187              		.loc 1 148 33 is_stmt 0 view .LVU60
 188 007a 039B     		ldr	r3, [sp, #12]
 189              	.LVL20:
 190              	.LBB20:
 191              	.LBI20:
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccIiOVvc.s 			page 16


 495:F4_CORE/core_cmInstr.h **** {
 192              		.loc 2 495 57 is_stmt 1 view .LVU61
 193              	.LBB21:
 194              		.loc 2 498 3 view .LVU62
 195              		.loc 2 498 10 is_stmt 0 view .LVU63
 196 007c 1BBA     		rev	r3, r3
 197              	.LVL21:
 198              		.loc 2 498 10 view .LVU64
 199              	.LBE21:
 200              	.LBE20:
 148:FWLIB/src/stm32f4xx_hash_md5.c ****     outputaddr+=4;
 201              		.loc 1 148 31 view .LVU65
 202 007e 7360     		str	r3, [r6, #4]
 149:FWLIB/src/stm32f4xx_hash_md5.c ****     *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 203              		.loc 1 149 5 is_stmt 1 view .LVU66
 204              	.LVL22:
 150:FWLIB/src/stm32f4xx_hash_md5.c ****     outputaddr+=4;
 205              		.loc 1 150 5 view .LVU67
 150:FWLIB/src/stm32f4xx_hash_md5.c ****     outputaddr+=4;
 206              		.loc 1 150 33 is_stmt 0 view .LVU68
 207 0080 049B     		ldr	r3, [sp, #16]
 208              	.LVL23:
 209              	.LBB22:
 210              	.LBI22:
 495:F4_CORE/core_cmInstr.h **** {
 211              		.loc 2 495 57 is_stmt 1 view .LVU69
 212              	.LBB23:
 213              		.loc 2 498 3 view .LVU70
 214              		.loc 2 498 10 is_stmt 0 view .LVU71
 215 0082 1BBA     		rev	r3, r3
 216              	.LVL24:
 217              		.loc 2 498 10 view .LVU72
 218              	.LBE23:
 219              	.LBE22:
 150:FWLIB/src/stm32f4xx_hash_md5.c ****     outputaddr+=4;
 220              		.loc 1 150 31 view .LVU73
 221 0084 B360     		str	r3, [r6, #8]
 151:FWLIB/src/stm32f4xx_hash_md5.c ****     *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 222              		.loc 1 151 5 is_stmt 1 view .LVU74
 223              	.LVL25:
 152:FWLIB/src/stm32f4xx_hash_md5.c ****   }
 224              		.loc 1 152 5 view .LVU75
 152:FWLIB/src/stm32f4xx_hash_md5.c ****   }
 225              		.loc 1 152 33 is_stmt 0 view .LVU76
 226 0086 059B     		ldr	r3, [sp, #20]
 227              	.LVL26:
 228              	.LBB24:
 229              	.LBI24:
 495:F4_CORE/core_cmInstr.h **** {
 230              		.loc 2 495 57 is_stmt 1 view .LVU77
 231              	.LBB25:
 232              		.loc 2 498 3 view .LVU78
 233              		.loc 2 498 10 is_stmt 0 view .LVU79
 234 0088 1BBA     		rev	r3, r3
 235              	.LVL27:
 236              		.loc 2 498 10 view .LVU80
 237              	.LBE25:
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccIiOVvc.s 			page 17


 238              	.LBE24:
 152:FWLIB/src/stm32f4xx_hash_md5.c ****   }
 239              		.loc 1 152 31 view .LVU81
 240 008a F360     		str	r3, [r6, #12]
 101:FWLIB/src/stm32f4xx_hash_md5.c ****   uint32_t inputaddr  = (uint32_t)Input;
 241              		.loc 1 101 15 view .LVU82
 242 008c 0120     		movs	r0, #1
 243 008e ECE7     		b	.L6
 244              		.cfi_endproc
 245              	.LFE123:
 247              		.section	.text.HMAC_MD5,"ax",%progbits
 248              		.align	1
 249              		.global	HMAC_MD5
 250              		.syntax unified
 251              		.thumb
 252              		.thumb_func
 253              		.fpu fpv4-sp-d16
 255              	HMAC_MD5:
 256              	.LVL28:
 257              	.LFB124:
 156:FWLIB/src/stm32f4xx_hash_md5.c **** 
 157:FWLIB/src/stm32f4xx_hash_md5.c **** /**
 158:FWLIB/src/stm32f4xx_hash_md5.c ****   * @brief  Compute the HMAC MD5 digest.
 159:FWLIB/src/stm32f4xx_hash_md5.c ****   * @param  Key: pointer to the Key used for HMAC.
 160:FWLIB/src/stm32f4xx_hash_md5.c ****   * @param  Keylen: length of the Key used for HMAC.
 161:FWLIB/src/stm32f4xx_hash_md5.c ****   * @param  Input: pointer to the Input buffer to be treated.
 162:FWLIB/src/stm32f4xx_hash_md5.c ****   * @param  Ilen: length of the Input buffer.
 163:FWLIB/src/stm32f4xx_hash_md5.c ****   * @param  Output: the returned digest  
 164:FWLIB/src/stm32f4xx_hash_md5.c ****   * @retval An ErrorStatus enumeration value:
 165:FWLIB/src/stm32f4xx_hash_md5.c ****   *          - SUCCESS: digest computation done
 166:FWLIB/src/stm32f4xx_hash_md5.c ****   *          - ERROR: digest computation failed
 167:FWLIB/src/stm32f4xx_hash_md5.c ****   */
 168:FWLIB/src/stm32f4xx_hash_md5.c **** ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
 169:FWLIB/src/stm32f4xx_hash_md5.c ****                      uint32_t Ilen, uint8_t Output[16])
 170:FWLIB/src/stm32f4xx_hash_md5.c **** {
 258              		.loc 1 170 1 is_stmt 1 view -0
 259              		.cfi_startproc
 260              		@ args = 4, pretend = 0, frame = 56
 261              		@ frame_needed = 0, uses_anonymous_args = 0
 262              		.loc 1 170 1 is_stmt 0 view .LVU84
 263 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 264              	.LCFI4:
 265              		.cfi_def_cfa_offset 28
 266              		.cfi_offset 4, -28
 267              		.cfi_offset 5, -24
 268              		.cfi_offset 6, -20
 269              		.cfi_offset 7, -16
 270              		.cfi_offset 8, -12
 271              		.cfi_offset 9, -8
 272              		.cfi_offset 14, -4
 273 0004 8FB0     		sub	sp, sp, #60
 274              	.LCFI5:
 275              		.cfi_def_cfa_offset 88
 276 0006 8146     		mov	r9, r0
 277 0008 0D46     		mov	r5, r1
 278 000a 1F46     		mov	r7, r3
 171:FWLIB/src/stm32f4xx_hash_md5.c ****   HASH_InitTypeDef MD5_HASH_InitStructure;
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccIiOVvc.s 			page 18


 279              		.loc 1 171 3 is_stmt 1 view .LVU85
 172:FWLIB/src/stm32f4xx_hash_md5.c ****   HASH_MsgDigest MD5_MessageDigest;
 280              		.loc 1 172 3 view .LVU86
 173:FWLIB/src/stm32f4xx_hash_md5.c ****   __IO uint16_t nbvalidbitsdata = 0;
 281              		.loc 1 173 3 view .LVU87
 282              		.loc 1 173 17 is_stmt 0 view .LVU88
 283 000c 0023     		movs	r3, #0
 284              	.LVL29:
 285              		.loc 1 173 17 view .LVU89
 286 000e ADF80630 		strh	r3, [sp, #6]	@ movhi
 174:FWLIB/src/stm32f4xx_hash_md5.c ****   __IO uint16_t nbvalidbitskey = 0;
 287              		.loc 1 174 3 is_stmt 1 view .LVU90
 288              		.loc 1 174 17 is_stmt 0 view .LVU91
 289 0012 ADF80430 		strh	r3, [sp, #4]	@ movhi
 175:FWLIB/src/stm32f4xx_hash_md5.c ****   uint32_t i = 0;
 290              		.loc 1 175 3 is_stmt 1 view .LVU92
 291              	.LVL30:
 176:FWLIB/src/stm32f4xx_hash_md5.c ****   __IO uint32_t counter = 0;
 292              		.loc 1 176 3 view .LVU93
 293              		.loc 1 176 17 is_stmt 0 view .LVU94
 294 0016 0093     		str	r3, [sp]
 177:FWLIB/src/stm32f4xx_hash_md5.c ****   uint32_t busystatus = 0;
 295              		.loc 1 177 3 is_stmt 1 view .LVU95
 296              	.LVL31:
 178:FWLIB/src/stm32f4xx_hash_md5.c ****   ErrorStatus status = SUCCESS;
 297              		.loc 1 178 3 view .LVU96
 179:FWLIB/src/stm32f4xx_hash_md5.c ****   uint32_t keyaddr    = (uint32_t)Key;
 298              		.loc 1 179 3 view .LVU97
 299              		.loc 1 179 12 is_stmt 0 view .LVU98
 300 0018 8046     		mov	r8, r0
 301              	.LVL32:
 180:FWLIB/src/stm32f4xx_hash_md5.c ****   uint32_t inputaddr  = (uint32_t)Input;
 302              		.loc 1 180 3 is_stmt 1 view .LVU99
 303              		.loc 1 180 12 is_stmt 0 view .LVU100
 304 001a 1646     		mov	r6, r2
 305              	.LVL33:
 181:FWLIB/src/stm32f4xx_hash_md5.c ****   uint32_t outputaddr = (uint32_t)Output;
 306              		.loc 1 181 3 is_stmt 1 view .LVU101
 182:FWLIB/src/stm32f4xx_hash_md5.c **** 
 183:FWLIB/src/stm32f4xx_hash_md5.c ****   /* Number of valid bits in last word of the Input data */
 184:FWLIB/src/stm32f4xx_hash_md5.c ****   nbvalidbitsdata = 8 * (Ilen % 4);
 307              		.loc 1 184 3 view .LVU102
 308              		.loc 1 184 19 is_stmt 0 view .LVU103
 309 001c 07F00303 		and	r3, r7, #3
 310 0020 DB00     		lsls	r3, r3, #3
 311 0022 ADF80630 		strh	r3, [sp, #6]	@ movhi
 185:FWLIB/src/stm32f4xx_hash_md5.c **** 
 186:FWLIB/src/stm32f4xx_hash_md5.c ****   /* Number of valid bits in last word of the Key */
 187:FWLIB/src/stm32f4xx_hash_md5.c ****   nbvalidbitskey = 8 * (Keylen % 4);
 312              		.loc 1 187 3 is_stmt 1 view .LVU104
 313              		.loc 1 187 18 is_stmt 0 view .LVU105
 314 0026 01F00303 		and	r3, r1, #3
 315 002a DB00     		lsls	r3, r3, #3
 316 002c ADF80430 		strh	r3, [sp, #4]	@ movhi
 188:FWLIB/src/stm32f4xx_hash_md5.c ****    
 189:FWLIB/src/stm32f4xx_hash_md5.c ****   /* HASH peripheral initialization */
 190:FWLIB/src/stm32f4xx_hash_md5.c ****   HASH_DeInit();
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccIiOVvc.s 			page 19


 317              		.loc 1 190 3 is_stmt 1 view .LVU106
 318 0030 FFF7FEFF 		bl	HASH_DeInit
 319              	.LVL34:
 191:FWLIB/src/stm32f4xx_hash_md5.c **** 
 192:FWLIB/src/stm32f4xx_hash_md5.c ****   /* HASH Configuration */
 193:FWLIB/src/stm32f4xx_hash_md5.c ****   MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 320              		.loc 1 193 3 view .LVU107
 321              		.loc 1 193 45 is_stmt 0 view .LVU108
 322 0034 8023     		movs	r3, #128
 323 0036 0A93     		str	r3, [sp, #40]
 194:FWLIB/src/stm32f4xx_hash_md5.c ****   MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 324              		.loc 1 194 3 is_stmt 1 view .LVU109
 325              		.loc 1 194 40 is_stmt 0 view .LVU110
 326 0038 4023     		movs	r3, #64
 327 003a 0B93     		str	r3, [sp, #44]
 195:FWLIB/src/stm32f4xx_hash_md5.c ****   MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 328              		.loc 1 195 3 is_stmt 1 view .LVU111
 329              		.loc 1 195 40 is_stmt 0 view .LVU112
 330 003c 2023     		movs	r3, #32
 331 003e 0C93     		str	r3, [sp, #48]
 196:FWLIB/src/stm32f4xx_hash_md5.c ****   if(Keylen > 64)
 332              		.loc 1 196 3 is_stmt 1 view .LVU113
 333              		.loc 1 196 5 is_stmt 0 view .LVU114
 334 0040 402D     		cmp	r5, #64
 335 0042 0CD9     		bls	.L11
 197:FWLIB/src/stm32f4xx_hash_md5.c ****   {
 198:FWLIB/src/stm32f4xx_hash_md5.c ****     /* HMAC long Key */
 199:FWLIB/src/stm32f4xx_hash_md5.c ****     MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 336              		.loc 1 199 5 is_stmt 1 view .LVU115
 337              		.loc 1 199 45 is_stmt 0 view .LVU116
 338 0044 4FF48033 		mov	r3, #65536
 339 0048 0D93     		str	r3, [sp, #52]
 340              	.L12:
 200:FWLIB/src/stm32f4xx_hash_md5.c ****   }
 201:FWLIB/src/stm32f4xx_hash_md5.c ****   else
 202:FWLIB/src/stm32f4xx_hash_md5.c ****   {
 203:FWLIB/src/stm32f4xx_hash_md5.c ****     /* HMAC short Key */
 204:FWLIB/src/stm32f4xx_hash_md5.c ****     MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 205:FWLIB/src/stm32f4xx_hash_md5.c ****   }
 206:FWLIB/src/stm32f4xx_hash_md5.c ****   HASH_Init(&MD5_HASH_InitStructure);
 341              		.loc 1 206 3 is_stmt 1 view .LVU117
 342 004a 0AA8     		add	r0, sp, #40
 343 004c FFF7FEFF 		bl	HASH_Init
 344              	.LVL35:
 207:FWLIB/src/stm32f4xx_hash_md5.c **** 
 208:FWLIB/src/stm32f4xx_hash_md5.c ****   /* Configure the number of valid bits in last word of the Key */
 209:FWLIB/src/stm32f4xx_hash_md5.c ****   HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 345              		.loc 1 209 3 view .LVU118
 346 0050 BDF80400 		ldrh	r0, [sp, #4]
 347 0054 80B2     		uxth	r0, r0
 348 0056 FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 349              	.LVL36:
 210:FWLIB/src/stm32f4xx_hash_md5.c **** 
 211:FWLIB/src/stm32f4xx_hash_md5.c ****   /* Write the Key */
 212:FWLIB/src/stm32f4xx_hash_md5.c ****   for(i=0; i<Keylen; i+=4)
 350              		.loc 1 212 3 view .LVU119
 351              		.loc 1 212 8 is_stmt 0 view .LVU120
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccIiOVvc.s 			page 20


 352 005a 0024     		movs	r4, #0
 353              		.loc 1 212 3 view .LVU121
 354 005c 07E0     		b	.L13
 355              	.L11:
 204:FWLIB/src/stm32f4xx_hash_md5.c ****   }
 356              		.loc 1 204 5 is_stmt 1 view .LVU122
 204:FWLIB/src/stm32f4xx_hash_md5.c ****   }
 357              		.loc 1 204 45 is_stmt 0 view .LVU123
 358 005e 0023     		movs	r3, #0
 359 0060 0D93     		str	r3, [sp, #52]
 360 0062 F2E7     		b	.L12
 361              	.LVL37:
 362              	.L14:
 213:FWLIB/src/stm32f4xx_hash_md5.c ****   {
 214:FWLIB/src/stm32f4xx_hash_md5.c ****     HASH_DataIn(*(uint32_t*)keyaddr);
 363              		.loc 1 214 5 is_stmt 1 discriminator 3 view .LVU124
 364 0064 59F8040B 		ldr	r0, [r9], #4
 365              	.LVL38:
 366              		.loc 1 214 5 is_stmt 0 discriminator 3 view .LVU125
 367 0068 FFF7FEFF 		bl	HASH_DataIn
 368              	.LVL39:
 215:FWLIB/src/stm32f4xx_hash_md5.c ****     keyaddr+=4;
 369              		.loc 1 215 5 is_stmt 1 discriminator 3 view .LVU126
 212:FWLIB/src/stm32f4xx_hash_md5.c ****   {
 370              		.loc 1 212 22 discriminator 3 view .LVU127
 212:FWLIB/src/stm32f4xx_hash_md5.c ****   {
 371              		.loc 1 212 23 is_stmt 0 discriminator 3 view .LVU128
 372 006c 0434     		adds	r4, r4, #4
 373              	.LVL40:
 374              	.L13:
 212:FWLIB/src/stm32f4xx_hash_md5.c ****   {
 375              		.loc 1 212 12 is_stmt 1 discriminator 1 view .LVU129
 212:FWLIB/src/stm32f4xx_hash_md5.c ****   {
 376              		.loc 1 212 3 is_stmt 0 discriminator 1 view .LVU130
 377 006e AC42     		cmp	r4, r5
 378 0070 F8D3     		bcc	.L14
 216:FWLIB/src/stm32f4xx_hash_md5.c ****   }
 217:FWLIB/src/stm32f4xx_hash_md5.c ****   
 218:FWLIB/src/stm32f4xx_hash_md5.c ****   /* Start the HASH processor */
 219:FWLIB/src/stm32f4xx_hash_md5.c ****   HASH_StartDigest();
 379              		.loc 1 219 3 is_stmt 1 view .LVU131
 380 0072 FFF7FEFF 		bl	HASH_StartDigest
 381              	.LVL41:
 382              	.L16:
 220:FWLIB/src/stm32f4xx_hash_md5.c **** 
 221:FWLIB/src/stm32f4xx_hash_md5.c ****   /* wait until the Busy flag is RESET */
 222:FWLIB/src/stm32f4xx_hash_md5.c ****   do
 383              		.loc 1 222 3 discriminator 2 view .LVU132
 223:FWLIB/src/stm32f4xx_hash_md5.c ****   {
 224:FWLIB/src/stm32f4xx_hash_md5.c ****     busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 384              		.loc 1 224 5 discriminator 2 view .LVU133
 385              		.loc 1 224 18 is_stmt 0 discriminator 2 view .LVU134
 386 0076 0820     		movs	r0, #8
 387 0078 FFF7FEFF 		bl	HASH_GetFlagStatus
 388              	.LVL42:
 389              		.loc 1 224 16 discriminator 2 view .LVU135
 390 007c 8146     		mov	r9, r0
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccIiOVvc.s 			page 21


 391              	.LVL43:
 225:FWLIB/src/stm32f4xx_hash_md5.c ****     counter++;
 392              		.loc 1 225 5 is_stmt 1 discriminator 2 view .LVU136
 393              		.loc 1 225 12 is_stmt 0 discriminator 2 view .LVU137
 394 007e 009C     		ldr	r4, [sp]
 395 0080 0134     		adds	r4, r4, #1
 396 0082 0094     		str	r4, [sp]
 226:FWLIB/src/stm32f4xx_hash_md5.c ****   }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 397              		.loc 1 226 10 is_stmt 1 discriminator 2 view .LVU138
 398              		.loc 1 226 20 is_stmt 0 discriminator 2 view .LVU139
 399 0084 009B     		ldr	r3, [sp]
 400              		.loc 1 226 3 discriminator 2 view .LVU140
 401 0086 B3F5803F 		cmp	r3, #65536
 402 008a 01D0     		beq	.L15
 403              		.loc 1 226 40 discriminator 1 view .LVU141
 404 008c 0028     		cmp	r0, #0
 405 008e F2D1     		bne	.L16
 406              	.L15:
 227:FWLIB/src/stm32f4xx_hash_md5.c **** 
 228:FWLIB/src/stm32f4xx_hash_md5.c ****   if (busystatus != RESET)
 407              		.loc 1 228 3 is_stmt 1 view .LVU142
 408              		.loc 1 228 6 is_stmt 0 view .LVU143
 409 0090 B9F1000F 		cmp	r9, #0
 410 0094 03D0     		beq	.L30
 229:FWLIB/src/stm32f4xx_hash_md5.c ****   {
 230:FWLIB/src/stm32f4xx_hash_md5.c ****      status = ERROR;
 411              		.loc 1 230 13 view .LVU144
 412 0096 0020     		movs	r0, #0
 413              	.LVL44:
 414              	.L17:
 231:FWLIB/src/stm32f4xx_hash_md5.c ****   }
 232:FWLIB/src/stm32f4xx_hash_md5.c ****   else
 233:FWLIB/src/stm32f4xx_hash_md5.c ****   {
 234:FWLIB/src/stm32f4xx_hash_md5.c ****     /* Configure the number of valid bits in last word of the Input data */
 235:FWLIB/src/stm32f4xx_hash_md5.c ****     HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 236:FWLIB/src/stm32f4xx_hash_md5.c **** 
 237:FWLIB/src/stm32f4xx_hash_md5.c ****     /* Write the Input block in the IN FIFO */
 238:FWLIB/src/stm32f4xx_hash_md5.c ****     for(i=0; i<Ilen; i+=4)
 239:FWLIB/src/stm32f4xx_hash_md5.c ****     {
 240:FWLIB/src/stm32f4xx_hash_md5.c ****       HASH_DataIn(*(uint32_t*)inputaddr);
 241:FWLIB/src/stm32f4xx_hash_md5.c ****       inputaddr+=4;
 242:FWLIB/src/stm32f4xx_hash_md5.c ****     }
 243:FWLIB/src/stm32f4xx_hash_md5.c **** 
 244:FWLIB/src/stm32f4xx_hash_md5.c ****     /* Start the HASH processor */
 245:FWLIB/src/stm32f4xx_hash_md5.c ****     HASH_StartDigest();
 246:FWLIB/src/stm32f4xx_hash_md5.c **** 
 247:FWLIB/src/stm32f4xx_hash_md5.c ****     /* wait until the Busy flag is RESET */
 248:FWLIB/src/stm32f4xx_hash_md5.c ****     counter =0;
 249:FWLIB/src/stm32f4xx_hash_md5.c ****     do
 250:FWLIB/src/stm32f4xx_hash_md5.c ****     {
 251:FWLIB/src/stm32f4xx_hash_md5.c ****        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 252:FWLIB/src/stm32f4xx_hash_md5.c ****        counter++;
 253:FWLIB/src/stm32f4xx_hash_md5.c ****     }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 254:FWLIB/src/stm32f4xx_hash_md5.c **** 
 255:FWLIB/src/stm32f4xx_hash_md5.c ****     if (busystatus != RESET)
 256:FWLIB/src/stm32f4xx_hash_md5.c ****     {
 257:FWLIB/src/stm32f4xx_hash_md5.c ****       status = ERROR;
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccIiOVvc.s 			page 22


 258:FWLIB/src/stm32f4xx_hash_md5.c ****     }
 259:FWLIB/src/stm32f4xx_hash_md5.c ****     else
 260:FWLIB/src/stm32f4xx_hash_md5.c ****     {  
 261:FWLIB/src/stm32f4xx_hash_md5.c ****       /* Configure the number of valid bits in last word of the Key */
 262:FWLIB/src/stm32f4xx_hash_md5.c ****       HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 263:FWLIB/src/stm32f4xx_hash_md5.c **** 
 264:FWLIB/src/stm32f4xx_hash_md5.c ****       /* Write the Key */
 265:FWLIB/src/stm32f4xx_hash_md5.c ****       keyaddr = (uint32_t)Key;
 266:FWLIB/src/stm32f4xx_hash_md5.c ****       for(i=0; i<Keylen; i+=4)
 267:FWLIB/src/stm32f4xx_hash_md5.c ****       {
 268:FWLIB/src/stm32f4xx_hash_md5.c ****         HASH_DataIn(*(uint32_t*)keyaddr);
 269:FWLIB/src/stm32f4xx_hash_md5.c ****         keyaddr+=4;
 270:FWLIB/src/stm32f4xx_hash_md5.c ****       }
 271:FWLIB/src/stm32f4xx_hash_md5.c ****   
 272:FWLIB/src/stm32f4xx_hash_md5.c ****        /* Start the HASH processor */
 273:FWLIB/src/stm32f4xx_hash_md5.c ****        HASH_StartDigest();
 274:FWLIB/src/stm32f4xx_hash_md5.c **** 
 275:FWLIB/src/stm32f4xx_hash_md5.c ****        /* wait until the Busy flag is RESET */
 276:FWLIB/src/stm32f4xx_hash_md5.c ****        counter =0;
 277:FWLIB/src/stm32f4xx_hash_md5.c ****        do
 278:FWLIB/src/stm32f4xx_hash_md5.c ****        {
 279:FWLIB/src/stm32f4xx_hash_md5.c ****           busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 280:FWLIB/src/stm32f4xx_hash_md5.c ****           counter++;
 281:FWLIB/src/stm32f4xx_hash_md5.c ****       }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 282:FWLIB/src/stm32f4xx_hash_md5.c **** 
 283:FWLIB/src/stm32f4xx_hash_md5.c ****       if (busystatus != RESET)
 284:FWLIB/src/stm32f4xx_hash_md5.c ****       {
 285:FWLIB/src/stm32f4xx_hash_md5.c ****          status = ERROR;
 286:FWLIB/src/stm32f4xx_hash_md5.c ****       }
 287:FWLIB/src/stm32f4xx_hash_md5.c ****       else
 288:FWLIB/src/stm32f4xx_hash_md5.c ****       {
 289:FWLIB/src/stm32f4xx_hash_md5.c ****          /* Read the message digest */
 290:FWLIB/src/stm32f4xx_hash_md5.c ****          HASH_GetDigest(&MD5_MessageDigest);
 291:FWLIB/src/stm32f4xx_hash_md5.c ****          *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 292:FWLIB/src/stm32f4xx_hash_md5.c ****          outputaddr+=4;
 293:FWLIB/src/stm32f4xx_hash_md5.c ****          *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 294:FWLIB/src/stm32f4xx_hash_md5.c ****          outputaddr+=4;
 295:FWLIB/src/stm32f4xx_hash_md5.c ****          *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 296:FWLIB/src/stm32f4xx_hash_md5.c ****          outputaddr+=4;
 297:FWLIB/src/stm32f4xx_hash_md5.c ****          *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 298:FWLIB/src/stm32f4xx_hash_md5.c ****       }
 299:FWLIB/src/stm32f4xx_hash_md5.c ****     }
 300:FWLIB/src/stm32f4xx_hash_md5.c ****   }
 301:FWLIB/src/stm32f4xx_hash_md5.c ****   return status;  
 415              		.loc 1 301 3 is_stmt 1 view .LVU145
 302:FWLIB/src/stm32f4xx_hash_md5.c **** }
 416              		.loc 1 302 1 is_stmt 0 view .LVU146
 417 0098 0FB0     		add	sp, sp, #60
 418              	.LCFI6:
 419              		.cfi_remember_state
 420              		.cfi_def_cfa_offset 28
 421              		@ sp needed
 422 009a BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 423              	.LVL45:
 424              	.L30:
 425              	.LCFI7:
 426              		.cfi_restore_state
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccIiOVvc.s 			page 23


 235:FWLIB/src/stm32f4xx_hash_md5.c **** 
 427              		.loc 1 235 5 is_stmt 1 view .LVU147
 428 009e BDF80600 		ldrh	r0, [sp, #6]
 429              	.LVL46:
 235:FWLIB/src/stm32f4xx_hash_md5.c **** 
 430              		.loc 1 235 5 is_stmt 0 view .LVU148
 431 00a2 80B2     		uxth	r0, r0
 432 00a4 FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 433              	.LVL47:
 238:FWLIB/src/stm32f4xx_hash_md5.c ****     {
 434              		.loc 1 238 5 is_stmt 1 view .LVU149
 238:FWLIB/src/stm32f4xx_hash_md5.c ****     {
 435              		.loc 1 238 5 is_stmt 0 view .LVU150
 436 00a8 05E0     		b	.L18
 437              	.LVL48:
 438              	.L19:
 240:FWLIB/src/stm32f4xx_hash_md5.c ****       inputaddr+=4;
 439              		.loc 1 240 7 is_stmt 1 discriminator 3 view .LVU151
 440 00aa 56F8040B 		ldr	r0, [r6], #4
 441              	.LVL49:
 240:FWLIB/src/stm32f4xx_hash_md5.c ****       inputaddr+=4;
 442              		.loc 1 240 7 is_stmt 0 discriminator 3 view .LVU152
 443 00ae FFF7FEFF 		bl	HASH_DataIn
 444              	.LVL50:
 241:FWLIB/src/stm32f4xx_hash_md5.c ****     }
 445              		.loc 1 241 7 is_stmt 1 discriminator 3 view .LVU153
 238:FWLIB/src/stm32f4xx_hash_md5.c ****     {
 446              		.loc 1 238 22 discriminator 3 view .LVU154
 238:FWLIB/src/stm32f4xx_hash_md5.c ****     {
 447              		.loc 1 238 23 is_stmt 0 discriminator 3 view .LVU155
 448 00b2 09F10409 		add	r9, r9, #4
 449              	.LVL51:
 450              	.L18:
 238:FWLIB/src/stm32f4xx_hash_md5.c ****     {
 451              		.loc 1 238 14 is_stmt 1 discriminator 1 view .LVU156
 238:FWLIB/src/stm32f4xx_hash_md5.c ****     {
 452              		.loc 1 238 5 is_stmt 0 discriminator 1 view .LVU157
 453 00b6 B945     		cmp	r9, r7
 454 00b8 F7D3     		bcc	.L19
 245:FWLIB/src/stm32f4xx_hash_md5.c **** 
 455              		.loc 1 245 5 is_stmt 1 view .LVU158
 456 00ba FFF7FEFF 		bl	HASH_StartDigest
 457              	.LVL52:
 248:FWLIB/src/stm32f4xx_hash_md5.c ****     do
 458              		.loc 1 248 5 view .LVU159
 248:FWLIB/src/stm32f4xx_hash_md5.c ****     do
 459              		.loc 1 248 13 is_stmt 0 view .LVU160
 460 00be 0023     		movs	r3, #0
 461 00c0 0093     		str	r3, [sp]
 462              	.L21:
 249:FWLIB/src/stm32f4xx_hash_md5.c ****     {
 463              		.loc 1 249 5 is_stmt 1 discriminator 2 view .LVU161
 251:FWLIB/src/stm32f4xx_hash_md5.c ****        counter++;
 464              		.loc 1 251 8 discriminator 2 view .LVU162
 251:FWLIB/src/stm32f4xx_hash_md5.c ****        counter++;
 465              		.loc 1 251 21 is_stmt 0 discriminator 2 view .LVU163
 466 00c2 0820     		movs	r0, #8
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccIiOVvc.s 			page 24


 467 00c4 FFF7FEFF 		bl	HASH_GetFlagStatus
 468              	.LVL53:
 251:FWLIB/src/stm32f4xx_hash_md5.c ****        counter++;
 469              		.loc 1 251 19 discriminator 2 view .LVU164
 470 00c8 0446     		mov	r4, r0
 471              	.LVL54:
 252:FWLIB/src/stm32f4xx_hash_md5.c ****     }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 472              		.loc 1 252 8 is_stmt 1 discriminator 2 view .LVU165
 252:FWLIB/src/stm32f4xx_hash_md5.c ****     }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 473              		.loc 1 252 15 is_stmt 0 discriminator 2 view .LVU166
 474 00ca 009B     		ldr	r3, [sp]
 475 00cc 0133     		adds	r3, r3, #1
 476 00ce 0093     		str	r3, [sp]
 253:FWLIB/src/stm32f4xx_hash_md5.c **** 
 477              		.loc 1 253 12 is_stmt 1 discriminator 2 view .LVU167
 253:FWLIB/src/stm32f4xx_hash_md5.c **** 
 478              		.loc 1 253 22 is_stmt 0 discriminator 2 view .LVU168
 479 00d0 009B     		ldr	r3, [sp]
 253:FWLIB/src/stm32f4xx_hash_md5.c **** 
 480              		.loc 1 253 5 discriminator 2 view .LVU169
 481 00d2 B3F5803F 		cmp	r3, #65536
 482 00d6 01D0     		beq	.L20
 253:FWLIB/src/stm32f4xx_hash_md5.c **** 
 483              		.loc 1 253 42 discriminator 1 view .LVU170
 484 00d8 0028     		cmp	r0, #0
 485 00da F2D1     		bne	.L21
 486              	.L20:
 255:FWLIB/src/stm32f4xx_hash_md5.c ****     {
 487              		.loc 1 255 5 is_stmt 1 view .LVU171
 255:FWLIB/src/stm32f4xx_hash_md5.c ****     {
 488              		.loc 1 255 8 is_stmt 0 view .LVU172
 489 00dc 0CB1     		cbz	r4, .L31
 257:FWLIB/src/stm32f4xx_hash_md5.c ****     }
 490              		.loc 1 257 14 view .LVU173
 491 00de 0020     		movs	r0, #0
 492              	.LVL55:
 257:FWLIB/src/stm32f4xx_hash_md5.c ****     }
 493              		.loc 1 257 14 view .LVU174
 494 00e0 DAE7     		b	.L17
 495              	.LVL56:
 496              	.L31:
 262:FWLIB/src/stm32f4xx_hash_md5.c **** 
 497              		.loc 1 262 7 is_stmt 1 view .LVU175
 498 00e2 BDF80400 		ldrh	r0, [sp, #4]
 499              	.LVL57:
 262:FWLIB/src/stm32f4xx_hash_md5.c **** 
 500              		.loc 1 262 7 is_stmt 0 view .LVU176
 501 00e6 80B2     		uxth	r0, r0
 502 00e8 FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 503              	.LVL58:
 265:FWLIB/src/stm32f4xx_hash_md5.c ****       for(i=0; i<Keylen; i+=4)
 504              		.loc 1 265 7 is_stmt 1 view .LVU177
 266:FWLIB/src/stm32f4xx_hash_md5.c ****       {
 505              		.loc 1 266 7 view .LVU178
 266:FWLIB/src/stm32f4xx_hash_md5.c ****       {
 506              		.loc 1 266 7 is_stmt 0 view .LVU179
 507 00ec 04E0     		b	.L22
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccIiOVvc.s 			page 25


 508              	.LVL59:
 509              	.L23:
 268:FWLIB/src/stm32f4xx_hash_md5.c ****         keyaddr+=4;
 510              		.loc 1 268 9 is_stmt 1 discriminator 3 view .LVU180
 511 00ee 58F8040B 		ldr	r0, [r8], #4
 512              	.LVL60:
 268:FWLIB/src/stm32f4xx_hash_md5.c ****         keyaddr+=4;
 513              		.loc 1 268 9 is_stmt 0 discriminator 3 view .LVU181
 514 00f2 FFF7FEFF 		bl	HASH_DataIn
 515              	.LVL61:
 269:FWLIB/src/stm32f4xx_hash_md5.c ****       }
 516              		.loc 1 269 9 is_stmt 1 discriminator 3 view .LVU182
 266:FWLIB/src/stm32f4xx_hash_md5.c ****       {
 517              		.loc 1 266 26 discriminator 3 view .LVU183
 266:FWLIB/src/stm32f4xx_hash_md5.c ****       {
 518              		.loc 1 266 27 is_stmt 0 discriminator 3 view .LVU184
 519 00f6 0434     		adds	r4, r4, #4
 520              	.LVL62:
 521              	.L22:
 266:FWLIB/src/stm32f4xx_hash_md5.c ****       {
 522              		.loc 1 266 16 is_stmt 1 discriminator 1 view .LVU185
 266:FWLIB/src/stm32f4xx_hash_md5.c ****       {
 523              		.loc 1 266 7 is_stmt 0 discriminator 1 view .LVU186
 524 00f8 AC42     		cmp	r4, r5
 525 00fa F8D3     		bcc	.L23
 273:FWLIB/src/stm32f4xx_hash_md5.c **** 
 526              		.loc 1 273 8 is_stmt 1 view .LVU187
 527 00fc FFF7FEFF 		bl	HASH_StartDigest
 528              	.LVL63:
 276:FWLIB/src/stm32f4xx_hash_md5.c ****        do
 529              		.loc 1 276 8 view .LVU188
 276:FWLIB/src/stm32f4xx_hash_md5.c ****        do
 530              		.loc 1 276 16 is_stmt 0 view .LVU189
 531 0100 0023     		movs	r3, #0
 532 0102 0093     		str	r3, [sp]
 533              	.L25:
 277:FWLIB/src/stm32f4xx_hash_md5.c ****        {
 534              		.loc 1 277 8 is_stmt 1 discriminator 2 view .LVU190
 279:FWLIB/src/stm32f4xx_hash_md5.c ****           counter++;
 535              		.loc 1 279 11 discriminator 2 view .LVU191
 279:FWLIB/src/stm32f4xx_hash_md5.c ****           counter++;
 536              		.loc 1 279 24 is_stmt 0 discriminator 2 view .LVU192
 537 0104 0820     		movs	r0, #8
 538 0106 FFF7FEFF 		bl	HASH_GetFlagStatus
 539              	.LVL64:
 280:FWLIB/src/stm32f4xx_hash_md5.c ****       }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 540              		.loc 1 280 11 is_stmt 1 discriminator 2 view .LVU193
 280:FWLIB/src/stm32f4xx_hash_md5.c ****       }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 541              		.loc 1 280 18 is_stmt 0 discriminator 2 view .LVU194
 542 010a 009B     		ldr	r3, [sp]
 543 010c 0133     		adds	r3, r3, #1
 544 010e 0093     		str	r3, [sp]
 281:FWLIB/src/stm32f4xx_hash_md5.c **** 
 545              		.loc 1 281 14 is_stmt 1 discriminator 2 view .LVU195
 281:FWLIB/src/stm32f4xx_hash_md5.c **** 
 546              		.loc 1 281 24 is_stmt 0 discriminator 2 view .LVU196
 547 0110 009B     		ldr	r3, [sp]
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccIiOVvc.s 			page 26


 281:FWLIB/src/stm32f4xx_hash_md5.c **** 
 548              		.loc 1 281 7 discriminator 2 view .LVU197
 549 0112 B3F5803F 		cmp	r3, #65536
 550 0116 01D0     		beq	.L24
 281:FWLIB/src/stm32f4xx_hash_md5.c **** 
 551              		.loc 1 281 44 discriminator 1 view .LVU198
 552 0118 0028     		cmp	r0, #0
 553 011a F3D1     		bne	.L25
 554              	.L24:
 283:FWLIB/src/stm32f4xx_hash_md5.c ****       {
 555              		.loc 1 283 7 is_stmt 1 view .LVU199
 283:FWLIB/src/stm32f4xx_hash_md5.c ****       {
 556              		.loc 1 283 10 is_stmt 0 view .LVU200
 557 011c 08B1     		cbz	r0, .L32
 285:FWLIB/src/stm32f4xx_hash_md5.c ****       }
 558              		.loc 1 285 17 view .LVU201
 559 011e 0020     		movs	r0, #0
 560              	.LVL65:
 285:FWLIB/src/stm32f4xx_hash_md5.c ****       }
 561              		.loc 1 285 17 view .LVU202
 562 0120 BAE7     		b	.L17
 563              	.LVL66:
 564              	.L32:
 290:FWLIB/src/stm32f4xx_hash_md5.c ****          *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 565              		.loc 1 290 10 is_stmt 1 view .LVU203
 566 0122 02A8     		add	r0, sp, #8
 567              	.LVL67:
 290:FWLIB/src/stm32f4xx_hash_md5.c ****          *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 568              		.loc 1 290 10 is_stmt 0 view .LVU204
 569 0124 FFF7FEFF 		bl	HASH_GetDigest
 570              	.LVL68:
 291:FWLIB/src/stm32f4xx_hash_md5.c ****          outputaddr+=4;
 571              		.loc 1 291 10 is_stmt 1 view .LVU205
 291:FWLIB/src/stm32f4xx_hash_md5.c ****          outputaddr+=4;
 572              		.loc 1 291 38 is_stmt 0 view .LVU206
 573 0128 029B     		ldr	r3, [sp, #8]
 574              	.LVL69:
 575              	.LBB26:
 576              	.LBI26:
 495:F4_CORE/core_cmInstr.h **** {
 577              		.loc 2 495 57 is_stmt 1 view .LVU207
 578              	.LBB27:
 579              		.loc 2 498 3 view .LVU208
 580              		.loc 2 498 10 is_stmt 0 view .LVU209
 581 012a 1BBA     		rev	r3, r3
 582              	.LVL70:
 583              		.loc 2 498 10 view .LVU210
 584              	.LBE27:
 585              	.LBE26:
 291:FWLIB/src/stm32f4xx_hash_md5.c ****          outputaddr+=4;
 586              		.loc 1 291 36 view .LVU211
 587 012c 169A     		ldr	r2, [sp, #88]
 588 012e 1360     		str	r3, [r2]
 292:FWLIB/src/stm32f4xx_hash_md5.c ****          *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 589              		.loc 1 292 10 is_stmt 1 view .LVU212
 590              	.LVL71:
 293:FWLIB/src/stm32f4xx_hash_md5.c ****          outputaddr+=4;
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccIiOVvc.s 			page 27


 591              		.loc 1 293 10 view .LVU213
 293:FWLIB/src/stm32f4xx_hash_md5.c ****          outputaddr+=4;
 592              		.loc 1 293 38 is_stmt 0 view .LVU214
 593 0130 039B     		ldr	r3, [sp, #12]
 594              	.LVL72:
 595              	.LBB28:
 596              	.LBI28:
 495:F4_CORE/core_cmInstr.h **** {
 597              		.loc 2 495 57 is_stmt 1 view .LVU215
 598              	.LBB29:
 599              		.loc 2 498 3 view .LVU216
 600              		.loc 2 498 10 is_stmt 0 view .LVU217
 601 0132 1BBA     		rev	r3, r3
 602              	.LVL73:
 603              		.loc 2 498 10 view .LVU218
 604              	.LBE29:
 605              	.LBE28:
 293:FWLIB/src/stm32f4xx_hash_md5.c ****          outputaddr+=4;
 606              		.loc 1 293 36 view .LVU219
 607 0134 5360     		str	r3, [r2, #4]
 294:FWLIB/src/stm32f4xx_hash_md5.c ****          *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 608              		.loc 1 294 10 is_stmt 1 view .LVU220
 609              	.LVL74:
 295:FWLIB/src/stm32f4xx_hash_md5.c ****          outputaddr+=4;
 610              		.loc 1 295 10 view .LVU221
 295:FWLIB/src/stm32f4xx_hash_md5.c ****          outputaddr+=4;
 611              		.loc 1 295 38 is_stmt 0 view .LVU222
 612 0136 049B     		ldr	r3, [sp, #16]
 613              	.LVL75:
 614              	.LBB30:
 615              	.LBI30:
 495:F4_CORE/core_cmInstr.h **** {
 616              		.loc 2 495 57 is_stmt 1 view .LVU223
 617              	.LBB31:
 618              		.loc 2 498 3 view .LVU224
 619              		.loc 2 498 10 is_stmt 0 view .LVU225
 620 0138 1BBA     		rev	r3, r3
 621              	.LVL76:
 622              		.loc 2 498 10 view .LVU226
 623              	.LBE31:
 624              	.LBE30:
 295:FWLIB/src/stm32f4xx_hash_md5.c ****          outputaddr+=4;
 625              		.loc 1 295 36 view .LVU227
 626 013a 9360     		str	r3, [r2, #8]
 296:FWLIB/src/stm32f4xx_hash_md5.c ****          *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 627              		.loc 1 296 10 is_stmt 1 view .LVU228
 628              	.LVL77:
 297:FWLIB/src/stm32f4xx_hash_md5.c ****       }
 629              		.loc 1 297 10 view .LVU229
 297:FWLIB/src/stm32f4xx_hash_md5.c ****       }
 630              		.loc 1 297 38 is_stmt 0 view .LVU230
 631 013c 059B     		ldr	r3, [sp, #20]
 632              	.LVL78:
 633              	.LBB32:
 634              	.LBI32:
 495:F4_CORE/core_cmInstr.h **** {
 635              		.loc 2 495 57 is_stmt 1 view .LVU231
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccIiOVvc.s 			page 28


 636              	.LBB33:
 637              		.loc 2 498 3 view .LVU232
 638              		.loc 2 498 10 is_stmt 0 view .LVU233
 639 013e 1BBA     		rev	r3, r3
 640              	.LVL79:
 641              		.loc 2 498 10 view .LVU234
 642              	.LBE33:
 643              	.LBE32:
 297:FWLIB/src/stm32f4xx_hash_md5.c ****       }
 644              		.loc 1 297 36 view .LVU235
 645 0140 D360     		str	r3, [r2, #12]
 178:FWLIB/src/stm32f4xx_hash_md5.c ****   uint32_t keyaddr    = (uint32_t)Key;
 646              		.loc 1 178 15 view .LVU236
 647 0142 0120     		movs	r0, #1
 648 0144 A8E7     		b	.L17
 649              		.cfi_endproc
 650              	.LFE124:
 652              		.text
 653              	.Letext0:
 654              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2020-q4-major\\arm-none-eabi\\inc
 655              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2020-q4-major\\arm-none-eabi\\inc
 656              		.file 5 "USER/stm32f4xx.h"
 657              		.file 6 "FWLIB/inc/stm32f4xx_hash.h"
ARM GAS  C:\Users\huav\AppData\Local\Temp\ccIiOVvc.s 			page 29


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_hash_md5.c
C:\Users\huav\AppData\Local\Temp\ccIiOVvc.s:18     .text.HASH_MD5:00000000 $t
C:\Users\huav\AppData\Local\Temp\ccIiOVvc.s:26     .text.HASH_MD5:00000000 HASH_MD5
C:\Users\huav\AppData\Local\Temp\ccIiOVvc.s:248    .text.HMAC_MD5:00000000 $t
C:\Users\huav\AppData\Local\Temp\ccIiOVvc.s:255    .text.HMAC_MD5:00000000 HMAC_MD5

UNDEFINED SYMBOLS
HASH_DeInit
HASH_Init
HASH_SetLastWordValidBitsNbr
HASH_DataIn
HASH_StartDigest
HASH_GetFlagStatus
HASH_GetDigest
