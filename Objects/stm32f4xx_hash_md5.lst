ARM GAS  C:\Users\why\AppData\Local\Temp\ccrXv77j.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"stm32f4xx_hash_md5.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.HASH_MD5,"ax",%progbits
  22              		.align	2
  23              		.global	HASH_MD5
  24              		.thumb
  25              		.thumb_func
  27              	HASH_MD5:
  28              	.LFB123:
  29              		.file 1 "FWLIB/src/stm32f4xx_hash_md5.c"
   1:FWLIB/src/stm32f4xx_hash_md5.c **** /**
   2:FWLIB/src/stm32f4xx_hash_md5.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_hash_md5.c ****   * @file    stm32f4xx_hash_md5.c
   4:FWLIB/src/stm32f4xx_hash_md5.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_hash_md5.c ****   * @version V1.8.0
   6:FWLIB/src/stm32f4xx_hash_md5.c ****   * @date    04-November-2016
   7:FWLIB/src/stm32f4xx_hash_md5.c ****   * @brief   This file provides high level functions to compute the HASH MD5 and
   8:FWLIB/src/stm32f4xx_hash_md5.c ****   *          HMAC MD5 Digest of an input message.
   9:FWLIB/src/stm32f4xx_hash_md5.c ****   *          It uses the stm32f4xx_hash.c/.h drivers to access the STM32F4xx HASH
  10:FWLIB/src/stm32f4xx_hash_md5.c ****   *          peripheral.
  11:FWLIB/src/stm32f4xx_hash_md5.c ****   *
  12:FWLIB/src/stm32f4xx_hash_md5.c **** @verbatim
  13:FWLIB/src/stm32f4xx_hash_md5.c ****  ===================================================================
  14:FWLIB/src/stm32f4xx_hash_md5.c ****                   ##### How to use this driver #####
  15:FWLIB/src/stm32f4xx_hash_md5.c ****  ===================================================================
  16:FWLIB/src/stm32f4xx_hash_md5.c ****  [..]
  17:FWLIB/src/stm32f4xx_hash_md5.c ****    (#) Enable The HASH controller clock using 
  18:FWLIB/src/stm32f4xx_hash_md5.c ****        RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_HASH, ENABLE); function.
  19:FWLIB/src/stm32f4xx_hash_md5.c ****   
  20:FWLIB/src/stm32f4xx_hash_md5.c ****    (#) Calculate the HASH MD5 Digest using HASH_MD5() function.
  21:FWLIB/src/stm32f4xx_hash_md5.c ****   
  22:FWLIB/src/stm32f4xx_hash_md5.c ****    (#) Calculate the HMAC MD5 Digest using HMAC_MD5() function.
  23:FWLIB/src/stm32f4xx_hash_md5.c ****   
  24:FWLIB/src/stm32f4xx_hash_md5.c **** @endverbatim
  25:FWLIB/src/stm32f4xx_hash_md5.c ****   *
  26:FWLIB/src/stm32f4xx_hash_md5.c ****   ******************************************************************************
  27:FWLIB/src/stm32f4xx_hash_md5.c ****   * @attention
  28:FWLIB/src/stm32f4xx_hash_md5.c ****   *
  29:FWLIB/src/stm32f4xx_hash_md5.c ****   * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
ARM GAS  C:\Users\why\AppData\Local\Temp\ccrXv77j.s 			page 2


  30:FWLIB/src/stm32f4xx_hash_md5.c ****   *
  31:FWLIB/src/stm32f4xx_hash_md5.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  32:FWLIB/src/stm32f4xx_hash_md5.c ****   * You may not use this file except in compliance with the License.
  33:FWLIB/src/stm32f4xx_hash_md5.c ****   * You may obtain a copy of the License at:
  34:FWLIB/src/stm32f4xx_hash_md5.c ****   *
  35:FWLIB/src/stm32f4xx_hash_md5.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  36:FWLIB/src/stm32f4xx_hash_md5.c ****   *
  37:FWLIB/src/stm32f4xx_hash_md5.c ****   * Unless required by applicable law or agreed to in writing, software 
  38:FWLIB/src/stm32f4xx_hash_md5.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  39:FWLIB/src/stm32f4xx_hash_md5.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  40:FWLIB/src/stm32f4xx_hash_md5.c ****   * See the License for the specific language governing permissions and
  41:FWLIB/src/stm32f4xx_hash_md5.c ****   * limitations under the License.
  42:FWLIB/src/stm32f4xx_hash_md5.c ****   *
  43:FWLIB/src/stm32f4xx_hash_md5.c ****   ******************************************************************************
  44:FWLIB/src/stm32f4xx_hash_md5.c ****   */
  45:FWLIB/src/stm32f4xx_hash_md5.c **** 
  46:FWLIB/src/stm32f4xx_hash_md5.c **** /* Includes ------------------------------------------------------------------*/
  47:FWLIB/src/stm32f4xx_hash_md5.c **** #include "stm32f4xx_hash.h"
  48:FWLIB/src/stm32f4xx_hash_md5.c **** 
  49:FWLIB/src/stm32f4xx_hash_md5.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  50:FWLIB/src/stm32f4xx_hash_md5.c ****   * @{
  51:FWLIB/src/stm32f4xx_hash_md5.c ****   */
  52:FWLIB/src/stm32f4xx_hash_md5.c **** 
  53:FWLIB/src/stm32f4xx_hash_md5.c **** /** @defgroup HASH 
  54:FWLIB/src/stm32f4xx_hash_md5.c ****   * @brief HASH driver modules
  55:FWLIB/src/stm32f4xx_hash_md5.c ****   * @{
  56:FWLIB/src/stm32f4xx_hash_md5.c ****   */
  57:FWLIB/src/stm32f4xx_hash_md5.c **** 
  58:FWLIB/src/stm32f4xx_hash_md5.c **** /* Private typedef -----------------------------------------------------------*/
  59:FWLIB/src/stm32f4xx_hash_md5.c **** /* Private define ------------------------------------------------------------*/
  60:FWLIB/src/stm32f4xx_hash_md5.c **** #define MD5BUSY_TIMEOUT    ((uint32_t) 0x00010000)
  61:FWLIB/src/stm32f4xx_hash_md5.c **** 
  62:FWLIB/src/stm32f4xx_hash_md5.c **** /* Private macro -------------------------------------------------------------*/
  63:FWLIB/src/stm32f4xx_hash_md5.c **** /* Private variables ---------------------------------------------------------*/
  64:FWLIB/src/stm32f4xx_hash_md5.c **** /* Private function prototypes -----------------------------------------------*/
  65:FWLIB/src/stm32f4xx_hash_md5.c **** /* Private functions ---------------------------------------------------------*/
  66:FWLIB/src/stm32f4xx_hash_md5.c **** 
  67:FWLIB/src/stm32f4xx_hash_md5.c **** /** @defgroup HASH_Private_Functions
  68:FWLIB/src/stm32f4xx_hash_md5.c ****   * @{
  69:FWLIB/src/stm32f4xx_hash_md5.c ****   */ 
  70:FWLIB/src/stm32f4xx_hash_md5.c **** 
  71:FWLIB/src/stm32f4xx_hash_md5.c **** /** @defgroup HASH_Group7 High Level MD5 functions
  72:FWLIB/src/stm32f4xx_hash_md5.c ****  *  @brief   High Level MD5 Hash and HMAC functions 
  73:FWLIB/src/stm32f4xx_hash_md5.c ****  *
  74:FWLIB/src/stm32f4xx_hash_md5.c **** @verbatim   
  75:FWLIB/src/stm32f4xx_hash_md5.c ****  ===============================================================================
  76:FWLIB/src/stm32f4xx_hash_md5.c ****               ##### High Level MD5 Hash and HMAC functions #####
  77:FWLIB/src/stm32f4xx_hash_md5.c ****  ===============================================================================
  78:FWLIB/src/stm32f4xx_hash_md5.c **** 
  79:FWLIB/src/stm32f4xx_hash_md5.c **** 
  80:FWLIB/src/stm32f4xx_hash_md5.c **** @endverbatim
  81:FWLIB/src/stm32f4xx_hash_md5.c ****   * @{
  82:FWLIB/src/stm32f4xx_hash_md5.c ****   */
  83:FWLIB/src/stm32f4xx_hash_md5.c **** 
  84:FWLIB/src/stm32f4xx_hash_md5.c **** /**
  85:FWLIB/src/stm32f4xx_hash_md5.c ****   * @brief  Compute the HASH MD5 digest.
  86:FWLIB/src/stm32f4xx_hash_md5.c ****   * @param  Input: pointer to the Input buffer to be treated.
ARM GAS  C:\Users\why\AppData\Local\Temp\ccrXv77j.s 			page 3


  87:FWLIB/src/stm32f4xx_hash_md5.c ****   * @param  Ilen: length of the Input buffer.
  88:FWLIB/src/stm32f4xx_hash_md5.c ****   * @param  Output: the returned digest
  89:FWLIB/src/stm32f4xx_hash_md5.c ****   * @retval An ErrorStatus enumeration value:
  90:FWLIB/src/stm32f4xx_hash_md5.c ****   *          - SUCCESS: digest computation done
  91:FWLIB/src/stm32f4xx_hash_md5.c ****   *          - ERROR: digest computation failed
  92:FWLIB/src/stm32f4xx_hash_md5.c ****   */
  93:FWLIB/src/stm32f4xx_hash_md5.c **** ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
  94:FWLIB/src/stm32f4xx_hash_md5.c **** {
  30              		.loc 1 94 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 56
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              	.LVL0:
  35 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 20
  38              		.cfi_offset 4, -20
  39              		.cfi_offset 5, -16
  40              		.cfi_offset 6, -12
  41              		.cfi_offset 7, -8
  42              		.cfi_offset 14, -4
  43 0002 8FB0     		sub	sp, sp, #60
  44              	.LCFI1:
  45              		.cfi_def_cfa_offset 80
  46 0004 0F46     		mov	r7, r1
  47 0006 1646     		mov	r6, r2
  95:FWLIB/src/stm32f4xx_hash_md5.c ****   HASH_InitTypeDef MD5_HASH_InitStructure;
  96:FWLIB/src/stm32f4xx_hash_md5.c ****   HASH_MsgDigest MD5_MessageDigest;
  97:FWLIB/src/stm32f4xx_hash_md5.c ****   __IO uint16_t nbvalidbitsdata = 0;
  48              		.loc 1 97 0
  49 0008 0024     		movs	r4, #0
  50 000a ADF80640 		strh	r4, [sp, #6]	@ movhi
  51              	.LVL1:
  98:FWLIB/src/stm32f4xx_hash_md5.c ****   uint32_t i = 0;
  99:FWLIB/src/stm32f4xx_hash_md5.c ****   __IO uint32_t counter = 0;
  52              		.loc 1 99 0
  53 000e 0094     		str	r4, [sp]
  54              	.LVL2:
 100:FWLIB/src/stm32f4xx_hash_md5.c ****   uint32_t busystatus = 0;
 101:FWLIB/src/stm32f4xx_hash_md5.c ****   ErrorStatus status = SUCCESS;
 102:FWLIB/src/stm32f4xx_hash_md5.c ****   uint32_t inputaddr  = (uint32_t)Input;
  55              		.loc 1 102 0
  56 0010 0546     		mov	r5, r0
  57              	.LVL3:
 103:FWLIB/src/stm32f4xx_hash_md5.c ****   uint32_t outputaddr = (uint32_t)Output;
 104:FWLIB/src/stm32f4xx_hash_md5.c **** 
 105:FWLIB/src/stm32f4xx_hash_md5.c **** 
 106:FWLIB/src/stm32f4xx_hash_md5.c ****   /* Number of valid bits in last word of the Input data */
 107:FWLIB/src/stm32f4xx_hash_md5.c ****   nbvalidbitsdata = 8 * (Ilen % 4);
  58              		.loc 1 107 0
  59 0012 01F00303 		and	r3, r1, #3
  60 0016 DB00     		lsls	r3, r3, #3
  61 0018 ADF80630 		strh	r3, [sp, #6]	@ movhi
 108:FWLIB/src/stm32f4xx_hash_md5.c **** 
 109:FWLIB/src/stm32f4xx_hash_md5.c ****   /* HASH peripheral initialization */
 110:FWLIB/src/stm32f4xx_hash_md5.c ****   HASH_DeInit();
  62              		.loc 1 110 0
ARM GAS  C:\Users\why\AppData\Local\Temp\ccrXv77j.s 			page 4


  63 001c FFF7FEFF 		bl	HASH_DeInit
  64              	.LVL4:
 111:FWLIB/src/stm32f4xx_hash_md5.c **** 
 112:FWLIB/src/stm32f4xx_hash_md5.c ****   /* HASH Configuration */
 113:FWLIB/src/stm32f4xx_hash_md5.c ****   MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
  65              		.loc 1 113 0
  66 0020 8023     		movs	r3, #128
  67 0022 0A93     		str	r3, [sp, #40]
 114:FWLIB/src/stm32f4xx_hash_md5.c ****   MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
  68              		.loc 1 114 0
  69 0024 0B94     		str	r4, [sp, #44]
 115:FWLIB/src/stm32f4xx_hash_md5.c ****   MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
  70              		.loc 1 115 0
  71 0026 2023     		movs	r3, #32
  72 0028 0C93     		str	r3, [sp, #48]
 116:FWLIB/src/stm32f4xx_hash_md5.c ****   HASH_Init(&MD5_HASH_InitStructure);
  73              		.loc 1 116 0
  74 002a 0AA8     		add	r0, sp, #40
  75 002c FFF7FEFF 		bl	HASH_Init
  76              	.LVL5:
 117:FWLIB/src/stm32f4xx_hash_md5.c **** 
 118:FWLIB/src/stm32f4xx_hash_md5.c ****   /* Configure the number of valid bits in last word of the data */
 119:FWLIB/src/stm32f4xx_hash_md5.c ****   HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
  77              		.loc 1 119 0
  78 0030 BDF80600 		ldrh	r0, [sp, #6]
  79 0034 80B2     		uxth	r0, r0
  80 0036 FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
  81              	.LVL6:
 120:FWLIB/src/stm32f4xx_hash_md5.c **** 
 121:FWLIB/src/stm32f4xx_hash_md5.c ****   /* Write the Input block in the IN FIFO */
 122:FWLIB/src/stm32f4xx_hash_md5.c ****   for(i=0; i<Ilen; i+=4)
  82              		.loc 1 122 0
  83 003a 04E0     		b	.L2
  84              	.LVL7:
  85              	.L3:
 123:FWLIB/src/stm32f4xx_hash_md5.c ****   {
 124:FWLIB/src/stm32f4xx_hash_md5.c ****     HASH_DataIn(*(uint32_t*)inputaddr);
  86              		.loc 1 124 0 discriminator 3
  87 003c 55F8040B 		ldr	r0, [r5], #4
  88              	.LVL8:
  89 0040 FFF7FEFF 		bl	HASH_DataIn
  90              	.LVL9:
 122:FWLIB/src/stm32f4xx_hash_md5.c ****   {
  91              		.loc 1 122 0 discriminator 3
  92 0044 0434     		adds	r4, r4, #4
  93              	.LVL10:
  94              	.L2:
 122:FWLIB/src/stm32f4xx_hash_md5.c ****   {
  95              		.loc 1 122 0 is_stmt 0 discriminator 1
  96 0046 BC42     		cmp	r4, r7
  97 0048 F8D3     		bcc	.L3
 125:FWLIB/src/stm32f4xx_hash_md5.c ****     inputaddr+=4;
 126:FWLIB/src/stm32f4xx_hash_md5.c ****   }
 127:FWLIB/src/stm32f4xx_hash_md5.c **** 
 128:FWLIB/src/stm32f4xx_hash_md5.c ****   /* Start the HASH processor */
 129:FWLIB/src/stm32f4xx_hash_md5.c ****   HASH_StartDigest();
  98              		.loc 1 129 0 is_stmt 1
ARM GAS  C:\Users\why\AppData\Local\Temp\ccrXv77j.s 			page 5


  99 004a FFF7FEFF 		bl	HASH_StartDigest
 100              	.LVL11:
 101              	.L5:
 130:FWLIB/src/stm32f4xx_hash_md5.c **** 
 131:FWLIB/src/stm32f4xx_hash_md5.c ****   /* wait until the Busy flag is RESET */
 132:FWLIB/src/stm32f4xx_hash_md5.c ****   do
 133:FWLIB/src/stm32f4xx_hash_md5.c ****   {
 134:FWLIB/src/stm32f4xx_hash_md5.c ****     busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 102              		.loc 1 134 0 discriminator 2
 103 004e 0820     		movs	r0, #8
 104 0050 FFF7FEFF 		bl	HASH_GetFlagStatus
 105              	.LVL12:
 106 0054 0246     		mov	r2, r0
 107              	.LVL13:
 135:FWLIB/src/stm32f4xx_hash_md5.c ****     counter++;
 108              		.loc 1 135 0 discriminator 2
 109 0056 009B     		ldr	r3, [sp]
 110 0058 0133     		adds	r3, r3, #1
 111 005a 0093     		str	r3, [sp]
 136:FWLIB/src/stm32f4xx_hash_md5.c ****   }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 112              		.loc 1 136 0 discriminator 2
 113 005c 009B     		ldr	r3, [sp]
 114 005e B3F5803F 		cmp	r3, #65536
 115 0062 01D0     		beq	.L4
 116              		.loc 1 136 0 is_stmt 0 discriminator 1
 117 0064 0028     		cmp	r0, #0
 118 0066 F2D1     		bne	.L5
 119              	.L4:
 137:FWLIB/src/stm32f4xx_hash_md5.c **** 
 138:FWLIB/src/stm32f4xx_hash_md5.c ****   if (busystatus != RESET)
 120              		.loc 1 138 0 is_stmt 1
 121 0068 82B9     		cbnz	r2, .L7
 139:FWLIB/src/stm32f4xx_hash_md5.c ****   {
 140:FWLIB/src/stm32f4xx_hash_md5.c ****      status = ERROR;
 141:FWLIB/src/stm32f4xx_hash_md5.c ****   }
 142:FWLIB/src/stm32f4xx_hash_md5.c ****   else
 143:FWLIB/src/stm32f4xx_hash_md5.c ****   {
 144:FWLIB/src/stm32f4xx_hash_md5.c ****     /* Read the message digest */
 145:FWLIB/src/stm32f4xx_hash_md5.c ****     HASH_GetDigest(&MD5_MessageDigest);
 122              		.loc 1 145 0
 123 006a 02A8     		add	r0, sp, #8
 124              	.LVL14:
 125 006c FFF7FEFF 		bl	HASH_GetDigest
 126              	.LVL15:
 146:FWLIB/src/stm32f4xx_hash_md5.c ****     *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 127              		.loc 1 146 0
 128 0070 029B     		ldr	r3, [sp, #8]
 129              	.LVL16:
 130              	.LBB18:
 131              	.LBB19:
 132              		.file 2 "F4_CORE/core_cmInstr.h"
   1:F4_CORE/core_cmInstr.h **** /**************************************************************************//**
   2:F4_CORE/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:F4_CORE/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:F4_CORE/core_cmInstr.h ****  * @version  V4.10
   5:F4_CORE/core_cmInstr.h ****  * @date     18. March 2015
   6:F4_CORE/core_cmInstr.h ****  *
ARM GAS  C:\Users\why\AppData\Local\Temp\ccrXv77j.s 			page 6


   7:F4_CORE/core_cmInstr.h ****  * @note
   8:F4_CORE/core_cmInstr.h ****  *
   9:F4_CORE/core_cmInstr.h ****  ******************************************************************************/
  10:F4_CORE/core_cmInstr.h **** /* Copyright (c) 2009 - 2014 ARM LIMITED
  11:F4_CORE/core_cmInstr.h **** 
  12:F4_CORE/core_cmInstr.h ****    All rights reserved.
  13:F4_CORE/core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:F4_CORE/core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:F4_CORE/core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:F4_CORE/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:F4_CORE/core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:F4_CORE/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:F4_CORE/core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:F4_CORE/core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:F4_CORE/core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:F4_CORE/core_cmInstr.h ****      specific prior written permission.
  23:F4_CORE/core_cmInstr.h ****    *
  24:F4_CORE/core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:F4_CORE/core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:F4_CORE/core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:F4_CORE/core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:F4_CORE/core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:F4_CORE/core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:F4_CORE/core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:F4_CORE/core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:F4_CORE/core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:F4_CORE/core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:F4_CORE/core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:F4_CORE/core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:F4_CORE/core_cmInstr.h **** 
  37:F4_CORE/core_cmInstr.h **** 
  38:F4_CORE/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:F4_CORE/core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:F4_CORE/core_cmInstr.h **** 
  41:F4_CORE/core_cmInstr.h **** 
  42:F4_CORE/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:F4_CORE/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:F4_CORE/core_cmInstr.h ****   Access to dedicated instructions
  45:F4_CORE/core_cmInstr.h ****   @{
  46:F4_CORE/core_cmInstr.h **** */
  47:F4_CORE/core_cmInstr.h **** 
  48:F4_CORE/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:F4_CORE/core_cmInstr.h **** /* ARM armcc specific functions */
  50:F4_CORE/core_cmInstr.h **** 
  51:F4_CORE/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:F4_CORE/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:F4_CORE/core_cmInstr.h **** #endif
  54:F4_CORE/core_cmInstr.h **** 
  55:F4_CORE/core_cmInstr.h **** 
  56:F4_CORE/core_cmInstr.h **** /** \brief  No Operation
  57:F4_CORE/core_cmInstr.h **** 
  58:F4_CORE/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:F4_CORE/core_cmInstr.h ****  */
  60:F4_CORE/core_cmInstr.h **** #define __NOP                             __nop
  61:F4_CORE/core_cmInstr.h **** 
  62:F4_CORE/core_cmInstr.h **** 
  63:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Interrupt
ARM GAS  C:\Users\why\AppData\Local\Temp\ccrXv77j.s 			page 7


  64:F4_CORE/core_cmInstr.h **** 
  65:F4_CORE/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:F4_CORE/core_cmInstr.h ****     until one of a number of events occurs.
  67:F4_CORE/core_cmInstr.h ****  */
  68:F4_CORE/core_cmInstr.h **** #define __WFI                             __wfi
  69:F4_CORE/core_cmInstr.h **** 
  70:F4_CORE/core_cmInstr.h **** 
  71:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Event
  72:F4_CORE/core_cmInstr.h **** 
  73:F4_CORE/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:F4_CORE/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:F4_CORE/core_cmInstr.h ****  */
  76:F4_CORE/core_cmInstr.h **** #define __WFE                             __wfe
  77:F4_CORE/core_cmInstr.h **** 
  78:F4_CORE/core_cmInstr.h **** 
  79:F4_CORE/core_cmInstr.h **** /** \brief  Send Event
  80:F4_CORE/core_cmInstr.h **** 
  81:F4_CORE/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:F4_CORE/core_cmInstr.h ****  */
  83:F4_CORE/core_cmInstr.h **** #define __SEV                             __sev
  84:F4_CORE/core_cmInstr.h **** 
  85:F4_CORE/core_cmInstr.h **** 
  86:F4_CORE/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:F4_CORE/core_cmInstr.h **** 
  88:F4_CORE/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:F4_CORE/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:F4_CORE/core_cmInstr.h ****     memory, after the instruction has been completed.
  91:F4_CORE/core_cmInstr.h ****  */
  92:F4_CORE/core_cmInstr.h **** #define __ISB() do {\
  93:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
  94:F4_CORE/core_cmInstr.h ****                    __isb(0xF);\
  95:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
  96:F4_CORE/core_cmInstr.h ****                 } while (0)
  97:F4_CORE/core_cmInstr.h **** 
  98:F4_CORE/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  99:F4_CORE/core_cmInstr.h **** 
 100:F4_CORE/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 101:F4_CORE/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 102:F4_CORE/core_cmInstr.h ****  */
 103:F4_CORE/core_cmInstr.h **** #define __DSB() do {\
 104:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 105:F4_CORE/core_cmInstr.h ****                    __dsb(0xF);\
 106:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 107:F4_CORE/core_cmInstr.h ****                 } while (0)
 108:F4_CORE/core_cmInstr.h **** 
 109:F4_CORE/core_cmInstr.h **** /** \brief  Data Memory Barrier
 110:F4_CORE/core_cmInstr.h **** 
 111:F4_CORE/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 112:F4_CORE/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 113:F4_CORE/core_cmInstr.h ****  */
 114:F4_CORE/core_cmInstr.h **** #define __DMB() do {\
 115:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 116:F4_CORE/core_cmInstr.h ****                    __dmb(0xF);\
 117:F4_CORE/core_cmInstr.h ****                    __schedule_barrier();\
 118:F4_CORE/core_cmInstr.h ****                 } while (0)
 119:F4_CORE/core_cmInstr.h **** 
 120:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
ARM GAS  C:\Users\why\AppData\Local\Temp\ccrXv77j.s 			page 8


 121:F4_CORE/core_cmInstr.h **** 
 122:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in integer value.
 123:F4_CORE/core_cmInstr.h **** 
 124:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 125:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 126:F4_CORE/core_cmInstr.h ****  */
 127:F4_CORE/core_cmInstr.h **** #define __REV                             __rev
 128:F4_CORE/core_cmInstr.h **** 
 129:F4_CORE/core_cmInstr.h **** 
 130:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 131:F4_CORE/core_cmInstr.h **** 
 132:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 133:F4_CORE/core_cmInstr.h **** 
 134:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 135:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 136:F4_CORE/core_cmInstr.h ****  */
 137:F4_CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 138:F4_CORE/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 139:F4_CORE/core_cmInstr.h **** {
 140:F4_CORE/core_cmInstr.h ****   rev16 r0, r0
 141:F4_CORE/core_cmInstr.h ****   bx lr
 142:F4_CORE/core_cmInstr.h **** }
 143:F4_CORE/core_cmInstr.h **** #endif
 144:F4_CORE/core_cmInstr.h **** 
 145:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 146:F4_CORE/core_cmInstr.h **** 
 147:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 148:F4_CORE/core_cmInstr.h **** 
 149:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 150:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 151:F4_CORE/core_cmInstr.h ****  */
 152:F4_CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 153:F4_CORE/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 154:F4_CORE/core_cmInstr.h **** {
 155:F4_CORE/core_cmInstr.h ****   revsh r0, r0
 156:F4_CORE/core_cmInstr.h ****   bx lr
 157:F4_CORE/core_cmInstr.h **** }
 158:F4_CORE/core_cmInstr.h **** #endif
 159:F4_CORE/core_cmInstr.h **** 
 160:F4_CORE/core_cmInstr.h **** 
 161:F4_CORE/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 162:F4_CORE/core_cmInstr.h **** 
 163:F4_CORE/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 164:F4_CORE/core_cmInstr.h **** 
 165:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to rotate
 166:F4_CORE/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 167:F4_CORE/core_cmInstr.h ****     \return               Rotated value
 168:F4_CORE/core_cmInstr.h ****  */
 169:F4_CORE/core_cmInstr.h **** #define __ROR                             __ror
 170:F4_CORE/core_cmInstr.h **** 
 171:F4_CORE/core_cmInstr.h **** 
 172:F4_CORE/core_cmInstr.h **** /** \brief  Breakpoint
 173:F4_CORE/core_cmInstr.h **** 
 174:F4_CORE/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 175:F4_CORE/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 176:F4_CORE/core_cmInstr.h **** 
 177:F4_CORE/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
ARM GAS  C:\Users\why\AppData\Local\Temp\ccrXv77j.s 			page 9


 178:F4_CORE/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 179:F4_CORE/core_cmInstr.h ****  */
 180:F4_CORE/core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 181:F4_CORE/core_cmInstr.h **** 
 182:F4_CORE/core_cmInstr.h **** 
 183:F4_CORE/core_cmInstr.h **** /** \brief  Reverse bit order of value
 184:F4_CORE/core_cmInstr.h **** 
 185:F4_CORE/core_cmInstr.h ****     This function reverses the bit order of the given value.
 186:F4_CORE/core_cmInstr.h **** 
 187:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 188:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 189:F4_CORE/core_cmInstr.h ****  */
 190:F4_CORE/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 191:F4_CORE/core_cmInstr.h ****   #define __RBIT                          __rbit
 192:F4_CORE/core_cmInstr.h **** #else
 193:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 194:F4_CORE/core_cmInstr.h **** {
 195:F4_CORE/core_cmInstr.h ****   uint32_t result;
 196:F4_CORE/core_cmInstr.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; // extra shift needed at end
 197:F4_CORE/core_cmInstr.h **** 
 198:F4_CORE/core_cmInstr.h ****   result = value;                      // r will be reversed bits of v; first get LSB of v
 199:F4_CORE/core_cmInstr.h ****   for (value >>= 1; value; value >>= 1)
 200:F4_CORE/core_cmInstr.h ****   {
 201:F4_CORE/core_cmInstr.h ****     result <<= 1;
 202:F4_CORE/core_cmInstr.h ****     result |= value & 1;
 203:F4_CORE/core_cmInstr.h ****     s--;
 204:F4_CORE/core_cmInstr.h ****   }
 205:F4_CORE/core_cmInstr.h ****   result <<= s;                       // shift when v's highest bits are zero
 206:F4_CORE/core_cmInstr.h ****   return(result);
 207:F4_CORE/core_cmInstr.h **** }
 208:F4_CORE/core_cmInstr.h **** #endif
 209:F4_CORE/core_cmInstr.h **** 
 210:F4_CORE/core_cmInstr.h **** 
 211:F4_CORE/core_cmInstr.h **** /** \brief  Count leading zeros
 212:F4_CORE/core_cmInstr.h **** 
 213:F4_CORE/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 214:F4_CORE/core_cmInstr.h **** 
 215:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 216:F4_CORE/core_cmInstr.h ****     \return             number of leading zeros in value
 217:F4_CORE/core_cmInstr.h ****  */
 218:F4_CORE/core_cmInstr.h **** #define __CLZ                             __clz
 219:F4_CORE/core_cmInstr.h **** 
 220:F4_CORE/core_cmInstr.h **** 
 221:F4_CORE/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 222:F4_CORE/core_cmInstr.h **** 
 223:F4_CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 224:F4_CORE/core_cmInstr.h **** 
 225:F4_CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 8 bit value.
 226:F4_CORE/core_cmInstr.h **** 
 227:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 228:F4_CORE/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 229:F4_CORE/core_cmInstr.h ****  */
 230:F4_CORE/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 231:F4_CORE/core_cmInstr.h **** 
 232:F4_CORE/core_cmInstr.h **** 
 233:F4_CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 234:F4_CORE/core_cmInstr.h **** 
ARM GAS  C:\Users\why\AppData\Local\Temp\ccrXv77j.s 			page 10


 235:F4_CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 16 bit values.
 236:F4_CORE/core_cmInstr.h **** 
 237:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 238:F4_CORE/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 239:F4_CORE/core_cmInstr.h ****  */
 240:F4_CORE/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 241:F4_CORE/core_cmInstr.h **** 
 242:F4_CORE/core_cmInstr.h **** 
 243:F4_CORE/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 244:F4_CORE/core_cmInstr.h **** 
 245:F4_CORE/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 32 bit values.
 246:F4_CORE/core_cmInstr.h **** 
 247:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 248:F4_CORE/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 249:F4_CORE/core_cmInstr.h ****  */
 250:F4_CORE/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 251:F4_CORE/core_cmInstr.h **** 
 252:F4_CORE/core_cmInstr.h **** 
 253:F4_CORE/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 254:F4_CORE/core_cmInstr.h **** 
 255:F4_CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 8 bit values.
 256:F4_CORE/core_cmInstr.h **** 
 257:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 258:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 259:F4_CORE/core_cmInstr.h ****     \return          0  Function succeeded
 260:F4_CORE/core_cmInstr.h ****     \return          1  Function failed
 261:F4_CORE/core_cmInstr.h ****  */
 262:F4_CORE/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 263:F4_CORE/core_cmInstr.h **** 
 264:F4_CORE/core_cmInstr.h **** 
 265:F4_CORE/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 266:F4_CORE/core_cmInstr.h **** 
 267:F4_CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 16 bit values.
 268:F4_CORE/core_cmInstr.h **** 
 269:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 270:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 271:F4_CORE/core_cmInstr.h ****     \return          0  Function succeeded
 272:F4_CORE/core_cmInstr.h ****     \return          1  Function failed
 273:F4_CORE/core_cmInstr.h ****  */
 274:F4_CORE/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 275:F4_CORE/core_cmInstr.h **** 
 276:F4_CORE/core_cmInstr.h **** 
 277:F4_CORE/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 278:F4_CORE/core_cmInstr.h **** 
 279:F4_CORE/core_cmInstr.h ****     This function executes a exclusive STR instruction for 32 bit values.
 280:F4_CORE/core_cmInstr.h **** 
 281:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 282:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 283:F4_CORE/core_cmInstr.h ****     \return          0  Function succeeded
 284:F4_CORE/core_cmInstr.h ****     \return          1  Function failed
 285:F4_CORE/core_cmInstr.h ****  */
 286:F4_CORE/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 287:F4_CORE/core_cmInstr.h **** 
 288:F4_CORE/core_cmInstr.h **** 
 289:F4_CORE/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 290:F4_CORE/core_cmInstr.h **** 
 291:F4_CORE/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
ARM GAS  C:\Users\why\AppData\Local\Temp\ccrXv77j.s 			page 11


 292:F4_CORE/core_cmInstr.h **** 
 293:F4_CORE/core_cmInstr.h ****  */
 294:F4_CORE/core_cmInstr.h **** #define __CLREX                           __clrex
 295:F4_CORE/core_cmInstr.h **** 
 296:F4_CORE/core_cmInstr.h **** 
 297:F4_CORE/core_cmInstr.h **** /** \brief  Signed Saturate
 298:F4_CORE/core_cmInstr.h **** 
 299:F4_CORE/core_cmInstr.h ****     This function saturates a signed value.
 300:F4_CORE/core_cmInstr.h **** 
 301:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 302:F4_CORE/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 303:F4_CORE/core_cmInstr.h ****     \return             Saturated value
 304:F4_CORE/core_cmInstr.h ****  */
 305:F4_CORE/core_cmInstr.h **** #define __SSAT                            __ssat
 306:F4_CORE/core_cmInstr.h **** 
 307:F4_CORE/core_cmInstr.h **** 
 308:F4_CORE/core_cmInstr.h **** /** \brief  Unsigned Saturate
 309:F4_CORE/core_cmInstr.h **** 
 310:F4_CORE/core_cmInstr.h ****     This function saturates an unsigned value.
 311:F4_CORE/core_cmInstr.h **** 
 312:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 313:F4_CORE/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 314:F4_CORE/core_cmInstr.h ****     \return             Saturated value
 315:F4_CORE/core_cmInstr.h ****  */
 316:F4_CORE/core_cmInstr.h **** #define __USAT                            __usat
 317:F4_CORE/core_cmInstr.h **** 
 318:F4_CORE/core_cmInstr.h **** 
 319:F4_CORE/core_cmInstr.h **** /** \brief  Rotate Right with Extend (32 bit)
 320:F4_CORE/core_cmInstr.h **** 
 321:F4_CORE/core_cmInstr.h ****     This function moves each bit of a bitstring right by one bit.
 322:F4_CORE/core_cmInstr.h ****     The carry input is shifted in at the left end of the bitstring.
 323:F4_CORE/core_cmInstr.h **** 
 324:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to rotate
 325:F4_CORE/core_cmInstr.h ****     \return               Rotated value
 326:F4_CORE/core_cmInstr.h ****  */
 327:F4_CORE/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 328:F4_CORE/core_cmInstr.h **** __attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
 329:F4_CORE/core_cmInstr.h **** {
 330:F4_CORE/core_cmInstr.h ****   rrx r0, r0
 331:F4_CORE/core_cmInstr.h ****   bx lr
 332:F4_CORE/core_cmInstr.h **** }
 333:F4_CORE/core_cmInstr.h **** #endif
 334:F4_CORE/core_cmInstr.h **** 
 335:F4_CORE/core_cmInstr.h **** 
 336:F4_CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (8 bit)
 337:F4_CORE/core_cmInstr.h **** 
 338:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 8 bit value.
 339:F4_CORE/core_cmInstr.h **** 
 340:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 341:F4_CORE/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 342:F4_CORE/core_cmInstr.h ****  */
 343:F4_CORE/core_cmInstr.h **** #define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
 344:F4_CORE/core_cmInstr.h **** 
 345:F4_CORE/core_cmInstr.h **** 
 346:F4_CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (16 bit)
 347:F4_CORE/core_cmInstr.h **** 
 348:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 16 bit values.
ARM GAS  C:\Users\why\AppData\Local\Temp\ccrXv77j.s 			page 12


 349:F4_CORE/core_cmInstr.h **** 
 350:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 351:F4_CORE/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 352:F4_CORE/core_cmInstr.h ****  */
 353:F4_CORE/core_cmInstr.h **** #define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
 354:F4_CORE/core_cmInstr.h **** 
 355:F4_CORE/core_cmInstr.h **** 
 356:F4_CORE/core_cmInstr.h **** /** \brief  LDRT Unprivileged (32 bit)
 357:F4_CORE/core_cmInstr.h **** 
 358:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 32 bit values.
 359:F4_CORE/core_cmInstr.h **** 
 360:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 361:F4_CORE/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 362:F4_CORE/core_cmInstr.h ****  */
 363:F4_CORE/core_cmInstr.h **** #define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
 364:F4_CORE/core_cmInstr.h **** 
 365:F4_CORE/core_cmInstr.h **** 
 366:F4_CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (8 bit)
 367:F4_CORE/core_cmInstr.h **** 
 368:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 8 bit values.
 369:F4_CORE/core_cmInstr.h **** 
 370:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 371:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 372:F4_CORE/core_cmInstr.h ****  */
 373:F4_CORE/core_cmInstr.h **** #define __STRBT(value, ptr)               __strt(value, ptr)
 374:F4_CORE/core_cmInstr.h **** 
 375:F4_CORE/core_cmInstr.h **** 
 376:F4_CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (16 bit)
 377:F4_CORE/core_cmInstr.h **** 
 378:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 16 bit values.
 379:F4_CORE/core_cmInstr.h **** 
 380:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 381:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 382:F4_CORE/core_cmInstr.h ****  */
 383:F4_CORE/core_cmInstr.h **** #define __STRHT(value, ptr)               __strt(value, ptr)
 384:F4_CORE/core_cmInstr.h **** 
 385:F4_CORE/core_cmInstr.h **** 
 386:F4_CORE/core_cmInstr.h **** /** \brief  STRT Unprivileged (32 bit)
 387:F4_CORE/core_cmInstr.h **** 
 388:F4_CORE/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 32 bit values.
 389:F4_CORE/core_cmInstr.h **** 
 390:F4_CORE/core_cmInstr.h ****     \param [in]  value  Value to store
 391:F4_CORE/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 392:F4_CORE/core_cmInstr.h ****  */
 393:F4_CORE/core_cmInstr.h **** #define __STRT(value, ptr)                __strt(value, ptr)
 394:F4_CORE/core_cmInstr.h **** 
 395:F4_CORE/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300) */
 396:F4_CORE/core_cmInstr.h **** 
 397:F4_CORE/core_cmInstr.h **** 
 398:F4_CORE/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 399:F4_CORE/core_cmInstr.h **** /* GNU gcc specific functions */
 400:F4_CORE/core_cmInstr.h **** 
 401:F4_CORE/core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 402:F4_CORE/core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 403:F4_CORE/core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 404:F4_CORE/core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 405:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
ARM GAS  C:\Users\why\AppData\Local\Temp\ccrXv77j.s 			page 13


 406:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 407:F4_CORE/core_cmInstr.h **** #else
 408:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 409:F4_CORE/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 410:F4_CORE/core_cmInstr.h **** #endif
 411:F4_CORE/core_cmInstr.h **** 
 412:F4_CORE/core_cmInstr.h **** /** \brief  No Operation
 413:F4_CORE/core_cmInstr.h **** 
 414:F4_CORE/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 415:F4_CORE/core_cmInstr.h ****  */
 416:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 417:F4_CORE/core_cmInstr.h **** {
 418:F4_CORE/core_cmInstr.h ****   __ASM volatile ("nop");
 419:F4_CORE/core_cmInstr.h **** }
 420:F4_CORE/core_cmInstr.h **** 
 421:F4_CORE/core_cmInstr.h **** 
 422:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Interrupt
 423:F4_CORE/core_cmInstr.h **** 
 424:F4_CORE/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 425:F4_CORE/core_cmInstr.h ****     until one of a number of events occurs.
 426:F4_CORE/core_cmInstr.h ****  */
 427:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 428:F4_CORE/core_cmInstr.h **** {
 429:F4_CORE/core_cmInstr.h ****   __ASM volatile ("wfi");
 430:F4_CORE/core_cmInstr.h **** }
 431:F4_CORE/core_cmInstr.h **** 
 432:F4_CORE/core_cmInstr.h **** 
 433:F4_CORE/core_cmInstr.h **** /** \brief  Wait For Event
 434:F4_CORE/core_cmInstr.h **** 
 435:F4_CORE/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 436:F4_CORE/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 437:F4_CORE/core_cmInstr.h ****  */
 438:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 439:F4_CORE/core_cmInstr.h **** {
 440:F4_CORE/core_cmInstr.h ****   __ASM volatile ("wfe");
 441:F4_CORE/core_cmInstr.h **** }
 442:F4_CORE/core_cmInstr.h **** 
 443:F4_CORE/core_cmInstr.h **** 
 444:F4_CORE/core_cmInstr.h **** /** \brief  Send Event
 445:F4_CORE/core_cmInstr.h **** 
 446:F4_CORE/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 447:F4_CORE/core_cmInstr.h ****  */
 448:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 449:F4_CORE/core_cmInstr.h **** {
 450:F4_CORE/core_cmInstr.h ****   __ASM volatile ("sev");
 451:F4_CORE/core_cmInstr.h **** }
 452:F4_CORE/core_cmInstr.h **** 
 453:F4_CORE/core_cmInstr.h **** 
 454:F4_CORE/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 455:F4_CORE/core_cmInstr.h **** 
 456:F4_CORE/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 457:F4_CORE/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 458:F4_CORE/core_cmInstr.h ****     memory, after the instruction has been completed.
 459:F4_CORE/core_cmInstr.h ****  */
 460:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 461:F4_CORE/core_cmInstr.h **** {
 462:F4_CORE/core_cmInstr.h ****   __ASM volatile ("isb 0xF":::"memory");
ARM GAS  C:\Users\why\AppData\Local\Temp\ccrXv77j.s 			page 14


 463:F4_CORE/core_cmInstr.h **** }
 464:F4_CORE/core_cmInstr.h **** 
 465:F4_CORE/core_cmInstr.h **** 
 466:F4_CORE/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 467:F4_CORE/core_cmInstr.h **** 
 468:F4_CORE/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 469:F4_CORE/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 470:F4_CORE/core_cmInstr.h ****  */
 471:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 472:F4_CORE/core_cmInstr.h **** {
 473:F4_CORE/core_cmInstr.h ****   __ASM volatile ("dsb 0xF":::"memory");
 474:F4_CORE/core_cmInstr.h **** }
 475:F4_CORE/core_cmInstr.h **** 
 476:F4_CORE/core_cmInstr.h **** 
 477:F4_CORE/core_cmInstr.h **** /** \brief  Data Memory Barrier
 478:F4_CORE/core_cmInstr.h **** 
 479:F4_CORE/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 480:F4_CORE/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 481:F4_CORE/core_cmInstr.h ****  */
 482:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 483:F4_CORE/core_cmInstr.h **** {
 484:F4_CORE/core_cmInstr.h ****   __ASM volatile ("dmb 0xF":::"memory");
 485:F4_CORE/core_cmInstr.h **** }
 486:F4_CORE/core_cmInstr.h **** 
 487:F4_CORE/core_cmInstr.h **** 
 488:F4_CORE/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 489:F4_CORE/core_cmInstr.h **** 
 490:F4_CORE/core_cmInstr.h ****     This function reverses the byte order in integer value.
 491:F4_CORE/core_cmInstr.h **** 
 492:F4_CORE/core_cmInstr.h ****     \param [in]    value  Value to reverse
 493:F4_CORE/core_cmInstr.h ****     \return               Reversed value
 494:F4_CORE/core_cmInstr.h ****  */
 495:F4_CORE/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 496:F4_CORE/core_cmInstr.h **** {
 497:F4_CORE/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 498:F4_CORE/core_cmInstr.h ****   return __builtin_bswap32(value);
 133              		.loc 2 498 0
 134 0072 1BBA     		rev	r3, r3
 135              	.LVL17:
 136              	.LBE19:
 137              	.LBE18:
 138              		.loc 1 146 0
 139 0074 3360     		str	r3, [r6]
 140              	.LVL18:
 147:FWLIB/src/stm32f4xx_hash_md5.c ****     outputaddr+=4;
 148:FWLIB/src/stm32f4xx_hash_md5.c ****     *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 141              		.loc 1 148 0
 142 0076 039B     		ldr	r3, [sp, #12]
 143              	.LVL19:
 144              	.LBB20:
 145              	.LBB21:
 146              		.loc 2 498 0
 147 0078 1BBA     		rev	r3, r3
 148              	.LVL20:
 149              	.LBE21:
 150              	.LBE20:
 151              		.loc 1 148 0
ARM GAS  C:\Users\why\AppData\Local\Temp\ccrXv77j.s 			page 15


 152 007a 7360     		str	r3, [r6, #4]
 153              	.LVL21:
 149:FWLIB/src/stm32f4xx_hash_md5.c ****     outputaddr+=4;
 150:FWLIB/src/stm32f4xx_hash_md5.c ****     *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 154              		.loc 1 150 0
 155 007c 049B     		ldr	r3, [sp, #16]
 156              	.LVL22:
 157              	.LBB22:
 158              	.LBB23:
 159              		.loc 2 498 0
 160 007e 1BBA     		rev	r3, r3
 161              	.LVL23:
 162              	.LBE23:
 163              	.LBE22:
 164              		.loc 1 150 0
 165 0080 B360     		str	r3, [r6, #8]
 166              	.LVL24:
 151:FWLIB/src/stm32f4xx_hash_md5.c ****     outputaddr+=4;
 152:FWLIB/src/stm32f4xx_hash_md5.c ****     *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 167              		.loc 1 152 0
 168 0082 059B     		ldr	r3, [sp, #20]
 169              	.LVL25:
 170              	.LBB24:
 171              	.LBB25:
 172              		.loc 2 498 0
 173 0084 1BBA     		rev	r3, r3
 174              	.LVL26:
 175              	.LBE25:
 176              	.LBE24:
 177              		.loc 1 152 0
 178 0086 F360     		str	r3, [r6, #12]
 101:FWLIB/src/stm32f4xx_hash_md5.c ****   uint32_t inputaddr  = (uint32_t)Input;
 179              		.loc 1 101 0
 180 0088 0120     		movs	r0, #1
 181 008a 00E0     		b	.L6
 182              	.LVL27:
 183              	.L7:
 140:FWLIB/src/stm32f4xx_hash_md5.c ****   }
 184              		.loc 1 140 0
 185 008c 0020     		movs	r0, #0
 186              	.LVL28:
 187              	.L6:
 153:FWLIB/src/stm32f4xx_hash_md5.c ****   }
 154:FWLIB/src/stm32f4xx_hash_md5.c ****   return status; 
 155:FWLIB/src/stm32f4xx_hash_md5.c **** }
 188              		.loc 1 155 0
 189 008e 0FB0     		add	sp, sp, #60
 190              	.LCFI2:
 191              		.cfi_def_cfa_offset 20
 192              		@ sp needed
 193 0090 F0BD     		pop	{r4, r5, r6, r7, pc}
 194              		.cfi_endproc
 195              	.LFE123:
 197 0092 00BF     		.section	.text.HMAC_MD5,"ax",%progbits
 198              		.align	2
 199              		.global	HMAC_MD5
 200              		.thumb
ARM GAS  C:\Users\why\AppData\Local\Temp\ccrXv77j.s 			page 16


 201              		.thumb_func
 203              	HMAC_MD5:
 204              	.LFB124:
 156:FWLIB/src/stm32f4xx_hash_md5.c **** 
 157:FWLIB/src/stm32f4xx_hash_md5.c **** /**
 158:FWLIB/src/stm32f4xx_hash_md5.c ****   * @brief  Compute the HMAC MD5 digest.
 159:FWLIB/src/stm32f4xx_hash_md5.c ****   * @param  Key: pointer to the Key used for HMAC.
 160:FWLIB/src/stm32f4xx_hash_md5.c ****   * @param  Keylen: length of the Key used for HMAC.
 161:FWLIB/src/stm32f4xx_hash_md5.c ****   * @param  Input: pointer to the Input buffer to be treated.
 162:FWLIB/src/stm32f4xx_hash_md5.c ****   * @param  Ilen: length of the Input buffer.
 163:FWLIB/src/stm32f4xx_hash_md5.c ****   * @param  Output: the returned digest  
 164:FWLIB/src/stm32f4xx_hash_md5.c ****   * @retval An ErrorStatus enumeration value:
 165:FWLIB/src/stm32f4xx_hash_md5.c ****   *          - SUCCESS: digest computation done
 166:FWLIB/src/stm32f4xx_hash_md5.c ****   *          - ERROR: digest computation failed
 167:FWLIB/src/stm32f4xx_hash_md5.c ****   */
 168:FWLIB/src/stm32f4xx_hash_md5.c **** ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
 169:FWLIB/src/stm32f4xx_hash_md5.c ****                      uint32_t Ilen, uint8_t Output[16])
 170:FWLIB/src/stm32f4xx_hash_md5.c **** {
 205              		.loc 1 170 0
 206              		.cfi_startproc
 207              		@ args = 4, pretend = 0, frame = 56
 208              		@ frame_needed = 0, uses_anonymous_args = 0
 209              	.LVL29:
 210 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 211              	.LCFI3:
 212              		.cfi_def_cfa_offset 28
 213              		.cfi_offset 4, -28
 214              		.cfi_offset 5, -24
 215              		.cfi_offset 6, -20
 216              		.cfi_offset 7, -16
 217              		.cfi_offset 8, -12
 218              		.cfi_offset 9, -8
 219              		.cfi_offset 14, -4
 220 0004 8FB0     		sub	sp, sp, #60
 221              	.LCFI4:
 222              		.cfi_def_cfa_offset 88
 223 0006 8146     		mov	r9, r0
 224 0008 0D46     		mov	r5, r1
 225 000a 1F46     		mov	r7, r3
 171:FWLIB/src/stm32f4xx_hash_md5.c ****   HASH_InitTypeDef MD5_HASH_InitStructure;
 172:FWLIB/src/stm32f4xx_hash_md5.c ****   HASH_MsgDigest MD5_MessageDigest;
 173:FWLIB/src/stm32f4xx_hash_md5.c ****   __IO uint16_t nbvalidbitsdata = 0;
 226              		.loc 1 173 0
 227 000c 0023     		movs	r3, #0
 228              	.LVL30:
 229 000e ADF80630 		strh	r3, [sp, #6]	@ movhi
 174:FWLIB/src/stm32f4xx_hash_md5.c ****   __IO uint16_t nbvalidbitskey = 0;
 230              		.loc 1 174 0
 231 0012 ADF80430 		strh	r3, [sp, #4]	@ movhi
 232              	.LVL31:
 175:FWLIB/src/stm32f4xx_hash_md5.c ****   uint32_t i = 0;
 176:FWLIB/src/stm32f4xx_hash_md5.c ****   __IO uint32_t counter = 0;
 233              		.loc 1 176 0
 234 0016 0093     		str	r3, [sp]
 235              	.LVL32:
 177:FWLIB/src/stm32f4xx_hash_md5.c ****   uint32_t busystatus = 0;
 178:FWLIB/src/stm32f4xx_hash_md5.c ****   ErrorStatus status = SUCCESS;
ARM GAS  C:\Users\why\AppData\Local\Temp\ccrXv77j.s 			page 17


 179:FWLIB/src/stm32f4xx_hash_md5.c ****   uint32_t keyaddr    = (uint32_t)Key;
 236              		.loc 1 179 0
 237 0018 8046     		mov	r8, r0
 238              	.LVL33:
 180:FWLIB/src/stm32f4xx_hash_md5.c ****   uint32_t inputaddr  = (uint32_t)Input;
 239              		.loc 1 180 0
 240 001a 1646     		mov	r6, r2
 241              	.LVL34:
 181:FWLIB/src/stm32f4xx_hash_md5.c ****   uint32_t outputaddr = (uint32_t)Output;
 182:FWLIB/src/stm32f4xx_hash_md5.c **** 
 183:FWLIB/src/stm32f4xx_hash_md5.c ****   /* Number of valid bits in last word of the Input data */
 184:FWLIB/src/stm32f4xx_hash_md5.c ****   nbvalidbitsdata = 8 * (Ilen % 4);
 242              		.loc 1 184 0
 243 001c 07F00303 		and	r3, r7, #3
 244 0020 DB00     		lsls	r3, r3, #3
 245 0022 ADF80630 		strh	r3, [sp, #6]	@ movhi
 185:FWLIB/src/stm32f4xx_hash_md5.c **** 
 186:FWLIB/src/stm32f4xx_hash_md5.c ****   /* Number of valid bits in last word of the Key */
 187:FWLIB/src/stm32f4xx_hash_md5.c ****   nbvalidbitskey = 8 * (Keylen % 4);
 246              		.loc 1 187 0
 247 0026 01F00303 		and	r3, r1, #3
 248 002a DB00     		lsls	r3, r3, #3
 249 002c ADF80430 		strh	r3, [sp, #4]	@ movhi
 188:FWLIB/src/stm32f4xx_hash_md5.c ****    
 189:FWLIB/src/stm32f4xx_hash_md5.c ****   /* HASH peripheral initialization */
 190:FWLIB/src/stm32f4xx_hash_md5.c ****   HASH_DeInit();
 250              		.loc 1 190 0
 251 0030 FFF7FEFF 		bl	HASH_DeInit
 252              	.LVL35:
 191:FWLIB/src/stm32f4xx_hash_md5.c **** 
 192:FWLIB/src/stm32f4xx_hash_md5.c ****   /* HASH Configuration */
 193:FWLIB/src/stm32f4xx_hash_md5.c ****   MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 253              		.loc 1 193 0
 254 0034 8023     		movs	r3, #128
 255 0036 0A93     		str	r3, [sp, #40]
 194:FWLIB/src/stm32f4xx_hash_md5.c ****   MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 256              		.loc 1 194 0
 257 0038 4023     		movs	r3, #64
 258 003a 0B93     		str	r3, [sp, #44]
 195:FWLIB/src/stm32f4xx_hash_md5.c ****   MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 259              		.loc 1 195 0
 260 003c 2023     		movs	r3, #32
 261 003e 0C93     		str	r3, [sp, #48]
 196:FWLIB/src/stm32f4xx_hash_md5.c ****   if(Keylen > 64)
 262              		.loc 1 196 0
 263 0040 402D     		cmp	r5, #64
 264 0042 03D9     		bls	.L10
 197:FWLIB/src/stm32f4xx_hash_md5.c ****   {
 198:FWLIB/src/stm32f4xx_hash_md5.c ****     /* HMAC long Key */
 199:FWLIB/src/stm32f4xx_hash_md5.c ****     MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 265              		.loc 1 199 0
 266 0044 4FF48033 		mov	r3, #65536
 267 0048 0D93     		str	r3, [sp, #52]
 268 004a 01E0     		b	.L11
 269              	.L10:
 200:FWLIB/src/stm32f4xx_hash_md5.c ****   }
 201:FWLIB/src/stm32f4xx_hash_md5.c ****   else
ARM GAS  C:\Users\why\AppData\Local\Temp\ccrXv77j.s 			page 18


 202:FWLIB/src/stm32f4xx_hash_md5.c ****   {
 203:FWLIB/src/stm32f4xx_hash_md5.c ****     /* HMAC short Key */
 204:FWLIB/src/stm32f4xx_hash_md5.c ****     MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 270              		.loc 1 204 0
 271 004c 0023     		movs	r3, #0
 272 004e 0D93     		str	r3, [sp, #52]
 273              	.L11:
 205:FWLIB/src/stm32f4xx_hash_md5.c ****   }
 206:FWLIB/src/stm32f4xx_hash_md5.c ****   HASH_Init(&MD5_HASH_InitStructure);
 274              		.loc 1 206 0
 275 0050 0AA8     		add	r0, sp, #40
 276 0052 FFF7FEFF 		bl	HASH_Init
 277              	.LVL36:
 207:FWLIB/src/stm32f4xx_hash_md5.c **** 
 208:FWLIB/src/stm32f4xx_hash_md5.c ****   /* Configure the number of valid bits in last word of the Key */
 209:FWLIB/src/stm32f4xx_hash_md5.c ****   HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 278              		.loc 1 209 0
 279 0056 BDF80400 		ldrh	r0, [sp, #4]
 280 005a 80B2     		uxth	r0, r0
 281 005c FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 282              	.LVL37:
 210:FWLIB/src/stm32f4xx_hash_md5.c **** 
 211:FWLIB/src/stm32f4xx_hash_md5.c ****   /* Write the Key */
 212:FWLIB/src/stm32f4xx_hash_md5.c ****   for(i=0; i<Keylen; i+=4)
 283              		.loc 1 212 0
 284 0060 0024     		movs	r4, #0
 285 0062 04E0     		b	.L12
 286              	.LVL38:
 287              	.L13:
 213:FWLIB/src/stm32f4xx_hash_md5.c ****   {
 214:FWLIB/src/stm32f4xx_hash_md5.c ****     HASH_DataIn(*(uint32_t*)keyaddr);
 288              		.loc 1 214 0 discriminator 3
 289 0064 59F8040B 		ldr	r0, [r9], #4
 290              	.LVL39:
 291 0068 FFF7FEFF 		bl	HASH_DataIn
 292              	.LVL40:
 212:FWLIB/src/stm32f4xx_hash_md5.c ****   {
 293              		.loc 1 212 0 discriminator 3
 294 006c 0434     		adds	r4, r4, #4
 295              	.LVL41:
 296              	.L12:
 212:FWLIB/src/stm32f4xx_hash_md5.c ****   {
 297              		.loc 1 212 0 is_stmt 0 discriminator 1
 298 006e AC42     		cmp	r4, r5
 299 0070 F8D3     		bcc	.L13
 215:FWLIB/src/stm32f4xx_hash_md5.c ****     keyaddr+=4;
 216:FWLIB/src/stm32f4xx_hash_md5.c ****   }
 217:FWLIB/src/stm32f4xx_hash_md5.c ****   
 218:FWLIB/src/stm32f4xx_hash_md5.c ****   /* Start the HASH processor */
 219:FWLIB/src/stm32f4xx_hash_md5.c ****   HASH_StartDigest();
 300              		.loc 1 219 0 is_stmt 1
 301 0072 FFF7FEFF 		bl	HASH_StartDigest
 302              	.LVL42:
 303              	.L15:
 220:FWLIB/src/stm32f4xx_hash_md5.c **** 
 221:FWLIB/src/stm32f4xx_hash_md5.c ****   /* wait until the Busy flag is RESET */
 222:FWLIB/src/stm32f4xx_hash_md5.c ****   do
ARM GAS  C:\Users\why\AppData\Local\Temp\ccrXv77j.s 			page 19


 223:FWLIB/src/stm32f4xx_hash_md5.c ****   {
 224:FWLIB/src/stm32f4xx_hash_md5.c ****     busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 304              		.loc 1 224 0 discriminator 2
 305 0076 0820     		movs	r0, #8
 306 0078 FFF7FEFF 		bl	HASH_GetFlagStatus
 307              	.LVL43:
 308 007c 0246     		mov	r2, r0
 309              	.LVL44:
 225:FWLIB/src/stm32f4xx_hash_md5.c ****     counter++;
 310              		.loc 1 225 0 discriminator 2
 311 007e 009B     		ldr	r3, [sp]
 312 0080 0133     		adds	r3, r3, #1
 313 0082 0093     		str	r3, [sp]
 226:FWLIB/src/stm32f4xx_hash_md5.c ****   }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 314              		.loc 1 226 0 discriminator 2
 315 0084 009B     		ldr	r3, [sp]
 316 0086 B3F5803F 		cmp	r3, #65536
 317 008a 01D0     		beq	.L14
 318              		.loc 1 226 0 is_stmt 0 discriminator 1
 319 008c 0028     		cmp	r0, #0
 320 008e F2D1     		bne	.L15
 321              	.L14:
 227:FWLIB/src/stm32f4xx_hash_md5.c **** 
 228:FWLIB/src/stm32f4xx_hash_md5.c ****   if (busystatus != RESET)
 322              		.loc 1 228 0 is_stmt 1
 323 0090 002A     		cmp	r2, #0
 324 0092 52D1     		bne	.L25
 229:FWLIB/src/stm32f4xx_hash_md5.c ****   {
 230:FWLIB/src/stm32f4xx_hash_md5.c ****      status = ERROR;
 231:FWLIB/src/stm32f4xx_hash_md5.c ****   }
 232:FWLIB/src/stm32f4xx_hash_md5.c ****   else
 233:FWLIB/src/stm32f4xx_hash_md5.c ****   {
 234:FWLIB/src/stm32f4xx_hash_md5.c ****     /* Configure the number of valid bits in last word of the Input data */
 235:FWLIB/src/stm32f4xx_hash_md5.c ****     HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 325              		.loc 1 235 0
 326 0094 BDF80600 		ldrh	r0, [sp, #6]
 327              	.LVL45:
 328 0098 80B2     		uxth	r0, r0
 329 009a FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 330              	.LVL46:
 236:FWLIB/src/stm32f4xx_hash_md5.c **** 
 237:FWLIB/src/stm32f4xx_hash_md5.c ****     /* Write the Input block in the IN FIFO */
 238:FWLIB/src/stm32f4xx_hash_md5.c ****     for(i=0; i<Ilen; i+=4)
 331              		.loc 1 238 0
 332 009e 0024     		movs	r4, #0
 333 00a0 04E0     		b	.L17
 334              	.LVL47:
 335              	.L18:
 239:FWLIB/src/stm32f4xx_hash_md5.c ****     {
 240:FWLIB/src/stm32f4xx_hash_md5.c ****       HASH_DataIn(*(uint32_t*)inputaddr);
 336              		.loc 1 240 0 discriminator 3
 337 00a2 56F8040B 		ldr	r0, [r6], #4
 338              	.LVL48:
 339 00a6 FFF7FEFF 		bl	HASH_DataIn
 340              	.LVL49:
 238:FWLIB/src/stm32f4xx_hash_md5.c ****     {
 341              		.loc 1 238 0 discriminator 3
ARM GAS  C:\Users\why\AppData\Local\Temp\ccrXv77j.s 			page 20


 342 00aa 0434     		adds	r4, r4, #4
 343              	.LVL50:
 344              	.L17:
 238:FWLIB/src/stm32f4xx_hash_md5.c ****     {
 345              		.loc 1 238 0 is_stmt 0 discriminator 1
 346 00ac BC42     		cmp	r4, r7
 347 00ae F8D3     		bcc	.L18
 241:FWLIB/src/stm32f4xx_hash_md5.c ****       inputaddr+=4;
 242:FWLIB/src/stm32f4xx_hash_md5.c ****     }
 243:FWLIB/src/stm32f4xx_hash_md5.c **** 
 244:FWLIB/src/stm32f4xx_hash_md5.c ****     /* Start the HASH processor */
 245:FWLIB/src/stm32f4xx_hash_md5.c ****     HASH_StartDigest();
 348              		.loc 1 245 0 is_stmt 1
 349 00b0 FFF7FEFF 		bl	HASH_StartDigest
 350              	.LVL51:
 246:FWLIB/src/stm32f4xx_hash_md5.c **** 
 247:FWLIB/src/stm32f4xx_hash_md5.c ****     /* wait until the Busy flag is RESET */
 248:FWLIB/src/stm32f4xx_hash_md5.c ****     counter =0;
 351              		.loc 1 248 0
 352 00b4 0023     		movs	r3, #0
 353 00b6 0093     		str	r3, [sp]
 354              	.L20:
 249:FWLIB/src/stm32f4xx_hash_md5.c ****     do
 250:FWLIB/src/stm32f4xx_hash_md5.c ****     {
 251:FWLIB/src/stm32f4xx_hash_md5.c ****        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 355              		.loc 1 251 0 discriminator 2
 356 00b8 0820     		movs	r0, #8
 357 00ba FFF7FEFF 		bl	HASH_GetFlagStatus
 358              	.LVL52:
 359 00be 0246     		mov	r2, r0
 360              	.LVL53:
 252:FWLIB/src/stm32f4xx_hash_md5.c ****        counter++;
 361              		.loc 1 252 0 discriminator 2
 362 00c0 009B     		ldr	r3, [sp]
 363 00c2 0133     		adds	r3, r3, #1
 364 00c4 0093     		str	r3, [sp]
 253:FWLIB/src/stm32f4xx_hash_md5.c ****     }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 365              		.loc 1 253 0 discriminator 2
 366 00c6 009B     		ldr	r3, [sp]
 367 00c8 B3F5803F 		cmp	r3, #65536
 368 00cc 01D0     		beq	.L19
 369              		.loc 1 253 0 is_stmt 0 discriminator 1
 370 00ce 0028     		cmp	r0, #0
 371 00d0 F2D1     		bne	.L20
 372              	.L19:
 254:FWLIB/src/stm32f4xx_hash_md5.c **** 
 255:FWLIB/src/stm32f4xx_hash_md5.c ****     if (busystatus != RESET)
 373              		.loc 1 255 0 is_stmt 1
 374 00d2 002A     		cmp	r2, #0
 375 00d4 33D1     		bne	.L26
 256:FWLIB/src/stm32f4xx_hash_md5.c ****     {
 257:FWLIB/src/stm32f4xx_hash_md5.c ****       status = ERROR;
 258:FWLIB/src/stm32f4xx_hash_md5.c ****     }
 259:FWLIB/src/stm32f4xx_hash_md5.c ****     else
 260:FWLIB/src/stm32f4xx_hash_md5.c ****     {  
 261:FWLIB/src/stm32f4xx_hash_md5.c ****       /* Configure the number of valid bits in last word of the Key */
 262:FWLIB/src/stm32f4xx_hash_md5.c ****       HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
ARM GAS  C:\Users\why\AppData\Local\Temp\ccrXv77j.s 			page 21


 376              		.loc 1 262 0
 377 00d6 BDF80400 		ldrh	r0, [sp, #4]
 378              	.LVL54:
 379 00da 80B2     		uxth	r0, r0
 380 00dc FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 381              	.LVL55:
 263:FWLIB/src/stm32f4xx_hash_md5.c **** 
 264:FWLIB/src/stm32f4xx_hash_md5.c ****       /* Write the Key */
 265:FWLIB/src/stm32f4xx_hash_md5.c ****       keyaddr = (uint32_t)Key;
 266:FWLIB/src/stm32f4xx_hash_md5.c ****       for(i=0; i<Keylen; i+=4)
 382              		.loc 1 266 0
 383 00e0 0024     		movs	r4, #0
 384 00e2 04E0     		b	.L21
 385              	.LVL56:
 386              	.L22:
 267:FWLIB/src/stm32f4xx_hash_md5.c ****       {
 268:FWLIB/src/stm32f4xx_hash_md5.c ****         HASH_DataIn(*(uint32_t*)keyaddr);
 387              		.loc 1 268 0 discriminator 3
 388 00e4 58F8040B 		ldr	r0, [r8], #4
 389              	.LVL57:
 390 00e8 FFF7FEFF 		bl	HASH_DataIn
 391              	.LVL58:
 266:FWLIB/src/stm32f4xx_hash_md5.c ****       {
 392              		.loc 1 266 0 discriminator 3
 393 00ec 0434     		adds	r4, r4, #4
 394              	.LVL59:
 395              	.L21:
 266:FWLIB/src/stm32f4xx_hash_md5.c ****       {
 396              		.loc 1 266 0 is_stmt 0 discriminator 1
 397 00ee AC42     		cmp	r4, r5
 398 00f0 F8D3     		bcc	.L22
 269:FWLIB/src/stm32f4xx_hash_md5.c ****         keyaddr+=4;
 270:FWLIB/src/stm32f4xx_hash_md5.c ****       }
 271:FWLIB/src/stm32f4xx_hash_md5.c ****   
 272:FWLIB/src/stm32f4xx_hash_md5.c ****        /* Start the HASH processor */
 273:FWLIB/src/stm32f4xx_hash_md5.c ****        HASH_StartDigest();
 399              		.loc 1 273 0 is_stmt 1
 400 00f2 FFF7FEFF 		bl	HASH_StartDigest
 401              	.LVL60:
 274:FWLIB/src/stm32f4xx_hash_md5.c **** 
 275:FWLIB/src/stm32f4xx_hash_md5.c ****        /* wait until the Busy flag is RESET */
 276:FWLIB/src/stm32f4xx_hash_md5.c ****        counter =0;
 402              		.loc 1 276 0
 403 00f6 0023     		movs	r3, #0
 404 00f8 0093     		str	r3, [sp]
 405              	.L24:
 277:FWLIB/src/stm32f4xx_hash_md5.c ****        do
 278:FWLIB/src/stm32f4xx_hash_md5.c ****        {
 279:FWLIB/src/stm32f4xx_hash_md5.c ****           busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 406              		.loc 1 279 0 discriminator 2
 407 00fa 0820     		movs	r0, #8
 408 00fc FFF7FEFF 		bl	HASH_GetFlagStatus
 409              	.LVL61:
 410 0100 0246     		mov	r2, r0
 411              	.LVL62:
 280:FWLIB/src/stm32f4xx_hash_md5.c ****           counter++;
 412              		.loc 1 280 0 discriminator 2
ARM GAS  C:\Users\why\AppData\Local\Temp\ccrXv77j.s 			page 22


 413 0102 009B     		ldr	r3, [sp]
 414 0104 0133     		adds	r3, r3, #1
 415 0106 0093     		str	r3, [sp]
 281:FWLIB/src/stm32f4xx_hash_md5.c ****       }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 416              		.loc 1 281 0 discriminator 2
 417 0108 009B     		ldr	r3, [sp]
 418 010a B3F5803F 		cmp	r3, #65536
 419 010e 01D0     		beq	.L23
 420              		.loc 1 281 0 is_stmt 0 discriminator 1
 421 0110 0028     		cmp	r0, #0
 422 0112 F2D1     		bne	.L24
 423              	.L23:
 282:FWLIB/src/stm32f4xx_hash_md5.c **** 
 283:FWLIB/src/stm32f4xx_hash_md5.c ****       if (busystatus != RESET)
 424              		.loc 1 283 0 is_stmt 1
 425 0114 AAB9     		cbnz	r2, .L27
 284:FWLIB/src/stm32f4xx_hash_md5.c ****       {
 285:FWLIB/src/stm32f4xx_hash_md5.c ****          status = ERROR;
 286:FWLIB/src/stm32f4xx_hash_md5.c ****       }
 287:FWLIB/src/stm32f4xx_hash_md5.c ****       else
 288:FWLIB/src/stm32f4xx_hash_md5.c ****       {
 289:FWLIB/src/stm32f4xx_hash_md5.c ****          /* Read the message digest */
 290:FWLIB/src/stm32f4xx_hash_md5.c ****          HASH_GetDigest(&MD5_MessageDigest);
 426              		.loc 1 290 0
 427 0116 02A8     		add	r0, sp, #8
 428              	.LVL63:
 429 0118 FFF7FEFF 		bl	HASH_GetDigest
 430              	.LVL64:
 291:FWLIB/src/stm32f4xx_hash_md5.c ****          *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 431              		.loc 1 291 0
 432 011c 029B     		ldr	r3, [sp, #8]
 433              	.LVL65:
 434              	.LBB26:
 435              	.LBB27:
 436              		.loc 2 498 0
 437 011e 1BBA     		rev	r3, r3
 438              	.LVL66:
 439              	.LBE27:
 440              	.LBE26:
 441              		.loc 1 291 0
 442 0120 169A     		ldr	r2, [sp, #88]
 443 0122 1360     		str	r3, [r2]
 444              	.LVL67:
 292:FWLIB/src/stm32f4xx_hash_md5.c ****          outputaddr+=4;
 293:FWLIB/src/stm32f4xx_hash_md5.c ****          *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 445              		.loc 1 293 0
 446 0124 039B     		ldr	r3, [sp, #12]
 447              	.LVL68:
 448              	.LBB28:
 449              	.LBB29:
 450              		.loc 2 498 0
 451 0126 1BBA     		rev	r3, r3
 452              	.LVL69:
 453              	.LBE29:
 454              	.LBE28:
 455              		.loc 1 293 0
 456 0128 5360     		str	r3, [r2, #4]
ARM GAS  C:\Users\why\AppData\Local\Temp\ccrXv77j.s 			page 23


 457              	.LVL70:
 294:FWLIB/src/stm32f4xx_hash_md5.c ****          outputaddr+=4;
 295:FWLIB/src/stm32f4xx_hash_md5.c ****          *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 458              		.loc 1 295 0
 459 012a 049B     		ldr	r3, [sp, #16]
 460              	.LVL71:
 461              	.LBB30:
 462              	.LBB31:
 463              		.loc 2 498 0
 464 012c 1BBA     		rev	r3, r3
 465              	.LVL72:
 466              	.LBE31:
 467              	.LBE30:
 468              		.loc 1 295 0
 469 012e 9360     		str	r3, [r2, #8]
 470              	.LVL73:
 296:FWLIB/src/stm32f4xx_hash_md5.c ****          outputaddr+=4;
 297:FWLIB/src/stm32f4xx_hash_md5.c ****          *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 471              		.loc 1 297 0
 472 0130 059B     		ldr	r3, [sp, #20]
 473              	.LVL74:
 474              	.LBB32:
 475              	.LBB33:
 476              		.loc 2 498 0
 477 0132 1BBA     		rev	r3, r3
 478              	.LVL75:
 479              	.LBE33:
 480              	.LBE32:
 481              		.loc 1 297 0
 482 0134 D360     		str	r3, [r2, #12]
 178:FWLIB/src/stm32f4xx_hash_md5.c ****   uint32_t keyaddr    = (uint32_t)Key;
 483              		.loc 1 178 0
 484 0136 0120     		movs	r0, #1
 485 0138 04E0     		b	.L16
 486              	.LVL76:
 487              	.L25:
 230:FWLIB/src/stm32f4xx_hash_md5.c ****   }
 488              		.loc 1 230 0
 489 013a 0020     		movs	r0, #0
 490              	.LVL77:
 491 013c 02E0     		b	.L16
 492              	.LVL78:
 493              	.L26:
 257:FWLIB/src/stm32f4xx_hash_md5.c ****     }
 494              		.loc 1 257 0
 495 013e 0020     		movs	r0, #0
 496              	.LVL79:
 497 0140 00E0     		b	.L16
 498              	.LVL80:
 499              	.L27:
 285:FWLIB/src/stm32f4xx_hash_md5.c ****       }
 500              		.loc 1 285 0
 501 0142 0020     		movs	r0, #0
 502              	.LVL81:
 503              	.L16:
 298:FWLIB/src/stm32f4xx_hash_md5.c ****       }
 299:FWLIB/src/stm32f4xx_hash_md5.c ****     }
ARM GAS  C:\Users\why\AppData\Local\Temp\ccrXv77j.s 			page 24


 300:FWLIB/src/stm32f4xx_hash_md5.c ****   }
 301:FWLIB/src/stm32f4xx_hash_md5.c ****   return status;  
 302:FWLIB/src/stm32f4xx_hash_md5.c **** }
 504              		.loc 1 302 0
 505 0144 0FB0     		add	sp, sp, #60
 506              	.LCFI5:
 507              		.cfi_def_cfa_offset 28
 508              		@ sp needed
 509 0146 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 510              		.cfi_endproc
 511              	.LFE124:
 513 014a 00BF     		.text
 514              	.Letext0:
 515              		.file 3 "d:\\gcc_arm\\5.4 2016q3\\arm-none-eabi\\include\\machine\\_default_types.h"
 516              		.file 4 "d:\\gcc_arm\\5.4 2016q3\\arm-none-eabi\\include\\sys\\_stdint.h"
 517              		.file 5 "USER/stm32f4xx.h"
 518              		.file 6 "FWLIB/inc/stm32f4xx_hash.h"
 519              		.file 7 "F4_CORE/core_cm4.h"
ARM GAS  C:\Users\why\AppData\Local\Temp\ccrXv77j.s 			page 25


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_hash_md5.c
C:\Users\why\AppData\Local\Temp\ccrXv77j.s:22     .text.HASH_MD5:00000000 $t
C:\Users\why\AppData\Local\Temp\ccrXv77j.s:27     .text.HASH_MD5:00000000 HASH_MD5
C:\Users\why\AppData\Local\Temp\ccrXv77j.s:198    .text.HMAC_MD5:00000000 $t
C:\Users\why\AppData\Local\Temp\ccrXv77j.s:203    .text.HMAC_MD5:00000000 HMAC_MD5
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HASH_DeInit
HASH_Init
HASH_SetLastWordValidBitsNbr
HASH_DataIn
HASH_StartDigest
HASH_GetFlagStatus
HASH_GetDigest
