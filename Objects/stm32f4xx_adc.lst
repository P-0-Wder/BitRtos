ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"stm32f4xx_adc.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.ADC_DeInit,"ax",%progbits
  22              		.align	2
  23              		.global	ADC_DeInit
  24              		.thumb
  25              		.thumb_func
  27              	ADC_DeInit:
  28              	.LFB123:
  29              		.file 1 "FWLIB/src/stm32f4xx_adc.c"
   1:FWLIB/src/stm32f4xx_adc.c **** /**
   2:FWLIB/src/stm32f4xx_adc.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_adc.c ****   * @file    stm32f4xx_adc.c
   4:FWLIB/src/stm32f4xx_adc.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_adc.c ****   * @version V1.8.0
   6:FWLIB/src/stm32f4xx_adc.c ****   * @date    04-November-2016
   7:FWLIB/src/stm32f4xx_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:FWLIB/src/stm32f4xx_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC) peripheral:
   9:FWLIB/src/stm32f4xx_adc.c ****   *           + Initialization and Configuration (in addition to ADC multi mode 
  10:FWLIB/src/stm32f4xx_adc.c ****   *             selection)
  11:FWLIB/src/stm32f4xx_adc.c ****   *           + Analog Watchdog configuration
  12:FWLIB/src/stm32f4xx_adc.c ****   *           + Temperature Sensor & Vrefint (Voltage Reference internal) & VBAT
  13:FWLIB/src/stm32f4xx_adc.c ****   *             management 
  14:FWLIB/src/stm32f4xx_adc.c ****   *           + Regular Channels Configuration
  15:FWLIB/src/stm32f4xx_adc.c ****   *           + Regular Channels DMA Configuration
  16:FWLIB/src/stm32f4xx_adc.c ****   *           + Injected channels Configuration
  17:FWLIB/src/stm32f4xx_adc.c ****   *           + Interrupts and flags management
  18:FWLIB/src/stm32f4xx_adc.c ****   *         
  19:FWLIB/src/stm32f4xx_adc.c ****   @verbatim
  20:FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================
  21:FWLIB/src/stm32f4xx_adc.c ****                      ##### How to use this driver #####
  22:FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================
  23:FWLIB/src/stm32f4xx_adc.c ****     [..]
  24:FWLIB/src/stm32f4xx_adc.c ****     (#) Enable the ADC interface clock using 
  25:FWLIB/src/stm32f4xx_adc.c ****         RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADCx, ENABLE); 
  26:FWLIB/src/stm32f4xx_adc.c ****        
  27:FWLIB/src/stm32f4xx_adc.c ****     (#) ADC pins configuration
  28:FWLIB/src/stm32f4xx_adc.c ****          (++) Enable the clock for the ADC GPIOs using the following function:
  29:FWLIB/src/stm32f4xx_adc.c ****              RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);   
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 2


  30:FWLIB/src/stm32f4xx_adc.c ****          (++) Configure these ADC pins in analog mode using GPIO_Init();  
  31:FWLIB/src/stm32f4xx_adc.c ****   
  32:FWLIB/src/stm32f4xx_adc.c ****      (#) Configure the ADC Prescaler, conversion resolution and data 
  33:FWLIB/src/stm32f4xx_adc.c ****          alignment using the ADC_Init() function.
  34:FWLIB/src/stm32f4xx_adc.c ****      (#) Activate the ADC peripheral using ADC_Cmd() function.
  35:FWLIB/src/stm32f4xx_adc.c ****   
  36:FWLIB/src/stm32f4xx_adc.c ****      *** Regular channels group configuration ***
  37:FWLIB/src/stm32f4xx_adc.c ****      ============================================
  38:FWLIB/src/stm32f4xx_adc.c ****      [..]    
  39:FWLIB/src/stm32f4xx_adc.c ****        (+) To configure the ADC regular channels group features, use 
  40:FWLIB/src/stm32f4xx_adc.c ****            ADC_Init() and ADC_RegularChannelConfig() functions.
  41:FWLIB/src/stm32f4xx_adc.c ****        (+) To activate the continuous mode, use the ADC_continuousModeCmd()
  42:FWLIB/src/stm32f4xx_adc.c ****            function.
  43:FWLIB/src/stm32f4xx_adc.c ****        (+) To configurate and activate the Discontinuous mode, use the 
  44:FWLIB/src/stm32f4xx_adc.c ****            ADC_DiscModeChannelCountConfig() and ADC_DiscModeCmd() functions.
  45:FWLIB/src/stm32f4xx_adc.c ****        (+) To read the ADC converted values, use the ADC_GetConversionValue()
  46:FWLIB/src/stm32f4xx_adc.c ****            function.
  47:FWLIB/src/stm32f4xx_adc.c ****   
  48:FWLIB/src/stm32f4xx_adc.c ****      *** Multi mode ADCs Regular channels configuration ***
  49:FWLIB/src/stm32f4xx_adc.c ****      ======================================================
  50:FWLIB/src/stm32f4xx_adc.c ****      [..]
  51:FWLIB/src/stm32f4xx_adc.c ****        (+) Refer to "Regular channels group configuration" description to
  52:FWLIB/src/stm32f4xx_adc.c ****            configure the ADC1, ADC2 and ADC3 regular channels.        
  53:FWLIB/src/stm32f4xx_adc.c ****        (+) Select the Multi mode ADC regular channels features (dual or 
  54:FWLIB/src/stm32f4xx_adc.c ****            triple mode) using ADC_CommonInit() function and configure 
  55:FWLIB/src/stm32f4xx_adc.c ****            the DMA mode using ADC_MultiModeDMARequestAfterLastTransferCmd() 
  56:FWLIB/src/stm32f4xx_adc.c ****            functions.        
  57:FWLIB/src/stm32f4xx_adc.c ****        (+) Read the ADCs converted values using the 
  58:FWLIB/src/stm32f4xx_adc.c ****            ADC_GetMultiModeConversionValue() function.
  59:FWLIB/src/stm32f4xx_adc.c ****   
  60:FWLIB/src/stm32f4xx_adc.c ****      *** DMA for Regular channels group features configuration ***
  61:FWLIB/src/stm32f4xx_adc.c ****      ============================================================= 
  62:FWLIB/src/stm32f4xx_adc.c ****      [..]
  63:FWLIB/src/stm32f4xx_adc.c ****        (+) To enable the DMA mode for regular channels group, use the 
  64:FWLIB/src/stm32f4xx_adc.c ****            ADC_DMACmd() function.
  65:FWLIB/src/stm32f4xx_adc.c ****        (+) To enable the generation of DMA requests continuously at the end
  66:FWLIB/src/stm32f4xx_adc.c ****            of the last DMA transfer, use the ADC_DMARequestAfterLastTransferCmd() 
  67:FWLIB/src/stm32f4xx_adc.c ****            function.
  68:FWLIB/src/stm32f4xx_adc.c ****   
  69:FWLIB/src/stm32f4xx_adc.c ****      *** Injected channels group configuration ***
  70:FWLIB/src/stm32f4xx_adc.c ****      =============================================    
  71:FWLIB/src/stm32f4xx_adc.c ****      [..]
  72:FWLIB/src/stm32f4xx_adc.c ****        (+) To configure the ADC Injected channels group features, use 
  73:FWLIB/src/stm32f4xx_adc.c ****            ADC_InjectedChannelConfig() and  ADC_InjectedSequencerLengthConfig()
  74:FWLIB/src/stm32f4xx_adc.c ****            functions.
  75:FWLIB/src/stm32f4xx_adc.c ****        (+) To activate the continuous mode, use the ADC_continuousModeCmd()
  76:FWLIB/src/stm32f4xx_adc.c ****            function.
  77:FWLIB/src/stm32f4xx_adc.c ****        (+) To activate the Injected Discontinuous mode, use the 
  78:FWLIB/src/stm32f4xx_adc.c ****            ADC_InjectedDiscModeCmd() function.  
  79:FWLIB/src/stm32f4xx_adc.c ****        (+) To activate the AutoInjected mode, use the ADC_AutoInjectedConvCmd() 
  80:FWLIB/src/stm32f4xx_adc.c ****            function.        
  81:FWLIB/src/stm32f4xx_adc.c ****        (+) To read the ADC converted values, use the ADC_GetInjectedConversionValue() 
  82:FWLIB/src/stm32f4xx_adc.c ****            function.
  83:FWLIB/src/stm32f4xx_adc.c ****   
  84:FWLIB/src/stm32f4xx_adc.c ****     @endverbatim
  85:FWLIB/src/stm32f4xx_adc.c ****   ******************************************************************************
  86:FWLIB/src/stm32f4xx_adc.c ****   * @attention
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 3


  87:FWLIB/src/stm32f4xx_adc.c ****   *
  88:FWLIB/src/stm32f4xx_adc.c ****   * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
  89:FWLIB/src/stm32f4xx_adc.c ****   *
  90:FWLIB/src/stm32f4xx_adc.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  91:FWLIB/src/stm32f4xx_adc.c ****   * You may not use this file except in compliance with the License.
  92:FWLIB/src/stm32f4xx_adc.c ****   * You may obtain a copy of the License at:
  93:FWLIB/src/stm32f4xx_adc.c ****   *
  94:FWLIB/src/stm32f4xx_adc.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  95:FWLIB/src/stm32f4xx_adc.c ****   *
  96:FWLIB/src/stm32f4xx_adc.c ****   * Unless required by applicable law or agreed to in writing, software 
  97:FWLIB/src/stm32f4xx_adc.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  98:FWLIB/src/stm32f4xx_adc.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  99:FWLIB/src/stm32f4xx_adc.c ****   * See the License for the specific language governing permissions and
 100:FWLIB/src/stm32f4xx_adc.c ****   * limitations under the License.
 101:FWLIB/src/stm32f4xx_adc.c ****   *
 102:FWLIB/src/stm32f4xx_adc.c ****   ******************************************************************************
 103:FWLIB/src/stm32f4xx_adc.c ****   */ 
 104:FWLIB/src/stm32f4xx_adc.c **** 
 105:FWLIB/src/stm32f4xx_adc.c **** /* Includes ------------------------------------------------------------------*/
 106:FWLIB/src/stm32f4xx_adc.c **** #include "stm32f4xx_adc.h"
 107:FWLIB/src/stm32f4xx_adc.c **** #include "stm32f4xx_rcc.h"
 108:FWLIB/src/stm32f4xx_adc.c **** 
 109:FWLIB/src/stm32f4xx_adc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 110:FWLIB/src/stm32f4xx_adc.c ****   * @{
 111:FWLIB/src/stm32f4xx_adc.c ****   */
 112:FWLIB/src/stm32f4xx_adc.c **** 
 113:FWLIB/src/stm32f4xx_adc.c **** /** @defgroup ADC 
 114:FWLIB/src/stm32f4xx_adc.c ****   * @brief ADC driver modules
 115:FWLIB/src/stm32f4xx_adc.c ****   * @{
 116:FWLIB/src/stm32f4xx_adc.c ****   */ 
 117:FWLIB/src/stm32f4xx_adc.c **** 
 118:FWLIB/src/stm32f4xx_adc.c **** /* Private typedef -----------------------------------------------------------*/
 119:FWLIB/src/stm32f4xx_adc.c **** /* Private define ------------------------------------------------------------*/ 
 120:FWLIB/src/stm32f4xx_adc.c **** 
 121:FWLIB/src/stm32f4xx_adc.c **** /* ADC DISCNUM mask */
 122:FWLIB/src/stm32f4xx_adc.c **** #define CR1_DISCNUM_RESET         ((uint32_t)0xFFFF1FFF)
 123:FWLIB/src/stm32f4xx_adc.c **** 
 124:FWLIB/src/stm32f4xx_adc.c **** /* ADC AWDCH mask */
 125:FWLIB/src/stm32f4xx_adc.c **** #define CR1_AWDCH_RESET           ((uint32_t)0xFFFFFFE0)   
 126:FWLIB/src/stm32f4xx_adc.c **** 
 127:FWLIB/src/stm32f4xx_adc.c **** /* ADC Analog watchdog enable mode mask */
 128:FWLIB/src/stm32f4xx_adc.c **** #define CR1_AWDMode_RESET         ((uint32_t)0xFF3FFDFF)   
 129:FWLIB/src/stm32f4xx_adc.c **** 
 130:FWLIB/src/stm32f4xx_adc.c **** /* CR1 register Mask */
 131:FWLIB/src/stm32f4xx_adc.c **** #define CR1_CLEAR_MASK            ((uint32_t)0xFCFFFEFF)
 132:FWLIB/src/stm32f4xx_adc.c **** 
 133:FWLIB/src/stm32f4xx_adc.c **** /* ADC EXTEN mask */
 134:FWLIB/src/stm32f4xx_adc.c **** #define CR2_EXTEN_RESET           ((uint32_t)0xCFFFFFFF)  
 135:FWLIB/src/stm32f4xx_adc.c **** 
 136:FWLIB/src/stm32f4xx_adc.c **** /* ADC JEXTEN mask */
 137:FWLIB/src/stm32f4xx_adc.c **** #define CR2_JEXTEN_RESET          ((uint32_t)0xFFCFFFFF)  
 138:FWLIB/src/stm32f4xx_adc.c **** 
 139:FWLIB/src/stm32f4xx_adc.c **** /* ADC JEXTSEL mask */
 140:FWLIB/src/stm32f4xx_adc.c **** #define CR2_JEXTSEL_RESET         ((uint32_t)0xFFF0FFFF)  
 141:FWLIB/src/stm32f4xx_adc.c **** 
 142:FWLIB/src/stm32f4xx_adc.c **** /* CR2 register Mask */
 143:FWLIB/src/stm32f4xx_adc.c **** #define CR2_CLEAR_MASK            ((uint32_t)0xC0FFF7FD)
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 4


 144:FWLIB/src/stm32f4xx_adc.c **** 
 145:FWLIB/src/stm32f4xx_adc.c **** /* ADC SQx mask */
 146:FWLIB/src/stm32f4xx_adc.c **** #define SQR3_SQ_SET               ((uint32_t)0x0000001F)  
 147:FWLIB/src/stm32f4xx_adc.c **** #define SQR2_SQ_SET               ((uint32_t)0x0000001F)  
 148:FWLIB/src/stm32f4xx_adc.c **** #define SQR1_SQ_SET               ((uint32_t)0x0000001F)  
 149:FWLIB/src/stm32f4xx_adc.c **** 
 150:FWLIB/src/stm32f4xx_adc.c **** /* ADC L Mask */
 151:FWLIB/src/stm32f4xx_adc.c **** #define SQR1_L_RESET              ((uint32_t)0xFF0FFFFF) 
 152:FWLIB/src/stm32f4xx_adc.c **** 
 153:FWLIB/src/stm32f4xx_adc.c **** /* ADC JSQx mask */
 154:FWLIB/src/stm32f4xx_adc.c **** #define JSQR_JSQ_SET              ((uint32_t)0x0000001F) 
 155:FWLIB/src/stm32f4xx_adc.c **** 
 156:FWLIB/src/stm32f4xx_adc.c **** /* ADC JL mask */
 157:FWLIB/src/stm32f4xx_adc.c **** #define JSQR_JL_SET               ((uint32_t)0x00300000) 
 158:FWLIB/src/stm32f4xx_adc.c **** #define JSQR_JL_RESET             ((uint32_t)0xFFCFFFFF) 
 159:FWLIB/src/stm32f4xx_adc.c **** 
 160:FWLIB/src/stm32f4xx_adc.c **** /* ADC SMPx mask */
 161:FWLIB/src/stm32f4xx_adc.c **** #define SMPR1_SMP_SET             ((uint32_t)0x00000007)  
 162:FWLIB/src/stm32f4xx_adc.c **** #define SMPR2_SMP_SET             ((uint32_t)0x00000007) 
 163:FWLIB/src/stm32f4xx_adc.c **** 
 164:FWLIB/src/stm32f4xx_adc.c **** /* ADC JDRx registers offset */
 165:FWLIB/src/stm32f4xx_adc.c **** #define JDR_OFFSET                ((uint8_t)0x28) 
 166:FWLIB/src/stm32f4xx_adc.c **** 
 167:FWLIB/src/stm32f4xx_adc.c **** /* ADC CDR register base address */
 168:FWLIB/src/stm32f4xx_adc.c **** #define CDR_ADDRESS               ((uint32_t)0x40012308)   
 169:FWLIB/src/stm32f4xx_adc.c **** 
 170:FWLIB/src/stm32f4xx_adc.c **** /* ADC CCR register Mask */
 171:FWLIB/src/stm32f4xx_adc.c **** #define CR_CLEAR_MASK             ((uint32_t)0xFFFC30E0)  
 172:FWLIB/src/stm32f4xx_adc.c **** 
 173:FWLIB/src/stm32f4xx_adc.c **** /* Private macro -------------------------------------------------------------*/
 174:FWLIB/src/stm32f4xx_adc.c **** /* Private variables ---------------------------------------------------------*/
 175:FWLIB/src/stm32f4xx_adc.c **** /* Private function prototypes -----------------------------------------------*/
 176:FWLIB/src/stm32f4xx_adc.c **** /* Private functions ---------------------------------------------------------*/
 177:FWLIB/src/stm32f4xx_adc.c **** 
 178:FWLIB/src/stm32f4xx_adc.c **** /** @defgroup ADC_Private_Functions
 179:FWLIB/src/stm32f4xx_adc.c ****   * @{
 180:FWLIB/src/stm32f4xx_adc.c ****   */ 
 181:FWLIB/src/stm32f4xx_adc.c **** 
 182:FWLIB/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group1 Initialization and Configuration functions
 183:FWLIB/src/stm32f4xx_adc.c ****  *  @brief    Initialization and Configuration functions 
 184:FWLIB/src/stm32f4xx_adc.c ****  *
 185:FWLIB/src/stm32f4xx_adc.c **** @verbatim    
 186:FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================
 187:FWLIB/src/stm32f4xx_adc.c ****               ##### Initialization and Configuration functions #####
 188:FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================
 189:FWLIB/src/stm32f4xx_adc.c ****     [..]  This section provides functions allowing to:
 190:FWLIB/src/stm32f4xx_adc.c ****       (+) Initialize and configure the ADC Prescaler
 191:FWLIB/src/stm32f4xx_adc.c ****       (+) ADC Conversion Resolution (12bit..6bit)
 192:FWLIB/src/stm32f4xx_adc.c ****       (+) Scan Conversion Mode (multichannel or one channel) for regular group
 193:FWLIB/src/stm32f4xx_adc.c ****       (+) ADC Continuous Conversion Mode (Continuous or Single conversion) for 
 194:FWLIB/src/stm32f4xx_adc.c ****           regular group
 195:FWLIB/src/stm32f4xx_adc.c ****       (+) External trigger Edge and source of regular group, 
 196:FWLIB/src/stm32f4xx_adc.c ****       (+) Converted data alignment (left or right)
 197:FWLIB/src/stm32f4xx_adc.c ****       (+) The number of ADC conversions that will be done using the sequencer for 
 198:FWLIB/src/stm32f4xx_adc.c ****           regular channel group
 199:FWLIB/src/stm32f4xx_adc.c ****       (+) Multi ADC mode selection
 200:FWLIB/src/stm32f4xx_adc.c ****       (+) Direct memory access mode selection for multi ADC mode  
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 5


 201:FWLIB/src/stm32f4xx_adc.c ****       (+) Delay between 2 sampling phases (used in dual or triple interleaved modes)
 202:FWLIB/src/stm32f4xx_adc.c ****       (+) Enable or disable the ADC peripheral   
 203:FWLIB/src/stm32f4xx_adc.c **** @endverbatim
 204:FWLIB/src/stm32f4xx_adc.c ****   * @{
 205:FWLIB/src/stm32f4xx_adc.c ****   */
 206:FWLIB/src/stm32f4xx_adc.c **** 
 207:FWLIB/src/stm32f4xx_adc.c **** /**
 208:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Deinitializes all ADCs peripherals registers to their default reset 
 209:FWLIB/src/stm32f4xx_adc.c ****   *         values.
 210:FWLIB/src/stm32f4xx_adc.c ****   * @param  None
 211:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 212:FWLIB/src/stm32f4xx_adc.c ****   */
 213:FWLIB/src/stm32f4xx_adc.c **** void ADC_DeInit(void)
 214:FWLIB/src/stm32f4xx_adc.c **** {
  30              		.loc 1 214 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34 0000 08B5     		push	{r3, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 3, -8
  38              		.cfi_offset 14, -4
 215:FWLIB/src/stm32f4xx_adc.c ****   /* Enable all ADCs reset state */
 216:FWLIB/src/stm32f4xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
  39              		.loc 1 216 0
  40 0002 0121     		movs	r1, #1
  41 0004 4FF48070 		mov	r0, #256
  42 0008 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  43              	.LVL0:
 217:FWLIB/src/stm32f4xx_adc.c ****   
 218:FWLIB/src/stm32f4xx_adc.c ****   /* Release all ADCs from reset state */
 219:FWLIB/src/stm32f4xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
  44              		.loc 1 219 0
  45 000c 0021     		movs	r1, #0
  46 000e 4FF48070 		mov	r0, #256
  47 0012 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  48              	.LVL1:
  49 0016 08BD     		pop	{r3, pc}
  50              		.cfi_endproc
  51              	.LFE123:
  53              		.section	.text.ADC_Init,"ax",%progbits
  54              		.align	2
  55              		.global	ADC_Init
  56              		.thumb
  57              		.thumb_func
  59              	ADC_Init:
  60              	.LFB124:
 220:FWLIB/src/stm32f4xx_adc.c **** }
 221:FWLIB/src/stm32f4xx_adc.c **** 
 222:FWLIB/src/stm32f4xx_adc.c **** /**
 223:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Initializes the ADCx peripheral according to the specified parameters 
 224:FWLIB/src/stm32f4xx_adc.c ****   *         in the ADC_InitStruct.
 225:FWLIB/src/stm32f4xx_adc.c ****   * @note   This function is used to configure the global features of the ADC ( 
 226:FWLIB/src/stm32f4xx_adc.c ****   *         Resolution and Data Alignment), however, the rest of the configuration
 227:FWLIB/src/stm32f4xx_adc.c ****   *         parameters are specific to the regular channels group (scan mode 
 228:FWLIB/src/stm32f4xx_adc.c ****   *         activation, continuous mode activation, External trigger source and 
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 6


 229:FWLIB/src/stm32f4xx_adc.c ****   *         edge, number of conversion in the regular channels group sequencer).  
 230:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 231:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
 232:FWLIB/src/stm32f4xx_adc.c ****   *         the configuration information for the specified ADC peripheral.
 233:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 234:FWLIB/src/stm32f4xx_adc.c ****   */
 235:FWLIB/src/stm32f4xx_adc.c **** void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
 236:FWLIB/src/stm32f4xx_adc.c **** {
  61              		.loc 1 236 0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 0
  64              		@ frame_needed = 0, uses_anonymous_args = 0
  65              		@ link register save eliminated.
  66              	.LVL2:
  67 0000 10B4     		push	{r4}
  68              	.LCFI1:
  69              		.cfi_def_cfa_offset 4
  70              		.cfi_offset 4, -4
  71              	.LVL3:
 237:FWLIB/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 238:FWLIB/src/stm32f4xx_adc.c ****   uint8_t tmpreg2 = 0;
 239:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 240:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 241:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_RESOLUTION(ADC_InitStruct->ADC_Resolution)); 
 242:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ScanConvMode));
 243:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ContinuousConvMode)); 
 244:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(ADC_InitStruct->ADC_ExternalTrigConvEdge)); 
 245:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_TRIG(ADC_InitStruct->ADC_ExternalTrigConv));    
 246:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
 247:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
 248:FWLIB/src/stm32f4xx_adc.c ****   
 249:FWLIB/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx CR1 Configuration -----------------*/
 250:FWLIB/src/stm32f4xx_adc.c ****   /* Get the ADCx CR1 value */
 251:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR1;
  72              		.loc 1 251 0
  73 0002 4368     		ldr	r3, [r0, #4]
  74              	.LVL4:
 252:FWLIB/src/stm32f4xx_adc.c ****   
 253:FWLIB/src/stm32f4xx_adc.c ****   /* Clear RES and SCAN bits */
 254:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 &= CR1_CLEAR_MASK;
  75              		.loc 1 254 0
  76 0004 23F04072 		bic	r2, r3, #50331648
  77 0008 22F48072 		bic	r2, r2, #256
  78              	.LVL5:
 255:FWLIB/src/stm32f4xx_adc.c ****   
 256:FWLIB/src/stm32f4xx_adc.c ****   /* Configure ADCx: scan conversion mode and resolution */
 257:FWLIB/src/stm32f4xx_adc.c ****   /* Set SCAN bit according to ADC_ScanConvMode value */
 258:FWLIB/src/stm32f4xx_adc.c ****   /* Set RES bit according to ADC_Resolution value */ 
 259:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
  79              		.loc 1 259 0
  80 000c 0C79     		ldrb	r4, [r1, #4]	@ zero_extendqisi2
 260:FWLIB/src/stm32f4xx_adc.c ****                                    ADC_InitStruct->ADC_Resolution);
  81              		.loc 1 260 0
  82 000e 0B68     		ldr	r3, [r1]
 259:FWLIB/src/stm32f4xx_adc.c ****                                    ADC_InitStruct->ADC_Resolution);
  83              		.loc 1 259 0
  84 0010 43EA0423 		orr	r3, r3, r4, lsl #8
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 7


  85 0014 1343     		orrs	r3, r3, r2
  86              	.LVL6:
 261:FWLIB/src/stm32f4xx_adc.c ****   /* Write to ADCx CR1 */
 262:FWLIB/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg1;
  87              		.loc 1 262 0
  88 0016 4360     		str	r3, [r0, #4]
 263:FWLIB/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx CR2 Configuration -----------------*/
 264:FWLIB/src/stm32f4xx_adc.c ****   /* Get the ADCx CR2 value */
 265:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR2;
  89              		.loc 1 265 0
  90 0018 8368     		ldr	r3, [r0, #8]
  91              	.LVL7:
 266:FWLIB/src/stm32f4xx_adc.c ****   
 267:FWLIB/src/stm32f4xx_adc.c ****   /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
 268:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 &= CR2_CLEAR_MASK;
  92              		.loc 1 268 0
  93 001a 0C4C     		ldr	r4, .L5
  94 001c 1C40     		ands	r4, r4, r3
  95              	.LVL8:
 269:FWLIB/src/stm32f4xx_adc.c ****   
 270:FWLIB/src/stm32f4xx_adc.c ****   /* Configure ADCx: external trigger event and edge, data alignment and 
 271:FWLIB/src/stm32f4xx_adc.c ****      continuous conversion mode */
 272:FWLIB/src/stm32f4xx_adc.c ****   /* Set ALIGN bit according to ADC_DataAlign value */
 273:FWLIB/src/stm32f4xx_adc.c ****   /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
 274:FWLIB/src/stm32f4xx_adc.c ****   /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
 275:FWLIB/src/stm32f4xx_adc.c ****   /* Set CONT bit according to ADC_ContinuousConvMode value */
 276:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
  96              		.loc 1 276 0
  97 001e 0A69     		ldr	r2, [r1, #16]
 277:FWLIB/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
  98              		.loc 1 277 0
  99 0020 CB68     		ldr	r3, [r1, #12]
 276:FWLIB/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 100              		.loc 1 276 0
 101 0022 1A43     		orrs	r2, r2, r3
 278:FWLIB/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 102              		.loc 1 278 0
 103 0024 8B68     		ldr	r3, [r1, #8]
 277:FWLIB/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 104              		.loc 1 277 0
 105 0026 1A43     		orrs	r2, r2, r3
 279:FWLIB/src/stm32f4xx_adc.c ****                         ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 106              		.loc 1 279 0
 107 0028 4B79     		ldrb	r3, [r1, #5]	@ zero_extendqisi2
 276:FWLIB/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 108              		.loc 1 276 0
 109 002a 42EA4303 		orr	r3, r2, r3, lsl #1
 110 002e 2343     		orrs	r3, r3, r4
 111              	.LVL9:
 280:FWLIB/src/stm32f4xx_adc.c ****                         
 281:FWLIB/src/stm32f4xx_adc.c ****   /* Write to ADCx CR2 */
 282:FWLIB/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg1;
 112              		.loc 1 282 0
 113 0030 8360     		str	r3, [r0, #8]
 283:FWLIB/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx SQR1 Configuration -----------------*/
 284:FWLIB/src/stm32f4xx_adc.c ****   /* Get the ADCx SQR1 value */
 285:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->SQR1;
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 8


 114              		.loc 1 285 0
 115 0032 C36A     		ldr	r3, [r0, #44]
 116              	.LVL10:
 286:FWLIB/src/stm32f4xx_adc.c ****   
 287:FWLIB/src/stm32f4xx_adc.c ****   /* Clear L bits */
 288:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 &= SQR1_L_RESET;
 117              		.loc 1 288 0
 118 0034 23F47002 		bic	r2, r3, #15728640
 119              	.LVL11:
 289:FWLIB/src/stm32f4xx_adc.c ****   
 290:FWLIB/src/stm32f4xx_adc.c ****   /* Configure ADCx: regular channel sequence length */
 291:FWLIB/src/stm32f4xx_adc.c ****   /* Set L bits according to ADC_NbrOfConversion value */
 292:FWLIB/src/stm32f4xx_adc.c ****   tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 120              		.loc 1 292 0
 121 0038 0B7D     		ldrb	r3, [r1, #20]	@ zero_extendqisi2
 122 003a 013B     		subs	r3, r3, #1
 123 003c DBB2     		uxtb	r3, r3
 124              	.LVL12:
 293:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 125              		.loc 1 293 0
 126 003e 42EA0353 		orr	r3, r2, r3, lsl #20
 127              	.LVL13:
 294:FWLIB/src/stm32f4xx_adc.c ****   
 295:FWLIB/src/stm32f4xx_adc.c ****   /* Write to ADCx SQR1 */
 296:FWLIB/src/stm32f4xx_adc.c ****   ADCx->SQR1 = tmpreg1;
 128              		.loc 1 296 0
 129 0042 C362     		str	r3, [r0, #44]
 130              	.LVL14:
 297:FWLIB/src/stm32f4xx_adc.c **** }
 131              		.loc 1 297 0
 132 0044 5DF8044B 		ldr	r4, [sp], #4
 133              	.LCFI2:
 134              		.cfi_restore 4
 135              		.cfi_def_cfa_offset 0
 136 0048 7047     		bx	lr
 137              	.L6:
 138 004a 00BF     		.align	2
 139              	.L5:
 140 004c FDF7FFC0 		.word	-1056966659
 141              		.cfi_endproc
 142              	.LFE124:
 144              		.section	.text.ADC_StructInit,"ax",%progbits
 145              		.align	2
 146              		.global	ADC_StructInit
 147              		.thumb
 148              		.thumb_func
 150              	ADC_StructInit:
 151              	.LFB125:
 298:FWLIB/src/stm32f4xx_adc.c **** 
 299:FWLIB/src/stm32f4xx_adc.c **** /**
 300:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Fills each ADC_InitStruct member with its default value.
 301:FWLIB/src/stm32f4xx_adc.c ****   * @note   This function is used to initialize the global features of the ADC ( 
 302:FWLIB/src/stm32f4xx_adc.c ****   *         Resolution and Data Alignment), however, the rest of the configuration
 303:FWLIB/src/stm32f4xx_adc.c ****   *         parameters are specific to the regular channels group (scan mode 
 304:FWLIB/src/stm32f4xx_adc.c ****   *         activation, continuous mode activation, External trigger source and 
 305:FWLIB/src/stm32f4xx_adc.c ****   *         edge, number of conversion in the regular channels group sequencer).  
 306:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 9


 307:FWLIB/src/stm32f4xx_adc.c ****   *         be initialized.
 308:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 309:FWLIB/src/stm32f4xx_adc.c ****   */
 310:FWLIB/src/stm32f4xx_adc.c **** void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
 311:FWLIB/src/stm32f4xx_adc.c **** {
 152              		.loc 1 311 0
 153              		.cfi_startproc
 154              		@ args = 0, pretend = 0, frame = 0
 155              		@ frame_needed = 0, uses_anonymous_args = 0
 156              		@ link register save eliminated.
 157              	.LVL15:
 312:FWLIB/src/stm32f4xx_adc.c ****   /* Initialize the ADC_Mode member */
 313:FWLIB/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 158              		.loc 1 313 0
 159 0000 0023     		movs	r3, #0
 160 0002 0360     		str	r3, [r0]
 314:FWLIB/src/stm32f4xx_adc.c **** 
 315:FWLIB/src/stm32f4xx_adc.c ****   /* initialize the ADC_ScanConvMode member */
 316:FWLIB/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 161              		.loc 1 316 0
 162 0004 0371     		strb	r3, [r0, #4]
 317:FWLIB/src/stm32f4xx_adc.c **** 
 318:FWLIB/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ContinuousConvMode member */
 319:FWLIB/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 163              		.loc 1 319 0
 164 0006 4371     		strb	r3, [r0, #5]
 320:FWLIB/src/stm32f4xx_adc.c **** 
 321:FWLIB/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ExternalTrigConvEdge member */
 322:FWLIB/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 165              		.loc 1 322 0
 166 0008 8360     		str	r3, [r0, #8]
 323:FWLIB/src/stm32f4xx_adc.c **** 
 324:FWLIB/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ExternalTrigConv member */
 325:FWLIB/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 167              		.loc 1 325 0
 168 000a C360     		str	r3, [r0, #12]
 326:FWLIB/src/stm32f4xx_adc.c **** 
 327:FWLIB/src/stm32f4xx_adc.c ****   /* Initialize the ADC_DataAlign member */
 328:FWLIB/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 169              		.loc 1 328 0
 170 000c 0361     		str	r3, [r0, #16]
 329:FWLIB/src/stm32f4xx_adc.c **** 
 330:FWLIB/src/stm32f4xx_adc.c ****   /* Initialize the ADC_NbrOfConversion member */
 331:FWLIB/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_NbrOfConversion = 1;
 171              		.loc 1 331 0
 172 000e 0123     		movs	r3, #1
 173 0010 0375     		strb	r3, [r0, #20]
 174 0012 7047     		bx	lr
 175              		.cfi_endproc
 176              	.LFE125:
 178              		.section	.text.ADC_CommonInit,"ax",%progbits
 179              		.align	2
 180              		.global	ADC_CommonInit
 181              		.thumb
 182              		.thumb_func
 184              	ADC_CommonInit:
 185              	.LFB126:
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 10


 332:FWLIB/src/stm32f4xx_adc.c **** }
 333:FWLIB/src/stm32f4xx_adc.c **** 
 334:FWLIB/src/stm32f4xx_adc.c **** /**
 335:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Initializes the ADCs peripherals according to the specified parameters 
 336:FWLIB/src/stm32f4xx_adc.c ****   *         in the ADC_CommonInitStruct.
 337:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
 338:FWLIB/src/stm32f4xx_adc.c ****   *         that contains the configuration information for  All ADCs peripherals.
 339:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 340:FWLIB/src/stm32f4xx_adc.c ****   */
 341:FWLIB/src/stm32f4xx_adc.c **** void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
 342:FWLIB/src/stm32f4xx_adc.c **** {
 186              		.loc 1 342 0
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 0
 189              		@ frame_needed = 0, uses_anonymous_args = 0
 190              		@ link register save eliminated.
 191              	.LVL16:
 192 0000 10B4     		push	{r4}
 193              	.LCFI3:
 194              		.cfi_def_cfa_offset 4
 195              		.cfi_offset 4, -4
 196              	.LVL17:
 343:FWLIB/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 344:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 345:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_MODE(ADC_CommonInitStruct->ADC_Mode));
 346:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
 347:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
 348:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
 349:FWLIB/src/stm32f4xx_adc.c ****   /*---------------------------- ADC CCR Configuration -----------------*/
 350:FWLIB/src/stm32f4xx_adc.c ****   /* Get the ADC CCR value */
 351:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 = ADC->CCR;
 197              		.loc 1 351 0
 198 0002 084C     		ldr	r4, .L10
 199 0004 6368     		ldr	r3, [r4, #4]
 200              	.LVL18:
 352:FWLIB/src/stm32f4xx_adc.c ****   
 353:FWLIB/src/stm32f4xx_adc.c ****   /* Clear MULTI, DELAY, DMA and ADCPRE bits */
 354:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 &= CR_CLEAR_MASK;
 201              		.loc 1 354 0
 202 0006 0849     		ldr	r1, .L10+4
 203 0008 1940     		ands	r1, r1, r3
 204              	.LVL19:
 355:FWLIB/src/stm32f4xx_adc.c ****   
 356:FWLIB/src/stm32f4xx_adc.c ****   /* Configure ADCx: Multi mode, Delay between two sampling time, ADC prescaler,
 357:FWLIB/src/stm32f4xx_adc.c ****      and DMA access mode for multimode */
 358:FWLIB/src/stm32f4xx_adc.c ****   /* Set MULTI bits according to ADC_Mode value */
 359:FWLIB/src/stm32f4xx_adc.c ****   /* Set ADCPRE bits according to ADC_Prescaler value */
 360:FWLIB/src/stm32f4xx_adc.c ****   /* Set DMA bits according to ADC_DMAAccessMode value */
 361:FWLIB/src/stm32f4xx_adc.c ****   /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
 362:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 205              		.loc 1 362 0
 206 000a 0268     		ldr	r2, [r0]
 363:FWLIB/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 207              		.loc 1 363 0
 208 000c 4368     		ldr	r3, [r0, #4]
 362:FWLIB/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 209              		.loc 1 362 0
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 11


 210 000e 1A43     		orrs	r2, r2, r3
 364:FWLIB/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_DMAAccessMode | 
 211              		.loc 1 364 0
 212 0010 8368     		ldr	r3, [r0, #8]
 363:FWLIB/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 213              		.loc 1 363 0
 214 0012 1343     		orrs	r3, r3, r2
 365:FWLIB/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 215              		.loc 1 365 0
 216 0014 C268     		ldr	r2, [r0, #12]
 364:FWLIB/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_DMAAccessMode | 
 217              		.loc 1 364 0
 218 0016 1343     		orrs	r3, r3, r2
 362:FWLIB/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 219              		.loc 1 362 0
 220 0018 0B43     		orrs	r3, r3, r1
 221              	.LVL20:
 366:FWLIB/src/stm32f4xx_adc.c ****                         
 367:FWLIB/src/stm32f4xx_adc.c ****   /* Write to ADC CCR */
 368:FWLIB/src/stm32f4xx_adc.c ****   ADC->CCR = tmpreg1;
 222              		.loc 1 368 0
 223 001a 6360     		str	r3, [r4, #4]
 369:FWLIB/src/stm32f4xx_adc.c **** }
 224              		.loc 1 369 0
 225 001c 5DF8044B 		ldr	r4, [sp], #4
 226              	.LCFI4:
 227              		.cfi_restore 4
 228              		.cfi_def_cfa_offset 0
 229 0020 7047     		bx	lr
 230              	.L11:
 231 0022 00BF     		.align	2
 232              	.L10:
 233 0024 00230140 		.word	1073816320
 234 0028 E030FCFF 		.word	-249632
 235              		.cfi_endproc
 236              	.LFE126:
 238              		.section	.text.ADC_CommonStructInit,"ax",%progbits
 239              		.align	2
 240              		.global	ADC_CommonStructInit
 241              		.thumb
 242              		.thumb_func
 244              	ADC_CommonStructInit:
 245              	.LFB127:
 370:FWLIB/src/stm32f4xx_adc.c **** 
 371:FWLIB/src/stm32f4xx_adc.c **** /**
 372:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Fills each ADC_CommonInitStruct member with its default value.
 373:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
 374:FWLIB/src/stm32f4xx_adc.c ****   *         which will be initialized.
 375:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 376:FWLIB/src/stm32f4xx_adc.c ****   */
 377:FWLIB/src/stm32f4xx_adc.c **** void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
 378:FWLIB/src/stm32f4xx_adc.c **** {
 246              		.loc 1 378 0
 247              		.cfi_startproc
 248              		@ args = 0, pretend = 0, frame = 0
 249              		@ frame_needed = 0, uses_anonymous_args = 0
 250              		@ link register save eliminated.
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 12


 251              	.LVL21:
 379:FWLIB/src/stm32f4xx_adc.c ****   /* Initialize the ADC_Mode member */
 380:FWLIB/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 252              		.loc 1 380 0
 253 0000 0023     		movs	r3, #0
 254 0002 0360     		str	r3, [r0]
 381:FWLIB/src/stm32f4xx_adc.c **** 
 382:FWLIB/src/stm32f4xx_adc.c ****   /* initialize the ADC_Prescaler member */
 383:FWLIB/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 255              		.loc 1 383 0
 256 0004 4360     		str	r3, [r0, #4]
 384:FWLIB/src/stm32f4xx_adc.c **** 
 385:FWLIB/src/stm32f4xx_adc.c ****   /* Initialize the ADC_DMAAccessMode member */
 386:FWLIB/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 257              		.loc 1 386 0
 258 0006 8360     		str	r3, [r0, #8]
 387:FWLIB/src/stm32f4xx_adc.c **** 
 388:FWLIB/src/stm32f4xx_adc.c ****   /* Initialize the ADC_TwoSamplingDelay member */
 389:FWLIB/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 259              		.loc 1 389 0
 260 0008 C360     		str	r3, [r0, #12]
 261 000a 7047     		bx	lr
 262              		.cfi_endproc
 263              	.LFE127:
 265              		.section	.text.ADC_Cmd,"ax",%progbits
 266              		.align	2
 267              		.global	ADC_Cmd
 268              		.thumb
 269              		.thumb_func
 271              	ADC_Cmd:
 272              	.LFB128:
 390:FWLIB/src/stm32f4xx_adc.c **** }
 391:FWLIB/src/stm32f4xx_adc.c **** 
 392:FWLIB/src/stm32f4xx_adc.c **** /**
 393:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC peripheral.
 394:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 395:FWLIB/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the ADCx peripheral. 
 396:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 397:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 398:FWLIB/src/stm32f4xx_adc.c ****   */
 399:FWLIB/src/stm32f4xx_adc.c **** void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 400:FWLIB/src/stm32f4xx_adc.c **** {
 273              		.loc 1 400 0
 274              		.cfi_startproc
 275              		@ args = 0, pretend = 0, frame = 0
 276              		@ frame_needed = 0, uses_anonymous_args = 0
 277              		@ link register save eliminated.
 278              	.LVL22:
 401:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 402:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 403:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 404:FWLIB/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 279              		.loc 1 404 0
 280 0000 21B1     		cbz	r1, .L14
 405:FWLIB/src/stm32f4xx_adc.c ****   {
 406:FWLIB/src/stm32f4xx_adc.c ****     /* Set the ADON bit to wake up the ADC from power down mode */
 407:FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 13


 281              		.loc 1 407 0
 282 0002 8368     		ldr	r3, [r0, #8]
 283 0004 43F00103 		orr	r3, r3, #1
 284 0008 8360     		str	r3, [r0, #8]
 285 000a 7047     		bx	lr
 286              	.L14:
 408:FWLIB/src/stm32f4xx_adc.c ****   }
 409:FWLIB/src/stm32f4xx_adc.c ****   else
 410:FWLIB/src/stm32f4xx_adc.c ****   {
 411:FWLIB/src/stm32f4xx_adc.c ****     /* Disable the selected ADC peripheral */
 412:FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 287              		.loc 1 412 0
 288 000c 8368     		ldr	r3, [r0, #8]
 289 000e 23F00103 		bic	r3, r3, #1
 290 0012 8360     		str	r3, [r0, #8]
 291 0014 7047     		bx	lr
 292              		.cfi_endproc
 293              	.LFE128:
 295 0016 00BF     		.section	.text.ADC_AnalogWatchdogCmd,"ax",%progbits
 296              		.align	2
 297              		.global	ADC_AnalogWatchdogCmd
 298              		.thumb
 299              		.thumb_func
 301              	ADC_AnalogWatchdogCmd:
 302              	.LFB129:
 413:FWLIB/src/stm32f4xx_adc.c ****   }
 414:FWLIB/src/stm32f4xx_adc.c **** }
 415:FWLIB/src/stm32f4xx_adc.c **** /**
 416:FWLIB/src/stm32f4xx_adc.c ****   * @}
 417:FWLIB/src/stm32f4xx_adc.c ****   */
 418:FWLIB/src/stm32f4xx_adc.c **** 
 419:FWLIB/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group2 Analog Watchdog configuration functions
 420:FWLIB/src/stm32f4xx_adc.c ****  *  @brief    Analog Watchdog configuration functions 
 421:FWLIB/src/stm32f4xx_adc.c ****  *
 422:FWLIB/src/stm32f4xx_adc.c **** @verbatim   
 423:FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================
 424:FWLIB/src/stm32f4xx_adc.c ****              ##### Analog Watchdog configuration functions #####
 425:FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================  
 426:FWLIB/src/stm32f4xx_adc.c ****     [..] This section provides functions allowing to configure the Analog Watchdog
 427:FWLIB/src/stm32f4xx_adc.c ****          (AWD) feature in the ADC.
 428:FWLIB/src/stm32f4xx_adc.c ****   
 429:FWLIB/src/stm32f4xx_adc.c ****     [..] A typical configuration Analog Watchdog is done following these steps :
 430:FWLIB/src/stm32f4xx_adc.c ****       (#) the ADC guarded channel(s) is (are) selected using the 
 431:FWLIB/src/stm32f4xx_adc.c ****           ADC_AnalogWatchdogSingleChannelConfig() function.
 432:FWLIB/src/stm32f4xx_adc.c ****       (#) The Analog watchdog lower and higher threshold are configured using the  
 433:FWLIB/src/stm32f4xx_adc.c ****           ADC_AnalogWatchdogThresholdsConfig() function.
 434:FWLIB/src/stm32f4xx_adc.c ****       (#) The Analog watchdog is enabled and configured to enable the check, on one
 435:FWLIB/src/stm32f4xx_adc.c ****           or more channels, using the  ADC_AnalogWatchdogCmd() function.
 436:FWLIB/src/stm32f4xx_adc.c **** @endverbatim
 437:FWLIB/src/stm32f4xx_adc.c ****   * @{
 438:FWLIB/src/stm32f4xx_adc.c ****   */
 439:FWLIB/src/stm32f4xx_adc.c ****   
 440:FWLIB/src/stm32f4xx_adc.c **** /**
 441:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the analog watchdog on single/all regular or 
 442:FWLIB/src/stm32f4xx_adc.c ****   *         injected channels
 443:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 444:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_AnalogWatchdog: the ADC analog watchdog configuration.
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 14


 445:FWLIB/src/stm32f4xx_adc.c ****   *         This parameter can be one of the following values:
 446:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleRegEnable: Analog watchdog on a single regular channel
 447:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleInjecEnable: Analog watchdog on a single injected chan
 448:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleRegOrInjecEnable: Analog watchdog on a single regular 
 449:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllRegEnable: Analog watchdog on all regular channel
 450:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllInjecEnable: Analog watchdog on all injected channel
 451:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and inj
 452:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
 453:FWLIB/src/stm32f4xx_adc.c ****   * @retval None	  
 454:FWLIB/src/stm32f4xx_adc.c ****   */
 455:FWLIB/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
 456:FWLIB/src/stm32f4xx_adc.c **** {
 303              		.loc 1 456 0
 304              		.cfi_startproc
 305              		@ args = 0, pretend = 0, frame = 0
 306              		@ frame_needed = 0, uses_anonymous_args = 0
 307              		@ link register save eliminated.
 308              	.LVL23:
 457:FWLIB/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 458:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 459:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 460:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
 461:FWLIB/src/stm32f4xx_adc.c ****   
 462:FWLIB/src/stm32f4xx_adc.c ****   /* Get the old register value */
 463:FWLIB/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR1;
 309              		.loc 1 463 0
 310 0000 4368     		ldr	r3, [r0, #4]
 311              	.LVL24:
 464:FWLIB/src/stm32f4xx_adc.c ****   
 465:FWLIB/src/stm32f4xx_adc.c ****   /* Clear AWDEN, JAWDEN and AWDSGL bits */
 466:FWLIB/src/stm32f4xx_adc.c ****   tmpreg &= CR1_AWDMode_RESET;
 312              		.loc 1 466 0
 313 0002 23F44003 		bic	r3, r3, #12582912
 314              	.LVL25:
 315 0006 23F40073 		bic	r3, r3, #512
 316              	.LVL26:
 467:FWLIB/src/stm32f4xx_adc.c ****   
 468:FWLIB/src/stm32f4xx_adc.c ****   /* Set the analog watchdog enable mode */
 469:FWLIB/src/stm32f4xx_adc.c ****   tmpreg |= ADC_AnalogWatchdog;
 317              		.loc 1 469 0
 318 000a 1943     		orrs	r1, r1, r3
 319              	.LVL27:
 470:FWLIB/src/stm32f4xx_adc.c ****   
 471:FWLIB/src/stm32f4xx_adc.c ****   /* Store the new register value */
 472:FWLIB/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg;
 320              		.loc 1 472 0
 321 000c 4160     		str	r1, [r0, #4]
 322 000e 7047     		bx	lr
 323              		.cfi_endproc
 324              	.LFE129:
 326              		.section	.text.ADC_AnalogWatchdogThresholdsConfig,"ax",%progbits
 327              		.align	2
 328              		.global	ADC_AnalogWatchdogThresholdsConfig
 329              		.thumb
 330              		.thumb_func
 332              	ADC_AnalogWatchdogThresholdsConfig:
 333              	.LFB130:
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 15


 473:FWLIB/src/stm32f4xx_adc.c **** }
 474:FWLIB/src/stm32f4xx_adc.c **** 
 475:FWLIB/src/stm32f4xx_adc.c **** /**
 476:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Configures the high and low thresholds of the analog watchdog.
 477:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 478:FWLIB/src/stm32f4xx_adc.c ****   * @param  HighThreshold: the ADC analog watchdog High threshold value.
 479:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter must be a 12-bit value.
 480:FWLIB/src/stm32f4xx_adc.c ****   * @param  LowThreshold:  the ADC analog watchdog Low threshold value.
 481:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter must be a 12-bit value.
 482:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 483:FWLIB/src/stm32f4xx_adc.c ****   */
 484:FWLIB/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
 485:FWLIB/src/stm32f4xx_adc.c ****                                         uint16_t LowThreshold)
 486:FWLIB/src/stm32f4xx_adc.c **** {
 334              		.loc 1 486 0
 335              		.cfi_startproc
 336              		@ args = 0, pretend = 0, frame = 0
 337              		@ frame_needed = 0, uses_anonymous_args = 0
 338              		@ link register save eliminated.
 339              	.LVL28:
 487:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 488:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 489:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_THRESHOLD(HighThreshold));
 490:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_THRESHOLD(LowThreshold));
 491:FWLIB/src/stm32f4xx_adc.c ****   
 492:FWLIB/src/stm32f4xx_adc.c ****   /* Set the ADCx high threshold */
 493:FWLIB/src/stm32f4xx_adc.c ****   ADCx->HTR = HighThreshold;
 340              		.loc 1 493 0
 341 0000 4162     		str	r1, [r0, #36]
 494:FWLIB/src/stm32f4xx_adc.c ****   
 495:FWLIB/src/stm32f4xx_adc.c ****   /* Set the ADCx low threshold */
 496:FWLIB/src/stm32f4xx_adc.c ****   ADCx->LTR = LowThreshold;
 342              		.loc 1 496 0
 343 0002 8262     		str	r2, [r0, #40]
 344 0004 7047     		bx	lr
 345              		.cfi_endproc
 346              	.LFE130:
 348 0006 00BF     		.section	.text.ADC_AnalogWatchdogSingleChannelConfig,"ax",%progbits
 349              		.align	2
 350              		.global	ADC_AnalogWatchdogSingleChannelConfig
 351              		.thumb
 352              		.thumb_func
 354              	ADC_AnalogWatchdogSingleChannelConfig:
 355              	.LFB131:
 497:FWLIB/src/stm32f4xx_adc.c **** }
 498:FWLIB/src/stm32f4xx_adc.c **** 
 499:FWLIB/src/stm32f4xx_adc.c **** /**
 500:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Configures the analog watchdog guarded single channel
 501:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 502:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure for the analog watchdog. 
 503:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 504:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
 505:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
 506:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
 507:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
 508:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
 509:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 16


 510:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
 511:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
 512:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
 513:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
 514:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
 515:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
 516:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
 517:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
 518:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
 519:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
 520:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
 521:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
 522:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected
 523:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 524:FWLIB/src/stm32f4xx_adc.c ****   */
 525:FWLIB/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
 526:FWLIB/src/stm32f4xx_adc.c **** {
 356              		.loc 1 526 0
 357              		.cfi_startproc
 358              		@ args = 0, pretend = 0, frame = 0
 359              		@ frame_needed = 0, uses_anonymous_args = 0
 360              		@ link register save eliminated.
 361              	.LVL29:
 527:FWLIB/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 528:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 529:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 530:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 531:FWLIB/src/stm32f4xx_adc.c ****   
 532:FWLIB/src/stm32f4xx_adc.c ****   /* Get the old register value */
 533:FWLIB/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR1;
 362              		.loc 1 533 0
 363 0000 4368     		ldr	r3, [r0, #4]
 364              	.LVL30:
 534:FWLIB/src/stm32f4xx_adc.c ****   
 535:FWLIB/src/stm32f4xx_adc.c ****   /* Clear the Analog watchdog channel select bits */
 536:FWLIB/src/stm32f4xx_adc.c ****   tmpreg &= CR1_AWDCH_RESET;
 365              		.loc 1 536 0
 366 0002 23F01F03 		bic	r3, r3, #31
 367              	.LVL31:
 537:FWLIB/src/stm32f4xx_adc.c ****   
 538:FWLIB/src/stm32f4xx_adc.c ****   /* Set the Analog watchdog channel */
 539:FWLIB/src/stm32f4xx_adc.c ****   tmpreg |= ADC_Channel;
 368              		.loc 1 539 0
 369 0006 1943     		orrs	r1, r1, r3
 370              	.LVL32:
 540:FWLIB/src/stm32f4xx_adc.c ****   
 541:FWLIB/src/stm32f4xx_adc.c ****   /* Store the new register value */
 542:FWLIB/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg;
 371              		.loc 1 542 0
 372 0008 4160     		str	r1, [r0, #4]
 373 000a 7047     		bx	lr
 374              		.cfi_endproc
 375              	.LFE131:
 377              		.section	.text.ADC_TempSensorVrefintCmd,"ax",%progbits
 378              		.align	2
 379              		.global	ADC_TempSensorVrefintCmd
 380              		.thumb
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 17


 381              		.thumb_func
 383              	ADC_TempSensorVrefintCmd:
 384              	.LFB132:
 543:FWLIB/src/stm32f4xx_adc.c **** }
 544:FWLIB/src/stm32f4xx_adc.c **** /**
 545:FWLIB/src/stm32f4xx_adc.c ****   * @}
 546:FWLIB/src/stm32f4xx_adc.c ****   */
 547:FWLIB/src/stm32f4xx_adc.c **** 
 548:FWLIB/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group3 Temperature Sensor, Vrefint (Voltage Reference internal) 
 549:FWLIB/src/stm32f4xx_adc.c ****  *            and VBAT (Voltage BATtery) management functions
 550:FWLIB/src/stm32f4xx_adc.c ****  *  @brief   Temperature Sensor, Vrefint and VBAT management functions 
 551:FWLIB/src/stm32f4xx_adc.c ****  *
 552:FWLIB/src/stm32f4xx_adc.c **** @verbatim   
 553:FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================
 554:FWLIB/src/stm32f4xx_adc.c ****       ##### Temperature Sensor, Vrefint and VBAT management functions #####
 555:FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================  
 556:FWLIB/src/stm32f4xx_adc.c ****     [..] This section provides functions allowing to enable/ disable the internal 
 557:FWLIB/src/stm32f4xx_adc.c ****          connections between the ADC and the Temperature Sensor, the Vrefint and 
 558:FWLIB/src/stm32f4xx_adc.c ****          the Vbat sources.
 559:FWLIB/src/stm32f4xx_adc.c ****      
 560:FWLIB/src/stm32f4xx_adc.c ****     [..] A typical configuration to get the Temperature sensor and Vrefint channels 
 561:FWLIB/src/stm32f4xx_adc.c ****          voltages is done following these steps :
 562:FWLIB/src/stm32f4xx_adc.c ****       (#) Enable the internal connection of Temperature sensor and Vrefint sources 
 563:FWLIB/src/stm32f4xx_adc.c ****           with the ADC channels using ADC_TempSensorVrefintCmd() function. 
 564:FWLIB/src/stm32f4xx_adc.c ****       (#) Select the ADC_Channel_TempSensor and/or ADC_Channel_Vrefint using 
 565:FWLIB/src/stm32f4xx_adc.c ****           ADC_RegularChannelConfig() or  ADC_InjectedChannelConfig() functions 
 566:FWLIB/src/stm32f4xx_adc.c ****       (#) Get the voltage values, using ADC_GetConversionValue() or  
 567:FWLIB/src/stm32f4xx_adc.c ****           ADC_GetInjectedConversionValue().
 568:FWLIB/src/stm32f4xx_adc.c **** 
 569:FWLIB/src/stm32f4xx_adc.c ****     [..] A typical configuration to get the VBAT channel voltage is done following 
 570:FWLIB/src/stm32f4xx_adc.c ****          these steps :
 571:FWLIB/src/stm32f4xx_adc.c ****       (#) Enable the internal connection of VBAT source with the ADC channel using 
 572:FWLIB/src/stm32f4xx_adc.c ****           ADC_VBATCmd() function. 
 573:FWLIB/src/stm32f4xx_adc.c ****       (#) Select the ADC_Channel_Vbat using ADC_RegularChannelConfig() or  
 574:FWLIB/src/stm32f4xx_adc.c ****           ADC_InjectedChannelConfig() functions 
 575:FWLIB/src/stm32f4xx_adc.c ****       (#) Get the voltage value, using ADC_GetConversionValue() or  
 576:FWLIB/src/stm32f4xx_adc.c ****           ADC_GetInjectedConversionValue().
 577:FWLIB/src/stm32f4xx_adc.c ****  
 578:FWLIB/src/stm32f4xx_adc.c **** @endverbatim
 579:FWLIB/src/stm32f4xx_adc.c ****   * @{
 580:FWLIB/src/stm32f4xx_adc.c ****   */
 581:FWLIB/src/stm32f4xx_adc.c ****   
 582:FWLIB/src/stm32f4xx_adc.c ****   
 583:FWLIB/src/stm32f4xx_adc.c **** /**
 584:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the temperature sensor and Vrefint channels.
 585:FWLIB/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the temperature sensor and Vrefint channels.
 586:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 587:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 588:FWLIB/src/stm32f4xx_adc.c ****   */
 589:FWLIB/src/stm32f4xx_adc.c **** void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
 590:FWLIB/src/stm32f4xx_adc.c **** {
 385              		.loc 1 590 0
 386              		.cfi_startproc
 387              		@ args = 0, pretend = 0, frame = 0
 388              		@ frame_needed = 0, uses_anonymous_args = 0
 389              		@ link register save eliminated.
 390              	.LVL33:
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 18


 591:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 592:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 593:FWLIB/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 391              		.loc 1 593 0
 392 0000 28B1     		cbz	r0, .L20
 594:FWLIB/src/stm32f4xx_adc.c ****   {
 595:FWLIB/src/stm32f4xx_adc.c ****     /* Enable the temperature sensor and Vrefint channel*/
 596:FWLIB/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 393              		.loc 1 596 0
 394 0002 064A     		ldr	r2, .L22
 395 0004 5368     		ldr	r3, [r2, #4]
 396 0006 43F40003 		orr	r3, r3, #8388608
 397 000a 5360     		str	r3, [r2, #4]
 398 000c 7047     		bx	lr
 399              	.L20:
 597:FWLIB/src/stm32f4xx_adc.c ****   }
 598:FWLIB/src/stm32f4xx_adc.c ****   else
 599:FWLIB/src/stm32f4xx_adc.c ****   {
 600:FWLIB/src/stm32f4xx_adc.c ****     /* Disable the temperature sensor and Vrefint channel*/
 601:FWLIB/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 400              		.loc 1 601 0
 401 000e 034A     		ldr	r2, .L22
 402 0010 5368     		ldr	r3, [r2, #4]
 403 0012 23F40003 		bic	r3, r3, #8388608
 404 0016 5360     		str	r3, [r2, #4]
 405 0018 7047     		bx	lr
 406              	.L23:
 407 001a 00BF     		.align	2
 408              	.L22:
 409 001c 00230140 		.word	1073816320
 410              		.cfi_endproc
 411              	.LFE132:
 413              		.section	.text.ADC_VBATCmd,"ax",%progbits
 414              		.align	2
 415              		.global	ADC_VBATCmd
 416              		.thumb
 417              		.thumb_func
 419              	ADC_VBATCmd:
 420              	.LFB133:
 602:FWLIB/src/stm32f4xx_adc.c ****   }
 603:FWLIB/src/stm32f4xx_adc.c **** }
 604:FWLIB/src/stm32f4xx_adc.c **** 
 605:FWLIB/src/stm32f4xx_adc.c **** /**
 606:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the VBAT (Voltage Battery) channel.
 607:FWLIB/src/stm32f4xx_adc.c ****   * 
 608:FWLIB/src/stm32f4xx_adc.c ****   * @note   the Battery voltage measured is equal to VBAT/2 on STM32F40xx and 
 609:FWLIB/src/stm32f4xx_adc.c ****   *         STM32F41xx devices and equal to VBAT/4 on STM32F42xx and STM32F43xx devices 
 610:FWLIB/src/stm32f4xx_adc.c ****   *              
 611:FWLIB/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the VBAT channel.
 612:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 613:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 614:FWLIB/src/stm32f4xx_adc.c ****   */
 615:FWLIB/src/stm32f4xx_adc.c **** void ADC_VBATCmd(FunctionalState NewState)                             
 616:FWLIB/src/stm32f4xx_adc.c **** {
 421              		.loc 1 616 0
 422              		.cfi_startproc
 423              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 19


 424              		@ frame_needed = 0, uses_anonymous_args = 0
 425              		@ link register save eliminated.
 426              	.LVL34:
 617:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 618:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 619:FWLIB/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 427              		.loc 1 619 0
 428 0000 28B1     		cbz	r0, .L25
 620:FWLIB/src/stm32f4xx_adc.c ****   {
 621:FWLIB/src/stm32f4xx_adc.c ****     /* Enable the VBAT channel*/
 622:FWLIB/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 429              		.loc 1 622 0
 430 0002 064A     		ldr	r2, .L27
 431 0004 5368     		ldr	r3, [r2, #4]
 432 0006 43F48003 		orr	r3, r3, #4194304
 433 000a 5360     		str	r3, [r2, #4]
 434 000c 7047     		bx	lr
 435              	.L25:
 623:FWLIB/src/stm32f4xx_adc.c ****   }
 624:FWLIB/src/stm32f4xx_adc.c ****   else
 625:FWLIB/src/stm32f4xx_adc.c ****   {
 626:FWLIB/src/stm32f4xx_adc.c ****     /* Disable the VBAT channel*/
 627:FWLIB/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 436              		.loc 1 627 0
 437 000e 034A     		ldr	r2, .L27
 438 0010 5368     		ldr	r3, [r2, #4]
 439 0012 23F48003 		bic	r3, r3, #4194304
 440 0016 5360     		str	r3, [r2, #4]
 441 0018 7047     		bx	lr
 442              	.L28:
 443 001a 00BF     		.align	2
 444              	.L27:
 445 001c 00230140 		.word	1073816320
 446              		.cfi_endproc
 447              	.LFE133:
 449              		.section	.text.ADC_RegularChannelConfig,"ax",%progbits
 450              		.align	2
 451              		.global	ADC_RegularChannelConfig
 452              		.thumb
 453              		.thumb_func
 455              	ADC_RegularChannelConfig:
 456              	.LFB134:
 628:FWLIB/src/stm32f4xx_adc.c ****   }
 629:FWLIB/src/stm32f4xx_adc.c **** }
 630:FWLIB/src/stm32f4xx_adc.c **** 
 631:FWLIB/src/stm32f4xx_adc.c **** /**
 632:FWLIB/src/stm32f4xx_adc.c ****   * @}
 633:FWLIB/src/stm32f4xx_adc.c ****   */
 634:FWLIB/src/stm32f4xx_adc.c **** 
 635:FWLIB/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group4 Regular Channels Configuration functions
 636:FWLIB/src/stm32f4xx_adc.c ****  *  @brief   Regular Channels Configuration functions 
 637:FWLIB/src/stm32f4xx_adc.c ****  *
 638:FWLIB/src/stm32f4xx_adc.c **** @verbatim   
 639:FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================
 640:FWLIB/src/stm32f4xx_adc.c ****              ##### Regular Channels Configuration functions #####
 641:FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================  
 642:FWLIB/src/stm32f4xx_adc.c **** 
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 20


 643:FWLIB/src/stm32f4xx_adc.c ****     [..] This section provides functions allowing to manage the ADC's regular channels,
 644:FWLIB/src/stm32f4xx_adc.c ****          it is composed of 2 sub sections : 
 645:FWLIB/src/stm32f4xx_adc.c ****   
 646:FWLIB/src/stm32f4xx_adc.c ****       (#) Configuration and management functions for regular channels: This subsection 
 647:FWLIB/src/stm32f4xx_adc.c ****           provides functions allowing to configure the ADC regular channels :    
 648:FWLIB/src/stm32f4xx_adc.c ****          (++) Configure the rank in the regular group sequencer for each channel
 649:FWLIB/src/stm32f4xx_adc.c ****          (++) Configure the sampling time for each channel
 650:FWLIB/src/stm32f4xx_adc.c ****          (++) select the conversion Trigger for regular channels
 651:FWLIB/src/stm32f4xx_adc.c ****          (++) select the desired EOC event behavior configuration
 652:FWLIB/src/stm32f4xx_adc.c ****          (++) Activate the continuous Mode  (*)
 653:FWLIB/src/stm32f4xx_adc.c ****          (++) Activate the Discontinuous Mode 
 654:FWLIB/src/stm32f4xx_adc.c ****          -@@- Please Note that the following features for regular channels 
 655:FWLIB/src/stm32f4xx_adc.c ****              are configured using the ADC_Init() function : 
 656:FWLIB/src/stm32f4xx_adc.c ****            (+@@) scan mode activation 
 657:FWLIB/src/stm32f4xx_adc.c ****            (+@@) continuous mode activation (**) 
 658:FWLIB/src/stm32f4xx_adc.c ****            (+@@) External trigger source  
 659:FWLIB/src/stm32f4xx_adc.c ****            (+@@) External trigger edge 
 660:FWLIB/src/stm32f4xx_adc.c ****            (+@@) number of conversion in the regular channels group sequencer.
 661:FWLIB/src/stm32f4xx_adc.c ****      
 662:FWLIB/src/stm32f4xx_adc.c ****          -@@- (*) and (**) are performing the same configuration
 663:FWLIB/src/stm32f4xx_adc.c ****      
 664:FWLIB/src/stm32f4xx_adc.c ****       (#) Get the conversion data: This subsection provides an important function in 
 665:FWLIB/src/stm32f4xx_adc.c ****           the ADC peripheral since it returns the converted data of the current 
 666:FWLIB/src/stm32f4xx_adc.c ****           regular channel. When the Conversion value is read, the EOC Flag is 
 667:FWLIB/src/stm32f4xx_adc.c ****           automatically cleared.
 668:FWLIB/src/stm32f4xx_adc.c ****      
 669:FWLIB/src/stm32f4xx_adc.c ****           -@- For multi ADC mode, the last ADC1, ADC2 and ADC3 regular conversions 
 670:FWLIB/src/stm32f4xx_adc.c ****               results data (in the selected multi mode) can be returned in the same 
 671:FWLIB/src/stm32f4xx_adc.c ****               time using ADC_GetMultiModeConversionValue() function. 
 672:FWLIB/src/stm32f4xx_adc.c ****          
 673:FWLIB/src/stm32f4xx_adc.c **** @endverbatim
 674:FWLIB/src/stm32f4xx_adc.c ****   * @{
 675:FWLIB/src/stm32f4xx_adc.c ****   */
 676:FWLIB/src/stm32f4xx_adc.c **** /**
 677:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Configures for the selected ADC regular channel its corresponding
 678:FWLIB/src/stm32f4xx_adc.c ****   *         rank in the sequencer and its sample time.
 679:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 680:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
 681:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 682:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
 683:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
 684:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
 685:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
 686:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
 687:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
 688:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
 689:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
 690:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
 691:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
 692:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
 693:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
 694:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
 695:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
 696:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
 697:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
 698:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
 699:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 21


 700:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected                       
 701:FWLIB/src/stm32f4xx_adc.c ****   * @param  Rank: The rank in the regular group sequencer.
 702:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter must be between 1 to 16.
 703:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
 704:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 705:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_3Cycles: Sample time equal to 3 cycles
 706:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_15Cycles: Sample time equal to 15 cycles
 707:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_28Cycles: Sample time equal to 28 cycles
 708:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_56Cycles: Sample time equal to 56 cycles	
 709:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_84Cycles: Sample time equal to 84 cycles	
 710:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_112Cycles: Sample time equal to 112 cycles	
 711:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
 712:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
 713:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 714:FWLIB/src/stm32f4xx_adc.c ****   */
 715:FWLIB/src/stm32f4xx_adc.c **** void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sam
 716:FWLIB/src/stm32f4xx_adc.c **** {
 457              		.loc 1 716 0
 458              		.cfi_startproc
 459              		@ args = 0, pretend = 0, frame = 0
 460              		@ frame_needed = 0, uses_anonymous_args = 0
 461              		@ link register save eliminated.
 462              	.LVL35:
 463 0000 70B4     		push	{r4, r5, r6}
 464              	.LCFI5:
 465              		.cfi_def_cfa_offset 12
 466              		.cfi_offset 4, -12
 467              		.cfi_offset 5, -8
 468              		.cfi_offset 6, -4
 469              	.LVL36:
 717:FWLIB/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0;
 718:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 719:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 720:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 721:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(Rank));
 722:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
 723:FWLIB/src/stm32f4xx_adc.c ****   
 724:FWLIB/src/stm32f4xx_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
 725:FWLIB/src/stm32f4xx_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 470              		.loc 1 725 0
 471 0002 0929     		cmp	r1, #9
 472 0004 0DD9     		bls	.L30
 726:FWLIB/src/stm32f4xx_adc.c ****   {
 727:FWLIB/src/stm32f4xx_adc.c ****     /* Get the old register value */
 728:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
 473              		.loc 1 728 0
 474 0006 C668     		ldr	r6, [r0, #12]
 475              	.LVL37:
 729:FWLIB/src/stm32f4xx_adc.c ****     
 730:FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 731:FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 476              		.loc 1 731 0
 477 0008 A1F10A04 		sub	r4, r1, #10
 478 000c 04EB4404 		add	r4, r4, r4, lsl #1
 479 0010 0725     		movs	r5, #7
 480 0012 A540     		lsls	r5, r5, r4
 481              	.LVL38:
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 22


 732:FWLIB/src/stm32f4xx_adc.c ****     
 733:FWLIB/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
 734:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 482              		.loc 1 734 0
 483 0014 26EA0505 		bic	r5, r6, r5
 484              	.LVL39:
 735:FWLIB/src/stm32f4xx_adc.c ****     
 736:FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 737:FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 485              		.loc 1 737 0
 486 0018 03FA04F4 		lsl	r4, r3, r4
 487              	.LVL40:
 738:FWLIB/src/stm32f4xx_adc.c ****     
 739:FWLIB/src/stm32f4xx_adc.c ****     /* Set the new sample time */
 740:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 488              		.loc 1 740 0
 489 001c 2C43     		orrs	r4, r4, r5
 490              	.LVL41:
 741:FWLIB/src/stm32f4xx_adc.c ****     
 742:FWLIB/src/stm32f4xx_adc.c ****     /* Store the new register value */
 743:FWLIB/src/stm32f4xx_adc.c ****     ADCx->SMPR1 = tmpreg1;
 491              		.loc 1 743 0
 492 001e C460     		str	r4, [r0, #12]
 493 0020 0AE0     		b	.L31
 494              	.LVL42:
 495              	.L30:
 744:FWLIB/src/stm32f4xx_adc.c ****   }
 745:FWLIB/src/stm32f4xx_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
 746:FWLIB/src/stm32f4xx_adc.c ****   {
 747:FWLIB/src/stm32f4xx_adc.c ****     /* Get the old register value */
 748:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
 496              		.loc 1 748 0
 497 0022 0669     		ldr	r6, [r0, #16]
 498              	.LVL43:
 749:FWLIB/src/stm32f4xx_adc.c ****     
 750:FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 751:FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 499              		.loc 1 751 0
 500 0024 01EB4104 		add	r4, r1, r1, lsl #1
 501 0028 0725     		movs	r5, #7
 502 002a A540     		lsls	r5, r5, r4
 503              	.LVL44:
 752:FWLIB/src/stm32f4xx_adc.c ****     
 753:FWLIB/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
 754:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 504              		.loc 1 754 0
 505 002c 26EA0505 		bic	r5, r6, r5
 506              	.LVL45:
 755:FWLIB/src/stm32f4xx_adc.c ****     
 756:FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 757:FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 507              		.loc 1 757 0
 508 0030 03FA04F4 		lsl	r4, r3, r4
 509              	.LVL46:
 758:FWLIB/src/stm32f4xx_adc.c ****     
 759:FWLIB/src/stm32f4xx_adc.c ****     /* Set the new sample time */
 760:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 23


 510              		.loc 1 760 0
 511 0034 2C43     		orrs	r4, r4, r5
 512              	.LVL47:
 761:FWLIB/src/stm32f4xx_adc.c ****     
 762:FWLIB/src/stm32f4xx_adc.c ****     /* Store the new register value */
 763:FWLIB/src/stm32f4xx_adc.c ****     ADCx->SMPR2 = tmpreg1;
 513              		.loc 1 763 0
 514 0036 0461     		str	r4, [r0, #16]
 515              	.LVL48:
 516              	.L31:
 764:FWLIB/src/stm32f4xx_adc.c ****   }
 765:FWLIB/src/stm32f4xx_adc.c ****   /* For Rank 1 to 6 */
 766:FWLIB/src/stm32f4xx_adc.c ****   if (Rank < 7)
 517              		.loc 1 766 0
 518 0038 062A     		cmp	r2, #6
 519 003a 0BD8     		bhi	.L32
 767:FWLIB/src/stm32f4xx_adc.c ****   {
 768:FWLIB/src/stm32f4xx_adc.c ****     /* Get the old register value */
 769:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR3;
 520              		.loc 1 769 0
 521 003c 446B     		ldr	r4, [r0, #52]
 522              	.LVL49:
 770:FWLIB/src/stm32f4xx_adc.c ****     
 771:FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 772:FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 523              		.loc 1 772 0
 524 003e 013A     		subs	r2, r2, #1
 525              	.LVL50:
 526 0040 02EB8202 		add	r2, r2, r2, lsl #2
 527 0044 1F23     		movs	r3, #31
 528              	.LVL51:
 529 0046 9340     		lsls	r3, r3, r2
 530              	.LVL52:
 773:FWLIB/src/stm32f4xx_adc.c ****     
 774:FWLIB/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 775:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 531              		.loc 1 775 0
 532 0048 24EA0303 		bic	r3, r4, r3
 533              	.LVL53:
 776:FWLIB/src/stm32f4xx_adc.c ****     
 777:FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 778:FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 534              		.loc 1 778 0
 535 004c 9140     		lsls	r1, r1, r2
 536              	.LVL54:
 779:FWLIB/src/stm32f4xx_adc.c ****     
 780:FWLIB/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 781:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 537              		.loc 1 781 0
 538 004e 1943     		orrs	r1, r1, r3
 539              	.LVL55:
 782:FWLIB/src/stm32f4xx_adc.c ****     
 783:FWLIB/src/stm32f4xx_adc.c ****     /* Store the new register value */
 784:FWLIB/src/stm32f4xx_adc.c ****     ADCx->SQR3 = tmpreg1;
 540              		.loc 1 784 0
 541 0050 4163     		str	r1, [r0, #52]
 542 0052 18E0     		b	.L29
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 24


 543              	.LVL56:
 544              	.L32:
 785:FWLIB/src/stm32f4xx_adc.c ****   }
 786:FWLIB/src/stm32f4xx_adc.c ****   /* For Rank 7 to 12 */
 787:FWLIB/src/stm32f4xx_adc.c ****   else if (Rank < 13)
 545              		.loc 1 787 0
 546 0054 0C2A     		cmp	r2, #12
 547 0056 0BD8     		bhi	.L34
 788:FWLIB/src/stm32f4xx_adc.c ****   {
 789:FWLIB/src/stm32f4xx_adc.c ****     /* Get the old register value */
 790:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR2;
 548              		.loc 1 790 0
 549 0058 046B     		ldr	r4, [r0, #48]
 550              	.LVL57:
 791:FWLIB/src/stm32f4xx_adc.c ****     
 792:FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 793:FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 551              		.loc 1 793 0
 552 005a 073A     		subs	r2, r2, #7
 553              	.LVL58:
 554 005c 02EB8202 		add	r2, r2, r2, lsl #2
 555 0060 1F23     		movs	r3, #31
 556              	.LVL59:
 557 0062 9340     		lsls	r3, r3, r2
 558              	.LVL60:
 794:FWLIB/src/stm32f4xx_adc.c ****     
 795:FWLIB/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 796:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 559              		.loc 1 796 0
 560 0064 24EA0303 		bic	r3, r4, r3
 561              	.LVL61:
 797:FWLIB/src/stm32f4xx_adc.c ****     
 798:FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 799:FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 562              		.loc 1 799 0
 563 0068 9140     		lsls	r1, r1, r2
 564              	.LVL62:
 800:FWLIB/src/stm32f4xx_adc.c ****     
 801:FWLIB/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 802:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 565              		.loc 1 802 0
 566 006a 1943     		orrs	r1, r1, r3
 567              	.LVL63:
 803:FWLIB/src/stm32f4xx_adc.c ****     
 804:FWLIB/src/stm32f4xx_adc.c ****     /* Store the new register value */
 805:FWLIB/src/stm32f4xx_adc.c ****     ADCx->SQR2 = tmpreg1;
 568              		.loc 1 805 0
 569 006c 0163     		str	r1, [r0, #48]
 570 006e 0AE0     		b	.L29
 571              	.LVL64:
 572              	.L34:
 806:FWLIB/src/stm32f4xx_adc.c ****   }
 807:FWLIB/src/stm32f4xx_adc.c ****   /* For Rank 13 to 16 */
 808:FWLIB/src/stm32f4xx_adc.c ****   else
 809:FWLIB/src/stm32f4xx_adc.c ****   {
 810:FWLIB/src/stm32f4xx_adc.c ****     /* Get the old register value */
 811:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR1;
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 25


 573              		.loc 1 811 0
 574 0070 C46A     		ldr	r4, [r0, #44]
 575              	.LVL65:
 812:FWLIB/src/stm32f4xx_adc.c ****     
 813:FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 814:FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 576              		.loc 1 814 0
 577 0072 0D3A     		subs	r2, r2, #13
 578              	.LVL66:
 579 0074 02EB8202 		add	r2, r2, r2, lsl #2
 580 0078 1F23     		movs	r3, #31
 581              	.LVL67:
 582 007a 9340     		lsls	r3, r3, r2
 583              	.LVL68:
 815:FWLIB/src/stm32f4xx_adc.c ****     
 816:FWLIB/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 817:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 584              		.loc 1 817 0
 585 007c 24EA0303 		bic	r3, r4, r3
 586              	.LVL69:
 818:FWLIB/src/stm32f4xx_adc.c ****     
 819:FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 820:FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 587              		.loc 1 820 0
 588 0080 9140     		lsls	r1, r1, r2
 589              	.LVL70:
 821:FWLIB/src/stm32f4xx_adc.c ****     
 822:FWLIB/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 823:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 590              		.loc 1 823 0
 591 0082 1943     		orrs	r1, r1, r3
 592              	.LVL71:
 824:FWLIB/src/stm32f4xx_adc.c ****     
 825:FWLIB/src/stm32f4xx_adc.c ****     /* Store the new register value */
 826:FWLIB/src/stm32f4xx_adc.c ****     ADCx->SQR1 = tmpreg1;
 593              		.loc 1 826 0
 594 0084 C162     		str	r1, [r0, #44]
 595              	.L29:
 827:FWLIB/src/stm32f4xx_adc.c ****   }
 828:FWLIB/src/stm32f4xx_adc.c **** }
 596              		.loc 1 828 0
 597 0086 70BC     		pop	{r4, r5, r6}
 598              	.LCFI6:
 599              		.cfi_restore 6
 600              		.cfi_restore 5
 601              		.cfi_restore 4
 602              		.cfi_def_cfa_offset 0
 603 0088 7047     		bx	lr
 604              		.cfi_endproc
 605              	.LFE134:
 607 008a 00BF     		.section	.text.ADC_SoftwareStartConv,"ax",%progbits
 608              		.align	2
 609              		.global	ADC_SoftwareStartConv
 610              		.thumb
 611              		.thumb_func
 613              	ADC_SoftwareStartConv:
 614              	.LFB135:
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 26


 829:FWLIB/src/stm32f4xx_adc.c **** 
 830:FWLIB/src/stm32f4xx_adc.c **** /**
 831:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables the selected ADC software start conversion of the regular channels.
 832:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 833:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 834:FWLIB/src/stm32f4xx_adc.c ****   */
 835:FWLIB/src/stm32f4xx_adc.c **** void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
 836:FWLIB/src/stm32f4xx_adc.c **** {
 615              		.loc 1 836 0
 616              		.cfi_startproc
 617              		@ args = 0, pretend = 0, frame = 0
 618              		@ frame_needed = 0, uses_anonymous_args = 0
 619              		@ link register save eliminated.
 620              	.LVL72:
 837:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 838:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 839:FWLIB/src/stm32f4xx_adc.c ****   
 840:FWLIB/src/stm32f4xx_adc.c ****   /* Enable the selected ADC conversion for regular group */
 841:FWLIB/src/stm32f4xx_adc.c ****   ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 621              		.loc 1 841 0
 622 0000 8368     		ldr	r3, [r0, #8]
 623 0002 43F08043 		orr	r3, r3, #1073741824
 624 0006 8360     		str	r3, [r0, #8]
 625 0008 7047     		bx	lr
 626              		.cfi_endproc
 627              	.LFE135:
 629 000a 00BF     		.section	.text.ADC_GetSoftwareStartConvStatus,"ax",%progbits
 630              		.align	2
 631              		.global	ADC_GetSoftwareStartConvStatus
 632              		.thumb
 633              		.thumb_func
 635              	ADC_GetSoftwareStartConvStatus:
 636              	.LFB136:
 842:FWLIB/src/stm32f4xx_adc.c **** }
 843:FWLIB/src/stm32f4xx_adc.c **** 
 844:FWLIB/src/stm32f4xx_adc.c **** /**
 845:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Gets the selected ADC Software start regular conversion Status.
 846:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 847:FWLIB/src/stm32f4xx_adc.c ****   * @retval The new state of ADC software start conversion (SET or RESET).
 848:FWLIB/src/stm32f4xx_adc.c ****   */
 849:FWLIB/src/stm32f4xx_adc.c **** FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
 850:FWLIB/src/stm32f4xx_adc.c **** {
 637              		.loc 1 850 0
 638              		.cfi_startproc
 639              		@ args = 0, pretend = 0, frame = 0
 640              		@ frame_needed = 0, uses_anonymous_args = 0
 641              		@ link register save eliminated.
 642              	.LVL73:
 851:FWLIB/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
 852:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 853:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 854:FWLIB/src/stm32f4xx_adc.c ****   
 855:FWLIB/src/stm32f4xx_adc.c ****   /* Check the status of SWSTART bit */
 856:FWLIB/src/stm32f4xx_adc.c ****   if ((ADCx->CR2 & ADC_CR2_SWSTART) != (uint32_t)RESET)
 643              		.loc 1 856 0
 644 0000 8368     		ldr	r3, [r0, #8]
 645 0002 13F0804F 		tst	r3, #1073741824
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 27


 646 0006 01D0     		beq	.L39
 857:FWLIB/src/stm32f4xx_adc.c ****   {
 858:FWLIB/src/stm32f4xx_adc.c ****     /* SWSTART bit is set */
 859:FWLIB/src/stm32f4xx_adc.c ****     bitstatus = SET;
 647              		.loc 1 859 0
 648 0008 0120     		movs	r0, #1
 649              	.LVL74:
 650 000a 7047     		bx	lr
 651              	.LVL75:
 652              	.L39:
 860:FWLIB/src/stm32f4xx_adc.c ****   }
 861:FWLIB/src/stm32f4xx_adc.c ****   else
 862:FWLIB/src/stm32f4xx_adc.c ****   {
 863:FWLIB/src/stm32f4xx_adc.c ****     /* SWSTART bit is reset */
 864:FWLIB/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 653              		.loc 1 864 0
 654 000c 0020     		movs	r0, #0
 655              	.LVL76:
 865:FWLIB/src/stm32f4xx_adc.c ****   }
 866:FWLIB/src/stm32f4xx_adc.c ****   
 867:FWLIB/src/stm32f4xx_adc.c ****   /* Return the SWSTART bit status */
 868:FWLIB/src/stm32f4xx_adc.c ****   return  bitstatus;
 869:FWLIB/src/stm32f4xx_adc.c **** }
 656              		.loc 1 869 0
 657 000e 7047     		bx	lr
 658              		.cfi_endproc
 659              	.LFE136:
 661              		.section	.text.ADC_EOCOnEachRegularChannelCmd,"ax",%progbits
 662              		.align	2
 663              		.global	ADC_EOCOnEachRegularChannelCmd
 664              		.thumb
 665              		.thumb_func
 667              	ADC_EOCOnEachRegularChannelCmd:
 668              	.LFB137:
 870:FWLIB/src/stm32f4xx_adc.c **** 
 871:FWLIB/src/stm32f4xx_adc.c **** 
 872:FWLIB/src/stm32f4xx_adc.c **** /**
 873:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the EOC on each regular channel conversion
 874:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 875:FWLIB/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC EOC flag rising
 876:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 877:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 878:FWLIB/src/stm32f4xx_adc.c ****   */
 879:FWLIB/src/stm32f4xx_adc.c **** void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 880:FWLIB/src/stm32f4xx_adc.c **** {
 669              		.loc 1 880 0
 670              		.cfi_startproc
 671              		@ args = 0, pretend = 0, frame = 0
 672              		@ frame_needed = 0, uses_anonymous_args = 0
 673              		@ link register save eliminated.
 674              	.LVL77:
 881:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 882:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 883:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 884:FWLIB/src/stm32f4xx_adc.c ****   
 885:FWLIB/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 675              		.loc 1 885 0
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 28


 676 0000 21B1     		cbz	r1, .L41
 886:FWLIB/src/stm32f4xx_adc.c ****   {
 887:FWLIB/src/stm32f4xx_adc.c ****     /* Enable the selected ADC EOC rising on each regular channel conversion */
 888:FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 677              		.loc 1 888 0
 678 0002 8368     		ldr	r3, [r0, #8]
 679 0004 43F48063 		orr	r3, r3, #1024
 680 0008 8360     		str	r3, [r0, #8]
 681 000a 7047     		bx	lr
 682              	.L41:
 889:FWLIB/src/stm32f4xx_adc.c ****   }
 890:FWLIB/src/stm32f4xx_adc.c ****   else
 891:FWLIB/src/stm32f4xx_adc.c ****   {
 892:FWLIB/src/stm32f4xx_adc.c ****     /* Disable the selected ADC EOC rising on each regular channel conversion */
 893:FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 683              		.loc 1 893 0
 684 000c 8368     		ldr	r3, [r0, #8]
 685 000e 23F48063 		bic	r3, r3, #1024
 686 0012 8360     		str	r3, [r0, #8]
 687 0014 7047     		bx	lr
 688              		.cfi_endproc
 689              	.LFE137:
 691 0016 00BF     		.section	.text.ADC_ContinuousModeCmd,"ax",%progbits
 692              		.align	2
 693              		.global	ADC_ContinuousModeCmd
 694              		.thumb
 695              		.thumb_func
 697              	ADC_ContinuousModeCmd:
 698              	.LFB138:
 894:FWLIB/src/stm32f4xx_adc.c ****   }
 895:FWLIB/src/stm32f4xx_adc.c **** }
 896:FWLIB/src/stm32f4xx_adc.c **** 
 897:FWLIB/src/stm32f4xx_adc.c **** /**
 898:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC continuous conversion mode 
 899:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 900:FWLIB/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC continuous conversion mode
 901:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 902:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 903:FWLIB/src/stm32f4xx_adc.c ****   */
 904:FWLIB/src/stm32f4xx_adc.c **** void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 905:FWLIB/src/stm32f4xx_adc.c **** {
 699              		.loc 1 905 0
 700              		.cfi_startproc
 701              		@ args = 0, pretend = 0, frame = 0
 702              		@ frame_needed = 0, uses_anonymous_args = 0
 703              		@ link register save eliminated.
 704              	.LVL78:
 906:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 907:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 908:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 909:FWLIB/src/stm32f4xx_adc.c ****   
 910:FWLIB/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 705              		.loc 1 910 0
 706 0000 21B1     		cbz	r1, .L44
 911:FWLIB/src/stm32f4xx_adc.c ****   {
 912:FWLIB/src/stm32f4xx_adc.c ****     /* Enable the selected ADC continuous conversion mode */
 913:FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 29


 707              		.loc 1 913 0
 708 0002 8368     		ldr	r3, [r0, #8]
 709 0004 43F00203 		orr	r3, r3, #2
 710 0008 8360     		str	r3, [r0, #8]
 711 000a 7047     		bx	lr
 712              	.L44:
 914:FWLIB/src/stm32f4xx_adc.c ****   }
 915:FWLIB/src/stm32f4xx_adc.c ****   else
 916:FWLIB/src/stm32f4xx_adc.c ****   {
 917:FWLIB/src/stm32f4xx_adc.c ****     /* Disable the selected ADC continuous conversion mode */
 918:FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 713              		.loc 1 918 0
 714 000c 8368     		ldr	r3, [r0, #8]
 715 000e 23F00203 		bic	r3, r3, #2
 716 0012 8360     		str	r3, [r0, #8]
 717 0014 7047     		bx	lr
 718              		.cfi_endproc
 719              	.LFE138:
 721 0016 00BF     		.section	.text.ADC_DiscModeChannelCountConfig,"ax",%progbits
 722              		.align	2
 723              		.global	ADC_DiscModeChannelCountConfig
 724              		.thumb
 725              		.thumb_func
 727              	ADC_DiscModeChannelCountConfig:
 728              	.LFB139:
 919:FWLIB/src/stm32f4xx_adc.c ****   }
 920:FWLIB/src/stm32f4xx_adc.c **** }
 921:FWLIB/src/stm32f4xx_adc.c **** 
 922:FWLIB/src/stm32f4xx_adc.c **** /**
 923:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Configures the discontinuous mode for the selected ADC regular group 
 924:FWLIB/src/stm32f4xx_adc.c ****   *         channel.
 925:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 926:FWLIB/src/stm32f4xx_adc.c ****   * @param  Number: specifies the discontinuous mode regular channel count value.
 927:FWLIB/src/stm32f4xx_adc.c ****   *          This number must be between 1 and 8.
 928:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 929:FWLIB/src/stm32f4xx_adc.c ****   */
 930:FWLIB/src/stm32f4xx_adc.c **** void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
 931:FWLIB/src/stm32f4xx_adc.c **** {
 729              		.loc 1 931 0
 730              		.cfi_startproc
 731              		@ args = 0, pretend = 0, frame = 0
 732              		@ frame_needed = 0, uses_anonymous_args = 0
 733              		@ link register save eliminated.
 734              	.LVL79:
 932:FWLIB/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 933:FWLIB/src/stm32f4xx_adc.c ****   uint32_t tmpreg2 = 0;
 934:FWLIB/src/stm32f4xx_adc.c ****   
 935:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 936:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 937:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
 938:FWLIB/src/stm32f4xx_adc.c ****   
 939:FWLIB/src/stm32f4xx_adc.c ****   /* Get the old register value */
 940:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR1;
 735              		.loc 1 940 0
 736 0000 4368     		ldr	r3, [r0, #4]
 737              	.LVL80:
 941:FWLIB/src/stm32f4xx_adc.c ****   
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 30


 942:FWLIB/src/stm32f4xx_adc.c ****   /* Clear the old discontinuous mode channel count */
 943:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 &= CR1_DISCNUM_RESET;
 738              		.loc 1 943 0
 739 0002 23F46043 		bic	r3, r3, #57344
 740              	.LVL81:
 944:FWLIB/src/stm32f4xx_adc.c ****   
 945:FWLIB/src/stm32f4xx_adc.c ****   /* Set the discontinuous mode channel count */
 946:FWLIB/src/stm32f4xx_adc.c ****   tmpreg2 = Number - 1;
 741              		.loc 1 946 0
 742 0006 0139     		subs	r1, r1, #1
 743              	.LVL82:
 947:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2 << 13;
 744              		.loc 1 947 0
 745 0008 43EA4133 		orr	r3, r3, r1, lsl #13
 746              	.LVL83:
 948:FWLIB/src/stm32f4xx_adc.c ****   
 949:FWLIB/src/stm32f4xx_adc.c ****   /* Store the new register value */
 950:FWLIB/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg1;
 747              		.loc 1 950 0
 748 000c 4360     		str	r3, [r0, #4]
 749 000e 7047     		bx	lr
 750              		.cfi_endproc
 751              	.LFE139:
 753              		.section	.text.ADC_DiscModeCmd,"ax",%progbits
 754              		.align	2
 755              		.global	ADC_DiscModeCmd
 756              		.thumb
 757              		.thumb_func
 759              	ADC_DiscModeCmd:
 760              	.LFB140:
 951:FWLIB/src/stm32f4xx_adc.c **** }
 952:FWLIB/src/stm32f4xx_adc.c **** 
 953:FWLIB/src/stm32f4xx_adc.c **** /**
 954:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the discontinuous mode on regular group channel 
 955:FWLIB/src/stm32f4xx_adc.c ****   *         for the specified ADC
 956:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 957:FWLIB/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode on 
 958:FWLIB/src/stm32f4xx_adc.c ****   *         regular group channel.
 959:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 960:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 961:FWLIB/src/stm32f4xx_adc.c ****   */
 962:FWLIB/src/stm32f4xx_adc.c **** void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 963:FWLIB/src/stm32f4xx_adc.c **** {
 761              		.loc 1 963 0
 762              		.cfi_startproc
 763              		@ args = 0, pretend = 0, frame = 0
 764              		@ frame_needed = 0, uses_anonymous_args = 0
 765              		@ link register save eliminated.
 766              	.LVL84:
 964:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 965:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 966:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 967:FWLIB/src/stm32f4xx_adc.c ****   
 968:FWLIB/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 767              		.loc 1 968 0
 768 0000 21B1     		cbz	r1, .L48
 969:FWLIB/src/stm32f4xx_adc.c ****   {
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 31


 970:FWLIB/src/stm32f4xx_adc.c ****     /* Enable the selected ADC regular discontinuous mode */
 971:FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 769              		.loc 1 971 0
 770 0002 4368     		ldr	r3, [r0, #4]
 771 0004 43F40063 		orr	r3, r3, #2048
 772 0008 4360     		str	r3, [r0, #4]
 773 000a 7047     		bx	lr
 774              	.L48:
 972:FWLIB/src/stm32f4xx_adc.c ****   }
 973:FWLIB/src/stm32f4xx_adc.c ****   else
 974:FWLIB/src/stm32f4xx_adc.c ****   {
 975:FWLIB/src/stm32f4xx_adc.c ****     /* Disable the selected ADC regular discontinuous mode */
 976:FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 775              		.loc 1 976 0
 776 000c 4368     		ldr	r3, [r0, #4]
 777 000e 23F40063 		bic	r3, r3, #2048
 778 0012 4360     		str	r3, [r0, #4]
 779 0014 7047     		bx	lr
 780              		.cfi_endproc
 781              	.LFE140:
 783 0016 00BF     		.section	.text.ADC_GetConversionValue,"ax",%progbits
 784              		.align	2
 785              		.global	ADC_GetConversionValue
 786              		.thumb
 787              		.thumb_func
 789              	ADC_GetConversionValue:
 790              	.LFB141:
 977:FWLIB/src/stm32f4xx_adc.c ****   }
 978:FWLIB/src/stm32f4xx_adc.c **** }
 979:FWLIB/src/stm32f4xx_adc.c **** 
 980:FWLIB/src/stm32f4xx_adc.c **** /**
 981:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Returns the last ADCx conversion result data for regular channel.
 982:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 983:FWLIB/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
 984:FWLIB/src/stm32f4xx_adc.c ****   */
 985:FWLIB/src/stm32f4xx_adc.c **** uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
 986:FWLIB/src/stm32f4xx_adc.c **** {
 791              		.loc 1 986 0
 792              		.cfi_startproc
 793              		@ args = 0, pretend = 0, frame = 0
 794              		@ frame_needed = 0, uses_anonymous_args = 0
 795              		@ link register save eliminated.
 796              	.LVL85:
 987:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 988:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 989:FWLIB/src/stm32f4xx_adc.c ****   
 990:FWLIB/src/stm32f4xx_adc.c ****   /* Return the selected ADC conversion value */
 991:FWLIB/src/stm32f4xx_adc.c ****   return (uint16_t) ADCx->DR;
 797              		.loc 1 991 0
 798 0000 C06C     		ldr	r0, [r0, #76]
 799              	.LVL86:
 992:FWLIB/src/stm32f4xx_adc.c **** }
 800              		.loc 1 992 0
 801 0002 80B2     		uxth	r0, r0
 802 0004 7047     		bx	lr
 803              		.cfi_endproc
 804              	.LFE141:
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 32


 806 0006 00BF     		.section	.text.ADC_GetMultiModeConversionValue,"ax",%progbits
 807              		.align	2
 808              		.global	ADC_GetMultiModeConversionValue
 809              		.thumb
 810              		.thumb_func
 812              	ADC_GetMultiModeConversionValue:
 813              	.LFB142:
 993:FWLIB/src/stm32f4xx_adc.c **** 
 994:FWLIB/src/stm32f4xx_adc.c **** /**
 995:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Returns the last ADC1, ADC2 and ADC3 regular conversions results 
 996:FWLIB/src/stm32f4xx_adc.c ****   *         data in the selected multi mode.
 997:FWLIB/src/stm32f4xx_adc.c ****   * @param  None  
 998:FWLIB/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
 999:FWLIB/src/stm32f4xx_adc.c ****   * @note   In dual mode, the value returned by this function is as following
1000:FWLIB/src/stm32f4xx_adc.c ****   *           Data[15:0] : these bits contain the regular data of ADC1.
1001:FWLIB/src/stm32f4xx_adc.c ****   *           Data[31:16]: these bits contain the regular data of ADC2.
1002:FWLIB/src/stm32f4xx_adc.c ****   * @note   In triple mode, the value returned by this function is as following
1003:FWLIB/src/stm32f4xx_adc.c ****   *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2
1004:FWLIB/src/stm32f4xx_adc.c ****   *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3
1005:FWLIB/src/stm32f4xx_adc.c ****   */
1006:FWLIB/src/stm32f4xx_adc.c **** uint32_t ADC_GetMultiModeConversionValue(void)
1007:FWLIB/src/stm32f4xx_adc.c **** {
 814              		.loc 1 1007 0
 815              		.cfi_startproc
 816              		@ args = 0, pretend = 0, frame = 0
 817              		@ frame_needed = 0, uses_anonymous_args = 0
 818              		@ link register save eliminated.
1008:FWLIB/src/stm32f4xx_adc.c ****   /* Return the multi mode conversion value */
1009:FWLIB/src/stm32f4xx_adc.c ****   return (*(__IO uint32_t *) CDR_ADDRESS);
 819              		.loc 1 1009 0
 820 0000 014B     		ldr	r3, .L52
 821 0002 1868     		ldr	r0, [r3]
1010:FWLIB/src/stm32f4xx_adc.c **** }
 822              		.loc 1 1010 0
 823 0004 7047     		bx	lr
 824              	.L53:
 825 0006 00BF     		.align	2
 826              	.L52:
 827 0008 08230140 		.word	1073816328
 828              		.cfi_endproc
 829              	.LFE142:
 831              		.section	.text.ADC_DMACmd,"ax",%progbits
 832              		.align	2
 833              		.global	ADC_DMACmd
 834              		.thumb
 835              		.thumb_func
 837              	ADC_DMACmd:
 838              	.LFB143:
1011:FWLIB/src/stm32f4xx_adc.c **** /**
1012:FWLIB/src/stm32f4xx_adc.c ****   * @}
1013:FWLIB/src/stm32f4xx_adc.c ****   */
1014:FWLIB/src/stm32f4xx_adc.c **** 
1015:FWLIB/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group5 Regular Channels DMA Configuration functions
1016:FWLIB/src/stm32f4xx_adc.c ****  *  @brief   Regular Channels DMA Configuration functions 
1017:FWLIB/src/stm32f4xx_adc.c ****  *
1018:FWLIB/src/stm32f4xx_adc.c **** @verbatim   
1019:FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 33


1020:FWLIB/src/stm32f4xx_adc.c ****             ##### Regular Channels DMA Configuration functions #####
1021:FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================  
1022:FWLIB/src/stm32f4xx_adc.c ****     [..] This section provides functions allowing to configure the DMA for ADC 
1023:FWLIB/src/stm32f4xx_adc.c ****          regular channels.
1024:FWLIB/src/stm32f4xx_adc.c ****          Since converted regular channel values are stored into a unique data 
1025:FWLIB/src/stm32f4xx_adc.c ****          register, it is useful to use DMA for conversion of more than one regular 
1026:FWLIB/src/stm32f4xx_adc.c ****          channel. This avoids the loss of the data already stored in the ADC 
1027:FWLIB/src/stm32f4xx_adc.c ****          Data register.   
1028:FWLIB/src/stm32f4xx_adc.c ****          When the DMA mode is enabled (using the ADC_DMACmd() function), after each
1029:FWLIB/src/stm32f4xx_adc.c ****          conversion of a regular channel, a DMA request is generated.
1030:FWLIB/src/stm32f4xx_adc.c ****     [..] Depending on the "DMA disable selection for Independent ADC mode" 
1031:FWLIB/src/stm32f4xx_adc.c ****          configuration (using the ADC_DMARequestAfterLastTransferCmd() function), 
1032:FWLIB/src/stm32f4xx_adc.c ****          at the end of the last DMA transfer, two possibilities are allowed:
1033:FWLIB/src/stm32f4xx_adc.c ****       (+) No new DMA request is issued to the DMA controller (feature DISABLED) 
1034:FWLIB/src/stm32f4xx_adc.c ****       (+) Requests can continue to be generated (feature ENABLED).  
1035:FWLIB/src/stm32f4xx_adc.c ****     [..] Depending on the "DMA disable selection for multi ADC mode" configuration 
1036:FWLIB/src/stm32f4xx_adc.c ****          (using the void ADC_MultiModeDMARequestAfterLastTransferCmd() function), 
1037:FWLIB/src/stm32f4xx_adc.c ****          at the end of the last DMA transfer, two possibilities are allowed:
1038:FWLIB/src/stm32f4xx_adc.c ****         (+) No new DMA request is issued to the DMA controller (feature DISABLED) 
1039:FWLIB/src/stm32f4xx_adc.c ****         (+) Requests can continue to be generated (feature ENABLED).
1040:FWLIB/src/stm32f4xx_adc.c **** 
1041:FWLIB/src/stm32f4xx_adc.c **** @endverbatim
1042:FWLIB/src/stm32f4xx_adc.c ****   * @{
1043:FWLIB/src/stm32f4xx_adc.c ****   */
1044:FWLIB/src/stm32f4xx_adc.c ****   
1045:FWLIB/src/stm32f4xx_adc.c ****  /**
1046:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC DMA request.
1047:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1048:FWLIB/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA transfer.
1049:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1050:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1051:FWLIB/src/stm32f4xx_adc.c ****   */
1052:FWLIB/src/stm32f4xx_adc.c **** void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1053:FWLIB/src/stm32f4xx_adc.c **** {
 839              		.loc 1 1053 0
 840              		.cfi_startproc
 841              		@ args = 0, pretend = 0, frame = 0
 842              		@ frame_needed = 0, uses_anonymous_args = 0
 843              		@ link register save eliminated.
 844              	.LVL87:
1054:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1055:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1056:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1057:FWLIB/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 845              		.loc 1 1057 0
 846 0000 21B1     		cbz	r1, .L55
1058:FWLIB/src/stm32f4xx_adc.c ****   {
1059:FWLIB/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request */
1060:FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 847              		.loc 1 1060 0
 848 0002 8368     		ldr	r3, [r0, #8]
 849 0004 43F48073 		orr	r3, r3, #256
 850 0008 8360     		str	r3, [r0, #8]
 851 000a 7047     		bx	lr
 852              	.L55:
1061:FWLIB/src/stm32f4xx_adc.c ****   }
1062:FWLIB/src/stm32f4xx_adc.c ****   else
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 34


1063:FWLIB/src/stm32f4xx_adc.c ****   {
1064:FWLIB/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request */
1065:FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 853              		.loc 1 1065 0
 854 000c 8368     		ldr	r3, [r0, #8]
 855 000e 23F48073 		bic	r3, r3, #256
 856 0012 8360     		str	r3, [r0, #8]
 857 0014 7047     		bx	lr
 858              		.cfi_endproc
 859              	.LFE143:
 861 0016 00BF     		.section	.text.ADC_DMARequestAfterLastTransferCmd,"ax",%progbits
 862              		.align	2
 863              		.global	ADC_DMARequestAfterLastTransferCmd
 864              		.thumb
 865              		.thumb_func
 867              	ADC_DMARequestAfterLastTransferCmd:
 868              	.LFB144:
1066:FWLIB/src/stm32f4xx_adc.c ****   }
1067:FWLIB/src/stm32f4xx_adc.c **** }
1068:FWLIB/src/stm32f4xx_adc.c **** 
1069:FWLIB/src/stm32f4xx_adc.c **** /**
1070:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC DMA request after last transfer (Single-ADC mode)  
1071:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1072:FWLIB/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA request after last transfer.
1073:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1074:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1075:FWLIB/src/stm32f4xx_adc.c ****   */
1076:FWLIB/src/stm32f4xx_adc.c **** void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1077:FWLIB/src/stm32f4xx_adc.c **** {
 869              		.loc 1 1077 0
 870              		.cfi_startproc
 871              		@ args = 0, pretend = 0, frame = 0
 872              		@ frame_needed = 0, uses_anonymous_args = 0
 873              		@ link register save eliminated.
 874              	.LVL88:
1078:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1079:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1080:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1081:FWLIB/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 875              		.loc 1 1081 0
 876 0000 21B1     		cbz	r1, .L58
1082:FWLIB/src/stm32f4xx_adc.c ****   {
1083:FWLIB/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request after last transfer */
1084:FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 877              		.loc 1 1084 0
 878 0002 8368     		ldr	r3, [r0, #8]
 879 0004 43F40073 		orr	r3, r3, #512
 880 0008 8360     		str	r3, [r0, #8]
 881 000a 7047     		bx	lr
 882              	.L58:
1085:FWLIB/src/stm32f4xx_adc.c ****   }
1086:FWLIB/src/stm32f4xx_adc.c ****   else
1087:FWLIB/src/stm32f4xx_adc.c ****   {
1088:FWLIB/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request after last transfer */
1089:FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 883              		.loc 1 1089 0
 884 000c 8368     		ldr	r3, [r0, #8]
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 35


 885 000e 23F40073 		bic	r3, r3, #512
 886 0012 8360     		str	r3, [r0, #8]
 887 0014 7047     		bx	lr
 888              		.cfi_endproc
 889              	.LFE144:
 891 0016 00BF     		.section	.text.ADC_MultiModeDMARequestAfterLastTransferCmd,"ax",%progbits
 892              		.align	2
 893              		.global	ADC_MultiModeDMARequestAfterLastTransferCmd
 894              		.thumb
 895              		.thumb_func
 897              	ADC_MultiModeDMARequestAfterLastTransferCmd:
 898              	.LFB145:
1090:FWLIB/src/stm32f4xx_adc.c ****   }
1091:FWLIB/src/stm32f4xx_adc.c **** }
1092:FWLIB/src/stm32f4xx_adc.c **** 
1093:FWLIB/src/stm32f4xx_adc.c **** /**
1094:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC DMA request after last transfer in multi ADC mode       
1095:FWLIB/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA request after last transfer.
1096:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1097:FWLIB/src/stm32f4xx_adc.c ****   * @note   if Enabled, DMA requests are issued as long as data are converted and 
1098:FWLIB/src/stm32f4xx_adc.c ****   *         DMA mode for multi ADC mode (selected using ADC_CommonInit() function 
1099:FWLIB/src/stm32f4xx_adc.c ****   *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
1100:FWLIB/src/stm32f4xx_adc.c ****   *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
1101:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1102:FWLIB/src/stm32f4xx_adc.c ****   */
1103:FWLIB/src/stm32f4xx_adc.c **** void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
1104:FWLIB/src/stm32f4xx_adc.c **** {
 899              		.loc 1 1104 0
 900              		.cfi_startproc
 901              		@ args = 0, pretend = 0, frame = 0
 902              		@ frame_needed = 0, uses_anonymous_args = 0
 903              		@ link register save eliminated.
 904              	.LVL89:
1105:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1106:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1107:FWLIB/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 905              		.loc 1 1107 0
 906 0000 28B1     		cbz	r0, .L61
1108:FWLIB/src/stm32f4xx_adc.c ****   {
1109:FWLIB/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request after last transfer */
1110:FWLIB/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 907              		.loc 1 1110 0
 908 0002 064A     		ldr	r2, .L63
 909 0004 5368     		ldr	r3, [r2, #4]
 910 0006 43F40053 		orr	r3, r3, #8192
 911 000a 5360     		str	r3, [r2, #4]
 912 000c 7047     		bx	lr
 913              	.L61:
1111:FWLIB/src/stm32f4xx_adc.c ****   }
1112:FWLIB/src/stm32f4xx_adc.c ****   else
1113:FWLIB/src/stm32f4xx_adc.c ****   {
1114:FWLIB/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request after last transfer */
1115:FWLIB/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 914              		.loc 1 1115 0
 915 000e 034A     		ldr	r2, .L63
 916 0010 5368     		ldr	r3, [r2, #4]
 917 0012 23F40053 		bic	r3, r3, #8192
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 36


 918 0016 5360     		str	r3, [r2, #4]
 919 0018 7047     		bx	lr
 920              	.L64:
 921 001a 00BF     		.align	2
 922              	.L63:
 923 001c 00230140 		.word	1073816320
 924              		.cfi_endproc
 925              	.LFE145:
 927              		.section	.text.ADC_InjectedChannelConfig,"ax",%progbits
 928              		.align	2
 929              		.global	ADC_InjectedChannelConfig
 930              		.thumb
 931              		.thumb_func
 933              	ADC_InjectedChannelConfig:
 934              	.LFB146:
1116:FWLIB/src/stm32f4xx_adc.c ****   }
1117:FWLIB/src/stm32f4xx_adc.c **** }
1118:FWLIB/src/stm32f4xx_adc.c **** /**
1119:FWLIB/src/stm32f4xx_adc.c ****   * @}
1120:FWLIB/src/stm32f4xx_adc.c ****   */
1121:FWLIB/src/stm32f4xx_adc.c **** 
1122:FWLIB/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group6 Injected channels Configuration functions
1123:FWLIB/src/stm32f4xx_adc.c ****  *  @brief   Injected channels Configuration functions 
1124:FWLIB/src/stm32f4xx_adc.c ****  *
1125:FWLIB/src/stm32f4xx_adc.c **** @verbatim   
1126:FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================
1127:FWLIB/src/stm32f4xx_adc.c ****               ##### Injected channels Configuration functions #####
1128:FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================  
1129:FWLIB/src/stm32f4xx_adc.c **** 
1130:FWLIB/src/stm32f4xx_adc.c ****     [..] This section provide functions allowing to configure the ADC Injected channels,
1131:FWLIB/src/stm32f4xx_adc.c ****          it is composed of 2 sub sections : 
1132:FWLIB/src/stm32f4xx_adc.c ****     
1133:FWLIB/src/stm32f4xx_adc.c ****       (#) Configuration functions for Injected channels: This subsection provides 
1134:FWLIB/src/stm32f4xx_adc.c ****           functions allowing to configure the ADC injected channels :    
1135:FWLIB/src/stm32f4xx_adc.c ****         (++) Configure the rank in the injected group sequencer for each channel
1136:FWLIB/src/stm32f4xx_adc.c ****         (++) Configure the sampling time for each channel    
1137:FWLIB/src/stm32f4xx_adc.c ****         (++) Activate the Auto injected Mode  
1138:FWLIB/src/stm32f4xx_adc.c ****         (++) Activate the Discontinuous Mode 
1139:FWLIB/src/stm32f4xx_adc.c ****         (++) scan mode activation  
1140:FWLIB/src/stm32f4xx_adc.c ****         (++) External/software trigger source   
1141:FWLIB/src/stm32f4xx_adc.c ****         (++) External trigger edge 
1142:FWLIB/src/stm32f4xx_adc.c ****         (++) injected channels sequencer.
1143:FWLIB/src/stm32f4xx_adc.c ****     
1144:FWLIB/src/stm32f4xx_adc.c ****       (#) Get the Specified Injected channel conversion data: This subsection 
1145:FWLIB/src/stm32f4xx_adc.c ****           provides an important function in the ADC peripheral since it returns the 
1146:FWLIB/src/stm32f4xx_adc.c ****           converted data of the specific injected channel.
1147:FWLIB/src/stm32f4xx_adc.c **** 
1148:FWLIB/src/stm32f4xx_adc.c **** @endverbatim
1149:FWLIB/src/stm32f4xx_adc.c ****   * @{
1150:FWLIB/src/stm32f4xx_adc.c ****   */ 
1151:FWLIB/src/stm32f4xx_adc.c **** /**
1152:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Configures for the selected ADC injected channel its corresponding
1153:FWLIB/src/stm32f4xx_adc.c ****   *         rank in the sequencer and its sample time.
1154:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1155:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
1156:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1157:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 37


1158:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
1159:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
1160:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
1161:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
1162:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
1163:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
1164:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
1165:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
1166:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
1167:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
1168:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
1169:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
1170:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
1171:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
1172:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
1173:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
1174:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
1175:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected                       
1176:FWLIB/src/stm32f4xx_adc.c ****   * @param  Rank: The rank in the injected group sequencer. 
1177:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter must be between 1 to 4.
1178:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
1179:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1180:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_3Cycles: Sample time equal to 3 cycles
1181:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_15Cycles: Sample time equal to 15 cycles
1182:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_28Cycles: Sample time equal to 28 cycles
1183:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_56Cycles: Sample time equal to 56 cycles	
1184:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_84Cycles: Sample time equal to 84 cycles	
1185:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_112Cycles: Sample time equal to 112 cycles	
1186:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
1187:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
1188:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1189:FWLIB/src/stm32f4xx_adc.c ****   */
1190:FWLIB/src/stm32f4xx_adc.c **** void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sa
1191:FWLIB/src/stm32f4xx_adc.c **** {
 935              		.loc 1 1191 0
 936              		.cfi_startproc
 937              		@ args = 0, pretend = 0, frame = 0
 938              		@ frame_needed = 0, uses_anonymous_args = 0
 939              		@ link register save eliminated.
 940              	.LVL90:
 941 0000 70B4     		push	{r4, r5, r6}
 942              	.LCFI7:
 943              		.cfi_def_cfa_offset 12
 944              		.cfi_offset 4, -12
 945              		.cfi_offset 5, -8
 946              		.cfi_offset 6, -4
 947              	.LVL91:
1192:FWLIB/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
1193:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1194:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1195:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
1196:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_RANK(Rank));
1197:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
1198:FWLIB/src/stm32f4xx_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
1199:FWLIB/src/stm32f4xx_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 948              		.loc 1 1199 0
 949 0002 0929     		cmp	r1, #9
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 38


 950 0004 0CD9     		bls	.L66
1200:FWLIB/src/stm32f4xx_adc.c ****   {
1201:FWLIB/src/stm32f4xx_adc.c ****     /* Get the old register value */
1202:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
 951              		.loc 1 1202 0
 952 0006 C668     		ldr	r6, [r0, #12]
 953              	.LVL92:
1203:FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
1204:FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 954              		.loc 1 1204 0
 955 0008 A1F10A04 		sub	r4, r1, #10
 956 000c 04EB4404 		add	r4, r4, r4, lsl #1
 957 0010 0725     		movs	r5, #7
 958 0012 A540     		lsls	r5, r5, r4
 959              	.LVL93:
1205:FWLIB/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
1206:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 960              		.loc 1 1206 0
 961 0014 26EA0505 		bic	r5, r6, r5
 962              	.LVL94:
1207:FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
1208:FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 963              		.loc 1 1208 0
 964 0018 A340     		lsls	r3, r3, r4
 965              	.LVL95:
1209:FWLIB/src/stm32f4xx_adc.c ****     /* Set the new sample time */
1210:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 966              		.loc 1 1210 0
 967 001a 2B43     		orrs	r3, r3, r5
 968              	.LVL96:
1211:FWLIB/src/stm32f4xx_adc.c ****     /* Store the new register value */
1212:FWLIB/src/stm32f4xx_adc.c ****     ADCx->SMPR1 = tmpreg1;
 969              		.loc 1 1212 0
 970 001c C360     		str	r3, [r0, #12]
 971 001e 09E0     		b	.L67
 972              	.LVL97:
 973              	.L66:
1213:FWLIB/src/stm32f4xx_adc.c ****   }
1214:FWLIB/src/stm32f4xx_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
1215:FWLIB/src/stm32f4xx_adc.c ****   {
1216:FWLIB/src/stm32f4xx_adc.c ****     /* Get the old register value */
1217:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
 974              		.loc 1 1217 0
 975 0020 0569     		ldr	r5, [r0, #16]
 976              	.LVL98:
1218:FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
1219:FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 977              		.loc 1 1219 0
 978 0022 01EB4106 		add	r6, r1, r1, lsl #1
 979 0026 0724     		movs	r4, #7
 980 0028 B440     		lsls	r4, r4, r6
 981              	.LVL99:
1220:FWLIB/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
1221:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 982              		.loc 1 1221 0
 983 002a 25EA0404 		bic	r4, r5, r4
 984              	.LVL100:
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 39


1222:FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
1223:FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 985              		.loc 1 1223 0
 986 002e B340     		lsls	r3, r3, r6
 987              	.LVL101:
1224:FWLIB/src/stm32f4xx_adc.c ****     /* Set the new sample time */
1225:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 988              		.loc 1 1225 0
 989 0030 2343     		orrs	r3, r3, r4
 990              	.LVL102:
1226:FWLIB/src/stm32f4xx_adc.c ****     /* Store the new register value */
1227:FWLIB/src/stm32f4xx_adc.c ****     ADCx->SMPR2 = tmpreg1;
 991              		.loc 1 1227 0
 992 0032 0361     		str	r3, [r0, #16]
 993              	.L67:
1228:FWLIB/src/stm32f4xx_adc.c ****   }
1229:FWLIB/src/stm32f4xx_adc.c ****   /* Rank configuration */
1230:FWLIB/src/stm32f4xx_adc.c ****   /* Get the old register value */
1231:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->JSQR;
 994              		.loc 1 1231 0
 995 0034 836B     		ldr	r3, [r0, #56]
 996              	.LVL103:
1232:FWLIB/src/stm32f4xx_adc.c ****   /* Get JL value: Number = JL+1 */
1233:FWLIB/src/stm32f4xx_adc.c ****   tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 997              		.loc 1 1233 0
 998 0036 C3F30154 		ubfx	r4, r3, #20, #2
 999              	.LVL104:
1234:FWLIB/src/stm32f4xx_adc.c ****   /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
1235:FWLIB/src/stm32f4xx_adc.c ****   tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 1000              		.loc 1 1235 0
 1001 003a 121B     		subs	r2, r2, r4
 1002              	.LVL105:
 1003 003c 0232     		adds	r2, r2, #2
 1004 003e D2B2     		uxtb	r2, r2
 1005 0040 02EB8202 		add	r2, r2, r2, lsl #2
 1006 0044 1F24     		movs	r4, #31
 1007              	.LVL106:
 1008 0046 9440     		lsls	r4, r4, r2
 1009              	.LVL107:
1236:FWLIB/src/stm32f4xx_adc.c ****   /* Clear the old JSQx bits for the selected rank */
1237:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 &= ~tmpreg2;
 1010              		.loc 1 1237 0
 1011 0048 23EA0403 		bic	r3, r3, r4
 1012              	.LVL108:
1238:FWLIB/src/stm32f4xx_adc.c ****   /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
1239:FWLIB/src/stm32f4xx_adc.c ****   tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 1013              		.loc 1 1239 0
 1014 004c 9140     		lsls	r1, r1, r2
 1015              	.LVL109:
1240:FWLIB/src/stm32f4xx_adc.c ****   /* Set the JSQx bits for the selected rank */
1241:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2;
 1016              		.loc 1 1241 0
 1017 004e 1943     		orrs	r1, r1, r3
 1018              	.LVL110:
1242:FWLIB/src/stm32f4xx_adc.c ****   /* Store the new register value */
1243:FWLIB/src/stm32f4xx_adc.c ****   ADCx->JSQR = tmpreg1;
 1019              		.loc 1 1243 0
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 40


 1020 0050 8163     		str	r1, [r0, #56]
1244:FWLIB/src/stm32f4xx_adc.c **** }
 1021              		.loc 1 1244 0
 1022 0052 70BC     		pop	{r4, r5, r6}
 1023              	.LCFI8:
 1024              		.cfi_restore 6
 1025              		.cfi_restore 5
 1026              		.cfi_restore 4
 1027              		.cfi_def_cfa_offset 0
 1028 0054 7047     		bx	lr
 1029              		.cfi_endproc
 1030              	.LFE146:
 1032 0056 00BF     		.section	.text.ADC_InjectedSequencerLengthConfig,"ax",%progbits
 1033              		.align	2
 1034              		.global	ADC_InjectedSequencerLengthConfig
 1035              		.thumb
 1036              		.thumb_func
 1038              	ADC_InjectedSequencerLengthConfig:
 1039              	.LFB147:
1245:FWLIB/src/stm32f4xx_adc.c **** 
1246:FWLIB/src/stm32f4xx_adc.c **** /**
1247:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Configures the sequencer length for injected channels
1248:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1249:FWLIB/src/stm32f4xx_adc.c ****   * @param  Length: The sequencer length. 
1250:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter must be a number between 1 to 4.
1251:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1252:FWLIB/src/stm32f4xx_adc.c ****   */
1253:FWLIB/src/stm32f4xx_adc.c **** void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
1254:FWLIB/src/stm32f4xx_adc.c **** {
 1040              		.loc 1 1254 0
 1041              		.cfi_startproc
 1042              		@ args = 0, pretend = 0, frame = 0
 1043              		@ frame_needed = 0, uses_anonymous_args = 0
 1044              		@ link register save eliminated.
 1045              	.LVL111:
1255:FWLIB/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
1256:FWLIB/src/stm32f4xx_adc.c ****   uint32_t tmpreg2 = 0;
1257:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1258:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1259:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_LENGTH(Length));
1260:FWLIB/src/stm32f4xx_adc.c ****   
1261:FWLIB/src/stm32f4xx_adc.c ****   /* Get the old register value */
1262:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->JSQR;
 1046              		.loc 1 1262 0
 1047 0000 836B     		ldr	r3, [r0, #56]
 1048              	.LVL112:
1263:FWLIB/src/stm32f4xx_adc.c ****   
1264:FWLIB/src/stm32f4xx_adc.c ****   /* Clear the old injected sequence length JL bits */
1265:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 &= JSQR_JL_RESET;
 1049              		.loc 1 1265 0
 1050 0002 23F44013 		bic	r3, r3, #3145728
 1051              	.LVL113:
1266:FWLIB/src/stm32f4xx_adc.c ****   
1267:FWLIB/src/stm32f4xx_adc.c ****   /* Set the injected sequence length JL bits */
1268:FWLIB/src/stm32f4xx_adc.c ****   tmpreg2 = Length - 1; 
 1052              		.loc 1 1268 0
 1053 0006 0139     		subs	r1, r1, #1
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 41


 1054              	.LVL114:
1269:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2 << 20;
 1055              		.loc 1 1269 0
 1056 0008 43EA0153 		orr	r3, r3, r1, lsl #20
 1057              	.LVL115:
1270:FWLIB/src/stm32f4xx_adc.c ****   
1271:FWLIB/src/stm32f4xx_adc.c ****   /* Store the new register value */
1272:FWLIB/src/stm32f4xx_adc.c ****   ADCx->JSQR = tmpreg1;
 1058              		.loc 1 1272 0
 1059 000c 8363     		str	r3, [r0, #56]
 1060 000e 7047     		bx	lr
 1061              		.cfi_endproc
 1062              	.LFE147:
 1064              		.section	.text.ADC_SetInjectedOffset,"ax",%progbits
 1065              		.align	2
 1066              		.global	ADC_SetInjectedOffset
 1067              		.thumb
 1068              		.thumb_func
 1070              	ADC_SetInjectedOffset:
 1071              	.LFB148:
1273:FWLIB/src/stm32f4xx_adc.c **** }
1274:FWLIB/src/stm32f4xx_adc.c **** 
1275:FWLIB/src/stm32f4xx_adc.c **** /**
1276:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Set the injected channels conversion value offset
1277:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1278:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_InjectedChannel: the ADC injected channel to set its offset. 
1279:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1280:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_1: Injected Channel1 selected
1281:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_2: Injected Channel2 selected
1282:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
1283:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
1284:FWLIB/src/stm32f4xx_adc.c ****   * @param  Offset: the offset value for the selected ADC injected channel
1285:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter must be a 12bit value.
1286:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1287:FWLIB/src/stm32f4xx_adc.c ****   */
1288:FWLIB/src/stm32f4xx_adc.c **** void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
1289:FWLIB/src/stm32f4xx_adc.c **** {
 1072              		.loc 1 1289 0
 1073              		.cfi_startproc
 1074              		@ args = 0, pretend = 0, frame = 8
 1075              		@ frame_needed = 0, uses_anonymous_args = 0
 1076              		@ link register save eliminated.
 1077              	.LVL116:
 1078 0000 82B0     		sub	sp, sp, #8
 1079              	.LCFI9:
 1080              		.cfi_def_cfa_offset 8
1290:FWLIB/src/stm32f4xx_adc.c ****     __IO uint32_t tmp = 0;
 1081              		.loc 1 1290 0
 1082 0002 0023     		movs	r3, #0
 1083 0004 0193     		str	r3, [sp, #4]
1291:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1292:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1293:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1294:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_OFFSET(Offset));
1295:FWLIB/src/stm32f4xx_adc.c ****   
1296:FWLIB/src/stm32f4xx_adc.c ****   tmp = (uint32_t)ADCx;
 1084              		.loc 1 1296 0
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 42


 1085 0006 0190     		str	r0, [sp, #4]
1297:FWLIB/src/stm32f4xx_adc.c ****   tmp += ADC_InjectedChannel;
 1086              		.loc 1 1297 0
 1087 0008 019B     		ldr	r3, [sp, #4]
 1088 000a 1944     		add	r1, r1, r3
 1089              	.LVL117:
 1090 000c 0191     		str	r1, [sp, #4]
1298:FWLIB/src/stm32f4xx_adc.c ****   
1299:FWLIB/src/stm32f4xx_adc.c ****   /* Set the selected injected channel data offset */
1300:FWLIB/src/stm32f4xx_adc.c ****  *(__IO uint32_t *) tmp = (uint32_t)Offset;
 1091              		.loc 1 1300 0
 1092 000e 019B     		ldr	r3, [sp, #4]
 1093 0010 1A60     		str	r2, [r3]
1301:FWLIB/src/stm32f4xx_adc.c **** }
 1094              		.loc 1 1301 0
 1095 0012 02B0     		add	sp, sp, #8
 1096              	.LCFI10:
 1097              		.cfi_def_cfa_offset 0
 1098              		@ sp needed
 1099 0014 7047     		bx	lr
 1100              		.cfi_endproc
 1101              	.LFE148:
 1103 0016 00BF     		.section	.text.ADC_ExternalTrigInjectedConvConfig,"ax",%progbits
 1104              		.align	2
 1105              		.global	ADC_ExternalTrigInjectedConvConfig
 1106              		.thumb
 1107              		.thumb_func
 1109              	ADC_ExternalTrigInjectedConvConfig:
 1110              	.LFB149:
1302:FWLIB/src/stm32f4xx_adc.c **** 
1303:FWLIB/src/stm32f4xx_adc.c ****  /**
1304:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Configures the ADCx external trigger for injected channels conversion.
1305:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1306:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_ExternalTrigInjecConv: specifies the ADC trigger to start injected conversion.
1307:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:                    
1308:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T1_CC4: Timer1 capture compare4 selected 
1309:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T1_TRGO: Timer1 TRGO event selected 
1310:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T2_CC1: Timer2 capture compare1 selected 
1311:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T2_TRGO: Timer2 TRGO event selected 
1312:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T3_CC2: Timer3 capture compare2 selected 
1313:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T3_CC4: Timer3 capture compare4 selected 
1314:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC1: Timer4 capture compare1 selected             
1315:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC2: Timer4 capture compare2 selected 
1316:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC3: Timer4 capture compare3 selected             
1317:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_TRGO: Timer4 TRGO event selected 
1318:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T5_CC4: Timer5 capture compare4 selected             
1319:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T5_TRGO: Timer5 TRGO event selected                  
1320:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC2: Timer8 capture compare2 selected
1321:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC3: Timer8 capture compare3 selected             
1322:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
1323:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected  
1324:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1325:FWLIB/src/stm32f4xx_adc.c ****   */
1326:FWLIB/src/stm32f4xx_adc.c **** void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
1327:FWLIB/src/stm32f4xx_adc.c **** {
 1111              		.loc 1 1327 0
 1112              		.cfi_startproc
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 43


 1113              		@ args = 0, pretend = 0, frame = 0
 1114              		@ frame_needed = 0, uses_anonymous_args = 0
 1115              		@ link register save eliminated.
 1116              	.LVL118:
1328:FWLIB/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
1329:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1330:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1331:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
1332:FWLIB/src/stm32f4xx_adc.c ****   
1333:FWLIB/src/stm32f4xx_adc.c ****   /* Get the old register value */
1334:FWLIB/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR2;
 1117              		.loc 1 1334 0
 1118 0000 8368     		ldr	r3, [r0, #8]
 1119              	.LVL119:
1335:FWLIB/src/stm32f4xx_adc.c ****   
1336:FWLIB/src/stm32f4xx_adc.c ****   /* Clear the old external event selection for injected group */
1337:FWLIB/src/stm32f4xx_adc.c ****   tmpreg &= CR2_JEXTSEL_RESET;
 1120              		.loc 1 1337 0
 1121 0002 23F47023 		bic	r3, r3, #983040
 1122              	.LVL120:
1338:FWLIB/src/stm32f4xx_adc.c ****   
1339:FWLIB/src/stm32f4xx_adc.c ****   /* Set the external event selection for injected group */
1340:FWLIB/src/stm32f4xx_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConv;
 1123              		.loc 1 1340 0
 1124 0006 1943     		orrs	r1, r1, r3
 1125              	.LVL121:
1341:FWLIB/src/stm32f4xx_adc.c ****   
1342:FWLIB/src/stm32f4xx_adc.c ****   /* Store the new register value */
1343:FWLIB/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg;
 1126              		.loc 1 1343 0
 1127 0008 8160     		str	r1, [r0, #8]
 1128 000a 7047     		bx	lr
 1129              		.cfi_endproc
 1130              	.LFE149:
 1132              		.section	.text.ADC_ExternalTrigInjectedConvEdgeConfig,"ax",%progbits
 1133              		.align	2
 1134              		.global	ADC_ExternalTrigInjectedConvEdgeConfig
 1135              		.thumb
 1136              		.thumb_func
 1138              	ADC_ExternalTrigInjectedConvEdgeConfig:
 1139              	.LFB150:
1344:FWLIB/src/stm32f4xx_adc.c **** }
1345:FWLIB/src/stm32f4xx_adc.c **** 
1346:FWLIB/src/stm32f4xx_adc.c **** /**
1347:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Configures the ADCx external trigger edge for injected channels conversion.
1348:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1349:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_ExternalTrigInjecConvEdge: specifies the ADC external trigger edge
1350:FWLIB/src/stm32f4xx_adc.c ****   *         to start injected conversion. 
1351:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1352:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_None: external trigger disabled for 
1353:FWLIB/src/stm32f4xx_adc.c ****   *                                                     injected conversion
1354:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_Rising: detection on rising edge
1355:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_Falling: detection on falling edge
1356:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
1357:FWLIB/src/stm32f4xx_adc.c ****   *                                                               and falling edge
1358:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1359:FWLIB/src/stm32f4xx_adc.c ****   */
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 44


1360:FWLIB/src/stm32f4xx_adc.c **** void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEd
1361:FWLIB/src/stm32f4xx_adc.c **** {
 1140              		.loc 1 1361 0
 1141              		.cfi_startproc
 1142              		@ args = 0, pretend = 0, frame = 0
 1143              		@ frame_needed = 0, uses_anonymous_args = 0
 1144              		@ link register save eliminated.
 1145              	.LVL122:
1362:FWLIB/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
1363:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1364:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1365:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
1366:FWLIB/src/stm32f4xx_adc.c ****   /* Get the old register value */
1367:FWLIB/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR2;
 1146              		.loc 1 1367 0
 1147 0000 8368     		ldr	r3, [r0, #8]
 1148              	.LVL123:
1368:FWLIB/src/stm32f4xx_adc.c ****   /* Clear the old external trigger edge for injected group */
1369:FWLIB/src/stm32f4xx_adc.c ****   tmpreg &= CR2_JEXTEN_RESET;
 1149              		.loc 1 1369 0
 1150 0002 23F44013 		bic	r3, r3, #3145728
 1151              	.LVL124:
1370:FWLIB/src/stm32f4xx_adc.c ****   /* Set the new external trigger edge for injected group */
1371:FWLIB/src/stm32f4xx_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConvEdge;
 1152              		.loc 1 1371 0
 1153 0006 1943     		orrs	r1, r1, r3
 1154              	.LVL125:
1372:FWLIB/src/stm32f4xx_adc.c ****   /* Store the new register value */
1373:FWLIB/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg;
 1155              		.loc 1 1373 0
 1156 0008 8160     		str	r1, [r0, #8]
 1157 000a 7047     		bx	lr
 1158              		.cfi_endproc
 1159              	.LFE150:
 1161              		.section	.text.ADC_SoftwareStartInjectedConv,"ax",%progbits
 1162              		.align	2
 1163              		.global	ADC_SoftwareStartInjectedConv
 1164              		.thumb
 1165              		.thumb_func
 1167              	ADC_SoftwareStartInjectedConv:
 1168              	.LFB151:
1374:FWLIB/src/stm32f4xx_adc.c **** }
1375:FWLIB/src/stm32f4xx_adc.c **** 
1376:FWLIB/src/stm32f4xx_adc.c **** /**
1377:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables the selected ADC software start conversion of the injected channels.
1378:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1379:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1380:FWLIB/src/stm32f4xx_adc.c ****   */
1381:FWLIB/src/stm32f4xx_adc.c **** void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
1382:FWLIB/src/stm32f4xx_adc.c **** {
 1169              		.loc 1 1382 0
 1170              		.cfi_startproc
 1171              		@ args = 0, pretend = 0, frame = 0
 1172              		@ frame_needed = 0, uses_anonymous_args = 0
 1173              		@ link register save eliminated.
 1174              	.LVL126:
1383:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 45


1384:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1385:FWLIB/src/stm32f4xx_adc.c ****   /* Enable the selected ADC conversion for injected group */
1386:FWLIB/src/stm32f4xx_adc.c ****   ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 1175              		.loc 1 1386 0
 1176 0000 8368     		ldr	r3, [r0, #8]
 1177 0002 43F48003 		orr	r3, r3, #4194304
 1178 0006 8360     		str	r3, [r0, #8]
 1179 0008 7047     		bx	lr
 1180              		.cfi_endproc
 1181              	.LFE151:
 1183 000a 00BF     		.section	.text.ADC_GetSoftwareStartInjectedConvCmdStatus,"ax",%progbits
 1184              		.align	2
 1185              		.global	ADC_GetSoftwareStartInjectedConvCmdStatus
 1186              		.thumb
 1187              		.thumb_func
 1189              	ADC_GetSoftwareStartInjectedConvCmdStatus:
 1190              	.LFB152:
1387:FWLIB/src/stm32f4xx_adc.c **** }
1388:FWLIB/src/stm32f4xx_adc.c **** 
1389:FWLIB/src/stm32f4xx_adc.c **** /**
1390:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Gets the selected ADC Software start injected conversion Status.
1391:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1392:FWLIB/src/stm32f4xx_adc.c ****   * @retval The new state of ADC software start injected conversion (SET or RESET).
1393:FWLIB/src/stm32f4xx_adc.c ****   */
1394:FWLIB/src/stm32f4xx_adc.c **** FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
1395:FWLIB/src/stm32f4xx_adc.c **** {
 1191              		.loc 1 1395 0
 1192              		.cfi_startproc
 1193              		@ args = 0, pretend = 0, frame = 0
 1194              		@ frame_needed = 0, uses_anonymous_args = 0
 1195              		@ link register save eliminated.
 1196              	.LVL127:
1396:FWLIB/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
1397:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1398:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1399:FWLIB/src/stm32f4xx_adc.c ****   
1400:FWLIB/src/stm32f4xx_adc.c ****   /* Check the status of JSWSTART bit */
1401:FWLIB/src/stm32f4xx_adc.c ****   if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 1197              		.loc 1 1401 0
 1198 0000 8368     		ldr	r3, [r0, #8]
 1199 0002 13F4800F 		tst	r3, #4194304
 1200 0006 01D0     		beq	.L77
1402:FWLIB/src/stm32f4xx_adc.c ****   {
1403:FWLIB/src/stm32f4xx_adc.c ****     /* JSWSTART bit is set */
1404:FWLIB/src/stm32f4xx_adc.c ****     bitstatus = SET;
 1201              		.loc 1 1404 0
 1202 0008 0120     		movs	r0, #1
 1203              	.LVL128:
 1204 000a 7047     		bx	lr
 1205              	.LVL129:
 1206              	.L77:
1405:FWLIB/src/stm32f4xx_adc.c ****   }
1406:FWLIB/src/stm32f4xx_adc.c ****   else
1407:FWLIB/src/stm32f4xx_adc.c ****   {
1408:FWLIB/src/stm32f4xx_adc.c ****     /* JSWSTART bit is reset */
1409:FWLIB/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 1207              		.loc 1 1409 0
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 46


 1208 000c 0020     		movs	r0, #0
 1209              	.LVL130:
1410:FWLIB/src/stm32f4xx_adc.c ****   }
1411:FWLIB/src/stm32f4xx_adc.c ****   /* Return the JSWSTART bit status */
1412:FWLIB/src/stm32f4xx_adc.c ****   return  bitstatus;
1413:FWLIB/src/stm32f4xx_adc.c **** }
 1210              		.loc 1 1413 0
 1211 000e 7047     		bx	lr
 1212              		.cfi_endproc
 1213              	.LFE152:
 1215              		.section	.text.ADC_AutoInjectedConvCmd,"ax",%progbits
 1216              		.align	2
 1217              		.global	ADC_AutoInjectedConvCmd
 1218              		.thumb
 1219              		.thumb_func
 1221              	ADC_AutoInjectedConvCmd:
 1222              	.LFB153:
1414:FWLIB/src/stm32f4xx_adc.c **** 
1415:FWLIB/src/stm32f4xx_adc.c **** /**
1416:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the selected ADC automatic injected group 
1417:FWLIB/src/stm32f4xx_adc.c ****   *         conversion after regular one.
1418:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1419:FWLIB/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC auto injected conversion
1420:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1421:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1422:FWLIB/src/stm32f4xx_adc.c ****   */
1423:FWLIB/src/stm32f4xx_adc.c **** void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1424:FWLIB/src/stm32f4xx_adc.c **** {
 1223              		.loc 1 1424 0
 1224              		.cfi_startproc
 1225              		@ args = 0, pretend = 0, frame = 0
 1226              		@ frame_needed = 0, uses_anonymous_args = 0
 1227              		@ link register save eliminated.
 1228              	.LVL131:
1425:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1426:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1427:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1428:FWLIB/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1229              		.loc 1 1428 0
 1230 0000 21B1     		cbz	r1, .L79
1429:FWLIB/src/stm32f4xx_adc.c ****   {
1430:FWLIB/src/stm32f4xx_adc.c ****     /* Enable the selected ADC automatic injected group conversion */
1431:FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 1231              		.loc 1 1431 0
 1232 0002 4368     		ldr	r3, [r0, #4]
 1233 0004 43F48063 		orr	r3, r3, #1024
 1234 0008 4360     		str	r3, [r0, #4]
 1235 000a 7047     		bx	lr
 1236              	.L79:
1432:FWLIB/src/stm32f4xx_adc.c ****   }
1433:FWLIB/src/stm32f4xx_adc.c ****   else
1434:FWLIB/src/stm32f4xx_adc.c ****   {
1435:FWLIB/src/stm32f4xx_adc.c ****     /* Disable the selected ADC automatic injected group conversion */
1436:FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 1237              		.loc 1 1436 0
 1238 000c 4368     		ldr	r3, [r0, #4]
 1239 000e 23F48063 		bic	r3, r3, #1024
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 47


 1240 0012 4360     		str	r3, [r0, #4]
 1241 0014 7047     		bx	lr
 1242              		.cfi_endproc
 1243              	.LFE153:
 1245 0016 00BF     		.section	.text.ADC_InjectedDiscModeCmd,"ax",%progbits
 1246              		.align	2
 1247              		.global	ADC_InjectedDiscModeCmd
 1248              		.thumb
 1249              		.thumb_func
 1251              	ADC_InjectedDiscModeCmd:
 1252              	.LFB154:
1437:FWLIB/src/stm32f4xx_adc.c ****   }
1438:FWLIB/src/stm32f4xx_adc.c **** }
1439:FWLIB/src/stm32f4xx_adc.c **** 
1440:FWLIB/src/stm32f4xx_adc.c **** /**
1441:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the discontinuous mode for injected group 
1442:FWLIB/src/stm32f4xx_adc.c ****   *         channel for the specified ADC
1443:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1444:FWLIB/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode on injected
1445:FWLIB/src/stm32f4xx_adc.c ****   *         group channel.
1446:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1447:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1448:FWLIB/src/stm32f4xx_adc.c ****   */
1449:FWLIB/src/stm32f4xx_adc.c **** void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1450:FWLIB/src/stm32f4xx_adc.c **** {
 1253              		.loc 1 1450 0
 1254              		.cfi_startproc
 1255              		@ args = 0, pretend = 0, frame = 0
 1256              		@ frame_needed = 0, uses_anonymous_args = 0
 1257              		@ link register save eliminated.
 1258              	.LVL132:
1451:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1452:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1453:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1454:FWLIB/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1259              		.loc 1 1454 0
 1260 0000 21B1     		cbz	r1, .L82
1455:FWLIB/src/stm32f4xx_adc.c ****   {
1456:FWLIB/src/stm32f4xx_adc.c ****     /* Enable the selected ADC injected discontinuous mode */
1457:FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 1261              		.loc 1 1457 0
 1262 0002 4368     		ldr	r3, [r0, #4]
 1263 0004 43F48053 		orr	r3, r3, #4096
 1264 0008 4360     		str	r3, [r0, #4]
 1265 000a 7047     		bx	lr
 1266              	.L82:
1458:FWLIB/src/stm32f4xx_adc.c ****   }
1459:FWLIB/src/stm32f4xx_adc.c ****   else
1460:FWLIB/src/stm32f4xx_adc.c ****   {
1461:FWLIB/src/stm32f4xx_adc.c ****     /* Disable the selected ADC injected discontinuous mode */
1462:FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 1267              		.loc 1 1462 0
 1268 000c 4368     		ldr	r3, [r0, #4]
 1269 000e 23F48053 		bic	r3, r3, #4096
 1270 0012 4360     		str	r3, [r0, #4]
 1271 0014 7047     		bx	lr
 1272              		.cfi_endproc
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 48


 1273              	.LFE154:
 1275 0016 00BF     		.section	.text.ADC_GetInjectedConversionValue,"ax",%progbits
 1276              		.align	2
 1277              		.global	ADC_GetInjectedConversionValue
 1278              		.thumb
 1279              		.thumb_func
 1281              	ADC_GetInjectedConversionValue:
 1282              	.LFB155:
1463:FWLIB/src/stm32f4xx_adc.c ****   }
1464:FWLIB/src/stm32f4xx_adc.c **** }
1465:FWLIB/src/stm32f4xx_adc.c **** 
1466:FWLIB/src/stm32f4xx_adc.c **** /**
1467:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Returns the ADC injected channel conversion result
1468:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1469:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_InjectedChannel: the converted ADC injected channel.
1470:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1471:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_1: Injected Channel1 selected
1472:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_2: Injected Channel2 selected
1473:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
1474:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
1475:FWLIB/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
1476:FWLIB/src/stm32f4xx_adc.c ****   */
1477:FWLIB/src/stm32f4xx_adc.c **** uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
1478:FWLIB/src/stm32f4xx_adc.c **** {
 1283              		.loc 1 1478 0
 1284              		.cfi_startproc
 1285              		@ args = 0, pretend = 0, frame = 8
 1286              		@ frame_needed = 0, uses_anonymous_args = 0
 1287              		@ link register save eliminated.
 1288              	.LVL133:
 1289 0000 82B0     		sub	sp, sp, #8
 1290              	.LCFI11:
 1291              		.cfi_def_cfa_offset 8
1479:FWLIB/src/stm32f4xx_adc.c ****   __IO uint32_t tmp = 0;
 1292              		.loc 1 1479 0
 1293 0002 0023     		movs	r3, #0
 1294 0004 0193     		str	r3, [sp, #4]
1480:FWLIB/src/stm32f4xx_adc.c ****   
1481:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1482:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1483:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1484:FWLIB/src/stm32f4xx_adc.c **** 
1485:FWLIB/src/stm32f4xx_adc.c ****   tmp = (uint32_t)ADCx;
 1295              		.loc 1 1485 0
 1296 0006 0190     		str	r0, [sp, #4]
1486:FWLIB/src/stm32f4xx_adc.c ****   tmp += ADC_InjectedChannel + JDR_OFFSET;
 1297              		.loc 1 1486 0
 1298 0008 019B     		ldr	r3, [sp, #4]
 1299 000a 1944     		add	r1, r1, r3
 1300              	.LVL134:
 1301 000c 2831     		adds	r1, r1, #40
 1302 000e 0191     		str	r1, [sp, #4]
1487:FWLIB/src/stm32f4xx_adc.c ****   
1488:FWLIB/src/stm32f4xx_adc.c ****   /* Returns the selected injected channel conversion data value */
1489:FWLIB/src/stm32f4xx_adc.c ****   return (uint16_t) (*(__IO uint32_t*)  tmp); 
 1303              		.loc 1 1489 0
 1304 0010 019B     		ldr	r3, [sp, #4]
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 49


 1305 0012 1868     		ldr	r0, [r3]
 1306              	.LVL135:
1490:FWLIB/src/stm32f4xx_adc.c **** }
 1307              		.loc 1 1490 0
 1308 0014 80B2     		uxth	r0, r0
 1309 0016 02B0     		add	sp, sp, #8
 1310              	.LCFI12:
 1311              		.cfi_def_cfa_offset 0
 1312              		@ sp needed
 1313 0018 7047     		bx	lr
 1314              		.cfi_endproc
 1315              	.LFE155:
 1317 001a 00BF     		.section	.text.ADC_ITConfig,"ax",%progbits
 1318              		.align	2
 1319              		.global	ADC_ITConfig
 1320              		.thumb
 1321              		.thumb_func
 1323              	ADC_ITConfig:
 1324              	.LFB156:
1491:FWLIB/src/stm32f4xx_adc.c **** /**
1492:FWLIB/src/stm32f4xx_adc.c ****   * @}
1493:FWLIB/src/stm32f4xx_adc.c ****   */
1494:FWLIB/src/stm32f4xx_adc.c **** 
1495:FWLIB/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group7 Interrupts and flags management functions
1496:FWLIB/src/stm32f4xx_adc.c ****  *  @brief   Interrupts and flags management functions
1497:FWLIB/src/stm32f4xx_adc.c ****  *
1498:FWLIB/src/stm32f4xx_adc.c **** @verbatim   
1499:FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================
1500:FWLIB/src/stm32f4xx_adc.c ****             ##### Interrupts and flags management functions #####
1501:FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================  
1502:FWLIB/src/stm32f4xx_adc.c **** 
1503:FWLIB/src/stm32f4xx_adc.c ****     [..] This section provides functions allowing to configure the ADC Interrupts 
1504:FWLIB/src/stm32f4xx_adc.c ****          and to get the status and clear flags and Interrupts pending bits.
1505:FWLIB/src/stm32f4xx_adc.c ****   
1506:FWLIB/src/stm32f4xx_adc.c ****     [..] Each ADC provides 4 Interrupts sources and 6 Flags which can be divided
1507:FWLIB/src/stm32f4xx_adc.c ****         into 3 groups:
1508:FWLIB/src/stm32f4xx_adc.c ****   
1509:FWLIB/src/stm32f4xx_adc.c ****   *** Flags and Interrupts for ADC regular channels ***
1510:FWLIB/src/stm32f4xx_adc.c ****   =====================================================
1511:FWLIB/src/stm32f4xx_adc.c ****     [..]
1512:FWLIB/src/stm32f4xx_adc.c ****       (+) Flags :
1513:FWLIB/src/stm32f4xx_adc.c ****         (##) ADC_FLAG_OVR : Overrun detection when regular converted data are lost
1514:FWLIB/src/stm32f4xx_adc.c **** 
1515:FWLIB/src/stm32f4xx_adc.c ****         (##) ADC_FLAG_EOC : Regular channel end of conversion ==> to indicate 
1516:FWLIB/src/stm32f4xx_adc.c ****              (depending on EOCS bit, managed by ADC_EOCOnEachRegularChannelCmd() )
1517:FWLIB/src/stm32f4xx_adc.c ****              the end of:
1518:FWLIB/src/stm32f4xx_adc.c ****              (+++) a regular CHANNEL conversion 
1519:FWLIB/src/stm32f4xx_adc.c ****              (+++) sequence of regular GROUP conversions .
1520:FWLIB/src/stm32f4xx_adc.c **** 
1521:FWLIB/src/stm32f4xx_adc.c ****         (##) ADC_FLAG_STRT: Regular channel start ==> to indicate when regular 
1522:FWLIB/src/stm32f4xx_adc.c ****              CHANNEL conversion starts.
1523:FWLIB/src/stm32f4xx_adc.c ****     [..]
1524:FWLIB/src/stm32f4xx_adc.c ****       (+) Interrupts :
1525:FWLIB/src/stm32f4xx_adc.c ****         (##) ADC_IT_OVR : specifies the interrupt source for Overrun detection 
1526:FWLIB/src/stm32f4xx_adc.c ****              event.  
1527:FWLIB/src/stm32f4xx_adc.c ****         (##) ADC_IT_EOC : specifies the interrupt source for Regular channel end
1528:FWLIB/src/stm32f4xx_adc.c ****              of conversion event.
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 50


1529:FWLIB/src/stm32f4xx_adc.c ****   
1530:FWLIB/src/stm32f4xx_adc.c ****   
1531:FWLIB/src/stm32f4xx_adc.c ****   *** Flags and Interrupts for ADC Injected channels ***
1532:FWLIB/src/stm32f4xx_adc.c ****   ======================================================
1533:FWLIB/src/stm32f4xx_adc.c ****     [..]
1534:FWLIB/src/stm32f4xx_adc.c ****       (+) Flags :
1535:FWLIB/src/stm32f4xx_adc.c ****         (##) ADC_FLAG_JEOC : Injected channel end of conversion ==> to indicate 
1536:FWLIB/src/stm32f4xx_adc.c ****              at the end of injected GROUP conversion  
1537:FWLIB/src/stm32f4xx_adc.c ****               
1538:FWLIB/src/stm32f4xx_adc.c ****         (##) ADC_FLAG_JSTRT: Injected channel start ==> to indicate hardware when 
1539:FWLIB/src/stm32f4xx_adc.c ****              injected GROUP conversion starts.
1540:FWLIB/src/stm32f4xx_adc.c ****     [..]
1541:FWLIB/src/stm32f4xx_adc.c ****       (+) Interrupts :
1542:FWLIB/src/stm32f4xx_adc.c ****         (##) ADC_IT_JEOC : specifies the interrupt source for Injected channel 
1543:FWLIB/src/stm32f4xx_adc.c ****              end of conversion event.     
1544:FWLIB/src/stm32f4xx_adc.c **** 
1545:FWLIB/src/stm32f4xx_adc.c ****   *** General Flags and Interrupts for the ADC ***
1546:FWLIB/src/stm32f4xx_adc.c ****   ================================================ 
1547:FWLIB/src/stm32f4xx_adc.c ****     [..]
1548:FWLIB/src/stm32f4xx_adc.c ****       (+)Flags :
1549:FWLIB/src/stm32f4xx_adc.c ****         (##) ADC_FLAG_AWD: Analog watchdog ==> to indicate if the converted voltage 
1550:FWLIB/src/stm32f4xx_adc.c ****              crosses the programmed thresholds values.
1551:FWLIB/src/stm32f4xx_adc.c ****     [..]          
1552:FWLIB/src/stm32f4xx_adc.c ****       (+) Interrupts :
1553:FWLIB/src/stm32f4xx_adc.c ****         (##) ADC_IT_AWD : specifies the interrupt source for Analog watchdog event. 
1554:FWLIB/src/stm32f4xx_adc.c **** 
1555:FWLIB/src/stm32f4xx_adc.c ****   
1556:FWLIB/src/stm32f4xx_adc.c ****     [..] The user should identify which mode will be used in his application to 
1557:FWLIB/src/stm32f4xx_adc.c ****          manage the ADC controller events: Polling mode or Interrupt mode.
1558:FWLIB/src/stm32f4xx_adc.c ****   
1559:FWLIB/src/stm32f4xx_adc.c ****     [..] In the Polling Mode it is advised to use the following functions:
1560:FWLIB/src/stm32f4xx_adc.c ****       (+) ADC_GetFlagStatus() : to check if flags events occur. 
1561:FWLIB/src/stm32f4xx_adc.c ****       (+) ADC_ClearFlag()     : to clear the flags events.
1562:FWLIB/src/stm32f4xx_adc.c ****       
1563:FWLIB/src/stm32f4xx_adc.c ****     [..] In the Interrupt Mode it is advised to use the following functions:
1564:FWLIB/src/stm32f4xx_adc.c ****       (+) ADC_ITConfig()          : to enable or disable the interrupt source.
1565:FWLIB/src/stm32f4xx_adc.c ****       (+) ADC_GetITStatus()       : to check if Interrupt occurs.
1566:FWLIB/src/stm32f4xx_adc.c ****       (+) ADC_ClearITPendingBit() : to clear the Interrupt pending Bit 
1567:FWLIB/src/stm32f4xx_adc.c ****                                    (corresponding Flag). 
1568:FWLIB/src/stm32f4xx_adc.c **** @endverbatim
1569:FWLIB/src/stm32f4xx_adc.c ****   * @{
1570:FWLIB/src/stm32f4xx_adc.c ****   */ 
1571:FWLIB/src/stm32f4xx_adc.c **** /**
1572:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC interrupts.
1573:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1574:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt sources to be enabled or disabled. 
1575:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1576:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1577:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1578:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1579:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt enable                       
1580:FWLIB/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the specified ADC interrupts.
1581:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1582:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1583:FWLIB/src/stm32f4xx_adc.c ****   */
1584:FWLIB/src/stm32f4xx_adc.c **** void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
1585:FWLIB/src/stm32f4xx_adc.c **** {
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 51


 1325              		.loc 1 1585 0
 1326              		.cfi_startproc
 1327              		@ args = 0, pretend = 0, frame = 0
 1328              		@ frame_needed = 0, uses_anonymous_args = 0
 1329              		@ link register save eliminated.
 1330              	.LVL136:
1586:FWLIB/src/stm32f4xx_adc.c ****   uint32_t itmask = 0;
1587:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1588:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1589:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1590:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT)); 
1591:FWLIB/src/stm32f4xx_adc.c **** 
1592:FWLIB/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1593:FWLIB/src/stm32f4xx_adc.c ****   itmask = (uint8_t)ADC_IT;
 1331              		.loc 1 1593 0
 1332 0000 C9B2     		uxtb	r1, r1
 1333              	.LVL137:
1594:FWLIB/src/stm32f4xx_adc.c ****   itmask = (uint32_t)0x01 << itmask;    
 1334              		.loc 1 1594 0
 1335 0002 0123     		movs	r3, #1
 1336 0004 03FA01F1 		lsl	r1, r3, r1
 1337              	.LVL138:
1595:FWLIB/src/stm32f4xx_adc.c **** 
1596:FWLIB/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1338              		.loc 1 1596 0
 1339 0008 1AB1     		cbz	r2, .L87
1597:FWLIB/src/stm32f4xx_adc.c ****   {
1598:FWLIB/src/stm32f4xx_adc.c ****     /* Enable the selected ADC interrupts */
1599:FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR1 |= itmask;
 1340              		.loc 1 1599 0
 1341 000a 4368     		ldr	r3, [r0, #4]
 1342 000c 1943     		orrs	r1, r1, r3
 1343              	.LVL139:
 1344 000e 4160     		str	r1, [r0, #4]
 1345 0010 7047     		bx	lr
 1346              	.LVL140:
 1347              	.L87:
1600:FWLIB/src/stm32f4xx_adc.c ****   }
1601:FWLIB/src/stm32f4xx_adc.c ****   else
1602:FWLIB/src/stm32f4xx_adc.c ****   {
1603:FWLIB/src/stm32f4xx_adc.c ****     /* Disable the selected ADC interrupts */
1604:FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (~(uint32_t)itmask);
 1348              		.loc 1 1604 0
 1349 0012 4368     		ldr	r3, [r0, #4]
 1350 0014 23EA0101 		bic	r1, r3, r1
 1351              	.LVL141:
 1352 0018 4160     		str	r1, [r0, #4]
 1353 001a 7047     		bx	lr
 1354              		.cfi_endproc
 1355              	.LFE156:
 1357              		.section	.text.ADC_GetFlagStatus,"ax",%progbits
 1358              		.align	2
 1359              		.global	ADC_GetFlagStatus
 1360              		.thumb
 1361              		.thumb_func
 1363              	ADC_GetFlagStatus:
 1364              	.LFB157:
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 52


1605:FWLIB/src/stm32f4xx_adc.c ****   }
1606:FWLIB/src/stm32f4xx_adc.c **** }
1607:FWLIB/src/stm32f4xx_adc.c **** 
1608:FWLIB/src/stm32f4xx_adc.c **** /**
1609:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Checks whether the specified ADC flag is set or not.
1610:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1611:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_FLAG: specifies the flag to check. 
1612:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1613:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_AWD: Analog watchdog flag
1614:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_EOC: End of conversion flag
1615:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JEOC: End of injected group conversion flag
1616:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1617:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
1618:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_OVR: Overrun flag                                                 
1619:FWLIB/src/stm32f4xx_adc.c ****   * @retval The new state of ADC_FLAG (SET or RESET).
1620:FWLIB/src/stm32f4xx_adc.c ****   */
1621:FWLIB/src/stm32f4xx_adc.c **** FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1622:FWLIB/src/stm32f4xx_adc.c **** {
 1365              		.loc 1 1622 0
 1366              		.cfi_startproc
 1367              		@ args = 0, pretend = 0, frame = 0
 1368              		@ frame_needed = 0, uses_anonymous_args = 0
 1369              		@ link register save eliminated.
 1370              	.LVL142:
1623:FWLIB/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
1624:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1625:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1626:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
1627:FWLIB/src/stm32f4xx_adc.c **** 
1628:FWLIB/src/stm32f4xx_adc.c ****   /* Check the status of the specified ADC flag */
1629:FWLIB/src/stm32f4xx_adc.c ****   if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 1371              		.loc 1 1629 0
 1372 0000 0368     		ldr	r3, [r0]
 1373 0002 1942     		tst	r1, r3
 1374 0004 01D0     		beq	.L91
1630:FWLIB/src/stm32f4xx_adc.c ****   {
1631:FWLIB/src/stm32f4xx_adc.c ****     /* ADC_FLAG is set */
1632:FWLIB/src/stm32f4xx_adc.c ****     bitstatus = SET;
 1375              		.loc 1 1632 0
 1376 0006 0120     		movs	r0, #1
 1377              	.LVL143:
 1378 0008 7047     		bx	lr
 1379              	.LVL144:
 1380              	.L91:
1633:FWLIB/src/stm32f4xx_adc.c ****   }
1634:FWLIB/src/stm32f4xx_adc.c ****   else
1635:FWLIB/src/stm32f4xx_adc.c ****   {
1636:FWLIB/src/stm32f4xx_adc.c ****     /* ADC_FLAG is reset */
1637:FWLIB/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 1381              		.loc 1 1637 0
 1382 000a 0020     		movs	r0, #0
 1383              	.LVL145:
1638:FWLIB/src/stm32f4xx_adc.c ****   }
1639:FWLIB/src/stm32f4xx_adc.c ****   /* Return the ADC_FLAG status */
1640:FWLIB/src/stm32f4xx_adc.c ****   return  bitstatus;
1641:FWLIB/src/stm32f4xx_adc.c **** }
 1384              		.loc 1 1641 0
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 53


 1385 000c 7047     		bx	lr
 1386              		.cfi_endproc
 1387              	.LFE157:
 1389 000e 00BF     		.section	.text.ADC_ClearFlag,"ax",%progbits
 1390              		.align	2
 1391              		.global	ADC_ClearFlag
 1392              		.thumb
 1393              		.thumb_func
 1395              	ADC_ClearFlag:
 1396              	.LFB158:
1642:FWLIB/src/stm32f4xx_adc.c **** 
1643:FWLIB/src/stm32f4xx_adc.c **** /**
1644:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Clears the ADCx's pending flags.
1645:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1646:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_FLAG: specifies the flag to clear. 
1647:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be any combination of the following values:
1648:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_AWD: Analog watchdog flag
1649:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_EOC: End of conversion flag
1650:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JEOC: End of injected group conversion flag
1651:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1652:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
1653:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_OVR: Overrun flag                          
1654:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1655:FWLIB/src/stm32f4xx_adc.c ****   */
1656:FWLIB/src/stm32f4xx_adc.c **** void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1657:FWLIB/src/stm32f4xx_adc.c **** {
 1397              		.loc 1 1657 0
 1398              		.cfi_startproc
 1399              		@ args = 0, pretend = 0, frame = 0
 1400              		@ frame_needed = 0, uses_anonymous_args = 0
 1401              		@ link register save eliminated.
 1402              	.LVL146:
1658:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1659:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1660:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
1661:FWLIB/src/stm32f4xx_adc.c **** 
1662:FWLIB/src/stm32f4xx_adc.c ****   /* Clear the selected ADC flags */
1663:FWLIB/src/stm32f4xx_adc.c ****   ADCx->SR = ~(uint32_t)ADC_FLAG;
 1403              		.loc 1 1663 0
 1404 0000 C943     		mvns	r1, r1
 1405              	.LVL147:
 1406 0002 0160     		str	r1, [r0]
 1407 0004 7047     		bx	lr
 1408              		.cfi_endproc
 1409              	.LFE158:
 1411 0006 00BF     		.section	.text.ADC_GetITStatus,"ax",%progbits
 1412              		.align	2
 1413              		.global	ADC_GetITStatus
 1414              		.thumb
 1415              		.thumb_func
 1417              	ADC_GetITStatus:
 1418              	.LFB159:
1664:FWLIB/src/stm32f4xx_adc.c **** }
1665:FWLIB/src/stm32f4xx_adc.c **** 
1666:FWLIB/src/stm32f4xx_adc.c **** /**
1667:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Checks whether the specified ADC interrupt has occurred or not.
1668:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx:   where x can be 1, 2 or 3 to select the ADC peripheral.
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 54


1669:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt source to check. 
1670:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1671:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1672:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1673:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1674:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt mask                        
1675:FWLIB/src/stm32f4xx_adc.c ****   * @retval The new state of ADC_IT (SET or RESET).
1676:FWLIB/src/stm32f4xx_adc.c ****   */
1677:FWLIB/src/stm32f4xx_adc.c **** ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1678:FWLIB/src/stm32f4xx_adc.c **** {
 1419              		.loc 1 1678 0
 1420              		.cfi_startproc
 1421              		@ args = 0, pretend = 0, frame = 0
 1422              		@ frame_needed = 0, uses_anonymous_args = 0
 1423              		@ link register save eliminated.
 1424              	.LVL148:
 1425 0000 10B4     		push	{r4}
 1426              	.LCFI13:
 1427              		.cfi_def_cfa_offset 4
 1428              		.cfi_offset 4, -4
 1429              	.LVL149:
1679:FWLIB/src/stm32f4xx_adc.c ****   ITStatus bitstatus = RESET;
1680:FWLIB/src/stm32f4xx_adc.c ****   uint32_t itmask = 0, enablestatus = 0;
1681:FWLIB/src/stm32f4xx_adc.c **** 
1682:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1683:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1684:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT));
1685:FWLIB/src/stm32f4xx_adc.c **** 
1686:FWLIB/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1687:FWLIB/src/stm32f4xx_adc.c ****   itmask = ADC_IT >> 8;
1688:FWLIB/src/stm32f4xx_adc.c **** 
1689:FWLIB/src/stm32f4xx_adc.c ****   /* Get the ADC_IT enable bit status */
1690:FWLIB/src/stm32f4xx_adc.c ****   enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 1430              		.loc 1 1690 0
 1431 0002 4468     		ldr	r4, [r0, #4]
 1432 0004 CBB2     		uxtb	r3, r1
 1433 0006 0122     		movs	r2, #1
 1434 0008 02FA03F3 		lsl	r3, r2, r3
 1435 000c 2340     		ands	r3, r3, r4
 1436              	.LVL150:
1691:FWLIB/src/stm32f4xx_adc.c **** 
1692:FWLIB/src/stm32f4xx_adc.c ****   /* Check the status of the specified ADC interrupt */
1693:FWLIB/src/stm32f4xx_adc.c ****   if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 1437              		.loc 1 1693 0
 1438 000e 0268     		ldr	r2, [r0]
 1439 0010 12EA1122 		ands	r2, r2, r1, lsr #8
 1440 0014 02D0     		beq	.L95
 1441              		.loc 1 1693 0 is_stmt 0 discriminator 1
 1442 0016 1BB9     		cbnz	r3, .L96
1694:FWLIB/src/stm32f4xx_adc.c ****   {
1695:FWLIB/src/stm32f4xx_adc.c ****     /* ADC_IT is set */
1696:FWLIB/src/stm32f4xx_adc.c ****     bitstatus = SET;
1697:FWLIB/src/stm32f4xx_adc.c ****   }
1698:FWLIB/src/stm32f4xx_adc.c ****   else
1699:FWLIB/src/stm32f4xx_adc.c ****   {
1700:FWLIB/src/stm32f4xx_adc.c ****     /* ADC_IT is reset */
1701:FWLIB/src/stm32f4xx_adc.c ****     bitstatus = RESET;
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 55


 1443              		.loc 1 1701 0 is_stmt 1
 1444 0018 0020     		movs	r0, #0
 1445              	.LVL151:
 1446 001a 02E0     		b	.L94
 1447              	.LVL152:
 1448              	.L95:
 1449 001c 0020     		movs	r0, #0
 1450              	.LVL153:
 1451 001e 00E0     		b	.L94
 1452              	.LVL154:
 1453              	.L96:
1696:FWLIB/src/stm32f4xx_adc.c ****   }
 1454              		.loc 1 1696 0
 1455 0020 0120     		movs	r0, #1
 1456              	.LVL155:
 1457              	.L94:
1702:FWLIB/src/stm32f4xx_adc.c ****   }
1703:FWLIB/src/stm32f4xx_adc.c ****   /* Return the ADC_IT status */
1704:FWLIB/src/stm32f4xx_adc.c ****   return  bitstatus;
1705:FWLIB/src/stm32f4xx_adc.c **** }
 1458              		.loc 1 1705 0
 1459 0022 5DF8044B 		ldr	r4, [sp], #4
 1460              	.LCFI14:
 1461              		.cfi_restore 4
 1462              		.cfi_def_cfa_offset 0
 1463 0026 7047     		bx	lr
 1464              		.cfi_endproc
 1465              	.LFE159:
 1467              		.section	.text.ADC_ClearITPendingBit,"ax",%progbits
 1468              		.align	2
 1469              		.global	ADC_ClearITPendingBit
 1470              		.thumb
 1471              		.thumb_func
 1473              	ADC_ClearITPendingBit:
 1474              	.LFB160:
1706:FWLIB/src/stm32f4xx_adc.c **** 
1707:FWLIB/src/stm32f4xx_adc.c **** /**
1708:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Clears the ADCx's interrupt pending bits.
1709:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1710:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt pending bit to clear.
1711:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1712:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1713:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1714:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1715:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt mask                         
1716:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1717:FWLIB/src/stm32f4xx_adc.c ****   */
1718:FWLIB/src/stm32f4xx_adc.c **** void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1719:FWLIB/src/stm32f4xx_adc.c **** {
 1475              		.loc 1 1719 0
 1476              		.cfi_startproc
 1477              		@ args = 0, pretend = 0, frame = 0
 1478              		@ frame_needed = 0, uses_anonymous_args = 0
 1479              		@ link register save eliminated.
 1480              	.LVL156:
1720:FWLIB/src/stm32f4xx_adc.c ****   uint8_t itmask = 0;
1721:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 56


1722:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1723:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT)); 
1724:FWLIB/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1725:FWLIB/src/stm32f4xx_adc.c ****   itmask = (uint8_t)(ADC_IT >> 8);
1726:FWLIB/src/stm32f4xx_adc.c ****   /* Clear the selected ADC interrupt pending bits */
1727:FWLIB/src/stm32f4xx_adc.c ****   ADCx->SR = ~(uint32_t)itmask;
 1481              		.loc 1 1727 0
 1482 0000 6FEA1121 		mvn	r1, r1, lsr #8
 1483              	.LVL157:
 1484 0004 0160     		str	r1, [r0]
 1485 0006 7047     		bx	lr
 1486              		.cfi_endproc
 1487              	.LFE160:
 1489              		.text
 1490              	.Letext0:
 1491              		.file 2 "d:\\gcc_arm\\5.4 2016q3\\arm-none-eabi\\include\\machine\\_default_types.h"
 1492              		.file 3 "d:\\gcc_arm\\5.4 2016q3\\arm-none-eabi\\include\\sys\\_stdint.h"
 1493              		.file 4 "USER/stm32f4xx.h"
 1494              		.file 5 "FWLIB/inc/stm32f4xx_adc.h"
 1495              		.file 6 "F4_CORE/core_cm4.h"
 1496              		.file 7 "FWLIB/inc/stm32f4xx_rcc.h"
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 57


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_adc.c
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:22     .text.ADC_DeInit:00000000 $t
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:27     .text.ADC_DeInit:00000000 ADC_DeInit
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:54     .text.ADC_Init:00000000 $t
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:59     .text.ADC_Init:00000000 ADC_Init
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:140    .text.ADC_Init:0000004c $d
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:145    .text.ADC_StructInit:00000000 $t
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:150    .text.ADC_StructInit:00000000 ADC_StructInit
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:179    .text.ADC_CommonInit:00000000 $t
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:184    .text.ADC_CommonInit:00000000 ADC_CommonInit
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:233    .text.ADC_CommonInit:00000024 $d
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:239    .text.ADC_CommonStructInit:00000000 $t
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:244    .text.ADC_CommonStructInit:00000000 ADC_CommonStructInit
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:266    .text.ADC_Cmd:00000000 $t
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:271    .text.ADC_Cmd:00000000 ADC_Cmd
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:296    .text.ADC_AnalogWatchdogCmd:00000000 $t
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:301    .text.ADC_AnalogWatchdogCmd:00000000 ADC_AnalogWatchdogCmd
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:327    .text.ADC_AnalogWatchdogThresholdsConfig:00000000 $t
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:332    .text.ADC_AnalogWatchdogThresholdsConfig:00000000 ADC_AnalogWatchdogThresholdsConfig
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:349    .text.ADC_AnalogWatchdogSingleChannelConfig:00000000 $t
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:354    .text.ADC_AnalogWatchdogSingleChannelConfig:00000000 ADC_AnalogWatchdogSingleChannelConfig
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:378    .text.ADC_TempSensorVrefintCmd:00000000 $t
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:383    .text.ADC_TempSensorVrefintCmd:00000000 ADC_TempSensorVrefintCmd
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:409    .text.ADC_TempSensorVrefintCmd:0000001c $d
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:414    .text.ADC_VBATCmd:00000000 $t
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:419    .text.ADC_VBATCmd:00000000 ADC_VBATCmd
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:445    .text.ADC_VBATCmd:0000001c $d
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:450    .text.ADC_RegularChannelConfig:00000000 $t
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:455    .text.ADC_RegularChannelConfig:00000000 ADC_RegularChannelConfig
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:608    .text.ADC_SoftwareStartConv:00000000 $t
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:613    .text.ADC_SoftwareStartConv:00000000 ADC_SoftwareStartConv
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:630    .text.ADC_GetSoftwareStartConvStatus:00000000 $t
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:635    .text.ADC_GetSoftwareStartConvStatus:00000000 ADC_GetSoftwareStartConvStatus
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:662    .text.ADC_EOCOnEachRegularChannelCmd:00000000 $t
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:667    .text.ADC_EOCOnEachRegularChannelCmd:00000000 ADC_EOCOnEachRegularChannelCmd
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:692    .text.ADC_ContinuousModeCmd:00000000 $t
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:697    .text.ADC_ContinuousModeCmd:00000000 ADC_ContinuousModeCmd
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:722    .text.ADC_DiscModeChannelCountConfig:00000000 $t
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:727    .text.ADC_DiscModeChannelCountConfig:00000000 ADC_DiscModeChannelCountConfig
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:754    .text.ADC_DiscModeCmd:00000000 $t
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:759    .text.ADC_DiscModeCmd:00000000 ADC_DiscModeCmd
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:784    .text.ADC_GetConversionValue:00000000 $t
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:789    .text.ADC_GetConversionValue:00000000 ADC_GetConversionValue
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:807    .text.ADC_GetMultiModeConversionValue:00000000 $t
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:812    .text.ADC_GetMultiModeConversionValue:00000000 ADC_GetMultiModeConversionValue
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:827    .text.ADC_GetMultiModeConversionValue:00000008 $d
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:832    .text.ADC_DMACmd:00000000 $t
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:837    .text.ADC_DMACmd:00000000 ADC_DMACmd
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:862    .text.ADC_DMARequestAfterLastTransferCmd:00000000 $t
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:867    .text.ADC_DMARequestAfterLastTransferCmd:00000000 ADC_DMARequestAfterLastTransferCmd
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:892    .text.ADC_MultiModeDMARequestAfterLastTransferCmd:00000000 $t
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:897    .text.ADC_MultiModeDMARequestAfterLastTransferCmd:00000000 ADC_MultiModeDMARequestAfterLastTransferCmd
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:923    .text.ADC_MultiModeDMARequestAfterLastTransferCmd:0000001c $d
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:928    .text.ADC_InjectedChannelConfig:00000000 $t
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:933    .text.ADC_InjectedChannelConfig:00000000 ADC_InjectedChannelConfig
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:1033   .text.ADC_InjectedSequencerLengthConfig:00000000 $t
ARM GAS  C:\Users\why\AppData\Local\Temp\cc1Jsc19.s 			page 58


C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:1038   .text.ADC_InjectedSequencerLengthConfig:00000000 ADC_InjectedSequencerLengthConfig
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:1065   .text.ADC_SetInjectedOffset:00000000 $t
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:1070   .text.ADC_SetInjectedOffset:00000000 ADC_SetInjectedOffset
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:1104   .text.ADC_ExternalTrigInjectedConvConfig:00000000 $t
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:1109   .text.ADC_ExternalTrigInjectedConvConfig:00000000 ADC_ExternalTrigInjectedConvConfig
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:1133   .text.ADC_ExternalTrigInjectedConvEdgeConfig:00000000 $t
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:1138   .text.ADC_ExternalTrigInjectedConvEdgeConfig:00000000 ADC_ExternalTrigInjectedConvEdgeConfig
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:1162   .text.ADC_SoftwareStartInjectedConv:00000000 $t
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:1167   .text.ADC_SoftwareStartInjectedConv:00000000 ADC_SoftwareStartInjectedConv
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:1184   .text.ADC_GetSoftwareStartInjectedConvCmdStatus:00000000 $t
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:1189   .text.ADC_GetSoftwareStartInjectedConvCmdStatus:00000000 ADC_GetSoftwareStartInjectedConvCmdStatus
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:1216   .text.ADC_AutoInjectedConvCmd:00000000 $t
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:1221   .text.ADC_AutoInjectedConvCmd:00000000 ADC_AutoInjectedConvCmd
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:1246   .text.ADC_InjectedDiscModeCmd:00000000 $t
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:1251   .text.ADC_InjectedDiscModeCmd:00000000 ADC_InjectedDiscModeCmd
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:1276   .text.ADC_GetInjectedConversionValue:00000000 $t
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:1281   .text.ADC_GetInjectedConversionValue:00000000 ADC_GetInjectedConversionValue
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:1318   .text.ADC_ITConfig:00000000 $t
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:1323   .text.ADC_ITConfig:00000000 ADC_ITConfig
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:1358   .text.ADC_GetFlagStatus:00000000 $t
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:1363   .text.ADC_GetFlagStatus:00000000 ADC_GetFlagStatus
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:1390   .text.ADC_ClearFlag:00000000 $t
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:1395   .text.ADC_ClearFlag:00000000 ADC_ClearFlag
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:1412   .text.ADC_GetITStatus:00000000 $t
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:1417   .text.ADC_GetITStatus:00000000 ADC_GetITStatus
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:1468   .text.ADC_ClearITPendingBit:00000000 $t
C:\Users\why\AppData\Local\Temp\cc1Jsc19.s:1473   .text.ADC_ClearITPendingBit:00000000 ADC_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
