ARM GAS  /tmp/ccVoyQ2j.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_adc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.ADC_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	ADC_DeInit
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	ADC_DeInit:
  27              	.LFB123:
  28              		.file 1 "FWLIB/src/stm32f4xx_adc.c"
   1:FWLIB/src/stm32f4xx_adc.c **** /**
   2:FWLIB/src/stm32f4xx_adc.c ****   ******************************************************************************
   3:FWLIB/src/stm32f4xx_adc.c ****   * @file    stm32f4xx_adc.c
   4:FWLIB/src/stm32f4xx_adc.c ****   * @author  MCD Application Team
   5:FWLIB/src/stm32f4xx_adc.c ****   * @version V1.8.0
   6:FWLIB/src/stm32f4xx_adc.c ****   * @date    04-November-2016
   7:FWLIB/src/stm32f4xx_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:FWLIB/src/stm32f4xx_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC) peripheral:
   9:FWLIB/src/stm32f4xx_adc.c ****   *           + Initialization and Configuration (in addition to ADC multi mode 
  10:FWLIB/src/stm32f4xx_adc.c ****   *             selection)
  11:FWLIB/src/stm32f4xx_adc.c ****   *           + Analog Watchdog configuration
  12:FWLIB/src/stm32f4xx_adc.c ****   *           + Temperature Sensor & Vrefint (Voltage Reference internal) & VBAT
  13:FWLIB/src/stm32f4xx_adc.c ****   *             management 
  14:FWLIB/src/stm32f4xx_adc.c ****   *           + Regular Channels Configuration
  15:FWLIB/src/stm32f4xx_adc.c ****   *           + Regular Channels DMA Configuration
  16:FWLIB/src/stm32f4xx_adc.c ****   *           + Injected channels Configuration
  17:FWLIB/src/stm32f4xx_adc.c ****   *           + Interrupts and flags management
  18:FWLIB/src/stm32f4xx_adc.c ****   *         
  19:FWLIB/src/stm32f4xx_adc.c ****   @verbatim
  20:FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================
  21:FWLIB/src/stm32f4xx_adc.c ****                      ##### How to use this driver #####
  22:FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================
  23:FWLIB/src/stm32f4xx_adc.c ****     [..]
  24:FWLIB/src/stm32f4xx_adc.c ****     (#) Enable the ADC interface clock using 
  25:FWLIB/src/stm32f4xx_adc.c ****         RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADCx, ENABLE); 
  26:FWLIB/src/stm32f4xx_adc.c ****        
  27:FWLIB/src/stm32f4xx_adc.c ****     (#) ADC pins configuration
  28:FWLIB/src/stm32f4xx_adc.c ****          (++) Enable the clock for the ADC GPIOs using the following function:
  29:FWLIB/src/stm32f4xx_adc.c ****              RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);   
  30:FWLIB/src/stm32f4xx_adc.c ****          (++) Configure these ADC pins in analog mode using GPIO_Init();  
ARM GAS  /tmp/ccVoyQ2j.s 			page 2


  31:FWLIB/src/stm32f4xx_adc.c ****   
  32:FWLIB/src/stm32f4xx_adc.c ****      (#) Configure the ADC Prescaler, conversion resolution and data 
  33:FWLIB/src/stm32f4xx_adc.c ****          alignment using the ADC_Init() function.
  34:FWLIB/src/stm32f4xx_adc.c ****      (#) Activate the ADC peripheral using ADC_Cmd() function.
  35:FWLIB/src/stm32f4xx_adc.c ****   
  36:FWLIB/src/stm32f4xx_adc.c ****      *** Regular channels group configuration ***
  37:FWLIB/src/stm32f4xx_adc.c ****      ============================================
  38:FWLIB/src/stm32f4xx_adc.c ****      [..]    
  39:FWLIB/src/stm32f4xx_adc.c ****        (+) To configure the ADC regular channels group features, use 
  40:FWLIB/src/stm32f4xx_adc.c ****            ADC_Init() and ADC_RegularChannelConfig() functions.
  41:FWLIB/src/stm32f4xx_adc.c ****        (+) To activate the continuous mode, use the ADC_continuousModeCmd()
  42:FWLIB/src/stm32f4xx_adc.c ****            function.
  43:FWLIB/src/stm32f4xx_adc.c ****        (+) To configurate and activate the Discontinuous mode, use the 
  44:FWLIB/src/stm32f4xx_adc.c ****            ADC_DiscModeChannelCountConfig() and ADC_DiscModeCmd() functions.
  45:FWLIB/src/stm32f4xx_adc.c ****        (+) To read the ADC converted values, use the ADC_GetConversionValue()
  46:FWLIB/src/stm32f4xx_adc.c ****            function.
  47:FWLIB/src/stm32f4xx_adc.c ****   
  48:FWLIB/src/stm32f4xx_adc.c ****      *** Multi mode ADCs Regular channels configuration ***
  49:FWLIB/src/stm32f4xx_adc.c ****      ======================================================
  50:FWLIB/src/stm32f4xx_adc.c ****      [..]
  51:FWLIB/src/stm32f4xx_adc.c ****        (+) Refer to "Regular channels group configuration" description to
  52:FWLIB/src/stm32f4xx_adc.c ****            configure the ADC1, ADC2 and ADC3 regular channels.        
  53:FWLIB/src/stm32f4xx_adc.c ****        (+) Select the Multi mode ADC regular channels features (dual or 
  54:FWLIB/src/stm32f4xx_adc.c ****            triple mode) using ADC_CommonInit() function and configure 
  55:FWLIB/src/stm32f4xx_adc.c ****            the DMA mode using ADC_MultiModeDMARequestAfterLastTransferCmd() 
  56:FWLIB/src/stm32f4xx_adc.c ****            functions.        
  57:FWLIB/src/stm32f4xx_adc.c ****        (+) Read the ADCs converted values using the 
  58:FWLIB/src/stm32f4xx_adc.c ****            ADC_GetMultiModeConversionValue() function.
  59:FWLIB/src/stm32f4xx_adc.c ****   
  60:FWLIB/src/stm32f4xx_adc.c ****      *** DMA for Regular channels group features configuration ***
  61:FWLIB/src/stm32f4xx_adc.c ****      ============================================================= 
  62:FWLIB/src/stm32f4xx_adc.c ****      [..]
  63:FWLIB/src/stm32f4xx_adc.c ****        (+) To enable the DMA mode for regular channels group, use the 
  64:FWLIB/src/stm32f4xx_adc.c ****            ADC_DMACmd() function.
  65:FWLIB/src/stm32f4xx_adc.c ****        (+) To enable the generation of DMA requests continuously at the end
  66:FWLIB/src/stm32f4xx_adc.c ****            of the last DMA transfer, use the ADC_DMARequestAfterLastTransferCmd() 
  67:FWLIB/src/stm32f4xx_adc.c ****            function.
  68:FWLIB/src/stm32f4xx_adc.c ****   
  69:FWLIB/src/stm32f4xx_adc.c ****      *** Injected channels group configuration ***
  70:FWLIB/src/stm32f4xx_adc.c ****      =============================================    
  71:FWLIB/src/stm32f4xx_adc.c ****      [..]
  72:FWLIB/src/stm32f4xx_adc.c ****        (+) To configure the ADC Injected channels group features, use 
  73:FWLIB/src/stm32f4xx_adc.c ****            ADC_InjectedChannelConfig() and  ADC_InjectedSequencerLengthConfig()
  74:FWLIB/src/stm32f4xx_adc.c ****            functions.
  75:FWLIB/src/stm32f4xx_adc.c ****        (+) To activate the continuous mode, use the ADC_continuousModeCmd()
  76:FWLIB/src/stm32f4xx_adc.c ****            function.
  77:FWLIB/src/stm32f4xx_adc.c ****        (+) To activate the Injected Discontinuous mode, use the 
  78:FWLIB/src/stm32f4xx_adc.c ****            ADC_InjectedDiscModeCmd() function.  
  79:FWLIB/src/stm32f4xx_adc.c ****        (+) To activate the AutoInjected mode, use the ADC_AutoInjectedConvCmd() 
  80:FWLIB/src/stm32f4xx_adc.c ****            function.        
  81:FWLIB/src/stm32f4xx_adc.c ****        (+) To read the ADC converted values, use the ADC_GetInjectedConversionValue() 
  82:FWLIB/src/stm32f4xx_adc.c ****            function.
  83:FWLIB/src/stm32f4xx_adc.c ****   
  84:FWLIB/src/stm32f4xx_adc.c ****     @endverbatim
  85:FWLIB/src/stm32f4xx_adc.c ****   ******************************************************************************
  86:FWLIB/src/stm32f4xx_adc.c ****   * @attention
  87:FWLIB/src/stm32f4xx_adc.c ****   *
ARM GAS  /tmp/ccVoyQ2j.s 			page 3


  88:FWLIB/src/stm32f4xx_adc.c ****   * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
  89:FWLIB/src/stm32f4xx_adc.c ****   *
  90:FWLIB/src/stm32f4xx_adc.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  91:FWLIB/src/stm32f4xx_adc.c ****   * You may not use this file except in compliance with the License.
  92:FWLIB/src/stm32f4xx_adc.c ****   * You may obtain a copy of the License at:
  93:FWLIB/src/stm32f4xx_adc.c ****   *
  94:FWLIB/src/stm32f4xx_adc.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  95:FWLIB/src/stm32f4xx_adc.c ****   *
  96:FWLIB/src/stm32f4xx_adc.c ****   * Unless required by applicable law or agreed to in writing, software 
  97:FWLIB/src/stm32f4xx_adc.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  98:FWLIB/src/stm32f4xx_adc.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  99:FWLIB/src/stm32f4xx_adc.c ****   * See the License for the specific language governing permissions and
 100:FWLIB/src/stm32f4xx_adc.c ****   * limitations under the License.
 101:FWLIB/src/stm32f4xx_adc.c ****   *
 102:FWLIB/src/stm32f4xx_adc.c ****   ******************************************************************************
 103:FWLIB/src/stm32f4xx_adc.c ****   */ 
 104:FWLIB/src/stm32f4xx_adc.c **** 
 105:FWLIB/src/stm32f4xx_adc.c **** /* Includes ------------------------------------------------------------------*/
 106:FWLIB/src/stm32f4xx_adc.c **** #include "stm32f4xx_adc.h"
 107:FWLIB/src/stm32f4xx_adc.c **** #include "stm32f4xx_rcc.h"
 108:FWLIB/src/stm32f4xx_adc.c **** 
 109:FWLIB/src/stm32f4xx_adc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 110:FWLIB/src/stm32f4xx_adc.c ****   * @{
 111:FWLIB/src/stm32f4xx_adc.c ****   */
 112:FWLIB/src/stm32f4xx_adc.c **** 
 113:FWLIB/src/stm32f4xx_adc.c **** /** @defgroup ADC 
 114:FWLIB/src/stm32f4xx_adc.c ****   * @brief ADC driver modules
 115:FWLIB/src/stm32f4xx_adc.c ****   * @{
 116:FWLIB/src/stm32f4xx_adc.c ****   */ 
 117:FWLIB/src/stm32f4xx_adc.c **** 
 118:FWLIB/src/stm32f4xx_adc.c **** /* Private typedef -----------------------------------------------------------*/
 119:FWLIB/src/stm32f4xx_adc.c **** /* Private define ------------------------------------------------------------*/ 
 120:FWLIB/src/stm32f4xx_adc.c **** 
 121:FWLIB/src/stm32f4xx_adc.c **** /* ADC DISCNUM mask */
 122:FWLIB/src/stm32f4xx_adc.c **** #define CR1_DISCNUM_RESET         ((uint32_t)0xFFFF1FFF)
 123:FWLIB/src/stm32f4xx_adc.c **** 
 124:FWLIB/src/stm32f4xx_adc.c **** /* ADC AWDCH mask */
 125:FWLIB/src/stm32f4xx_adc.c **** #define CR1_AWDCH_RESET           ((uint32_t)0xFFFFFFE0)   
 126:FWLIB/src/stm32f4xx_adc.c **** 
 127:FWLIB/src/stm32f4xx_adc.c **** /* ADC Analog watchdog enable mode mask */
 128:FWLIB/src/stm32f4xx_adc.c **** #define CR1_AWDMode_RESET         ((uint32_t)0xFF3FFDFF)   
 129:FWLIB/src/stm32f4xx_adc.c **** 
 130:FWLIB/src/stm32f4xx_adc.c **** /* CR1 register Mask */
 131:FWLIB/src/stm32f4xx_adc.c **** #define CR1_CLEAR_MASK            ((uint32_t)0xFCFFFEFF)
 132:FWLIB/src/stm32f4xx_adc.c **** 
 133:FWLIB/src/stm32f4xx_adc.c **** /* ADC EXTEN mask */
 134:FWLIB/src/stm32f4xx_adc.c **** #define CR2_EXTEN_RESET           ((uint32_t)0xCFFFFFFF)  
 135:FWLIB/src/stm32f4xx_adc.c **** 
 136:FWLIB/src/stm32f4xx_adc.c **** /* ADC JEXTEN mask */
 137:FWLIB/src/stm32f4xx_adc.c **** #define CR2_JEXTEN_RESET          ((uint32_t)0xFFCFFFFF)  
 138:FWLIB/src/stm32f4xx_adc.c **** 
 139:FWLIB/src/stm32f4xx_adc.c **** /* ADC JEXTSEL mask */
 140:FWLIB/src/stm32f4xx_adc.c **** #define CR2_JEXTSEL_RESET         ((uint32_t)0xFFF0FFFF)  
 141:FWLIB/src/stm32f4xx_adc.c **** 
 142:FWLIB/src/stm32f4xx_adc.c **** /* CR2 register Mask */
 143:FWLIB/src/stm32f4xx_adc.c **** #define CR2_CLEAR_MASK            ((uint32_t)0xC0FFF7FD)
 144:FWLIB/src/stm32f4xx_adc.c **** 
ARM GAS  /tmp/ccVoyQ2j.s 			page 4


 145:FWLIB/src/stm32f4xx_adc.c **** /* ADC SQx mask */
 146:FWLIB/src/stm32f4xx_adc.c **** #define SQR3_SQ_SET               ((uint32_t)0x0000001F)  
 147:FWLIB/src/stm32f4xx_adc.c **** #define SQR2_SQ_SET               ((uint32_t)0x0000001F)  
 148:FWLIB/src/stm32f4xx_adc.c **** #define SQR1_SQ_SET               ((uint32_t)0x0000001F)  
 149:FWLIB/src/stm32f4xx_adc.c **** 
 150:FWLIB/src/stm32f4xx_adc.c **** /* ADC L Mask */
 151:FWLIB/src/stm32f4xx_adc.c **** #define SQR1_L_RESET              ((uint32_t)0xFF0FFFFF) 
 152:FWLIB/src/stm32f4xx_adc.c **** 
 153:FWLIB/src/stm32f4xx_adc.c **** /* ADC JSQx mask */
 154:FWLIB/src/stm32f4xx_adc.c **** #define JSQR_JSQ_SET              ((uint32_t)0x0000001F) 
 155:FWLIB/src/stm32f4xx_adc.c **** 
 156:FWLIB/src/stm32f4xx_adc.c **** /* ADC JL mask */
 157:FWLIB/src/stm32f4xx_adc.c **** #define JSQR_JL_SET               ((uint32_t)0x00300000) 
 158:FWLIB/src/stm32f4xx_adc.c **** #define JSQR_JL_RESET             ((uint32_t)0xFFCFFFFF) 
 159:FWLIB/src/stm32f4xx_adc.c **** 
 160:FWLIB/src/stm32f4xx_adc.c **** /* ADC SMPx mask */
 161:FWLIB/src/stm32f4xx_adc.c **** #define SMPR1_SMP_SET             ((uint32_t)0x00000007)  
 162:FWLIB/src/stm32f4xx_adc.c **** #define SMPR2_SMP_SET             ((uint32_t)0x00000007) 
 163:FWLIB/src/stm32f4xx_adc.c **** 
 164:FWLIB/src/stm32f4xx_adc.c **** /* ADC JDRx registers offset */
 165:FWLIB/src/stm32f4xx_adc.c **** #define JDR_OFFSET                ((uint8_t)0x28) 
 166:FWLIB/src/stm32f4xx_adc.c **** 
 167:FWLIB/src/stm32f4xx_adc.c **** /* ADC CDR register base address */
 168:FWLIB/src/stm32f4xx_adc.c **** #define CDR_ADDRESS               ((uint32_t)0x40012308)   
 169:FWLIB/src/stm32f4xx_adc.c **** 
 170:FWLIB/src/stm32f4xx_adc.c **** /* ADC CCR register Mask */
 171:FWLIB/src/stm32f4xx_adc.c **** #define CR_CLEAR_MASK             ((uint32_t)0xFFFC30E0)  
 172:FWLIB/src/stm32f4xx_adc.c **** 
 173:FWLIB/src/stm32f4xx_adc.c **** /* Private macro -------------------------------------------------------------*/
 174:FWLIB/src/stm32f4xx_adc.c **** /* Private variables ---------------------------------------------------------*/
 175:FWLIB/src/stm32f4xx_adc.c **** /* Private function prototypes -----------------------------------------------*/
 176:FWLIB/src/stm32f4xx_adc.c **** /* Private functions ---------------------------------------------------------*/
 177:FWLIB/src/stm32f4xx_adc.c **** 
 178:FWLIB/src/stm32f4xx_adc.c **** /** @defgroup ADC_Private_Functions
 179:FWLIB/src/stm32f4xx_adc.c ****   * @{
 180:FWLIB/src/stm32f4xx_adc.c ****   */ 
 181:FWLIB/src/stm32f4xx_adc.c **** 
 182:FWLIB/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group1 Initialization and Configuration functions
 183:FWLIB/src/stm32f4xx_adc.c ****  *  @brief    Initialization and Configuration functions 
 184:FWLIB/src/stm32f4xx_adc.c ****  *
 185:FWLIB/src/stm32f4xx_adc.c **** @verbatim    
 186:FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================
 187:FWLIB/src/stm32f4xx_adc.c ****               ##### Initialization and Configuration functions #####
 188:FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================
 189:FWLIB/src/stm32f4xx_adc.c ****     [..]  This section provides functions allowing to:
 190:FWLIB/src/stm32f4xx_adc.c ****       (+) Initialize and configure the ADC Prescaler
 191:FWLIB/src/stm32f4xx_adc.c ****       (+) ADC Conversion Resolution (12bit..6bit)
 192:FWLIB/src/stm32f4xx_adc.c ****       (+) Scan Conversion Mode (multichannel or one channel) for regular group
 193:FWLIB/src/stm32f4xx_adc.c ****       (+) ADC Continuous Conversion Mode (Continuous or Single conversion) for 
 194:FWLIB/src/stm32f4xx_adc.c ****           regular group
 195:FWLIB/src/stm32f4xx_adc.c ****       (+) External trigger Edge and source of regular group, 
 196:FWLIB/src/stm32f4xx_adc.c ****       (+) Converted data alignment (left or right)
 197:FWLIB/src/stm32f4xx_adc.c ****       (+) The number of ADC conversions that will be done using the sequencer for 
 198:FWLIB/src/stm32f4xx_adc.c ****           regular channel group
 199:FWLIB/src/stm32f4xx_adc.c ****       (+) Multi ADC mode selection
 200:FWLIB/src/stm32f4xx_adc.c ****       (+) Direct memory access mode selection for multi ADC mode  
 201:FWLIB/src/stm32f4xx_adc.c ****       (+) Delay between 2 sampling phases (used in dual or triple interleaved modes)
ARM GAS  /tmp/ccVoyQ2j.s 			page 5


 202:FWLIB/src/stm32f4xx_adc.c ****       (+) Enable or disable the ADC peripheral   
 203:FWLIB/src/stm32f4xx_adc.c **** @endverbatim
 204:FWLIB/src/stm32f4xx_adc.c ****   * @{
 205:FWLIB/src/stm32f4xx_adc.c ****   */
 206:FWLIB/src/stm32f4xx_adc.c **** 
 207:FWLIB/src/stm32f4xx_adc.c **** /**
 208:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Deinitializes all ADCs peripherals registers to their default reset 
 209:FWLIB/src/stm32f4xx_adc.c ****   *         values.
 210:FWLIB/src/stm32f4xx_adc.c ****   * @param  None
 211:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 212:FWLIB/src/stm32f4xx_adc.c ****   */
 213:FWLIB/src/stm32f4xx_adc.c **** void ADC_DeInit(void)
 214:FWLIB/src/stm32f4xx_adc.c **** {
  29              		.loc 1 214 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 08B5     		push	{r3, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 3, -8
  37              		.cfi_offset 14, -4
 215:FWLIB/src/stm32f4xx_adc.c ****   /* Enable all ADCs reset state */
 216:FWLIB/src/stm32f4xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
  38              		.loc 1 216 3 view .LVU1
  39 0002 0121     		movs	r1, #1
  40 0004 4FF48070 		mov	r0, #256
  41 0008 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  42              	.LVL0:
 217:FWLIB/src/stm32f4xx_adc.c ****   
 218:FWLIB/src/stm32f4xx_adc.c ****   /* Release all ADCs from reset state */
 219:FWLIB/src/stm32f4xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
  43              		.loc 1 219 3 view .LVU2
  44 000c 0021     		movs	r1, #0
  45 000e 4FF48070 		mov	r0, #256
  46 0012 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  47              	.LVL1:
 220:FWLIB/src/stm32f4xx_adc.c **** }
  48              		.loc 1 220 1 is_stmt 0 view .LVU3
  49 0016 08BD     		pop	{r3, pc}
  50              		.cfi_endproc
  51              	.LFE123:
  53              		.section	.text.ADC_Init,"ax",%progbits
  54              		.align	1
  55              		.global	ADC_Init
  56              		.syntax unified
  57              		.thumb
  58              		.thumb_func
  59              		.fpu fpv4-sp-d16
  61              	ADC_Init:
  62              	.LVL2:
  63              	.LFB124:
 221:FWLIB/src/stm32f4xx_adc.c **** 
 222:FWLIB/src/stm32f4xx_adc.c **** /**
 223:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Initializes the ADCx peripheral according to the specified parameters 
 224:FWLIB/src/stm32f4xx_adc.c ****   *         in the ADC_InitStruct.
 225:FWLIB/src/stm32f4xx_adc.c ****   * @note   This function is used to configure the global features of the ADC ( 
ARM GAS  /tmp/ccVoyQ2j.s 			page 6


 226:FWLIB/src/stm32f4xx_adc.c ****   *         Resolution and Data Alignment), however, the rest of the configuration
 227:FWLIB/src/stm32f4xx_adc.c ****   *         parameters are specific to the regular channels group (scan mode 
 228:FWLIB/src/stm32f4xx_adc.c ****   *         activation, continuous mode activation, External trigger source and 
 229:FWLIB/src/stm32f4xx_adc.c ****   *         edge, number of conversion in the regular channels group sequencer).  
 230:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 231:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
 232:FWLIB/src/stm32f4xx_adc.c ****   *         the configuration information for the specified ADC peripheral.
 233:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 234:FWLIB/src/stm32f4xx_adc.c ****   */
 235:FWLIB/src/stm32f4xx_adc.c **** void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
 236:FWLIB/src/stm32f4xx_adc.c **** {
  64              		.loc 1 236 1 is_stmt 1 view -0
  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 0
  67              		@ frame_needed = 0, uses_anonymous_args = 0
  68              		@ link register save eliminated.
  69              		.loc 1 236 1 is_stmt 0 view .LVU5
  70 0000 10B4     		push	{r4}
  71              	.LCFI1:
  72              		.cfi_def_cfa_offset 4
  73              		.cfi_offset 4, -4
 237:FWLIB/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
  74              		.loc 1 237 3 is_stmt 1 view .LVU6
  75              	.LVL3:
 238:FWLIB/src/stm32f4xx_adc.c ****   uint8_t tmpreg2 = 0;
  76              		.loc 1 238 3 view .LVU7
 239:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 240:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
  77              		.loc 1 240 3 view .LVU8
 241:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_RESOLUTION(ADC_InitStruct->ADC_Resolution)); 
  78              		.loc 1 241 3 view .LVU9
 242:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ScanConvMode));
  79              		.loc 1 242 3 view .LVU10
 243:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ContinuousConvMode)); 
  80              		.loc 1 243 3 view .LVU11
 244:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(ADC_InitStruct->ADC_ExternalTrigConvEdge)); 
  81              		.loc 1 244 3 view .LVU12
 245:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_TRIG(ADC_InitStruct->ADC_ExternalTrigConv));    
  82              		.loc 1 245 3 view .LVU13
 246:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  83              		.loc 1 246 3 view .LVU14
 247:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  84              		.loc 1 247 3 view .LVU15
 248:FWLIB/src/stm32f4xx_adc.c ****   
 249:FWLIB/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx CR1 Configuration -----------------*/
 250:FWLIB/src/stm32f4xx_adc.c ****   /* Get the ADCx CR1 value */
 251:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR1;
  85              		.loc 1 251 3 view .LVU16
  86              		.loc 1 251 11 is_stmt 0 view .LVU17
  87 0002 4268     		ldr	r2, [r0, #4]
  88              	.LVL4:
 252:FWLIB/src/stm32f4xx_adc.c ****   
 253:FWLIB/src/stm32f4xx_adc.c ****   /* Clear RES and SCAN bits */
 254:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 &= CR1_CLEAR_MASK;
  89              		.loc 1 254 3 is_stmt 1 view .LVU18
  90              		.loc 1 254 11 is_stmt 0 view .LVU19
  91 0004 22F04072 		bic	r2, r2, #50331648
ARM GAS  /tmp/ccVoyQ2j.s 			page 7


  92              	.LVL5:
  93              		.loc 1 254 11 view .LVU20
  94 0008 22F48072 		bic	r2, r2, #256
  95              	.LVL6:
 255:FWLIB/src/stm32f4xx_adc.c ****   
 256:FWLIB/src/stm32f4xx_adc.c ****   /* Configure ADCx: scan conversion mode and resolution */
 257:FWLIB/src/stm32f4xx_adc.c ****   /* Set SCAN bit according to ADC_ScanConvMode value */
 258:FWLIB/src/stm32f4xx_adc.c ****   /* Set RES bit according to ADC_Resolution value */ 
 259:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
  96              		.loc 1 259 3 is_stmt 1 view .LVU21
  97              		.loc 1 259 50 is_stmt 0 view .LVU22
  98 000c 0C79     		ldrb	r4, [r1, #4]	@ zero_extendqisi2
 260:FWLIB/src/stm32f4xx_adc.c ****                                    ADC_InitStruct->ADC_Resolution);
  99              		.loc 1 260 50 view .LVU23
 100 000e 0B68     		ldr	r3, [r1]
 259:FWLIB/src/stm32f4xx_adc.c ****                                    ADC_InitStruct->ADC_Resolution);
 101              		.loc 1 259 14 view .LVU24
 102 0010 43EA0423 		orr	r3, r3, r4, lsl #8
 259:FWLIB/src/stm32f4xx_adc.c ****                                    ADC_InitStruct->ADC_Resolution);
 103              		.loc 1 259 11 view .LVU25
 104 0014 1343     		orrs	r3, r3, r2
 105              	.LVL7:
 261:FWLIB/src/stm32f4xx_adc.c ****   /* Write to ADCx CR1 */
 262:FWLIB/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg1;
 106              		.loc 1 262 3 is_stmt 1 view .LVU26
 107              		.loc 1 262 13 is_stmt 0 view .LVU27
 108 0016 4360     		str	r3, [r0, #4]
 263:FWLIB/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx CR2 Configuration -----------------*/
 264:FWLIB/src/stm32f4xx_adc.c ****   /* Get the ADCx CR2 value */
 265:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR2;
 109              		.loc 1 265 3 is_stmt 1 view .LVU28
 110              		.loc 1 265 11 is_stmt 0 view .LVU29
 111 0018 8368     		ldr	r3, [r0, #8]
 112              	.LVL8:
 266:FWLIB/src/stm32f4xx_adc.c ****   
 267:FWLIB/src/stm32f4xx_adc.c ****   /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
 268:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 &= CR2_CLEAR_MASK;
 113              		.loc 1 268 3 is_stmt 1 view .LVU30
 114              		.loc 1 268 11 is_stmt 0 view .LVU31
 115 001a 0C4A     		ldr	r2, .L5
 116 001c 1A40     		ands	r2, r2, r3
 117              	.LVL9:
 269:FWLIB/src/stm32f4xx_adc.c ****   
 270:FWLIB/src/stm32f4xx_adc.c ****   /* Configure ADCx: external trigger event and edge, data alignment and 
 271:FWLIB/src/stm32f4xx_adc.c ****      continuous conversion mode */
 272:FWLIB/src/stm32f4xx_adc.c ****   /* Set ALIGN bit according to ADC_DataAlign value */
 273:FWLIB/src/stm32f4xx_adc.c ****   /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
 274:FWLIB/src/stm32f4xx_adc.c ****   /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
 275:FWLIB/src/stm32f4xx_adc.c ****   /* Set CONT bit according to ADC_ContinuousConvMode value */
 276:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 118              		.loc 1 276 3 is_stmt 1 view .LVU32
 119              		.loc 1 276 39 is_stmt 0 view .LVU33
 120 001e 0B69     		ldr	r3, [r1, #16]
 277:FWLIB/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 121              		.loc 1 277 39 view .LVU34
 122 0020 CC68     		ldr	r4, [r1, #12]
 276:FWLIB/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
ARM GAS  /tmp/ccVoyQ2j.s 			page 8


 123              		.loc 1 276 55 view .LVU35
 124 0022 2343     		orrs	r3, r3, r4
 278:FWLIB/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 125              		.loc 1 278 39 view .LVU36
 126 0024 8C68     		ldr	r4, [r1, #8]
 277:FWLIB/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 127              		.loc 1 277 62 view .LVU37
 128 0026 2343     		orrs	r3, r3, r4
 279:FWLIB/src/stm32f4xx_adc.c ****                         ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 129              		.loc 1 279 50 view .LVU38
 130 0028 4C79     		ldrb	r4, [r1, #5]	@ zero_extendqisi2
 276:FWLIB/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 131              		.loc 1 276 14 view .LVU39
 132 002a 43EA4403 		orr	r3, r3, r4, lsl #1
 276:FWLIB/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 133              		.loc 1 276 11 view .LVU40
 134 002e 1343     		orrs	r3, r3, r2
 135              	.LVL10:
 280:FWLIB/src/stm32f4xx_adc.c ****                         
 281:FWLIB/src/stm32f4xx_adc.c ****   /* Write to ADCx CR2 */
 282:FWLIB/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg1;
 136              		.loc 1 282 3 is_stmt 1 view .LVU41
 137              		.loc 1 282 13 is_stmt 0 view .LVU42
 138 0030 8360     		str	r3, [r0, #8]
 283:FWLIB/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx SQR1 Configuration -----------------*/
 284:FWLIB/src/stm32f4xx_adc.c ****   /* Get the ADCx SQR1 value */
 285:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->SQR1;
 139              		.loc 1 285 3 is_stmt 1 view .LVU43
 140              		.loc 1 285 11 is_stmt 0 view .LVU44
 141 0032 C36A     		ldr	r3, [r0, #44]
 142              	.LVL11:
 286:FWLIB/src/stm32f4xx_adc.c ****   
 287:FWLIB/src/stm32f4xx_adc.c ****   /* Clear L bits */
 288:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 &= SQR1_L_RESET;
 143              		.loc 1 288 3 is_stmt 1 view .LVU45
 144              		.loc 1 288 11 is_stmt 0 view .LVU46
 145 0034 23F47003 		bic	r3, r3, #15728640
 146              	.LVL12:
 289:FWLIB/src/stm32f4xx_adc.c ****   
 290:FWLIB/src/stm32f4xx_adc.c ****   /* Configure ADCx: regular channel sequence length */
 291:FWLIB/src/stm32f4xx_adc.c ****   /* Set L bits according to ADC_NbrOfConversion value */
 292:FWLIB/src/stm32f4xx_adc.c ****   tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 147              		.loc 1 292 3 is_stmt 1 view .LVU47
 148              		.loc 1 292 38 is_stmt 0 view .LVU48
 149 0038 0A7D     		ldrb	r2, [r1, #20]	@ zero_extendqisi2
 150              		.loc 1 292 14 view .LVU49
 151 003a 013A     		subs	r2, r2, #1
 152 003c D2B2     		uxtb	r2, r2
 153              	.LVL13:
 293:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 154              		.loc 1 293 3 is_stmt 1 view .LVU50
 155              		.loc 1 293 11 is_stmt 0 view .LVU51
 156 003e 43EA0253 		orr	r3, r3, r2, lsl #20
 157              	.LVL14:
 294:FWLIB/src/stm32f4xx_adc.c ****   
 295:FWLIB/src/stm32f4xx_adc.c ****   /* Write to ADCx SQR1 */
 296:FWLIB/src/stm32f4xx_adc.c ****   ADCx->SQR1 = tmpreg1;
ARM GAS  /tmp/ccVoyQ2j.s 			page 9


 158              		.loc 1 296 3 is_stmt 1 view .LVU52
 159              		.loc 1 296 14 is_stmt 0 view .LVU53
 160 0042 C362     		str	r3, [r0, #44]
 297:FWLIB/src/stm32f4xx_adc.c **** }
 161              		.loc 1 297 1 view .LVU54
 162 0044 5DF8044B 		ldr	r4, [sp], #4
 163              	.LCFI2:
 164              		.cfi_restore 4
 165              		.cfi_def_cfa_offset 0
 166 0048 7047     		bx	lr
 167              	.L6:
 168 004a 00BF     		.align	2
 169              	.L5:
 170 004c FDF7FFC0 		.word	-1056966659
 171              		.cfi_endproc
 172              	.LFE124:
 174              		.section	.text.ADC_StructInit,"ax",%progbits
 175              		.align	1
 176              		.global	ADC_StructInit
 177              		.syntax unified
 178              		.thumb
 179              		.thumb_func
 180              		.fpu fpv4-sp-d16
 182              	ADC_StructInit:
 183              	.LVL15:
 184              	.LFB125:
 298:FWLIB/src/stm32f4xx_adc.c **** 
 299:FWLIB/src/stm32f4xx_adc.c **** /**
 300:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Fills each ADC_InitStruct member with its default value.
 301:FWLIB/src/stm32f4xx_adc.c ****   * @note   This function is used to initialize the global features of the ADC ( 
 302:FWLIB/src/stm32f4xx_adc.c ****   *         Resolution and Data Alignment), however, the rest of the configuration
 303:FWLIB/src/stm32f4xx_adc.c ****   *         parameters are specific to the regular channels group (scan mode 
 304:FWLIB/src/stm32f4xx_adc.c ****   *         activation, continuous mode activation, External trigger source and 
 305:FWLIB/src/stm32f4xx_adc.c ****   *         edge, number of conversion in the regular channels group sequencer).  
 306:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
 307:FWLIB/src/stm32f4xx_adc.c ****   *         be initialized.
 308:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 309:FWLIB/src/stm32f4xx_adc.c ****   */
 310:FWLIB/src/stm32f4xx_adc.c **** void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
 311:FWLIB/src/stm32f4xx_adc.c **** {
 185              		.loc 1 311 1 is_stmt 1 view -0
 186              		.cfi_startproc
 187              		@ args = 0, pretend = 0, frame = 0
 188              		@ frame_needed = 0, uses_anonymous_args = 0
 189              		@ link register save eliminated.
 312:FWLIB/src/stm32f4xx_adc.c ****   /* Initialize the ADC_Mode member */
 313:FWLIB/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 190              		.loc 1 313 3 view .LVU56
 191              		.loc 1 313 34 is_stmt 0 view .LVU57
 192 0000 0023     		movs	r3, #0
 193 0002 0360     		str	r3, [r0]
 314:FWLIB/src/stm32f4xx_adc.c **** 
 315:FWLIB/src/stm32f4xx_adc.c ****   /* initialize the ADC_ScanConvMode member */
 316:FWLIB/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 194              		.loc 1 316 3 is_stmt 1 view .LVU58
 195              		.loc 1 316 36 is_stmt 0 view .LVU59
 196 0004 0371     		strb	r3, [r0, #4]
ARM GAS  /tmp/ccVoyQ2j.s 			page 10


 317:FWLIB/src/stm32f4xx_adc.c **** 
 318:FWLIB/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ContinuousConvMode member */
 319:FWLIB/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 197              		.loc 1 319 3 is_stmt 1 view .LVU60
 198              		.loc 1 319 42 is_stmt 0 view .LVU61
 199 0006 4371     		strb	r3, [r0, #5]
 320:FWLIB/src/stm32f4xx_adc.c **** 
 321:FWLIB/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ExternalTrigConvEdge member */
 322:FWLIB/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 200              		.loc 1 322 3 is_stmt 1 view .LVU62
 201              		.loc 1 322 44 is_stmt 0 view .LVU63
 202 0008 8360     		str	r3, [r0, #8]
 323:FWLIB/src/stm32f4xx_adc.c **** 
 324:FWLIB/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ExternalTrigConv member */
 325:FWLIB/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 203              		.loc 1 325 3 is_stmt 1 view .LVU64
 204              		.loc 1 325 40 is_stmt 0 view .LVU65
 205 000a C360     		str	r3, [r0, #12]
 326:FWLIB/src/stm32f4xx_adc.c **** 
 327:FWLIB/src/stm32f4xx_adc.c ****   /* Initialize the ADC_DataAlign member */
 328:FWLIB/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 206              		.loc 1 328 3 is_stmt 1 view .LVU66
 207              		.loc 1 328 33 is_stmt 0 view .LVU67
 208 000c 0361     		str	r3, [r0, #16]
 329:FWLIB/src/stm32f4xx_adc.c **** 
 330:FWLIB/src/stm32f4xx_adc.c ****   /* Initialize the ADC_NbrOfConversion member */
 331:FWLIB/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_NbrOfConversion = 1;
 209              		.loc 1 331 3 is_stmt 1 view .LVU68
 210              		.loc 1 331 39 is_stmt 0 view .LVU69
 211 000e 0123     		movs	r3, #1
 212 0010 0375     		strb	r3, [r0, #20]
 332:FWLIB/src/stm32f4xx_adc.c **** }
 213              		.loc 1 332 1 view .LVU70
 214 0012 7047     		bx	lr
 215              		.cfi_endproc
 216              	.LFE125:
 218              		.section	.text.ADC_CommonInit,"ax",%progbits
 219              		.align	1
 220              		.global	ADC_CommonInit
 221              		.syntax unified
 222              		.thumb
 223              		.thumb_func
 224              		.fpu fpv4-sp-d16
 226              	ADC_CommonInit:
 227              	.LVL16:
 228              	.LFB126:
 333:FWLIB/src/stm32f4xx_adc.c **** 
 334:FWLIB/src/stm32f4xx_adc.c **** /**
 335:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Initializes the ADCs peripherals according to the specified parameters 
 336:FWLIB/src/stm32f4xx_adc.c ****   *         in the ADC_CommonInitStruct.
 337:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
 338:FWLIB/src/stm32f4xx_adc.c ****   *         that contains the configuration information for  All ADCs peripherals.
 339:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 340:FWLIB/src/stm32f4xx_adc.c ****   */
 341:FWLIB/src/stm32f4xx_adc.c **** void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
 342:FWLIB/src/stm32f4xx_adc.c **** {
 229              		.loc 1 342 1 is_stmt 1 view -0
ARM GAS  /tmp/ccVoyQ2j.s 			page 11


 230              		.cfi_startproc
 231              		@ args = 0, pretend = 0, frame = 0
 232              		@ frame_needed = 0, uses_anonymous_args = 0
 233              		@ link register save eliminated.
 234              		.loc 1 342 1 is_stmt 0 view .LVU72
 235 0000 10B4     		push	{r4}
 236              	.LCFI3:
 237              		.cfi_def_cfa_offset 4
 238              		.cfi_offset 4, -4
 343:FWLIB/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 239              		.loc 1 343 3 is_stmt 1 view .LVU73
 240              	.LVL17:
 344:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 345:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_MODE(ADC_CommonInitStruct->ADC_Mode));
 241              		.loc 1 345 3 view .LVU74
 346:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
 242              		.loc 1 346 3 view .LVU75
 347:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
 243              		.loc 1 347 3 view .LVU76
 348:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
 244              		.loc 1 348 3 view .LVU77
 349:FWLIB/src/stm32f4xx_adc.c ****   /*---------------------------- ADC CCR Configuration -----------------*/
 350:FWLIB/src/stm32f4xx_adc.c ****   /* Get the ADC CCR value */
 351:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 = ADC->CCR;
 245              		.loc 1 351 3 view .LVU78
 246              		.loc 1 351 11 is_stmt 0 view .LVU79
 247 0002 0849     		ldr	r1, .L10
 248 0004 4B68     		ldr	r3, [r1, #4]
 249              	.LVL18:
 352:FWLIB/src/stm32f4xx_adc.c ****   
 353:FWLIB/src/stm32f4xx_adc.c ****   /* Clear MULTI, DELAY, DMA and ADCPRE bits */
 354:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 &= CR_CLEAR_MASK;
 250              		.loc 1 354 3 is_stmt 1 view .LVU80
 251              		.loc 1 354 11 is_stmt 0 view .LVU81
 252 0006 084A     		ldr	r2, .L10+4
 253 0008 1A40     		ands	r2, r2, r3
 254              	.LVL19:
 355:FWLIB/src/stm32f4xx_adc.c ****   
 356:FWLIB/src/stm32f4xx_adc.c ****   /* Configure ADCx: Multi mode, Delay between two sampling time, ADC prescaler,
 357:FWLIB/src/stm32f4xx_adc.c ****      and DMA access mode for multimode */
 358:FWLIB/src/stm32f4xx_adc.c ****   /* Set MULTI bits according to ADC_Mode value */
 359:FWLIB/src/stm32f4xx_adc.c ****   /* Set ADCPRE bits according to ADC_Prescaler value */
 360:FWLIB/src/stm32f4xx_adc.c ****   /* Set DMA bits according to ADC_DMAAccessMode value */
 361:FWLIB/src/stm32f4xx_adc.c ****   /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
 362:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 255              		.loc 1 362 3 is_stmt 1 view .LVU82
 256              		.loc 1 362 45 is_stmt 0 view .LVU83
 257 000a 0368     		ldr	r3, [r0]
 363:FWLIB/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 258              		.loc 1 363 45 view .LVU84
 259 000c 4468     		ldr	r4, [r0, #4]
 362:FWLIB/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 260              		.loc 1 362 56 view .LVU85
 261 000e 2343     		orrs	r3, r3, r4
 364:FWLIB/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_DMAAccessMode | 
 262              		.loc 1 364 45 view .LVU86
 263 0010 8468     		ldr	r4, [r0, #8]
ARM GAS  /tmp/ccVoyQ2j.s 			page 12


 363:FWLIB/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 264              		.loc 1 363 61 view .LVU87
 265 0012 2343     		orrs	r3, r3, r4
 365:FWLIB/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 266              		.loc 1 365 45 view .LVU88
 267 0014 C068     		ldr	r0, [r0, #12]
 268              	.LVL20:
 364:FWLIB/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_DMAAccessMode | 
 269              		.loc 1 364 65 view .LVU89
 270 0016 0343     		orrs	r3, r3, r0
 362:FWLIB/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 271              		.loc 1 362 11 view .LVU90
 272 0018 1343     		orrs	r3, r3, r2
 273              	.LVL21:
 366:FWLIB/src/stm32f4xx_adc.c ****                         
 367:FWLIB/src/stm32f4xx_adc.c ****   /* Write to ADC CCR */
 368:FWLIB/src/stm32f4xx_adc.c ****   ADC->CCR = tmpreg1;
 274              		.loc 1 368 3 is_stmt 1 view .LVU91
 275              		.loc 1 368 12 is_stmt 0 view .LVU92
 276 001a 4B60     		str	r3, [r1, #4]
 369:FWLIB/src/stm32f4xx_adc.c **** }
 277              		.loc 1 369 1 view .LVU93
 278 001c 5DF8044B 		ldr	r4, [sp], #4
 279              	.LCFI4:
 280              		.cfi_restore 4
 281              		.cfi_def_cfa_offset 0
 282 0020 7047     		bx	lr
 283              	.L11:
 284 0022 00BF     		.align	2
 285              	.L10:
 286 0024 00230140 		.word	1073816320
 287 0028 E030FCFF 		.word	-249632
 288              		.cfi_endproc
 289              	.LFE126:
 291              		.section	.text.ADC_CommonStructInit,"ax",%progbits
 292              		.align	1
 293              		.global	ADC_CommonStructInit
 294              		.syntax unified
 295              		.thumb
 296              		.thumb_func
 297              		.fpu fpv4-sp-d16
 299              	ADC_CommonStructInit:
 300              	.LVL22:
 301              	.LFB127:
 370:FWLIB/src/stm32f4xx_adc.c **** 
 371:FWLIB/src/stm32f4xx_adc.c **** /**
 372:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Fills each ADC_CommonInitStruct member with its default value.
 373:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
 374:FWLIB/src/stm32f4xx_adc.c ****   *         which will be initialized.
 375:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 376:FWLIB/src/stm32f4xx_adc.c ****   */
 377:FWLIB/src/stm32f4xx_adc.c **** void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
 378:FWLIB/src/stm32f4xx_adc.c **** {
 302              		.loc 1 378 1 is_stmt 1 view -0
 303              		.cfi_startproc
 304              		@ args = 0, pretend = 0, frame = 0
 305              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccVoyQ2j.s 			page 13


 306              		@ link register save eliminated.
 379:FWLIB/src/stm32f4xx_adc.c ****   /* Initialize the ADC_Mode member */
 380:FWLIB/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 307              		.loc 1 380 3 view .LVU95
 308              		.loc 1 380 34 is_stmt 0 view .LVU96
 309 0000 0023     		movs	r3, #0
 310 0002 0360     		str	r3, [r0]
 381:FWLIB/src/stm32f4xx_adc.c **** 
 382:FWLIB/src/stm32f4xx_adc.c ****   /* initialize the ADC_Prescaler member */
 383:FWLIB/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 311              		.loc 1 383 3 is_stmt 1 view .LVU97
 312              		.loc 1 383 39 is_stmt 0 view .LVU98
 313 0004 4360     		str	r3, [r0, #4]
 384:FWLIB/src/stm32f4xx_adc.c **** 
 385:FWLIB/src/stm32f4xx_adc.c ****   /* Initialize the ADC_DMAAccessMode member */
 386:FWLIB/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 314              		.loc 1 386 3 is_stmt 1 view .LVU99
 315              		.loc 1 386 43 is_stmt 0 view .LVU100
 316 0006 8360     		str	r3, [r0, #8]
 387:FWLIB/src/stm32f4xx_adc.c **** 
 388:FWLIB/src/stm32f4xx_adc.c ****   /* Initialize the ADC_TwoSamplingDelay member */
 389:FWLIB/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 317              		.loc 1 389 3 is_stmt 1 view .LVU101
 318              		.loc 1 389 46 is_stmt 0 view .LVU102
 319 0008 C360     		str	r3, [r0, #12]
 390:FWLIB/src/stm32f4xx_adc.c **** }
 320              		.loc 1 390 1 view .LVU103
 321 000a 7047     		bx	lr
 322              		.cfi_endproc
 323              	.LFE127:
 325              		.section	.text.ADC_Cmd,"ax",%progbits
 326              		.align	1
 327              		.global	ADC_Cmd
 328              		.syntax unified
 329              		.thumb
 330              		.thumb_func
 331              		.fpu fpv4-sp-d16
 333              	ADC_Cmd:
 334              	.LVL23:
 335              	.LFB128:
 391:FWLIB/src/stm32f4xx_adc.c **** 
 392:FWLIB/src/stm32f4xx_adc.c **** /**
 393:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC peripheral.
 394:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 395:FWLIB/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the ADCx peripheral. 
 396:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 397:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 398:FWLIB/src/stm32f4xx_adc.c ****   */
 399:FWLIB/src/stm32f4xx_adc.c **** void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 400:FWLIB/src/stm32f4xx_adc.c **** {
 336              		.loc 1 400 1 is_stmt 1 view -0
 337              		.cfi_startproc
 338              		@ args = 0, pretend = 0, frame = 0
 339              		@ frame_needed = 0, uses_anonymous_args = 0
 340              		@ link register save eliminated.
 401:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 402:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
ARM GAS  /tmp/ccVoyQ2j.s 			page 14


 341              		.loc 1 402 3 view .LVU105
 403:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 342              		.loc 1 403 3 view .LVU106
 404:FWLIB/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 343              		.loc 1 404 3 view .LVU107
 344              		.loc 1 404 6 is_stmt 0 view .LVU108
 345 0000 21B1     		cbz	r1, .L14
 405:FWLIB/src/stm32f4xx_adc.c ****   {
 406:FWLIB/src/stm32f4xx_adc.c ****     /* Set the ADON bit to wake up the ADC from power down mode */
 407:FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 346              		.loc 1 407 5 is_stmt 1 view .LVU109
 347              		.loc 1 407 15 is_stmt 0 view .LVU110
 348 0002 8368     		ldr	r3, [r0, #8]
 349 0004 43F00103 		orr	r3, r3, #1
 350 0008 8360     		str	r3, [r0, #8]
 351 000a 7047     		bx	lr
 352              	.L14:
 408:FWLIB/src/stm32f4xx_adc.c ****   }
 409:FWLIB/src/stm32f4xx_adc.c ****   else
 410:FWLIB/src/stm32f4xx_adc.c ****   {
 411:FWLIB/src/stm32f4xx_adc.c ****     /* Disable the selected ADC peripheral */
 412:FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 353              		.loc 1 412 5 is_stmt 1 view .LVU111
 354              		.loc 1 412 15 is_stmt 0 view .LVU112
 355 000c 8368     		ldr	r3, [r0, #8]
 356 000e 23F00103 		bic	r3, r3, #1
 357 0012 8360     		str	r3, [r0, #8]
 413:FWLIB/src/stm32f4xx_adc.c ****   }
 414:FWLIB/src/stm32f4xx_adc.c **** }
 358              		.loc 1 414 1 view .LVU113
 359 0014 7047     		bx	lr
 360              		.cfi_endproc
 361              	.LFE128:
 363              		.section	.text.ADC_AnalogWatchdogCmd,"ax",%progbits
 364              		.align	1
 365              		.global	ADC_AnalogWatchdogCmd
 366              		.syntax unified
 367              		.thumb
 368              		.thumb_func
 369              		.fpu fpv4-sp-d16
 371              	ADC_AnalogWatchdogCmd:
 372              	.LVL24:
 373              	.LFB129:
 415:FWLIB/src/stm32f4xx_adc.c **** /**
 416:FWLIB/src/stm32f4xx_adc.c ****   * @}
 417:FWLIB/src/stm32f4xx_adc.c ****   */
 418:FWLIB/src/stm32f4xx_adc.c **** 
 419:FWLIB/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group2 Analog Watchdog configuration functions
 420:FWLIB/src/stm32f4xx_adc.c ****  *  @brief    Analog Watchdog configuration functions 
 421:FWLIB/src/stm32f4xx_adc.c ****  *
 422:FWLIB/src/stm32f4xx_adc.c **** @verbatim   
 423:FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================
 424:FWLIB/src/stm32f4xx_adc.c ****              ##### Analog Watchdog configuration functions #####
 425:FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================  
 426:FWLIB/src/stm32f4xx_adc.c ****     [..] This section provides functions allowing to configure the Analog Watchdog
 427:FWLIB/src/stm32f4xx_adc.c ****          (AWD) feature in the ADC.
 428:FWLIB/src/stm32f4xx_adc.c ****   
ARM GAS  /tmp/ccVoyQ2j.s 			page 15


 429:FWLIB/src/stm32f4xx_adc.c ****     [..] A typical configuration Analog Watchdog is done following these steps :
 430:FWLIB/src/stm32f4xx_adc.c ****       (#) the ADC guarded channel(s) is (are) selected using the 
 431:FWLIB/src/stm32f4xx_adc.c ****           ADC_AnalogWatchdogSingleChannelConfig() function.
 432:FWLIB/src/stm32f4xx_adc.c ****       (#) The Analog watchdog lower and higher threshold are configured using the  
 433:FWLIB/src/stm32f4xx_adc.c ****           ADC_AnalogWatchdogThresholdsConfig() function.
 434:FWLIB/src/stm32f4xx_adc.c ****       (#) The Analog watchdog is enabled and configured to enable the check, on one
 435:FWLIB/src/stm32f4xx_adc.c ****           or more channels, using the  ADC_AnalogWatchdogCmd() function.
 436:FWLIB/src/stm32f4xx_adc.c **** @endverbatim
 437:FWLIB/src/stm32f4xx_adc.c ****   * @{
 438:FWLIB/src/stm32f4xx_adc.c ****   */
 439:FWLIB/src/stm32f4xx_adc.c ****   
 440:FWLIB/src/stm32f4xx_adc.c **** /**
 441:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the analog watchdog on single/all regular or 
 442:FWLIB/src/stm32f4xx_adc.c ****   *         injected channels
 443:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 444:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_AnalogWatchdog: the ADC analog watchdog configuration.
 445:FWLIB/src/stm32f4xx_adc.c ****   *         This parameter can be one of the following values:
 446:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleRegEnable: Analog watchdog on a single regular channel
 447:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleInjecEnable: Analog watchdog on a single injected chan
 448:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleRegOrInjecEnable: Analog watchdog on a single regular 
 449:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllRegEnable: Analog watchdog on all regular channel
 450:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllInjecEnable: Analog watchdog on all injected channel
 451:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and inj
 452:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
 453:FWLIB/src/stm32f4xx_adc.c ****   * @retval None	  
 454:FWLIB/src/stm32f4xx_adc.c ****   */
 455:FWLIB/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
 456:FWLIB/src/stm32f4xx_adc.c **** {
 374              		.loc 1 456 1 is_stmt 1 view -0
 375              		.cfi_startproc
 376              		@ args = 0, pretend = 0, frame = 0
 377              		@ frame_needed = 0, uses_anonymous_args = 0
 378              		@ link register save eliminated.
 457:FWLIB/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 379              		.loc 1 457 3 view .LVU115
 458:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 459:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 380              		.loc 1 459 3 view .LVU116
 460:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
 381              		.loc 1 460 3 view .LVU117
 461:FWLIB/src/stm32f4xx_adc.c ****   
 462:FWLIB/src/stm32f4xx_adc.c ****   /* Get the old register value */
 463:FWLIB/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR1;
 382              		.loc 1 463 3 view .LVU118
 383              		.loc 1 463 10 is_stmt 0 view .LVU119
 384 0000 4368     		ldr	r3, [r0, #4]
 385              	.LVL25:
 464:FWLIB/src/stm32f4xx_adc.c ****   
 465:FWLIB/src/stm32f4xx_adc.c ****   /* Clear AWDEN, JAWDEN and AWDSGL bits */
 466:FWLIB/src/stm32f4xx_adc.c ****   tmpreg &= CR1_AWDMode_RESET;
 386              		.loc 1 466 3 is_stmt 1 view .LVU120
 387              		.loc 1 466 10 is_stmt 0 view .LVU121
 388 0002 23F44003 		bic	r3, r3, #12582912
 389              	.LVL26:
 390              		.loc 1 466 10 view .LVU122
 391 0006 23F40073 		bic	r3, r3, #512
 392              	.LVL27:
ARM GAS  /tmp/ccVoyQ2j.s 			page 16


 467:FWLIB/src/stm32f4xx_adc.c ****   
 468:FWLIB/src/stm32f4xx_adc.c ****   /* Set the analog watchdog enable mode */
 469:FWLIB/src/stm32f4xx_adc.c ****   tmpreg |= ADC_AnalogWatchdog;
 393              		.loc 1 469 3 is_stmt 1 view .LVU123
 394              		.loc 1 469 10 is_stmt 0 view .LVU124
 395 000a 1943     		orrs	r1, r1, r3
 396              	.LVL28:
 470:FWLIB/src/stm32f4xx_adc.c ****   
 471:FWLIB/src/stm32f4xx_adc.c ****   /* Store the new register value */
 472:FWLIB/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg;
 397              		.loc 1 472 3 is_stmt 1 view .LVU125
 398              		.loc 1 472 13 is_stmt 0 view .LVU126
 399 000c 4160     		str	r1, [r0, #4]
 473:FWLIB/src/stm32f4xx_adc.c **** }
 400              		.loc 1 473 1 view .LVU127
 401 000e 7047     		bx	lr
 402              		.cfi_endproc
 403              	.LFE129:
 405              		.section	.text.ADC_AnalogWatchdogThresholdsConfig,"ax",%progbits
 406              		.align	1
 407              		.global	ADC_AnalogWatchdogThresholdsConfig
 408              		.syntax unified
 409              		.thumb
 410              		.thumb_func
 411              		.fpu fpv4-sp-d16
 413              	ADC_AnalogWatchdogThresholdsConfig:
 414              	.LVL29:
 415              	.LFB130:
 474:FWLIB/src/stm32f4xx_adc.c **** 
 475:FWLIB/src/stm32f4xx_adc.c **** /**
 476:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Configures the high and low thresholds of the analog watchdog.
 477:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 478:FWLIB/src/stm32f4xx_adc.c ****   * @param  HighThreshold: the ADC analog watchdog High threshold value.
 479:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter must be a 12-bit value.
 480:FWLIB/src/stm32f4xx_adc.c ****   * @param  LowThreshold:  the ADC analog watchdog Low threshold value.
 481:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter must be a 12-bit value.
 482:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 483:FWLIB/src/stm32f4xx_adc.c ****   */
 484:FWLIB/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
 485:FWLIB/src/stm32f4xx_adc.c ****                                         uint16_t LowThreshold)
 486:FWLIB/src/stm32f4xx_adc.c **** {
 416              		.loc 1 486 1 is_stmt 1 view -0
 417              		.cfi_startproc
 418              		@ args = 0, pretend = 0, frame = 0
 419              		@ frame_needed = 0, uses_anonymous_args = 0
 420              		@ link register save eliminated.
 487:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 488:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 421              		.loc 1 488 3 view .LVU129
 489:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_THRESHOLD(HighThreshold));
 422              		.loc 1 489 3 view .LVU130
 490:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_THRESHOLD(LowThreshold));
 423              		.loc 1 490 3 view .LVU131
 491:FWLIB/src/stm32f4xx_adc.c ****   
 492:FWLIB/src/stm32f4xx_adc.c ****   /* Set the ADCx high threshold */
 493:FWLIB/src/stm32f4xx_adc.c ****   ADCx->HTR = HighThreshold;
 424              		.loc 1 493 3 view .LVU132
ARM GAS  /tmp/ccVoyQ2j.s 			page 17


 425              		.loc 1 493 13 is_stmt 0 view .LVU133
 426 0000 4162     		str	r1, [r0, #36]
 494:FWLIB/src/stm32f4xx_adc.c ****   
 495:FWLIB/src/stm32f4xx_adc.c ****   /* Set the ADCx low threshold */
 496:FWLIB/src/stm32f4xx_adc.c ****   ADCx->LTR = LowThreshold;
 427              		.loc 1 496 3 is_stmt 1 view .LVU134
 428              		.loc 1 496 13 is_stmt 0 view .LVU135
 429 0002 8262     		str	r2, [r0, #40]
 497:FWLIB/src/stm32f4xx_adc.c **** }
 430              		.loc 1 497 1 view .LVU136
 431 0004 7047     		bx	lr
 432              		.cfi_endproc
 433              	.LFE130:
 435              		.section	.text.ADC_AnalogWatchdogSingleChannelConfig,"ax",%progbits
 436              		.align	1
 437              		.global	ADC_AnalogWatchdogSingleChannelConfig
 438              		.syntax unified
 439              		.thumb
 440              		.thumb_func
 441              		.fpu fpv4-sp-d16
 443              	ADC_AnalogWatchdogSingleChannelConfig:
 444              	.LVL30:
 445              	.LFB131:
 498:FWLIB/src/stm32f4xx_adc.c **** 
 499:FWLIB/src/stm32f4xx_adc.c **** /**
 500:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Configures the analog watchdog guarded single channel
 501:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 502:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure for the analog watchdog. 
 503:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 504:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
 505:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
 506:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
 507:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
 508:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
 509:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
 510:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
 511:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
 512:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
 513:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
 514:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
 515:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
 516:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
 517:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
 518:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
 519:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
 520:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
 521:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
 522:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected
 523:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 524:FWLIB/src/stm32f4xx_adc.c ****   */
 525:FWLIB/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
 526:FWLIB/src/stm32f4xx_adc.c **** {
 446              		.loc 1 526 1 is_stmt 1 view -0
 447              		.cfi_startproc
 448              		@ args = 0, pretend = 0, frame = 0
 449              		@ frame_needed = 0, uses_anonymous_args = 0
 450              		@ link register save eliminated.
ARM GAS  /tmp/ccVoyQ2j.s 			page 18


 527:FWLIB/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 451              		.loc 1 527 3 view .LVU138
 528:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 529:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 452              		.loc 1 529 3 view .LVU139
 530:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 453              		.loc 1 530 3 view .LVU140
 531:FWLIB/src/stm32f4xx_adc.c ****   
 532:FWLIB/src/stm32f4xx_adc.c ****   /* Get the old register value */
 533:FWLIB/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR1;
 454              		.loc 1 533 3 view .LVU141
 455              		.loc 1 533 10 is_stmt 0 view .LVU142
 456 0000 4368     		ldr	r3, [r0, #4]
 457              	.LVL31:
 534:FWLIB/src/stm32f4xx_adc.c ****   
 535:FWLIB/src/stm32f4xx_adc.c ****   /* Clear the Analog watchdog channel select bits */
 536:FWLIB/src/stm32f4xx_adc.c ****   tmpreg &= CR1_AWDCH_RESET;
 458              		.loc 1 536 3 is_stmt 1 view .LVU143
 459              		.loc 1 536 10 is_stmt 0 view .LVU144
 460 0002 23F01F03 		bic	r3, r3, #31
 461              	.LVL32:
 537:FWLIB/src/stm32f4xx_adc.c ****   
 538:FWLIB/src/stm32f4xx_adc.c ****   /* Set the Analog watchdog channel */
 539:FWLIB/src/stm32f4xx_adc.c ****   tmpreg |= ADC_Channel;
 462              		.loc 1 539 3 is_stmt 1 view .LVU145
 463              		.loc 1 539 10 is_stmt 0 view .LVU146
 464 0006 1943     		orrs	r1, r1, r3
 465              	.LVL33:
 540:FWLIB/src/stm32f4xx_adc.c ****   
 541:FWLIB/src/stm32f4xx_adc.c ****   /* Store the new register value */
 542:FWLIB/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg;
 466              		.loc 1 542 3 is_stmt 1 view .LVU147
 467              		.loc 1 542 13 is_stmt 0 view .LVU148
 468 0008 4160     		str	r1, [r0, #4]
 543:FWLIB/src/stm32f4xx_adc.c **** }
 469              		.loc 1 543 1 view .LVU149
 470 000a 7047     		bx	lr
 471              		.cfi_endproc
 472              	.LFE131:
 474              		.section	.text.ADC_TempSensorVrefintCmd,"ax",%progbits
 475              		.align	1
 476              		.global	ADC_TempSensorVrefintCmd
 477              		.syntax unified
 478              		.thumb
 479              		.thumb_func
 480              		.fpu fpv4-sp-d16
 482              	ADC_TempSensorVrefintCmd:
 483              	.LVL34:
 484              	.LFB132:
 544:FWLIB/src/stm32f4xx_adc.c **** /**
 545:FWLIB/src/stm32f4xx_adc.c ****   * @}
 546:FWLIB/src/stm32f4xx_adc.c ****   */
 547:FWLIB/src/stm32f4xx_adc.c **** 
 548:FWLIB/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group3 Temperature Sensor, Vrefint (Voltage Reference internal) 
 549:FWLIB/src/stm32f4xx_adc.c ****  *            and VBAT (Voltage BATtery) management functions
 550:FWLIB/src/stm32f4xx_adc.c ****  *  @brief   Temperature Sensor, Vrefint and VBAT management functions 
 551:FWLIB/src/stm32f4xx_adc.c ****  *
ARM GAS  /tmp/ccVoyQ2j.s 			page 19


 552:FWLIB/src/stm32f4xx_adc.c **** @verbatim   
 553:FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================
 554:FWLIB/src/stm32f4xx_adc.c ****       ##### Temperature Sensor, Vrefint and VBAT management functions #####
 555:FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================  
 556:FWLIB/src/stm32f4xx_adc.c ****     [..] This section provides functions allowing to enable/ disable the internal 
 557:FWLIB/src/stm32f4xx_adc.c ****          connections between the ADC and the Temperature Sensor, the Vrefint and 
 558:FWLIB/src/stm32f4xx_adc.c ****          the Vbat sources.
 559:FWLIB/src/stm32f4xx_adc.c ****      
 560:FWLIB/src/stm32f4xx_adc.c ****     [..] A typical configuration to get the Temperature sensor and Vrefint channels 
 561:FWLIB/src/stm32f4xx_adc.c ****          voltages is done following these steps :
 562:FWLIB/src/stm32f4xx_adc.c ****       (#) Enable the internal connection of Temperature sensor and Vrefint sources 
 563:FWLIB/src/stm32f4xx_adc.c ****           with the ADC channels using ADC_TempSensorVrefintCmd() function. 
 564:FWLIB/src/stm32f4xx_adc.c ****       (#) Select the ADC_Channel_TempSensor and/or ADC_Channel_Vrefint using 
 565:FWLIB/src/stm32f4xx_adc.c ****           ADC_RegularChannelConfig() or  ADC_InjectedChannelConfig() functions 
 566:FWLIB/src/stm32f4xx_adc.c ****       (#) Get the voltage values, using ADC_GetConversionValue() or  
 567:FWLIB/src/stm32f4xx_adc.c ****           ADC_GetInjectedConversionValue().
 568:FWLIB/src/stm32f4xx_adc.c **** 
 569:FWLIB/src/stm32f4xx_adc.c ****     [..] A typical configuration to get the VBAT channel voltage is done following 
 570:FWLIB/src/stm32f4xx_adc.c ****          these steps :
 571:FWLIB/src/stm32f4xx_adc.c ****       (#) Enable the internal connection of VBAT source with the ADC channel using 
 572:FWLIB/src/stm32f4xx_adc.c ****           ADC_VBATCmd() function. 
 573:FWLIB/src/stm32f4xx_adc.c ****       (#) Select the ADC_Channel_Vbat using ADC_RegularChannelConfig() or  
 574:FWLIB/src/stm32f4xx_adc.c ****           ADC_InjectedChannelConfig() functions 
 575:FWLIB/src/stm32f4xx_adc.c ****       (#) Get the voltage value, using ADC_GetConversionValue() or  
 576:FWLIB/src/stm32f4xx_adc.c ****           ADC_GetInjectedConversionValue().
 577:FWLIB/src/stm32f4xx_adc.c ****  
 578:FWLIB/src/stm32f4xx_adc.c **** @endverbatim
 579:FWLIB/src/stm32f4xx_adc.c ****   * @{
 580:FWLIB/src/stm32f4xx_adc.c ****   */
 581:FWLIB/src/stm32f4xx_adc.c ****   
 582:FWLIB/src/stm32f4xx_adc.c ****   
 583:FWLIB/src/stm32f4xx_adc.c **** /**
 584:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the temperature sensor and Vrefint channels.
 585:FWLIB/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the temperature sensor and Vrefint channels.
 586:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 587:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 588:FWLIB/src/stm32f4xx_adc.c ****   */
 589:FWLIB/src/stm32f4xx_adc.c **** void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
 590:FWLIB/src/stm32f4xx_adc.c **** {
 485              		.loc 1 590 1 is_stmt 1 view -0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 489              		@ link register save eliminated.
 591:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 592:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 490              		.loc 1 592 3 view .LVU151
 593:FWLIB/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 491              		.loc 1 593 3 view .LVU152
 492              		.loc 1 593 6 is_stmt 0 view .LVU153
 493 0000 28B1     		cbz	r0, .L20
 594:FWLIB/src/stm32f4xx_adc.c ****   {
 595:FWLIB/src/stm32f4xx_adc.c ****     /* Enable the temperature sensor and Vrefint channel*/
 596:FWLIB/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 494              		.loc 1 596 5 is_stmt 1 view .LVU154
 495              		.loc 1 596 14 is_stmt 0 view .LVU155
 496 0002 064A     		ldr	r2, .L22
ARM GAS  /tmp/ccVoyQ2j.s 			page 20


 497 0004 5368     		ldr	r3, [r2, #4]
 498 0006 43F40003 		orr	r3, r3, #8388608
 499 000a 5360     		str	r3, [r2, #4]
 500 000c 7047     		bx	lr
 501              	.L20:
 597:FWLIB/src/stm32f4xx_adc.c ****   }
 598:FWLIB/src/stm32f4xx_adc.c ****   else
 599:FWLIB/src/stm32f4xx_adc.c ****   {
 600:FWLIB/src/stm32f4xx_adc.c ****     /* Disable the temperature sensor and Vrefint channel*/
 601:FWLIB/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 502              		.loc 1 601 5 is_stmt 1 view .LVU156
 503              		.loc 1 601 14 is_stmt 0 view .LVU157
 504 000e 034A     		ldr	r2, .L22
 505 0010 5368     		ldr	r3, [r2, #4]
 506 0012 23F40003 		bic	r3, r3, #8388608
 507 0016 5360     		str	r3, [r2, #4]
 602:FWLIB/src/stm32f4xx_adc.c ****   }
 603:FWLIB/src/stm32f4xx_adc.c **** }
 508              		.loc 1 603 1 view .LVU158
 509 0018 7047     		bx	lr
 510              	.L23:
 511 001a 00BF     		.align	2
 512              	.L22:
 513 001c 00230140 		.word	1073816320
 514              		.cfi_endproc
 515              	.LFE132:
 517              		.section	.text.ADC_VBATCmd,"ax",%progbits
 518              		.align	1
 519              		.global	ADC_VBATCmd
 520              		.syntax unified
 521              		.thumb
 522              		.thumb_func
 523              		.fpu fpv4-sp-d16
 525              	ADC_VBATCmd:
 526              	.LVL35:
 527              	.LFB133:
 604:FWLIB/src/stm32f4xx_adc.c **** 
 605:FWLIB/src/stm32f4xx_adc.c **** /**
 606:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the VBAT (Voltage Battery) channel.
 607:FWLIB/src/stm32f4xx_adc.c ****   * 
 608:FWLIB/src/stm32f4xx_adc.c ****   * @note   the Battery voltage measured is equal to VBAT/2 on STM32F40xx and 
 609:FWLIB/src/stm32f4xx_adc.c ****   *         STM32F41xx devices and equal to VBAT/4 on STM32F42xx and STM32F43xx devices 
 610:FWLIB/src/stm32f4xx_adc.c ****   *              
 611:FWLIB/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the VBAT channel.
 612:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 613:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 614:FWLIB/src/stm32f4xx_adc.c ****   */
 615:FWLIB/src/stm32f4xx_adc.c **** void ADC_VBATCmd(FunctionalState NewState)                             
 616:FWLIB/src/stm32f4xx_adc.c **** {
 528              		.loc 1 616 1 is_stmt 1 view -0
 529              		.cfi_startproc
 530              		@ args = 0, pretend = 0, frame = 0
 531              		@ frame_needed = 0, uses_anonymous_args = 0
 532              		@ link register save eliminated.
 617:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 618:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 533              		.loc 1 618 3 view .LVU160
ARM GAS  /tmp/ccVoyQ2j.s 			page 21


 619:FWLIB/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 534              		.loc 1 619 3 view .LVU161
 535              		.loc 1 619 6 is_stmt 0 view .LVU162
 536 0000 28B1     		cbz	r0, .L25
 620:FWLIB/src/stm32f4xx_adc.c ****   {
 621:FWLIB/src/stm32f4xx_adc.c ****     /* Enable the VBAT channel*/
 622:FWLIB/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 537              		.loc 1 622 5 is_stmt 1 view .LVU163
 538              		.loc 1 622 14 is_stmt 0 view .LVU164
 539 0002 064A     		ldr	r2, .L27
 540 0004 5368     		ldr	r3, [r2, #4]
 541 0006 43F48003 		orr	r3, r3, #4194304
 542 000a 5360     		str	r3, [r2, #4]
 543 000c 7047     		bx	lr
 544              	.L25:
 623:FWLIB/src/stm32f4xx_adc.c ****   }
 624:FWLIB/src/stm32f4xx_adc.c ****   else
 625:FWLIB/src/stm32f4xx_adc.c ****   {
 626:FWLIB/src/stm32f4xx_adc.c ****     /* Disable the VBAT channel*/
 627:FWLIB/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 545              		.loc 1 627 5 is_stmt 1 view .LVU165
 546              		.loc 1 627 14 is_stmt 0 view .LVU166
 547 000e 034A     		ldr	r2, .L27
 548 0010 5368     		ldr	r3, [r2, #4]
 549 0012 23F48003 		bic	r3, r3, #4194304
 550 0016 5360     		str	r3, [r2, #4]
 628:FWLIB/src/stm32f4xx_adc.c ****   }
 629:FWLIB/src/stm32f4xx_adc.c **** }
 551              		.loc 1 629 1 view .LVU167
 552 0018 7047     		bx	lr
 553              	.L28:
 554 001a 00BF     		.align	2
 555              	.L27:
 556 001c 00230140 		.word	1073816320
 557              		.cfi_endproc
 558              	.LFE133:
 560              		.section	.text.ADC_RegularChannelConfig,"ax",%progbits
 561              		.align	1
 562              		.global	ADC_RegularChannelConfig
 563              		.syntax unified
 564              		.thumb
 565              		.thumb_func
 566              		.fpu fpv4-sp-d16
 568              	ADC_RegularChannelConfig:
 569              	.LVL36:
 570              	.LFB134:
 630:FWLIB/src/stm32f4xx_adc.c **** 
 631:FWLIB/src/stm32f4xx_adc.c **** /**
 632:FWLIB/src/stm32f4xx_adc.c ****   * @}
 633:FWLIB/src/stm32f4xx_adc.c ****   */
 634:FWLIB/src/stm32f4xx_adc.c **** 
 635:FWLIB/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group4 Regular Channels Configuration functions
 636:FWLIB/src/stm32f4xx_adc.c ****  *  @brief   Regular Channels Configuration functions 
 637:FWLIB/src/stm32f4xx_adc.c ****  *
 638:FWLIB/src/stm32f4xx_adc.c **** @verbatim   
 639:FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================
 640:FWLIB/src/stm32f4xx_adc.c ****              ##### Regular Channels Configuration functions #####
ARM GAS  /tmp/ccVoyQ2j.s 			page 22


 641:FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================  
 642:FWLIB/src/stm32f4xx_adc.c **** 
 643:FWLIB/src/stm32f4xx_adc.c ****     [..] This section provides functions allowing to manage the ADC's regular channels,
 644:FWLIB/src/stm32f4xx_adc.c ****          it is composed of 2 sub sections : 
 645:FWLIB/src/stm32f4xx_adc.c ****   
 646:FWLIB/src/stm32f4xx_adc.c ****       (#) Configuration and management functions for regular channels: This subsection 
 647:FWLIB/src/stm32f4xx_adc.c ****           provides functions allowing to configure the ADC regular channels :    
 648:FWLIB/src/stm32f4xx_adc.c ****          (++) Configure the rank in the regular group sequencer for each channel
 649:FWLIB/src/stm32f4xx_adc.c ****          (++) Configure the sampling time for each channel
 650:FWLIB/src/stm32f4xx_adc.c ****          (++) select the conversion Trigger for regular channels
 651:FWLIB/src/stm32f4xx_adc.c ****          (++) select the desired EOC event behavior configuration
 652:FWLIB/src/stm32f4xx_adc.c ****          (++) Activate the continuous Mode  (*)
 653:FWLIB/src/stm32f4xx_adc.c ****          (++) Activate the Discontinuous Mode 
 654:FWLIB/src/stm32f4xx_adc.c ****          -@@- Please Note that the following features for regular channels 
 655:FWLIB/src/stm32f4xx_adc.c ****              are configured using the ADC_Init() function : 
 656:FWLIB/src/stm32f4xx_adc.c ****            (+@@) scan mode activation 
 657:FWLIB/src/stm32f4xx_adc.c ****            (+@@) continuous mode activation (**) 
 658:FWLIB/src/stm32f4xx_adc.c ****            (+@@) External trigger source  
 659:FWLIB/src/stm32f4xx_adc.c ****            (+@@) External trigger edge 
 660:FWLIB/src/stm32f4xx_adc.c ****            (+@@) number of conversion in the regular channels group sequencer.
 661:FWLIB/src/stm32f4xx_adc.c ****      
 662:FWLIB/src/stm32f4xx_adc.c ****          -@@- (*) and (**) are performing the same configuration
 663:FWLIB/src/stm32f4xx_adc.c ****      
 664:FWLIB/src/stm32f4xx_adc.c ****       (#) Get the conversion data: This subsection provides an important function in 
 665:FWLIB/src/stm32f4xx_adc.c ****           the ADC peripheral since it returns the converted data of the current 
 666:FWLIB/src/stm32f4xx_adc.c ****           regular channel. When the Conversion value is read, the EOC Flag is 
 667:FWLIB/src/stm32f4xx_adc.c ****           automatically cleared.
 668:FWLIB/src/stm32f4xx_adc.c ****      
 669:FWLIB/src/stm32f4xx_adc.c ****           -@- For multi ADC mode, the last ADC1, ADC2 and ADC3 regular conversions 
 670:FWLIB/src/stm32f4xx_adc.c ****               results data (in the selected multi mode) can be returned in the same 
 671:FWLIB/src/stm32f4xx_adc.c ****               time using ADC_GetMultiModeConversionValue() function. 
 672:FWLIB/src/stm32f4xx_adc.c ****          
 673:FWLIB/src/stm32f4xx_adc.c **** @endverbatim
 674:FWLIB/src/stm32f4xx_adc.c ****   * @{
 675:FWLIB/src/stm32f4xx_adc.c ****   */
 676:FWLIB/src/stm32f4xx_adc.c **** /**
 677:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Configures for the selected ADC regular channel its corresponding
 678:FWLIB/src/stm32f4xx_adc.c ****   *         rank in the sequencer and its sample time.
 679:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 680:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
 681:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 682:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
 683:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
 684:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
 685:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
 686:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
 687:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
 688:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
 689:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
 690:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
 691:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
 692:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
 693:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
 694:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
 695:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
 696:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
 697:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
ARM GAS  /tmp/ccVoyQ2j.s 			page 23


 698:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
 699:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
 700:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected                       
 701:FWLIB/src/stm32f4xx_adc.c ****   * @param  Rank: The rank in the regular group sequencer.
 702:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter must be between 1 to 16.
 703:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
 704:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 705:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_3Cycles: Sample time equal to 3 cycles
 706:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_15Cycles: Sample time equal to 15 cycles
 707:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_28Cycles: Sample time equal to 28 cycles
 708:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_56Cycles: Sample time equal to 56 cycles	
 709:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_84Cycles: Sample time equal to 84 cycles	
 710:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_112Cycles: Sample time equal to 112 cycles	
 711:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
 712:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
 713:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 714:FWLIB/src/stm32f4xx_adc.c ****   */
 715:FWLIB/src/stm32f4xx_adc.c **** void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sam
 716:FWLIB/src/stm32f4xx_adc.c **** {
 571              		.loc 1 716 1 is_stmt 1 view -0
 572              		.cfi_startproc
 573              		@ args = 0, pretend = 0, frame = 0
 574              		@ frame_needed = 0, uses_anonymous_args = 0
 575              		@ link register save eliminated.
 576              		.loc 1 716 1 is_stmt 0 view .LVU169
 577 0000 70B4     		push	{r4, r5, r6}
 578              	.LCFI5:
 579              		.cfi_def_cfa_offset 12
 580              		.cfi_offset 4, -12
 581              		.cfi_offset 5, -8
 582              		.cfi_offset 6, -4
 717:FWLIB/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0;
 583              		.loc 1 717 3 is_stmt 1 view .LVU170
 584              	.LVL37:
 718:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 719:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 585              		.loc 1 719 3 view .LVU171
 720:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 586              		.loc 1 720 3 view .LVU172
 721:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(Rank));
 587              		.loc 1 721 3 view .LVU173
 722:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
 588              		.loc 1 722 3 view .LVU174
 723:FWLIB/src/stm32f4xx_adc.c ****   
 724:FWLIB/src/stm32f4xx_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
 725:FWLIB/src/stm32f4xx_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 589              		.loc 1 725 3 view .LVU175
 590              		.loc 1 725 6 is_stmt 0 view .LVU176
 591 0002 0929     		cmp	r1, #9
 592 0004 1CD9     		bls	.L30
 726:FWLIB/src/stm32f4xx_adc.c ****   {
 727:FWLIB/src/stm32f4xx_adc.c ****     /* Get the old register value */
 728:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
 593              		.loc 1 728 5 is_stmt 1 view .LVU177
 594              		.loc 1 728 13 is_stmt 0 view .LVU178
 595 0006 C568     		ldr	r5, [r0, #12]
 596              	.LVL38:
ARM GAS  /tmp/ccVoyQ2j.s 			page 24


 729:FWLIB/src/stm32f4xx_adc.c ****     
 730:FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 731:FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 597              		.loc 1 731 5 is_stmt 1 view .LVU179
 598              		.loc 1 731 50 is_stmt 0 view .LVU180
 599 0008 A1F10A04 		sub	r4, r1, #10
 600              		.loc 1 731 35 view .LVU181
 601 000c 04EB4404 		add	r4, r4, r4, lsl #1
 602              		.loc 1 731 13 view .LVU182
 603 0010 0726     		movs	r6, #7
 604 0012 A640     		lsls	r6, r6, r4
 605              	.LVL39:
 732:FWLIB/src/stm32f4xx_adc.c ****     
 733:FWLIB/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
 734:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 606              		.loc 1 734 5 is_stmt 1 view .LVU183
 607              		.loc 1 734 13 is_stmt 0 view .LVU184
 608 0014 25EA0605 		bic	r5, r5, r6
 609              	.LVL40:
 735:FWLIB/src/stm32f4xx_adc.c ****     
 736:FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 737:FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 610              		.loc 1 737 5 is_stmt 1 view .LVU185
 611              		.loc 1 737 13 is_stmt 0 view .LVU186
 612 0018 03FA04F4 		lsl	r4, r3, r4
 613              	.LVL41:
 738:FWLIB/src/stm32f4xx_adc.c ****     
 739:FWLIB/src/stm32f4xx_adc.c ****     /* Set the new sample time */
 740:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 614              		.loc 1 740 5 is_stmt 1 view .LVU187
 615              		.loc 1 740 13 is_stmt 0 view .LVU188
 616 001c 2C43     		orrs	r4, r4, r5
 617              	.LVL42:
 741:FWLIB/src/stm32f4xx_adc.c ****     
 742:FWLIB/src/stm32f4xx_adc.c ****     /* Store the new register value */
 743:FWLIB/src/stm32f4xx_adc.c ****     ADCx->SMPR1 = tmpreg1;
 618              		.loc 1 743 5 is_stmt 1 view .LVU189
 619              		.loc 1 743 17 is_stmt 0 view .LVU190
 620 001e C460     		str	r4, [r0, #12]
 621              	.LVL43:
 622              	.L31:
 744:FWLIB/src/stm32f4xx_adc.c ****   }
 745:FWLIB/src/stm32f4xx_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
 746:FWLIB/src/stm32f4xx_adc.c ****   {
 747:FWLIB/src/stm32f4xx_adc.c ****     /* Get the old register value */
 748:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
 749:FWLIB/src/stm32f4xx_adc.c ****     
 750:FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 751:FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 752:FWLIB/src/stm32f4xx_adc.c ****     
 753:FWLIB/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
 754:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 755:FWLIB/src/stm32f4xx_adc.c ****     
 756:FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 757:FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 758:FWLIB/src/stm32f4xx_adc.c ****     
 759:FWLIB/src/stm32f4xx_adc.c ****     /* Set the new sample time */
ARM GAS  /tmp/ccVoyQ2j.s 			page 25


 760:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 761:FWLIB/src/stm32f4xx_adc.c ****     
 762:FWLIB/src/stm32f4xx_adc.c ****     /* Store the new register value */
 763:FWLIB/src/stm32f4xx_adc.c ****     ADCx->SMPR2 = tmpreg1;
 764:FWLIB/src/stm32f4xx_adc.c ****   }
 765:FWLIB/src/stm32f4xx_adc.c ****   /* For Rank 1 to 6 */
 766:FWLIB/src/stm32f4xx_adc.c ****   if (Rank < 7)
 623              		.loc 1 766 3 is_stmt 1 view .LVU191
 624              		.loc 1 766 6 is_stmt 0 view .LVU192
 625 0020 062A     		cmp	r2, #6
 626 0022 19D8     		bhi	.L32
 767:FWLIB/src/stm32f4xx_adc.c ****   {
 768:FWLIB/src/stm32f4xx_adc.c ****     /* Get the old register value */
 769:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR3;
 627              		.loc 1 769 5 is_stmt 1 view .LVU193
 628              		.loc 1 769 13 is_stmt 0 view .LVU194
 629 0024 436B     		ldr	r3, [r0, #52]
 630              	.LVL44:
 770:FWLIB/src/stm32f4xx_adc.c ****     
 771:FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 772:FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 631              		.loc 1 772 5 is_stmt 1 view .LVU195
 632              		.loc 1 772 41 is_stmt 0 view .LVU196
 633 0026 013A     		subs	r2, r2, #1
 634              	.LVL45:
 635              		.loc 1 772 33 view .LVU197
 636 0028 02EB8202 		add	r2, r2, r2, lsl #2
 637              		.loc 1 772 13 view .LVU198
 638 002c 1F24     		movs	r4, #31
 639 002e 9440     		lsls	r4, r4, r2
 640              	.LVL46:
 773:FWLIB/src/stm32f4xx_adc.c ****     
 774:FWLIB/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 775:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 641              		.loc 1 775 5 is_stmt 1 view .LVU199
 642              		.loc 1 775 13 is_stmt 0 view .LVU200
 643 0030 23EA0403 		bic	r3, r3, r4
 644              	.LVL47:
 776:FWLIB/src/stm32f4xx_adc.c ****     
 777:FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 778:FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 645              		.loc 1 778 5 is_stmt 1 view .LVU201
 646              		.loc 1 778 13 is_stmt 0 view .LVU202
 647 0034 01FA02F2 		lsl	r2, r1, r2
 648              	.LVL48:
 779:FWLIB/src/stm32f4xx_adc.c ****     
 780:FWLIB/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 781:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 649              		.loc 1 781 5 is_stmt 1 view .LVU203
 650              		.loc 1 781 13 is_stmt 0 view .LVU204
 651 0038 1A43     		orrs	r2, r2, r3
 652              	.LVL49:
 782:FWLIB/src/stm32f4xx_adc.c ****     
 783:FWLIB/src/stm32f4xx_adc.c ****     /* Store the new register value */
 784:FWLIB/src/stm32f4xx_adc.c ****     ADCx->SQR3 = tmpreg1;
 653              		.loc 1 784 5 is_stmt 1 view .LVU205
 654              		.loc 1 784 16 is_stmt 0 view .LVU206
ARM GAS  /tmp/ccVoyQ2j.s 			page 26


 655 003a 4263     		str	r2, [r0, #52]
 656              	.LVL50:
 657              	.L29:
 785:FWLIB/src/stm32f4xx_adc.c ****   }
 786:FWLIB/src/stm32f4xx_adc.c ****   /* For Rank 7 to 12 */
 787:FWLIB/src/stm32f4xx_adc.c ****   else if (Rank < 13)
 788:FWLIB/src/stm32f4xx_adc.c ****   {
 789:FWLIB/src/stm32f4xx_adc.c ****     /* Get the old register value */
 790:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR2;
 791:FWLIB/src/stm32f4xx_adc.c ****     
 792:FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 793:FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 794:FWLIB/src/stm32f4xx_adc.c ****     
 795:FWLIB/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 796:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 797:FWLIB/src/stm32f4xx_adc.c ****     
 798:FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 799:FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 800:FWLIB/src/stm32f4xx_adc.c ****     
 801:FWLIB/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 802:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 803:FWLIB/src/stm32f4xx_adc.c ****     
 804:FWLIB/src/stm32f4xx_adc.c ****     /* Store the new register value */
 805:FWLIB/src/stm32f4xx_adc.c ****     ADCx->SQR2 = tmpreg1;
 806:FWLIB/src/stm32f4xx_adc.c ****   }
 807:FWLIB/src/stm32f4xx_adc.c ****   /* For Rank 13 to 16 */
 808:FWLIB/src/stm32f4xx_adc.c ****   else
 809:FWLIB/src/stm32f4xx_adc.c ****   {
 810:FWLIB/src/stm32f4xx_adc.c ****     /* Get the old register value */
 811:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR1;
 812:FWLIB/src/stm32f4xx_adc.c ****     
 813:FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 814:FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 815:FWLIB/src/stm32f4xx_adc.c ****     
 816:FWLIB/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 817:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 818:FWLIB/src/stm32f4xx_adc.c ****     
 819:FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 820:FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 821:FWLIB/src/stm32f4xx_adc.c ****     
 822:FWLIB/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 823:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 824:FWLIB/src/stm32f4xx_adc.c ****     
 825:FWLIB/src/stm32f4xx_adc.c ****     /* Store the new register value */
 826:FWLIB/src/stm32f4xx_adc.c ****     ADCx->SQR1 = tmpreg1;
 827:FWLIB/src/stm32f4xx_adc.c ****   }
 828:FWLIB/src/stm32f4xx_adc.c **** }
 658              		.loc 1 828 1 view .LVU207
 659 003c 70BC     		pop	{r4, r5, r6}
 660              	.LCFI6:
 661              		.cfi_remember_state
 662              		.cfi_restore 6
 663              		.cfi_restore 5
 664              		.cfi_restore 4
 665              		.cfi_def_cfa_offset 0
 666 003e 7047     		bx	lr
 667              	.LVL51:
ARM GAS  /tmp/ccVoyQ2j.s 			page 27


 668              	.L30:
 669              	.LCFI7:
 670              		.cfi_restore_state
 748:FWLIB/src/stm32f4xx_adc.c ****     
 671              		.loc 1 748 5 is_stmt 1 view .LVU208
 748:FWLIB/src/stm32f4xx_adc.c ****     
 672              		.loc 1 748 13 is_stmt 0 view .LVU209
 673 0040 0569     		ldr	r5, [r0, #16]
 674              	.LVL52:
 751:FWLIB/src/stm32f4xx_adc.c ****     
 675              		.loc 1 751 5 is_stmt 1 view .LVU210
 751:FWLIB/src/stm32f4xx_adc.c ****     
 676              		.loc 1 751 35 is_stmt 0 view .LVU211
 677 0042 01EB4104 		add	r4, r1, r1, lsl #1
 751:FWLIB/src/stm32f4xx_adc.c ****     
 678              		.loc 1 751 13 view .LVU212
 679 0046 0726     		movs	r6, #7
 680 0048 A640     		lsls	r6, r6, r4
 681              	.LVL53:
 754:FWLIB/src/stm32f4xx_adc.c ****     
 682              		.loc 1 754 5 is_stmt 1 view .LVU213
 754:FWLIB/src/stm32f4xx_adc.c ****     
 683              		.loc 1 754 13 is_stmt 0 view .LVU214
 684 004a 25EA0605 		bic	r5, r5, r6
 685              	.LVL54:
 757:FWLIB/src/stm32f4xx_adc.c ****     
 686              		.loc 1 757 5 is_stmt 1 view .LVU215
 757:FWLIB/src/stm32f4xx_adc.c ****     
 687              		.loc 1 757 13 is_stmt 0 view .LVU216
 688 004e 03FA04F4 		lsl	r4, r3, r4
 689              	.LVL55:
 760:FWLIB/src/stm32f4xx_adc.c ****     
 690              		.loc 1 760 5 is_stmt 1 view .LVU217
 760:FWLIB/src/stm32f4xx_adc.c ****     
 691              		.loc 1 760 13 is_stmt 0 view .LVU218
 692 0052 2543     		orrs	r5, r5, r4
 693              	.LVL56:
 763:FWLIB/src/stm32f4xx_adc.c ****   }
 694              		.loc 1 763 5 is_stmt 1 view .LVU219
 763:FWLIB/src/stm32f4xx_adc.c ****   }
 695              		.loc 1 763 17 is_stmt 0 view .LVU220
 696 0054 0561     		str	r5, [r0, #16]
 697 0056 E3E7     		b	.L31
 698              	.LVL57:
 699              	.L32:
 787:FWLIB/src/stm32f4xx_adc.c ****   {
 700              		.loc 1 787 8 is_stmt 1 view .LVU221
 787:FWLIB/src/stm32f4xx_adc.c ****   {
 701              		.loc 1 787 11 is_stmt 0 view .LVU222
 702 0058 0C2A     		cmp	r2, #12
 703 005a 0CD8     		bhi	.L34
 790:FWLIB/src/stm32f4xx_adc.c ****     
 704              		.loc 1 790 5 is_stmt 1 view .LVU223
 790:FWLIB/src/stm32f4xx_adc.c ****     
 705              		.loc 1 790 13 is_stmt 0 view .LVU224
 706 005c 036B     		ldr	r3, [r0, #48]
 707              	.LVL58:
ARM GAS  /tmp/ccVoyQ2j.s 			page 28


 793:FWLIB/src/stm32f4xx_adc.c ****     
 708              		.loc 1 793 5 is_stmt 1 view .LVU225
 793:FWLIB/src/stm32f4xx_adc.c ****     
 709              		.loc 1 793 41 is_stmt 0 view .LVU226
 710 005e 073A     		subs	r2, r2, #7
 711              	.LVL59:
 793:FWLIB/src/stm32f4xx_adc.c ****     
 712              		.loc 1 793 33 view .LVU227
 713 0060 02EB8202 		add	r2, r2, r2, lsl #2
 793:FWLIB/src/stm32f4xx_adc.c ****     
 714              		.loc 1 793 13 view .LVU228
 715 0064 1F24     		movs	r4, #31
 716 0066 9440     		lsls	r4, r4, r2
 717              	.LVL60:
 796:FWLIB/src/stm32f4xx_adc.c ****     
 718              		.loc 1 796 5 is_stmt 1 view .LVU229
 796:FWLIB/src/stm32f4xx_adc.c ****     
 719              		.loc 1 796 13 is_stmt 0 view .LVU230
 720 0068 23EA0403 		bic	r3, r3, r4
 721              	.LVL61:
 799:FWLIB/src/stm32f4xx_adc.c ****     
 722              		.loc 1 799 5 is_stmt 1 view .LVU231
 799:FWLIB/src/stm32f4xx_adc.c ****     
 723              		.loc 1 799 13 is_stmt 0 view .LVU232
 724 006c 01FA02F2 		lsl	r2, r1, r2
 725              	.LVL62:
 802:FWLIB/src/stm32f4xx_adc.c ****     
 726              		.loc 1 802 5 is_stmt 1 view .LVU233
 802:FWLIB/src/stm32f4xx_adc.c ****     
 727              		.loc 1 802 13 is_stmt 0 view .LVU234
 728 0070 1A43     		orrs	r2, r2, r3
 729              	.LVL63:
 805:FWLIB/src/stm32f4xx_adc.c ****   }
 730              		.loc 1 805 5 is_stmt 1 view .LVU235
 805:FWLIB/src/stm32f4xx_adc.c ****   }
 731              		.loc 1 805 16 is_stmt 0 view .LVU236
 732 0072 0263     		str	r2, [r0, #48]
 733 0074 E2E7     		b	.L29
 734              	.LVL64:
 735              	.L34:
 811:FWLIB/src/stm32f4xx_adc.c ****     
 736              		.loc 1 811 5 is_stmt 1 view .LVU237
 811:FWLIB/src/stm32f4xx_adc.c ****     
 737              		.loc 1 811 13 is_stmt 0 view .LVU238
 738 0076 C36A     		ldr	r3, [r0, #44]
 739              	.LVL65:
 814:FWLIB/src/stm32f4xx_adc.c ****     
 740              		.loc 1 814 5 is_stmt 1 view .LVU239
 814:FWLIB/src/stm32f4xx_adc.c ****     
 741              		.loc 1 814 41 is_stmt 0 view .LVU240
 742 0078 0D3A     		subs	r2, r2, #13
 743              	.LVL66:
 814:FWLIB/src/stm32f4xx_adc.c ****     
 744              		.loc 1 814 33 view .LVU241
 745 007a 02EB8202 		add	r2, r2, r2, lsl #2
 814:FWLIB/src/stm32f4xx_adc.c ****     
 746              		.loc 1 814 13 view .LVU242
ARM GAS  /tmp/ccVoyQ2j.s 			page 29


 747 007e 1F24     		movs	r4, #31
 748 0080 9440     		lsls	r4, r4, r2
 749              	.LVL67:
 817:FWLIB/src/stm32f4xx_adc.c ****     
 750              		.loc 1 817 5 is_stmt 1 view .LVU243
 817:FWLIB/src/stm32f4xx_adc.c ****     
 751              		.loc 1 817 13 is_stmt 0 view .LVU244
 752 0082 23EA0403 		bic	r3, r3, r4
 753              	.LVL68:
 820:FWLIB/src/stm32f4xx_adc.c ****     
 754              		.loc 1 820 5 is_stmt 1 view .LVU245
 820:FWLIB/src/stm32f4xx_adc.c ****     
 755              		.loc 1 820 13 is_stmt 0 view .LVU246
 756 0086 9140     		lsls	r1, r1, r2
 757              	.LVL69:
 823:FWLIB/src/stm32f4xx_adc.c ****     
 758              		.loc 1 823 5 is_stmt 1 view .LVU247
 823:FWLIB/src/stm32f4xx_adc.c ****     
 759              		.loc 1 823 13 is_stmt 0 view .LVU248
 760 0088 0B43     		orrs	r3, r3, r1
 761              	.LVL70:
 826:FWLIB/src/stm32f4xx_adc.c ****   }
 762              		.loc 1 826 5 is_stmt 1 view .LVU249
 826:FWLIB/src/stm32f4xx_adc.c ****   }
 763              		.loc 1 826 16 is_stmt 0 view .LVU250
 764 008a C362     		str	r3, [r0, #44]
 765              		.loc 1 828 1 view .LVU251
 766 008c D6E7     		b	.L29
 767              		.cfi_endproc
 768              	.LFE134:
 770              		.section	.text.ADC_SoftwareStartConv,"ax",%progbits
 771              		.align	1
 772              		.global	ADC_SoftwareStartConv
 773              		.syntax unified
 774              		.thumb
 775              		.thumb_func
 776              		.fpu fpv4-sp-d16
 778              	ADC_SoftwareStartConv:
 779              	.LVL71:
 780              	.LFB135:
 829:FWLIB/src/stm32f4xx_adc.c **** 
 830:FWLIB/src/stm32f4xx_adc.c **** /**
 831:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables the selected ADC software start conversion of the regular channels.
 832:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 833:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 834:FWLIB/src/stm32f4xx_adc.c ****   */
 835:FWLIB/src/stm32f4xx_adc.c **** void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
 836:FWLIB/src/stm32f4xx_adc.c **** {
 781              		.loc 1 836 1 is_stmt 1 view -0
 782              		.cfi_startproc
 783              		@ args = 0, pretend = 0, frame = 0
 784              		@ frame_needed = 0, uses_anonymous_args = 0
 785              		@ link register save eliminated.
 837:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 838:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 786              		.loc 1 838 3 view .LVU253
 839:FWLIB/src/stm32f4xx_adc.c ****   
ARM GAS  /tmp/ccVoyQ2j.s 			page 30


 840:FWLIB/src/stm32f4xx_adc.c ****   /* Enable the selected ADC conversion for regular group */
 841:FWLIB/src/stm32f4xx_adc.c ****   ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 787              		.loc 1 841 3 view .LVU254
 788              		.loc 1 841 13 is_stmt 0 view .LVU255
 789 0000 8368     		ldr	r3, [r0, #8]
 790 0002 43F08043 		orr	r3, r3, #1073741824
 791 0006 8360     		str	r3, [r0, #8]
 842:FWLIB/src/stm32f4xx_adc.c **** }
 792              		.loc 1 842 1 view .LVU256
 793 0008 7047     		bx	lr
 794              		.cfi_endproc
 795              	.LFE135:
 797              		.section	.text.ADC_GetSoftwareStartConvStatus,"ax",%progbits
 798              		.align	1
 799              		.global	ADC_GetSoftwareStartConvStatus
 800              		.syntax unified
 801              		.thumb
 802              		.thumb_func
 803              		.fpu fpv4-sp-d16
 805              	ADC_GetSoftwareStartConvStatus:
 806              	.LVL72:
 807              	.LFB136:
 843:FWLIB/src/stm32f4xx_adc.c **** 
 844:FWLIB/src/stm32f4xx_adc.c **** /**
 845:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Gets the selected ADC Software start regular conversion Status.
 846:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 847:FWLIB/src/stm32f4xx_adc.c ****   * @retval The new state of ADC software start conversion (SET or RESET).
 848:FWLIB/src/stm32f4xx_adc.c ****   */
 849:FWLIB/src/stm32f4xx_adc.c **** FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
 850:FWLIB/src/stm32f4xx_adc.c **** {
 808              		.loc 1 850 1 is_stmt 1 view -0
 809              		.cfi_startproc
 810              		@ args = 0, pretend = 0, frame = 0
 811              		@ frame_needed = 0, uses_anonymous_args = 0
 812              		@ link register save eliminated.
 851:FWLIB/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
 813              		.loc 1 851 3 view .LVU258
 852:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 853:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 814              		.loc 1 853 3 view .LVU259
 854:FWLIB/src/stm32f4xx_adc.c ****   
 855:FWLIB/src/stm32f4xx_adc.c ****   /* Check the status of SWSTART bit */
 856:FWLIB/src/stm32f4xx_adc.c ****   if ((ADCx->CR2 & ADC_CR2_SWSTART) != (uint32_t)RESET)
 815              		.loc 1 856 3 view .LVU260
 816              		.loc 1 856 12 is_stmt 0 view .LVU261
 817 0000 8368     		ldr	r3, [r0, #8]
 818              		.loc 1 856 6 view .LVU262
 819 0002 13F0804F 		tst	r3, #1073741824
 820 0006 01D0     		beq	.L39
 857:FWLIB/src/stm32f4xx_adc.c ****   {
 858:FWLIB/src/stm32f4xx_adc.c ****     /* SWSTART bit is set */
 859:FWLIB/src/stm32f4xx_adc.c ****     bitstatus = SET;
 821              		.loc 1 859 15 view .LVU263
 822 0008 0120     		movs	r0, #1
 823              	.LVL73:
 824              		.loc 1 859 15 view .LVU264
 825 000a 7047     		bx	lr
ARM GAS  /tmp/ccVoyQ2j.s 			page 31


 826              	.LVL74:
 827              	.L39:
 860:FWLIB/src/stm32f4xx_adc.c ****   }
 861:FWLIB/src/stm32f4xx_adc.c ****   else
 862:FWLIB/src/stm32f4xx_adc.c ****   {
 863:FWLIB/src/stm32f4xx_adc.c ****     /* SWSTART bit is reset */
 864:FWLIB/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 828              		.loc 1 864 15 view .LVU265
 829 000c 0020     		movs	r0, #0
 830              	.LVL75:
 865:FWLIB/src/stm32f4xx_adc.c ****   }
 866:FWLIB/src/stm32f4xx_adc.c ****   
 867:FWLIB/src/stm32f4xx_adc.c ****   /* Return the SWSTART bit status */
 868:FWLIB/src/stm32f4xx_adc.c ****   return  bitstatus;
 831              		.loc 1 868 3 is_stmt 1 view .LVU266
 869:FWLIB/src/stm32f4xx_adc.c **** }
 832              		.loc 1 869 1 is_stmt 0 view .LVU267
 833 000e 7047     		bx	lr
 834              		.cfi_endproc
 835              	.LFE136:
 837              		.section	.text.ADC_EOCOnEachRegularChannelCmd,"ax",%progbits
 838              		.align	1
 839              		.global	ADC_EOCOnEachRegularChannelCmd
 840              		.syntax unified
 841              		.thumb
 842              		.thumb_func
 843              		.fpu fpv4-sp-d16
 845              	ADC_EOCOnEachRegularChannelCmd:
 846              	.LVL76:
 847              	.LFB137:
 870:FWLIB/src/stm32f4xx_adc.c **** 
 871:FWLIB/src/stm32f4xx_adc.c **** 
 872:FWLIB/src/stm32f4xx_adc.c **** /**
 873:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the EOC on each regular channel conversion
 874:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 875:FWLIB/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC EOC flag rising
 876:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 877:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 878:FWLIB/src/stm32f4xx_adc.c ****   */
 879:FWLIB/src/stm32f4xx_adc.c **** void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 880:FWLIB/src/stm32f4xx_adc.c **** {
 848              		.loc 1 880 1 is_stmt 1 view -0
 849              		.cfi_startproc
 850              		@ args = 0, pretend = 0, frame = 0
 851              		@ frame_needed = 0, uses_anonymous_args = 0
 852              		@ link register save eliminated.
 881:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 882:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 853              		.loc 1 882 3 view .LVU269
 883:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 854              		.loc 1 883 3 view .LVU270
 884:FWLIB/src/stm32f4xx_adc.c ****   
 885:FWLIB/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 855              		.loc 1 885 3 view .LVU271
 856              		.loc 1 885 6 is_stmt 0 view .LVU272
 857 0000 21B1     		cbz	r1, .L41
 886:FWLIB/src/stm32f4xx_adc.c ****   {
ARM GAS  /tmp/ccVoyQ2j.s 			page 32


 887:FWLIB/src/stm32f4xx_adc.c ****     /* Enable the selected ADC EOC rising on each regular channel conversion */
 888:FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 858              		.loc 1 888 5 is_stmt 1 view .LVU273
 859              		.loc 1 888 15 is_stmt 0 view .LVU274
 860 0002 8368     		ldr	r3, [r0, #8]
 861 0004 43F48063 		orr	r3, r3, #1024
 862 0008 8360     		str	r3, [r0, #8]
 863 000a 7047     		bx	lr
 864              	.L41:
 889:FWLIB/src/stm32f4xx_adc.c ****   }
 890:FWLIB/src/stm32f4xx_adc.c ****   else
 891:FWLIB/src/stm32f4xx_adc.c ****   {
 892:FWLIB/src/stm32f4xx_adc.c ****     /* Disable the selected ADC EOC rising on each regular channel conversion */
 893:FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 865              		.loc 1 893 5 is_stmt 1 view .LVU275
 866              		.loc 1 893 15 is_stmt 0 view .LVU276
 867 000c 8368     		ldr	r3, [r0, #8]
 868 000e 23F48063 		bic	r3, r3, #1024
 869 0012 8360     		str	r3, [r0, #8]
 894:FWLIB/src/stm32f4xx_adc.c ****   }
 895:FWLIB/src/stm32f4xx_adc.c **** }
 870              		.loc 1 895 1 view .LVU277
 871 0014 7047     		bx	lr
 872              		.cfi_endproc
 873              	.LFE137:
 875              		.section	.text.ADC_ContinuousModeCmd,"ax",%progbits
 876              		.align	1
 877              		.global	ADC_ContinuousModeCmd
 878              		.syntax unified
 879              		.thumb
 880              		.thumb_func
 881              		.fpu fpv4-sp-d16
 883              	ADC_ContinuousModeCmd:
 884              	.LVL77:
 885              	.LFB138:
 896:FWLIB/src/stm32f4xx_adc.c **** 
 897:FWLIB/src/stm32f4xx_adc.c **** /**
 898:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC continuous conversion mode 
 899:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 900:FWLIB/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC continuous conversion mode
 901:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 902:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 903:FWLIB/src/stm32f4xx_adc.c ****   */
 904:FWLIB/src/stm32f4xx_adc.c **** void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 905:FWLIB/src/stm32f4xx_adc.c **** {
 886              		.loc 1 905 1 is_stmt 1 view -0
 887              		.cfi_startproc
 888              		@ args = 0, pretend = 0, frame = 0
 889              		@ frame_needed = 0, uses_anonymous_args = 0
 890              		@ link register save eliminated.
 906:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 907:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 891              		.loc 1 907 3 view .LVU279
 908:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 892              		.loc 1 908 3 view .LVU280
 909:FWLIB/src/stm32f4xx_adc.c ****   
 910:FWLIB/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
ARM GAS  /tmp/ccVoyQ2j.s 			page 33


 893              		.loc 1 910 3 view .LVU281
 894              		.loc 1 910 6 is_stmt 0 view .LVU282
 895 0000 21B1     		cbz	r1, .L44
 911:FWLIB/src/stm32f4xx_adc.c ****   {
 912:FWLIB/src/stm32f4xx_adc.c ****     /* Enable the selected ADC continuous conversion mode */
 913:FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 896              		.loc 1 913 5 is_stmt 1 view .LVU283
 897              		.loc 1 913 15 is_stmt 0 view .LVU284
 898 0002 8368     		ldr	r3, [r0, #8]
 899 0004 43F00203 		orr	r3, r3, #2
 900 0008 8360     		str	r3, [r0, #8]
 901 000a 7047     		bx	lr
 902              	.L44:
 914:FWLIB/src/stm32f4xx_adc.c ****   }
 915:FWLIB/src/stm32f4xx_adc.c ****   else
 916:FWLIB/src/stm32f4xx_adc.c ****   {
 917:FWLIB/src/stm32f4xx_adc.c ****     /* Disable the selected ADC continuous conversion mode */
 918:FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 903              		.loc 1 918 5 is_stmt 1 view .LVU285
 904              		.loc 1 918 15 is_stmt 0 view .LVU286
 905 000c 8368     		ldr	r3, [r0, #8]
 906 000e 23F00203 		bic	r3, r3, #2
 907 0012 8360     		str	r3, [r0, #8]
 919:FWLIB/src/stm32f4xx_adc.c ****   }
 920:FWLIB/src/stm32f4xx_adc.c **** }
 908              		.loc 1 920 1 view .LVU287
 909 0014 7047     		bx	lr
 910              		.cfi_endproc
 911              	.LFE138:
 913              		.section	.text.ADC_DiscModeChannelCountConfig,"ax",%progbits
 914              		.align	1
 915              		.global	ADC_DiscModeChannelCountConfig
 916              		.syntax unified
 917              		.thumb
 918              		.thumb_func
 919              		.fpu fpv4-sp-d16
 921              	ADC_DiscModeChannelCountConfig:
 922              	.LVL78:
 923              	.LFB139:
 921:FWLIB/src/stm32f4xx_adc.c **** 
 922:FWLIB/src/stm32f4xx_adc.c **** /**
 923:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Configures the discontinuous mode for the selected ADC regular group 
 924:FWLIB/src/stm32f4xx_adc.c ****   *         channel.
 925:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 926:FWLIB/src/stm32f4xx_adc.c ****   * @param  Number: specifies the discontinuous mode regular channel count value.
 927:FWLIB/src/stm32f4xx_adc.c ****   *          This number must be between 1 and 8.
 928:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 929:FWLIB/src/stm32f4xx_adc.c ****   */
 930:FWLIB/src/stm32f4xx_adc.c **** void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
 931:FWLIB/src/stm32f4xx_adc.c **** {
 924              		.loc 1 931 1 is_stmt 1 view -0
 925              		.cfi_startproc
 926              		@ args = 0, pretend = 0, frame = 0
 927              		@ frame_needed = 0, uses_anonymous_args = 0
 928              		@ link register save eliminated.
 932:FWLIB/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 929              		.loc 1 932 3 view .LVU289
ARM GAS  /tmp/ccVoyQ2j.s 			page 34


 933:FWLIB/src/stm32f4xx_adc.c ****   uint32_t tmpreg2 = 0;
 930              		.loc 1 933 3 view .LVU290
 934:FWLIB/src/stm32f4xx_adc.c ****   
 935:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 936:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 931              		.loc 1 936 3 view .LVU291
 937:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
 932              		.loc 1 937 3 view .LVU292
 938:FWLIB/src/stm32f4xx_adc.c ****   
 939:FWLIB/src/stm32f4xx_adc.c ****   /* Get the old register value */
 940:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR1;
 933              		.loc 1 940 3 view .LVU293
 934              		.loc 1 940 11 is_stmt 0 view .LVU294
 935 0000 4368     		ldr	r3, [r0, #4]
 936              	.LVL79:
 941:FWLIB/src/stm32f4xx_adc.c ****   
 942:FWLIB/src/stm32f4xx_adc.c ****   /* Clear the old discontinuous mode channel count */
 943:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 &= CR1_DISCNUM_RESET;
 937              		.loc 1 943 3 is_stmt 1 view .LVU295
 938              		.loc 1 943 11 is_stmt 0 view .LVU296
 939 0002 23F46043 		bic	r3, r3, #57344
 940              	.LVL80:
 944:FWLIB/src/stm32f4xx_adc.c ****   
 945:FWLIB/src/stm32f4xx_adc.c ****   /* Set the discontinuous mode channel count */
 946:FWLIB/src/stm32f4xx_adc.c ****   tmpreg2 = Number - 1;
 941              		.loc 1 946 3 is_stmt 1 view .LVU297
 942              		.loc 1 946 20 is_stmt 0 view .LVU298
 943 0006 0139     		subs	r1, r1, #1
 944              	.LVL81:
 947:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2 << 13;
 945              		.loc 1 947 3 is_stmt 1 view .LVU299
 946              		.loc 1 947 11 is_stmt 0 view .LVU300
 947 0008 43EA4133 		orr	r3, r3, r1, lsl #13
 948              	.LVL82:
 948:FWLIB/src/stm32f4xx_adc.c ****   
 949:FWLIB/src/stm32f4xx_adc.c ****   /* Store the new register value */
 950:FWLIB/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg1;
 949              		.loc 1 950 3 is_stmt 1 view .LVU301
 950              		.loc 1 950 13 is_stmt 0 view .LVU302
 951 000c 4360     		str	r3, [r0, #4]
 951:FWLIB/src/stm32f4xx_adc.c **** }
 952              		.loc 1 951 1 view .LVU303
 953 000e 7047     		bx	lr
 954              		.cfi_endproc
 955              	.LFE139:
 957              		.section	.text.ADC_DiscModeCmd,"ax",%progbits
 958              		.align	1
 959              		.global	ADC_DiscModeCmd
 960              		.syntax unified
 961              		.thumb
 962              		.thumb_func
 963              		.fpu fpv4-sp-d16
 965              	ADC_DiscModeCmd:
 966              	.LVL83:
 967              	.LFB140:
 952:FWLIB/src/stm32f4xx_adc.c **** 
 953:FWLIB/src/stm32f4xx_adc.c **** /**
ARM GAS  /tmp/ccVoyQ2j.s 			page 35


 954:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the discontinuous mode on regular group channel 
 955:FWLIB/src/stm32f4xx_adc.c ****   *         for the specified ADC
 956:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 957:FWLIB/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode on 
 958:FWLIB/src/stm32f4xx_adc.c ****   *         regular group channel.
 959:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 960:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
 961:FWLIB/src/stm32f4xx_adc.c ****   */
 962:FWLIB/src/stm32f4xx_adc.c **** void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 963:FWLIB/src/stm32f4xx_adc.c **** {
 968              		.loc 1 963 1 is_stmt 1 view -0
 969              		.cfi_startproc
 970              		@ args = 0, pretend = 0, frame = 0
 971              		@ frame_needed = 0, uses_anonymous_args = 0
 972              		@ link register save eliminated.
 964:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 965:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 973              		.loc 1 965 3 view .LVU305
 966:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 974              		.loc 1 966 3 view .LVU306
 967:FWLIB/src/stm32f4xx_adc.c ****   
 968:FWLIB/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 975              		.loc 1 968 3 view .LVU307
 976              		.loc 1 968 6 is_stmt 0 view .LVU308
 977 0000 21B1     		cbz	r1, .L48
 969:FWLIB/src/stm32f4xx_adc.c ****   {
 970:FWLIB/src/stm32f4xx_adc.c ****     /* Enable the selected ADC regular discontinuous mode */
 971:FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 978              		.loc 1 971 5 is_stmt 1 view .LVU309
 979              		.loc 1 971 15 is_stmt 0 view .LVU310
 980 0002 4368     		ldr	r3, [r0, #4]
 981 0004 43F40063 		orr	r3, r3, #2048
 982 0008 4360     		str	r3, [r0, #4]
 983 000a 7047     		bx	lr
 984              	.L48:
 972:FWLIB/src/stm32f4xx_adc.c ****   }
 973:FWLIB/src/stm32f4xx_adc.c ****   else
 974:FWLIB/src/stm32f4xx_adc.c ****   {
 975:FWLIB/src/stm32f4xx_adc.c ****     /* Disable the selected ADC regular discontinuous mode */
 976:FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 985              		.loc 1 976 5 is_stmt 1 view .LVU311
 986              		.loc 1 976 15 is_stmt 0 view .LVU312
 987 000c 4368     		ldr	r3, [r0, #4]
 988 000e 23F40063 		bic	r3, r3, #2048
 989 0012 4360     		str	r3, [r0, #4]
 977:FWLIB/src/stm32f4xx_adc.c ****   }
 978:FWLIB/src/stm32f4xx_adc.c **** }
 990              		.loc 1 978 1 view .LVU313
 991 0014 7047     		bx	lr
 992              		.cfi_endproc
 993              	.LFE140:
 995              		.section	.text.ADC_GetConversionValue,"ax",%progbits
 996              		.align	1
 997              		.global	ADC_GetConversionValue
 998              		.syntax unified
 999              		.thumb
 1000              		.thumb_func
ARM GAS  /tmp/ccVoyQ2j.s 			page 36


 1001              		.fpu fpv4-sp-d16
 1003              	ADC_GetConversionValue:
 1004              	.LVL84:
 1005              	.LFB141:
 979:FWLIB/src/stm32f4xx_adc.c **** 
 980:FWLIB/src/stm32f4xx_adc.c **** /**
 981:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Returns the last ADCx conversion result data for regular channel.
 982:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 983:FWLIB/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
 984:FWLIB/src/stm32f4xx_adc.c ****   */
 985:FWLIB/src/stm32f4xx_adc.c **** uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
 986:FWLIB/src/stm32f4xx_adc.c **** {
 1006              		.loc 1 986 1 is_stmt 1 view -0
 1007              		.cfi_startproc
 1008              		@ args = 0, pretend = 0, frame = 0
 1009              		@ frame_needed = 0, uses_anonymous_args = 0
 1010              		@ link register save eliminated.
 987:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
 988:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 1011              		.loc 1 988 3 view .LVU315
 989:FWLIB/src/stm32f4xx_adc.c ****   
 990:FWLIB/src/stm32f4xx_adc.c ****   /* Return the selected ADC conversion value */
 991:FWLIB/src/stm32f4xx_adc.c ****   return (uint16_t) ADCx->DR;
 1012              		.loc 1 991 3 view .LVU316
 1013              		.loc 1 991 25 is_stmt 0 view .LVU317
 1014 0000 C06C     		ldr	r0, [r0, #76]
 1015              	.LVL85:
 992:FWLIB/src/stm32f4xx_adc.c **** }
 1016              		.loc 1 992 1 view .LVU318
 1017 0002 80B2     		uxth	r0, r0
 1018 0004 7047     		bx	lr
 1019              		.cfi_endproc
 1020              	.LFE141:
 1022              		.section	.text.ADC_GetMultiModeConversionValue,"ax",%progbits
 1023              		.align	1
 1024              		.global	ADC_GetMultiModeConversionValue
 1025              		.syntax unified
 1026              		.thumb
 1027              		.thumb_func
 1028              		.fpu fpv4-sp-d16
 1030              	ADC_GetMultiModeConversionValue:
 1031              	.LFB142:
 993:FWLIB/src/stm32f4xx_adc.c **** 
 994:FWLIB/src/stm32f4xx_adc.c **** /**
 995:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Returns the last ADC1, ADC2 and ADC3 regular conversions results 
 996:FWLIB/src/stm32f4xx_adc.c ****   *         data in the selected multi mode.
 997:FWLIB/src/stm32f4xx_adc.c ****   * @param  None  
 998:FWLIB/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
 999:FWLIB/src/stm32f4xx_adc.c ****   * @note   In dual mode, the value returned by this function is as following
1000:FWLIB/src/stm32f4xx_adc.c ****   *           Data[15:0] : these bits contain the regular data of ADC1.
1001:FWLIB/src/stm32f4xx_adc.c ****   *           Data[31:16]: these bits contain the regular data of ADC2.
1002:FWLIB/src/stm32f4xx_adc.c ****   * @note   In triple mode, the value returned by this function is as following
1003:FWLIB/src/stm32f4xx_adc.c ****   *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2
1004:FWLIB/src/stm32f4xx_adc.c ****   *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3
1005:FWLIB/src/stm32f4xx_adc.c ****   */
1006:FWLIB/src/stm32f4xx_adc.c **** uint32_t ADC_GetMultiModeConversionValue(void)
1007:FWLIB/src/stm32f4xx_adc.c **** {
ARM GAS  /tmp/ccVoyQ2j.s 			page 37


 1032              		.loc 1 1007 1 is_stmt 1 view -0
 1033              		.cfi_startproc
 1034              		@ args = 0, pretend = 0, frame = 0
 1035              		@ frame_needed = 0, uses_anonymous_args = 0
 1036              		@ link register save eliminated.
1008:FWLIB/src/stm32f4xx_adc.c ****   /* Return the multi mode conversion value */
1009:FWLIB/src/stm32f4xx_adc.c ****   return (*(__IO uint32_t *) CDR_ADDRESS);
 1037              		.loc 1 1009 3 view .LVU320
 1038              		.loc 1 1009 11 is_stmt 0 view .LVU321
 1039 0000 014B     		ldr	r3, .L52
 1040 0002 1868     		ldr	r0, [r3]
1010:FWLIB/src/stm32f4xx_adc.c **** }
 1041              		.loc 1 1010 1 view .LVU322
 1042 0004 7047     		bx	lr
 1043              	.L53:
 1044 0006 00BF     		.align	2
 1045              	.L52:
 1046 0008 08230140 		.word	1073816328
 1047              		.cfi_endproc
 1048              	.LFE142:
 1050              		.section	.text.ADC_DMACmd,"ax",%progbits
 1051              		.align	1
 1052              		.global	ADC_DMACmd
 1053              		.syntax unified
 1054              		.thumb
 1055              		.thumb_func
 1056              		.fpu fpv4-sp-d16
 1058              	ADC_DMACmd:
 1059              	.LVL86:
 1060              	.LFB143:
1011:FWLIB/src/stm32f4xx_adc.c **** /**
1012:FWLIB/src/stm32f4xx_adc.c ****   * @}
1013:FWLIB/src/stm32f4xx_adc.c ****   */
1014:FWLIB/src/stm32f4xx_adc.c **** 
1015:FWLIB/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group5 Regular Channels DMA Configuration functions
1016:FWLIB/src/stm32f4xx_adc.c ****  *  @brief   Regular Channels DMA Configuration functions 
1017:FWLIB/src/stm32f4xx_adc.c ****  *
1018:FWLIB/src/stm32f4xx_adc.c **** @verbatim   
1019:FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================
1020:FWLIB/src/stm32f4xx_adc.c ****             ##### Regular Channels DMA Configuration functions #####
1021:FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================  
1022:FWLIB/src/stm32f4xx_adc.c ****     [..] This section provides functions allowing to configure the DMA for ADC 
1023:FWLIB/src/stm32f4xx_adc.c ****          regular channels.
1024:FWLIB/src/stm32f4xx_adc.c ****          Since converted regular channel values are stored into a unique data 
1025:FWLIB/src/stm32f4xx_adc.c ****          register, it is useful to use DMA for conversion of more than one regular 
1026:FWLIB/src/stm32f4xx_adc.c ****          channel. This avoids the loss of the data already stored in the ADC 
1027:FWLIB/src/stm32f4xx_adc.c ****          Data register.   
1028:FWLIB/src/stm32f4xx_adc.c ****          When the DMA mode is enabled (using the ADC_DMACmd() function), after each
1029:FWLIB/src/stm32f4xx_adc.c ****          conversion of a regular channel, a DMA request is generated.
1030:FWLIB/src/stm32f4xx_adc.c ****     [..] Depending on the "DMA disable selection for Independent ADC mode" 
1031:FWLIB/src/stm32f4xx_adc.c ****          configuration (using the ADC_DMARequestAfterLastTransferCmd() function), 
1032:FWLIB/src/stm32f4xx_adc.c ****          at the end of the last DMA transfer, two possibilities are allowed:
1033:FWLIB/src/stm32f4xx_adc.c ****       (+) No new DMA request is issued to the DMA controller (feature DISABLED) 
1034:FWLIB/src/stm32f4xx_adc.c ****       (+) Requests can continue to be generated (feature ENABLED).  
1035:FWLIB/src/stm32f4xx_adc.c ****     [..] Depending on the "DMA disable selection for multi ADC mode" configuration 
1036:FWLIB/src/stm32f4xx_adc.c ****          (using the void ADC_MultiModeDMARequestAfterLastTransferCmd() function), 
1037:FWLIB/src/stm32f4xx_adc.c ****          at the end of the last DMA transfer, two possibilities are allowed:
ARM GAS  /tmp/ccVoyQ2j.s 			page 38


1038:FWLIB/src/stm32f4xx_adc.c ****         (+) No new DMA request is issued to the DMA controller (feature DISABLED) 
1039:FWLIB/src/stm32f4xx_adc.c ****         (+) Requests can continue to be generated (feature ENABLED).
1040:FWLIB/src/stm32f4xx_adc.c **** 
1041:FWLIB/src/stm32f4xx_adc.c **** @endverbatim
1042:FWLIB/src/stm32f4xx_adc.c ****   * @{
1043:FWLIB/src/stm32f4xx_adc.c ****   */
1044:FWLIB/src/stm32f4xx_adc.c ****   
1045:FWLIB/src/stm32f4xx_adc.c ****  /**
1046:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC DMA request.
1047:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1048:FWLIB/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA transfer.
1049:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1050:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1051:FWLIB/src/stm32f4xx_adc.c ****   */
1052:FWLIB/src/stm32f4xx_adc.c **** void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1053:FWLIB/src/stm32f4xx_adc.c **** {
 1061              		.loc 1 1053 1 is_stmt 1 view -0
 1062              		.cfi_startproc
 1063              		@ args = 0, pretend = 0, frame = 0
 1064              		@ frame_needed = 0, uses_anonymous_args = 0
 1065              		@ link register save eliminated.
1054:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1055:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 1066              		.loc 1 1055 3 view .LVU324
1056:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1067              		.loc 1 1056 3 view .LVU325
1057:FWLIB/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1068              		.loc 1 1057 3 view .LVU326
 1069              		.loc 1 1057 6 is_stmt 0 view .LVU327
 1070 0000 21B1     		cbz	r1, .L55
1058:FWLIB/src/stm32f4xx_adc.c ****   {
1059:FWLIB/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request */
1060:FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 1071              		.loc 1 1060 5 is_stmt 1 view .LVU328
 1072              		.loc 1 1060 15 is_stmt 0 view .LVU329
 1073 0002 8368     		ldr	r3, [r0, #8]
 1074 0004 43F48073 		orr	r3, r3, #256
 1075 0008 8360     		str	r3, [r0, #8]
 1076 000a 7047     		bx	lr
 1077              	.L55:
1061:FWLIB/src/stm32f4xx_adc.c ****   }
1062:FWLIB/src/stm32f4xx_adc.c ****   else
1063:FWLIB/src/stm32f4xx_adc.c ****   {
1064:FWLIB/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request */
1065:FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 1078              		.loc 1 1065 5 is_stmt 1 view .LVU330
 1079              		.loc 1 1065 15 is_stmt 0 view .LVU331
 1080 000c 8368     		ldr	r3, [r0, #8]
 1081 000e 23F48073 		bic	r3, r3, #256
 1082 0012 8360     		str	r3, [r0, #8]
1066:FWLIB/src/stm32f4xx_adc.c ****   }
1067:FWLIB/src/stm32f4xx_adc.c **** }
 1083              		.loc 1 1067 1 view .LVU332
 1084 0014 7047     		bx	lr
 1085              		.cfi_endproc
 1086              	.LFE143:
 1088              		.section	.text.ADC_DMARequestAfterLastTransferCmd,"ax",%progbits
ARM GAS  /tmp/ccVoyQ2j.s 			page 39


 1089              		.align	1
 1090              		.global	ADC_DMARequestAfterLastTransferCmd
 1091              		.syntax unified
 1092              		.thumb
 1093              		.thumb_func
 1094              		.fpu fpv4-sp-d16
 1096              	ADC_DMARequestAfterLastTransferCmd:
 1097              	.LVL87:
 1098              	.LFB144:
1068:FWLIB/src/stm32f4xx_adc.c **** 
1069:FWLIB/src/stm32f4xx_adc.c **** /**
1070:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC DMA request after last transfer (Single-ADC mode)  
1071:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1072:FWLIB/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA request after last transfer.
1073:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1074:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1075:FWLIB/src/stm32f4xx_adc.c ****   */
1076:FWLIB/src/stm32f4xx_adc.c **** void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1077:FWLIB/src/stm32f4xx_adc.c **** {
 1099              		.loc 1 1077 1 is_stmt 1 view -0
 1100              		.cfi_startproc
 1101              		@ args = 0, pretend = 0, frame = 0
 1102              		@ frame_needed = 0, uses_anonymous_args = 0
 1103              		@ link register save eliminated.
1078:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1079:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 1104              		.loc 1 1079 3 view .LVU334
1080:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1105              		.loc 1 1080 3 view .LVU335
1081:FWLIB/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1106              		.loc 1 1081 3 view .LVU336
 1107              		.loc 1 1081 6 is_stmt 0 view .LVU337
 1108 0000 21B1     		cbz	r1, .L58
1082:FWLIB/src/stm32f4xx_adc.c ****   {
1083:FWLIB/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request after last transfer */
1084:FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 1109              		.loc 1 1084 5 is_stmt 1 view .LVU338
 1110              		.loc 1 1084 15 is_stmt 0 view .LVU339
 1111 0002 8368     		ldr	r3, [r0, #8]
 1112 0004 43F40073 		orr	r3, r3, #512
 1113 0008 8360     		str	r3, [r0, #8]
 1114 000a 7047     		bx	lr
 1115              	.L58:
1085:FWLIB/src/stm32f4xx_adc.c ****   }
1086:FWLIB/src/stm32f4xx_adc.c ****   else
1087:FWLIB/src/stm32f4xx_adc.c ****   {
1088:FWLIB/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request after last transfer */
1089:FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 1116              		.loc 1 1089 5 is_stmt 1 view .LVU340
 1117              		.loc 1 1089 15 is_stmt 0 view .LVU341
 1118 000c 8368     		ldr	r3, [r0, #8]
 1119 000e 23F40073 		bic	r3, r3, #512
 1120 0012 8360     		str	r3, [r0, #8]
1090:FWLIB/src/stm32f4xx_adc.c ****   }
1091:FWLIB/src/stm32f4xx_adc.c **** }
 1121              		.loc 1 1091 1 view .LVU342
 1122 0014 7047     		bx	lr
ARM GAS  /tmp/ccVoyQ2j.s 			page 40


 1123              		.cfi_endproc
 1124              	.LFE144:
 1126              		.section	.text.ADC_MultiModeDMARequestAfterLastTransferCmd,"ax",%progbits
 1127              		.align	1
 1128              		.global	ADC_MultiModeDMARequestAfterLastTransferCmd
 1129              		.syntax unified
 1130              		.thumb
 1131              		.thumb_func
 1132              		.fpu fpv4-sp-d16
 1134              	ADC_MultiModeDMARequestAfterLastTransferCmd:
 1135              	.LVL88:
 1136              	.LFB145:
1092:FWLIB/src/stm32f4xx_adc.c **** 
1093:FWLIB/src/stm32f4xx_adc.c **** /**
1094:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC DMA request after last transfer in multi ADC mode       
1095:FWLIB/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA request after last transfer.
1096:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1097:FWLIB/src/stm32f4xx_adc.c ****   * @note   if Enabled, DMA requests are issued as long as data are converted and 
1098:FWLIB/src/stm32f4xx_adc.c ****   *         DMA mode for multi ADC mode (selected using ADC_CommonInit() function 
1099:FWLIB/src/stm32f4xx_adc.c ****   *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
1100:FWLIB/src/stm32f4xx_adc.c ****   *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
1101:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1102:FWLIB/src/stm32f4xx_adc.c ****   */
1103:FWLIB/src/stm32f4xx_adc.c **** void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
1104:FWLIB/src/stm32f4xx_adc.c **** {
 1137              		.loc 1 1104 1 is_stmt 1 view -0
 1138              		.cfi_startproc
 1139              		@ args = 0, pretend = 0, frame = 0
 1140              		@ frame_needed = 0, uses_anonymous_args = 0
 1141              		@ link register save eliminated.
1105:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1106:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1142              		.loc 1 1106 3 view .LVU344
1107:FWLIB/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1143              		.loc 1 1107 3 view .LVU345
 1144              		.loc 1 1107 6 is_stmt 0 view .LVU346
 1145 0000 28B1     		cbz	r0, .L61
1108:FWLIB/src/stm32f4xx_adc.c ****   {
1109:FWLIB/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request after last transfer */
1110:FWLIB/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 1146              		.loc 1 1110 5 is_stmt 1 view .LVU347
 1147              		.loc 1 1110 14 is_stmt 0 view .LVU348
 1148 0002 064A     		ldr	r2, .L63
 1149 0004 5368     		ldr	r3, [r2, #4]
 1150 0006 43F40053 		orr	r3, r3, #8192
 1151 000a 5360     		str	r3, [r2, #4]
 1152 000c 7047     		bx	lr
 1153              	.L61:
1111:FWLIB/src/stm32f4xx_adc.c ****   }
1112:FWLIB/src/stm32f4xx_adc.c ****   else
1113:FWLIB/src/stm32f4xx_adc.c ****   {
1114:FWLIB/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request after last transfer */
1115:FWLIB/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 1154              		.loc 1 1115 5 is_stmt 1 view .LVU349
 1155              		.loc 1 1115 14 is_stmt 0 view .LVU350
 1156 000e 034A     		ldr	r2, .L63
 1157 0010 5368     		ldr	r3, [r2, #4]
ARM GAS  /tmp/ccVoyQ2j.s 			page 41


 1158 0012 23F40053 		bic	r3, r3, #8192
 1159 0016 5360     		str	r3, [r2, #4]
1116:FWLIB/src/stm32f4xx_adc.c ****   }
1117:FWLIB/src/stm32f4xx_adc.c **** }
 1160              		.loc 1 1117 1 view .LVU351
 1161 0018 7047     		bx	lr
 1162              	.L64:
 1163 001a 00BF     		.align	2
 1164              	.L63:
 1165 001c 00230140 		.word	1073816320
 1166              		.cfi_endproc
 1167              	.LFE145:
 1169              		.section	.text.ADC_InjectedChannelConfig,"ax",%progbits
 1170              		.align	1
 1171              		.global	ADC_InjectedChannelConfig
 1172              		.syntax unified
 1173              		.thumb
 1174              		.thumb_func
 1175              		.fpu fpv4-sp-d16
 1177              	ADC_InjectedChannelConfig:
 1178              	.LVL89:
 1179              	.LFB146:
1118:FWLIB/src/stm32f4xx_adc.c **** /**
1119:FWLIB/src/stm32f4xx_adc.c ****   * @}
1120:FWLIB/src/stm32f4xx_adc.c ****   */
1121:FWLIB/src/stm32f4xx_adc.c **** 
1122:FWLIB/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group6 Injected channels Configuration functions
1123:FWLIB/src/stm32f4xx_adc.c ****  *  @brief   Injected channels Configuration functions 
1124:FWLIB/src/stm32f4xx_adc.c ****  *
1125:FWLIB/src/stm32f4xx_adc.c **** @verbatim   
1126:FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================
1127:FWLIB/src/stm32f4xx_adc.c ****               ##### Injected channels Configuration functions #####
1128:FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================  
1129:FWLIB/src/stm32f4xx_adc.c **** 
1130:FWLIB/src/stm32f4xx_adc.c ****     [..] This section provide functions allowing to configure the ADC Injected channels,
1131:FWLIB/src/stm32f4xx_adc.c ****          it is composed of 2 sub sections : 
1132:FWLIB/src/stm32f4xx_adc.c ****     
1133:FWLIB/src/stm32f4xx_adc.c ****       (#) Configuration functions for Injected channels: This subsection provides 
1134:FWLIB/src/stm32f4xx_adc.c ****           functions allowing to configure the ADC injected channels :    
1135:FWLIB/src/stm32f4xx_adc.c ****         (++) Configure the rank in the injected group sequencer for each channel
1136:FWLIB/src/stm32f4xx_adc.c ****         (++) Configure the sampling time for each channel    
1137:FWLIB/src/stm32f4xx_adc.c ****         (++) Activate the Auto injected Mode  
1138:FWLIB/src/stm32f4xx_adc.c ****         (++) Activate the Discontinuous Mode 
1139:FWLIB/src/stm32f4xx_adc.c ****         (++) scan mode activation  
1140:FWLIB/src/stm32f4xx_adc.c ****         (++) External/software trigger source   
1141:FWLIB/src/stm32f4xx_adc.c ****         (++) External trigger edge 
1142:FWLIB/src/stm32f4xx_adc.c ****         (++) injected channels sequencer.
1143:FWLIB/src/stm32f4xx_adc.c ****     
1144:FWLIB/src/stm32f4xx_adc.c ****       (#) Get the Specified Injected channel conversion data: This subsection 
1145:FWLIB/src/stm32f4xx_adc.c ****           provides an important function in the ADC peripheral since it returns the 
1146:FWLIB/src/stm32f4xx_adc.c ****           converted data of the specific injected channel.
1147:FWLIB/src/stm32f4xx_adc.c **** 
1148:FWLIB/src/stm32f4xx_adc.c **** @endverbatim
1149:FWLIB/src/stm32f4xx_adc.c ****   * @{
1150:FWLIB/src/stm32f4xx_adc.c ****   */ 
1151:FWLIB/src/stm32f4xx_adc.c **** /**
1152:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Configures for the selected ADC injected channel its corresponding
ARM GAS  /tmp/ccVoyQ2j.s 			page 42


1153:FWLIB/src/stm32f4xx_adc.c ****   *         rank in the sequencer and its sample time.
1154:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1155:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
1156:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1157:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
1158:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
1159:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
1160:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
1161:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
1162:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
1163:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
1164:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
1165:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
1166:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
1167:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
1168:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
1169:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
1170:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
1171:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
1172:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
1173:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
1174:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
1175:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected                       
1176:FWLIB/src/stm32f4xx_adc.c ****   * @param  Rank: The rank in the injected group sequencer. 
1177:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter must be between 1 to 4.
1178:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
1179:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1180:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_3Cycles: Sample time equal to 3 cycles
1181:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_15Cycles: Sample time equal to 15 cycles
1182:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_28Cycles: Sample time equal to 28 cycles
1183:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_56Cycles: Sample time equal to 56 cycles	
1184:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_84Cycles: Sample time equal to 84 cycles	
1185:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_112Cycles: Sample time equal to 112 cycles	
1186:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
1187:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
1188:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1189:FWLIB/src/stm32f4xx_adc.c ****   */
1190:FWLIB/src/stm32f4xx_adc.c **** void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sa
1191:FWLIB/src/stm32f4xx_adc.c **** {
 1180              		.loc 1 1191 1 is_stmt 1 view -0
 1181              		.cfi_startproc
 1182              		@ args = 0, pretend = 0, frame = 0
 1183              		@ frame_needed = 0, uses_anonymous_args = 0
 1184              		@ link register save eliminated.
 1185              		.loc 1 1191 1 is_stmt 0 view .LVU353
 1186 0000 70B4     		push	{r4, r5, r6}
 1187              	.LCFI8:
 1188              		.cfi_def_cfa_offset 12
 1189              		.cfi_offset 4, -12
 1190              		.cfi_offset 5, -8
 1191              		.cfi_offset 6, -4
1192:FWLIB/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 1192              		.loc 1 1192 3 is_stmt 1 view .LVU354
 1193              	.LVL90:
1193:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1194:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 1194              		.loc 1 1194 3 view .LVU355
ARM GAS  /tmp/ccVoyQ2j.s 			page 43


1195:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 1195              		.loc 1 1195 3 view .LVU356
1196:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_RANK(Rank));
 1196              		.loc 1 1196 3 view .LVU357
1197:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
 1197              		.loc 1 1197 3 view .LVU358
1198:FWLIB/src/stm32f4xx_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
1199:FWLIB/src/stm32f4xx_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 1198              		.loc 1 1199 3 view .LVU359
 1199              		.loc 1 1199 6 is_stmt 0 view .LVU360
 1200 0002 0929     		cmp	r1, #9
 1201 0004 1FD9     		bls	.L66
1200:FWLIB/src/stm32f4xx_adc.c ****   {
1201:FWLIB/src/stm32f4xx_adc.c ****     /* Get the old register value */
1202:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
 1202              		.loc 1 1202 5 is_stmt 1 view .LVU361
 1203              		.loc 1 1202 13 is_stmt 0 view .LVU362
 1204 0006 C568     		ldr	r5, [r0, #12]
 1205              	.LVL91:
1203:FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
1204:FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 1206              		.loc 1 1204 5 is_stmt 1 view .LVU363
 1207              		.loc 1 1204 48 is_stmt 0 view .LVU364
 1208 0008 A1F10A04 		sub	r4, r1, #10
 1209              		.loc 1 1204 34 view .LVU365
 1210 000c 04EB4404 		add	r4, r4, r4, lsl #1
 1211              		.loc 1 1204 13 view .LVU366
 1212 0010 0726     		movs	r6, #7
 1213 0012 A640     		lsls	r6, r6, r4
 1214              	.LVL92:
1205:FWLIB/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
1206:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 1215              		.loc 1 1206 5 is_stmt 1 view .LVU367
 1216              		.loc 1 1206 13 is_stmt 0 view .LVU368
 1217 0014 25EA0605 		bic	r5, r5, r6
 1218              	.LVL93:
1207:FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
1208:FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 1219              		.loc 1 1208 5 is_stmt 1 view .LVU369
 1220              		.loc 1 1208 13 is_stmt 0 view .LVU370
 1221 0018 03FA04F4 		lsl	r4, r3, r4
 1222              	.LVL94:
1209:FWLIB/src/stm32f4xx_adc.c ****     /* Set the new sample time */
1210:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 1223              		.loc 1 1210 5 is_stmt 1 view .LVU371
 1224              		.loc 1 1210 13 is_stmt 0 view .LVU372
 1225 001c 2C43     		orrs	r4, r4, r5
 1226              	.LVL95:
1211:FWLIB/src/stm32f4xx_adc.c ****     /* Store the new register value */
1212:FWLIB/src/stm32f4xx_adc.c ****     ADCx->SMPR1 = tmpreg1;
 1227              		.loc 1 1212 5 is_stmt 1 view .LVU373
 1228              		.loc 1 1212 17 is_stmt 0 view .LVU374
 1229 001e C460     		str	r4, [r0, #12]
 1230              	.LVL96:
 1231              	.L67:
1213:FWLIB/src/stm32f4xx_adc.c ****   }
1214:FWLIB/src/stm32f4xx_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
ARM GAS  /tmp/ccVoyQ2j.s 			page 44


1215:FWLIB/src/stm32f4xx_adc.c ****   {
1216:FWLIB/src/stm32f4xx_adc.c ****     /* Get the old register value */
1217:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
1218:FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
1219:FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
1220:FWLIB/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
1221:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
1222:FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
1223:FWLIB/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
1224:FWLIB/src/stm32f4xx_adc.c ****     /* Set the new sample time */
1225:FWLIB/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
1226:FWLIB/src/stm32f4xx_adc.c ****     /* Store the new register value */
1227:FWLIB/src/stm32f4xx_adc.c ****     ADCx->SMPR2 = tmpreg1;
1228:FWLIB/src/stm32f4xx_adc.c ****   }
1229:FWLIB/src/stm32f4xx_adc.c ****   /* Rank configuration */
1230:FWLIB/src/stm32f4xx_adc.c ****   /* Get the old register value */
1231:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->JSQR;
 1232              		.loc 1 1231 3 is_stmt 1 view .LVU375
 1233              		.loc 1 1231 11 is_stmt 0 view .LVU376
 1234 0020 846B     		ldr	r4, [r0, #56]
 1235              	.LVL97:
1232:FWLIB/src/stm32f4xx_adc.c ****   /* Get JL value: Number = JL+1 */
1233:FWLIB/src/stm32f4xx_adc.c ****   tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 1236              		.loc 1 1233 3 is_stmt 1 view .LVU377
 1237              		.loc 1 1233 11 is_stmt 0 view .LVU378
 1238 0022 C4F30153 		ubfx	r3, r4, #20, #2
 1239              	.LVL98:
1234:FWLIB/src/stm32f4xx_adc.c ****   /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
1235:FWLIB/src/stm32f4xx_adc.c ****   tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 1240              		.loc 1 1235 3 is_stmt 1 view .LVU379
 1241              		.loc 1 1235 55 is_stmt 0 view .LVU380
 1242 0026 D31A     		subs	r3, r2, r3
 1243              	.LVL99:
 1244              		.loc 1 1235 55 view .LVU381
 1245 0028 DBB2     		uxtb	r3, r3
 1246              		.loc 1 1235 34 view .LVU382
 1247 002a 0233     		adds	r3, r3, #2
 1248 002c DBB2     		uxtb	r3, r3
 1249              		.loc 1 1235 32 view .LVU383
 1250 002e 03EB8303 		add	r3, r3, r3, lsl #2
 1251              		.loc 1 1235 11 view .LVU384
 1252 0032 1F22     		movs	r2, #31
 1253              	.LVL100:
 1254              		.loc 1 1235 11 view .LVU385
 1255 0034 9A40     		lsls	r2, r2, r3
 1256              	.LVL101:
1236:FWLIB/src/stm32f4xx_adc.c ****   /* Clear the old JSQx bits for the selected rank */
1237:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 &= ~tmpreg2;
 1257              		.loc 1 1237 3 is_stmt 1 view .LVU386
 1258              		.loc 1 1237 11 is_stmt 0 view .LVU387
 1259 0036 24EA0204 		bic	r4, r4, r2
 1260              	.LVL102:
1238:FWLIB/src/stm32f4xx_adc.c ****   /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
1239:FWLIB/src/stm32f4xx_adc.c ****   tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 1261              		.loc 1 1239 3 is_stmt 1 view .LVU388
 1262              		.loc 1 1239 11 is_stmt 0 view .LVU389
 1263 003a 01FA03F3 		lsl	r3, r1, r3
ARM GAS  /tmp/ccVoyQ2j.s 			page 45


 1264              	.LVL103:
1240:FWLIB/src/stm32f4xx_adc.c ****   /* Set the JSQx bits for the selected rank */
1241:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2;
 1265              		.loc 1 1241 3 is_stmt 1 view .LVU390
 1266              		.loc 1 1241 11 is_stmt 0 view .LVU391
 1267 003e 1C43     		orrs	r4, r4, r3
 1268              	.LVL104:
1242:FWLIB/src/stm32f4xx_adc.c ****   /* Store the new register value */
1243:FWLIB/src/stm32f4xx_adc.c ****   ADCx->JSQR = tmpreg1;
 1269              		.loc 1 1243 3 is_stmt 1 view .LVU392
 1270              		.loc 1 1243 14 is_stmt 0 view .LVU393
 1271 0040 8463     		str	r4, [r0, #56]
1244:FWLIB/src/stm32f4xx_adc.c **** }
 1272              		.loc 1 1244 1 view .LVU394
 1273 0042 70BC     		pop	{r4, r5, r6}
 1274              	.LCFI9:
 1275              		.cfi_remember_state
 1276              		.cfi_restore 6
 1277              		.cfi_restore 5
 1278              		.cfi_restore 4
 1279              		.cfi_def_cfa_offset 0
 1280              	.LVL105:
 1281              		.loc 1 1244 1 view .LVU395
 1282 0044 7047     		bx	lr
 1283              	.LVL106:
 1284              	.L66:
 1285              	.LCFI10:
 1286              		.cfi_restore_state
1217:FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 1287              		.loc 1 1217 5 is_stmt 1 view .LVU396
1217:FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 1288              		.loc 1 1217 13 is_stmt 0 view .LVU397
 1289 0046 0569     		ldr	r5, [r0, #16]
 1290              	.LVL107:
1219:FWLIB/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
 1291              		.loc 1 1219 5 is_stmt 1 view .LVU398
1219:FWLIB/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
 1292              		.loc 1 1219 35 is_stmt 0 view .LVU399
 1293 0048 01EB4104 		add	r4, r1, r1, lsl #1
1219:FWLIB/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
 1294              		.loc 1 1219 13 view .LVU400
 1295 004c 0726     		movs	r6, #7
 1296 004e A640     		lsls	r6, r6, r4
 1297              	.LVL108:
1221:FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 1298              		.loc 1 1221 5 is_stmt 1 view .LVU401
1221:FWLIB/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 1299              		.loc 1 1221 13 is_stmt 0 view .LVU402
 1300 0050 25EA0605 		bic	r5, r5, r6
 1301              	.LVL109:
1223:FWLIB/src/stm32f4xx_adc.c ****     /* Set the new sample time */
 1302              		.loc 1 1223 5 is_stmt 1 view .LVU403
1223:FWLIB/src/stm32f4xx_adc.c ****     /* Set the new sample time */
 1303              		.loc 1 1223 13 is_stmt 0 view .LVU404
 1304 0054 03FA04F4 		lsl	r4, r3, r4
 1305              	.LVL110:
1225:FWLIB/src/stm32f4xx_adc.c ****     /* Store the new register value */
ARM GAS  /tmp/ccVoyQ2j.s 			page 46


 1306              		.loc 1 1225 5 is_stmt 1 view .LVU405
1225:FWLIB/src/stm32f4xx_adc.c ****     /* Store the new register value */
 1307              		.loc 1 1225 13 is_stmt 0 view .LVU406
 1308 0058 2543     		orrs	r5, r5, r4
 1309              	.LVL111:
1227:FWLIB/src/stm32f4xx_adc.c ****   }
 1310              		.loc 1 1227 5 is_stmt 1 view .LVU407
1227:FWLIB/src/stm32f4xx_adc.c ****   }
 1311              		.loc 1 1227 17 is_stmt 0 view .LVU408
 1312 005a 0561     		str	r5, [r0, #16]
 1313 005c E0E7     		b	.L67
 1314              		.cfi_endproc
 1315              	.LFE146:
 1317              		.section	.text.ADC_InjectedSequencerLengthConfig,"ax",%progbits
 1318              		.align	1
 1319              		.global	ADC_InjectedSequencerLengthConfig
 1320              		.syntax unified
 1321              		.thumb
 1322              		.thumb_func
 1323              		.fpu fpv4-sp-d16
 1325              	ADC_InjectedSequencerLengthConfig:
 1326              	.LVL112:
 1327              	.LFB147:
1245:FWLIB/src/stm32f4xx_adc.c **** 
1246:FWLIB/src/stm32f4xx_adc.c **** /**
1247:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Configures the sequencer length for injected channels
1248:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1249:FWLIB/src/stm32f4xx_adc.c ****   * @param  Length: The sequencer length. 
1250:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter must be a number between 1 to 4.
1251:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1252:FWLIB/src/stm32f4xx_adc.c ****   */
1253:FWLIB/src/stm32f4xx_adc.c **** void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
1254:FWLIB/src/stm32f4xx_adc.c **** {
 1328              		.loc 1 1254 1 is_stmt 1 view -0
 1329              		.cfi_startproc
 1330              		@ args = 0, pretend = 0, frame = 0
 1331              		@ frame_needed = 0, uses_anonymous_args = 0
 1332              		@ link register save eliminated.
1255:FWLIB/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 1333              		.loc 1 1255 3 view .LVU410
1256:FWLIB/src/stm32f4xx_adc.c ****   uint32_t tmpreg2 = 0;
 1334              		.loc 1 1256 3 view .LVU411
1257:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1258:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 1335              		.loc 1 1258 3 view .LVU412
1259:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_LENGTH(Length));
 1336              		.loc 1 1259 3 view .LVU413
1260:FWLIB/src/stm32f4xx_adc.c ****   
1261:FWLIB/src/stm32f4xx_adc.c ****   /* Get the old register value */
1262:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->JSQR;
 1337              		.loc 1 1262 3 view .LVU414
 1338              		.loc 1 1262 11 is_stmt 0 view .LVU415
 1339 0000 836B     		ldr	r3, [r0, #56]
 1340              	.LVL113:
1263:FWLIB/src/stm32f4xx_adc.c ****   
1264:FWLIB/src/stm32f4xx_adc.c ****   /* Clear the old injected sequence length JL bits */
1265:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 &= JSQR_JL_RESET;
ARM GAS  /tmp/ccVoyQ2j.s 			page 47


 1341              		.loc 1 1265 3 is_stmt 1 view .LVU416
 1342              		.loc 1 1265 11 is_stmt 0 view .LVU417
 1343 0002 23F44013 		bic	r3, r3, #3145728
 1344              	.LVL114:
1266:FWLIB/src/stm32f4xx_adc.c ****   
1267:FWLIB/src/stm32f4xx_adc.c ****   /* Set the injected sequence length JL bits */
1268:FWLIB/src/stm32f4xx_adc.c ****   tmpreg2 = Length - 1; 
 1345              		.loc 1 1268 3 is_stmt 1 view .LVU418
 1346              		.loc 1 1268 20 is_stmt 0 view .LVU419
 1347 0006 0139     		subs	r1, r1, #1
 1348              	.LVL115:
1269:FWLIB/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2 << 20;
 1349              		.loc 1 1269 3 is_stmt 1 view .LVU420
 1350              		.loc 1 1269 11 is_stmt 0 view .LVU421
 1351 0008 43EA0153 		orr	r3, r3, r1, lsl #20
 1352              	.LVL116:
1270:FWLIB/src/stm32f4xx_adc.c ****   
1271:FWLIB/src/stm32f4xx_adc.c ****   /* Store the new register value */
1272:FWLIB/src/stm32f4xx_adc.c ****   ADCx->JSQR = tmpreg1;
 1353              		.loc 1 1272 3 is_stmt 1 view .LVU422
 1354              		.loc 1 1272 14 is_stmt 0 view .LVU423
 1355 000c 8363     		str	r3, [r0, #56]
1273:FWLIB/src/stm32f4xx_adc.c **** }
 1356              		.loc 1 1273 1 view .LVU424
 1357 000e 7047     		bx	lr
 1358              		.cfi_endproc
 1359              	.LFE147:
 1361              		.section	.text.ADC_SetInjectedOffset,"ax",%progbits
 1362              		.align	1
 1363              		.global	ADC_SetInjectedOffset
 1364              		.syntax unified
 1365              		.thumb
 1366              		.thumb_func
 1367              		.fpu fpv4-sp-d16
 1369              	ADC_SetInjectedOffset:
 1370              	.LVL117:
 1371              	.LFB148:
1274:FWLIB/src/stm32f4xx_adc.c **** 
1275:FWLIB/src/stm32f4xx_adc.c **** /**
1276:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Set the injected channels conversion value offset
1277:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1278:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_InjectedChannel: the ADC injected channel to set its offset. 
1279:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1280:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_1: Injected Channel1 selected
1281:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_2: Injected Channel2 selected
1282:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
1283:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
1284:FWLIB/src/stm32f4xx_adc.c ****   * @param  Offset: the offset value for the selected ADC injected channel
1285:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter must be a 12bit value.
1286:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1287:FWLIB/src/stm32f4xx_adc.c ****   */
1288:FWLIB/src/stm32f4xx_adc.c **** void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
1289:FWLIB/src/stm32f4xx_adc.c **** {
 1372              		.loc 1 1289 1 is_stmt 1 view -0
 1373              		.cfi_startproc
 1374              		@ args = 0, pretend = 0, frame = 8
 1375              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccVoyQ2j.s 			page 48


 1376              		@ link register save eliminated.
 1377              		.loc 1 1289 1 is_stmt 0 view .LVU426
 1378 0000 82B0     		sub	sp, sp, #8
 1379              	.LCFI11:
 1380              		.cfi_def_cfa_offset 8
1290:FWLIB/src/stm32f4xx_adc.c ****     __IO uint32_t tmp = 0;
 1381              		.loc 1 1290 5 is_stmt 1 view .LVU427
 1382              		.loc 1 1290 19 is_stmt 0 view .LVU428
 1383 0002 0023     		movs	r3, #0
 1384 0004 0193     		str	r3, [sp, #4]
1291:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1292:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 1385              		.loc 1 1292 3 is_stmt 1 view .LVU429
1293:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
 1386              		.loc 1 1293 3 view .LVU430
1294:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_OFFSET(Offset));
 1387              		.loc 1 1294 3 view .LVU431
1295:FWLIB/src/stm32f4xx_adc.c ****   
1296:FWLIB/src/stm32f4xx_adc.c ****   tmp = (uint32_t)ADCx;
 1388              		.loc 1 1296 3 view .LVU432
 1389              		.loc 1 1296 7 is_stmt 0 view .LVU433
 1390 0006 0190     		str	r0, [sp, #4]
1297:FWLIB/src/stm32f4xx_adc.c ****   tmp += ADC_InjectedChannel;
 1391              		.loc 1 1297 3 is_stmt 1 view .LVU434
 1392              		.loc 1 1297 7 is_stmt 0 view .LVU435
 1393 0008 019B     		ldr	r3, [sp, #4]
 1394 000a 1944     		add	r1, r1, r3
 1395              	.LVL118:
 1396              		.loc 1 1297 7 view .LVU436
 1397 000c 0191     		str	r1, [sp, #4]
1298:FWLIB/src/stm32f4xx_adc.c ****   
1299:FWLIB/src/stm32f4xx_adc.c ****   /* Set the selected injected channel data offset */
1300:FWLIB/src/stm32f4xx_adc.c ****  *(__IO uint32_t *) tmp = (uint32_t)Offset;
 1398              		.loc 1 1300 2 is_stmt 1 view .LVU437
 1399              		.loc 1 1300 3 is_stmt 0 view .LVU438
 1400 000e 019B     		ldr	r3, [sp, #4]
 1401              		.loc 1 1300 25 view .LVU439
 1402 0010 1A60     		str	r2, [r3]
1301:FWLIB/src/stm32f4xx_adc.c **** }
 1403              		.loc 1 1301 1 view .LVU440
 1404 0012 02B0     		add	sp, sp, #8
 1405              	.LCFI12:
 1406              		.cfi_def_cfa_offset 0
 1407              		@ sp needed
 1408 0014 7047     		bx	lr
 1409              		.cfi_endproc
 1410              	.LFE148:
 1412              		.section	.text.ADC_ExternalTrigInjectedConvConfig,"ax",%progbits
 1413              		.align	1
 1414              		.global	ADC_ExternalTrigInjectedConvConfig
 1415              		.syntax unified
 1416              		.thumb
 1417              		.thumb_func
 1418              		.fpu fpv4-sp-d16
 1420              	ADC_ExternalTrigInjectedConvConfig:
 1421              	.LVL119:
 1422              	.LFB149:
ARM GAS  /tmp/ccVoyQ2j.s 			page 49


1302:FWLIB/src/stm32f4xx_adc.c **** 
1303:FWLIB/src/stm32f4xx_adc.c ****  /**
1304:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Configures the ADCx external trigger for injected channels conversion.
1305:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1306:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_ExternalTrigInjecConv: specifies the ADC trigger to start injected conversion.
1307:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:                    
1308:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T1_CC4: Timer1 capture compare4 selected 
1309:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T1_TRGO: Timer1 TRGO event selected 
1310:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T2_CC1: Timer2 capture compare1 selected 
1311:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T2_TRGO: Timer2 TRGO event selected 
1312:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T3_CC2: Timer3 capture compare2 selected 
1313:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T3_CC4: Timer3 capture compare4 selected 
1314:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC1: Timer4 capture compare1 selected             
1315:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC2: Timer4 capture compare2 selected 
1316:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC3: Timer4 capture compare3 selected             
1317:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_TRGO: Timer4 TRGO event selected 
1318:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T5_CC4: Timer5 capture compare4 selected             
1319:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T5_TRGO: Timer5 TRGO event selected                  
1320:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC2: Timer8 capture compare2 selected
1321:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC3: Timer8 capture compare3 selected             
1322:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
1323:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected  
1324:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1325:FWLIB/src/stm32f4xx_adc.c ****   */
1326:FWLIB/src/stm32f4xx_adc.c **** void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
1327:FWLIB/src/stm32f4xx_adc.c **** {
 1423              		.loc 1 1327 1 is_stmt 1 view -0
 1424              		.cfi_startproc
 1425              		@ args = 0, pretend = 0, frame = 0
 1426              		@ frame_needed = 0, uses_anonymous_args = 0
 1427              		@ link register save eliminated.
1328:FWLIB/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 1428              		.loc 1 1328 3 view .LVU442
1329:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1330:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 1429              		.loc 1 1330 3 view .LVU443
1331:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
 1430              		.loc 1 1331 3 view .LVU444
1332:FWLIB/src/stm32f4xx_adc.c ****   
1333:FWLIB/src/stm32f4xx_adc.c ****   /* Get the old register value */
1334:FWLIB/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR2;
 1431              		.loc 1 1334 3 view .LVU445
 1432              		.loc 1 1334 10 is_stmt 0 view .LVU446
 1433 0000 8368     		ldr	r3, [r0, #8]
 1434              	.LVL120:
1335:FWLIB/src/stm32f4xx_adc.c ****   
1336:FWLIB/src/stm32f4xx_adc.c ****   /* Clear the old external event selection for injected group */
1337:FWLIB/src/stm32f4xx_adc.c ****   tmpreg &= CR2_JEXTSEL_RESET;
 1435              		.loc 1 1337 3 is_stmt 1 view .LVU447
 1436              		.loc 1 1337 10 is_stmt 0 view .LVU448
 1437 0002 23F47023 		bic	r3, r3, #983040
 1438              	.LVL121:
1338:FWLIB/src/stm32f4xx_adc.c ****   
1339:FWLIB/src/stm32f4xx_adc.c ****   /* Set the external event selection for injected group */
1340:FWLIB/src/stm32f4xx_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConv;
 1439              		.loc 1 1340 3 is_stmt 1 view .LVU449
 1440              		.loc 1 1340 10 is_stmt 0 view .LVU450
ARM GAS  /tmp/ccVoyQ2j.s 			page 50


 1441 0006 1943     		orrs	r1, r1, r3
 1442              	.LVL122:
1341:FWLIB/src/stm32f4xx_adc.c ****   
1342:FWLIB/src/stm32f4xx_adc.c ****   /* Store the new register value */
1343:FWLIB/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg;
 1443              		.loc 1 1343 3 is_stmt 1 view .LVU451
 1444              		.loc 1 1343 13 is_stmt 0 view .LVU452
 1445 0008 8160     		str	r1, [r0, #8]
1344:FWLIB/src/stm32f4xx_adc.c **** }
 1446              		.loc 1 1344 1 view .LVU453
 1447 000a 7047     		bx	lr
 1448              		.cfi_endproc
 1449              	.LFE149:
 1451              		.section	.text.ADC_ExternalTrigInjectedConvEdgeConfig,"ax",%progbits
 1452              		.align	1
 1453              		.global	ADC_ExternalTrigInjectedConvEdgeConfig
 1454              		.syntax unified
 1455              		.thumb
 1456              		.thumb_func
 1457              		.fpu fpv4-sp-d16
 1459              	ADC_ExternalTrigInjectedConvEdgeConfig:
 1460              	.LVL123:
 1461              	.LFB150:
1345:FWLIB/src/stm32f4xx_adc.c **** 
1346:FWLIB/src/stm32f4xx_adc.c **** /**
1347:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Configures the ADCx external trigger edge for injected channels conversion.
1348:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1349:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_ExternalTrigInjecConvEdge: specifies the ADC external trigger edge
1350:FWLIB/src/stm32f4xx_adc.c ****   *         to start injected conversion. 
1351:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1352:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_None: external trigger disabled for 
1353:FWLIB/src/stm32f4xx_adc.c ****   *                                                     injected conversion
1354:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_Rising: detection on rising edge
1355:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_Falling: detection on falling edge
1356:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
1357:FWLIB/src/stm32f4xx_adc.c ****   *                                                               and falling edge
1358:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1359:FWLIB/src/stm32f4xx_adc.c ****   */
1360:FWLIB/src/stm32f4xx_adc.c **** void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEd
1361:FWLIB/src/stm32f4xx_adc.c **** {
 1462              		.loc 1 1361 1 is_stmt 1 view -0
 1463              		.cfi_startproc
 1464              		@ args = 0, pretend = 0, frame = 0
 1465              		@ frame_needed = 0, uses_anonymous_args = 0
 1466              		@ link register save eliminated.
1362:FWLIB/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 1467              		.loc 1 1362 3 view .LVU455
1363:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1364:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 1468              		.loc 1 1364 3 view .LVU456
1365:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
 1469              		.loc 1 1365 3 view .LVU457
1366:FWLIB/src/stm32f4xx_adc.c ****   /* Get the old register value */
1367:FWLIB/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR2;
 1470              		.loc 1 1367 3 view .LVU458
 1471              		.loc 1 1367 10 is_stmt 0 view .LVU459
 1472 0000 8368     		ldr	r3, [r0, #8]
ARM GAS  /tmp/ccVoyQ2j.s 			page 51


 1473              	.LVL124:
1368:FWLIB/src/stm32f4xx_adc.c ****   /* Clear the old external trigger edge for injected group */
1369:FWLIB/src/stm32f4xx_adc.c ****   tmpreg &= CR2_JEXTEN_RESET;
 1474              		.loc 1 1369 3 is_stmt 1 view .LVU460
 1475              		.loc 1 1369 10 is_stmt 0 view .LVU461
 1476 0002 23F44013 		bic	r3, r3, #3145728
 1477              	.LVL125:
1370:FWLIB/src/stm32f4xx_adc.c ****   /* Set the new external trigger edge for injected group */
1371:FWLIB/src/stm32f4xx_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConvEdge;
 1478              		.loc 1 1371 3 is_stmt 1 view .LVU462
 1479              		.loc 1 1371 10 is_stmt 0 view .LVU463
 1480 0006 1943     		orrs	r1, r1, r3
 1481              	.LVL126:
1372:FWLIB/src/stm32f4xx_adc.c ****   /* Store the new register value */
1373:FWLIB/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg;
 1482              		.loc 1 1373 3 is_stmt 1 view .LVU464
 1483              		.loc 1 1373 13 is_stmt 0 view .LVU465
 1484 0008 8160     		str	r1, [r0, #8]
1374:FWLIB/src/stm32f4xx_adc.c **** }
 1485              		.loc 1 1374 1 view .LVU466
 1486 000a 7047     		bx	lr
 1487              		.cfi_endproc
 1488              	.LFE150:
 1490              		.section	.text.ADC_SoftwareStartInjectedConv,"ax",%progbits
 1491              		.align	1
 1492              		.global	ADC_SoftwareStartInjectedConv
 1493              		.syntax unified
 1494              		.thumb
 1495              		.thumb_func
 1496              		.fpu fpv4-sp-d16
 1498              	ADC_SoftwareStartInjectedConv:
 1499              	.LVL127:
 1500              	.LFB151:
1375:FWLIB/src/stm32f4xx_adc.c **** 
1376:FWLIB/src/stm32f4xx_adc.c **** /**
1377:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables the selected ADC software start conversion of the injected channels.
1378:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1379:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1380:FWLIB/src/stm32f4xx_adc.c ****   */
1381:FWLIB/src/stm32f4xx_adc.c **** void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
1382:FWLIB/src/stm32f4xx_adc.c **** {
 1501              		.loc 1 1382 1 is_stmt 1 view -0
 1502              		.cfi_startproc
 1503              		@ args = 0, pretend = 0, frame = 0
 1504              		@ frame_needed = 0, uses_anonymous_args = 0
 1505              		@ link register save eliminated.
1383:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1384:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 1506              		.loc 1 1384 3 view .LVU468
1385:FWLIB/src/stm32f4xx_adc.c ****   /* Enable the selected ADC conversion for injected group */
1386:FWLIB/src/stm32f4xx_adc.c ****   ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 1507              		.loc 1 1386 3 view .LVU469
 1508              		.loc 1 1386 13 is_stmt 0 view .LVU470
 1509 0000 8368     		ldr	r3, [r0, #8]
 1510 0002 43F48003 		orr	r3, r3, #4194304
 1511 0006 8360     		str	r3, [r0, #8]
1387:FWLIB/src/stm32f4xx_adc.c **** }
ARM GAS  /tmp/ccVoyQ2j.s 			page 52


 1512              		.loc 1 1387 1 view .LVU471
 1513 0008 7047     		bx	lr
 1514              		.cfi_endproc
 1515              	.LFE151:
 1517              		.section	.text.ADC_GetSoftwareStartInjectedConvCmdStatus,"ax",%progbits
 1518              		.align	1
 1519              		.global	ADC_GetSoftwareStartInjectedConvCmdStatus
 1520              		.syntax unified
 1521              		.thumb
 1522              		.thumb_func
 1523              		.fpu fpv4-sp-d16
 1525              	ADC_GetSoftwareStartInjectedConvCmdStatus:
 1526              	.LVL128:
 1527              	.LFB152:
1388:FWLIB/src/stm32f4xx_adc.c **** 
1389:FWLIB/src/stm32f4xx_adc.c **** /**
1390:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Gets the selected ADC Software start injected conversion Status.
1391:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1392:FWLIB/src/stm32f4xx_adc.c ****   * @retval The new state of ADC software start injected conversion (SET or RESET).
1393:FWLIB/src/stm32f4xx_adc.c ****   */
1394:FWLIB/src/stm32f4xx_adc.c **** FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
1395:FWLIB/src/stm32f4xx_adc.c **** {
 1528              		.loc 1 1395 1 is_stmt 1 view -0
 1529              		.cfi_startproc
 1530              		@ args = 0, pretend = 0, frame = 0
 1531              		@ frame_needed = 0, uses_anonymous_args = 0
 1532              		@ link register save eliminated.
1396:FWLIB/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
 1533              		.loc 1 1396 3 view .LVU473
1397:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1398:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 1534              		.loc 1 1398 3 view .LVU474
1399:FWLIB/src/stm32f4xx_adc.c ****   
1400:FWLIB/src/stm32f4xx_adc.c ****   /* Check the status of JSWSTART bit */
1401:FWLIB/src/stm32f4xx_adc.c ****   if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 1535              		.loc 1 1401 3 view .LVU475
 1536              		.loc 1 1401 12 is_stmt 0 view .LVU476
 1537 0000 8368     		ldr	r3, [r0, #8]
 1538              		.loc 1 1401 6 view .LVU477
 1539 0002 13F4800F 		tst	r3, #4194304
 1540 0006 01D0     		beq	.L77
1402:FWLIB/src/stm32f4xx_adc.c ****   {
1403:FWLIB/src/stm32f4xx_adc.c ****     /* JSWSTART bit is set */
1404:FWLIB/src/stm32f4xx_adc.c ****     bitstatus = SET;
 1541              		.loc 1 1404 15 view .LVU478
 1542 0008 0120     		movs	r0, #1
 1543              	.LVL129:
 1544              		.loc 1 1404 15 view .LVU479
 1545 000a 7047     		bx	lr
 1546              	.LVL130:
 1547              	.L77:
1405:FWLIB/src/stm32f4xx_adc.c ****   }
1406:FWLIB/src/stm32f4xx_adc.c ****   else
1407:FWLIB/src/stm32f4xx_adc.c ****   {
1408:FWLIB/src/stm32f4xx_adc.c ****     /* JSWSTART bit is reset */
1409:FWLIB/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 1548              		.loc 1 1409 15 view .LVU480
ARM GAS  /tmp/ccVoyQ2j.s 			page 53


 1549 000c 0020     		movs	r0, #0
 1550              	.LVL131:
1410:FWLIB/src/stm32f4xx_adc.c ****   }
1411:FWLIB/src/stm32f4xx_adc.c ****   /* Return the JSWSTART bit status */
1412:FWLIB/src/stm32f4xx_adc.c ****   return  bitstatus;
 1551              		.loc 1 1412 3 is_stmt 1 view .LVU481
1413:FWLIB/src/stm32f4xx_adc.c **** }
 1552              		.loc 1 1413 1 is_stmt 0 view .LVU482
 1553 000e 7047     		bx	lr
 1554              		.cfi_endproc
 1555              	.LFE152:
 1557              		.section	.text.ADC_AutoInjectedConvCmd,"ax",%progbits
 1558              		.align	1
 1559              		.global	ADC_AutoInjectedConvCmd
 1560              		.syntax unified
 1561              		.thumb
 1562              		.thumb_func
 1563              		.fpu fpv4-sp-d16
 1565              	ADC_AutoInjectedConvCmd:
 1566              	.LVL132:
 1567              	.LFB153:
1414:FWLIB/src/stm32f4xx_adc.c **** 
1415:FWLIB/src/stm32f4xx_adc.c **** /**
1416:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the selected ADC automatic injected group 
1417:FWLIB/src/stm32f4xx_adc.c ****   *         conversion after regular one.
1418:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1419:FWLIB/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC auto injected conversion
1420:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1421:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1422:FWLIB/src/stm32f4xx_adc.c ****   */
1423:FWLIB/src/stm32f4xx_adc.c **** void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1424:FWLIB/src/stm32f4xx_adc.c **** {
 1568              		.loc 1 1424 1 is_stmt 1 view -0
 1569              		.cfi_startproc
 1570              		@ args = 0, pretend = 0, frame = 0
 1571              		@ frame_needed = 0, uses_anonymous_args = 0
 1572              		@ link register save eliminated.
1425:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1426:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 1573              		.loc 1 1426 3 view .LVU484
1427:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1574              		.loc 1 1427 3 view .LVU485
1428:FWLIB/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1575              		.loc 1 1428 3 view .LVU486
 1576              		.loc 1 1428 6 is_stmt 0 view .LVU487
 1577 0000 21B1     		cbz	r1, .L79
1429:FWLIB/src/stm32f4xx_adc.c ****   {
1430:FWLIB/src/stm32f4xx_adc.c ****     /* Enable the selected ADC automatic injected group conversion */
1431:FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 1578              		.loc 1 1431 5 is_stmt 1 view .LVU488
 1579              		.loc 1 1431 15 is_stmt 0 view .LVU489
 1580 0002 4368     		ldr	r3, [r0, #4]
 1581 0004 43F48063 		orr	r3, r3, #1024
 1582 0008 4360     		str	r3, [r0, #4]
 1583 000a 7047     		bx	lr
 1584              	.L79:
1432:FWLIB/src/stm32f4xx_adc.c ****   }
ARM GAS  /tmp/ccVoyQ2j.s 			page 54


1433:FWLIB/src/stm32f4xx_adc.c ****   else
1434:FWLIB/src/stm32f4xx_adc.c ****   {
1435:FWLIB/src/stm32f4xx_adc.c ****     /* Disable the selected ADC automatic injected group conversion */
1436:FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 1585              		.loc 1 1436 5 is_stmt 1 view .LVU490
 1586              		.loc 1 1436 15 is_stmt 0 view .LVU491
 1587 000c 4368     		ldr	r3, [r0, #4]
 1588 000e 23F48063 		bic	r3, r3, #1024
 1589 0012 4360     		str	r3, [r0, #4]
1437:FWLIB/src/stm32f4xx_adc.c ****   }
1438:FWLIB/src/stm32f4xx_adc.c **** }
 1590              		.loc 1 1438 1 view .LVU492
 1591 0014 7047     		bx	lr
 1592              		.cfi_endproc
 1593              	.LFE153:
 1595              		.section	.text.ADC_InjectedDiscModeCmd,"ax",%progbits
 1596              		.align	1
 1597              		.global	ADC_InjectedDiscModeCmd
 1598              		.syntax unified
 1599              		.thumb
 1600              		.thumb_func
 1601              		.fpu fpv4-sp-d16
 1603              	ADC_InjectedDiscModeCmd:
 1604              	.LVL133:
 1605              	.LFB154:
1439:FWLIB/src/stm32f4xx_adc.c **** 
1440:FWLIB/src/stm32f4xx_adc.c **** /**
1441:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the discontinuous mode for injected group 
1442:FWLIB/src/stm32f4xx_adc.c ****   *         channel for the specified ADC
1443:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1444:FWLIB/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode on injected
1445:FWLIB/src/stm32f4xx_adc.c ****   *         group channel.
1446:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1447:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1448:FWLIB/src/stm32f4xx_adc.c ****   */
1449:FWLIB/src/stm32f4xx_adc.c **** void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1450:FWLIB/src/stm32f4xx_adc.c **** {
 1606              		.loc 1 1450 1 is_stmt 1 view -0
 1607              		.cfi_startproc
 1608              		@ args = 0, pretend = 0, frame = 0
 1609              		@ frame_needed = 0, uses_anonymous_args = 0
 1610              		@ link register save eliminated.
1451:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1452:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 1611              		.loc 1 1452 3 view .LVU494
1453:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1612              		.loc 1 1453 3 view .LVU495
1454:FWLIB/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1613              		.loc 1 1454 3 view .LVU496
 1614              		.loc 1 1454 6 is_stmt 0 view .LVU497
 1615 0000 21B1     		cbz	r1, .L82
1455:FWLIB/src/stm32f4xx_adc.c ****   {
1456:FWLIB/src/stm32f4xx_adc.c ****     /* Enable the selected ADC injected discontinuous mode */
1457:FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 1616              		.loc 1 1457 5 is_stmt 1 view .LVU498
 1617              		.loc 1 1457 15 is_stmt 0 view .LVU499
 1618 0002 4368     		ldr	r3, [r0, #4]
ARM GAS  /tmp/ccVoyQ2j.s 			page 55


 1619 0004 43F48053 		orr	r3, r3, #4096
 1620 0008 4360     		str	r3, [r0, #4]
 1621 000a 7047     		bx	lr
 1622              	.L82:
1458:FWLIB/src/stm32f4xx_adc.c ****   }
1459:FWLIB/src/stm32f4xx_adc.c ****   else
1460:FWLIB/src/stm32f4xx_adc.c ****   {
1461:FWLIB/src/stm32f4xx_adc.c ****     /* Disable the selected ADC injected discontinuous mode */
1462:FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 1623              		.loc 1 1462 5 is_stmt 1 view .LVU500
 1624              		.loc 1 1462 15 is_stmt 0 view .LVU501
 1625 000c 4368     		ldr	r3, [r0, #4]
 1626 000e 23F48053 		bic	r3, r3, #4096
 1627 0012 4360     		str	r3, [r0, #4]
1463:FWLIB/src/stm32f4xx_adc.c ****   }
1464:FWLIB/src/stm32f4xx_adc.c **** }
 1628              		.loc 1 1464 1 view .LVU502
 1629 0014 7047     		bx	lr
 1630              		.cfi_endproc
 1631              	.LFE154:
 1633              		.section	.text.ADC_GetInjectedConversionValue,"ax",%progbits
 1634              		.align	1
 1635              		.global	ADC_GetInjectedConversionValue
 1636              		.syntax unified
 1637              		.thumb
 1638              		.thumb_func
 1639              		.fpu fpv4-sp-d16
 1641              	ADC_GetInjectedConversionValue:
 1642              	.LVL134:
 1643              	.LFB155:
1465:FWLIB/src/stm32f4xx_adc.c **** 
1466:FWLIB/src/stm32f4xx_adc.c **** /**
1467:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Returns the ADC injected channel conversion result
1468:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1469:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_InjectedChannel: the converted ADC injected channel.
1470:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1471:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_1: Injected Channel1 selected
1472:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_2: Injected Channel2 selected
1473:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
1474:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
1475:FWLIB/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
1476:FWLIB/src/stm32f4xx_adc.c ****   */
1477:FWLIB/src/stm32f4xx_adc.c **** uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
1478:FWLIB/src/stm32f4xx_adc.c **** {
 1644              		.loc 1 1478 1 is_stmt 1 view -0
 1645              		.cfi_startproc
 1646              		@ args = 0, pretend = 0, frame = 8
 1647              		@ frame_needed = 0, uses_anonymous_args = 0
 1648              		@ link register save eliminated.
 1649              		.loc 1 1478 1 is_stmt 0 view .LVU504
 1650 0000 82B0     		sub	sp, sp, #8
 1651              	.LCFI13:
 1652              		.cfi_def_cfa_offset 8
1479:FWLIB/src/stm32f4xx_adc.c ****   __IO uint32_t tmp = 0;
 1653              		.loc 1 1479 3 is_stmt 1 view .LVU505
 1654              		.loc 1 1479 17 is_stmt 0 view .LVU506
 1655 0002 0023     		movs	r3, #0
ARM GAS  /tmp/ccVoyQ2j.s 			page 56


 1656 0004 0193     		str	r3, [sp, #4]
1480:FWLIB/src/stm32f4xx_adc.c ****   
1481:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1482:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 1657              		.loc 1 1482 3 is_stmt 1 view .LVU507
1483:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
 1658              		.loc 1 1483 3 view .LVU508
1484:FWLIB/src/stm32f4xx_adc.c **** 
1485:FWLIB/src/stm32f4xx_adc.c ****   tmp = (uint32_t)ADCx;
 1659              		.loc 1 1485 3 view .LVU509
 1660              		.loc 1 1485 7 is_stmt 0 view .LVU510
 1661 0006 0190     		str	r0, [sp, #4]
1486:FWLIB/src/stm32f4xx_adc.c ****   tmp += ADC_InjectedChannel + JDR_OFFSET;
 1662              		.loc 1 1486 3 is_stmt 1 view .LVU511
 1663              		.loc 1 1486 7 is_stmt 0 view .LVU512
 1664 0008 019B     		ldr	r3, [sp, #4]
 1665 000a 1944     		add	r1, r1, r3
 1666              	.LVL135:
 1667              		.loc 1 1486 7 view .LVU513
 1668 000c 2831     		adds	r1, r1, #40
 1669 000e 0191     		str	r1, [sp, #4]
1487:FWLIB/src/stm32f4xx_adc.c ****   
1488:FWLIB/src/stm32f4xx_adc.c ****   /* Returns the selected injected channel conversion data value */
1489:FWLIB/src/stm32f4xx_adc.c ****   return (uint16_t) (*(__IO uint32_t*)  tmp); 
 1670              		.loc 1 1489 3 is_stmt 1 view .LVU514
 1671              		.loc 1 1489 23 is_stmt 0 view .LVU515
 1672 0010 019B     		ldr	r3, [sp, #4]
 1673              		.loc 1 1489 22 view .LVU516
 1674 0012 1868     		ldr	r0, [r3]
 1675              	.LVL136:
1490:FWLIB/src/stm32f4xx_adc.c **** }
 1676              		.loc 1 1490 1 view .LVU517
 1677 0014 80B2     		uxth	r0, r0
 1678 0016 02B0     		add	sp, sp, #8
 1679              	.LCFI14:
 1680              		.cfi_def_cfa_offset 0
 1681              		@ sp needed
 1682 0018 7047     		bx	lr
 1683              		.cfi_endproc
 1684              	.LFE155:
 1686              		.section	.text.ADC_ITConfig,"ax",%progbits
 1687              		.align	1
 1688              		.global	ADC_ITConfig
 1689              		.syntax unified
 1690              		.thumb
 1691              		.thumb_func
 1692              		.fpu fpv4-sp-d16
 1694              	ADC_ITConfig:
 1695              	.LVL137:
 1696              	.LFB156:
1491:FWLIB/src/stm32f4xx_adc.c **** /**
1492:FWLIB/src/stm32f4xx_adc.c ****   * @}
1493:FWLIB/src/stm32f4xx_adc.c ****   */
1494:FWLIB/src/stm32f4xx_adc.c **** 
1495:FWLIB/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group7 Interrupts and flags management functions
1496:FWLIB/src/stm32f4xx_adc.c ****  *  @brief   Interrupts and flags management functions
1497:FWLIB/src/stm32f4xx_adc.c ****  *
ARM GAS  /tmp/ccVoyQ2j.s 			page 57


1498:FWLIB/src/stm32f4xx_adc.c **** @verbatim   
1499:FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================
1500:FWLIB/src/stm32f4xx_adc.c ****             ##### Interrupts and flags management functions #####
1501:FWLIB/src/stm32f4xx_adc.c ****  ===============================================================================  
1502:FWLIB/src/stm32f4xx_adc.c **** 
1503:FWLIB/src/stm32f4xx_adc.c ****     [..] This section provides functions allowing to configure the ADC Interrupts 
1504:FWLIB/src/stm32f4xx_adc.c ****          and to get the status and clear flags and Interrupts pending bits.
1505:FWLIB/src/stm32f4xx_adc.c ****   
1506:FWLIB/src/stm32f4xx_adc.c ****     [..] Each ADC provides 4 Interrupts sources and 6 Flags which can be divided
1507:FWLIB/src/stm32f4xx_adc.c ****         into 3 groups:
1508:FWLIB/src/stm32f4xx_adc.c ****   
1509:FWLIB/src/stm32f4xx_adc.c ****   *** Flags and Interrupts for ADC regular channels ***
1510:FWLIB/src/stm32f4xx_adc.c ****   =====================================================
1511:FWLIB/src/stm32f4xx_adc.c ****     [..]
1512:FWLIB/src/stm32f4xx_adc.c ****       (+) Flags :
1513:FWLIB/src/stm32f4xx_adc.c ****         (##) ADC_FLAG_OVR : Overrun detection when regular converted data are lost
1514:FWLIB/src/stm32f4xx_adc.c **** 
1515:FWLIB/src/stm32f4xx_adc.c ****         (##) ADC_FLAG_EOC : Regular channel end of conversion ==> to indicate 
1516:FWLIB/src/stm32f4xx_adc.c ****              (depending on EOCS bit, managed by ADC_EOCOnEachRegularChannelCmd() )
1517:FWLIB/src/stm32f4xx_adc.c ****              the end of:
1518:FWLIB/src/stm32f4xx_adc.c ****              (+++) a regular CHANNEL conversion 
1519:FWLIB/src/stm32f4xx_adc.c ****              (+++) sequence of regular GROUP conversions .
1520:FWLIB/src/stm32f4xx_adc.c **** 
1521:FWLIB/src/stm32f4xx_adc.c ****         (##) ADC_FLAG_STRT: Regular channel start ==> to indicate when regular 
1522:FWLIB/src/stm32f4xx_adc.c ****              CHANNEL conversion starts.
1523:FWLIB/src/stm32f4xx_adc.c ****     [..]
1524:FWLIB/src/stm32f4xx_adc.c ****       (+) Interrupts :
1525:FWLIB/src/stm32f4xx_adc.c ****         (##) ADC_IT_OVR : specifies the interrupt source for Overrun detection 
1526:FWLIB/src/stm32f4xx_adc.c ****              event.  
1527:FWLIB/src/stm32f4xx_adc.c ****         (##) ADC_IT_EOC : specifies the interrupt source for Regular channel end
1528:FWLIB/src/stm32f4xx_adc.c ****              of conversion event.
1529:FWLIB/src/stm32f4xx_adc.c ****   
1530:FWLIB/src/stm32f4xx_adc.c ****   
1531:FWLIB/src/stm32f4xx_adc.c ****   *** Flags and Interrupts for ADC Injected channels ***
1532:FWLIB/src/stm32f4xx_adc.c ****   ======================================================
1533:FWLIB/src/stm32f4xx_adc.c ****     [..]
1534:FWLIB/src/stm32f4xx_adc.c ****       (+) Flags :
1535:FWLIB/src/stm32f4xx_adc.c ****         (##) ADC_FLAG_JEOC : Injected channel end of conversion ==> to indicate 
1536:FWLIB/src/stm32f4xx_adc.c ****              at the end of injected GROUP conversion  
1537:FWLIB/src/stm32f4xx_adc.c ****               
1538:FWLIB/src/stm32f4xx_adc.c ****         (##) ADC_FLAG_JSTRT: Injected channel start ==> to indicate hardware when 
1539:FWLIB/src/stm32f4xx_adc.c ****              injected GROUP conversion starts.
1540:FWLIB/src/stm32f4xx_adc.c ****     [..]
1541:FWLIB/src/stm32f4xx_adc.c ****       (+) Interrupts :
1542:FWLIB/src/stm32f4xx_adc.c ****         (##) ADC_IT_JEOC : specifies the interrupt source for Injected channel 
1543:FWLIB/src/stm32f4xx_adc.c ****              end of conversion event.     
1544:FWLIB/src/stm32f4xx_adc.c **** 
1545:FWLIB/src/stm32f4xx_adc.c ****   *** General Flags and Interrupts for the ADC ***
1546:FWLIB/src/stm32f4xx_adc.c ****   ================================================ 
1547:FWLIB/src/stm32f4xx_adc.c ****     [..]
1548:FWLIB/src/stm32f4xx_adc.c ****       (+)Flags :
1549:FWLIB/src/stm32f4xx_adc.c ****         (##) ADC_FLAG_AWD: Analog watchdog ==> to indicate if the converted voltage 
1550:FWLIB/src/stm32f4xx_adc.c ****              crosses the programmed thresholds values.
1551:FWLIB/src/stm32f4xx_adc.c ****     [..]          
1552:FWLIB/src/stm32f4xx_adc.c ****       (+) Interrupts :
1553:FWLIB/src/stm32f4xx_adc.c ****         (##) ADC_IT_AWD : specifies the interrupt source for Analog watchdog event. 
1554:FWLIB/src/stm32f4xx_adc.c **** 
ARM GAS  /tmp/ccVoyQ2j.s 			page 58


1555:FWLIB/src/stm32f4xx_adc.c ****   
1556:FWLIB/src/stm32f4xx_adc.c ****     [..] The user should identify which mode will be used in his application to 
1557:FWLIB/src/stm32f4xx_adc.c ****          manage the ADC controller events: Polling mode or Interrupt mode.
1558:FWLIB/src/stm32f4xx_adc.c ****   
1559:FWLIB/src/stm32f4xx_adc.c ****     [..] In the Polling Mode it is advised to use the following functions:
1560:FWLIB/src/stm32f4xx_adc.c ****       (+) ADC_GetFlagStatus() : to check if flags events occur. 
1561:FWLIB/src/stm32f4xx_adc.c ****       (+) ADC_ClearFlag()     : to clear the flags events.
1562:FWLIB/src/stm32f4xx_adc.c ****       
1563:FWLIB/src/stm32f4xx_adc.c ****     [..] In the Interrupt Mode it is advised to use the following functions:
1564:FWLIB/src/stm32f4xx_adc.c ****       (+) ADC_ITConfig()          : to enable or disable the interrupt source.
1565:FWLIB/src/stm32f4xx_adc.c ****       (+) ADC_GetITStatus()       : to check if Interrupt occurs.
1566:FWLIB/src/stm32f4xx_adc.c ****       (+) ADC_ClearITPendingBit() : to clear the Interrupt pending Bit 
1567:FWLIB/src/stm32f4xx_adc.c ****                                    (corresponding Flag). 
1568:FWLIB/src/stm32f4xx_adc.c **** @endverbatim
1569:FWLIB/src/stm32f4xx_adc.c ****   * @{
1570:FWLIB/src/stm32f4xx_adc.c ****   */ 
1571:FWLIB/src/stm32f4xx_adc.c **** /**
1572:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC interrupts.
1573:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1574:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt sources to be enabled or disabled. 
1575:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1576:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1577:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1578:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1579:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt enable                       
1580:FWLIB/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the specified ADC interrupts.
1581:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1582:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1583:FWLIB/src/stm32f4xx_adc.c ****   */
1584:FWLIB/src/stm32f4xx_adc.c **** void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
1585:FWLIB/src/stm32f4xx_adc.c **** {
 1697              		.loc 1 1585 1 is_stmt 1 view -0
 1698              		.cfi_startproc
 1699              		@ args = 0, pretend = 0, frame = 0
 1700              		@ frame_needed = 0, uses_anonymous_args = 0
 1701              		@ link register save eliminated.
1586:FWLIB/src/stm32f4xx_adc.c ****   uint32_t itmask = 0;
 1702              		.loc 1 1586 3 view .LVU519
1587:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1588:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 1703              		.loc 1 1588 3 view .LVU520
1589:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1704              		.loc 1 1589 3 view .LVU521
1590:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT)); 
 1705              		.loc 1 1590 3 view .LVU522
1591:FWLIB/src/stm32f4xx_adc.c **** 
1592:FWLIB/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1593:FWLIB/src/stm32f4xx_adc.c ****   itmask = (uint8_t)ADC_IT;
 1706              		.loc 1 1593 3 view .LVU523
 1707              		.loc 1 1593 12 is_stmt 0 view .LVU524
 1708 0000 C9B2     		uxtb	r1, r1
 1709              	.LVL138:
1594:FWLIB/src/stm32f4xx_adc.c ****   itmask = (uint32_t)0x01 << itmask;    
 1710              		.loc 1 1594 3 is_stmt 1 view .LVU525
 1711              		.loc 1 1594 10 is_stmt 0 view .LVU526
 1712 0002 0123     		movs	r3, #1
 1713 0004 8B40     		lsls	r3, r3, r1
ARM GAS  /tmp/ccVoyQ2j.s 			page 59


 1714              	.LVL139:
1595:FWLIB/src/stm32f4xx_adc.c **** 
1596:FWLIB/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1715              		.loc 1 1596 3 is_stmt 1 view .LVU527
 1716              		.loc 1 1596 6 is_stmt 0 view .LVU528
 1717 0006 1AB1     		cbz	r2, .L87
1597:FWLIB/src/stm32f4xx_adc.c ****   {
1598:FWLIB/src/stm32f4xx_adc.c ****     /* Enable the selected ADC interrupts */
1599:FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR1 |= itmask;
 1718              		.loc 1 1599 5 is_stmt 1 view .LVU529
 1719              		.loc 1 1599 15 is_stmt 0 view .LVU530
 1720 0008 4168     		ldr	r1, [r0, #4]
 1721 000a 0B43     		orrs	r3, r3, r1
 1722              	.LVL140:
 1723              		.loc 1 1599 15 view .LVU531
 1724 000c 4360     		str	r3, [r0, #4]
 1725 000e 7047     		bx	lr
 1726              	.LVL141:
 1727              	.L87:
1600:FWLIB/src/stm32f4xx_adc.c ****   }
1601:FWLIB/src/stm32f4xx_adc.c ****   else
1602:FWLIB/src/stm32f4xx_adc.c ****   {
1603:FWLIB/src/stm32f4xx_adc.c ****     /* Disable the selected ADC interrupts */
1604:FWLIB/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (~(uint32_t)itmask);
 1728              		.loc 1 1604 5 is_stmt 1 view .LVU532
 1729              		.loc 1 1604 15 is_stmt 0 view .LVU533
 1730 0010 4168     		ldr	r1, [r0, #4]
 1731 0012 21EA0303 		bic	r3, r1, r3
 1732              	.LVL142:
 1733              		.loc 1 1604 15 view .LVU534
 1734 0016 4360     		str	r3, [r0, #4]
1605:FWLIB/src/stm32f4xx_adc.c ****   }
1606:FWLIB/src/stm32f4xx_adc.c **** }
 1735              		.loc 1 1606 1 view .LVU535
 1736 0018 7047     		bx	lr
 1737              		.cfi_endproc
 1738              	.LFE156:
 1740              		.section	.text.ADC_GetFlagStatus,"ax",%progbits
 1741              		.align	1
 1742              		.global	ADC_GetFlagStatus
 1743              		.syntax unified
 1744              		.thumb
 1745              		.thumb_func
 1746              		.fpu fpv4-sp-d16
 1748              	ADC_GetFlagStatus:
 1749              	.LVL143:
 1750              	.LFB157:
1607:FWLIB/src/stm32f4xx_adc.c **** 
1608:FWLIB/src/stm32f4xx_adc.c **** /**
1609:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Checks whether the specified ADC flag is set or not.
1610:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1611:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_FLAG: specifies the flag to check. 
1612:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1613:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_AWD: Analog watchdog flag
1614:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_EOC: End of conversion flag
1615:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JEOC: End of injected group conversion flag
1616:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
ARM GAS  /tmp/ccVoyQ2j.s 			page 60


1617:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
1618:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_OVR: Overrun flag                                                 
1619:FWLIB/src/stm32f4xx_adc.c ****   * @retval The new state of ADC_FLAG (SET or RESET).
1620:FWLIB/src/stm32f4xx_adc.c ****   */
1621:FWLIB/src/stm32f4xx_adc.c **** FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1622:FWLIB/src/stm32f4xx_adc.c **** {
 1751              		.loc 1 1622 1 is_stmt 1 view -0
 1752              		.cfi_startproc
 1753              		@ args = 0, pretend = 0, frame = 0
 1754              		@ frame_needed = 0, uses_anonymous_args = 0
 1755              		@ link register save eliminated.
1623:FWLIB/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
 1756              		.loc 1 1623 3 view .LVU537
1624:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1625:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 1757              		.loc 1 1625 3 view .LVU538
1626:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
 1758              		.loc 1 1626 3 view .LVU539
1627:FWLIB/src/stm32f4xx_adc.c **** 
1628:FWLIB/src/stm32f4xx_adc.c ****   /* Check the status of the specified ADC flag */
1629:FWLIB/src/stm32f4xx_adc.c ****   if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 1759              		.loc 1 1629 3 view .LVU540
 1760              		.loc 1 1629 12 is_stmt 0 view .LVU541
 1761 0000 0368     		ldr	r3, [r0]
 1762              		.loc 1 1629 6 view .LVU542
 1763 0002 1942     		tst	r1, r3
 1764 0004 01D0     		beq	.L91
1630:FWLIB/src/stm32f4xx_adc.c ****   {
1631:FWLIB/src/stm32f4xx_adc.c ****     /* ADC_FLAG is set */
1632:FWLIB/src/stm32f4xx_adc.c ****     bitstatus = SET;
 1765              		.loc 1 1632 15 view .LVU543
 1766 0006 0120     		movs	r0, #1
 1767              	.LVL144:
 1768              		.loc 1 1632 15 view .LVU544
 1769 0008 7047     		bx	lr
 1770              	.LVL145:
 1771              	.L91:
1633:FWLIB/src/stm32f4xx_adc.c ****   }
1634:FWLIB/src/stm32f4xx_adc.c ****   else
1635:FWLIB/src/stm32f4xx_adc.c ****   {
1636:FWLIB/src/stm32f4xx_adc.c ****     /* ADC_FLAG is reset */
1637:FWLIB/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 1772              		.loc 1 1637 15 view .LVU545
 1773 000a 0020     		movs	r0, #0
 1774              	.LVL146:
1638:FWLIB/src/stm32f4xx_adc.c ****   }
1639:FWLIB/src/stm32f4xx_adc.c ****   /* Return the ADC_FLAG status */
1640:FWLIB/src/stm32f4xx_adc.c ****   return  bitstatus;
 1775              		.loc 1 1640 3 is_stmt 1 view .LVU546
1641:FWLIB/src/stm32f4xx_adc.c **** }
 1776              		.loc 1 1641 1 is_stmt 0 view .LVU547
 1777 000c 7047     		bx	lr
 1778              		.cfi_endproc
 1779              	.LFE157:
 1781              		.section	.text.ADC_ClearFlag,"ax",%progbits
 1782              		.align	1
 1783              		.global	ADC_ClearFlag
ARM GAS  /tmp/ccVoyQ2j.s 			page 61


 1784              		.syntax unified
 1785              		.thumb
 1786              		.thumb_func
 1787              		.fpu fpv4-sp-d16
 1789              	ADC_ClearFlag:
 1790              	.LVL147:
 1791              	.LFB158:
1642:FWLIB/src/stm32f4xx_adc.c **** 
1643:FWLIB/src/stm32f4xx_adc.c **** /**
1644:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Clears the ADCx's pending flags.
1645:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1646:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_FLAG: specifies the flag to clear. 
1647:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be any combination of the following values:
1648:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_AWD: Analog watchdog flag
1649:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_EOC: End of conversion flag
1650:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JEOC: End of injected group conversion flag
1651:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1652:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
1653:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_OVR: Overrun flag                          
1654:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1655:FWLIB/src/stm32f4xx_adc.c ****   */
1656:FWLIB/src/stm32f4xx_adc.c **** void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1657:FWLIB/src/stm32f4xx_adc.c **** {
 1792              		.loc 1 1657 1 is_stmt 1 view -0
 1793              		.cfi_startproc
 1794              		@ args = 0, pretend = 0, frame = 0
 1795              		@ frame_needed = 0, uses_anonymous_args = 0
 1796              		@ link register save eliminated.
1658:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1659:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 1797              		.loc 1 1659 3 view .LVU549
1660:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
 1798              		.loc 1 1660 3 view .LVU550
1661:FWLIB/src/stm32f4xx_adc.c **** 
1662:FWLIB/src/stm32f4xx_adc.c ****   /* Clear the selected ADC flags */
1663:FWLIB/src/stm32f4xx_adc.c ****   ADCx->SR = ~(uint32_t)ADC_FLAG;
 1799              		.loc 1 1663 3 view .LVU551
 1800              		.loc 1 1663 14 is_stmt 0 view .LVU552
 1801 0000 C943     		mvns	r1, r1
 1802              	.LVL148:
 1803              		.loc 1 1663 12 view .LVU553
 1804 0002 0160     		str	r1, [r0]
1664:FWLIB/src/stm32f4xx_adc.c **** }
 1805              		.loc 1 1664 1 view .LVU554
 1806 0004 7047     		bx	lr
 1807              		.cfi_endproc
 1808              	.LFE158:
 1810              		.section	.text.ADC_GetITStatus,"ax",%progbits
 1811              		.align	1
 1812              		.global	ADC_GetITStatus
 1813              		.syntax unified
 1814              		.thumb
 1815              		.thumb_func
 1816              		.fpu fpv4-sp-d16
 1818              	ADC_GetITStatus:
 1819              	.LVL149:
 1820              	.LFB159:
ARM GAS  /tmp/ccVoyQ2j.s 			page 62


1665:FWLIB/src/stm32f4xx_adc.c **** 
1666:FWLIB/src/stm32f4xx_adc.c **** /**
1667:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Checks whether the specified ADC interrupt has occurred or not.
1668:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx:   where x can be 1, 2 or 3 to select the ADC peripheral.
1669:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt source to check. 
1670:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1671:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1672:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1673:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1674:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt mask                        
1675:FWLIB/src/stm32f4xx_adc.c ****   * @retval The new state of ADC_IT (SET or RESET).
1676:FWLIB/src/stm32f4xx_adc.c ****   */
1677:FWLIB/src/stm32f4xx_adc.c **** ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1678:FWLIB/src/stm32f4xx_adc.c **** {
 1821              		.loc 1 1678 1 is_stmt 1 view -0
 1822              		.cfi_startproc
 1823              		@ args = 0, pretend = 0, frame = 0
 1824              		@ frame_needed = 0, uses_anonymous_args = 0
 1825              		@ link register save eliminated.
 1826              		.loc 1 1678 1 is_stmt 0 view .LVU556
 1827 0000 10B4     		push	{r4}
 1828              	.LCFI15:
 1829              		.cfi_def_cfa_offset 4
 1830              		.cfi_offset 4, -4
1679:FWLIB/src/stm32f4xx_adc.c ****   ITStatus bitstatus = RESET;
 1831              		.loc 1 1679 3 is_stmt 1 view .LVU557
 1832              	.LVL150:
1680:FWLIB/src/stm32f4xx_adc.c ****   uint32_t itmask = 0, enablestatus = 0;
 1833              		.loc 1 1680 3 view .LVU558
1681:FWLIB/src/stm32f4xx_adc.c **** 
1682:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1683:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 1834              		.loc 1 1683 3 view .LVU559
1684:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT));
 1835              		.loc 1 1684 3 view .LVU560
1685:FWLIB/src/stm32f4xx_adc.c **** 
1686:FWLIB/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1687:FWLIB/src/stm32f4xx_adc.c ****   itmask = ADC_IT >> 8;
 1836              		.loc 1 1687 3 view .LVU561
1688:FWLIB/src/stm32f4xx_adc.c **** 
1689:FWLIB/src/stm32f4xx_adc.c ****   /* Get the ADC_IT enable bit status */
1690:FWLIB/src/stm32f4xx_adc.c ****   enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 1837              		.loc 1 1690 3 view .LVU562
 1838              		.loc 1 1690 23 is_stmt 0 view .LVU563
 1839 0002 4268     		ldr	r2, [r0, #4]
 1840              		.loc 1 1690 50 view .LVU564
 1841 0004 CCB2     		uxtb	r4, r1
 1842              		.loc 1 1690 47 view .LVU565
 1843 0006 0123     		movs	r3, #1
 1844 0008 A340     		lsls	r3, r3, r4
 1845              		.loc 1 1690 16 view .LVU566
 1846 000a 1340     		ands	r3, r3, r2
 1847              	.LVL151:
1691:FWLIB/src/stm32f4xx_adc.c **** 
1692:FWLIB/src/stm32f4xx_adc.c ****   /* Check the status of the specified ADC interrupt */
1693:FWLIB/src/stm32f4xx_adc.c ****   if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 1848              		.loc 1 1693 3 is_stmt 1 view .LVU567
ARM GAS  /tmp/ccVoyQ2j.s 			page 63


 1849              		.loc 1 1693 13 is_stmt 0 view .LVU568
 1850 000c 0268     		ldr	r2, [r0]
 1851              		.loc 1 1693 6 view .LVU569
 1852 000e 12EA1122 		ands	r2, r2, r1, lsr #8
 1853 0012 02D0     		beq	.L95
 1854              		.loc 1 1693 48 discriminator 1 view .LVU570
 1855 0014 2BB9     		cbnz	r3, .L96
1694:FWLIB/src/stm32f4xx_adc.c ****   {
1695:FWLIB/src/stm32f4xx_adc.c ****     /* ADC_IT is set */
1696:FWLIB/src/stm32f4xx_adc.c ****     bitstatus = SET;
1697:FWLIB/src/stm32f4xx_adc.c ****   }
1698:FWLIB/src/stm32f4xx_adc.c ****   else
1699:FWLIB/src/stm32f4xx_adc.c ****   {
1700:FWLIB/src/stm32f4xx_adc.c ****     /* ADC_IT is reset */
1701:FWLIB/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 1856              		.loc 1 1701 15 view .LVU571
 1857 0016 0020     		movs	r0, #0
 1858              	.LVL152:
 1859              		.loc 1 1701 15 view .LVU572
 1860 0018 00E0     		b	.L94
 1861              	.LVL153:
 1862              	.L95:
 1863              		.loc 1 1701 15 view .LVU573
 1864 001a 0020     		movs	r0, #0
 1865              	.LVL154:
 1866              	.L94:
1702:FWLIB/src/stm32f4xx_adc.c ****   }
1703:FWLIB/src/stm32f4xx_adc.c ****   /* Return the ADC_IT status */
1704:FWLIB/src/stm32f4xx_adc.c ****   return  bitstatus;
 1867              		.loc 1 1704 3 is_stmt 1 view .LVU574
1705:FWLIB/src/stm32f4xx_adc.c **** }
 1868              		.loc 1 1705 1 is_stmt 0 view .LVU575
 1869 001c 5DF8044B 		ldr	r4, [sp], #4
 1870              	.LCFI16:
 1871              		.cfi_remember_state
 1872              		.cfi_restore 4
 1873              		.cfi_def_cfa_offset 0
 1874 0020 7047     		bx	lr
 1875              	.LVL155:
 1876              	.L96:
 1877              	.LCFI17:
 1878              		.cfi_restore_state
1696:FWLIB/src/stm32f4xx_adc.c ****   }
 1879              		.loc 1 1696 15 view .LVU576
 1880 0022 0120     		movs	r0, #1
 1881              	.LVL156:
1696:FWLIB/src/stm32f4xx_adc.c ****   }
 1882              		.loc 1 1696 15 view .LVU577
 1883 0024 FAE7     		b	.L94
 1884              		.cfi_endproc
 1885              	.LFE159:
 1887              		.section	.text.ADC_ClearITPendingBit,"ax",%progbits
 1888              		.align	1
 1889              		.global	ADC_ClearITPendingBit
 1890              		.syntax unified
 1891              		.thumb
 1892              		.thumb_func
ARM GAS  /tmp/ccVoyQ2j.s 			page 64


 1893              		.fpu fpv4-sp-d16
 1895              	ADC_ClearITPendingBit:
 1896              	.LVL157:
 1897              	.LFB160:
1706:FWLIB/src/stm32f4xx_adc.c **** 
1707:FWLIB/src/stm32f4xx_adc.c **** /**
1708:FWLIB/src/stm32f4xx_adc.c ****   * @brief  Clears the ADCx's interrupt pending bits.
1709:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1710:FWLIB/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt pending bit to clear.
1711:FWLIB/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1712:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1713:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1714:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1715:FWLIB/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt mask                         
1716:FWLIB/src/stm32f4xx_adc.c ****   * @retval None
1717:FWLIB/src/stm32f4xx_adc.c ****   */
1718:FWLIB/src/stm32f4xx_adc.c **** void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1719:FWLIB/src/stm32f4xx_adc.c **** {
 1898              		.loc 1 1719 1 is_stmt 1 view -0
 1899              		.cfi_startproc
 1900              		@ args = 0, pretend = 0, frame = 0
 1901              		@ frame_needed = 0, uses_anonymous_args = 0
 1902              		@ link register save eliminated.
1720:FWLIB/src/stm32f4xx_adc.c ****   uint8_t itmask = 0;
 1903              		.loc 1 1720 3 view .LVU579
1721:FWLIB/src/stm32f4xx_adc.c ****   /* Check the parameters */
1722:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 1904              		.loc 1 1722 3 view .LVU580
1723:FWLIB/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT)); 
 1905              		.loc 1 1723 3 view .LVU581
1724:FWLIB/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1725:FWLIB/src/stm32f4xx_adc.c ****   itmask = (uint8_t)(ADC_IT >> 8);
 1906              		.loc 1 1725 3 view .LVU582
1726:FWLIB/src/stm32f4xx_adc.c ****   /* Clear the selected ADC interrupt pending bits */
1727:FWLIB/src/stm32f4xx_adc.c ****   ADCx->SR = ~(uint32_t)itmask;
 1907              		.loc 1 1727 3 view .LVU583
 1908              		.loc 1 1727 14 is_stmt 0 view .LVU584
 1909 0000 6FEA1121 		mvn	r1, r1, lsr #8
 1910              	.LVL158:
 1911              		.loc 1 1727 12 view .LVU585
 1912 0004 0160     		str	r1, [r0]
1728:FWLIB/src/stm32f4xx_adc.c **** }                    
 1913              		.loc 1 1728 1 view .LVU586
 1914 0006 7047     		bx	lr
 1915              		.cfi_endproc
 1916              	.LFE160:
 1918              		.text
 1919              	.Letext0:
 1920              		.file 2 "/home/bt0/stm32/compile-tool/gcc-arm-none-eabi-8-2018-q4-major-linux/gcc-arm-none-eabi-8-
 1921              		.file 3 "/home/bt0/stm32/compile-tool/gcc-arm-none-eabi-8-2018-q4-major-linux/gcc-arm-none-eabi-8-
 1922              		.file 4 "F4_CORE/core_cm4.h"
 1923              		.file 5 "USER/system_stm32f4xx.h"
 1924              		.file 6 "USER/stm32f4xx.h"
 1925              		.file 7 "FWLIB/inc/stm32f4xx_adc.h"
 1926              		.file 8 "FWLIB/inc/stm32f4xx_rcc.h"
ARM GAS  /tmp/ccVoyQ2j.s 			page 65


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_adc.c
     /tmp/ccVoyQ2j.s:18     .text.ADC_DeInit:0000000000000000 $t
     /tmp/ccVoyQ2j.s:26     .text.ADC_DeInit:0000000000000000 ADC_DeInit
     /tmp/ccVoyQ2j.s:54     .text.ADC_Init:0000000000000000 $t
     /tmp/ccVoyQ2j.s:61     .text.ADC_Init:0000000000000000 ADC_Init
     /tmp/ccVoyQ2j.s:170    .text.ADC_Init:000000000000004c $d
     /tmp/ccVoyQ2j.s:175    .text.ADC_StructInit:0000000000000000 $t
     /tmp/ccVoyQ2j.s:182    .text.ADC_StructInit:0000000000000000 ADC_StructInit
     /tmp/ccVoyQ2j.s:219    .text.ADC_CommonInit:0000000000000000 $t
     /tmp/ccVoyQ2j.s:226    .text.ADC_CommonInit:0000000000000000 ADC_CommonInit
     /tmp/ccVoyQ2j.s:286    .text.ADC_CommonInit:0000000000000024 $d
     /tmp/ccVoyQ2j.s:292    .text.ADC_CommonStructInit:0000000000000000 $t
     /tmp/ccVoyQ2j.s:299    .text.ADC_CommonStructInit:0000000000000000 ADC_CommonStructInit
     /tmp/ccVoyQ2j.s:326    .text.ADC_Cmd:0000000000000000 $t
     /tmp/ccVoyQ2j.s:333    .text.ADC_Cmd:0000000000000000 ADC_Cmd
     /tmp/ccVoyQ2j.s:364    .text.ADC_AnalogWatchdogCmd:0000000000000000 $t
     /tmp/ccVoyQ2j.s:371    .text.ADC_AnalogWatchdogCmd:0000000000000000 ADC_AnalogWatchdogCmd
     /tmp/ccVoyQ2j.s:406    .text.ADC_AnalogWatchdogThresholdsConfig:0000000000000000 $t
     /tmp/ccVoyQ2j.s:413    .text.ADC_AnalogWatchdogThresholdsConfig:0000000000000000 ADC_AnalogWatchdogThresholdsConfig
     /tmp/ccVoyQ2j.s:436    .text.ADC_AnalogWatchdogSingleChannelConfig:0000000000000000 $t
     /tmp/ccVoyQ2j.s:443    .text.ADC_AnalogWatchdogSingleChannelConfig:0000000000000000 ADC_AnalogWatchdogSingleChannelConfig
     /tmp/ccVoyQ2j.s:475    .text.ADC_TempSensorVrefintCmd:0000000000000000 $t
     /tmp/ccVoyQ2j.s:482    .text.ADC_TempSensorVrefintCmd:0000000000000000 ADC_TempSensorVrefintCmd
     /tmp/ccVoyQ2j.s:513    .text.ADC_TempSensorVrefintCmd:000000000000001c $d
     /tmp/ccVoyQ2j.s:518    .text.ADC_VBATCmd:0000000000000000 $t
     /tmp/ccVoyQ2j.s:525    .text.ADC_VBATCmd:0000000000000000 ADC_VBATCmd
     /tmp/ccVoyQ2j.s:556    .text.ADC_VBATCmd:000000000000001c $d
     /tmp/ccVoyQ2j.s:561    .text.ADC_RegularChannelConfig:0000000000000000 $t
     /tmp/ccVoyQ2j.s:568    .text.ADC_RegularChannelConfig:0000000000000000 ADC_RegularChannelConfig
     /tmp/ccVoyQ2j.s:771    .text.ADC_SoftwareStartConv:0000000000000000 $t
     /tmp/ccVoyQ2j.s:778    .text.ADC_SoftwareStartConv:0000000000000000 ADC_SoftwareStartConv
     /tmp/ccVoyQ2j.s:798    .text.ADC_GetSoftwareStartConvStatus:0000000000000000 $t
     /tmp/ccVoyQ2j.s:805    .text.ADC_GetSoftwareStartConvStatus:0000000000000000 ADC_GetSoftwareStartConvStatus
     /tmp/ccVoyQ2j.s:838    .text.ADC_EOCOnEachRegularChannelCmd:0000000000000000 $t
     /tmp/ccVoyQ2j.s:845    .text.ADC_EOCOnEachRegularChannelCmd:0000000000000000 ADC_EOCOnEachRegularChannelCmd
     /tmp/ccVoyQ2j.s:876    .text.ADC_ContinuousModeCmd:0000000000000000 $t
     /tmp/ccVoyQ2j.s:883    .text.ADC_ContinuousModeCmd:0000000000000000 ADC_ContinuousModeCmd
     /tmp/ccVoyQ2j.s:914    .text.ADC_DiscModeChannelCountConfig:0000000000000000 $t
     /tmp/ccVoyQ2j.s:921    .text.ADC_DiscModeChannelCountConfig:0000000000000000 ADC_DiscModeChannelCountConfig
     /tmp/ccVoyQ2j.s:958    .text.ADC_DiscModeCmd:0000000000000000 $t
     /tmp/ccVoyQ2j.s:965    .text.ADC_DiscModeCmd:0000000000000000 ADC_DiscModeCmd
     /tmp/ccVoyQ2j.s:996    .text.ADC_GetConversionValue:0000000000000000 $t
     /tmp/ccVoyQ2j.s:1003   .text.ADC_GetConversionValue:0000000000000000 ADC_GetConversionValue
     /tmp/ccVoyQ2j.s:1023   .text.ADC_GetMultiModeConversionValue:0000000000000000 $t
     /tmp/ccVoyQ2j.s:1030   .text.ADC_GetMultiModeConversionValue:0000000000000000 ADC_GetMultiModeConversionValue
     /tmp/ccVoyQ2j.s:1046   .text.ADC_GetMultiModeConversionValue:0000000000000008 $d
     /tmp/ccVoyQ2j.s:1051   .text.ADC_DMACmd:0000000000000000 $t
     /tmp/ccVoyQ2j.s:1058   .text.ADC_DMACmd:0000000000000000 ADC_DMACmd
     /tmp/ccVoyQ2j.s:1089   .text.ADC_DMARequestAfterLastTransferCmd:0000000000000000 $t
     /tmp/ccVoyQ2j.s:1096   .text.ADC_DMARequestAfterLastTransferCmd:0000000000000000 ADC_DMARequestAfterLastTransferCmd
     /tmp/ccVoyQ2j.s:1127   .text.ADC_MultiModeDMARequestAfterLastTransferCmd:0000000000000000 $t
     /tmp/ccVoyQ2j.s:1134   .text.ADC_MultiModeDMARequestAfterLastTransferCmd:0000000000000000 ADC_MultiModeDMARequestAfterLastTransferCmd
     /tmp/ccVoyQ2j.s:1165   .text.ADC_MultiModeDMARequestAfterLastTransferCmd:000000000000001c $d
     /tmp/ccVoyQ2j.s:1170   .text.ADC_InjectedChannelConfig:0000000000000000 $t
     /tmp/ccVoyQ2j.s:1177   .text.ADC_InjectedChannelConfig:0000000000000000 ADC_InjectedChannelConfig
     /tmp/ccVoyQ2j.s:1318   .text.ADC_InjectedSequencerLengthConfig:0000000000000000 $t
ARM GAS  /tmp/ccVoyQ2j.s 			page 66


     /tmp/ccVoyQ2j.s:1325   .text.ADC_InjectedSequencerLengthConfig:0000000000000000 ADC_InjectedSequencerLengthConfig
     /tmp/ccVoyQ2j.s:1362   .text.ADC_SetInjectedOffset:0000000000000000 $t
     /tmp/ccVoyQ2j.s:1369   .text.ADC_SetInjectedOffset:0000000000000000 ADC_SetInjectedOffset
     /tmp/ccVoyQ2j.s:1413   .text.ADC_ExternalTrigInjectedConvConfig:0000000000000000 $t
     /tmp/ccVoyQ2j.s:1420   .text.ADC_ExternalTrigInjectedConvConfig:0000000000000000 ADC_ExternalTrigInjectedConvConfig
     /tmp/ccVoyQ2j.s:1452   .text.ADC_ExternalTrigInjectedConvEdgeConfig:0000000000000000 $t
     /tmp/ccVoyQ2j.s:1459   .text.ADC_ExternalTrigInjectedConvEdgeConfig:0000000000000000 ADC_ExternalTrigInjectedConvEdgeConfig
     /tmp/ccVoyQ2j.s:1491   .text.ADC_SoftwareStartInjectedConv:0000000000000000 $t
     /tmp/ccVoyQ2j.s:1498   .text.ADC_SoftwareStartInjectedConv:0000000000000000 ADC_SoftwareStartInjectedConv
     /tmp/ccVoyQ2j.s:1518   .text.ADC_GetSoftwareStartInjectedConvCmdStatus:0000000000000000 $t
     /tmp/ccVoyQ2j.s:1525   .text.ADC_GetSoftwareStartInjectedConvCmdStatus:0000000000000000 ADC_GetSoftwareStartInjectedConvCmdStatus
     /tmp/ccVoyQ2j.s:1558   .text.ADC_AutoInjectedConvCmd:0000000000000000 $t
     /tmp/ccVoyQ2j.s:1565   .text.ADC_AutoInjectedConvCmd:0000000000000000 ADC_AutoInjectedConvCmd
     /tmp/ccVoyQ2j.s:1596   .text.ADC_InjectedDiscModeCmd:0000000000000000 $t
     /tmp/ccVoyQ2j.s:1603   .text.ADC_InjectedDiscModeCmd:0000000000000000 ADC_InjectedDiscModeCmd
     /tmp/ccVoyQ2j.s:1634   .text.ADC_GetInjectedConversionValue:0000000000000000 $t
     /tmp/ccVoyQ2j.s:1641   .text.ADC_GetInjectedConversionValue:0000000000000000 ADC_GetInjectedConversionValue
     /tmp/ccVoyQ2j.s:1687   .text.ADC_ITConfig:0000000000000000 $t
     /tmp/ccVoyQ2j.s:1694   .text.ADC_ITConfig:0000000000000000 ADC_ITConfig
     /tmp/ccVoyQ2j.s:1741   .text.ADC_GetFlagStatus:0000000000000000 $t
     /tmp/ccVoyQ2j.s:1748   .text.ADC_GetFlagStatus:0000000000000000 ADC_GetFlagStatus
     /tmp/ccVoyQ2j.s:1782   .text.ADC_ClearFlag:0000000000000000 $t
     /tmp/ccVoyQ2j.s:1789   .text.ADC_ClearFlag:0000000000000000 ADC_ClearFlag
     /tmp/ccVoyQ2j.s:1811   .text.ADC_GetITStatus:0000000000000000 $t
     /tmp/ccVoyQ2j.s:1818   .text.ADC_GetITStatus:0000000000000000 ADC_GetITStatus
     /tmp/ccVoyQ2j.s:1888   .text.ADC_ClearITPendingBit:0000000000000000 $t
     /tmp/ccVoyQ2j.s:1895   .text.ADC_ClearITPendingBit:0000000000000000 ADC_ClearITPendingBit

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
